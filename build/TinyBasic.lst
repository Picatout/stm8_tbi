ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                           000006    45         FLN_REJECTED=6 ; a memory full error occured while in *insert_line*. 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                           00000F    58         NAME_MAX_LEN=15  ; CONST and DIM variables maximum length 
                                     59 
                                     60 ;--------------------------------------
                                     61 ;   constantes related to Arduino 
                                     62 ;   API mapping 
                                     63 ;-------------------------------------
                           000000    64         INP=0
                           000001    65         OUTP=1 
                                     66 
                                     67 ;--------------------------------------
                                     68 ;       token attribute
                                     69 ;--------------------------------------
                                     70         ; bits 4:5 identify token group 
                                     71         ; 0x0n -> miscelinous 
                                     72         ; 0x1n -> +|- operators 
                                     73         ; 0x2n -> *|/|% operators
                                     74         ; 0x3n -> relational operators 
                           000080    75         TK_CMD=128      ; BASIC command   
                           000081    76         TK_IFUNC=129    ; BASIC integer function
                           000082    77         TK_CFUNC=130    ; BASIC character function
                           000083    78         TK_CONST=131    ; BASIC constant 
                           000084    79         TK_INTGR=132    ; 16 bits integer 
                           000085    80         TK_VAR=133
                           000086    81         TK_FLOAT=134    ; float32 
                           000087    82         TK_NOT=135
                           000088    83         TK_AND=136      ;
                           000089    84         TK_OR=137       ;
                           00008A    85         TK_XOR=138      ; 
                           000000    86         TK_NONE=0       ; not a token 
                           000002    87         TK_QSTR=2       ; quoted string  
                           000003    88         TK_LABEL=3      ; used for defined, constants, variables
                           000004    89         TK_CHAR=4       ; ASCII character 
                           000005    90         TK_ARRAY=5     ; array variable '@' 
                           000006    91         TK_LPAREN=6     ; left parenthesis '('
                           000007    92         TK_RPAREN=7     ; right parenthesis ')'
                           000008    93         TK_COMMA=8     ; item separator ',' 
                           000009    94         TK_SHARP=9     ; print colon width '#' 
                           00000A    95         TK_COLON=0xa      ; command separator ':' 
                                     96         
                           000010    97         TK_PLUS=0x10    ; addition operator '+'
                           000011    98         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    99         TK_MULT=0x20    ; multiplication operator '*'
                           000021   100         TK_DIV=0x21     ; division operator '/'
                           000022   101         TK_MOD=0x22     ; modulo operator '%'
                                    102 
                                    103         ; don't change these token values 
                                    104         ; values chosen to be used as a mask.
                                    105         ; bit 7   1 for dictionary words else 0 
                                    106         ; bits 6  always 0 
                                    107         ; bits 5:4 identify group 
                                    108         ; bits 3:0 token identifier inside group  
                           000031   109         TK_GT=0x31      ; relation operator '>'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000032   110         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   111         TK_GE=0x33      ; relation operator '>='
                           000034   112         TK_LT=0x34      ; relation operator '<'
                           000036   113         TK_LE=0x36      ; relation operator '<='
                           000035   114         TK_NE=0x35      ; relation operator '<>' not equal 
                                    115         ; token groups 
                           000030   116         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   117         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   118         TK_GRP_ADD=0x10  ; additive operators
                           000020   119         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   120         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   121         CMD_END=2 
                                    122 
                                    123 ;--------------------------------------
                                    124 ;   error codes 
                                    125 ;--------------------------------------
                           000000   126     ERR_NONE=0
                           000001   127     ERR_MEM_FULL=1 
                           000002   128     ERR_SYNTAX=2
                           000003   129     ERR_MATH_OVF=3
                           000004   130     ERR_DIV0=4 
                           000005   131     ERR_NO_LINE=5
                           000006   132     ERR_RUN_ONLY=6
                           000007   133     ERR_CMD_ONLY=7
                           000008   134     ERR_DUPLICATE=8
                           000009   135     ERR_NOT_FILE=9
                           00000A   136     ERR_BAD_VALUE=10
                           00000B   137     ERR_NO_ACCESS=11
                           00000C   138     ERR_NO_DATA=12 
                           00000D   139     ERR_NO_PROG=13
                           00000E   140     ERR_NO_FSPACE=14
                           00000F   141     ERR_BUF_FULL=15
                           000010   142     ERR_OVERFLOW=16 
                           000011   143     ERR_RD_ONLY=17
                           000012   144     ERR_NO_PROGRAM=18
                                    145 
                                    146 ;--------------------------------------
                                    147 ;   assembler flags 
                                    148 ;-------------------------------------
                                    149 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    150 
                                    151      .macro _usec_dly n 
                                    152     ldw x,#(16*n-2)/4
                                    153     decw x
                                    154     nop 
                                    155     jrne .-4
                                    156     .endm 
                                    157     
                                    158     ; load X register with 
                                    159     ; entry point of dictionary
                                    160     ; before calling 'search_dict'
                                    161     .macro _ldx_dict dict_name
                                    162     ldw x,#dict_name+2
                                    163     .endm 
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; reset BASIC pointer
                                    166     ; to beginning of last token
                                    167     ; extracted except if it was end of line 
                                    168     .macro _unget_token 
                                    169      mov in,in.saved  
                                    170     .endm
                                    171 
                                    172 
                                    173     ; extract code address for 
                                    174     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    175     .macro _get_code_addr
                                    176         ldw x,(x)
                                    177         inc in 
                                    178         inc in 
                                    179     .endm 
                                    180 
                                    181 
                                    182 
                                    183 ;---------------------------------------
                                    184 ;    xtack manipulation macros 
                                    185 ;    Y is used as xstack pointer  
                                    186 ;----------------------------------------
                                    187     ; pop in A:X from XSTACK 
                                    188     .macro _xpop 
                                    189     ld a,(y)
                                    190     ldw x,y 
                                    191     ldw x,(1,x)
                                    192     addw y,#CELL_SIZE 
                                    193     .endm 
                                    194 
                                    195     ; push A:X  to XSTACK 
                                    196     .macro _xpush 
                                    197     subw y,#CELL_SIZE
                                    198     ld (y),a 
                                    199     ldw (1,y),x 
                                    200     .endm 
                                    201 
                                    202     ; drop from XSTACK 
                                    203     .macro _xdrop 
                                    204     addw y,#CELL_SIZE 
                                    205     .endm 
                                    206 
                                    207     ; @T fetch top xstack 
                                    208     .macro _at_top
                                    209     ld a,(y)
                                    210     ldw x,y 
                                    211     ldw x,(1,x)
                                    212     .endm 
                                    213 
                                    214     ; @N  fetch next on xstack 
                                    215     .macro _at_next 
                                    216     ld a,(3,y)
                                    217     ldw x,y 
                                    218     ldw x,(4,x)
                                    219     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220 
                                    221     ; !T put on top of xtack 
                                    222     .macro _store_top 
                                    223     ld (y),a 
                                    224     ldw (1,y),x     
                                    225     .endm 
                                    226 
                                    227     ; !N put next on xstack 
                                    228     .macro _store_next 
                                    229     ld (3,y),a 
                                    230     ldw (4,y),x 
                                    231     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTI_IDX=PRTG_IDX+2
                           000076    84     QKEY_IDX=PRTI_IDX+2
                           000078    85     READ_IDX=QKEY_IDX+2
                           00007A    86     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007C    87 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00007E    88     REST_IDX=REM_IDX+2 ; RESTORE
                           000080    89     RET_IDX=REST_IDX+2  ; RETURN 
                           000082    90     RND_IDX=RET_IDX+2 ; RANDOM 
                           000084    91     RSHIFT_IDX=RND_IDX+2
                           000086    92     RUN_IDX=RSHIFT_IDX+2
                           000088    93     FREE_IDX=RUN_IDX+2
                           00008A    94     SLEEP_IDX=FREE_IDX+2
                           00008C    95     SPIRD_IDX=SLEEP_IDX+2
                           00008E    96     SPIEN_IDX=SPIRD_IDX+2
                           000090    97     SPISEL_IDX=SPIEN_IDX+2
                           000092    98     SPIWR_IDX=SPISEL_IDX+2
                           000094    99     STEP_IDX=SPIWR_IDX+2
                           000096   100     STOP_IDX=STEP_IDX+2
                           000098   101     TICKS_IDX=STOP_IDX+2
                           00009A   102     TIMER_IDX=TICKS_IDX+2
                           00009C   103     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           00009E   104     TO_IDX=TMROUT_IDX+2
                           0000A0   105     TONE_IDX=TO_IDX+2
                           0000A2   106     UBOUND_IDX=TONE_IDX+2
                           0000A4   107     UFLASH_IDX=UBOUND_IDX+2
                           0000A6   108     UNTIL_IDX=UFLASH_IDX+2
                           0000A8   109     USR_IDX=UNTIL_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           0000AA   110     WAIT_IDX=USR_IDX+2
                           0000AC   111     WORDS_IDX=WAIT_IDX+2
                           0000AE   112     WRITE_IDX=WORDS_IDX+2
                           0000B0   113     SIZE_IDX=WRITE_IDX+2 
                           0000B2   114     ON_IDX=SIZE_IDX+2 
                           0000B4   115     GET_IDX=ON_IDX+2
                           0000B6   116     CONST_IDX=GET_IDX+2
                           0000B8   117     EEFREE_IDX=CONST_IDX+2
                                    118      
                                    119     ; keep these 3 at end
                                    120     ; these have no entry in code_addr 
                           0000F8   121     NOT_IDX=248
                           0000FA   122     AND_IDX=250 
                           0000FC   123     OR_IDX=252 
                           0000FE   124     XOR_IDX=254    
                                    125 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     34   
                                     35 
                                     36 ;;-----------------------------------
                                     37     .area SSEG (ABS)
                                     38 ;; working buffers and stack at end of RAM. 	
                                     39 ;;-----------------------------------
      001668                         40     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE*CELL_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         41 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016B8                         42 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         43 pad:: .ds PAD_SIZE             ; working buffer
      001738                         44 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      001774                         45 xstack_unf:: ; xstack underflow 
      001774                         46 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         47 stack_unf: ; stack underflow ; control_stack bottom 
                                     48 
                                     49 ;;--------------------------------------
                                     50     .area HOME 
                                     51 ;; interrupt vector table at 0x8000
                                     52 ;;--------------------------------------
                                     53 
      000000 82 00 00 B5             54     int cold_start			; RESET vector 
      000004 82 00 00 12             55 	int SysCall ; TRAP  BASIC sys() calls 
      000008 82 00 00 00             56 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             57 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             58 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             59 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             60 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             61 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             62 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 36             63 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             64 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             65 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             66 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             67 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             68 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             69 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             70 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             71 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             72 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             73 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 7C             74 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             75 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             76 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             77 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             78 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 13             79 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             80 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             81 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             82 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             83 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             84 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             85 	int NonHandledInterrupt ;int29  not used
                                     86 
                                     87 ;---------------------------------------
                                     88     .area CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                     89 ;---------------------------------------
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ; non handled interrupt 
                                     93 ; reset MCU
                                     94 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         95 NonHandledInterrupt:
      000000                         96 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                     97 
                                     98 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     99 ; auto wakeup from halt
                                    100 ; at iret, program continue 
                                    101 ; after hatl instruction
                                    102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        103 AWUHandler:
      000004 72 19 50 F0      [ 1]  104 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  105 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  106 	clr AWU_TBR 
      000011 80               [11]  107 	iret
                                    108 
                                    109 ;------------------------------------
                                    110 ; software interrupt handler  
                                    111 ;------------------------------------
      000012                        112 SysCall:
                                    113 
      000012 80               [11]  114 	iret 
                                    115 
                                    116 ;------------------------------
                                    117 ; TIMER 4 is used to maintain 
                                    118 ; a milliseconds 'ticks' counter
                                    119 ; and decrement 'timer' varaiable
                                    120 ; ticks range {0..2^23-1}
                                    121 ;--------------------------------
      000013                        122 Timer4UpdateHandler:
      000013 72 5F 53 42      [ 1]  123 	clr TIM4_SR 
      000017 C6 00 0F         [ 1]  124 	ld a,ticks 
      00001A CE 00 10         [ 2]  125 	ldw x,ticks+1
      00001D 1C 00 01         [ 2]  126 	addw x,#1 
      000020 A9 00            [ 1]  127 	adc a,#0 
      000022 2A 02            [ 1]  128 	jrpl 0$
                                    129 ; reset to 0 when negatif 
      000024 4F               [ 1]  130 	clr a 
      000025 5F               [ 1]  131 	clrw x 
      000026 C7 00 0F         [ 1]  132 0$:	ld ticks,a 
      000029 CF 00 10         [ 2]  133 	ldw ticks+1,x 
      00002C CE 00 12         [ 2]  134 	ldw x,timer
      00002F 27 04            [ 1]  135 	jreq 1$
      000031 5A               [ 2]  136 	decw x 
      000032 CF 00 12         [ 2]  137 	ldw timer,x 
      000035                        138 1$:	
      000035 80               [11]  139 	iret 
                                    140 
                                    141 ;------------------------------------
                                    142 ; Triggered by pressing USER UserButton 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    143 ; on NUCLEO card.
                                    144 ; This is used to abort a progam lock 
                                    145 ; in infinite loop. 
                                    146 ;------------------------------------
      000036                        147 UserButtonHandler:
                                    148 ; wait button release
      000036 5F               [ 1]  149 	clrw x
      000037 5A               [ 2]  150 1$: decw x 
      000038 26 FD            [ 1]  151 	jrne 1$
      00003A 72 09 50 15 F8   [ 2]  152 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    153 ; if MCU suspended by SLEEP resume program
      00003F 72 07 00 22 05   [ 2]  154     btjf flags,#FSLEEP,2$
      000044 72 17 00 22      [ 1]  155 	bres flags,#FSLEEP 
      000048 80               [11]  156 	iret
      000049                        157 2$:	
      000049                        158 user_interrupted:
      000049 72 00 00 22 02   [ 2]  159     btjt flags,#FRUN,4$
      00004E 20 0A            [ 2]  160 	jra UBTN_Handler_exit 
      000050                        161 4$:	; program interrupted by user 
      000050 72 11 00 22      [ 1]  162 	bres flags,#FRUN 
      000054 AE 00 62         [ 2]  163 	ldw x,#USER_ABORT
      000057 CD 09 5C         [ 4]  164 	call puts 
      00005A                        165 UBTN_Handler_exit:
      00005A AE 17 FF         [ 2]  166     ldw x,#STACK_EMPTY 
      00005D 94               [ 1]  167     ldw sp,x
      00005E 9A               [ 1]  168 	rim 
      00005F CC 17 31         [ 2]  169 5$:	jp warm_start
                                    170 
      000062 0A 50 72 6F 67 72 61   171 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    172 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    174 ;    peripherals initialization
                                    175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    176 
                                    177 ;----------------------------------------
                                    178 ; inialize MCU clock 
                                    179 ; input:
                                    180 ;   A 		source  HSI | 1 HSE 
                                    181 ;   XL      CLK_CKDIVR , clock divisor 
                                    182 ; output:
                                    183 ;   none 
                                    184 ;----------------------------------------
      00007D                        185 clock_init:	
      00007D C1 50 C3         [ 1]  186 	cp a,CLK_CMSR 
      000080 27 0C            [ 1]  187 	jreq 2$ ; no switching required 
                                    188 ; select clock source 
      000082 72 12 50 C5      [ 1]  189 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000086 C7 50 C4         [ 1]  190 	ld CLK_SWR,a
      000089 C1 50 C3         [ 1]  191 1$:	cp a,CLK_CMSR
      00008C 26 FB            [ 1]  192 	jrne 1$
      00008E                        193 2$: 	
                                    194 ; HSI and cpu clock divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      00008E 9F               [ 1]  195 	ld a,xl 
      00008F C7 50 C6         [ 1]  196 	ld CLK_CKDIVR,a  
      000092 81               [ 4]  197 	ret
                                    198 
                                    199 ;----------------------------------
                                    200 ; TIMER2 used as audio tone output 
                                    201 ; on port D:5. CN9-6
                                    202 ; channel 1 configured as PWM mode 1 
                                    203 ;-----------------------------------  
                                    204 
      000093                        205 timer2_init:
      000093 72 1A 50 C7      [ 1]  206 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000097 35 60 53 05      [ 1]  207  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      00009B 35 08 53 0C      [ 1]  208 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009F 81               [ 4]  209 	ret 
                                    210 
                                    211 ;---------------------------------
                                    212 ; TIM4 is configured to generate an 
                                    213 ; interrupt every millisecond 
                                    214 ;----------------------------------
      0000A0                        215 timer4_init:
      0000A0 72 18 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A4 35 07 53 45      [ 1]  217 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A8 35 7D 53 46      [ 1]  218 	mov TIM4_ARR,#125 ; set for 1msec.
      0000AC 35 05 53 40      [ 1]  219 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000B0 72 10 53 41      [ 1]  220 	bset TIM4_IER,#TIM4_IER_UIE
      0000B4 81               [ 4]  221 	ret
                                    222 
                                    223 ;-------------------------------------
                                    224 ;  initialization entry point 
                                    225 ;-------------------------------------
      0000B5                        226 cold_start:
                                    227 ;set stack 
      0000B5 AE 17 FF         [ 2]  228 	ldw x,#STACK_EMPTY
      0000B8 94               [ 1]  229 	ldw sp,x
                                    230 ; clear all ram 
      0000B9 7F               [ 1]  231 0$: clr (x)
      0000BA 5A               [ 2]  232 	decw x 
      0000BB 26 FC            [ 1]  233 	jrne 0$
                                    234 ; activate pull up on all inputs 
      0000BD A6 FF            [ 1]  235 	ld a,#255 
      0000BF C7 50 03         [ 1]  236 	ld PA_CR1,a 
      0000C2 C7 50 08         [ 1]  237 	ld PB_CR1,a 
      0000C5 C7 50 0D         [ 1]  238 	ld PC_CR1,a 
      0000C8 C7 50 12         [ 1]  239 	ld PD_CR1,a 
      0000CB C7 50 17         [ 1]  240 	ld PE_CR1,a 
      0000CE C7 50 1C         [ 1]  241 	ld PF_CR1,a 
      0000D1 C7 50 21         [ 1]  242 	ld PG_CR1,a 
      0000D4 C7 50 2B         [ 1]  243 	ld PI_CR1,a
                                    244 ; set LD2 pin as output 
      0000D7 72 1A 50 0D      [ 1]  245     bset PC_CR1,#LED2_BIT
      0000DB 72 1A 50 0E      [ 1]  246     bset PC_CR2,#LED2_BIT
      0000DF 72 1A 50 0C      [ 1]  247     bset PC_DDR,#LED2_BIT
      0000E3 72 1B 50 0A      [ 1]  248 	bres PC_ODR,#LED2_BIT 
                                    249 ; disable schmitt triggers on Arduino CN4 analog inputs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0000E7 55 00 3F 54 07   [ 1]  250 	mov ADC_TDRL,0x3f
                                    251 ; disable peripherals clocks
                                    252 ;	clr CLK_PCKENR1 
                                    253 ;	clr CLK_PCKENR2
      0000EC 72 5F 50 F2      [ 1]  254 	clr AWU_TBR 
      0000F0 72 14 50 CA      [ 1]  255 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    256 ; select internal clock no divisor: 16 Mhz 	
      0000F4 A6 E1            [ 1]  257 	ld a,#CLK_SWR_HSI 
      0000F6 5F               [ 1]  258 	clrw x  
      0000F7 CD 00 7D         [ 4]  259     call clock_init 
      0000FA CD 00 A0         [ 4]  260 	call timer4_init
      0000FD CD 00 93         [ 4]  261 	call timer2_init
                                    262 ; UART1 at 115200 BAUD
      000100 CD 08 BA         [ 4]  263 	call uart1_init
                                    264 ; activate PE_4 (user button interrupt)
      000103 72 18 50 18      [ 1]  265     bset PE_CR2,#USR_BTN_BIT 
                                    266 ; display system information
      000107 9A               [ 1]  267 	rim ; enable interrupts 
      000108 72 5C 00 17      [ 1]  268 	inc seedy+1 
      00010C 72 5C 00 15      [ 1]  269 	inc seedx+1 
      000110 CD 1D 58         [ 4]  270 	call func_eefree 
      000113 CD 1C F9         [ 4]  271 	call ubound 
      000116 CD 14 B1         [ 4]  272 	call clear_basic
      000119 CD 26 0F         [ 4]  273 	call beep_1khz  
      00011C CD 14 5E         [ 4]  274 	call system_information
      00011F                        275 2$:	
                                    276 ; check for autorun application
      00011F CE 40 00         [ 2]  277 	ldw x,EEPROM_BASE 
      000122 C3 31 FF         [ 2]  278 	cpw x,AR_SIGN 
      000125 27 03            [ 1]  279 	jreq run_app
      000127 CC 17 31         [ 2]  280 	jp warm_start 
      00012A                        281 run_app:
      00012A 4F               [ 1]  282 	clr a 
      00012B CE 40 02         [ 2]  283 	ldw x,EEPROM_BASE+2
      00012E CD 25 15         [ 4]  284 	call is_program_addr 
      000131 27 03            [ 1]  285 	jreq 1$
      000133 CC 17 31         [ 2]  286 	jp warm_start
      000136                        287 1$:	
                                    288 ; run application in FLASH|EEPROM 
      000136 90 CE 17 73      [ 2]  289 	ldw y,XSTACK_EMPTY
      00013A CD 14 8F         [ 4]  290 	call warm_init
      00013D CE 40 02         [ 2]  291 	ldw x,EEPROM_BASE+2 
      000140 CF 00 1B         [ 2]  292 	ldw txtbgn,x
      000143 1D 00 02         [ 2]  293 	subw x,#2 
      000146 FE               [ 2]  294 	ldw x,(x)
      000147 72 BB 00 1B      [ 2]  295 	addw x,txtbgn 
      00014B CF 00 1D         [ 2]  296 	ldw txtend,x 
      00014E AE 01 5C         [ 2]  297 	ldw x,#AUTO_RUN 
      000151 CD 09 5C         [ 4]  298 	call puts 
      000154 CD 1E 6C         [ 4]  299 	call program_info 
      000157 CC 25 85         [ 2]  300 	jp run_it_02  
      00015A 20 FE            [ 2]  301     jra .  
                                    302 
      00015C 20 61 75 74 6F 20 72   303 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    304 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00016F                         37 dup24:
      00016F                         38     _at_top 
      00016F 90 F6            [ 1]    1     ld a,(y)
      000171 93               [ 1]    2     ldw x,y 
      000172 EE 01            [ 2]    3     ldw x,(1,x)
      000174                         39     _xpush 
      000174 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000178 90 F7            [ 1]    2     ld (y),a 
      00017A 90 EF 01         [ 2]    3     ldw (1,y),x 
      00017D 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      00017E                         48 add24: ; ( N T -- N+T )
      00017E                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00017E 90 F6            [ 1]    1     ld a,(y)
      000180 93               [ 1]    2     ldw x,y 
      000181 EE 01            [ 2]    3     ldw x,(1,x)
      000183 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000187 89               [ 2]   50     pushw x  
      000188 88               [ 1]   51     push a  
      000189                         52     _at_top  
      000189 90 F6            [ 1]    1     ld a,(y)
      00018B 93               [ 1]    2     ldw x,y 
      00018C EE 01            [ 2]    3     ldw x,(1,x)
      00018E 72 FB 02         [ 2]   53     addw x,(2,sp)
      000191 19 01            [ 1]   54     adc a, (1,sp)
      000193                         55     _store_top 
      000193 90 F7            [ 1]    1     ld (y),a 
      000195 90 EF 01         [ 2]    2     ldw (1,y),x     
      000198                         56     _drop 3 
      000198 5B 03            [ 2]    1     addw sp,#3 
      00019A 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      00019B                         63 sub24: ; ( N T -- N-T ) 
      00019B                         64     _xpop 
      00019B 90 F6            [ 1]    1     ld a,(y)
      00019D 93               [ 1]    2     ldw x,y 
      00019E EE 01            [ 2]    3     ldw x,(1,x)
      0001A0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001A4 89               [ 2]   65     pushw x 
      0001A5 88               [ 1]   66     push  a
      0001A6                         67     _at_top  
      0001A6 90 F6            [ 1]    1     ld a,(y)
      0001A8 93               [ 1]    2     ldw x,y 
      0001A9 EE 01            [ 2]    3     ldw x,(1,x)
      0001AB 72 F0 02         [ 2]   68     subw x,(2,sp) 
      0001AE 12 01            [ 1]   69     sbc a, (1,sp)
      0001B0                         70     _store_top  
      0001B0 90 F7            [ 1]    1     ld (y),a 
      0001B2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001B5                         71     _drop 3 
      0001B5 5B 03            [ 2]    1     addw sp,#3 
      0001B7 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001B8                         77 cp24:
      0001B8                         78     _xpop 
      0001B8 90 F6            [ 1]    1     ld a,(y)
      0001BA 93               [ 1]    2     ldw x,y 
      0001BB EE 01            [ 2]    3     ldw x,(1,x)
      0001BD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001C1 C7 00 0C         [ 1]   79     ld acc24,a 
      0001C4 CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      0001C7                         81     _at_top 
      0001C7 90 F6            [ 1]    1     ld a,(y)
      0001C9 93               [ 1]    2     ldw x,y 
      0001CA EE 01            [ 2]    3     ldw x,(1,x)
      0001CC 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001D0 C2 00 0C         [ 1]   83     sbc a,acc24
      0001D3 2F 08            [ 1]   84     jrslt 1$
      0001D5 26 0A            [ 1]   85     jrne 2$
      0001D7 5D               [ 2]   86     tnzw x 
      0001D8 26 07            [ 1]   87     jrne 2$
      0001DA 4F               [ 1]   88     clr a 
      0001DB 20 06            [ 2]   89     jra 9$ 
      0001DD                         90 1$: ; i1 < i2 
      0001DD A6 FF            [ 1]   91     ld a,#255
      0001DF 20 02            [ 2]   92     jra 9$ 
      0001E1                         93 2$: ; i1 > i2 
      0001E1 A6 01            [ 1]   94     ld a,#1 
      0001E3 5F               [ 1]   95 9$: clrw x
      0001E4                         96      _store_top 
      0001E4 90 F7            [ 1]    1     ld (y),a 
      0001E6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001E9 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001EA                        103 cp24_ax:
      0001EA 88               [ 1]  104     push a 
      0001EB C3 00 0D         [ 2]  105     cpw x,acc16 
      0001EE C2 00 0C         [ 1]  106     sbc a,acc24
      0001F1 84               [ 1]  107     pop a 
      0001F2 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001F3                        115 abs24: ; ( i -- u )
      0001F3 90 F6            [ 1]  116     ld a,(y)
      0001F5 A1 80            [ 1]  117     cp a,#0x80 
      0001F7 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001F9 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001FA                        124 cpl24:  ; i -- ~i 
      0001FA 90 73            [ 1]  125     cpl (y) 
      0001FC 90 63 01         [ 1]  126     cpl (1,y)
      0001FF 90 63 02         [ 1]  127     cpl (2,y)
      000202 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      000203                        133 neg24: ; (i -- -i )
      000203                        134     _at_top
      000203 90 F6            [ 1]    1     ld a,(y)
      000205 93               [ 1]    2     ldw x,y 
      000206 EE 01            [ 2]    3     ldw x,(1,x)
      000208 43               [ 1]  135     cpl  a  
      000209 53               [ 2]  136     cplw x 
      00020A 1C 00 01         [ 2]  137     addw x,#1
      00020D A9 00            [ 1]  138     adc a,#0
      00020F                        139     _store_top  
      00020F 90 F7            [ 1]    1     ld (y),a 
      000211 90 EF 01         [ 2]    2     ldw (1,y),x     
      000214 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000215                        145 neg_ax:
      000215 43               [ 1]  146     cpl  a  
      000216 53               [ 2]  147     cplw x 
      000217 1C 00 01         [ 2]  148     addw x,#1
      00021A A9 00            [ 1]  149     adc a,#0
      00021C 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      00021D                        155 neg_acc24: ; 
      00021D 72 53 00 0C      [ 1]  156     cpl acc24 
      000221 72 53 00 0D      [ 1]  157     cpl acc16 
      000225 72 53 00 0E      [ 1]  158     cpl acc8
      000229 72 5C 00 0E      [ 1]  159     inc acc8 
      00022D 26 0A            [ 1]  160     jrne 9$
      00022F 72 5C 00 0D      [ 1]  161     inc acc16 
      000233 26 04            [ 1]  162     jrne 9$
      000235 72 5C 00 0C      [ 1]  163     inc acc24 
      000239 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      00023A                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      00023A 88               [ 1]  181     push a 
      00023B 72 5F 00 0B      [ 1]  182 	clr acc32
      00023F 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      000243 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000246 97               [ 1]  186     ld xl,a 
      000247 7B 01            [ 1]  187     ld a,(U8,sp)
      000249 42               [ 4]  188     mul x,a 
      00024A CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      00024D 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      000250 97               [ 1]  192     ld xl,a 
      000251 7B 01            [ 1]  193     ld a,(U8,sp) 
      000253 42               [ 4]  194     mul x,a 
      000254 72 BB 00 0C      [ 2]  195     addw x,acc24
      000258 72 59 00 0B      [ 1]  196     rlc acc32 
      00025C CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00025F 90 F6            [ 1]  199     ld a,(Y)
      000261 97               [ 1]  200     ld xl,a 
      000262 7B 01            [ 1]  201     ld a,(U8,sp)
      000264 42               [ 4]  202     mul x,a 
      000265 72 BB 00 0B      [ 2]  203     addw x,acc32
      000269 02               [ 1]  204     rlwa x 
      00026A 4D               [ 1]  205     tnz a 
      00026B 27 05            [ 1]  206     jreq 1$
      00026D A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00026F CC 16 A7         [ 2]  208     jp tb_error 
      000272                        209 1$:
      000272 9E               [ 1]  210     ld a,xh  
      000273 CE 00 0D         [ 2]  211     ldw x,acc16   
      000276                        212     _drop VSIZE 
      000276 5B 01            [ 2]    1     addw sp,#VSIZE 
      000278 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000279                        224 mul24:
      000279                        225     _vars VSIZE
      000279 52 07            [ 2]    1     sub sp,#VSIZE 
      00027B 5F               [ 1]  226     clrw x 
      00027C 1F 01            [ 2]  227     ldw (PROD,sp),x 
      00027E 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      000280                        229     _xpop 
      000280 90 F6            [ 1]    1     ld a,(y)
      000282 93               [ 1]    2     ldw x,y 
      000283 EE 01            [ 2]    3     ldw x,(1,x)
      000285 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000289 4D               [ 1]  230     tnz a 
      00028A 2A 05            [ 1]  231     jrpl 0$
      00028C 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      00028E CD 02 15         [ 4]  233     call neg_ax 
      000291                        234 0$:    
      000291 6B 05            [ 1]  235     ld (N1,sp),a 
      000293 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000295 90 7D            [ 1]  237     tnz (Y)
      000297 2A 05            [ 1]  238     jrpl 2$ 
      000299 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      00029B CD 02 03         [ 4]  240     call neg24
      00029E                        241 2$: 
      00029E 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      0002A0 27 0A            [ 1]  243     jreq 4$
      0002A2 CD 02 3A         [ 4]  244     call mulu24_8
      0002A5 4D               [ 1]  245     tnz a 
      0002A6 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      0002A8 6B 01            [ 1]  247     ld (PROD,sp),a
      0002AA 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      0002AC                        249 4$:
      0002AC 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      0002AE 27 0D            [ 1]  251     jreq 5$
      0002B0 CD 02 3A         [ 4]  252     call mulu24_8
      0002B3 4D               [ 1]  253     tnz a 
      0002B4 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002B6 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002B9 29 29            [ 1]  256     jrv 8$ ; overflow
      0002BB 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002BD                        258 5$:
      0002BD 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002BF 27 10            [ 1]  260     jreq 6$
      0002C1 CD 02 3A         [ 4]  261     call mulu24_8
      0002C4 01               [ 1]  262     rrwa x 
      0002C5 5D               [ 2]  263     tnzw x 
      0002C6 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002C8 4D               [ 1]  265     tnz a 
      0002C9 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002CB 1B 01            [ 1]  267     add a,(PROD,sp)
      0002CD 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002CF 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002D1                        270 6$:
      0002D1 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002D3 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002D5 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002D7 27 03            [ 1]  274     jreq 9$
      0002D9 CD 02 15         [ 4]  275     call neg_ax 
      0002DC                        276 9$:
      0002DC                        277     _store_top 
      0002DC 90 F7            [ 1]    1     ld (y),a 
      0002DE 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002E1                        278     _drop VSIZE 
      0002E1 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002E3 81               [ 4]  279     ret 
      0002E4                        280 8$: ; overflow
      0002E4 A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0002E6 CC 16 A7         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002E9                        296 divu24_8:
      0002E9 89               [ 2]  297 	pushw x ; save x
      0002EA 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002EB CE 00 0C         [ 2]  300 	ldw x,acc24
      0002EE 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002F0 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002F1 88               [ 1]  303 	push a  ;save remainder
      0002F2 CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002F5 84               [ 1]  305 	pop a
      0002F6 95               [ 1]  306 	ld xh,a
      0002F7 C6 00 0E         [ 1]  307 	ld a,acc8
      0002FA 97               [ 1]  308 	ld xl,a
      0002FB 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002FD 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002FE 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      000300 9F               [ 1]  312 	ld a,xl
      000301 C7 00 0E         [ 1]  313 	ld acc8,a
      000304 84               [ 1]  314 	pop a
      000305 85               [ 2]  315 	popw x
      000306 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      000307                        332 div24:
      000307                        333     _vars VSIZE 
      000307 52 06            [ 2]    1     sub sp,#VSIZE 
      000309 0F 06            [ 1]  334     clr (RSIGN,sp)
      00030B 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00030D                        336     _xpop 
      00030D 90 F6            [ 1]    1     ld a,(y)
      00030F 93               [ 1]    2     ldw x,y 
      000310 EE 01            [ 2]    3     ldw x,(1,x)
      000312 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000316 4D               [ 1]  337     tnz a 
      000317 2A 05            [ 1]  338     jrpl 0$ 
      000319 03 05            [ 1]  339     cpl (QSIGN,sp)
      00031B CD 02 15         [ 4]  340     call neg_ax
      00031E                        341 0$:
      00031E 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      000320 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      000322 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      000324 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000326 26 05            [ 1]  346     jrne 1$ 
      000328 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      00032A CC 16 A7         [ 2]  348     jp tb_error 
      00032D                        349 1$: ; dividend  
      00032D                        350     _at_top
      00032D 90 F6            [ 1]    1     ld a,(y)
      00032F 93               [ 1]    2     ldw x,y 
      000330 EE 01            [ 2]    3     ldw x,(1,x)
      000332 4D               [ 1]  351     tnz a 
      000333 2A 07            [ 1]  352     jrpl 2$
      000335 CD 02 15         [ 4]  353     call neg_ax
      000338 03 05            [ 1]  354     cpl (QSIGN,sp)
      00033A 03 06            [ 1]  355     cpl (RSIGN,sp)
      00033C                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      00033C                        359     _store_top 
      00033C 90 F7            [ 1]    1     ld (y),a 
      00033E 90 EF 01         [ 2]    2     ldw (1,y),x     
      000341 A6 18            [ 1]  360     ld a,#24 
      000343 6B 04            [ 1]  361     ld (CNTR,sp),a
      000345 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000347 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000349 CD 01 EA         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      00034C 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00034E C6 00 0C         [ 1]  368     ld a,acc24 
      000351 CE 00 0D         [ 2]  369     ldw x,acc16 
      000354 72 5F 00 0C      [ 1]  370     clr acc24 
      000358 72 5F 00 0D      [ 1]  371     clr acc16 
      00035C 72 5F 00 0E      [ 1]  372     clr acc8 
      000360 20 26            [ 2]  373     jra 6$
      000362                        374 22$:     
      000362 4F               [ 1]  375     clr a 
      000363 5F               [ 1]  376     clrw x 
      000364 98               [ 1]  377     rcf  
      000365                        378 3$: ; shift carry in acc24 bit 0 
      000365 90 69 02         [ 1]  379     rlc (2,y) 
      000368 90 69 01         [ 1]  380     rlc (1,y)
      00036B 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00036D 59               [ 2]  382     rlcw x  
      00036E 49               [ 1]  383     rlc a
      00036F 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      000372 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000374 24 05            [ 1]  386     jrnc 5$
      000376 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000379 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      00037B                        389 5$: ; shift carry in QUOTIENT 
      00037B 8C               [ 1]  390     ccf
      00037C 0A 04            [ 1]  391     dec (CNTR,sp)
      00037E 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      000380 90 69 02         [ 1]  394     rlc (2,y)
      000383 90 69 01         [ 1]  395     rlc (1,y) 
      000386 90 79            [ 1]  396     rlc (y) 
      000388                        397 6$:    
      000388 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      00038A 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      00038C 0D 05            [ 1]  400     tnz (QSIGN,sp)
      00038E 27 03            [ 1]  401     jreq 8$
      000390 CD 02 03         [ 4]  402     call neg24
      000393                        403 8$: 
      000393 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000395 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000397                        406 81$:
      000397 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000399 27 03            [ 1]  408     jreq 9$
      00039B CD 02 15         [ 4]  409     call neg_ax       
      00039E                        410 9$: _drop VSIZE 
      00039E 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A0 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      0003A1                        423 mod24:
      0003A1 CD 03 07         [ 4]  424     call div24 
      0003A4                        425     _store_top  ; replace quotient by remainder 
      0003A4 90 F7            [ 1]    1     ld (y),a 
      0003A6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003A9 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;  set DEBUG=1 in config.inc 
                                     22 ;;  to enable it.
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 	.macro _dbg_prt_regs
                                     26 	.if DEBUG 
                                     27 		call print_registers  
                                     28 	.endif 
                                     29 	.endm 
                                     30 
                                     31 	.macro _dbg_cmd_itf 
                                     32 	.if DEBUG 
                                     33 		call cmd_itf 
                                     34 	.endif 
                                     35 	.endm 
                                     36 
                           000001    37 .if DEBUG 
                                     38 
                                     39     .area CODE
                                     40 
                                     41 ;--------------------
                                     42 ; print content at address in hex.
                                     43 ; input:
                                     44 ;   X 	address to peek 
                                     45 ; output:
                                     46 ;	none 
                                     47 ;--------------------	
      0003AA                         48 prt_peek::
      0003AA 89               [ 2]   49 	pushw x 
      0003AB 35 10 00 0A      [ 1]   50 	mov base,#16 
      0003AF CD 18 54         [ 4]   51 	call prt_i16  
      0003B2 A6 3A            [ 1]   52 	ld a,#': 
      0003B4 CD 08 FF         [ 4]   53 	call putc 
      0003B7 A6 20            [ 1]   54 	ld a,#SPACE 
      0003B9 CD 08 FF         [ 4]   55 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0003BC 85               [ 2]   56 	popw x 
      0003BD F6               [ 1]   57 	ld a,(x)
      0003BE 5F               [ 1]   58 	clrw x 
      0003BF 97               [ 1]   59 	ld xl,a 
      0003C0 35 0A 00 0A      [ 1]   60 	mov base,#10 
      0003C4 CD 18 54         [ 4]   61 	call prt_i16 
      0003C7 81               [ 4]   62 	ret 
                                     63 
                                     64 ;----------------------------------------
                                     65 ;   DEBUG support functions
                                     66 ;----------------------------------------
                                     67 
                                     68 ; turn LED on 
      0003C8                         69 ledon:
      0003C8 72 1A 50 0A      [ 1]   70     bset PC_ODR,#LED2_BIT
      0003CC 81               [ 4]   71     ret 
                                     72 
                                     73 ; turn LED off 
      0003CD                         74 ledoff:
      0003CD 72 1B 50 0A      [ 1]   75     bres PC_ODR,#LED2_BIT 
      0003D1 81               [ 4]   76     ret 
                                     77 
                                     78 ; invert LED status 
      0003D2                         79 ledtoggle:
      0003D2 A6 20            [ 1]   80     ld a,#LED2_MASK
      0003D4 C8 50 0A         [ 1]   81     xor a,PC_ODR
      0003D7 C7 50 0A         [ 1]   82     ld PC_ODR,a
      0003DA 81               [ 4]   83     ret 
                                     84 
      0003DB                         85 left_paren:
      0003DB A6 20            [ 1]   86 	ld a,#SPACE 
      0003DD CD 08 FF         [ 4]   87 	call putc
      0003E0 A6 28            [ 1]   88 	ld a,#'( 
      0003E2 CD 08 FF         [ 4]   89 	call putc 	
      0003E5 81               [ 4]   90 	ret 
                                     91 
                                     92 ;------------------------------
                                     93 ; print 8 bit register 
                                     94 ; input:
                                     95 ;   X  point to register name 
                                     96 ;   A  register value to print 
                                     97 ; output:
                                     98 ;   none
                                     99 ;------------------------------- 
      0003E6                        100 prt_reg8:
      0003E6 88               [ 1]  101 	push a 
      0003E7 CD 09 5C         [ 4]  102 	call puts 
      0003EA 7B 01            [ 1]  103 	ld a,(1,sp) 
      0003EC 5F               [ 1]  104 	clrw x 
      0003ED 97               [ 1]  105 	ld xl,a 
      0003EE 35 10 00 0A      [ 1]  106 	mov base,#16
      0003F2 CD 18 54         [ 4]  107 	call prt_i16  
      0003F5 CD 03 DB         [ 4]  108 	call left_paren 
      0003F8 84               [ 1]  109 	pop a 
      0003F9 5F               [ 1]  110 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0003FA 97               [ 1]  111 	ld xl,a 
      0003FB 35 0A 00 0A      [ 1]  112 	mov base,#10 
      0003FF CD 18 54         [ 4]  113 	call prt_i16  
      000402 A6 29            [ 1]  114 	ld a,#') 
      000404 CD 08 FF         [ 4]  115 	call putc
      000407 81               [ 4]  116 	ret
                                    117 
                                    118 ;--------------------------------
                                    119 ; print 16 bits register 
                                    120 ; input:
                                    121 ;   X   point register name 
                                    122 ;   Y   register value to print 
                                    123 ; output:
                                    124 ;  none
                                    125 ;--------------------------------
      000408                        126 prt_reg16: 
      000408 90 89            [ 2]  127 	pushw y 
      00040A CD 09 5C         [ 4]  128 	call puts 
      00040D 1E 01            [ 2]  129 	ldw x,(1,sp) 
      00040F 35 10 00 0A      [ 1]  130 	mov base,#16 
      000413 CD 18 54         [ 4]  131 	call prt_i16  
      000416 CD 03 DB         [ 4]  132 	call left_paren 
      000419 85               [ 2]  133 	popw x 
      00041A 35 0A 00 0A      [ 1]  134 	mov base,#10 
      00041E CD 18 54         [ 4]  135 	call prt_i16  
      000421 A6 29            [ 1]  136 	ld a,#') 
      000423 CD 08 FF         [ 4]  137 	call putc
      000426 81               [ 4]  138 	ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; print registers contents saved on
                                    142 ; stack by trap interrupt.
                                    143 ;------------------------------------
                           00000A   144 	R_PC=10 
                           000009   145 	R_CC=9
                           000008   146 	SAV_ACC24=8
                           000006   147 	SAV_ACC16=6
                           000004   148 	R_Y=4
                           000002   149 	R_X=2
                           000001   150 	R_A=1
                           000008   151 	VSIZE=8 
      000427                        152 print_registers:
      000427 8A               [ 1]  153 	push cc 
      000428                        154 	_vars VSIZE 
      000428 52 08            [ 2]    1     sub sp,#VSIZE 
      00042A 6B 01            [ 1]  155 	ld (R_A,sp),a 
      00042C 1F 02            [ 2]  156 	ldw (R_X,sp),x 
      00042E 17 04            [ 2]  157 	ldw (R_Y,sp),y
      000430 C6 00 0C         [ 1]  158 	ld a,acc24 
      000433 CE 00 0D         [ 2]  159 	ldw x,acc16 
      000436 6B 08            [ 1]  160 	ld (SAV_ACC24,sp),a 
      000438 1F 06            [ 2]  161 	ldw (SAV_ACC16,sp),x 
      00043A AE 04 91         [ 2]  162 	ldw x,#STATES
      00043D CD 09 5C         [ 4]  163 	call puts
                                    164 ; print PC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000440 AE 04 CE         [ 2]  165 	ldw x, #REG_PC
      000443 16 0A            [ 2]  166 	ldw y, (R_PC,sp)
      000445 72 A2 00 03      [ 2]  167 	subw y,#3
      000449 CD 04 08         [ 4]  168 	call prt_reg16 
                                    169 ; print x
      00044C AE 04 D6         [ 2]  170 	ldw x,#REG_X
      00044F 16 02            [ 2]  171 	ldw y,(R_X,sp)
      000451 CD 04 08         [ 4]  172 	call prt_reg16  
                                    173 ; print Y 
      000454 AE 04 D2         [ 2]  174 	ldw x,#REG_Y
      000457 16 04            [ 2]  175 	ldw y, (R_Y,sp)
      000459 CD 04 08         [ 4]  176 	call prt_reg16  
                                    177 ; print A 
      00045C AE 04 DA         [ 2]  178 	ldw x,#REG_A
      00045F 7B 01            [ 1]  179 	ld a, (R_A,sp) 
      000461 CD 03 E6         [ 4]  180 	call prt_reg8
                                    181 ; print CC 
      000464 AE 04 DE         [ 2]  182 	ldw x,#REG_CC 
      000467 7B 09            [ 1]  183 	ld a, (R_CC,sp) 
      000469 CD 03 E6         [ 4]  184 	call prt_reg8 
                                    185 ; print SP 
      00046C AE 04 E3         [ 2]  186 	ldw x,#REG_SP
      00046F 90 96            [ 1]  187 	ldw y,sp 
      000471 72 A9 00 0B      [ 2]  188 	addw y,#(VSIZE+3)
      000475 CD 04 08         [ 4]  189 	call prt_reg16  
      000478 A6 0A            [ 1]  190 	ld a,#'\n' 
      00047A CD 08 FF         [ 4]  191 	call putc
      00047D 7B 08            [ 1]  192 	ld a,(SAV_ACC24,sp)
      00047F 1E 06            [ 2]  193 	ldw x,(SAV_ACC16,sp)
      000481 C7 00 0C         [ 1]  194 	ld acc24,a 
      000484 CF 00 0D         [ 2]  195 	ldw acc16,x 
      000487 7B 01            [ 1]  196 	ld a,(R_A,sp)
      000489 1E 02            [ 2]  197 	ldw x,(R_X,sp)
      00048B 16 04            [ 2]  198 	ldw y,(R_Y,sp)
      00048D                        199 	_drop VSIZE
      00048D 5B 08            [ 2]    1     addw sp,#VSIZE 
      00048F 86               [ 1]  200 	pop cc   	
      000490 81               [ 4]  201 	ret
                                    202 
      000491 0A 52 65 67 69 73 74   203 STATES:  .asciz "\nRegisters state at break point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 62
             72 65 61 6B 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      0004CE 50 43 3A 00            204 REG_PC: .asciz "PC:"
      0004D2 0A 59 3A 00            205 REG_Y:   .asciz "\nY:" 
      0004D6 0A 58 3A 00            206 REG_X:   .asciz "\nX:"
      0004DA 0A 41 3A 00            207 REG_A:   .asciz "\nA:" 
      0004DE 0A 43 43 3A 00         208 REG_CC:  .asciz "\nCC:"
      0004E3 0A 53 50 3A 00         209 REG_SP:  .asciz "\nSP:"
                                    210 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                    211 ;----------------------
                                    212 ; input:
                                    213 ;	Y    *input buffer 
                                    214 ; output:
                                    215 ;   acc24  integer 
                                    216 ;----------------------
      0004E8                        217 parse_addr:
      0004E8 A6 20            [ 1]  218 	ld a,#SPACE 
      0004EA CD 0E E2         [ 4]  219 	call skip  	 
      0004ED 72 B9 00 00      [ 2]  220 	addw y,in.w 
      0004F1 AE 16 B8         [ 2]  221 	ldw x,#pad 
      0004F4 CD 13 B5         [ 4]  222 	call strcpy
      0004F7 AE 16 B8         [ 2]  223 	ldw x,#pad
      0004FA CD 18 F6         [ 4]  224 	call atoi24 	
      0004FD 81               [ 4]  225 	ret 
                                    226 
                                    227 ;----------------------------
                                    228 ; command interface
                                    229 ; only 3 commands:
                                    230 ;  'q' to resume application
                                    231 ;  'p [addr]' to print memory values 
                                    232 ;  's addr' to print string 
                                    233 ;----------------------------
                                    234 ;local variable
                           00000B   235 	PSIZE=11
                           00000A   236 	SAV_COUNT=10
                           000009   237 	SAV_IN=9
                           000008   238 	SAV_ACC24=8
                           000006   239 	SAV_ACC16=6
                           000004   240 	R_Y=4
                           000002   241 	R_X=2
                           000001   242 	R_A=1
                           00000B   243 	VSIZE=11
      0004FE                        244 cmd_itf:
      0004FE 8A               [ 1]  245 	push cc 
      0004FF                        246 	_vars VSIZE
      0004FF 52 0B            [ 2]    1     sub sp,#VSIZE 
      000501 6B 01            [ 1]  247 	ld (R_A,sp),a
      000503 C6 00 02         [ 1]  248 	ld a,count 
      000506 6B 0A            [ 1]  249 	ld (SAV_COUNT,sp),a 
      000508 C6 00 01         [ 1]  250 	ld a,in 
      00050B 6B 09            [ 1]  251 	ld (SAV_IN,sp),a  
      00050D 1F 02            [ 2]  252 	ldw (R_X,sp),x 
      00050F 17 04            [ 2]  253 	ldw (R_Y,sp),y
      000511 C6 00 0C         [ 1]  254 	ld a,acc24 
      000514 CE 00 0D         [ 2]  255 	ldw x,acc16 
      000517 6B 08            [ 1]  256 	ld (SAV_ACC24,sp),a 
      000519 1F 06            [ 2]  257 	ldw (SAV_ACC16,sp),x 
      00051B 72 5F 00 18      [ 1]  258 	clr farptr 
      00051F 72 5F 00 19      [ 1]  259 	clr farptr+1 
      000523 72 5F 00 1A      [ 1]  260 	clr farptr+2  
      000527                        261 repl:
      000527 A6 0D            [ 1]  262 	ld a,#CR 
      000529 CD 08 FF         [ 4]  263 	call putc 
      00052C A6 3F            [ 1]  264 	ld a,#'? 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00052E CD 08 FF         [ 4]  265 	call putc
      000531 72 5F 00 00      [ 1]  266 	clr in.w 
      000535 72 5F 00 01      [ 1]  267 	clr in 
      000539 CD 0A 61         [ 4]  268 	call readln
      00053C 90 AE 16 68      [ 2]  269 	ldw y,#tib  
      000540 90 F6            [ 1]  270 	ld a,(y)
      000542 27 E3            [ 1]  271 	jreq repl  
      000544 72 5C 00 01      [ 1]  272 	inc in 
      000548 CD 18 EA         [ 4]  273 	call to_upper 
      00054B A1 51            [ 1]  274 	cp a,#'Q 
      00054D 26 26            [ 1]  275 	jrne test_p
      00054F                        276 repl_exit:
                                    277 ; restore original context 
      00054F 7B 08            [ 1]  278 	ld a,(SAV_ACC24,sp)
      000551 1E 06            [ 2]  279 	ldw x,(SAV_ACC16,sp)
      000553 C7 00 0C         [ 1]  280 	ld acc24,a 
      000556 CF 00 0D         [ 2]  281 	ldw acc16,x
      000559 7B 0A            [ 1]  282 	ld a,(SAV_COUNT,sp)
      00055B C7 00 02         [ 1]  283 	ld count,a 
      00055E 7B 09            [ 1]  284 	ld a,(SAV_IN,sp)
      000560 C7 00 01         [ 1]  285 	ld in,a 
      000563 16 04            [ 2]  286 	ldw y,(R_Y,sp)
      000565 1E 02            [ 2]  287 	ldw x,(R_X,sp)
      000567 7B 01            [ 1]  288 	ld a,(R_A,sp)
      000569                        289 	_drop VSIZE
      000569 5B 0B            [ 2]    1     addw sp,#VSIZE 
      00056B 86               [ 1]  290 	pop cc 
      00056C 81               [ 4]  291 	ret  
      00056D                        292 invalid:
      00056D AE 05 DB         [ 2]  293 	ldw x,#invalid_cmd 
      000570 CD 09 5C         [ 4]  294 	call puts 
      000573 20 B2            [ 2]  295 	jra repl 
      000575                        296 test_p:	
      000575 A1 50            [ 1]  297     cp a,#'P 
      000577 27 10            [ 1]  298 	jreq mem_peek
      000579 A1 53            [ 1]  299     cp a,#'S 
      00057B 26 F0            [ 1]  300 	jrne invalid 
      00057D                        301 print_string:
      00057D CD 04 E8         [ 4]  302 	call parse_addr 	
      000580 CE 00 0D         [ 2]  303 	ldw x,acc16
      000583 CD 09 5C         [ 4]  304 	call puts
      000586 CC 05 27         [ 2]  305 	jp repl 	
      000589                        306 mem_peek:
      000589 CD 04 E8         [ 4]  307 	call parse_addr 
      00058C C6 00 0C         [ 1]  308 	ld a, acc24 
      00058F CA 00 0D         [ 1]  309 	or a,acc16 
      000592 CA 00 0E         [ 1]  310 	or a,acc8 
      000595 26 02            [ 1]  311 	jrne 1$ 
      000597 20 0C            [ 2]  312 	jra peek_byte  
      000599 CE 00 0C         [ 2]  313 1$:	ldw x,acc24 
      00059C CF 00 18         [ 2]  314 	ldw farptr,x 
      00059F C6 00 0E         [ 1]  315 	ld a,acc8 
      0005A2 C7 00 1A         [ 1]  316 	ld farptr+2,a 
      0005A5                        317 peek_byte:
      0005A5 CD 05 EA         [ 4]  318 	call print_farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0005A8 A6 08            [ 1]  319 	ld a,#8 
      0005AA 6B 0B            [ 1]  320 	ld (PSIZE,sp),a 
      0005AC 5F               [ 1]  321 	clrw x 
      0005AD CD 06 05         [ 4]  322 1$:	call fetchc  
      0005B0 89               [ 2]  323 	pushw x 
      0005B1 C7 00 0E         [ 1]  324 	ld acc8,a 
      0005B4 5F               [ 1]  325 	clrw x 
      0005B5 CF 00 0C         [ 2]  326 	ldw acc24,x 
      0005B8 A6 90            [ 1]  327 	ld a,#16+128
      0005BA CD 18 6B         [ 4]  328 	call prt_acc24
      0005BD 85               [ 2]  329 	popw x 
      0005BE 0A 0B            [ 1]  330 	dec (PSIZE,sp)
      0005C0 26 EB            [ 1]  331 	jrne 1$ 
      0005C2 A6 08            [ 1]  332 	ld a,#8 
      0005C4 CB 00 1A         [ 1]  333 	add a,farptr+2 
      0005C7 C7 00 1A         [ 1]  334 	ld farptr+2,a
      0005CA 4F               [ 1]  335 	clr a 
      0005CB C9 00 19         [ 1]  336 	adc a,farptr+1 
      0005CE C7 00 19         [ 1]  337 	ld farptr+1,a 
      0005D1 4F               [ 1]  338 	clr a 
      0005D2 C9 00 18         [ 1]  339 	adc a,farptr 
      0005D5 C7 00 18         [ 1]  340 	ld farptr,a 
      0005D8 CC 05 27         [ 2]  341 	jp repl  
                                    342 
      0005DB 6E 6F 74 20 61 20 63   343 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    344 
                                    345 ;----------------------------
                                    346 ; display farptr address
                                    347 ;----------------------------
      0005EA                        348 print_farptr:
      0005EA C6 00 1A         [ 1]  349 	ld a ,farptr+2 
      0005ED C7 00 0E         [ 1]  350 	ld acc8,a 
      0005F0 CE 00 18         [ 2]  351 	ldw x,farptr 
      0005F3 CF 00 0C         [ 2]  352 	ldw acc24,x 
      0005F6 5F               [ 1]  353 	clrw x 
      0005F7 A6 10            [ 1]  354 	ld a,#16 
      0005F9 CD 18 6B         [ 4]  355 	call prt_acc24
      0005FC A6 20            [ 1]  356 	ld a,#SPACE 
      0005FE CD 08 FF         [ 4]  357 	call putc 
      000601 CD 08 FF         [ 4]  358 	call putc 
      000604 81               [ 4]  359 	ret
                                    360 
                                    361 ;------------------------------------
                                    362 ; get byte at address farptr[X]
                                    363 ; input:
                                    364 ;	 farptr   address to peek
                                    365 ;    X		  farptr index 	
                                    366 ; output:
                                    367 ;	 A 		  byte from memory  
                                    368 ;    x		  incremented by 1
                                    369 ;------------------------------------
      000605                        370 fetchc: ; @C
      000605 92 AF 00 18      [ 5]  371 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000609 5C               [ 1]  372 	incw x
      00060A 81               [ 4]  373 	ret
                                    374 
                                    375 
                                    376 ;------------------------------------
                                    377 ; expect a number from command line 
                                    378 ; next argument
                                    379 ;  input:
                                    380 ;	  none
                                    381 ;  output:
                                    382 ;    acc24   int24_t 
                                    383 ;------------------------------------
      00060B                        384 number:
      00060B CD 0E F5         [ 4]  385 	call get_token
      00060E A1 84            [ 1]  386 	cp a,#TK_INTGR
      000610 27 03            [ 1]  387 	jreq 1$
      000612 CC 16 A5         [ 2]  388 	jp syntax_error
      000615 81               [ 4]  389 1$:	ret
                                    390 
                                    391 
                                    392 ;---------------------
                                    393 ; display n bytes row 
                                    394 ; from memory.
                                    395 ; input:
                                    396 ;   A   bytes to print 
                                    397 ;	X   start address 
                                    398 ; output:
                                    399 ;   X   address after last shown  
                                    400 ;---------------------
                           000001   401 	CNT=1 
                           000002   402 	ADR=2 
                           000003   403 	VSIZE=3 
      000616                        404 show_row:
      000616 4D               [ 1]  405 	tnz a 
      000617 26 01            [ 1]  406 	jrne 1$
      000619 81               [ 4]  407 	ret 
      00061A                        408 1$:	
      00061A 89               [ 2]  409 	pushw x  
      00061B 88               [ 1]  410 	push a 
      00061C 35 04 00 23      [ 1]  411 	mov tab_width,#4 
      000620 CD 18 54         [ 4]  412 	call prt_i16 
      000623 A6 20            [ 1]  413 	ld a,#SPACE  
      000625 CD 08 FF         [ 4]  414 	call putc
      000628                        415 row_loop:
      000628 1E 02            [ 2]  416 	ldw x,(ADR,sp)
      00062A F6               [ 1]  417 	ld a,(x)
      00062B 5F               [ 1]  418 	clrw x 
      00062C 97               [ 1]  419 	ld xl,a 
      00062D CD 18 54         [ 4]  420 	call prt_i16 
      000630 1E 02            [ 2]  421 	ldw x,(ADR,sp)
      000632 5C               [ 1]  422 	incw x 
      000633 1F 02            [ 2]  423 	ldw (ADR,sp),x 
      000635 0A 01            [ 1]  424 	dec (CNT,sp)
      000637 26 EF            [ 1]  425 	jrne row_loop
      000639                        426 	_drop VSIZE  		
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000639 5B 03            [ 2]    1     addw sp,#VSIZE 
      00063B 35 04 00 23      [ 1]  427 	mov tab_width,#4
      00063F A6 0D            [ 1]  428 	ld a,#CR 
      000641 CD 08 FF         [ 4]  429 	call putc 
      000644 81               [ 4]  430 	ret 
                                    431 
                                    432 ;--------------------------
                                    433 ; print memory content 
                                    434 ; in hexadecimal format
                                    435 ;  input:
                                    436 ;    X    start address 
                                    437 ;    Y    count 
                                    438 ;--------------------------
                           000001   439 	BCNT=1
                           000003   440 	BASE=3
                           000004   441 	TABW=4
                           000004   442 	VSIZE=4   
      000645                        443 hex_dump:
      000645 88               [ 1]  444 	push a 
      000646                        445 	_vars VSIZE
      000646 52 04            [ 2]    1     sub sp,#VSIZE 
      000648 C6 00 0A         [ 1]  446 	ld a,base
      00064B 6B 03            [ 1]  447 	ld (BASE,sp),a 
      00064D 35 10 00 0A      [ 1]  448 	mov base,#16
      000651 C6 00 23         [ 1]  449 	ld a,tab_width 
      000654 6B 04            [ 1]  450 	ld (TABW,sp),a
      000656 A6 0D            [ 1]  451 	ld a,#CR 
      000658 CD 08 FF         [ 4]  452 	call putc 
      00065B 17 01            [ 2]  453 1$: ldw (BCNT,sp),y
      00065D A6 10            [ 1]  454 	ld a,#16
      00065F 90 A3 00 10      [ 2]  455 	cpw y,#16
      000663 2A 02            [ 1]  456 	jrpl 2$
      000665 90 9F            [ 1]  457 	ld a,yl
      000667                        458 2$: 	
      000667 CD 06 16         [ 4]  459 	call show_row 
      00066A 16 01            [ 2]  460 	ldw y,(BCNT,sp) 
      00066C 72 A2 00 10      [ 2]  461 	subw y,#16 
      000670 90 A3 00 01      [ 2]  462 	cpw y,#1
      000674 2A E5            [ 1]  463 	jrpl 1$
      000676 7B 03            [ 1]  464 	ld a,(BASE,sp)
      000678 C7 00 0A         [ 1]  465 	ld base,a
      00067B 7B 04            [ 1]  466 	ld a,(TABW,sp)
      00067D C7 00 23         [ 1]  467 	ld tab_width,a 
      000680                        468 	_drop VSIZE
      000680 5B 04            [ 2]    1     addw sp,#VSIZE 
      000682 84               [ 1]  469 	pop a 
      000683 81               [ 4]  470 	ret 
                                    471 
                                    472 .endif ; DEBUG 
                                    473 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      000684                         45 unlock_eeprom:
      000684 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      000689 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      00068D 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      000691 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      000695 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000699 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00069E 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      00069F                         62 unlock_flash:
      00069F 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006A4 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0006A8 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0006AC 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006B0 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006B4 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006B9 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006BA                         76 row_erase:
      0006BA 88               [ 1]   77 	push a 
      0006BB 90 89            [ 2]   78 	pushw y 
      0006BD 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006C1 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006C5 4F               [ 1]   81 	clr a 
      0006C6 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0006C8 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0006CC 90 5C            [ 1]   84     incw y
      0006CE 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0006D2 90 5C            [ 1]   86     incw y
      0006D4 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0006D8 90 5C            [ 1]   88     incw y
      0006DA 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      0006DE 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      0006E3 90 85            [ 2]   91 	popw y 
      0006E5 84               [ 1]   92 	pop a 
      0006E6 81               [ 4]   93 	ret
      0006E7                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      0006E7                         97 move_erase_to_ram:
      0006E7 89               [ 2]   98 	pushw x 
      0006E8 90 89            [ 2]   99 	pushw y 
      0006EA AE 06 E7         [ 2]  100 	ldw x,#row_erase_end 
      0006ED 1D 06 BA         [ 2]  101 	subw x,#row_erase
      0006F0 CF 00 0D         [ 2]  102 	ldw acc16,x 
      0006F3 AE 16 68         [ 2]  103 	ldw x,#tib 
      0006F6 90 AE 06 BA      [ 2]  104 	ldw y,#row_erase 
      0006FA CD 13 C5         [ 4]  105 	call move
      0006FD 90 85            [ 2]  106 	popw y
      0006FF 85               [ 2]  107 	popw x
      000700 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000701                        123 program_row:
      000701 88               [ 1]  124 	push a 
      000702 90 89            [ 2]  125 	pushw y 
      000704 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000706 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00070A 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      00070E 90 5F            [ 1]  130 	clrw y 
      000710 F6               [ 1]  131 1$:	ld a,(x)
      000711 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000715 5C               [ 1]  133 	incw x 
      000716 90 5C            [ 1]  134 	incw y 
      000718 0A 01            [ 1]  135 	dec (BCNT,sp)
      00071A 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      00071C 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000721                        139 	_drop 1 
      000721 5B 01            [ 2]    1     addw sp,#1 
      000723 90 85            [ 2]  140 	popw y 
      000725 84               [ 1]  141 	pop a 
      000726 81               [ 4]  142 	ret 
      000727                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000727                        149 move_prg_to_ram:
      000727 89               [ 2]  150 	pushw x 
      000728 90 89            [ 2]  151 	pushw y 
      00072A AE 07 27         [ 2]  152 	ldw x,#program_row_end 
      00072D 1D 07 01         [ 2]  153 	subw x,#program_row 
      000730 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      000733 AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      000736 90 AE 07 01      [ 2]  156 	ldw y,#program_row ; source address 
      00073A CD 13 C5         [ 4]  157 	call move
      00073D 90 85            [ 2]  158 	popw y 
      00073F 85               [ 2]  159 	popw x  
      000740 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000741                        169 write_buffer:
      000741 89               [ 2]  170 	pushw x 
      000742 72 5D 00 18      [ 1]  171 	tnz farptr 
      000746 26 0D            [ 1]  172 	jrne to_flash 
      000748 CE 00 19         [ 2]  173 	ldw x,farptr+1 
      00074B A3 38 80         [ 2]  174 	cpw x,#app_space  
      00074E 24 05            [ 1]  175 	jruge to_flash 
      000750                        176 to_eeprom:
      000750 CD 06 84         [ 4]  177 	call unlock_eeprom
      000753 20 03            [ 2]  178 	jra do_programming
      000755                        179 to_flash:
      000755 CD 06 9F         [ 4]  180 	call unlock_flash
      000758                        181 do_programming:
      000758 85               [ 2]  182 	popw x 
      000759 CD 16 68         [ 4]  183 	call tib
      00075C 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000760 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      000764 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      000765                        197 block_erase:
      000765 89               [ 2]  198 	pushw x 
      000766 C6 00 18         [ 1]  199 	ld a,farptr 
      000769 26 14            [ 1]  200 	jrne erase_flash
      00076B CE 00 19         [ 2]  201 	ldw x,farptr+1
      00076E A3 38 80         [ 2]  202 	cpw x,#app_space 
      000771 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000773 CD 06 84         [ 4]  205 	call unlock_eeprom 
      000776 CD 16 68         [ 4]  206 	call tib 
      000779 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      00077D 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      00077F                        210 erase_flash:
      00077F CD 06 9F         [ 4]  211 	call unlock_flash 
      000782 CD 16 68         [ 4]  212 	call tib 
      000785 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000789                        214 erase_exit: 
      000789 85               [ 2]  215 	popw x 
      00078A 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      00078B                        232 write_byte:
      00078B 90 89            [ 2]  233 	pushw y
      00078D                        234 	_vars VSIZE
      00078D 52 02            [ 2]    1     sub sp,#VSIZE 
      00078F 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      000791 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      000793 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      000797 72 5D 00 18      [ 1]  240 	tnz farptr 
      00079B 26 14            [ 1]  241 	jrne write_flash
      00079D 90 A3 38 80      [ 2]  242     cpw y,#app_space 	 
      0007A1 24 0E            [ 1]  243     jruge write_flash
      0007A3 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0007A7 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0007A9 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0007AD 22 51            [ 1]  247 	jrugt write_exit
      0007AF 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0007B1                        250 write_flash:
      0007B1 CD 06 9F         [ 4]  251 	call unlock_flash 
      0007B4 9B               [ 1]  252 1$:	sim 
      0007B5 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007B7 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0007BB 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007C0 9A               [ 1]  256     rim 
      0007C1 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007C5 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0007C7                        260 write_eeprom:
      0007C7 CD 06 84         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0007CA 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0007CE 2B 08            [ 1]  264 	jrmi 1$
      0007D0 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0007D4 2A 02            [ 1]  266 	jrpl 1$
      0007D6 03 02            [ 1]  267 	cpl (OPT,sp)
      0007D8                        268 1$: 
      0007D8 0D 02            [ 1]  269     tnz (OPT,sp)
      0007DA 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      0007DC 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      0007E0 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0007E4                        274 2$: 
      0007E4 7B 01            [ 1]  275     ld a,(BTW,sp)
      0007E6 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      0007EA 0D 02            [ 1]  277     tnz (OPT,sp)
      0007EC 27 08            [ 1]  278     jreq 3$
      0007EE 5C               [ 1]  279     incw x
      0007EF 7B 01            [ 1]  280     ld a,(BTW,sp)
      0007F1 43               [ 1]  281     cpl a
      0007F2 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      0007F6 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007FB 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000800                        285 write_exit:
      000800 5C               [ 1]  286 	incw x 
      000801 CD 08 60         [ 4]  287 	call incr_farptr
      000804 5F               [ 1]  288 	clrw x 
      000805                        289 	_drop VSIZE 
      000805 5B 02            [ 2]    1     addw sp,#VSIZE 
      000807 90 85            [ 2]  290 	popw y
      000809 81               [ 4]  291     ret
                                    292 
                                    293 ;--------------------------------------------
                                    294 ; write a data block to eeprom or flash 
                                    295 ; the block must be erased before 
                                    296 ; using this routine.
                                    297 ; input:
                                    298 ;   Y        source address   
                                    299 ;   X        array index  destination  farptr[x]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                    300 ;   BSIZE    block size bytes 
                                    301 ;   farptr   write address , byte* 
                                    302 ; output:
                                    303 ;	X 		after last byte written 
                                    304 ;   Y 		after last byte read 
                                    305 ;  farptr   point after block
                                    306 ;---------------------------------------------
      00080A                        307 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      00080A                        308 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    309 	; local var 
                           000001   310 	XSAVE=1 
                           000002   311 	VSIZE=2 
      00080A                        312 write_block::
      00080A 88               [ 1]  313 	push a 
      00080B                        314 	_vars VSIZE
      00080B 52 02            [ 2]    1     sub sp,#VSIZE 
      00080D 1F 01            [ 2]  315 	ldw (XSAVE,sp),x 
      00080F 1E 06            [ 2]  316 	ldw x,(BSIZE,sp) 
      000811 27 13            [ 1]  317 	jreq 9$
      000813 1E 01            [ 2]  318 1$:	ldw x,(XSAVE,sp)
      000815 90 F6            [ 1]  319 	ld a,(y)
      000817 CD 07 8B         [ 4]  320 	call write_byte 
      00081A 5C               [ 1]  321 	incw x 
      00081B 90 5C            [ 1]  322 	incw y 
      00081D 1F 01            [ 2]  323 	ldw (XSAVE,sp),x
      00081F 1E 06            [ 2]  324 	ldw x,(BSIZE,sp)
      000821 5A               [ 2]  325 	decw x
      000822 1F 06            [ 2]  326 	ldw (BSIZE,sp),x 
      000824 26 ED            [ 1]  327 	jrne 1$
      000826                        328 9$:
      000826 1E 01            [ 2]  329 	ldw x,(XSAVE,sp)
      000828 CD 08 60         [ 4]  330 	call incr_farptr
      00082B                        331 	_drop VSIZE
      00082B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00082D 84               [ 1]  332 	pop a 
      00082E 81               [ 4]  333 	ret 
                                    334 
                                    335 
                                    336 ;------------------------------------
                                    337 ; write n bytes to flash | eeprom 
                                    338 ; if the number of bytes is 
                                    339 ; >=128 it is faster to 
                                    340 ; use write_block
                                    341 ; the bytes are written one by 
                                    342 ; one and auto erased if required. 
                                    343 ; input:
                                    344 ;    farptr    dest address 
                                    345 ;    X         src address 
                                    346 ;    A         count 
                                    347 ; output:
                                    348 ;    none   
                                    349 ;----------------------------------
      00082F                        350 write_nbytes:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00082F 90 89            [ 2]  351 	pushw y
      000831 88               [ 1]  352 	push a 
      000832 90 93            [ 1]  353 	ldw y,x
      000834 5F               [ 1]  354 	clrw x 
      000835                        355 1$:  
      000835 90 F6            [ 1]  356 	ld a,(y)
      000837 90 5C            [ 1]  357 	incw y
      000839 CD 07 8B         [ 4]  358 	call write_byte 
      00083C 5C               [ 1]  359 	incw x 
      00083D 0A 01            [ 1]  360 	dec (1,sp)  
      00083F 26 F4            [ 1]  361 	jrne 1$ 
      000841 84               [ 1]  362 9$: pop a 
      000842 90 85            [ 2]  363 	popw y 
      000844 81               [ 4]  364 	ret 
                                    365 
                                    366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    367 ;;;  flash memory operations
                                    368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    369 
                                    370 ;--------------------------
                                    371 ; align farptr to BLOCK_SIZE 
                                    372 ;---------------------------
      000845                        373 row_align:
      000845 A6 7F            [ 1]  374 	ld a,#0x7f 
      000847 C4 00 1A         [ 1]  375 	and a,farptr+2 
      00084A 27 13            [ 1]  376 	jreq 1$ 
      00084C CE 00 19         [ 2]  377 	ldw x,farptr+1 
      00084F 1C 00 80         [ 2]  378 	addw x,#BLOCK_SIZE 
      000852 24 04            [ 1]  379 	jrnc 0$
      000854 72 5C 00 18      [ 1]  380 	inc farptr 
      000858 9F               [ 1]  381 0$: ld a,xl 
      000859 A4 80            [ 1]  382 	and a,#0x80
      00085B 97               [ 1]  383 	ld xl,a
      00085C CF 00 19         [ 2]  384 	ldw farptr+1,x  	
      00085F 81               [ 4]  385 1$:	ret
                                    386 
                                    387 ;--------------------
                                    388 ; input:
                                    389 ;   X     increment 
                                    390 ; output:
                                    391 ;   farptr  incremented 
                                    392 ;---------------------
      000860                        393 incr_farptr:
      000860 72 BB 00 19      [ 2]  394 	addw x,farptr+1 
      000864 24 04            [ 1]  395 	jrnc 1$
      000866 72 5C 00 18      [ 1]  396 	inc farptr 
      00086A CF 00 19         [ 2]  397 1$:	ldw farptr+1,x  
      00086D 81               [ 4]  398 	ret 
                                    399 
                                    400 ;-----------------------------------
                                    401 ; scan block for non zero byte 
                                    402 ; block are 128 bytes 
                                    403 ; input:
                                    404 ;    farptr     address block  
                                    405 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    406 ;     A     0 cleared, other not cleared  
                                    407 ;-----------------------------------
      00086E                        408 scan_block:
      00086E 5F               [ 1]  409 	clrw x 
      00086F 92 AF 00 18      [ 5]  410 1$: ldf a,([farptr],x) 
      000873 26 06            [ 1]  411 	jrne 2$
      000875 5C               [ 1]  412 	incw x 
      000876 A3 00 80         [ 2]  413 	cpw x,#BLOCK_SIZE 
      000879 25 F4            [ 1]  414 	jrult 1$ 
      00087B 81               [ 4]  415 2$:	ret 
                                    416 
                                    417 
                                    418 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      00087C                         66 Uart1RxHandler: ; console receive char 
      00087C 72 0B 52 30 31   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      000881 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      000884 A1 03            [ 1]   69 	cp a,#CTRL_C 
      000886 26 06            [ 1]   70 	jrne 2$
      000888 CD 08 FF         [ 4]   71 	call putc 
      00088B CC 00 49         [ 2]   72 	jp user_interrupted
      00088E                         73 2$:
      00088E A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      000890 26 03            [ 1]   75 	jrne 3$
      000892 CC 00 B5         [ 2]   76 	jp cold_start 	
      000895 A1 1A            [ 1]   77 3$:	cp a,#CTRL_Z 
      000897 26 06            [ 1]   78 	jrne 4$
      000899 CD 08 B3         [ 4]   79 	call clear_autorun
      00089C CC 00 B5         [ 2]   80 	jp cold_start 
      00089F                         81 4$:
      00089F 88               [ 1]   82 	push a 
      0008A0 A6 26            [ 1]   83 	ld a,#rx1_queue 
      0008A2 CB 00 2F         [ 1]   84 	add a,rx1_tail 
      0008A5 5F               [ 1]   85 	clrw x 
      0008A6 97               [ 1]   86 	ld xl,a 
      0008A7 84               [ 1]   87 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0008A8 F7               [ 1]   88 	ld (x),a 
      0008A9 C6 00 2F         [ 1]   89 	ld a,rx1_tail 
      0008AC 4C               [ 1]   90 	inc a 
      0008AD A4 07            [ 1]   91 	and a,#RX_QUEUE_SIZE-1
      0008AF C7 00 2F         [ 1]   92 	ld rx1_tail,a 
      0008B2 80               [11]   93 5$:	iret 
                                     94 
      0008B3                         95 clear_autorun:
      0008B3 AE 40 00         [ 2]   96 	ldw x,#EEPROM_BASE 
      0008B6 CD 29 09         [ 4]   97 	call erase_header 
      0008B9 81               [ 4]   98 	ret 
                                     99 
                                    100 ;---------------------------------------------
                                    101 ; initialize UART1, 115200 8N1
                                    102 ; input:
                                    103 ;	none
                                    104 ; output:
                                    105 ;   none
                                    106 ;---------------------------------------------
      0008BA                        107 uart1_init:
      0008BA 72 1A 50 02      [ 1]  108     bset PA_DDR,#UART1_TX_PIN
      0008BE 72 1A 50 03      [ 1]  109     bset PA_CR1,#UART1_TX_PIN 
      0008C2 72 1A 50 04      [ 1]  110     bset PA_CR2,#UART1_TX_PIN 
                                    111 ; enable UART1 clock
      0008C6 72 14 50 C7      [ 1]  112 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008CA                        113 uart1_set_baud: 
      0008CA 88               [ 1]  114 	push a 
                                    115 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    116 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008CB A6 E1            [ 1]  117 	ld a,#CLK_SWR_HSI
      0008CD C1 50 C3         [ 1]  118 	cp a,CLK_CMSR 
      0008D0 27 0A            [ 1]  119 	jreq 2$ 
      0008D2                        120 1$: ; 8 Mhz 	
      0008D2 35 05 52 33      [ 1]  121 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008D6 35 04 52 32      [ 1]  122 	mov UART1_BRR1,#0x4
      0008DA 20 08            [ 2]  123 	jra 3$
      0008DC                        124 2$: ; 16 Mhz 	
      0008DC 35 0B 52 33      [ 1]  125 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008E0 35 08 52 32      [ 1]  126 	mov UART1_BRR1,#0x08
      0008E4                        127 3$:
      0008E4 72 5F 52 31      [ 1]  128     clr UART1_DR
      0008E8 35 2C 52 35      [ 1]  129 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008EC 72 10 52 35      [ 1]  130 	bset UART1_CR2,#UART_CR2_SBK
      0008F0 72 0D 52 30 FB   [ 2]  131     btjf UART1_SR,#UART_SR_TC,.
      0008F5 72 5F 00 2E      [ 1]  132     clr rx1_head 
      0008F9 72 5F 00 2F      [ 1]  133 	clr rx1_tail
      0008FD 84               [ 1]  134 	pop a  
      0008FE 81               [ 4]  135 	ret
                                    136 
                                    137 ;---------------------------------
                                    138 ; uart1_putc
                                    139 ; send a character via UART1
                                    140 ; input:
                                    141 ;    A  	character to send
                                    142 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0008FF                        143 putc:: ; console output always on UART1
      0008FF                        144 uart1_putc:: 
      0008FF 72 0F 52 30 FB   [ 2]  145 	btjf UART1_SR,#UART_SR_TXE,.
      000904 C7 52 31         [ 1]  146 	ld UART1_DR,a 
      000907 81               [ 4]  147 	ret 
                                    148 
                                    149 
                                    150 ;---------------------------------
                                    151 ; Query for character in rx1_queue
                                    152 ; input:
                                    153 ;   none 
                                    154 ; output:
                                    155 ;   A     0 no charcter available
                                    156 ;   Z     1 no character available
                                    157 ;---------------------------------
      000908                        158 qgetc::
      000908                        159 uart1_qgetc::
      000908 C6 00 2E         [ 1]  160 	ld a,rx1_head 
      00090B C0 00 2F         [ 1]  161 	sub a,rx1_tail 
      00090E 81               [ 4]  162 	ret 
                                    163 
                                    164 ;---------------------------------
                                    165 ; wait character from UART1 
                                    166 ; input:
                                    167 ;   none
                                    168 ; output:
                                    169 ;   A 			char  
                                    170 ;--------------------------------	
      00090F                        171 getc:: ;console input
      00090F                        172 uart1_getc::
      00090F CD 09 08         [ 4]  173 	call uart1_qgetc
      000912 27 FB            [ 1]  174 	jreq uart1_getc 
      000914 89               [ 2]  175 	pushw x 
                                    176 ;; rx1_queue must be in page 0 	
      000915 A6 26            [ 1]  177 	ld a,#rx1_queue
      000917 CB 00 2E         [ 1]  178 	add a,rx1_head 
      00091A 5F               [ 1]  179 	clrw x  
      00091B 97               [ 1]  180 	ld xl,a 
      00091C F6               [ 1]  181 	ld a,(x)
      00091D 88               [ 1]  182 	push a
      00091E C6 00 2E         [ 1]  183 	ld a,rx1_head 
      000921 4C               [ 1]  184 	inc a 
      000922 A4 07            [ 1]  185 	and a,#RX_QUEUE_SIZE-1
      000924 C7 00 2E         [ 1]  186 	ld rx1_head,a 
      000927 84               [ 1]  187 	pop a  
      000928 85               [ 2]  188 	popw x
      000929 81               [ 4]  189 	ret 
                                    190 
                                    191 ;-----------------------------
                                    192 ;  constants replacing 
                                    193 ;  ANSI sequence received 
                                    194 ;  from terminal.
                                    195 ;  These are the ANSI sequences
                                    196 ;  accepted by function readln
                                    197 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                           000080   198     ARROW_LEFT=128
                           000081   199     ARROW_RIGHT=129
                           000082   200     HOME=130
                           000083   201     KEY_END=131
                           000084   202     SUP=132 
                                    203 
      00092A 43 81 44 80 48 82 46   204 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    205 
                                    206 ;--------------------------------
                                    207 ; receive ANSI ESC 
                                    208 ; sequence and convert it
                                    209 ; to a single character code 
                                    210 ; in range {128..255}
                                    211 ; This is called after receiving 
                                    212 ; ESC character. 
                                    213 ; ignored sequence return 0 
                                    214 ; output:
                                    215 ;   A    converted character 
                                    216 ;-------------------------------
      000936                        217 get_escape:
      000936 CD 09 0F         [ 4]  218     call getc 
      000939 A1 5B            [ 1]  219     cp a,#'[ ; this character is expected after ESC 
      00093B 27 02            [ 1]  220     jreq 1$
      00093D 4F               [ 1]  221     clr a
      00093E 81               [ 4]  222     ret
      00093F CD 09 0F         [ 4]  223 1$: call getc 
      000942 AE 09 2A         [ 2]  224     ldw x,#convert_table
      000945                        225 2$:
      000945 F1               [ 1]  226     cp a,(x)
      000946 27 08            [ 1]  227     jreq 4$
      000948 1C 00 02         [ 2]  228     addw x,#2
      00094B 7D               [ 1]  229     tnz (x)
      00094C 26 F7            [ 1]  230     jrne 2$
      00094E 4F               [ 1]  231     clr a
      00094F 81               [ 4]  232     ret 
      000950 5C               [ 1]  233 4$: incw x 
      000951 F6               [ 1]  234     ld a,(x)
      000952 A1 84            [ 1]  235     cp a,#SUP
      000954 26 05            [ 1]  236     jrne 5$
      000956 88               [ 1]  237     push a 
      000957 CD 09 0F         [ 4]  238     call getc
      00095A 84               [ 1]  239     pop a 
      00095B                        240 5$:
      00095B 81               [ 4]  241     ret 
                                    242 
                                    243 
                                    244 ;-----------------------------
                                    245 ; send an ASCIZ string to UART1 
                                    246 ; input: 
                                    247 ;   x 		char * 
                                    248 ; output:
                                    249 ;   none 
                                    250 ;-------------------------------
      00095C                        251 puts::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00095C F6               [ 1]  252     ld a,(x)
      00095D 27 06            [ 1]  253 	jreq 1$
      00095F CD 08 FF         [ 4]  254 	call putc 
      000962 5C               [ 1]  255 	incw x 
      000963 20 F7            [ 2]  256 	jra puts 
      000965 81               [ 4]  257 1$:	ret 
                                    258 
                                    259 
                                    260 ;---------------------------
                                    261 ; delete character at left 
                                    262 ; of cursor on terminal 
                                    263 ; input:
                                    264 ;   none 
                                    265 ; output:
                                    266 ;	none 
                                    267 ;---------------------------
      000966                        268 bksp:
      000966 A6 08            [ 1]  269 	ld a,#BS 
      000968 CD 08 FF         [ 4]  270 	call putc 
      00096B A6 20            [ 1]  271 	ld a,#SPACE 
      00096D CD 08 FF         [ 4]  272 	call putc 
      000970 A6 08            [ 1]  273 	ld a,#BS 
      000972 CD 08 FF         [ 4]  274 	call putc 
      000975 81               [ 4]  275 	ret 
                                    276 ;---------------------------
                                    277 ; delete n character left of cursor 
                                    278 ; at terminal.
                                    279 ; input: 
                                    280 ;   A   number of characters to delete.
                                    281 ; output:
                                    282 ;    none 
                                    283 ;--------------------------	
      000976                        284 delete_nchar:
      000976 88               [ 1]  285 	push a 
      000977 0D 01            [ 1]  286 0$:	tnz (1,sp)
      000979 27 07            [ 1]  287 	jreq 1$
      00097B CD 09 66         [ 4]  288 	call bksp 
      00097E 0A 01            [ 1]  289 	dec (1,sp)
      000980 20 F5            [ 2]  290 	jra 0$
      000982 84               [ 1]  291 1$:	pop a 
      000983 81               [ 4]  292 	ret
                                    293 
                                    294 ;--------------------------
                                    295 ; send ANSI escape sequence
                                    296 ; ANSI: ESC[
                                    297 ; note: ESC is ASCII 27
                                    298 ;       [   is ASCII 91  
                                    299 ;-------------------------- 
      000984                        300 send_escape:
      000984 A6 1B            [ 1]  301 	ld a,#ESC 
      000986 CD 08 FF         [ 4]  302 	call putc 
      000989 A6 5B            [ 1]  303 	ld a,#'[
      00098B CD 08 FF         [ 4]  304 	call putc 
      00098E 81               [ 4]  305 	ret 
                                    306 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                    307 ;---------------------
                                    308 ;send ANSI parameter value
                                    309 ; ANSI parameter values are 
                                    310 ; sent as ASCII charater 
                                    311 ; not as binary number.
                                    312 ; this routine 
                                    313 ; convert binary number to 
                                    314 ; ASCII string and send it.
                                    315 ; expected range {0..99}
                                    316 ; input: 
                                    317 ; 	A {0..99} 
                                    318 ; output:
                                    319 ;   none 
                                    320 ;---------------------
      00098F                        321 send_parameter:
      00098F 89               [ 2]  322 	pushw x 
      000990 5F               [ 1]  323 	clrw x 
      000991 97               [ 1]  324 	ld xl,a 
      000992 A6 0A            [ 1]  325 	ld a,#10 
      000994 62               [ 2]  326 	div x,a 
      000995 95               [ 1]  327 	ld xh,a 
      000996 9F               [ 1]  328 	ld a,xl
      000997 4D               [ 1]  329     tnz a 
      000998 27 0B            [ 1]  330     jreq 2$
      00099A A1 09            [ 1]  331 	cp a,#9 
      00099C 23 02            [ 2]  332 	jrule 1$
      00099E A6 09            [ 1]  333 	ld a,#9
      0009A0                        334 1$:
      0009A0 AB 30            [ 1]  335 	add a,#'0 
      0009A2 CD 08 FF         [ 4]  336 	call putc
      0009A5 9E               [ 1]  337 2$:	ld a,xh 
      0009A6 AB 30            [ 1]  338 	add a,#'0
      0009A8 CD 08 FF         [ 4]  339 	call putc 
      0009AB 85               [ 2]  340 	popw x 
      0009AC 81               [ 4]  341 	ret 
                                    342 
                                    343 ;--------------------------
                                    344 ; move cursor left n character
                                    345 ; ANSI: ESC[PnD 
                                    346 ; 'Pn' est a numerical parameter
                                    347 ; specifying number of characters 
                                    348 ; displacement.
                                    349 ; input:
                                    350 ;   A     character count
                                    351 ; output:
                                    352 ;   none
                                    353 ;--------------------------
      0009AD                        354 move_left:
      0009AD 88               [ 1]  355 	push a 
      0009AE CD 09 84         [ 4]  356 	call send_escape
      0009B1 84               [ 1]  357     pop a
      0009B2 CD 09 8F         [ 4]  358 	call send_parameter 
      0009B5 A6 44            [ 1]  359 	ld a,#'D 
      0009B7 CD 08 FF         [ 4]  360 	call putc 
      0009BA 81               [ 4]  361 	ret	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    362 
                                    363 
                                    364 ;--------------------------
                                    365 ; move cursor right n character 
                                    366 ; ANSI: ESC[PnC 
                                    367 ; input:
                                    368 ;   A     character count
                                    369 ; output:
                                    370 ;   none
                                    371 ;--------------------------
      0009BB                        372 move_right:
      0009BB 88               [ 1]  373 	push a 
      0009BC CD 09 84         [ 4]  374 	call send_escape
      0009BF 84               [ 1]  375     pop a
      0009C0 CD 09 8F         [ 4]  376 	call send_parameter 
      0009C3 A6 43            [ 1]  377 	ld a,#'C 
      0009C5 CD 08 FF         [ 4]  378 	call putc 
      0009C8 81               [ 4]  379 	ret 
                                    380 
                                    381 
                                    382 ;--------------------------
                                    383 ; print n spaces on terminal
                                    384 ; input:
                                    385 ;  X 		number of spaces 
                                    386 ; output:
                                    387 ;	none 
                                    388 ;---------------------------
      0009C9                        389 spaces::
      0009C9 A6 20            [ 1]  390 	ld a,#SPACE 
      0009CB 5D               [ 2]  391 1$:	tnzw x
      0009CC 27 06            [ 1]  392 	jreq 9$
      0009CE CD 08 FF         [ 4]  393 	call putc 
      0009D1 5A               [ 2]  394 	decw x
      0009D2 20 F7            [ 2]  395 	jra 1$
      0009D4                        396 9$: 
      0009D4 81               [ 4]  397 	ret 
                                    398 
                                    399 ;--------------------------
                                    400 ; insert character in text 
                                    401 ; line 
                                    402 ; input:
                                    403 ;   A       character to insert 
                                    404 ;   xl      line length
                                    405 ;   xh      insert position 
                                    406 ;   Y       line pointer 
                                    407 ; output:
                                    408 ;   tib     updated 
                                    409 ;   Y       updated  
                                    410 ;-------------------------
                           000001   411 	IPOS=1
                           000002   412 	KCHAR=2 
                           000003   413     LLEN=3 
                           000003   414 	VSIZE=3 
      0009D5                        415 insert_char: 
      0009D5                        416 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0009D5 52 03            [ 2]    1     sub sp,#VSIZE 
      0009D7 6B 02            [ 1]  417     ld (KCHAR,sp),a 
      0009D9 9E               [ 1]  418     ld a,xh 
      0009DA 6B 01            [ 1]  419 	ld (IPOS,sp),a
      0009DC 9F               [ 1]  420     ld a,xl 
      0009DD 6B 03            [ 1]  421     ld (LLEN,sp),a  
      0009DF 93               [ 1]  422     ldw x,y
      0009E0 5C               [ 1]  423     incw x 
      0009E1 7B 03            [ 1]  424     ld a,(LLEN,sp)
      0009E3 10 01            [ 1]  425     sub a,(IPOS,sp)
      0009E5 4C               [ 1]  426     inc a 
      0009E6 C7 00 0E         [ 1]  427     ld acc8,a 
      0009E9 72 5F 00 0D      [ 1]  428     clr acc16
      0009ED CD 13 C5         [ 4]  429     call move
      0009F0 90 AE 16 68      [ 2]  430     ldw y,#tib 
      0009F4 7B 01            [ 1]  431     ld a,(IPOS,sp)
      0009F6 C7 00 0E         [ 1]  432     ld acc8,a 
      0009F9 72 B9 00 0D      [ 2]  433     addw y,acc16 
      0009FD 7B 02            [ 1]  434     ld a,(KCHAR,sp)
      0009FF 90 F7            [ 1]  435     ld (y),a
      000A01 90 5C            [ 1]  436     incw y  
      000A03 7B 01            [ 1]  437     ld a,(IPOS,sp)
      000A05 CD 09 AD         [ 4]  438     call move_left
      000A08 AE 16 68         [ 2]  439     ldw x,#tib 
      000A0B CD 09 5C         [ 4]  440     call puts 
      000A0E 7B 03            [ 1]  441     ld a,(LLEN,sp)
      000A10 10 01            [ 1]  442     sub a,(IPOS,sp) 
      000A12 CD 09 AD         [ 4]  443     call move_left 
      000A15                        444 	_drop VSIZE 
      000A15 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A17 81               [ 4]  445 	ret 
                                    446 
                                    447 
                                    448 ;--------------------------
                                    449 ; delete character under cursor
                                    450 ; input:
                                    451 ;   A       line length   
                                    452 ;   xl      delete position
                                    453 ;   Y       line pointer 
                                    454 ;-------------------------
                           000001   455 	CPOS=1
                           000002   456 	LLEN=2
                           000002   457 	VSIZE=2
      000A18                        458 delete_under:
      000A18                        459 	_vars VSIZE 
      000A18 52 02            [ 2]    1     sub sp,#VSIZE 
      000A1A 6B 02            [ 1]  460     ld (LLEN,sp),a 
      000A1C 9F               [ 1]  461     ld a,xl 
      000A1D 6B 01            [ 1]  462     ld (CPOS,sp),a 
      000A1F 93               [ 1]  463     ldw x,y ; move destination
      000A20 90 5C            [ 1]  464     incw y  ; move source 
      000A22 7B 02            [ 1]  465     ld a,(LLEN,sp)
      000A24 10 01            [ 1]  466     sub a,(CPOS,sp)
      000A26 4C               [ 1]  467     inc a ; move including zero at end.
      000A27 C7 00 0E         [ 1]  468     ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      000A2A 72 5F 00 0D      [ 1]  469     clr acc16 
      000A2E CD 13 C5         [ 4]  470 	call move 
      000A31 90 AE 16 68      [ 2]  471     ldw y,#tib 
      000A35 7B 01            [ 1]  472     ld a,(CPOS,sp)
      000A37 C7 00 0E         [ 1]  473     ld acc8,a 
      000A3A 72 B9 00 0D      [ 2]  474     addw y,acc16 
      000A3E 93               [ 1]  475     ldw x,y 
      000A3F CD 09 5C         [ 4]  476     call puts 
      000A42 A6 20            [ 1]  477     ld a,#SPACE  
      000A44 CD 08 FF         [ 4]  478     call putc
      000A47 7B 02            [ 1]  479     ld a,(LLEN,sp)
      000A49 10 01            [ 1]  480     sub a,(CPOS,sp)
      000A4B CD 09 AD         [ 4]  481     call move_left 
      000A4E 0A 02            [ 1]  482     dec (LLEN,sp)
      000A50                        483 	_drop VSIZE 
      000A50 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A52 81               [ 4]  484 	ret 
                                    485 
                                    486 ;-----------------------------
                                    487 ; send ANSI sequence to delete
                                    488 ; whole line. Cursor position
                                    489 ; is not updated.
                                    490 ; ANSI: ESC[2K
                                    491 ; input:
                                    492 ;   none
                                    493 ; output:
                                    494 ;   none 
                                    495 ;-----------------------------
      000A53                        496 delete_line:
      000A53 CD 09 84         [ 4]  497     call send_escape
      000A56 A6 32            [ 1]  498 	ld a,#'2
      000A58 CD 08 FF         [ 4]  499 	call putc 
      000A5B A6 4B            [ 1]  500 	ld a,#'K 
      000A5D CD 08 FF         [ 4]  501 	call putc 
      000A60 81               [ 4]  502 	ret 
                                    503 
                                    504 
                                    505 
                                    506 ;------------------------------------
                                    507 ; read a line of text from terminal
                                    508 ;  control keys: 
                                    509 ;    BS   efface caractère à gauche 
                                    510 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    511 ;    CTRL_R  edit previous line.
                                    512 ;    CTRL_D  delete line  
                                    513 ;    HOME  go to start of line  
                                    514 ;    KEY_END  go to end of line 
                                    515 ;    ARROW_LEFT  move cursor left 
                                    516 ;    ARROW_RIGHT  move cursor right 
                                    517 ;    CTRL_O  toggle between insert/overwrite
                                    518 ; input:
                                    519 ;	none
                                    520 ; local variable on stack:
                                    521 ;	LL  line length
                                    522 ;   RXCHAR last received character 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                    523 ; output:
                                    524 ;   text in tib  buffer
                                    525 ;   count  line length 
                                    526 ;------------------------------------
                                    527 	; local variables
                           000001   528 	LL_HB=1  ; line length high byte 
                           000001   529 	RXCHAR = 1 ; last char received
                           000002   530 	LL = 2  ; accepted line length
                           000003   531 	CPOS=3  ; cursor position 
                           000004   532 	OVRWR=4 ; overwrite flag 
                           000005   533 	YTEMP=5 ; 
                           000006   534 	VSIZE=6 
      000A61                        535 readln::
      000A61 90 89            [ 2]  536 	pushw y 
      000A63                        537 	_vars VSIZE 
      000A63 52 06            [ 2]    1     sub sp,#VSIZE 
      000A65 5F               [ 1]  538 	clrw x 
      000A66 1F 02            [ 2]  539 	ldw (LL,sp),x 
      000A68 1F 03            [ 2]  540 	ldw (CPOS,sp),x 
      000A6A 03 04            [ 1]  541 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A6C 90 AE 16 68      [ 2]  542  	ldw y,#tib ; terminal input buffer
      000A70                        543 readln_loop:
      000A70 CD 09 0F         [ 4]  544 	call getc
      000A73 6B 01            [ 1]  545 	ld (RXCHAR,sp),a
      000A75 A1 1B            [ 1]  546     cp a,#ESC 
      000A77 26 05            [ 1]  547     jrne 0$
      000A79 CD 09 36         [ 4]  548     call get_escape 
      000A7C 6B 01            [ 1]  549     ld (RXCHAR,sp),a 
      000A7E A1 0D            [ 1]  550 0$:	cp a,#CR
      000A80 26 03            [ 1]  551 	jrne 1$
      000A82 CC 0C 09         [ 2]  552 	jp readln_quit
      000A85 A1 0A            [ 1]  553 1$:	cp a,#LF 
      000A87 26 03            [ 1]  554 	jrne 2$ 
      000A89 CC 0C 09         [ 2]  555 	jp readln_quit
      000A8C                        556 2$:
      000A8C A1 08            [ 1]  557 	cp a,#BS
      000A8E 26 12            [ 1]  558 	jrne 3$
                                    559 ; delete left 
      000A90 0D 03            [ 1]  560     tnz (CPOS,sp)
      000A92 27 DC            [ 1]  561     jreq readln_loop 
      000A94 A6 01            [ 1]  562     ld a,#1 
      000A96 CD 09 AD         [ 4]  563     call move_left
      000A99 0A 03            [ 1]  564     dec (CPOS,sp)
      000A9B 90 5A            [ 2]  565     decw y 
      000A9D 7B 03            [ 1]  566     ld a,(CPOS,sp) 
      000A9F CC 0B B5         [ 2]  567     jp 12$
      000AA2                        568 3$:
      000AA2 A1 04            [ 1]  569 	cp a,#CTRL_D
      000AA4 26 1A            [ 1]  570 	jrne 4$
                                    571 ;delete line 
      000AA6 CD 0A 53         [ 4]  572 	call delete_line 
      000AA9 7B 03            [ 1]  573     ld a,(CPOS,sp)
      000AAB 4C               [ 1]  574     inc a 
      000AAC CD 09 AD         [ 4]  575     call move_left 
      000AAF A6 3E            [ 1]  576 	ld a,#'> 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000AB1 CD 08 FF         [ 4]  577 	call putc 
      000AB4 90 AE 16 68      [ 2]  578 	ldw y,#tib
      000AB8 90 7F            [ 1]  579 	clr (y)
      000ABA 0F 02            [ 1]  580 	clr (LL,sp)
      000ABC 0F 03            [ 1]  581 	clr (CPOS,sp)
      000ABE 20 B0            [ 2]  582 	jra readln_loop
      000AC0                        583 4$:
      000AC0 A1 12            [ 1]  584 	cp a,#CTRL_R 
      000AC2 26 1E            [ 1]  585 	jrne 5$
                                    586 ;repeat line 
      000AC4 0D 02            [ 1]  587 	tnz (LL,sp)
      000AC6 26 A8            [ 1]  588 	jrne readln_loop
      000AC8 90 AE 16 68      [ 2]  589 	ldw y,#tib 
      000ACC 93               [ 1]  590 	ldw x,y
      000ACD CD 13 99         [ 4]  591 	call strlen
      000AD0 4D               [ 1]  592 	tnz a  
      000AD1 27 9D            [ 1]  593 	jreq readln_loop
      000AD3 6B 02            [ 1]  594 	ld (LL,sp),a 
      000AD5 6B 03            [ 1]  595     ld (CPOS,sp),a
      000AD7 93               [ 1]  596 	ldw x,y  
      000AD8 CD 09 5C         [ 4]  597 	call puts
      000ADB 0F 01            [ 1]  598 	clr (LL_HB,sp)
      000ADD 72 F9 01         [ 2]  599 	addw y,(LL_HB,sp)
      000AE0 20 8E            [ 2]  600 	jra readln_loop 
      000AE2                        601 5$:
      000AE2 A1 05            [ 1]  602 	cp a,#CTRL_E 
      000AE4 26 4D            [ 1]  603 	jrne 6$
                                    604 ;edit line number 
      000AE6 AE 16 68         [ 2]  605 	ldw x,#tib 
      000AE9 17 05            [ 2]  606 	ldw (YTEMP,sp),y  
      000AEB 16 07            [ 2]  607 	ldw y,(VSIZE+1,sp) ; restore xstack pointer 
      000AED CD 18 F6         [ 4]  608 	call atoi24
      000AF0 16 05            [ 2]  609 	ldw y,(YTEMP,sp) ; restore tib pointer 
      000AF2 4F               [ 1]  610 	clr a
      000AF3 CD 0C 45         [ 4]  611 	call search_lineno
      000AF6 5D               [ 2]  612 	tnzw x 
      000AF7 26 0B            [ 1]  613 	jrne 51$
      000AF9 0F 02            [ 1]  614 	clr (LL,sp)
      000AFB 90 AE 16 68      [ 2]  615 	ldw y,#tib
      000AFF 90 7F            [ 1]  616     clr (y) 	
      000B01 CC 0C 09         [ 2]  617 	jp readln_quit  
      000B04                        618 51$:
      000B04 CF 00 04         [ 2]  619 	ldw basicptr,x
      000B07 E6 02            [ 1]  620 	ld a,(2,x)
      000B09 C7 00 02         [ 1]  621 	ld count,a 
      000B0C 90 AE 16 68      [ 2]  622 	ldw y,#tib 
      000B10 CD 11 B5         [ 4]  623 	call decompile 
      000B13 0F 01            [ 1]  624 	clr (LL_HB,sp)
      000B15 A6 0D            [ 1]  625 	ld a,#CR 
      000B17 CD 08 FF         [ 4]  626 	call putc 
      000B1A A6 3E            [ 1]  627 	ld a,#'>
      000B1C CD 08 FF         [ 4]  628 	call putc
      000B1F AE 16 68         [ 2]  629     ldw x,#tib  
      000B22 CD 13 99         [ 4]  630 	call strlen 
      000B25 6B 02            [ 1]  631 	ld (LL,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000B27 CD 09 5C         [ 4]  632 	call puts 
      000B2A 90 93            [ 1]  633 	ldw y,x
      000B2C 7B 02            [ 1]  634     ld a,(LL,sp)
      000B2E 6B 03            [ 1]  635     ld (CPOS,sp),a  
      000B30 CC 0A 70         [ 2]  636 	jp readln_loop
      000B33                        637 6$:
      000B33 A1 81            [ 1]  638 	cp a,#ARROW_RIGHT
      000B35 26 15            [ 1]  639    	jrne 7$ 
                                    640 ; right arrow
      000B37 7B 03            [ 1]  641 	ld a,(CPOS,sp)
      000B39 11 02            [ 1]  642     cp a,(LL,sp)
      000B3B 2B 03            [ 1]  643     jrmi 61$
      000B3D CC 0A 70         [ 2]  644     jp readln_loop 
      000B40                        645 61$:
      000B40 A6 01            [ 1]  646     ld a,#1 
      000B42 CD 09 BB         [ 4]  647 	call move_right 
      000B45 0C 03            [ 1]  648 	inc (CPOS,sp)
      000B47 90 5C            [ 1]  649     incw y 
      000B49 CC 0A 70         [ 2]  650     jp readln_loop 
      000B4C A1 80            [ 1]  651 7$: cp a,#ARROW_LEFT  
      000B4E 26 13            [ 1]  652 	jrne 8$
                                    653 ; left arrow 
      000B50 0D 03            [ 1]  654 	tnz (CPOS,sp)
      000B52 26 03            [ 1]  655 	jrne 71$
      000B54 CC 0A 70         [ 2]  656 	jp readln_loop
      000B57                        657 71$:
      000B57 A6 01            [ 1]  658     ld a,#1 
      000B59 CD 09 AD         [ 4]  659 	call move_left 
      000B5C 0A 03            [ 1]  660 	dec (CPOS,sp)
      000B5E 90 5A            [ 2]  661     decw y 
      000B60 CC 0A 70         [ 2]  662 	jp readln_loop 
      000B63 A1 82            [ 1]  663 8$: cp a,#HOME  
      000B65 26 0E            [ 1]  664 	jrne 9$
                                    665 ; HOME 
      000B67 7B 03            [ 1]  666     ld a,(CPOS,sp)
      000B69 CD 09 AD         [ 4]  667     call move_left 
      000B6C 0F 03            [ 1]  668 	clr (CPOS,sp)
      000B6E 90 AE 16 68      [ 2]  669     ldw y,#tib 
      000B72 CC 0A 70         [ 2]  670 	jp readln_loop  
      000B75 A1 83            [ 1]  671 9$: cp a,#KEY_END  
      000B77 26 26            [ 1]  672 	jrne 10$
                                    673 ; KEY_END 
      000B79 7B 03            [ 1]  674 	ld a,(CPOS,sp)
      000B7B 11 02            [ 1]  675 	cp a,(LL,sp)
      000B7D 26 03            [ 1]  676 	jrne 91$
      000B7F CC 0A 70         [ 2]  677 	jp readln_loop 
      000B82                        678 91$:
      000B82 7B 02            [ 1]  679 	ld a,(LL,sp)
      000B84 10 03            [ 1]  680 	sub a,(CPOS,sp)
      000B86 CD 09 BB         [ 4]  681 	call move_right 
      000B89 7B 02            [ 1]  682 	ld a,(LL,sp)
      000B8B 6B 03            [ 1]  683 	ld (CPOS,sp),a
      000B8D 90 AE 16 68      [ 2]  684     ldw y,#tib
      000B91 72 5F 00 0D      [ 1]  685     clr acc16 
      000B95 C7 00 0E         [ 1]  686     ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000B98 72 B9 00 0D      [ 2]  687     addw y,acc16  
      000B9C CC 0A 70         [ 2]  688 	jp readln_loop 
      000B9F A1 0F            [ 1]  689 10$: cp a,#CTRL_O
      000BA1 26 08            [ 1]  690 	jrne 11$ 
                                    691 ; toggle between insert/overwrite
      000BA3 03 04            [ 1]  692 	cpl (OVRWR,sp)
      000BA5 CD 26 0F         [ 4]  693 	call beep_1khz
      000BA8 CC 0A 70         [ 2]  694 	jp readln_loop 
      000BAB A1 84            [ 1]  695 11$: cp a,#SUP 
      000BAD 26 11            [ 1]  696     jrne final_test 
                                    697 ; del character under cursor 
      000BAF 7B 03            [ 1]  698     ld a,(CPOS,sp)
      000BB1 11 02            [ 1]  699     cp a,(LL,sp)
      000BB3 2A 08            [ 1]  700     jrpl 13$
      000BB5                        701 12$:
      000BB5 97               [ 1]  702     ld xl,a    ; cursor position 
      000BB6 7B 02            [ 1]  703     ld a,(LL,sp)  ; line length
      000BB8 CD 0A 18         [ 4]  704     call delete_under
      000BBB 0A 02            [ 1]  705     dec (LLEN,sp)
      000BBD                        706 13$:
      000BBD CC 0A 70         [ 2]  707     jp readln_loop 
      000BC0                        708 final_test:
      000BC0 A1 20            [ 1]  709 	cp a,#SPACE
      000BC2 2A 03            [ 1]  710 	jrpl accept_char
      000BC4 CC 0A 70         [ 2]  711 	jp readln_loop
      000BC7                        712 accept_char:
      000BC7 A6 4F            [ 1]  713 	ld a,#TIB_SIZE-1
      000BC9 11 02            [ 1]  714 	cp a, (LL,sp)
      000BCB 2A 03            [ 1]  715 	jrpl 1$
      000BCD CC 0A 70         [ 2]  716 	jp readln_loop
      000BD0 0D 04            [ 1]  717 1$:	tnz (OVRWR,sp)
      000BD2 26 18            [ 1]  718 	jrne overwrite
                                    719 ; insert mode 
      000BD4 7B 03            [ 1]  720     ld a,(CPOS,sp)
      000BD6 11 02            [ 1]  721     cp a,(LL,sp)
      000BD8 27 12            [ 1]  722     jreq overwrite
      000BDA 7B 02            [ 1]  723     ld a,(LL,sp)
      000BDC 97               [ 1]  724     ld xl,a 
      000BDD 7B 03            [ 1]  725     ld a,(CPOS,sp)
      000BDF 95               [ 1]  726     ld xh,a
      000BE0 7B 01            [ 1]  727     ld a,(RXCHAR,sp)
      000BE2 CD 09 D5         [ 4]  728     call insert_char
      000BE5 0C 02            [ 1]  729     inc (LLEN,sp)
      000BE7 0C 03            [ 1]  730     inc (CPOS,sp)	
      000BE9 CC 0A 70         [ 2]  731     jp readln_loop 
      000BEC                        732 overwrite:
      000BEC 7B 01            [ 1]  733 	ld a,(RXCHAR,sp)
      000BEE 90 F7            [ 1]  734 	ld (y),a
      000BF0 90 5C            [ 1]  735     incw y
      000BF2 CD 08 FF         [ 4]  736     call putc 
      000BF5 7B 03            [ 1]  737 	ld a,(CPOS,sp)
      000BF7 11 02            [ 1]  738 	cp a,(LL,sp)
      000BF9 2B 09            [ 1]  739 	jrmi 1$
      000BFB 90 7F            [ 1]  740 	clr (y)
      000BFD 0C 02            [ 1]  741 	inc (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000BFF 0C 03            [ 1]  742     inc (CPOS,sp)
      000C01 CC 0A 70         [ 2]  743 	jp readln_loop 
      000C04                        744 1$:	
      000C04 0C 03            [ 1]  745 	inc (CPOS,sp)
      000C06 CC 0A 70         [ 2]  746 	jp readln_loop 
      000C09                        747 readln_quit:
      000C09 90 AE 16 68      [ 2]  748 	ldw y,#tib
      000C0D 0F 01            [ 1]  749     clr (LL_HB,sp) 
      000C0F 72 F9 01         [ 2]  750     addw y,(LL_HB,sp)
      000C12 90 7F            [ 1]  751     clr (y)
      000C14 7B 02            [ 1]  752 	ld a,(LL,sp)
      000C16 C7 00 02         [ 1]  753 	ld count,a 
      000C19 A6 0D            [ 1]  754 	ld a,#CR
      000C1B CD 08 FF         [ 4]  755 	call putc
      000C1E                        756 	_drop VSIZE 
      000C1E 5B 06            [ 2]    1     addw sp,#VSIZE 
      000C20 90 85            [ 2]  757 	popw y 
      000C22 81               [ 4]  758 	ret
                                    759 
                                    760 ;------------------------------
                                    761 ; print byte  in hexadecimal 
                                    762 ; on console
                                    763 ; input:
                                    764 ;    A		byte to print
                                    765 ;------------------------------
      000C23                        766 print_hex::
      000C23 88               [ 1]  767 	push a 
      000C24 4E               [ 1]  768 	swap a 
      000C25 CD 0C 3A         [ 4]  769 	call to_hex_char 
      000C28 CD 08 FF         [ 4]  770 	call putc 
      000C2B 7B 01            [ 1]  771     ld a,(1,sp) 
      000C2D CD 0C 3A         [ 4]  772 	call to_hex_char
      000C30 CD 08 FF         [ 4]  773 	call putc
      000C33 A6 20            [ 1]  774 	ld a,#SPACE 
      000C35 CD 08 FF         [ 4]  775 	call putc 
      000C38 84               [ 1]  776 	pop a 
      000C39 81               [ 4]  777 	ret 
                                    778 
                                    779 ;----------------------------------
                                    780 ; convert to hexadecimal digit 
                                    781 ; input:
                                    782 ;   A       digit to convert 
                                    783 ; output:
                                    784 ;   A       hexdecimal character 
                                    785 ;----------------------------------
      000C3A                        786 to_hex_char::
      000C3A A4 0F            [ 1]  787 	and a,#15 
      000C3C A1 09            [ 1]  788 	cp a,#9 
      000C3E 23 02            [ 2]  789 	jrule 1$ 
      000C40 AB 07            [ 1]  790 	add a,#7
      000C42 AB 30            [ 1]  791 1$: add a,#'0 
      000C44 81               [ 4]  792 	ret 
                                    793 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C45                         51 search_lineno::
      000C45                         52 	_vars VSIZE
      000C45 52 02            [ 2]    1     sub sp,#VSIZE 
      000C47 0F 01            [ 1]   53 	clr (LL,sp)
      000C49 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C4D 4D               [ 1]   55 	tnz a 
      000C4E 27 04            [ 1]   56 	jreq search_ln_loop
      000C50 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C54                         58 search_ln_loop:
      000C54 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C58 2A 10            [ 1]   60 	jrpl 8$
      000C5A 90 F3            [ 1]   61 	cpw x,(y)
      000C5C 27 0E            [ 1]   62 	jreq 9$
      000C5E 2B 0A            [ 1]   63 	jrmi 8$ 
      000C60 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C63 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C65 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C68 20 EA            [ 2]   67 	jra search_ln_loop 
      000C6A                         68 8$: 
      000C6A 5F               [ 1]   69 	clrw x 	
      000C6B 51               [ 1]   70 	exgw x,y 
      000C6C                         71 9$: _drop VSIZE
      000C6C 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C6E 51               [ 1]   72 	exgw x,y   
      000C6F 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C70                         83 del_line: 
      000C70                         84 	_vars VSIZE 
      000C70 52 04            [ 2]    1     sub sp,#VSIZE 
      000C72 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C74 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C76 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C78 90 93            [ 1]   88 	ldw y,x  
      000C7A 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C7D 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C7F 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000C83 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C86 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C8A 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C8C CD 13 C5         [ 4]   95 	call move
      000C8F 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000C93 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C96 90 CF 00 1D      [ 2]   98 	ldw txtend,y
      000C9A 90 CF 00 30      [ 2]   99 	ldw dvar_bgn,y 
      000C9E 90 CF 00 32      [ 2]  100 	ldw dvar_end,y   
      000CA2                        101 	_drop VSIZE     
      000CA2 5B 04            [ 2]    1     addw sp,#VSIZE 
      000CA4 81               [ 4]  102 	ret 
                                    103 
                                    104 ;---------------------------------------------
                                    105 ; open a gap in text area to 
                                    106 ; move new line in this gap
                                    107 ; input:
                                    108 ;    X 			addr gap start 
                                    109 ;    Y 			gap length 
                                    110 ; output:
                                    111 ;    X 			addr gap start 
                                    112 ;--------------------------------------------
                           000001   113 	DEST=1
                           000003   114 	SRC=3
                           000005   115 	LEN=5
                           000006   116 	VSIZE=6 
      000CA5                        117 open_gap:
      000CA5 C3 00 1D         [ 2]  118 	cpw x,txtend 
      000CA8 24 31            [ 1]  119 	jruge 9$
      000CAA                        120 	_vars VSIZE
      000CAA 52 06            [ 2]    1     sub sp,#VSIZE 
      000CAC 1F 03            [ 2]  121 	ldw (SRC,sp),x 
      000CAE 17 05            [ 2]  122 	ldw (LEN,sp),y 
      000CB0 90 CF 00 0D      [ 2]  123 	ldw acc16,y 
      000CB4 90 93            [ 1]  124 	ldw y,x ; SRC
      000CB6 72 BB 00 0D      [ 2]  125 	addw x,acc16  
      000CBA 1F 01            [ 2]  126 	ldw (DEST,sp),x 
                                    127 ;compute size to move 	
      000CBC CE 00 1D         [ 2]  128 	ldw x,txtend 
      000CBF 72 F0 03         [ 2]  129 	subw x,(SRC,sp)
      000CC2 CF 00 0D         [ 2]  130 	ldw acc16,x ; size to move
      000CC5 1E 01            [ 2]  131 	ldw x,(DEST,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      000CC7 CD 13 C5         [ 4]  132 	call move
      000CCA CE 00 1D         [ 2]  133 	ldw x,txtend
      000CCD 72 FB 05         [ 2]  134 	addw x,(LEN,sp)
      000CD0 CF 00 1D         [ 2]  135 	ldw txtend,x
      000CD3 CF 00 30         [ 2]  136 	ldw dvar_bgn,x 
      000CD6 CF 00 32         [ 2]  137 	ldw dvar_end,x 
      000CD9                        138 	_drop VSIZE 
      000CD9 5B 06            [ 2]    1     addw sp,#VSIZE 
      000CDB 81               [ 4]  139 9$:	ret 
                                    140 
                                    141 ;--------------------------------------------
                                    142 ; insert line in pad into text area 
                                    143 ; first search for already existing 
                                    144 ; replace existing 
                                    145 ; if new line empty delete existing one. 
                                    146 ; input:
                                    147 ;   ptr16		pointer to tokenized line  
                                    148 ; output:
                                    149 ;   none
                                    150 ;---------------------------------------------
                           000001   151 	DEST=1  ; text area insertion address 
                           000003   152 	SRC=3   ; str to insert address 
                           000005   153 	LINENO=5 ; line number 
                           000007   154 	LLEN=7 ; line length 
                           000008   155 	VSIZE=8  
      000CDC                        156 insert_line:
      000CDC                        157 	_vars VSIZE 
      000CDC 52 08            [ 2]    1     sub sp,#VSIZE 
      000CDE 72 CE 00 19      [ 5]  158 	ldw x,[ptr16]
      000CE2 1F 05            [ 2]  159 	ldw (LINENO,sp),x 
      000CE4 0F 07            [ 1]  160 	clr (LLEN,sp)
      000CE6 CE 00 19         [ 2]  161 	ldw x,ptr16 
      000CE9 E6 02            [ 1]  162 	ld a,(2,x)
      000CEB 6B 08            [ 1]  163 	ld (LLEN+1,sp),a 
      000CED 4F               [ 1]  164 	clr a 
      000CEE 1E 05            [ 2]  165 	ldw x,(LINENO,sp)
      000CF0 CD 0C 45         [ 4]  166 	call search_lineno
      000CF3 5D               [ 2]  167 	tnzw x 
      000CF4 27 07            [ 1]  168 	jreq 0$ 
      000CF6 1F 01            [ 2]  169 	ldw (DEST,sp),x 
      000CF8 CD 0C 70         [ 4]  170 	call del_line 
      000CFB 20 02            [ 2]  171 	jra 1$
      000CFD 17 01            [ 2]  172 0$: ldw (DEST,sp),y
      000CFF A6 03            [ 1]  173 1$: ld a,#3 
      000D01 11 08            [ 1]  174 	cp a,(LLEN+1,sp)
      000D03 27 42            [ 1]  175 	jreq 9$
                                    176 ; check for space 
      000D05 CE 00 1D         [ 2]  177 	ldw x,txtend 
      000D08 72 FB 07         [ 2]  178 	addw x,(LLEN,sp)
      000D0B A3 16 4A         [ 2]  179 	cpw x,#tib-10*CELL_SIZE ; keep 10 slots space for @() array.  
      000D0E 25 0C            [ 1]  180 	jrult 3$
      000D10 72 1C 00 22      [ 1]  181 	bset flags,#FLN_REJECTED
      000D14 AE 14 F8         [ 2]  182 	ldw x,#err_mem_full 
      000D17 CD 09 5C         [ 4]  183 	call puts 
      000D1A 20 2B            [ 2]  184 	jra 9$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      000D1C                        185 3$: ; create gap to insert line 
      000D1C 1E 01            [ 2]  186 	ldw x,(DEST,sp) 
      000D1E 16 07            [ 2]  187 	ldw y,(LLEN,sp)
      000D20 CD 0C A5         [ 4]  188 	call open_gap 
                                    189 ; move new line in gap 
      000D23 1E 07            [ 2]  190 	ldw x,(LLEN,sp)
      000D25 CF 00 0D         [ 2]  191 	ldw acc16,x 
      000D28 90 AE 16 B8      [ 2]  192 	ldw y,#pad ;SRC 
      000D2C 1E 01            [ 2]  193 	ldw x,(DEST,sp) ; dest address 
      000D2E CD 13 C5         [ 4]  194 	call move
      000D31 1E 01            [ 2]  195 	ldw x,(DEST,sp)
      000D33 C3 00 1D         [ 2]  196 	cpw x,txtend 
      000D36 25 0F            [ 1]  197 	jrult 9$ 
      000D38 1E 07            [ 2]  198 	ldw x,(LLEN,sp)
      000D3A 72 BB 00 1D      [ 2]  199 	addw x,txtend 
      000D3E CF 00 1D         [ 2]  200 	ldw txtend,x 
      000D41 CF 00 30         [ 2]  201 	ldw dvar_bgn,x 
      000D44 CF 00 32         [ 2]  202 	ldw dvar_end,x 
      000D47                        203 9$:	
      000D47                        204 	_drop VSIZE
      000D47 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D49 81               [ 4]  205 	ret
                                    206 
                                    207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    208 ;; compiler routines        ;;
                                    209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    210 ;------------------------------------
                                    211 ; parse quoted string 
                                    212 ; input:
                                    213 ;   Y 	pointer to tib 
                                    214 ;   X   pointer to output buffer 
                                    215 ; output:
                                    216 ;	buffer   parsed string
                                    217 ;------------------------------------
                           000001   218 	PREV = 1
                           000002   219 	CURR =2
                           000002   220 	VSIZE=2
      000D4A                        221 parse_quote: 
      000D4A                        222 	_vars VSIZE 
      000D4A 52 02            [ 2]    1     sub sp,#VSIZE 
      000D4C 4F               [ 1]  223 	clr a
      000D4D 6B 01            [ 1]  224 1$:	ld (PREV,sp),a 
      000D4F                        225 2$:	
      000D4F 91 D6 00         [ 4]  226 	ld a,([in.w],y)
      000D52 27 24            [ 1]  227 	jreq 6$
      000D54 72 5C 00 01      [ 1]  228 	inc in 
      000D58 6B 02            [ 1]  229 	ld (CURR,sp),a 
      000D5A A6 5C            [ 1]  230 	ld a,#'\
      000D5C 11 01            [ 1]  231 	cp a, (PREV,sp)
      000D5E 26 0A            [ 1]  232 	jrne 3$
      000D60 0F 01            [ 1]  233 	clr (PREV,sp)
      000D62 7B 02            [ 1]  234 	ld a,(CURR,sp)
      000D64 AD 1C            [ 4]  235 	callr convert_escape
      000D66 F7               [ 1]  236 	ld (x),a 
      000D67 5C               [ 1]  237 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      000D68 20 E5            [ 2]  238 	jra 2$
      000D6A                        239 3$:
      000D6A 7B 02            [ 1]  240 	ld a,(CURR,sp)
      000D6C A1 5C            [ 1]  241 	cp a,#'\'
      000D6E 27 DD            [ 1]  242 	jreq 1$
      000D70 A1 22            [ 1]  243 	cp a,#'"
      000D72 27 04            [ 1]  244 	jreq 6$ 
      000D74 F7               [ 1]  245 	ld (x),a 
      000D75 5C               [ 1]  246 	incw x 
      000D76 20 D7            [ 2]  247 	jra 2$
      000D78                        248 6$:
      000D78 7F               [ 1]  249 	clr (x)
      000D79 5C               [ 1]  250 	incw x 
      000D7A 90 93            [ 1]  251 	ldw y,x 
      000D7C 5F               [ 1]  252 	clrw x 
      000D7D A6 02            [ 1]  253 	ld a,#TK_QSTR  
      000D7F                        254 	_drop VSIZE
      000D7F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D81 81               [ 4]  255 	ret 
                                    256 
                                    257 ;---------------------------------------
                                    258 ; called by parse_quote
                                    259 ; subtitute escaped character 
                                    260 ; by their ASCII value .
                                    261 ; input:
                                    262 ;   A  character following '\'
                                    263 ; output:
                                    264 ;   A  substitued char or same if not valid.
                                    265 ;---------------------------------------
      000D82                        266 convert_escape:
      000D82 89               [ 2]  267 	pushw x 
      000D83 AE 0D 97         [ 2]  268 	ldw x,#escaped 
      000D86 F1               [ 1]  269 1$:	cp a,(x)
      000D87 27 06            [ 1]  270 	jreq 2$
      000D89 7D               [ 1]  271 	tnz (x)
      000D8A 27 09            [ 1]  272 	jreq 3$
      000D8C 5C               [ 1]  273 	incw x 
      000D8D 20 F7            [ 2]  274 	jra 1$
      000D8F 1D 0D 97         [ 2]  275 2$: subw x,#escaped 
      000D92 9F               [ 1]  276 	ld a,xl 
      000D93 AB 07            [ 1]  277 	add a,#7
      000D95 85               [ 2]  278 3$:	popw x 
      000D96 81               [ 4]  279 	ret 
                                    280 
      000D97 61 62 74 6E 76 66 72   281 escaped:: .asciz "abtnvfr"
             00
                                    282 
                                    283 ;-------------------------
                                    284 ; integer parser 
                                    285 ; input:
                                    286 ;   X 		point to output buffer  
                                    287 ;   Y 		point to tib 
                                    288 ;   A 	    first digit|'$' 
                                    289 ; output:  
                                    290 ;   X 		integer bits 15..0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    291 ;   A 		TK_INTGR
                                    292 ;   acc24   24 bits integer 
                                    293 ;-------------------------
                           000001   294 	BASE=1
                           000002   295 	TCHAR=2 
                           000003   296 	XSAVE=3
                           000004   297 	VSIZE=4 
      000D9F                        298 parse_integer: ; { -- n }
      000D9F 89               [ 2]  299 	pushw x 	
      000DA0 4B 00            [ 1]  300 	push #0 ; TCHAR
      000DA2 4B 0A            [ 1]  301 	push #10 ; BASE=10
      000DA4 A1 24            [ 1]  302 	cp a,#'$
      000DA6 26 04            [ 1]  303 	jrne 2$ 
      000DA8                        304     _drop #1
      000DA8 5B 01            [ 2]    1     addw sp,##1 
      000DAA 4B 10            [ 1]  305 	push #16  ; BASE=16
      000DAC F7               [ 1]  306 2$:	ld (x),a 
      000DAD 5C               [ 1]  307 	incw x 
      000DAE 91 D6 00         [ 4]  308 	ld a,([in.w],y)
      000DB1 72 5C 00 01      [ 1]  309 	inc in 
      000DB5 CD 18 EA         [ 4]  310 	call to_upper 
      000DB8 6B 02            [ 1]  311 	ld (TCHAR,sp),a 
      000DBA CD 0E 40         [ 4]  312 	call is_digit 
      000DBD 25 ED            [ 1]  313 	jrc 2$
      000DBF A6 10            [ 1]  314 	ld a,#16 
      000DC1 11 01            [ 1]  315 	cp a,(BASE,sp)
      000DC3 26 0A            [ 1]  316 	jrne 3$ 
      000DC5 7B 02            [ 1]  317 	ld a,(TCHAR,sp)
      000DC7 A1 41            [ 1]  318 	cp a,#'A 
      000DC9 2B 04            [ 1]  319 	jrmi 3$ 
      000DCB A1 47            [ 1]  320 	cp a,#'G 
      000DCD 2B DD            [ 1]  321 	jrmi 2$ 
      000DCF 72 5A 00 01      [ 1]  322 3$: dec in 	
      000DD3 7F               [ 1]  323     clr (x)
      000DD4 1E 03            [ 2]  324 	ldw x,(XSAVE,sp)
      000DD6 90 AE 17 73      [ 2]  325 	ldw y,#XSTACK_EMPTY 
      000DDA CD 18 F6         [ 4]  326 	call atoi24
      000DDD 16 03            [ 2]  327 	ldw y,(XSAVE,sp)
      000DDF C6 00 0C         [ 1]  328 	ld a,acc24 
      000DE2 90 F7            [ 1]  329 	ld (y),a 
      000DE4 90 5C            [ 1]  330 	incw y  
      000DE6 CE 00 0D         [ 2]  331 	ldw x,acc16 
      000DE9 90 FF            [ 2]  332 	ldw (y),x 
      000DEB 72 A9 00 02      [ 2]  333 	addw y,#2
      000DEF A6 84            [ 1]  334 	ld a,#TK_INTGR
      000DF1                        335 	_drop VSIZE  
      000DF1 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DF3 81               [ 4]  336 	ret 	
                                    337 
                                    338 ;-------------------------
                                    339 ; binary integer parser
                                    340 ; build integer in acc24  
                                    341 ; input:
                                    342 ;   X 		point to output buffer  
                                    343 ;   Y 		point to tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    344 ;   A 	    '&' 
                                    345 ; output:  
                                    346 ;   buffer  TK_INTGR integer  
                                    347 ;   X 		int16 
                                    348 ;   A 		TK_INTGR
                                    349 ;   acc24    int24 
                                    350 ;-------------------------
                           000001   351 	BINARY=1 ; 24 bits integer 
                           000003   352 	VSIZE=3
      000DF4                        353 parse_binary: ; { -- n }
      000DF4 4B 00            [ 1]  354 	push #0
      000DF6 4B 00            [ 1]  355 	push #0
      000DF8 4B 00            [ 1]  356 	push #0
      000DFA                        357 2$:	
      000DFA 91 D6 00         [ 4]  358 	ld a,([in.w],y)
      000DFD 72 5C 00 01      [ 1]  359 	inc in 
      000E01 A1 30            [ 1]  360 	cp a,#'0 
      000E03 27 06            [ 1]  361 	jreq 3$
      000E05 A1 31            [ 1]  362 	cp a,#'1 
      000E07 27 02            [ 1]  363 	jreq 3$ 
      000E09 20 0B            [ 2]  364 	jra bin_exit 
      000E0B A0 30            [ 1]  365 3$: sub a,#'0 
      000E0D 46               [ 1]  366 	rrc a
      000E0E 09 03            [ 1]  367 	rlc (BINARY+2,sp) 
      000E10 09 02            [ 1]  368 	rlc (BINARY+1,sp)
      000E12 09 01            [ 1]  369 	rlc (BINARY,sp) 
      000E14 20 E4            [ 2]  370 	jra 2$  
      000E16                        371 bin_exit:
      000E16 72 5A 00 01      [ 1]  372 	dec in 
      000E1A 90 93            [ 1]  373 	ldw y,x
      000E1C 7B 01            [ 1]  374 	ld a,(BINARY,sp)
      000E1E 90 F7            [ 1]  375 	ld (y),a 
      000E20 90 5C            [ 1]  376 	incw y 
      000E22 1E 02            [ 2]  377 	ldw x,(BINARY+1,sp)
      000E24 90 FF            [ 2]  378 	ldw (y),x 
      000E26 72 A9 00 02      [ 2]  379 	addw y,#2  
      000E2A A6 84            [ 1]  380 	ld a,#TK_INTGR 	
      000E2C                        381 	_drop VSIZE 
      000E2C 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E2E 81               [ 4]  382 	ret
                                    383 
                                    384 ;-------------------------------------
                                    385 ; check if A is a letter 
                                    386 ; input:
                                    387 ;   A 			character to test 
                                    388 ; output:
                                    389 ;   C flag      1 true, 0 false 
                                    390 ;-------------------------------------
      000E2F                        391 is_alpha::
      000E2F A1 41            [ 1]  392 	cp a,#'A 
      000E31 8C               [ 1]  393 	ccf 
      000E32 24 0B            [ 1]  394 	jrnc 9$ 
      000E34 A1 5B            [ 1]  395 	cp a,#'Z+1 
      000E36 25 07            [ 1]  396 	jrc 9$ 
      000E38 A1 61            [ 1]  397 	cp a,#'a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000E3A 8C               [ 1]  398 	ccf 
      000E3B 24 02            [ 1]  399 	jrnc 9$
      000E3D A1 7B            [ 1]  400 	cp a,#'z+1
      000E3F 81               [ 4]  401 9$: ret 	
                                    402 
                                    403 ;------------------------------------
                                    404 ; check if character in {'0'..'9'}
                                    405 ; input:
                                    406 ;    A  character to test
                                    407 ; output:
                                    408 ;    Carry  0 not digit | 1 digit
                                    409 ;------------------------------------
      000E40                        410 is_digit::
      000E40 A1 30            [ 1]  411 	cp a,#'0
      000E42 25 03            [ 1]  412 	jrc 1$
      000E44 A1 3A            [ 1]  413     cp a,#'9+1
      000E46 8C               [ 1]  414 	ccf 
      000E47 8C               [ 1]  415 1$:	ccf 
      000E48 81               [ 4]  416     ret
                                    417 
                                    418 ;-------------------------------------
                                    419 ; return true if character in  A 
                                    420 ; is letter or digit.
                                    421 ; input:
                                    422 ;   A     ASCII character 
                                    423 ; output:
                                    424 ;   A     no change 
                                    425 ;   Carry    0 false| 1 true 
                                    426 ;--------------------------------------
      000E49                        427 is_alnum::
      000E49 CD 0E 40         [ 4]  428 	call is_digit
      000E4C 25 03            [ 1]  429 	jrc 1$ 
      000E4E CD 0E 2F         [ 4]  430 	call is_alpha
      000E51 81               [ 4]  431 1$:	ret 
                                    432 
                                    433 ;-----------------------------
                                    434 ; check if character in A 
                                    435 ; is a valid symbol character 
                                    436 ; valid: Upper case LETTER,DIGIT,'_' 
                                    437 ; input:
                                    438 ;    A   character to validate
                                    439 ; output:
                                    440 ;    Carry   set if valid 
                                    441 ;----------------------------
      000E52                        442 is_symbol_char: 
      000E52 A1 5F            [ 1]  443 	cp a,#'_ 
      000E54 26 03            [ 1]  444 	jrne 1$
      000E56 99               [ 1]  445 	scf 
      000E57 20 03            [ 2]  446 	jra 9$ 
      000E59 CD 0E 49         [ 4]  447 1$:	call is_alnum 
      000E5C 81               [ 4]  448 9$: ret 
                                    449 
                                    450 ;---------------------------
                                    451 ;  when lexical unit begin 
                                    452 ;  with a letter a symbol 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    453 ;  is expected.
                                    454 ; input:
                                    455 ;   A   first character of symbol 
                                    456 ;	X   point to output buffer 
                                    457 ;   Y   point to input text 
                                    458 ; output:
                                    459 ;	X   after symbol 
                                    460 ;   Y   point after lexical unit 
                                    461 ;---------------------------
      000E5D                        462 parse_symbol:
      000E5D 5C               [ 1]  463 	incw x ; keep space for TK_ID 
      000E5E                        464 symb_loop: 
                                    465 ; symbol are converted to upper case 
      000E5E CD 18 EA         [ 4]  466 	call to_upper  
      000E61 F7               [ 1]  467 	ld (x), a 
      000E62 5C               [ 1]  468 	incw x
      000E63 91 D6 00         [ 4]  469 	ld a,([in.w],y)
      000E66 72 5C 00 01      [ 1]  470 	inc in 
      000E6A CD 0E 52         [ 4]  471 	call is_symbol_char 
      000E6D 25 EF            [ 1]  472 	jrc symb_loop 
      000E6F 7F               [ 1]  473 	clr (x)
      000E70 72 5A 00 01      [ 1]  474 	dec in  
      000E74 81               [ 4]  475 	ret 
                                    476 
                                    477 ;---------------------------
                                    478 ;  token begin with a letter,
                                    479 ;  is keyword or variable. 	
                                    480 ; input:
                                    481 ;   X 		point to pad 
                                    482 ;   Y 		point to text
                                    483 ;   A 	    first letter  
                                    484 ; output:
                                    485 ;   X		exec_addr|var_addr 
                                    486 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    487 ;   pad 	keyword|var_name  
                                    488 ;--------------------------  
                           000001   489 	XFIRST=1
                           000002   490 	VSIZE=2
      000E75                        491 parse_keyword: 
      000E75 89               [ 2]  492 	pushw x ; preserve *symbol 
      000E76 CD 0E 5D         [ 4]  493 	call parse_symbol
      000E79 1E 01            [ 2]  494 	ldw x,(XFIRST,sp) 
      000E7B E6 02            [ 1]  495 	ld a,(2,x)
      000E7D 26 0F            [ 1]  496 	jrne 2$
                                    497 ; one letter variable name 
      000E7F E6 01            [ 1]  498 	ld a,(1,x) 
      000E81 A0 41            [ 1]  499 	sub a,#'A 
      000E83 AE 00 03         [ 2]  500 	ldw x,#3 
      000E86 42               [ 4]  501 	mul x,a 
      000E87 1C 00 35         [ 2]  502 	addw x,#vars 
      000E8A A6 85            [ 1]  503 	ld a,#TK_VAR 
      000E8C 20 36            [ 2]  504 	jra 4$ 
      000E8E                        505 2$: ; check for keyword, otherwise syntax error.
      000E8E                        506 	_ldx_dict kword_dict ; dictionary entry point
      000E8E AE 36 9B         [ 2]    1     ldw x,#kword_dict+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000E91 16 01            [ 2]  507 	ldw y,(XFIRST,sp) ; name to search for
      000E93 90 5C            [ 1]  508 	incw y 
      000E95 CD 19 77         [ 4]  509 	call search_dict
      000E98 4D               [ 1]  510 	tnz a
      000E99 26 29            [ 1]  511 	jrne 4$
                                    512 ; not in dictionary
                                    513 ; compile it as TK_LABEL
      000E9B 16 01            [ 2]  514 	ldw y,(XFIRST,sp)
      000E9D A6 03            [ 1]  515 	ld a,#TK_LABEL 
      000E9F 90 F7            [ 1]  516 	ld (y),a 
      000EA1 90 5C            [ 1]  517 	incw y
      000EA3 93               [ 1]  518 	ldw x,y 
      000EA4 CD 13 99         [ 4]  519 	call strlen
      000EA7 A1 0F            [ 1]  520 	cp a,#NAME_MAX_LEN 
      000EA9 23 02            [ 2]  521 	jrule 22$ 
      000EAB A6 0F            [ 1]  522 	ld a,#NAME_MAX_LEN 
      000EAD                        523 22$:	
      000EAD 88               [ 1]  524 	push a 
      000EAE                        525 24$:
      000EAE 90 F6            [ 1]  526     ld a,(y)
      000EB0 27 09            [ 1]  527 	jreq 3$
      000EB2 90 5C            [ 1]  528 	incw y
      000EB4 0A 01            [ 1]  529 	dec (1,sp) 
      000EB6 26 F6            [ 1]  530 	jrne 24$
      000EB8 4F               [ 1]  531 	clr a 
      000EB9 90 F7            [ 1]  532 	ld (y),a 
      000EBB 90 5C            [ 1]  533 3$: incw y 
      000EBD                        534 	_drop 1 
      000EBD 5B 01            [ 2]    1     addw sp,#1 
      000EBF A6 03            [ 1]  535 	ld a,#TK_LABEL 
      000EC1 5F               [ 1]  536 	clrw x 
      000EC2 20 1B            [ 2]  537 	jra 5$ 
      000EC4                        538 4$:	
      000EC4 16 01            [ 2]  539 	ldw y,(XFIRST,sp)
      000EC6 A1 87            [ 1]  540 	cp a,#TK_NOT 
      000EC8 2B 06            [ 1]  541 	jrmi 41$
      000ECA 90 F7            [ 1]  542 	ld (y),a 
      000ECC 90 5C            [ 1]  543 	incw y 
      000ECE 20 0F            [ 2]  544 	jra 5$ 
      000ED0                        545 41$:	
      000ED0 A3 1D 04         [ 2]  546 	cpw x,#let  
      000ED3 27 0A            [ 1]  547 	jreq 5$  ; don't compile LET command 
      000ED5 90 F7            [ 1]  548 	ld (y),a 
      000ED7 90 5C            [ 1]  549 	incw y 
      000ED9 90 FF            [ 2]  550 	ldw (y),x
      000EDB 72 A9 00 02      [ 2]  551 	addw y,#2  
      000EDF                        552 5$:	_drop VSIZE 
      000EDF 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EE1 81               [ 4]  553 	ret  	
                                    554 
                                    555 ;------------------------------------
                                    556 ; skip character c in text starting from 'in'
                                    557 ; input:
                                    558 ;	 y 		point to text buffer
                                    559 ;    a 		character to skip
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    560 ; output:  
                                    561 ;	'in' ajusted to new position
                                    562 ;------------------------------------
                           000001   563 	C = 1 ; local var
      000EE2                        564 skip:
      000EE2 88               [ 1]  565 	push a
      000EE3 91 D6 00         [ 4]  566 1$:	ld a,([in.w],y)
      000EE6 27 0A            [ 1]  567 	jreq 2$
      000EE8 11 01            [ 1]  568 	cp a,(C,sp)
      000EEA 26 06            [ 1]  569 	jrne 2$
      000EEC 72 5C 00 01      [ 1]  570 	inc in
      000EF0 20 F1            [ 2]  571 	jra 1$
      000EF2                        572 2$: _drop 1 
      000EF2 5B 01            [ 2]    1     addw sp,#1 
      000EF4 81               [ 4]  573 	ret
                                    574 	
                                    575 
                                    576 ;------------------------------------
                                    577 ; scan text for next token
                                    578 ; input: 
                                    579 ;	X 		pointer to buffer where 
                                    580 ;	        token id and value are copied 
                                    581 ; use:
                                    582 ;	Y   pointer to text in tib 
                                    583 ; output:
                                    584 ;   A       token attribute 
                                    585 ;   X 		token value
                                    586 ;   Y       updated position in output buffer   
                                    587 ;------------------------------------
                                    588 	; use to check special character 
                                    589 	.macro _case c t  
                                    590 	ld a,#c 
                                    591 	cp a,(TCHAR,sp) 
                                    592 	jrne t
                                    593 	.endm 
                                    594 
                           000001   595 	TCHAR=1
                           000002   596 	ATTRIB=2
                           000002   597 	VSIZE=2
      000EF5                        598 get_token:: 
      000EF5                        599 	_vars VSIZE
      000EF5 52 02            [ 2]    1     sub sp,#VSIZE 
                                    600 ;	ld a,in 
                                    601 ;	sub a,count
                                    602 ;   jrmi 0$
                                    603 ;	clr a 
                                    604 ;	ret 
      000EF7                        605 0$: 
      000EF7 90 AE 16 68      [ 2]  606 	ldw y,#tib    	
      000EFB A6 20            [ 1]  607 	ld a,#SPACE
      000EFD CD 0E E2         [ 4]  608 	call skip
      000F00 55 00 01 00 03   [ 1]  609 	mov in.saved,in 
      000F05 91 D6 00         [ 4]  610 	ld a,([in.w],y)
      000F08 26 05            [ 1]  611 	jrne 1$
      000F0A 90 93            [ 1]  612 	ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000F0C CC 10 A6         [ 2]  613 	jp token_exit ; end of line 
      000F0F 72 5C 00 01      [ 1]  614 1$:	inc in 
      000F13 CD 18 EA         [ 4]  615 	call to_upper 
      000F16 6B 01            [ 1]  616 	ld (TCHAR,sp),a 
                                    617 ; check for quoted string
      000F18                        618 str_tst:  	
      000F18                        619 	_case '"' nbr_tst
      000F18 A6 22            [ 1]    1 	ld a,#'"' 
      000F1A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F1C 26 0A            [ 1]    3 	jrne nbr_tst
      000F1E A6 02            [ 1]  620 	ld a,#TK_QSTR
      000F20 F7               [ 1]  621 	ld (x),a 
      000F21 5C               [ 1]  622 	incw x 
      000F22 CD 0D 4A         [ 4]  623 	call parse_quote
      000F25 CC 10 A6         [ 2]  624 	jp token_exit
      000F28                        625 nbr_tst:
                                    626 ; check for hexadecimal number 
      000F28 A6 24            [ 1]  627 	ld a,#'$'
      000F2A 11 01            [ 1]  628 	cp a,(TCHAR,sp) 
      000F2C 27 17            [ 1]  629 	jreq 1$
                                    630 ;check for binary number 
      000F2E A6 26            [ 1]  631 	ld a,#'&
      000F30 11 01            [ 1]  632 	cp a,(TCHAR,sp)
      000F32 26 0A            [ 1]  633 	jrne 0$
      000F34 A6 84            [ 1]  634 	ld a,#TK_INTGR
      000F36 F7               [ 1]  635 	ld (x),a 
      000F37 5C               [ 1]  636 	incw x 
      000F38 CD 0D F4         [ 4]  637 	call parse_binary ; expect binary integer 
      000F3B CC 10 A6         [ 2]  638 	jp token_exit 
                                    639 ; check for decimal number 	
      000F3E 7B 01            [ 1]  640 0$:	ld a,(TCHAR,sp)
      000F40 CD 0E 40         [ 4]  641 	call is_digit
      000F43 24 0C            [ 1]  642 	jrnc 3$
      000F45 A6 84            [ 1]  643 1$:	ld a,#TK_INTGR 
      000F47 F7               [ 1]  644 	ld (x),a 
      000F48 5C               [ 1]  645 	incw x 
      000F49 7B 01            [ 1]  646 	ld a,(TCHAR,sp)
      000F4B CD 0D 9F         [ 4]  647 	call parse_integer 
      000F4E CC 10 A6         [ 2]  648 	jp token_exit 
      000F51                        649 3$: 
      000F51                        650 	_case '(' bkslsh_tst 
      000F51 A6 28            [ 1]    1 	ld a,#'(' 
      000F53 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F55 26 05            [ 1]    3 	jrne bkslsh_tst
      000F57 A6 06            [ 1]  651 	ld a,#TK_LPAREN
      000F59 CC 10 A2         [ 2]  652 	jp token_char   	
      000F5C                        653 bkslsh_tst: ; character token 
      000F5C                        654 	_case '\',rparnt_tst
      000F5C A6 5C            [ 1]    1 	ld a,#'\' 
      000F5E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F60 26 16            [ 1]    3 	jrne rparnt_tst
      000F62 A6 04            [ 1]  655 	ld a,#TK_CHAR 
      000F64 F7               [ 1]  656 	ld (x),a 
      000F65 5C               [ 1]  657 	incw x 
      000F66 91 D6 00         [ 4]  658 	ld a,([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000F69 F7               [ 1]  659 	ld (x),a 
      000F6A 5C               [ 1]  660 	incw x
      000F6B 90 93            [ 1]  661 	ldw y,x 	 
      000F6D 72 5C 00 01      [ 1]  662 	inc in  
      000F71 5F               [ 1]  663 	clrw x 
      000F72 97               [ 1]  664 	ld xl,a 
      000F73 A6 04            [ 1]  665 	ld a,#TK_CHAR 
      000F75 CC 10 A6         [ 2]  666 	jp token_exit 
      000F78                        667 rparnt_tst:		
      000F78                        668 	_case ')' colon_tst 
      000F78 A6 29            [ 1]    1 	ld a,#')' 
      000F7A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7C 26 05            [ 1]    3 	jrne colon_tst
      000F7E A6 07            [ 1]  669 	ld a,#TK_RPAREN 
      000F80 CC 10 A2         [ 2]  670 	jp token_char
      000F83                        671 colon_tst:
      000F83                        672 	_case ':' comma_tst 
      000F83 A6 3A            [ 1]    1 	ld a,#':' 
      000F85 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F87 26 05            [ 1]    3 	jrne comma_tst
      000F89 A6 0A            [ 1]  673 	ld a,#TK_COLON 
      000F8B CC 10 A2         [ 2]  674 	jp token_char  
      000F8E                        675 comma_tst:
      000F8E                        676 	_case COMMA sharp_tst 
      000F8E A6 2C            [ 1]    1 	ld a,#COMMA 
      000F90 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F92 26 05            [ 1]    3 	jrne sharp_tst
      000F94 A6 08            [ 1]  677 	ld a,#TK_COMMA
      000F96 CC 10 A2         [ 2]  678 	jp token_char
      000F99                        679 sharp_tst:
      000F99                        680 	_case SHARP dash_tst 
      000F99 A6 23            [ 1]    1 	ld a,#SHARP 
      000F9B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F9D 26 05            [ 1]    3 	jrne dash_tst
      000F9F A6 09            [ 1]  681 	ld a,#TK_SHARP
      000FA1 CC 10 A2         [ 2]  682 	jp token_char  	 	 
      000FA4                        683 dash_tst: 	
      000FA4                        684 	_case '-' at_tst 
      000FA4 A6 2D            [ 1]    1 	ld a,#'-' 
      000FA6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA8 26 05            [ 1]    3 	jrne at_tst
      000FAA A6 11            [ 1]  685 	ld a,#TK_MINUS  
      000FAC CC 10 A2         [ 2]  686 	jp token_char 
      000FAF                        687 at_tst:
      000FAF                        688 	_case '@' qmark_tst 
      000FAF A6 40            [ 1]    1 	ld a,#'@' 
      000FB1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FB3 26 05            [ 1]    3 	jrne qmark_tst
      000FB5 A6 05            [ 1]  689 	ld a,#TK_ARRAY 
      000FB7 CC 10 A2         [ 2]  690 	jp token_char
      000FBA                        691 qmark_tst:
      000FBA                        692 	_case '?' tick_tst 
      000FBA A6 3F            [ 1]    1 	ld a,#'?' 
      000FBC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FBE 26 12            [ 1]    3 	jrne tick_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000FC0 A6 80            [ 1]  693 	ld a,#TK_CMD  
      000FC2 F7               [ 1]  694 	ld (x),a 
      000FC3 5C               [ 1]  695 	incw x 
      000FC4 90 93            [ 1]  696 	ldw y,x 
      000FC6 AE 20 1E         [ 2]  697 	ldw x,#print
      000FC9 90 FF            [ 2]  698 	ldw (y),x 
      000FCB 72 A9 00 02      [ 2]  699 	addw y,#2
      000FCF CC 10 A6         [ 2]  700 	jp token_exit
      000FD2                        701 tick_tst: ; comment 
      000FD2                        702 	_case TICK plus_tst 
      000FD2 A6 27            [ 1]    1 	ld a,#TICK 
      000FD4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FD6 26 2B            [ 1]    3 	jrne plus_tst
      000FD8 A6 80            [ 1]  703 	ld a,#TK_CMD
      000FDA F7               [ 1]  704 	ld (x),a 
      000FDB 5C               [ 1]  705 	incw x
      000FDC 90 AE 21 66      [ 2]  706 	ldw y,#remark 
      000FE0 FF               [ 2]  707 	ldw (x),y 
      000FE1 1C 00 02         [ 2]  708 	addw x,#2  
      000FE4                        709 copy_comment:
      000FE4 90 AE 16 68      [ 2]  710 	ldw y,#tib 
      000FE8 72 B9 00 00      [ 2]  711 	addw y,in.w
      000FEC 90 89            [ 2]  712 	pushw y 
      000FEE CD 13 B5         [ 4]  713 	call strcpy
      000FF1 72 F2 01         [ 2]  714 	subw y,(1,sp)
      000FF4 90 5C            [ 1]  715 	incw y ; strlen+1 
      000FF6 17 01            [ 2]  716 	ldw (1,sp),y 
      000FF8 72 FB 01         [ 2]  717 	addw x,(1,sp) 
      000FFB                        718 	_drop 2 
      000FFB 5B 02            [ 2]    1     addw sp,#2 
      000FFD 4F               [ 1]  719 	clr a 
      000FFE 90 93            [ 1]  720 	ldw y,x 
      001000 CC 10 A6         [ 2]  721 	jp token_exit 
      001003                        722 plus_tst:
      001003                        723 	_case '+' star_tst 
      001003 A6 2B            [ 1]    1 	ld a,#'+' 
      001005 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001007 26 05            [ 1]    3 	jrne star_tst
      001009 A6 10            [ 1]  724 	ld a,#TK_PLUS  
      00100B CC 10 A2         [ 2]  725 	jp token_char 
      00100E                        726 star_tst:
      00100E                        727 	_case '*' slash_tst 
      00100E A6 2A            [ 1]    1 	ld a,#'*' 
      001010 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001012 26 05            [ 1]    3 	jrne slash_tst
      001014 A6 20            [ 1]  728 	ld a,#TK_MULT 
      001016 CC 10 A2         [ 2]  729 	jp token_char 
      001019                        730 slash_tst: 
      001019                        731 	_case '/' prcnt_tst 
      001019 A6 2F            [ 1]    1 	ld a,#'/' 
      00101B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00101D 26 05            [ 1]    3 	jrne prcnt_tst
      00101F A6 21            [ 1]  732 	ld a,#TK_DIV 
      001021 CC 10 A2         [ 2]  733 	jp token_char 
      001024                        734 prcnt_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001024                        735 	_case '%' eql_tst 
      001024 A6 25            [ 1]    1 	ld a,#'%' 
      001026 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001028 26 05            [ 1]    3 	jrne eql_tst
      00102A A6 22            [ 1]  736 	ld a,#TK_MOD
      00102C CC 10 A2         [ 2]  737 	jp token_char  
                                    738 ; 1 or 2 character tokens 	
      00102F                        739 eql_tst:
      00102F                        740 	_case '=' gt_tst 		
      00102F A6 3D            [ 1]    1 	ld a,#'=' 
      001031 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001033 26 05            [ 1]    3 	jrne gt_tst
      001035 A6 32            [ 1]  741 	ld a,#TK_EQUAL
      001037 CC 10 A2         [ 2]  742 	jp token_char 
      00103A                        743 gt_tst:
      00103A                        744 	_case '>' lt_tst 
      00103A A6 3E            [ 1]    1 	ld a,#'>' 
      00103C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00103E 26 23            [ 1]    3 	jrne lt_tst
      001040 A6 31            [ 1]  745 	ld a,#TK_GT 
      001042 6B 02            [ 1]  746 	ld (ATTRIB,sp),a 
      001044 91 D6 00         [ 4]  747 	ld a,([in.w],y)
      001047 72 5C 00 01      [ 1]  748 	inc in 
      00104B A1 3D            [ 1]  749 	cp a,#'=
      00104D 26 04            [ 1]  750 	jrne 1$
      00104F A6 33            [ 1]  751 	ld a,#TK_GE 
      001051 20 4F            [ 2]  752 	jra token_char  
      001053 A1 3C            [ 1]  753 1$: cp a,#'<
      001055 26 04            [ 1]  754 	jrne 2$
      001057 A6 35            [ 1]  755 	ld a,#TK_NE 
      001059 20 47            [ 2]  756 	jra token_char 
      00105B 72 5A 00 01      [ 1]  757 2$: dec in
      00105F 7B 02            [ 1]  758 	ld a,(ATTRIB,sp)
      001061 20 3F            [ 2]  759 	jra token_char 	 
      001063                        760 lt_tst:
      001063                        761 	_case '<' other
      001063 A6 3C            [ 1]    1 	ld a,#'<' 
      001065 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001067 26 23            [ 1]    3 	jrne other
      001069 A6 34            [ 1]  762 	ld a,#TK_LT 
      00106B 6B 02            [ 1]  763 	ld (ATTRIB,sp),a 
      00106D 91 D6 00         [ 4]  764 	ld a,([in.w],y)
      001070 72 5C 00 01      [ 1]  765 	inc in 
      001074 A1 3D            [ 1]  766 	cp a,#'=
      001076 26 04            [ 1]  767 	jrne 1$
      001078 A6 36            [ 1]  768 	ld a,#TK_LE 
      00107A 20 26            [ 2]  769 	jra token_char 
      00107C A1 3E            [ 1]  770 1$: cp a,#'>
      00107E 26 04            [ 1]  771 	jrne 2$
      001080 A6 35            [ 1]  772 	ld a,#TK_NE 
      001082 20 1E            [ 2]  773 	jra token_char 
      001084 72 5A 00 01      [ 1]  774 2$: dec in 
      001088 7B 02            [ 1]  775 	ld a,(ATTRIB,sp)
      00108A 20 16            [ 2]  776 	jra token_char 	
      00108C                        777 other: ; not a special character 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      00108C 7B 01            [ 1]  778 	ld a,(TCHAR,sp)
      00108E CD 0E 2F         [ 4]  779 	call is_alpha 
      001091 25 03            [ 1]  780 	jrc 30$ 
      001093 CC 16 A5         [ 2]  781 	jp syntax_error 
      001096                        782 30$: 
      001096 CD 0E 75         [ 4]  783 	call parse_keyword
      001099 A3 21 66         [ 2]  784 	cpw x,#remark 
      00109C 26 08            [ 1]  785 	jrne token_exit 
      00109E 93               [ 1]  786 	ldw x,y 
      00109F CC 0F E4         [ 2]  787 	jp copy_comment 
      0010A2                        788 token_char:
      0010A2 F7               [ 1]  789 	ld (x),a 
      0010A3 5C               [ 1]  790 	incw x
      0010A4 90 93            [ 1]  791 	ldw y,x 
      0010A6                        792 token_exit:
      0010A6                        793 	_drop VSIZE 
      0010A6 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010A8 81               [ 4]  794 	ret
                                    795 
                                    796 
                                    797 ;-----------------------------------
                                    798 ; create token list fromm text line 
                                    799 ; save this list in pad buffer 
                                    800 ;  compiled line format: 
                                    801 ;    line_no  2 bytes {0...32767}
                                    802 ;    count    1 byte  
                                    803 ;    tokens   variable length 
                                    804 ;   
                                    805 ; input:
                                    806 ;   none
                                    807 ; modified variables:
                                    808 ;   basicptr     token list buffer address 
                                    809 ;   in.w  		 3|count, i.e. index in buffer
                                    810 ;   count        length of line | 0  
                                    811 ;-----------------------------------
                           000001   812 	XSAVE=1
                           000002   813 	VSIZE=2
      0010A9                        814 compile::
      0010A9 90 89            [ 2]  815 	pushw y 
      0010AB                        816 	_vars VSIZE 
      0010AB 52 02            [ 2]    1     sub sp,#VSIZE 
      0010AD 55 00 1B 00 04   [ 1]  817 	mov basicptr,txtbgn
      0010B2 72 1A 00 22      [ 1]  818 	bset flags,#FCOMP 
      0010B6 A6 00            [ 1]  819 	ld a,#0
      0010B8 AE 00 00         [ 2]  820 	ldw x,#0
      0010BB CF 16 B8         [ 2]  821 	ldw pad,x ; destination buffer 
      0010BE C7 16 BA         [ 1]  822 	ld pad+2,a ; count 
      0010C1 AE 16 BB         [ 2]  823 	ldw x,#pad+3
      0010C4 72 5F 00 01      [ 1]  824 	clr in 
      0010C8 CD 0E F5         [ 4]  825 	call get_token
      0010CB A1 84            [ 1]  826 	cp a,#TK_INTGR
      0010CD 26 11            [ 1]  827 	jrne 2$
      0010CF A3 00 01         [ 2]  828 	cpw x,#1 
      0010D2 2A 05            [ 1]  829 	jrpl 1$
      0010D4 A6 0A            [ 1]  830 	ld a,#ERR_BAD_VALUE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      0010D6 CC 16 A7         [ 2]  831 	jp tb_error
      0010D9 CF 16 B8         [ 2]  832 1$:	ldw pad,x ; line# 
      0010DC 90 AE 16 BB      [ 2]  833 	ldw y,#pad+3 
      0010E0 90 A3 17 38      [ 2]  834 2$:	cpw y,#xstack_full 
      0010E4 25 05            [ 1]  835 	jrult 3$
      0010E6 A6 0F            [ 1]  836 	ld a,#ERR_BUF_FULL 
      0010E8 CC 16 A7         [ 2]  837 	jp tb_error 
      0010EB                        838 3$:	
      0010EB 93               [ 1]  839 	ldw x,y 
      0010EC CD 0E F5         [ 4]  840 	call get_token 
      0010EF A1 00            [ 1]  841 	cp a,#TK_NONE 
      0010F1 26 ED            [ 1]  842 	jrne 2$ 
                                    843 ; compilation completed  
      0010F3 72 A2 16 B8      [ 2]  844 	subw y,#pad ; compiled line length 
      0010F7 90 9F            [ 1]  845     ld a,yl
      0010F9 AE 16 B8         [ 2]  846 	ldw x,#pad 
      0010FC CF 00 19         [ 2]  847 	ldw ptr16,x 
      0010FF E7 02            [ 1]  848 	ld (2,x),a 
      001101 FE               [ 2]  849 	ldw x,(x)  ; line# 
      001102 27 09            [ 1]  850 	jreq 10$
      001104 CD 0C DC         [ 4]  851 	call insert_line
      001107 72 5F 00 02      [ 1]  852 	clr  count 
      00110B 20 0F            [ 2]  853 	jra  11$ 
      00110D                        854 10$: ; line# is zero 
      00110D CE 00 19         [ 2]  855 	ldw x,ptr16  
      001110 CF 00 04         [ 2]  856 	ldw basicptr,x 
      001113 E6 02            [ 1]  857 	ld a,(2,x)
      001115 C7 00 02         [ 1]  858 	ld count,a 
      001118 35 03 00 01      [ 1]  859 	mov in,#3 
      00111C                        860 11$:
      00111C                        861 	_drop VSIZE 
      00111C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00111E 72 1B 00 22      [ 1]  862 	bres flags,#FCOMP 
      001122 90 85            [ 2]  863 	popw y 
      001124 81               [ 4]  864 	ret 
                                    865 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      001125                         48 cpy_cmd_name:
      001125 5D               [ 2]   49 	tnzw x 
      001126 27 14            [ 1]   50 	jreq 10$
      001128 F6               [ 1]   51 	ld a,(x)
      001129 5C               [ 1]   52 	incw x
      00112A A4 0F            [ 1]   53 	and a,#15  
      00112C 88               [ 1]   54 	push a 
      00112D 0D 01            [ 1]   55     tnz (1,sp) 
      00112F 27 0A            [ 1]   56 	jreq 9$
      001131 F6               [ 1]   57 1$:	ld a,(x)
      001132 90 F7            [ 1]   58 	ld (y),a  
      001134 5C               [ 1]   59 	incw x
      001135 90 5C            [ 1]   60 	incw y 
      001137 0A 01            [ 1]   61 	dec (1,sp)	 
      001139 26 F6            [ 1]   62 	jrne 1$
      00113B 84               [ 1]   63 9$: pop a 
      00113C                         64 10$: 
      00113C 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      00113D                         75 add_space:
      00113D 90 5A            [ 2]   76 	decw y 
      00113F 90 F6            [ 1]   77 	ld a,(y)
      001141 90 5C            [ 1]   78 	incw y
      001143 A1 29            [ 1]   79 	cp a,#') 
      001145 27 05            [ 1]   80 	jreq 0$
      001147 CD 0E 49         [ 4]   81 	call is_alnum 
      00114A 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00114C                         83 0$: 
      00114C A6 20            [ 1]   84 	ld a,#SPACE 
      00114E 90 F7            [ 1]   85 	ld (y),a 
      001150 90 5C            [ 1]   86 	incw y 
      001152 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      001153                         99 right_align::
      001153 88               [ 1]  100 	push a 
      001154 7B 01            [ 1]  101 0$: ld a,(1,sp)
      001156 C1 00 23         [ 1]  102 	cp a,tab_width 
      001159 2A 08            [ 1]  103 	jrpl 1$
      00115B A6 20            [ 1]  104 	ld a,#SPACE 
      00115D 5A               [ 2]  105 	decw x
      00115E F7               [ 1]  106 	ld (x),a  
      00115F 0C 01            [ 1]  107 	inc (1,sp)
      001161 20 F1            [ 2]  108 	jra 0$ 
      001163 84               [ 1]  109 1$: pop a 	
      001164 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      001165                        123 cpy_quote:
      001165 A6 22            [ 1]  124 	ld a,#'"
      001167 90 F7            [ 1]  125 	ld (y),a 
      001169 90 5C            [ 1]  126 	incw y 
      00116B 89               [ 2]  127 	pushw x 
      00116C CD 18 25         [ 4]  128 	call skip_string 
      00116F 85               [ 2]  129 	popw x 
      001170 F6               [ 1]  130 1$:	ld a,(x)
      001171 27 30            [ 1]  131 	jreq 9$
      001173 5C               [ 1]  132 	incw x 
      001174 A1 20            [ 1]  133 	cp a,#SPACE 
      001176 25 0E            [ 1]  134 	jrult 3$
      001178 90 F7            [ 1]  135 	ld (y),a
      00117A 90 5C            [ 1]  136 	incw y 
      00117C A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      00117E 26 F0            [ 1]  138 	jrne 1$ 
      001180                        139 2$:
      001180 90 F7            [ 1]  140 	ld (y),a
      001182 90 5C            [ 1]  141 	incw y  
      001184 20 EA            [ 2]  142 	jra 1$
      001186 88               [ 1]  143 3$: push a 
      001187 A6 5C            [ 1]  144 	ld a,#'\
      001189 90 F7            [ 1]  145 	ld (y),a 
      00118B 90 5C            [ 1]  146 	incw y  
      00118D 84               [ 1]  147 	pop a 
      00118E A0 07            [ 1]  148 	sub a,#7
      001190 C7 00 0E         [ 1]  149 	ld acc8,a 
      001193 72 5F 00 0D      [ 1]  150 	clr acc16
      001197 89               [ 2]  151 	pushw x
      001198 AE 0D 97         [ 2]  152 	ldw x,#escaped 
      00119B 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      00119F F6               [ 1]  154 	ld a,(x)
      0011A0 85               [ 2]  155 	popw x
      0011A1 20 DD            [ 2]  156 	jra 2$
      0011A3 A6 22            [ 1]  157 9$: ld a,#'"
      0011A5 90 F7            [ 1]  158 	ld (y),a 
      0011A7 90 5C            [ 1]  159 	incw y  
      0011A9 5C               [ 1]  160 	incw x 
      0011AA 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      0011AB                        171 var_name::
      0011AB 1D 00 35         [ 2]  172 		subw x,#vars 
      0011AE A6 03            [ 1]  173 		ld a,#3
      0011B0 62               [ 2]  174 		div x,a 
      0011B1 9F               [ 1]  175 		ld a,xl 
      0011B2 AB 41            [ 1]  176 		add a,#'A 
      0011B4 81               [ 4]  177 		ret 
                                    178 
                                    179 
                                    180 
                                    181 ;-------------------------------------
                                    182 ; decompile tokens list 
                                    183 ; to original text line 
                                    184 ; input:
                                    185 ;   [basicptr]  pointer at line 
                                    186 ;   Y           output buffer
                                    187 ; output:
                                    188 ;   A           length 
                                    189 ;   Y           after string  
                                    190 ;------------------------------------
                           000001   191 	BASE_SAV=1
                           000002   192 	WIDTH_SAV=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           000003   193 	STR=3
                           000004   194 	VSIZE=4 
      0011B5                        195 decompile::
      0011B5                        196 	_vars VSIZE
      0011B5 52 04            [ 2]    1     sub sp,#VSIZE 
      0011B7 C6 00 0A         [ 1]  197 	ld a,base
      0011BA 6B 01            [ 1]  198 	ld (BASE_SAV,sp),a  
      0011BC C6 00 23         [ 1]  199 	ld a,tab_width 
      0011BF 6B 02            [ 1]  200 	ld (WIDTH_SAV,sp),a 
      0011C1 17 03            [ 2]  201 	ldw (STR,sp),y   
      0011C3 72 CE 00 04      [ 5]  202 	ldw x,[basicptr] ; line number 
      0011C7 35 0A 00 0A      [ 1]  203 	mov base,#10
      0011CB 35 05 00 23      [ 1]  204 	mov tab_width,#5
      0011CF 72 5F 00 0C      [ 1]  205 	clr acc24 
      0011D3 CF 00 0D         [ 2]  206 	ldw acc16,x
      0011D6 4F               [ 1]  207 	clr a ; unsigned conversion 
      0011D7 CD 18 91         [ 4]  208 	call itoa  
      0011DA CD 11 53         [ 4]  209 	call right_align 
      0011DD 88               [ 1]  210 	push a 
      0011DE 90 93            [ 1]  211 1$:	ldw y,x ; source
      0011E0 1E 04            [ 2]  212 	ldw x,(STR+1,sp) ; destination
      0011E2 CD 13 B5         [ 4]  213 	call strcpy 
      0011E5 90 5F            [ 1]  214 	clrw y 
      0011E7 84               [ 1]  215 	pop a 
      0011E8 90 97            [ 1]  216 	ld yl,a 
      0011EA 72 F9 03         [ 2]  217 	addw y,(STR,sp)
      0011ED A6 20            [ 1]  218 	ld a,#SPACE 
      0011EF 90 F7            [ 1]  219 	ld (y),a 
      0011F1 90 5C            [ 1]  220 	incw y 
      0011F3 72 5F 00 23      [ 1]  221 	clr tab_width
      0011F7 AE 00 03         [ 2]  222 	ldw x,#3
      0011FA CF 00 00         [ 2]  223 	ldw in.w,x 
      0011FD                        224 decomp_loop:
      0011FD 90 89            [ 2]  225 	pushw y
      0011FF CD 18 0C         [ 4]  226 	call next_token 
      001202 90 85            [ 2]  227 	popw y 
      001204 4D               [ 1]  228 	tnz a  
      001205 26 03            [ 1]  229 	jrne 1$
      001207 CC 13 2A         [ 2]  230 	jp 20$
      00120A 2B 03            [ 1]  231 1$:	jrmi 2$
      00120C CC 12 9B         [ 2]  232 	jp 6$
      00120F                        233 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      00120F A1 85            [ 1]  234 	cp a,#TK_VAR 
      001211 26 0F            [ 1]  235 	jrne 3$
                                    236 ;; TK_VAR 
      001213 CD 11 3D         [ 4]  237 	call add_space
      001216 CD 18 34         [ 4]  238 	call get_addr   
      001219 CD 11 AB         [ 4]  239 	call var_name
      00121C 90 F7            [ 1]  240 	ld (y),a 
      00121E 90 5C            [ 1]  241 	incw y  
      001220 20 DB            [ 2]  242 	jra decomp_loop
      001222                        243 3$:
      001222 A1 84            [ 1]  244 	cp a,#TK_INTGR
      001224 26 26            [ 1]  245 	jrne 4$
                                    246 ;; TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001226 CD 18 3E         [ 4]  247 	call get_int24 
      001229 C7 00 0C         [ 1]  248 	ld acc24,a 
      00122C CF 00 0D         [ 2]  249 	ldw acc16,x 
      00122F CD 11 3D         [ 4]  250 	call add_space
      001232 90 89            [ 2]  251 	pushw y 
      001234 A6 FF            [ 1]  252 	ld a,#255 ; signed conversion 
      001236 CD 18 91         [ 4]  253 	call itoa  
      001239 16 01            [ 2]  254 	ldw y,(1,sp) 
      00123B 88               [ 1]  255 	push a 
      00123C 51               [ 1]  256 	exgw x,y 
      00123D CD 13 B5         [ 4]  257 	call strcpy 
      001240 90 5F            [ 1]  258 	clrw y
      001242 84               [ 1]  259 	pop a  
      001243 90 97            [ 1]  260 	ld yl,a 
      001245 72 F9 01         [ 2]  261 	addw y,(1,sp)
      001248                        262 	_drop 2 
      001248 5B 02            [ 2]    1     addw sp,#2 
      00124A 20 B1            [ 2]  263 	jra decomp_loop
      00124C                        264 4$: ; dictionary keyword
      00124C A1 87            [ 1]  265 	cp a,#TK_NOT 
      00124E 24 39            [ 1]  266 	jruge 50$ 
      001250 FE               [ 2]  267 	ldw x,(x)
      001251 72 5C 00 01      [ 1]  268 	inc in 
      001255 72 5C 00 01      [ 1]  269 	inc in 
      001259 A3 21 66         [ 2]  270 	cpw x,#remark 
      00125C 26 23            [ 1]  271 	jrne 5$
      00125E CE 00 04         [ 2]  272 	ldw x,basicptr 
                                    273 ; copy comment to buffer 
      001261 CD 11 3D         [ 4]  274 	call add_space
      001264 A6 27            [ 1]  275 	ld a,#''
      001266 90 F7            [ 1]  276 	ld (y),a 
      001268 90 5C            [ 1]  277 	incw y 
      00126A                        278 46$:
      00126A 72 D6 00 00      [ 4]  279 	ld a,([in.w],x)
      00126E 72 5C 00 01      [ 1]  280 	inc in  
      001272 90 F7            [ 1]  281 	ld (y),a 
      001274 90 5C            [ 1]  282 	incw y 
      001276 C6 00 01         [ 1]  283 	ld a,in 
      001279 C1 00 02         [ 1]  284 	cp a,count 
      00127C 2B EC            [ 1]  285 	jrmi 46$
      00127E CC 13 2A         [ 2]  286 	jp 20$  
      001281 A3 1D 04         [ 2]  287 5$: cpw x,#let  
      001284 26 05            [ 1]  288 	jrne 54$
      001286 CC 11 FD         [ 2]  289 	jp decomp_loop ; down display LET
      001289                        290 50$:
      001289 5F               [ 1]  291 	clrw x 
      00128A 97               [ 1]  292 	ld xl,a 
                                    293 ;	sub a,#TK_NOT  
                                    294 ;	sll a 
                                    295 ;	ld xl,a 
                                    296 ;	addw x,#NOT_IDX
      00128B                        297 54$: ; insert command name 
      00128B CD 11 3D         [ 4]  298 	call add_space  
      00128E 90 89            [ 2]  299 	pushw y
      001290 CD 13 65         [ 4]  300 	call cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001293 90 85            [ 2]  301 	popw y 
      001295 CD 11 25         [ 4]  302 	call cpy_cmd_name
      001298 CC 11 FD         [ 2]  303 	jp decomp_loop 
      00129B                        304 6$:
                                    305 ; label?
      00129B A1 03            [ 1]  306 	cp a,#TK_LABEL 
      00129D 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      00129F A6 20            [ 1]  309 	ld a,#32 
      0012A1 90 F7            [ 1]  310 	ld (y),a 
      0012A3 90 5C            [ 1]  311 	incw y 
      0012A5                        312 61$:
      0012A5 89               [ 2]  313 	pushw x 
      0012A6 CD 18 25         [ 4]  314 	call skip_string 
      0012A9 85               [ 2]  315 	popw x 
      0012AA                        316 62$:	
      0012AA F6               [ 1]  317 	ld a,(x)
      0012AB 27 07            [ 1]  318 	jreq 63$ 
      0012AD 5C               [ 1]  319 	incw x  
      0012AE 90 F7            [ 1]  320 	ld (y),a 
      0012B0 90 5C            [ 1]  321 	incw y 
      0012B2 20 F6            [ 2]  322 	jra 62$ 
      0012B4                        323 63$: 
      0012B4 A6 20            [ 1]  324 	ld a,#32 
      0012B6 90 F7            [ 1]  325 	ld (y),a 
      0012B8 90 5C            [ 1]  326 	incw y 
      0012BA CC 11 FD         [ 2]  327 	jp decomp_loop
      0012BD                        328 64$:
      0012BD A1 02            [ 1]  329 	cp a,#TK_QSTR 
      0012BF 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      0012C1 CD 11 3D         [ 4]  332 	call add_space
      0012C4 CD 11 65         [ 4]  333 	call cpy_quote  
      0012C7 CC 11 FD         [ 2]  334 	jp decomp_loop
      0012CA                        335 7$:
      0012CA A1 04            [ 1]  336 	cp a,#TK_CHAR 
      0012CC 26 10            [ 1]  337 	jrne 8$
                                    338 ;; TK_CHAR
      0012CE CD 11 3D         [ 4]  339 	call add_space 
      0012D1 A6 5C            [ 1]  340 	ld a,#'\ 
      0012D3 90 F7            [ 1]  341 	ld (y),a 
      0012D5 90 5C            [ 1]  342 	incw y
      0012D7 F6               [ 1]  343 	ld a,(x)
      0012D8 72 5C 00 01      [ 1]  344 	inc in  
      0012DC 20 06            [ 2]  345 	jra 81$
      0012DE A1 0A            [ 1]  346 8$: cp a,#TK_COLON 
      0012E0 26 09            [ 1]  347 	jrne 9$
      0012E2 A6 3A            [ 1]  348 	ld a,#':
      0012E4                        349 81$:
      0012E4 90 F7            [ 1]  350 	ld (y),a 
      0012E6 90 5C            [ 1]  351 	incw y 
      0012E8                        352 82$:
      0012E8 CC 11 FD         [ 2]  353 	jp decomp_loop
      0012EB                        354 9$: 
      0012EB A1 09            [ 1]  355 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0012ED 22 0A            [ 1]  356 	jrugt 10$ 
      0012EF A0 05            [ 1]  357 	sub a,#TK_ARRAY 
      0012F1 5F               [ 1]  358 	clrw x 
      0012F2 97               [ 1]  359 	ld xl,a
      0012F3 1C 13 40         [ 2]  360 	addw x,#single_char 
      0012F6 F6               [ 1]  361 	ld a,(x)
      0012F7 20 EB            [ 2]  362 	jra 81$ 
      0012F9                        363 10$: 
      0012F9 A1 11            [ 1]  364 	cp a,#TK_MINUS 
      0012FB 22 0A            [ 1]  365 	jrugt 11$
      0012FD A0 10            [ 1]  366 	sub a,#TK_PLUS 
      0012FF 5F               [ 1]  367 	clrw x 
      001300 97               [ 1]  368 	ld xl,a 
      001301 1C 13 45         [ 2]  369 	addw x,#add_char 
      001304 F6               [ 1]  370 	ld a,(x)
      001305 20 DD            [ 2]  371 	jra 81$
      001307                        372 11$:
      001307 A1 22            [ 1]  373     cp a,#TK_MOD 
      001309 22 0A            [ 1]  374 	jrugt 12$
      00130B A0 20            [ 1]  375 	sub a,#TK_MULT
      00130D 5F               [ 1]  376 	clrw x 
      00130E 97               [ 1]  377 	ld xl,a 
      00130F 1C 13 47         [ 2]  378 	addw x,#mul_char
      001312 F6               [ 1]  379 	ld a,(x)
      001313 20 CF            [ 2]  380 	jra 81$
      001315                        381 12$:
      001315 A0 31            [ 1]  382 	sub a,#TK_GT  
      001317 48               [ 1]  383 	sll a 
      001318 5F               [ 1]  384 	clrw x 
      001319 97               [ 1]  385 	ld xl,a 
      00131A 1C 13 4A         [ 2]  386 	addw x,#relop_str 
      00131D FE               [ 2]  387 	ldw x,(x)
      00131E F6               [ 1]  388 	ld a,(x)
      00131F 5C               [ 1]  389 	incw x 
      001320 90 F7            [ 1]  390 	ld (y),a
      001322 90 5C            [ 1]  391 	incw y 
      001324 F6               [ 1]  392 	ld a,(x)
      001325 26 BD            [ 1]  393 	jrne 81$
      001327 CC 11 FD         [ 2]  394 	jp decomp_loop 
      00132A                        395 20$: 
      00132A 90 7F            [ 1]  396 	clr (y)
      00132C 1E 03            [ 2]  397 	ldw x,(STR,sp)
      00132E 7B 01            [ 1]  398 	ld a,(BASE_SAV,sp)
      001330 C7 00 0A         [ 1]  399 	ld base,a 
      001333 7B 02            [ 1]  400 	ld a,(WIDTH_SAV,sp)
      001335 C7 00 23         [ 1]  401 	ld tab_width,a
      001338 72 F2 03         [ 2]  402 	subw y,(STR,sp) 
      00133B 90 9F            [ 1]  403 	ld a,yl 
      00133D                        404 	_drop VSIZE 
      00133D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00133F 81               [ 4]  405 	ret 
                                    406 
      001340 40 28 29 2C 23         407 single_char: .byte '@','(',')',',','#'
      001345 2B 2D                  408 add_char: .byte '+','-'
      001347 2A 2F 25               409 mul_char: .byte '*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      00134A 13 56 13 58 13 5A 13   410 relop_str: .word gt,equal,ge,lt,ne,le 
             5D 13 62 13 5F
      001356 3E 00                  411 gt: .asciz ">"
      001358 3D 00                  412 equal: .asciz "="
      00135A 3E 3D 00               413 ge: .asciz ">="
      00135D 3C 00                  414 lt: .asciz "<"
      00135F 3C 3D 00               415 le: .asciz "<="
      001362 3C 3E 00               416 ne:  .asciz "<>"
                                    417 
                                    418 ;----------------------------------
                                    419 ; search in kword_dict name
                                    420 ; from its execution address 
                                    421 ; input:
                                    422 ;   X       	routine_address  
                                    423 ; output:
                                    424 ;   X 			cstr*  | 0 
                                    425 ;--------------------------------
                           000001   426 	CODE_ADDR=1 
                           000003   427 	LINK=3 
                           000004   428 	VSIZE=4
      001365                        429 cmd_name:
      001365                        430 	_vars VSIZE 
      001365 52 04            [ 2]    1     sub sp,#VSIZE 
      001367 72 5F 00 0D      [ 1]  431 	clr acc16 
      00136B 1F 01            [ 2]  432 	ldw (CODE_ADDR,sp),x  
      00136D AE 36 99         [ 2]  433 	ldw x,#kword_dict	
      001370 1F 03            [ 2]  434 1$:	ldw (LINK,sp),x
      001372 E6 02            [ 1]  435 	ld a,(2,x)
      001374 A4 0F            [ 1]  436 	and a,#15 
      001376 C7 00 0E         [ 1]  437 	ld acc8,a 
      001379 1C 00 03         [ 2]  438 	addw x,#3
      00137C 72 BB 00 0D      [ 2]  439 	addw x,acc16
      001380 FE               [ 2]  440 	ldw x,(x) ; code address   
      001381 13 01            [ 2]  441 	cpw x,(CODE_ADDR,sp)
      001383 27 0C            [ 1]  442 	jreq 2$
      001385 1E 03            [ 2]  443 	ldw x,(LINK,sp)
      001387 FE               [ 2]  444 	ldw x,(x) 
      001388 1D 00 02         [ 2]  445 	subw x,#2  
      00138B 26 E3            [ 1]  446 	jrne 1$
      00138D 4F               [ 1]  447 	clr a 
      00138E 5F               [ 1]  448 	clrw x 
      00138F 20 05            [ 2]  449 	jra 9$
      001391 1E 03            [ 2]  450 2$: ldw x,(LINK,sp)
      001393 1C 00 02         [ 2]  451 	addw x,#2 	
      001396                        452 9$:	_drop VSIZE
      001396 5B 04            [ 2]    1     addw sp,#VSIZE 
      001398 81               [ 4]  453 	ret
                                    454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
                                     64 ; keep the following 3 variables in this order 
      000000                         65 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         66 in::    .blkb 1 ; low byte of in.w 
      000002                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000003                         68 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000004                         69 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         70 data_ptr:  .blkw 1  ; point to DATA address
      000008                         71 data_ofs:  .blkb 1  ; index to next data item 
      000009                         72 data_len:  .blkb 1  ; length of data line 
      00000A                         73 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         74 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         75 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         76 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         77 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         78 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         79 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         80 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         81 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         82 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         83 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         84 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         85 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         86 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         87 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         88 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         89 flags:: .blkb 1 ; various boolean flags
      000023                         90 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         91 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         92 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         93 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         94 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      000030                         95 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000032                         96 dvar_end:: .blkw 1 ; DIM variables end address 
      000034                         97 chain_level: .blkb 1 ; increment for each CHAIN command 
                                     98 ; 24 bits integer variables 
      000035                         99 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                    100 
                                    101 	.area BTXT (ABS)
      00008C                        102 	.org 0x8C  
                                    103 ; keep 'free_ram' as last variable 
                                    104 ; basic code compiled here. 
      00008C                        105 rsign: .blkw 1 ; "TB" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      00008E                        106 rsize: .blkw 1 ; code size 	 
      000090                        107 free_ram: ; from here RAM free for BASIC text 
                                    108 
                                    109 	.area CODE 
                                    110 
                                    111 
                                    112 ;-------------------------------------
                                    113 ; retrun string length
                                    114 ; input:
                                    115 ;   X         .asciz  pointer 
                                    116 ; output:
                                    117 ;   X         not affected 
                                    118 ;   A         length 
                                    119 ;-------------------------------------
      001399                        120 strlen::
      001399 89               [ 2]  121 	pushw x 
      00139A 4F               [ 1]  122 	clr a
      00139B 7D               [ 1]  123 1$:	tnz (x) 
      00139C 27 04            [ 1]  124 	jreq 9$ 
      00139E 4C               [ 1]  125 	inc a 
      00139F 5C               [ 1]  126 	incw x 
      0013A0 20 F9            [ 2]  127 	jra 1$ 
      0013A2 85               [ 2]  128 9$:	popw x 
      0013A3 81               [ 4]  129 	ret 
                                    130 
                                    131 ;------------------------------------
                                    132 ; compare 2 strings
                                    133 ; input:
                                    134 ;   X 		char* first string 
                                    135 ;   Y       char* second string 
                                    136 ; output:
                                    137 ;   A 		0 not == |1 ==  
                                    138 ;-------------------------------------
      0013A4                        139 strcmp:
      0013A4 F6               [ 1]  140 	ld a,(x)
      0013A5 27 0B            [ 1]  141 	jreq 5$ 
      0013A7 90 F1            [ 1]  142 	cp a,(y) 
      0013A9 26 05            [ 1]  143 	jrne 4$ 
      0013AB 5C               [ 1]  144 	incw x 
      0013AC 90 5C            [ 1]  145 	incw y 
      0013AE 20 F4            [ 2]  146 	jra strcmp 
      0013B0                        147 4$: ; not same  
      0013B0 4F               [ 1]  148 	clr a 
      0013B1 81               [ 4]  149 	ret 
      0013B2                        150 5$: ; same 
      0013B2 A6 01            [ 1]  151 	ld a,#1 
      0013B4 81               [ 4]  152 	ret 
                                    153 
                                    154 
                                    155 ;---------------------------------------
                                    156 ;  copy src to dest 
                                    157 ; input:
                                    158 ;   X 		dest 
                                    159 ;   Y 		src 
                                    160 ; output: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                    161 ;   X 		dest 
                                    162 ;----------------------------------
      0013B5                        163 strcpy::
      0013B5 88               [ 1]  164 	push a 
      0013B6 89               [ 2]  165 	pushw x 
      0013B7 90 F6            [ 1]  166 1$: ld a,(y)
      0013B9 27 06            [ 1]  167 	jreq 9$ 
      0013BB F7               [ 1]  168 	ld (x),a 
      0013BC 5C               [ 1]  169 	incw x 
      0013BD 90 5C            [ 1]  170 	incw y 
      0013BF 20 F6            [ 2]  171 	jra 1$ 
      0013C1 7F               [ 1]  172 9$:	clr (x)
      0013C2 85               [ 2]  173 	popw x 
      0013C3 84               [ 1]  174 	pop a 
      0013C4 81               [ 4]  175 	ret 
                                    176 
                                    177 ;---------------------------------------
                                    178 ; move memory block 
                                    179 ; input:
                                    180 ;   X 		destination 
                                    181 ;   Y 	    source 
                                    182 ;   acc16	bytes count 
                                    183 ; output:
                                    184 ;   none 
                                    185 ;--------------------------------------
                           000001   186 	INCR=1 ; incrament high byte 
                           000002   187 	LB=2 ; increment low byte 
                           000002   188 	VSIZE=2
      0013C5                        189 move::
      0013C5 88               [ 1]  190 	push a 
      0013C6                        191 	_vars VSIZE 
      0013C6 52 02            [ 2]    1     sub sp,#VSIZE 
      0013C8 0F 01            [ 1]  192 	clr (INCR,sp)
      0013CA 0F 02            [ 1]  193 	clr (LB,sp)
      0013CC 90 89            [ 2]  194 	pushw y 
      0013CE 13 01            [ 2]  195 	cpw x,(1,sp) ; compare DEST to SRC 
      0013D0 90 85            [ 2]  196 	popw y 
      0013D2 27 31            [ 1]  197 	jreq move_exit ; x==y 
      0013D4 2B 0E            [ 1]  198 	jrmi move_down
      0013D6                        199 move_up: ; start from top address with incr=-1
      0013D6 72 BB 00 0D      [ 2]  200 	addw x,acc16
      0013DA 72 B9 00 0D      [ 2]  201 	addw y,acc16
      0013DE 03 01            [ 1]  202 	cpl (INCR,sp)
      0013E0 03 02            [ 1]  203 	cpl (LB,sp)   ; increment = -1 
      0013E2 20 05            [ 2]  204 	jra move_loop  
      0013E4                        205 move_down: ; start from bottom address with incr=1 
      0013E4 5A               [ 2]  206     decw x 
      0013E5 90 5A            [ 2]  207 	decw y
      0013E7 0C 02            [ 1]  208 	inc (LB,sp) ; incr=1 
      0013E9                        209 move_loop:	
      0013E9 C6 00 0D         [ 1]  210     ld a, acc16 
      0013EC CA 00 0E         [ 1]  211 	or a, acc8
      0013EF 27 14            [ 1]  212 	jreq move_exit 
      0013F1 72 FB 01         [ 2]  213 	addw x,(INCR,sp)
      0013F4 72 F9 01         [ 2]  214 	addw y,(INCR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0013F7 90 F6            [ 1]  215 	ld a,(y)
      0013F9 F7               [ 1]  216 	ld (x),a 
      0013FA 89               [ 2]  217 	pushw x 
      0013FB CE 00 0D         [ 2]  218 	ldw x,acc16 
      0013FE 5A               [ 2]  219 	decw x 
      0013FF CF 00 0D         [ 2]  220 	ldw acc16,x 
      001402 85               [ 2]  221 	popw x 
      001403 20 E4            [ 2]  222 	jra move_loop
      001405                        223 move_exit:
      001405                        224 	_drop VSIZE
      001405 5B 02            [ 2]    1     addw sp,#VSIZE 
      001407 84               [ 1]  225 	pop a 
      001408 81               [ 4]  226 	ret 	
                                    227 
                                    228 ;------------------------------------
                                    229 ;  set all variables to zero 
                                    230 ; input:
                                    231 ;   none 
                                    232 ; output:
                                    233 ;	none
                                    234 ;------------------------------------
      001409                        235 clear_vars:
      001409 89               [ 2]  236 	pushw x 
      00140A 88               [ 1]  237 	push a  
      00140B AE 00 35         [ 2]  238 	ldw x,#vars 
      00140E A6 4E            [ 1]  239 	ld a,#CELL_SIZE*26 
      001410 7F               [ 1]  240 1$:	clr (x)
      001411 5C               [ 1]  241 	incw x 
      001412 4A               [ 1]  242 	dec a 
      001413 26 FB            [ 1]  243 	jrne 1$
      001415 84               [ 1]  244 	pop a 
      001416 85               [ 2]  245 	popw x 
      001417 81               [ 4]  246 	ret 
                                    247 
                                    248 
                                    249 ;-----------------------
                                    250 ;  display system 
                                    251 ;  information 
                                    252 ;-----------------------
                           000002   253 	MAJOR=2
                           000000   254 	MINOR=0 
      001418 0A 0A 54 69 6E 79 20   255 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    256 
      00145E                        257 system_information:
      00145E AE 14 18         [ 2]  258 	ldw x,#software 
      001461 CD 09 5C         [ 4]  259 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      001464 A6 02            [ 1]  260 	ld a,#MAJOR 
      001466 C7 00 0E         [ 1]  261 	ld acc8,a 
      001469 5F               [ 1]  262 	clrw x 
      00146A CF 00 0C         [ 2]  263 	ldw acc24,x
      00146D 72 5F 00 23      [ 1]  264 	clr tab_width  
      001471 35 0A 00 0A      [ 1]  265 	mov base, #10 
      001475 CD 18 6B         [ 4]  266 	call prt_acc24 
      001478 A6 2E            [ 1]  267 	ld a,#'.
      00147A CD 08 FF         [ 4]  268 	call putc 
      00147D A6 00            [ 1]  269 	ld a,#MINOR 
      00147F C7 00 0E         [ 1]  270 	ld acc8,a 
      001482 5F               [ 1]  271 	clrw x 
      001483 CF 00 0C         [ 2]  272 	ldw acc24,x 
      001486 CD 18 6B         [ 4]  273 	call prt_acc24
      001489 A6 0D            [ 1]  274 	ld a,#CR 
      00148B CD 08 FF         [ 4]  275 	call putc
                                    276 ;call test 
      00148E 81               [ 4]  277 	ret
                                    278 
      00148F                        279 warm_init:
      00148F 90 AE 17 73      [ 2]  280 	ldw y,#XSTACK_EMPTY  
      001493 72 5F 00 22      [ 1]  281 	clr flags 
      001497 72 5F 00 1F      [ 1]  282 	clr loop_depth 
      00149B 35 04 00 23      [ 1]  283 	mov tab_width,#TAB_WIDTH 
      00149F 35 0A 00 0A      [ 1]  284 	mov base,#10 
      0014A3 AE 00 00         [ 2]  285 	ldw x,#0 
      0014A6 CF 00 04         [ 2]  286 	ldw basicptr,x 
      0014A9 CF 00 00         [ 2]  287 	ldw in.w,x 
      0014AC 72 5F 00 02      [ 1]  288 	clr count
      0014B0 81               [ 4]  289 	ret 
                                    290 
                                    291 ;---------------------------
                                    292 ; reset BASIC text variables 
                                    293 ; and clear variables 
                                    294 ;---------------------------
      0014B1                        295 clear_basic:
      0014B1 89               [ 2]  296 	pushw x 
      0014B2 72 5F 00 02      [ 1]  297 	clr count
      0014B6 72 5F 00 01      [ 1]  298 	clr in  
      0014BA AE 00 90         [ 2]  299 	ldw x,#free_ram 
      0014BD CF 00 1B         [ 2]  300 	ldw txtbgn,x 
      0014C0 CF 00 1D         [ 2]  301 	ldw txtend,x 
      0014C3 CF 00 30         [ 2]  302 	ldw dvar_bgn,x 
      0014C6 CF 00 32         [ 2]  303 	ldw dvar_end,x 
      0014C9 CD 14 09         [ 4]  304 	call clear_vars 
      0014CC 72 5F 00 34      [ 1]  305 	clr chain_level
      0014D0 85               [ 2]  306 	popw x
      0014D1 81               [ 4]  307 	ret 
                                    308 
                                    309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    310 ;;   Tiny BASIC error messages     ;;
                                    311 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014D2                        312 err_msg:
      0014D2 00 00 14 F8 15 0F 15   313 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             1D 15 36 15 45
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0014DE 15 5B 15 71 15 8B 15   314 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             9C 15 AD
      0014E8 15 B9 15 EC 15 FC 16   315 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             10 16 23
      0014F2 16 30 16 3A 16 56      316 	.word err_overflow,err_read_only,err_not_program  
                                    317 
      0014F8 52 65 6A 65 63 74 65   318 err_mem_full: .asciz "Rejected, memory full\n" 
             64 2C 20 6D 65 6D 6F
             72 79 20 66 75 6C 6C
             0A 00
      00150F 73 79 6E 74 61 78 20   319 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      00151D 6D 61 74 68 20 6F 70   320 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001536 64 69 76 69 73 69 6F   321 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001545 69 6E 76 61 6C 69 64   322 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00155B 72 75 6E 20 74 69 6D   323 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001571 63 6F 6D 6D 61 6E 64   324 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      00158B 64 75 70 6C 69 63 61   325 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      00159C 46 69 6C 65 20 6E 6F   326 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0015AD 62 61 64 20 76 61 6C   327 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0015B9 46 69 6C 65 20 69 6E   328 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0015EC 4E 6F 20 64 61 74 61   329 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015FC 4E 6F 20 70 72 6F 67   330 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      001610 46 69 6C 65 20 73 79   331 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



             6C 6C 2E 0A 00
      001623 42 75 66 66 65 72 20   332 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      001630 6F 76 65 72 66 6C 6F   333 err_overflow: .asciz "overflow\n" 
             77 0A 00
      00163A 63 6F 6E 73 74 61 6E   334 err_read_only: .asciz "constant can't be modified\n"
             74 20 63 61 6E 27 74
             20 62 65 20 6D 6F 64
             69 66 69 65 64 0A 00
      001656 6E 6F 20 70 72 6F 67   335 err_not_program: .asciz "no program at this address\n"
             72 61 6D 20 61 74 20
             74 68 69 73 20 61 64
             64 72 65 73 73 0A 00
                                    336 
                                    337 ;-------------------------------------
      001672 0A 72 75 6E 20 74 69   338 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001684 0A 63 6F 6D 70 69 6C   339 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001695 6C 61 73 74 20 74 6F   340 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    341 
      0016A5                        342 syntax_error::
      0016A5 A6 02            [ 1]  343 	ld a,#ERR_SYNTAX 
                                    344 
      0016A7                        345 tb_error::
      0016A7 72 0A 00 22 4C   [ 2]  346 	btjt flags,#FCOMP,1$
      0016AC 88               [ 1]  347 	push a 
      0016AD AE 16 72         [ 2]  348 	ldw x, #rt_msg 
      0016B0 CD 09 5C         [ 4]  349 	call puts 
      0016B3 84               [ 1]  350 	pop a 
      0016B4 AE 14 D2         [ 2]  351 	ldw x, #err_msg 
      0016B7 72 5F 00 0D      [ 1]  352 	clr acc16 
      0016BB 48               [ 1]  353 	sll a
      0016BC 72 59 00 0D      [ 1]  354 	rlc acc16  
      0016C0 C7 00 0E         [ 1]  355 	ld acc8, a 
      0016C3 72 BB 00 0D      [ 2]  356 	addw x,acc16 
      0016C7 FE               [ 2]  357 	ldw x,(x)
      0016C8 CD 09 5C         [ 4]  358 	call puts
      0016CB CE 00 04         [ 2]  359 	ldw x,basicptr 
                           000001   360 .if DEBUG 
      0016CE C6 00 02         [ 1]  361 ld a,count 
      0016D1 90 5F            [ 1]  362 clrw y 
      0016D3 90 02            [ 1]  363 rlwa y  
      0016D5 CD 06 45         [ 4]  364 call hex_dump
      0016D8 CE 00 04         [ 2]  365 ldw x,basicptr
                                    366 .endif 
      0016DB C6 00 01         [ 1]  367 	ld a,in 
      0016DE CD 1F FA         [ 4]  368 	call prt_basic_line
      0016E1 AE 16 95         [ 2]  369 	ldw x,#tk_id 
      0016E4 CD 09 5C         [ 4]  370 	call puts 
      0016E7 C6 00 03         [ 1]  371 	ld a,in.saved 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0016EA 5F               [ 1]  372 	clrw x 
      0016EB 97               [ 1]  373 	ld xl,a 
      0016EC 72 BB 00 04      [ 2]  374 	addw x,basicptr 
      0016F0 F6               [ 1]  375 	ld a,(x)
      0016F1 5F               [ 1]  376 	clrw x 
      0016F2 97               [ 1]  377 	ld xl,a 
      0016F3 CD 18 54         [ 4]  378 	call prt_i16
      0016F6 20 35            [ 2]  379 	jra 6$
      0016F8                        380 1$:	
      0016F8 88               [ 1]  381 	push a 
      0016F9 AE 16 84         [ 2]  382 	ldw x,#comp_msg
      0016FC CD 09 5C         [ 4]  383 	call puts 
      0016FF 84               [ 1]  384 	pop a 
      001700 AE 14 D2         [ 2]  385 	ldw x, #err_msg 
      001703 72 5F 00 0D      [ 1]  386 	clr acc16 
      001707 48               [ 1]  387 	sll a
      001708 72 59 00 0D      [ 1]  388 	rlc acc16  
      00170C C7 00 0E         [ 1]  389 	ld acc8, a 
      00170F 72 BB 00 0D      [ 2]  390 	addw x,acc16 
      001713 FE               [ 2]  391 	ldw x,(x)
      001714 CD 09 5C         [ 4]  392 	call puts
      001717 AE 16 68         [ 2]  393 	ldw x,#tib
      00171A CD 09 5C         [ 4]  394 	call puts 
      00171D A6 0D            [ 1]  395 	ld a,#CR 
      00171F CD 08 FF         [ 4]  396 	call putc
      001722 CE 00 00         [ 2]  397 	ldw x,in.w
      001725 CD 09 C9         [ 4]  398 	call spaces
      001728 A6 5E            [ 1]  399 	ld a,#'^
      00172A CD 08 FF         [ 4]  400 	call putc 
      00172D AE 17 FF         [ 2]  401 6$: ldw x,#STACK_EMPTY 
      001730 94               [ 1]  402     ldw sp,x
                                    403 
      001731                        404 warm_start:
      001731 CD 14 8F         [ 4]  405 	call warm_init
                                    406 ;----------------------------
                                    407 ;   BASIC interpreter
                                    408 ;----------------------------
      001734                        409 cmd_line: ; user interface 
      001734 A6 0D            [ 1]  410 	ld a,#CR 
      001736 CD 08 FF         [ 4]  411 	call putc 
      001739 A6 3E            [ 1]  412 	ld a,#'> 
      00173B CD 08 FF         [ 4]  413 	call putc
      00173E CD 0A 61         [ 4]  414 	call readln
      001741 72 5D 00 02      [ 1]  415 	tnz count 
      001745 27 ED            [ 1]  416 	jreq cmd_line
      001747 CD 10 A9         [ 4]  417 	call compile
                                    418 ;;;;;;;;;;;;;;;;;;;;;;	
                                    419 ;pushw y 
                                    420 ;ldw x,txtbgn  
                                    421 ;ldw y,txtend
                                    422 ;ldw acc16,x   
                                    423 ;subw y,acc16 
                                    424 ;call hex_dump
                                    425 ;popw y 
                                    426 ;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                                    427 
                                    428 ; if text begin with a line number
                                    429 ; the compiler set count to zero    
                                    430 ; so code is not interpreted
      00174A 72 5D 00 02      [ 1]  431 	tnz count 
      00174E 27 E4            [ 1]  432 	jreq cmd_line
                                    433 	
                                    434 ; if direct command 
                                    435 ; it's ready to interpret 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    437 ;; This is the interpreter loop
                                    438 ;; for each BASIC code line. 
                                    439 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      001750                        440 interpreter: 
      001750 C6 00 01         [ 1]  441 	ld a,in 
      001753 C1 00 02         [ 1]  442 	cp a,count 
      001756 2B 20            [ 1]  443 	jrmi interp_loop
      001758                        444 next_line:
      001758 72 01 00 22 D7   [ 2]  445 	btjf flags, #FRUN, cmd_line
      00175D CE 00 04         [ 2]  446 	ldw x,basicptr
      001760 72 BB 00 00      [ 2]  447 	addw x,in.w 
      001764 C3 00 1D         [ 2]  448 	cpw x,txtend 
      001767 2B 03            [ 1]  449 	jrmi 0$
      001769 CD 25 B6         [ 4]  450 	call cmd_end 
      00176C CF 00 04         [ 2]  451 0$:	ldw basicptr,x ; start of next line  
      00176F E6 02            [ 1]  452 	ld a,(2,x)
      001771 C7 00 02         [ 1]  453 	ld count,a 
      001774 35 03 00 01      [ 1]  454 	mov in,#3 ; skip first 3 bytes of line 
      001778                        455 interp_loop:
      001778 CD 18 0C         [ 4]  456 	call next_token
      00177B A1 00            [ 1]  457 	cp a,#TK_NONE 
      00177D 27 D9            [ 1]  458 	jreq next_line 
      00177F A1 80            [ 1]  459 	cp a,#TK_CMD
      001781 26 0C            [ 1]  460 	jrne 1$
      001783                        461 	_get_code_addr
      001783 FE               [ 2]    1         ldw x,(x)
      001784 72 5C 00 01      [ 1]    2         inc in 
      001788 72 5C 00 01      [ 1]    3         inc in 
      00178C FD               [ 4]  462 	call(x)
      00178D 20 E9            [ 2]  463 	jra interp_loop 
      00178F                        464 1$:	 
      00178F A1 85            [ 1]  465 	cp a,#TK_VAR
      001791 26 05            [ 1]  466 	jrne 2$
      001793 CD 1D 17         [ 4]  467 	call let_var  
      001796 20 E0            [ 2]  468 	jra interp_loop 
      001798                        469 2$:	
      001798 A1 05            [ 1]  470 	cp a,#TK_ARRAY 
      00179A 26 05            [ 1]  471 	jrne 3$
      00179C CD 1D 12         [ 4]  472 	call let_array 
      00179F 20 D7            [ 2]  473 	jra interp_loop
      0017A1                        474 3$:	
      0017A1 A1 03            [ 1]  475 	cp a,#TK_LABEL
      0017A3 26 05            [ 1]  476 	jrne 4$
      0017A5 CD 17 B1         [ 4]  477 	call let_dvar  
      0017A8 20 CE            [ 2]  478 	jra interp_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0017AA                        479 4$: 
      0017AA A1 0A            [ 1]  480 	cp a,#TK_COLON 
      0017AC 27 CA            [ 1]  481 	jreq interp_loop
      0017AE CC 16 A5         [ 2]  482 5$:	jp syntax_error 
                                    483 
                                    484 
                                    485 ;----------------------
                                    486 ; when a label is met 
                                    487 ; at interp_loop
                                    488 ; it may be a variable 
                                    489 ; assignement to DIM 
                                    490 ; variable 
                                    491 ;----------------------
                           000001   492 	VAR_NAME=1 
                           000003   493 	REC_LEN=3
                           000004   494 	VSIZE=4 
      0017B1                        495 let_dvar:
      0017B1                        496 	_vars VSIZE 
      0017B1 52 04            [ 2]    1     sub sp,#VSIZE 
      0017B3 1F 01            [ 2]  497 	ldw (VAR_NAME,sp),x
      0017B5 0F 03            [ 1]  498 	clr (REC_LEN,sp) 
      0017B7 CD 18 25         [ 4]  499 	call skip_string 
      0017BA CE 00 04         [ 2]  500 	ldw x,basicptr 
      0017BD 72 BB 00 00      [ 2]  501 	addw x,in.w 
      0017C1 F6               [ 1]  502 	ld a,(x)
      0017C2 A1 32            [ 1]  503 	cp a,#TK_EQUAL 
      0017C4 26 43            [ 1]  504 	jrne 9$ 
                                    505 ; dvar assignment 
      0017C6 72 5C 00 01      [ 1]  506 	inc in  
      0017CA CD 1C 45         [ 4]  507 	call condition  
      0017CD A1 84            [ 1]  508 	cp a,#TK_INTGR 
      0017CF 27 03            [ 1]  509 	jreq 1$ 
      0017D1 CC 16 A5         [ 2]  510 0$:	jp syntax_error 
      0017D4                        511 1$: 
      0017D4 1E 01            [ 2]  512 	ldw x,(VAR_NAME,sp) ; pointer to var name 
      0017D6 CD 13 99         [ 4]  513 	call strlen 
      0017D9 AB 05            [ 1]  514 	add a,#REC_XTRA_BYTES
      0017DB 6B 04            [ 1]  515 	ld (REC_LEN+1,sp),a 
      0017DD CD 1D 81         [ 4]  516 	call search_name 
      0017E0 5D               [ 2]  517 	tnzw x 
      0017E1 27 EE            [ 1]  518 	jreq 0$ 
      0017E3 F6               [ 1]  519 	ld a,(x)
      0017E4 2A 05            [ 1]  520 	jrpl 2$
      0017E6 A6 11            [ 1]  521 	ld a,#ERR_RD_ONLY 
      0017E8 CC 16 A7         [ 2]  522 	jp tb_error 
      0017EB                        523 2$:
      0017EB 72 FB 03         [ 2]  524 	addw x,(REC_LEN,sp)
      0017EE 1D 00 03         [ 2]  525 	subw x,#CELL_SIZE 
      0017F1 CF 00 19         [ 2]  526 	ldw ptr16,x
      0017F4                        527 	_xpop 
      0017F4 90 F6            [ 1]    1     ld a,(y)
      0017F6 93               [ 1]    2     ldw x,y 
      0017F7 EE 01            [ 2]    3     ldw x,(1,x)
      0017F9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0017FD 72 C7 00 19      [ 4]  528 	ld [ptr16],a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      001801 72 5C 00 1A      [ 1]  529 	inc ptr8 
      001805 72 CF 00 19      [ 5]  530 	ldw [ptr16],x 
      001809                        531 9$: _drop VSIZE 	
      001809 5B 04            [ 2]    1     addw sp,#VSIZE 
      00180B 81               [ 4]  532 	ret 
                                    533 
                                    534 
                                    535 ;--------------------------
                                    536 ; extract next token from
                                    537 ; token list 
                                    538 ; basicptr -> base address 
                                    539 ; in  -> offset in list array 
                                    540 ; output:
                                    541 ;   A 		token attribute
                                    542 ;   X 		*token_value 
                                    543 ;----------------------------------------
      00180C                        544 next_token::
                                    545 ;	clrw x 
      00180C C6 00 01         [ 1]  546 	ld a,in 
      00180F C7 00 03         [ 1]  547 	ld in.saved,a ; in case "_unget_token" needed 
                                    548 ; don't replace sub by "cp a,count" 
                                    549 ; if end of line must return with A=0   	
      001812 C0 00 02         [ 1]  550 	sub a,count 
      001815 27 0D            [ 1]  551 	jreq 9$ ; end of line 
      001817                        552 0$: 
      001817 CE 00 04         [ 2]  553 	ldw x,basicptr 
      00181A 72 BB 00 00      [ 2]  554 	addw x,in.w 
      00181E F6               [ 1]  555 	ld a,(x)
      00181F 5C               [ 1]  556 	incw x
      001820 72 5C 00 01      [ 1]  557 	inc in   
      001824 81               [ 4]  558 9$: ret 
                                    559 
                                    560 ;-------------------------
                                    561 ;  skip .asciz in BASIC line 
                                    562 ;  name 
                                    563 ;  input:
                                    564 ;     x		* string 
                                    565 ;  output:
                                    566 ;     none 
                                    567 ;-------------------------
      001825                        568 skip_string:
      001825 F6               [ 1]  569 	ld a,(x)
      001826 27 03            [ 1]  570 	jreq 1$
      001828 5C               [ 1]  571 	incw x 
      001829 20 FA            [ 2]  572 	jra skip_string 
      00182B 5C               [ 1]  573 1$: incw x 	
      00182C 72 B0 00 04      [ 2]  574 	subw x,basicptr 
      001830 CF 00 00         [ 2]  575 	ldw in.w,x 
      001833 81               [ 4]  576 	ret 
                                    577 
                                    578 ;---------------------
                                    579 ; extract 16 bits  
                                    580 ; address from BASIC
                                    581 ; code 
                                    582 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                    583 ;    X    *address
                                    584 ; output:
                                    585 ;    X    address 
                                    586 ;-------------------- 
      001834                        587 get_addr:
      001834 FE               [ 2]  588 	ldw x,(x)
      001835 72 5C 00 01      [ 1]  589 	inc in 
      001839 72 5C 00 01      [ 1]  590 	inc in 
      00183D 81               [ 4]  591 	ret 
                                    592 
                                    593 ;--------------------
                                    594 ; extract int24_t  
                                    595 ; value from BASIC 
                                    596 ; code 
                                    597 ; input:
                                    598 ;    X   *integer 
                                    599 ; output:
                                    600 ;    A:X   int24  
                                    601 ;--------------------
      00183E                        602 get_int24:
      00183E F6               [ 1]  603 	ld a,(x)
      00183F EE 01            [ 2]  604 	ldw x,(1,x)
                                    605 ; skip 3 bytes 
      001841 72 5C 00 01      [ 1]  606 	inc in 
      001845 72 5C 00 01      [ 1]  607 	inc in 
      001849 72 5C 00 01      [ 1]  608 	inc in 
      00184D 81               [ 4]  609 	ret 
                                    610 
                                    611 ;-------------------------
                                    612 ; get character from 
                                    613 ; BASIC code 
                                    614 ; input:
                                    615 ;    X   *char 
                                    616 ; output:
                                    617 ;    A    char 
                                    618 ;-------------------------
      00184E                        619 get_char:
      00184E F6               [ 1]  620 	ld a,(x)
      00184F 72 5C 00 01      [ 1]  621 	inc in  
      001853 81               [ 4]  622     ret 
                                    623 
                                    624 ;-----------------------------------
                                    625 ; print a 16 bit integer 
                                    626 ; using variable 'base' as conversion
                                    627 ; format.
                                    628 ; input:
                                    629 ;    X       integer to print 
                                    630 ;   'base'    conversion base 
                                    631 ; output:
                                    632 ;   terminal  
                                    633 ;-----------------------------------
      001854                        634 prt_i16:
      001854 72 5F 00 0C      [ 1]  635 	clr acc24 
      001858 CF 00 0D         [ 2]  636 	ldw acc16,x 
      00185B A6 10            [ 1]  637 	ld a,#16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      00185D C1 00 0A         [ 1]  638 	cp a,base
      001860 27 09            [ 1]  639 	jreq prt_acc24  
      001862 72 0F 00 0D 04   [ 2]  640 	btjf acc16,#7,prt_acc24
      001867 72 53 00 0C      [ 1]  641 	cpl acc24 ; sign extend 
                                    642 	
                                    643 ;------------------------------------
                                    644 ; print integer in acc24 
                                    645 ; input:
                                    646 ;	acc24 		integer to print 
                                    647 ;	'base' 		numerical base for conversion 
                                    648 ;   'tab_width' field width 
                                    649 ;    A 			signed||unsigned conversion
                                    650 ;  output:
                                    651 ;    A          string length
                                    652 ;------------------------------------
      00186B                        653 prt_acc24:
      00186B A6 FF            [ 1]  654 	ld a,#255  ; signed conversion  
      00186D CD 18 91         [ 4]  655     call itoa  ; conversion entier en  .asciz
      001870 CD 11 53         [ 4]  656 	call right_align  
      001873 88               [ 1]  657 	push a 
      001874 CD 09 5C         [ 4]  658 	call puts
      001877 84               [ 1]  659 	pop a 
      001878 81               [ 4]  660     ret	
                                    661 
                                    662 ;---------------------------------------
                                    663 ;  print value at xstack top 
                                    664 ;---------------------------------------
      001879                        665 print_top: 
      001879                        666 	_xpop 
      001879 90 F6            [ 1]    1     ld a,(y)
      00187B 93               [ 1]    2     ldw x,y 
      00187C EE 01            [ 2]    3     ldw x,(1,x)
      00187E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001882 C7 00 0C         [ 1]  667 	ld acc24,a 
      001885 CF 00 0D         [ 2]  668 	ldw acc16,x 
      001888 CD 18 6B         [ 4]  669 	call prt_acc24 
      00188B A6 20            [ 1]  670 	ld a,#SPACE
      00188D CD 08 FF         [ 4]  671 	call putc 
      001890 81               [ 4]  672 	ret 
                                    673 
                                    674 ;------------------------------------
                                    675 ; convert integer in acc24 to string
                                    676 ; input:
                                    677 ;   'base'	conversion base 
                                    678 ;	acc24	integer to convert
                                    679 ;   A       0=unsigned, else signed 
                                    680 ; output:
                                    681 ;   X  		pointer to first char of string
                                    682 ;   A       string length
                                    683 ;------------------------------------
                           000001   684 	SIGN=1  ; integer sign 
                           000002   685 	LEN=2 
                           000003   686 	PSTR=3
                           000004   687 	VSIZE=4 ;locals size
      001891                        688 itoa::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      001891                        689 	_vars VSIZE
      001891 52 04            [ 2]    1     sub sp,#VSIZE 
      001893 0F 02            [ 1]  690 	clr (LEN,sp) ; string length  
      001895 0F 01            [ 1]  691 	clr (SIGN,sp)    ; sign
      001897 4D               [ 1]  692 	tnz A
      001898 27 11            [ 1]  693 	jreq 1$ ; unsigned conversion  
      00189A C6 00 0A         [ 1]  694 	ld a,base 
      00189D A1 0A            [ 1]  695 	cp a,#10
      00189F 26 0A            [ 1]  696 	jrne 1$
                                    697 	; base 10 string display with negative sign if bit 23==1
      0018A1 72 0F 00 0C 05   [ 2]  698 	btjf acc24,#7,1$
      0018A6 03 01            [ 1]  699 	cpl (SIGN,sp)
      0018A8 CD 02 1D         [ 4]  700 	call neg_acc24
      0018AB                        701 1$:
                                    702 ; initialize string pointer 
      0018AB AE 16 68         [ 2]  703 	ldw x,#tib 
      0018AE 1C 00 50         [ 2]  704 	addw x,#TIB_SIZE
      0018B1 5A               [ 2]  705 	decw x 
      0018B2 7F               [ 1]  706 	clr (x)
      0018B3                        707 itoa_loop:
      0018B3 C6 00 0A         [ 1]  708     ld a,base
      0018B6 CD 02 E9         [ 4]  709     call divu24_8 ; acc24/A 
      0018B9 AB 30            [ 1]  710     add a,#'0  ; remainder of division
      0018BB A1 3A            [ 1]  711     cp a,#'9+1
      0018BD 2B 02            [ 1]  712     jrmi 2$
      0018BF AB 07            [ 1]  713     add a,#7 
      0018C1                        714 2$:	
      0018C1 5A               [ 2]  715 	decw x
      0018C2 F7               [ 1]  716     ld (x),a
      0018C3 0C 02            [ 1]  717 	inc (LEN,sp)
                                    718 	; if acc24==0 conversion done
      0018C5 C6 00 0C         [ 1]  719 	ld a,acc24
      0018C8 CA 00 0D         [ 1]  720 	or a,acc16
      0018CB CA 00 0E         [ 1]  721 	or a,acc8
      0018CE 26 E3            [ 1]  722     jrne itoa_loop
                                    723 	;conversion done, next add '$' or '-' as required
      0018D0 C6 00 0A         [ 1]  724 	ld a,base 
      0018D3 A1 10            [ 1]  725 	cp a,#16
      0018D5 27 08            [ 1]  726 	jreq 8$
      0018D7 7B 01            [ 1]  727 	ld a,(SIGN,sp)
      0018D9 27 0A            [ 1]  728     jreq 10$
      0018DB A6 2D            [ 1]  729     ld a,#'-
      0018DD 20 02            [ 2]  730 	jra 9$ 
      0018DF                        731 8$:	
      0018DF A6 24            [ 1]  732 	ld a,#'$ 
      0018E1 5A               [ 2]  733 9$: decw x
      0018E2 F7               [ 1]  734     ld (x),a
      0018E3 0C 02            [ 1]  735 	inc (LEN,sp)
      0018E5                        736 10$:
      0018E5 7B 02            [ 1]  737 	ld a,(LEN,sp)
      0018E7                        738 	_drop VSIZE
      0018E7 5B 04            [ 2]    1     addw sp,#VSIZE 
      0018E9 81               [ 4]  739 	ret
                                    740 
                                    741 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    742 ; convert alpha to uppercase
                                    743 ; input:
                                    744 ;    a  character to convert
                                    745 ; output:
                                    746 ;    a  uppercase character
                                    747 ;------------------------------------
      0018EA                        748 to_upper::
      0018EA A1 61            [ 1]  749 	cp a,#'a
      0018EC 2A 01            [ 1]  750 	jrpl 1$
      0018EE 81               [ 4]  751 0$:	ret
      0018EF A1 7A            [ 1]  752 1$: cp a,#'z	
      0018F1 22 FB            [ 1]  753 	jrugt 0$
      0018F3 A0 20            [ 1]  754 	sub a,#32
      0018F5 81               [ 4]  755 	ret
                                    756 	
                                    757 ;------------------------------------
                                    758 ; convert pad content in integer
                                    759 ; input:
                                    760 ;    x		* .asciz to convert
                                    761 ; output:
                                    762 ;    A:X        int24_t 
                                    763 ;    acc24      int24_t
                                    764 ;------------------------------------
                                    765 	; local variables
                           000001   766 	SIGN=1 ; 1 byte, 
                           000002   767 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   768 	TEMP=3 ; 1 byte, temporary storage
                           000004   769 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   770 	VSIZE=5 ; 5 bytes reserved for local storage
      0018F6                        771 atoi24::
      0018F6                        772 	_vars VSIZE
      0018F6 52 05            [ 2]    1     sub sp,#VSIZE 
      0018F8 1F 04            [ 2]  773 	ldw (XTEMP,sp),x 
                                    774 ; conversion made on xstack 
      0018FA 4F               [ 1]  775 	clr a 
      0018FB 5F               [ 1]  776 	clrw x 
      0018FC                        777 	_xpush 
      0018FC 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001900 90 F7            [ 1]    2     ld (y),a 
      001902 90 EF 01         [ 2]    3     ldw (1,y),x 
      001905 0F 01            [ 1]  778 	clr (SIGN,sp)
      001907 A6 0A            [ 1]  779 	ld a,#10
      001909 6B 02            [ 1]  780 	ld (BASE,sp),a ; default base decimal
      00190B 1E 04            [ 2]  781 	ldw x,(XTEMP,sp)
      00190D F6               [ 1]  782 	ld a,(x)
      00190E 27 4E            [ 1]  783 	jreq 9$  ; completed if 0
      001910 A1 2D            [ 1]  784 	cp a,#'-
      001912 26 04            [ 1]  785 	jrne 1$
      001914 03 01            [ 1]  786 	cpl (SIGN,sp)
      001916 20 08            [ 2]  787 	jra 2$
      001918 A1 24            [ 1]  788 1$: cp a,#'$
      00191A 26 08            [ 1]  789 	jrne 3$
      00191C A6 10            [ 1]  790 	ld a,#16
      00191E 6B 02            [ 1]  791 	ld (BASE,sp),a
      001920 5C               [ 1]  792 2$:	incw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      001921 1F 04            [ 2]  793 	ldw (XTEMP,sp),x 
      001923 F6               [ 1]  794 	ld a,(x)
      001924                        795 3$:	; char to digit 
      001924 A1 61            [ 1]  796 	cp a,#'a
      001926 2B 02            [ 1]  797 	jrmi 4$
      001928 A0 20            [ 1]  798 	sub a,#32
      00192A A1 30            [ 1]  799 4$:	cp a,#'0
      00192C 2B 30            [ 1]  800 	jrmi 9$
      00192E A0 30            [ 1]  801 	sub a,#'0
      001930 A1 0A            [ 1]  802 	cp a,#10
      001932 2B 06            [ 1]  803 	jrmi 5$
      001934 A0 07            [ 1]  804 	sub a,#7
      001936 11 02            [ 1]  805 	cp a,(BASE,sp)
      001938 2A 24            [ 1]  806 	jrpl 9$
      00193A 6B 03            [ 1]  807 5$:	ld (TEMP,sp),a
      00193C 7B 02            [ 1]  808 	ld a,(BASE,sp)
      00193E CD 02 3A         [ 4]  809 	call mulu24_8
      001941                        810 	_xpush 
      001941 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001945 90 F7            [ 1]    2     ld (y),a 
      001947 90 EF 01         [ 2]    3     ldw (1,y),x 
      00194A 5F               [ 1]  811 	clrw x 
      00194B 7B 03            [ 1]  812 	ld a,(TEMP,sp)
      00194D 02               [ 1]  813 	rlwa x 
      00194E                        814 	_xpush 
      00194E 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001952 90 F7            [ 1]    2     ld (y),a 
      001954 90 EF 01         [ 2]    3     ldw (1,y),x 
      001957 CD 01 7E         [ 4]  815 	call add24 
      00195A 1E 04            [ 2]  816 	ldw x,(XTEMP,sp)
      00195C 20 C2            [ 2]  817 	jra 2$
      00195E 0D 01            [ 1]  818 9$:	tnz (SIGN,sp)
      001960 27 03            [ 1]  819     jreq atoi_exit
      001962 CD 02 03         [ 4]  820     call neg24
      001965                        821 atoi_exit:
      001965                        822 	_xpop 
      001965 90 F6            [ 1]    1     ld a,(y)
      001967 93               [ 1]    2     ldw x,y 
      001968 EE 01            [ 2]    3     ldw x,(1,x)
      00196A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00196E C7 00 0C         [ 1]  823 	ld acc24,a 
      001971 CF 00 0D         [ 2]  824 	ldw acc16,x  
      001974                        825 	_drop VSIZE
      001974 5B 05            [ 2]    1     addw sp,#VSIZE 
      001976 81               [ 4]  826 	ret
                                    827 
                                    828 
                                    829 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    830 ;;   TINY BASIC  operators,
                                    831 ;;   commands and functions 
                                    832 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    833 
                                    834 ;---------------------------------
                                    835 ; dictionary search 
                                    836 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    837 ;	X 		dictionary entry point, name field  
                                    838 ;   y		.asciz name to search 
                                    839 ; output:
                                    840 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    841 ;  X		routine address|TK_OP 
                                    842 ;---------------------------------
                           000001   843 	NLEN=1 ; cmd length 
                           000002   844 	XSAVE=2
                           000004   845 	YSAVE=4
                           000005   846 	VSIZE=5 
      001977                        847 search_dict::
      001977                        848 	_vars VSIZE 
      001977 52 05            [ 2]    1     sub sp,#VSIZE 
      001979 17 04            [ 2]  849 	ldw (YSAVE,sp),y 
      00197B                        850 search_next:
      00197B 1F 02            [ 2]  851 	ldw (XSAVE,sp),x 
                                    852 ; get name length in dictionary	
      00197D F6               [ 1]  853 	ld a,(x)
      00197E A4 0F            [ 1]  854 	and a,#0xf 
      001980 6B 01            [ 1]  855 	ld (NLEN,sp),a  
      001982 16 04            [ 2]  856 	ldw y,(YSAVE,sp) ; name pointer 
      001984 5C               [ 1]  857 	incw x 
      001985                        858 cp_loop:
      001985 90 F6            [ 1]  859 	ld a,(y)
      001987 27 1B            [ 1]  860 	jreq str_match 
      001989 0D 01            [ 1]  861 	tnz (NLEN,sp)
      00198B 27 0A            [ 1]  862 	jreq no_match  
      00198D F1               [ 1]  863 	cp a,(x)
      00198E 26 07            [ 1]  864 	jrne no_match 
      001990 90 5C            [ 1]  865 	incw y 
      001992 5C               [ 1]  866 	incw x
      001993 0A 01            [ 1]  867 	dec (NLEN,sp)
      001995 20 EE            [ 2]  868 	jra cp_loop 
      001997                        869 no_match:
      001997 1E 02            [ 2]  870 	ldw x,(XSAVE,sp) 
      001999 1D 00 02         [ 2]  871 	subw x,#2 ; move X to link field
      00199C 4B 00            [ 1]  872 	push #TK_NONE 
      00199E FE               [ 2]  873 	ldw x,(x) ; next word link 
      00199F 84               [ 1]  874 	pop a ; TK_NONE 
      0019A0 27 1D            [ 1]  875 	jreq search_exit  ; not found  
                                    876 ;try next 
      0019A2 20 D7            [ 2]  877 	jra search_next
      0019A4                        878 str_match:
      0019A4 1E 02            [ 2]  879 	ldw x,(XSAVE,sp)
      0019A6 F6               [ 1]  880 	ld a,(X)
      0019A7 6B 01            [ 1]  881 	ld (NLEN,sp),a ; needed to test keyword type  
      0019A9 A4 0F            [ 1]  882 	and a,#NLEN_MASK 
                                    883 ; move x to procedure address field 	
      0019AB 4C               [ 1]  884 	inc a 
      0019AC C7 00 0E         [ 1]  885 	ld acc8,a 
      0019AF 72 5F 00 0D      [ 1]  886 	clr acc16 
      0019B3 72 BB 00 0D      [ 2]  887 	addw x,acc16 
      0019B7 FE               [ 2]  888 	ldw x,(x) ; routine address  
                                    889 ;determine keyword type bits 7:4 
      0019B8 7B 01            [ 1]  890 	ld a,(NLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      0019BA A4 F0            [ 1]  891 	and a,#KW_TYPE_MASK 
      0019BC 4E               [ 1]  892 	swap a 
      0019BD AB 80            [ 1]  893 	add a,#128
      0019BF                        894 search_exit: 
      0019BF                        895 	_drop VSIZE 
      0019BF 5B 05            [ 2]    1     addw sp,#VSIZE 
      0019C1 81               [ 4]  896 	ret 
                                    897 
                                    898 ;--------------------------------
                                    899 ;  called by command that should 
                                    900 ;  be invoked only from command 
                                    901 ;  line.
                                    902 ;  Display an error if 
                                    903 ;  invoked from program.
                                    904 ;---------------------------------
      0019C2                        905 cmd_line_only:
      0019C2 72 01 00 22 05   [ 2]  906 	btjf flags,#FRUN,0$
      0019C7 A6 07            [ 1]  907 	ld a,#ERR_CMD_ONLY
      0019C9 CC 16 A7         [ 2]  908 	jp tb_error 
      0019CC 81               [ 4]  909 0$: ret 
                                    910 
                                    911 ;--------------------------------
                                    912 ; called by command/function that 
                                    913 ; should be invoked only at run time
                                    914 ; Display an error if invoked from 
                                    915 ; command line. 
                                    916 ;---------------------------------
      0019CD                        917 runtime_only:
      0019CD 72 00 00 22 05   [ 2]  918 	btjt flags,#FRUN,0$ 
      0019D2 A6 06            [ 1]  919 	ld a,#ERR_RUN_ONLY
      0019D4 CC 16 A7         [ 2]  920 	jp tb_error 
      0019D7 81               [ 4]  921 0$:	ret 
                                    922 
                                    923 ;---------------------
                                    924 ; check if next token
                                    925 ;  is of expected type 
                                    926 ; input:
                                    927 ;   A 		 expected token attribute
                                    928 ;  ouput:
                                    929 ;   none     if fail call syntax_error 
                                    930 ;--------------------
      0019D8                        931 expect:
      0019D8 88               [ 1]  932 	push a 
      0019D9 CD 18 0C         [ 4]  933 	call next_token 
      0019DC 11 01            [ 1]  934 	cp a,(1,sp)
      0019DE 27 03            [ 1]  935 	jreq 1$
      0019E0 CC 16 A5         [ 2]  936 	jp syntax_error
      0019E3 84               [ 1]  937 1$: pop a 
      0019E4 81               [ 4]  938 	ret 
                                    939 
                                    940 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    941 ; parse arguments list 
                                    942 ; between ()
                                    943 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019E5                        944 func_args:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0019E5 A6 06            [ 1]  945 	ld a,#TK_LPAREN 
      0019E7 CD 19 D8         [ 4]  946 	call expect 
                                    947 ; expected to continue in arg_list 
                                    948 ; caller must check for TK_RPAREN 
                                    949 
                                    950 ;-------------------------------
                                    951 ; parse embedded BASIC routines 
                                    952 ; arguments list.
                                    953 ; arg_list::=  expr[','expr]*
                                    954 ; all arguments are of int24_t type
                                    955 ; and pushed on stack 
                                    956 ; input:
                                    957 ;   none
                                    958 ; output:
                                    959 ;   xstack{n}   arguments pushed on xstack
                                    960 ;   A 	number of arguments pushed on xstack  
                                    961 ;--------------------------------
      0019EA                        962 arg_list:
      0019EA 4B 00            [ 1]  963 	push #0
      0019EC CD 1C 45         [ 4]  964 1$:	call condition 
      0019EF 4D               [ 1]  965 	tnz a 
      0019F0 27 12            [ 1]  966 	jreq 7$  
      0019F2 0C 01            [ 1]  967 	inc (1,sp)
      0019F4 CD 18 0C         [ 4]  968 	call next_token 
      0019F7 A1 08            [ 1]  969 	cp a,#TK_COMMA 
      0019F9 27 F1            [ 1]  970 	jreq 1$ 
      0019FB A1 07            [ 1]  971 	cp a,#TK_RPAREN
      0019FD 27 05            [ 1]  972 	jreq 7$
      0019FF                        973 	_unget_token 
      0019FF 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001A04 84               [ 1]  974 7$:	pop a  
      001A05 81               [ 4]  975 	ret 
                                    976 
                                    977 ;--------------------------------
                                    978 ;   BASIC commnands 
                                    979 ;--------------------------------
                                    980 
                                    981 ;--------------------------------
                                    982 ;  arithmetic and relational 
                                    983 ;  routines
                                    984 ;  operators precedence
                                    985 ;  highest to lowest
                                    986 ;  operators on same row have 
                                    987 ;  same precedence and are executed
                                    988 ;  from left to right.
                                    989 ;	'*','/','%'
                                    990 ;   '-','+'
                                    991 ;   '=','>','<','>=','<=','<>','><'
                                    992 ;   '<>' and '><' are equivalent for not equal.
                                    993 ;--------------------------------
                                    994 
                                    995 ;---------------------
                                    996 ; return array element
                                    997 ; address from @(expr)
                                    998 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                                    999 ;   A 		TK_ARRAY
                                   1000 ; output:
                                   1001 ;	X 		element address 
                                   1002 ;----------------------
      001A06                       1003 get_array_element:
      001A06 CD 19 E5         [ 4] 1004 	call func_args 
      001A09 A1 01            [ 1] 1005 	cp a,#1
      001A0B 27 03            [ 1] 1006 	jreq 1$
      001A0D CC 16 A5         [ 2] 1007 	jp syntax_error
      001A10                       1008 1$: _xpop 
      001A10 90 F6            [ 1]    1     ld a,(y)
      001A12 93               [ 1]    2     ldw x,y 
      001A13 EE 01            [ 2]    3     ldw x,(1,x)
      001A15 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   1009     ; ignore A, index < 65536 in any case 
                                   1010 	; check for bounds 
      001A19 C3 00 20         [ 2] 1011 	cpw x,array_size 
      001A1C 23 05            [ 2] 1012 	jrule 3$
                                   1013 ; bounds {1..array_size}	
      001A1E A6 0A            [ 1] 1014 2$: ld a,#ERR_BAD_VALUE 
      001A20 CC 16 A7         [ 2] 1015 	jp tb_error 
      001A23 5D               [ 2] 1016 3$: tnzw  x
      001A24 27 F8            [ 1] 1017 	jreq 2$ 
      001A26 A6 03            [ 1] 1018 	ld a,#CELL_SIZE  
      001A28 42               [ 4] 1019 	mul x,a 
      001A29 CF 00 0D         [ 2] 1020 	ldw acc16,x   
      001A2C AE 16 68         [ 2] 1021 	ldw x,#tib ; array is below tib 
      001A2F 72 B0 00 0D      [ 2] 1022 	subw x,acc16 
      001A33 81               [ 4] 1023 	ret 
                                   1024 
                                   1025 
                                   1026 ;***********************************
                                   1027 ;   expression parse,execute 
                                   1028 ;***********************************
                                   1029 ;-----------------------------------
                                   1030 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1031 ;			 integer | function |
                                   1032 ;			 '('relation')' 
                                   1033 ; output:
                                   1034 ;   A       token attribute 
                                   1035 ;   xstack  value  
                                   1036 ; ---------------------------------
                           000001  1037 	NEG=1
                           000001  1038 	VSIZE=1
      001A34                       1039 factor:
      001A34                       1040 	_vars VSIZE 
      001A34 52 01            [ 2]    1     sub sp,#VSIZE 
      001A36 0F 01            [ 1] 1041 	clr (NEG,sp)
      001A38 CD 18 0C         [ 4] 1042 	call next_token
      001A3B 4D               [ 1] 1043 	tnz a 
      001A3C 26 03            [ 1] 1044 	jrne 1$ 
      001A3E CC 1A E6         [ 2] 1045 	jp 22$ 
      001A41 A1 10            [ 1] 1046 1$:	cp a,#TK_PLUS 
      001A43 27 06            [ 1] 1047 	jreq 2$
      001A45 A1 11            [ 1] 1048 	cp a,#TK_MINUS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001A47 26 05            [ 1] 1049 	jrne 4$ 
      001A49 03 01            [ 1] 1050 	cpl (NEG,sp)
      001A4B                       1051 2$:	
      001A4B CD 18 0C         [ 4] 1052 	call next_token
      001A4E                       1053 4$:
      001A4E 4D               [ 1] 1054 	tnz a 
      001A4F 26 03            [ 1] 1055 	jrne 41$ 
      001A51 CC 16 A5         [ 2] 1056 	jp syntax_error  
      001A54                       1057 41$:	
      001A54 A1 81            [ 1] 1058 	cp a,#TK_IFUNC 
      001A56 26 0C            [ 1] 1059 	jrne 5$ 
      001A58                       1060 	_get_code_addr 
      001A58 FE               [ 2]    1         ldw x,(x)
      001A59 72 5C 00 01      [ 1]    2         inc in 
      001A5D 72 5C 00 01      [ 1]    3         inc in 
      001A61 FD               [ 4] 1061 	call (x); result in A:X  
      001A62 20 70            [ 2] 1062 	jra 18$ 
      001A64                       1063 5$:
      001A64 A1 84            [ 1] 1064 	cp a,#TK_INTGR
      001A66 26 05            [ 1] 1065 	jrne 6$
      001A68 CD 18 3E         [ 4] 1066 	call get_int24 ; A:X
      001A6B 20 67            [ 2] 1067 	jra 18$
      001A6D                       1068 6$:
      001A6D A1 05            [ 1] 1069 	cp a,#TK_ARRAY
      001A6F 26 05            [ 1] 1070 	jrne 7$
      001A71 CD 1A 06         [ 4] 1071 	call get_array_element
      001A74 20 07            [ 2] 1072     jra 71$
      001A76                       1073 7$:
      001A76 A1 85            [ 1] 1074 	cp a,#TK_VAR 
      001A78 26 08            [ 1] 1075 	jrne 8$
      001A7A CD 18 34         [ 4] 1076 	call get_addr 
      001A7D                       1077 71$: ; put value in A:X
      001A7D F6               [ 1] 1078 	ld a,(x)
      001A7E EE 01            [ 2] 1079 	ldw x,(1,x)
      001A80 20 52            [ 2] 1080 	jra 18$
      001A82                       1081 8$:
      001A82 A1 03            [ 1] 1082 	cp a,#TK_LABEL 
      001A84 26 1D            [ 1] 1083 	jrne 9$
      001A86 90 89            [ 2] 1084 	pushw y  
      001A88 89               [ 2] 1085 	pushw x 
      001A89 CD 18 25         [ 4] 1086 	call skip_string
      001A8C 85               [ 2] 1087 	popw x  
      001A8D CD 13 99         [ 4] 1088 	call strlen 
      001A90 AB 05            [ 1] 1089 	add a,#REC_XTRA_BYTES
      001A92 CD 1D 81         [ 4] 1090 	call search_name
      001A95 5D               [ 2] 1091 	tnzw x 
      001A96 26 04            [ 1] 1092 	jrne 82$ 
      001A98 90 85            [ 2] 1093 	popw y 
      001A9A 20 30            [ 2] 1094 	jra 16$
      001A9C                       1095 82$:
      001A9C 90 85            [ 2] 1096 	popw y   
      001A9E CD 1D 47         [ 4] 1097 	call get_value ; in A:X 
      001AA1 20 31            [ 2] 1098 	jra 18$
      001AA3                       1099 9$: 
      001AA3 A1 82            [ 1] 1100 	cp a,#TK_CFUNC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001AA5 26 0E            [ 1] 1101 	jrne 12$
      001AA7                       1102 	_get_code_addr 
      001AA7 FE               [ 2]    1         ldw x,(x)
      001AA8 72 5C 00 01      [ 1]    2         inc in 
      001AAC 72 5C 00 01      [ 1]    3         inc in 
      001AB0 FD               [ 4] 1103 	call(x)
      001AB1 5F               [ 1] 1104 	clrw x 
      001AB2 02               [ 1] 1105 	rlwa x  ; char>int24 in A:X 
      001AB3 20 1F            [ 2] 1106 	jra 18$ 	 
      001AB5                       1107 12$:			
      001AB5 A1 06            [ 1] 1108 	cp a,#TK_LPAREN
      001AB7 26 13            [ 1] 1109 	jrne 16$
      001AB9 CD 1B 2C         [ 4] 1110 	call expression
      001ABC A6 07            [ 1] 1111 	ld a,#TK_RPAREN 
      001ABE CD 19 D8         [ 4] 1112 	call expect
      001AC1                       1113 	_xpop 
      001AC1 90 F6            [ 1]    1     ld a,(y)
      001AC3 93               [ 1]    2     ldw x,y 
      001AC4 EE 01            [ 2]    3     ldw x,(1,x)
      001AC6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001ACA 20 08            [ 2] 1114 	jra 18$	
      001ACC                       1115 16$:
      001ACC                       1116 	_unget_token 
      001ACC 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001AD1 4F               [ 1] 1117 	clr a 
      001AD2 20 12            [ 2] 1118 	jra 22$ 
      001AD4                       1119 18$: 
      001AD4 0D 01            [ 1] 1120 	tnz (NEG,sp)
      001AD6 27 03            [ 1] 1121 	jreq 20$
      001AD8 CD 02 15         [ 4] 1122 	call neg_ax   
      001ADB                       1123 20$:
      001ADB                       1124 	_xpush 
      001ADB 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001ADF 90 F7            [ 1]    2     ld (y),a 
      001AE1 90 EF 01         [ 2]    3     ldw (1,y),x 
      001AE4 A6 84            [ 1] 1125 	ld a,#TK_INTGR
      001AE6                       1126 22$:
      001AE6                       1127 	_drop VSIZE
      001AE6 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AE8 81               [ 4] 1128 	ret
                                   1129 
                                   1130 
                                   1131 ;-----------------------------------
                                   1132 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1133 ; output:
                                   1134 ;   A    	token attribute 
                                   1135 ;	xstack		value 
                                   1136 ;-----------------------------------
                           000001  1137 	MULOP=1
                           000001  1138 	VSIZE=1
      001AE9                       1139 term:
      001AE9                       1140 	_vars VSIZE
      001AE9 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1141 ; first factor 	
      001AEB CD 1A 34         [ 4] 1142 	call factor
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      001AEE 4D               [ 1] 1143 	tnz a 
      001AEF 27 38            [ 1] 1144 	jreq term_exit  
      001AF1                       1145 term01:	 ; check for  operator '*'|'/'|'%' 
      001AF1 CD 18 0C         [ 4] 1146 	call next_token
      001AF4 6B 01            [ 1] 1147 	ld (MULOP,sp),a
      001AF6 A4 30            [ 1] 1148 	and a,#TK_GRP_MASK
      001AF8 A1 20            [ 1] 1149 	cp a,#TK_GRP_MULT
      001AFA 27 09            [ 1] 1150 	jreq 1$
      001AFC A6 84            [ 1] 1151 	ld a,#TK_INTGR
      001AFE                       1152 	_unget_token 
      001AFE 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001B03 20 24            [ 2] 1153 	jra term_exit 
      001B05                       1154 1$:	; got *|/|%
                                   1155 ;second factor
      001B05 CD 1A 34         [ 4] 1156 	call factor
      001B08 4D               [ 1] 1157 	tnz a 
      001B09 26 03            [ 1] 1158 	jrne 2$ 
      001B0B CC 16 A5         [ 2] 1159 	jp syntax_error 
      001B0E                       1160 2$: ; select operation 	
      001B0E 7B 01            [ 1] 1161 	ld a,(MULOP,sp) 
      001B10 A1 20            [ 1] 1162 	cp a,#TK_MULT 
      001B12 26 05            [ 1] 1163 	jrne 3$
                                   1164 ; '*' operator
      001B14 CD 02 79         [ 4] 1165 	call mul24 
      001B17 20 D8            [ 2] 1166 	jra term01
      001B19 A1 21            [ 1] 1167 3$: cp a,#TK_DIV 
      001B1B 26 05            [ 1] 1168 	jrne 4$ 
                                   1169 ; '/' operator	
      001B1D CD 03 07         [ 4] 1170 	call div24 
      001B20 20 CF            [ 2] 1171 	jra term01 
      001B22                       1172 4$: ; '%' operator
      001B22 CD 03 A1         [ 4] 1173 	call mod24
      001B25 20 CA            [ 2] 1174 	jra term01 
      001B27                       1175 9$: 
      001B27 A6 84            [ 1] 1176 	ld a,#TK_INTGR
      001B29                       1177 term_exit:
      001B29                       1178 	_drop VSIZE 
      001B29 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B2B 81               [ 4] 1179 	ret 
                                   1180 
                                   1181 ;-------------------------------
                                   1182 ;  expr ::= term [['+'|'-'] term]*
                                   1183 ;  result range {-32768..32767}
                                   1184 ;  output:
                                   1185 ;   A    token attribute 
                                   1186 ;   xstack	 result    
                                   1187 ;-------------------------------
                           000001  1188 	OP=1 
                           000001  1189 	VSIZE=1 
      001B2C                       1190 expression:
      001B2C                       1191 	_vars VSIZE 
      001B2C 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1192 ; first term 	
      001B2E CD 1A E9         [ 4] 1193 	call term
      001B31 4D               [ 1] 1194 	tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001B32 27 2D            [ 1] 1195 	jreq 9$
      001B34                       1196 1$:	; operator '+'|'-'
      001B34 CD 18 0C         [ 4] 1197 	call next_token
      001B37 6B 01            [ 1] 1198 	ld (OP,sp),a 
      001B39 A4 30            [ 1] 1199 	and a,#TK_GRP_MASK
      001B3B A1 10            [ 1] 1200 	cp a,#TK_GRP_ADD 
      001B3D 27 09            [ 1] 1201 	jreq 2$ 
      001B3F                       1202 	_unget_token 
      001B3F 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001B44 A6 84            [ 1] 1203 	ld a,#TK_INTGR
      001B46 20 19            [ 2] 1204 	jra 9$ 
      001B48                       1205 2$: ; second term 
      001B48 CD 1A E9         [ 4] 1206 	call term
      001B4B 4D               [ 1] 1207 	tnz a 
      001B4C 26 03            [ 1] 1208 	jrne 3$
      001B4E CC 16 A5         [ 2] 1209 	jp syntax_error
      001B51                       1210 3$:
      001B51 7B 01            [ 1] 1211 	ld a,(OP,sp)
      001B53 A1 10            [ 1] 1212 	cp a,#TK_PLUS 
      001B55 26 05            [ 1] 1213 	jrne 4$
                                   1214 ; '+' operator	
      001B57 CD 01 7E         [ 4] 1215 	call add24
      001B5A 20 D8            [ 2] 1216 	jra 1$ 
      001B5C                       1217 4$:	; '-' operator 
      001B5C CD 01 9B         [ 4] 1218 	call sub24
      001B5F 20 D3            [ 2] 1219 	jra 1$
      001B61                       1220 9$:
      001B61                       1221 	_drop VSIZE 
      001B61 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B63 81               [ 4] 1222 	ret 
                                   1223 
                                   1224 ;---------------------------------------------
                                   1225 ; rel ::= expr rel_op expr
                                   1226 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1227 ;  relation return  integer , zero is false 
                                   1228 ;  output:
                                   1229 ;	 xstack		value  
                                   1230 ;---------------------------------------------
                           000001  1231 	RELOP=1
                           000001  1232 	VSIZE=1 
      001B64                       1233 relation: 
      001B64                       1234 	_vars VSIZE
      001B64 52 01            [ 2]    1     sub sp,#VSIZE 
      001B66 CD 1B 2C         [ 4] 1235 	call expression
      001B69 4D               [ 1] 1236 	tnz a 
      001B6A 27 54            [ 1] 1237 	jreq 9$ 
                                   1238 ; expect rel_op or leave 
      001B6C CD 18 0C         [ 4] 1239 	call next_token 
      001B6F 6B 01            [ 1] 1240 	ld (RELOP,sp),a 
      001B71 A4 30            [ 1] 1241 	and a,#TK_GRP_MASK
      001B73 A1 30            [ 1] 1242 	cp a,#TK_GRP_RELOP 
      001B75 27 09            [ 1] 1243 	jreq 2$
      001B77 A6 84            [ 1] 1244 	ld a,#TK_INTGR 
      001B79                       1245 	_unget_token 
      001B79 55 00 03 00 01   [ 1]    1      mov in,in.saved  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001B7E 20 40            [ 2] 1246 	jra 9$ 
      001B80                       1247 2$:	; expect another expression
      001B80 CD 1B 2C         [ 4] 1248 	call expression
      001B83 4D               [ 1] 1249 	tnz a 
      001B84 26 03            [ 1] 1250 	jrne 3$
      001B86 CC 16 A5         [ 2] 1251 	jp syntax_error 
      001B89                       1252 3$: 
      001B89 CD 01 B8         [ 4] 1253 	call cp24 
      001B8C                       1254 	_xpop  
      001B8C 90 F6            [ 1]    1     ld a,(y)
      001B8E 93               [ 1]    2     ldw x,y 
      001B8F EE 01            [ 2]    3     ldw x,(1,x)
      001B91 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B95 4D               [ 1] 1255 	tnz a 
      001B96 2B 08            [ 1] 1256 	jrmi 4$
      001B98 26 0C            [ 1] 1257 	jrne 5$
      001B9A 35 02 00 0E      [ 1] 1258 	mov acc8,#2 ; i1==i2
      001B9E 20 0A            [ 2] 1259 	jra 6$ 
      001BA0                       1260 4$: ; i1<i2
      001BA0 35 04 00 0E      [ 1] 1261 	mov acc8,#4 
      001BA4 20 04            [ 2] 1262 	jra 6$
      001BA6                       1263 5$: ; i1>i2
      001BA6 35 01 00 0E      [ 1] 1264 	mov acc8,#1  
      001BAA                       1265 6$: ; 0=false, -1=true 
      001BAA 5F               [ 1] 1266 	clrw x 
      001BAB C6 00 0E         [ 1] 1267 	ld a, acc8  
      001BAE 14 01            [ 1] 1268 	and a,(RELOP,sp)
      001BB0 27 03            [ 1] 1269 	jreq 7$
      001BB2 53               [ 2] 1270 	cplw x 
      001BB3 A6 FF            [ 1] 1271 	ld a,#255 
      001BB5                       1272 7$:	_xpush 
      001BB5 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BB9 90 F7            [ 1]    2     ld (y),a 
      001BBB 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BBE A6 84            [ 1] 1273 	ld a,#TK_INTGR
      001BC0                       1274 9$: 
      001BC0                       1275 	_drop VSIZE
      001BC0 5B 01            [ 2]    1     addw sp,#VSIZE 
      001BC2 81               [ 4] 1276 	ret 
                                   1277 
                                   1278 ;-------------------------------------------
                                   1279 ;  AND factor:  [NOT] relation | (condition)
                                   1280 ;  output:
                                   1281 ;     A      TK_INTGR|0
                                   1282 ;-------------------------------------------
                           000001  1283 	NOT_OP=1
      001BC3                       1284 and_factor:
      001BC3 4B 00            [ 1] 1285 	push #0 
      001BC5 CD 18 0C         [ 4] 1286 0$:	call next_token  
      001BC8 4D               [ 1] 1287 	tnz a 
      001BC9 27 25            [ 1] 1288 	jreq 8$ 
      001BCB A1 87            [ 1] 1289 	cp a,#TK_NOT 
      001BCD 26 04            [ 1] 1290 	jrne 1$ 
      001BCF 03 01            [ 1] 1291 	cpl (NOT_OP,sp)
      001BD1 20 F2            [ 2] 1292 	jra 0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001BD3                       1293 1$:	
      001BD3 A1 06            [ 1] 1294 	cp a,#TK_LPAREN 
      001BD5 26 0A            [ 1] 1295 	jrne 2$
      001BD7 CD 1C 45         [ 4] 1296 	call condition
      001BDA A6 07            [ 1] 1297 	ld a,#TK_RPAREN 
      001BDC CD 19 D8         [ 4] 1298 	call expect
      001BDF 20 08            [ 2] 1299 	jra 3$
      001BE1                       1300 2$: _unget_token 
      001BE1 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001BE6 CD 1B 64         [ 4] 1301 	call relation
      001BE9                       1302 3$:
      001BE9 0D 01            [ 1] 1303 	tnz (NOT_OP,sp)
      001BEB 27 03            [ 1] 1304 	jreq 8$ 
      001BED CD 01 FA         [ 4] 1305 	call cpl24
      001BF0                       1306 8$:
      001BF0                       1307 	_drop 1  
      001BF0 5B 01            [ 2]    1     addw sp,#1 
      001BF2 81               [ 4] 1308     ret 
                                   1309 
                                   1310 
                                   1311 ;--------------------------------------------
                                   1312 ;  AND operator as priority over OR||XOR 
                                   1313 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1314 ;          
                                   1315 ;  output:
                                   1316 ;     A     TK_INTGR|0
                                   1317 ;    xtack   value 
                                   1318 ;--------------------------------------------
      001BF3                       1319 and_cond:
      001BF3 CD 1B C3         [ 4] 1320 	call and_factor
      001BF6 4D               [ 1] 1321 	tnz a 
      001BF7 27 4B            [ 1] 1322 	jreq 9$  
      001BF9 CD 18 0C         [ 4] 1323 1$: call next_token 
      001BFC 4D               [ 1] 1324 	tnz a 
      001BFD 27 43            [ 1] 1325 	jreq 6$ 
      001BFF A1 88            [ 1] 1326 	cp a,#TK_AND 
      001C01 27 07            [ 1] 1327 	jreq 3$
      001C03                       1328 	_unget_token 
      001C03 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001C08 20 38            [ 2] 1329 	jra 6$ 
      001C0A CD 1B C3         [ 4] 1330 3$:	call and_factor  
      001C0D 4D               [ 1] 1331 	tnz a 
      001C0E 26 03            [ 1] 1332 	jrne 4$
      001C10 CC 16 A5         [ 2] 1333 	jp syntax_error 
      001C13                       1334 4$:	
      001C13                       1335 	_xpop 
      001C13 90 F6            [ 1]    1     ld a,(y)
      001C15 93               [ 1]    2     ldw x,y 
      001C16 EE 01            [ 2]    3     ldw x,(1,x)
      001C18 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C1C C7 00 0C         [ 1] 1336 	ld acc24,a 
      001C1F CF 00 0D         [ 2] 1337 	ldw acc16,x
      001C22                       1338 	_xpop 
      001C22 90 F6            [ 1]    1     ld a,(y)
      001C24 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001C25 EE 01            [ 2]    3     ldw x,(1,x)
      001C27 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C2B C4 00 0C         [ 1] 1339 	and a,acc24 
      001C2E 02               [ 1] 1340 	rlwa x 
      001C2F C4 00 0D         [ 1] 1341 	and a,acc16 
      001C32 02               [ 1] 1342 	rlwa x 
      001C33 C4 00 0E         [ 1] 1343 	and a,acc8 
      001C36 02               [ 1] 1344 	rlwa x
      001C37                       1345 	_xpush
      001C37 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C3B 90 F7            [ 1]    2     ld (y),a 
      001C3D 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C40 20 B7            [ 2] 1346 	jra 1$  
      001C42 A6 84            [ 1] 1347 6$: ld a,#TK_INTGR 
      001C44 81               [ 4] 1348 9$:	ret 	 
                                   1349 
                                   1350 
                                   1351 ;--------------------------------------------
                                   1352 ; condition for IF and UNTIL 
                                   1353 ; operators: OR,XOR 
                                   1354 ; format:  and_cond [ OP and_cond ]* 
                                   1355 ; output:
                                   1356 ;    A        INTGR|0 
                                   1357 ;    xstack   value 
                                   1358 ;--------------------------------------------
                           000001  1359 	ATMP=1
                           000002  1360 	OP=2
                           000002  1361 	VSIZE=2 
      001C45                       1362 condition:
      001C45                       1363 	_vars VSIZE 
      001C45 52 02            [ 2]    1     sub sp,#VSIZE 
      001C47 CD 1B F3         [ 4] 1364 	call and_cond
      001C4A 4D               [ 1] 1365 	tnz a 
      001C4B 27 69            [ 1] 1366 	jreq 9$ 
      001C4D CD 18 0C         [ 4] 1367 1$:	call next_token 
      001C50 A1 89            [ 1] 1368 	cp a,#TK_OR 
      001C52 27 0B            [ 1] 1369 	jreq 2$
      001C54 A1 8A            [ 1] 1370 	cp a,#TK_XOR
      001C56 27 07            [ 1] 1371 	jreq 2$ 
      001C58                       1372 	_unget_token 
      001C58 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001C5D 20 55            [ 2] 1373 	jra 8$ 
      001C5F 6B 02            [ 1] 1374 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001C61 CD 1B F3         [ 4] 1375 	call and_cond
      001C64 A1 84            [ 1] 1376 	cp a,#TK_INTGR 
      001C66 27 03            [ 1] 1377 	jreq 3$
      001C68 CC 16 A5         [ 2] 1378 	jp syntax_error 
      001C6B                       1379 3$:	 
      001C6B                       1380 	_xpop  ; rigth arg 
      001C6B 90 F6            [ 1]    1     ld a,(y)
      001C6D 93               [ 1]    2     ldw x,y 
      001C6E EE 01            [ 2]    3     ldw x,(1,x)
      001C70 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C74 C7 00 0C         [ 1] 1381 	ld acc24,a 
      001C77 CF 00 0D         [ 2] 1382 	ldw acc16,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001C7A                       1383 	_xpop  ; left arg  
      001C7A 90 F6            [ 1]    1     ld a,(y)
      001C7C 93               [ 1]    2     ldw x,y 
      001C7D EE 01            [ 2]    3     ldw x,(1,x)
      001C7F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C83 6B 01            [ 1] 1384 	ld (ATMP,sp),a 
      001C85 7B 02            [ 1] 1385 	ld a,(OP,sp)
      001C87 A1 8A            [ 1] 1386 	cp a,#TK_XOR 
      001C89 27 10            [ 1] 1387 	jreq 5$ 
      001C8B                       1388 4$: ; A:X OR acc24   
      001C8B 7B 01            [ 1] 1389 	ld a,(ATMP,sp)
      001C8D CA 00 0C         [ 1] 1390 	or a,acc24 
      001C90 02               [ 1] 1391 	rlwa x 
      001C91 CA 00 0D         [ 1] 1392 	or a,acc16 
      001C94 02               [ 1] 1393 	rlwa x 
      001C95 CA 00 0E         [ 1] 1394 	or a,acc8 
      001C98 02               [ 1] 1395 	rlwa x 
      001C99 20 0E            [ 2] 1396 	jra 6$  
      001C9B                       1397 5$: ; A:X XOR acc24 
      001C9B 7B 01            [ 1] 1398 	ld a,(ATMP,sp)
      001C9D C8 00 0C         [ 1] 1399 	xor a,acc24 
      001CA0 02               [ 1] 1400 	rlwa x 
      001CA1 C8 00 0D         [ 1] 1401 	xor a,acc16 
      001CA4 02               [ 1] 1402 	rlwa x 
      001CA5 C8 00 0E         [ 1] 1403 	xor a,acc8 
      001CA8 02               [ 1] 1404 	rlwa x 
      001CA9                       1405 6$: _xpush
      001CA9 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001CAD 90 F7            [ 1]    2     ld (y),a 
      001CAF 90 EF 01         [ 2]    3     ldw (1,y),x 
      001CB2 20 99            [ 2] 1406 	jra 1$ 
      001CB4 A6 84            [ 1] 1407 8$:	ld a,#TK_INTGR 
      001CB6                       1408 9$:	_drop VSIZE 
      001CB6 5B 02            [ 2]    1     addw sp,#VSIZE 
      001CB8 81               [ 4] 1409 	ret 
                                   1410 
                                   1411 
                                   1412 ;--------------------------------------------
                                   1413 ; BASIC: HEX 
                                   1414 ; select hexadecimal base for integer print
                                   1415 ;---------------------------------------------
      001CB9                       1416 hex_base:
      001CB9 35 10 00 0A      [ 1] 1417 	mov base,#16 
      001CBD 81               [ 4] 1418 	ret 
                                   1419 
                                   1420 ;--------------------------------------------
                                   1421 ; BASIC: DEC 
                                   1422 ; select decimal base for integer print
                                   1423 ;---------------------------------------------
      001CBE                       1424 dec_base:
      001CBE 35 0A 00 0A      [ 1] 1425 	mov base,#10
      001CC2 81               [ 4] 1426 	ret 
                                   1427 
                                   1428 ;------------------------
                                   1429 ; BASIC: FREE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                   1430 ; return free size in RAM 
                                   1431 ; output:
                                   1432 ;   A:x		size 
                                   1433 ;--------------------------
      001CC3                       1434 free:
      001CC3 4F               [ 1] 1435 	clr a 
      001CC4 AE 16 68         [ 2] 1436 	ldw x,#tib 
      001CC7 72 B0 00 32      [ 2] 1437 	subw x,dvar_end 
      001CCB 81               [ 4] 1438 	ret 
                                   1439 
                                   1440 ;------------------------------
                                   1441 ; BASIC: SIZE 
                                   1442 ; command that print 
                                   1443 ; program start addres and size 
                                   1444 ;------------------------------
      001CCC                       1445 cmd_size:
      001CCC 3B 00 0A         [ 1] 1446 	push base 
      001CCF AE 1E AB         [ 2] 1447 	ldw x,#PROG_ADDR 
      001CD2 CD 09 5C         [ 4] 1448 	call puts 
      001CD5 CE 00 1B         [ 2] 1449 	ldw x,txtbgn     
      001CD8 35 10 00 0A      [ 1] 1450 	mov base,#16 
      001CDC CD 18 54         [ 4] 1451 	call prt_i16
      001CDF 32 00 0A         [ 1] 1452 	pop base 
      001CE2 AE 1E BD         [ 2] 1453 	ldw x,#PROG_SIZE 
      001CE5 CD 09 5C         [ 4] 1454 	call puts 
      001CE8 CE 00 1D         [ 2] 1455 	ldw x,txtend 
      001CEB 72 B0 00 1B      [ 2] 1456 	subw x,txtbgn 
      001CEF CD 18 54         [ 4] 1457 	call prt_i16
      001CF2 AE 1E CE         [ 2] 1458 	ldw x,#STR_BYTES 
      001CF5 CD 09 5C         [ 4] 1459 	call puts  
      001CF8 81               [ 4] 1460 	ret 
                                   1461 
                                   1462 
                                   1463 ;------------------------
                                   1464 ; BASIC: UBOUND  
                                   1465 ; return array variable size 
                                   1466 ; and set 'array_size' variable 
                                   1467 ; output:
                                   1468 ;   A:X 	array_size
                                   1469 ;--------------------------
      001CF9                       1470 ubound:
      001CF9 CD 1C C3         [ 4] 1471 	call free 
      001CFC A6 03            [ 1] 1472 	ld a,#CELL_SIZE 
      001CFE 62               [ 2] 1473 	div x,a 
      001CFF CF 00 20         [ 2] 1474 	ldw array_size,x
      001D02 4F               [ 1] 1475 	clr a 
      001D03 81               [ 4] 1476 	ret 
                                   1477 
                                   1478 ;-----------------------------
                                   1479 ; BASIC: LET var=expr 
                                   1480 ; variable assignement 
                                   1481 ; output:
                                   1482 ;   A 		TK_NONE 
                                   1483 ;-----------------------------
      001D04                       1484 let::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001D04 CD 18 0C         [ 4] 1485 	call next_token 
      001D07 A1 85            [ 1] 1486 	cp a,#TK_VAR 
      001D09 27 0C            [ 1] 1487 	jreq let_var
      001D0B A1 05            [ 1] 1488 	cp a,#TK_ARRAY 
      001D0D 27 03            [ 1] 1489 	jreq  let_array
      001D0F CC 16 A5         [ 2] 1490 	jp syntax_error
      001D12                       1491 let_array:
      001D12 CD 1A 06         [ 4] 1492 	call get_array_element
      001D15 20 03            [ 2] 1493 	jra let_eval 
      001D17                       1494 let_var:
      001D17 CD 18 34         [ 4] 1495 	call get_addr
      001D1A                       1496 let_eval:
      001D1A CF 00 19         [ 2] 1497 	ldw ptr16,x  ; variable address 
      001D1D CD 18 0C         [ 4] 1498 	call next_token 
      001D20 A1 32            [ 1] 1499 	cp a,#TK_EQUAL
      001D22 27 03            [ 1] 1500 	jreq 1$
      001D24 CC 16 A5         [ 2] 1501 	jp syntax_error
      001D27                       1502 1$:	
      001D27 CD 1C 45         [ 4] 1503 	call condition   
      001D2A A1 84            [ 1] 1504 	cp a,#TK_INTGR 
      001D2C 27 03            [ 1] 1505 	jreq 2$
      001D2E CC 16 A5         [ 2] 1506 	jp syntax_error
      001D31                       1507 2$:	
      001D31                       1508 	_xpop ; value 
      001D31 90 F6            [ 1]    1     ld a,(y)
      001D33 93               [ 1]    2     ldw x,y 
      001D34 EE 01            [ 2]    3     ldw x,(1,x)
      001D36 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001D3A                       1509 3$:
      001D3A 72 C7 00 19      [ 4] 1510 	ld [ptr16],a
      001D3E 72 5C 00 1A      [ 1] 1511 	inc ptr8  
      001D42 72 CF 00 19      [ 5] 1512 	ldw [ptr16],x 
      001D46 81               [ 4] 1513 	ret 
                                   1514 
                                   1515 
                                   1516 ;--------------------------
                                   1517 ; return constant/dvar value 
                                   1518 ; from it's record address
                                   1519 ; input:
                                   1520 ;	X	*const record 
                                   1521 ; output:
                                   1522 ;   A:X   const  value
                                   1523 ;--------------------------
      001D47                       1524 get_value: ; -- i 
      001D47 F6               [ 1] 1525 	ld a,(x) ; record size 
      001D48 A4 0F            [ 1] 1526 	and a,#NAME_MAX_LEN
      001D4A A0 03            [ 1] 1527 	sub a,#CELL_SIZE ; * value 
      001D4C 88               [ 1] 1528 	push a 
      001D4D 4B 00            [ 1] 1529 	push #0 
      001D4F 72 FB 01         [ 2] 1530 	addw x,(1,sp)
      001D52 F6               [ 1] 1531 	ld a,(x)
      001D53 EE 01            [ 2] 1532 	ldw x,(1,x)
      001D55                       1533 	_drop 2
      001D55 5B 02            [ 2]    1     addw sp,#2 
      001D57 81               [ 4] 1534 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                                   1535 
                                   1536 
                                   1537 ;--------------------------
                                   1538 ; BASIC: EEFREE 
                                   1539 ; eeprom_free 
                                   1540 ; search end of data  
                                   1541 ; in EEPROM 
                                   1542 ; input:
                                   1543 ;    none 
                                   1544 ; output:
                                   1545 ;    A:X     address free
                                   1546 ;-------------------------
      001D58                       1547 func_eefree:
      001D58 AE 40 00         [ 2] 1548 	ldw x,#EEPROM_BASE 
      001D5B 35 08 00 0E      [ 1] 1549 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001D5F A3 47 F8         [ 2] 1550     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D62 24 17            [ 1] 1551 	jruge 8$ ; no free space 
      001D64 F6               [ 1] 1552 2$: ld a,(x)
      001D65 26 0C            [ 1] 1553 	jrne 3$
      001D67 5C               [ 1] 1554 	incw x 
      001D68 72 5A 00 0E      [ 1] 1555 	dec acc8 
      001D6C 26 F6            [ 1] 1556 	jrne 2$
      001D6E 1D 00 08         [ 2] 1557 	subw x,#8 
      001D71 20 09            [ 2] 1558 	jra 9$  
      001D73 F6               [ 1] 1559 3$: ld a,(x)
      001D74 5C               [ 1] 1560 	incw x
      001D75 4D               [ 1] 1561 	tnz a  
      001D76 26 FB            [ 1] 1562 	jrne 3$
      001D78 5A               [ 2] 1563 	decw x   
      001D79 20 E0            [ 2] 1564 	jra 1$ 
      001D7B 5F               [ 1] 1565 8$: clrw x ; no free space 
      001D7C 4F               [ 1] 1566 9$: clr a 
      001D7D CF 00 24         [ 2] 1567 	ldw free_eeprom,x ; save in system variable 
      001D80 81               [ 4] 1568 	ret 
                                   1569 
                           000005  1570 REC_XTRA_BYTES=5 
                                   1571 ;--------------------------
                                   1572 ; search constant/dim_var name 
                                   1573 ; format of record  
                                   1574 ;   .byte record length 
                                   1575 ;         = strlen(name)+5 
                                   1576 ;   .asciz name (variable length)
                                   1577 ;   .int24 value (3 bytes )
                                   1578 ; a constant record use 7+ bytes
                                   1579 ; constants are saved in EEPROM  
                                   1580 ; input:
                                   1581 ;    A     record_len 
                                   1582 ;    X     *name
                                   1583 ; output:
                                   1584 ;    X     address|0
                                   1585 ; use:
                                   1586 ;   A,Y, acc16 
                                   1587 ;-------------------------
                           000001  1588 	NAMEPTR=1 ; target name pointer 
                           000003  1589 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



                           000005  1590 	RECLEN=5  ; record length of target
                           000007  1591 	LIMIT=7   ; search area limit 
                           000008  1592 	VSIZE=8  
      001D81                       1593 search_name:
      001D81 90 89            [ 2] 1594 	pushw y 
      001D83                       1595 	_vars VSIZE
      001D83 52 08            [ 2]    1     sub sp,#VSIZE 
      001D85 72 5F 00 0D      [ 1] 1596 	clr acc16 
      001D89 6B 05            [ 1] 1597 	ld (RECLEN,sp),a    
      001D8B 1F 01            [ 2] 1598 	ldw (NAMEPTR,sp),x
      001D8D CE 00 32         [ 2] 1599 	ldw x,dvar_end 
      001D90 1F 07            [ 2] 1600 	ldw (LIMIT,sp),x 
      001D92 90 CE 00 30      [ 2] 1601 	ldw y,dvar_bgn
      001D96 17 03            [ 2] 1602 1$:	ldw (WLKPTR,sp),y
      001D98 93               [ 1] 1603 	ldw x,y 
      001D99 13 07            [ 2] 1604 	cpw x, (LIMIT,sp) 
      001D9B 24 20            [ 1] 1605 	jruge 7$ ; no match found 
      001D9D 90 F6            [ 1] 1606 	ld a,(y)
      001D9F A4 0F            [ 1] 1607 	and a,#NAME_MAX_LEN
      001DA1 11 05            [ 1] 1608 	cp a,(RECLEN,sp)
      001DA3 26 09            [ 1] 1609 	jrne 2$ 
      001DA5 90 5C            [ 1] 1610 	incw y 
      001DA7 1E 01            [ 2] 1611 	ldw x,(NAMEPTR,sp)
      001DA9 CD 13 A4         [ 4] 1612 	call strcmp
      001DAC 26 13            [ 1] 1613 	jrne 8$ ; match found 
      001DAE                       1614 2$: ; skip this one 	
      001DAE 16 03            [ 2] 1615 	ldW Y,(WLKPTR,sp)
      001DB0 90 F6            [ 1] 1616 	ld a,(y)
      001DB2 A4 0F            [ 1] 1617 	and a,#NAME_MAX_LEN 
      001DB4 C7 00 0E         [ 1] 1618 	ld acc8,a 
      001DB7 72 B9 00 0D      [ 2] 1619 	addw y,acc16 
      001DBB 20 D9            [ 2] 1620 	jra 1$  
      001DBD                       1621 7$: ; no match found 
      001DBD 0F 03            [ 1] 1622 	clr (WLKPTR,sp)
      001DBF 0F 04            [ 1] 1623 	clr (WLKPTR+1,sp)
      001DC1                       1624 8$: ; match found 
      001DC1 1E 03            [ 2] 1625 	ldw x,(WLKPTR,sp) ; record address 
      001DC3                       1626 9$:	_DROP VSIZE
      001DC3 5B 08            [ 2]    1     addw sp,#VSIZE 
      001DC5 90 85            [ 2] 1627 	popw y 
      001DC7 81               [ 4] 1628 	 ret 
                                   1629 
                                   1630 ;--------------------------------------------
                                   1631 ; BASIC: CONST name=value [, name=value]*
                                   1632 ; define constant(s) saved in EEPROM
                                   1633 ; share most of his code with cmd_dim 
                                   1634 ;--------------------------------------------
                           000001  1635 	VAR_NAME=1 
                           000003  1636 	REC_LEN=3
                           000005  1637 	RONLY=5
                           000005  1638 	VSIZE=5
      001DC8                       1639 cmd_const:
      001DC8 CD 19 CD         [ 4] 1640 	call runtime_only
      001DCB                       1641 	_vars VSIZE 
      001DCB 52 05            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001DCD A6 80            [ 1] 1642 	ld a,#128 
      001DCF 6B 05            [ 1] 1643 	ld (RONLY,sp),a 
      001DD1 0F 03            [ 1] 1644 	clr (REC_LEN,sp)
      001DD3 20 09            [ 2] 1645 	jra cmd_dim2 ; shared code with cmd_dim  
                                   1646 
                                   1647 ;---------------------------------
                                   1648 ; BASIC: DIM var_name [var_name]* 
                                   1649 ; create named variables at end 
                                   1650 ; of BASIC program. 
                                   1651 ; These variables are initialized 
                                   1652 ; to 0. 
                                   1653 ; record format same ast CONST 
                                   1654 ; but r/w because stored in RAM 
                                   1655 ;---------------------------------
      001DD5                       1656 cmd_dim:
      001DD5 CD 19 CD         [ 4] 1657 	call runtime_only
      001DD8                       1658 cmd_dim1:	
      001DD8                       1659 	_vars VSIZE
      001DD8 52 05            [ 2]    1     sub sp,#VSIZE 
      001DDA 0F 03            [ 1] 1660 	clr (REC_LEN,sp )
      001DDC 0F 05            [ 1] 1661 	clr (RONLY,sp)
      001DDE                       1662 cmd_dim2: 
      001DDE CD 18 0C         [ 4] 1663 0$:	call next_token 
      001DE1 A1 03            [ 1] 1664 	cp a,#TK_LABEL  
      001DE3 27 03            [ 1] 1665 	jreq 1$ 
      001DE5 CC 16 A5         [ 2] 1666 	jp syntax_error 
      001DE8 1F 01            [ 2] 1667 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001DEA CD 13 99         [ 4] 1668 	call strlen
      001DED AB 05            [ 1] 1669 	add a,#REC_XTRA_BYTES
      001DEF 6B 04            [ 1] 1670 	ld (REC_LEN+1,sp),a
      001DF1 CD 18 25         [ 4] 1671 	call skip_string 
      001DF4 7B 04            [ 1] 1672 	ld a,(REC_LEN+1,sp)
      001DF6 1E 01            [ 2] 1673 	ldw x,(VAR_NAME,sp) 
      001DF8 CD 1D 81         [ 4] 1674 	call search_name  
      001DFB 5D               [ 2] 1675 	tnzw x 
      001DFC 27 05            [ 1] 1676 	jreq 2$
      001DFE A6 08            [ 1] 1677 	ld a,#ERR_DUPLICATE
      001E00 CC 16 A7         [ 2] 1678 	jp tb_error  
      001E03 CE 00 32         [ 2] 1679 2$:	ldw x,dvar_end 
      001E06 7B 04            [ 1] 1680 	ld a,(REC_LEN+1,sp)
      001E08 1A 05            [ 1] 1681 	or a,(RONLY,sp)
      001E0A F7               [ 1] 1682 	ld (x),a 
      001E0B 5C               [ 1] 1683 	incw x 
      001E0C 90 89            [ 2] 1684 	pushw y 
      001E0E 16 03            [ 2] 1685 	ldw y,(VAR_NAME+2,sp)
      001E10 CD 13 B5         [ 4] 1686 	call strcpy
      001E13 90 85            [ 2] 1687 	popw y 
      001E15 5A               [ 2] 1688 	decw x
      001E16 72 FB 03         [ 2] 1689 	addw x,(REC_LEN,sp)
      001E19 CF 00 32         [ 2] 1690 	ldw dvar_end,x 
      001E1C 1D 00 03         [ 2] 1691 	subw x,#CELL_SIZE  
      001E1F 7F               [ 1] 1692 	clr (x)
      001E20 6F 01            [ 1] 1693 	clr (1,x)  
      001E22 6F 02            [ 1] 1694 	clr (2,x)
      001E24 CD 18 0C         [ 4] 1695 4$: call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001E27 A1 08            [ 1] 1696 	cp a,#TK_COMMA 
      001E29 27 B3            [ 1] 1697 	jreq 0$ 
      001E2B A1 32            [ 1] 1698 	cp a,#TK_EQUAL 
      001E2D 26 2A            [ 1] 1699 	jrne 8$
                                   1700 ; initialize variable 
      001E2F CD 1C 45         [ 4] 1701 	call condition 
      001E32 A1 84            [ 1] 1702 	cp a,#TK_INTGR
      001E34 27 03            [ 1] 1703 	jreq 5$
      001E36 CC 16 A5         [ 2] 1704 	jp syntax_error
      001E39 CE 00 32         [ 2] 1705 5$: ldw x,dvar_end 
      001E3C 1D 00 03         [ 2] 1706 	subw x,#CELL_SIZE 
      001E3F CF 00 19         [ 2] 1707 	ldw ptr16,x 
      001E42                       1708 	_xpop 
      001E42 90 F6            [ 1]    1     ld a,(y)
      001E44 93               [ 1]    2     ldw x,y 
      001E45 EE 01            [ 2]    3     ldw x,(1,x)
      001E47 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E4B 72 C7 00 19      [ 4] 1709 	ld [ptr16],a 
      001E4F 72 5C 00 1A      [ 1] 1710 	inc ptr8 
      001E53 72 CF 00 19      [ 5] 1711 	ldw [ptr16],x 
      001E57 20 CB            [ 2] 1712 	jra 4$ 
      001E59                       1713 8$:	
      001E59                       1714 	_unget_token 	
      001E59 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001E5E                       1715 	_drop VSIZE 
      001E5E 5B 05            [ 2]    1     addw sp,#VSIZE 
      001E60 CD 1C F9         [ 4] 1716 	call ubound 
      001E63 81               [ 4] 1717 	ret 
                                   1718 
                                   1719 
                                   1720 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1721 ; return program size 
                                   1722 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E64                       1723 prog_size:
      001E64 CE 00 1D         [ 2] 1724 	ldw x,txtend 
      001E67 72 B0 00 1B      [ 2] 1725 	subw x,txtbgn 
      001E6B 81               [ 4] 1726 	ret 
                                   1727 
                                   1728 ;----------------------------
                                   1729 ; print program information 
                                   1730 ;---------------------------
      001E6C                       1731 program_info: 
      001E6C AE 1E AB         [ 2] 1732 	ldw x,#PROG_ADDR 
      001E6F CD 09 5C         [ 4] 1733 	call puts 
      001E72 CE 00 1B         [ 2] 1734 	ldw x,txtbgn 
      001E75 35 10 00 0A      [ 1] 1735 	mov base,#16 
      001E79 CD 18 54         [ 4] 1736 	call prt_i16
      001E7C 35 0A 00 0A      [ 1] 1737 	mov base,#10  
      001E80 AE 1E BD         [ 2] 1738 	ldw x,#PROG_SIZE
      001E83 CD 09 5C         [ 4] 1739 	call puts 
      001E86 CD 1E 64         [ 4] 1740 	call prog_size 
      001E89 CD 18 54         [ 4] 1741 	call prt_i16 
      001E8C AE 1E CE         [ 2] 1742 	ldw x,#STR_BYTES 
      001E8F CD 09 5C         [ 4] 1743 	call puts
      001E92 CE 00 1B         [ 2] 1744 	ldw x,txtbgn
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001E95 A3 38 84         [ 2] 1745 	cpw x,#app 
      001E98 25 05            [ 1] 1746 	jrult 2$
      001E9A AE 1E D5         [ 2] 1747 	ldw x,#FLASH_MEM 
      001E9D 20 03            [ 2] 1748 	jra 3$
      001E9F AE 1E E6         [ 2] 1749 2$: ldw x,#RAM_MEM 	 
      001EA2 CD 09 5C         [ 4] 1750 3$:	call puts 
      001EA5 A6 0D            [ 1] 1751 	ld a,#CR 
      001EA7 CD 08 FF         [ 4] 1752 	call putc
      001EAA 81               [ 4] 1753 	ret 
                                   1754 
      001EAB 70 72 6F 67 72 61 6D  1755 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001EBD 2C 20 70 72 6F 67 72  1756 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001ECE 20 62 79 74 65 73 00  1757 STR_BYTES: .asciz " bytes" 
      001ED5 20 69 6E 20 46 4C 41  1758 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001EE6 20 69 6E 20 52 41 4D  1759 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1760 
                                   1761 
                                   1762 ;----------------------------
                                   1763 ; BASIC: LIST [[start][-end]]
                                   1764 ; list program lines 
                                   1765 ; form start to end 
                                   1766 ; if empty argument list then 
                                   1767 ; list all.
                                   1768 ;----------------------------
                           000001  1769 	FIRST=1
                           000003  1770 	LAST=3 
                           000005  1771 	LN_PTR=5
                           000006  1772 	VSIZE=6 
      001EF5                       1773 cmd_list:
      001EF5 CD 19 C2         [ 4] 1774 	call cmd_line_only
      001EF8 CD 1E 64         [ 4] 1775 	call prog_size 
      001EFB 22 01            [ 1] 1776 	jrugt 3$
      001EFD 81               [ 4] 1777 	ret 
      001EFE                       1778 3$: _vars VSIZE
      001EFE 52 06            [ 2]    1     sub sp,#VSIZE 
      001F00 CE 00 1B         [ 2] 1779 	ldw x,txtbgn 
      001F03 1F 05            [ 2] 1780 	ldw (LN_PTR,sp),x 
      001F05 FE               [ 2] 1781 	ldw x,(x) 
      001F06 1F 01            [ 2] 1782 	ldw (FIRST,sp),x ; list from first line 
      001F08 AE 7F FF         [ 2] 1783 	ldw x,#MAX_LINENO ; biggest line number 
      001F0B 1F 03            [ 2] 1784 	ldw (LAST,sp),x 
      001F0D CD 18 0C         [ 4] 1785 	call next_token 
      001F10 A1 84            [ 1] 1786 	cp a,#TK_INTGR
      001F12 27 0B            [ 1] 1787 	jreq start_from 
      001F14                       1788 is_minus: 	
      001F14 A1 11            [ 1] 1789 	cp a,#TK_MINUS 
      001F16 27 27            [ 1] 1790 	jreq end_at_line
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001F18                       1791 	_unget_token 
      001F18 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001F1D 20 33            [ 2] 1792 	jra list_loop 
      001F1F                       1793 start_from:	 
      001F1F CD 18 3E         [ 4] 1794 	call get_int24
      001F22 1F 01            [ 2] 1795 	ldw (FIRST,sp),x	
      001F24                       1796 lines_skip:
      001F24 90 89            [ 2] 1797 	pushw y 
      001F26 4F               [ 1] 1798 	clr a 
      001F27 CD 0C 45         [ 4] 1799 	call search_lineno 
      001F2A 5D               [ 2] 1800 	tnzw x 
      001F2B 26 01            [ 1] 1801 	jrne 1$
      001F2D 93               [ 1] 1802 	ldw x,y 
      001F2E 90 85            [ 2] 1803 1$:	popw y 
      001F30 1F 05            [ 2] 1804 	ldw (LN_PTR,sp),x 
      001F32 CD 18 0C         [ 4] 1805 	call next_token 
      001F35 A1 11            [ 1] 1806 	cp a,#TK_MINUS 
      001F37 27 06            [ 1] 1807 	jreq end_at_line 
      001F39 1E 01            [ 2] 1808 	ldw x,(FIRST,sp)
      001F3B 1F 03            [ 2] 1809 	ldw (LAST,sp),x 
      001F3D 20 13            [ 2] 1810 	jra list_loop 
      001F3F                       1811 end_at_line:
                                   1812 ; expect ending line# 
      001F3F CD 18 0C         [ 4] 1813     call next_token 
      001F42 A1 84            [ 1] 1814 	cp a,#TK_INTGR
      001F44 27 07            [ 1] 1815 	jreq 1$
      001F46                       1816 	_unget_token 
      001F46 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001F4B 20 05            [ 2] 1817 	jra list_loop
      001F4D                       1818 1$:
      001F4D CD 18 3E         [ 4] 1819 	call get_int24 
      001F50 1F 03            [ 2] 1820 	ldw (LAST,sp),x 
                                   1821 ; print loop
      001F52                       1822 list_loop:
      001F52 1E 05            [ 2] 1823 	ldw x,(LN_PTR,sp)
      001F54 E6 02            [ 1] 1824 	ld a,(2,x) 
      001F56 CD 1F FA         [ 4] 1825 	call prt_basic_line
      001F59 1E 05            [ 2] 1826 	ldw x,(LN_PTR,sp)
      001F5B E6 02            [ 1] 1827 	ld a,(2,x)
      001F5D C7 00 0E         [ 1] 1828 	ld acc8,a 
      001F60 72 5F 00 0D      [ 1] 1829 	clr acc16 
      001F64 72 BB 00 0D      [ 2] 1830 	addw x,acc16
      001F68 C3 00 1D         [ 2] 1831 	cpw x,txtend 
      001F6B 2A 07            [ 1] 1832 	jrpl list_exit
      001F6D 1F 05            [ 2] 1833 	ldw (LN_PTR,sp),x
      001F6F FE               [ 2] 1834 	ldw x,(x)
      001F70 13 03            [ 2] 1835 	cpw x,(LAST,sp)  
      001F72 2D DE            [ 1] 1836 	jrsle list_loop
      001F74                       1837 list_exit:
      001F74 55 00 02 00 01   [ 1] 1838 	mov in,count 
      001F79 AE 16 B8         [ 2] 1839 	ldw x,#pad 
      001F7C CF 00 04         [ 2] 1840 	ldw basicptr,x 
      001F7F                       1841 	_drop VSIZE 
      001F7F 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F81 CD 1E 6C         [ 4] 1842 	call program_info
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001F84 72 0D 00 22 06   [ 2] 1843 	btjf flags,#FLN_REJECTED,9$
      001F89 AE 1F 90         [ 2] 1844 	ldw x,#LINES_REJECTED
      001F8C CD 09 5C         [ 4] 1845 	call puts
      001F8F                       1846 9$: 
      001F8F 81               [ 4] 1847 	ret
      001F90 57 41 52 4E 49 4E 47  1848 LINES_REJECTED: .asciz "WARNING: lines missing in this program.\n"
             3A 20 6C 69 6E 65 73
             20 6D 69 73 73 69 6E
             67 20 69 6E 20 74 68
             69 73 20 70 72 6F 67
             72 61 6D 2E 0A 00
                                   1849 
                                   1850 ;--------------------------
                                   1851 ; BASIC: EDIT label 
                                   1852 ;  copy program in FLASH 
                                   1853 ;  to RAM for edition 
                                   1854 ;-------------------------
      001FB9                       1855 cmd_edit:
      001FB9 CD 19 C2         [ 4] 1856 	call cmd_line_only
      001FBC A6 03            [ 1] 1857 	ld a,#TK_LABEL 
      001FBE CD 19 D8         [ 4] 1858 	call expect  
      001FC1 89               [ 2] 1859 	pushw x 
      001FC2 CD 18 25         [ 4] 1860 	call skip_string
      001FC5 85               [ 2] 1861 	popw x 
      001FC6 CD 32 01         [ 4] 1862 	call search_program 
      001FC9 26 06            [ 1] 1863     jrne 1$ 
      001FCB AE 00 12         [ 2] 1864 	ldw x,#ERR_NO_PROGRAM
      001FCE CC 16 A7         [ 2] 1865 	jp tb_error 
      001FD1 90 89            [ 2] 1866 1$: pushw y 
      001FD3 90 93            [ 1] 1867 	ldw y,x ; source address 
      001FD5 1D 00 04         [ 2] 1868 	subw x,#4
      001FD8 EE 02            [ 2] 1869 	ldw x,(2,x) ; program size 
      001FDA 1C 00 04         [ 2] 1870 	addw x,#4 
      001FDD CF 00 0D         [ 2] 1871 	ldw acc16,x  ; bytes to copy 
      001FE0 AE 00 8C         [ 2] 1872 	ldw x,#rsign ; destination address 
      001FE3 72 A2 00 04      [ 2] 1873 	subw y,#4 
      001FE7 CD 13 C5         [ 4] 1874 	call move  
      001FEA AE 00 90         [ 2] 1875 	ldw x,#free_ram 
      001FED CF 00 1B         [ 2] 1876 	ldw txtbgn,x 
      001FF0 72 BB 00 8E      [ 2] 1877 	addw x,rsize  
      001FF4 CF 00 1D         [ 2] 1878 	ldw txtend,x
      001FF7 90 85            [ 2] 1879 	popw y  
      001FF9 81               [ 4] 1880 	ret 
                                   1881 
                                   1882 ;--------------------------
                                   1883 ; decompile line from token list
                                   1884 ; and print it. 
                                   1885 ; input:
                                   1886 ;   A       stop at this position 
                                   1887 ;   X 		pointer at line
                                   1888 ; output:
                                   1889 ;   none 
                                   1890 ;--------------------------	
      001FFA                       1891 prt_basic_line:
      001FFA 90 89            [ 2] 1892 	pushw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001FFC C7 00 02         [ 1] 1893 	ld count,a 
      001FFF E6 02            [ 1] 1894 	ld a,(2,x)
      002001 C1 00 02         [ 1] 1895 	cp a,count 
      002004 2A 03            [ 1] 1896 	jrpl 1$ 
      002006 C7 00 02         [ 1] 1897 	ld count,a 
      002009 CF 00 04         [ 2] 1898 1$:	ldw basicptr,x 
      00200C 90 AE 16 68      [ 2] 1899 	ldw y,#tib  
      002010 CD 11 B5         [ 4] 1900 	call decompile 
      002013 CD 09 5C         [ 4] 1901 	call puts 
      002016 A6 0D            [ 1] 1902 	ld a,#CR 
      002018 CD 08 FF         [ 4] 1903 	call putc 
      00201B 90 85            [ 2] 1904 	popw y 
      00201D 81               [ 4] 1905 	ret 
                                   1906 
                                   1907 
                                   1908 ;---------------------------------
                                   1909 ; BASIC: PRINT|? arg_list 
                                   1910 ; print values from argument list
                                   1911 ;----------------------------------
                           000001  1912 	CCOMMA=1
                           000001  1913 	VSIZE=1
      00201E                       1914 print:
      00201E                       1915 	_vars VSIZE 
      00201E 52 01            [ 2]    1     sub sp,#VSIZE 
      002020                       1916 reset_comma:
      002020 0F 01            [ 1] 1917 	clr (CCOMMA,sp)
      002022                       1918 prt_loop:
      002022 CD 18 0C         [ 4] 1919 	call next_token
      002025 A1 02            [ 1] 1920 	cp a,#CMD_END 
      002027 25 08            [ 1] 1921 	jrult 0$
      002029 A1 0A            [ 1] 1922 	cp a,#TK_COLON 
      00202B 27 04            [ 1] 1923 	jreq 0$
      00202D A1 80            [ 1] 1924 	cp a,#TK_CMD
      00202F 26 07            [ 1] 1925 	jrne 10$
      002031                       1926 0$:
      002031                       1927 	_unget_token 
      002031 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002036 20 63            [ 2] 1928 	jra 8$ 
      002038                       1929 10$:	
      002038 A1 02            [ 1] 1930 	cp a,#TK_QSTR
      00203A 27 12            [ 1] 1931 	jreq 1$
      00203C A1 04            [ 1] 1932 	cp a,#TK_CHAR 
      00203E 27 1B            [ 1] 1933 	jreq 2$ 
      002040 A1 82            [ 1] 1934 	cp a,#TK_CFUNC 
      002042 27 1F            [ 1] 1935 	jreq 3$
      002044 A1 08            [ 1] 1936 	cp a,#TK_COMMA 
      002046 27 2A            [ 1] 1937 	jreq 4$
      002048 A1 09            [ 1] 1938 	cp a,#TK_SHARP 
      00204A 27 2A            [ 1] 1939 	jreq 5$
      00204C 20 3D            [ 2] 1940 	jra 7$ 
      00204E                       1941 1$:	; print string 
      00204E CD 09 5C         [ 4] 1942 	call puts
      002051 5C               [ 1] 1943 	incw x
      002052 72 B0 00 04      [ 2] 1944 	subw x,basicptr 
      002056 CF 00 00         [ 2] 1945 	ldw in.w,x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002059 20 C5            [ 2] 1946 	jra reset_comma
      00205B                       1947 2$:	; print character 
      00205B CD 18 4E         [ 4] 1948 	call get_char 
      00205E CD 08 FF         [ 4] 1949 	call putc 
      002061 20 BD            [ 2] 1950 	jra reset_comma 
      002063                       1951 3$: ; print character function value  	
      002063                       1952 	_get_code_addr 
      002063 FE               [ 2]    1         ldw x,(x)
      002064 72 5C 00 01      [ 1]    2         inc in 
      002068 72 5C 00 01      [ 1]    3         inc in 
      00206C FD               [ 4] 1953 	call (x)
      00206D CD 08 FF         [ 4] 1954 	call putc
      002070 20 AE            [ 2] 1955 	jra reset_comma 
      002072                       1956 4$: ; set comma state 
      002072 03 01            [ 1] 1957 	cpl (CCOMMA,sp)
      002074 20 AC            [ 2] 1958 	jra prt_loop   
      002076                       1959 5$: ; # character must be followed by an integer   
      002076 CD 18 0C         [ 4] 1960 	call next_token
      002079 A1 84            [ 1] 1961 	cp a,#TK_INTGR 
      00207B 27 03            [ 1] 1962 	jreq 6$
      00207D CC 16 A5         [ 2] 1963 	jp syntax_error 
      002080                       1964 6$: ; set tab width
      002080 CD 18 3E         [ 4] 1965 	call get_int24 
      002083 9F               [ 1] 1966 	ld a,xl 
      002084 A4 0F            [ 1] 1967 	and a,#15 
      002086 C7 00 23         [ 1] 1968 	ld tab_width,a 
      002089 20 95            [ 2] 1969 	jra reset_comma 
      00208B                       1970 7$:	
      00208B                       1971 	_unget_token 
      00208B 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002090 CD 1C 45         [ 4] 1972 	call condition
      002093 4D               [ 1] 1973 	tnz a 
      002094 27 05            [ 1] 1974 	jreq 8$    
      002096 CD 18 79         [ 4] 1975     call print_top
      002099 20 85            [ 2] 1976 	jra reset_comma 
      00209B                       1977 8$:
      00209B 0D 01            [ 1] 1978 	tnz (CCOMMA,sp)
      00209D 26 05            [ 1] 1979 	jrne 9$
      00209F A6 0D            [ 1] 1980 	ld a,#CR 
      0020A1 CD 08 FF         [ 4] 1981     call putc 
      0020A4                       1982 9$:	_drop VSIZE 
      0020A4 5B 01            [ 2]    1     addw sp,#VSIZE 
      0020A6 81               [ 4] 1983 	ret 
                                   1984 
                                   1985 ;----------------------
                                   1986 ; 'save_context' and
                                   1987 ; 'rest_context' must be 
                                   1988 ; called at the same 
                                   1989 ; call stack depth 
                                   1990 ; i.e. SP must have the 
                                   1991 ; save value at  
                                   1992 ; entry point of both 
                                   1993 ; routine. 
                                   1994 ;---------------------
                           000004  1995 	CTXT_SIZE=4 ; size of saved data 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                   1996 ;--------------------
                                   1997 ; save current BASIC
                                   1998 ; interpreter context 
                                   1999 ; on stack 
                                   2000 ;--------------------
      0020A7                       2001 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0020A7                       2002 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      0020A7                       2003 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      0020A7                       2004 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      0020A7                       2005 save_context:
      0020A7 CE 00 04         [ 2] 2006 	ldw x,basicptr 
      0020AA 1F 03            [ 2] 2007 	ldw (BPTR,sp),x
      0020AC C6 00 01         [ 1] 2008 	ld a,in 
      0020AF 6B 05            [ 1] 2009 	ld (IN,sp),a
      0020B1 C6 00 02         [ 1] 2010 	ld a,count 
      0020B4 6B 06            [ 1] 2011 	ld (CNT,sp),a  
      0020B6 81               [ 4] 2012 	ret
                                   2013 
                                   2014 ;-----------------------
                                   2015 ; restore previously saved 
                                   2016 ; BASIC interpreter context 
                                   2017 ; from stack 
                                   2018 ;-------------------------
      0020B7                       2019 rest_context:
      0020B7 1E 03            [ 2] 2020 	ldw x,(BPTR,sp)
      0020B9 CF 00 04         [ 2] 2021 	ldw basicptr,x 
      0020BC 7B 05            [ 1] 2022 	ld a,(IN,sp)
      0020BE C7 00 01         [ 1] 2023 	ld in,a
      0020C1 7B 06            [ 1] 2024 	ld a,(CNT,sp)
      0020C3 C7 00 02         [ 1] 2025 	ld count,a  
      0020C6 81               [ 4] 2026 	ret
                                   2027 
                                   2028 
                                   2029 
                                   2030 ;------------------------------------------
                                   2031 ; BASIC: INPUT [string]var[,[string]var]
                                   2032 ; input value in variables 
                                   2033 ; [string] optionally can be used as prompt 
                                   2034 ;-----------------------------------------
                           000001  2035 	CX_BPTR=1
                           000003  2036 	CX_IN=3
                           000004  2037 	CX_CNT=4
                           000005  2038 	SKIP=5
                           000005  2039 	VSIZE=5
      0020C7                       2040 input_var:
      0020C7 90 89            [ 2] 2041 	pushw y 
      0020C9                       2042 	_vars VSIZE 
      0020C9 52 05            [ 2]    1     sub sp,#VSIZE 
      0020CB                       2043 input_loop:
      0020CB 0F 05            [ 1] 2044 	clr (SKIP,sp)
      0020CD CD 18 0C         [ 4] 2045 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      0020D0 A1 02            [ 1] 2046 	cp a,#TK_QSTR 
      0020D2 26 10            [ 1] 2047 	jrne 1$ 
      0020D4 CD 09 5C         [ 4] 2048 	call puts 
      0020D7 5C               [ 1] 2049 	incw x 
      0020D8 72 B0 00 04      [ 2] 2050 	subw x,basicptr 
      0020DC CF 00 00         [ 2] 2051 	ldw in.w,x 
      0020DF 03 05            [ 1] 2052 	cpl (SKIP,sp)
      0020E1 CD 18 0C         [ 4] 2053 	call next_token 
      0020E4 A1 85            [ 1] 2054 1$: cp a,#TK_VAR  
      0020E6 27 03            [ 1] 2055 	jreq 2$ 
      0020E8 CC 16 A5         [ 2] 2056 	jp syntax_error
      0020EB CD 18 34         [ 4] 2057 2$:	call get_addr
      0020EE CF 00 19         [ 2] 2058 	ldw ptr16,x 
      0020F1 0D 05            [ 1] 2059 	tnz (SKIP,sp)
      0020F3 26 06            [ 1] 2060 	jrne 21$ 
      0020F5 CD 11 AB         [ 4] 2061 	call var_name 
      0020F8 CD 08 FF         [ 4] 2062 	call putc   
      0020FB                       2063 21$:
      0020FB A6 3A            [ 1] 2064 	ld a,#':
      0020FD CD 08 FF         [ 4] 2065 	call putc 
      002100 CD 20 A7         [ 4] 2066 	call save_context 
      002103 72 5F 00 02      [ 1] 2067 	clr count  
      002107 CD 0A 61         [ 4] 2068 	call readln 
      00210A AE 16 68         [ 2] 2069 	ldw x,#tib 
      00210D 3B 00 02         [ 1] 2070 	push count
      002110 4B 00            [ 1] 2071 	push #0 
      002112 72 FB 01         [ 2] 2072 	addw x,(1,sp)
      002115 5C               [ 1] 2073 	incw x 
      002116                       2074 	_drop 2 
      002116 5B 02            [ 2]    1     addw sp,#2 
      002118 72 5F 00 01      [ 1] 2075 	clr in 
      00211C CD 0E F5         [ 4] 2076 	call get_token
      00211F A1 84            [ 1] 2077 	cp a,#TK_INTGR
      002121 27 14            [ 1] 2078 	jreq 3$ 
      002123 A1 11            [ 1] 2079 	cp a,#TK_MINUS
      002125 26 07            [ 1] 2080 	jrne 22$
      002127 CD 0E F5         [ 4] 2081 	call get_token 
      00212A A1 84            [ 1] 2082 	cp a,#TK_INTGR 
      00212C 27 06            [ 1] 2083 	jreq 23$
      00212E                       2084 22$:
      00212E CD 20 B7         [ 4] 2085 	call rest_context 
      002131 CC 16 A5         [ 2] 2086 	jp syntax_error
      002134                       2087 23$:
      002134 CD 02 1D         [ 4] 2088 	call neg_acc24	
      002137                       2089 3$: 
      002137 C6 00 0C         [ 1] 2090 	ld a,acc24 
      00213A CE 00 0D         [ 2] 2091 	ldw x,acc16 
      00213D 72 C7 00 19      [ 4] 2092 	ld [ptr16],a
      002141 72 5C 00 1A      [ 1] 2093 	inc ptr8  
      002145 72 CF 00 19      [ 5] 2094 	ldw [ptr16],x 
      002149 CD 20 B7         [ 4] 2095 	call rest_context
      00214C CD 18 0C         [ 4] 2096 	call next_token 
      00214F A1 08            [ 1] 2097 	cp a,#TK_COMMA
      002151 26 03            [ 1] 2098 	jrne 4$ 
      002153 CC 20 CB         [ 2] 2099 	jp input_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002156                       2100 4$:
      002156 A1 00            [ 1] 2101 	cp a,#TK_NONE 
      002158 27 07            [ 1] 2102 	jreq input_exit  
      00215A A1 0A            [ 1] 2103 	cp a,#TK_COLON 
      00215C 27 03            [ 1] 2104     jreq input_exit 
      00215E CC 16 A5         [ 2] 2105 	jp syntax_error 
      002161                       2106 input_exit:
      002161                       2107 	_drop VSIZE 
      002161 5B 05            [ 2]    1     addw sp,#VSIZE 
      002163 90 85            [ 2] 2108 	popw y 
      002165 81               [ 4] 2109 	ret 
                                   2110 
                                   2111 
                                   2112 ;---------------------
                                   2113 ; BASIC: REM | ' 
                                   2114 ; skip comment to end of line 
                                   2115 ;---------------------- 
      002166                       2116 remark::
      002166 55 00 02 00 01   [ 1] 2117 	mov in,count 
      00216B 81               [ 4] 2118  	ret 
                                   2119 
                                   2120 
                                   2121 ;---------------------
                                   2122 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2123 ; read in loop 'addr'  
                                   2124 ; apply & 'mask' to value 
                                   2125 ; loop while result==0.  
                                   2126 ; 'xor_mask' is used to 
                                   2127 ; invert the wait logic.
                                   2128 ; i.e. loop while not 0.
                                   2129 ;---------------------
                           000001  2130 	XMASK=1 
                           000002  2131 	MASK=2
                           000003  2132 	ADDR=3
                           000004  2133 	VSIZE=4
      00216C                       2134 wait: 
      00216C                       2135 	_vars VSIZE
      00216C 52 04            [ 2]    1     sub sp,#VSIZE 
      00216E 0F 01            [ 1] 2136 	clr (XMASK,sp) 
      002170 CD 19 EA         [ 4] 2137 	call arg_list 
      002173 A1 02            [ 1] 2138 	cp a,#2
      002175 24 03            [ 1] 2139 	jruge 0$
      002177 CC 16 A5         [ 2] 2140 	jp syntax_error 
      00217A A1 03            [ 1] 2141 0$:	cp a,#3
      00217C 25 0C            [ 1] 2142 	jrult 1$
      00217E                       2143 	_xpop  ; xor mask 
      00217E 90 F6            [ 1]    1     ld a,(y)
      002180 93               [ 1]    2     ldw x,y 
      002181 EE 01            [ 2]    3     ldw x,(1,x)
      002183 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002187 9F               [ 1] 2144 	ld a,xl 
      002188 6B 01            [ 1] 2145 	ld (XMASK,sp),a 
      00218A                       2146 1$: _xpop ; mask
      00218A 90 F6            [ 1]    1     ld a,(y)
      00218C 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      00218D EE 01            [ 2]    3     ldw x,(1,x)
      00218F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002193 9F               [ 1] 2147     ld a,xl  
      002194 6B 02            [ 1] 2148 	ld (MASK,sp),a 
      002196                       2149 	_xpop ; address 
      002196 90 F6            [ 1]    1     ld a,(y)
      002198 93               [ 1]    2     ldw x,y 
      002199 EE 01            [ 2]    3     ldw x,(1,x)
      00219B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00219F F6               [ 1] 2150 2$:	ld a,(x)
      0021A0 14 02            [ 1] 2151 	and a,(MASK,sp)
      0021A2 18 01            [ 1] 2152 	xor a,(XMASK,sp)
      0021A4 27 F9            [ 1] 2153 	jreq 2$ 
      0021A6                       2154 	_drop VSIZE 
      0021A6 5B 04            [ 2]    1     addw sp,#VSIZE 
      0021A8 81               [ 4] 2155 	ret 
                                   2156 
                                   2157 ;---------------------
                                   2158 ; BASIC: BSET addr,mask
                                   2159 ; set bits at 'addr' corresponding 
                                   2160 ; to those of 'mask' that are at 1.
                                   2161 ; arguments:
                                   2162 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2163 ;   mask        mask|addr
                                   2164 ; output:
                                   2165 ;	none 
                                   2166 ;--------------------------
      0021A9                       2167 bit_set:
      0021A9 CD 19 EA         [ 4] 2168 	call arg_list 
      0021AC A1 02            [ 1] 2169 	cp a,#2	 
      0021AE 27 03            [ 1] 2170 	jreq 1$ 
      0021B0 CC 16 A5         [ 2] 2171 	jp syntax_error
      0021B3                       2172 1$: 
      0021B3                       2173 	_xpop ; mask 
      0021B3 90 F6            [ 1]    1     ld a,(y)
      0021B5 93               [ 1]    2     ldw x,y 
      0021B6 EE 01            [ 2]    3     ldw x,(1,x)
      0021B8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021BC 9F               [ 1] 2174 	ld a,xl
      0021BD 88               [ 1] 2175 	push a  
      0021BE                       2176 	_xpop ; addr  
      0021BE 90 F6            [ 1]    1     ld a,(y)
      0021C0 93               [ 1]    2     ldw x,y 
      0021C1 EE 01            [ 2]    3     ldw x,(1,x)
      0021C3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021C7 84               [ 1] 2177 	pop a 
      0021C8 FA               [ 1] 2178 	or a,(x)
      0021C9 F7               [ 1] 2179 	ld (x),a
      0021CA 81               [ 4] 2180 	ret 
                                   2181 
                                   2182 ;---------------------
                                   2183 ; BASIC: BRES addr,mask
                                   2184 ; reset bits at 'addr' corresponding 
                                   2185 ; to those of 'mask' that are at 1.
                                   2186 ; arguments:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



                                   2187 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2188 ;   mask	    ~mask&*addr  
                                   2189 ; output:
                                   2190 ;	none 
                                   2191 ;--------------------------
      0021CB                       2192 bit_reset:
      0021CB CD 19 EA         [ 4] 2193 	call arg_list 
      0021CE A1 02            [ 1] 2194 	cp a,#2  
      0021D0 27 03            [ 1] 2195 	jreq 1$ 
      0021D2 CC 16 A5         [ 2] 2196 	jp syntax_error
      0021D5                       2197 1$: 
      0021D5                       2198 	_xpop ; mask 
      0021D5 90 F6            [ 1]    1     ld a,(y)
      0021D7 93               [ 1]    2     ldw x,y 
      0021D8 EE 01            [ 2]    3     ldw x,(1,x)
      0021DA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021DE 9F               [ 1] 2199 	ld a,xl 
      0021DF 43               [ 1] 2200 	cpl a
      0021E0 88               [ 1] 2201 	push a  
      0021E1                       2202 	_xpop ; addr  
      0021E1 90 F6            [ 1]    1     ld a,(y)
      0021E3 93               [ 1]    2     ldw x,y 
      0021E4 EE 01            [ 2]    3     ldw x,(1,x)
      0021E6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021EA 84               [ 1] 2203 	pop a 
      0021EB F4               [ 1] 2204 	and a,(x)
      0021EC F7               [ 1] 2205 	ld (x),a 
      0021ED 81               [ 4] 2206 	ret 
                                   2207 
                                   2208 ;---------------------
                                   2209 ; BASIC: BTOGL addr,mask
                                   2210 ; toggle bits at 'addr' corresponding 
                                   2211 ; to those of 'mask' that are at 1.
                                   2212 ; arguments:
                                   2213 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2214 ;   mask	    mask^*addr  
                                   2215 ; output:
                                   2216 ;	none 
                                   2217 ;--------------------------
      0021EE                       2218 bit_toggle:
      0021EE CD 19 EA         [ 4] 2219 	call arg_list 
      0021F1 A1 02            [ 1] 2220 	cp a,#2 
      0021F3 27 03            [ 1] 2221 	jreq 1$ 
      0021F5 CC 16 A5         [ 2] 2222 	jp syntax_error
      0021F8                       2223 1$: _xpop ; mask 
      0021F8 90 F6            [ 1]    1     ld a,(y)
      0021FA 93               [ 1]    2     ldw x,y 
      0021FB EE 01            [ 2]    3     ldw x,(1,x)
      0021FD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002201 9F               [ 1] 2224 	ld a,xl
      002202 88               [ 1] 2225 	push a 
      002203                       2226 	_xpop  ; addr  
      002203 90 F6            [ 1]    1     ld a,(y)
      002205 93               [ 1]    2     ldw x,y 
      002206 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002208 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00220C 84               [ 1] 2227 	pop a 
      00220D F8               [ 1] 2228 	xor a,(x)
      00220E F7               [ 1] 2229 	ld (x),a 
      00220F 81               [ 4] 2230 	ret 
                                   2231 
                                   2232 
                                   2233 ;---------------------
                                   2234 ; BASIC: BTEST(addr,bit)
                                   2235 ; return bit value at 'addr' 
                                   2236 ; bit is in range {0..7}.
                                   2237 ; arguments:
                                   2238 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2239 ;   bit 	    bit position {0..7}  
                                   2240 ; output:
                                   2241 ;	A:X       bit value  
                                   2242 ;--------------------------
      002210                       2243 bit_test:
      002210 CD 19 E5         [ 4] 2244 	call func_args 
      002213 A1 02            [ 1] 2245 	cp a,#2
      002215 27 03            [ 1] 2246 	jreq 0$
      002217 CC 16 A5         [ 2] 2247 	jp syntax_error
      00221A                       2248 0$:	
      00221A                       2249 	_xpop 
      00221A 90 F6            [ 1]    1     ld a,(y)
      00221C 93               [ 1]    2     ldw x,y 
      00221D EE 01            [ 2]    3     ldw x,(1,x)
      00221F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002223 9F               [ 1] 2250 	ld a,xl 
      002224 A4 07            [ 1] 2251 	and a,#7
      002226 88               [ 1] 2252 	push a   
      002227 A6 01            [ 1] 2253 	ld a,#1 
      002229 0D 01            [ 1] 2254 1$: tnz (1,sp)
      00222B 27 05            [ 1] 2255 	jreq 2$
      00222D 48               [ 1] 2256 	sll a 
      00222E 0A 01            [ 1] 2257 	dec (1,sp)
      002230 20 F7            [ 2] 2258 	jra 1$
      002232 6B 01            [ 1] 2259 2$: ld (1,sp),a  
      002234                       2260 	_xpop ; address  
      002234 90 F6            [ 1]    1     ld a,(y)
      002236 93               [ 1]    2     ldw x,y 
      002237 EE 01            [ 2]    3     ldw x,(1,x)
      002239 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00223D 84               [ 1] 2261 	pop a 
      00223E F4               [ 1] 2262 	and a,(x)
      00223F 27 02            [ 1] 2263 	jreq 3$
      002241 A6 01            [ 1] 2264 	ld a,#1 
      002243 5F               [ 1] 2265 3$:	clrw x 
      002244 97               [ 1] 2266 	ld xl,a
      002245 4F               [ 1] 2267 	clr a  
      002246 81               [ 4] 2268 	ret
                                   2269 
                                   2270 ;--------------------
                                   2271 ; BASIC: POKE addr,byte
                                   2272 ; put a byte at addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                                   2273 ;--------------------
      002247                       2274 poke:
      002247 CD 19 EA         [ 4] 2275 	call arg_list 
      00224A A1 02            [ 1] 2276 	cp a,#2
      00224C 27 03            [ 1] 2277 	jreq 1$
      00224E CC 16 A5         [ 2] 2278 	jp syntax_error
      002251                       2279 1$:	
      002251                       2280 	_xpop ; byte   
      002251 90 F6            [ 1]    1     ld a,(y)
      002253 93               [ 1]    2     ldw x,y 
      002254 EE 01            [ 2]    3     ldw x,(1,x)
      002256 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00225A 9F               [ 1] 2281     ld a,xl 
      00225B 88               [ 1] 2282 	push a 
      00225C                       2283 	_xpop ; address 
      00225C 90 F6            [ 1]    1     ld a,(y)
      00225E 93               [ 1]    2     ldw x,y 
      00225F EE 01            [ 2]    3     ldw x,(1,x)
      002261 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002265 84               [ 1] 2284 	pop a 
      002266 F7               [ 1] 2285 	ld (x),a 
      002267 81               [ 4] 2286 	ret 
                                   2287 
                                   2288 ;-----------------------
                                   2289 ; BASIC: PEEK(addr)
                                   2290 ; get the byte at addr 
                                   2291 ; input:
                                   2292 ;	none 
                                   2293 ; output:
                                   2294 ;	X 		value 
                                   2295 ;-----------------------
      002268                       2296 peek:
      002268 CD 19 E5         [ 4] 2297 	call func_args
      00226B A1 01            [ 1] 2298 	cp a,#1 
      00226D 27 03            [ 1] 2299 	jreq 1$
      00226F CC 16 A5         [ 2] 2300 	jp syntax_error
      002272                       2301 1$: _xpop ; address  
      002272 90 F6            [ 1]    1     ld a,(y)
      002274 93               [ 1]    2     ldw x,y 
      002275 EE 01            [ 2]    3     ldw x,(1,x)
      002277 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00227B C7 00 18         [ 1] 2302 	ld farptr,a 
      00227E CF 00 19         [ 2] 2303 	ldw ptr16,x 
      002281 92 BC 00 18      [ 5] 2304 	ldf a,[farptr]
      002285 5F               [ 1] 2305 	clrw x 
      002286 97               [ 1] 2306 	ld xl,a 
      002287 4F               [ 1] 2307 	clr a 
      002288 81               [ 4] 2308 	ret 
                                   2309 
                                   2310 ;---------------------------
                                   2311 ; BASIC IF expr : instructions
                                   2312 ; evaluate expr and if true 
                                   2313 ; execute instructions on same line. 
                                   2314 ;----------------------------
      002289                       2315 if: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002289 CD 1C 45         [ 4] 2316 	call condition  
      00228C                       2317 	_xpop 
      00228C 90 F6            [ 1]    1     ld a,(y)
      00228E 93               [ 1]    2     ldw x,y 
      00228F EE 01            [ 2]    3     ldw x,(1,x)
      002291 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002295 4D               [ 1] 2318 	tnz  a  
      002296 26 0D            [ 1] 2319 	jrne 9$
      002298 5D               [ 2] 2320 	tnzw x 
      002299 26 0A            [ 1] 2321 	jrne 9$  
                                   2322 ;skip to next line
      00229B 55 00 02 00 01   [ 1] 2323 	mov in,count
      0022A0                       2324 	_drop 2 
      0022A0 5B 02            [ 2]    1     addw sp,#2 
      0022A2 CC 17 58         [ 2] 2325 	jp next_line
      0022A5 81               [ 4] 2326 9$:	ret 
                                   2327 
                                   2328 ;------------------------
                                   2329 ; BASIC: FOR var=expr 
                                   2330 ; set variable to expression 
                                   2331 ; leave variable address 
                                   2332 ; on stack and set
                                   2333 ; FLOOP bit in 'flags'
                                   2334 ;-----------------
                           000001  2335 	RETL1=1 ; return address  
                           000003  2336 	FSTEP=3  ; variable increment int24
                           000006  2337 	LIMIT=6 ; loop limit, int24  
                           000009  2338 	CVAR=9   ; control variable 
                           00000B  2339 	INW=11   ;  in.w saved
                           00000D  2340 	BPTR=13 ; baseptr saved
                           00000D  2341 	VSIZE=13  
      0022A6                       2342 for: ; { -- var_addr }
      0022A6 85               [ 2] 2343 	popw x ; call return address 
      0022A7                       2344 	_vars VSIZE 
      0022A7 52 0D            [ 2]    1     sub sp,#VSIZE 
      0022A9 89               [ 2] 2345 	pushw x  ; RETL1 
      0022AA A6 85            [ 1] 2346 	ld a,#TK_VAR 
      0022AC CD 19 D8         [ 4] 2347 	call expect
      0022AF CD 18 34         [ 4] 2348 	call get_addr
      0022B2 1F 09            [ 2] 2349 	ldw (CVAR,sp),x  ; control variable 
      0022B4 CD 1D 1A         [ 4] 2350 	call let_eval 
      0022B7 72 14 00 22      [ 1] 2351 	bset flags,#FLOOP 
      0022BB CD 18 0C         [ 4] 2352 	call next_token 
      0022BE A1 80            [ 1] 2353 	cp a,#TK_CMD 
      0022C0 27 03            [ 1] 2354 	jreq 1$
      0022C2 CC 16 A5         [ 2] 2355 	jp syntax_error
      0022C5                       2356 1$:  
      0022C5                       2357 	_get_code_addr
      0022C5 FE               [ 2]    1         ldw x,(x)
      0022C6 72 5C 00 01      [ 1]    2         inc in 
      0022CA 72 5C 00 01      [ 1]    3         inc in 
      0022CE A3 22 D6         [ 2] 2358 	cpw x,#to   
      0022D1 27 03            [ 1] 2359 	jreq to
      0022D3 CC 16 A5         [ 2] 2360 	jp syntax_error 
                                   2361 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



                                   2362 ;-----------------------------------
                                   2363 ; BASIC: TO expr 
                                   2364 ; second part of FOR loop initilization
                                   2365 ; leave limit on stack and set 
                                   2366 ; FTO bit in 'flags'
                                   2367 ;-----------------------------------
      0022D6                       2368 to: ; { var_addr -- var_addr limit step }
      0022D6 72 04 00 22 03   [ 2] 2369 	btjt flags,#FLOOP,1$
      0022DB CC 16 A5         [ 2] 2370 	jp syntax_error
      0022DE CD 1B 2C         [ 4] 2371 1$: call expression   
      0022E1 A1 84            [ 1] 2372 	cp a,#TK_INTGR 
      0022E3 27 03            [ 1] 2373 	jreq 2$ 
      0022E5 CC 16 A5         [ 2] 2374 	jp syntax_error
      0022E8                       2375 2$: _xpop
      0022E8 90 F6            [ 1]    1     ld a,(y)
      0022EA 93               [ 1]    2     ldw x,y 
      0022EB EE 01            [ 2]    3     ldw x,(1,x)
      0022ED 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022F1 6B 06            [ 1] 2376 	ld (LIMIT,sp),a 
      0022F3 1F 07            [ 2] 2377 	ldw (LIMIT+1,sp),x
      0022F5 CD 18 0C         [ 4] 2378 	call next_token
      0022F8 A1 00            [ 1] 2379 	cp a,#TK_NONE  
      0022FA 27 17            [ 1] 2380 	jreq 4$ 
      0022FC A1 80            [ 1] 2381 	cp a,#TK_CMD
      0022FE 26 0E            [ 1] 2382 	jrne 3$
      002300                       2383 	_get_code_addr
      002300 FE               [ 2]    1         ldw x,(x)
      002301 72 5C 00 01      [ 1]    2         inc in 
      002305 72 5C 00 01      [ 1]    3         inc in 
      002309 A3 23 1C         [ 2] 2384 	cpw x,#step 
      00230C 27 0E            [ 1] 2385 	jreq step
      00230E                       2386 3$:	
      00230E                       2387 	_unget_token   	 
      00230E 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002313                       2388 4$:	
      002313 0F 03            [ 1] 2389 	clr (FSTEP,sp) 
      002315 AE 00 01         [ 2] 2390 	ldw x,#1   ; default step  
      002318 1F 04            [ 2] 2391 	ldw (FSTEP+1,sp),x 
      00231A 20 2F            [ 2] 2392 	jra store_loop_addr 
                                   2393 
                                   2394 
                                   2395 ;----------------------------------
                                   2396 ; BASIC: STEP expr 
                                   2397 ; optional third par of FOR loop
                                   2398 ; initialization. 	
                                   2399 ;------------------------------------
      00231C                       2400 step: ; {var limit -- var limit step}
      00231C 72 04 00 22 03   [ 2] 2401 	btjt flags,#FLOOP,1$
      002321 CC 16 A5         [ 2] 2402 	jp syntax_error
      002324 CD 1B 2C         [ 4] 2403 1$: call expression 
      002327 A1 84            [ 1] 2404 	cp a,#TK_INTGR
      002329 27 03            [ 1] 2405 	jreq 2$
      00232B CC 16 A5         [ 2] 2406 	jp syntax_error
      00232E                       2407 2$:	
      00232E                       2408 	_xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      00232E 90 F6            [ 1]    1     ld a,(y)
      002330 93               [ 1]    2     ldw x,y 
      002331 EE 01            [ 2]    3     ldw x,(1,x)
      002333 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002337 6B 03            [ 1] 2409 	ld (FSTEP,sp),a 
      002339 1F 04            [ 2] 2410 	ldw (FSTEP+1,sp),x ; step
                                   2411 ; if step < 0 decrement LIMIT 
      00233B 4D               [ 1] 2412 	tnz a
      00233C 2A 0D            [ 1] 2413 	jrpl store_loop_addr 
      00233E 7B 06            [ 1] 2414 	ld a,(LIMIT,sp)
      002340 1E 07            [ 2] 2415 	ldw x,(LIMIT+1,sp)
      002342 1D 00 01         [ 2] 2416 	subw x,#1 
      002345 A2 00            [ 1] 2417 	sbc a,#0 
      002347 6B 06            [ 1] 2418 	ld (LIMIT,sp),a 
      002349 1F 07            [ 2] 2419 	ldw (LIMIT+1,sp),x 
                                   2420 ; leave loop back entry point on cstack 
                                   2421 ; cstack is 1 call deep from interpreter
      00234B                       2422 store_loop_addr:
      00234B CE 00 04         [ 2] 2423 	ldw x,basicptr
      00234E 1F 0D            [ 2] 2424 	ldw (BPTR,sp),x 
      002350 CE 00 00         [ 2] 2425 	ldw x,in.w 
      002353 1F 0B            [ 2] 2426 	ldw (INW,sp),x   
      002355 72 15 00 22      [ 1] 2427 	bres flags,#FLOOP 
      002359 72 5C 00 1F      [ 1] 2428 	inc loop_depth  
      00235D 81               [ 4] 2429 	ret 
                                   2430 
                                   2431 ;--------------------------------
                                   2432 ; BASIC: NEXT var 
                                   2433 ; FOR loop control 
                                   2434 ; increment variable with step 
                                   2435 ; and compare with limit 
                                   2436 ; loop if threshold not crossed.
                                   2437 ; else stack. 
                                   2438 ; and decrement 'loop_depth' 
                                   2439 ;--------------------------------
      00235E                       2440 next: ; {var limit step retl1 -- [var limit step ] }
      00235E 72 5D 00 1F      [ 1] 2441 	tnz loop_depth 
      002362 26 03            [ 1] 2442 	jrne 1$ 
      002364 CC 16 A5         [ 2] 2443 	jp syntax_error 
      002367                       2444 1$: 
      002367 A6 85            [ 1] 2445 	ld a,#TK_VAR 
      002369 CD 19 D8         [ 4] 2446 	call expect
      00236C CD 18 34         [ 4] 2447 	call get_addr 
                                   2448 ; check for good variable after NEXT 	 
      00236F 13 09            [ 2] 2449 	cpw x,(CVAR,sp)
      002371 27 03            [ 1] 2450 	jreq 2$  
      002373 CC 16 A5         [ 2] 2451 	jp syntax_error ; not the good one 
      002376                       2452 2$: 
      002376 CF 00 19         [ 2] 2453 	ldw ptr16,x 
                                   2454 	; increment variable 
      002379 F6               [ 1] 2455 	ld a,(x)
      00237A EE 01            [ 2] 2456 	ldw x,(1,x)  ; get var value 
      00237C 72 FB 04         [ 2] 2457 	addw x,(FSTEP+1,sp) ; var+step 
      00237F 19 03            [ 1] 2458 	adc a,(FSTEP,sp)
      002381 72 C7 00 19      [ 4] 2459 	ld [ptr16],a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002385 72 5C 00 1A      [ 1] 2460 	inc ptr8  
      002389 72 CF 00 19      [ 5] 2461 	ldw [ptr16],x 
      00238D C7 00 0C         [ 1] 2462 	ld acc24,a 
      002390 CF 00 0D         [ 2] 2463 	ldw acc16,x 
      002393 7B 06            [ 1] 2464 	ld a,(LIMIT,sp)
      002395 1E 07            [ 2] 2465 	ldw x,(LIMIT+1,sp)
      002397 72 B0 00 0D      [ 2] 2466 	subw x,acc16 
      00239B C2 00 0C         [ 1] 2467 	sbc a,acc24
      00239E 18 03            [ 1] 2468 	xor a,(FSTEP,sp)
      0023A0 A8 80            [ 1] 2469 	xor a,#0x80
      0023A2 2B 12            [ 1] 2470 	jrmi loop_back  
      0023A4 20 25            [ 2] 2471 	jra loop_done   
                                   2472 ; check sign of STEP  
      0023A6 7B 03            [ 1] 2473 	ld a,(FSTEP,sp)
      0023A8 2A 07            [ 1] 2474 	jrpl 4$
                                   2475 ;negative step
      0023AA C6 00 0E         [ 1] 2476     ld a,acc8 
      0023AD 2F 07            [ 1] 2477 	jrslt loop_back   
      0023AF 20 1A            [ 2] 2478 	jra loop_done  
      0023B1                       2479 4$: ; positive step
      0023B1 72 0E 00 0E 15   [ 2] 2480 	btjt acc8,#7,loop_done 
      0023B6                       2481 loop_back:
      0023B6 1E 0D            [ 2] 2482 	ldw x,(BPTR,sp)
      0023B8 CF 00 04         [ 2] 2483 	ldw basicptr,x 
      0023BB 72 01 00 22 05   [ 2] 2484 	btjf flags,#FRUN,1$ 
      0023C0 E6 02            [ 1] 2485 	ld a,(2,x)
      0023C2 C7 00 02         [ 1] 2486 	ld count,a
      0023C5 1E 0B            [ 2] 2487 1$:	ldw x,(INW,sp)
      0023C7 CF 00 00         [ 2] 2488 	ldw in.w,x 
      0023CA 81               [ 4] 2489 	ret 
      0023CB                       2490 loop_done:
                                   2491 	; remove loop data from stack  
      0023CB 85               [ 2] 2492 	popw x
      0023CC                       2493 	_drop VSIZE 
      0023CC 5B 0D            [ 2]    1     addw sp,#VSIZE 
      0023CE 72 5A 00 1F      [ 1] 2494 	dec loop_depth 
      0023D2 FC               [ 2] 2495 	jp (x)
                                   2496 
                                   2497 ;----------------------------
                                   2498 ; called by goto/gosub
                                   2499 ; to get target line number 
                                   2500 ; output:
                                   2501 ;    x    line address 
                                   2502 ;---------------------------
      0023D3                       2503 get_target_line:
      0023D3 CD 18 0C         [ 4] 2504 	call next_token  
      0023D6 A1 84            [ 1] 2505 	cp a,#TK_INTGR
      0023D8 27 07            [ 1] 2506 	jreq get_target_line_addr 
      0023DA A1 03            [ 1] 2507 	cp a,#TK_LABEL 
      0023DC 27 26            [ 1] 2508 	jreq look_target_symbol 
      0023DE CC 16 A5         [ 2] 2509 	jp syntax_error
                                   2510 ; the target is a line number 
                                   2511 ; search it. 
      0023E1                       2512 get_target_line_addr:
      0023E1 90 89            [ 2] 2513 	pushw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0023E3 CD 18 3E         [ 4] 2514 	call get_int24 ; line # 
      0023E6 4F               [ 1] 2515 	clr a
      0023E7 90 CE 00 04      [ 2] 2516 	ldw y,basicptr 
      0023EB 90 FE            [ 2] 2517 	ldw y,(y)
      0023ED 90 89            [ 2] 2518 	pushw y 
      0023EF 13 01            [ 2] 2519 	cpw x,(1,sp)
      0023F1                       2520 	_drop 2  
      0023F1 5B 02            [ 2]    1     addw sp,#2 
      0023F3 25 01            [ 1] 2521 	jrult 11$
      0023F5 4C               [ 1] 2522 	inc a 
      0023F6                       2523 11$: ; scan program for this line# 	
      0023F6 CD 0C 45         [ 4] 2524 	call search_lineno  
      0023F9 5D               [ 2] 2525 	tnzw x ; 0| line# address 
      0023FA 26 05            [ 1] 2526 	jrne 2$ 
      0023FC A6 05            [ 1] 2527 	ld a,#ERR_NO_LINE 
      0023FE CC 16 A7         [ 2] 2528 	jp tb_error 
      002401 90 85            [ 2] 2529 2$:	popw y  
      002403 81               [ 4] 2530 	ret 
                                   2531 
                                   2532 ; the GOTO|GOSUB target is a symbol.
                                   2533 ; output:
                                   2534 ;    X    line address|0 
      002404                       2535 look_target_symbol:
      002404 90 89            [ 2] 2536 	pushw y 
      002406 89               [ 2] 2537 	pushw x 
      002407 CD 18 25         [ 4] 2538 	call skip_string 
      00240A 72 5F 00 0D      [ 1] 2539 	clr acc16 
      00240E 90 CE 00 1B      [ 2] 2540 	ldw y,txtbgn 
      002412 90 E6 03         [ 1] 2541 1$:	ld a,(3,y) ; first TK_ID on line 
      002415 A1 03            [ 1] 2542 	cp a,#TK_LABEL 
      002417 27 15            [ 1] 2543 	jreq 3$ 
      002419 90 E6 02         [ 1] 2544 2$:	ld a,(2,y); line length 
      00241C C7 00 0E         [ 1] 2545 	ld acc8,a 
      00241F 72 B9 00 0D      [ 2] 2546 	addw y,acc16 ;point to next line 
      002423 90 C3 00 1D      [ 2] 2547 	cpw y,txtend 
      002427 25 E9            [ 1] 2548 	jrult 1$
      002429 A6 0A            [ 1] 2549 	ld a,#ERR_BAD_VALUE
      00242B CC 16 A7         [ 2] 2550 	jp tb_error 
      00242E                       2551 3$: ; found a TK_LABEL 
                                   2552 	; compare with GOTO|GOSUB target 
      00242E 90 89            [ 2] 2553 	pushw y ; line address 
      002430 72 A9 00 04      [ 2] 2554 	addw y,#4 ; label string 
      002434 1E 03            [ 2] 2555 	ldw x,(3,sp) ; target string 
      002436 CD 13 A4         [ 4] 2556 	call strcmp
      002439 26 04            [ 1] 2557 	jrne 4$
      00243B 90 85            [ 2] 2558 	popw y 
      00243D 20 DA            [ 2] 2559 	jra 2$ 
      00243F                       2560 4$: ; target found 
      00243F 85               [ 2] 2561 	popw x ;  address line target  
      002440                       2562 	_drop 2 ; target string 
      002440 5B 02            [ 2]    1     addw sp,#2 
      002442 90 85            [ 2] 2563 	popw y 
      002444 81               [ 4] 2564 	ret
                                   2565 
                                   2566 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



                                   2567 ;--------------------------------
                                   2568 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2569 ; selective goto or gosub 
                                   2570 ;--------------------------------
      002445                       2571 cmd_on:
      002445 CD 19 CD         [ 4] 2572 	call runtime_only
      002448 CD 1B 2C         [ 4] 2573 0$:	call expression 
      00244B A1 84            [ 1] 2574 	cp a,#TK_INTGR
      00244D 27 03            [ 1] 2575 	jreq 1$
      00244F CC 16 A5         [ 2] 2576 	jp syntax_error
      002452                       2577 1$: _xpop
      002452 90 F6            [ 1]    1     ld a,(y)
      002454 93               [ 1]    2     ldw x,y 
      002455 EE 01            [ 2]    3     ldw x,(1,x)
      002457 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2578 ; the selector is the element indice 
                                   2579 ; in the list of arguments. {1..#elements} 
      00245B 9F               [ 1] 2580 	ld a,xl ; keep only bits 7..0
      00245C 27 68            [ 1] 2581 	jreq 9$ ; element # begin at 1. 
      00245E 88               [ 1] 2582 	push a  ; selector  
      00245F CD 18 0C         [ 4] 2583 	call next_token
      002462 A1 80            [ 1] 2584 	cp a,#TK_CMD 
      002464 27 03            [ 1] 2585 	jreq 2$ 
      002466 CC 16 A5         [ 2] 2586 	jp syntax_error 
      002469                       2587 2$: _get_code_addr
      002469 FE               [ 2]    1         ldw x,(x)
      00246A 72 5C 00 01      [ 1]    2         inc in 
      00246E 72 5C 00 01      [ 1]    3         inc in 
                                   2588 ;; must be a GOTO or GOSUB 
      002472 A3 24 D0         [ 2] 2589 	cpw x,#goto 
      002475 27 08            [ 1] 2590 	jreq 4$
      002477 A3 24 E3         [ 2] 2591 	cpw x,#gosub 
      00247A 27 03            [ 1] 2592 	jreq 4$ 
      00247C CC 16 A5         [ 2] 2593 	jp syntax_error 
      00247F                       2594 4$: 
      00247F 84               [ 1] 2595 	pop a 
      002480 89               [ 2] 2596 	pushw x ; save routine address 	
      002481 88               [ 1] 2597 	push a  ; selector  
      002482                       2598 5$: ; skip elements in list until selector==0 
      002482 0A 01            [ 1] 2599 	dec (1,sp)
      002484 27 26            [ 1] 2600 	jreq 6$ 
                                   2601 ; can be a line# or a label 
      002486 CD 18 0C         [ 4] 2602 	call next_token 
      002489 A1 84            [ 1] 2603 	cp a,#TK_INTGR 
      00248B 27 07            [ 1] 2604 	jreq 52$
      00248D A1 03            [ 1] 2605 	cp a,#TK_LABEL 
      00248F 27 0D            [ 1] 2606 	jreq 54$
      002491 CC 16 A5         [ 2] 2607 	jp syntax_error 
      002494                       2608 52$: ; got a line number 
      002494 C6 00 01         [ 1] 2609 	ld a,in ; skip over int24 value 
      002497 AB 03            [ 1] 2610 	add a,#CELL_SIZE ; integer size  
      002499 C7 00 01         [ 1] 2611 	ld in,a 
      00249C 20 03            [ 2] 2612 	jra 56$
      00249E CD 18 25         [ 4] 2613 54$: call skip_string ; skip over label 	
      0024A1                       2614 56$: ; if another element comma present 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      0024A1 CD 18 0C         [ 4] 2615 	call next_token
      0024A4 A1 08            [ 1] 2616 	cp a,#TK_COMMA 
      0024A6 27 DA            [ 1] 2617 	jreq 5$ 
                                   2618 ; arg list exhausted, selector to big 
                                   2619 ; continue execution on next line 
      0024A8                       2620 	_drop 3 ; drop selector and GOTO|GOSUB address 
      0024A8 5B 03            [ 2]    1     addw sp,#3 
      0024AA 20 1A            [ 2] 2621 	jra 9$
      0024AC                       2622 6$: ;at selected position  
      0024AC                       2623 	_drop 1 ; discard selector
      0024AC 5B 01            [ 2]    1     addw sp,#1 
                                   2624 ; here only the routine address 
                                   2625 ; of GOTO|GOSUB is on stack 
      0024AE CD 23 D3         [ 4] 2626     call get_target_line
      0024B1 CF 00 19         [ 2] 2627 	ldw ptr16,x 	
      0024B4 55 00 02 00 01   [ 1] 2628 	mov in,count ; move to end of line  
      0024B9 85               [ 2] 2629 	popw x ; cmd address, GOTO||GOSUB 
      0024BA A3 24 D0         [ 2] 2630 	cpw x,#goto 
      0024BD 26 05            [ 1] 2631 	jrne 7$ 
      0024BF CE 00 19         [ 2] 2632 	ldw x,ptr16 
      0024C2 20 12            [ 2] 2633 	jra jp_to_target
      0024C4                       2634 7$: 
      0024C4 20 26            [ 2] 2635 	jra gosub_2 ; target in ptr16 
      0024C6                       2636 9$: ; expr out of range skip to end of line
                                   2637     ; this will force a fall to next line  
      0024C6 55 00 02 00 01   [ 1] 2638 	mov in,count
      0024CB                       2639 	_drop 2
      0024CB 5B 02            [ 2]    1     addw sp,#2 
      0024CD CC 17 58         [ 2] 2640 	jp next_line  
                                   2641 
                                   2642 
                                   2643 ;------------------------
                                   2644 ; BASIC: GOTO line# 
                                   2645 ; jump to line# 
                                   2646 ; here cstack is 2 call deep from interpreter 
                                   2647 ;------------------------
      0024D0                       2648 goto:
      0024D0 CD 19 CD         [ 4] 2649 	call runtime_only
      0024D3                       2650 goto_1:
      0024D3 CD 23 D3         [ 4] 2651 	call get_target_line
      0024D6                       2652 jp_to_target:
      0024D6 CF 00 04         [ 2] 2653 	ldw basicptr,x 
      0024D9 E6 02            [ 1] 2654 	ld a,(2,x)
      0024DB C7 00 02         [ 1] 2655 	ld count,a 
      0024DE 35 03 00 01      [ 1] 2656 	mov in,#3 
      0024E2 81               [ 4] 2657 	ret 
                                   2658 
                                   2659 
                                   2660 ;--------------------
                                   2661 ; BASIC: GOSUB line#
                                   2662 ; basic subroutine call
                                   2663 ; actual line# and basicptr 
                                   2664 ; are saved on cstack
                                   2665 ; here cstack is 2 call deep from interpreter 
                                   2666 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



                           000001  2667 	RET_ADDR=1 ; subroutine return address 
                           000003  2668 	RET_BPTR=3 ; basicptr return point 
                           000005  2669 	RET_INW=5  ; in.w return point 
                           000004  2670 	VSIZE=4 
      0024E3                       2671 gosub:
      0024E3 CD 19 CD         [ 4] 2672 	call runtime_only
      0024E6                       2673 gosub_1:
      0024E6 CD 23 D3         [ 4] 2674 	call get_target_line 
      0024E9 CF 00 19         [ 2] 2675 	ldw ptr16,x
      0024EC                       2676 gosub_2: 
      0024EC 85               [ 2] 2677 	popw x 
      0024ED                       2678 	_vars VSIZE  
      0024ED 52 04            [ 2]    1     sub sp,#VSIZE 
      0024EF 89               [ 2] 2679 	pushw x ; RET_ADDR 
                                   2680 ; save BASIC subroutine return point.   
      0024F0 CE 00 04         [ 2] 2681 	ldw x,basicptr
      0024F3 1F 03            [ 2] 2682 	ldw (RET_BPTR,sp),x 
      0024F5 CE 00 00         [ 2] 2683 	ldw x,in.w 
      0024F8 1F 05            [ 2] 2684 	ldw (RET_INW,sp),x
      0024FA CE 00 19         [ 2] 2685 	ldw x,ptr16  
      0024FD 20 D7            [ 2] 2686 	jra jp_to_target
                                   2687 
                                   2688 ;------------------------
                                   2689 ; BASIC: RETURN 
                                   2690 ; exit from BASIC subroutine 
                                   2691 ;------------------------
      0024FF                       2692 return:
      0024FF CD 19 CD         [ 4] 2693 	call runtime_only
      002502 1E 03            [ 2] 2694 	ldw x,(RET_BPTR,sp) 
      002504 CF 00 04         [ 2] 2695 	ldw basicptr,x
      002507 E6 02            [ 1] 2696 	ld a,(2,x)
      002509 C7 00 02         [ 1] 2697 	ld count,a  
      00250C 1E 05            [ 2] 2698 	ldw x,(RET_INW,sp)
      00250E CF 00 00         [ 2] 2699 	ldw in.w,x 
      002511 85               [ 2] 2700 	popw x 
      002512                       2701 	_drop VSIZE 
      002512 5B 04            [ 2]    1     addw sp,#VSIZE 
      002514 FC               [ 2] 2702 	jp (x)
                                   2703 
                                   2704 ;---------------------------------
                                   2705 ; check if A:X contain the address 
                                   2706 ; of a program in FLASH 
                                   2707 ; output:
                                   2708 ;     Z    set is progam 
                                   2709 ;----------------------------------
      002515                       2710 is_program_addr:
      002515 4D               [ 1] 2711 	tnz a 
      002516 26 0D            [ 1] 2712 	jrne 9$
      002518 A3 38 80         [ 2] 2713 	cpw x,#app_space 
      00251B 25 07            [ 1] 2714 	jrult 8$
      00251D 89               [ 2] 2715 	pushw x 
      00251E CD 28 A6         [ 4] 2716 	call qsign 
      002521 85               [ 2] 2717 	popw x 
      002522 27 01            [ 1] 2718 	jreq 9$ 
      002524 43               [ 1] 2719 8$:	cpl a ; clr Z bit  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      002525 81               [ 4] 2720 9$:	ret 
                                   2721 
                                   2722 ;----------------------------------
                                   2723 ; BASIC: RUN [label]
                                   2724 ; run BASIC program in RAM
                                   2725 ;----------------------------------- 
      002526                       2726 cmd_run: 
      002526 72 01 00 22 02   [ 2] 2727 	btjf flags,#FRUN,0$  
      00252B 4F               [ 1] 2728 	clr a 
      00252C 81               [ 4] 2729 	ret
      00252D                       2730 0$: ; check for STOP condition 
      00252D 72 09 00 22 12   [ 2] 2731 	btjf flags,#FBREAK,1$
      002532                       2732 	_drop 2 
      002532 5B 02            [ 2]    1     addw sp,#2 
      002534 CD 20 B7         [ 4] 2733 	call rest_context
      002537                       2734 	_drop CTXT_SIZE 
      002537 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      002539 72 19 00 22      [ 1] 2735 	bres flags,#FBREAK 
      00253D 72 10 00 22      [ 1] 2736 	bset flags,#FRUN 
      002541 CC 17 50         [ 2] 2737 	jp interpreter 
      002544                       2738 1$:	; check for label option 
      002544 CD 18 0C         [ 4] 2739 	call next_token 
      002547 A1 03            [ 1] 2740 	cp a,#TK_LABEL 
      002549 26 1F            [ 1] 2741 	jrne 3$
      00254B 89               [ 2] 2742 	pushw x 
      00254C CD 18 25         [ 4] 2743 	call skip_string 
      00254F 85               [ 2] 2744 	popw x  
      002550 CD 32 01         [ 4] 2745 	call search_program
      002553 26 05            [ 1] 2746 	jrne 2$
      002555 A6 12            [ 1] 2747 	ld a,#ERR_NO_PROGRAM
      002557 CC 16 A7         [ 2] 2748 	jp tb_error 
      00255A CF 00 1B         [ 2] 2749 2$: ldw txtbgn,x 
      00255D 1D 00 02         [ 2] 2750 	subw x,#2 
      002560 FE               [ 2] 2751 	ldw x,(x)
      002561 72 BB 00 1B      [ 2] 2752 	addw x,txtbgn 
      002565 CF 00 1D         [ 2] 2753 	ldw txtend,x 
      002568 20 19            [ 2] 2754 	jra run_it 	
      00256A                       2755 3$:	_unget_token 
      00256A 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      00256F CE 00 1B         [ 2] 2756 	ldw x,txtbgn
      002572 C3 00 1D         [ 2] 2757 	cpw x,txtend 
      002575 2B 0C            [ 1] 2758 	jrmi run_it 
      002577 AE 15 FC         [ 2] 2759 	ldw x,#err_no_prog
      00257A CD 09 5C         [ 4] 2760 	call puts 
      00257D 55 00 02 00 01   [ 1] 2761 	mov in,count
      002582 81               [ 4] 2762 	ret 
      002583                       2763 run_it:	 
      002583                       2764 	_drop 2 ; drop return address 
      002583 5B 02            [ 2]    1     addw sp,#2 
      002585                       2765 run_it_02: 
      002585 CD 1C F9         [ 4] 2766     call ubound 
      002588 CD 14 09         [ 4] 2767 	call clear_vars
                                   2768 ; initialize DIM variables pointers 
      00258B CE 00 1D         [ 2] 2769 	ldw x,txtend 
      00258E CF 00 30         [ 2] 2770 	ldw dvar_bgn,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      002591 CF 00 32         [ 2] 2771 	ldw dvar_end,x 	 
                                   2772 ; clear data pointer 
      002594 5F               [ 1] 2773 	clrw x 
      002595 CF 00 06         [ 2] 2774 	ldw data_ptr,x 
      002598 72 5F 00 08      [ 1] 2775 	clr data_ofs 
      00259C 72 5F 00 09      [ 1] 2776 	clr data_len 
                                   2777 ; initialize BASIC pointer 
      0025A0 CE 00 1B         [ 2] 2778 	ldw x,txtbgn 
      0025A3 CF 00 04         [ 2] 2779 	ldw basicptr,x 
      0025A6 E6 02            [ 1] 2780 	ld a,(2,x)
      0025A8 C7 00 02         [ 1] 2781 	ld count,a
      0025AB 35 03 00 01      [ 1] 2782 	mov in,#3	
      0025AF 72 10 00 22      [ 1] 2783 	bset flags,#FRUN 
      0025B3 CC 17 50         [ 2] 2784 	jp interpreter 
                                   2785 
                                   2786 
                                   2787 ;----------------------
                                   2788 ; BASIC: END
                                   2789 ; end running program
                                   2790 ;---------------------- 
                           000001  2791 	CHAIN_BP=1 
                           000003  2792 	CHAIN_IN=3
                           000005  2793 	CHAIN_TXTBGN=5
                           000007  2794 	CHAIN_TXTEND=7
                           000008  2795 	CHAIN_CNTX_SIZE=8  
      0025B6                       2796 cmd_end: 
      0025B6                       2797 	_drop 2 ; no need for return address 
      0025B6 5B 02            [ 2]    1     addw sp,#2 
                                   2798 ; check for chained program 
      0025B8 72 5D 00 34      [ 1] 2799 	tnz chain_level
      0025BC 27 1D            [ 1] 2800 	jreq 8$
                                   2801 ; restore chain context 
      0025BE 72 5A 00 34      [ 1] 2802 	dec chain_level 
      0025C2 1E 01            [ 2] 2803 	ldw x,(CHAIN_BP,sp) ; chain saved basicptr 
      0025C4 CF 00 04         [ 2] 2804 	ldw basicptr,x 
      0025C7 1E 03            [ 2] 2805 	ldw x,(CHAIN_IN,sp) ; chain saved in and count  
      0025C9 CF 00 01         [ 2] 2806 	ldw in,x 
      0025CC 1E 05            [ 2] 2807 	ldw x,(CHAIN_TXTBGN,sp)
      0025CE CF 00 1B         [ 2] 2808 	ldw txtbgn,x 
      0025D1 1E 07            [ 2] 2809 	ldw x,(CHAIN_TXTEND,sp)
      0025D3 CF 00 1D         [ 2] 2810 	ldw txtend,x 
      0025D6                       2811 	_drop CHAIN_CNTX_SIZE ; CHAIN saved data size  
      0025D6 5B 08            [ 2]    1     addw sp,#CHAIN_CNTX_SIZE 
      0025D8 CC 17 50         [ 2] 2812 	jp interpreter 
      0025DB                       2813 8$: ; clean stack 
      0025DB AE 17 FF         [ 2] 2814 	ldw x,#STACK_EMPTY
      0025DE 94               [ 1] 2815 	ldw sp,x 
      0025DF CC 17 31         [ 2] 2816 	jp warm_start
                                   2817 
                                   2818 ;---------------------------
                                   2819 ; BASIC: GET var 
                                   2820 ; receive a key in variable 
                                   2821 ; don't wait 
                                   2822 ;---------------------------
      0025E2                       2823 cmd_get:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0025E2 CD 18 0C         [ 4] 2824 	call next_token 
      0025E5 A1 85            [ 1] 2825 	cp a,#TK_VAR 
      0025E7 27 03            [ 1] 2826 	jreq 0$
      0025E9 CC 16 A5         [ 2] 2827 	jp syntax_error 
      0025EC CD 18 34         [ 4] 2828 0$: call get_addr 
      0025EF CF 00 19         [ 2] 2829 	ldw ptr16,x 
      0025F2 CD 09 08         [ 4] 2830 	call qgetc 
      0025F5 27 03            [ 1] 2831 	jreq 2$
      0025F7 CD 09 0F         [ 4] 2832 	call getc  
      0025FA 72 3F 00 19      [ 4] 2833 2$: clr [ptr16]
      0025FE 72 5C 00 1A      [ 1] 2834 	inc ptr8 
      002602 72 3F 00 19      [ 4] 2835 	clr [ptr16]
      002606 72 5C 00 1A      [ 1] 2836 	inc ptr8 
      00260A 72 C7 00 19      [ 4] 2837 	ld [ptr16],a 
      00260E 81               [ 4] 2838 	ret 
                                   2839 
                                   2840 
                                   2841 ;-----------------
                                   2842 ; 1 Khz beep 
                                   2843 ;-----------------
      00260F                       2844 beep_1khz:: 
      00260F 90 89            [ 2] 2845 	pushw y 
      002611 AE 00 64         [ 2] 2846 	ldw x,#100
      002614 90 AE 03 E8      [ 2] 2847 	ldw y,#1000
      002618 20 22            [ 2] 2848 	jra beep
                                   2849 
                                   2850 ;-----------------------
                                   2851 ; BASIC: TONE expr1,expr2
                                   2852 ; used TIMER2 channel 1
                                   2853 ; to produce a tone 
                                   2854 ; arguments:
                                   2855 ;    expr1   frequency 
                                   2856 ;    expr2   duration msec.
                                   2857 ;---------------------------
      00261A                       2858 tone:
      00261A 90 89            [ 2] 2859 	pushw y 
      00261C CD 19 EA         [ 4] 2860 	call arg_list 
      00261F A1 02            [ 1] 2861 	cp a,#2 
      002621 27 03            [ 1] 2862 	jreq 1$
      002623 CC 16 A5         [ 2] 2863 	jp syntax_error 
      002626                       2864 1$: 
      002626                       2865 	_xpop 
      002626 90 F6            [ 1]    1     ld a,(y)
      002628 93               [ 1]    2     ldw x,y 
      002629 EE 01            [ 2]    3     ldw x,(1,x)
      00262B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00262F 89               [ 2] 2866 	pushw x ; duration 
      002630                       2867 	_xpop ; frequency
      002630 90 F6            [ 1]    1     ld a,(y)
      002632 93               [ 1]    2     ldw x,y 
      002633 EE 01            [ 2]    3     ldw x,(1,x)
      002635 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002639 90 93            [ 1] 2868 	ldw y,x ; frequency 
      00263B 85               [ 2] 2869 	popw x  ; duration 
      00263C                       2870 beep:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      00263C 89               [ 2] 2871 	pushw x 
      00263D AE F4 24         [ 2] 2872 	ldw x,#TIM2_CLK_FREQ
      002640 65               [ 2] 2873 	divw x,y ; cntr=Fclk/freq 
                                   2874 ; round to nearest integer 
      002641 90 A3 7A 12      [ 2] 2875 	cpw y,#TIM2_CLK_FREQ/2
      002645 2B 01            [ 1] 2876 	jrmi 2$
      002647 5C               [ 1] 2877 	incw x 
      002648                       2878 2$:	 
      002648 9E               [ 1] 2879 	ld a,xh 
      002649 C7 53 0D         [ 1] 2880 	ld TIM2_ARRH,a 
      00264C 9F               [ 1] 2881 	ld a,xl 
      00264D C7 53 0E         [ 1] 2882 	ld TIM2_ARRL,a 
                                   2883 ; 50% duty cycle 
      002650 8C               [ 1] 2884 	ccf 
      002651 56               [ 2] 2885 	rrcw x 
      002652 9E               [ 1] 2886 	ld a,xh 
      002653 C7 53 0F         [ 1] 2887 	ld TIM2_CCR1H,a 
      002656 9F               [ 1] 2888 	ld a,xl
      002657 C7 53 10         [ 1] 2889 	ld TIM2_CCR1L,a
      00265A 72 10 53 08      [ 1] 2890 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      00265E 72 10 53 00      [ 1] 2891 	bset TIM2_CR1,#TIM2_CR1_CEN
      002662 72 10 53 04      [ 1] 2892 	bset TIM2_EGR,#TIM2_EGR_UG
      002666 85               [ 2] 2893 	popw x 
      002667 CD 2B 76         [ 4] 2894 	call pause02
      00266A 72 11 53 08      [ 1] 2895 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      00266E 72 11 53 00      [ 1] 2896 	bres TIM2_CR1,#TIM2_CR1_CEN 
      002672 90 85            [ 2] 2897 	popw y 
      002674 81               [ 4] 2898 	ret 
                                   2899 
                                   2900 ;-------------------------------
                                   2901 ; BASIC: ADCON 0|1 [,divisor]  
                                   2902 ; disable/enanble ADC 
                                   2903 ;-------------------------------
                           000003  2904 	ONOFF=3 
                           000001  2905 	DIVSOR=1
                           000004  2906 	VSIZE=4 
      002675                       2907 power_adc:
      002675 CD 19 EA         [ 4] 2908 	call arg_list 
      002678 A1 02            [ 1] 2909 	cp a,#2	
      00267A 27 12            [ 1] 2910 	jreq 1$
      00267C A1 01            [ 1] 2911 	cp a,#1 
      00267E 27 03            [ 1] 2912 	jreq 0$ 
      002680 CC 16 A5         [ 2] 2913 	jp syntax_error 
      002683 4F               [ 1] 2914 0$:	clr a 
      002684 5F               [ 1] 2915 	clrw x
      002685                       2916 	_xpush   ; divisor  
      002685 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002689 90 F7            [ 1]    2     ld (y),a 
      00268B 90 EF 01         [ 2]    3     ldw (1,y),x 
      00268E                       2917 1$: _at_next 
      00268E 90 E6 03         [ 1]    1     ld a,(3,y)
      002691 93               [ 1]    2     ldw x,y 
      002692 EE 04            [ 2]    3     ldw x,(4,x)
      002694 5D               [ 2] 2918 	tnzw x 
      002695 27 25            [ 1] 2919 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      002697                       2920 	_xpop
      002697 90 F6            [ 1]    1     ld a,(y)
      002699 93               [ 1]    2     ldw x,y 
      00269A EE 01            [ 2]    3     ldw x,(1,x)
      00269C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026A0                       2921 	_xdrop  
      0026A0 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      0026A4 9F               [ 1] 2922 	ld a,xl
      0026A5 A4 07            [ 1] 2923 	and a,#7
      0026A7 4E               [ 1] 2924 	swap a 
      0026A8 C7 54 01         [ 1] 2925 	ld ADC_CR1,a
      0026AB 72 16 50 CA      [ 1] 2926 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0026AF 72 10 54 01      [ 1] 2927 	bset ADC_CR1,#ADC_CR1_ADON 
      0026B3                       2928 	_usec_dly 7 
      0026B3 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0026B6 5A               [ 2]    2     decw x
      0026B7 9D               [ 1]    3     nop 
      0026B8 26 FA            [ 1]    4     jrne .-4
      0026BA 20 08            [ 2] 2929 	jra 3$
      0026BC 72 11 54 01      [ 1] 2930 2$: bres ADC_CR1,#ADC_CR1_ADON
      0026C0 72 17 50 CA      [ 1] 2931 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0026C4                       2932 3$:	
      0026C4 81               [ 4] 2933 	ret
                                   2934 
                                   2935 ;-----------------------------
                                   2936 ; BASIC: ADCREAD (channel)
                                   2937 ; read adc channel {0..5}
                                   2938 ; output:
                                   2939 ;   A 		TK_INTGR 
                                   2940 ;   X 		value 
                                   2941 ;-----------------------------
      0026C5                       2942 analog_read:
      0026C5 CD 19 E5         [ 4] 2943 	call func_args 
      0026C8 A1 01            [ 1] 2944 	cp a,#1 
      0026CA 27 03            [ 1] 2945 	jreq 1$
      0026CC CC 16 A5         [ 2] 2946 	jp syntax_error
      0026CF                       2947 1$: _xpop 
      0026CF 90 F6            [ 1]    1     ld a,(y)
      0026D1 93               [ 1]    2     ldw x,y 
      0026D2 EE 01            [ 2]    3     ldw x,(1,x)
      0026D4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026D8 A3 00 05         [ 2] 2948 	cpw x,#5 
      0026DB 23 05            [ 2] 2949 	jrule 2$
      0026DD A6 0A            [ 1] 2950 	ld a,#ERR_BAD_VALUE
      0026DF CC 16 A7         [ 2] 2951 	jp tb_error 
      0026E2 9F               [ 1] 2952 2$: ld a,xl
      0026E3 C7 00 0E         [ 1] 2953 	ld acc8,a 
      0026E6 A6 05            [ 1] 2954 	ld a,#5
      0026E8 C0 00 0E         [ 1] 2955 	sub a,acc8 
      0026EB C7 54 00         [ 1] 2956 	ld ADC_CSR,a
      0026EE 72 16 54 02      [ 1] 2957 	bset ADC_CR2,#ADC_CR2_ALIGN
      0026F2 72 10 54 01      [ 1] 2958 	bset ADC_CR1,#ADC_CR1_ADON
      0026F6 72 0F 54 00 FB   [ 2] 2959 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0026FB CE 54 04         [ 2] 2960 	ldw x,ADC_DRH
      0026FE A6 84            [ 1] 2961 	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      002700 81               [ 4] 2962 	ret 
                                   2963 
                                   2964 ;-----------------------
                                   2965 ; BASIC: DREAD(pin)
                                   2966 ; Arduino pins 
                                   2967 ; read state of a digital pin 
                                   2968 ; pin# {0..15}
                                   2969 ; output:
                                   2970 ;    A 		TK_INTGR
                                   2971 ;    X      0|1 
                                   2972 ;-------------------------
                           000001  2973 	PINNO=1
                           000001  2974 	VSIZE=1
      002701                       2975 digital_read:
      002701                       2976 	_vars VSIZE 
      002701 52 01            [ 2]    1     sub sp,#VSIZE 
      002703 CD 19 E5         [ 4] 2977 	call func_args
      002706 A1 01            [ 1] 2978 	cp a,#1
      002708 27 03            [ 1] 2979 	jreq 1$
      00270A CC 16 A5         [ 2] 2980 	jp syntax_error
      00270D                       2981 1$: _xpop 
      00270D 90 F6            [ 1]    1     ld a,(y)
      00270F 93               [ 1]    2     ldw x,y 
      002710 EE 01            [ 2]    3     ldw x,(1,x)
      002712 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002716 A3 00 0F         [ 2] 2982 	cpw x,#15 
      002719 23 05            [ 2] 2983 	jrule 2$
      00271B A6 0A            [ 1] 2984 	ld a,#ERR_BAD_VALUE
      00271D CC 16 A7         [ 2] 2985 	jp tb_error 
      002720 CD 2C B9         [ 4] 2986 2$:	call select_pin 
      002723 6B 01            [ 1] 2987 	ld (PINNO,sp),a
      002725 E6 01            [ 1] 2988 	ld a,(GPIO_IDR,x)
      002727 0D 01            [ 1] 2989 	tnz (PINNO,sp)
      002729 27 05            [ 1] 2990 	jreq 8$
      00272B 44               [ 1] 2991 3$: srl a 
      00272C 0A 01            [ 1] 2992 	dec (PINNO,sp)
      00272E 26 FB            [ 1] 2993 	jrne 3$ 
      002730 A4 01            [ 1] 2994 8$: and a,#1 
      002732 5F               [ 1] 2995 	clrw x 
      002733 97               [ 1] 2996 	ld xl,a 
      002734 4F               [ 1] 2997 	clr a 
      002735                       2998 	_drop VSIZE
      002735 5B 01            [ 2]    1     addw sp,#VSIZE 
      002737 81               [ 4] 2999 	ret
                                   3000 
                                   3001 
                                   3002 ;-----------------------
                                   3003 ; BASIC: DWRITE pin,0|1
                                   3004 ; Arduino pins 
                                   3005 ; write to a digital pin 
                                   3006 ; pin# {0..15}
                                   3007 ; output:
                                   3008 ;    A 		TK_INTGR
                                   3009 ;    X      0|1 
                                   3010 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                           000001  3011 	PINNO=1
                           000002  3012 	PINVAL=2
                           000002  3013 	VSIZE=2
      002738                       3014 digital_write:
      002738                       3015 	_vars VSIZE 
      002738 52 02            [ 2]    1     sub sp,#VSIZE 
      00273A CD 19 EA         [ 4] 3016 	call arg_list  
      00273D A1 02            [ 1] 3017 	cp a,#2 
      00273F 27 03            [ 1] 3018 	jreq 1$
      002741 CC 16 A5         [ 2] 3019 	jp syntax_error
      002744                       3020 1$: _xpop 
      002744 90 F6            [ 1]    1     ld a,(y)
      002746 93               [ 1]    2     ldw x,y 
      002747 EE 01            [ 2]    3     ldw x,(1,x)
      002749 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00274D 9F               [ 1] 3021 	ld a,xl 
      00274E 6B 02            [ 1] 3022 	ld (PINVAL,sp),a
      002750                       3023 	_xpop 
      002750 90 F6            [ 1]    1     ld a,(y)
      002752 93               [ 1]    2     ldw x,y 
      002753 EE 01            [ 2]    3     ldw x,(1,x)
      002755 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002759 A3 00 0F         [ 2] 3024 	cpw x,#15 
      00275C 23 05            [ 2] 3025 	jrule 2$
      00275E A6 0A            [ 1] 3026 	ld a,#ERR_BAD_VALUE
      002760 CC 16 A7         [ 2] 3027 	jp tb_error 
      002763 CD 2C B9         [ 4] 3028 2$:	call select_pin 
      002766 6B 01            [ 1] 3029 	ld (PINNO,sp),a 
      002768 A6 01            [ 1] 3030 	ld a,#1
      00276A 0D 01            [ 1] 3031 	tnz (PINNO,sp)
      00276C 27 05            [ 1] 3032 	jreq 4$
      00276E 48               [ 1] 3033 3$: sll a
      00276F 0A 01            [ 1] 3034 	dec (PINNO,sp)
      002771 26 FB            [ 1] 3035 	jrne 3$
      002773 0D 02            [ 1] 3036 4$: tnz (PINVAL,sp)
      002775 26 05            [ 1] 3037 	jrne 5$
      002777 43               [ 1] 3038 	cpl a 
      002778 E4 00            [ 1] 3039 	and a,(GPIO_ODR,x)
      00277A 20 02            [ 2] 3040 	jra 8$
      00277C EA 00            [ 1] 3041 5$: or a,(GPIO_ODR,x)
      00277E E7 00            [ 1] 3042 8$: ld (GPIO_ODR,x),a 
      002780                       3043 	_drop VSIZE 
      002780 5B 02            [ 2]    1     addw sp,#VSIZE 
      002782 81               [ 4] 3044 	ret
                                   3045 
                                   3046 
                                   3047 ;-----------------------
                                   3048 ; BASIC: STOP
                                   3049 ; stop progam execution  
                                   3050 ; without resetting pointers 
                                   3051 ; the program is resumed
                                   3052 ; with RUN 
                                   3053 ;-------------------------
      002783                       3054 stop:
      002783 72 00 00 22 01   [ 2] 3055 	btjt flags,#FRUN,2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      002788 81               [ 4] 3056 	ret 
      002789                       3057 2$:	 
                                   3058 ; create space on cstack to save context 
      002789 AE 27 B0         [ 2] 3059 	ldw x,#break_point 
      00278C CD 09 5C         [ 4] 3060 	call puts 
      00278F                       3061 	_drop 2 ;drop return address 
      00278F 5B 02            [ 2]    1     addw sp,#2 
      002791                       3062 	_vars CTXT_SIZE ; context size 
      002791 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      002793 CD 20 A7         [ 4] 3063 	call save_context 
      002796 AE 16 68         [ 2] 3064 	ldw x,#tib 
      002799 CF 00 04         [ 2] 3065 	ldw basicptr,x
      00279C 7F               [ 1] 3066 	clr (x)
      00279D 72 5F 00 02      [ 1] 3067 	clr count  
      0027A1 5F               [ 1] 3068 	clrw x 
      0027A2 CF 00 00         [ 2] 3069 	ldw in.w,x
      0027A5 72 11 00 22      [ 1] 3070 	bres flags,#FRUN 
      0027A9 72 18 00 22      [ 1] 3071 	bset flags,#FBREAK
      0027AD CC 17 50         [ 2] 3072 	jp interpreter 
      0027B0 0A 62 72 65 61 6B 20  3073 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3074 
                                   3075 ;-----------------------
                                   3076 ; BASIC: NEW
                                   3077 ; from command line only 
                                   3078 ; free program memory
                                   3079 ; and clear variables 
                                   3080 ;------------------------
      0027CE                       3081 new: 
      0027CE CD 19 C2         [ 4] 3082 	call cmd_line_only
      0027D1 72 5F 00 22      [ 1] 3083 0$:	clr flags 
      0027D5 CD 14 B1         [ 4] 3084 	call clear_basic 
      0027D8 81               [ 4] 3085 	ret 
                                   3086 
                                   3087 ;-----------------------------------
                                   3088 ; erase program at specified address
                                   3089 ; keep signature and size fields. 
                                   3090 ; signature replaced by "XX"
                                   3091 ; input:
                                   3092 ;    X    address 
                                   3093 ;-----------------------------------
                           000001  3094 	ADDR=1    ; program address
                           000003  3095 	PRG_SIZE=3    ; program size 
                           000005  3096 	BLOCKS=5 ; blocks to erase 
                           000006  3097 	VSIZE=6
      0027D9                       3098 erase_program:
      0027D9 89               [ 2] 3099 	pushw x 
      0027DA CD 18 25         [ 4] 3100 	call skip_string 
      0027DD 85               [ 2] 3101 	popw x 
      0027DE CD 32 01         [ 4] 3102 	call search_program 
      0027E1 27 4A            [ 1] 3103 	jreq 9$
      0027E3 CD 06 E7         [ 4] 3104 	call move_erase_to_ram
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0027E6 72 5F 00 18      [ 1] 3105 	clr farptr 
      0027EA                       3106 	_vars VSIZE 
      0027EA 52 06            [ 2]    1     sub sp,#VSIZE 
      0027EC 1D 00 04         [ 2] 3107 1$:	subw x,#4 
      0027EF 1F 01            [ 2] 3108 	ldw (ADDR,sp),x
      0027F1 EE 02            [ 2] 3109 	ldw x,(2,x)
      0027F3 1F 03            [ 2] 3110 	ldw (PRG_SIZE,sp),x
      0027F5 A6 80            [ 1] 3111 	ld a,#BLOCK_SIZE 
      0027F7 62               [ 2] 3112 	div x,a 
      0027F8 4D               [ 1] 3113 	tnz a 
      0027F9 27 01            [ 1] 3114 	jreq 2$ 
      0027FB 5C               [ 1] 3115 	incw x 
      0027FC 1F 05            [ 2] 3116 2$:	ldw (BLOCKS,sp),x 
      0027FE 1E 01            [ 2] 3117 	ldw x,(ADDR,sp)
      002800 CF 00 19         [ 2] 3118 	ldw ptr16,x 
      002803 CD 07 65         [ 4] 3119 3$:	call block_erase
      002806 AE 00 80         [ 2] 3120 	ldw x,#BLOCK_SIZE 
      002809 CD 08 60         [ 4] 3121 	call incr_farptr
      00280C 1E 05            [ 2] 3122 	ldw x,(BLOCKS,sp)
      00280E 5A               [ 2] 3123 	decw x 
      00280F 1F 05            [ 2] 3124 	ldw (BLOCKS,sp),x 
      002811 26 F0            [ 1] 3125 	jrne 3$ 
                                   3126 ; write XX and size at addr 
      002813 1E 01            [ 2] 3127 	ldw x,(ADDR,sp)
      002815 CF 00 19         [ 2] 3128 	ldw ptr16,x 
      002818 A6 58            [ 1] 3129 	ld a,#'X 
      00281A 5F               [ 1] 3130 	clrw x 
      00281B CD 07 8B         [ 4] 3131 	call write_byte 
      00281E CD 07 8B         [ 4] 3132 	call write_byte 
      002821 7B 03            [ 1] 3133 	ld a,(PRG_SIZE,sp)
      002823 CD 07 8B         [ 4] 3134 	call write_byte 
      002826 7B 04            [ 1] 3135 	ld a,(PRG_SIZE+1,sp)
      002828 CD 07 8B         [ 4] 3136 	call write_byte 
      00282B                       3137 	_drop VSIZE 
      00282B 5B 06            [ 2]    1     addw sp,#VSIZE 
      00282D                       3138 9$:	
      00282D 81               [ 4] 3139 	ret 
                                   3140 
                                   3141 ;-----------------------------------
                                   3142 ; BASIC: ERASE \E | \F || address
                                   3143 ; erase all block in range from 
                                   3144 ;  'app_space' to FLASH end (0x27fff)
                                   3145 ;  or all EEPROM 
                                   3146 ; that contains a non zero byte. 
                                   3147 ; if the argument is an address  
                                   3148 ; mark the program at this address 
                                   3149 ; as erased. Erase the blocks 
                                   3150 ; replace signature by 'XX' and 
                                   3151 ; keep size field.  
                                   3152 ;-----------------------------------
                           000001  3153 	LIMIT=1 
                           000003  3154 	VSIZE = 3 
      00282E                       3155 cmd_erase:
      00282E CD 19 C2         [ 4] 3156 	call cmd_line_only
      002831 72 5F 00 18      [ 1] 3157 	clr farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      002835 CD 18 0C         [ 4] 3158 	call next_token
      002838 A1 03            [ 1] 3159 	cp a,#TK_LABEL 
      00283A 27 9D            [ 1] 3160 	jreq erase_program  
      00283C                       3161 	_vars VSIZE 
      00283C 52 03            [ 2]    1     sub sp,#VSIZE 
      00283E A1 04            [ 1] 3162 	cp a,#TK_CHAR 
      002840 27 03            [ 1] 3163 	jreq 0$ 
      002842 CC 16 A5         [ 2] 3164 	jp syntax_error
      002845 CD 18 4E         [ 4] 3165 0$: call get_char 
      002848 A4 DF            [ 1] 3166 	and a,#0XDF 
      00284A A1 45            [ 1] 3167 	cp a,#'E
      00284C 26 0C            [ 1] 3168 	jrne 1$
      00284E AE 40 00         [ 2] 3169 	ldw x,#EEPROM_BASE 
      002851 CF 00 19         [ 2] 3170 	ldw farptr+1,x 
      002854 AE 47 FF         [ 2] 3171 	ldw x,#EEPROM_END
      002857 4F               [ 1] 3172 	clr a 
      002858 20 15            [ 2] 3173 	jra 3$ 
      00285A A1 46            [ 1] 3174 1$: cp a,#'F 
      00285C 27 06            [ 1] 3175 	jreq 2$
      00285E AE 15 AD         [ 2] 3176 	ldw x,#err_bad_value
      002861 CC 16 A7         [ 2] 3177 	jp tb_error
      002864                       3178 2$:
      002864 AE 38 80         [ 2] 3179 	ldw x,#app_space  
      002867 CF 00 19         [ 2] 3180 	ldw farptr+1,x 
      00286A A6 02            [ 1] 3181 	ld a,#(FLASH_END>>16)&0XFF 
      00286C AE 7F FF         [ 2] 3182 	ldw x,#FLASH_END&0xffff
      00286F                       3183 3$:
      00286F 6B 01            [ 1] 3184 	ld (LIMIT,sp),a 
      002871 1F 02            [ 2] 3185 	ldw (LIMIT+1,sp),x 
                                   3186 ; operation done from RAM
                                   3187 ; copy code to RAM in tib   
      002873 CD 06 E7         [ 4] 3188 	call move_erase_to_ram
      002876                       3189 4$:	 
      002876 CD 08 6E         [ 4] 3190     call scan_block 
      002879 27 08            [ 1] 3191 	jreq 5$  ; block already erased 
      00287B A6 45            [ 1] 3192     ld a,#'E 
      00287D CD 08 FF         [ 4] 3193     call putc 
      002880 CD 07 65         [ 4] 3194 	call block_erase   
                                   3195 ; this block is clean, next  
      002883 AE 00 80         [ 2] 3196 5$:	ldw x,#BLOCK_SIZE
      002886 CD 08 60         [ 4] 3197 	call incr_farptr
                                   3198 ; check limit, 24 bit substraction  	
      002889 7B 01            [ 1] 3199 	ld a,(LIMIT,sp)
      00288B 1E 02            [ 2] 3200 	ldw x,(LIMIT+1,sp)
      00288D 72 B0 00 19      [ 2] 3201 	subw x,farptr+1
      002891 C2 00 18         [ 1] 3202 	sbc a,farptr 
      002894 22 E0            [ 1] 3203 	jrugt 4$ 
      002896 CD 14 B1         [ 4] 3204 9$: call clear_basic
      002899 1E 02            [ 2] 3205 	ldw x,(LIMIT+1,sp)
      00289B A3 47 FF         [ 2] 3206 	cpw x,#EEPROM_END
      00289E 26 03            [ 1] 3207 	jrne 10$
      0028A0 CD 1D 58         [ 4] 3208 	call func_eefree 
      0028A3                       3209 10$:
      0028A3                       3210 	_drop VSIZE 
      0028A3 5B 03            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      0028A5 81               [ 4] 3211 	ret 
                                   3212 	
                                   3213 
                                   3214 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3215 ;  check for application signature 
                                   3216 ; input:
                                   3217 ;	x       address to check 
                                   3218 ; output:
                                   3219 ;   Z      1  signature present 
                                   3220 ;          0 not app signature  
                                   3221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028A6                       3222 qsign: 
      0028A6 89               [ 2] 3223 	pushw x 
                                   3224 ; align to block 
      0028A7 9F               [ 1] 3225 	ld a,xl 
      0028A8 A4 80            [ 1] 3226 	and a,#BLOCK_SIZE 
      0028AA 97               [ 1] 3227 	ld xl,a 
      0028AB FE               [ 2] 3228 	ldw x,(x)
      0028AC C3 29 C1         [ 2] 3229 	cpw x,SIGNATURE ; "TB" 
      0028AF 85               [ 2] 3230 	popw x 
      0028B0 81               [ 4] 3231 	ret 
                                   3232 
                                   3233 ;--------------------------------------
                                   3234 ;  fill write buffer 
                                   3235 ;  input:
                                   3236 ;    y  point to output buffer 
                                   3237 ;    x  point to source 
                                   3238 ;    a  bytes to write in buffer 
                                   3239 ;  output:
                                   3240 ;    y   += A 
                                   3241 ;    X   += A 
                                   3242 ;    A   0 
                                   3243 ;---------------------------------------
      0028B1                       3244 fill_write_buffer:
      0028B1 88               [ 1] 3245 	push a 
      0028B2 4D               [ 1] 3246 	tnz a 
      0028B3 27 0A            [ 1] 3247 	jreq 9$ 
      0028B5 F6               [ 1] 3248 1$: ld a,(x)
      0028B6 5C               [ 1] 3249 	incw x 
      0028B7 90 F7            [ 1] 3250 	ld (y),a 
      0028B9 90 5C            [ 1] 3251 	incw y 
      0028BB 0A 01            [ 1] 3252 	dec (1,sp) 
      0028BD 26 F6            [ 1] 3253 	jrne 1$ 
      0028BF 84               [ 1] 3254 9$:	pop a 
      0028C0 81               [ 4] 3255     ret 	
                                   3256 
                                   3257 ;--------------------------------------
                                   3258 ;  fill pad buffer with zero 
                                   3259 ;  input:
                                   3260 ;	none 
                                   3261 ;  output:
                                   3262 ;    y     buffer address  
                                   3263 ;--------------------------------------
      0028C1                       3264 clear_block_buffer:
      0028C1 88               [ 1] 3265 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      0028C2 90 AE 16 B8      [ 2] 3266 	ldw y,#block_buffer 
      0028C6 90 89            [ 2] 3267 	pushw y
      0028C8 A6 80            [ 1] 3268 	ld a,#BLOCK_SIZE   
      0028CA 90 7F            [ 1] 3269 1$:	clr (y)
      0028CC 90 5C            [ 1] 3270 	incw y
      0028CE 4A               [ 1] 3271 	dec a  
      0028CF 26 F9            [ 1] 3272 	jrne 1$ 	
      0028D1 90 85            [ 2] 3273 9$: popw y 
      0028D3 84               [ 1] 3274 	pop a 			
      0028D4 81               [ 4] 3275 	ret 
                                   3276 
                                   3277 
                                   3278 ;----------------------------------
                                   3279 ;  search  a free space space that 
                                   3280 ;  fit program size 
                                   3281 ; input:
                                   3282 ;    X    program size 
                                   3283 ; output:
                                   3284 ;    X    address | 0 
                                   3285 ;------------------------------------
                           000001  3286 	PG_SIZE=1 
                           000002  3287 	VSIZE=2 
      0028D5                       3288 search_fit:
      0028D5 89               [ 2] 3289 	pushw x; PG_SIZE 
      0028D6 AE 38 80         [ 2] 3290 	ldw x,#app_space 
      0028D9 CD 29 C5         [ 4] 3291 1$:	call is_erased 
      0028DC 27 0D            [ 1] 3292 	jreq 4$
      0028DE F6               [ 1] 3293 	ld a,(x)
      0028DF EA 01            [ 1] 3294 	or a,(1,x)
      0028E1 27 23            [ 1] 3295 	jreq 9$ ; free space 
      0028E3 CD 29 D0         [ 4] 3296 2$:	call skip_to_next
      0028E6 5D               [ 2] 3297 	tnzw x 
      0028E7 26 F0            [ 1] 3298 	jrne 1$
      0028E9 20 1B            [ 2] 3299 	jra 9$
      0028EB                       3300 4$: ; erased program 
                                   3301     ; does it fit? 
      0028EB CF 00 0D         [ 2] 3302 	ldw acc16,x 
      0028EE EE 02            [ 2] 3303 	ldw x,(2,x) ; size erased program
                                   3304 ; top multiple of BLOCK_SIZE 
      0028F0 1C 00 04         [ 2] 3305 	addw x,#4 
      0028F3 1C 00 7F         [ 2] 3306 	addw x,#BLOCK_SIZE-1 
      0028F6 9F               [ 1] 3307 	ld a,xl 
      0028F7 A4 80            [ 1] 3308 	and a,#BLOCK_SIZE 
      0028F9 97               [ 1] 3309 	ld xl,a  
      0028FA 13 01            [ 2] 3310 	cpw x,(1,sp) ; size program to save 
      0028FC 24 05            [ 1] 3311 	jruge 8$   ; fit 
      0028FE CE 00 0D         [ 2] 3312 	ldw x,acc16 
      002901 20 E0            [ 2] 3313 	jra 2$ 
      002903 CE 00 0D         [ 2] 3314 8$: ldw x,acc16 ; fit in this one 	
      002906                       3315 9$:	_drop VSIZE 
      002906 5B 02            [ 2]    1     addw sp,#VSIZE 
      002908 81               [ 4] 3316 	ret  
                                   3317 
                                   3318 ;-------------------------
                                   3319 ; erase header and 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



                                   3320 ; size fields 
                                   3321 ; input: 
                                   3322 ;    X    program address 
                                   3323 ; output:
                                   3324 ;    X    unchanged 
                                   3325 ;-------------------------
                           000001  3326 	COUNT=1 
      002909                       3327 erase_header:
      002909 89               [ 2] 3328 	pushw x 
      00290A 4B 04            [ 1] 3329 	push #4 ; COUNT 
      00290C 72 5F 00 18      [ 1] 3330 	clr farptr 
      002910 CF 00 19         [ 2] 3331 	ldw ptr16,x 
      002913 4F               [ 1] 3332 	clr a 
      002914 5F               [ 1] 3333 	clrw x 
      002915 CD 07 8B         [ 4] 3334 1$:	call write_byte 
      002918 0A 01            [ 1] 3335 	dec (COUNT,sp)
      00291A 26 F9            [ 1] 3336 	jrne 1$
      00291C                       3337 	_drop 1 
      00291C 5B 01            [ 2]    1     addw sp,#1 
      00291E 85               [ 2] 3338 	popw x 
      00291F CF 00 19         [ 2] 3339 	ldw ptr16,x 
      002922 81               [ 4] 3340 	ret 
                                   3341 
                                   3342 ;---------------------------------------
                                   3343 ; BASIC: SAVE
                                   3344 ; write application from RAM to FLASH
                                   3345 ; at UFLASH address
                                   3346 ;--------------------------------------
                           000001  3347 	XTEMP=1
                           000003  3348 	COUNT=3  ; last count bytes written 
                           000004  3349 	CNT_LO=4 ; count low byte 
                           000005  3350 	TOWRITE=5 ; how bytes left to write  
                           000006  3351 	VSIZE=6 
      002923                       3352 cmd_save:
      002923 CD 19 C2         [ 4] 3353 	call cmd_line_only
      002926 89               [ 2] 3354 	pushw x 
      002927 90 89            [ 2] 3355 	pushw y 
      002929                       3356 	_vars VSIZE
      002929 52 06            [ 2]    1     sub sp,#VSIZE 
      00292B CD 1E 64         [ 4] 3357 	call prog_size 
      00292E 26 03            [ 1] 3358 	jrne 0$ 
      002930 CC 29 BB         [ 2] 3359 	jp 9$ ; no program to save 
      002933 1F 05            [ 2] 3360 0$:	ldw (TOWRITE,sp),x ; program size
      002935 72 5F 00 18      [ 1] 3361 	clr farptr 
      002939 CD 28 D5         [ 4] 3362 	call search_fit
      00293C CF 00 19         [ 2] 3363 	ldw ptr16,x 
      00293F AE FF FF         [ 2] 3364 	ldw x,#0xFFFF
      002942 72 B0 00 19      [ 2] 3365 	subw x,ptr16 ; free flash 
      002946 1D 00 04         [ 2] 3366 	subw x,#4 ; signature and size field 
      002949 13 05            [ 2] 3367 	cpw x,(TOWRITE,sp)
      00294B 24 05            [ 1] 3368 	jruge 1$
      00294D A6 01            [ 1] 3369 	ld a,#ERR_MEM_FULL
      00294F CC 16 A7         [ 2] 3370 	jp tb_error 
      002952                       3371 1$: ; check if header bytes are zero's 
      002952 CE 00 19         [ 2] 3372 	ldw x,ptr16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      002955 F6               [ 1] 3373 	ld a,(x)
      002956 EA 01            [ 1] 3374 	or a,(1,x)
      002958 EA 02            [ 1] 3375 	or a,(2,x)
      00295A EA 03            [ 1] 3376 	or a,(3,x)
      00295C 27 03            [ 1] 3377 	jreq 2$
      00295E CD 29 09         [ 4] 3378 	call erase_header ; preserve X and farptr 
      002961                       3379 2$: 
                                   3380 ; block programming flash
                                   3381 ; must be done from RAM
                                   3382 ; moved in tib  
      002961 CD 07 27         [ 4] 3383 	call move_prg_to_ram
                                   3384 ; initialize written bytes count  
      002964 0F 03            [ 1] 3385 	clr (COUNT,sp)
                                   3386 ; first bock 
                                   3387 ; containt signature 2 bytes 
                                   3388 ; and size 	2 bytes 
                                   3389 ; use Y as pointer to block_buffer
      002966 CD 28 C1         [ 4] 3390 	call clear_block_buffer ; -- y=*block_buffer	
                                   3391 ; write signature
      002969 CE 29 C1         [ 2] 3392 	ldw x,SIGNATURE ; "TB" 
      00296C 90 FF            [ 2] 3393 	ldw (y),x 
      00296E 72 A9 00 02      [ 2] 3394 	addw y,#2
      002972 1E 05            [ 2] 3395 	ldw x,(TOWRITE,sp)
      002974 90 FF            [ 2] 3396 	ldw (y),x
      002976 72 A9 00 02      [ 2] 3397 	addw y,#2   
      00297A A6 7C            [ 1] 3398 	ld a,#(BLOCK_SIZE-4)
      00297C A3 00 7C         [ 2] 3399 	cpw x,#(BLOCK_SIZE-4) 
      00297F 22 01            [ 1] 3400 	jrugt 3$
      002981 9F               [ 1] 3401 	ld a,xl 
      002982 6B 04            [ 1] 3402 3$:	ld (CNT_LO,sp),a   
      002984 CE 00 1B         [ 2] 3403 	ldw x,txtbgn 
      002987 1F 01            [ 2] 3404 	ldw (XTEMP,sp),x 
      002989                       3405 32$: 
      002989 1E 01            [ 2] 3406 	ldw x,(XTEMP,sp)
      00298B 7B 04            [ 1] 3407 	ld a,(CNT_LO,sp)
      00298D CD 28 B1         [ 4] 3408 	call fill_write_buffer 
      002990 1F 01            [ 2] 3409 	ldw (XTEMP,sp),x 
      002992 AE 16 B8         [ 2] 3410 	ldw x,#block_buffer
      002995 CD 07 41         [ 4] 3411 	call write_buffer
      002998 AE 00 80         [ 2] 3412 	ldw x,#BLOCK_SIZE 
      00299B CD 08 60         [ 4] 3413 	call incr_farptr  
                                   3414 ; following blocks 
      00299E 1E 01            [ 2] 3415 	ldw x,(XTEMP,sp)
      0029A0 C3 00 1D         [ 2] 3416 	cpw x,txtend 
      0029A3 24 16            [ 1] 3417 	jruge 9$ 
      0029A5 1E 05            [ 2] 3418 	ldw x,(TOWRITE,sp)
      0029A7 72 F0 03         [ 2] 3419 	subw x,(COUNT,sp)
      0029AA 1F 05            [ 2] 3420 	ldw (TOWRITE,sp),x 
      0029AC A6 80            [ 1] 3421 	ld a,#BLOCK_SIZE 
      0029AE A3 00 80         [ 2] 3422 	cpw x,#BLOCK_SIZE 
      0029B1 24 01            [ 1] 3423 	jruge 4$ 
      0029B3 9F               [ 1] 3424 	ld a,xl 
      0029B4 6B 04            [ 1] 3425 4$:	ld (CNT_LO,sp),a 
      0029B6 CD 28 C1         [ 4] 3426 	call clear_block_buffer 
      0029B9 20 CE            [ 2] 3427 	jra 32$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      0029BB                       3428 9$:	_drop VSIZE 
      0029BB 5B 06            [ 2]    1     addw sp,#VSIZE 
      0029BD 90 85            [ 2] 3429     popw y 
      0029BF 85               [ 2] 3430 	popw x 
      0029C0 81               [ 4] 3431 	ret 
                                   3432 
      0029C1 54 42                 3433 SIGNATURE: .ascii "TB"
      0029C3 58 58                 3434 ERASED: .ascii "XX" 
                                   3435 
                                   3436 ;---------------------
                                   3437 ; check if there is 
                                   3438 ; an erased program 
                                   3439 ; at this address 
                                   3440 ; input:
                                   3441 ;    X    address 
                                   3442 ; output:
                                   3443 ;    Z    Set=erased program 
                                   3444 ;--------------------
      0029C5                       3445 is_erased:
      0029C5 89               [ 2] 3446 	pushw x 
                                   3447 ; align to BLOCK 
      0029C6 9F               [ 1] 3448 	ld a,xl 
      0029C7 A4 80            [ 1] 3449 	and a,#BLOCK_SIZE 
      0029C9 97               [ 1] 3450 	ld xl,a 
      0029CA FE               [ 2] 3451 	ldw x,(x)
      0029CB C3 29 C3         [ 2] 3452 	cpw x,ERASED 
      0029CE 85               [ 2] 3453 	popw x 
      0029CF 81               [ 4] 3454 	ret 
                                   3455 
                                   3456 ;----------------------------
                                   3457 ;  skip to next program
                                   3458 ;  block 
                                   3459 ; input:
                                   3460 ;    X   actual program addr
                                   3461 ; output:
                                   3462 ;    X   next block 
                                   3463 ;        after program 
                                   3464 ;----------------------------
      0029D0                       3465 skip_to_next:
                                   3466 ; align to block 
      0029D0 9F               [ 1] 3467 	ld a,xl 
      0029D1 A4 80            [ 1] 3468 	and a,#BLOCK_SIZE 
      0029D3 97               [ 1] 3469 	ld xl,a 
      0029D4 CF 00 0D         [ 2] 3470 	ldw acc16,x 
      0029D7 EE 02            [ 2] 3471 	ldw x,(2,x)
      0029D9 72 BB 00 0D      [ 2] 3472 	addw x,acc16 ; blk_addr+prg_size 
      0029DD 1C 00 04         [ 2] 3473 	addw x,#4 ; +header fields 
                                   3474 ; align to next block 
      0029E0 1C 00 7F         [ 2] 3475 	addw x,#BLOCK_SIZE-1 
      0029E3 9F               [ 1] 3476 	ld a,xl 
      0029E4 A4 80            [ 1] 3477 	and a,#0x80 
      0029E6 97               [ 1] 3478 	ld xl,a  
      0029E7 81               [ 4] 3479 	ret 
                                   3480 
                                   3481 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



                                   3482 ;---------------------
                                   3483 ; BASIC: DIR 
                                   3484 ; list programs saved 
                                   3485 ; in flash 
                                   3486 ;--------------------
                           000001  3487 	XTEMP=1 
      0029E8                       3488 cmd_dir:
      0029E8 CD 19 C2         [ 4] 3489 	call cmd_line_only
      0029EB AE 38 80         [ 2] 3490 	ldw x,#app_space 
      0029EE 89               [ 2] 3491 	pushw x 
      0029EF                       3492 1$: 
      0029EF CD 28 A6         [ 4] 3493 	call qsign 
      0029F2 26 3B            [ 1] 3494 	jrne 4$
      0029F4 1C 00 04         [ 2] 3495 	addw x,#4
      0029F7 35 10 00 0A      [ 1] 3496 	mov base,#16
      0029FB CD 18 54         [ 4] 3497 	call prt_i16
      0029FE A6 20            [ 1] 3498 	ld a,#SPACE 
      002A00 CD 08 FF         [ 4] 3499 	call putc 
      002A03 1E 01            [ 2] 3500 	ldw x,(1,sp)
      002A05 EE 02            [ 2] 3501 	ldw x,(2,x)
      002A07 35 0A 00 0A      [ 1] 3502 	mov base,#10  
      002A0B CD 18 54         [ 4] 3503 	call prt_i16 
      002A0E AE 1E CE         [ 2] 3504 	ldw x,#STR_BYTES
      002A11 CD 09 5C         [ 4] 3505 	call puts
      002A14 A6 2C            [ 1] 3506 	ld a,#', 
      002A16 CD 08 FF         [ 4] 3507 	call putc
      002A19 1E 01            [ 2] 3508 	ldw x,(1,sp)
      002A1B 1C 00 08         [ 2] 3509 	addw x,#8
      002A1E CD 09 5C         [ 4] 3510 	call puts 
      002A21 A6 0D            [ 1] 3511 	ld a,#CR 
      002A23 CD 08 FF         [ 4] 3512 	call putc
      002A26 1E 01            [ 2] 3513 	ldw x,(1,sp)
      002A28 CD 29 D0         [ 4] 3514 3$:	call skip_to_next
      002A2B 1F 01            [ 2] 3515 	ldw (1,sp),x 
      002A2D 20 C0            [ 2] 3516 	jra 1$
      002A2F                       3517 4$: ; check if it is an erased program 
      002A2F CD 29 C5         [ 4] 3518 	call is_erased 
      002A32 27 F4            [ 1] 3519 	jreq 3$ 
      002A34                       3520 8$: ; done 
      002A34                       3521 	_drop 2 
      002A34 5B 02            [ 2]    1     addw sp,#2 
      002A36 81               [ 4] 3522 	ret 
                                   3523 
                                   3524 ;---------------------
                                   3525 ; BASIC: WRITE expr1,expr2|char|string[,expr|char|string]* 
                                   3526 ; write 1 or more byte to FLASH or EEPROM
                                   3527 ; starting at address  
                                   3528 ; input:
                                   3529 ;   expr1  	is address 
                                   3530 ;   expr2,...,exprn   are bytes to write
                                   3531 ; output:
                                   3532 ;   none 
                                   3533 ;---------------------
      002A37                       3534 write:
      002A37 CD 1B 2C         [ 4] 3535 	call expression
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      002A3A A1 84            [ 1] 3536 	cp a,#TK_INTGR 
      002A3C 27 03            [ 1] 3537 	jreq 0$
      002A3E CC 16 A5         [ 2] 3538 	jp syntax_error
      002A41                       3539 0$: _xpop 
      002A41 90 F6            [ 1]    1     ld a,(y)
      002A43 93               [ 1]    2     ldw x,y 
      002A44 EE 01            [ 2]    3     ldw x,(1,x)
      002A46 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A4A C7 00 18         [ 1] 3540 	ld farptr,a 
      002A4D CF 00 19         [ 2] 3541 	ldw ptr16,x 
      002A50                       3542 1$:	
      002A50 CD 18 0C         [ 4] 3543 	call next_token 
      002A53 A1 08            [ 1] 3544 	cp a,#TK_COMMA 
      002A55 27 02            [ 1] 3545 	jreq 2$ 
      002A57 20 46            [ 2] 3546 	jra 9$ ; no more data 
      002A59 CD 18 0C         [ 4] 3547 2$:	call next_token 
      002A5C A1 04            [ 1] 3548 	cp a,#TK_CHAR 
      002A5E 27 23            [ 1] 3549 	jreq 4$ 
      002A60 A1 02            [ 1] 3550 	cp a,#TK_QSTR
      002A62 27 2A            [ 1] 3551 	jreq 6$
      002A64                       3552 	_unget_token 
      002A64 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002A69 CD 1B 2C         [ 4] 3553 	call expression
      002A6C A1 84            [ 1] 3554 	cp a,#TK_INTGR
      002A6E 27 03            [ 1] 3555 	jreq 3$
      002A70 CC 16 A5         [ 2] 3556 	jp syntax_error
      002A73                       3557 3$:	_xpop 
      002A73 90 F6            [ 1]    1     ld a,(y)
      002A75 93               [ 1]    2     ldw x,y 
      002A76 EE 01            [ 2]    3     ldw x,(1,x)
      002A78 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A7C 9F               [ 1] 3558 	ld a,xl 
      002A7D 5F               [ 1] 3559 	clrw x 
      002A7E CD 07 8B         [ 4] 3560 	call write_byte
      002A81 20 CD            [ 2] 3561 	jra 1$ 
      002A83                       3562 4$: ; write character 
      002A83 F6               [ 1] 3563 	ld a,(x)
      002A84 72 5C 00 01      [ 1] 3564 	inc in 
      002A88 5F               [ 1] 3565 	clrw x 
      002A89 CD 07 8B         [ 4] 3566 	call write_byte 
      002A8C 20 C2            [ 2] 3567 	jra 1$ 
      002A8E                       3568 6$: ; write string 
      002A8E 89               [ 2] 3569 	pushw x 
      002A8F F6               [ 1] 3570 	ld a,(x)
      002A90 72 5C 00 01      [ 1] 3571 	inc in 
      002A94 5F               [ 1] 3572 	clrw x 
      002A95 CD 07 8B         [ 4] 3573 	call write_byte 
      002A98 85               [ 2] 3574 	popw x 
      002A99 F6               [ 1] 3575 	ld a,(x)
      002A9A 27 B4            [ 1] 3576 	jreq 1$
      002A9C 5C               [ 1] 3577 	incw x 
      002A9D 20 EF            [ 2] 3578 	jra 6$ 	
      002A9F                       3579 9$:
      002A9F 81               [ 4] 3580 	ret 
                                   3581 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



                                   3582 
                                   3583 ;---------------------
                                   3584 ;BASIC: CHAR(expr)
                                   3585 ; évaluate expression 
                                   3586 ; and take the 7 least 
                                   3587 ; bits as ASCII character
                                   3588 ; output: 
                                   3589 ; 	A char 
                                   3590 ;---------------------
      002AA0                       3591 func_char:
      002AA0 CD 19 E5         [ 4] 3592 	call func_args 
      002AA3 A1 01            [ 1] 3593 	cp a,#1
      002AA5 27 03            [ 1] 3594 	jreq 1$
      002AA7 CC 16 A5         [ 2] 3595 	jp syntax_error
      002AAA                       3596 1$:	_xpop
      002AAA 90 F6            [ 1]    1     ld a,(y)
      002AAC 93               [ 1]    2     ldw x,y 
      002AAD EE 01            [ 2]    3     ldw x,(1,x)
      002AAF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AB3 9F               [ 1] 3597 	ld a,xl
      002AB4 A4 7F            [ 1] 3598 	and a,#0x7f 
      002AB6 81               [ 4] 3599 	ret
                                   3600 
                                   3601 ;---------------------
                                   3602 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3603 ; extract first character 
                                   3604 ; of string argument 
                                   3605 ; output:
                                   3606 ;    A:X    int24 
                                   3607 ;---------------------
      002AB7                       3608 ascii:
      002AB7 A6 06            [ 1] 3609 	ld a,#TK_LPAREN
      002AB9 CD 19 D8         [ 4] 3610 	call expect 
      002ABC CD 18 0C         [ 4] 3611 	call next_token 
      002ABF A1 02            [ 1] 3612 	cp a,#TK_QSTR 
      002AC1 27 0E            [ 1] 3613 	jreq 1$
      002AC3 A1 04            [ 1] 3614 	cp a,#TK_CHAR 
      002AC5 27 12            [ 1] 3615 	jreq 2$ 
      002AC7 A1 82            [ 1] 3616 	cp a,#TK_CFUNC 
      002AC9 27 03            [ 1] 3617 	jreq 0$
      002ACB CC 16 A5         [ 2] 3618 	jp syntax_error
      002ACE                       3619 0$: ; cfunc 
      002ACE FD               [ 4] 3620 	call (x)
      002ACF 20 0B            [ 2] 3621 	jra 3$
      002AD1                       3622 1$: ; quoted string 
      002AD1 F6               [ 1] 3623 	ld a,(x)
      002AD2 88               [ 1] 3624 	push a  
      002AD3 CD 18 25         [ 4] 3625 	call skip_string
      002AD6 84               [ 1] 3626 	pop a  	
      002AD7 20 03            [ 2] 3627 	jra 3$ 
      002AD9                       3628 2$: ; character 
      002AD9 CD 18 4E         [ 4] 3629 	call get_char 
      002ADC 5F               [ 1] 3630 3$:	clrw x 
      002ADD 02               [ 1] 3631 	rlwa x   
      002ADE                       3632 4$:	_xpush  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      002ADE 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002AE2 90 F7            [ 1]    2     ld (y),a 
      002AE4 90 EF 01         [ 2]    3     ldw (1,y),x 
      002AE7 A6 07            [ 1] 3633 	ld a,#TK_RPAREN 
      002AE9 CD 19 D8         [ 4] 3634 	call expect
      002AEC                       3635 9$:	
      002AEC                       3636 	_xpop  
      002AEC 90 F6            [ 1]    1     ld a,(y)
      002AEE 93               [ 1]    2     ldw x,y 
      002AEF EE 01            [ 2]    3     ldw x,(1,x)
      002AF1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AF5 81               [ 4] 3637 	ret 
                                   3638 
                                   3639 ;---------------------
                                   3640 ;BASIC: KEY
                                   3641 ; wait for a character 
                                   3642 ; received from STDIN 
                                   3643 ; input:
                                   3644 ;	none 
                                   3645 ; output:
                                   3646 ;	a	 character 
                                   3647 ;---------------------
      002AF6                       3648 key:
      002AF6 CD 09 0F         [ 4] 3649 	call getc 
      002AF9 81               [ 4] 3650 	ret
                                   3651 
                                   3652 ;----------------------
                                   3653 ; BASIC: QKEY
                                   3654 ; Return true if there 
                                   3655 ; is a character in 
                                   3656 ; waiting in STDIN 
                                   3657 ; input:
                                   3658 ;  none 
                                   3659 ; output:
                                   3660 ;   A     0|-1
                                   3661 ;-----------------------
      002AFA                       3662 qkey:: 
      002AFA 5F               [ 1] 3663 	clrw x 
      002AFB C6 00 2E         [ 1] 3664 	ld a,rx1_head
      002AFE C0 00 2F         [ 1] 3665 	sub a,rx1_tail 
      002B01 27 03            [ 1] 3666 	jreq 9$ 
      002B03 53               [ 2] 3667 	cplw x
      002B04 A6 FF            [ 1] 3668 	ld a,#255    
      002B06                       3669 9$: 
      002B06 81               [ 4] 3670 	ret 
                                   3671 
                                   3672 ;-------------------------
                                   3673 ; BASIC: UFLASH 
                                   3674 ; return free flash address
                                   3675 ; scan all block starting at 
                                   3676 ; app_space and return 
                                   3677 ; address of first free block 
                                   3678 ; below extended memory.  
                                   3679 ; return 0 if no free block 
                                   3680 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



                                   3681 ;  none 
                                   3682 ; output:
                                   3683 ;	A:X		FLASH free address
                                   3684 ;---------------------------
      002B07                       3685 uflash:
      002B07 72 5F 00 18      [ 1] 3686 	clr farptr 
      002B0B AE 38 80         [ 2] 3687 	ldw x,#app_space 
      002B0E 89               [ 2] 3688 	pushw x 
      002B0F CF 00 19         [ 2] 3689 1$:	ldw ptr16,x 
      002B12 CD 08 6E         [ 4] 3690 	call scan_block 
      002B15 27 0F            [ 1] 3691 	jreq 8$
      002B17 1E 01            [ 2] 3692 	ldw x,(1,sp)
      002B19 1C 00 80         [ 2] 3693 	addw x,#BLOCK_SIZE 
      002B1C 27 04            [ 1] 3694 	jreq 7$ 
      002B1E 1F 01            [ 2] 3695 	ldw (1,sp),x 
      002B20 20 ED            [ 2] 3696 	jra 1$ 
      002B22                       3697 7$: ; no free block 
      002B22 0F 01            [ 1] 3698 	clr (1,sp) 
      002B24 0F 02            [ 1] 3699 	clr (2,sp)
      002B26 85               [ 2] 3700 8$: popw x 
      002B27 4F               [ 1] 3701 	clr a 
      002B28 81               [ 4] 3702 	ret 
                                   3703 
                                   3704 
                                   3705 ;---------------------
                                   3706 ; BASIC: USR(addr,arg)
                                   3707 ; execute a function written 
                                   3708 ; in binary code.
                                   3709 ; input:
                                   3710 ;   addr	routine address 
                                   3711 ;   arg 	is an argument
                                   3712 ;           it can be ignore 
                                   3713 ;           by cally. 
                                   3714 ; output:
                                   3715 ;   xstack 	value returned by cally  
                                   3716 ;---------------------
      002B29                       3717 usr:
      002B29 CD 19 E5         [ 4] 3718 	call func_args 
      002B2C A1 02            [ 1] 3719 	cp a,#2
      002B2E 27 03            [ 1] 3720 	jreq 1$  
      002B30 CC 16 A5         [ 2] 3721 	jp syntax_error 
      002B33                       3722 1$: 
      002B33                       3723 	_at_next ; A:X addr 
      002B33 90 E6 03         [ 1]    1     ld a,(3,y)
      002B36 93               [ 1]    2     ldw x,y 
      002B37 EE 04            [ 2]    3     ldw x,(4,x)
      002B39 CF 00 19         [ 2] 3724 	ldw ptr16,X 
      002B3C                       3725 	_xpop  ; arg 
      002B3C 90 F6            [ 1]    1     ld a,(y)
      002B3E 93               [ 1]    2     ldw x,y 
      002B3F EE 01            [ 2]    3     ldw x,(1,x)
      002B41 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B45                       3726 	_store_top ; overwrite addr 
      002B45 90 F7            [ 1]    1     ld (y),a 
      002B47 90 EF 01         [ 2]    2     ldw (1,y),x     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002B4A 72 CD 00 19      [ 6] 3727     call [ptr16]
      002B4E 81               [ 4] 3728 	ret 
                                   3729 
                                   3730 
                                   3731 ;------------------------------
                                   3732 ; BASIC: BYE 
                                   3733 ; halt mcu in its lowest power mode 
                                   3734 ; wait for reset or external interrupt
                                   3735 ; do a cold start on wakeup.
                                   3736 ;------------------------------
      002B4F                       3737 bye:
      002B4F 72 0D 52 30 FB   [ 2] 3738 	btjf UART1_SR,#UART_SR_TC,.
      002B54 8E               [10] 3739 	halt
      002B55 CC 00 B5         [ 2] 3740 	jp cold_start  
                                   3741 
                                   3742 ;----------------------------------
                                   3743 ; BASIC: SLEEP 
                                   3744 ; halt mcu until reset or external
                                   3745 ; interrupt.
                                   3746 ; Resume progam after SLEEP command
                                   3747 ;----------------------------------
      002B58                       3748 sleep:
      002B58 72 0D 52 30 FB   [ 2] 3749 	btjf UART1_SR,#UART_SR_TC,.
      002B5D 72 16 00 22      [ 1] 3750 	bset flags,#FSLEEP
      002B61 8E               [10] 3751 	halt 
      002B62 81               [ 4] 3752 	ret 
                                   3753 
                                   3754 ;-------------------------------
                                   3755 ; BASIC: PAUSE expr 
                                   3756 ; suspend execution for n msec.
                                   3757 ; input:
                                   3758 ;	none
                                   3759 ; output:
                                   3760 ;	none 
                                   3761 ;------------------------------
      002B63                       3762 pause:
      002B63 CD 1B 2C         [ 4] 3763 	call expression
      002B66 A1 84            [ 1] 3764 	cp a,#TK_INTGR
      002B68 27 03            [ 1] 3765 	jreq 1$ 
      002B6A CC 16 A5         [ 2] 3766 	jp syntax_error
      002B6D                       3767 1$: _xpop 
      002B6D 90 F6            [ 1]    1     ld a,(y)
      002B6F 93               [ 1]    2     ldw x,y 
      002B70 EE 01            [ 2]    3     ldw x,(1,x)
      002B72 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B76                       3768 pause02:
      002B76 CF 00 12         [ 2] 3769 	ldw timer,x 
      002B79 CE 00 12         [ 2] 3770 1$: ldw x,timer 
      002B7C 5D               [ 2] 3771 	tnzw x 
      002B7D 27 03            [ 1] 3772 	jreq 2$
      002B7F 8F               [10] 3773 	wfi 
      002B80 26 F7            [ 1] 3774 	jrne 1$
      002B82                       3775 2$:	
      002B82 81               [ 4] 3776 	ret 
                                   3777 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



                                   3778 ;------------------------------
                                   3779 ; BASIC: AWU expr
                                   3780 ; halt mcu for 'expr' milliseconds
                                   3781 ; use Auto wakeup peripheral
                                   3782 ; all oscillators stopped except LSI
                                   3783 ; range: 1ms - 511ms
                                   3784 ; input:
                                   3785 ;  none
                                   3786 ; output:
                                   3787 ;  none:
                                   3788 ;------------------------------
      002B83                       3789 awu:
      002B83 CD 1B 2C         [ 4] 3790   call expression
      002B86 A1 84            [ 1] 3791   cp a,#TK_INTGR
      002B88 27 03            [ 1] 3792   jreq 1$
      002B8A CC 16 A5         [ 2] 3793   jp syntax_error
      002B8D                       3794 1$: _xpop 
      002B8D 90 F6            [ 1]    1     ld a,(y)
      002B8F 93               [ 1]    2     ldw x,y 
      002B90 EE 01            [ 2]    3     ldw x,(1,x)
      002B92 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B96                       3795 awu02:
      002B96 A3 14 00         [ 2] 3796   cpw x,#5120
      002B99 2B 0C            [ 1] 3797   jrmi 1$ 
      002B9B 35 0F 50 F2      [ 1] 3798   mov AWU_TBR,#15 
      002B9F A6 1E            [ 1] 3799   ld a,#30
      002BA1 62               [ 2] 3800   div x,a
      002BA2 A6 10            [ 1] 3801   ld a,#16
      002BA4 62               [ 2] 3802   div x,a 
      002BA5 20 1E            [ 2] 3803   jra 4$
      002BA7                       3804 1$: 
      002BA7 A3 08 00         [ 2] 3805   cpw x,#2048
      002BAA 2B 09            [ 1] 3806   jrmi 2$ 
      002BAC 35 0E 50 F2      [ 1] 3807   mov AWU_TBR,#14
      002BB0 A6 50            [ 1] 3808   ld a,#80
      002BB2 62               [ 2] 3809   div x,a 
      002BB3 20 10            [ 2] 3810   jra 4$   
      002BB5                       3811 2$:
      002BB5 35 07 50 F2      [ 1] 3812   mov AWU_TBR,#7
      002BB9                       3813 3$:  
                                   3814 ; while X > 64  divide by 2 and increment AWU_TBR 
      002BB9 A3 00 40         [ 2] 3815   cpw x,#64 
      002BBC 23 07            [ 2] 3816   jrule 4$ 
      002BBE 72 5C 50 F2      [ 1] 3817   inc AWU_TBR 
      002BC2 54               [ 2] 3818   srlw x 
      002BC3 20 F4            [ 2] 3819   jra 3$ 
      002BC5                       3820 4$:
      002BC5 9F               [ 1] 3821   ld a, xl
      002BC6 4A               [ 1] 3822   dec a 
      002BC7 27 01            [ 1] 3823   jreq 5$
      002BC9 4A               [ 1] 3824   dec a 	
      002BCA                       3825 5$: 
      002BCA A4 3E            [ 1] 3826   and a,#0x3e 
      002BCC C7 50 F1         [ 1] 3827   ld AWU_APR,a 
      002BCF 72 18 50 F0      [ 1] 3828   bset AWU_CSR,#AWU_CSR_AWUEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002BD3 8E               [10] 3829   halt 
                                   3830 
      002BD4 81               [ 4] 3831   ret 
                                   3832 
                                   3833 ;------------------------------
                                   3834 ; BASIC: TICKS
                                   3835 ; return msec ticks counter value 
                                   3836 ; input:
                                   3837 ; 	none 
                                   3838 ; output:
                                   3839 ;	X 		TK_INTGR
                                   3840 ;-------------------------------
      002BD5                       3841 get_ticks:
      002BD5 C6 00 0F         [ 1] 3842 	ld a,ticks 
      002BD8 CE 00 10         [ 2] 3843 	ldw x,ticks+1 
      002BDB 81               [ 4] 3844 	ret 
                                   3845 
                                   3846 ;------------------------------
                                   3847 ; BASIC: ABS(expr)
                                   3848 ; return absolute value of expr.
                                   3849 ; input:
                                   3850 ;   none
                                   3851 ; output:
                                   3852 ;   xstack    positive int24 
                                   3853 ;-------------------------------
      002BDC                       3854 abs:
      002BDC CD 19 E5         [ 4] 3855 	call func_args 
      002BDF A1 01            [ 1] 3856 	cp a,#1 
      002BE1 27 03            [ 1] 3857 	jreq 0$ 
      002BE3 CC 16 A5         [ 2] 3858 	jp syntax_error
      002BE6                       3859 0$:  
      002BE6 CD 01 F3         [ 4] 3860 	call abs24 
      002BE9                       3861 	_xpop 
      002BE9 90 F6            [ 1]    1     ld a,(y)
      002BEB 93               [ 1]    2     ldw x,y 
      002BEC EE 01            [ 2]    3     ldw x,(1,x)
      002BEE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BF2 81               [ 4] 3862 	ret 
                                   3863 
                                   3864 ;------------------------------
                                   3865 ; BASIC: LSHIFT(expr1,expr2)
                                   3866 ; logical shift left expr1 by 
                                   3867 ; expr2 bits 
                                   3868 ; output:
                                   3869 ; 	A:x 	result 
                                   3870 ;------------------------------
      002BF3                       3871 lshift:
      002BF3 CD 19 E5         [ 4] 3872 	call func_args
      002BF6 A1 02            [ 1] 3873 	cp a,#2 
      002BF8 27 03            [ 1] 3874 	jreq 1$
      002BFA CC 16 A5         [ 2] 3875 	jp syntax_error
      002BFD                       3876 1$: _xpop 
      002BFD 90 F6            [ 1]    1     ld a,(y)
      002BFF 93               [ 1]    2     ldw x,y 
      002C00 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002C02 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C06 9F               [ 1] 3877 	ld a,xl 
      002C07 88               [ 1] 3878 	push a      
      002C08                       3879 	_xpop  ; T>A:X 
      002C08 90 F6            [ 1]    1     ld a,(y)
      002C0A 93               [ 1]    2     ldw x,y 
      002C0B EE 01            [ 2]    3     ldw x,(1,x)
      002C0D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C11 0D 01            [ 1] 3880 	tnz (1,sp) 
      002C13 27 07            [ 1] 3881 	jreq 4$
      002C15 98               [ 1] 3882 2$:	rcf 
      002C16 59               [ 2] 3883 	rlcw x 
      002C17 49               [ 1] 3884 	rlc a 
      002C18 0A 01            [ 1] 3885 	dec (1,sp) 
      002C1A 26 F9            [ 1] 3886 	jrne 2$
      002C1C                       3887 4$: _drop 1 
      002C1C 5B 01            [ 2]    1     addw sp,#1 
      002C1E 81               [ 4] 3888 	ret
                                   3889 
                                   3890 ;------------------------------
                                   3891 ; BASIC: RSHIFT(expr1,expr2)
                                   3892 ; logical shift right expr1 by 
                                   3893 ; expr2 bits.
                                   3894 ; output:
                                   3895 ; 	A 		TK_INTGR
                                   3896 ;   X 		result 
                                   3897 ;------------------------------
      002C1F                       3898 rshift:
      002C1F CD 19 E5         [ 4] 3899 	call func_args
      002C22 A1 02            [ 1] 3900 	cp a,#2 
      002C24 27 03            [ 1] 3901 	jreq 1$
      002C26 CC 16 A5         [ 2] 3902 	jp syntax_error
      002C29                       3903 1$: _xpop ; T>A:X
      002C29 90 F6            [ 1]    1     ld a,(y)
      002C2B 93               [ 1]    2     ldw x,y 
      002C2C EE 01            [ 2]    3     ldw x,(1,x)
      002C2E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C32 9F               [ 1] 3904     ld a,xl 
      002C33 88               [ 1] 3905 	push a    
      002C34                       3906 	_xpop  
      002C34 90 F6            [ 1]    1     ld a,(y)
      002C36 93               [ 1]    2     ldw x,y 
      002C37 EE 01            [ 2]    3     ldw x,(1,x)
      002C39 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C3D 0D 01            [ 1] 3907 	tnz (1,sp)
      002C3F 27 07            [ 1] 3908 	jreq 4$
      002C41 98               [ 1] 3909 2$:	rcf 
      002C42 46               [ 1] 3910 	rrc a 
      002C43 56               [ 2] 3911 	rrcw x 
      002C44 0A 01            [ 1] 3912 	dec (1,sp) 
      002C46 26 F9            [ 1] 3913 	jrne 2$
      002C48                       3914 4$: _drop 1 
      002C48 5B 01            [ 2]    1     addw sp,#1 
      002C4A 81               [ 4] 3915 	ret
                                   3916 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



                                   3917 ;--------------------------
                                   3918 ; BASIC: FCPU integer
                                   3919 ; set CPU frequency 
                                   3920 ;-------------------------- 
                                   3921 
      002C4B                       3922 fcpu:
      002C4B A6 84            [ 1] 3923 	ld a,#TK_INTGR
      002C4D CD 19 D8         [ 4] 3924 	call expect 
      002C50 CD 18 3E         [ 4] 3925 	call get_int24 
      002C53 9F               [ 1] 3926 	ld a,xl 
      002C54 A4 07            [ 1] 3927 	and a,#7 
      002C56 C7 50 C6         [ 1] 3928 	ld CLK_CKDIVR,a 
      002C59 81               [ 4] 3929 	ret 
                                   3930 
                                   3931 ;------------------------------
                                   3932 ; BASIC: PMODE pin#, mode 
                                   3933 ; Arduino pin. 
                                   3934 ; define pin as input or output
                                   3935 ; pin#: {0..15}
                                   3936 ; mode: INPUT|OUTPUT  
                                   3937 ;------------------------------
                           000001  3938 	PINNO=1
                           000001  3939 	VSIZE=1
      002C5A                       3940 pin_mode:
      002C5A                       3941 	_vars VSIZE 
      002C5A 52 01            [ 2]    1     sub sp,#VSIZE 
      002C5C CD 19 EA         [ 4] 3942 	call arg_list 
      002C5F A1 02            [ 1] 3943 	cp a,#2 
      002C61 27 03            [ 1] 3944 	jreq 1$
      002C63 CC 16 A5         [ 2] 3945 	jp syntax_error 
      002C66                       3946 1$: _xpop 
      002C66 90 F6            [ 1]    1     ld a,(y)
      002C68 93               [ 1]    2     ldw x,y 
      002C69 EE 01            [ 2]    3     ldw x,(1,x)
      002C6B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C6F CF 00 19         [ 2] 3947 	ldw ptr16,x ; mode 
      002C72                       3948 	_xpop ; Dx pin 
      002C72 90 F6            [ 1]    1     ld a,(y)
      002C74 93               [ 1]    2     ldw x,y 
      002C75 EE 01            [ 2]    3     ldw x,(1,x)
      002C77 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C7B CD 2C B9         [ 4] 3949 	call select_pin 
      002C7E 6B 01            [ 1] 3950 	ld (PINNO,sp),a  
      002C80 A6 01            [ 1] 3951 	ld a,#1 
      002C82 0D 01            [ 1] 3952 	tnz (PINNO,sp)
      002C84 27 0D            [ 1] 3953 	jreq 4$
      002C86 48               [ 1] 3954 2$:	sll a 
      002C87 0A 01            [ 1] 3955 	dec (PINNO,sp)
      002C89 26 FB            [ 1] 3956 	jrne 2$ 
      002C8B 6B 01            [ 1] 3957 	ld (PINNO,sp),a
      002C8D 7B 01            [ 1] 3958 	ld a,(PINNO,sp)
      002C8F EA 03            [ 1] 3959 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002C91 E7 03            [ 1] 3960 	ld (GPIO_CR1,x),a 
      002C93 A6 01            [ 1] 3961 4$:	ld a,#OUTP
      002C95 C1 00 0E         [ 1] 3962 	cp a,acc8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002C98 27 10            [ 1] 3963 	jreq 6$
                                   3964 ; input mode
                                   3965 ; disable external interrupt 
      002C9A 7B 01            [ 1] 3966 	ld a,(PINNO,sp)
      002C9C 43               [ 1] 3967 	cpl a 
      002C9D E4 04            [ 1] 3968 	and a,(GPIO_CR2,x)
      002C9F E7 04            [ 1] 3969 	ld (GPIO_CR2,x),a 
                                   3970 ;clear bit in DDR for input mode 
      002CA1 7B 01            [ 1] 3971 	ld a,(PINNO,sp)
      002CA3 43               [ 1] 3972 	cpl a 
      002CA4 E4 02            [ 1] 3973 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002CA6 E7 02            [ 1] 3974 	ld (GPIO_DDR,x),a 
      002CA8 20 0C            [ 2] 3975 	jra 9$
      002CAA                       3976 6$: ;output mode  
      002CAA 7B 01            [ 1] 3977 	ld a,(PINNO,sp)
      002CAC EA 02            [ 1] 3978 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002CAE E7 02            [ 1] 3979 	ld (GPIO_DDR,x),a 
      002CB0 7B 01            [ 1] 3980 	ld a,(PINNO,sp)
      002CB2 EA 04            [ 1] 3981 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002CB4 E7 04            [ 1] 3982 	ld (GPIO_CR2,x),a 
      002CB6                       3983 9$:	
      002CB6                       3984 	_drop VSIZE 
      002CB6 5B 01            [ 2]    1     addw sp,#VSIZE 
      002CB8 81               [ 4] 3985 	ret
                                   3986 
                                   3987 ;------------------------
                                   3988 ; select Arduino pin 
                                   3989 ; input:
                                   3990 ;   X 	 {0..15} Arduino Dx 
                                   3991 ; output:
                                   3992 ;   A     stm8s208 pin 
                                   3993 ;   X     base address s208 GPIO port 
                                   3994 ;---------------------------
      002CB9                       3995 select_pin:
      002CB9 58               [ 2] 3996 	sllw x 
      002CBA 1C 2C C9         [ 2] 3997 	addw x,#arduino_to_8s208 
      002CBD FE               [ 2] 3998 	ldw x,(x)
      002CBE 9F               [ 1] 3999 	ld a,xl 
      002CBF 88               [ 1] 4000 	push a 
      002CC0 5E               [ 1] 4001 	swapw x 
      002CC1 A6 05            [ 1] 4002 	ld a,#5 
      002CC3 42               [ 4] 4003 	mul x,a 
      002CC4 1C 50 00         [ 2] 4004 	addw x,#GPIO_BASE 
      002CC7 84               [ 1] 4005 	pop a 
      002CC8 81               [ 4] 4006 	ret 
                                   4007 ; translation from Arduino D0..D15 to stm8s208rb 
      002CC9                       4008 arduino_to_8s208:
      002CC9 03 06                 4009 .byte 3,6 ; D0 
      002CCB 03 05                 4010 .byte 3,5 ; D1 
      002CCD 04 00                 4011 .byte 4,0 ; D2 
      002CCF 02 01                 4012 .byte 2,1 ; D3
      002CD1 06 00                 4013 .byte 6,0 ; D4
      002CD3 02 02                 4014 .byte 2,2 ; D5
      002CD5 02 03                 4015 .byte 2,3 ; D6
      002CD7 03 01                 4016 .byte 3,1 ; D7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002CD9 03 03                 4017 .byte 3,3 ; D8
      002CDB 02 04                 4018 .byte 2,4 ; D9
      002CDD 04 05                 4019 .byte 4,5 ; D10
      002CDF 02 06                 4020 .byte 2,6 ; D11
      002CE1 02 07                 4021 .byte 2,7 ; D12
      002CE3 02 05                 4022 .byte 2,5 ; D13
      002CE5 04 02                 4023 .byte 4,2 ; D14
      002CE7 04 01                 4024 .byte 4,1 ; D15
                                   4025 
                                   4026 
                                   4027 ;------------------------------
                                   4028 ; BASIC: RND(expr)
                                   4029 ; return random number 
                                   4030 ; between 1 and expr inclusive
                                   4031 ; xorshift16 
                                   4032 ; ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4033 ; input:
                                   4034 ; 	none 
                                   4035 ; output:
                                   4036 ;	xstack 	random positive integer 
                                   4037 ;------------------------------
      002CE9                       4038 random:
      002CE9 CD 19 E5         [ 4] 4039 	call func_args 
      002CEC A1 01            [ 1] 4040 	cp a,#1
      002CEE 27 03            [ 1] 4041 	jreq 1$
      002CF0 CC 16 A5         [ 2] 4042 	jp syntax_error
      002CF3                       4043 1$:  
      002CF3                       4044 	_xpop   
      002CF3 90 F6            [ 1]    1     ld a,(y)
      002CF5 93               [ 1]    2     ldw x,y 
      002CF6 EE 01            [ 2]    3     ldw x,(1,x)
      002CF8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CFC 89               [ 2] 4045 	pushw x 
      002CFD 88               [ 1] 4046 	push a  
      002CFE A6 80            [ 1] 4047 	ld a,#0x80 
      002D00 15 01            [ 1] 4048 	bcp a,(1,sp)
      002D02 27 05            [ 1] 4049 	jreq 2$
      002D04 A6 0A            [ 1] 4050 	ld a,#ERR_BAD_VALUE
      002D06 CC 16 A7         [ 2] 4051 	jp tb_error
      002D09                       4052 2$: 
                                   4053 ; acc16=(x<<5)^x 
      002D09 CE 00 14         [ 2] 4054 	ldw x,seedx 
      002D0C 58               [ 2] 4055 	sllw x 
      002D0D 58               [ 2] 4056 	sllw x 
      002D0E 58               [ 2] 4057 	sllw x 
      002D0F 58               [ 2] 4058 	sllw x 
      002D10 58               [ 2] 4059 	sllw x 
      002D11 9E               [ 1] 4060 	ld a,xh 
      002D12 C8 00 14         [ 1] 4061 	xor a,seedx 
      002D15 C7 00 0D         [ 1] 4062 	ld acc16,a 
      002D18 9F               [ 1] 4063 	ld a,xl 
      002D19 C8 00 15         [ 1] 4064 	xor a,seedx+1 
      002D1C C7 00 0E         [ 1] 4065 	ld acc8,a 
                                   4066 ; seedx=seedy 
      002D1F CE 00 16         [ 2] 4067 	ldw x,seedy 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002D22 CF 00 14         [ 2] 4068 	ldw seedx,x  
                                   4069 ; seedy=seedy^(seedy>>1)
      002D25 CE 00 16         [ 2] 4070 	ldw x,seedy 
      002D28 54               [ 2] 4071 	srlw x 
      002D29 9E               [ 1] 4072 	ld a,xh 
      002D2A C8 00 16         [ 1] 4073 	xor a,seedy 
      002D2D C7 00 16         [ 1] 4074 	ld seedy,a  
      002D30 9F               [ 1] 4075 	ld a,xl 
      002D31 C8 00 17         [ 1] 4076 	xor a,seedy+1 
      002D34 C7 00 17         [ 1] 4077 	ld seedy+1,a 
                                   4078 ; acc16>>3 
      002D37 CE 00 0D         [ 2] 4079 	ldw x,acc16 
      002D3A 54               [ 2] 4080 	srlw x 
      002D3B 54               [ 2] 4081 	srlw x 
      002D3C 54               [ 2] 4082 	srlw x 
                                   4083 ; x=acc16^x 
      002D3D 9E               [ 1] 4084 	ld a,xh 
      002D3E C8 00 0D         [ 1] 4085 	xor a,acc16 
      002D41 C7 00 0D         [ 1] 4086 	ld acc16,a 
      002D44 9F               [ 1] 4087 	ld a,xl 
      002D45 C8 00 0E         [ 1] 4088 	xor a,acc8 
      002D48 C7 00 0E         [ 1] 4089 	ld acc8,a 
                                   4090 ; seedy=acc16^seedy 
      002D4B C8 00 17         [ 1] 4091 	xor a,seedy+1
      002D4E 97               [ 1] 4092 	ld xl,a 
      002D4F C6 00 0D         [ 1] 4093 	ld a,acc16 
      002D52 C8 00 16         [ 1] 4094 	xor a,seedy
      002D55 95               [ 1] 4095 	ld xh,a 
      002D56 CF 00 16         [ 2] 4096 	ldw seedy,x 
                                   4097 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002D59 C6 00 15         [ 1] 4098 	ld a,seedx+1
      002D5C A4 7F            [ 1] 4099 	and a,#127
      002D5E                       4100 	_xpush 
      002D5E 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002D62 90 F7            [ 1]    2     ld (y),a 
      002D64 90 EF 01         [ 2]    3     ldw (1,y),x 
      002D67 84               [ 1] 4101 	pop a 
      002D68 85               [ 2] 4102 	popw x 
      002D69                       4103 	_xpush 
      002D69 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002D6D 90 F7            [ 1]    2     ld (y),a 
      002D6F 90 EF 01         [ 2]    3     ldw (1,y),x 
      002D72 CD 03 A1         [ 4] 4104 	call mod24 
      002D75                       4105 	_xpop
      002D75 90 F6            [ 1]    1     ld a,(y)
      002D77 93               [ 1]    2     ldw x,y 
      002D78 EE 01            [ 2]    3     ldw x,(1,x)
      002D7A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D7E 1C 00 01         [ 2] 4106 	addw x,#1 
      002D81 A9 00            [ 1] 4107 	adc a,#0  
      002D83 81               [ 4] 4108 	ret 
                                   4109 
                                   4110 ;---------------------------------
                                   4111 ; BASIC: WORDS 
                                   4112 ; affiche la listes des mots du
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



                                   4113 ; dictionnaire ainsi que le nombre
                                   4114 ; de mots.
                                   4115 ;---------------------------------
                           000001  4116 	WLEN=1 ; word length
                           000002  4117 	LLEN=2 ; character sent to console
                           000003  4118 	WCNT=3 ; count words printed 
                           000003  4119 	VSIZE=3 
      002D84                       4120 words:
      002D84 CD 19 C2         [ 4] 4121 	call cmd_line_only
      002D87 90 89            [ 2] 4122 	pushw y
      002D89                       4123 	_vars VSIZE
      002D89 52 03            [ 2]    1     sub sp,#VSIZE 
      002D8B 0F 02            [ 1] 4124 	clr (LLEN,sp)
      002D8D 0F 03            [ 1] 4125 	clr (WCNT,sp)
      002D8F 90 AE 36 9B      [ 2] 4126 	ldw y,#kword_dict+2
      002D93 93               [ 1] 4127 0$:	ldw x,y
      002D94 F6               [ 1] 4128 	ld a,(x)
      002D95 A4 0F            [ 1] 4129 	and a,#15 
      002D97 6B 01            [ 1] 4130 	ld (WLEN,sp),a 
      002D99 0C 03            [ 1] 4131 	inc (WCNT,sp)
      002D9B 5C               [ 1] 4132 1$:	incw x 
      002D9C F6               [ 1] 4133 	ld a,(x)
      002D9D CD 08 FF         [ 4] 4134 	call putc 
      002DA0 0C 02            [ 1] 4135 	inc (LLEN,sp)
      002DA2 0A 01            [ 1] 4136 	dec (WLEN,sp)
      002DA4 26 F5            [ 1] 4137 	jrne 1$
      002DA6 A6 46            [ 1] 4138 	ld a,#70
      002DA8 11 02            [ 1] 4139 	cp a,(LLEN,sp)
      002DAA 2B 09            [ 1] 4140 	jrmi 2$   
      002DAC A6 20            [ 1] 4141 	ld a,#SPACE 
      002DAE CD 08 FF         [ 4] 4142 	call putc 
      002DB1 0C 02            [ 1] 4143 	inc (LLEN,sp) 
      002DB3 20 07            [ 2] 4144 	jra 3$
      002DB5 A6 0D            [ 1] 4145 2$: ld a,#CR 
      002DB7 CD 08 FF         [ 4] 4146 	call putc 
      002DBA 0F 02            [ 1] 4147 	clr (LLEN,sp)
      002DBC 72 A2 00 02      [ 2] 4148 3$:	subw y,#2 
      002DC0 90 FE            [ 2] 4149 	ldw y,(y)
      002DC2 26 CF            [ 1] 4150 	jrne 0$ 
      002DC4 A6 0D            [ 1] 4151 	ld a,#CR 
      002DC6 CD 08 FF         [ 4] 4152 	call putc  
      002DC9 5F               [ 1] 4153 	clrw x 
      002DCA 7B 03            [ 1] 4154 	ld a,(WCNT,sp)
      002DCC 97               [ 1] 4155 	ld xl,a 
      002DCD CD 18 54         [ 4] 4156 	call prt_i16 
      002DD0 AE 2D DB         [ 2] 4157 	ldw x,#words_count_msg
      002DD3 CD 09 5C         [ 4] 4158 	call puts 
      002DD6                       4159 	_drop VSIZE 
      002DD6 5B 03            [ 2]    1     addw sp,#VSIZE 
      002DD8 90 85            [ 2] 4160 	popw y 
      002DDA 81               [ 4] 4161 	ret 
      002DDB 20 77 6F 72 64 73 20  4162 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



                                   4163 
                                   4164 
                                   4165 ;-----------------------------
                                   4166 ; BASIC: TIMER expr 
                                   4167 ; initialize count down timer 
                                   4168 ;-----------------------------
      002DF1                       4169 set_timer:
      002DF1 CD 19 EA         [ 4] 4170 	call arg_list
      002DF4 A1 01            [ 1] 4171 	cp a,#1 
      002DF6 27 03            [ 1] 4172 	jreq 1$
      002DF8 CC 16 A5         [ 2] 4173 	jp syntax_error
      002DFB                       4174 1$: 
      002DFB                       4175 	_xpop  
      002DFB 90 F6            [ 1]    1     ld a,(y)
      002DFD 93               [ 1]    2     ldw x,y 
      002DFE EE 01            [ 2]    3     ldw x,(1,x)
      002E00 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E04 CF 00 12         [ 2] 4176 	ldw timer,x 
      002E07 81               [ 4] 4177 	ret 
                                   4178 
                                   4179 ;------------------------------
                                   4180 ; BASIC: TIMEOUT 
                                   4181 ; return state of timer 
                                   4182 ; output:
                                   4183 ;   A:X     0 not timeout 
                                   4184 ;   A:X     -1 timeout 
                                   4185 ;------------------------------
      002E08                       4186 timeout:
      002E08 4F               [ 1] 4187 	clr a 
      002E09 CE 00 12         [ 2] 4188 	ldw x,timer 
      002E0C 27 02            [ 1] 4189 	jreq 1$
      002E0E 5F               [ 1] 4190 	clrw x
      002E0F 81               [ 4] 4191 	ret  
      002E10 43               [ 1] 4192 1$:	cpl a
      002E11 53               [ 2] 4193 	cplw x 
      002E12 81               [ 4] 4194 	ret 
                                   4195  	
                                   4196 
                                   4197 
                                   4198 
                                   4199 ;-----------------------------------
                                   4200 ; BASIC: IWDGEN expr1 
                                   4201 ; enable independant watchdog timer
                                   4202 ; expr1 is delay in multiple of 62.5µsec
                                   4203 ; expr1 -> {1..16383}
                                   4204 ;-----------------------------------
      002E13                       4205 enable_iwdg:
      002E13 CD 19 EA         [ 4] 4206 	call arg_list
      002E16 A1 01            [ 1] 4207 	cp a,#1 
      002E18 27 03            [ 1] 4208 	jreq 1$
      002E1A CC 16 A5         [ 2] 4209 	jp syntax_error 
      002E1D                       4210 1$: _xpop  
      002E1D 90 F6            [ 1]    1     ld a,(y)
      002E1F 93               [ 1]    2     ldw x,y 
      002E20 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002E22 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E26 4B 00            [ 1] 4211 	push #0
      002E28 35 CC 50 E0      [ 1] 4212 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002E2C 9E               [ 1] 4213 	ld a,xh 
      002E2D A4 3F            [ 1] 4214 	and a,#0x3f
      002E2F 95               [ 1] 4215 	ld xh,a  
      002E30 A3 00 FF         [ 2] 4216 2$:	cpw x,#255
      002E33 23 06            [ 2] 4217 	jrule 3$
      002E35 0C 01            [ 1] 4218 	inc (1,sp)
      002E37 98               [ 1] 4219 	rcf 
      002E38 56               [ 2] 4220 	rrcw x 
      002E39 20 F5            [ 2] 4221 	jra 2$
      002E3B 35 55 50 E0      [ 1] 4222 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002E3F 84               [ 1] 4223 	pop a  
      002E40 C7 50 E1         [ 1] 4224 	ld IWDG_PR,a 
      002E43 9F               [ 1] 4225 	ld a,xl
      002E44 4A               [ 1] 4226 	dec a 
      002E45 35 55 50 E0      [ 1] 4227 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002E49 C7 50 E2         [ 1] 4228 	ld IWDG_RLR,a 
      002E4C 35 AA 50 E0      [ 1] 4229 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002E50 81               [ 4] 4230 	ret 
                                   4231 
                                   4232 
                                   4233 ;-----------------------------------
                                   4234 ; BASIC: IWDGREF  
                                   4235 ; refresh independant watchdog count down 
                                   4236 ; timer before it reset MCU. 
                                   4237 ;-----------------------------------
      002E51                       4238 refresh_iwdg:
      002E51 35 AA 50 E0      [ 1] 4239 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002E55 81               [ 4] 4240 	ret 
                                   4241 
                                   4242 
                                   4243 ;-------------------------------------
                                   4244 ; BASIC: LOG2(expr)
                                   4245 ; return logarithm base 2 of expr 
                                   4246 ; this is the position of most significant
                                   4247 ; bit set. 
                                   4248 ; input: 
                                   4249 ; output:
                                   4250 ;   A     TK_INTGR 
                                   4251 ;   xstack log2 
                                   4252 ;*********************************
      002E56                       4253 log2:
      002E56 CD 19 E5         [ 4] 4254 	call func_args 
      002E59 A1 01            [ 1] 4255 	cp a,#1 
      002E5B 27 03            [ 1] 4256 	jreq 1$
      002E5D CC 16 A5         [ 2] 4257 	jp syntax_error 
      002E60                       4258 1$: 
      002E60                       4259 	_xpop    
      002E60 90 F6            [ 1]    1     ld a,(y)
      002E62 93               [ 1]    2     ldw x,y 
      002E63 EE 01            [ 2]    3     ldw x,(1,x)
      002E65 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E69 4D               [ 1] 4260 	tnz a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002E6A 26 08            [ 1] 4261 	jrne 2$ 
      002E6C 5D               [ 2] 4262 	tnzw x 
      002E6D 26 05            [ 1] 4263 	jrne 2$
      002E6F A6 0A            [ 1] 4264 	ld a,#ERR_BAD_VALUE
      002E71 CC 16 A7         [ 2] 4265 	jp tb_error 
      002E74 4B 18            [ 1] 4266 2$: push #24 
      002E76 59               [ 2] 4267 3$: rlcw x 
      002E77 49               [ 1] 4268     rlc a 
      002E78 25 04            [ 1] 4269 	jrc 4$
      002E7A 0A 01            [ 1] 4270 	dec (1,sp) 
      002E7C 26 F8            [ 1] 4271 	jrne 3$
      002E7E 5F               [ 1] 4272 4$: clrw x 
      002E7F 84               [ 1] 4273     pop a 
      002E80 4A               [ 1] 4274 	dec a
      002E81 02               [ 1] 4275 	rlwa x  
      002E82                       4276 9$:	
      002E82 81               [ 4] 4277 	ret 
                                   4278 
                                   4279 ;-----------------------------------
                                   4280 ; BASIC: BIT(expr) 
                                   4281 ; expr ->{0..23}
                                   4282 ; return 2^expr 
                                   4283 ; output:
                                   4284 ;    A:X    2^expr 
                                   4285 ;-----------------------------------
      002E83                       4286 bitmask:
      002E83 CD 19 E5         [ 4] 4287     call func_args 
      002E86 A1 01            [ 1] 4288 	cp a,#1
      002E88 27 03            [ 1] 4289 	jreq 1$
      002E8A CC 16 A5         [ 2] 4290 	jp syntax_error 
      002E8D                       4291 1$: _xpop 
      002E8D 90 F6            [ 1]    1     ld a,(y)
      002E8F 93               [ 1]    2     ldw x,y 
      002E90 EE 01            [ 2]    3     ldw x,(1,x)
      002E92 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E96 9F               [ 1] 4292 	ld a,xl 
      002E97 AE 00 01         [ 2] 4293 	ldw x,#1 
      002E9A A4 17            [ 1] 4294 	and a,#23
      002E9C 27 0A            [ 1] 4295 	jreq 9$
      002E9E 88               [ 1] 4296 	push a 
      002E9F 4F               [ 1] 4297 	clr a 
      002EA0                       4298 2$: 
      002EA0 58               [ 2] 4299 	slaw x 
      002EA1 49               [ 1] 4300 	rlc a 	
      002EA2 0A 01            [ 1] 4301 	dec (1,sp)
      002EA4 26 FA            [ 1] 4302 	jrne 2$ 
      002EA6                       4303 4$:
      002EA6                       4304     _drop 1 
      002EA6 5B 01            [ 2]    1     addw sp,#1 
      002EA8 81               [ 4] 4305 9$:	ret 
                                   4306 
                                   4307 ;------------------------------
                                   4308 ; BASIC: DO 
                                   4309 ; initiate a DO ... UNTIL loop 
                                   4310 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



                           000003  4311 	DOLP_ADR=3 
                           000005  4312 	DOLP_INW=5
                           000004  4313 	VSIZE=4 
      002EA9                       4314 do_loop:
      002EA9 85               [ 2] 4315 	popw x 
      002EAA                       4316 	_vars VSIZE 
      002EAA 52 04            [ 2]    1     sub sp,#VSIZE 
      002EAC 89               [ 2] 4317 	pushw x 
      002EAD CE 00 04         [ 2] 4318 	ldw x,basicptr 
      002EB0 1F 03            [ 2] 4319 	ldw (DOLP_ADR,sp),x
      002EB2 CE 00 00         [ 2] 4320 	ldw x,in.w 
      002EB5 1F 05            [ 2] 4321 	ldw (DOLP_INW,sp),x
      002EB7 72 5C 00 1F      [ 1] 4322 	inc loop_depth 
      002EBB 81               [ 4] 4323 	ret 
                                   4324 
                                   4325 ;--------------------------------
                                   4326 ; BASIC: UNTIL expr 
                                   4327 ; loop if exprssion is false 
                                   4328 ; else terminate loop
                                   4329 ;--------------------------------
      002EBC                       4330 until: 
      002EBC 72 5D 00 1F      [ 1] 4331 	tnz loop_depth 
      002EC0 26 03            [ 1] 4332 	jrne 1$ 
      002EC2 CC 16 A5         [ 2] 4333 	jp syntax_error 
      002EC5                       4334 1$: 
      002EC5 CD 1C 45         [ 4] 4335 	call condition  
      002EC8                       4336 	_xpop 
      002EC8 90 F6            [ 1]    1     ld a,(y)
      002ECA 93               [ 1]    2     ldw x,y 
      002ECB EE 01            [ 2]    3     ldw x,(1,x)
      002ECD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ED1 4D               [ 1] 4337 	tnz a 
      002ED2 26 13            [ 1] 4338 	jrne 9$ 
      002ED4 5D               [ 2] 4339 	tnzw x 
      002ED5 26 10            [ 1] 4340 	jrne 9$ 
      002ED7 1E 03            [ 2] 4341 	ldw x,(DOLP_ADR,sp)
      002ED9 CF 00 04         [ 2] 4342 	ldw basicptr,x 
      002EDC E6 02            [ 1] 4343 	ld a,(2,x)
      002EDE C7 00 02         [ 1] 4344 	ld count,a 
      002EE1 1E 05            [ 2] 4345 	ldw x,(DOLP_INW,sp)
      002EE3 CF 00 00         [ 2] 4346 	ldw in.w,x 
      002EE6 81               [ 4] 4347 	ret 
      002EE7                       4348 9$:	; remove loop data from stack  
      002EE7 85               [ 2] 4349 	popw x
      002EE8                       4350 	_drop VSIZE
      002EE8 5B 04            [ 2]    1     addw sp,#VSIZE 
      002EEA 72 5A 00 1F      [ 1] 4351 	dec loop_depth 
      002EEE FC               [ 2] 4352 	jp (x)
                                   4353 
                                   4354 ;--------------------------
                                   4355 ; BASIC: PORTA...PORTI  
                                   4356 ;  return constant value 
                                   4357 ;  PORT  base address 
                                   4358 ;---------------------------
      002EEF                       4359 const_porta:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002EEF AE 50 00         [ 2] 4360 	ldw x,#PA_BASE 
      002EF2 4F               [ 1] 4361 	clr a 
      002EF3 81               [ 4] 4362 	ret 
      002EF4                       4363 const_portb:
      002EF4 AE 50 05         [ 2] 4364 	ldw x,#PB_BASE 
      002EF7 4F               [ 1] 4365 	clr a 
      002EF8 81               [ 4] 4366 	ret 
      002EF9                       4367 const_portc:
      002EF9 AE 50 0A         [ 2] 4368 	ldw x,#PC_BASE 
      002EFC 4F               [ 1] 4369 	clr a 
      002EFD 81               [ 4] 4370 	ret 
      002EFE                       4371 const_portd:
      002EFE AE 50 0F         [ 2] 4372 	ldw x,#PD_BASE 
      002F01 4F               [ 1] 4373 	clr a 
      002F02 81               [ 4] 4374 	ret 
      002F03                       4375 const_porte:
      002F03 AE 50 14         [ 2] 4376 	ldw x,#PE_BASE 
      002F06 4F               [ 1] 4377 	clr a 
      002F07 81               [ 4] 4378 	ret 
      002F08                       4379 const_portf:
      002F08 AE 50 19         [ 2] 4380 	ldw x,#PF_BASE 
      002F0B 4F               [ 1] 4381 	clr a 
      002F0C 81               [ 4] 4382 	ret 
      002F0D                       4383 const_portg:
      002F0D AE 50 1E         [ 2] 4384 	ldw x,#PG_BASE 
      002F10 4F               [ 1] 4385 	clr a 
      002F11 81               [ 4] 4386 	ret 
      002F12                       4387 const_porti:
      002F12 AE 50 28         [ 2] 4388 	ldw x,#PI_BASE 
      002F15 4F               [ 1] 4389 	clr a 
      002F16 81               [ 4] 4390 	ret 
                                   4391 
                                   4392 ;-------------------------------
                                   4393 ; following return constant 
                                   4394 ; related to GPIO register offset 
                                   4395 ;---------------------------------
      002F17                       4396 const_odr:
      002F17 4F               [ 1] 4397 	clr a 
      002F18 AE 00 00         [ 2] 4398 	ldw x,#GPIO_ODR
      002F1B 81               [ 4] 4399 	ret 
      002F1C                       4400 const_idr:
      002F1C 4F               [ 1] 4401 	clr a 
      002F1D AE 00 01         [ 2] 4402 	ldw x,#GPIO_IDR
      002F20 81               [ 4] 4403 	ret 
      002F21                       4404 const_ddr:
      002F21 4F               [ 1] 4405 	clr a
      002F22 AE 00 02         [ 2] 4406 	ldw x,#GPIO_DDR
      002F25 81               [ 4] 4407 	ret 
      002F26                       4408 const_cr1:
      002F26 4F               [ 1] 4409 	clr a 
      002F27 AE 00 03         [ 2] 4410 	ldw x,#GPIO_CR1
      002F2A 81               [ 4] 4411 	ret 
      002F2B                       4412 const_cr2:
      002F2B 4F               [ 1] 4413 	clr a
      002F2C AE 00 04         [ 2] 4414 	ldw x,#GPIO_CR2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002F2F 81               [ 4] 4415 	ret 
                                   4416 ;-------------------------
                                   4417 ; BASIC: POUT 
                                   4418 ;  constant for port mode
                                   4419 ;  used by PMODE 
                                   4420 ;  to set pin as output
                                   4421 ;------------------------
      002F30                       4422 const_output:
      002F30 4F               [ 1] 4423 	clr a 
      002F31 AE 00 01         [ 2] 4424 	ldw x,#OUTP
      002F34 81               [ 4] 4425 	ret 
                                   4426 
                                   4427 ;-------------------------
                                   4428 ; BASIC: PINP 
                                   4429 ;  constant for port mode
                                   4430 ;  used by PMODE 
                                   4431 ;  to set pin as input
                                   4432 ;------------------------
      002F35                       4433 const_input:
      002F35 4F               [ 1] 4434 	clr a  
      002F36 AE 00 00         [ 2] 4435 	ldw x,#INP 
      002F39 81               [ 4] 4436 	ret 
                                   4437 	
                                   4438 ;-----------------------
                                   4439 ; memory area constants
                                   4440 ;-----------------------
      002F3A                       4441 const_eeprom_base:
      002F3A 4F               [ 1] 4442 	clr a  
      002F3B AE 40 00         [ 2] 4443 	ldw x,#EEPROM_BASE 
      002F3E 81               [ 4] 4444 	ret 
                                   4445 
                                   4446 ;---------------------------
                                   4447 ; BASIC: DATA 
                                   4448 ; when the interpreter find 
                                   4449 ; a DATA line it skip it.
                                   4450 ;---------------------------
      002F3F                       4451 data:
      002F3F 55 00 02 00 01   [ 1] 4452 	mov in,count 
      002F44 81               [ 4] 4453 	ret 
                                   4454 
                                   4455 ;------------------------------
                                   4456 ; check if it is a DATA line 
                                   4457 ; input: 
                                   4458 ;    X    line address 
                                   4459 ; output:
                                   4460 ;    Z    set if DATA line 
                                   4461 ;----------------------------
      002F45                       4462 is_data_line:
      002F45 89               [ 2] 4463 	pushw x 
      002F46 E6 03            [ 1] 4464 	ld a,(3,x)
      002F48 A1 80            [ 1] 4465 	cp a,#TK_CMD 
      002F4A 26 05            [ 1] 4466 	jrne 9$
      002F4C EE 04            [ 2] 4467 	ldw x,(4,x)
      002F4E A3 2F 3F         [ 2] 4468 	cpw x,#data  
      002F51 85               [ 2] 4469 9$: popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002F52 81               [ 4] 4470 	ret 
                                   4471 
                                   4472 ;---------------------------------
                                   4473 ; BASIC: RESTORE [line#]
                                   4474 ; set data_ptr to first data line
                                   4475 ; if no DATA found pointer set to
                                   4476 ; zero.
                                   4477 ; if a line# is given as argument 
                                   4478 ; a data line with that number 
                                   4479 ; is searched and the data pointer 
                                   4480 ; is set to it. If there is no 
                                   4481 ; data line with that number 
                                   4482 ; the program is interrupted. 
                                   4483 ;---------------------------------
      002F53                       4484 restore:
      002F53 CD 19 CD         [ 4] 4485 	call runtime_only
      002F56 5F               [ 1] 4486 	clrw x 
      002F57 CF 00 06         [ 2] 4487 	ldw data_ptr,x 
      002F5A CF 00 08         [ 2] 4488 	ldw data_ofs,x 
      002F5D CE 00 1B         [ 2] 4489 	ldw x,txtbgn 
      002F60 CD 18 0C         [ 4] 4490 	call next_token 
      002F63 A1 84            [ 1] 4491 	cp a,#TK_INTGR
      002F65 26 10            [ 1] 4492 	jrne 0$
      002F67 CD 18 3E         [ 4] 4493 	call get_int24
      002F6A 90 89            [ 2] 4494 	pushw y 
      002F6C 4F               [ 1] 4495 	clr a 
      002F6D CD 0C 45         [ 4] 4496 	call search_lineno  
      002F70 90 85            [ 2] 4497 	popw y 
      002F72 5D               [ 2] 4498 	tnzw x 
      002F73 26 17            [ 1] 4499 	jrne set_data_pointer 
      002F75 20 44            [ 2] 4500 	jra data_error 
      002F77                       4501 0$:
      002F77                       4502 	_unget_token  
      002F77 55 00 03 00 01   [ 1]    1      mov in,in.saved  
                                   4503 ; search first DATA line 	
      002F7C C3 00 1D         [ 2] 4504 1$:	cpw x,txtend
      002F7F 24 3A            [ 1] 4505 	jruge data_error 
      002F81                       4506 2$:	
      002F81 CD 2F 45         [ 4] 4507 	call is_data_line 
      002F84 26 00            [ 1] 4508 	jrne 4$
      002F86 CD 2F 99         [ 4] 4509 4$:	call try_next_line 
      002F89 26 FB            [ 1] 4510 	jrne 4$ 
      002F8B 81               [ 4] 4511 	ret 
                                   4512 
                                   4513 ;---------------------
                                   4514 ; set data pointer 
                                   4515 ; variables at new line 
                                   4516 ; input:
                                   4517 ;    X    line address 
                                   4518 ;----------------------
      002F8C                       4519 set_data_pointer:
      002F8C CF 00 06         [ 2] 4520 	ldw data_ptr,x
      002F8F E6 02            [ 1] 4521 	ld a,(2,x)
      002F91 C7 00 09         [ 1] 4522 	ld data_len,a 
      002F94 35 06 00 08      [ 1] 4523 	mov data_ofs,#FIRST_DATA_ITEM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002F98 81               [ 4] 4524 	ret 
                                   4525 
                                   4526 
                                   4527 ;--------------------
                                   4528 ; at end of data line 
                                   4529 ; check if next line 
                                   4530 ; is a data line 
                                   4531 ; input:
                                   4532 ;    X   actual line address 
                                   4533 ;  
                                   4534 ;-------------------
      002F99                       4535 try_next_line: 
      002F99 E6 02            [ 1] 4536 	ld a,(2,x)
      002F9B C7 00 0E         [ 1] 4537 	ld acc8,a 
      002F9E 72 5F 00 0D      [ 1] 4538 	clr acc16 
      002FA2 72 BB 00 0D      [ 2] 4539 	addw x,acc16 
      002FA6 C3 00 1D         [ 2] 4540 	cpw x,txtend 
      002FA9 25 02            [ 1] 4541 	jrult 1$
      002FAB 20 0E            [ 2] 4542 	jra data_error 
      002FAD                       4543 1$:	
      002FAD CD 2F 45         [ 4] 4544 	call is_data_line 
      002FB0 27 04            [ 1] 4545 	jreq 2$
      002FB2 A6 01            [ 1] 4546 	ld a,#1  
      002FB4 20 04            [ 2] 4547 	jra 9$
      002FB6 CD 2F 8C         [ 4] 4548 2$:	call set_data_pointer
      002FB9 4F               [ 1] 4549 	clr a  
      002FBA 81               [ 4] 4550 9$:	ret 
      002FBB                       4551 data_error:	
      002FBB A6 0C            [ 1] 4552     ld a,#ERR_NO_DATA 
      002FBD CC 16 A7         [ 2] 4553 	jp tb_error 
                                   4554 
                                   4555 
                                   4556 ;---------------------------------
                                   4557 ; BASIC: READ 
                                   4558 ; return next data item | 0 
                                   4559 ;---------------------------------
                           000001  4560 	CTX_BPTR=1 
                           000003  4561 	CTX_IN=3 
                           000004  4562 	CTX_COUNT=4 
                           000005  4563 	INT24=5
                           000007  4564 	VSIZE=7 
      002FC0                       4565 read:
      002FC0 CD 19 CD         [ 4] 4566 	call runtime_only
      002FC3                       4567 	_vars  VSIZE 
      002FC3 52 07            [ 2]    1     sub sp,#VSIZE 
      002FC5 CD 20 A7         [ 4] 4568 	call save_context
      002FC8                       4569 read01:	
      002FC8 C6 00 08         [ 1] 4570 	ld a,data_ofs
      002FCB C1 00 09         [ 1] 4571 	cp a,data_len 
      002FCE 27 37            [ 1] 4572 	jreq 2$ ; end of line  
      002FD0                       4573 0$:
      002FD0 CE 00 06         [ 2] 4574 	ldw x,data_ptr 
      002FD3 CF 00 04         [ 2] 4575 	ldw basicptr,x 
      002FD6 55 00 08 00 01   [ 1] 4576 	mov in,data_ofs 
      002FDB 55 00 09 00 02   [ 1] 4577 	mov count,data_len  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      002FE0 CD 1B 2C         [ 4] 4578 	call expression 
      002FE3 A1 84            [ 1] 4579 	cp a,#TK_INTGR 
      002FE5 27 03            [ 1] 4580 	jreq 1$ 
      002FE7 CC 16 A5         [ 2] 4581 	jp syntax_error 
      002FEA                       4582 1$:
      002FEA CD 18 0C         [ 4] 4583 	call next_token ; skip comma
      002FED CE 00 04         [ 2] 4584 	ldw x,basicptr 
      002FF0 CF 00 06         [ 2] 4585 	ldw data_ptr,x 
      002FF3 55 00 01 00 08   [ 1] 4586 	mov data_ofs,in 
      002FF8 CD 20 B7         [ 4] 4587 	call rest_context
      002FFB                       4588 	_xpop 
      002FFB 90 F6            [ 1]    1     ld a,(y)
      002FFD 93               [ 1]    2     ldw x,y 
      002FFE EE 01            [ 2]    3     ldw x,(1,x)
      003000 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003004                       4589 	_drop VSIZE 
      003004 5B 07            [ 2]    1     addw sp,#VSIZE 
      003006 81               [ 4] 4590 	ret 
      003007                       4591 2$: ; end of line reached 
                                   4592 	; try next line 
      003007 CE 00 06         [ 2] 4593 	ldw x,data_ptr  
      00300A CD 2F 99         [ 4] 4594 	call try_next_line
      00300D 27 C1            [ 1] 4595 	jreq 0$ 
      00300F 20 AA            [ 2] 4596 	jra data_error 
                                   4597 
                                   4598 ;---------------------------------
                                   4599 ; BASIC: SPIEN clkdiv, 0|1  
                                   4600 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4601 ; if clkdiv==-1 disable SPI
                                   4602 ; 0|1 -> disable|enable  
                                   4603 ;--------------------------------- 
                           000005  4604 SPI_CS_BIT=5
      003011                       4605 spi_enable:
      003011 CD 19 EA         [ 4] 4606 	call arg_list 
      003014 A1 02            [ 1] 4607 	cp a,#2
      003016 27 03            [ 1] 4608 	jreq 1$
      003018 CC 16 A5         [ 2] 4609 	jp syntax_error 
      00301B                       4610 1$: 
      00301B 72 12 50 C7      [ 1] 4611 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      00301F 85               [ 2] 4612 	popw x  
      003020 5D               [ 2] 4613 	tnzw x 
      003021 27 21            [ 1] 4614 	jreq spi_disable 
      003023 85               [ 2] 4615 	popw x 
      003024 A6 08            [ 1] 4616 	ld a,#(1<<SPI_CR1_BR)
      003026 42               [ 4] 4617 	mul x,a 
      003027 9F               [ 1] 4618 	ld a,xl 
      003028 C7 52 00         [ 1] 4619 	ld SPI_CR1,a 
                                   4620 ; configure ~CS on PE5 (D10 on CN8) as output. 
      00302B 72 1A 50 14      [ 1] 4621 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      00302F 72 1A 50 16      [ 1] 4622 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4623 ; configure SPI as master mode 0.	
      003033 72 14 52 00      [ 1] 4624 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4625 ; ~CS line controlled by sofware 	
      003037 72 12 52 01      [ 1] 4626 	bset SPI_CR2,#SPI_CR2_SSM 
      00303B 72 10 52 01      [ 1] 4627     bset SPI_CR2,#SPI_CR2_SSI 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



                                   4628 ; enable SPI
      00303F 72 1C 52 00      [ 1] 4629 	bset SPI_CR1,#SPI_CR1_SPE 	
      003043 81               [ 4] 4630 	ret 
      003044                       4631 spi_disable:
      003044                       4632 	_drop #2; throw first argument.
      003044 5B 02            [ 2]    1     addw sp,##2 
                                   4633 ; wait spi idle 
      003046 A6 82            [ 1] 4634 1$:	ld a,#0x82 
      003048 C4 52 03         [ 1] 4635 	and a,SPI_SR
      00304B A1 02            [ 1] 4636 	cp a,#2 
      00304D 26 F7            [ 1] 4637 	jrne 1$
      00304F 72 1D 52 00      [ 1] 4638 	bres SPI_CR1,#SPI_CR1_SPE
      003053 72 13 50 C7      [ 1] 4639 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      003057 72 1B 50 16      [ 1] 4640 	bres PE_DDR,#SPI_CS_BIT 
      00305B 81               [ 4] 4641 	ret 
                                   4642 
      00305C                       4643 spi_clear_error:
      00305C A6 78            [ 1] 4644 	ld a,#0x78 
      00305E C5 52 03         [ 1] 4645 	bcp a,SPI_SR 
      003061 27 04            [ 1] 4646 	jreq 1$
      003063 72 5F 52 03      [ 1] 4647 	clr SPI_SR 
      003067 81               [ 4] 4648 1$: ret 
                                   4649 
      003068                       4650 spi_send_byte:
      003068 88               [ 1] 4651 	push a 
      003069 CD 30 5C         [ 4] 4652 	call spi_clear_error
      00306C 84               [ 1] 4653 	pop a 
      00306D 72 03 52 03 FB   [ 2] 4654 	btjf SPI_SR,#SPI_SR_TXE,.
      003072 C7 52 04         [ 1] 4655 	ld SPI_DR,a
      003075 72 01 52 03 FB   [ 2] 4656 	btjf SPI_SR,#SPI_SR_RXNE,.  
      00307A C6 52 04         [ 1] 4657 	ld a,SPI_DR 
      00307D 81               [ 4] 4658 	ret 
                                   4659 
      00307E                       4660 spi_rcv_byte:
      00307E A6 FF            [ 1] 4661 	ld a,#255
      003080 72 01 52 03 E3   [ 2] 4662 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      003085 C6 52 04         [ 1] 4663 	ld a,SPI_DR 
      003088 81               [ 4] 4664 	ret
                                   4665 
                                   4666 ;------------------------------
                                   4667 ; BASIC: SPIWR byte [,byte]
                                   4668 ; write 1 or more byte
                                   4669 ;------------------------------
      003089                       4670 spi_write:
      003089 CD 1B 2C         [ 4] 4671 	call expression
      00308C A1 84            [ 1] 4672 	cp a,#TK_INTGR 
      00308E 27 03            [ 1] 4673 	jreq 1$
      003090 CC 16 A5         [ 2] 4674 	jp syntax_error 
      003093                       4675 1$:	
      003093 9F               [ 1] 4676 	ld a,xl 
      003094 CD 30 68         [ 4] 4677 	call spi_send_byte 
      003097 CD 18 0C         [ 4] 4678 	call next_token 
      00309A A1 08            [ 1] 4679 	cp a,#TK_COMMA 
      00309C 26 02            [ 1] 4680 	jrne 2$ 
      00309E 20 E9            [ 2] 4681 	jra spi_write 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      0030A0 4D               [ 1] 4682 2$:	tnz a 
      0030A1 27 05            [ 1] 4683 	jreq 3$
      0030A3                       4684 	_unget_token  
      0030A3 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0030A8 81               [ 4] 4685 3$:	ret 
                                   4686 
                                   4687 
                                   4688 ;-------------------------------
                                   4689 ; BASIC: SPIRD 	
                                   4690 ; read one byte from SPI 
                                   4691 ;-------------------------------
      0030A9                       4692 spi_read:
      0030A9 CD 30 7E         [ 4] 4693 	call spi_rcv_byte 
      0030AC 5F               [ 1] 4694 	clrw x 
      0030AD 97               [ 1] 4695 	ld xl,a 
      0030AE 4F               [ 1] 4696 	clr a  
      0030AF 81               [ 4] 4697 	ret 
                                   4698 
                                   4699 ;------------------------------
                                   4700 ; BASIC: SPISEL 0|1 
                                   4701 ; set state of ~CS line
                                   4702 ; 0|1 deselect|select  
                                   4703 ;------------------------------
      0030B0                       4704 spi_select:
      0030B0 CD 18 0C         [ 4] 4705 	call next_token 
      0030B3 A1 84            [ 1] 4706 	cp a,#TK_INTGR 
      0030B5 27 03            [ 1] 4707 	jreq 1$
      0030B7 CC 16 A5         [ 2] 4708 	jp syntax_error 
      0030BA 5D               [ 2] 4709 1$: tnzw x  
      0030BB 27 05            [ 1] 4710 	jreq cs_high 
      0030BD 72 1B 50 14      [ 1] 4711 	bres PE_ODR,#SPI_CS_BIT
      0030C1 81               [ 4] 4712 	ret 
      0030C2                       4713 cs_high: 
      0030C2 72 1A 50 14      [ 1] 4714 	bset PE_ODR,#SPI_CS_BIT
      0030C6 81               [ 4] 4715 	ret 
                                   4716 
                                   4717 ;-------------------------------
                                   4718 ; BASIC: PAD 
                                   4719 ; Return pad buffer address.
                                   4720 ;------------------------------
      0030C7                       4721 pad_ref:
      0030C7 AE 16 B8         [ 2] 4722 	ldw x,#pad 
      0030CA 4F               [ 1] 4723 	clr a
      0030CB 81               [ 4] 4724 	ret 
                                   4725 
                                   4726 ;****************************
                                   4727 ; expression stack 
                                   4728 ; manipulation routines
                                   4729 ;****************************
                                   4730 
                                   4731 ;-----------------------------
                                   4732 ; BASIC: PUSH expr|rel|cond 
                                   4733 ; push the result on xtack
                                   4734 ;-----------------------------
      0030CC                       4735 xpush:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      0030CC CD 1C 45         [ 4] 4736 	call condition 
      0030CF 81               [ 4] 4737 	ret 
                                   4738 
                                   4739 ;------------------------------
                                   4740 ; BASIC: POP 
                                   4741 ; pop top of xstack 
                                   4742 ;------------------------------
      0030D0                       4743 xpop:
      0030D0                       4744 	_xpop 
      0030D0 90 F6            [ 1]    1     ld a,(y)
      0030D2 93               [ 1]    2     ldw x,y 
      0030D3 EE 01            [ 2]    3     ldw x,(1,x)
      0030D5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0030D9 81               [ 4] 4745 	ret 
                                   4746 
                                   4747 
                                   4748 ;------------------------------
                                   4749 ; BASIC: ALLOC expr 
                                   4750 ; allocate expr element on xtack 
                                   4751 ;-------------------------------
      0030DA                       4752 xalloc: 
      0030DA CD 1B 2C         [ 4] 4753 	call expression 
      0030DD A1 84            [ 1] 4754 	cp a,#TK_INTGR
      0030DF 27 03            [ 1] 4755 	jreq 1$ 
      0030E1 CC 16 A5         [ 2] 4756 	jp syntax_error
      0030E4                       4757 1$: _xpop 
      0030E4 90 F6            [ 1]    1     ld a,(y)
      0030E6 93               [ 1]    2     ldw x,y 
      0030E7 EE 01            [ 2]    3     ldw x,(1,x)
      0030E9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0030ED 4D               [ 1] 4758 	tnz a 
      0030EE 27 05            [ 1] 4759 	jreq 3$ 
      0030F0 A6 0A            [ 1] 4760 2$:	ld a,#ERR_BAD_VALUE
      0030F2 CC 16 A7         [ 2] 4761 	jp tb_error 
      0030F5 A3 00 14         [ 2] 4762 3$: cpw x,#XSTACK_SIZE 
      0030F8 22 F6            [ 1] 4763 	jrugt 2$
      0030FA A6 03            [ 1] 4764 	ld a,#CELL_SIZE 
      0030FC 42               [ 4] 4765 	mul x,a 
      0030FD CF 00 0D         [ 2] 4766 	ldw acc16,x 
      003100 72 B2 00 0D      [ 2] 4767 	subw y,acc16 
      003104 90 A3 17 38      [ 2] 4768 	cpw y,#xstack_full
      003108 22 05            [ 1] 4769 	jrugt 9$
      00310A A6 01            [ 1] 4770 	ld a,#ERR_MEM_FULL
      00310C CC 16 A7         [ 2] 4771 	jp tb_error 
      00310F                       4772 9$:	 
      00310F 81               [ 4] 4773 	ret 
                                   4774 
                                   4775 
                                   4776 ;------------------------------
                                   4777 ;  BASIC DROP expr 
                                   4778 ;  expr in range {0..XSTACK_SIZE}
                                   4779 ;  discard n elements from xtack
                                   4780 ;------------------------------
      003110                       4781 xdrop:
      003110 CD 1B 2C         [ 4] 4782 	call expression 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      003113 A1 84            [ 1] 4783 	cp a,#TK_INTGR
      003115 27 03            [ 1] 4784 	jreq 1$ 
      003117 CC 16 A5         [ 2] 4785 	jp syntax_error 
      00311A                       4786 1$:	_xpop 
      00311A 90 F6            [ 1]    1     ld a,(y)
      00311C 93               [ 1]    2     ldw x,y 
      00311D EE 01            [ 2]    3     ldw x,(1,x)
      00311F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003123 9F               [ 1] 4787 	ld a,xl 
      003124 A4 1F            [ 1] 4788 	and a,#0x1f 
      003126 5F               [ 1] 4789 	clrw x 
      003127 97               [ 1] 4790 	ld xl,a 
      003128 A6 03            [ 1] 4791 	ld a,#CELL_SIZE 
      00312A 42               [ 4] 4792 	mul x,a 
      00312B CF 00 0D         [ 2] 4793 	ldw acc16,x  
      00312E 72 B9 00 0D      [ 2] 4794 	addw y,acc16 
      003132 90 A3 17 73      [ 2] 4795 	cpw y,#XSTACK_EMPTY 
      003136 23 04            [ 2] 4796 	jrule 9$
      003138 90 AE 17 73      [ 2] 4797 	ldw y,#XSTACK_EMPTY 
      00313C 81               [ 4] 4798 9$:	ret 
                                   4799 
                                   4800 ;-----------------------
                                   4801 ; check if value in A:X 
                                   4802 ; is inside xstack bound
                                   4803 ; output:
                                   4804 ;    X     slot address  
                                   4805 ;-----------------------
      00313D                       4806 xstack_bound:
      00313D 4D               [ 1] 4807 	tnz a 
      00313E 26 16            [ 1] 4808 	jrne 8$ 
      003140 A3 00 14         [ 2] 4809 1$: cpw x,#XSTACK_SIZE 
      003143 22 11            [ 1] 4810 	jrugt 8$
      003145 A6 03            [ 1] 4811 	ld a,#CELL_SIZE 
      003147 42               [ 4] 4812 	mul x,a
      003148 CF 00 0D         [ 2] 4813 	ldw acc16,x 
      00314B 93               [ 1] 4814 	ldw x,y 
      00314C 72 BB 00 0D      [ 2] 4815 	addw x,acc16 
      003150 A3 17 73         [ 2] 4816 	cpw x,#XSTACK_EMPTY 
      003153 24 01            [ 1] 4817 	jruge 8$  
      003155 81               [ 4] 4818 	ret 
      003156 A6 0A            [ 1] 4819 8$: ld a,#ERR_BAD_VALUE
      003158 CC 16 A7         [ 2] 4820 	jp tb_error 
                                   4821 
                                   4822 ;-------------------------
                                   4823 ; BASIC: PUT expr, cond 
                                   4824 ; expr -> slot 
                                   4825 ; cond -> valut to put 
                                   4826 ; on xstack 
                                   4827 ;-------------------------
      00315B                       4828 xput:
      00315B CD 19 EA         [ 4] 4829 	call arg_list 
      00315E A1 02            [ 1] 4830 	cp a,#2 
      003160 27 03            [ 1] 4831 	jreq 1$ 
      003162 CC 16 A5         [ 2] 4832 0$:	jp syntax_error
      003165                       4833 1$: _xpop   ; value to put 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      003165 90 F6            [ 1]    1     ld a,(y)
      003167 93               [ 1]    2     ldw x,y 
      003168 EE 01            [ 2]    3     ldw x,(1,x)
      00316A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00316E 89               [ 2] 4834 	pushw x 
      00316F 88               [ 1] 4835 	push a 
      003170                       4836 	_xpop    ; slot 
      003170 90 F6            [ 1]    1     ld a,(y)
      003172 93               [ 1]    2     ldw x,y 
      003173 EE 01            [ 2]    3     ldw x,(1,x)
      003175 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003179 CD 31 3D         [ 4] 4837 	call xstack_bound
      00317C CF 00 19         [ 2] 4838     ldw ptr16,x 
      00317F 84               [ 1] 4839 	pop a 
      003180 85               [ 2] 4840 	popw x 
      003181 72 C7 00 19      [ 4] 4841 	ld [ptr16],a 
      003185 72 5C 00 1A      [ 1] 4842 	inc ptr8 
      003189 72 CF 00 19      [ 5] 4843 	ldw [ptr16],x 
      00318D 81               [ 4] 4844 	ret 
                                   4845 
                                   4846 ;------------------------
                                   4847 ; BASIC: PICK expr 
                                   4848 ; get nième element on 
                                   4849 ; xtack. 
                                   4850 ;-----------------------
      00318E                       4851 xpick:
      00318E CD 19 E5         [ 4] 4852 	call func_args 
      003191 A1 01            [ 1] 4853 	cp a,#1 
      003193 27 03            [ 1] 4854 	jreq 1$
      003195 CC 16 A5         [ 2] 4855 	jp syntax_error 
      003198                       4856 1$: _xpop 
      003198 90 F6            [ 1]    1     ld a,(y)
      00319A 93               [ 1]    2     ldw x,y 
      00319B EE 01            [ 2]    3     ldw x,(1,x)
      00319D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0031A1 CD 31 3D         [ 4] 4857 	call xstack_bound
      0031A4 F6               [ 1] 4858     ld a,(x)
      0031A5 EE 01            [ 2] 4859 	ldw x,(1,x)				
      0031A7 81               [ 4] 4860 	ret 
                                   4861 
                                   4862 
                                   4863 ;----------------------------
                                   4864 ; BASIC: AUTORUN \C | label  
                                   4865 ;  \C -> cancel autorun 
                                   4866 ;  addr -> register an 
                                   4867 ;    autorun program 
                                   4868 ;    this program execute at 
                                   4869 ;     reset/boot 
                                   4870 ;----------------------------
      0031A8                       4871 cmd_auto_run:
      0031A8 CD 19 C2         [ 4] 4872 	call cmd_line_only
      0031AB CD 18 0C         [ 4] 4873 	call next_token 
      0031AE A1 03            [ 1] 4874 	cp a,#TK_LABEL 
      0031B0 27 19            [ 1] 4875 	jreq 1$ 
      0031B2 A1 04            [ 1] 4876 	cp a,#TK_CHAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      0031B4 26 12            [ 1] 4877 	jrne 0$ 
      0031B6 F6               [ 1] 4878 	ld a,(x)
      0031B7 72 5C 00 01      [ 1] 4879 	inc in 
      0031BB A4 DF            [ 1] 4880 	and a,#0xDF 
      0031BD A1 43            [ 1] 4881 	cp a,#'C 
      0031BF 26 07            [ 1] 4882 	jrne 0$ 
      0031C1 AE 40 00         [ 2] 4883 	ldw x,#EEPROM_BASE 
      0031C4 CD 29 09         [ 4] 4884 	call erase_header
      0031C7 81               [ 4] 4885 	ret 
      0031C8 CC 16 A5         [ 2] 4886 0$:	jp syntax_error
      0031CB 89               [ 2] 4887 1$:	pushw x 
      0031CC CD 18 25         [ 4] 4888 	call skip_string
      0031CF 85               [ 2] 4889 	popw x 
      0031D0 CD 32 01         [ 4] 4890 	call search_program
      0031D3 26 05            [ 1] 4891 	jrne 2$ 
      0031D5 A6 0A            [ 1] 4892 	ld a,#ERR_BAD_VALUE
      0031D7 CC 16 A7         [ 2] 4893 	jp tb_error 
      0031DA 89               [ 2] 4894 2$: pushw x 
      0031DB 72 5F 00 18      [ 1] 4895 	clr farptr 
      0031DF AE 40 00         [ 2] 4896 	ldw x,#EEPROM_BASE
      0031E2 CF 00 19         [ 2] 4897 	ldw ptr16,x 
      0031E5 C6 31 FF         [ 1] 4898 	ld a,AR_SIGN 
      0031E8 5F               [ 1] 4899 	clrw x 	 
      0031E9 CD 07 8B         [ 4] 4900 	call write_byte
      0031EC C6 32 00         [ 1] 4901 	ld a,AR_SIGN+1
      0031EF CD 07 8B         [ 4] 4902 	call write_byte 
      0031F2 7B 01            [ 1] 4903 	ld a,(1,sp)
      0031F4 CD 07 8B         [ 4] 4904 	call write_byte 
      0031F7 7B 02            [ 1] 4905 	ld a,(2,sp)
      0031F9 CD 07 8B         [ 4] 4906 	call write_byte 
      0031FC                       4907 	_drop 2 
      0031FC 5B 02            [ 2]    1     addw sp,#2 
      0031FE 81               [ 4] 4908 	ret 
                                   4909 
      0031FF 41 52                 4910 AR_SIGN: .ascii "AR" ; autorun signature 
                                   4911 
                                   4912 ;-------------------------------
                                   4913 ; search a program in flash 
                                   4914 ; memory with a label at first 
                                   4915 ; that correspond to name 
                                   4916 ; pointed by X 
                                   4917 ; input:
                                   4918 ;    x      *name 
                                   4919 ; output: 
                                   4920 ;    X     prog_addr|0
                                   4921 ;-------------------------------
                           000001  4922 	WLKPTR=1 
                           000003  4923 	PNAME=3
                           000005  4924 	LIMIT=5
                           000007  4925 	YSAVE=7
                           000006  4926 	VSIZE=6 
      003201                       4927 search_program:
      003201 90 89            [ 2] 4928 	pushw y 
      003203                       4929 	_vars VSIZE 
      003203 52 06            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      003205 1F 03            [ 2] 4930 	ldw (PNAME,sp),x 
      003207 CD 2B 07         [ 4] 4931 	call uflash 
      00320A 1F 05            [ 2] 4932 	ldw (LIMIT,sp),x 
      00320C AE 38 80         [ 2] 4933 	ldw x,#app_space 
      00320F 1F 01            [ 2] 4934 1$:	ldw (WLKPTR,sp),x  
      003211 4F               [ 1] 4935 	clr a 
      003212 CD 25 15         [ 4] 4936 	call is_program_addr
      003215 26 10            [ 1] 4937 	jrne 4$
      003217 1C 00 07         [ 2] 4938 	addw x,#7 
      00321A F6               [ 1] 4939 	ld a,(x)
      00321B A1 03            [ 1] 4940 	cp a,#TK_LABEL 
      00321D 26 08            [ 1] 4941 	jrne 4$ 
      00321F 5C               [ 1] 4942 	incw x 
      003220 16 03            [ 2] 4943 	ldw y,(PNAME,sp)
      003222 CD 13 A4         [ 4] 4944 	call strcmp
      003225 26 0A            [ 1] 4945 	jrne 6$
      003227                       4946 4$: 
      003227 CD 29 D0         [ 4] 4947 	call skip_to_next
      00322A 13 05            [ 2] 4948 	cpw x,(LIMIT,sp)
      00322C 25 E1            [ 1] 4949 	jrult 1$
      00322E 5F               [ 1] 4950 	clrw x 
      00322F 20 05            [ 2] 4951 	jra 8$
      003231                       4952 6$: ; found label 
      003231 1E 01            [ 2] 4953 	ldw x,(WLKPTR,sp)
      003233 1C 00 04         [ 2] 4954 	addw x,#4 	
      003236                       4955 8$:	
      003236                       4956 	_drop VSIZE  
      003236 5B 06            [ 2]    1     addw sp,#VSIZE 
      003238 90 85            [ 2] 4957 	popw y 
      00323A 81               [ 4] 4958 	ret 
                                   4959 
                                   4960 
                                   4961 ;-------------------------------
                                   4962 ; BASIC: CHAIN label [, line#]
                                   4963 ; Execute another program like it 
                                   4964 ; is a sub-routine. When the 
                                   4965 ; called program terminate 
                                   4966 ; execution continue at caller 
                                   4967 ; after CHAIN command. 
                                   4968 ; if a line# is given, the 
                                   4969 ; chained program start execution 
                                   4970 ; at this line#.
                                   4971 ;---------------------------------
                           000003  4972 	CHAIN_LN=3 
                           000005  4973 	CHAIN_ADDR=5 
                           000007  4974 	CHAIN_BP=7
                           000009  4975 	CHAIN_IN=9
                           00000A  4976 	CHAIN_COUNT=10 
                           00000B  4977 	CHAIN_TXTBGN=11 
                           00000D  4978 	CHAIN_TXTEND=13 
                           00000C  4979 	VSIZE=12 
                           000004  4980 	DISCARD=4 
      00323B                       4981 cmd_chain:
      00323B 85               [ 2] 4982 	popw x 
      00323C                       4983 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      00323C 52 0C            [ 2]    1     sub sp,#VSIZE 
      00323E 89               [ 2] 4984 	pushw x
      00323F 0F 03            [ 1] 4985 	clr (CHAIN_LN,sp) 
      003241 0F 04            [ 1] 4986 	clr (CHAIN_LN+1,sp)  
      003243 A6 03            [ 1] 4987 	ld a,#TK_LABEL 
      003245 CD 19 D8         [ 4] 4988 	call expect 
      003248 89               [ 2] 4989 	pushw x 
      003249 CD 18 25         [ 4] 4990 	call skip_string
      00324C 85               [ 2] 4991 	popw x 
      00324D CD 32 01         [ 4] 4992 	call search_program 
      003250 5D               [ 2] 4993 	tnzw x  
      003251 26 05            [ 1] 4994 	jrne 1$ 
      003253 A6 0A            [ 1] 4995 0$:	ld a,#ERR_BAD_VALUE
      003255 CC 16 A7         [ 2] 4996 	jp tb_error 
      003258 1F 05            [ 2] 4997 1$: ldw (CHAIN_ADDR,sp), x ; program addr 
      00325A CD 18 0C         [ 4] 4998     call next_token 
      00325D A1 08            [ 1] 4999 	cp a,#TK_COMMA 
      00325F 26 0C            [ 1] 5000 	jrne 4$
      003261 A6 84            [ 1] 5001 	ld a,#TK_INTGR
      003263 CD 19 D8         [ 4] 5002 	call expect 
      003266 CD 18 3E         [ 4] 5003 	call get_int24 
      003269 1F 03            [ 2] 5004 	ldw (CHAIN_LN,sp),x
      00326B 20 05            [ 2] 5005 	jra 6$ 
      00326D                       5006 4$: _unget_token 
      00326D 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      003272                       5007 6$: ; save chain context 
      003272 CE 00 04         [ 2] 5008 	ldw x,basicptr 
      003275 1F 07            [ 2] 5009 	ldw (CHAIN_BP,sp),x 
      003277 CE 00 01         [ 2] 5010 	ldw x,in
      00327A 1F 09            [ 2] 5011 	ldw (CHAIN_IN,sp),x
      00327C CE 00 1B         [ 2] 5012 	ldw x,txtbgn 
      00327F 1F 0B            [ 2] 5013 	ldw (CHAIN_TXTBGN,sp),x
      003281 CE 00 1D         [ 2] 5014 	ldw x,txtend 
      003284 1F 0D            [ 2] 5015 	ldw (CHAIN_TXTEND,sp),x  
                                   5016 ; set chained program context 	
      003286 1E 05            [ 2] 5017 	ldw x,(CHAIN_ADDR,sp)
      003288 CF 00 04         [ 2] 5018 	ldw basicptr,x 
      00328B CF 00 1B         [ 2] 5019 	ldw txtbgn,x 
      00328E 1D 00 02         [ 2] 5020 	subw x,#2
      003291 FE               [ 2] 5021 	ldw x,(x)
      003292 72 FB 05         [ 2] 5022 	addw x,(CHAIN_ADDR,sp)
      003295 CF 00 1D         [ 2] 5023 	ldw txtend,x  
      003298 1E 05            [ 2] 5024 	ldw x,(CHAIN_ADDR,sp)
      00329A E6 02            [ 1] 5025 	ld a,(2,x)
      00329C C7 00 02         [ 1] 5026 	ld count,a 
      00329F 35 03 00 01      [ 1] 5027 	mov in,#3 
      0032A3 1E 03            [ 2] 5028 	ldw x,(CHAIN_LN,sp)
      0032A5 5D               [ 2] 5029 	tnzw x 
      0032A6 27 13            [ 1] 5030 	jreq 8$ 
      0032A8 90 89            [ 2] 5031 	pushw y
      0032AA 4F               [ 1] 5032 	clr a  
      0032AB CD 0C 45         [ 4] 5033 	call search_lineno
      0032AE 90 85            [ 2] 5034 	popw y 
      0032B0 5D               [ 2] 5035 	tnzw x 
      0032B1 27 A0            [ 1] 5036 	jreq 0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      0032B3 CF 00 04         [ 2] 5037 	ldw basicptr,x 
      0032B6 E6 02            [ 1] 5038 	ld a,(2,x)
      0032B8 C7 00 02         [ 1] 5039 	ld count,a 
      0032BB 72 5C 00 34      [ 1] 5040 8$: inc chain_level
      0032BF 85               [ 2] 5041 	popw x 
      0032C0                       5042 	_drop DISCARD
      0032C0 5B 04            [ 2]    1     addw sp,#DISCARD 
      0032C2 FC               [ 2] 5043 	jp (x)
                                   5044 
                                   5045 
                                   5046 ;------------------------------
                                   5047 ;      dictionary 
                                   5048 ; format:
                                   5049 ;   link:   2 bytes 
                                   5050 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   5051 ;   cmd_name: 16 byte max 
                                   5052 ;   code_addr: 2 bytes 
                                   5053 ;------------------------------
                                   5054 	.macro _dict_entry len,name,code_addr 
                                   5055 	.word LINK 
                                   5056 	LINK=.
                                   5057 name:
                                   5058 	.byte len   	
                                   5059 	.ascii "name"
                                   5060 	.word code_addr  
                                   5061 	.endm 
                                   5062 
                           000000  5063 	LINK=0
                                   5064 ; respect alphabetic order for BASIC names from Z-A
                                   5065 ; this sort order is for a cleaner WORDS cmd output. 	
      0032C3                       5066 kword_end:
      0032C3                       5067 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      0032C3 00 00                    1 	.word LINK 
                           0032C5     2 	LINK=.
      0032C5                          3 XOR:
      0032C5 A3                       4 	.byte 3+F_XOR   	
      0032C6 58 4F 52                 5 	.ascii "XOR"
      0032C9 00 8A                    6 	.word TK_XOR  
      0032CB                       5068 	_dict_entry,5,WRITE,write  
      0032CB 32 C5                    1 	.word LINK 
                           0032CD     2 	LINK=.
      0032CD                          3 WRITE:
      0032CD 05                       4 	.byte 5   	
      0032CE 57 52 49 54 45           5 	.ascii "WRITE"
      0032D3 2A 37                    6 	.word write  
      0032D5                       5069 	_dict_entry,5,WORDS,words 
      0032D5 32 CD                    1 	.word LINK 
                           0032D7     2 	LINK=.
      0032D7                          3 WORDS:
      0032D7 05                       4 	.byte 5   	
      0032D8 57 4F 52 44 53           5 	.ascii "WORDS"
      0032DD 2D 84                    6 	.word words  
      0032DF                       5070 	_dict_entry 4,WAIT,wait 
      0032DF 32 D7                    1 	.word LINK 
                           0032E1     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      0032E1                          3 WAIT:
      0032E1 04                       4 	.byte 4   	
      0032E2 57 41 49 54              5 	.ascii "WAIT"
      0032E6 21 6C                    6 	.word wait  
      0032E8                       5071 	_dict_entry,3+F_IFUNC,USR,usr
      0032E8 32 E1                    1 	.word LINK 
                           0032EA     2 	LINK=.
      0032EA                          3 USR:
      0032EA 13                       4 	.byte 3+F_IFUNC   	
      0032EB 55 53 52                 5 	.ascii "USR"
      0032EE 2B 29                    6 	.word usr  
      0032F0                       5072 	_dict_entry,5,UNTIL,until 
      0032F0 32 EA                    1 	.word LINK 
                           0032F2     2 	LINK=.
      0032F2                          3 UNTIL:
      0032F2 05                       4 	.byte 5   	
      0032F3 55 4E 54 49 4C           5 	.ascii "UNTIL"
      0032F8 2E BC                    6 	.word until  
      0032FA                       5073 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      0032FA 32 F2                    1 	.word LINK 
                           0032FC     2 	LINK=.
      0032FC                          3 UFLASH:
      0032FC 16                       4 	.byte 6+F_IFUNC   	
      0032FD 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      003303 2B 07                    6 	.word uflash  
      003305                       5074 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      003305 32 FC                    1 	.word LINK 
                           003307     2 	LINK=.
      003307                          3 UBOUND:
      003307 16                       4 	.byte 6+F_IFUNC   	
      003308 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      00330E 1C F9                    6 	.word ubound  
      003310                       5075 	_dict_entry,4,TONE,tone  
      003310 33 07                    1 	.word LINK 
                           003312     2 	LINK=.
      003312                          3 TONE:
      003312 04                       4 	.byte 4   	
      003313 54 4F 4E 45              5 	.ascii "TONE"
      003317 26 1A                    6 	.word tone  
      003319                       5076 	_dict_entry,2,TO,to
      003319 33 12                    1 	.word LINK 
                           00331B     2 	LINK=.
      00331B                          3 TO:
      00331B 02                       4 	.byte 2   	
      00331C 54 4F                    5 	.ascii "TO"
      00331E 22 D6                    6 	.word to  
      003320                       5077 	_dict_entry,5,TIMER,set_timer
      003320 33 1B                    1 	.word LINK 
                           003322     2 	LINK=.
      003322                          3 TIMER:
      003322 05                       4 	.byte 5   	
      003323 54 49 4D 45 52           5 	.ascii "TIMER"
      003328 2D F1                    6 	.word set_timer  
      00332A                       5078 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      00332A 33 22                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



                           00332C     2 	LINK=.
      00332C                          3 TIMEOUT:
      00332C 17                       4 	.byte 7+F_IFUNC   	
      00332D 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      003334 2E 08                    6 	.word timeout  
      003336                       5079 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      003336 33 2C                    1 	.word LINK 
                           003338     2 	LINK=.
      003338                          3 TICKS:
      003338 15                       4 	.byte 5+F_IFUNC   	
      003339 54 49 43 4B 53           5 	.ascii "TICKS"
      00333E 2B D5                    6 	.word get_ticks  
      003340                       5080 	_dict_entry,4,STOP,stop 
      003340 33 38                    1 	.word LINK 
                           003342     2 	LINK=.
      003342                          3 STOP:
      003342 04                       4 	.byte 4   	
      003343 53 54 4F 50              5 	.ascii "STOP"
      003347 27 83                    6 	.word stop  
      003349                       5081 	_dict_entry,4,STEP,step 
      003349 33 42                    1 	.word LINK 
                           00334B     2 	LINK=.
      00334B                          3 STEP:
      00334B 04                       4 	.byte 4   	
      00334C 53 54 45 50              5 	.ascii "STEP"
      003350 23 1C                    6 	.word step  
      003352                       5082 	_dict_entry,5,SPIWR,spi_write
      003352 33 4B                    1 	.word LINK 
                           003354     2 	LINK=.
      003354                          3 SPIWR:
      003354 05                       4 	.byte 5   	
      003355 53 50 49 57 52           5 	.ascii "SPIWR"
      00335A 30 89                    6 	.word spi_write  
      00335C                       5083 	_dict_entry,6,SPISEL,spi_select
      00335C 33 54                    1 	.word LINK 
                           00335E     2 	LINK=.
      00335E                          3 SPISEL:
      00335E 06                       4 	.byte 6   	
      00335F 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      003365 30 B0                    6 	.word spi_select  
      003367                       5084 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      003367 33 5E                    1 	.word LINK 
                           003369     2 	LINK=.
      003369                          3 SPIRD:
      003369 15                       4 	.byte 5+F_IFUNC   	
      00336A 53 50 49 52 44           5 	.ascii "SPIRD"
      00336F 30 A9                    6 	.word spi_read  
      003371                       5085 	_dict_entry,5,SPIEN,spi_enable 
      003371 33 69                    1 	.word LINK 
                           003373     2 	LINK=.
      003373                          3 SPIEN:
      003373 05                       4 	.byte 5   	
      003374 53 50 49 45 4E           5 	.ascii "SPIEN"
      003379 30 11                    6 	.word spi_enable  
      00337B                       5086 	_dict_entry,5,SLEEP,sleep 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      00337B 33 73                    1 	.word LINK 
                           00337D     2 	LINK=.
      00337D                          3 SLEEP:
      00337D 05                       4 	.byte 5   	
      00337E 53 4C 45 45 50           5 	.ascii "SLEEP"
      003383 2B 58                    6 	.word sleep  
      003385                       5087     _dict_entry,4,SIZE,cmd_size 
      003385 33 7D                    1 	.word LINK 
                           003387     2 	LINK=.
      003387                          3 SIZE:
      003387 04                       4 	.byte 4   	
      003388 53 49 5A 45              5 	.ascii "SIZE"
      00338C 1C CC                    6 	.word cmd_size  
      00338E                       5088 	_dict_entry,4,SAVE,cmd_save 
      00338E 33 87                    1 	.word LINK 
                           003390     2 	LINK=.
      003390                          3 SAVE:
      003390 04                       4 	.byte 4   	
      003391 53 41 56 45              5 	.ascii "SAVE"
      003395 29 23                    6 	.word cmd_save  
      003397                       5089 	_dict_entry 3,RUN,cmd_run
      003397 33 90                    1 	.word LINK 
                           003399     2 	LINK=.
      003399                          3 RUN:
      003399 03                       4 	.byte 3   	
      00339A 52 55 4E                 5 	.ascii "RUN"
      00339D 25 26                    6 	.word cmd_run  
      00339F                       5090 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      00339F 33 99                    1 	.word LINK 
                           0033A1     2 	LINK=.
      0033A1                          3 RSHIFT:
      0033A1 16                       4 	.byte 6+F_IFUNC   	
      0033A2 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0033A8 2C 1F                    6 	.word rshift  
      0033AA                       5091 	_dict_entry,3+F_IFUNC,RND,random 
      0033AA 33 A1                    1 	.word LINK 
                           0033AC     2 	LINK=.
      0033AC                          3 RND:
      0033AC 13                       4 	.byte 3+F_IFUNC   	
      0033AD 52 4E 44                 5 	.ascii "RND"
      0033B0 2C E9                    6 	.word random  
      0033B2                       5092 	_dict_entry,6,RETURN,return 
      0033B2 33 AC                    1 	.word LINK 
                           0033B4     2 	LINK=.
      0033B4                          3 RETURN:
      0033B4 06                       4 	.byte 6   	
      0033B5 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0033BB 24 FF                    6 	.word return  
      0033BD                       5093 	_dict_entry,7,RESTORE,restore 
      0033BD 33 B4                    1 	.word LINK 
                           0033BF     2 	LINK=.
      0033BF                          3 RESTORE:
      0033BF 07                       4 	.byte 7   	
      0033C0 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0033C7 2F 53                    6 	.word restore  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      0033C9                       5094 	_dict_entry 3,REM,remark 
      0033C9 33 BF                    1 	.word LINK 
                           0033CB     2 	LINK=.
      0033CB                          3 REM:
      0033CB 03                       4 	.byte 3   	
      0033CC 52 45 4D                 5 	.ascii "REM"
      0033CF 21 66                    6 	.word remark  
      0033D1                       5095 	_dict_entry,6,REBOOT,cold_start
      0033D1 33 CB                    1 	.word LINK 
                           0033D3     2 	LINK=.
      0033D3                          3 REBOOT:
      0033D3 06                       4 	.byte 6   	
      0033D4 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0033DA 00 B5                    6 	.word cold_start  
      0033DC                       5096 	_dict_entry,4+F_IFUNC,READ,read  
      0033DC 33 D3                    1 	.word LINK 
                           0033DE     2 	LINK=.
      0033DE                          3 READ:
      0033DE 14                       4 	.byte 4+F_IFUNC   	
      0033DF 52 45 41 44              5 	.ascii "READ"
      0033E3 2F C0                    6 	.word read  
      0033E5                       5097 	_dict_entry,4+F_IFUNC,QKEY,qkey
      0033E5 33 DE                    1 	.word LINK 
                           0033E7     2 	LINK=.
      0033E7                          3 QKEY:
      0033E7 14                       4 	.byte 4+F_IFUNC   	
      0033E8 51 4B 45 59              5 	.ascii "QKEY"
      0033EC 2A FA                    6 	.word qkey  
      0033EE                       5098 	_dict_entry,3,PUT,xput 
      0033EE 33 E7                    1 	.word LINK 
                           0033F0     2 	LINK=.
      0033F0                          3 PUT:
      0033F0 03                       4 	.byte 3   	
      0033F1 50 55 54                 5 	.ascii "PUT"
      0033F4 31 5B                    6 	.word xput  
      0033F6                       5099 	_dict_entry,4,PUSH,xpush   
      0033F6 33 F0                    1 	.word LINK 
                           0033F8     2 	LINK=.
      0033F8                          3 PUSH:
      0033F8 04                       4 	.byte 4   	
      0033F9 50 55 53 48              5 	.ascii "PUSH"
      0033FD 30 CC                    6 	.word xpush  
      0033FF                       5100 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      0033FF 33 F8                    1 	.word LINK 
                           003401     2 	LINK=.
      003401                          3 PORTI:
      003401 15                       4 	.byte 5+F_IFUNC   	
      003402 50 4F 52 54 49           5 	.ascii "PORTI"
      003407 2F 12                    6 	.word const_porti  
      003409                       5101 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      003409 34 01                    1 	.word LINK 
                           00340B     2 	LINK=.
      00340B                          3 PORTG:
      00340B 15                       4 	.byte 5+F_IFUNC   	
      00340C 50 4F 52 54 47           5 	.ascii "PORTG"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      003411 2F 0D                    6 	.word const_portg  
      003413                       5102 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      003413 34 0B                    1 	.word LINK 
                           003415     2 	LINK=.
      003415                          3 PORTF:
      003415 15                       4 	.byte 5+F_IFUNC   	
      003416 50 4F 52 54 46           5 	.ascii "PORTF"
      00341B 2F 08                    6 	.word const_portf  
      00341D                       5103 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      00341D 34 15                    1 	.word LINK 
                           00341F     2 	LINK=.
      00341F                          3 PORTE:
      00341F 15                       4 	.byte 5+F_IFUNC   	
      003420 50 4F 52 54 45           5 	.ascii "PORTE"
      003425 2F 03                    6 	.word const_porte  
      003427                       5104 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      003427 34 1F                    1 	.word LINK 
                           003429     2 	LINK=.
      003429                          3 PORTD:
      003429 15                       4 	.byte 5+F_IFUNC   	
      00342A 50 4F 52 54 44           5 	.ascii "PORTD"
      00342F 2E FE                    6 	.word const_portd  
      003431                       5105 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      003431 34 29                    1 	.word LINK 
                           003433     2 	LINK=.
      003433                          3 PORTC:
      003433 15                       4 	.byte 5+F_IFUNC   	
      003434 50 4F 52 54 43           5 	.ascii "PORTC"
      003439 2E F9                    6 	.word const_portc  
      00343B                       5106 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      00343B 34 33                    1 	.word LINK 
                           00343D     2 	LINK=.
      00343D                          3 PORTB:
      00343D 15                       4 	.byte 5+F_IFUNC   	
      00343E 50 4F 52 54 42           5 	.ascii "PORTB"
      003443 2E F4                    6 	.word const_portb  
      003445                       5107 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      003445 34 3D                    1 	.word LINK 
                           003447     2 	LINK=.
      003447                          3 PORTA:
      003447 15                       4 	.byte 5+F_IFUNC   	
      003448 50 4F 52 54 41           5 	.ascii "PORTA"
      00344D 2E EF                    6 	.word const_porta  
      00344F                       5108 	_dict_entry 5,PRINT,print 
      00344F 34 47                    1 	.word LINK 
                           003451     2 	LINK=.
      003451                          3 PRINT:
      003451 05                       4 	.byte 5   	
      003452 50 52 49 4E 54           5 	.ascii "PRINT"
      003457 20 1E                    6 	.word print  
      003459                       5109 	_dict_entry,4+F_IFUNC,POUT,const_output
      003459 34 51                    1 	.word LINK 
                           00345B     2 	LINK=.
      00345B                          3 POUT:
      00345B 14                       4 	.byte 4+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



      00345C 50 4F 55 54              5 	.ascii "POUT"
      003460 2F 30                    6 	.word const_output  
      003462                       5110 	_dict_entry,3+F_IFUNC,POP,xpop 
      003462 34 5B                    1 	.word LINK 
                           003464     2 	LINK=.
      003464                          3 POP:
      003464 13                       4 	.byte 3+F_IFUNC   	
      003465 50 4F 50                 5 	.ascii "POP"
      003468 30 D0                    6 	.word xpop  
      00346A                       5111 	_dict_entry,4,POKE,poke 
      00346A 34 64                    1 	.word LINK 
                           00346C     2 	LINK=.
      00346C                          3 POKE:
      00346C 04                       4 	.byte 4   	
      00346D 50 4F 4B 45              5 	.ascii "POKE"
      003471 22 47                    6 	.word poke  
      003473                       5112 	_dict_entry,5,PMODE,pin_mode 
      003473 34 6C                    1 	.word LINK 
                           003475     2 	LINK=.
      003475                          3 PMODE:
      003475 05                       4 	.byte 5   	
      003476 50 4D 4F 44 45           5 	.ascii "PMODE"
      00347B 2C 5A                    6 	.word pin_mode  
      00347D                       5113 	_dict_entry,4+F_IFUNC,PINP,const_input
      00347D 34 75                    1 	.word LINK 
                           00347F     2 	LINK=.
      00347F                          3 PINP:
      00347F 14                       4 	.byte 4+F_IFUNC   	
      003480 50 49 4E 50              5 	.ascii "PINP"
      003484 2F 35                    6 	.word const_input  
      003486                       5114 	_dict_entry,4+F_IFUNC,PICK,xpick 
      003486 34 7F                    1 	.word LINK 
                           003488     2 	LINK=.
      003488                          3 PICK:
      003488 14                       4 	.byte 4+F_IFUNC   	
      003489 50 49 43 4B              5 	.ascii "PICK"
      00348D 31 8E                    6 	.word xpick  
      00348F                       5115 	_dict_entry,4+F_IFUNC,PEEK,peek 
      00348F 34 88                    1 	.word LINK 
                           003491     2 	LINK=.
      003491                          3 PEEK:
      003491 14                       4 	.byte 4+F_IFUNC   	
      003492 50 45 45 4B              5 	.ascii "PEEK"
      003496 22 68                    6 	.word peek  
      003498                       5116 	_dict_entry,5,PAUSE,pause 
      003498 34 91                    1 	.word LINK 
                           00349A     2 	LINK=.
      00349A                          3 PAUSE:
      00349A 05                       4 	.byte 5   	
      00349B 50 41 55 53 45           5 	.ascii "PAUSE"
      0034A0 2B 63                    6 	.word pause  
      0034A2                       5117 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      0034A2 34 9A                    1 	.word LINK 
                           0034A4     2 	LINK=.
      0034A4                          3 PAD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      0034A4 13                       4 	.byte 3+F_IFUNC   	
      0034A5 50 41 44                 5 	.ascii "PAD"
      0034A8 30 C7                    6 	.word pad_ref  
      0034AA                       5118 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      0034AA 34 A4                    1 	.word LINK 
                           0034AC     2 	LINK=.
      0034AC                          3 OR:
      0034AC 92                       4 	.byte 2+F_OR   	
      0034AD 4F 52                    5 	.ascii "OR"
      0034AF 00 89                    6 	.word TK_OR  
      0034B1                       5119 	_dict_entry,2,ON,cmd_on 
      0034B1 34 AC                    1 	.word LINK 
                           0034B3     2 	LINK=.
      0034B3                          3 ON:
      0034B3 02                       4 	.byte 2   	
      0034B4 4F 4E                    5 	.ascii "ON"
      0034B6 24 45                    6 	.word cmd_on  
      0034B8                       5120 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0034B8 34 B3                    1 	.word LINK 
                           0034BA     2 	LINK=.
      0034BA                          3 ODR:
      0034BA 13                       4 	.byte 3+F_IFUNC   	
      0034BB 4F 44 52                 5 	.ascii "ODR"
      0034BE 2F 17                    6 	.word const_odr  
      0034C0                       5121 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      0034C0 34 BA                    1 	.word LINK 
                           0034C2     2 	LINK=.
      0034C2                          3 NOT:
      0034C2 73                       4 	.byte 3+F_NOT   	
      0034C3 4E 4F 54                 5 	.ascii "NOT"
      0034C6 00 87                    6 	.word TK_NOT  
      0034C8                       5122 	_dict_entry,4,NEXT,next 
      0034C8 34 C2                    1 	.word LINK 
                           0034CA     2 	LINK=.
      0034CA                          3 NEXT:
      0034CA 04                       4 	.byte 4   	
      0034CB 4E 45 58 54              5 	.ascii "NEXT"
      0034CF 23 5E                    6 	.word next  
      0034D1                       5123 	_dict_entry,3,NEW,new
      0034D1 34 CA                    1 	.word LINK 
                           0034D3     2 	LINK=.
      0034D3                          3 NEW:
      0034D3 03                       4 	.byte 3   	
      0034D4 4E 45 57                 5 	.ascii "NEW"
      0034D7 27 CE                    6 	.word new  
      0034D9                       5124 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0034D9 34 D3                    1 	.word LINK 
                           0034DB     2 	LINK=.
      0034DB                          3 LSHIFT:
      0034DB 16                       4 	.byte 6+F_IFUNC   	
      0034DC 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0034E2 2B F3                    6 	.word lshift  
      0034E4                       5125 	_dict_entry,4+F_IFUNC,LOG2,log2 
      0034E4 34 DB                    1 	.word LINK 
                           0034E6     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      0034E6                          3 LOG2:
      0034E6 14                       4 	.byte 4+F_IFUNC   	
      0034E7 4C 4F 47 32              5 	.ascii "LOG2"
      0034EB 2E 56                    6 	.word log2  
      0034ED                       5126 	_dict_entry 4,LIST,cmd_list
      0034ED 34 E6                    1 	.word LINK 
                           0034EF     2 	LINK=.
      0034EF                          3 LIST:
      0034EF 04                       4 	.byte 4   	
      0034F0 4C 49 53 54              5 	.ascii "LIST"
      0034F4 1E F5                    6 	.word cmd_list  
      0034F6                       5127 	_dict_entry 3,LET,let 
      0034F6 34 EF                    1 	.word LINK 
                           0034F8     2 	LINK=.
      0034F8                          3 LET:
      0034F8 03                       4 	.byte 3   	
      0034F9 4C 45 54                 5 	.ascii "LET"
      0034FC 1D 04                    6 	.word let  
      0034FE                       5128 	_dict_entry,3+F_CFUNC,KEY,key 
      0034FE 34 F8                    1 	.word LINK 
                           003500     2 	LINK=.
      003500                          3 KEY:
      003500 23                       4 	.byte 3+F_CFUNC   	
      003501 4B 45 59                 5 	.ascii "KEY"
      003504 2A F6                    6 	.word key  
      003506                       5129 	_dict_entry,7,IWDGREF,refresh_iwdg
      003506 35 00                    1 	.word LINK 
                           003508     2 	LINK=.
      003508                          3 IWDGREF:
      003508 07                       4 	.byte 7   	
      003509 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      003510 2E 51                    6 	.word refresh_iwdg  
      003512                       5130 	_dict_entry,6,IWDGEN,enable_iwdg
      003512 35 08                    1 	.word LINK 
                           003514     2 	LINK=.
      003514                          3 IWDGEN:
      003514 06                       4 	.byte 6   	
      003515 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      00351B 2E 13                    6 	.word enable_iwdg  
      00351D                       5131 	_dict_entry,5,INPUT,input_var  
      00351D 35 14                    1 	.word LINK 
                           00351F     2 	LINK=.
      00351F                          3 INPUT:
      00351F 05                       4 	.byte 5   	
      003520 49 4E 50 55 54           5 	.ascii "INPUT"
      003525 20 C7                    6 	.word input_var  
      003527                       5132 	_dict_entry,2,IF,if 
      003527 35 1F                    1 	.word LINK 
                           003529     2 	LINK=.
      003529                          3 IF:
      003529 02                       4 	.byte 2   	
      00352A 49 46                    5 	.ascii "IF"
      00352C 22 89                    6 	.word if  
      00352E                       5133 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      00352E 35 29                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



                           003530     2 	LINK=.
      003530                          3 IDR:
      003530 13                       4 	.byte 3+F_IFUNC   	
      003531 49 44 52                 5 	.ascii "IDR"
      003534 2F 1C                    6 	.word const_idr  
      003536                       5134 	_dict_entry,3,HEX,hex_base
      003536 35 30                    1 	.word LINK 
                           003538     2 	LINK=.
      003538                          3 HEX:
      003538 03                       4 	.byte 3   	
      003539 48 45 58                 5 	.ascii "HEX"
      00353C 1C B9                    6 	.word hex_base  
      00353E                       5135 	_dict_entry,4,GOTO,goto 
      00353E 35 38                    1 	.word LINK 
                           003540     2 	LINK=.
      003540                          3 GOTO:
      003540 04                       4 	.byte 4   	
      003541 47 4F 54 4F              5 	.ascii "GOTO"
      003545 24 D0                    6 	.word goto  
      003547                       5136 	_dict_entry,5,GOSUB,gosub 
      003547 35 40                    1 	.word LINK 
                           003549     2 	LINK=.
      003549                          3 GOSUB:
      003549 05                       4 	.byte 5   	
      00354A 47 4F 53 55 42           5 	.ascii "GOSUB"
      00354F 24 E3                    6 	.word gosub  
      003551                       5137 	_dict_entry,3,GET,cmd_get 
      003551 35 49                    1 	.word LINK 
                           003553     2 	LINK=.
      003553                          3 GET:
      003553 03                       4 	.byte 3   	
      003554 47 45 54                 5 	.ascii "GET"
      003557 25 E2                    6 	.word cmd_get  
      003559                       5138 	_dict_entry,4+F_IFUNC,FREE,free
      003559 35 53                    1 	.word LINK 
                           00355B     2 	LINK=.
      00355B                          3 FREE:
      00355B 14                       4 	.byte 4+F_IFUNC   	
      00355C 46 52 45 45              5 	.ascii "FREE"
      003560 1C C3                    6 	.word free  
      003562                       5139 	_dict_entry,3,FOR,for 
      003562 35 5B                    1 	.word LINK 
                           003564     2 	LINK=.
      003564                          3 FOR:
      003564 03                       4 	.byte 3   	
      003565 46 4F 52                 5 	.ascii "FOR"
      003568 22 A6                    6 	.word for  
      00356A                       5140 	_dict_entry,4,FCPU,fcpu 
      00356A 35 64                    1 	.word LINK 
                           00356C     2 	LINK=.
      00356C                          3 FCPU:
      00356C 04                       4 	.byte 4   	
      00356D 46 43 50 55              5 	.ascii "FCPU"
      003571 2C 4B                    6 	.word fcpu  
      003573                       5141 	_dict_entry,5,ERASE,cmd_erase 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



      003573 35 6C                    1 	.word LINK 
                           003575     2 	LINK=.
      003575                          3 ERASE:
      003575 05                       4 	.byte 5   	
      003576 45 52 41 53 45           5 	.ascii "ERASE"
      00357B 28 2E                    6 	.word cmd_erase  
      00357D                       5142 	_dict_entry,3,END,cmd_end  
      00357D 35 75                    1 	.word LINK 
                           00357F     2 	LINK=.
      00357F                          3 END:
      00357F 03                       4 	.byte 3   	
      003580 45 4E 44                 5 	.ascii "END"
      003583 25 B6                    6 	.word cmd_end  
      003585                       5143 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      003585 35 7F                    1 	.word LINK 
                           003587     2 	LINK=.
      003587                          3 EEPROM:
      003587 16                       4 	.byte 6+F_IFUNC   	
      003588 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      00358E 2F 3A                    6 	.word const_eeprom_base  
      003590                       5144 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      003590 35 87                    1 	.word LINK 
                           003592     2 	LINK=.
      003592                          3 EEFREE:
      003592 16                       4 	.byte 6+F_IFUNC   	
      003593 45 45 46 52 45 45        5 	.ascii "EEFREE"
      003599 1D 58                    6 	.word func_eefree  
      00359B                       5145 	_dict_entry,4,EDIT,cmd_edit 
      00359B 35 92                    1 	.word LINK 
                           00359D     2 	LINK=.
      00359D                          3 EDIT:
      00359D 04                       4 	.byte 4   	
      00359E 45 44 49 54              5 	.ascii "EDIT"
      0035A2 1F B9                    6 	.word cmd_edit  
      0035A4                       5146 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0035A4 35 9D                    1 	.word LINK 
                           0035A6     2 	LINK=.
      0035A6                          3 DWRITE:
      0035A6 06                       4 	.byte 6+F_CMD   	
      0035A7 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0035AD 27 38                    6 	.word digital_write  
      0035AF                       5147 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      0035AF 35 A6                    1 	.word LINK 
                           0035B1     2 	LINK=.
      0035B1                          3 DROP:
      0035B1 04                       4 	.byte 4   	
      0035B2 44 52 4F 50              5 	.ascii "DROP"
      0035B6 31 10                    6 	.word xdrop  
      0035B8                       5148 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0035B8 35 B1                    1 	.word LINK 
                           0035BA     2 	LINK=.
      0035BA                          3 DREAD:
      0035BA 15                       4 	.byte 5+F_IFUNC   	
      0035BB 44 52 45 41 44           5 	.ascii "DREAD"
      0035C0 27 01                    6 	.word digital_read  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



      0035C2                       5149 	_dict_entry,2,DO,do_loop
      0035C2 35 BA                    1 	.word LINK 
                           0035C4     2 	LINK=.
      0035C4                          3 DO:
      0035C4 02                       4 	.byte 2   	
      0035C5 44 4F                    5 	.ascii "DO"
      0035C7 2E A9                    6 	.word do_loop  
      0035C9                       5150 	_dict_entry,3,DIR,cmd_dir
      0035C9 35 C4                    1 	.word LINK 
                           0035CB     2 	LINK=.
      0035CB                          3 DIR:
      0035CB 03                       4 	.byte 3   	
      0035CC 44 49 52                 5 	.ascii "DIR"
      0035CF 29 E8                    6 	.word cmd_dir  
      0035D1                       5151 	_dict_entry,3,DIM,cmd_dim 
      0035D1 35 CB                    1 	.word LINK 
                           0035D3     2 	LINK=.
      0035D3                          3 DIM:
      0035D3 03                       4 	.byte 3   	
      0035D4 44 49 4D                 5 	.ascii "DIM"
      0035D7 1D D5                    6 	.word cmd_dim  
      0035D9                       5152 	_dict_entry,3,DEC,dec_base
      0035D9 35 D3                    1 	.word LINK 
                           0035DB     2 	LINK=.
      0035DB                          3 DEC:
      0035DB 03                       4 	.byte 3   	
      0035DC 44 45 43                 5 	.ascii "DEC"
      0035DF 1C BE                    6 	.word dec_base  
      0035E1                       5153 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      0035E1 35 DB                    1 	.word LINK 
                           0035E3     2 	LINK=.
      0035E3                          3 DDR:
      0035E3 13                       4 	.byte 3+F_IFUNC   	
      0035E4 44 44 52                 5 	.ascii "DDR"
      0035E7 2F 21                    6 	.word const_ddr  
      0035E9                       5154 	_dict_entry,4,DATA,data  
      0035E9 35 E3                    1 	.word LINK 
                           0035EB     2 	LINK=.
      0035EB                          3 DATA:
      0035EB 04                       4 	.byte 4   	
      0035EC 44 41 54 41              5 	.ascii "DATA"
      0035F0 2F 3F                    6 	.word data  
      0035F2                       5155 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      0035F2 35 EB                    1 	.word LINK 
                           0035F4     2 	LINK=.
      0035F4                          3 CR2:
      0035F4 13                       4 	.byte 3+F_IFUNC   	
      0035F5 43 52 32                 5 	.ascii "CR2"
      0035F8 2F 2B                    6 	.word const_cr2  
      0035FA                       5156 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      0035FA 35 F4                    1 	.word LINK 
                           0035FC     2 	LINK=.
      0035FC                          3 CR1:
      0035FC 13                       4 	.byte 3+F_IFUNC   	
      0035FD 43 52 31                 5 	.ascii "CR1"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



      003600 2F 26                    6 	.word const_cr1  
      003602                       5157 	_dict_entry,5,CONST,cmd_const 
      003602 35 FC                    1 	.word LINK 
                           003604     2 	LINK=.
      003604                          3 CONST:
      003604 05                       4 	.byte 5   	
      003605 43 4F 4E 53 54           5 	.ascii "CONST"
      00360A 1D C8                    6 	.word cmd_const  
      00360C                       5158 	_dict_entry,4+F_CFUNC,CHAR,func_char
      00360C 36 04                    1 	.word LINK 
                           00360E     2 	LINK=.
      00360E                          3 CHAR:
      00360E 24                       4 	.byte 4+F_CFUNC   	
      00360F 43 48 41 52              5 	.ascii "CHAR"
      003613 2A A0                    6 	.word func_char  
      003615                       5159 	_dict_entry,5,CHAIN,cmd_chain
      003615 36 0E                    1 	.word LINK 
                           003617     2 	LINK=.
      003617                          3 CHAIN:
      003617 05                       4 	.byte 5   	
      003618 43 48 41 49 4E           5 	.ascii "CHAIN"
      00361D 32 3B                    6 	.word cmd_chain  
      00361F                       5160 	_dict_entry,3,BYE,bye 
      00361F 36 17                    1 	.word LINK 
                           003621     2 	LINK=.
      003621                          3 BYE:
      003621 03                       4 	.byte 3   	
      003622 42 59 45                 5 	.ascii "BYE"
      003625 2B 4F                    6 	.word bye  
      003627                       5161 	_dict_entry,5,BTOGL,bit_toggle
      003627 36 21                    1 	.word LINK 
                           003629     2 	LINK=.
      003629                          3 BTOGL:
      003629 05                       4 	.byte 5   	
      00362A 42 54 4F 47 4C           5 	.ascii "BTOGL"
      00362F 21 EE                    6 	.word bit_toggle  
      003631                       5162 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      003631 36 29                    1 	.word LINK 
                           003633     2 	LINK=.
      003633                          3 BTEST:
      003633 15                       4 	.byte 5+F_IFUNC   	
      003634 42 54 45 53 54           5 	.ascii "BTEST"
      003639 22 10                    6 	.word bit_test  
      00363B                       5163 	_dict_entry,4,BSET,bit_set 
      00363B 36 33                    1 	.word LINK 
                           00363D     2 	LINK=.
      00363D                          3 BSET:
      00363D 04                       4 	.byte 4   	
      00363E 42 53 45 54              5 	.ascii "BSET"
      003642 21 A9                    6 	.word bit_set  
      003644                       5164 	_dict_entry,4,BRES,bit_reset
      003644 36 3D                    1 	.word LINK 
                           003646     2 	LINK=.
      003646                          3 BRES:
      003646 04                       4 	.byte 4   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]



      003647 42 52 45 53              5 	.ascii "BRES"
      00364B 21 CB                    6 	.word bit_reset  
      00364D                       5165 	_dict_entry,3+F_IFUNC,BIT,bitmask
      00364D 36 46                    1 	.word LINK 
                           00364F     2 	LINK=.
      00364F                          3 BIT:
      00364F 13                       4 	.byte 3+F_IFUNC   	
      003650 42 49 54                 5 	.ascii "BIT"
      003653 2E 83                    6 	.word bitmask  
      003655                       5166 	_dict_entry,3,AWU,awu 
      003655 36 4F                    1 	.word LINK 
                           003657     2 	LINK=.
      003657                          3 AWU:
      003657 03                       4 	.byte 3   	
      003658 41 57 55                 5 	.ascii "AWU"
      00365B 2B 83                    6 	.word awu  
      00365D                       5167 	_dict_entry,7,AUTORUN,cmd_auto_run
      00365D 36 57                    1 	.word LINK 
                           00365F     2 	LINK=.
      00365F                          3 AUTORUN:
      00365F 07                       4 	.byte 7   	
      003660 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      003667 31 A8                    6 	.word cmd_auto_run  
      003669                       5168 	_dict_entry,3+F_IFUNC,ASC,ascii
      003669 36 5F                    1 	.word LINK 
                           00366B     2 	LINK=.
      00366B                          3 ASC:
      00366B 13                       4 	.byte 3+F_IFUNC   	
      00366C 41 53 43                 5 	.ascii "ASC"
      00366F 2A B7                    6 	.word ascii  
      003671                       5169 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      003671 36 6B                    1 	.word LINK 
                           003673     2 	LINK=.
      003673                          3 AND:
      003673 83                       4 	.byte 3+F_AND   	
      003674 41 4E 44                 5 	.ascii "AND"
      003677 00 88                    6 	.word TK_AND  
      003679                       5170 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      003679 36 73                    1 	.word LINK 
                           00367B     2 	LINK=.
      00367B                          3 ALLOC:
      00367B 05                       4 	.byte 5   	
      00367C 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      003681 30 DA                    6 	.word xalloc  
      003683                       5171 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      003683 36 7B                    1 	.word LINK 
                           003685     2 	LINK=.
      003685                          3 ADCREAD:
      003685 17                       4 	.byte 7+F_IFUNC   	
      003686 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      00368D 26 C5                    6 	.word analog_read  
      00368F                       5172 	_dict_entry,5,ADCON,power_adc 
      00368F 36 85                    1 	.word LINK 
                           003691     2 	LINK=.
      003691                          3 ADCON:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]



      003691 05                       4 	.byte 5   	
      003692 41 44 43 4F 4E           5 	.ascii "ADCON"
      003697 26 75                    6 	.word power_adc  
      003699                       5173 kword_dict::
      003699                       5174 	_dict_entry,3+F_IFUNC,ABS,abs
      003699 36 91                    1 	.word LINK 
                           00369B     2 	LINK=.
      00369B                          3 ABS:
      00369B 13                       4 	.byte 3+F_IFUNC   	
      00369C 41 42 53                 5 	.ascii "ABS"
      00369F 2B DC                    6 	.word abs  
                                   5175 
                                   5176 
                                   5177 
                                   5178 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      0036A1                         30 test:
      0036A1                         31     _vars VSIZE 
      0036A1 52 08            [ 2]    1     sub sp,#VSIZE 
      0036A3 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      0036A6 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      0036A8 CE 00 0F         [ 2]   34     ldw x,ticks 
      0036AB 1F 01            [ 2]   35     ldw (T,sp),x
      0036AD                         36 1$: ; test add24 
      0036AD A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      0036AF AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      0036B2 C7 00 0C         [ 1]   39     ld acc24,a 
      0036B5 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      0036B8 A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      0036BA AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      0036BD CD 01 7E         [ 4]   43     call add24 
      0036C0 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      0036C2 1D 00 01         [ 2]   45     subw x,#1
      0036C5 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      0036C7 26 E4            [ 1]   47     jrne 1$
      0036C9 CD 18 6B         [ 4]   48     call prt_acc24
      0036CC A6 20            [ 1]   49     ld a,#SPACE 
      0036CE CD 08 FF         [ 4]   50     call putc 
      0036D1 CE 00 0F         [ 2]   51     ldw x,ticks 
      0036D4 72 F0 01         [ 2]   52     subw x,(T,sp)
      0036D7 CD 18 54         [ 4]   53     call prt_i16  
      0036DA A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]



      0036DC CD 08 FF         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      0036DF CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      0036E2 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      0036E4 CE 00 0F         [ 2]   60     ldw x,ticks 
      0036E7 1F 01            [ 2]   61     ldw (T,sp),x 
      0036E9                         62 2$: 
      0036E9 A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      0036EB AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      0036EE C7 00 0C         [ 1]   65     ld acc24,a 
      0036F1 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      0036F4 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      0036F6 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      0036F9 CD 02 79         [ 4]   69     call mul24 
      0036FC 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      0036FE 1D 00 01         [ 2]   71     subw x,#1
      003701 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003703 26 E4            [ 1]   73     jrne 2$ 
      003705 CD 18 6B         [ 4]   74    call prt_acc24 
      003708 A6 20            [ 1]   75    ld a,#SPACE 
      00370A CD 08 FF         [ 4]   76    call putc 
      00370D CE 00 0F         [ 2]   77     ldw x,ticks 
      003710 72 F0 01         [ 2]   78     subw x,(T,sp)
      003713 CD 18 54         [ 4]   79     call prt_i16 
      003716 A6 0D            [ 1]   80     ld a,#CR 
      003718 CD 08 FF         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      00371B CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      00371E 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      003720 CE 00 0F         [ 2]   85     ldw x,ticks 
      003723 1F 01            [ 2]   86     ldw (T,sp),x 
      003725                         87 3$: 
      003725 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003727 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      00372A C7 00 0C         [ 1]   90     ld acc24,a 
      00372D CF 00 0D         [ 2]   91     ldw acc24+1,x  
      003730 A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      003732 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      003735 CD 02 79         [ 4]   94     call mul24 
      003738 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      00373A 1D 00 01         [ 2]   96     subw x,#1
      00373D 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      00373F 26 E4            [ 1]   98     jrne 3$ 
      003741 CD 18 6B         [ 4]   99     call prt_acc24    
      003744 A6 20            [ 1]  100     ld a,#SPACE 
      003746 CD 08 FF         [ 4]  101     call putc 
      003749 CE 00 0F         [ 2]  102     ldw x,ticks 
      00374C 72 F0 01         [ 2]  103     subw x,(T,sp)
      00374F CD 18 54         [ 4]  104     call prt_i16 
      003752 A6 0D            [ 1]  105     ld a,#CR 
      003754 CD 08 FF         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      003757 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      00375A 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]



      00375C CE 00 0F         [ 2]  110     ldw x,ticks 
      00375F 1F 01            [ 2]  111     ldw (T,sp),x 
      003761                        112 4$:
      003761 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      003763 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      003766 C7 00 0C         [ 1]  115     ld acc24,a 
      003769 CF 00 0D         [ 2]  116     ldw acc24+1,x  
      00376C A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      00376E AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      003771 CD 02 79         [ 4]  119     call mul24 
      003774 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      003776 1D 00 01         [ 2]  121     subw x,#1
      003779 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      00377B 26 E4            [ 1]  123     jrne 4$ 
      00377D CD 18 6B         [ 4]  124     call prt_acc24 
      003780 A6 20            [ 1]  125     ld a,#SPACE 
      003782 CD 08 FF         [ 4]  126     call putc 
      003785 CE 00 0F         [ 2]  127     ldw x,ticks 
      003788 72 F0 01         [ 2]  128     subw x,(T,sp)
      00378B CD 18 54         [ 4]  129     call prt_i16 
      00378E A6 0D            [ 1]  130     ld a,#CR 
      003790 CD 08 FF         [ 4]  131     call putc 
                                    132 ; test abs24 
      003793 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      003796 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      003798 CE 00 0F         [ 2]  135     ldw x,ticks 
      00379B 1F 01            [ 2]  136     ldw (T,sp),x 
      00379D                        137 5$: 
      00379D A6 FF            [ 1]  138     ld a,#0xff
      00379F AE FF FF         [ 2]  139     ldw x,#0xffff
      0037A2 CD 01 F3         [ 4]  140     call abs24 
      0037A5 C7 00 0C         [ 1]  141     ld acc24,a 
      0037A8 CF 00 0D         [ 2]  142     ldw acc24+1,x
      0037AB 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      0037AD 1D 00 01         [ 2]  144     subw x,#1
      0037B0 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      0037B2 26 E9            [ 1]  146     jrne 5$ 
      0037B4 CD 18 6B         [ 4]  147     call prt_acc24 
      0037B7 A6 20            [ 1]  148     ld a,#SPACE 
      0037B9 CD 08 FF         [ 4]  149     call putc 
      0037BC CE 00 0F         [ 2]  150     ldw x,ticks 
      0037BF 72 F0 01         [ 2]  151     subw x,(T,sp)
      0037C2 CD 18 54         [ 4]  152     call prt_i16 
      0037C5                        153 6$:
      0037C5 A6 0D            [ 1]  154     ld a,#CR 
      0037C7 CD 08 FF         [ 4]  155     call putc 
      0037CA CD 38 10         [ 4]  156     call read_integer 
      0037CD 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      0037D2 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      0037D7 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      0037DC CD 38 10         [ 4]  160     call read_integer 
      0037DF C6 00 0C         [ 1]  161     ld a,acc24 
      0037E2 CE 00 0D         [ 2]  162     ldw x,acc16 
      0037E5 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      0037EA 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]



      0037EF 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      0037F4 CD 03 07         [ 4]  166     call div24 
      0037F7 88               [ 1]  167     push a 
      0037F8 89               [ 2]  168     pushw x 
      0037F9 CD 18 6B         [ 4]  169     call prt_acc24 
      0037FC A6 20            [ 1]  170     ld a,#SPACE 
      0037FE CD 08 FF         [ 4]  171     call putc 
      003801 85               [ 2]  172     popw x
      003802 CF 00 0D         [ 2]  173     ldw acc16,x  
      003805 32 00 0C         [ 1]  174     pop acc24 
      003808 CD 18 6B         [ 4]  175     call prt_acc24
      00380B 20 B8            [ 2]  176     jra 6$
      00380D                        177     _drop VSIZE 
      00380D 5B 08            [ 2]    1     addw sp,#VSIZE 
      00380F 81               [ 4]  178     ret 
                                    179 
                                    180 
      003810                        181 read_integer:
      003810 A6 3F            [ 1]  182     ld a,#'? 
      003812 CD 08 FF         [ 4]  183     call putc  
      003815 72 5F 00 02      [ 1]  184 	clr count  
      003819 CD 0A 61         [ 4]  185 	call readln 
      00381C AE 16 68         [ 2]  186 	ldw x,#tib 
      00381F 3B 00 02         [ 1]  187 	push count
      003822 4B 00            [ 1]  188 	push #0 
      003824 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003827 5C               [ 1]  190 	incw x 
      003828                        191 	_drop 2 
      003828 5B 02            [ 2]    1     addw sp,#2 
      00382A 72 5F 00 01      [ 1]  192 	clr in 
      00382E CD 0E F5         [ 4]  193 	call get_token
      003831 A1 84            [ 1]  194 	cp a,#TK_INTGR
      003833 27 0F            [ 1]  195 	jreq 3$ 
      003835 A1 11            [ 1]  196 	cp a,#TK_MINUS
      003837 CD 0E F5         [ 4]  197 	call get_token 
      00383A A1 84            [ 1]  198 	cp a,#TK_INTGR 
      00383C 27 03            [ 1]  199 	jreq 2$
      00383E CC 16 A5         [ 2]  200 	jp syntax_error
      003841                        201 2$:
      003841 CD 02 1D         [ 4]  202 	call neg_acc24  	
      003844                        203 3$: 
      003844 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003880                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003880                         30 app_space::
      003880 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003882 00 00                   32 app_size: .word 0 
      003884                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        00369B R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      003691 R
    ADCON_ID=  000002     |   4 ADCREAD    003685 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 ALLOC      00367B R   |   4 AND        003673 R   |     AND_IDX =  0000FA 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 AR_SIGN    0031FF R   |   4 ASC        00366B R   |     ASC_IDX =  000006 
    ATMP    =  000001     |     ATTRIB  =  000002     |   4 AUTORUN    00365F R
  4 AUTO_RUN   00015C R   |   4 AWU        003657 R   |   4 AWUHandl   000004 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  000008     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   4 BIT        00364F R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000A 
    BLOCKS  =  000005     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |   4 BRES       003646 R
    BRES_IDX=  00000C     |     BS      =  000008     |   4 BSET       00363D R
    BSET_IDX=  00000E     |     BSIZE   =  000006     |   4 BTEST      003633 R
    BTEST_ID=  000010     |   4 BTOGL      003629 R   |     BTOGL_ID=  000012 
    BTW     =  000001     |   4 BYE        003621 R   |     BYE_IDX =  000014 
    C       =  000001     |     CAN     =  000018     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CCOMMA  =  000001 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000003     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   4 CHAIN      003617 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    CHAIN_AD=  000005     |     CHAIN_BP=  000007     |     CHAIN_CN=  000008 
    CHAIN_CO=  00000A     |     CHAIN_IN=  000009     |     CHAIN_LN=  000003 
    CHAIN_TX=  00000B     |     CHAIN_TX=  00000D     |   4 CHAR       00360E R
    CHAR_IDX=  000016     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMD_END =  000002     |     CNT     =  000006 
    CNTR    =  000003     |     CNT_LO  =  000004     |     CODE_ADD=  000001 
    COMMA   =  00002C     |   4 CONST      003604 R   |     CONST_ID=  0000B6 
    COUNT   =  000003     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   4 CR1        0035FC R
    CR1_IDX =  00001A     |   4 CR2        0035F4 R   |     CR2_IDX =  000018 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000009     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       0035EB R
    DATA_IDX=  00001C     |     DC1     =  000011     |     DC2     =  000012 
    DC3     =  000013     |     DC4     =  000014     |   4 DDR        0035E3 R
    DDR_IDX =  00001E     |     DEBUG   =  000001     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   4 DEC        0035DB R   |     DEC_IDX =  000020 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  4 DIM        0035D3 R   |   4 DIR        0035CB R   |     DISCARD =  000004 
    DIVISOR =  000001     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         0035C4 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000022 
  4 DREAD      0035BA R   |     DREAD_ID=  000024     |   4 DROP       0035B1 R
  4 DWRITE     0035A6 R   |     DWRITE_I=  000026     |   4 EDIT       00359D R
    EDIT_IDX=  000028     |   4 EEFREE     003592 R   |     EEFREE_I=  0000B8 
  4 EEPROM     003587 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002A     |     EEPROM_S=  000800     |     EM      =  000019 
  4 END        00357F R   |     END_IDX =  00002C     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   4 ERASE      003575 R
  4 ERASED     0029C3 R   |     ERASE_ID=  00002E     |     ERR_BAD_=  00000A 
    ERR_BUF_=  00000F     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_D=  00000C     |     ERR_NO_F=  00000E     |     ERR_NO_L=  000005 
    ERR_NO_P=  00000D     |     ERR_NO_P=  000012     |     ERR_OVER=  000010 
    ERR_RD_O=  000011     |     ERR_RUN_=  000006     |     ERR_SYNT=  000002 
    ESC     =  00001B     |     ETB     =  000017     |     ETX     =  000003 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FBREAK  =  000004 
    FCOMP   =  000005     |   4 FCPU       00356C R   |     FCPU_IDX=  000030 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |   4 FLASH_ME   001ED5 R   |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLN_REJE=  000006     |     FLOOP   =  000002     |     FLSI    =  01F400 
  4 FOR        003564 R   |     FOR_IDX =  000034     |   4 FREE       00355B R
    FREE_IDX=  000088     |     FRUN    =  000000     |     FS      =  00001C 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_AND   =  000080     |     F_CFUNC =  000020     |     F_CMD   =  000000 
    F_CONST =  000030     |     F_IFUNC =  000010     |     F_NOT   =  000070 
    F_OR    =  000090     |     F_XOR   =  0000A0     |   4 GET        003553 R
    GET_IDX =  0000B4     |   4 GOSUB      003549 R   |     GOSUB_ID=  000036 
  4 GOTO       003540 R   |     GOTO_IDX=  000038     |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   4 HEX        003538 R   |     HEX_IDX =  00003A 
    HOME    =  000082     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   4 IDR        003530 R
    IDR_IDX =  00003C     |   4 IF         003529 R   |     IF_IDX  =  00003E 
    IN      =  000005     |     INCR    =  000001     |     INP     =  000000 
  4 INPUT      00351F R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_ID=  000040     |     INPUT_PU=  000001 
    INT24   =  000005     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |     INW     =  00000B 
    IPOS    =  000001     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  4 IWDGEN     003514 R   |     IWDGEN_I=  000042     |   4 IWDGREF    003508 R
    IWDGREF_=  000044     |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |     KCHAR   =  000002     |   4 KEY        003500 R
    KEY_END =  000083     |     KEY_IDX =  000046     |     KW_TYPE_=  0000F0 
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000002 
  4 LET        0034F8 R   |     LET_IDX =  000048     |     LF      =  00000A 
    LIMIT   =  000005     |     LINENO  =  000005     |   4 LINES_RE   001F90 R
  4 LINK    =  00369B R   |   4 LIST       0034EF R   |     LIST_IDX=  00004A 
    LL      =  000001     |     LLEN    =  000002     |     LL_HB   =  000001 
    LN_PTR  =  000005     |   4 LOG2       0034E6 R   |     LOG_IDX =  00004C 
    LOOP_CNT=  002710     |   4 LSHIFT     0034DB R   |     LSHIFT_I=  00004E 
    MAJOR   =  000002     |     MASK    =  000002     |     MAX_LINE=  007FFF 
    MINOR   =  000000     |     MULOP   =  000001     |     N1      =  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Symbol Table

    NAFR    =  004804     |     NAK     =  000015     |     NAMEPTR =  000001 
    NAME_MAX=  00000F     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        0034D3 R   |     NEW_IDX =  000052     |   4 NEXT       0034CA R
    NEXT_IDX=  000050     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NLEN_MAS=  00000F     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   4 NOT        0034C2 R   |     NOT_IDX =  0000F8 
    NOT_OP  =  000001     |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R   |   4 ODR        0034BA R
    ODR_IDX =  000054     |   4 ON         0034B3 R   |     ONOFF   =  000003 
    ON_IDX  =  0000B2     |     OP      =  000002     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  4 OR         0034AC R   |     OR_IDX  =  0000FC     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVRWR   =  000004     |     PA      =  000000 
  4 PAD        0034A4 R   |     PAD_IDX =  000056     |     PAD_SIZE=  000080 
  4 PAUSE      00349A R   |     PAUSE_ID=  000058     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  4 PEEK       003491 R   |     PEEK_IDX=  00005C     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PG_SIZE =  000001     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   4 PICK       003488 R   |     PINNO   =  000001 
  4 PINP       00347F R   |     PINP_IDX=  00005E     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  4 PMODE      003475 R   |     PMODE_ID=  00005A     |     PNAME   =  000003 
  4 POKE       00346C R   |     POKE_IDX=  000060     |   4 POP        003464 R
  4 PORTA      003447 R   |   4 PORTB      00343D R   |   4 PORTC      003433 R
  4 PORTD      003429 R   |   4 PORTE      00341F R   |   4 PORTF      003415 R
  4 PORTG      00340B R   |   4 PORTI      003401 R   |   4 POUT       00345B R
    POUT_IDX=  000062     |     PREV    =  000001     |     PRG_SIZE=  000003 
  4 PRINT      003451 R   |     PROD    =  000001     |     PROD_SIG=  000004 
  4 PROG_ADD   001EAB R   |   4 PROG_SIZ   001EBD R   |     PRTA_IDX=  000066 
    PRTB_IDX=  000068     |     PRTC_IDX=  00006A     |     PRTD_IDX=  00006C 
    PRTE_IDX=  00006E     |     PRTF_IDX=  000070     |     PRTG_IDX=  000072 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 246.
Hexadecimal [24-Bits]

Symbol Table

    PRTI_IDX=  000074     |     PRT_IDX =  000064     |     PSIZE   =  00000B 
    PSTR    =  000003     |   4 PUSH       0033F8 R   |   4 PUT        0033F0 R
  4 QKEY       0033E7 R   |     QKEY_IDX=  000076     |     QSIGN   =  000005 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |   4 RAM_MEM    001EE6 R
    RAM_SIZE=  001800     |     RBT_IDX =  00007A     |   4 READ       0033DE R
    READ_IDX=  000078     |   4 REBOOT     0033D3 R   |     RECLEN  =  000005 
    REC_LEN =  000003     |     REC_XTRA=  000005     |   4 REG_A      0004DA R
  4 REG_CC     0004DE R   |   4 REG_PC     0004CE R   |   4 REG_SP     0004E3 R
  4 REG_X      0004D6 R   |   4 REG_Y      0004D2 R   |     RELOP   =  000001 
  4 REM        0033CB R   |     REM_IDX =  00007C     |   4 RESTORE    0033BF R
    REST_IDX=  00007E     |     RETL1   =  000001     |   4 RETURN     0033B4 R
    RET_ADDR=  000001     |     RET_BPTR=  000003     |     RET_IDX =  000080 
    RET_INW =  000005     |   4 RND        0033AC R   |     RND_IDX =  000082 
    RONLY   =  000005     |     ROP     =  004800     |     RS      =  00001E 
  4 RSHIFT     0033A1 R   |     RSHIFT_I=  000084     |     RSIGN   =  000006 
    RST_SR  =  0050B3     |   4 RUN        003399 R   |     RUN_IDX =  000086 
    RXCHAR  =  000001     |     RX_QUEUE=  000008     |     R_A     =  000001 
    R_CC    =  000009     |     R_PC    =  00000A     |     R_X     =  000002 
    R_Y     =  000004     |   4 SAVE       003390 R   |     SAVE_IDX=  000032 
    SAV_ACC1=  000006     |     SAV_ACC2=  000008     |     SAV_COUN=  00000A 
    SAV_IN  =  000009     |     SEPARATE=  000000     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |     SI      =  00000F 
    SIGN    =  000001     |   4 SIGNATUR   0029C1 R   |   4 SIZE       003387 R
    SIZE_IDX=  0000B0     |     SKIP    =  000005     |   4 SLEEP      00337D R
    SLEEP_ID=  00008A     |     SO      =  00000E     |     SOH     =  000001 
    SPACE   =  000020     |   4 SPIEN      003373 R   |     SPIEN_ID=  00008E 
  4 SPIRD      003369 R   |     SPIRD_ID=  00008C     |   4 SPISEL     00335E R
    SPISEL_I=  000090     |   4 SPIWR      003354 R   |     SPIWR_ID=  000092 
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_CS_B=  000005     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_SR_B=  000007     |     SPI_SR_C=  000004     |     SPI_SR_M=  000005 
    SPI_SR_O=  000006     |     SPI_SR_R=  000000     |     SPI_SR_T=  000001 
    SPI_SR_W=  000003     |     SPI_TXCR=  005207     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  00008C     |   4 STATES     000491 R
  4 STEP       00334B R   |     STEP_IDX=  000094     |   4 STOP       003342 R
    STOP_IDX=  000096     |     STR     =  000003     |   4 STR_BYTE   001ECE R
    STX     =  000002     |     SUB     =  00001A     |     SUP     =  000084 
    SWIM_CSR=  007F80     |     SYN     =  000016     |   4 SysCall    000012 R
    T       =  000001     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   4 TICKS      003338 R
    TICKS_ID=  000098     |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 247.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 248.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   4 TIMEOUT    00332C R
  4 TIMER      003322 R   |     TIMER_ID=  00009A     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_AND  =  000088     |     TK_ARRAY=  000005 
    TK_CFUNC=  000082     |     TK_CHAR =  000004     |     TK_CMD  =  000080 
    TK_COLON=  00000A     |     TK_COMMA=  000008     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_FLOAT=  000086 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LABEL=  000003     |     TK_LE   =  000036     |     TK_LPARE=  000006 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_NOT  =  000087     |     TK_OR   =  000089     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  000007     |     TK_SHARP=  000009 
    TK_VAR  =  000085     |     TK_XOR  =  00008A     |     TMROUT_I=  00009C 
  4 TO         00331B R   |   4 TONE       003312 R   |     TONE_IDX=  0000A0 
    TOWRITE =  000005     |     TO_IDX  =  00009E     |   4 Timer4Up   000013 R
    U8      =  000001     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART2   =  000001 
    UART3   =  000002     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 249.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   4 UBOUND     003307 R   |     UBOUND_I=  0000A2 
  4 UBTN_Han   00005A R   |   4 UFLASH     0032FC R   |     UFLASH_I=  0000A4 
  4 UNTIL      0032F2 R   |     UNTIL_ID=  0000A6     |     US      =  00001F 
  4 USER_ABO   000062 R   |   4 USR        0032EA R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     USR_IDX =  0000A8 
  4 Uart1RxH   00087C R   |   4 UserButt   000036 R   |     VAL1    =  02FFFF 
    VAL2    =  00002A     |     VAL3    =  000003     |     VAL4    =  0005FF 
    VAL5    =  FFFFFFFD     |     VAR_NAME=  000001     |     VSIZE   =  000008 
    VT      =  00000B     |   4 WAIT       0032E1 R   |     WAIT_IDX=  0000AA 
    WCNT    =  000003     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |     WLKPTR  =  000001 
  4 WORDS      0032D7 R   |     WORDS_ID=  0000AC     |   4 WRITE      0032CD R
    WRITE_ID=  0000AE     |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   4 XOR        0032C5 R   |     XOR_IDX =  0000FE 
    XSAVE   =  000002     |     XSTACK_E=  001773     |     XSTACK_S=  000014 
    XTEMP   =  000001     |     YSAVE   =  000007     |     YTEMP   =  000005 
  4 abs        002BDC R   |   4 abs24      0001F3 R   |   5 acc16      00000D GR
  5 acc24      00000C GR  |   5 acc32      00000B GR  |   5 acc8       00000E GR
  4 accept_c   000BC7 R   |   4 add24      00017E R   |   4 add_char   001345 R
  4 add_spac   00113D R   |   4 analog_r   0026C5 R   |   4 and_cond   001BF3 R
  4 and_fact   001BC3 R   |   4 app        003884 R   |   4 app_sign   003880 R
  4 app_size   003882 R   |   4 app_spac   003880 GR  |   4 arduino_   002CC9 R
  4 arg_list   0019EA R   |   5 array_si   000020 R   |   4 ascii      002AB7 R
  4 at_tst     000FAF R   |   4 atoi24     0018F6 GR  |   4 atoi_exi   001965 R
  4 awu        002B83 R   |   4 awu02      002B96 R   |   5 base       00000A GR
  5 basicptr   000004 GR  |   4 beep       00263C R   |   4 beep_1kh   00260F GR
  4 bin_exit   000E16 R   |   4 bit_rese   0021CB R   |   4 bit_set    0021A9 R
  4 bit_test   002210 R   |   4 bit_togg   0021EE R   |   4 bitmask    002E83 R
  4 bkslsh_t   000F5C R   |   4 bksp       000966 R   |   2 block_bu   0016B8 GR
  4 block_er   000765 R   |   4 break_po   0027B0 R   |   4 bye        002B4F R
  5 chain_le   000034 R   |   4 clear_au   0008B3 R   |   4 clear_ba   0014B1 R
  4 clear_bl   0028C1 R   |   4 clear_va   001409 R   |   4 clock_in   00007D R
  4 cmd_auto   0031A8 R   |   4 cmd_chai   00323B R   |   4 cmd_cons   001DC8 R
  4 cmd_dim    001DD5 R   |   4 cmd_dim1   001DD8 R   |   4 cmd_dim2   001DDE R
  4 cmd_dir    0029E8 R   |   4 cmd_edit   001FB9 R   |   4 cmd_end    0025B6 R
  4 cmd_eras   00282E R   |   4 cmd_get    0025E2 R   |   4 cmd_itf    0004FE R
  4 cmd_line   001734 R   |   4 cmd_line   0019C2 R   |   4 cmd_list   001EF5 R
  4 cmd_name   001365 R   |   4 cmd_on     002445 R   |   4 cmd_run    002526 R
  4 cmd_save   002923 R   |   4 cmd_size   001CCC R   |   4 cold_sta   0000B5 R
  4 colon_ts   000F83 R   |   4 comma_ts   000F8E R   |   4 comp_msg   001684 R
  4 compile    0010A9 GR  |   4 conditio   001C45 R   |   4 const_cr   002F26 R
  4 const_cr   002F2B R   |   4 const_dd   002F21 R   |   4 const_ee   002F3A R
  4 const_id   002F1C R   |   4 const_in   002F35 R   |   4 const_od   002F17 R
  4 const_ou   002F30 R   |   4 const_po   002EEF R   |   4 const_po   002EF4 R
  4 const_po   002EF9 R   |   4 const_po   002EFE R   |   4 const_po   002F03 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 250.
Hexadecimal [24-Bits]

Symbol Table

  4 const_po   002F08 R   |   4 const_po   002F0D R   |   4 const_po   002F12 R
  4 convert_   000D82 R   |   4 convert_   00092A R   |   4 copy_com   000FE4 R
  5 count      000002 GR  |   4 cp24       0001B8 R   |   4 cp24_ax    0001EA R
  4 cp_loop    001985 R   |   4 cpl24      0001FA R   |   4 cpy_cmd_   001125 R
  4 cpy_quot   001165 R   |   4 cs_high    0030C2 R   |   4 dash_tst   000FA4 R
  4 data       002F3F R   |   4 data_err   002FBB R   |   5 data_len   000009 R
  5 data_ofs   000008 R   |   5 data_ptr   000006 R   |   4 dec_base   001CBE R
  4 decomp_l   0011FD R   |   4 decompil   0011B5 GR  |   4 del_line   000C70 R
  4 delete_l   000A53 R   |   4 delete_n   000976 R   |   4 delete_u   000A18 R
  4 digital_   002701 R   |   4 digital_   002738 R   |   4 div24      000307 R
  4 divu24_8   0002E9 R   |   4 do_loop    002EA9 R   |   4 do_progr   000758 R
  4 dup24      00016F R   |   5 dvar_bgn   000030 GR  |   5 dvar_end   000032 GR
  4 enable_i   002E13 R   |   4 end_at_l   001F3F R   |   4 eql_tst    00102F R
  4 equal      001358 R   |   4 erase_ex   000789 R   |   4 erase_fl   00077F R
  4 erase_he   002909 R   |   4 erase_pr   0027D9 R   |   4 err_bad_   0015AD R
  4 err_buf_   001623 R   |   4 err_cmd_   001571 R   |   4 err_div0   001536 R
  4 err_dupl   00158B R   |   4 err_math   00151D R   |   4 err_mem_   0014F8 R
  4 err_msg    0014D2 R   |   4 err_no_a   0015B9 R   |   4 err_no_d   0015EC R
  4 err_no_f   001610 R   |   4 err_no_l   001545 R   |   4 err_no_p   0015FC R
  4 err_not_   00159C R   |   4 err_not_   001656 R   |   4 err_over   001630 R
  4 err_read   00163A R   |   4 err_run_   00155B R   |   4 err_synt   00150F R
  4 escaped    000D97 GR  |   4 expect     0019D8 R   |   4 expressi   001B2C R
  4 factor     001A34 R   |   5 farptr     000018 R   |   4 fcpu       002C4B R
  4 fetchc     000605 R   |   4 fill_wri   0028B1 R   |   4 final_te   000BC0 R
  5 flags      000022 GR  |   4 for        0022A6 R   |   4 free       001CC3 R
  5 free_eep   000024 R   |   7 free_ram   000090 R   |   4 func_arg   0019E5 R
  4 func_cha   002AA0 R   |   4 func_eef   001D58 R   |   4 ge         00135A R
  4 get_addr   001834 R   |   4 get_arra   001A06 R   |   4 get_char   00184E R
  4 get_esca   000936 R   |   4 get_int2   00183E R   |   4 get_targ   0023D3 R
  4 get_targ   0023E1 R   |   4 get_tick   002BD5 R   |   4 get_toke   000EF5 GR
  4 get_valu   001D47 R   |   4 getc       00090F GR  |   4 gosub      0024E3 R
  4 gosub_1    0024E6 R   |   4 gosub_2    0024EC R   |   4 goto       0024D0 R
  4 goto_1     0024D3 R   |   4 gt         001356 R   |   4 gt_tst     00103A R
  4 hex_base   001CB9 R   |   4 hex_dump   000645 R   |   4 if         002289 R
  5 in         000001 GR  |   5 in.saved   000003 GR  |   5 in.w       000000 GR
  4 incr_far   000860 R   |   4 input_ex   002161 R   |   4 input_lo   0020CB R
  4 input_va   0020C7 R   |   4 insert_c   0009D5 R   |   4 insert_l   000CDC R
  4 interp_l   001778 R   |   4 interpre   001750 R   |   4 invalid    00056D R
  4 invalid_   0005DB R   |   4 is_alnum   000E49 GR  |   4 is_alpha   000E2F GR
  4 is_data_   002F45 R   |   4 is_digit   000E40 GR  |   4 is_erase   0029C5 R
  4 is_minus   001F14 R   |   4 is_progr   002515 R   |   4 is_symbo   000E52 R
  4 itoa       001891 GR  |   4 itoa_loo   0018B3 R   |   4 jp_to_ta   0024D6 R
  4 key        002AF6 R   |   4 kword_di   003699 GR  |   4 kword_en   0032C3 R
  4 le         00135F R   |   4 ledoff     0003CD R   |   4 ledon      0003C8 R
  4 ledtoggl   0003D2 R   |   4 left_par   0003DB R   |   4 let        001D04 GR
  4 let_arra   001D12 R   |   4 let_dvar   0017B1 R   |   4 let_eval   001D1A R
  4 let_var    001D17 R   |   4 lines_sk   001F24 R   |   4 list_exi   001F74 R
  4 list_loo   001F52 R   |   4 log2       002E56 R   |   4 look_tar   002404 R
  4 loop_bac   0023B6 R   |   5 loop_dep   00001F R   |   4 loop_don   0023CB R
  4 lshift     002BF3 R   |   4 lt         00135D R   |   4 lt_tst     001063 R
  4 mem_peek   000589 R   |   4 mod24      0003A1 R   |   4 move       0013C5 GR
  4 move_dow   0013E4 R   |   4 move_era   0006E7 R   |   4 move_exi   001405 R
  4 move_lef   0009AD R   |   4 move_loo   0013E9 R   |   4 move_prg   000727 R
  4 move_rig   0009BB R   |   4 move_up    0013D6 R   |   4 mul24      000279 R
  4 mul_char   001347 R   |   4 mulu24_8   00023A R   |   4 nbr_tst    000F28 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 251.
Hexadecimal [24-Bits]

Symbol Table

  4 ne         001362 R   |   4 neg24      000203 R   |   4 neg_acc2   00021D R
  4 neg_ax     000215 R   |   4 new        0027CE R   |   4 next       00235E R
  4 next_lin   001758 R   |   4 next_tok   00180C GR  |   4 no_match   001997 R
  4 number     00060B R   |   4 open_gap   000CA5 R   |   4 other      00108C R
  4 overwrit   000BEC R   |   2 pad        0016B8 GR  |   4 pad_ref    0030C7 R
  4 parse_ad   0004E8 R   |   4 parse_bi   000DF4 R   |   4 parse_in   000D9F R
  4 parse_ke   000E75 R   |   4 parse_qu   000D4A R   |   4 parse_sy   000E5D R
  4 pause      002B63 R   |   4 pause02    002B76 R   |   4 peek       002268 R
  4 peek_byt   0005A5 R   |   4 pin_mode   002C5A R   |   4 plus_tst   001003 R
  4 poke       002247 R   |   4 power_ad   002675 R   |   4 prcnt_ts   001024 R
  4 print      00201E R   |   4 print_fa   0005EA R   |   4 print_he   000C23 GR
  4 print_re   000427 R   |   4 print_st   00057D R   |   4 print_to   001879 R
  4 prog_siz   001E64 R   |   4 program_   001E6C R   |   4 program_   000701 R
  4 program_   000727 R   |   4 prt_acc2   00186B R   |   4 prt_basi   001FFA R
  4 prt_i16    001854 R   |   4 prt_loop   002022 R   |   4 prt_peek   0003AA GR
  4 prt_reg1   000408 R   |   4 prt_reg8   0003E6 R   |   5 ptr16      000019 GR
  5 ptr8       00001A R   |   4 putc       0008FF GR  |   4 puts       00095C GR
  4 qgetc      000908 GR  |   4 qkey       002AFA GR  |   4 qmark_ts   000FBA R
  4 qsign      0028A6 R   |   4 random     002CE9 R   |   4 read       002FC0 R
  4 read01     002FC8 R   |   4 read_int   003810 R   |   4 readln     000A61 GR
  4 readln_l   000A70 R   |   4 readln_q   000C09 R   |   4 refresh_   002E51 R
  4 relation   001B64 R   |   4 relop_st   00134A R   |   4 remark     002166 GR
  4 repl       000527 R   |   4 repl_exi   00054F R   |   4 reset_co   002020 R
  4 rest_con   0020B7 R   |   4 restore    002F53 R   |   4 return     0024FF R
  4 right_al   001153 GR  |   4 row_alig   000845 R   |   4 row_eras   0006BA R
  4 row_eras   0006E7 R   |   4 row_loop   000628 R   |   4 rparnt_t   000F78 R
  4 rshift     002C1F R   |   7 rsign      00008C R   |   7 rsize      00008E R
  4 rt_msg     001672 R   |   4 run_app    00012A R   |   4 run_it     002583 R
  4 run_it_0   002585 R   |   4 runtime_   0019CD R   |   5 rx1_head   00002E R
  5 rx1_queu   000026 R   |   5 rx1_tail   00002F R   |   4 save_con   0020A7 R
  4 scan_blo   00086E R   |   4 search_d   001977 GR  |   4 search_e   0019BF R
  4 search_f   0028D5 R   |   4 search_l   000C45 GR  |   4 search_l   000C54 R
  4 search_n   001D81 R   |   4 search_n   00197B R   |   4 search_p   003201 R
  5 seedx      000014 R   |   5 seedy      000016 R   |   4 select_p   002CB9 R
  4 send_esc   000984 R   |   4 send_par   00098F R   |   4 set_data   002F8C R
  4 set_time   002DF1 R   |   4 sharp_ts   000F99 R   |   4 show_row   000616 R
  4 single_c   001340 R   |   4 skip       000EE2 R   |   4 skip_str   001825 R
  4 skip_to_   0029D0 R   |   4 slash_ts   001019 R   |   4 sleep      002B58 R
  4 software   001418 R   |   4 spaces     0009C9 GR  |   4 spi_clea   00305C R
  4 spi_disa   003044 R   |   4 spi_enab   003011 R   |   4 spi_rcv_   00307E R
  4 spi_read   0030A9 R   |   4 spi_sele   0030B0 R   |   4 spi_send   003068 R
  4 spi_writ   003089 R   |   2 stack_fu   001774 GR  |   2 stack_un   001800 R
  4 star_tst   00100E R   |   4 start_fr   001F1F R   |   4 step       00231C R
  4 stop       002783 R   |   4 store_lo   00234B R   |   4 str_matc   0019A4 R
  4 str_tst    000F18 R   |   4 strcmp     0013A4 R   |   4 strcpy     0013B5 GR
  4 strlen     001399 GR  |   4 sub24      00019B R   |   4 symb_loo   000E5E R
  4 syntax_e   0016A5 GR  |   4 system_i   00145E R   |   5 tab_widt   000023 GR
  4 tb_error   0016A7 GR  |   4 term       001AE9 R   |   4 term01     001AF1 R
  4 term_exi   001B29 R   |   4 test       0036A1 R   |   4 test_p     000575 R
  2 tib        001668 GR  |   4 tick_tst   000FD2 R   |   5 ticks      00000F R
  4 timeout    002E08 R   |   5 timer      000012 GR  |   4 timer2_i   000093 R
  4 timer4_i   0000A0 R   |   4 tk_id      001695 R   |   4 to         0022D6 R
  4 to_eepro   000750 R   |   4 to_flash   000755 R   |   4 to_hex_c   000C3A GR
  4 to_upper   0018EA GR  |   4 token_ch   0010A2 R   |   4 token_ex   0010A6 R
  4 tone       00261A R   |   4 try_next   002F99 R   |   5 txtbgn     00001B GR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 252.
Hexadecimal [24-Bits]

Symbol Table

  5 txtend     00001D GR  |   4 uart1_ge   00090F GR  |   4 uart1_in   0008BA R
  4 uart1_pu   0008FF GR  |   4 uart1_qg   000908 GR  |   4 uart1_se   0008CA R
  4 ubound     001CF9 R   |   4 uflash     002B07 R   |   4 unlock_e   000684 R
  4 unlock_f   00069F R   |   4 until      002EBC R   |   4 user_int   000049 R
  4 usr        002B29 R   |   4 var_name   0011AB GR  |   5 vars       000035 GR
  4 wait       00216C R   |   4 warm_ini   00148F R   |   4 warm_sta   001731 R
  4 words      002D84 R   |   4 words_co   002DDB R   |   4 write      002A37 R
  4 write_bl   00080A GR  |   4 write_bu   000741 R   |   4 write_by   00078B R
  4 write_ee   0007C7 R   |   4 write_ex   000800 R   |   4 write_fl   0007B1 R
  4 write_nb   00082F R   |   4 xalloc     0030DA R   |   4 xdrop      003110 R
  4 xpick      00318E R   |   4 xpop       0030D0 R   |   4 xpush      0030CC R
  4 xput       00315B R   |   4 xstack_b   00313D R   |   2 xstack_f   001738 GR
  2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 253.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3884   flags    0
   5 DATA       size     83   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

