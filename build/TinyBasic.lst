ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                     28   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44
                           00003A    86 		COLON = 58 
                           00003B    87 		SEMIC = 59  
                           000023    88 		SHARP = 35
                           000027    89 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                           000006    45         FLN_REJECTED=6 ; a memory full error occured while in *insert_line*. 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                           00000F    58         NAME_MAX_LEN=15  ; CONST and DIM variables maximum length 
                           000005    59         REC_XTRA_BYTES=5 
                           00001F    60         REC_LEN_MASK=31
                                     61 ;--------------------------------------
                                     62 ;   constantes related to Arduino 
                                     63 ;   API mapping 
                                     64 ;-------------------------------------
                           000000    65         INP=0
                           000001    66         OUTP=1 
                                     67 
                                     68 ;--------------------------------------
                                     69 ;       token attribute
                                     70 ;--------------------------------------
                                     71         ; bits 4:5 identify token group 
                                     72         ; 0x0n -> miscelinous 
                                     73         ; 0x1n -> +|- operators 
                                     74         ; 0x2n -> *|/|% operators
                                     75         ; 0x3n -> relational operators 
                           000080    76         TK_CMD=128      ; BASIC command   
                           000081    77         TK_IFUNC=129    ; BASIC integer function
                           000082    78         TK_CFUNC=130    ; BASIC character function
                           000083    79         TK_CONST=131    ; BASIC constant 
                           000084    80         TK_INTGR=132    ; 16 bits integer 
                           000085    81         TK_VAR=133
                           000086    82         TK_FLOAT=134    ; float32 
                           000087    83         TK_NOT=135
                           000088    84         TK_AND=136      ;
                           000089    85         TK_OR=137       ;
                           00008A    86         TK_XOR=138      ; 
                           000000    87         TK_NONE=0       ; not a token 
                           000002    88         TK_QSTR=2       ; quoted string  
                           000003    89         TK_LABEL=3      ; used for defined, constants, variables
                           000004    90         TK_CHAR=4       ; ASCII character 
                           000005    91         TK_ARRAY=5      ; array variable '@' 
                           000006    92         TK_LPAREN=6     ; left parenthesis '('
                           000007    93         TK_RPAREN=7     ; right parenthesis ')'
                           000008    94         TK_COMMA=8      ; item separator ',' 
                           000009    95         TK_COLON=9      ; command separator ':' 
                           00000A    96         TK_SEMIC=10     ; used in PRINT command.  ';' 
                                     97 
                           000010    98         TK_PLUS=0x10    ; addition operator '+'
                           000011    99         TK_MINUS=0x11   ; subtraction operator '-'
                           000020   100         TK_MULT=0x20    ; multiplication operator '*'
                           000021   101         TK_DIV=0x21     ; division operator '/'
                           000022   102         TK_MOD=0x22     ; modulo operator '%'
                                    103 
                                    104         ; don't change these token values 
                                    105         ; values chosen to be used as a mask.
                                    106         ; bit 7   1 for dictionary words else 0 
                                    107         ; bits 6  always 0 
                                    108         ; bits 5:4 identify group 
                                    109         ; bits 3:0 token identifier inside group  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000031   110         TK_GT=0x31      ; relation operator '>'
                           000032   111         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   112         TK_GE=0x33      ; relation operator '>='
                           000034   113         TK_LT=0x34      ; relation operator '<'
                           000036   114         TK_LE=0x36      ; relation operator '<='
                           000035   115         TK_NE=0x35      ; relation operator '<>' not equal 
                                    116         ; token groups 
                           000030   117         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   118         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   119         TK_GRP_ADD=0x10  ; additive operators
                           000020   120         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   121         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   122         CMD_END=2 
                                    123 
                                    124 ;--------------------------------------
                                    125 ;   error codes 
                                    126 ;--------------------------------------
                           000000   127     ERR_NONE=0
                           000001   128     ERR_MEM_FULL=1 
                           000002   129     ERR_SYNTAX=2
                           000003   130     ERR_MATH_OVF=3
                           000004   131     ERR_DIV0=4 
                           000005   132     ERR_NO_LINE=5
                           000006   133     ERR_RUN_ONLY=6
                           000007   134     ERR_CMD_ONLY=7
                           000008   135     ERR_DUPLICATE=8
                           000009   136     ERR_NOT_FILE=9
                           00000A   137     ERR_BAD_VALUE=10
                           00000B   138     ERR_NO_ACCESS=11
                           00000C   139     ERR_NO_DATA=12 
                           00000D   140     ERR_NO_PROG=13
                           00000E   141     ERR_NO_FSPACE=14
                           00000F   142     ERR_BUF_FULL=15
                           000010   143     ERR_OVERFLOW=16 
                           000011   144     ERR_RD_ONLY=17
                           000012   145     ERR_NO_PROGRAM=18
                                    146 
                                    147 ;--------------------------------------
                                    148 ;   assembler flags 
                                    149 ;-------------------------------------
                                    150 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    151 
                                    152      .macro _usec_dly n 
                                    153     ldw x,#(16*n-2)/4
                                    154     decw x
                                    155     nop 
                                    156     jrne .-4
                                    157     .endm 
                                    158     
                                    159     ; load X register with 
                                    160     ; entry point of dictionary
                                    161     ; before calling 'search_dict'
                                    162     .macro _ldx_dict dict_name
                                    163     ldw x,#dict_name+2
                                    164     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165 
                                    166     ; reset BASIC pointer
                                    167     ; to beginning of last token
                                    168     ; extracted except if it was end of line 
                                    169     .macro _unget_token 
                                    170      mov in,in.saved  
                                    171     .endm
                                    172 
                                    173 
                                    174     ; extract code address for 
                                    175     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    176     .macro _get_code_addr
                                    177         ldw x,(x)
                                    178         inc in 
                                    179         inc in 
                                    180     .endm 
                                    181 
                                    182 
                                    183 
                                    184 ;---------------------------------------
                                    185 ;    xtack manipulation macros 
                                    186 ;    Y is used as xstack pointer  
                                    187 ;----------------------------------------
                                    188     ; pop in A:X from XSTACK 
                                    189     .macro _xpop 
                                    190     ld a,(y)
                                    191     ldw x,y 
                                    192     ldw x,(1,x)
                                    193     addw y,#CELL_SIZE 
                                    194     .endm 
                                    195 
                                    196     ; push A:X  to XSTACK 
                                    197     .macro _xpush 
                                    198     subw y,#CELL_SIZE
                                    199     ld (y),a 
                                    200     ldw (1,y),x 
                                    201     .endm 
                                    202 
                                    203     ; drop from XSTACK 
                                    204     .macro _xdrop 
                                    205     addw y,#CELL_SIZE 
                                    206     .endm 
                                    207 
                                    208     ; @T fetch top xstack 
                                    209     .macro _at_top
                                    210     ld a,(y)
                                    211     ldw x,y 
                                    212     ldw x,(1,x)
                                    213     .endm 
                                    214 
                                    215     ; @N  fetch next on xstack 
                                    216     .macro _at_next 
                                    217     ld a,(3,y)
                                    218     ldw x,y 
                                    219     ldw x,(4,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220     .endm 
                                    221 
                                    222     ; !T put on top of xtack 
                                    223     .macro _store_top 
                                    224     ld (y),a 
                                    225     ldw (1,y),x     
                                    226     .endm 
                                    227 
                                    228     ; !N put next on xstack 
                                    229     .macro _store_next 
                                    230     ld (3,y),a 
                                    231     ldw (4,y),x 
                                    232     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33   
                                     34 ;;-----------------------------------
                                     35     .area SSEG (ABS)
                                     36 ;; working buffers and stack at end of RAM. 	
                                     37 ;;-----------------------------------
      001668                         38     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE*CELL_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         39 tib:: .ds TIB_SIZE             ; terminal input buffer
      0016B8                         40 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         41 pad:: .ds PAD_SIZE             ; working buffer
      001738                         42 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      001774                         43 xstack_unf:: ; xstack underflow 
      001774                         44 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         45 stack_unf: ; stack underflow ; control_stack bottom 
                                     46 
                                     47 ;;--------------------------------------
                                     48     .area HOME 
                                     49 ;; interrupt vector table at 0x8000
                                     50 ;;--------------------------------------
                                     51 
      000000 82 00 00 B5             52     int cold_start			; RESET vector 
      000004 82 00 00 12             53 	int SysCall ; TRAP  BASIC sys() calls 
      000008 82 00 00 00             54 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             55 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             56 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             57 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             58 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             59 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             60 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 36             61 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             62 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             63 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             64 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             65 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             66 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             67 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             68 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             69 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             70 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             71 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 05 A2             72 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             73 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             74 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             75 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             76 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 13             77 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             78 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             79 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             80 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             81 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             82 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             83 	int NonHandledInterrupt ;int29  not used
                                     84 
                                     85 ;---------------------------------------
                                     86     .area CODE
                                     87 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                     88 
                                     89 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     90 ; non handled interrupt 
                                     91 ; reset MCU
                                     92 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         93 NonHandledInterrupt:
      000000                         94 	_swreset ; see "inc/gen_macros.inc"
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; auto wakeup from halt
                                     98 ; at iret, program continue 
                                     99 ; after halt instruction
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        101 AWUHandler:
      000004 72 19 50 F0      [ 1]  102 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  103 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  104 	clr AWU_TBR 
      000011 80               [11]  105 	iret
                                    106 
                                    107 ;------------------------------------
                                    108 ; system call handler  
                                    109 ;------------------------------------
      000012                        110 SysCall:
                                    111 
      000012 80               [11]  112 	iret 
                                    113 
                                    114 ;------------------------------
                                    115 ; TIMER 4 is used to maintain 
                                    116 ; a milliseconds 'ticks' counter
                                    117 ; and decrement 'timer' varaiable
                                    118 ; ticks range {0..2^23-1}
                                    119 ; timer range {0..65535}
                                    120 ;--------------------------------
      000013                        121 Timer4UpdateHandler:
      000013 72 5F 53 42      [ 1]  122 	clr TIM4_SR 
      000017 C6 00 0F         [ 1]  123 	ld a,ticks 
      00001A CE 00 10         [ 2]  124 	ldw x,ticks+1
      00001D 1C 00 01         [ 2]  125 	addw x,#1 
      000020 A9 00            [ 1]  126 	adc a,#0 
      000022 2A 02            [ 1]  127 	jrpl 0$
                                    128 ; reset to 0 when negatif 
      000024 4F               [ 1]  129 	clr a 
      000025 5F               [ 1]  130 	clrw x 
      000026 C7 00 0F         [ 1]  131 0$:	ld ticks,a 
      000029 CF 00 10         [ 2]  132 	ldw ticks+1,x 
      00002C CE 00 12         [ 2]  133 	ldw x,timer
      00002F 27 04            [ 1]  134 	jreq 1$
      000031 5A               [ 2]  135 	decw x 
      000032 CF 00 12         [ 2]  136 	ldw timer,x 
      000035                        137 1$:	
      000035 80               [11]  138 	iret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; Triggered by pressing USER UserButton 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                    142 ; on NUCLEO card.
                                    143 ; This is used to abort a progam lock 
                                    144 ; in infinite loop. 
                                    145 ;------------------------------------
      000036                        146 UserButtonHandler:
                                    147 ; wait button release
      000036 5F               [ 1]  148 	clrw x
      000037 5A               [ 2]  149 1$: decw x 
      000038 26 FD            [ 1]  150 	jrne 1$
      00003A 72 09 50 15 F8   [ 2]  151 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    152 ; if MCU suspended by SLEEP resume program
      00003F 72 07 00 22 05   [ 2]  153     btjf flags,#FSLEEP,2$
      000044 72 17 00 22      [ 1]  154 	bres flags,#FSLEEP 
      000048 80               [11]  155 	iret
      000049                        156 2$:	
      000049                        157 user_interrupted:
      000049 72 00 00 22 02   [ 2]  158     btjt flags,#FRUN,4$
      00004E 20 0A            [ 2]  159 	jra UBTN_Handler_exit 
      000050                        160 4$:	; program interrupted by user 
      000050 72 11 00 22      [ 1]  161 	bres flags,#FRUN 
      000054 AE 00 62         [ 2]  162 	ldw x,#USER_ABORT
      000057 CD 06 82         [ 4]  163 	call puts 
      00005A                        164 UBTN_Handler_exit:
      00005A AE 17 FF         [ 2]  165     ldw x,#STACK_EMPTY 
      00005D 94               [ 1]  166     ldw sp,x
      00005E 9A               [ 1]  167 	rim 
      00005F CC 14 3C         [ 2]  168 5$:	jp warm_start
                                    169 
      000062 0A 50 72 6F 67 72 61   170 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    171 
                                    172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    173 ;    peripherals initialization
                                    174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    175 
                                    176 ;----------------------------------------
                                    177 ; inialize MCU clock 
                                    178 ; input:
                                    179 ;   A 		source  HSI | 1 HSE 
                                    180 ;   XL      CLK_CKDIVR , clock divisor 
                                    181 ; output:
                                    182 ;   none 
                                    183 ;----------------------------------------
      00007D                        184 clock_init:	
      00007D C1 50 C3         [ 1]  185 	cp a,CLK_CMSR 
      000080 27 0C            [ 1]  186 	jreq 2$ ; no switching required 
                                    187 ; select clock source 
      000082 72 12 50 C5      [ 1]  188 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000086 C7 50 C4         [ 1]  189 	ld CLK_SWR,a
      000089 C1 50 C3         [ 1]  190 1$:	cp a,CLK_CMSR
      00008C 26 FB            [ 1]  191 	jrne 1$
      00008E                        192 2$: 	
                                    193 ; HSI and cpu clock divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      00008E 9F               [ 1]  194 	ld a,xl 
      00008F C7 50 C6         [ 1]  195 	ld CLK_CKDIVR,a  
      000092 81               [ 4]  196 	ret
                                    197 
                                    198 ;----------------------------------
                                    199 ; TIMER2 used as audio tone output 
                                    200 ; on port D:5. CN9-6
                                    201 ; channel 1 configured as PWM mode 1 
                                    202 ;-----------------------------------  
                                    203 
      000093                        204 timer2_init:
      000093 72 1A 50 C7      [ 1]  205 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000097 35 60 53 05      [ 1]  206  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      00009B 35 08 53 0C      [ 1]  207 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009F 81               [ 4]  208 	ret 
                                    209 
                                    210 ;---------------------------------
                                    211 ; TIM4 is configured to generate an 
                                    212 ; interrupt every millisecond 
                                    213 ;----------------------------------
      0000A0                        214 timer4_init:
      0000A0 72 18 50 C7      [ 1]  215 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A4 35 07 53 45      [ 1]  216 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A8 35 7D 53 46      [ 1]  217 	mov TIM4_ARR,#125 ; set for 1msec.
      0000AC 35 05 53 40      [ 1]  218 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000B0 72 10 53 41      [ 1]  219 	bset TIM4_IER,#TIM4_IER_UIE
      0000B4 81               [ 4]  220 	ret
                                    221 
                                    222 ;-------------------------------------
                                    223 ;  initialization entry point 
                                    224 ;-------------------------------------
      0000B5                        225 cold_start:
                                    226 ;set stack 
      0000B5 AE 17 FF         [ 2]  227 	ldw x,#STACK_EMPTY
      0000B8 94               [ 1]  228 	ldw sp,x
                                    229 ; clear all ram 
      0000B9 7F               [ 1]  230 0$: clr (x)
      0000BA 5A               [ 2]  231 	decw x 
      0000BB 26 FC            [ 1]  232 	jrne 0$
                                    233 ; activate pull up on all inputs 
      0000BD A6 FF            [ 1]  234 	ld a,#255 
      0000BF C7 50 03         [ 1]  235 	ld PA_CR1,a 
      0000C2 C7 50 08         [ 1]  236 	ld PB_CR1,a 
      0000C5 C7 50 0D         [ 1]  237 	ld PC_CR1,a 
      0000C8 C7 50 12         [ 1]  238 	ld PD_CR1,a 
      0000CB C7 50 17         [ 1]  239 	ld PE_CR1,a 
      0000CE C7 50 1C         [ 1]  240 	ld PF_CR1,a 
      0000D1 C7 50 21         [ 1]  241 	ld PG_CR1,a 
      0000D4 C7 50 2B         [ 1]  242 	ld PI_CR1,a
                                    243 ; set LD2 pin as output 
      0000D7 72 1A 50 0D      [ 1]  244     bset PC_CR1,#LED2_BIT
      0000DB 72 1A 50 0E      [ 1]  245     bset PC_CR2,#LED2_BIT
      0000DF 72 1A 50 0C      [ 1]  246     bset PC_DDR,#LED2_BIT
      0000E3 72 1B 50 0A      [ 1]  247 	bres PC_ODR,#LED2_BIT ; turn off LD2 
                                    248 ; disable schmitt triggers on Arduino CN4 analog inputs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      0000E7 55 00 3F 54 07   [ 1]  249 	mov ADC_TDRL,0x3f
                                    250 ; initialize auto wakeup with LSI clock
      0000EC 72 5F 50 F2      [ 1]  251 	clr AWU_TBR 
      0000F0 72 14 50 CA      [ 1]  252 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    253 ; select internal clock no divisor: 16 Mhz 	
      0000F4 A6 E1            [ 1]  254 	ld a,#CLK_SWR_HSI 
      0000F6 5F               [ 1]  255 	clrw x  
      0000F7 CD 00 7D         [ 4]  256     call clock_init 
      0000FA CD 00 A0         [ 4]  257 	call timer4_init
      0000FD CD 00 93         [ 4]  258 	call timer2_init	
                                    259 ; UART1 at 115200 BAUD
                                    260 ; used for user interface 
                                    261 ; via USB emulation through STLINK programmer.
      000100 CD 05 E0         [ 4]  262 	call uart1_init
                                    263 ; activate PE_4 (user button interrupt)
      000103 72 18 50 18      [ 1]  264     bset PE_CR2,#USR_BTN_BIT 
                                    265 ; display system information
      000107 9A               [ 1]  266 	rim ; enable interrupts 
                                    267 ; RND function seed 
                                    268 ; must be initialized 
                                    269 ; to value other than 0.
      000108 72 5C 00 17      [ 1]  270 	inc seedy+1 
      00010C 72 5C 00 15      [ 1]  271 	inc seedx+1 
      000110 CD 1A 60         [ 4]  272 	call func_eefree ; eeprom free address 
      000113 CD 1A 01         [ 4]  273 	call ubound ; @() size 
      000116 CD 11 C9         [ 4]  274 	call clear_basic
      000119 CD 23 21         [ 4]  275 	call beep_1khz  ; 
      00011C CD 11 7E         [ 4]  276 	call system_information ; display system information 
      00011F                        277 2$:	
                                    278 ; check for autorun application
      00011F CE 40 00         [ 2]  279 	ldw x,EEPROM_BASE 
      000122 C3 2F 11         [ 2]  280 	cpw x,AR_SIGN 
      000125 27 03            [ 1]  281 	jreq run_app
      000127 CC 14 3C         [ 2]  282 	jp warm_start 
      00012A                        283 run_app:
      00012A 4F               [ 1]  284 	clr a 
      00012B CE 40 02         [ 2]  285 	ldw x,EEPROM_BASE+2
      00012E CD 22 27         [ 4]  286 	call is_program_addr 
      000131 27 03            [ 1]  287 	jreq 1$
      000133 CC 14 3C         [ 2]  288 	jp warm_start ; no autorun application.
      000136                        289 1$:	
                                    290 ; run application in FLASH|EEPROM 
      000136 90 CE 17 73      [ 2]  291 	ldw y,XSTACK_EMPTY
      00013A CD 11 AB         [ 4]  292 	call warm_init
      00013D CE 40 02         [ 2]  293 	ldw x,EEPROM_BASE+2 
      000140 CF 00 1B         [ 2]  294 	ldw txtbgn,x
      000143 1D 00 02         [ 2]  295 	subw x,#2 
      000146 FE               [ 2]  296 	ldw x,(x)
      000147 72 BB 00 1B      [ 2]  297 	addw x,txtbgn 
      00014B CF 00 1D         [ 2]  298 	ldw txtend,x 
      00014E AE 01 5C         [ 2]  299 	ldw x,#AUTO_RUN 
      000151 CD 06 82         [ 4]  300 	call puts 
      000154 CD 1B 78         [ 4]  301 	call program_info 
      000157 CC 22 97         [ 2]  302 	jp run_it_02  
      00015A 20 FE            [ 2]  303     jra .  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    304 
      00015C 20 61 75 74 6F 20 72   305 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
             72 61 6D 0A 00
                                    306 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00016F                         37 dup24:
      00016F                         38     _at_top 
      00016F 90 F6            [ 1]    1     ld a,(y)
      000171 93               [ 1]    2     ldw x,y 
      000172 EE 01            [ 2]    3     ldw x,(1,x)
      000174                         39     _xpush 
      000174 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000178 90 F7            [ 1]    2     ld (y),a 
      00017A 90 EF 01         [ 2]    3     ldw (1,y),x 
      00017D 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      00017E                         48 add24: ; ( N T -- N+T )
      00017E                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      00017E 90 F6            [ 1]    1     ld a,(y)
      000180 93               [ 1]    2     ldw x,y 
      000181 EE 01            [ 2]    3     ldw x,(1,x)
      000183 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000187 89               [ 2]   50     pushw x  
      000188 88               [ 1]   51     push a  
      000189                         52     _at_top  
      000189 90 F6            [ 1]    1     ld a,(y)
      00018B 93               [ 1]    2     ldw x,y 
      00018C EE 01            [ 2]    3     ldw x,(1,x)
      00018E 72 FB 02         [ 2]   53     addw x,(2,sp)
      000191 19 01            [ 1]   54     adc a, (1,sp)
      000193                         55     _store_top 
      000193 90 F7            [ 1]    1     ld (y),a 
      000195 90 EF 01         [ 2]    2     ldw (1,y),x     
      000198                         56     _drop 3 
      000198 5B 03            [ 2]    1     addw sp,#3 
      00019A 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      00019B                         63 sub24: ; ( N T -- N-T ) 
      00019B                         64     _xpop 
      00019B 90 F6            [ 1]    1     ld a,(y)
      00019D 93               [ 1]    2     ldw x,y 
      00019E EE 01            [ 2]    3     ldw x,(1,x)
      0001A0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001A4 89               [ 2]   65     pushw x 
      0001A5 88               [ 1]   66     push  a
      0001A6                         67     _at_top  
      0001A6 90 F6            [ 1]    1     ld a,(y)
      0001A8 93               [ 1]    2     ldw x,y 
      0001A9 EE 01            [ 2]    3     ldw x,(1,x)
      0001AB 72 F0 02         [ 2]   68     subw x,(2,sp) 
      0001AE 12 01            [ 1]   69     sbc a, (1,sp)
      0001B0                         70     _store_top  
      0001B0 90 F7            [ 1]    1     ld (y),a 
      0001B2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001B5                         71     _drop 3 
      0001B5 5B 03            [ 2]    1     addw sp,#3 
      0001B7 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001B8                         77 cp24:
      0001B8                         78     _xpop 
      0001B8 90 F6            [ 1]    1     ld a,(y)
      0001BA 93               [ 1]    2     ldw x,y 
      0001BB EE 01            [ 2]    3     ldw x,(1,x)
      0001BD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001C1 C7 00 0C         [ 1]   79     ld acc24,a 
      0001C4 CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      0001C7                         81     _at_top 
      0001C7 90 F6            [ 1]    1     ld a,(y)
      0001C9 93               [ 1]    2     ldw x,y 
      0001CA EE 01            [ 2]    3     ldw x,(1,x)
      0001CC 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001D0 C2 00 0C         [ 1]   83     sbc a,acc24
      0001D3 2F 08            [ 1]   84     jrslt 1$
      0001D5 26 0A            [ 1]   85     jrne 2$
      0001D7 5D               [ 2]   86     tnzw x 
      0001D8 26 07            [ 1]   87     jrne 2$
      0001DA 4F               [ 1]   88     clr a 
      0001DB 20 06            [ 2]   89     jra 9$ 
      0001DD                         90 1$: ; i1 < i2 
      0001DD A6 FF            [ 1]   91     ld a,#255
      0001DF 20 02            [ 2]   92     jra 9$ 
      0001E1                         93 2$: ; i1 > i2 
      0001E1 A6 01            [ 1]   94     ld a,#1 
      0001E3 5F               [ 1]   95 9$: clrw x
      0001E4                         96      _store_top 
      0001E4 90 F7            [ 1]    1     ld (y),a 
      0001E6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001E9 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001EA                        103 cp24_ax:
      0001EA 88               [ 1]  104     push a 
      0001EB C3 00 0D         [ 2]  105     cpw x,acc16 
      0001EE C2 00 0C         [ 1]  106     sbc a,acc24
      0001F1 84               [ 1]  107     pop a 
      0001F2 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001F3                        115 abs24: ; ( i -- u )
      0001F3 90 F6            [ 1]  116     ld a,(y)
      0001F5 A1 80            [ 1]  117     cp a,#0x80 
      0001F7 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001F9 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001FA                        124 cpl24:  ; i -- ~i 
      0001FA 90 73            [ 1]  125     cpl (y) 
      0001FC 90 63 01         [ 1]  126     cpl (1,y)
      0001FF 90 63 02         [ 1]  127     cpl (2,y)
      000202 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      000203                        133 neg24: ; (i -- -i )
      000203                        134     _at_top
      000203 90 F6            [ 1]    1     ld a,(y)
      000205 93               [ 1]    2     ldw x,y 
      000206 EE 01            [ 2]    3     ldw x,(1,x)
      000208 43               [ 1]  135     cpl  a  
      000209 53               [ 2]  136     cplw x 
      00020A 1C 00 01         [ 2]  137     addw x,#1
      00020D A9 00            [ 1]  138     adc a,#0
      00020F                        139     _store_top  
      00020F 90 F7            [ 1]    1     ld (y),a 
      000211 90 EF 01         [ 2]    2     ldw (1,y),x     
      000214 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000215                        145 neg_ax:
      000215 43               [ 1]  146     cpl  a  
      000216 53               [ 2]  147     cplw x 
      000217 1C 00 01         [ 2]  148     addw x,#1
      00021A A9 00            [ 1]  149     adc a,#0
      00021C 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      00021D                        155 neg_acc24: ; 
      00021D 72 53 00 0C      [ 1]  156     cpl acc24 
      000221 72 53 00 0D      [ 1]  157     cpl acc16 
      000225 72 53 00 0E      [ 1]  158     cpl acc8
      000229 72 5C 00 0E      [ 1]  159     inc acc8 
      00022D 26 0A            [ 1]  160     jrne 9$
      00022F 72 5C 00 0D      [ 1]  161     inc acc16 
      000233 26 04            [ 1]  162     jrne 9$
      000235 72 5C 00 0C      [ 1]  163     inc acc24 
      000239 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      00023A                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00023A 88               [ 1]  181     push a 
      00023B 72 5F 00 0B      [ 1]  182 	clr acc32
      00023F 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      000243 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000246 97               [ 1]  186     ld xl,a 
      000247 7B 01            [ 1]  187     ld a,(U8,sp)
      000249 42               [ 4]  188     mul x,a 
      00024A CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      00024D 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      000250 97               [ 1]  192     ld xl,a 
      000251 7B 01            [ 1]  193     ld a,(U8,sp) 
      000253 42               [ 4]  194     mul x,a 
      000254 72 BB 00 0C      [ 2]  195     addw x,acc24
      000258 72 59 00 0B      [ 1]  196     rlc acc32 
      00025C CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00025F 90 F6            [ 1]  199     ld a,(Y)
      000261 97               [ 1]  200     ld xl,a 
      000262 7B 01            [ 1]  201     ld a,(U8,sp)
      000264 42               [ 4]  202     mul x,a 
      000265 72 BB 00 0B      [ 2]  203     addw x,acc32
      000269 02               [ 1]  204     rlwa x 
      00026A 4D               [ 1]  205     tnz a 
      00026B 27 05            [ 1]  206     jreq 1$
      00026D A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00026F CC 13 BF         [ 2]  208     jp tb_error 
      000272                        209 1$:
      000272 9E               [ 1]  210     ld a,xh  
      000273 CE 00 0D         [ 2]  211     ldw x,acc16   
      000276                        212     _drop VSIZE 
      000276 5B 01            [ 2]    1     addw sp,#VSIZE 
      000278 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000279                        224 mul24:
      000279                        225     _vars VSIZE
      000279 52 07            [ 2]    1     sub sp,#VSIZE 
      00027B 5F               [ 1]  226     clrw x 
      00027C 1F 01            [ 2]  227     ldw (PROD,sp),x 
      00027E 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      000280                        229     _xpop 
      000280 90 F6            [ 1]    1     ld a,(y)
      000282 93               [ 1]    2     ldw x,y 
      000283 EE 01            [ 2]    3     ldw x,(1,x)
      000285 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000289 4D               [ 1]  230     tnz a 
      00028A 2A 05            [ 1]  231     jrpl 0$
      00028C 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      00028E CD 02 15         [ 4]  233     call neg_ax 
      000291                        234 0$:    
      000291 6B 05            [ 1]  235     ld (N1,sp),a 
      000293 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000295 90 7D            [ 1]  237     tnz (Y)
      000297 2A 05            [ 1]  238     jrpl 2$ 
      000299 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      00029B CD 02 03         [ 4]  240     call neg24
      00029E                        241 2$: 
      00029E 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      0002A0 27 0A            [ 1]  243     jreq 4$
      0002A2 CD 02 3A         [ 4]  244     call mulu24_8
      0002A5 4D               [ 1]  245     tnz a 
      0002A6 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      0002A8 6B 01            [ 1]  247     ld (PROD,sp),a
      0002AA 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      0002AC                        249 4$:
      0002AC 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      0002AE 27 0D            [ 1]  251     jreq 5$
      0002B0 CD 02 3A         [ 4]  252     call mulu24_8
      0002B3 4D               [ 1]  253     tnz a 
      0002B4 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002B6 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002B9 29 29            [ 1]  256     jrv 8$ ; overflow
      0002BB 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002BD                        258 5$:
      0002BD 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002BF 27 10            [ 1]  260     jreq 6$
      0002C1 CD 02 3A         [ 4]  261     call mulu24_8
      0002C4 01               [ 1]  262     rrwa x 
      0002C5 5D               [ 2]  263     tnzw x 
      0002C6 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002C8 4D               [ 1]  265     tnz a 
      0002C9 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002CB 1B 01            [ 1]  267     add a,(PROD,sp)
      0002CD 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002CF 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002D1                        270 6$:
      0002D1 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002D3 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002D5 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002D7 27 03            [ 1]  274     jreq 9$
      0002D9 CD 02 15         [ 4]  275     call neg_ax 
      0002DC                        276 9$:
      0002DC                        277     _store_top 
      0002DC 90 F7            [ 1]    1     ld (y),a 
      0002DE 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002E1                        278     _drop VSIZE 
      0002E1 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002E3 81               [ 4]  279     ret 
      0002E4                        280 8$: ; overflow
      0002E4 A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      0002E6 CC 13 BF         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002E9                        296 divu24_8:
      0002E9 89               [ 2]  297 	pushw x ; save x
      0002EA 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002EB CE 00 0C         [ 2]  300 	ldw x,acc24
      0002EE 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002F0 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002F1 88               [ 1]  303 	push a  ;save remainder
      0002F2 CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002F5 84               [ 1]  305 	pop a
      0002F6 95               [ 1]  306 	ld xh,a
      0002F7 C6 00 0E         [ 1]  307 	ld a,acc8
      0002FA 97               [ 1]  308 	ld xl,a
      0002FB 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002FD 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002FE 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      000300 9F               [ 1]  312 	ld a,xl
      000301 C7 00 0E         [ 1]  313 	ld acc8,a
      000304 84               [ 1]  314 	pop a
      000305 85               [ 2]  315 	popw x
      000306 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      000307                        332 div24:
      000307                        333     _vars VSIZE 
      000307 52 06            [ 2]    1     sub sp,#VSIZE 
      000309 0F 06            [ 1]  334     clr (RSIGN,sp)
      00030B 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      00030D                        336     _xpop 
      00030D 90 F6            [ 1]    1     ld a,(y)
      00030F 93               [ 1]    2     ldw x,y 
      000310 EE 01            [ 2]    3     ldw x,(1,x)
      000312 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000316 4D               [ 1]  337     tnz a 
      000317 2A 05            [ 1]  338     jrpl 0$ 
      000319 03 05            [ 1]  339     cpl (QSIGN,sp)
      00031B CD 02 15         [ 4]  340     call neg_ax
      00031E                        341 0$:
      00031E 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      000320 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      000322 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      000324 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000326 26 05            [ 1]  346     jrne 1$ 
      000328 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      00032A CC 13 BF         [ 2]  348     jp tb_error 
      00032D                        349 1$: ; dividend  
      00032D                        350     _at_top
      00032D 90 F6            [ 1]    1     ld a,(y)
      00032F 93               [ 1]    2     ldw x,y 
      000330 EE 01            [ 2]    3     ldw x,(1,x)
      000332 4D               [ 1]  351     tnz a 
      000333 2A 07            [ 1]  352     jrpl 2$
      000335 CD 02 15         [ 4]  353     call neg_ax
      000338 03 05            [ 1]  354     cpl (QSIGN,sp)
      00033A 03 06            [ 1]  355     cpl (RSIGN,sp)
      00033C                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      00033C                        359     _store_top 
      00033C 90 F7            [ 1]    1     ld (y),a 
      00033E 90 EF 01         [ 2]    2     ldw (1,y),x     
      000341 A6 18            [ 1]  360     ld a,#24 
      000343 6B 04            [ 1]  361     ld (CNTR,sp),a
      000345 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000347 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000349 CD 01 EA         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      00034C 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00034E C6 00 0C         [ 1]  368     ld a,acc24 
      000351 CE 00 0D         [ 2]  369     ldw x,acc16 
      000354 72 5F 00 0C      [ 1]  370     clr acc24 
      000358 72 5F 00 0D      [ 1]  371     clr acc16 
      00035C 72 5F 00 0E      [ 1]  372     clr acc8 
      000360 20 26            [ 2]  373     jra 6$
      000362                        374 22$:     
      000362 4F               [ 1]  375     clr a 
      000363 5F               [ 1]  376     clrw x 
      000364 98               [ 1]  377     rcf  
      000365                        378 3$: ; shift carry in acc24 bit 0 
      000365 90 69 02         [ 1]  379     rlc (2,y) 
      000368 90 69 01         [ 1]  380     rlc (1,y)
      00036B 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      00036D 59               [ 2]  382     rlcw x  
      00036E 49               [ 1]  383     rlc a
      00036F 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      000372 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000374 24 05            [ 1]  386     jrnc 5$
      000376 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000379 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      00037B                        389 5$: ; shift carry in QUOTIENT 
      00037B 8C               [ 1]  390     ccf
      00037C 0A 04            [ 1]  391     dec (CNTR,sp)
      00037E 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      000380 90 69 02         [ 1]  394     rlc (2,y)
      000383 90 69 01         [ 1]  395     rlc (1,y) 
      000386 90 79            [ 1]  396     rlc (y) 
      000388                        397 6$:    
      000388 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      00038A 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      00038C 0D 05            [ 1]  400     tnz (QSIGN,sp)
      00038E 27 03            [ 1]  401     jreq 8$
      000390 CD 02 03         [ 4]  402     call neg24
      000393                        403 8$: 
      000393 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000395 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000397                        406 81$:
      000397 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000399 27 03            [ 1]  408     jreq 9$
      00039B CD 02 15         [ 4]  409     call neg_ax       
      00039E                        410 9$: _drop VSIZE 
      00039E 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A0 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      0003A1                        423 mod24:
      0003A1 CD 03 07         [ 4]  424     call div24 
      0003A4                        425     _store_top  ; replace quotient by remainder 
      0003A4 90 F7            [ 1]    1     ld (y),a 
      0003A6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003A9 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;  set DEBUG=1 in config.inc 
                                     22 ;;  to enable it.
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 	.macro _dbg_prt_regs
                                     26 	.if DEBUG 
                                     27 		call print_registers  
                                     28 	.endif 
                                     29 	.endm 
                                     30 
                                     31 	.macro _dbg_cmd_itf 
                                     32 	.if DEBUG 
                                     33 		call cmd_itf 
                                     34 	.endif 
                                     35 	.endm 
                                     36 
                           000000    37 .if DEBUG 
                                     38 
                                     39     .area CODE
                                     40 
                                     41 ;--------------------
                                     42 ; print content at address in hex.
                                     43 ; input:
                                     44 ;   X 	address to peek 
                                     45 ; output:
                                     46 ;	none 
                                     47 ;--------------------	
                                     48 prt_peek::
                                     49 	pushw x 
                                     50 	mov base,#16 
                                     51 	call prt_i16  
                                     52 	ld a,#': 
                                     53 	call putc 
                                     54 	ld a,#SPACE 
                                     55 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                     56 	popw x 
                                     57 	ld a,(x)
                                     58 	clrw x 
                                     59 	ld xl,a 
                                     60 	mov base,#10 
                                     61 	call prt_i16 
                                     62 	ret 
                                     63 
                                     64 ;----------------------------------------
                                     65 ;   DEBUG support functions
                                     66 ;----------------------------------------
                                     67 
                                     68 ; turn LED on 
                                     69 ledon:
                                     70     bset PC_ODR,#LED2_BIT
                                     71     ret 
                                     72 
                                     73 ; turn LED off 
                                     74 ledoff:
                                     75     bres PC_ODR,#LED2_BIT 
                                     76     ret 
                                     77 
                                     78 ; invert LED status 
                                     79 ledtoggle:
                                     80     ld a,#LED2_MASK
                                     81     xor a,PC_ODR
                                     82     ld PC_ODR,a
                                     83     ret 
                                     84 
                                     85 left_paren:
                                     86 	ld a,#SPACE 
                                     87 	call putc
                                     88 	ld a,#'( 
                                     89 	call putc 	
                                     90 	ret 
                                     91 
                                     92 ;------------------------------
                                     93 ; print 8 bit register 
                                     94 ; input:
                                     95 ;   X  point to register name 
                                     96 ;   A  register value to print 
                                     97 ; output:
                                     98 ;   none
                                     99 ;------------------------------- 
                                    100 prt_reg8:
                                    101 	push a 
                                    102 	call puts 
                                    103 	ld a,(1,sp) 
                                    104 	clrw x 
                                    105 	ld xl,a 
                                    106 	mov base,#16
                                    107 	call prt_i16  
                                    108 	call left_paren 
                                    109 	pop a 
                                    110 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                    111 	ld xl,a 
                                    112 	mov base,#10 
                                    113 	call prt_i16  
                                    114 	ld a,#') 
                                    115 	call putc
                                    116 	ret
                                    117 
                                    118 ;--------------------------------
                                    119 ; print 16 bits register 
                                    120 ; input:
                                    121 ;   X   point register name 
                                    122 ;   Y   register value to print 
                                    123 ; output:
                                    124 ;  none
                                    125 ;--------------------------------
                                    126 prt_reg16: 
                                    127 	pushw y 
                                    128 	call puts 
                                    129 	ldw x,(1,sp) 
                                    130 	mov base,#16 
                                    131 	call prt_i16  
                                    132 	call left_paren 
                                    133 	popw x 
                                    134 	mov base,#10 
                                    135 	call prt_i16  
                                    136 	ld a,#') 
                                    137 	call putc
                                    138 	ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; print registers contents saved on
                                    142 ; stack by trap interrupt.
                                    143 ;------------------------------------
                                    144 	R_PC=10 
                                    145 	R_CC=9
                                    146 	SAV_ACC24=8
                                    147 	SAV_ACC16=6
                                    148 	R_Y=4
                                    149 	R_X=2
                                    150 	R_A=1
                                    151 	VSIZE=8 
                                    152 print_registers:
                                    153 	push cc 
                                    154 	_vars VSIZE 
                                    155 	ld (R_A,sp),a 
                                    156 	ldw (R_X,sp),x 
                                    157 	ldw (R_Y,sp),y
                                    158 	ld a,acc24 
                                    159 	ldw x,acc16 
                                    160 	ld (SAV_ACC24,sp),a 
                                    161 	ldw (SAV_ACC16,sp),x 
                                    162 	ldw x,#STATES
                                    163 	call puts
                                    164 ; print PC 
                                    165 	ldw x, #REG_PC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                    166 	ldw y, (R_PC,sp)
                                    167 	subw y,#3
                                    168 	call prt_reg16 
                                    169 ; print x
                                    170 	ldw x,#REG_X
                                    171 	ldw y,(R_X,sp)
                                    172 	call prt_reg16  
                                    173 ; print Y 
                                    174 	ldw x,#REG_Y
                                    175 	ldw y, (R_Y,sp)
                                    176 	call prt_reg16  
                                    177 ; print A 
                                    178 	ldw x,#REG_A
                                    179 	ld a, (R_A,sp) 
                                    180 	call prt_reg8
                                    181 ; print CC 
                                    182 	ldw x,#REG_CC 
                                    183 	ld a, (R_CC,sp) 
                                    184 	call prt_reg8 
                                    185 ; print SP 
                                    186 	ldw x,#REG_SP
                                    187 	ldw y,sp 
                                    188 	addw y,#(VSIZE+3)
                                    189 	call prt_reg16  
                                    190 	ld a,#'\n' 
                                    191 	call putc
                                    192 	ld a,(SAV_ACC24,sp)
                                    193 	ldw x,(SAV_ACC16,sp)
                                    194 	ld acc24,a 
                                    195 	ldw acc16,x 
                                    196 	ld a,(R_A,sp)
                                    197 	ldw x,(R_X,sp)
                                    198 	ldw y,(R_Y,sp)
                                    199 	_drop VSIZE
                                    200 	pop cc   	
                                    201 	ret
                                    202 
                                    203 STATES:  .asciz "\nRegisters state at break point.\n--------------------------\n"
                                    204 REG_PC: .asciz "PC:"
                                    205 REG_Y:   .asciz "\nY:" 
                                    206 REG_X:   .asciz "\nX:"
                                    207 REG_A:   .asciz "\nA:" 
                                    208 REG_CC:  .asciz "\nCC:"
                                    209 REG_SP:  .asciz "\nSP:"
                                    210 
                                    211 ;----------------------
                                    212 ; input:
                                    213 ;	Y    *input buffer 
                                    214 ; output:
                                    215 ;   acc24  integer 
                                    216 ;----------------------
                                    217 parse_addr:
                                    218 	ld a,#SPACE 
                                    219 	call skip  	 
                                    220 	addw y,in.w 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                    221 	ldw x,#pad 
                                    222 	call strcpy
                                    223 	ldw x,#pad
                                    224 	call atoi24 	
                                    225 	ret 
                                    226 
                                    227 ;----------------------------
                                    228 ; command interface
                                    229 ; only 3 commands:
                                    230 ;  'q' to resume application
                                    231 ;  'p [addr]' to print memory values 
                                    232 ;  's addr' to print string 
                                    233 ;----------------------------
                                    234 ;local variable
                                    235 	PSIZE=11
                                    236 	SAV_COUNT=10
                                    237 	SAV_IN=9
                                    238 	SAV_ACC24=8
                                    239 	SAV_ACC16=6
                                    240 	R_Y=4
                                    241 	R_X=2
                                    242 	R_A=1
                                    243 	VSIZE=11
                                    244 cmd_itf:
                                    245 	push cc 
                                    246 	_vars VSIZE
                                    247 	ld (R_A,sp),a
                                    248 	ld a,count 
                                    249 	ld (SAV_COUNT,sp),a 
                                    250 	ld a,in 
                                    251 	ld (SAV_IN,sp),a  
                                    252 	ldw (R_X,sp),x 
                                    253 	ldw (R_Y,sp),y
                                    254 	ld a,acc24 
                                    255 	ldw x,acc16 
                                    256 	ld (SAV_ACC24,sp),a 
                                    257 	ldw (SAV_ACC16,sp),x 
                                    258 	clr farptr 
                                    259 	clr farptr+1 
                                    260 	clr farptr+2  
                                    261 repl:
                                    262 	ld a,#CR 
                                    263 	call putc 
                                    264 	ld a,#'? 
                                    265 	call putc
                                    266 	clr in.w 
                                    267 	clr in 
                                    268 	call readln
                                    269 	ldw y,#tib  
                                    270 	ld a,(y)
                                    271 	jreq repl  
                                    272 	inc in 
                                    273 	call to_upper 
                                    274 	cp a,#'Q 
                                    275 	jrne test_p
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                    276 repl_exit:
                                    277 ; restore original context 
                                    278 	ld a,(SAV_ACC24,sp)
                                    279 	ldw x,(SAV_ACC16,sp)
                                    280 	ld acc24,a 
                                    281 	ldw acc16,x
                                    282 	ld a,(SAV_COUNT,sp)
                                    283 	ld count,a 
                                    284 	ld a,(SAV_IN,sp)
                                    285 	ld in,a 
                                    286 	ldw y,(R_Y,sp)
                                    287 	ldw x,(R_X,sp)
                                    288 	ld a,(R_A,sp)
                                    289 	_drop VSIZE
                                    290 	pop cc 
                                    291 	ret  
                                    292 invalid:
                                    293 	ldw x,#invalid_cmd 
                                    294 	call puts 
                                    295 	jra repl 
                                    296 test_p:	
                                    297     cp a,#'P 
                                    298 	jreq mem_peek
                                    299     cp a,#'S 
                                    300 	jrne invalid 
                                    301 print_string:
                                    302 	call parse_addr 	
                                    303 	ldw x,acc16
                                    304 	call puts
                                    305 	jp repl 	
                                    306 mem_peek:
                                    307 	call parse_addr 
                                    308 	ld a, acc24 
                                    309 	or a,acc16 
                                    310 	or a,acc8 
                                    311 	jrne 1$ 
                                    312 	jra peek_byte  
                                    313 1$:	ldw x,acc24 
                                    314 	ldw farptr,x 
                                    315 	ld a,acc8 
                                    316 	ld farptr+2,a 
                                    317 peek_byte:
                                    318 	call print_farptr 
                                    319 	ld a,#8 
                                    320 	ld (PSIZE,sp),a 
                                    321 	clrw x 
                                    322 1$:	call fetchc  
                                    323 	pushw x 
                                    324 	ld acc8,a 
                                    325 	clrw x 
                                    326 	ldw acc24,x 
                                    327 	ld a,#16+128
                                    328 	call prt_acc24
                                    329 	popw x 
                                    330 	dec (PSIZE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                    331 	jrne 1$ 
                                    332 	ld a,#8 
                                    333 	add a,farptr+2 
                                    334 	ld farptr+2,a
                                    335 	clr a 
                                    336 	adc a,farptr+1 
                                    337 	ld farptr+1,a 
                                    338 	clr a 
                                    339 	adc a,farptr 
                                    340 	ld farptr,a 
                                    341 	jp repl  
                                    342 
                                    343 invalid_cmd: .asciz "not a command\n" 
                                    344 
                                    345 ;----------------------------
                                    346 ; display farptr address
                                    347 ;----------------------------
                                    348 print_farptr:
                                    349 	ld a ,farptr+2 
                                    350 	ld acc8,a 
                                    351 	ldw x,farptr 
                                    352 	ldw acc24,x 
                                    353 	clrw x 
                                    354 	ld a,#16 
                                    355 	call prt_acc24
                                    356 	ld a,#SPACE 
                                    357 	call putc 
                                    358 	call putc 
                                    359 	ret
                                    360 
                                    361 ;------------------------------------
                                    362 ; get byte at address farptr[X]
                                    363 ; input:
                                    364 ;	 farptr   address to peek
                                    365 ;    X		  farptr index 	
                                    366 ; output:
                                    367 ;	 A 		  byte from memory  
                                    368 ;    x		  incremented by 1
                                    369 ;------------------------------------
                                    370 fetchc: ; @C
                                    371 	ldf a,([farptr],x)
                                    372 	incw x
                                    373 	ret
                                    374 
                                    375 
                                    376 ;------------------------------------
                                    377 ; expect a number from command line 
                                    378 ; next argument
                                    379 ;  input:
                                    380 ;	  none
                                    381 ;  output:
                                    382 ;    acc24   int24_t 
                                    383 ;------------------------------------
                                    384 number:
                                    385 	call get_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                    386 	cp a,#TK_INTGR
                                    387 	jreq 1$
                                    388 	jp syntax_error
                                    389 1$:	ret
                                    390 
                                    391 ;----------------------
                                    392 ; called by show_row 
                                    393 ; print character 
                                    394 ; corresponding to hex 
                                    395 ; in row
                                    396 ; characters stored in pad 
                                    397 ; input:
                                    398 ;    A count  
                                    399 ;------------------------
                                    400 print_chars:
                                    401 	push a 
                                    402 	ldw x,#pad 
                                    403 1$:	ld a,(x)
                                    404 	cp a,#SPACE 
                                    405 	jrult 2$
                                    406 	cp a,#127 
                                    407 	jruge 2$ 
                                    408 	jra 3$ 
                                    409 2$: ld a,#'_ 
                                    410 3$:	
                                    411 	call putc 
                                    412 	incw x 
                                    413 	dec (1,sp)
                                    414 	jrne 1$
                                    415 	pop a 
                                    416 	ret 
                                    417 
                                    418 
                                    419 ;---------------------
                                    420 ; display n bytes row 
                                    421 ; from memory.
                                    422 ; input:
                                    423 ;   A        bytes to print 
                                    424 ;	farptr   address 
                                    425 ; output:
                                    426 ;   farptr  address after last shown  
                                    427 ;---------------------
                                    428 	CNT=1
                                    429 	CNTDWN=2 
                                    430 	BYTE=3
                                    431 	VSIZE=3 
                                    432 show_row:
                                    433 	tnz a 
                                    434 	jrne 1$
                                    435 	ret 
                                    436 1$:	
                                    437 	_vars VSIZE 
                                    438 	ld (CNT,sp),a 
                                    439 	ld (CNTDWN,sp),a 
                                    440 	ld a,farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                    441 	ldw x,ptr16 
                                    442 	ld acc24,a 
                                    443 	ldw acc16,x 
                                    444 	call itoa 
                                    445 	ld a,#7 
                                    446 	call right_align
                                    447 	call puts 
                                    448 	ld a,#9 
                                    449 	call putc 
                                    450 row_loop:
                                    451 	ldf a,[farptr]
                                    452 	ld (BYTE,sp),a
                                    453 	ld a,(CNT,sp)
                                    454 	sub a,(CNTDWN,sp)
                                    455 	clrw x 
                                    456 	ld xl,a 
                                    457 	addw x,#pad 
                                    458 	ld a,(BYTE,sp)
                                    459 	ld (x),a 
                                    460 	clr acc24 
                                    461 	clr acc16 
                                    462 	ld acc8,a 
                                    463 	call itoa 
                                    464 	ld a,#4
                                    465 	call right_align 
                                    466 	call puts 
                                    467 	ldw x,#1 	
                                    468 	call incr_farptr
                                    469 	dec (CNTDWN,sp)
                                    470 	jrne row_loop
                                    471 	ld a,#SPACE 
                                    472 	call putc
                                    473 	ld a,(CNT,sp) 
                                    474 	call print_chars 
                                    475 	ld a,#CR 
                                    476 	call putc 
                                    477 	_drop VSIZE   
                                    478 	ret 
                                    479 
                                    480 ;--------------------------
                                    481 ; print memory content 
                                    482 ; in hexadecimal format
                                    483 ;  input:
                                    484 ;    farptr  start address 
                                    485 ;    X       count bytes to print 
                                    486 ;--------------------------
                                    487 	BCNT=1
                                    488 	BASE=3
                                    489 	VSIZE=3   
                                    490 hex_dump:
                                    491 	push a 
                                    492 	_vars VSIZE
                                    493 	ld a,base
                                    494 	ld (BASE,sp),a 
                                    495 	mov base,#16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    496 	ld a,#CR 
                                    497 	call putc 
                                    498 1$: ldw (BCNT,sp),x
                                    499 	ld a,#16
                                    500 	cpw x,#16
                                    501 	jrpl 2$
                                    502 	ld a,xl
                                    503 2$: 	
                                    504 	call show_row 
                                    505 	ldw x,(BCNT,sp) 
                                    506 	subw x,#16 
                                    507 	cpw x,#1
                                    508 	jrpl 1$
                                    509 	ld a,(BASE,sp)
                                    510 	ld base,a
                                    511 	_drop VSIZE
                                    512 	pop a 
                                    513 	ret 
                                    514 
                                    515 .endif ; DEBUG 
                                    516 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0003AA                         45 unlock_eeprom:
      0003AA 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0003AF 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0003B3 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0003B7 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0003BB 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0003BF 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0003C4 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0003C5                         62 unlock_flash:
      0003C5 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0003CA 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0003CE 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0003D2 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0003D6 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0003DA 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0003DF 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0003E0                         76 row_erase:
      0003E0 88               [ 1]   77 	push a 
      0003E1 90 89            [ 2]   78 	pushw y 
      0003E3 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0003E7 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0003EB 4F               [ 1]   81 	clr a 
      0003EC 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0003EE 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0003F2 90 5C            [ 1]   84     incw y
      0003F4 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0003F8 90 5C            [ 1]   86     incw y
      0003FA 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0003FE 90 5C            [ 1]   88     incw y
      000400 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      000404 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000409 90 85            [ 2]   91 	popw y 
      00040B 84               [ 1]   92 	pop a 
      00040C 81               [ 4]   93 	ret
      00040D                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      00040D                         97 move_erase_to_ram:
      00040D 89               [ 2]   98 	pushw x 
      00040E 90 89            [ 2]   99 	pushw y 
      000410 AE 04 0D         [ 2]  100 	ldw x,#row_erase_end 
      000413 1D 03 E0         [ 2]  101 	subw x,#row_erase
      000416 CF 00 0D         [ 2]  102 	ldw acc16,x 
      000419 AE 16 68         [ 2]  103 	ldw x,#tib 
      00041C 90 AE 03 E0      [ 2]  104 	ldw y,#row_erase 
      000420 CD 10 E5         [ 4]  105 	call move
      000423 90 85            [ 2]  106 	popw y
      000425 85               [ 2]  107 	popw x
      000426 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000427                        123 program_row:
      000427 88               [ 1]  124 	push a 
      000428 90 89            [ 2]  125 	pushw y 
      00042A 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      00042C 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000430 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000434 90 5F            [ 1]  130 	clrw y 
      000436 F6               [ 1]  131 1$:	ld a,(x)
      000437 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      00043B 5C               [ 1]  133 	incw x 
      00043C 90 5C            [ 1]  134 	incw y 
      00043E 0A 01            [ 1]  135 	dec (BCNT,sp)
      000440 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000442 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000447                        139 	_drop 1 
      000447 5B 01            [ 2]    1     addw sp,#1 
      000449 90 85            [ 2]  140 	popw y 
      00044B 84               [ 1]  141 	pop a 
      00044C 81               [ 4]  142 	ret 
      00044D                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      00044D                        149 move_prg_to_ram:
      00044D 89               [ 2]  150 	pushw x 
      00044E 90 89            [ 2]  151 	pushw y 
      000450 AE 04 4D         [ 2]  152 	ldw x,#program_row_end 
      000453 1D 04 27         [ 2]  153 	subw x,#program_row 
      000456 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      000459 AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      00045C 90 AE 04 27      [ 2]  156 	ldw y,#program_row ; source address 
      000460 CD 10 E5         [ 4]  157 	call move
      000463 90 85            [ 2]  158 	popw y 
      000465 85               [ 2]  159 	popw x  
      000466 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000467                        169 write_buffer:
      000467 89               [ 2]  170 	pushw x 
      000468 72 5D 00 18      [ 1]  171 	tnz farptr 
      00046C 26 0D            [ 1]  172 	jrne to_flash 
      00046E CE 00 19         [ 2]  173 	ldw x,farptr+1 
      000471 A3 34 00         [ 2]  174 	cpw x,#app_space  
      000474 24 05            [ 1]  175 	jruge to_flash 
      000476                        176 to_eeprom:
      000476 CD 03 AA         [ 4]  177 	call unlock_eeprom
      000479 20 03            [ 2]  178 	jra do_programming
      00047B                        179 to_flash:
      00047B CD 03 C5         [ 4]  180 	call unlock_flash
      00047E                        181 do_programming:
      00047E 85               [ 2]  182 	popw x 
      00047F CD 16 68         [ 4]  183 	call tib
      000482 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000486 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      00048A 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      00048B                        197 block_erase:
      00048B 89               [ 2]  198 	pushw x 
      00048C C6 00 18         [ 1]  199 	ld a,farptr 
      00048F 26 14            [ 1]  200 	jrne erase_flash
      000491 CE 00 19         [ 2]  201 	ldw x,farptr+1
      000494 A3 34 00         [ 2]  202 	cpw x,#app_space 
      000497 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000499 CD 03 AA         [ 4]  205 	call unlock_eeprom 
      00049C CD 16 68         [ 4]  206 	call tib 
      00049F 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0004A3 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0004A5                        210 erase_flash:
      0004A5 CD 03 C5         [ 4]  211 	call unlock_flash 
      0004A8 CD 16 68         [ 4]  212 	call tib 
      0004AB 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0004AF                        214 erase_exit: 
      0004AF 85               [ 2]  215 	popw x 
      0004B0 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0004B1                        232 write_byte:
      0004B1 90 89            [ 2]  233 	pushw y
      0004B3                        234 	_vars VSIZE
      0004B3 52 02            [ 2]    1     sub sp,#VSIZE 
      0004B5 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0004B7 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0004B9 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0004BD 72 5D 00 18      [ 1]  240 	tnz farptr 
      0004C1 26 14            [ 1]  241 	jrne write_flash
      0004C3 90 A3 34 00      [ 2]  242     cpw y,#app_space 	 
      0004C7 24 0E            [ 1]  243     jruge write_flash
      0004C9 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0004CD 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0004CF 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0004D3 22 51            [ 1]  247 	jrugt write_exit
      0004D5 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0004D7                        250 write_flash:
      0004D7 CD 03 C5         [ 4]  251 	call unlock_flash 
      0004DA 9B               [ 1]  252 1$:	sim 
      0004DB 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0004DD 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0004E1 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0004E6 9A               [ 1]  256     rim 
      0004E7 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0004EB 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0004ED                        260 write_eeprom:
      0004ED CD 03 AA         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0004F0 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0004F4 2B 08            [ 1]  264 	jrmi 1$
      0004F6 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0004FA 2A 02            [ 1]  266 	jrpl 1$
      0004FC 03 02            [ 1]  267 	cpl (OPT,sp)
      0004FE                        268 1$: 
      0004FE 0D 02            [ 1]  269     tnz (OPT,sp)
      000500 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      000502 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      000506 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00050A                        274 2$: 
      00050A 7B 01            [ 1]  275     ld a,(BTW,sp)
      00050C 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      000510 0D 02            [ 1]  277     tnz (OPT,sp)
      000512 27 08            [ 1]  278     jreq 3$
      000514 5C               [ 1]  279     incw x
      000515 7B 01            [ 1]  280     ld a,(BTW,sp)
      000517 43               [ 1]  281     cpl a
      000518 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      00051C 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000521 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000526                        285 write_exit:
      000526 5C               [ 1]  286 	incw x 
      000527 CD 05 86         [ 4]  287 	call incr_farptr
      00052A 5F               [ 1]  288 	clrw x 
      00052B                        289 	_drop VSIZE 
      00052B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00052D 90 85            [ 2]  290 	popw y
      00052F 81               [ 4]  291     ret
                                    292 
                                    293 ;--------------------------------------------
                                    294 ; write a data block to eeprom or flash 
                                    295 ; the block must be erased before 
                                    296 ; using this routine.
                                    297 ; input:
                                    298 ;   Y        source address   
                                    299 ;   X        array index  destination  farptr[x]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                    300 ;   BSIZE    block size bytes 
                                    301 ;   farptr   write address , byte* 
                                    302 ; output:
                                    303 ;	X 		after last byte written 
                                    304 ;   Y 		after last byte read 
                                    305 ;  farptr   point after block
                                    306 ;---------------------------------------------
      000530                        307 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000530                        308 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    309 	; local var 
                           000001   310 	XSAVE=1 
                           000002   311 	VSIZE=2 
      000530                        312 write_block::
      000530 88               [ 1]  313 	push a 
      000531                        314 	_vars VSIZE
      000531 52 02            [ 2]    1     sub sp,#VSIZE 
      000533 1F 01            [ 2]  315 	ldw (XSAVE,sp),x 
      000535 1E 06            [ 2]  316 	ldw x,(BSIZE,sp) 
      000537 27 13            [ 1]  317 	jreq 9$
      000539 1E 01            [ 2]  318 1$:	ldw x,(XSAVE,sp)
      00053B 90 F6            [ 1]  319 	ld a,(y)
      00053D CD 04 B1         [ 4]  320 	call write_byte 
      000540 5C               [ 1]  321 	incw x 
      000541 90 5C            [ 1]  322 	incw y 
      000543 1F 01            [ 2]  323 	ldw (XSAVE,sp),x
      000545 1E 06            [ 2]  324 	ldw x,(BSIZE,sp)
      000547 5A               [ 2]  325 	decw x
      000548 1F 06            [ 2]  326 	ldw (BSIZE,sp),x 
      00054A 26 ED            [ 1]  327 	jrne 1$
      00054C                        328 9$:
      00054C 1E 01            [ 2]  329 	ldw x,(XSAVE,sp)
      00054E CD 05 86         [ 4]  330 	call incr_farptr
      000551                        331 	_drop VSIZE
      000551 5B 02            [ 2]    1     addw sp,#VSIZE 
      000553 84               [ 1]  332 	pop a 
      000554 81               [ 4]  333 	ret 
                                    334 
                                    335 
                                    336 ;------------------------------------
                                    337 ; write n bytes to flash | eeprom 
                                    338 ; if the number of bytes is 
                                    339 ; >=128 it is faster to 
                                    340 ; use write_block
                                    341 ; the bytes are written one by 
                                    342 ; one and auto erased if required. 
                                    343 ; input:
                                    344 ;    farptr    dest address 
                                    345 ;    X         src address 
                                    346 ;    A         count 
                                    347 ; output:
                                    348 ;    none   
                                    349 ;----------------------------------
      000555                        350 write_nbytes:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      000555 90 89            [ 2]  351 	pushw y
      000557 88               [ 1]  352 	push a 
      000558 90 93            [ 1]  353 	ldw y,x
      00055A 5F               [ 1]  354 	clrw x 
      00055B                        355 1$:  
      00055B 90 F6            [ 1]  356 	ld a,(y)
      00055D 90 5C            [ 1]  357 	incw y
      00055F CD 04 B1         [ 4]  358 	call write_byte 
      000562 5C               [ 1]  359 	incw x 
      000563 0A 01            [ 1]  360 	dec (1,sp)  
      000565 26 F4            [ 1]  361 	jrne 1$ 
      000567 84               [ 1]  362 9$: pop a 
      000568 90 85            [ 2]  363 	popw y 
      00056A 81               [ 4]  364 	ret 
                                    365 
                                    366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    367 ;;;  flash memory operations
                                    368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    369 
                                    370 ;--------------------------
                                    371 ; align farptr to BLOCK_SIZE 
                                    372 ;---------------------------
      00056B                        373 row_align:
      00056B A6 7F            [ 1]  374 	ld a,#0x7f 
      00056D C4 00 1A         [ 1]  375 	and a,farptr+2 
      000570 27 13            [ 1]  376 	jreq 1$ 
      000572 CE 00 19         [ 2]  377 	ldw x,farptr+1 
      000575 1C 00 80         [ 2]  378 	addw x,#BLOCK_SIZE 
      000578 24 04            [ 1]  379 	jrnc 0$
      00057A 72 5C 00 18      [ 1]  380 	inc farptr 
      00057E 9F               [ 1]  381 0$: ld a,xl 
      00057F A4 80            [ 1]  382 	and a,#0x80
      000581 97               [ 1]  383 	ld xl,a
      000582 CF 00 19         [ 2]  384 	ldw farptr+1,x  	
      000585 81               [ 4]  385 1$:	ret
                                    386 
                                    387 ;--------------------
                                    388 ; input:
                                    389 ;   X     increment 
                                    390 ; output:
                                    391 ;   farptr  incremented 
                                    392 ;---------------------
      000586                        393 incr_farptr:
      000586 72 BB 00 19      [ 2]  394 	addw x,farptr+1 
      00058A 24 04            [ 1]  395 	jrnc 1$
      00058C 72 5C 00 18      [ 1]  396 	inc farptr 
      000590 CF 00 19         [ 2]  397 1$:	ldw farptr+1,x  
      000593 81               [ 4]  398 	ret 
                                    399 
                                    400 ;-----------------------------------
                                    401 ; scan block for non zero byte 
                                    402 ; block are 128 bytes 
                                    403 ; input:
                                    404 ;    farptr     address block  
                                    405 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                    406 ;     A     0 cleared, other not cleared  
                                    407 ;-----------------------------------
      000594                        408 scan_block:
      000594 5F               [ 1]  409 	clrw x 
      000595 92 AF 00 18      [ 5]  410 1$: ldf a,([farptr],x) 
      000599 26 06            [ 1]  411 	jrne 2$
      00059B 5C               [ 1]  412 	incw x 
      00059C A3 00 80         [ 2]  413 	cpw x,#BLOCK_SIZE 
      00059F 25 F4            [ 1]  414 	jrult 1$ 
      0005A1 81               [ 4]  415 2$:	ret 
                                    416 
                                    417 
                                    418 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; defined functions:
                                     23 ;   getc   wait for a character 
                                     24 ;   qgetc  check if char available 
                                     25 ;   putc   send a char to terminal
                                     26 ;   puts   print a string to terminal
                                     27 ;   readln  read text line from terminal 
                                     28 ;   spaces  print n spaces on terminal 
                                     29 ;   print_hex  print hex value from A 
                                     30 ;------------------------------
                                     31 
                                     32     .module TERMINAL
                                     33 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                     34     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                     35 
                           000000    36 .if SEPARATE
                                     37 	.include "inc/nucleo_8s208.inc"
                                     38 	.include "inc/stm8s208.inc"
                                     39 	.include "inc/ascii.inc"
                                     40 	.include "inc/gen_macros.inc" 
                                     41 	.include "tbi_macros.inc" 
                                     42 .endif 
                                     43 
                                     44     .area CODE 
                                     45 
                                     46 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     47 ;;   UART1 subroutines
                                     48 ;;   used for user interface 
                                     49 ;;   communication channel.
                                     50 ;;   settings: 
                                     51 ;;		115200 8N1 no flow control
                                     52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     53 
                                     54 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     55 ;;; Uart1 intterrupt handler 
                                     56 ;;; on receive character 
                                     57 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     58 ;--------------------------
                                     59 ; UART1 receive character
                                     60 ; in a FIFO buffer 
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ; CTLR+Z erase EEPROM autorun 
                                     66 ;        information and reboot
                                     67 ;--------------------------
      0005A2                         68 Uart1RxHandler: ; console receive char 
      0005A2 72 0B 52 30 31   [ 2]   69 	btjf UART1_SR,#UART_SR_RXNE,5$
      0005A7 C6 52 31         [ 1]   70 	ld a,UART1_DR 
      0005AA A1 03            [ 1]   71 	cp a,#CTRL_C 
      0005AC 26 06            [ 1]   72 	jrne 2$
      0005AE CD 06 25         [ 4]   73 	call putc 
      0005B1 CC 00 49         [ 2]   74 	jp user_interrupted
      0005B4                         75 2$:
      0005B4 A1 18            [ 1]   76 	cp a,#CAN ; CTRL_X 
      0005B6 26 03            [ 1]   77 	jrne 3$
      0005B8 CC 00 B5         [ 2]   78 	jp cold_start 	
      0005BB A1 1A            [ 1]   79 3$:	cp a,#CTRL_Z 
      0005BD 26 06            [ 1]   80 	jrne 4$
      0005BF CD 05 D9         [ 4]   81 	call clear_autorun
      0005C2 CC 00 B5         [ 2]   82 	jp cold_start 
      0005C5                         83 4$:
      0005C5 88               [ 1]   84 	push a 
      0005C6 A6 25            [ 1]   85 	ld a,#rx1_queue 
      0005C8 CB 00 2E         [ 1]   86 	add a,rx1_tail 
      0005CB 5F               [ 1]   87 	clrw x 
      0005CC 97               [ 1]   88 	ld xl,a 
      0005CD 84               [ 1]   89 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0005CE F7               [ 1]   90 	ld (x),a 
      0005CF C6 00 2E         [ 1]   91 	ld a,rx1_tail 
      0005D2 4C               [ 1]   92 	inc a 
      0005D3 A4 07            [ 1]   93 	and a,#RX_QUEUE_SIZE-1
      0005D5 C7 00 2E         [ 1]   94 	ld rx1_tail,a 
      0005D8 80               [11]   95 5$:	iret 
                                     96 
      0005D9                         97 clear_autorun:
      0005D9 AE 40 00         [ 2]   98 	ldw x,#EEPROM_BASE 
      0005DC CD 26 1B         [ 4]   99 	call erase_header ; in TinyBasic.asm 
      0005DF 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; initialize UART1, 115200 8N1
                                    104 ; called from cold_start in hardware_init.asm 
                                    105 ; input:
                                    106 ;	none
                                    107 ; output:
                                    108 ;   none
                                    109 ;---------------------------------------------
      0005E0                        110 uart1_init:
      0005E0 72 1A 50 02      [ 1]  111     bset PA_DDR,#UART1_TX_PIN
      0005E4 72 1A 50 03      [ 1]  112     bset PA_CR1,#UART1_TX_PIN 
      0005E8 72 1A 50 04      [ 1]  113     bset PA_CR2,#UART1_TX_PIN 
                                    114 ; enable UART1 clock
      0005EC 72 14 50 C7      [ 1]  115 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0005F0                        116 uart1_set_baud: 
      0005F0 88               [ 1]  117 	push a 
                                    118 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    119 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0005F1 A6 E1            [ 1]  120 	ld a,#CLK_SWR_HSI
      0005F3 C1 50 C3         [ 1]  121 	cp a,CLK_CMSR 
      0005F6 27 0A            [ 1]  122 	jreq 2$ 
      0005F8                        123 1$: ; 8 Mhz 	
      0005F8 35 05 52 33      [ 1]  124 	mov UART1_BRR2,#0x05 ; must be loaded first
      0005FC 35 04 52 32      [ 1]  125 	mov UART1_BRR1,#0x4
      000600 20 08            [ 2]  126 	jra 3$
      000602                        127 2$: ; 16 Mhz 	
      000602 35 0B 52 33      [ 1]  128 	mov UART1_BRR2,#0x0b ; must be loaded first
      000606 35 08 52 32      [ 1]  129 	mov UART1_BRR1,#0x08
      00060A                        130 3$:
      00060A 72 5F 52 31      [ 1]  131     clr UART1_DR
      00060E 35 2C 52 35      [ 1]  132 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000612 72 10 52 35      [ 1]  133 	bset UART1_CR2,#UART_CR2_SBK
      000616 72 0D 52 30 FB   [ 2]  134     btjf UART1_SR,#UART_SR_TC,.
      00061B 72 5F 00 2D      [ 1]  135     clr rx1_head 
      00061F 72 5F 00 2E      [ 1]  136 	clr rx1_tail
      000623 84               [ 1]  137 	pop a  
      000624 81               [ 4]  138 	ret
                                    139 
                                    140 ;---------------------------------
                                    141 ; uart1_putc
                                    142 ; send a character via UART1
                                    143 ; input:
                                    144 ;    A  	character to send
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                    145 ;---------------------------------
      000625                        146 putc:: ; console output always on UART1
      000625                        147 uart1_putc:: 
      000625 72 0F 52 30 FB   [ 2]  148 	btjf UART1_SR,#UART_SR_TXE,.
      00062A C7 52 31         [ 1]  149 	ld UART1_DR,a 
      00062D 81               [ 4]  150 	ret 
                                    151 
                                    152 
                                    153 ;---------------------------------
                                    154 ; Query for character in rx1_queue
                                    155 ; input:
                                    156 ;   none 
                                    157 ; output:
                                    158 ;   A     0 no charcter available
                                    159 ;   Z     1 no character available
                                    160 ;---------------------------------
      00062E                        161 qgetc::
      00062E                        162 uart1_qgetc::
      00062E C6 00 2D         [ 1]  163 	ld a,rx1_head 
      000631 C0 00 2E         [ 1]  164 	sub a,rx1_tail 
      000634 81               [ 4]  165 	ret 
                                    166 
                                    167 ;---------------------------------
                                    168 ; wait character from UART1 
                                    169 ; input:
                                    170 ;   none
                                    171 ; output:
                                    172 ;   A 			char  
                                    173 ;--------------------------------	
      000635                        174 getc:: ;console input
      000635                        175 uart1_getc::
      000635 CD 06 2E         [ 4]  176 	call uart1_qgetc
      000638 27 FB            [ 1]  177 	jreq uart1_getc 
      00063A 89               [ 2]  178 	pushw x 
                                    179 ;; rx1_queue must be in page 0 	
      00063B A6 25            [ 1]  180 	ld a,#rx1_queue
      00063D CB 00 2D         [ 1]  181 	add a,rx1_head 
      000640 5F               [ 1]  182 	clrw x  
      000641 97               [ 1]  183 	ld xl,a 
      000642 F6               [ 1]  184 	ld a,(x)
      000643 88               [ 1]  185 	push a
      000644 C6 00 2D         [ 1]  186 	ld a,rx1_head 
      000647 4C               [ 1]  187 	inc a 
      000648 A4 07            [ 1]  188 	and a,#RX_QUEUE_SIZE-1
      00064A C7 00 2D         [ 1]  189 	ld rx1_head,a 
      00064D 84               [ 1]  190 	pop a  
      00064E 85               [ 2]  191 	popw x
      00064F 81               [ 4]  192 	ret 
                                    193 
                                    194 ;-----------------------------
                                    195 ;  constants replacing 
                                    196 ;  ANSI sequence received 
                                    197 ;  from terminal.
                                    198 ;  These are the ANSI sequences
                                    199 ;  accepted by readln function
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                    200 ;------------------------------
                           000080   201     ARROW_LEFT=128
                           000081   202     ARROW_RIGHT=129
                           000082   203     HOME=130
                           000083   204     KEY_END=131
                           000084   205     SUP=132 
                                    206 
      000650 43 81 44 80 48 82 46   207 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    208 
                                    209 ;--------------------------------
                                    210 ; receive ANSI ESC 
                                    211 ; sequence and convert it
                                    212 ; to a single character code 
                                    213 ; in range {128..255}
                                    214 ; This is called after receiving 
                                    215 ; ESC character. 
                                    216 ; ignored sequence return 0 
                                    217 ; output:
                                    218 ;   A    converted character 
                                    219 ;-------------------------------
      00065C                        220 get_escape:
      00065C CD 06 35         [ 4]  221     call getc 
      00065F A1 5B            [ 1]  222     cp a,#'[ ; this character is expected after ESC 
      000661 27 02            [ 1]  223     jreq 1$
      000663 4F               [ 1]  224     clr a
      000664 81               [ 4]  225     ret
      000665 CD 06 35         [ 4]  226 1$: call getc 
      000668 AE 06 50         [ 2]  227     ldw x,#convert_table
      00066B                        228 2$:
      00066B F1               [ 1]  229     cp a,(x)
      00066C 27 08            [ 1]  230     jreq 4$
      00066E 1C 00 02         [ 2]  231     addw x,#2
      000671 7D               [ 1]  232     tnz (x)
      000672 26 F7            [ 1]  233     jrne 2$
      000674 4F               [ 1]  234     clr a
      000675 81               [ 4]  235     ret 
      000676 5C               [ 1]  236 4$: incw x 
      000677 F6               [ 1]  237     ld a,(x)
      000678 A1 84            [ 1]  238     cp a,#SUP
      00067A 26 05            [ 1]  239     jrne 5$
      00067C 88               [ 1]  240     push a 
      00067D CD 06 35         [ 4]  241     call getc
      000680 84               [ 1]  242     pop a 
      000681                        243 5$:
      000681 81               [ 4]  244     ret 
                                    245 
                                    246 
                                    247 ;-----------------------------
                                    248 ; send an ASCIZ string to UART1 
                                    249 ; input: 
                                    250 ;   x 		char * 
                                    251 ; output:
                                    252 ;   none 
                                    253 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      000682                        254 puts::
      000682 F6               [ 1]  255     ld a,(x)
      000683 27 06            [ 1]  256 	jreq 1$
      000685 CD 06 25         [ 4]  257 	call putc 
      000688 5C               [ 1]  258 	incw x 
      000689 20 F7            [ 2]  259 	jra puts 
      00068B 81               [ 4]  260 1$:	ret 
                                    261 
                                    262 
                                    263 ;---------------------------
                                    264 ; delete character at left 
                                    265 ; of cursor on terminal 
                                    266 ; input:
                                    267 ;   none 
                                    268 ; output:
                                    269 ;	none 
                                    270 ;---------------------------
      00068C                        271 bksp:
      00068C A6 08            [ 1]  272 	ld a,#BS 
      00068E CD 06 25         [ 4]  273 	call putc 
      000691 A6 20            [ 1]  274 	ld a,#SPACE 
      000693 CD 06 25         [ 4]  275 	call putc 
      000696 A6 08            [ 1]  276 	ld a,#BS 
      000698 CD 06 25         [ 4]  277 	call putc 
      00069B 81               [ 4]  278 	ret 
                                    279 ;---------------------------
                                    280 ; delete n character left of cursor 
                                    281 ; at terminal.
                                    282 ; input: 
                                    283 ;   A   number of characters to delete.
                                    284 ; output:
                                    285 ;    none 
                                    286 ;--------------------------	
      00069C                        287 delete_nchar:
      00069C 88               [ 1]  288 	push a 
      00069D 0D 01            [ 1]  289 0$:	tnz (1,sp)
      00069F 27 07            [ 1]  290 	jreq 1$
      0006A1 CD 06 8C         [ 4]  291 	call bksp 
      0006A4 0A 01            [ 1]  292 	dec (1,sp)
      0006A6 20 F5            [ 2]  293 	jra 0$
      0006A8 84               [ 1]  294 1$:	pop a 
      0006A9 81               [ 4]  295 	ret
                                    296 
                                    297 ;--------------------------
                                    298 ; send ANSI escape sequence
                                    299 ; ANSI: ESC[
                                    300 ; note: ESC is ASCII 27
                                    301 ;       [   is ASCII 91  
                                    302 ;-------------------------- 
      0006AA                        303 send_escape:
      0006AA A6 1B            [ 1]  304 	ld a,#ESC 
      0006AC CD 06 25         [ 4]  305 	call putc 
      0006AF A6 5B            [ 1]  306 	ld a,#'[
      0006B1 CD 06 25         [ 4]  307 	call putc 
      0006B4 81               [ 4]  308 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                    309 
                                    310 ;---------------------
                                    311 ;send ANSI parameter value
                                    312 ; ANSI parameter values are 
                                    313 ; sent as ASCII charater 
                                    314 ; not as binary number.
                                    315 ; this routine 
                                    316 ; convert binary number to 
                                    317 ; ASCII string and send it.
                                    318 ; expected range {0..99}
                                    319 ; input: 
                                    320 ; 	A {0..99} 
                                    321 ; output:
                                    322 ;   none 
                                    323 ;---------------------
      0006B5                        324 send_parameter:
      0006B5 89               [ 2]  325 	pushw x 
      0006B6 5F               [ 1]  326 	clrw x 
      0006B7 97               [ 1]  327 	ld xl,a 
      0006B8 A6 0A            [ 1]  328 	ld a,#10 
      0006BA 62               [ 2]  329 	div x,a 
      0006BB 95               [ 1]  330 	ld xh,a 
      0006BC 9F               [ 1]  331 	ld a,xl
      0006BD 4D               [ 1]  332     tnz a 
      0006BE 27 0B            [ 1]  333     jreq 2$
      0006C0 A1 09            [ 1]  334 	cp a,#9 
      0006C2 23 02            [ 2]  335 	jrule 1$
      0006C4 A6 09            [ 1]  336 	ld a,#9
      0006C6                        337 1$:
      0006C6 AB 30            [ 1]  338 	add a,#'0 
      0006C8 CD 06 25         [ 4]  339 	call putc
      0006CB 9E               [ 1]  340 2$:	ld a,xh 
      0006CC AB 30            [ 1]  341 	add a,#'0
      0006CE CD 06 25         [ 4]  342 	call putc 
      0006D1 85               [ 2]  343 	popw x 
      0006D2 81               [ 4]  344 	ret 
                                    345 
                                    346 ;--------------------------
                                    347 ; move cursor left n character
                                    348 ; ANSI: ESC[PnD 
                                    349 ; 'Pn' est a numerical parameter
                                    350 ; specifying number of characters 
                                    351 ; displacement.
                                    352 ; input:
                                    353 ;   A     character count
                                    354 ; output:
                                    355 ;   none
                                    356 ;--------------------------
      0006D3                        357 move_left:
      0006D3 88               [ 1]  358 	push a 
      0006D4 CD 06 AA         [ 4]  359 	call send_escape
      0006D7 84               [ 1]  360     pop a
      0006D8 CD 06 B5         [ 4]  361 	call send_parameter 
      0006DB A6 44            [ 1]  362 	ld a,#'D 
      0006DD CD 06 25         [ 4]  363 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0006E0 81               [ 4]  364 	ret	
                                    365 
                                    366 
                                    367 ;--------------------------
                                    368 ; move cursor right n character 
                                    369 ; ANSI: ESC[PnC 
                                    370 ; input:
                                    371 ;   A     character count
                                    372 ; output:
                                    373 ;   none
                                    374 ;--------------------------
      0006E1                        375 move_right:
      0006E1 88               [ 1]  376 	push a 
      0006E2 CD 06 AA         [ 4]  377 	call send_escape
      0006E5 84               [ 1]  378     pop a
      0006E6 CD 06 B5         [ 4]  379 	call send_parameter 
      0006E9 A6 43            [ 1]  380 	ld a,#'C 
      0006EB CD 06 25         [ 4]  381 	call putc 
      0006EE 81               [ 4]  382 	ret 
                                    383 
                                    384 
                                    385 ;--------------------------
                                    386 ; print n spaces on terminal
                                    387 ; input:
                                    388 ;  X 		number of spaces 
                                    389 ; output:
                                    390 ;	none 
                                    391 ;---------------------------
      0006EF                        392 spaces::
      0006EF A6 20            [ 1]  393 	ld a,#SPACE 
      0006F1 5D               [ 2]  394 1$:	tnzw x
      0006F2 27 06            [ 1]  395 	jreq 9$
      0006F4 CD 06 25         [ 4]  396 	call putc 
      0006F7 5A               [ 2]  397 	decw x
      0006F8 20 F7            [ 2]  398 	jra 1$
      0006FA                        399 9$: 
      0006FA 81               [ 4]  400 	ret 
                                    401 
                                    402 ;--------------------------
                                    403 ; insert character in text 
                                    404 ; line 
                                    405 ; input:
                                    406 ;   A       character to insert 
                                    407 ;   xl      line length
                                    408 ;   xh      insert position 
                                    409 ;   Y       line pointer 
                                    410 ; output:
                                    411 ;   tib     updated 
                                    412 ;   Y       updated  
                                    413 ;-------------------------
                           000001   414 	IPOS=1
                           000002   415 	KCHAR=2 
                           000003   416     LLEN=3 
                           000003   417 	VSIZE=3 
      0006FB                        418 insert_char: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0006FB                        419 	_vars VSIZE 
      0006FB 52 03            [ 2]    1     sub sp,#VSIZE 
      0006FD 6B 02            [ 1]  420     ld (KCHAR,sp),a 
      0006FF 9E               [ 1]  421     ld a,xh 
      000700 6B 01            [ 1]  422 	ld (IPOS,sp),a
      000702 9F               [ 1]  423     ld a,xl 
      000703 6B 03            [ 1]  424     ld (LLEN,sp),a  
      000705 93               [ 1]  425     ldw x,y
      000706 5C               [ 1]  426     incw x 
      000707 7B 03            [ 1]  427     ld a,(LLEN,sp)
      000709 10 01            [ 1]  428     sub a,(IPOS,sp)
      00070B 4C               [ 1]  429     inc a 
      00070C C7 00 0E         [ 1]  430     ld acc8,a 
      00070F 72 5F 00 0D      [ 1]  431     clr acc16
      000713 CD 10 E5         [ 4]  432     call move
      000716 90 AE 16 68      [ 2]  433     ldw y,#tib 
      00071A 7B 01            [ 1]  434     ld a,(IPOS,sp)
      00071C C7 00 0E         [ 1]  435     ld acc8,a 
      00071F 72 B9 00 0D      [ 2]  436     addw y,acc16 
      000723 7B 02            [ 1]  437     ld a,(KCHAR,sp)
      000725 90 F7            [ 1]  438     ld (y),a
      000727 90 5C            [ 1]  439     incw y  
      000729 7B 01            [ 1]  440     ld a,(IPOS,sp)
      00072B CD 06 D3         [ 4]  441     call move_left
      00072E AE 16 68         [ 2]  442     ldw x,#tib 
      000731 CD 06 82         [ 4]  443     call puts 
      000734 7B 03            [ 1]  444     ld a,(LLEN,sp)
      000736 10 01            [ 1]  445     sub a,(IPOS,sp) 
      000738 CD 06 D3         [ 4]  446     call move_left 
      00073B                        447 	_drop VSIZE 
      00073B 5B 03            [ 2]    1     addw sp,#VSIZE 
      00073D 81               [ 4]  448 	ret 
                                    449 
                                    450 
                                    451 ;--------------------------
                                    452 ; delete character under cursor
                                    453 ; input:
                                    454 ;   A       line length   
                                    455 ;   xl      delete position
                                    456 ;   Y       line pointer 
                                    457 ;-------------------------
                           000001   458 	CPOS=1
                           000002   459 	LLEN=2
                           000002   460 	VSIZE=2
      00073E                        461 delete_under:
      00073E                        462 	_vars VSIZE 
      00073E 52 02            [ 2]    1     sub sp,#VSIZE 
      000740 6B 02            [ 1]  463     ld (LLEN,sp),a 
      000742 9F               [ 1]  464     ld a,xl 
      000743 6B 01            [ 1]  465     ld (CPOS,sp),a 
      000745 93               [ 1]  466     ldw x,y ; move destination
      000746 90 5C            [ 1]  467     incw y  ; move source 
      000748 7B 02            [ 1]  468     ld a,(LLEN,sp)
      00074A 10 01            [ 1]  469     sub a,(CPOS,sp)
      00074C 4C               [ 1]  470     inc a ; move including zero at end.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00074D C7 00 0E         [ 1]  471     ld acc8,a 
      000750 72 5F 00 0D      [ 1]  472     clr acc16 
      000754 CD 10 E5         [ 4]  473 	call move 
      000757 90 AE 16 68      [ 2]  474     ldw y,#tib 
      00075B 7B 01            [ 1]  475     ld a,(CPOS,sp)
      00075D C7 00 0E         [ 1]  476     ld acc8,a 
      000760 72 B9 00 0D      [ 2]  477     addw y,acc16 
      000764 93               [ 1]  478     ldw x,y 
      000765 CD 06 82         [ 4]  479     call puts 
      000768 A6 20            [ 1]  480     ld a,#SPACE  
      00076A CD 06 25         [ 4]  481     call putc
      00076D 7B 02            [ 1]  482     ld a,(LLEN,sp)
      00076F 10 01            [ 1]  483     sub a,(CPOS,sp)
      000771 CD 06 D3         [ 4]  484     call move_left 
      000774 0A 02            [ 1]  485     dec (LLEN,sp)
      000776                        486 	_drop VSIZE 
      000776 5B 02            [ 2]    1     addw sp,#VSIZE 
      000778 81               [ 4]  487 	ret 
                                    488 
                                    489 ;-----------------------------
                                    490 ; send ANSI sequence to delete
                                    491 ; whole line. Cursor position
                                    492 ; is not updated.
                                    493 ; ANSI: ESC[2K
                                    494 ; input:
                                    495 ;   none
                                    496 ; output:
                                    497 ;   none 
                                    498 ;-----------------------------
      000779                        499 delete_line:
      000779 CD 06 AA         [ 4]  500     call send_escape
      00077C A6 32            [ 1]  501 	ld a,#'2
      00077E CD 06 25         [ 4]  502 	call putc 
      000781 A6 4B            [ 1]  503 	ld a,#'K 
      000783 CD 06 25         [ 4]  504 	call putc 
      000786 81               [ 4]  505 	ret 
                                    506 
                                    507 
                                    508 
                                    509 ;------------------------------------
                                    510 ; read a line of text from terminal
                                    511 ;  control keys: 
                                    512 ;    BS   efface caractère à gauche 
                                    513 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    514 ;    CTRL_R  edit previous line.
                                    515 ;    CTRL_D  delete line  
                                    516 ;    HOME  go to start of line  
                                    517 ;    KEY_END  go to end of line 
                                    518 ;    ARROW_LEFT  move cursor left 
                                    519 ;    ARROW_RIGHT  move cursor right 
                                    520 ;    CTRL_O  toggle between insert/overwrite
                                    521 ; input:
                                    522 ;	none
                                    523 ; local variable on stack:
                                    524 ;	LL  line length
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    525 ;   RXCHAR last received character 
                                    526 ; output:
                                    527 ;   text in tib  buffer
                                    528 ;   count  line length 
                                    529 ;------------------------------------
                                    530 	; local variables
                           000001   531 	LL_HB=1  ; line length high byte 
                           000001   532 	RXCHAR = 1 ; last char received
                           000002   533 	LL = 2  ; accepted line length
                           000003   534 	CPOS=3  ; cursor position 
                           000004   535 	OVRWR=4 ; overwrite flag 
                           000005   536 	YTEMP=5 ; 
                           000006   537 	VSIZE=6 
      000787                        538 readln::
      000787 90 89            [ 2]  539 	pushw y 
      000789                        540 	_vars VSIZE 
      000789 52 06            [ 2]    1     sub sp,#VSIZE 
      00078B 5F               [ 1]  541 	clrw x 
      00078C 1F 02            [ 2]  542 	ldw (LL,sp),x 
      00078E 1F 03            [ 2]  543 	ldw (CPOS,sp),x 
      000790 03 04            [ 1]  544 	cpl (OVRWR,sp) ; default to overwrite mode 
      000792 90 AE 16 68      [ 2]  545  	ldw y,#tib ; terminal input buffer
      000796                        546 readln_loop:
      000796 CD 06 35         [ 4]  547 	call getc
      000799 6B 01            [ 1]  548 	ld (RXCHAR,sp),a
      00079B A1 1B            [ 1]  549     cp a,#ESC 
      00079D 26 05            [ 1]  550     jrne 0$
      00079F CD 06 5C         [ 4]  551     call get_escape 
      0007A2 6B 01            [ 1]  552     ld (RXCHAR,sp),a 
      0007A4 A1 0D            [ 1]  553 0$:	cp a,#CR
      0007A6 26 03            [ 1]  554 	jrne 1$
      0007A8 CC 09 2F         [ 2]  555 	jp readln_quit
      0007AB A1 0A            [ 1]  556 1$:	cp a,#LF 
      0007AD 26 03            [ 1]  557 	jrne 2$ 
      0007AF CC 09 2F         [ 2]  558 	jp readln_quit
      0007B2                        559 2$:
      0007B2 A1 08            [ 1]  560 	cp a,#BS
      0007B4 26 12            [ 1]  561 	jrne 3$
                                    562 ; delete left 
      0007B6 0D 03            [ 1]  563     tnz (CPOS,sp)
      0007B8 27 DC            [ 1]  564     jreq readln_loop 
      0007BA A6 01            [ 1]  565     ld a,#1 
      0007BC CD 06 D3         [ 4]  566     call move_left
      0007BF 0A 03            [ 1]  567     dec (CPOS,sp)
      0007C1 90 5A            [ 2]  568     decw y 
      0007C3 7B 03            [ 1]  569     ld a,(CPOS,sp) 
      0007C5 CC 08 DB         [ 2]  570     jp 12$
      0007C8                        571 3$:
      0007C8 A1 04            [ 1]  572 	cp a,#CTRL_D
      0007CA 26 1A            [ 1]  573 	jrne 4$
                                    574 ;delete line 
      0007CC CD 07 79         [ 4]  575 	call delete_line 
      0007CF 7B 03            [ 1]  576     ld a,(CPOS,sp)
      0007D1 4C               [ 1]  577     inc a 
      0007D2 CD 06 D3         [ 4]  578     call move_left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0007D5 A6 3E            [ 1]  579 	ld a,#'> 
      0007D7 CD 06 25         [ 4]  580 	call putc 
      0007DA 90 AE 16 68      [ 2]  581 	ldw y,#tib
      0007DE 90 7F            [ 1]  582 	clr (y)
      0007E0 0F 02            [ 1]  583 	clr (LL,sp)
      0007E2 0F 03            [ 1]  584 	clr (CPOS,sp)
      0007E4 20 B0            [ 2]  585 	jra readln_loop
      0007E6                        586 4$:
      0007E6 A1 12            [ 1]  587 	cp a,#CTRL_R 
      0007E8 26 1E            [ 1]  588 	jrne 5$
                                    589 ;repeat line 
      0007EA 0D 02            [ 1]  590 	tnz (LL,sp)
      0007EC 26 A8            [ 1]  591 	jrne readln_loop
      0007EE 90 AE 16 68      [ 2]  592 	ldw y,#tib 
      0007F2 93               [ 1]  593 	ldw x,y
      0007F3 CD 10 B9         [ 4]  594 	call strlen
      0007F6 4D               [ 1]  595 	tnz a  
      0007F7 27 9D            [ 1]  596 	jreq readln_loop
      0007F9 6B 02            [ 1]  597 	ld (LL,sp),a 
      0007FB 6B 03            [ 1]  598     ld (CPOS,sp),a
      0007FD 93               [ 1]  599 	ldw x,y  
      0007FE CD 06 82         [ 4]  600 	call puts
      000801 0F 01            [ 1]  601 	clr (LL_HB,sp)
      000803 72 F9 01         [ 2]  602 	addw y,(LL_HB,sp)
      000806 20 8E            [ 2]  603 	jra readln_loop 
      000808                        604 5$:
      000808 A1 05            [ 1]  605 	cp a,#CTRL_E 
      00080A 26 4D            [ 1]  606 	jrne 6$
                                    607 ;edit line number 
      00080C AE 16 68         [ 2]  608 	ldw x,#tib 
      00080F 17 05            [ 2]  609 	ldw (YTEMP,sp),y  
      000811 16 07            [ 2]  610 	ldw y,(VSIZE+1,sp) ; restore xstack pointer 
      000813 CD 16 00         [ 4]  611 	call atoi24
      000816 16 05            [ 2]  612 	ldw y,(YTEMP,sp) ; restore tib pointer 
      000818 4F               [ 1]  613 	clr a
      000819 CD 09 6B         [ 4]  614 	call search_lineno
      00081C 5D               [ 2]  615 	tnzw x 
      00081D 26 0B            [ 1]  616 	jrne 51$
      00081F 0F 02            [ 1]  617 	clr (LL,sp)
      000821 90 AE 16 68      [ 2]  618 	ldw y,#tib
      000825 90 7F            [ 1]  619     clr (y) 	
      000827 CC 09 2F         [ 2]  620 	jp readln_quit  
      00082A                        621 51$:
      00082A CF 00 04         [ 2]  622 	ldw basicptr,x
      00082D E6 02            [ 1]  623 	ld a,(2,x)
      00082F C7 00 02         [ 1]  624 	ld count,a 
      000832 90 AE 16 68      [ 2]  625 	ldw y,#tib 
      000836 CD 0E EC         [ 4]  626 	call decompile 
      000839 0F 01            [ 1]  627 	clr (LL_HB,sp)
      00083B A6 0D            [ 1]  628 	ld a,#CR 
      00083D CD 06 25         [ 4]  629 	call putc 
      000840 A6 3E            [ 1]  630 	ld a,#'>
      000842 CD 06 25         [ 4]  631 	call putc
      000845 AE 16 68         [ 2]  632     ldw x,#tib  
      000848 CD 10 B9         [ 4]  633 	call strlen 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      00084B 6B 02            [ 1]  634 	ld (LL,sp),a 
      00084D CD 06 82         [ 4]  635 	call puts 
      000850 90 93            [ 1]  636 	ldw y,x
      000852 7B 02            [ 1]  637     ld a,(LL,sp)
      000854 6B 03            [ 1]  638     ld (CPOS,sp),a  
      000856 CC 07 96         [ 2]  639 	jp readln_loop
      000859                        640 6$:
      000859 A1 81            [ 1]  641 	cp a,#ARROW_RIGHT
      00085B 26 15            [ 1]  642    	jrne 7$ 
                                    643 ; right arrow
      00085D 7B 03            [ 1]  644 	ld a,(CPOS,sp)
      00085F 11 02            [ 1]  645     cp a,(LL,sp)
      000861 2B 03            [ 1]  646     jrmi 61$
      000863 CC 07 96         [ 2]  647     jp readln_loop 
      000866                        648 61$:
      000866 A6 01            [ 1]  649     ld a,#1 
      000868 CD 06 E1         [ 4]  650 	call move_right 
      00086B 0C 03            [ 1]  651 	inc (CPOS,sp)
      00086D 90 5C            [ 1]  652     incw y 
      00086F CC 07 96         [ 2]  653     jp readln_loop 
      000872 A1 80            [ 1]  654 7$: cp a,#ARROW_LEFT  
      000874 26 13            [ 1]  655 	jrne 8$
                                    656 ; left arrow 
      000876 0D 03            [ 1]  657 	tnz (CPOS,sp)
      000878 26 03            [ 1]  658 	jrne 71$
      00087A CC 07 96         [ 2]  659 	jp readln_loop
      00087D                        660 71$:
      00087D A6 01            [ 1]  661     ld a,#1 
      00087F CD 06 D3         [ 4]  662 	call move_left 
      000882 0A 03            [ 1]  663 	dec (CPOS,sp)
      000884 90 5A            [ 2]  664     decw y 
      000886 CC 07 96         [ 2]  665 	jp readln_loop 
      000889 A1 82            [ 1]  666 8$: cp a,#HOME  
      00088B 26 0E            [ 1]  667 	jrne 9$
                                    668 ; HOME 
      00088D 7B 03            [ 1]  669     ld a,(CPOS,sp)
      00088F CD 06 D3         [ 4]  670     call move_left 
      000892 0F 03            [ 1]  671 	clr (CPOS,sp)
      000894 90 AE 16 68      [ 2]  672     ldw y,#tib 
      000898 CC 07 96         [ 2]  673 	jp readln_loop  
      00089B A1 83            [ 1]  674 9$: cp a,#KEY_END  
      00089D 26 26            [ 1]  675 	jrne 10$
                                    676 ; KEY_END 
      00089F 7B 03            [ 1]  677 	ld a,(CPOS,sp)
      0008A1 11 02            [ 1]  678 	cp a,(LL,sp)
      0008A3 26 03            [ 1]  679 	jrne 91$
      0008A5 CC 07 96         [ 2]  680 	jp readln_loop 
      0008A8                        681 91$:
      0008A8 7B 02            [ 1]  682 	ld a,(LL,sp)
      0008AA 10 03            [ 1]  683 	sub a,(CPOS,sp)
      0008AC CD 06 E1         [ 4]  684 	call move_right 
      0008AF 7B 02            [ 1]  685 	ld a,(LL,sp)
      0008B1 6B 03            [ 1]  686 	ld (CPOS,sp),a
      0008B3 90 AE 16 68      [ 2]  687     ldw y,#tib
      0008B7 72 5F 00 0D      [ 1]  688     clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0008BB C7 00 0E         [ 1]  689     ld acc8,a 
      0008BE 72 B9 00 0D      [ 2]  690     addw y,acc16  
      0008C2 CC 07 96         [ 2]  691 	jp readln_loop 
      0008C5 A1 0F            [ 1]  692 10$: cp a,#CTRL_O
      0008C7 26 08            [ 1]  693 	jrne 11$ 
                                    694 ; toggle between insert/overwrite
      0008C9 03 04            [ 1]  695 	cpl (OVRWR,sp)
      0008CB CD 23 21         [ 4]  696 	call beep_1khz
      0008CE CC 07 96         [ 2]  697 	jp readln_loop 
      0008D1 A1 84            [ 1]  698 11$: cp a,#SUP 
      0008D3 26 11            [ 1]  699     jrne final_test 
                                    700 ; del character under cursor 
      0008D5 7B 03            [ 1]  701     ld a,(CPOS,sp)
      0008D7 11 02            [ 1]  702     cp a,(LL,sp)
      0008D9 2A 08            [ 1]  703     jrpl 13$
      0008DB                        704 12$:
      0008DB 97               [ 1]  705     ld xl,a    ; cursor position 
      0008DC 7B 02            [ 1]  706     ld a,(LL,sp)  ; line length
      0008DE CD 07 3E         [ 4]  707     call delete_under
      0008E1 0A 02            [ 1]  708     dec (LLEN,sp)
      0008E3                        709 13$:
      0008E3 CC 07 96         [ 2]  710     jp readln_loop 
      0008E6                        711 final_test:
      0008E6 A1 20            [ 1]  712 	cp a,#SPACE
      0008E8 2A 03            [ 1]  713 	jrpl accept_char
      0008EA CC 07 96         [ 2]  714 	jp readln_loop
      0008ED                        715 accept_char:
      0008ED A6 4F            [ 1]  716 	ld a,#TIB_SIZE-1
      0008EF 11 02            [ 1]  717 	cp a, (LL,sp)
      0008F1 2A 03            [ 1]  718 	jrpl 1$
      0008F3 CC 07 96         [ 2]  719 	jp readln_loop
      0008F6 0D 04            [ 1]  720 1$:	tnz (OVRWR,sp)
      0008F8 26 18            [ 1]  721 	jrne overwrite
                                    722 ; insert mode 
      0008FA 7B 03            [ 1]  723     ld a,(CPOS,sp)
      0008FC 11 02            [ 1]  724     cp a,(LL,sp)
      0008FE 27 12            [ 1]  725     jreq overwrite
      000900 7B 02            [ 1]  726     ld a,(LL,sp)
      000902 97               [ 1]  727     ld xl,a 
      000903 7B 03            [ 1]  728     ld a,(CPOS,sp)
      000905 95               [ 1]  729     ld xh,a
      000906 7B 01            [ 1]  730     ld a,(RXCHAR,sp)
      000908 CD 06 FB         [ 4]  731     call insert_char
      00090B 0C 02            [ 1]  732     inc (LLEN,sp)
      00090D 0C 03            [ 1]  733     inc (CPOS,sp)	
      00090F CC 07 96         [ 2]  734     jp readln_loop 
      000912                        735 overwrite:
      000912 7B 01            [ 1]  736 	ld a,(RXCHAR,sp)
      000914 90 F7            [ 1]  737 	ld (y),a
      000916 90 5C            [ 1]  738     incw y
      000918 CD 06 25         [ 4]  739     call putc 
      00091B 7B 03            [ 1]  740 	ld a,(CPOS,sp)
      00091D 11 02            [ 1]  741 	cp a,(LL,sp)
      00091F 2B 09            [ 1]  742 	jrmi 1$
      000921 90 7F            [ 1]  743 	clr (y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000923 0C 02            [ 1]  744 	inc (LL,sp)
      000925 0C 03            [ 1]  745     inc (CPOS,sp)
      000927 CC 07 96         [ 2]  746 	jp readln_loop 
      00092A                        747 1$:	
      00092A 0C 03            [ 1]  748 	inc (CPOS,sp)
      00092C CC 07 96         [ 2]  749 	jp readln_loop 
      00092F                        750 readln_quit:
      00092F 90 AE 16 68      [ 2]  751 	ldw y,#tib
      000933 0F 01            [ 1]  752     clr (LL_HB,sp) 
      000935 72 F9 01         [ 2]  753     addw y,(LL_HB,sp)
      000938 90 7F            [ 1]  754     clr (y)
      00093A 7B 02            [ 1]  755 	ld a,(LL,sp)
      00093C C7 00 02         [ 1]  756 	ld count,a 
      00093F A6 0D            [ 1]  757 	ld a,#CR
      000941 CD 06 25         [ 4]  758 	call putc
      000944                        759 	_drop VSIZE 
      000944 5B 06            [ 2]    1     addw sp,#VSIZE 
      000946 90 85            [ 2]  760 	popw y 
      000948 81               [ 4]  761 	ret
                                    762 
                                    763 ;------------------------------
                                    764 ; print byte  in hexadecimal 
                                    765 ; on console
                                    766 ; input:
                                    767 ;    A		byte to print
                                    768 ;------------------------------
      000949                        769 print_hex::
      000949 88               [ 1]  770 	push a 
      00094A 4E               [ 1]  771 	swap a 
      00094B CD 09 60         [ 4]  772 	call to_hex_char 
      00094E CD 06 25         [ 4]  773 	call putc 
      000951 7B 01            [ 1]  774     ld a,(1,sp) 
      000953 CD 09 60         [ 4]  775 	call to_hex_char
      000956 CD 06 25         [ 4]  776 	call putc
      000959 A6 20            [ 1]  777 	ld a,#SPACE 
      00095B CD 06 25         [ 4]  778 	call putc 
      00095E 84               [ 1]  779 	pop a 
      00095F 81               [ 4]  780 	ret 
                                    781 
                                    782 ;----------------------------------
                                    783 ; convert to hexadecimal digit 
                                    784 ; input:
                                    785 ;   A       digit to convert 
                                    786 ; output:
                                    787 ;   A       hexdecimal character 
                                    788 ;----------------------------------
      000960                        789 to_hex_char::
      000960 A4 0F            [ 1]  790 	and a,#15 
      000962 A1 09            [ 1]  791 	cp a,#9 
      000964 23 02            [ 2]  792 	jrule 1$ 
      000966 AB 07            [ 1]  793 	add a,#7
      000968 AB 30            [ 1]  794 1$: add a,#'0 
      00096A 81               [ 4]  795 	ret 
                                    796 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      00096B                         51 search_lineno::
      00096B                         52 	_vars VSIZE
      00096B 52 02            [ 2]    1     sub sp,#VSIZE 
      00096D 0F 01            [ 1]   53 	clr (LL,sp)
      00096F 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000973 4D               [ 1]   55 	tnz a 
      000974 27 04            [ 1]   56 	jreq search_ln_loop
      000976 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      00097A                         58 search_ln_loop:
      00097A 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      00097E 2A 10            [ 1]   60 	jrpl 8$
      000980 90 F3            [ 1]   61 	cpw x,(y)
      000982 27 0E            [ 1]   62 	jreq 9$
      000984 2B 0A            [ 1]   63 	jrmi 8$ 
      000986 90 E6 02         [ 1]   64 	ld a,(2,y)
      000989 6B 02            [ 1]   65 	ld (LB,sp),a 
      00098B 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      00098E 20 EA            [ 2]   67 	jra search_ln_loop 
      000990                         68 8$: 
      000990 5F               [ 1]   69 	clrw x 	
      000991 51               [ 1]   70 	exgw x,y 
      000992                         71 9$: _drop VSIZE
      000992 5B 02            [ 2]    1     addw sp,#VSIZE 
      000994 51               [ 1]   72 	exgw x,y   
      000995 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000996                         83 del_line: 
      000996                         84 	_vars VSIZE 
      000996 52 04            [ 2]    1     sub sp,#VSIZE 
      000998 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      00099A 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      00099C 0F 01            [ 1]   87 	clr (LLEN,sp)
      00099E 90 93            [ 1]   88 	ldw y,x  
      0009A0 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      0009A3 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      0009A5 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      0009A9 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      0009AC 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      0009B0 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      0009B2 CD 10 E5         [ 4]   95 	call move
      0009B5 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      0009B9 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      0009BC 90 CF 00 1D      [ 2]   98 	ldw txtend,y
      0009C0 90 CF 00 2F      [ 2]   99 	ldw dvar_bgn,y 
      0009C4 90 CF 00 31      [ 2]  100 	ldw dvar_end,y   
      0009C8                        101 	_drop VSIZE     
      0009C8 5B 04            [ 2]    1     addw sp,#VSIZE 
      0009CA 81               [ 4]  102 	ret 
                                    103 
                                    104 ;---------------------------------------------
                                    105 ; open a gap in text area to 
                                    106 ; move new line in this gap
                                    107 ; input:
                                    108 ;    X 			addr gap start 
                                    109 ;    Y 			gap length 
                                    110 ; output:
                                    111 ;    X 			addr gap start 
                                    112 ;--------------------------------------------
                           000001   113 	DEST=1
                           000003   114 	SRC=3
                           000005   115 	LEN=5
                           000006   116 	VSIZE=6 
      0009CB                        117 open_gap:
      0009CB C3 00 1D         [ 2]  118 	cpw x,txtend 
      0009CE 24 31            [ 1]  119 	jruge 9$
      0009D0                        120 	_vars VSIZE
      0009D0 52 06            [ 2]    1     sub sp,#VSIZE 
      0009D2 1F 03            [ 2]  121 	ldw (SRC,sp),x 
      0009D4 17 05            [ 2]  122 	ldw (LEN,sp),y 
      0009D6 90 CF 00 0D      [ 2]  123 	ldw acc16,y 
      0009DA 90 93            [ 1]  124 	ldw y,x ; SRC
      0009DC 72 BB 00 0D      [ 2]  125 	addw x,acc16  
      0009E0 1F 01            [ 2]  126 	ldw (DEST,sp),x 
                                    127 ;compute size to move 	
      0009E2 CE 00 1D         [ 2]  128 	ldw x,txtend 
      0009E5 72 F0 03         [ 2]  129 	subw x,(SRC,sp)
      0009E8 CF 00 0D         [ 2]  130 	ldw acc16,x ; size to move
      0009EB 1E 01            [ 2]  131 	ldw x,(DEST,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      0009ED CD 10 E5         [ 4]  132 	call move
      0009F0 CE 00 1D         [ 2]  133 	ldw x,txtend
      0009F3 72 FB 05         [ 2]  134 	addw x,(LEN,sp)
      0009F6 CF 00 1D         [ 2]  135 	ldw txtend,x
      0009F9 CF 00 2F         [ 2]  136 	ldw dvar_bgn,x 
      0009FC CF 00 31         [ 2]  137 	ldw dvar_end,x 
      0009FF                        138 	_drop VSIZE 
      0009FF 5B 06            [ 2]    1     addw sp,#VSIZE 
      000A01 81               [ 4]  139 9$:	ret 
                                    140 
                                    141 ;--------------------------------------------
                                    142 ; insert line in pad into text area 
                                    143 ; first search for already existing 
                                    144 ; replace existing 
                                    145 ; if new line empty delete existing one. 
                                    146 ; input:
                                    147 ;   ptr16		pointer to tokenized line  
                                    148 ; output:
                                    149 ;   none
                                    150 ;---------------------------------------------
                           000001   151 	DEST=1  ; text area insertion address 
                           000003   152 	SRC=3   ; str to insert address 
                           000005   153 	LINENO=5 ; line number 
                           000007   154 	LLEN=7 ; line length 
                           000008   155 	VSIZE=8  
      000A02                        156 insert_line:
      000A02                        157 	_vars VSIZE 
      000A02 52 08            [ 2]    1     sub sp,#VSIZE 
      000A04 72 CE 00 19      [ 5]  158 	ldw x,[ptr16]
      000A08 1F 05            [ 2]  159 	ldw (LINENO,sp),x 
      000A0A 0F 07            [ 1]  160 	clr (LLEN,sp)
      000A0C CE 00 19         [ 2]  161 	ldw x,ptr16 
      000A0F E6 02            [ 1]  162 	ld a,(2,x)
      000A11 6B 08            [ 1]  163 	ld (LLEN+1,sp),a 
      000A13 4F               [ 1]  164 	clr a 
      000A14 1E 05            [ 2]  165 	ldw x,(LINENO,sp)
      000A16 CD 09 6B         [ 4]  166 	call search_lineno
      000A19 5D               [ 2]  167 	tnzw x 
      000A1A 27 07            [ 1]  168 	jreq 0$ 
      000A1C 1F 01            [ 2]  169 	ldw (DEST,sp),x 
      000A1E CD 09 96         [ 4]  170 	call del_line 
      000A21 20 02            [ 2]  171 	jra 1$
      000A23 17 01            [ 2]  172 0$: ldw (DEST,sp),y
      000A25 A6 03            [ 1]  173 1$: ld a,#3 
      000A27 11 08            [ 1]  174 	cp a,(LLEN+1,sp)
      000A29 27 42            [ 1]  175 	jreq 9$
                                    176 ; check for space 
      000A2B CE 00 1D         [ 2]  177 	ldw x,txtend 
      000A2E 72 FB 07         [ 2]  178 	addw x,(LLEN,sp)
      000A31 A3 16 4A         [ 2]  179 	cpw x,#tib-10*CELL_SIZE ; keep 10 slots space for @() array.  
      000A34 25 0C            [ 1]  180 	jrult 3$
      000A36 72 1C 00 22      [ 1]  181 	bset flags,#FLN_REJECTED
      000A3A AE 12 10         [ 2]  182 	ldw x,#err_mem_full 
      000A3D CD 06 82         [ 4]  183 	call puts 
      000A40 20 2B            [ 2]  184 	jra 9$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000A42                        185 3$: ; create gap to insert line 
      000A42 1E 01            [ 2]  186 	ldw x,(DEST,sp) 
      000A44 16 07            [ 2]  187 	ldw y,(LLEN,sp)
      000A46 CD 09 CB         [ 4]  188 	call open_gap 
                                    189 ; move new line in gap 
      000A49 1E 07            [ 2]  190 	ldw x,(LLEN,sp)
      000A4B CF 00 0D         [ 2]  191 	ldw acc16,x 
      000A4E 90 AE 16 B8      [ 2]  192 	ldw y,#pad ;SRC 
      000A52 1E 01            [ 2]  193 	ldw x,(DEST,sp) ; dest address 
      000A54 CD 10 E5         [ 4]  194 	call move
      000A57 1E 01            [ 2]  195 	ldw x,(DEST,sp)
      000A59 C3 00 1D         [ 2]  196 	cpw x,txtend 
      000A5C 25 0F            [ 1]  197 	jrult 9$ 
      000A5E 1E 07            [ 2]  198 	ldw x,(LLEN,sp)
      000A60 72 BB 00 1D      [ 2]  199 	addw x,txtend 
      000A64 CF 00 1D         [ 2]  200 	ldw txtend,x 
      000A67 CF 00 2F         [ 2]  201 	ldw dvar_bgn,x 
      000A6A CF 00 31         [ 2]  202 	ldw dvar_end,x 
      000A6D                        203 9$:	
      000A6D                        204 	_drop VSIZE
      000A6D 5B 08            [ 2]    1     addw sp,#VSIZE 
      000A6F 81               [ 4]  205 	ret
                                    206 
                                    207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    208 ;; compiler routines        ;;
                                    209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    210 ;------------------------------------
                                    211 ; parse quoted string 
                                    212 ; input:
                                    213 ;   Y 	pointer to tib 
                                    214 ;   X   pointer to output buffer 
                                    215 ; output:
                                    216 ;	buffer   parsed string
                                    217 ;------------------------------------
                           000001   218 	PREV = 1
                           000002   219 	CURR =2
                           000002   220 	VSIZE=2
      000A70                        221 parse_quote: 
      000A70                        222 	_vars VSIZE 
      000A70 52 02            [ 2]    1     sub sp,#VSIZE 
      000A72 4F               [ 1]  223 	clr a
      000A73 6B 01            [ 1]  224 1$:	ld (PREV,sp),a 
      000A75                        225 2$:	
      000A75 91 D6 00         [ 4]  226 	ld a,([in.w],y)
      000A78 27 24            [ 1]  227 	jreq 6$
      000A7A 72 5C 00 01      [ 1]  228 	inc in 
      000A7E 6B 02            [ 1]  229 	ld (CURR,sp),a 
      000A80 A6 5C            [ 1]  230 	ld a,#'\
      000A82 11 01            [ 1]  231 	cp a, (PREV,sp)
      000A84 26 0A            [ 1]  232 	jrne 3$
      000A86 0F 01            [ 1]  233 	clr (PREV,sp)
      000A88 7B 02            [ 1]  234 	ld a,(CURR,sp)
      000A8A AD 1C            [ 4]  235 	callr convert_escape
      000A8C F7               [ 1]  236 	ld (x),a 
      000A8D 5C               [ 1]  237 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      000A8E 20 E5            [ 2]  238 	jra 2$
      000A90                        239 3$:
      000A90 7B 02            [ 1]  240 	ld a,(CURR,sp)
      000A92 A1 5C            [ 1]  241 	cp a,#'\'
      000A94 27 DD            [ 1]  242 	jreq 1$
      000A96 A1 22            [ 1]  243 	cp a,#'"
      000A98 27 04            [ 1]  244 	jreq 6$ 
      000A9A F7               [ 1]  245 	ld (x),a 
      000A9B 5C               [ 1]  246 	incw x 
      000A9C 20 D7            [ 2]  247 	jra 2$
      000A9E                        248 6$:
      000A9E 7F               [ 1]  249 	clr (x)
      000A9F 5C               [ 1]  250 	incw x 
      000AA0 90 93            [ 1]  251 	ldw y,x 
      000AA2 5F               [ 1]  252 	clrw x 
      000AA3 A6 02            [ 1]  253 	ld a,#TK_QSTR  
      000AA5                        254 	_drop VSIZE
      000AA5 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AA7 81               [ 4]  255 	ret 
                                    256 
                                    257 ;---------------------------------------
                                    258 ; called by parse_quote
                                    259 ; subtitute escaped character 
                                    260 ; by their ASCII value .
                                    261 ; input:
                                    262 ;   A  character following '\'
                                    263 ; output:
                                    264 ;   A  substitued char or same if not valid.
                                    265 ;---------------------------------------
      000AA8                        266 convert_escape:
      000AA8 89               [ 2]  267 	pushw x 
      000AA9 AE 0A BD         [ 2]  268 	ldw x,#escaped 
      000AAC F1               [ 1]  269 1$:	cp a,(x)
      000AAD 27 06            [ 1]  270 	jreq 2$
      000AAF 7D               [ 1]  271 	tnz (x)
      000AB0 27 09            [ 1]  272 	jreq 3$
      000AB2 5C               [ 1]  273 	incw x 
      000AB3 20 F7            [ 2]  274 	jra 1$
      000AB5 1D 0A BD         [ 2]  275 2$: subw x,#escaped 
      000AB8 9F               [ 1]  276 	ld a,xl 
      000AB9 AB 07            [ 1]  277 	add a,#7
      000ABB 85               [ 2]  278 3$:	popw x 
      000ABC 81               [ 4]  279 	ret 
                                    280 
      000ABD 61 62 74 6E 76 66 72   281 escaped:: .asciz "abtnvfr"
             00
                                    282 
                                    283 ;-------------------------
                                    284 ; integer parser 
                                    285 ; input:
                                    286 ;   X 		point to output buffer  
                                    287 ;   Y 		point to tib 
                                    288 ;   A 	    first digit|'$' 
                                    289 ; output:  
                                    290 ;   X 		integer bits 15..0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    291 ;   A 		TK_INTGR
                                    292 ;   acc24   24 bits integer 
                                    293 ;-------------------------
                           000001   294 	BASE=1
                           000002   295 	TCHAR=2 
                           000003   296 	XSAVE=3
                           000004   297 	VSIZE=4 
      000AC5                        298 parse_integer: ; { -- n }
      000AC5 89               [ 2]  299 	pushw x 	
      000AC6 4B 00            [ 1]  300 	push #0 ; TCHAR
      000AC8 4B 0A            [ 1]  301 	push #10 ; BASE=10
      000ACA A1 24            [ 1]  302 	cp a,#'$
      000ACC 26 04            [ 1]  303 	jrne 2$ 
      000ACE                        304     _drop #1
      000ACE 5B 01            [ 2]    1     addw sp,##1 
      000AD0 4B 10            [ 1]  305 	push #16  ; BASE=16
      000AD2 F7               [ 1]  306 2$:	ld (x),a 
      000AD3 5C               [ 1]  307 	incw x 
      000AD4 91 D6 00         [ 4]  308 	ld a,([in.w],y)
      000AD7 72 5C 00 01      [ 1]  309 	inc in 
      000ADB CD 15 F4         [ 4]  310 	call to_upper 
      000ADE 6B 02            [ 1]  311 	ld (TCHAR,sp),a 
      000AE0 CD 0B 66         [ 4]  312 	call is_digit 
      000AE3 25 ED            [ 1]  313 	jrc 2$
      000AE5 A6 10            [ 1]  314 	ld a,#16 
      000AE7 11 01            [ 1]  315 	cp a,(BASE,sp)
      000AE9 26 0A            [ 1]  316 	jrne 3$ 
      000AEB 7B 02            [ 1]  317 	ld a,(TCHAR,sp)
      000AED A1 41            [ 1]  318 	cp a,#'A 
      000AEF 2B 04            [ 1]  319 	jrmi 3$ 
      000AF1 A1 47            [ 1]  320 	cp a,#'G 
      000AF3 2B DD            [ 1]  321 	jrmi 2$ 
      000AF5 72 5A 00 01      [ 1]  322 3$: dec in 	
      000AF9 7F               [ 1]  323     clr (x)
      000AFA 1E 03            [ 2]  324 	ldw x,(XSAVE,sp)
      000AFC 90 AE 17 73      [ 2]  325 	ldw y,#XSTACK_EMPTY 
      000B00 CD 16 00         [ 4]  326 	call atoi24
      000B03 16 03            [ 2]  327 	ldw y,(XSAVE,sp)
      000B05 C6 00 0C         [ 1]  328 	ld a,acc24 
      000B08 90 F7            [ 1]  329 	ld (y),a 
      000B0A 90 5C            [ 1]  330 	incw y  
      000B0C CE 00 0D         [ 2]  331 	ldw x,acc16 
      000B0F 90 FF            [ 2]  332 	ldw (y),x 
      000B11 72 A9 00 02      [ 2]  333 	addw y,#2
      000B15 A6 84            [ 1]  334 	ld a,#TK_INTGR
      000B17                        335 	_drop VSIZE  
      000B17 5B 04            [ 2]    1     addw sp,#VSIZE 
      000B19 81               [ 4]  336 	ret 	
                                    337 
                                    338 ;-------------------------
                                    339 ; binary integer parser
                                    340 ; build integer in acc24  
                                    341 ; input:
                                    342 ;   X 		point to output buffer  
                                    343 ;   Y 		point to tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    344 ;   A 	    '&' 
                                    345 ; output:  
                                    346 ;   buffer  TK_INTGR integer  
                                    347 ;   X 		int16 
                                    348 ;   A 		TK_INTGR
                                    349 ;   acc24    int24 
                                    350 ;-------------------------
                           000001   351 	BINARY=1 ; 24 bits integer 
                           000003   352 	VSIZE=3
      000B1A                        353 parse_binary: ; { -- n }
      000B1A 4B 00            [ 1]  354 	push #0
      000B1C 4B 00            [ 1]  355 	push #0
      000B1E 4B 00            [ 1]  356 	push #0
      000B20                        357 2$:	
      000B20 91 D6 00         [ 4]  358 	ld a,([in.w],y)
      000B23 72 5C 00 01      [ 1]  359 	inc in 
      000B27 A1 30            [ 1]  360 	cp a,#'0 
      000B29 27 06            [ 1]  361 	jreq 3$
      000B2B A1 31            [ 1]  362 	cp a,#'1 
      000B2D 27 02            [ 1]  363 	jreq 3$ 
      000B2F 20 0B            [ 2]  364 	jra bin_exit 
      000B31 A0 30            [ 1]  365 3$: sub a,#'0 
      000B33 46               [ 1]  366 	rrc a
      000B34 09 03            [ 1]  367 	rlc (BINARY+2,sp) 
      000B36 09 02            [ 1]  368 	rlc (BINARY+1,sp)
      000B38 09 01            [ 1]  369 	rlc (BINARY,sp) 
      000B3A 20 E4            [ 2]  370 	jra 2$  
      000B3C                        371 bin_exit:
      000B3C 72 5A 00 01      [ 1]  372 	dec in 
      000B40 90 93            [ 1]  373 	ldw y,x
      000B42 7B 01            [ 1]  374 	ld a,(BINARY,sp)
      000B44 90 F7            [ 1]  375 	ld (y),a 
      000B46 90 5C            [ 1]  376 	incw y 
      000B48 1E 02            [ 2]  377 	ldw x,(BINARY+1,sp)
      000B4A 90 FF            [ 2]  378 	ldw (y),x 
      000B4C 72 A9 00 02      [ 2]  379 	addw y,#2  
      000B50 A6 84            [ 1]  380 	ld a,#TK_INTGR 	
      000B52                        381 	_drop VSIZE 
      000B52 5B 03            [ 2]    1     addw sp,#VSIZE 
      000B54 81               [ 4]  382 	ret
                                    383 
                                    384 ;-------------------------------------
                                    385 ; check if A is a letter 
                                    386 ; input:
                                    387 ;   A 			character to test 
                                    388 ; output:
                                    389 ;   C flag      1 true, 0 false 
                                    390 ;-------------------------------------
      000B55                        391 is_alpha::
      000B55 A1 41            [ 1]  392 	cp a,#'A 
      000B57 8C               [ 1]  393 	ccf 
      000B58 24 0B            [ 1]  394 	jrnc 9$ 
      000B5A A1 5B            [ 1]  395 	cp a,#'Z+1 
      000B5C 25 07            [ 1]  396 	jrc 9$ 
      000B5E A1 61            [ 1]  397 	cp a,#'a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      000B60 8C               [ 1]  398 	ccf 
      000B61 24 02            [ 1]  399 	jrnc 9$
      000B63 A1 7B            [ 1]  400 	cp a,#'z+1
      000B65 81               [ 4]  401 9$: ret 	
                                    402 
                                    403 ;------------------------------------
                                    404 ; check if character in {'0'..'9'}
                                    405 ; input:
                                    406 ;    A  character to test
                                    407 ; output:
                                    408 ;    Carry  0 not digit | 1 digit
                                    409 ;------------------------------------
      000B66                        410 is_digit::
      000B66 A1 30            [ 1]  411 	cp a,#'0
      000B68 25 03            [ 1]  412 	jrc 1$
      000B6A A1 3A            [ 1]  413     cp a,#'9+1
      000B6C 8C               [ 1]  414 	ccf 
      000B6D 8C               [ 1]  415 1$:	ccf 
      000B6E 81               [ 4]  416     ret
                                    417 
                                    418 ;-------------------------------------
                                    419 ; return true if character in  A 
                                    420 ; is letter or digit.
                                    421 ; input:
                                    422 ;   A     ASCII character 
                                    423 ; output:
                                    424 ;   A     no change 
                                    425 ;   Carry    0 false| 1 true 
                                    426 ;--------------------------------------
      000B6F                        427 is_alnum::
      000B6F CD 0B 66         [ 4]  428 	call is_digit
      000B72 25 03            [ 1]  429 	jrc 1$ 
      000B74 CD 0B 55         [ 4]  430 	call is_alpha
      000B77 81               [ 4]  431 1$:	ret 
                                    432 
                                    433 ;-----------------------------
                                    434 ; check if character in A 
                                    435 ; is a valid symbol character 
                                    436 ; valid: Upper case LETTER,DIGIT,'_','.','?' 
                                    437 ; input:
                                    438 ;    A   character to validate
                                    439 ; output:
                                    440 ;    Carry   set if valid 
                                    441 ;----------------------------
      000B78                        442 is_symbol_char: 
      000B78 A1 5F            [ 1]  443 	cp a,#'_ 
      000B7A 26 03            [ 1]  444 	jrne 1$
      000B7C 99               [ 1]  445 0$:	scf 
      000B7D 20 0B            [ 2]  446 	jra 9$ 
      000B7F A1 2E            [ 1]  447 1$:	cp a,#'.
      000B81 27 F9            [ 1]  448 	jreq 0$
      000B83 A1 3F            [ 1]  449 	cp a,#'? 
      000B85 27 F5            [ 1]  450 	jreq 0$ 
      000B87 CD 0B 6F         [ 4]  451 	call is_alnum 
      000B8A 81               [ 4]  452 9$: ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    453 
                                    454 ;---------------------------
                                    455 ;  when lexical unit begin 
                                    456 ;  with a letter a symbol 
                                    457 ;  is expected.
                                    458 ; input:
                                    459 ;   A   first character of symbol 
                                    460 ;	X   point to output buffer 
                                    461 ;   Y   point to input text 
                                    462 ; output:
                                    463 ;	X   after symbol 
                                    464 ;   Y   point after lexical unit 
                                    465 ;---------------------------
      000B8B                        466 parse_symbol:
      000B8B 5C               [ 1]  467 	incw x ; keep space for TK_ID 
      000B8C                        468 symb_loop: 
                                    469 ; symbol are converted to upper case 
      000B8C CD 15 F4         [ 4]  470 	call to_upper  
      000B8F F7               [ 1]  471 	ld (x), a 
      000B90 5C               [ 1]  472 	incw x
      000B91 91 D6 00         [ 4]  473 	ld a,([in.w],y)
      000B94 72 5C 00 01      [ 1]  474 	inc in 
      000B98 CD 0B 78         [ 4]  475 	call is_symbol_char 
      000B9B 25 EF            [ 1]  476 	jrc symb_loop 
      000B9D 7F               [ 1]  477 	clr (x)
      000B9E 72 5A 00 01      [ 1]  478 	dec in  
      000BA2 81               [ 4]  479 	ret 
                                    480 
                                    481 ;---------------------------
                                    482 ;  token begin with a letter,
                                    483 ;  is keyword or variable. 	
                                    484 ; input:
                                    485 ;   X 		point to pad 
                                    486 ;   Y 		point to text
                                    487 ;   A 	    first letter  
                                    488 ; output:
                                    489 ;   X		exec_addr|var_addr 
                                    490 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    491 ;   pad 	keyword|var_name  
                                    492 ;--------------------------  
                           000001   493 	XFIRST=1
                           000002   494 	VSIZE=2
      000BA3                        495 parse_keyword: 
      000BA3 89               [ 2]  496 	pushw x ; preserve *symbol 
      000BA4 CD 0B 8B         [ 4]  497 	call parse_symbol
      000BA7 1E 01            [ 2]  498 	ldw x,(XFIRST,sp) 
      000BA9 E6 02            [ 1]  499 	ld a,(2,x)
      000BAB 26 0F            [ 1]  500 	jrne 2$
                                    501 ; one letter variable name 
      000BAD E6 01            [ 1]  502 	ld a,(1,x) 
      000BAF A0 41            [ 1]  503 	sub a,#'A 
      000BB1 AE 00 03         [ 2]  504 	ldw x,#3 
      000BB4 42               [ 4]  505 	mul x,a 
      000BB5 1C 00 34         [ 2]  506 	addw x,#vars 
      000BB8 A6 85            [ 1]  507 	ld a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000BBA 20 36            [ 2]  508 	jra 4$ 
      000BBC                        509 2$: ; check for keyword, otherwise syntax error.
      000BBC                        510 	_ldx_dict kword_dict ; dictionary entry point
      000BBC AE 33 AD         [ 2]    1     ldw x,#kword_dict+2
      000BBF 16 01            [ 2]  511 	ldw y,(XFIRST,sp) ; name to search for
      000BC1 90 5C            [ 1]  512 	incw y 
      000BC3 CD 16 81         [ 4]  513 	call search_dict
      000BC6 4D               [ 1]  514 	tnz a
      000BC7 26 29            [ 1]  515 	jrne 4$
                                    516 ; not in dictionary
                                    517 ; compile it as TK_LABEL
      000BC9 16 01            [ 2]  518 	ldw y,(XFIRST,sp)
      000BCB A6 03            [ 1]  519 	ld a,#TK_LABEL 
      000BCD 90 F7            [ 1]  520 	ld (y),a 
      000BCF 90 5C            [ 1]  521 	incw y
      000BD1 93               [ 1]  522 	ldw x,y 
      000BD2 CD 10 B9         [ 4]  523 	call strlen
      000BD5 A1 0F            [ 1]  524 	cp a,#NAME_MAX_LEN 
      000BD7 23 02            [ 2]  525 	jrule 22$ 
      000BD9 A6 0F            [ 1]  526 	ld a,#NAME_MAX_LEN 
      000BDB                        527 22$:	
      000BDB 88               [ 1]  528 	push a 
      000BDC                        529 24$:
      000BDC 90 F6            [ 1]  530     ld a,(y)
      000BDE 27 09            [ 1]  531 	jreq 3$
      000BE0 90 5C            [ 1]  532 	incw y
      000BE2 0A 01            [ 1]  533 	dec (1,sp) 
      000BE4 26 F6            [ 1]  534 	jrne 24$
      000BE6 4F               [ 1]  535 	clr a 
      000BE7 90 F7            [ 1]  536 	ld (y),a 
      000BE9 90 5C            [ 1]  537 3$: incw y 
      000BEB                        538 	_drop 1 
      000BEB 5B 01            [ 2]    1     addw sp,#1 
      000BED A6 03            [ 1]  539 	ld a,#TK_LABEL 
      000BEF 5F               [ 1]  540 	clrw x 
      000BF0 20 1B            [ 2]  541 	jra 5$ 
      000BF2                        542 4$:	
      000BF2 16 01            [ 2]  543 	ldw y,(XFIRST,sp)
      000BF4 A1 87            [ 1]  544 	cp a,#TK_NOT 
      000BF6 2B 06            [ 1]  545 	jrmi 41$
      000BF8 90 F7            [ 1]  546 	ld (y),a 
      000BFA 90 5C            [ 1]  547 	incw y 
      000BFC 20 0F            [ 2]  548 	jra 5$ 
      000BFE                        549 41$:	
      000BFE A3 1A 0C         [ 2]  550 	cpw x,#let  
      000C01 27 0A            [ 1]  551 	jreq 5$  ; don't compile LET command 
      000C03 90 F7            [ 1]  552 	ld (y),a 
      000C05 90 5C            [ 1]  553 	incw y 
      000C07 90 FF            [ 2]  554 	ldw (y),x
      000C09 72 A9 00 02      [ 2]  555 	addw y,#2  
      000C0D                        556 5$:	_drop VSIZE 
      000C0D 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C0F 81               [ 4]  557 	ret  	
                                    558 
                                    559 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    560 ; skip character c in text starting from 'in'
                                    561 ; input:
                                    562 ;	 y 		point to text buffer
                                    563 ;    a 		character to skip
                                    564 ; output:  
                                    565 ;	'in' ajusted to new position
                                    566 ;------------------------------------
                           000001   567 	C = 1 ; local var
      000C10                        568 skip:
      000C10 88               [ 1]  569 	push a
      000C11 91 D6 00         [ 4]  570 1$:	ld a,([in.w],y)
      000C14 27 0A            [ 1]  571 	jreq 2$
      000C16 11 01            [ 1]  572 	cp a,(C,sp)
      000C18 26 06            [ 1]  573 	jrne 2$
      000C1A 72 5C 00 01      [ 1]  574 	inc in
      000C1E 20 F1            [ 2]  575 	jra 1$
      000C20                        576 2$: _drop 1 
      000C20 5B 01            [ 2]    1     addw sp,#1 
      000C22 81               [ 4]  577 	ret
                                    578 	
                                    579 
                                    580 ;------------------------------------
                                    581 ; scan text for next token
                                    582 ; input: 
                                    583 ;	X 		pointer to buffer where 
                                    584 ;	        token id and value are copied 
                                    585 ; use:
                                    586 ;	Y       pointer to text in tib 
                                    587 ; output:
                                    588 ;   A       token attribute 
                                    589 ;   X 		token value
                                    590 ;   Y       updated position in output buffer   
                                    591 ;------------------------------------
                                    592 	; use to check special character 
                                    593 	.macro _case c t  
                                    594 	ld a,#c 
                                    595 	cp a,(TCHAR,sp) 
                                    596 	jrne t
                                    597 	.endm 
                                    598 
                           000001   599 	TCHAR=1
                           000002   600 	ATTRIB=2
                           000002   601 	VSIZE=2
      000C23                        602 get_token:: 
      000C23                        603 	_vars VSIZE
      000C23 52 02            [ 2]    1     sub sp,#VSIZE 
                                    604 ;	ld a,in 
                                    605 ;	sub a,count
                                    606 ;   jrmi 0$
                                    607 ;	clr a 
                                    608 ;	ret 
      000C25                        609 0$: 
      000C25 90 AE 16 68      [ 2]  610 	ldw y,#tib    	
      000C29 A6 20            [ 1]  611 	ld a,#SPACE
      000C2B CD 0C 10         [ 4]  612 	call skip
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000C2E 55 00 01 00 03   [ 1]  613 	mov in.saved,in 
      000C33 91 D6 00         [ 4]  614 	ld a,([in.w],y)
      000C36 26 05            [ 1]  615 	jrne 1$
      000C38 90 93            [ 1]  616 	ldw y,x 
      000C3A CC 0D D4         [ 2]  617 	jp token_exit ; end of line 
      000C3D 72 5C 00 01      [ 1]  618 1$:	inc in 
      000C41 CD 15 F4         [ 4]  619 	call to_upper 
      000C44 6B 01            [ 1]  620 	ld (TCHAR,sp),a 
                                    621 ; check for quoted string
      000C46                        622 str_tst:  	
      000C46                        623 	_case '"' nbr_tst
      000C46 A6 22            [ 1]    1 	ld a,#'"' 
      000C48 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C4A 26 0A            [ 1]    3 	jrne nbr_tst
      000C4C A6 02            [ 1]  624 	ld a,#TK_QSTR
      000C4E F7               [ 1]  625 	ld (x),a 
      000C4F 5C               [ 1]  626 	incw x 
      000C50 CD 0A 70         [ 4]  627 	call parse_quote
      000C53 CC 0D D4         [ 2]  628 	jp token_exit
      000C56                        629 nbr_tst:
                                    630 ; check for hexadecimal number 
      000C56 A6 24            [ 1]  631 	ld a,#'$'
      000C58 11 01            [ 1]  632 	cp a,(TCHAR,sp) 
      000C5A 27 17            [ 1]  633 	jreq 1$
                                    634 ;check for binary number 
      000C5C A6 26            [ 1]  635 	ld a,#'&
      000C5E 11 01            [ 1]  636 	cp a,(TCHAR,sp)
      000C60 26 0A            [ 1]  637 	jrne 0$
      000C62 A6 84            [ 1]  638 	ld a,#TK_INTGR
      000C64 F7               [ 1]  639 	ld (x),a 
      000C65 5C               [ 1]  640 	incw x 
      000C66 CD 0B 1A         [ 4]  641 	call parse_binary ; expect binary integer 
      000C69 CC 0D D4         [ 2]  642 	jp token_exit 
                                    643 ; check for decimal number 	
      000C6C 7B 01            [ 1]  644 0$:	ld a,(TCHAR,sp)
      000C6E CD 0B 66         [ 4]  645 	call is_digit
      000C71 24 0C            [ 1]  646 	jrnc 3$
      000C73 A6 84            [ 1]  647 1$:	ld a,#TK_INTGR 
      000C75 F7               [ 1]  648 	ld (x),a 
      000C76 5C               [ 1]  649 	incw x 
      000C77 7B 01            [ 1]  650 	ld a,(TCHAR,sp)
      000C79 CD 0A C5         [ 4]  651 	call parse_integer 
      000C7C CC 0D D4         [ 2]  652 	jp token_exit 
      000C7F                        653 3$: 
      000C7F                        654 	_case '(' bkslsh_tst 
      000C7F A6 28            [ 1]    1 	ld a,#'(' 
      000C81 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C83 26 05            [ 1]    3 	jrne bkslsh_tst
      000C85 A6 06            [ 1]  655 	ld a,#TK_LPAREN
      000C87 CC 0D D0         [ 2]  656 	jp token_char   	
      000C8A                        657 bkslsh_tst: ; character token 
      000C8A                        658 	_case '\',rparnt_tst
      000C8A A6 5C            [ 1]    1 	ld a,#'\' 
      000C8C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C8E 26 16            [ 1]    3 	jrne rparnt_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000C90 A6 04            [ 1]  659 	ld a,#TK_CHAR 
      000C92 F7               [ 1]  660 	ld (x),a 
      000C93 5C               [ 1]  661 	incw x 
      000C94 91 D6 00         [ 4]  662 	ld a,([in.w],y)
      000C97 F7               [ 1]  663 	ld (x),a 
      000C98 5C               [ 1]  664 	incw x
      000C99 90 93            [ 1]  665 	ldw y,x 	 
      000C9B 72 5C 00 01      [ 1]  666 	inc in  
      000C9F 5F               [ 1]  667 	clrw x 
      000CA0 97               [ 1]  668 	ld xl,a 
      000CA1 A6 04            [ 1]  669 	ld a,#TK_CHAR 
      000CA3 CC 0D D4         [ 2]  670 	jp token_exit 
      000CA6                        671 rparnt_tst:		
      000CA6                        672 	_case ')' colon_tst 
      000CA6 A6 29            [ 1]    1 	ld a,#')' 
      000CA8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CAA 26 05            [ 1]    3 	jrne colon_tst
      000CAC A6 07            [ 1]  673 	ld a,#TK_RPAREN 
      000CAE CC 0D D0         [ 2]  674 	jp token_char
      000CB1                        675 colon_tst:
      000CB1                        676 	_case ':' comma_tst 
      000CB1 A6 3A            [ 1]    1 	ld a,#':' 
      000CB3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CB5 26 05            [ 1]    3 	jrne comma_tst
      000CB7 A6 09            [ 1]  677 	ld a,#TK_COLON 
      000CB9 CC 0D D0         [ 2]  678 	jp token_char  
      000CBC                        679 comma_tst:
      000CBC                        680 	_case COMMA semic_tst 
      000CBC A6 2C            [ 1]    1 	ld a,#COMMA 
      000CBE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CC0 26 05            [ 1]    3 	jrne semic_tst
      000CC2 A6 08            [ 1]  681 	ld a,#TK_COMMA
      000CC4 CC 0D D0         [ 2]  682 	jp token_char
      000CC7                        683 semic_tst:
      000CC7                        684 	_case SEMIC dash_tst
      000CC7 A6 3B            [ 1]    1 	ld a,#SEMIC 
      000CC9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CCB 26 05            [ 1]    3 	jrne dash_tst
      000CCD A6 0A            [ 1]  685 	ld a,#TK_SEMIC 
      000CCF CC 0D D0         [ 2]  686 	jp token_char 	
      000CD2                        687 dash_tst: 	
      000CD2                        688 	_case '-' at_tst 
      000CD2 A6 2D            [ 1]    1 	ld a,#'-' 
      000CD4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CD6 26 05            [ 1]    3 	jrne at_tst
      000CD8 A6 11            [ 1]  689 	ld a,#TK_MINUS  
      000CDA CC 0D D0         [ 2]  690 	jp token_char 
      000CDD                        691 at_tst:
      000CDD                        692 	_case '@' qmark_tst 
      000CDD A6 40            [ 1]    1 	ld a,#'@' 
      000CDF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CE1 26 05            [ 1]    3 	jrne qmark_tst
      000CE3 A6 05            [ 1]  693 	ld a,#TK_ARRAY 
      000CE5 CC 0D D0         [ 2]  694 	jp token_char
      000CE8                        695 qmark_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000CE8                        696 	_case '?' tick_tst 
      000CE8 A6 3F            [ 1]    1 	ld a,#'?' 
      000CEA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CEC 26 12            [ 1]    3 	jrne tick_tst
      000CEE A6 80            [ 1]  697 	ld a,#TK_CMD  
      000CF0 F7               [ 1]  698 	ld (x),a 
      000CF1 5C               [ 1]  699 	incw x 
      000CF2 90 93            [ 1]  700 	ldw y,x 
      000CF4 AE 1D 3D         [ 2]  701 	ldw x,#cmd_print
      000CF7 90 FF            [ 2]  702 	ldw (y),x 
      000CF9 72 A9 00 02      [ 2]  703 	addw y,#2
      000CFD CC 0D D4         [ 2]  704 	jp token_exit
      000D00                        705 tick_tst: ; comment 
      000D00                        706 	_case TICK plus_tst 
      000D00 A6 27            [ 1]    1 	ld a,#TICK 
      000D02 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D04 26 2B            [ 1]    3 	jrne plus_tst
      000D06 A6 80            [ 1]  707 	ld a,#TK_CMD
      000D08 F7               [ 1]  708 	ld (x),a 
      000D09 5C               [ 1]  709 	incw x
      000D0A 90 AE 1E 78      [ 2]  710 	ldw y,#remark 
      000D0E FF               [ 2]  711 	ldw (x),y 
      000D0F 1C 00 02         [ 2]  712 	addw x,#2  
      000D12                        713 copy_comment:
      000D12 90 AE 16 68      [ 2]  714 	ldw y,#tib 
      000D16 72 B9 00 00      [ 2]  715 	addw y,in.w
      000D1A 90 89            [ 2]  716 	pushw y 
      000D1C CD 10 D5         [ 4]  717 	call strcpy
      000D1F 72 F2 01         [ 2]  718 	subw y,(1,sp)
      000D22 90 5C            [ 1]  719 	incw y ; strlen+1 
      000D24 17 01            [ 2]  720 	ldw (1,sp),y 
      000D26 72 FB 01         [ 2]  721 	addw x,(1,sp) 
      000D29                        722 	_drop 2 
      000D29 5B 02            [ 2]    1     addw sp,#2 
      000D2B 4F               [ 1]  723 	clr a 
      000D2C 90 93            [ 1]  724 	ldw y,x 
      000D2E CC 0D D4         [ 2]  725 	jp token_exit 
      000D31                        726 plus_tst:
      000D31                        727 	_case '+' star_tst 
      000D31 A6 2B            [ 1]    1 	ld a,#'+' 
      000D33 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D35 26 05            [ 1]    3 	jrne star_tst
      000D37 A6 10            [ 1]  728 	ld a,#TK_PLUS  
      000D39 CC 0D D0         [ 2]  729 	jp token_char 
      000D3C                        730 star_tst:
      000D3C                        731 	_case '*' slash_tst 
      000D3C A6 2A            [ 1]    1 	ld a,#'*' 
      000D3E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D40 26 05            [ 1]    3 	jrne slash_tst
      000D42 A6 20            [ 1]  732 	ld a,#TK_MULT 
      000D44 CC 0D D0         [ 2]  733 	jp token_char 
      000D47                        734 slash_tst: 
      000D47                        735 	_case '/' prcnt_tst 
      000D47 A6 2F            [ 1]    1 	ld a,#'/' 
      000D49 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000D4B 26 05            [ 1]    3 	jrne prcnt_tst
      000D4D A6 21            [ 1]  736 	ld a,#TK_DIV 
      000D4F CC 0D D0         [ 2]  737 	jp token_char 
      000D52                        738 prcnt_tst:
      000D52                        739 	_case '%' eql_tst 
      000D52 A6 25            [ 1]    1 	ld a,#'%' 
      000D54 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D56 26 05            [ 1]    3 	jrne eql_tst
      000D58 A6 22            [ 1]  740 	ld a,#TK_MOD
      000D5A CC 0D D0         [ 2]  741 	jp token_char  
                                    742 ; 1 or 2 character tokens 	
      000D5D                        743 eql_tst:
      000D5D                        744 	_case '=' gt_tst 		
      000D5D A6 3D            [ 1]    1 	ld a,#'=' 
      000D5F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D61 26 05            [ 1]    3 	jrne gt_tst
      000D63 A6 32            [ 1]  745 	ld a,#TK_EQUAL
      000D65 CC 0D D0         [ 2]  746 	jp token_char 
      000D68                        747 gt_tst:
      000D68                        748 	_case '>' lt_tst 
      000D68 A6 3E            [ 1]    1 	ld a,#'>' 
      000D6A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D6C 26 23            [ 1]    3 	jrne lt_tst
      000D6E A6 31            [ 1]  749 	ld a,#TK_GT 
      000D70 6B 02            [ 1]  750 	ld (ATTRIB,sp),a 
      000D72 91 D6 00         [ 4]  751 	ld a,([in.w],y)
      000D75 72 5C 00 01      [ 1]  752 	inc in 
      000D79 A1 3D            [ 1]  753 	cp a,#'=
      000D7B 26 04            [ 1]  754 	jrne 1$
      000D7D A6 33            [ 1]  755 	ld a,#TK_GE 
      000D7F 20 4F            [ 2]  756 	jra token_char  
      000D81 A1 3C            [ 1]  757 1$: cp a,#'<
      000D83 26 04            [ 1]  758 	jrne 2$
      000D85 A6 35            [ 1]  759 	ld a,#TK_NE 
      000D87 20 47            [ 2]  760 	jra token_char 
      000D89 72 5A 00 01      [ 1]  761 2$: dec in
      000D8D 7B 02            [ 1]  762 	ld a,(ATTRIB,sp)
      000D8F 20 3F            [ 2]  763 	jra token_char 	 
      000D91                        764 lt_tst:
      000D91                        765 	_case '<' other
      000D91 A6 3C            [ 1]    1 	ld a,#'<' 
      000D93 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D95 26 23            [ 1]    3 	jrne other
      000D97 A6 34            [ 1]  766 	ld a,#TK_LT 
      000D99 6B 02            [ 1]  767 	ld (ATTRIB,sp),a 
      000D9B 91 D6 00         [ 4]  768 	ld a,([in.w],y)
      000D9E 72 5C 00 01      [ 1]  769 	inc in 
      000DA2 A1 3D            [ 1]  770 	cp a,#'=
      000DA4 26 04            [ 1]  771 	jrne 1$
      000DA6 A6 36            [ 1]  772 	ld a,#TK_LE 
      000DA8 20 26            [ 2]  773 	jra token_char 
      000DAA A1 3E            [ 1]  774 1$: cp a,#'>
      000DAC 26 04            [ 1]  775 	jrne 2$
      000DAE A6 35            [ 1]  776 	ld a,#TK_NE 
      000DB0 20 1E            [ 2]  777 	jra token_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000DB2 72 5A 00 01      [ 1]  778 2$: dec in 
      000DB6 7B 02            [ 1]  779 	ld a,(ATTRIB,sp)
      000DB8 20 16            [ 2]  780 	jra token_char 	
      000DBA                        781 other: ; not a special character 	 
      000DBA 7B 01            [ 1]  782 	ld a,(TCHAR,sp)
      000DBC CD 0B 55         [ 4]  783 	call is_alpha 
      000DBF 25 03            [ 1]  784 	jrc 30$ 
      000DC1 CC 13 BD         [ 2]  785 	jp syntax_error 
      000DC4                        786 30$: 
      000DC4 CD 0B A3         [ 4]  787 	call parse_keyword
      000DC7 A3 1E 78         [ 2]  788 	cpw x,#remark 
      000DCA 26 08            [ 1]  789 	jrne token_exit 
      000DCC 93               [ 1]  790 	ldw x,y 
      000DCD CC 0D 12         [ 2]  791 	jp copy_comment 
      000DD0                        792 token_char:
      000DD0 F7               [ 1]  793 	ld (x),a 
      000DD1 5C               [ 1]  794 	incw x
      000DD2 90 93            [ 1]  795 	ldw y,x 
      000DD4                        796 token_exit:
      000DD4                        797 	_drop VSIZE 
      000DD4 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DD6 81               [ 4]  798 	ret
                                    799 
                                    800 
                                    801 ;-----------------------------------
                                    802 ; create token list fromm text line 
                                    803 ; save this list in pad buffer 
                                    804 ;  compiled line format: 
                                    805 ;    line_no  2 bytes {0...32767}
                                    806 ;    line length    1 byte  
                                    807 ;    tokens list  variable length 
                                    808 ;   
                                    809 ; input:
                                    810 ;   none
                                    811 ; modified variables:
                                    812 ;   basicptr     token list buffer address 
                                    813 ;   in.w  		 3|count, i.e. index in buffer
                                    814 ;   count        length of line | 0  
                                    815 ;-----------------------------------
                           000001   816 	XSAVE=1
                           000002   817 	VSIZE=2
      000DD7                        818 compile::
      000DD7 90 89            [ 2]  819 	pushw y ; preserve xstack pointer 
      000DD9                        820 	_vars VSIZE 
      000DD9 52 02            [ 2]    1     sub sp,#VSIZE 
      000DDB 55 00 1B 00 04   [ 1]  821 	mov basicptr,txtbgn
      000DE0 72 1A 00 22      [ 1]  822 	bset flags,#FCOMP 
      000DE4 A6 00            [ 1]  823 	ld a,#0
      000DE6 AE 00 00         [ 2]  824 	ldw x,#0
      000DE9 CF 16 B8         [ 2]  825 	ldw pad,x ; destination buffer 
      000DEC C7 16 BA         [ 1]  826 	ld pad+2,a ; count 
      000DEF AE 16 BB         [ 2]  827 	ldw x,#pad+3
      000DF2 72 5F 00 01      [ 1]  828 	clr in 
      000DF6 CD 0C 23         [ 4]  829 	call get_token
      000DF9 A1 84            [ 1]  830 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000DFB 26 11            [ 1]  831 	jrne 2$
      000DFD A3 00 01         [ 2]  832 	cpw x,#1 
      000E00 2A 05            [ 1]  833 	jrpl 1$
      000E02 A6 0A            [ 1]  834 	ld a,#ERR_BAD_VALUE
      000E04 CC 13 BF         [ 2]  835 	jp tb_error
      000E07 CF 16 B8         [ 2]  836 1$:	ldw pad,x ; line# 
      000E0A 90 AE 16 BB      [ 2]  837 	ldw y,#pad+3 
      000E0E 90 A3 17 38      [ 2]  838 2$:	cpw y,#xstack_full 
      000E12 25 05            [ 1]  839 	jrult 3$
      000E14 A6 0F            [ 1]  840 	ld a,#ERR_BUF_FULL 
      000E16 CC 13 BF         [ 2]  841 	jp tb_error 
      000E19                        842 3$:	
      000E19 93               [ 1]  843 	ldw x,y 
      000E1A CD 0C 23         [ 4]  844 	call get_token 
      000E1D A1 00            [ 1]  845 	cp a,#TK_NONE 
      000E1F 26 ED            [ 1]  846 	jrne 2$ 
                                    847 ; compilation completed  
      000E21 72 A2 16 B8      [ 2]  848 	subw y,#pad ; compiled line length 
      000E25 90 9F            [ 1]  849     ld a,yl
      000E27 AE 16 B8         [ 2]  850 	ldw x,#pad 
      000E2A CF 00 19         [ 2]  851 	ldw ptr16,x 
      000E2D E7 02            [ 1]  852 	ld (2,x),a 
      000E2F FE               [ 2]  853 	ldw x,(x)  ; line# 
      000E30 27 09            [ 1]  854 	jreq 10$
      000E32 CD 0A 02         [ 4]  855 	call insert_line
      000E35 72 5F 00 02      [ 1]  856 	clr  count 
      000E39 20 0F            [ 2]  857 	jra  11$ 
      000E3B                        858 10$: ; line# is zero 
      000E3B CE 00 19         [ 2]  859 	ldw x,ptr16  
      000E3E CF 00 04         [ 2]  860 	ldw basicptr,x 
      000E41 E6 02            [ 1]  861 	ld a,(2,x)
      000E43 C7 00 02         [ 1]  862 	ld count,a 
      000E46 35 03 00 01      [ 1]  863 	mov in,#3 
      000E4A                        864 11$:
      000E4A                        865 	_drop VSIZE 
      000E4A 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E4C 72 1B 00 22      [ 1]  866 	bres flags,#FCOMP 
      000E50 90 85            [ 2]  867 	popw y 
      000E52 81               [ 4]  868 	ret 
                                    869 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      000E53                         48 cpy_cmd_name:
      000E53 5D               [ 2]   49 	tnzw x 
      000E54 27 14            [ 1]   50 	jreq 10$
      000E56 F6               [ 1]   51 	ld a,(x)
      000E57 5C               [ 1]   52 	incw x
      000E58 A4 0F            [ 1]   53 	and a,#15  
      000E5A 88               [ 1]   54 	push a 
      000E5B 0D 01            [ 1]   55     tnz (1,sp) 
      000E5D 27 0A            [ 1]   56 	jreq 9$
      000E5F F6               [ 1]   57 1$:	ld a,(x)
      000E60 90 F7            [ 1]   58 	ld (y),a  
      000E62 5C               [ 1]   59 	incw x
      000E63 90 5C            [ 1]   60 	incw y 
      000E65 0A 01            [ 1]   61 	dec (1,sp)	 
      000E67 26 F6            [ 1]   62 	jrne 1$
      000E69 84               [ 1]   63 9$: pop a 
      000E6A                         64 10$: 
      000E6A 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      000E6B                         75 add_space:
      000E6B 90 5A            [ 2]   76 	decw y 
      000E6D 90 F6            [ 1]   77 	ld a,(y)
      000E6F 90 5C            [ 1]   78 	incw y
      000E71 A1 29            [ 1]   79 	cp a,#') 
      000E73 27 05            [ 1]   80 	jreq 0$
      000E75 CD 0B 78         [ 4]   81 	call is_symbol_char
      000E78 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      000E7A                         83 0$: 
      000E7A A6 20            [ 1]   84 	ld a,#SPACE 
      000E7C 90 F7            [ 1]   85 	ld (y),a 
      000E7E 90 5C            [ 1]   86 	incw y 
      000E80 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  by  padding left  
                                     92 ;  with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      width  
                                     96 ; output:
                                     97 ;   A      strlen
                                     98 ;   X      ajusted
                                     99 ;--------------------------
                           000001   100 	WIDTH=1 ; column width 
                           000002   101 	SLEN=2  ; string length 
                           000002   102 	VSIZE=2 
      000E81                        103 right_align::
      000E81                        104 	_vars VSIZE 
      000E81 52 02            [ 2]    1     sub sp,#VSIZE 
      000E83 6B 01            [ 1]  105 	ld (WIDTH,sp),a 
      000E85 CD 10 B9         [ 4]  106 	call strlen 
      000E88 6B 02            [ 1]  107 0$:	ld (SLEN,sp),a  
      000E8A 11 01            [ 1]  108 	cp a,(WIDTH,sp) 
      000E8C 2A 09            [ 1]  109 	jrpl 1$
      000E8E 5A               [ 2]  110 	decw x
      000E8F A6 20            [ 1]  111 	ld a,#SPACE 
      000E91 F7               [ 1]  112 	ld (x),a  
      000E92 7B 02            [ 1]  113 	ld a,(SLEN,sp)
      000E94 4C               [ 1]  114 	inc a 
      000E95 20 F1            [ 2]  115 	jra 0$ 
      000E97 7B 02            [ 1]  116 1$: ld a,(SLEN,sp)	
      000E99                        117 	_drop VSIZE 
      000E99 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E9B 81               [ 4]  118 	ret 
                                    119 
                                    120 ;--------------------------
                                    121 ; print TK_QSTR
                                    122 ; converting control character
                                    123 ; to backslash sequence
                                    124 ; input:
                                    125 ;   X        char *
                                    126 ;   Y        dest. buffer 
                                    127 ; output:
                                    128 ;   X        moved forward 
                                    129 ;   Y        moved forward 
                                    130 ;-----------------------------
      000E9C                        131 cpy_quote:
      000E9C A6 22            [ 1]  132 	ld a,#'"
      000E9E 90 F7            [ 1]  133 	ld (y),a 
      000EA0 90 5C            [ 1]  134 	incw y 
      000EA2 89               [ 2]  135 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      000EA3 CD 15 32         [ 4]  136 	call skip_string 
      000EA6 85               [ 2]  137 	popw x 
      000EA7 F6               [ 1]  138 1$:	ld a,(x)
      000EA8 27 30            [ 1]  139 	jreq 9$
      000EAA 5C               [ 1]  140 	incw x 
      000EAB A1 20            [ 1]  141 	cp a,#SPACE 
      000EAD 25 0E            [ 1]  142 	jrult 3$
      000EAF 90 F7            [ 1]  143 	ld (y),a
      000EB1 90 5C            [ 1]  144 	incw y 
      000EB3 A1 5C            [ 1]  145 	cp a,#'\ 
      000EB5 26 F0            [ 1]  146 	jrne 1$ 
      000EB7                        147 2$:
      000EB7 90 F7            [ 1]  148 	ld (y),a
      000EB9 90 5C            [ 1]  149 	incw y  
      000EBB 20 EA            [ 2]  150 	jra 1$
      000EBD 88               [ 1]  151 3$: push a 
      000EBE A6 5C            [ 1]  152 	ld a,#'\
      000EC0 90 F7            [ 1]  153 	ld (y),a 
      000EC2 90 5C            [ 1]  154 	incw y  
      000EC4 84               [ 1]  155 	pop a 
      000EC5 A0 07            [ 1]  156 	sub a,#7
      000EC7 C7 00 0E         [ 1]  157 	ld acc8,a 
      000ECA 72 5F 00 0D      [ 1]  158 	clr acc16
      000ECE 89               [ 2]  159 	pushw x
      000ECF AE 0A BD         [ 2]  160 	ldw x,#escaped 
      000ED2 72 BB 00 0D      [ 2]  161 	addw x,acc16 
      000ED6 F6               [ 1]  162 	ld a,(x)
      000ED7 85               [ 2]  163 	popw x
      000ED8 20 DD            [ 2]  164 	jra 2$
      000EDA A6 22            [ 1]  165 9$: ld a,#'"
      000EDC 90 F7            [ 1]  166 	ld (y),a 
      000EDE 90 5C            [ 1]  167 	incw y  
      000EE0 5C               [ 1]  168 	incw x 
      000EE1 81               [ 4]  169 	ret
                                    170 
                                    171 ;--------------------------
                                    172 ; return variable name 
                                    173 ; from its address.
                                    174 ; input:
                                    175 ;   X    variable address
                                    176 ; output:
                                    177 ;   A     variable letter
                                    178 ;--------------------------
      000EE2                        179 var_name::
      000EE2 1D 00 34         [ 2]  180 		subw x,#vars 
      000EE5 A6 03            [ 1]  181 		ld a,#3
      000EE7 62               [ 2]  182 		div x,a 
      000EE8 9F               [ 1]  183 		ld a,xl 
      000EE9 AB 41            [ 1]  184 		add a,#'A 
      000EEB 81               [ 4]  185 		ret 
                                    186 
                                    187 
                                    188 
                                    189 ;-------------------------------------
                                    190 ; decompile tokens list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                    191 ; to original text line 
                                    192 ; input:
                                    193 ;   [basicptr]  pointer at line 
                                    194 ;   Y           output buffer
                                    195 ; output:
                                    196 ;   A           length 
                                    197 ;   Y           after string  
                                    198 ;------------------------------------
                           000001   199 	BASE_SAV=1
                           000002   200 	STR=2
                           000003   201 	VSIZE=3 
      000EEC                        202 decompile::
      000EEC                        203 	_vars VSIZE
      000EEC 52 03            [ 2]    1     sub sp,#VSIZE 
      000EEE C6 00 0A         [ 1]  204 	ld a,base
      000EF1 6B 01            [ 1]  205 	ld (BASE_SAV,sp),a  
      000EF3 17 02            [ 2]  206 	ldw (STR,sp),y   
      000EF5 72 CE 00 04      [ 5]  207 	ldw x,[basicptr] ; line number 
      000EF9 35 0A 00 0A      [ 1]  208 	mov base,#10
      000EFD 72 5F 00 0C      [ 1]  209 	clr acc24 
      000F01 CF 00 0D         [ 2]  210 	ldw acc16,x
      000F04 4F               [ 1]  211 	clr a ; unsigned conversion 
      000F05 CD 15 96         [ 4]  212 	call itoa  
      000F08 A6 05            [ 1]  213 	ld a,#5 
      000F0A CD 0E 81         [ 4]  214 	call right_align 
      000F0D 88               [ 1]  215 	push a 
      000F0E 90 93            [ 1]  216 1$:	ldw y,x ; source
      000F10 1E 03            [ 2]  217 	ldw x,(STR+1,sp) ; destination
      000F12 CD 10 D5         [ 4]  218 	call strcpy 
      000F15 90 5F            [ 1]  219 	clrw y 
      000F17 84               [ 1]  220 	pop a 
      000F18 90 97            [ 1]  221 	ld yl,a 
      000F1A 72 F9 02         [ 2]  222 	addw y,(STR,sp)
      000F1D A6 20            [ 1]  223 	ld a,#SPACE 
      000F1F 90 F7            [ 1]  224 	ld (y),a 
      000F21 90 5C            [ 1]  225 	incw y 
      000F23 AE 00 03         [ 2]  226 	ldw x,#3
      000F26 CF 00 00         [ 2]  227 	ldw in.w,x 
      000F29                        228 decomp_loop:
      000F29 90 89            [ 2]  229 	pushw y
      000F2B CD 15 19         [ 4]  230 	call next_token 
      000F2E 90 85            [ 2]  231 	popw y 
      000F30 4D               [ 1]  232 	tnz a  
      000F31 26 03            [ 1]  233 	jrne 1$
      000F33 CC 10 4E         [ 2]  234 	jp 20$
      000F36 2B 03            [ 1]  235 1$:	jrmi 2$
      000F38 CC 0F C7         [ 2]  236 	jp 6$
      000F3B                        237 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      000F3B A1 85            [ 1]  238 	cp a,#TK_VAR 
      000F3D 26 0F            [ 1]  239 	jrne 3$
                                    240 ;; TK_VAR 
      000F3F CD 0E 6B         [ 4]  241 	call add_space
      000F42 CD 15 41         [ 4]  242 	call get_addr   
      000F45 CD 0E E2         [ 4]  243 	call var_name
      000F48 90 F7            [ 1]  244 	ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      000F4A 90 5C            [ 1]  245 	incw y  
      000F4C 20 DB            [ 2]  246 	jra decomp_loop
      000F4E                        247 3$:
      000F4E A1 84            [ 1]  248 	cp a,#TK_INTGR
      000F50 26 26            [ 1]  249 	jrne 4$
                                    250 ;; TK_INTGR
      000F52 CD 15 4B         [ 4]  251 	call get_int24 
      000F55 C7 00 0C         [ 1]  252 	ld acc24,a 
      000F58 CF 00 0D         [ 2]  253 	ldw acc16,x 
      000F5B CD 0E 6B         [ 4]  254 	call add_space
      000F5E 90 89            [ 2]  255 	pushw y 
      000F60 A6 FF            [ 1]  256 	ld a,#255 ; signed conversion 
      000F62 CD 15 96         [ 4]  257 	call itoa  
      000F65 16 01            [ 2]  258 	ldw y,(1,sp) 
      000F67 88               [ 1]  259 	push a 
      000F68 51               [ 1]  260 	exgw x,y 
      000F69 CD 10 D5         [ 4]  261 	call strcpy 
      000F6C 90 5F            [ 1]  262 	clrw y
      000F6E 84               [ 1]  263 	pop a  
      000F6F 90 97            [ 1]  264 	ld yl,a 
      000F71 72 F9 01         [ 2]  265 	addw y,(1,sp)
      000F74                        266 	_drop 2 
      000F74 5B 02            [ 2]    1     addw sp,#2 
      000F76 20 B1            [ 2]  267 	jra decomp_loop
      000F78                        268 4$: ; dictionary keyword
      000F78 A1 87            [ 1]  269 	cp a,#TK_NOT 
      000F7A 24 39            [ 1]  270 	jruge 50$ 
      000F7C FE               [ 2]  271 	ldw x,(x)
      000F7D 72 5C 00 01      [ 1]  272 	inc in 
      000F81 72 5C 00 01      [ 1]  273 	inc in 
      000F85 A3 1E 78         [ 2]  274 	cpw x,#remark 
      000F88 26 23            [ 1]  275 	jrne 5$
      000F8A CE 00 04         [ 2]  276 	ldw x,basicptr 
                                    277 ; copy comment to buffer 
      000F8D CD 0E 6B         [ 4]  278 	call add_space
      000F90 A6 27            [ 1]  279 	ld a,#''
      000F92 90 F7            [ 1]  280 	ld (y),a 
      000F94 90 5C            [ 1]  281 	incw y 
      000F96                        282 46$:
      000F96 72 D6 00 00      [ 4]  283 	ld a,([in.w],x)
      000F9A 72 5C 00 01      [ 1]  284 	inc in  
      000F9E 90 F7            [ 1]  285 	ld (y),a 
      000FA0 90 5C            [ 1]  286 	incw y 
      000FA2 C6 00 01         [ 1]  287 	ld a,in 
      000FA5 C1 00 02         [ 1]  288 	cp a,count 
      000FA8 2B EC            [ 1]  289 	jrmi 46$
      000FAA CC 10 4E         [ 2]  290 	jp 20$  
      000FAD A3 1A 0C         [ 2]  291 5$: cpw x,#let  
      000FB0 26 05            [ 1]  292 	jrne 54$
      000FB2 CC 0F 29         [ 2]  293 	jp decomp_loop ; down display LET
      000FB5                        294 50$:
      000FB5 5F               [ 1]  295 	clrw x 
      000FB6 97               [ 1]  296 	ld xl,a 
      000FB7                        297 54$: ; insert command name 
      000FB7 CD 0E 6B         [ 4]  298 	call add_space  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      000FBA 90 89            [ 2]  299 	pushw y
      000FBC CD 10 85         [ 4]  300 	call cmd_name
      000FBF 90 85            [ 2]  301 	popw y 
      000FC1 CD 0E 53         [ 4]  302 	call cpy_cmd_name
      000FC4 CC 0F 29         [ 2]  303 	jp decomp_loop 
      000FC7                        304 6$:
                                    305 ; label?
      000FC7 A1 03            [ 1]  306 	cp a,#TK_LABEL 
      000FC9 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      000FCB A6 20            [ 1]  309 	ld a,#32 
      000FCD 90 F7            [ 1]  310 	ld (y),a 
      000FCF 90 5C            [ 1]  311 	incw y 
      000FD1                        312 61$:
      000FD1 89               [ 2]  313 	pushw x 
      000FD2 CD 15 32         [ 4]  314 	call skip_string 
      000FD5 85               [ 2]  315 	popw x 
      000FD6                        316 62$:	
      000FD6 F6               [ 1]  317 	ld a,(x)
      000FD7 27 07            [ 1]  318 	jreq 63$ 
      000FD9 5C               [ 1]  319 	incw x  
      000FDA 90 F7            [ 1]  320 	ld (y),a 
      000FDC 90 5C            [ 1]  321 	incw y 
      000FDE 20 F6            [ 2]  322 	jra 62$ 
      000FE0                        323 63$: 
      000FE0 A6 20            [ 1]  324 	ld a,#32 
      000FE2 90 F7            [ 1]  325 	ld (y),a 
      000FE4 90 5C            [ 1]  326 	incw y 
      000FE6 CC 0F 29         [ 2]  327 	jp decomp_loop
      000FE9                        328 64$:
      000FE9 A1 02            [ 1]  329 	cp a,#TK_QSTR 
      000FEB 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      000FED CD 0E 6B         [ 4]  332 	call add_space
      000FF0 CD 0E 9C         [ 4]  333 	call cpy_quote  
      000FF3 CC 0F 29         [ 2]  334 	jp decomp_loop
      000FF6                        335 7$:
      000FF6 A1 04            [ 1]  336 	cp a,#TK_CHAR 
      000FF8 26 15            [ 1]  337 	jrne 9$
                                    338 ;; TK_CHAR
      000FFA CD 0E 6B         [ 4]  339 	call add_space 
      000FFD A6 5C            [ 1]  340 	ld a,#'\ 
      000FFF 90 F7            [ 1]  341 	ld (y),a 
      001001 90 5C            [ 1]  342 	incw y
      001003 F6               [ 1]  343 	ld a,(x)
      001004 72 5C 00 01      [ 1]  344 	inc in  
      001008                        345 8$:
      001008 90 F7            [ 1]  346 	ld (y),a 
      00100A 90 5C            [ 1]  347 	incw y 
      00100C                        348 82$:
      00100C CC 0F 29         [ 2]  349 	jp decomp_loop
      00100F                        350 9$: 
      00100F A1 0A            [ 1]  351 	cp a,#TK_SEMIC 
      001011 22 0A            [ 1]  352 	jrugt 10$ 
      001013 A0 05            [ 1]  353 	sub a,#TK_ARRAY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001015 5F               [ 1]  354 	clrw x 
      001016 97               [ 1]  355 	ld xl,a
      001017 1C 10 5F         [ 2]  356 	addw x,#single_char 
      00101A F6               [ 1]  357 	ld a,(x)
      00101B 20 EB            [ 2]  358 	jra 8$ 
      00101D                        359 10$: 
      00101D A1 11            [ 1]  360 	cp a,#TK_MINUS 
      00101F 22 0A            [ 1]  361 	jrugt 11$
      001021 A0 10            [ 1]  362 	sub a,#TK_PLUS 
      001023 5F               [ 1]  363 	clrw x 
      001024 97               [ 1]  364 	ld xl,a 
      001025 1C 10 65         [ 2]  365 	addw x,#add_char 
      001028 F6               [ 1]  366 	ld a,(x)
      001029 20 DD            [ 2]  367 	jra 8$
      00102B                        368 11$:
      00102B A1 22            [ 1]  369     cp a,#TK_MOD 
      00102D 22 0A            [ 1]  370 	jrugt 12$
      00102F A0 20            [ 1]  371 	sub a,#TK_MULT
      001031 5F               [ 1]  372 	clrw x 
      001032 97               [ 1]  373 	ld xl,a 
      001033 1C 10 67         [ 2]  374 	addw x,#mul_char
      001036 F6               [ 1]  375 	ld a,(x)
      001037 20 CF            [ 2]  376 	jra 8$
      001039                        377 12$:
      001039 A0 31            [ 1]  378 	sub a,#TK_GT  
      00103B 48               [ 1]  379 	sll a 
      00103C 5F               [ 1]  380 	clrw x 
      00103D 97               [ 1]  381 	ld xl,a 
      00103E 1C 10 6A         [ 2]  382 	addw x,#relop_str 
      001041 FE               [ 2]  383 	ldw x,(x)
      001042 F6               [ 1]  384 	ld a,(x)
      001043 5C               [ 1]  385 	incw x 
      001044 90 F7            [ 1]  386 	ld (y),a
      001046 90 5C            [ 1]  387 	incw y 
      001048 F6               [ 1]  388 	ld a,(x)
      001049 26 BD            [ 1]  389 	jrne 8$
      00104B CC 0F 29         [ 2]  390 	jp decomp_loop 
      00104E                        391 20$: 
      00104E 90 7F            [ 1]  392 	clr (y)
      001050 1E 02            [ 2]  393 	ldw x,(STR,sp)
      001052 7B 01            [ 1]  394 	ld a,(BASE_SAV,sp)
      001054 C7 00 0A         [ 1]  395 	ld base,a 
      001057 72 F2 02         [ 2]  396 	subw y,(STR,sp) 
      00105A 90 9F            [ 1]  397 	ld a,yl 
      00105C                        398 	_drop VSIZE 
      00105C 5B 03            [ 2]    1     addw sp,#VSIZE 
      00105E 81               [ 4]  399 	ret 
                                    400 
      00105F 40 28 29 2C 3A 3B      401 single_char: .byte '@','(',')',',',':',';' 
      001065 2B 2D                  402 add_char: .byte '+','-'
      001067 2A 2F 25               403 mul_char: .byte '*','/','%'
      00106A 10 76 10 78 10 7A 10   404 relop_str: .word gt,equal,ge,lt,ne,le 
             7D 10 82 10 7F
      001076 3E 00                  405 gt: .asciz ">"
      001078 3D 00                  406 equal: .asciz "="
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      00107A 3E 3D 00               407 ge: .asciz ">="
      00107D 3C 00                  408 lt: .asciz "<"
      00107F 3C 3D 00               409 le: .asciz "<="
      001082 3C 3E 00               410 ne:  .asciz "<>"
                                    411 
                                    412 ;----------------------------------
                                    413 ; search in kword_dict name
                                    414 ; from its execution address 
                                    415 ; input:
                                    416 ;   X       	routine_address  
                                    417 ; output:
                                    418 ;   X 			cstr*  | 0 
                                    419 ;--------------------------------
                           000001   420 	CODE_ADDR=1 
                           000003   421 	LINK=3 
                           000004   422 	VSIZE=4
      001085                        423 cmd_name:
      001085                        424 	_vars VSIZE 
      001085 52 04            [ 2]    1     sub sp,#VSIZE 
      001087 72 5F 00 0D      [ 1]  425 	clr acc16 
      00108B 1F 01            [ 2]  426 	ldw (CODE_ADDR,sp),x  
      00108D AE 33 AB         [ 2]  427 	ldw x,#kword_dict	
      001090 1F 03            [ 2]  428 1$:	ldw (LINK,sp),x
      001092 E6 02            [ 1]  429 	ld a,(2,x)
      001094 A4 0F            [ 1]  430 	and a,#15 
      001096 C7 00 0E         [ 1]  431 	ld acc8,a 
      001099 1C 00 03         [ 2]  432 	addw x,#3
      00109C 72 BB 00 0D      [ 2]  433 	addw x,acc16
      0010A0 FE               [ 2]  434 	ldw x,(x) ; code address   
      0010A1 13 01            [ 2]  435 	cpw x,(CODE_ADDR,sp)
      0010A3 27 0C            [ 1]  436 	jreq 2$
      0010A5 1E 03            [ 2]  437 	ldw x,(LINK,sp)
      0010A7 FE               [ 2]  438 	ldw x,(x) 
      0010A8 1D 00 02         [ 2]  439 	subw x,#2  
      0010AB 26 E3            [ 1]  440 	jrne 1$
      0010AD 4F               [ 1]  441 	clr a 
      0010AE 5F               [ 1]  442 	clrw x 
      0010AF 20 05            [ 2]  443 	jra 9$
      0010B1 1E 03            [ 2]  444 2$: ldw x,(LINK,sp)
      0010B3 1C 00 02         [ 2]  445 	addw x,#2 	
      0010B6                        446 9$:	_drop VSIZE
      0010B6 5B 04            [ 2]    1     addw sp,#VSIZE 
      0010B8 81               [ 4]  447 	ret
                                    448 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
                                     64 ; keep the following 3 variables in this order 
      000000                         65 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         66 in::    .blkb 1 ; low byte of in.w 
      000002                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000003                         68 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000004                         69 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         70 data_ptr:  .blkw 1  ; point to DATA address
      000008                         71 data_ofs:  .blkb 1  ; index to next data item 
      000009                         72 data_len:  .blkb 1  ; length of data line 
      00000A                         73 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         74 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         75 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         76 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         77 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         78 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         79 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         80 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         81 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         82 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         83 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         84 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         85 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         86 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         87 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         88 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         89 flags:: .blkb 1 ; various boolean flags
      000023                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000025                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002D                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002E                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      00002F                         94 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000031                         95 dvar_end:: .blkw 1 ; DIM variables end address 
      000033                         96 chain_level: .blkb 1 ; increment for each CHAIN command 
                                     97 ; 24 bits integer variables 
      000034                         98 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     99 
                                    100 	.area BTXT (ABS)
      00008C                        101 	.org 0x8C  
                                    102 ; keep 'free_ram' as last variable 
                                    103 ; basic code compiled here. 
      00008C                        104 rsign: .blkw 1 ; "TB" 
      00008E                        105 rsize: .blkw 1 ; code size 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      000090                        106 free_ram: ; from here RAM free for BASIC text 
                                    107 
                                    108 	.area CODE 
                                    109 
                                    110 
                                    111 ;-------------------------------------
                                    112 ; retrun string length
                                    113 ; input:
                                    114 ;   X         .asciz  pointer 
                                    115 ; output:
                                    116 ;   X         not affected 
                                    117 ;   A         length 
                                    118 ;-------------------------------------
      0010B9                        119 strlen::
      0010B9 89               [ 2]  120 	pushw x 
      0010BA 4F               [ 1]  121 	clr a
      0010BB 7D               [ 1]  122 1$:	tnz (x) 
      0010BC 27 04            [ 1]  123 	jreq 9$ 
      0010BE 4C               [ 1]  124 	inc a 
      0010BF 5C               [ 1]  125 	incw x 
      0010C0 20 F9            [ 2]  126 	jra 1$ 
      0010C2 85               [ 2]  127 9$:	popw x 
      0010C3 81               [ 4]  128 	ret 
                                    129 
                                    130 ;------------------------------------
                                    131 ; compare 2 strings
                                    132 ; input:
                                    133 ;   X 		char* first string 
                                    134 ;   Y       char* second string 
                                    135 ; output:
                                    136 ;   A 		0 not == |1 ==  
                                    137 ;-------------------------------------
      0010C4                        138 strcmp:
      0010C4 F6               [ 1]  139 	ld a,(x)
      0010C5 27 0B            [ 1]  140 	jreq 5$ 
      0010C7 90 F1            [ 1]  141 	cp a,(y) 
      0010C9 26 05            [ 1]  142 	jrne 4$ 
      0010CB 5C               [ 1]  143 	incw x 
      0010CC 90 5C            [ 1]  144 	incw y 
      0010CE 20 F4            [ 2]  145 	jra strcmp 
      0010D0                        146 4$: ; not same  
      0010D0 4F               [ 1]  147 	clr a 
      0010D1 81               [ 4]  148 	ret 
      0010D2                        149 5$: ; same 
      0010D2 A6 01            [ 1]  150 	ld a,#1 
      0010D4 81               [ 4]  151 	ret 
                                    152 
                                    153 
                                    154 ;---------------------------------------
                                    155 ;  copy src to dest 
                                    156 ; input:
                                    157 ;   X 		dest 
                                    158 ;   Y 		src 
                                    159 ; output: 
                                    160 ;   X 		dest 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    161 ;----------------------------------
      0010D5                        162 strcpy::
      0010D5 88               [ 1]  163 	push a 
      0010D6 89               [ 2]  164 	pushw x 
      0010D7 90 F6            [ 1]  165 1$: ld a,(y)
      0010D9 27 06            [ 1]  166 	jreq 9$ 
      0010DB F7               [ 1]  167 	ld (x),a 
      0010DC 5C               [ 1]  168 	incw x 
      0010DD 90 5C            [ 1]  169 	incw y 
      0010DF 20 F6            [ 2]  170 	jra 1$ 
      0010E1 7F               [ 1]  171 9$:	clr (x)
      0010E2 85               [ 2]  172 	popw x 
      0010E3 84               [ 1]  173 	pop a 
      0010E4 81               [ 4]  174 	ret 
                                    175 
                                    176 ;---------------------------------------
                                    177 ; move memory block 
                                    178 ; input:
                                    179 ;   X 		destination 
                                    180 ;   Y 	    source 
                                    181 ;   acc16	bytes count 
                                    182 ; output:
                                    183 ;   none 
                                    184 ;--------------------------------------
                           000001   185 	INCR=1 ; incrament high byte 
                           000002   186 	LB=2 ; increment low byte 
                           000002   187 	VSIZE=2
      0010E5                        188 move::
      0010E5 88               [ 1]  189 	push a 
      0010E6                        190 	_vars VSIZE 
      0010E6 52 02            [ 2]    1     sub sp,#VSIZE 
      0010E8 0F 01            [ 1]  191 	clr (INCR,sp)
      0010EA 0F 02            [ 1]  192 	clr (LB,sp)
      0010EC 90 89            [ 2]  193 	pushw y 
      0010EE 13 01            [ 2]  194 	cpw x,(1,sp) ; compare DEST to SRC 
      0010F0 90 85            [ 2]  195 	popw y 
      0010F2 27 31            [ 1]  196 	jreq move_exit ; x==y 
      0010F4 2B 0E            [ 1]  197 	jrmi move_down
      0010F6                        198 move_up: ; start from top address with incr=-1
      0010F6 72 BB 00 0D      [ 2]  199 	addw x,acc16
      0010FA 72 B9 00 0D      [ 2]  200 	addw y,acc16
      0010FE 03 01            [ 1]  201 	cpl (INCR,sp)
      001100 03 02            [ 1]  202 	cpl (LB,sp)   ; increment = -1 
      001102 20 05            [ 2]  203 	jra move_loop  
      001104                        204 move_down: ; start from bottom address with incr=1 
      001104 5A               [ 2]  205     decw x 
      001105 90 5A            [ 2]  206 	decw y
      001107 0C 02            [ 1]  207 	inc (LB,sp) ; incr=1 
      001109                        208 move_loop:	
      001109 C6 00 0D         [ 1]  209     ld a, acc16 
      00110C CA 00 0E         [ 1]  210 	or a, acc8
      00110F 27 14            [ 1]  211 	jreq move_exit 
      001111 72 FB 01         [ 2]  212 	addw x,(INCR,sp)
      001114 72 F9 01         [ 2]  213 	addw y,(INCR,sp) 
      001117 90 F6            [ 1]  214 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      001119 F7               [ 1]  215 	ld (x),a 
      00111A 89               [ 2]  216 	pushw x 
      00111B CE 00 0D         [ 2]  217 	ldw x,acc16 
      00111E 5A               [ 2]  218 	decw x 
      00111F CF 00 0D         [ 2]  219 	ldw acc16,x 
      001122 85               [ 2]  220 	popw x 
      001123 20 E4            [ 2]  221 	jra move_loop
      001125                        222 move_exit:
      001125                        223 	_drop VSIZE
      001125 5B 02            [ 2]    1     addw sp,#VSIZE 
      001127 84               [ 1]  224 	pop a 
      001128 81               [ 4]  225 	ret 	
                                    226 
                                    227 ;------------------------------------
                                    228 ;  set all variables to zero 
                                    229 ; input:
                                    230 ;   none 
                                    231 ; output:
                                    232 ;	none
                                    233 ;------------------------------------
      001129                        234 clear_vars:
      001129 89               [ 2]  235 	pushw x 
      00112A 88               [ 1]  236 	push a  
      00112B AE 00 34         [ 2]  237 	ldw x,#vars 
      00112E A6 4E            [ 1]  238 	ld a,#CELL_SIZE*26 
      001130 7F               [ 1]  239 1$:	clr (x)
      001131 5C               [ 1]  240 	incw x 
      001132 4A               [ 1]  241 	dec a 
      001133 26 FB            [ 1]  242 	jrne 1$
      001135 84               [ 1]  243 	pop a 
      001136 85               [ 2]  244 	popw x 
      001137 81               [ 4]  245 	ret 
                                    246 
                                    247 
                                    248 ;-----------------------
                                    249 ;  display system 
                                    250 ;  information 
                                    251 ;-----------------------
                           000002   252 	MAJOR=2
                           000000   253 	MINOR=0 
      001138 0A 0A 54 69 6E 79 20   254 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    255 
      00117E                        256 system_information:
      00117E AE 11 38         [ 2]  257 	ldw x,#software 
      001181 CD 06 82         [ 4]  258 	call puts 
      001184 A6 02            [ 1]  259 	ld a,#MAJOR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      001186 C7 00 0E         [ 1]  260 	ld acc8,a 
      001189 5F               [ 1]  261 	clrw x 
      00118A CF 00 0C         [ 2]  262 	ldw acc24,x
      00118D 35 0A 00 0A      [ 1]  263 	mov base, #10 
      001191 CD 15 78         [ 4]  264 	call prt_acc24 
      001194 A6 2E            [ 1]  265 	ld a,#'.
      001196 CD 06 25         [ 4]  266 	call putc 
      001199 A6 00            [ 1]  267 	ld a,#MINOR 
      00119B C7 00 0E         [ 1]  268 	ld acc8,a 
      00119E 5F               [ 1]  269 	clrw x 
      00119F CF 00 0C         [ 2]  270 	ldw acc24,x 
      0011A2 CD 15 78         [ 4]  271 	call prt_acc24
      0011A5 A6 0D            [ 1]  272 	ld a,#CR 
      0011A7 CD 06 25         [ 4]  273 	call putc
                                    274 ;call test 
      0011AA 81               [ 4]  275 	ret
                                    276 
      0011AB                        277 warm_init:
      0011AB 90 AE 17 73      [ 2]  278 	ldw y,#XSTACK_EMPTY  
      0011AF 72 5F 00 22      [ 1]  279 	clr flags 
      0011B3 72 5F 00 1F      [ 1]  280 	clr loop_depth 
      0011B7 35 0A 00 0A      [ 1]  281 	mov base,#10 
      0011BB AE 00 00         [ 2]  282 	ldw x,#0 
      0011BE CF 00 04         [ 2]  283 	ldw basicptr,x 
      0011C1 CF 00 00         [ 2]  284 	ldw in.w,x 
      0011C4 72 5F 00 02      [ 1]  285 	clr count
      0011C8 81               [ 4]  286 	ret 
                                    287 
                                    288 ;---------------------------
                                    289 ; reset BASIC text variables 
                                    290 ; and clear variables 
                                    291 ;---------------------------
      0011C9                        292 clear_basic:
      0011C9 89               [ 2]  293 	pushw x 
      0011CA 72 5F 00 02      [ 1]  294 	clr count
      0011CE 72 5F 00 01      [ 1]  295 	clr in  
      0011D2 AE 00 90         [ 2]  296 	ldw x,#free_ram 
      0011D5 CF 00 1B         [ 2]  297 	ldw txtbgn,x 
      0011D8 CF 00 1D         [ 2]  298 	ldw txtend,x 
      0011DB CF 00 2F         [ 2]  299 	ldw dvar_bgn,x 
      0011DE CF 00 31         [ 2]  300 	ldw dvar_end,x 
      0011E1 CD 11 29         [ 4]  301 	call clear_vars 
      0011E4 72 5F 00 33      [ 1]  302 	clr chain_level
      0011E8 85               [ 2]  303 	popw x
      0011E9 81               [ 4]  304 	ret 
                                    305 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 ;;   Tiny BASIC error messages     ;;
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011EA                        309 err_msg:
      0011EA 00 00 12 10 12 27 12   310 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             35 12 4E 12 5D
      0011F6 12 73 12 89 12 A3 12   311 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             B4 12 C5
      001200 12 D1 13 04 13 14 13   312 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



             28 13 3B
      00120A 13 48 13 52 13 6E      313 	.word err_overflow,err_read_only,err_not_program  
                                    314 
      001210 52 65 6A 65 63 74 65   315 err_mem_full: .asciz "Rejected, memory full\n" 
             64 2C 20 6D 65 6D 6F
             72 79 20 66 75 6C 6C
             0A 00
      001227 73 79 6E 74 61 78 20   316 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      001235 6D 61 74 68 20 6F 70   317 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      00124E 64 69 76 69 73 69 6F   318 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      00125D 69 6E 76 61 6C 69 64   319 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      001273 72 75 6E 20 74 69 6D   320 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001289 63 6F 6D 6D 61 6E 64   321 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0012A3 64 75 70 6C 69 63 61   322 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0012B4 46 69 6C 65 20 6E 6F   323 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0012C5 62 61 64 20 76 61 6C   324 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0012D1 46 69 6C 65 20 69 6E   325 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      001304 4E 6F 20 64 61 74 61   326 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      001314 4E 6F 20 70 72 6F 67   327 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      001328 46 69 6C 65 20 73 79   328 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      00133B 42 75 66 66 65 72 20   329 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      001348 6F 76 65 72 66 6C 6F   330 err_overflow: .asciz "overflow\n" 
             77 0A 00
      001352 63 6F 6E 73 74 61 6E   331 err_read_only: .asciz "constant can't be modified\n"
             74 20 63 61 6E 27 74
             20 62 65 20 6D 6F 64
             69 66 69 65 64 0A 00
      00136E 6E 6F 20 70 72 6F 67   332 err_not_program: .asciz "no program at this address\n"
             72 61 6D 20 61 74 20
             74 68 69 73 20 61 64
             64 72 65 73 73 0A 00
                                    333 
                                    334 ;-------------------------------------
      00138A 0A 72 75 6E 20 74 69   335 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      00139C 0A 63 6F 6D 70 69 6C   336 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      0013AD 6C 61 73 74 20 74 6F   337 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    338 
      0013BD                        339 syntax_error::
      0013BD A6 02            [ 1]  340 	ld a,#ERR_SYNTAX 
                                    341 
      0013BF                        342 tb_error::
      0013BF 72 0A 00 22 3F   [ 2]  343 	btjt flags,#FCOMP,1$
      0013C4 88               [ 1]  344 	push a 
      0013C5 AE 13 8A         [ 2]  345 	ldw x, #rt_msg 
      0013C8 CD 06 82         [ 4]  346 	call puts 
      0013CB 84               [ 1]  347 	pop a 
      0013CC AE 11 EA         [ 2]  348 	ldw x, #err_msg 
      0013CF 72 5F 00 0D      [ 1]  349 	clr acc16 
      0013D3 48               [ 1]  350 	sll a
      0013D4 72 59 00 0D      [ 1]  351 	rlc acc16  
      0013D8 C7 00 0E         [ 1]  352 	ld acc8, a 
      0013DB 72 BB 00 0D      [ 2]  353 	addw x,acc16 
      0013DF FE               [ 2]  354 	ldw x,(x)
      0013E0 CD 06 82         [ 4]  355 	call puts
      0013E3 CE 00 04         [ 2]  356 	ldw x,basicptr 
                           000000   357 .if DEBUG 
                                    358 ld a,count 
                                    359 clrw y 
                                    360 rlwa y  
                                    361 call hex_dump
                                    362 ldw x,basicptr
                                    363 .endif 
      0013E6 C6 00 01         [ 1]  364 	ld a,in 
      0013E9 CD 1D 19         [ 4]  365 	call prt_basic_line
      0013EC AE 13 AD         [ 2]  366 	ldw x,#tk_id 
      0013EF CD 06 82         [ 4]  367 	call puts 
      0013F2 C6 00 03         [ 1]  368 	ld a,in.saved 
      0013F5 5F               [ 1]  369 	clrw x 
      0013F6 97               [ 1]  370 	ld xl,a 
      0013F7 72 BB 00 04      [ 2]  371 	addw x,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0013FB F6               [ 1]  372 	ld a,(x)
      0013FC 5F               [ 1]  373 	clrw x 
      0013FD 97               [ 1]  374 	ld xl,a 
      0013FE CD 15 61         [ 4]  375 	call prt_i16
      001401 20 35            [ 2]  376 	jra 6$
      001403                        377 1$:	
      001403 88               [ 1]  378 	push a 
      001404 AE 13 9C         [ 2]  379 	ldw x,#comp_msg
      001407 CD 06 82         [ 4]  380 	call puts 
      00140A 84               [ 1]  381 	pop a 
      00140B AE 11 EA         [ 2]  382 	ldw x, #err_msg 
      00140E 72 5F 00 0D      [ 1]  383 	clr acc16 
      001412 48               [ 1]  384 	sll a
      001413 72 59 00 0D      [ 1]  385 	rlc acc16  
      001417 C7 00 0E         [ 1]  386 	ld acc8, a 
      00141A 72 BB 00 0D      [ 2]  387 	addw x,acc16 
      00141E FE               [ 2]  388 	ldw x,(x)
      00141F CD 06 82         [ 4]  389 	call puts
      001422 AE 16 68         [ 2]  390 	ldw x,#tib
      001425 CD 06 82         [ 4]  391 	call puts 
      001428 A6 0D            [ 1]  392 	ld a,#CR 
      00142A CD 06 25         [ 4]  393 	call putc
      00142D CE 00 00         [ 2]  394 	ldw x,in.w
      001430 CD 06 EF         [ 4]  395 	call spaces
      001433 A6 5E            [ 1]  396 	ld a,#'^
      001435 CD 06 25         [ 4]  397 	call putc 
      001438 AE 17 FF         [ 2]  398 6$: ldw x,#STACK_EMPTY 
      00143B 94               [ 1]  399     ldw sp,x
                                    400 
      00143C                        401 warm_start:
      00143C CD 11 AB         [ 4]  402 	call warm_init
                                    403 ;----------------------------
                                    404 ;   BASIC interpreter
                                    405 ;----------------------------
      00143F                        406 cmd_line: ; user interface 
      00143F A6 0D            [ 1]  407 	ld a,#CR 
      001441 CD 06 25         [ 4]  408 	call putc 
      001444 A6 3E            [ 1]  409 	ld a,#'> 
      001446 CD 06 25         [ 4]  410 	call putc
      001449 CD 07 87         [ 4]  411 	call readln
      00144C 72 5D 00 02      [ 1]  412 	tnz count 
      001450 27 ED            [ 1]  413 	jreq cmd_line
      001452 CD 0D D7         [ 4]  414 	call compile
                                    415 ;;;;;;;;;;;;;;;;;;;;;;	
                                    416 ;pushw y 
                                    417 ;ldw x,txtbgn  
                                    418 ;ldw y,txtend
                                    419 ;ldw acc16,x   
                                    420 ;subw y,acc16 
                                    421 ;call hex_dump
                                    422 ;popw y 
                                    423 ;;;;;;;;;;;;;;;;;;;;;;
                                    424 
                                    425 ; if text begin with a line number
                                    426 ; the compiler set count to zero    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                                    427 ; so code is not interpreted
      001455 72 5D 00 02      [ 1]  428 	tnz count 
      001459 27 E4            [ 1]  429 	jreq cmd_line
                                    430 	
                                    431 ; if direct command 
                                    432 ; it's ready to interpret 
                                    433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    434 ;; This is the interpreter loop
                                    435 ;; for each BASIC code line. 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      00145B                        437 interpreter: 
      00145B C6 00 01         [ 1]  438 	ld a,in 
      00145E C1 00 02         [ 1]  439 	cp a,count 
      001461 2B 20            [ 1]  440 	jrmi interp_loop
      001463                        441 next_line:
      001463 72 01 00 22 D7   [ 2]  442 	btjf flags, #FRUN, cmd_line
      001468 CE 00 04         [ 2]  443 	ldw x,basicptr
      00146B 72 BB 00 00      [ 2]  444 	addw x,in.w 
      00146F C3 00 1D         [ 2]  445 	cpw x,txtend 
      001472 2B 03            [ 1]  446 	jrmi 0$
      001474 CD 22 C8         [ 4]  447 	call cmd_end ; end program 
      001477 CF 00 04         [ 2]  448 0$:	ldw basicptr,x ; start of next line  
      00147A E6 02            [ 1]  449 	ld a,(2,x)
      00147C C7 00 02         [ 1]  450 	ld count,a 
      00147F 35 03 00 01      [ 1]  451 	mov in,#3 ; skip first 3 bytes of line 
      001483                        452 interp_loop:
      001483 CD 15 19         [ 4]  453 	call next_token
      001486 A1 00            [ 1]  454 	cp a,#TK_NONE 
      001488 27 D9            [ 1]  455 	jreq next_line 
      00148A A1 80            [ 1]  456 	cp a,#TK_CMD
      00148C 26 0C            [ 1]  457 	jrne 1$
      00148E                        458 	_get_code_addr
      00148E FE               [ 2]    1         ldw x,(x)
      00148F 72 5C 00 01      [ 1]    2         inc in 
      001493 72 5C 00 01      [ 1]    3         inc in 
      001497 FD               [ 4]  459 	call(x)
      001498 20 E9            [ 2]  460 	jra interp_loop 
      00149A                        461 1$:	 
      00149A A1 85            [ 1]  462 	cp a,#TK_VAR
      00149C 26 05            [ 1]  463 	jrne 2$
      00149E CD 1A 1F         [ 4]  464 	call let_var  
      0014A1 20 E0            [ 2]  465 	jra interp_loop 
      0014A3                        466 2$:	
      0014A3 A1 05            [ 1]  467 	cp a,#TK_ARRAY 
      0014A5 26 05            [ 1]  468 	jrne 3$
      0014A7 CD 1A 1A         [ 4]  469 	call let_array 
      0014AA 20 D7            [ 2]  470 	jra interp_loop
      0014AC                        471 3$:	
      0014AC A1 03            [ 1]  472 	cp a,#TK_LABEL
      0014AE 26 05            [ 1]  473 	jrne 4$
      0014B0 CD 14 BC         [ 4]  474 	call let_dvar  
      0014B3 20 CE            [ 2]  475 	jra interp_loop 
      0014B5                        476 4$: 
      0014B5 A1 09            [ 1]  477 	cp a,#TK_COLON 
      0014B7 27 CA            [ 1]  478 	jreq interp_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0014B9 CC 13 BD         [ 2]  479 5$:	jp syntax_error 
                                    480 
                                    481 
                                    482 ;----------------------
                                    483 ; when a label is met 
                                    484 ; at interp_loop
                                    485 ; it may be a variable 
                                    486 ; assignement to DIM 
                                    487 ; variable 
                                    488 ;----------------------
                           000001   489 	VAR_NAME=1 
                           000003   490 	REC_LEN=3
                           000004   491 	VSIZE=4 
      0014BC                        492 let_dvar:
      0014BC                        493 	_vars VSIZE 
      0014BC 52 04            [ 2]    1     sub sp,#VSIZE 
      0014BE 1F 01            [ 2]  494 	ldw (VAR_NAME,sp),x
      0014C0 0F 03            [ 1]  495 	clr (REC_LEN,sp) 
      0014C2 CD 15 32         [ 4]  496 	call skip_string 
      0014C5 CE 00 04         [ 2]  497 	ldw x,basicptr 
      0014C8 72 BB 00 00      [ 2]  498 	addw x,in.w 
      0014CC F6               [ 1]  499 	ld a,(x)
      0014CD A1 32            [ 1]  500 	cp a,#TK_EQUAL 
      0014CF 26 45            [ 1]  501 	jrne 9$ 
                                    502 ; dvar assignment 
      0014D1 72 5C 00 01      [ 1]  503 	inc in  
      0014D5 CD 19 4D         [ 4]  504 	call condition  
      0014D8 A1 84            [ 1]  505 	cp a,#TK_INTGR 
      0014DA 27 03            [ 1]  506 	jreq 1$ 
      0014DC CC 13 BD         [ 2]  507 0$:	jp syntax_error 
      0014DF                        508 1$: 
      0014DF 1E 01            [ 2]  509 	ldw x,(VAR_NAME,sp) ; pointer to var name 
      0014E1 CD 10 B9         [ 4]  510 	call strlen 
      0014E4 AB 05            [ 1]  511 	add a,#REC_XTRA_BYTES
      0014E6 6B 04            [ 1]  512 	ld (REC_LEN+1,sp),a 
      0014E8 A0 05            [ 1]  513 	sub a,#REC_XTRA_BYTES
      0014EA CD 1A 89         [ 4]  514 	call search_name 
      0014ED 5D               [ 2]  515 	tnzw x 
      0014EE 27 EC            [ 1]  516 	jreq 0$ 
      0014F0 F6               [ 1]  517 	ld a,(x)
      0014F1 2A 05            [ 1]  518 	jrpl 2$
      0014F3 A6 11            [ 1]  519 	ld a,#ERR_RD_ONLY 
      0014F5 CC 13 BF         [ 2]  520 	jp tb_error 
      0014F8                        521 2$:
      0014F8 72 FB 03         [ 2]  522 	addw x,(REC_LEN,sp)
      0014FB 1D 00 03         [ 2]  523 	subw x,#CELL_SIZE 
      0014FE CF 00 19         [ 2]  524 	ldw ptr16,x
      001501                        525 	_xpop 
      001501 90 F6            [ 1]    1     ld a,(y)
      001503 93               [ 1]    2     ldw x,y 
      001504 EE 01            [ 2]    3     ldw x,(1,x)
      001506 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00150A 72 C7 00 19      [ 4]  526 	ld [ptr16],a 
      00150E 72 5C 00 1A      [ 1]  527 	inc ptr8 
      001512 72 CF 00 19      [ 5]  528 	ldw [ptr16],x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      001516                        529 9$: _drop VSIZE 	
      001516 5B 04            [ 2]    1     addw sp,#VSIZE 
      001518 81               [ 4]  530 	ret 
                                    531 
                                    532 
                                    533 ;--------------------------
                                    534 ; extract next token from
                                    535 ; token list 
                                    536 ; basicptr -> base address 
                                    537 ; in  -> offset in list array 
                                    538 ; output:
                                    539 ;   A 		token attribute
                                    540 ;   X 		*token_value 
                                    541 ;----------------------------------------
      001519                        542 next_token::
                                    543 ;	clrw x 
      001519 C6 00 01         [ 1]  544 	ld a,in 
      00151C C7 00 03         [ 1]  545 	ld in.saved,a ; in case "_unget_token" needed 
                                    546 ; don't replace sub by "cp a,count" 
                                    547 ; if end of line must return with A=0   	
      00151F C0 00 02         [ 1]  548 	sub a,count 
      001522 27 0D            [ 1]  549 	jreq 9$ ; end of line 
      001524                        550 0$: 
      001524 CE 00 04         [ 2]  551 	ldw x,basicptr 
      001527 72 BB 00 00      [ 2]  552 	addw x,in.w 
      00152B F6               [ 1]  553 	ld a,(x)
      00152C 5C               [ 1]  554 	incw x
      00152D 72 5C 00 01      [ 1]  555 	inc in   
      001531 81               [ 4]  556 9$: ret 
                                    557 
                                    558 ;-------------------------
                                    559 ;  skip .asciz in BASIC line 
                                    560 ;  name 
                                    561 ;  input:
                                    562 ;     x		* string 
                                    563 ;  output:
                                    564 ;     none 
                                    565 ;-------------------------
      001532                        566 skip_string:
      001532 F6               [ 1]  567 	ld a,(x)
      001533 27 03            [ 1]  568 	jreq 1$
      001535 5C               [ 1]  569 	incw x 
      001536 20 FA            [ 2]  570 	jra skip_string 
      001538 5C               [ 1]  571 1$: incw x 	
      001539 72 B0 00 04      [ 2]  572 	subw x,basicptr 
      00153D CF 00 00         [ 2]  573 	ldw in.w,x 
      001540 81               [ 4]  574 	ret 
                                    575 
                                    576 ;---------------------
                                    577 ; extract 16 bits  
                                    578 ; address from BASIC
                                    579 ; code 
                                    580 ; input:
                                    581 ;    X    *address
                                    582 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                    583 ;    X    address 
                                    584 ;-------------------- 
      001541                        585 get_addr:
      001541 FE               [ 2]  586 	ldw x,(x)
      001542 72 5C 00 01      [ 1]  587 	inc in 
      001546 72 5C 00 01      [ 1]  588 	inc in 
      00154A 81               [ 4]  589 	ret 
                                    590 
                                    591 ;--------------------
                                    592 ; extract int24_t  
                                    593 ; value from BASIC 
                                    594 ; code 
                                    595 ; input:
                                    596 ;    X   *integer 
                                    597 ; output:
                                    598 ;    A:X   int24  
                                    599 ;--------------------
      00154B                        600 get_int24:
      00154B F6               [ 1]  601 	ld a,(x)
      00154C EE 01            [ 2]  602 	ldw x,(1,x)
                                    603 ; skip 3 bytes 
      00154E 72 5C 00 01      [ 1]  604 	inc in 
      001552 72 5C 00 01      [ 1]  605 	inc in 
      001556 72 5C 00 01      [ 1]  606 	inc in 
      00155A 81               [ 4]  607 	ret 
                                    608 
                                    609 ;-------------------------
                                    610 ; get character from 
                                    611 ; BASIC code 
                                    612 ; input:
                                    613 ;    X   *char 
                                    614 ; output:
                                    615 ;    A    char 
                                    616 ;-------------------------
      00155B                        617 get_char:
      00155B F6               [ 1]  618 	ld a,(x)
      00155C 72 5C 00 01      [ 1]  619 	inc in  
      001560 81               [ 4]  620     ret 
                                    621 
                                    622 ;-----------------------------------
                                    623 ; print a 16 bit integer 
                                    624 ; using variable 'base' as conversion
                                    625 ; format.
                                    626 ; input:
                                    627 ;    X       integer to print 
                                    628 ;   'base'    conversion base 
                                    629 ; output:
                                    630 ;   terminal  
                                    631 ;-----------------------------------
      001561                        632 prt_i16:
      001561 72 5F 00 0C      [ 1]  633 	clr acc24 
      001565 CF 00 0D         [ 2]  634 	ldw acc16,x 
      001568 A6 10            [ 1]  635 	ld a,#16
      00156A C1 00 0A         [ 1]  636 	cp a,base
      00156D 27 09            [ 1]  637 	jreq prt_acc24  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      00156F 72 0F 00 0D 04   [ 2]  638 	btjf acc16,#7,prt_acc24
      001574 72 53 00 0C      [ 1]  639 	cpl acc24 ; sign extend 
                                    640 	
                                    641 ;------------------------------------
                                    642 ; print integer in acc24 
                                    643 ; input:
                                    644 ;	acc24 		integer to print 
                                    645 ;	'base' 		numerical base for conversion 
                                    646 ;    A 			signed||unsigned conversion
                                    647 ;  output:
                                    648 ;    A          string length
                                    649 ;------------------------------------
      001578                        650 prt_acc24:
      001578 A6 FF            [ 1]  651 	ld a,#255  ; signed conversion  
      00157A CD 15 96         [ 4]  652     call itoa  ; conversion entier en  .asciz
      00157D 88               [ 1]  653 	push a 
      00157E CD 06 82         [ 4]  654 	call puts
      001581 84               [ 1]  655 	pop a 
      001582 81               [ 4]  656     ret	
                                    657 
                                    658 ;---------------------------------------
                                    659 ;  print value at xstack top 
                                    660 ;---------------------------------------
      001583                        661 print_top: 
      001583                        662 	_xpop 
      001583 90 F6            [ 1]    1     ld a,(y)
      001585 93               [ 1]    2     ldw x,y 
      001586 EE 01            [ 2]    3     ldw x,(1,x)
      001588 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00158C C7 00 0C         [ 1]  663 	ld acc24,a 
      00158F CF 00 0D         [ 2]  664 	ldw acc16,x 
      001592 CD 15 78         [ 4]  665 	call prt_acc24 
      001595 81               [ 4]  666 	ret 
                                    667 
                                    668 ;------------------------------------
                                    669 ; convert integer in acc24 to string
                                    670 ; input:
                                    671 ;   'base'	conversion base 
                                    672 ;	acc24	integer to convert
                                    673 ;   A       0=unsigned, else signed 
                                    674 ; output:
                                    675 ;   X  		pointer to first char of string
                                    676 ;   A       string length
                                    677 ;------------------------------------
                           000001   678 	SIGN=1  ; integer sign 
                           000002   679 	LEN=2 
                           000003   680 	PSTR=3
                           000004   681 	VSIZE=4 ;locals size
      001596                        682 itoa::
      001596                        683 	_vars VSIZE
      001596 52 04            [ 2]    1     sub sp,#VSIZE 
      001598 0F 02            [ 1]  684 	clr (LEN,sp) ; string length  
      00159A 0F 01            [ 1]  685 	clr (SIGN,sp)    ; sign
      00159C 4D               [ 1]  686 	tnz A
      00159D 27 11            [ 1]  687 	jreq 1$ ; unsigned conversion  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      00159F C6 00 0A         [ 1]  688 	ld a,base 
      0015A2 A1 0A            [ 1]  689 	cp a,#10
      0015A4 26 0A            [ 1]  690 	jrne 1$
                                    691 	; base 10 string display with negative sign if bit 23==1
      0015A6 72 0F 00 0C 05   [ 2]  692 	btjf acc24,#7,1$
      0015AB 03 01            [ 1]  693 	cpl (SIGN,sp)
      0015AD CD 02 1D         [ 4]  694 	call neg_acc24
      0015B0                        695 1$:
                                    696 ; initialize string pointer 
      0015B0 AE 16 68         [ 2]  697 	ldw x,#tib 
      0015B3 1C 00 50         [ 2]  698 	addw x,#TIB_SIZE
      0015B6 5A               [ 2]  699 	decw x 
      0015B7 7F               [ 1]  700 	clr (x)
      0015B8                        701 itoa_loop:
      0015B8 C6 00 0A         [ 1]  702     ld a,base
      0015BB CD 02 E9         [ 4]  703     call divu24_8 ; acc24/A 
      0015BE AB 30            [ 1]  704     add a,#'0  ; remainder of division
      0015C0 A1 3A            [ 1]  705     cp a,#'9+1
      0015C2 2B 02            [ 1]  706     jrmi 2$
      0015C4 AB 07            [ 1]  707     add a,#7 
      0015C6                        708 2$:	
      0015C6 5A               [ 2]  709 	decw x
      0015C7 F7               [ 1]  710     ld (x),a
      0015C8 0C 02            [ 1]  711 	inc (LEN,sp)
                                    712 	; if acc24==0 conversion done
      0015CA C6 00 0C         [ 1]  713 	ld a,acc24
      0015CD CA 00 0D         [ 1]  714 	or a,acc16
      0015D0 CA 00 0E         [ 1]  715 	or a,acc8
      0015D3 26 E3            [ 1]  716     jrne itoa_loop
                                    717 	;conversion done, next add '$' or '-' as required
      0015D5 C6 00 0A         [ 1]  718 	ld a,base 
      0015D8 A1 10            [ 1]  719 	cp a,#16
      0015DA 27 08            [ 1]  720 	jreq 8$
      0015DC 7B 01            [ 1]  721 	ld a,(SIGN,sp)
      0015DE 27 0A            [ 1]  722     jreq 10$
      0015E0 A6 2D            [ 1]  723     ld a,#'-
      0015E2 20 02            [ 2]  724 	jra 9$ 
      0015E4                        725 8$:	
      0015E4 A6 24            [ 1]  726 	ld a,#'$ 
      0015E6 5A               [ 2]  727 9$: decw x
      0015E7 F7               [ 1]  728     ld (x),a
      0015E8 0C 02            [ 1]  729 	inc (LEN,sp)
      0015EA                        730 10$:
                                    731 ; add a space
      0015EA 5A               [ 2]  732 	decw x 
      0015EB A6 20            [ 1]  733 	ld a,#SPACE 
      0015ED F7               [ 1]  734 	ld (x),a
      0015EE 7B 02            [ 1]  735 	ld a,(LEN,sp)
      0015F0 4C               [ 1]  736 	inc a 
      0015F1                        737 	_drop VSIZE
      0015F1 5B 04            [ 2]    1     addw sp,#VSIZE 
      0015F3 81               [ 4]  738 	ret
                                    739 
                                    740 ;------------------------------------
                                    741 ; convert alpha to uppercase
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                    742 ; input:
                                    743 ;    a  character to convert
                                    744 ; output:
                                    745 ;    a  uppercase character
                                    746 ;------------------------------------
      0015F4                        747 to_upper::
      0015F4 A1 61            [ 1]  748 	cp a,#'a
      0015F6 2A 01            [ 1]  749 	jrpl 1$
      0015F8 81               [ 4]  750 0$:	ret
      0015F9 A1 7A            [ 1]  751 1$: cp a,#'z	
      0015FB 22 FB            [ 1]  752 	jrugt 0$
      0015FD A0 20            [ 1]  753 	sub a,#32
      0015FF 81               [ 4]  754 	ret
                                    755 	
                                    756 ;------------------------------------
                                    757 ; convert pad content in integer
                                    758 ; input:
                                    759 ;    x		* .asciz to convert
                                    760 ; output:
                                    761 ;    A:X        int24_t 
                                    762 ;    acc24      int24_t
                                    763 ;------------------------------------
                                    764 	; local variables
                           000001   765 	SIGN=1 ; 1 byte, 
                           000002   766 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   767 	TEMP=3 ; 1 byte, temporary storage
                           000004   768 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   769 	VSIZE=5 ; 5 bytes reserved for local storage
      001600                        770 atoi24::
      001600                        771 	_vars VSIZE
      001600 52 05            [ 2]    1     sub sp,#VSIZE 
      001602 1F 04            [ 2]  772 	ldw (XTEMP,sp),x 
                                    773 ; conversion made on xstack 
      001604 4F               [ 1]  774 	clr a 
      001605 5F               [ 1]  775 	clrw x 
      001606                        776 	_xpush 
      001606 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00160A 90 F7            [ 1]    2     ld (y),a 
      00160C 90 EF 01         [ 2]    3     ldw (1,y),x 
      00160F 0F 01            [ 1]  777 	clr (SIGN,sp)
      001611 A6 0A            [ 1]  778 	ld a,#10
      001613 6B 02            [ 1]  779 	ld (BASE,sp),a ; default base decimal
      001615 1E 04            [ 2]  780 	ldw x,(XTEMP,sp)
      001617 F6               [ 1]  781 	ld a,(x)
      001618 27 4E            [ 1]  782 	jreq 9$  ; completed if 0
      00161A A1 2D            [ 1]  783 	cp a,#'-
      00161C 26 04            [ 1]  784 	jrne 1$
      00161E 03 01            [ 1]  785 	cpl (SIGN,sp)
      001620 20 08            [ 2]  786 	jra 2$
      001622 A1 24            [ 1]  787 1$: cp a,#'$
      001624 26 08            [ 1]  788 	jrne 3$
      001626 A6 10            [ 1]  789 	ld a,#16
      001628 6B 02            [ 1]  790 	ld (BASE,sp),a
      00162A 5C               [ 1]  791 2$:	incw x
      00162B 1F 04            [ 2]  792 	ldw (XTEMP,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      00162D F6               [ 1]  793 	ld a,(x)
      00162E                        794 3$:	; char to digit 
      00162E A1 61            [ 1]  795 	cp a,#'a
      001630 2B 02            [ 1]  796 	jrmi 4$
      001632 A0 20            [ 1]  797 	sub a,#32
      001634 A1 30            [ 1]  798 4$:	cp a,#'0
      001636 2B 30            [ 1]  799 	jrmi 9$
      001638 A0 30            [ 1]  800 	sub a,#'0
      00163A A1 0A            [ 1]  801 	cp a,#10
      00163C 2B 06            [ 1]  802 	jrmi 5$
      00163E A0 07            [ 1]  803 	sub a,#7
      001640 11 02            [ 1]  804 	cp a,(BASE,sp)
      001642 2A 24            [ 1]  805 	jrpl 9$
      001644 6B 03            [ 1]  806 5$:	ld (TEMP,sp),a
      001646 7B 02            [ 1]  807 	ld a,(BASE,sp)
      001648 CD 02 3A         [ 4]  808 	call mulu24_8
      00164B                        809 	_xpush 
      00164B 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00164F 90 F7            [ 1]    2     ld (y),a 
      001651 90 EF 01         [ 2]    3     ldw (1,y),x 
      001654 5F               [ 1]  810 	clrw x 
      001655 7B 03            [ 1]  811 	ld a,(TEMP,sp)
      001657 02               [ 1]  812 	rlwa x 
      001658                        813 	_xpush 
      001658 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00165C 90 F7            [ 1]    2     ld (y),a 
      00165E 90 EF 01         [ 2]    3     ldw (1,y),x 
      001661 CD 01 7E         [ 4]  814 	call add24 
      001664 1E 04            [ 2]  815 	ldw x,(XTEMP,sp)
      001666 20 C2            [ 2]  816 	jra 2$
      001668 0D 01            [ 1]  817 9$:	tnz (SIGN,sp)
      00166A 27 03            [ 1]  818     jreq atoi_exit
      00166C CD 02 03         [ 4]  819     call neg24
      00166F                        820 atoi_exit:
      00166F                        821 	_xpop 
      00166F 90 F6            [ 1]    1     ld a,(y)
      001671 93               [ 1]    2     ldw x,y 
      001672 EE 01            [ 2]    3     ldw x,(1,x)
      001674 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001678 C7 00 0C         [ 1]  822 	ld acc24,a 
      00167B CF 00 0D         [ 2]  823 	ldw acc16,x  
      00167E                        824 	_drop VSIZE
      00167E 5B 05            [ 2]    1     addw sp,#VSIZE 
      001680 81               [ 4]  825 	ret
                                    826 
                                    827 
                                    828 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    829 ;;   TINY BASIC  operators,
                                    830 ;;   commands and functions 
                                    831 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    832 
                                    833 ;---------------------------------
                                    834 ; dictionary search 
                                    835 ; input:
                                    836 ;	X 		dictionary entry point, name field  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    837 ;   y		.asciz name to search 
                                    838 ; output:
                                    839 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    840 ;  X		routine address|TK_OP 
                                    841 ;---------------------------------
                           000001   842 	NLEN=1 ; cmd length 
                           000002   843 	XSAVE=2
                           000004   844 	YSAVE=4
                           000005   845 	VSIZE=5 
      001681                        846 search_dict::
      001681                        847 	_vars VSIZE 
      001681 52 05            [ 2]    1     sub sp,#VSIZE 
      001683 17 04            [ 2]  848 	ldw (YSAVE,sp),y 
      001685                        849 search_next:
      001685 1F 02            [ 2]  850 	ldw (XSAVE,sp),x 
                                    851 ; get name length in dictionary	
      001687 F6               [ 1]  852 	ld a,(x)
      001688 A4 0F            [ 1]  853 	and a,#0xf 
      00168A 6B 01            [ 1]  854 	ld (NLEN,sp),a  
      00168C 16 04            [ 2]  855 	ldw y,(YSAVE,sp) ; name pointer 
      00168E 5C               [ 1]  856 	incw x 
      00168F                        857 cp_loop:
      00168F 90 F6            [ 1]  858 	ld a,(y)
      001691 27 1B            [ 1]  859 	jreq str_match 
      001693 0D 01            [ 1]  860 	tnz (NLEN,sp)
      001695 27 0A            [ 1]  861 	jreq no_match  
      001697 F1               [ 1]  862 	cp a,(x)
      001698 26 07            [ 1]  863 	jrne no_match 
      00169A 90 5C            [ 1]  864 	incw y 
      00169C 5C               [ 1]  865 	incw x
      00169D 0A 01            [ 1]  866 	dec (NLEN,sp)
      00169F 20 EE            [ 2]  867 	jra cp_loop 
      0016A1                        868 no_match:
      0016A1 1E 02            [ 2]  869 	ldw x,(XSAVE,sp) 
      0016A3 1D 00 02         [ 2]  870 	subw x,#2 ; move X to link field
      0016A6 4B 00            [ 1]  871 	push #TK_NONE 
      0016A8 FE               [ 2]  872 	ldw x,(x) ; next word link 
      0016A9 84               [ 1]  873 	pop a ; TK_NONE 
      0016AA 27 1D            [ 1]  874 	jreq search_exit  ; not found  
                                    875 ;try next 
      0016AC 20 D7            [ 2]  876 	jra search_next
      0016AE                        877 str_match:
      0016AE 1E 02            [ 2]  878 	ldw x,(XSAVE,sp)
      0016B0 F6               [ 1]  879 	ld a,(X)
      0016B1 6B 01            [ 1]  880 	ld (NLEN,sp),a ; needed to test keyword type  
      0016B3 A4 0F            [ 1]  881 	and a,#NLEN_MASK 
                                    882 ; move x to procedure address field 	
      0016B5 4C               [ 1]  883 	inc a 
      0016B6 C7 00 0E         [ 1]  884 	ld acc8,a 
      0016B9 72 5F 00 0D      [ 1]  885 	clr acc16 
      0016BD 72 BB 00 0D      [ 2]  886 	addw x,acc16 
      0016C1 FE               [ 2]  887 	ldw x,(x) ; routine address  
                                    888 ;determine keyword type bits 7:4 
      0016C2 7B 01            [ 1]  889 	ld a,(NLEN,sp)
      0016C4 A4 F0            [ 1]  890 	and a,#KW_TYPE_MASK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      0016C6 4E               [ 1]  891 	swap a 
      0016C7 AB 80            [ 1]  892 	add a,#128
      0016C9                        893 search_exit: 
      0016C9                        894 	_drop VSIZE 
      0016C9 5B 05            [ 2]    1     addw sp,#VSIZE 
      0016CB 81               [ 4]  895 	ret 
                                    896 
                                    897 ;--------------------------------
                                    898 ;  called by command that should 
                                    899 ;  be invoked only from command 
                                    900 ;  line.
                                    901 ;  Display an error if 
                                    902 ;  invoked from program.
                                    903 ;---------------------------------
      0016CC                        904 cmd_line_only:
      0016CC 72 01 00 22 05   [ 2]  905 	btjf flags,#FRUN,0$
      0016D1 A6 07            [ 1]  906 	ld a,#ERR_CMD_ONLY
      0016D3 CC 13 BF         [ 2]  907 	jp tb_error 
      0016D6 81               [ 4]  908 0$: ret 
                                    909 
                                    910 ;--------------------------------
                                    911 ; called by command/function that 
                                    912 ; should be invoked only at run time
                                    913 ; Display an error if invoked from 
                                    914 ; command line. 
                                    915 ;---------------------------------
      0016D7                        916 runtime_only:
      0016D7 72 00 00 22 05   [ 2]  917 	btjt flags,#FRUN,0$ 
      0016DC A6 06            [ 1]  918 	ld a,#ERR_RUN_ONLY
      0016DE CC 13 BF         [ 2]  919 	jp tb_error 
      0016E1 81               [ 4]  920 0$:	ret 
                                    921 
                                    922 ;---------------------
                                    923 ; check if next token
                                    924 ;  is of expected type 
                                    925 ; input:
                                    926 ;   A 		 expected token attribute
                                    927 ;  ouput:
                                    928 ;   none     if fail call syntax_error 
                                    929 ;--------------------
      0016E2                        930 expect:
      0016E2 88               [ 1]  931 	push a 
      0016E3 CD 15 19         [ 4]  932 	call next_token 
      0016E6 11 01            [ 1]  933 	cp a,(1,sp)
      0016E8 27 03            [ 1]  934 	jreq 1$
      0016EA CC 13 BD         [ 2]  935 	jp syntax_error
      0016ED 84               [ 1]  936 1$: pop a 
      0016EE 81               [ 4]  937 	ret 
                                    938 
                                    939 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    940 ; parse arguments list 
                                    941 ; between ()
                                    942 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016EF                        943 func_args:
      0016EF A6 06            [ 1]  944 	ld a,#TK_LPAREN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      0016F1 CD 16 E2         [ 4]  945 	call expect 
                                    946 ; expected to continue in arg_list 
                                    947 ; caller must check for TK_RPAREN 
                                    948 
                                    949 ;-------------------------------
                                    950 ; parse embedded BASIC routines 
                                    951 ; arguments list.
                                    952 ; arg_list::=  expr[','expr]*
                                    953 ; all arguments are of int24_t type
                                    954 ; and pushed on stack 
                                    955 ; input:
                                    956 ;   none
                                    957 ; output:
                                    958 ;   xstack{n}   arguments pushed on xstack
                                    959 ;   A 	number of arguments pushed on xstack  
                                    960 ;--------------------------------
      0016F4                        961 arg_list:
      0016F4 4B 00            [ 1]  962 	push #0
      0016F6 CD 19 4D         [ 4]  963 1$:	call condition 
      0016F9 4D               [ 1]  964 	tnz a 
      0016FA 27 12            [ 1]  965 	jreq 7$  
      0016FC 0C 01            [ 1]  966 	inc (1,sp)
      0016FE CD 15 19         [ 4]  967 	call next_token 
      001701 A1 08            [ 1]  968 	cp a,#TK_COMMA 
      001703 27 F1            [ 1]  969 	jreq 1$ 
      001705 A1 07            [ 1]  970 	cp a,#TK_RPAREN
      001707 27 05            [ 1]  971 	jreq 7$
      001709                        972 	_unget_token 
      001709 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      00170E 84               [ 1]  973 7$:	pop a  
      00170F 81               [ 4]  974 	ret 
                                    975 
                                    976 ;--------------------------------
                                    977 ;   BASIC commnands 
                                    978 ;--------------------------------
                                    979 
                                    980 ;--------------------------------
                                    981 ;  arithmetic and relational 
                                    982 ;  routines
                                    983 ;  operators precedence
                                    984 ;  highest to lowest
                                    985 ;  operators on same row have 
                                    986 ;  same precedence and are executed
                                    987 ;  from left to right.
                                    988 ;	'*','/','%'
                                    989 ;   '-','+'
                                    990 ;   '=','>','<','>=','<=','<>','><'
                                    991 ;   '<>' and '><' are equivalent for not equal.
                                    992 ;--------------------------------
                                    993 
                                    994 ;---------------------
                                    995 ; return array element
                                    996 ; address from @(expr)
                                    997 ; input:
                                    998 ;   A 		TK_ARRAY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                    999 ; output:
                                   1000 ;	X 		element address 
                                   1001 ;----------------------
      001710                       1002 get_array_element:
      001710 CD 16 EF         [ 4] 1003 	call func_args 
      001713 A1 01            [ 1] 1004 	cp a,#1
      001715 27 03            [ 1] 1005 	jreq 1$
      001717 CC 13 BD         [ 2] 1006 	jp syntax_error
      00171A                       1007 1$: _xpop 
      00171A 90 F6            [ 1]    1     ld a,(y)
      00171C 93               [ 1]    2     ldw x,y 
      00171D EE 01            [ 2]    3     ldw x,(1,x)
      00171F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   1008     ; ignore A, index < 65536 in any case 
                                   1009 	; check for bounds 
      001723 C3 00 20         [ 2] 1010 	cpw x,array_size 
      001726 23 05            [ 2] 1011 	jrule 3$
                                   1012 ; bounds {1..array_size}	
      001728 A6 0A            [ 1] 1013 2$: ld a,#ERR_BAD_VALUE 
      00172A CC 13 BF         [ 2] 1014 	jp tb_error 
      00172D 5D               [ 2] 1015 3$: tnzw  x
      00172E 27 F8            [ 1] 1016 	jreq 2$ 
      001730 A6 03            [ 1] 1017 	ld a,#CELL_SIZE  
      001732 42               [ 4] 1018 	mul x,a 
      001733 CF 00 0D         [ 2] 1019 	ldw acc16,x   
      001736 AE 16 68         [ 2] 1020 	ldw x,#tib ; array is below tib 
      001739 72 B0 00 0D      [ 2] 1021 	subw x,acc16 
      00173D 81               [ 4] 1022 	ret 
                                   1023 
                                   1024 
                                   1025 ;***********************************
                                   1026 ;   expression parse,execute 
                                   1027 ;***********************************
                                   1028 ;-----------------------------------
                                   1029 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1030 ;			 integer | function |
                                   1031 ;			 '('relation')' 
                                   1032 ; output:
                                   1033 ;   A       token attribute 
                                   1034 ;   xstack  value  
                                   1035 ; ---------------------------------
                           000001  1036 	NEG=1
                           000001  1037 	VSIZE=1
      00173E                       1038 factor:
      00173E                       1039 	_vars VSIZE 
      00173E 52 01            [ 2]    1     sub sp,#VSIZE 
      001740 0F 01            [ 1] 1040 	clr (NEG,sp)
      001742 CD 15 19         [ 4] 1041 	call next_token
      001745 4D               [ 1] 1042 	tnz a 
      001746 26 03            [ 1] 1043 	jrne 1$ 
      001748 CC 17 EE         [ 2] 1044 	jp 22$ 
      00174B A1 10            [ 1] 1045 1$:	cp a,#TK_PLUS 
      00174D 27 06            [ 1] 1046 	jreq 2$
      00174F A1 11            [ 1] 1047 	cp a,#TK_MINUS 
      001751 26 05            [ 1] 1048 	jrne 4$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      001753 03 01            [ 1] 1049 	cpl (NEG,sp)
      001755                       1050 2$:	
      001755 CD 15 19         [ 4] 1051 	call next_token
      001758                       1052 4$:
      001758 4D               [ 1] 1053 	tnz a 
      001759 26 03            [ 1] 1054 	jrne 41$ 
      00175B CC 13 BD         [ 2] 1055 	jp syntax_error  
      00175E                       1056 41$:	
      00175E A1 81            [ 1] 1057 	cp a,#TK_IFUNC 
      001760 26 0C            [ 1] 1058 	jrne 5$ 
      001762                       1059 	_get_code_addr 
      001762 FE               [ 2]    1         ldw x,(x)
      001763 72 5C 00 01      [ 1]    2         inc in 
      001767 72 5C 00 01      [ 1]    3         inc in 
      00176B FD               [ 4] 1060 	call (x); result in A:X  
      00176C 20 6E            [ 2] 1061 	jra 18$ 
      00176E                       1062 5$:
      00176E A1 84            [ 1] 1063 	cp a,#TK_INTGR
      001770 26 05            [ 1] 1064 	jrne 6$
      001772 CD 15 4B         [ 4] 1065 	call get_int24 ; A:X
      001775 20 65            [ 2] 1066 	jra 18$
      001777                       1067 6$:
      001777 A1 05            [ 1] 1068 	cp a,#TK_ARRAY
      001779 26 05            [ 1] 1069 	jrne 7$
      00177B CD 17 10         [ 4] 1070 	call get_array_element
      00177E 20 07            [ 2] 1071     jra 71$
      001780                       1072 7$:
      001780 A1 85            [ 1] 1073 	cp a,#TK_VAR 
      001782 26 08            [ 1] 1074 	jrne 8$
      001784 CD 15 41         [ 4] 1075 	call get_addr 
      001787                       1076 71$: ; put value in A:X
      001787 F6               [ 1] 1077 	ld a,(x)
      001788 EE 01            [ 2] 1078 	ldw x,(1,x)
      00178A 20 50            [ 2] 1079 	jra 18$
      00178C                       1080 8$:
      00178C A1 03            [ 1] 1081 	cp a,#TK_LABEL 
      00178E 26 1B            [ 1] 1082 	jrne 9$
      001790 90 89            [ 2] 1083 	pushw y  
      001792 89               [ 2] 1084 	pushw x 
      001793 CD 15 32         [ 4] 1085 	call skip_string
      001796 85               [ 2] 1086 	popw x  
      001797 CD 10 B9         [ 4] 1087 	call strlen 
      00179A CD 1A 89         [ 4] 1088 	call search_name
      00179D 5D               [ 2] 1089 	tnzw x 
      00179E 26 04            [ 1] 1090 	jrne 82$ 
      0017A0 90 85            [ 2] 1091 	popw y 
      0017A2 20 30            [ 2] 1092 	jra 16$
      0017A4                       1093 82$:
      0017A4 90 85            [ 2] 1094 	popw y   
      0017A6 CD 1A 4F         [ 4] 1095 	call get_value ; in A:X 
      0017A9 20 31            [ 2] 1096 	jra 18$
      0017AB                       1097 9$: 
      0017AB A1 82            [ 1] 1098 	cp a,#TK_CFUNC 
      0017AD 26 0E            [ 1] 1099 	jrne 12$
      0017AF                       1100 	_get_code_addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0017AF FE               [ 2]    1         ldw x,(x)
      0017B0 72 5C 00 01      [ 1]    2         inc in 
      0017B4 72 5C 00 01      [ 1]    3         inc in 
      0017B8 FD               [ 4] 1101 	call(x)
      0017B9 5F               [ 1] 1102 	clrw x 
      0017BA 02               [ 1] 1103 	rlwa x  ; char>int24 in A:X 
      0017BB 20 1F            [ 2] 1104 	jra 18$ 	 
      0017BD                       1105 12$:			
      0017BD A1 06            [ 1] 1106 	cp a,#TK_LPAREN
      0017BF 26 13            [ 1] 1107 	jrne 16$
      0017C1 CD 18 34         [ 4] 1108 	call expression
      0017C4 A6 07            [ 1] 1109 	ld a,#TK_RPAREN 
      0017C6 CD 16 E2         [ 4] 1110 	call expect
      0017C9                       1111 	_xpop 
      0017C9 90 F6            [ 1]    1     ld a,(y)
      0017CB 93               [ 1]    2     ldw x,y 
      0017CC EE 01            [ 2]    3     ldw x,(1,x)
      0017CE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0017D2 20 08            [ 2] 1112 	jra 18$	
      0017D4                       1113 16$:
      0017D4                       1114 	_unget_token 
      0017D4 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0017D9 4F               [ 1] 1115 	clr a 
      0017DA 20 12            [ 2] 1116 	jra 22$ 
      0017DC                       1117 18$: 
      0017DC 0D 01            [ 1] 1118 	tnz (NEG,sp)
      0017DE 27 03            [ 1] 1119 	jreq 20$
      0017E0 CD 02 15         [ 4] 1120 	call neg_ax   
      0017E3                       1121 20$:
      0017E3                       1122 	_xpush 
      0017E3 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0017E7 90 F7            [ 1]    2     ld (y),a 
      0017E9 90 EF 01         [ 2]    3     ldw (1,y),x 
      0017EC A6 84            [ 1] 1123 	ld a,#TK_INTGR
      0017EE                       1124 22$:
      0017EE                       1125 	_drop VSIZE
      0017EE 5B 01            [ 2]    1     addw sp,#VSIZE 
      0017F0 81               [ 4] 1126 	ret
                                   1127 
                                   1128 
                                   1129 ;-----------------------------------
                                   1130 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1131 ; output:
                                   1132 ;   A    	token attribute 
                                   1133 ;	xstack		value 
                                   1134 ;-----------------------------------
                           000001  1135 	MULOP=1
                           000001  1136 	VSIZE=1
      0017F1                       1137 term:
      0017F1                       1138 	_vars VSIZE
      0017F1 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1139 ; first factor 	
      0017F3 CD 17 3E         [ 4] 1140 	call factor
      0017F6 4D               [ 1] 1141 	tnz a 
      0017F7 27 38            [ 1] 1142 	jreq term_exit  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      0017F9                       1143 term01:	 ; check for  operator '*'|'/'|'%' 
      0017F9 CD 15 19         [ 4] 1144 	call next_token
      0017FC 6B 01            [ 1] 1145 	ld (MULOP,sp),a
      0017FE A4 30            [ 1] 1146 	and a,#TK_GRP_MASK
      001800 A1 20            [ 1] 1147 	cp a,#TK_GRP_MULT
      001802 27 09            [ 1] 1148 	jreq 1$
      001804 A6 84            [ 1] 1149 	ld a,#TK_INTGR
      001806                       1150 	_unget_token 
      001806 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      00180B 20 24            [ 2] 1151 	jra term_exit 
      00180D                       1152 1$:	; got *|/|%
                                   1153 ;second factor
      00180D CD 17 3E         [ 4] 1154 	call factor
      001810 4D               [ 1] 1155 	tnz a 
      001811 26 03            [ 1] 1156 	jrne 2$ 
      001813 CC 13 BD         [ 2] 1157 	jp syntax_error 
      001816                       1158 2$: ; select operation 	
      001816 7B 01            [ 1] 1159 	ld a,(MULOP,sp) 
      001818 A1 20            [ 1] 1160 	cp a,#TK_MULT 
      00181A 26 05            [ 1] 1161 	jrne 3$
                                   1162 ; '*' operator
      00181C CD 02 79         [ 4] 1163 	call mul24 
      00181F 20 D8            [ 2] 1164 	jra term01
      001821 A1 21            [ 1] 1165 3$: cp a,#TK_DIV 
      001823 26 05            [ 1] 1166 	jrne 4$ 
                                   1167 ; '/' operator	
      001825 CD 03 07         [ 4] 1168 	call div24 
      001828 20 CF            [ 2] 1169 	jra term01 
      00182A                       1170 4$: ; '%' operator
      00182A CD 03 A1         [ 4] 1171 	call mod24
      00182D 20 CA            [ 2] 1172 	jra term01 
      00182F                       1173 9$: 
      00182F A6 84            [ 1] 1174 	ld a,#TK_INTGR
      001831                       1175 term_exit:
      001831                       1176 	_drop VSIZE 
      001831 5B 01            [ 2]    1     addw sp,#VSIZE 
      001833 81               [ 4] 1177 	ret 
                                   1178 
                                   1179 ;-------------------------------
                                   1180 ;  expr ::= term [['+'|'-'] term]*
                                   1181 ;  result range {-32768..32767}
                                   1182 ;  output:
                                   1183 ;   A    token attribute 
                                   1184 ;   xstack	 result    
                                   1185 ;-------------------------------
                           000001  1186 	OP=1 
                           000001  1187 	VSIZE=1 
      001834                       1188 expression:
      001834                       1189 	_vars VSIZE 
      001834 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1190 ; first term 	
      001836 CD 17 F1         [ 4] 1191 	call term
      001839 4D               [ 1] 1192 	tnz a 
      00183A 27 2D            [ 1] 1193 	jreq 9$
      00183C                       1194 1$:	; operator '+'|'-'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      00183C CD 15 19         [ 4] 1195 	call next_token
      00183F 6B 01            [ 1] 1196 	ld (OP,sp),a 
      001841 A4 30            [ 1] 1197 	and a,#TK_GRP_MASK
      001843 A1 10            [ 1] 1198 	cp a,#TK_GRP_ADD 
      001845 27 09            [ 1] 1199 	jreq 2$ 
      001847                       1200 	_unget_token 
      001847 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      00184C A6 84            [ 1] 1201 	ld a,#TK_INTGR
      00184E 20 19            [ 2] 1202 	jra 9$ 
      001850                       1203 2$: ; second term 
      001850 CD 17 F1         [ 4] 1204 	call term
      001853 4D               [ 1] 1205 	tnz a 
      001854 26 03            [ 1] 1206 	jrne 3$
      001856 CC 13 BD         [ 2] 1207 	jp syntax_error
      001859                       1208 3$:
      001859 7B 01            [ 1] 1209 	ld a,(OP,sp)
      00185B A1 10            [ 1] 1210 	cp a,#TK_PLUS 
      00185D 26 05            [ 1] 1211 	jrne 4$
                                   1212 ; '+' operator	
      00185F CD 01 7E         [ 4] 1213 	call add24
      001862 20 D8            [ 2] 1214 	jra 1$ 
      001864                       1215 4$:	; '-' operator 
      001864 CD 01 9B         [ 4] 1216 	call sub24
      001867 20 D3            [ 2] 1217 	jra 1$
      001869                       1218 9$:
      001869                       1219 	_drop VSIZE 
      001869 5B 01            [ 2]    1     addw sp,#VSIZE 
      00186B 81               [ 4] 1220 	ret 
                                   1221 
                                   1222 ;---------------------------------------------
                                   1223 ; rel ::= expr rel_op expr
                                   1224 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1225 ;  relation return  integer , zero is false 
                                   1226 ;  output:
                                   1227 ;	 xstack		value  
                                   1228 ;---------------------------------------------
                           000001  1229 	RELOP=1
                           000001  1230 	VSIZE=1 
      00186C                       1231 relation: 
      00186C                       1232 	_vars VSIZE
      00186C 52 01            [ 2]    1     sub sp,#VSIZE 
      00186E CD 18 34         [ 4] 1233 	call expression
      001871 4D               [ 1] 1234 	tnz a 
      001872 27 54            [ 1] 1235 	jreq 9$ 
                                   1236 ; expect rel_op or leave 
      001874 CD 15 19         [ 4] 1237 	call next_token 
      001877 6B 01            [ 1] 1238 	ld (RELOP,sp),a 
      001879 A4 30            [ 1] 1239 	and a,#TK_GRP_MASK
      00187B A1 30            [ 1] 1240 	cp a,#TK_GRP_RELOP 
      00187D 27 09            [ 1] 1241 	jreq 2$
      00187F A6 84            [ 1] 1242 	ld a,#TK_INTGR 
      001881                       1243 	_unget_token 
      001881 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001886 20 40            [ 2] 1244 	jra 9$ 
      001888                       1245 2$:	; expect another expression
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      001888 CD 18 34         [ 4] 1246 	call expression
      00188B 4D               [ 1] 1247 	tnz a 
      00188C 26 03            [ 1] 1248 	jrne 3$
      00188E CC 13 BD         [ 2] 1249 	jp syntax_error 
      001891                       1250 3$: 
      001891 CD 01 B8         [ 4] 1251 	call cp24 
      001894                       1252 	_xpop  
      001894 90 F6            [ 1]    1     ld a,(y)
      001896 93               [ 1]    2     ldw x,y 
      001897 EE 01            [ 2]    3     ldw x,(1,x)
      001899 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00189D 4D               [ 1] 1253 	tnz a 
      00189E 2B 08            [ 1] 1254 	jrmi 4$
      0018A0 26 0C            [ 1] 1255 	jrne 5$
      0018A2 35 02 00 0E      [ 1] 1256 	mov acc8,#2 ; i1==i2
      0018A6 20 0A            [ 2] 1257 	jra 6$ 
      0018A8                       1258 4$: ; i1<i2
      0018A8 35 04 00 0E      [ 1] 1259 	mov acc8,#4 
      0018AC 20 04            [ 2] 1260 	jra 6$
      0018AE                       1261 5$: ; i1>i2
      0018AE 35 01 00 0E      [ 1] 1262 	mov acc8,#1  
      0018B2                       1263 6$: ; 0=false, -1=true 
      0018B2 5F               [ 1] 1264 	clrw x 
      0018B3 C6 00 0E         [ 1] 1265 	ld a, acc8  
      0018B6 14 01            [ 1] 1266 	and a,(RELOP,sp)
      0018B8 27 03            [ 1] 1267 	jreq 7$
      0018BA 53               [ 2] 1268 	cplw x 
      0018BB A6 FF            [ 1] 1269 	ld a,#255 
      0018BD                       1270 7$:	_xpush 
      0018BD 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018C1 90 F7            [ 1]    2     ld (y),a 
      0018C3 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018C6 A6 84            [ 1] 1271 	ld a,#TK_INTGR
      0018C8                       1272 9$: 
      0018C8                       1273 	_drop VSIZE
      0018C8 5B 01            [ 2]    1     addw sp,#VSIZE 
      0018CA 81               [ 4] 1274 	ret 
                                   1275 
                                   1276 ;-------------------------------------------
                                   1277 ;  AND factor:  [NOT] relation | (condition)
                                   1278 ;  output:
                                   1279 ;     A      TK_INTGR|0
                                   1280 ;-------------------------------------------
                           000001  1281 	NOT_OP=1
      0018CB                       1282 and_factor:
      0018CB 4B 00            [ 1] 1283 	push #0 
      0018CD CD 15 19         [ 4] 1284 0$:	call next_token  
      0018D0 4D               [ 1] 1285 	tnz a 
      0018D1 27 25            [ 1] 1286 	jreq 8$ 
      0018D3 A1 87            [ 1] 1287 	cp a,#TK_NOT 
      0018D5 26 04            [ 1] 1288 	jrne 1$ 
      0018D7 03 01            [ 1] 1289 	cpl (NOT_OP,sp)
      0018D9 20 F2            [ 2] 1290 	jra 0$ 
      0018DB                       1291 1$:	
      0018DB A1 06            [ 1] 1292 	cp a,#TK_LPAREN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      0018DD 26 0A            [ 1] 1293 	jrne 2$
      0018DF CD 19 4D         [ 4] 1294 	call condition
      0018E2 A6 07            [ 1] 1295 	ld a,#TK_RPAREN 
      0018E4 CD 16 E2         [ 4] 1296 	call expect
      0018E7 20 08            [ 2] 1297 	jra 3$
      0018E9                       1298 2$: _unget_token 
      0018E9 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0018EE CD 18 6C         [ 4] 1299 	call relation
      0018F1                       1300 3$:
      0018F1 0D 01            [ 1] 1301 	tnz (NOT_OP,sp)
      0018F3 27 03            [ 1] 1302 	jreq 8$ 
      0018F5 CD 01 FA         [ 4] 1303 	call cpl24
      0018F8                       1304 8$:
      0018F8                       1305 	_drop 1  
      0018F8 5B 01            [ 2]    1     addw sp,#1 
      0018FA 81               [ 4] 1306     ret 
                                   1307 
                                   1308 
                                   1309 ;--------------------------------------------
                                   1310 ;  AND operator as priority over OR||XOR 
                                   1311 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1312 ;          
                                   1313 ;  output:
                                   1314 ;     A     TK_INTGR|0
                                   1315 ;    xtack   value 
                                   1316 ;--------------------------------------------
      0018FB                       1317 and_cond:
      0018FB CD 18 CB         [ 4] 1318 	call and_factor
      0018FE 4D               [ 1] 1319 	tnz a 
      0018FF 27 4B            [ 1] 1320 	jreq 9$  
      001901 CD 15 19         [ 4] 1321 1$: call next_token 
      001904 4D               [ 1] 1322 	tnz a 
      001905 27 43            [ 1] 1323 	jreq 6$ 
      001907 A1 88            [ 1] 1324 	cp a,#TK_AND 
      001909 27 07            [ 1] 1325 	jreq 3$
      00190B                       1326 	_unget_token 
      00190B 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001910 20 38            [ 2] 1327 	jra 6$ 
      001912 CD 18 CB         [ 4] 1328 3$:	call and_factor  
      001915 4D               [ 1] 1329 	tnz a 
      001916 26 03            [ 1] 1330 	jrne 4$
      001918 CC 13 BD         [ 2] 1331 	jp syntax_error 
      00191B                       1332 4$:	
      00191B                       1333 	_xpop 
      00191B 90 F6            [ 1]    1     ld a,(y)
      00191D 93               [ 1]    2     ldw x,y 
      00191E EE 01            [ 2]    3     ldw x,(1,x)
      001920 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001924 C7 00 0C         [ 1] 1334 	ld acc24,a 
      001927 CF 00 0D         [ 2] 1335 	ldw acc16,x
      00192A                       1336 	_xpop 
      00192A 90 F6            [ 1]    1     ld a,(y)
      00192C 93               [ 1]    2     ldw x,y 
      00192D EE 01            [ 2]    3     ldw x,(1,x)
      00192F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001933 C4 00 0C         [ 1] 1337 	and a,acc24 
      001936 02               [ 1] 1338 	rlwa x 
      001937 C4 00 0D         [ 1] 1339 	and a,acc16 
      00193A 02               [ 1] 1340 	rlwa x 
      00193B C4 00 0E         [ 1] 1341 	and a,acc8 
      00193E 02               [ 1] 1342 	rlwa x
      00193F                       1343 	_xpush
      00193F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001943 90 F7            [ 1]    2     ld (y),a 
      001945 90 EF 01         [ 2]    3     ldw (1,y),x 
      001948 20 B7            [ 2] 1344 	jra 1$  
      00194A A6 84            [ 1] 1345 6$: ld a,#TK_INTGR 
      00194C 81               [ 4] 1346 9$:	ret 	 
                                   1347 
                                   1348 
                                   1349 ;--------------------------------------------
                                   1350 ; condition for IF and UNTIL 
                                   1351 ; operators: OR,XOR 
                                   1352 ; format:  and_cond [ OP and_cond ]* 
                                   1353 ; output:
                                   1354 ;    A        INTGR|0 
                                   1355 ;    xstack   value 
                                   1356 ;--------------------------------------------
                           000001  1357 	ATMP=1
                           000002  1358 	OP=2
                           000002  1359 	VSIZE=2 
      00194D                       1360 condition:
      00194D                       1361 	_vars VSIZE 
      00194D 52 02            [ 2]    1     sub sp,#VSIZE 
      00194F CD 18 FB         [ 4] 1362 	call and_cond
      001952 4D               [ 1] 1363 	tnz a 
      001953 27 69            [ 1] 1364 	jreq 9$ 
      001955 CD 15 19         [ 4] 1365 1$:	call next_token 
      001958 A1 89            [ 1] 1366 	cp a,#TK_OR 
      00195A 27 0B            [ 1] 1367 	jreq 2$
      00195C A1 8A            [ 1] 1368 	cp a,#TK_XOR
      00195E 27 07            [ 1] 1369 	jreq 2$ 
      001960                       1370 	_unget_token 
      001960 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001965 20 55            [ 2] 1371 	jra 8$ 
      001967 6B 02            [ 1] 1372 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001969 CD 18 FB         [ 4] 1373 	call and_cond
      00196C A1 84            [ 1] 1374 	cp a,#TK_INTGR 
      00196E 27 03            [ 1] 1375 	jreq 3$
      001970 CC 13 BD         [ 2] 1376 	jp syntax_error 
      001973                       1377 3$:	 
      001973                       1378 	_xpop  ; rigth arg 
      001973 90 F6            [ 1]    1     ld a,(y)
      001975 93               [ 1]    2     ldw x,y 
      001976 EE 01            [ 2]    3     ldw x,(1,x)
      001978 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00197C C7 00 0C         [ 1] 1379 	ld acc24,a 
      00197F CF 00 0D         [ 2] 1380 	ldw acc16,x 
      001982                       1381 	_xpop  ; left arg  
      001982 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001984 93               [ 1]    2     ldw x,y 
      001985 EE 01            [ 2]    3     ldw x,(1,x)
      001987 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00198B 6B 01            [ 1] 1382 	ld (ATMP,sp),a 
      00198D 7B 02            [ 1] 1383 	ld a,(OP,sp)
      00198F A1 8A            [ 1] 1384 	cp a,#TK_XOR 
      001991 27 10            [ 1] 1385 	jreq 5$ 
      001993                       1386 4$: ; A:X OR acc24   
      001993 7B 01            [ 1] 1387 	ld a,(ATMP,sp)
      001995 CA 00 0C         [ 1] 1388 	or a,acc24 
      001998 02               [ 1] 1389 	rlwa x 
      001999 CA 00 0D         [ 1] 1390 	or a,acc16 
      00199C 02               [ 1] 1391 	rlwa x 
      00199D CA 00 0E         [ 1] 1392 	or a,acc8 
      0019A0 02               [ 1] 1393 	rlwa x 
      0019A1 20 0E            [ 2] 1394 	jra 6$  
      0019A3                       1395 5$: ; A:X XOR acc24 
      0019A3 7B 01            [ 1] 1396 	ld a,(ATMP,sp)
      0019A5 C8 00 0C         [ 1] 1397 	xor a,acc24 
      0019A8 02               [ 1] 1398 	rlwa x 
      0019A9 C8 00 0D         [ 1] 1399 	xor a,acc16 
      0019AC 02               [ 1] 1400 	rlwa x 
      0019AD C8 00 0E         [ 1] 1401 	xor a,acc8 
      0019B0 02               [ 1] 1402 	rlwa x 
      0019B1                       1403 6$: _xpush
      0019B1 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0019B5 90 F7            [ 1]    2     ld (y),a 
      0019B7 90 EF 01         [ 2]    3     ldw (1,y),x 
      0019BA 20 99            [ 2] 1404 	jra 1$ 
      0019BC A6 84            [ 1] 1405 8$:	ld a,#TK_INTGR 
      0019BE                       1406 9$:	_drop VSIZE 
      0019BE 5B 02            [ 2]    1     addw sp,#VSIZE 
      0019C0 81               [ 4] 1407 	ret 
                                   1408 
                                   1409 
                                   1410 ;--------------------------------------------
                                   1411 ; BASIC: HEX 
                                   1412 ; select hexadecimal base for integer print
                                   1413 ;---------------------------------------------
      0019C1                       1414 hex_base:
      0019C1 35 10 00 0A      [ 1] 1415 	mov base,#16 
      0019C5 81               [ 4] 1416 	ret 
                                   1417 
                                   1418 ;--------------------------------------------
                                   1419 ; BASIC: DEC 
                                   1420 ; select decimal base for integer print
                                   1421 ;---------------------------------------------
      0019C6                       1422 dec_base:
      0019C6 35 0A 00 0A      [ 1] 1423 	mov base,#10
      0019CA 81               [ 4] 1424 	ret 
                                   1425 
                                   1426 ;------------------------
                                   1427 ; BASIC: FREE 
                                   1428 ; return free size in RAM 
                                   1429 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                                   1430 ;   A:x		size 
                                   1431 ;--------------------------
      0019CB                       1432 free:
      0019CB 4F               [ 1] 1433 	clr a 
      0019CC AE 16 68         [ 2] 1434 	ldw x,#tib 
      0019CF 72 B0 00 31      [ 2] 1435 	subw x,dvar_end 
      0019D3 81               [ 4] 1436 	ret 
                                   1437 
                                   1438 ;------------------------------
                                   1439 ; BASIC: SIZE 
                                   1440 ; command that print 
                                   1441 ; program start addres and size 
                                   1442 ;------------------------------
      0019D4                       1443 cmd_size:
      0019D4 3B 00 0A         [ 1] 1444 	push base 
      0019D7 AE 1B B7         [ 2] 1445 	ldw x,#PROG_ADDR 
      0019DA CD 06 82         [ 4] 1446 	call puts 
      0019DD CE 00 1B         [ 2] 1447 	ldw x,txtbgn     
      0019E0 35 10 00 0A      [ 1] 1448 	mov base,#16 
      0019E4 CD 15 61         [ 4] 1449 	call prt_i16
      0019E7 32 00 0A         [ 1] 1450 	pop base 
      0019EA AE 1B C9         [ 2] 1451 	ldw x,#PROG_SIZE 
      0019ED CD 06 82         [ 4] 1452 	call puts 
      0019F0 CE 00 1D         [ 2] 1453 	ldw x,txtend 
      0019F3 72 B0 00 1B      [ 2] 1454 	subw x,txtbgn 
      0019F7 CD 15 61         [ 4] 1455 	call prt_i16
      0019FA AE 1B DA         [ 2] 1456 	ldw x,#STR_BYTES 
      0019FD CD 06 82         [ 4] 1457 	call puts  
      001A00 81               [ 4] 1458 	ret 
                                   1459 
                                   1460 
                                   1461 ;------------------------
                                   1462 ; BASIC: UBOUND  
                                   1463 ; return array variable size 
                                   1464 ; and set 'array_size' variable 
                                   1465 ; output:
                                   1466 ;   A:X 	array_size
                                   1467 ;--------------------------
      001A01                       1468 ubound:
      001A01 CD 19 CB         [ 4] 1469 	call free 
      001A04 A6 03            [ 1] 1470 	ld a,#CELL_SIZE 
      001A06 62               [ 2] 1471 	div x,a 
      001A07 CF 00 20         [ 2] 1472 	ldw array_size,x
      001A0A 4F               [ 1] 1473 	clr a 
      001A0B 81               [ 4] 1474 	ret 
                                   1475 
                                   1476 ;-----------------------------
                                   1477 ; BASIC: LET var=expr 
                                   1478 ; variable assignement 
                                   1479 ; output:
                                   1480 ;   A 		TK_NONE 
                                   1481 ;-----------------------------
      001A0C                       1482 let::
      001A0C CD 15 19         [ 4] 1483 	call next_token 
      001A0F A1 85            [ 1] 1484 	cp a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001A11 27 0C            [ 1] 1485 	jreq let_var
      001A13 A1 05            [ 1] 1486 	cp a,#TK_ARRAY 
      001A15 27 03            [ 1] 1487 	jreq  let_array
      001A17 CC 13 BD         [ 2] 1488 	jp syntax_error
      001A1A                       1489 let_array:
      001A1A CD 17 10         [ 4] 1490 	call get_array_element
      001A1D 20 03            [ 2] 1491 	jra let_eval 
      001A1F                       1492 let_var:
      001A1F CD 15 41         [ 4] 1493 	call get_addr
      001A22                       1494 let_eval:
      001A22 CF 00 19         [ 2] 1495 	ldw ptr16,x  ; variable address 
      001A25 CD 15 19         [ 4] 1496 	call next_token 
      001A28 A1 32            [ 1] 1497 	cp a,#TK_EQUAL
      001A2A 27 03            [ 1] 1498 	jreq 1$
      001A2C CC 13 BD         [ 2] 1499 	jp syntax_error
      001A2F                       1500 1$:	
      001A2F CD 19 4D         [ 4] 1501 	call condition   
      001A32 A1 84            [ 1] 1502 	cp a,#TK_INTGR 
      001A34 27 03            [ 1] 1503 	jreq 2$
      001A36 CC 13 BD         [ 2] 1504 	jp syntax_error
      001A39                       1505 2$:	
      001A39                       1506 	_xpop ; value 
      001A39 90 F6            [ 1]    1     ld a,(y)
      001A3B 93               [ 1]    2     ldw x,y 
      001A3C EE 01            [ 2]    3     ldw x,(1,x)
      001A3E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A42                       1507 3$:
      001A42 72 C7 00 19      [ 4] 1508 	ld [ptr16],a
      001A46 72 5C 00 1A      [ 1] 1509 	inc ptr8  
      001A4A 72 CF 00 19      [ 5] 1510 	ldw [ptr16],x 
      001A4E 81               [ 4] 1511 	ret 
                                   1512 
                                   1513 
                                   1514 ;--------------------------
                                   1515 ; return constant/dvar value 
                                   1516 ; from it's record address
                                   1517 ; input:
                                   1518 ;	X	*const record 
                                   1519 ; output:
                                   1520 ;   A:X   const  value
                                   1521 ;--------------------------
      001A4F                       1522 get_value: ; -- i 
      001A4F F6               [ 1] 1523 	ld a,(x) ; record size 
      001A50 A4 1F            [ 1] 1524 	and a,#REC_LEN_MASK 
      001A52 A0 03            [ 1] 1525 	sub a,#CELL_SIZE ; * value 
      001A54 88               [ 1] 1526 	push a 
      001A55 4B 00            [ 1] 1527 	push #0 
      001A57 72 FB 01         [ 2] 1528 	addw x,(1,sp)
      001A5A F6               [ 1] 1529 	ld a,(x)
      001A5B EE 01            [ 2] 1530 	ldw x,(1,x)
      001A5D                       1531 	_drop 2
      001A5D 5B 02            [ 2]    1     addw sp,#2 
      001A5F 81               [ 4] 1532 	ret 
                                   1533 
                                   1534 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                   1535 ;--------------------------
                                   1536 ; BASIC: EEFREE 
                                   1537 ; eeprom_free 
                                   1538 ; search end of data  
                                   1539 ; in EEPROM 
                                   1540 ; input:
                                   1541 ;    none 
                                   1542 ; output:
                                   1543 ;    A:X     address free
                                   1544 ;-------------------------
      001A60                       1545 func_eefree:
      001A60 AE 40 00         [ 2] 1546 	ldw x,#EEPROM_BASE 
      001A63 35 08 00 0E      [ 1] 1547 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001A67 A3 47 F8         [ 2] 1548     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001A6A 24 17            [ 1] 1549 	jruge 8$ ; no free space 
      001A6C F6               [ 1] 1550 2$: ld a,(x)
      001A6D 26 0C            [ 1] 1551 	jrne 3$
      001A6F 5C               [ 1] 1552 	incw x 
      001A70 72 5A 00 0E      [ 1] 1553 	dec acc8 
      001A74 26 F6            [ 1] 1554 	jrne 2$
      001A76 1D 00 08         [ 2] 1555 	subw x,#8 
      001A79 20 09            [ 2] 1556 	jra 9$  
      001A7B F6               [ 1] 1557 3$: ld a,(x)
      001A7C 5C               [ 1] 1558 	incw x
      001A7D 4D               [ 1] 1559 	tnz a  
      001A7E 26 FB            [ 1] 1560 	jrne 3$
      001A80 5A               [ 2] 1561 	decw x   
      001A81 20 E0            [ 2] 1562 	jra 1$ 
      001A83 5F               [ 1] 1563 8$: clrw x ; no free space 
      001A84 4F               [ 1] 1564 9$: clr a 
      001A85 CF 00 23         [ 2] 1565 	ldw free_eeprom,x ; save in system variable 
      001A88 81               [ 4] 1566 	ret 
                                   1567 
                                   1568  
                                   1569 ;--------------------------
                                   1570 ; search constant/dim_var name 
                                   1571 ; format of record  
                                   1572 ;   .byte record length 
                                   1573 ;         = strlen(name)+5 
                                   1574 ;   .asciz name (variable length)
                                   1575 ;   .int24 value (3 bytes )
                                   1576 ; a constant record use 7+ bytes
                                   1577 ; constants are saved in EEPROM  
                                   1578 ; input:
                                   1579 ;    A     name_len 
                                   1580 ;    X     *name
                                   1581 ; output:
                                   1582 ;    X     address|0
                                   1583 ; use:
                                   1584 ;   A,Y, acc16 
                                   1585 ;-------------------------
                           000001  1586 	NAMEPTR=1 ; target name pointer 
                           000003  1587 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
                           000005  1588 	NLEN=5  ;  length of target name 
                           000007  1589 	LIMIT=7   ; search area limit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                           000008  1590 	VSIZE=8  
      001A89                       1591 search_name:
      001A89 90 89            [ 2] 1592 	pushw y 
      001A8B                       1593 	_vars VSIZE
      001A8B 52 08            [ 2]    1     sub sp,#VSIZE 
      001A8D 72 5F 00 0D      [ 1] 1594 	clr acc16 
      001A91 6B 05            [ 1] 1595 	ld (NLEN,sp),a    
      001A93 1F 01            [ 2] 1596 	ldw (NAMEPTR,sp),x
      001A95 CE 00 31         [ 2] 1597 	ldw x,dvar_end 
      001A98 1F 07            [ 2] 1598 	ldw (LIMIT,sp),x 
      001A9A 90 CE 00 2F      [ 2] 1599 	ldw y,dvar_bgn
      001A9E 17 03            [ 2] 1600 1$:	ldw (WLKPTR,sp),y
      001AA0 93               [ 1] 1601 	ldw x,y 
      001AA1 13 07            [ 2] 1602 	cpw x, (LIMIT,sp) 
      001AA3 24 22            [ 1] 1603 	jruge 7$ ; no match found 
      001AA5 90 F6            [ 1] 1604 	ld a,(y)
      001AA7 A0 05            [ 1] 1605 	sub a,#REC_XTRA_BYTES
      001AA9 A4 0F            [ 1] 1606 	and a,#NAME_MAX_LEN
      001AAB 11 05            [ 1] 1607 	cp a,(NLEN,sp)
      001AAD 26 09            [ 1] 1608 	jrne 2$ 
      001AAF 90 5C            [ 1] 1609 	incw y 
      001AB1 1E 01            [ 2] 1610 	ldw x,(NAMEPTR,sp)
      001AB3 CD 10 C4         [ 4] 1611 	call strcmp
      001AB6 26 13            [ 1] 1612 	jrne 8$ ; match found 
      001AB8                       1613 2$: ; skip this one 	
      001AB8 16 03            [ 2] 1614 	ldW Y,(WLKPTR,sp)
      001ABA 90 F6            [ 1] 1615 	ld a,(y)
      001ABC A4 1F            [ 1] 1616 	and a,#REC_LEN_MASK  
      001ABE C7 00 0E         [ 1] 1617 	ld acc8,a 
      001AC1 72 B9 00 0D      [ 2] 1618 	addw y,acc16 
      001AC5 20 D7            [ 2] 1619 	jra 1$  
      001AC7                       1620 7$: ; no match found 
      001AC7 0F 03            [ 1] 1621 	clr (WLKPTR,sp)
      001AC9 0F 04            [ 1] 1622 	clr (WLKPTR+1,sp)
      001ACB                       1623 8$: ; match found 
      001ACB 1E 03            [ 2] 1624 	ldw x,(WLKPTR,sp) ; record address 
      001ACD                       1625 9$:	_DROP VSIZE
      001ACD 5B 08            [ 2]    1     addw sp,#VSIZE 
      001ACF 90 85            [ 2] 1626 	popw y 
      001AD1 81               [ 4] 1627 	 ret 
                                   1628 
                                   1629 ;--------------------------------------------
                                   1630 ; BASIC: CONST name=value [, name=value]*
                                   1631 ; define constant(s) saved in EEPROM
                                   1632 ; share most of his code with cmd_dim 
                                   1633 ;--------------------------------------------
                           000001  1634 	VAR_NAME=1 
                           000003  1635 	REC_LEN=3
                           000005  1636 	RONLY=5
                           000005  1637 	VSIZE=5
      001AD2                       1638 cmd_const:
      001AD2 CD 16 D7         [ 4] 1639 	call runtime_only
      001AD5                       1640 	_vars VSIZE 
      001AD5 52 05            [ 2]    1     sub sp,#VSIZE 
      001AD7 A6 80            [ 1] 1641 	ld a,#128 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001AD9 6B 05            [ 1] 1642 	ld (RONLY,sp),a 
      001ADB 0F 03            [ 1] 1643 	clr (REC_LEN,sp)
      001ADD 20 09            [ 2] 1644 	jra cmd_dim2 ; shared code with cmd_dim  
                                   1645 
                                   1646 ;---------------------------------
                                   1647 ; BASIC: DIM var_name [var_name]* 
                                   1648 ; create named variables at end 
                                   1649 ; of BASIC program. 
                                   1650 ; These variables are initialized 
                                   1651 ; to 0. 
                                   1652 ; record format same ast CONST 
                                   1653 ; but r/w because stored in RAM 
                                   1654 ;---------------------------------
      001ADF                       1655 cmd_dim:
      001ADF CD 16 D7         [ 4] 1656 	call runtime_only
      001AE2                       1657 cmd_dim1:	
      001AE2                       1658 	_vars VSIZE
      001AE2 52 05            [ 2]    1     sub sp,#VSIZE 
      001AE4 0F 03            [ 1] 1659 	clr (REC_LEN,sp )
      001AE6 0F 05            [ 1] 1660 	clr (RONLY,sp)
      001AE8                       1661 cmd_dim2: 
      001AE8 CD 15 19         [ 4] 1662 0$:	call next_token 
      001AEB A1 03            [ 1] 1663 	cp a,#TK_LABEL  
      001AED 27 03            [ 1] 1664 	jreq 1$ 
      001AEF CC 13 BD         [ 2] 1665 	jp syntax_error 
      001AF2 1F 01            [ 2] 1666 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001AF4 CD 10 B9         [ 4] 1667 	call strlen
      001AF7 AB 05            [ 1] 1668 	add a,#REC_XTRA_BYTES
      001AF9 6B 04            [ 1] 1669 	ld (REC_LEN+1,sp),a
      001AFB CD 15 32         [ 4] 1670 	call skip_string 
      001AFE 7B 04            [ 1] 1671 	ld a,(REC_LEN+1,sp)
      001B00 A0 05            [ 1] 1672 	sub a,#REC_XTRA_BYTES
      001B02 1E 01            [ 2] 1673 	ldw x,(VAR_NAME,sp) 
      001B04 CD 1A 89         [ 4] 1674 	call search_name  
      001B07 5D               [ 2] 1675 	tnzw x 
      001B08 27 05            [ 1] 1676 	jreq 2$
      001B0A A6 08            [ 1] 1677 	ld a,#ERR_DUPLICATE
      001B0C CC 13 BF         [ 2] 1678 	jp tb_error  
      001B0F CE 00 31         [ 2] 1679 2$:	ldw x,dvar_end 
      001B12 7B 04            [ 1] 1680 	ld a,(REC_LEN+1,sp)
      001B14 1A 05            [ 1] 1681 	or a,(RONLY,sp)
      001B16 F7               [ 1] 1682 	ld (x),a 
      001B17 5C               [ 1] 1683 	incw x 
      001B18 90 89            [ 2] 1684 	pushw y 
      001B1A 16 03            [ 2] 1685 	ldw y,(VAR_NAME+2,sp)
      001B1C CD 10 D5         [ 4] 1686 	call strcpy
      001B1F 90 85            [ 2] 1687 	popw y 
      001B21 5A               [ 2] 1688 	decw x
      001B22 72 FB 03         [ 2] 1689 	addw x,(REC_LEN,sp)
      001B25 CF 00 31         [ 2] 1690 	ldw dvar_end,x 
      001B28 1D 00 03         [ 2] 1691 	subw x,#CELL_SIZE  
      001B2B 7F               [ 1] 1692 	clr (x)
      001B2C 6F 01            [ 1] 1693 	clr (1,x)  
      001B2E 6F 02            [ 1] 1694 	clr (2,x)
      001B30 CD 15 19         [ 4] 1695 4$: call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001B33 A1 08            [ 1] 1696 	cp a,#TK_COMMA 
      001B35 27 B1            [ 1] 1697 	jreq 0$ 
      001B37 A1 32            [ 1] 1698 	cp a,#TK_EQUAL 
      001B39 26 2A            [ 1] 1699 	jrne 8$
                                   1700 ; initialize variable 
      001B3B CD 19 4D         [ 4] 1701 	call condition 
      001B3E A1 84            [ 1] 1702 	cp a,#TK_INTGR
      001B40 27 03            [ 1] 1703 	jreq 5$
      001B42 CC 13 BD         [ 2] 1704 	jp syntax_error
      001B45 CE 00 31         [ 2] 1705 5$: ldw x,dvar_end 
      001B48 1D 00 03         [ 2] 1706 	subw x,#CELL_SIZE 
      001B4B CF 00 19         [ 2] 1707 	ldw ptr16,x 
      001B4E                       1708 	_xpop 
      001B4E 90 F6            [ 1]    1     ld a,(y)
      001B50 93               [ 1]    2     ldw x,y 
      001B51 EE 01            [ 2]    3     ldw x,(1,x)
      001B53 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B57 72 C7 00 19      [ 4] 1709 	ld [ptr16],a 
      001B5B 72 5C 00 1A      [ 1] 1710 	inc ptr8 
      001B5F 72 CF 00 19      [ 5] 1711 	ldw [ptr16],x 
      001B63 20 CB            [ 2] 1712 	jra 4$ 
      001B65                       1713 8$:	
      001B65                       1714 	_unget_token 	
      001B65 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001B6A                       1715 	_drop VSIZE 
      001B6A 5B 05            [ 2]    1     addw sp,#VSIZE 
      001B6C CD 1A 01         [ 4] 1716 	call ubound 
      001B6F 81               [ 4] 1717 	ret 
                                   1718 
                                   1719 
                                   1720 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1721 ; return program size 
                                   1722 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B70                       1723 prog_size:
      001B70 CE 00 1D         [ 2] 1724 	ldw x,txtend 
      001B73 72 B0 00 1B      [ 2] 1725 	subw x,txtbgn 
      001B77 81               [ 4] 1726 	ret 
                                   1727 
                                   1728 ;----------------------------
                                   1729 ; print program information 
                                   1730 ;---------------------------
      001B78                       1731 program_info: 
      001B78 AE 1B B7         [ 2] 1732 	ldw x,#PROG_ADDR 
      001B7B CD 06 82         [ 4] 1733 	call puts 
      001B7E CE 00 1B         [ 2] 1734 	ldw x,txtbgn 
      001B81 35 10 00 0A      [ 1] 1735 	mov base,#16 
      001B85 CD 15 61         [ 4] 1736 	call prt_i16
      001B88 35 0A 00 0A      [ 1] 1737 	mov base,#10  
      001B8C AE 1B C9         [ 2] 1738 	ldw x,#PROG_SIZE
      001B8F CD 06 82         [ 4] 1739 	call puts 
      001B92 CD 1B 70         [ 4] 1740 	call prog_size 
      001B95 CD 15 61         [ 4] 1741 	call prt_i16 
      001B98 AE 1B DA         [ 2] 1742 	ldw x,#STR_BYTES 
      001B9B CD 06 82         [ 4] 1743 	call puts
      001B9E CE 00 1B         [ 2] 1744 	ldw x,txtbgn
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001BA1 A3 34 04         [ 2] 1745 	cpw x,#app 
      001BA4 25 05            [ 1] 1746 	jrult 2$
      001BA6 AE 1B E1         [ 2] 1747 	ldw x,#FLASH_MEM 
      001BA9 20 03            [ 2] 1748 	jra 3$
      001BAB AE 1B F2         [ 2] 1749 2$: ldw x,#RAM_MEM 	 
      001BAE CD 06 82         [ 4] 1750 3$:	call puts 
      001BB1 A6 0D            [ 1] 1751 	ld a,#CR 
      001BB3 CD 06 25         [ 4] 1752 	call putc
      001BB6 81               [ 4] 1753 	ret 
                                   1754 
      001BB7 70 72 6F 67 72 61 6D  1755 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001BC9 2C 20 70 72 6F 67 72  1756 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001BDA 20 62 79 74 65 73 00  1757 STR_BYTES: .asciz " bytes" 
      001BE1 20 69 6E 20 46 4C 41  1758 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001BF2 20 69 6E 20 52 41 4D  1759 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1760 
                                   1761 
                                   1762 ;----------------------------
                                   1763 ; BASIC: LIST [[start][-end]]
                                   1764 ; list program lines 
                                   1765 ; form start to end 
                                   1766 ; if empty argument list then 
                                   1767 ; list all.
                                   1768 ;----------------------------
                           000001  1769 	FIRST=1
                           000003  1770 	LAST=3 
                           000005  1771 	LN_PTR=5
                           000006  1772 	VSIZE=6 
      001C01                       1773 cmd_list:
      001C01 CD 16 CC         [ 4] 1774 	call cmd_line_only
      001C04 CD 1B 70         [ 4] 1775 	call prog_size 
      001C07 22 01            [ 1] 1776 	jrugt 3$
      001C09 81               [ 4] 1777 	ret 
      001C0A                       1778 3$: _vars VSIZE
      001C0A 52 06            [ 2]    1     sub sp,#VSIZE 
      001C0C CE 00 1B         [ 2] 1779 	ldw x,txtbgn 
      001C0F 1F 05            [ 2] 1780 	ldw (LN_PTR,sp),x 
      001C11 FE               [ 2] 1781 	ldw x,(x) 
      001C12 1F 01            [ 2] 1782 	ldw (FIRST,sp),x ; list from first line 
      001C14 AE 7F FF         [ 2] 1783 	ldw x,#MAX_LINENO ; biggest line number 
      001C17 1F 03            [ 2] 1784 	ldw (LAST,sp),x 
      001C19 CD 15 19         [ 4] 1785 	call next_token 
      001C1C A1 84            [ 1] 1786 	cp a,#TK_INTGR
      001C1E 27 0F            [ 1] 1787 	jreq start_from 
      001C20                       1788 is_minus: 	
      001C20 A1 11            [ 1] 1789 	cp a,#TK_MINUS 
      001C22 27 36            [ 1] 1790 	jreq end_at_line
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001C24 A1 00            [ 1] 1791 	cp a,#TK_NONE
      001C26 27 49            [ 1] 1792 	jreq list_loop
      001C28 A1 09            [ 1] 1793 	cp a,#TK_COLON 
      001C2A 27 45            [ 1] 1794 	jreq list_loop
      001C2C CC 13 BD         [ 2] 1795 	jp syntax_error
      001C2F                       1796 start_from:	 
      001C2F CD 15 4B         [ 4] 1797 	call get_int24
      001C32 1F 01            [ 2] 1798 	ldw (FIRST,sp),x	
      001C34                       1799 lines_skip:
      001C34 90 89            [ 2] 1800 	pushw y 
      001C36 4F               [ 1] 1801 	clr a 
      001C37 CD 09 6B         [ 4] 1802 	call search_lineno 
      001C3A 5D               [ 2] 1803 	tnzw x 
      001C3B 26 01            [ 1] 1804 	jrne 1$
      001C3D 93               [ 1] 1805 	ldw x,y 
      001C3E 90 85            [ 2] 1806 1$:	popw y 
      001C40 1F 05            [ 2] 1807 	ldw (LN_PTR,sp),x 
      001C42 CD 15 19         [ 4] 1808 	call next_token 
      001C45 A1 11            [ 1] 1809 	cp a,#TK_MINUS 
      001C47 27 11            [ 1] 1810 	jreq end_at_line 
      001C49 A1 00            [ 1] 1811 	cp a,#TK_NONE 
      001C4B 27 07            [ 1] 1812 	jreq 2$
      001C4D A1 09            [ 1] 1813 	cp a,#TK_COLON 
      001C4F 27 03            [ 1] 1814 	jreq 2$
      001C51 CC 13 BD         [ 2] 1815 	jp syntax_error 
      001C54                       1816 2$:
      001C54 1E 01            [ 2] 1817 	ldw x,(FIRST,sp)
      001C56 1F 03            [ 2] 1818 	ldw (LAST,sp),x 
      001C58 20 17            [ 2] 1819 	jra list_loop 
      001C5A                       1820 end_at_line:
                                   1821 ; expect ending line# 
      001C5A CD 15 19         [ 4] 1822     call next_token 
      001C5D A1 84            [ 1] 1823 	cp a,#TK_INTGR
      001C5F 27 0B            [ 1] 1824 	jreq 1$
      001C61 A1 00            [ 1] 1825 	cp a,#TK_NONE 
      001C63 27 0C            [ 1] 1826 	jreq list_loop 
      001C65 A1 09            [ 1] 1827 	cp a,#TK_COLON 
      001C67 27 08            [ 1] 1828 	jreq list_loop 
      001C69 CC 13 BD         [ 2] 1829 	jp syntax_error 
      001C6C                       1830 1$:
      001C6C CD 15 4B         [ 4] 1831 	call get_int24 
      001C6F 1F 03            [ 2] 1832 	ldw (LAST,sp),x 
                                   1833 ; print loop
      001C71                       1834 list_loop:
      001C71 1E 05            [ 2] 1835 	ldw x,(LN_PTR,sp)
      001C73 E6 02            [ 1] 1836 	ld a,(2,x) 
      001C75 CD 1D 19         [ 4] 1837 	call prt_basic_line
      001C78 1E 05            [ 2] 1838 	ldw x,(LN_PTR,sp)
      001C7A E6 02            [ 1] 1839 	ld a,(2,x)
      001C7C C7 00 0E         [ 1] 1840 	ld acc8,a 
      001C7F 72 5F 00 0D      [ 1] 1841 	clr acc16 
      001C83 72 BB 00 0D      [ 2] 1842 	addw x,acc16
      001C87 C3 00 1D         [ 2] 1843 	cpw x,txtend 
      001C8A 2A 07            [ 1] 1844 	jrpl list_exit
      001C8C 1F 05            [ 2] 1845 	ldw (LN_PTR,sp),x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001C8E FE               [ 2] 1846 	ldw x,(x)
      001C8F 13 03            [ 2] 1847 	cpw x,(LAST,sp)  
      001C91 2D DE            [ 1] 1848 	jrsle list_loop
      001C93                       1849 list_exit:
      001C93 55 00 02 00 01   [ 1] 1850 	mov in,count 
      001C98 AE 16 B8         [ 2] 1851 	ldw x,#pad 
      001C9B CF 00 04         [ 2] 1852 	ldw basicptr,x 
      001C9E                       1853 	_drop VSIZE 
      001C9E 5B 06            [ 2]    1     addw sp,#VSIZE 
      001CA0 CD 1B 78         [ 4] 1854 	call program_info
      001CA3 72 0D 00 22 06   [ 2] 1855 	btjf flags,#FLN_REJECTED,9$
      001CA8 AE 1C AF         [ 2] 1856 	ldw x,#LINES_REJECTED
      001CAB CD 06 82         [ 4] 1857 	call puts
      001CAE                       1858 9$: 
      001CAE 81               [ 4] 1859 	ret
      001CAF 57 41 52 4E 49 4E 47  1860 LINES_REJECTED: .asciz "WARNING: lines missing in this program.\n"
             3A 20 6C 69 6E 65 73
             20 6D 69 73 73 69 6E
             67 20 69 6E 20 74 68
             69 73 20 70 72 6F 67
             72 61 6D 2E 0A 00
                                   1861 
                                   1862 ;--------------------------
                                   1863 ; BASIC: EDIT label 
                                   1864 ;  copy program in FLASH 
                                   1865 ;  to RAM for edition 
                                   1866 ;-------------------------
      001CD8                       1867 cmd_edit:
      001CD8 CD 16 CC         [ 4] 1868 	call cmd_line_only
      001CDB A6 03            [ 1] 1869 	ld a,#TK_LABEL 
      001CDD CD 16 E2         [ 4] 1870 	call expect  
      001CE0 89               [ 2] 1871 	pushw x 
      001CE1 CD 15 32         [ 4] 1872 	call skip_string
      001CE4 85               [ 2] 1873 	popw x 
      001CE5 CD 2F 13         [ 4] 1874 	call search_program 
      001CE8 26 06            [ 1] 1875     jrne 1$ 
      001CEA AE 00 12         [ 2] 1876 	ldw x,#ERR_NO_PROGRAM
      001CED CC 13 BF         [ 2] 1877 	jp tb_error 
      001CF0 90 89            [ 2] 1878 1$: pushw y 
      001CF2 90 93            [ 1] 1879 	ldw y,x ; source address 
      001CF4 1D 00 04         [ 2] 1880 	subw x,#4
      001CF7 EE 02            [ 2] 1881 	ldw x,(2,x) ; program size 
      001CF9 1C 00 04         [ 2] 1882 	addw x,#4 
      001CFC CF 00 0D         [ 2] 1883 	ldw acc16,x  ; bytes to copy 
      001CFF AE 00 8C         [ 2] 1884 	ldw x,#rsign ; destination address 
      001D02 72 A2 00 04      [ 2] 1885 	subw y,#4 
      001D06 CD 10 E5         [ 4] 1886 	call move  
      001D09 AE 00 90         [ 2] 1887 	ldw x,#free_ram 
      001D0C CF 00 1B         [ 2] 1888 	ldw txtbgn,x 
      001D0F 72 BB 00 8E      [ 2] 1889 	addw x,rsize  
      001D13 CF 00 1D         [ 2] 1890 	ldw txtend,x
      001D16 90 85            [ 2] 1891 	popw y  
      001D18 81               [ 4] 1892 	ret 
                                   1893 
                                   1894 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                                   1895 ; decompile line from token list
                                   1896 ; and print it. 
                                   1897 ; input:
                                   1898 ;   A       stop at this position 
                                   1899 ;   X 		pointer at line
                                   1900 ; output:
                                   1901 ;   none 
                                   1902 ;--------------------------	
      001D19                       1903 prt_basic_line:
      001D19 90 89            [ 2] 1904 	pushw y 
      001D1B C7 00 02         [ 1] 1905 	ld count,a 
      001D1E E6 02            [ 1] 1906 	ld a,(2,x)
      001D20 C1 00 02         [ 1] 1907 	cp a,count 
      001D23 2A 03            [ 1] 1908 	jrpl 1$ 
      001D25 C7 00 02         [ 1] 1909 	ld count,a 
      001D28 CF 00 04         [ 2] 1910 1$:	ldw basicptr,x 
      001D2B 90 AE 16 68      [ 2] 1911 	ldw y,#tib  
      001D2F CD 0E EC         [ 4] 1912 	call decompile 
      001D32 CD 06 82         [ 4] 1913 	call puts 
      001D35 A6 0D            [ 1] 1914 	ld a,#CR 
      001D37 CD 06 25         [ 4] 1915 	call putc 
      001D3A 90 85            [ 2] 1916 	popw y 
      001D3C 81               [ 4] 1917 	ret 
                                   1918 
                                   1919 
                                   1920 ;---------------------------------
                                   1921 ; BASIC: PRINT|? arg_list 
                                   1922 ; print values from argument list
                                   1923 ;----------------------------------
                           000001  1924 	SEMICOL=1
                           000001  1925 	VSIZE=1
      001D3D                       1926 cmd_print:
      001D3D                       1927 	_vars VSIZE 
      001D3D 52 01            [ 2]    1     sub sp,#VSIZE 
      001D3F                       1928 reset_semicol:
      001D3F 0F 01            [ 1] 1929 	clr (SEMICOL,sp)
      001D41                       1930 prt_loop:
      001D41 CD 15 19         [ 4] 1931 	call next_token
      001D44 A1 02            [ 1] 1932 	cp a,#CMD_END 
      001D46 25 08            [ 1] 1933 	jrult 0$
      001D48 A1 09            [ 1] 1934 	cp a,#TK_COLON 
      001D4A 27 04            [ 1] 1935 	jreq 0$
      001D4C A1 80            [ 1] 1936 	cp a,#TK_CMD
      001D4E 26 07            [ 1] 1937 	jrne 10$
      001D50                       1938 0$:
      001D50                       1939 	_unget_token 
      001D50 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001D55 20 56            [ 2] 1940 	jra 8$ 
      001D57                       1941 10$:	
      001D57 A1 02            [ 1] 1942 	cp a,#TK_QSTR
      001D59 27 12            [ 1] 1943 	jreq 1$
      001D5B A1 04            [ 1] 1944 	cp a,#TK_CHAR 
      001D5D 27 1B            [ 1] 1945 	jreq 2$ 
      001D5F A1 82            [ 1] 1946 	cp a,#TK_CFUNC 
      001D61 27 1F            [ 1] 1947 	jreq 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001D63 A1 0A            [ 1] 1948 	cp a,#TK_SEMIC  
      001D65 27 2A            [ 1] 1949 	jreq 4$
      001D67 A1 08            [ 1] 1950 	cp a,#TK_COMMA
      001D69 27 2A            [ 1] 1951 	jreq 5$
      001D6B 20 2F            [ 2] 1952 	jra 7$ 
      001D6D                       1953 1$:	; print string 
      001D6D CD 06 82         [ 4] 1954 	call puts
      001D70 5C               [ 1] 1955 	incw x
      001D71 72 B0 00 04      [ 2] 1956 	subw x,basicptr 
      001D75 CF 00 00         [ 2] 1957 	ldw in.w,x  
      001D78 20 C5            [ 2] 1958 	jra reset_semicol
      001D7A                       1959 2$:	; print character 
      001D7A CD 15 5B         [ 4] 1960 	call get_char 
      001D7D CD 06 25         [ 4] 1961 	call putc 
      001D80 20 BD            [ 2] 1962 	jra reset_semicol 
      001D82                       1963 3$: ; print character function value  	
      001D82                       1964 	_get_code_addr 
      001D82 FE               [ 2]    1         ldw x,(x)
      001D83 72 5C 00 01      [ 1]    2         inc in 
      001D87 72 5C 00 01      [ 1]    3         inc in 
      001D8B FD               [ 4] 1965 	call (x)
      001D8C CD 06 25         [ 4] 1966 	call putc
      001D8F 20 AE            [ 2] 1967 	jra reset_semicol 
      001D91                       1968 4$: ; set semi-colon  state 
      001D91 03 01            [ 1] 1969 	cpl (SEMICOL,sp)
      001D93 20 AC            [ 2] 1970 	jra prt_loop 
      001D95                       1971 5$: ; skip to next terminal tabulation
                                   1972      ; terminal TAB are 8 colons 
      001D95 A6 09            [ 1] 1973      ld a,#9 
      001D97 CD 06 25         [ 4] 1974 	 call putc 
      001D9A 20 A3            [ 2] 1975 	 jra reset_semicol	    
      001D9C                       1976 7$:	
      001D9C                       1977 	_unget_token 
      001D9C 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001DA1 CD 19 4D         [ 4] 1978 	call condition
      001DA4 4D               [ 1] 1979 	tnz a 
      001DA5 27 06            [ 1] 1980 	jreq 8$    
      001DA7 CD 15 83         [ 4] 1981     call print_top
      001DAA CC 1D 3F         [ 2] 1982 	jp reset_semicol 
      001DAD                       1983 8$:
      001DAD 0D 01            [ 1] 1984 	tnz (SEMICOL,sp)
      001DAF 26 05            [ 1] 1985 	jrne 9$
      001DB1 A6 0D            [ 1] 1986 	ld a,#CR 
      001DB3 CD 06 25         [ 4] 1987     call putc 
      001DB6                       1988 9$:	_drop VSIZE 
      001DB6 5B 01            [ 2]    1     addw sp,#VSIZE 
      001DB8 81               [ 4] 1989 	ret 
                                   1990 
                                   1991 ;----------------------
                                   1992 ; 'save_context' and
                                   1993 ; 'rest_context' must be 
                                   1994 ; called at the same 
                                   1995 ; call stack depth 
                                   1996 ; i.e. SP must have the 
                                   1997 ; save value at  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                   1998 ; entry point of both 
                                   1999 ; routine. 
                                   2000 ;---------------------
                           000004  2001 	CTXT_SIZE=4 ; size of saved data 
                                   2002 ;--------------------
                                   2003 ; save current BASIC
                                   2004 ; interpreter context 
                                   2005 ; on stack 
                                   2006 ;--------------------
      001DB9                       2007 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001DB9                       2008 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001DB9                       2009 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001DB9                       2010 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001DB9                       2011 save_context:
      001DB9 CE 00 04         [ 2] 2012 	ldw x,basicptr 
      001DBC 1F 03            [ 2] 2013 	ldw (BPTR,sp),x
      001DBE C6 00 01         [ 1] 2014 	ld a,in 
      001DC1 6B 05            [ 1] 2015 	ld (IN,sp),a
      001DC3 C6 00 02         [ 1] 2016 	ld a,count 
      001DC6 6B 06            [ 1] 2017 	ld (CNT,sp),a  
      001DC8 81               [ 4] 2018 	ret
                                   2019 
                                   2020 ;-----------------------
                                   2021 ; restore previously saved 
                                   2022 ; BASIC interpreter context 
                                   2023 ; from stack 
                                   2024 ;-------------------------
      001DC9                       2025 rest_context:
      001DC9 1E 03            [ 2] 2026 	ldw x,(BPTR,sp)
      001DCB CF 00 04         [ 2] 2027 	ldw basicptr,x 
      001DCE 7B 05            [ 1] 2028 	ld a,(IN,sp)
      001DD0 C7 00 01         [ 1] 2029 	ld in,a
      001DD3 7B 06            [ 1] 2030 	ld a,(CNT,sp)
      001DD5 C7 00 02         [ 1] 2031 	ld count,a  
      001DD8 81               [ 4] 2032 	ret
                                   2033 
                                   2034 
                                   2035 
                                   2036 ;------------------------------------------
                                   2037 ; BASIC: INPUT [string]var[,[string]var]
                                   2038 ; input value in variables 
                                   2039 ; [string] optionally can be used as prompt 
                                   2040 ;-----------------------------------------
                           000001  2041 	CX_BPTR=1
                           000003  2042 	CX_IN=3
                           000004  2043 	CX_CNT=4
                           000005  2044 	SKIP=5
                           000005  2045 	VSIZE=5
      001DD9                       2046 input_var:
      001DD9 90 89            [ 2] 2047 	pushw y 
      001DDB                       2048 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      001DDB 52 05            [ 2]    1     sub sp,#VSIZE 
      001DDD                       2049 input_loop:
      001DDD 0F 05            [ 1] 2050 	clr (SKIP,sp)
      001DDF CD 15 19         [ 4] 2051 	call next_token 
      001DE2 A1 02            [ 1] 2052 	cp a,#TK_QSTR 
      001DE4 26 10            [ 1] 2053 	jrne 1$ 
      001DE6 CD 06 82         [ 4] 2054 	call puts 
      001DE9 5C               [ 1] 2055 	incw x 
      001DEA 72 B0 00 04      [ 2] 2056 	subw x,basicptr 
      001DEE CF 00 00         [ 2] 2057 	ldw in.w,x 
      001DF1 03 05            [ 1] 2058 	cpl (SKIP,sp)
      001DF3 CD 15 19         [ 4] 2059 	call next_token 
      001DF6 A1 85            [ 1] 2060 1$: cp a,#TK_VAR  
      001DF8 27 03            [ 1] 2061 	jreq 2$ 
      001DFA CC 13 BD         [ 2] 2062 	jp syntax_error
      001DFD CD 15 41         [ 4] 2063 2$:	call get_addr
      001E00 CF 00 19         [ 2] 2064 	ldw ptr16,x 
      001E03 0D 05            [ 1] 2065 	tnz (SKIP,sp)
      001E05 26 06            [ 1] 2066 	jrne 21$ 
      001E07 CD 0E E2         [ 4] 2067 	call var_name 
      001E0A CD 06 25         [ 4] 2068 	call putc   
      001E0D                       2069 21$:
      001E0D A6 3A            [ 1] 2070 	ld a,#':
      001E0F CD 06 25         [ 4] 2071 	call putc 
      001E12 CD 1D B9         [ 4] 2072 	call save_context 
      001E15 72 5F 00 02      [ 1] 2073 	clr count  
      001E19 CD 07 87         [ 4] 2074 	call readln 
      001E1C AE 16 68         [ 2] 2075 	ldw x,#tib 
      001E1F 3B 00 02         [ 1] 2076 	push count
      001E22 4B 00            [ 1] 2077 	push #0 
      001E24 72 FB 01         [ 2] 2078 	addw x,(1,sp)
      001E27 5C               [ 1] 2079 	incw x 
      001E28                       2080 	_drop 2 
      001E28 5B 02            [ 2]    1     addw sp,#2 
      001E2A 72 5F 00 01      [ 1] 2081 	clr in 
      001E2E CD 0C 23         [ 4] 2082 	call get_token
      001E31 A1 84            [ 1] 2083 	cp a,#TK_INTGR
      001E33 27 14            [ 1] 2084 	jreq 3$ 
      001E35 A1 11            [ 1] 2085 	cp a,#TK_MINUS
      001E37 26 07            [ 1] 2086 	jrne 22$
      001E39 CD 0C 23         [ 4] 2087 	call get_token 
      001E3C A1 84            [ 1] 2088 	cp a,#TK_INTGR 
      001E3E 27 06            [ 1] 2089 	jreq 23$
      001E40                       2090 22$:
      001E40 CD 1D C9         [ 4] 2091 	call rest_context 
      001E43 CC 13 BD         [ 2] 2092 	jp syntax_error
      001E46                       2093 23$:
      001E46 CD 02 1D         [ 4] 2094 	call neg_acc24	
      001E49                       2095 3$: 
      001E49 C6 00 0C         [ 1] 2096 	ld a,acc24 
      001E4C CE 00 0D         [ 2] 2097 	ldw x,acc16 
      001E4F 72 C7 00 19      [ 4] 2098 	ld [ptr16],a
      001E53 72 5C 00 1A      [ 1] 2099 	inc ptr8  
      001E57 72 CF 00 19      [ 5] 2100 	ldw [ptr16],x 
      001E5B CD 1D C9         [ 4] 2101 	call rest_context
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      001E5E CD 15 19         [ 4] 2102 	call next_token 
      001E61 A1 08            [ 1] 2103 	cp a,#TK_COMMA
      001E63 26 03            [ 1] 2104 	jrne 4$ 
      001E65 CC 1D DD         [ 2] 2105 	jp input_loop
      001E68                       2106 4$:
      001E68 A1 00            [ 1] 2107 	cp a,#TK_NONE 
      001E6A 27 07            [ 1] 2108 	jreq input_exit  
      001E6C A1 09            [ 1] 2109 	cp a,#TK_COLON 
      001E6E 27 03            [ 1] 2110     jreq input_exit 
      001E70 CC 13 BD         [ 2] 2111 	jp syntax_error 
      001E73                       2112 input_exit:
      001E73                       2113 	_drop VSIZE 
      001E73 5B 05            [ 2]    1     addw sp,#VSIZE 
      001E75 90 85            [ 2] 2114 	popw y 
      001E77 81               [ 4] 2115 	ret 
                                   2116 
                                   2117 
                                   2118 ;---------------------
                                   2119 ; BASIC: REM | ' 
                                   2120 ; skip comment to end of line 
                                   2121 ;---------------------- 
      001E78                       2122 remark::
      001E78 55 00 02 00 01   [ 1] 2123 	mov in,count 
      001E7D 81               [ 4] 2124  	ret 
                                   2125 
                                   2126 
                                   2127 ;---------------------
                                   2128 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2129 ; read in loop 'addr'  
                                   2130 ; apply & 'mask' to value 
                                   2131 ; loop while result==0.  
                                   2132 ; 'xor_mask' is used to 
                                   2133 ; invert the wait logic.
                                   2134 ; i.e. loop while not 0.
                                   2135 ;---------------------
                           000001  2136 	XMASK=1 
                           000002  2137 	MASK=2
                           000003  2138 	ADDR=3
                           000004  2139 	VSIZE=4
      001E7E                       2140 wait: 
      001E7E                       2141 	_vars VSIZE
      001E7E 52 04            [ 2]    1     sub sp,#VSIZE 
      001E80 0F 01            [ 1] 2142 	clr (XMASK,sp) 
      001E82 CD 16 F4         [ 4] 2143 	call arg_list 
      001E85 A1 02            [ 1] 2144 	cp a,#2
      001E87 24 03            [ 1] 2145 	jruge 0$
      001E89 CC 13 BD         [ 2] 2146 	jp syntax_error 
      001E8C A1 03            [ 1] 2147 0$:	cp a,#3
      001E8E 25 0C            [ 1] 2148 	jrult 1$
      001E90                       2149 	_xpop  ; xor mask 
      001E90 90 F6            [ 1]    1     ld a,(y)
      001E92 93               [ 1]    2     ldw x,y 
      001E93 EE 01            [ 2]    3     ldw x,(1,x)
      001E95 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E99 9F               [ 1] 2150 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      001E9A 6B 01            [ 1] 2151 	ld (XMASK,sp),a 
      001E9C                       2152 1$: _xpop ; mask
      001E9C 90 F6            [ 1]    1     ld a,(y)
      001E9E 93               [ 1]    2     ldw x,y 
      001E9F EE 01            [ 2]    3     ldw x,(1,x)
      001EA1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001EA5 9F               [ 1] 2153     ld a,xl  
      001EA6 6B 02            [ 1] 2154 	ld (MASK,sp),a 
      001EA8                       2155 	_xpop ; address 
      001EA8 90 F6            [ 1]    1     ld a,(y)
      001EAA 93               [ 1]    2     ldw x,y 
      001EAB EE 01            [ 2]    3     ldw x,(1,x)
      001EAD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001EB1 F6               [ 1] 2156 2$:	ld a,(x)
      001EB2 14 02            [ 1] 2157 	and a,(MASK,sp)
      001EB4 18 01            [ 1] 2158 	xor a,(XMASK,sp)
      001EB6 27 F9            [ 1] 2159 	jreq 2$ 
      001EB8                       2160 	_drop VSIZE 
      001EB8 5B 04            [ 2]    1     addw sp,#VSIZE 
      001EBA 81               [ 4] 2161 	ret 
                                   2162 
                                   2163 ;---------------------
                                   2164 ; BASIC: BSET addr,mask
                                   2165 ; set bits at 'addr' corresponding 
                                   2166 ; to those of 'mask' that are at 1.
                                   2167 ; arguments:
                                   2168 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2169 ;   mask        mask|addr
                                   2170 ; output:
                                   2171 ;	none 
                                   2172 ;--------------------------
      001EBB                       2173 bit_set:
      001EBB CD 16 F4         [ 4] 2174 	call arg_list 
      001EBE A1 02            [ 1] 2175 	cp a,#2	 
      001EC0 27 03            [ 1] 2176 	jreq 1$ 
      001EC2 CC 13 BD         [ 2] 2177 	jp syntax_error
      001EC5                       2178 1$: 
      001EC5                       2179 	_xpop ; mask 
      001EC5 90 F6            [ 1]    1     ld a,(y)
      001EC7 93               [ 1]    2     ldw x,y 
      001EC8 EE 01            [ 2]    3     ldw x,(1,x)
      001ECA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001ECE 9F               [ 1] 2180 	ld a,xl
      001ECF 88               [ 1] 2181 	push a  
      001ED0                       2182 	_xpop ; addr  
      001ED0 90 F6            [ 1]    1     ld a,(y)
      001ED2 93               [ 1]    2     ldw x,y 
      001ED3 EE 01            [ 2]    3     ldw x,(1,x)
      001ED5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001ED9 84               [ 1] 2183 	pop a 
      001EDA FA               [ 1] 2184 	or a,(x)
      001EDB F7               [ 1] 2185 	ld (x),a
      001EDC 81               [ 4] 2186 	ret 
                                   2187 
                                   2188 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                   2189 ; BASIC: BRES addr,mask
                                   2190 ; reset bits at 'addr' corresponding 
                                   2191 ; to those of 'mask' that are at 1.
                                   2192 ; arguments:
                                   2193 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2194 ;   mask	    ~mask&*addr  
                                   2195 ; output:
                                   2196 ;	none 
                                   2197 ;--------------------------
      001EDD                       2198 bit_reset:
      001EDD CD 16 F4         [ 4] 2199 	call arg_list 
      001EE0 A1 02            [ 1] 2200 	cp a,#2  
      001EE2 27 03            [ 1] 2201 	jreq 1$ 
      001EE4 CC 13 BD         [ 2] 2202 	jp syntax_error
      001EE7                       2203 1$: 
      001EE7                       2204 	_xpop ; mask 
      001EE7 90 F6            [ 1]    1     ld a,(y)
      001EE9 93               [ 1]    2     ldw x,y 
      001EEA EE 01            [ 2]    3     ldw x,(1,x)
      001EEC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001EF0 9F               [ 1] 2205 	ld a,xl 
      001EF1 43               [ 1] 2206 	cpl a
      001EF2 88               [ 1] 2207 	push a  
      001EF3                       2208 	_xpop ; addr  
      001EF3 90 F6            [ 1]    1     ld a,(y)
      001EF5 93               [ 1]    2     ldw x,y 
      001EF6 EE 01            [ 2]    3     ldw x,(1,x)
      001EF8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001EFC 84               [ 1] 2209 	pop a 
      001EFD F4               [ 1] 2210 	and a,(x)
      001EFE F7               [ 1] 2211 	ld (x),a 
      001EFF 81               [ 4] 2212 	ret 
                                   2213 
                                   2214 ;---------------------
                                   2215 ; BASIC: BTOGL addr,mask
                                   2216 ; toggle bits at 'addr' corresponding 
                                   2217 ; to those of 'mask' that are at 1.
                                   2218 ; arguments:
                                   2219 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2220 ;   mask	    mask^*addr  
                                   2221 ; output:
                                   2222 ;	none 
                                   2223 ;--------------------------
      001F00                       2224 bit_toggle:
      001F00 CD 16 F4         [ 4] 2225 	call arg_list 
      001F03 A1 02            [ 1] 2226 	cp a,#2 
      001F05 27 03            [ 1] 2227 	jreq 1$ 
      001F07 CC 13 BD         [ 2] 2228 	jp syntax_error
      001F0A                       2229 1$: _xpop ; mask 
      001F0A 90 F6            [ 1]    1     ld a,(y)
      001F0C 93               [ 1]    2     ldw x,y 
      001F0D EE 01            [ 2]    3     ldw x,(1,x)
      001F0F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F13 9F               [ 1] 2230 	ld a,xl
      001F14 88               [ 1] 2231 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      001F15                       2232 	_xpop  ; addr  
      001F15 90 F6            [ 1]    1     ld a,(y)
      001F17 93               [ 1]    2     ldw x,y 
      001F18 EE 01            [ 2]    3     ldw x,(1,x)
      001F1A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F1E 84               [ 1] 2233 	pop a 
      001F1F F8               [ 1] 2234 	xor a,(x)
      001F20 F7               [ 1] 2235 	ld (x),a 
      001F21 81               [ 4] 2236 	ret 
                                   2237 
                                   2238 
                                   2239 ;---------------------
                                   2240 ; BASIC: BTEST(addr,bit)
                                   2241 ; return bit value at 'addr' 
                                   2242 ; bit is in range {0..7}.
                                   2243 ; arguments:
                                   2244 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2245 ;   bit 	    bit position {0..7}  
                                   2246 ; output:
                                   2247 ;	A:X       bit value  
                                   2248 ;--------------------------
      001F22                       2249 bit_test:
      001F22 CD 16 EF         [ 4] 2250 	call func_args 
      001F25 A1 02            [ 1] 2251 	cp a,#2
      001F27 27 03            [ 1] 2252 	jreq 0$
      001F29 CC 13 BD         [ 2] 2253 	jp syntax_error
      001F2C                       2254 0$:	
      001F2C                       2255 	_xpop 
      001F2C 90 F6            [ 1]    1     ld a,(y)
      001F2E 93               [ 1]    2     ldw x,y 
      001F2F EE 01            [ 2]    3     ldw x,(1,x)
      001F31 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F35 9F               [ 1] 2256 	ld a,xl 
      001F36 A4 07            [ 1] 2257 	and a,#7
      001F38 88               [ 1] 2258 	push a   
      001F39 A6 01            [ 1] 2259 	ld a,#1 
      001F3B 0D 01            [ 1] 2260 1$: tnz (1,sp)
      001F3D 27 05            [ 1] 2261 	jreq 2$
      001F3F 48               [ 1] 2262 	sll a 
      001F40 0A 01            [ 1] 2263 	dec (1,sp)
      001F42 20 F7            [ 2] 2264 	jra 1$
      001F44 6B 01            [ 1] 2265 2$: ld (1,sp),a  
      001F46                       2266 	_xpop ; address  
      001F46 90 F6            [ 1]    1     ld a,(y)
      001F48 93               [ 1]    2     ldw x,y 
      001F49 EE 01            [ 2]    3     ldw x,(1,x)
      001F4B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F4F 84               [ 1] 2267 	pop a 
      001F50 F4               [ 1] 2268 	and a,(x)
      001F51 27 02            [ 1] 2269 	jreq 3$
      001F53 A6 01            [ 1] 2270 	ld a,#1 
      001F55 5F               [ 1] 2271 3$:	clrw x 
      001F56 97               [ 1] 2272 	ld xl,a
      001F57 4F               [ 1] 2273 	clr a  
      001F58 81               [ 4] 2274 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



                                   2275 
                                   2276 ;--------------------
                                   2277 ; BASIC: POKE addr,byte
                                   2278 ; put a byte at addr 
                                   2279 ;--------------------
      001F59                       2280 poke:
      001F59 CD 16 F4         [ 4] 2281 	call arg_list 
      001F5C A1 02            [ 1] 2282 	cp a,#2
      001F5E 27 03            [ 1] 2283 	jreq 1$
      001F60 CC 13 BD         [ 2] 2284 	jp syntax_error
      001F63                       2285 1$:	
      001F63                       2286 	_xpop ; byte   
      001F63 90 F6            [ 1]    1     ld a,(y)
      001F65 93               [ 1]    2     ldw x,y 
      001F66 EE 01            [ 2]    3     ldw x,(1,x)
      001F68 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F6C 9F               [ 1] 2287     ld a,xl 
      001F6D 88               [ 1] 2288 	push a 
      001F6E                       2289 	_xpop ; address 
      001F6E 90 F6            [ 1]    1     ld a,(y)
      001F70 93               [ 1]    2     ldw x,y 
      001F71 EE 01            [ 2]    3     ldw x,(1,x)
      001F73 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F77 84               [ 1] 2290 	pop a 
      001F78 F7               [ 1] 2291 	ld (x),a 
      001F79 81               [ 4] 2292 	ret 
                                   2293 
                                   2294 ;-----------------------
                                   2295 ; BASIC: PEEK(addr)
                                   2296 ; get the byte at addr 
                                   2297 ; input:
                                   2298 ;	none 
                                   2299 ; output:
                                   2300 ;	X 		value 
                                   2301 ;-----------------------
      001F7A                       2302 peek:
      001F7A CD 16 EF         [ 4] 2303 	call func_args
      001F7D A1 01            [ 1] 2304 	cp a,#1 
      001F7F 27 03            [ 1] 2305 	jreq 1$
      001F81 CC 13 BD         [ 2] 2306 	jp syntax_error
      001F84                       2307 1$: _xpop ; address  
      001F84 90 F6            [ 1]    1     ld a,(y)
      001F86 93               [ 1]    2     ldw x,y 
      001F87 EE 01            [ 2]    3     ldw x,(1,x)
      001F89 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F8D C7 00 18         [ 1] 2308 	ld farptr,a 
      001F90 CF 00 19         [ 2] 2309 	ldw ptr16,x 
      001F93 92 BC 00 18      [ 5] 2310 	ldf a,[farptr]
      001F97 5F               [ 1] 2311 	clrw x 
      001F98 97               [ 1] 2312 	ld xl,a 
      001F99 4F               [ 1] 2313 	clr a 
      001F9A 81               [ 4] 2314 	ret 
                                   2315 
                                   2316 ;---------------------------
                                   2317 ; BASIC IF expr : instructions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                                   2318 ; evaluate expr and if true 
                                   2319 ; execute instructions on same line. 
                                   2320 ;----------------------------
      001F9B                       2321 if: 
      001F9B CD 19 4D         [ 4] 2322 	call condition  
      001F9E                       2323 	_xpop 
      001F9E 90 F6            [ 1]    1     ld a,(y)
      001FA0 93               [ 1]    2     ldw x,y 
      001FA1 EE 01            [ 2]    3     ldw x,(1,x)
      001FA3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001FA7 4D               [ 1] 2324 	tnz  a  
      001FA8 26 0D            [ 1] 2325 	jrne 9$
      001FAA 5D               [ 2] 2326 	tnzw x 
      001FAB 26 0A            [ 1] 2327 	jrne 9$  
                                   2328 ;skip to next line
      001FAD 55 00 02 00 01   [ 1] 2329 	mov in,count
      001FB2                       2330 	_drop 2 
      001FB2 5B 02            [ 2]    1     addw sp,#2 
      001FB4 CC 14 63         [ 2] 2331 	jp next_line
      001FB7 81               [ 4] 2332 9$:	ret 
                                   2333 
                                   2334 ;------------------------
                                   2335 ; BASIC: FOR var=expr 
                                   2336 ; set variable to expression 
                                   2337 ; leave variable address 
                                   2338 ; on stack and set
                                   2339 ; FLOOP bit in 'flags'
                                   2340 ;-----------------
                           000001  2341 	RETL1=1 ; return address  
                           000003  2342 	FSTEP=3  ; variable increment int24
                           000006  2343 	LIMIT=6 ; loop limit, int24  
                           000009  2344 	CVAR=9   ; control variable 
                           00000B  2345 	INW=11   ;  in.w saved
                           00000D  2346 	BPTR=13 ; baseptr saved
                           00000D  2347 	VSIZE=13  
      001FB8                       2348 for: ; { -- var_addr }
      001FB8 85               [ 2] 2349 	popw x ; call return address 
      001FB9                       2350 	_vars VSIZE 
      001FB9 52 0D            [ 2]    1     sub sp,#VSIZE 
      001FBB 89               [ 2] 2351 	pushw x  ; RETL1 
      001FBC A6 85            [ 1] 2352 	ld a,#TK_VAR 
      001FBE CD 16 E2         [ 4] 2353 	call expect
      001FC1 CD 15 41         [ 4] 2354 	call get_addr
      001FC4 1F 09            [ 2] 2355 	ldw (CVAR,sp),x  ; control variable 
      001FC6 CD 1A 22         [ 4] 2356 	call let_eval 
      001FC9 72 14 00 22      [ 1] 2357 	bset flags,#FLOOP 
      001FCD CD 15 19         [ 4] 2358 	call next_token 
      001FD0 A1 80            [ 1] 2359 	cp a,#TK_CMD 
      001FD2 27 03            [ 1] 2360 	jreq 1$
      001FD4 CC 13 BD         [ 2] 2361 	jp syntax_error
      001FD7                       2362 1$:  
      001FD7                       2363 	_get_code_addr
      001FD7 FE               [ 2]    1         ldw x,(x)
      001FD8 72 5C 00 01      [ 1]    2         inc in 
      001FDC 72 5C 00 01      [ 1]    3         inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      001FE0 A3 1F E8         [ 2] 2364 	cpw x,#to   
      001FE3 27 03            [ 1] 2365 	jreq to
      001FE5 CC 13 BD         [ 2] 2366 	jp syntax_error 
                                   2367 
                                   2368 ;-----------------------------------
                                   2369 ; BASIC: TO expr 
                                   2370 ; second part of FOR loop initilization
                                   2371 ; leave limit on stack and set 
                                   2372 ; FTO bit in 'flags'
                                   2373 ;-----------------------------------
      001FE8                       2374 to: ; { var_addr -- var_addr limit step }
      001FE8 72 04 00 22 03   [ 2] 2375 	btjt flags,#FLOOP,1$
      001FED CC 13 BD         [ 2] 2376 	jp syntax_error
      001FF0 CD 18 34         [ 4] 2377 1$: call expression   
      001FF3 A1 84            [ 1] 2378 	cp a,#TK_INTGR 
      001FF5 27 03            [ 1] 2379 	jreq 2$ 
      001FF7 CC 13 BD         [ 2] 2380 	jp syntax_error
      001FFA                       2381 2$: _xpop
      001FFA 90 F6            [ 1]    1     ld a,(y)
      001FFC 93               [ 1]    2     ldw x,y 
      001FFD EE 01            [ 2]    3     ldw x,(1,x)
      001FFF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002003 6B 06            [ 1] 2382 	ld (LIMIT,sp),a 
      002005 1F 07            [ 2] 2383 	ldw (LIMIT+1,sp),x
      002007 CD 15 19         [ 4] 2384 	call next_token
      00200A A1 00            [ 1] 2385 	cp a,#TK_NONE  
      00200C 27 17            [ 1] 2386 	jreq 4$ 
      00200E A1 80            [ 1] 2387 	cp a,#TK_CMD
      002010 26 0E            [ 1] 2388 	jrne 3$
      002012                       2389 	_get_code_addr
      002012 FE               [ 2]    1         ldw x,(x)
      002013 72 5C 00 01      [ 1]    2         inc in 
      002017 72 5C 00 01      [ 1]    3         inc in 
      00201B A3 20 2E         [ 2] 2390 	cpw x,#step 
      00201E 27 0E            [ 1] 2391 	jreq step
      002020                       2392 3$:	
      002020                       2393 	_unget_token   	 
      002020 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002025                       2394 4$:	
      002025 0F 03            [ 1] 2395 	clr (FSTEP,sp) 
      002027 AE 00 01         [ 2] 2396 	ldw x,#1   ; default step  
      00202A 1F 04            [ 2] 2397 	ldw (FSTEP+1,sp),x 
      00202C 20 2F            [ 2] 2398 	jra store_loop_addr 
                                   2399 
                                   2400 
                                   2401 ;----------------------------------
                                   2402 ; BASIC: STEP expr 
                                   2403 ; optional third par of FOR loop
                                   2404 ; initialization. 	
                                   2405 ;------------------------------------
      00202E                       2406 step: ; {var limit -- var limit step}
      00202E 72 04 00 22 03   [ 2] 2407 	btjt flags,#FLOOP,1$
      002033 CC 13 BD         [ 2] 2408 	jp syntax_error
      002036 CD 18 34         [ 4] 2409 1$: call expression 
      002039 A1 84            [ 1] 2410 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      00203B 27 03            [ 1] 2411 	jreq 2$
      00203D CC 13 BD         [ 2] 2412 	jp syntax_error
      002040                       2413 2$:	
      002040                       2414 	_xpop 
      002040 90 F6            [ 1]    1     ld a,(y)
      002042 93               [ 1]    2     ldw x,y 
      002043 EE 01            [ 2]    3     ldw x,(1,x)
      002045 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002049 6B 03            [ 1] 2415 	ld (FSTEP,sp),a 
      00204B 1F 04            [ 2] 2416 	ldw (FSTEP+1,sp),x ; step
                                   2417 ; if step < 0 decrement LIMIT 
      00204D 4D               [ 1] 2418 	tnz a
      00204E 2A 0D            [ 1] 2419 	jrpl store_loop_addr 
      002050 7B 06            [ 1] 2420 	ld a,(LIMIT,sp)
      002052 1E 07            [ 2] 2421 	ldw x,(LIMIT+1,sp)
      002054 1D 00 01         [ 2] 2422 	subw x,#1 
      002057 A2 00            [ 1] 2423 	sbc a,#0 
      002059 6B 06            [ 1] 2424 	ld (LIMIT,sp),a 
      00205B 1F 07            [ 2] 2425 	ldw (LIMIT+1,sp),x 
                                   2426 ; leave loop back entry point on cstack 
                                   2427 ; cstack is 1 call deep from interpreter
      00205D                       2428 store_loop_addr:
      00205D CE 00 04         [ 2] 2429 	ldw x,basicptr
      002060 1F 0D            [ 2] 2430 	ldw (BPTR,sp),x 
      002062 CE 00 00         [ 2] 2431 	ldw x,in.w 
      002065 1F 0B            [ 2] 2432 	ldw (INW,sp),x   
      002067 72 15 00 22      [ 1] 2433 	bres flags,#FLOOP 
      00206B 72 5C 00 1F      [ 1] 2434 	inc loop_depth  
      00206F 81               [ 4] 2435 	ret 
                                   2436 
                                   2437 ;--------------------------------
                                   2438 ; BASIC: NEXT var 
                                   2439 ; FOR loop control 
                                   2440 ; increment variable with step 
                                   2441 ; and compare with limit 
                                   2442 ; loop if threshold not crossed.
                                   2443 ; else stack. 
                                   2444 ; and decrement 'loop_depth' 
                                   2445 ;--------------------------------
      002070                       2446 next: ; {var limit step retl1 -- [var limit step ] }
      002070 72 5D 00 1F      [ 1] 2447 	tnz loop_depth 
      002074 26 03            [ 1] 2448 	jrne 1$ 
      002076 CC 13 BD         [ 2] 2449 	jp syntax_error 
      002079                       2450 1$: 
      002079 A6 85            [ 1] 2451 	ld a,#TK_VAR 
      00207B CD 16 E2         [ 4] 2452 	call expect
      00207E CD 15 41         [ 4] 2453 	call get_addr 
                                   2454 ; check for good variable after NEXT 	 
      002081 13 09            [ 2] 2455 	cpw x,(CVAR,sp)
      002083 27 03            [ 1] 2456 	jreq 2$  
      002085 CC 13 BD         [ 2] 2457 	jp syntax_error ; not the good one 
      002088                       2458 2$: 
      002088 CF 00 19         [ 2] 2459 	ldw ptr16,x 
                                   2460 	; increment variable 
      00208B F6               [ 1] 2461 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      00208C EE 01            [ 2] 2462 	ldw x,(1,x)  ; get var value 
      00208E 72 FB 04         [ 2] 2463 	addw x,(FSTEP+1,sp) ; var+step 
      002091 19 03            [ 1] 2464 	adc a,(FSTEP,sp)
      002093 72 C7 00 19      [ 4] 2465 	ld [ptr16],a
      002097 72 5C 00 1A      [ 1] 2466 	inc ptr8  
      00209B 72 CF 00 19      [ 5] 2467 	ldw [ptr16],x 
      00209F C7 00 0C         [ 1] 2468 	ld acc24,a 
      0020A2 CF 00 0D         [ 2] 2469 	ldw acc16,x 
      0020A5 7B 06            [ 1] 2470 	ld a,(LIMIT,sp)
      0020A7 1E 07            [ 2] 2471 	ldw x,(LIMIT+1,sp)
      0020A9 72 B0 00 0D      [ 2] 2472 	subw x,acc16 
      0020AD C2 00 0C         [ 1] 2473 	sbc a,acc24
      0020B0 18 03            [ 1] 2474 	xor a,(FSTEP,sp)
      0020B2 A8 80            [ 1] 2475 	xor a,#0x80
      0020B4 2B 12            [ 1] 2476 	jrmi loop_back  
      0020B6 20 25            [ 2] 2477 	jra loop_done   
                                   2478 ; check sign of STEP  
      0020B8 7B 03            [ 1] 2479 	ld a,(FSTEP,sp)
      0020BA 2A 07            [ 1] 2480 	jrpl 4$
                                   2481 ;negative step
      0020BC C6 00 0E         [ 1] 2482     ld a,acc8 
      0020BF 2F 07            [ 1] 2483 	jrslt loop_back   
      0020C1 20 1A            [ 2] 2484 	jra loop_done  
      0020C3                       2485 4$: ; positive step
      0020C3 72 0E 00 0E 15   [ 2] 2486 	btjt acc8,#7,loop_done 
      0020C8                       2487 loop_back:
      0020C8 1E 0D            [ 2] 2488 	ldw x,(BPTR,sp)
      0020CA CF 00 04         [ 2] 2489 	ldw basicptr,x 
      0020CD 72 01 00 22 05   [ 2] 2490 	btjf flags,#FRUN,1$ 
      0020D2 E6 02            [ 1] 2491 	ld a,(2,x)
      0020D4 C7 00 02         [ 1] 2492 	ld count,a
      0020D7 1E 0B            [ 2] 2493 1$:	ldw x,(INW,sp)
      0020D9 CF 00 00         [ 2] 2494 	ldw in.w,x 
      0020DC 81               [ 4] 2495 	ret 
      0020DD                       2496 loop_done:
                                   2497 	; remove loop data from stack  
      0020DD 85               [ 2] 2498 	popw x
      0020DE                       2499 	_drop VSIZE 
      0020DE 5B 0D            [ 2]    1     addw sp,#VSIZE 
      0020E0 72 5A 00 1F      [ 1] 2500 	dec loop_depth 
      0020E4 FC               [ 2] 2501 	jp (x)
                                   2502 
                                   2503 ;----------------------------
                                   2504 ; called by goto/gosub
                                   2505 ; to get target line number 
                                   2506 ; output:
                                   2507 ;    x    line address 
                                   2508 ;---------------------------
      0020E5                       2509 get_target_line:
      0020E5 CD 15 19         [ 4] 2510 	call next_token  
      0020E8 A1 84            [ 1] 2511 	cp a,#TK_INTGR
      0020EA 27 07            [ 1] 2512 	jreq get_target_line_addr 
      0020EC A1 03            [ 1] 2513 	cp a,#TK_LABEL 
      0020EE 27 26            [ 1] 2514 	jreq look_target_symbol 
      0020F0 CC 13 BD         [ 2] 2515 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



                                   2516 ; the target is a line number 
                                   2517 ; search it. 
      0020F3                       2518 get_target_line_addr:
      0020F3 90 89            [ 2] 2519 	pushw y 
      0020F5 CD 15 4B         [ 4] 2520 	call get_int24 ; line # 
      0020F8 4F               [ 1] 2521 	clr a
      0020F9 90 CE 00 04      [ 2] 2522 	ldw y,basicptr 
      0020FD 90 FE            [ 2] 2523 	ldw y,(y)
      0020FF 90 89            [ 2] 2524 	pushw y 
      002101 13 01            [ 2] 2525 	cpw x,(1,sp)
      002103                       2526 	_drop 2  
      002103 5B 02            [ 2]    1     addw sp,#2 
      002105 25 01            [ 1] 2527 	jrult 11$
      002107 4C               [ 1] 2528 	inc a 
      002108                       2529 11$: ; scan program for this line# 	
      002108 CD 09 6B         [ 4] 2530 	call search_lineno  
      00210B 5D               [ 2] 2531 	tnzw x ; 0| line# address 
      00210C 26 05            [ 1] 2532 	jrne 2$ 
      00210E A6 05            [ 1] 2533 	ld a,#ERR_NO_LINE 
      002110 CC 13 BF         [ 2] 2534 	jp tb_error 
      002113 90 85            [ 2] 2535 2$:	popw y  
      002115 81               [ 4] 2536 	ret 
                                   2537 
                                   2538 ; the GOTO|GOSUB target is a symbol.
                                   2539 ; output:
                                   2540 ;    X    line address|0 
      002116                       2541 look_target_symbol:
      002116 90 89            [ 2] 2542 	pushw y 
      002118 89               [ 2] 2543 	pushw x 
      002119 CD 15 32         [ 4] 2544 	call skip_string 
      00211C 72 5F 00 0D      [ 1] 2545 	clr acc16 
      002120 90 CE 00 1B      [ 2] 2546 	ldw y,txtbgn 
      002124 90 E6 03         [ 1] 2547 1$:	ld a,(3,y) ; first TK_ID on line 
      002127 A1 03            [ 1] 2548 	cp a,#TK_LABEL 
      002129 27 15            [ 1] 2549 	jreq 3$ 
      00212B 90 E6 02         [ 1] 2550 2$:	ld a,(2,y); line length 
      00212E C7 00 0E         [ 1] 2551 	ld acc8,a 
      002131 72 B9 00 0D      [ 2] 2552 	addw y,acc16 ;point to next line 
      002135 90 C3 00 1D      [ 2] 2553 	cpw y,txtend 
      002139 25 E9            [ 1] 2554 	jrult 1$
      00213B A6 0A            [ 1] 2555 	ld a,#ERR_BAD_VALUE
      00213D CC 13 BF         [ 2] 2556 	jp tb_error 
      002140                       2557 3$: ; found a TK_LABEL 
                                   2558 	; compare with GOTO|GOSUB target 
      002140 90 89            [ 2] 2559 	pushw y ; line address 
      002142 72 A9 00 04      [ 2] 2560 	addw y,#4 ; label string 
      002146 1E 03            [ 2] 2561 	ldw x,(3,sp) ; target string 
      002148 CD 10 C4         [ 4] 2562 	call strcmp
      00214B 26 04            [ 1] 2563 	jrne 4$
      00214D 90 85            [ 2] 2564 	popw y 
      00214F 20 DA            [ 2] 2565 	jra 2$ 
      002151                       2566 4$: ; target found 
      002151 85               [ 2] 2567 	popw x ;  address line target  
      002152                       2568 	_drop 2 ; target string 
      002152 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002154 90 85            [ 2] 2569 	popw y 
      002156 81               [ 4] 2570 	ret
                                   2571 
                                   2572 
                                   2573 ;--------------------------------
                                   2574 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2575 ; selective goto or gosub 
                                   2576 ;--------------------------------
      002157                       2577 cmd_on:
      002157 CD 16 D7         [ 4] 2578 	call runtime_only
      00215A CD 18 34         [ 4] 2579 0$:	call expression 
      00215D A1 84            [ 1] 2580 	cp a,#TK_INTGR
      00215F 27 03            [ 1] 2581 	jreq 1$
      002161 CC 13 BD         [ 2] 2582 	jp syntax_error
      002164                       2583 1$: _xpop
      002164 90 F6            [ 1]    1     ld a,(y)
      002166 93               [ 1]    2     ldw x,y 
      002167 EE 01            [ 2]    3     ldw x,(1,x)
      002169 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2584 ; the selector is the element indice 
                                   2585 ; in the list of arguments. {1..#elements} 
      00216D 9F               [ 1] 2586 	ld a,xl ; keep only bits 7..0
      00216E 27 68            [ 1] 2587 	jreq 9$ ; element # begin at 1. 
      002170 88               [ 1] 2588 	push a  ; selector  
      002171 CD 15 19         [ 4] 2589 	call next_token
      002174 A1 80            [ 1] 2590 	cp a,#TK_CMD 
      002176 27 03            [ 1] 2591 	jreq 2$ 
      002178 CC 13 BD         [ 2] 2592 	jp syntax_error 
      00217B                       2593 2$: _get_code_addr
      00217B FE               [ 2]    1         ldw x,(x)
      00217C 72 5C 00 01      [ 1]    2         inc in 
      002180 72 5C 00 01      [ 1]    3         inc in 
                                   2594 ;; must be a GOTO or GOSUB 
      002184 A3 21 E2         [ 2] 2595 	cpw x,#goto 
      002187 27 08            [ 1] 2596 	jreq 4$
      002189 A3 21 F5         [ 2] 2597 	cpw x,#gosub 
      00218C 27 03            [ 1] 2598 	jreq 4$ 
      00218E CC 13 BD         [ 2] 2599 	jp syntax_error 
      002191                       2600 4$: 
      002191 84               [ 1] 2601 	pop a 
      002192 89               [ 2] 2602 	pushw x ; save routine address 	
      002193 88               [ 1] 2603 	push a  ; selector  
      002194                       2604 5$: ; skip elements in list until selector==0 
      002194 0A 01            [ 1] 2605 	dec (1,sp)
      002196 27 26            [ 1] 2606 	jreq 6$ 
                                   2607 ; can be a line# or a label 
      002198 CD 15 19         [ 4] 2608 	call next_token 
      00219B A1 84            [ 1] 2609 	cp a,#TK_INTGR 
      00219D 27 07            [ 1] 2610 	jreq 52$
      00219F A1 03            [ 1] 2611 	cp a,#TK_LABEL 
      0021A1 27 0D            [ 1] 2612 	jreq 54$
      0021A3 CC 13 BD         [ 2] 2613 	jp syntax_error 
      0021A6                       2614 52$: ; got a line number 
      0021A6 C6 00 01         [ 1] 2615 	ld a,in ; skip over int24 value 
      0021A9 AB 03            [ 1] 2616 	add a,#CELL_SIZE ; integer size  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0021AB C7 00 01         [ 1] 2617 	ld in,a 
      0021AE 20 03            [ 2] 2618 	jra 56$
      0021B0 CD 15 32         [ 4] 2619 54$: call skip_string ; skip over label 	
      0021B3                       2620 56$: ; if another element comma present 
      0021B3 CD 15 19         [ 4] 2621 	call next_token
      0021B6 A1 08            [ 1] 2622 	cp a,#TK_COMMA 
      0021B8 27 DA            [ 1] 2623 	jreq 5$ 
                                   2624 ; arg list exhausted, selector to big 
                                   2625 ; continue execution on next line 
      0021BA                       2626 	_drop 3 ; drop selector and GOTO|GOSUB address 
      0021BA 5B 03            [ 2]    1     addw sp,#3 
      0021BC 20 1A            [ 2] 2627 	jra 9$
      0021BE                       2628 6$: ;at selected position  
      0021BE                       2629 	_drop 1 ; discard selector
      0021BE 5B 01            [ 2]    1     addw sp,#1 
                                   2630 ; here only the routine address 
                                   2631 ; of GOTO|GOSUB is on stack 
      0021C0 CD 20 E5         [ 4] 2632     call get_target_line
      0021C3 CF 00 19         [ 2] 2633 	ldw ptr16,x 	
      0021C6 55 00 02 00 01   [ 1] 2634 	mov in,count ; move to end of line  
      0021CB 85               [ 2] 2635 	popw x ; cmd address, GOTO||GOSUB 
      0021CC A3 21 E2         [ 2] 2636 	cpw x,#goto 
      0021CF 26 05            [ 1] 2637 	jrne 7$ 
      0021D1 CE 00 19         [ 2] 2638 	ldw x,ptr16 
      0021D4 20 12            [ 2] 2639 	jra jp_to_target
      0021D6                       2640 7$: 
      0021D6 20 26            [ 2] 2641 	jra gosub_2 ; target in ptr16 
      0021D8                       2642 9$: ; expr out of range skip to end of line
                                   2643     ; this will force a fall to next line  
      0021D8 55 00 02 00 01   [ 1] 2644 	mov in,count
      0021DD                       2645 	_drop 2
      0021DD 5B 02            [ 2]    1     addw sp,#2 
      0021DF CC 14 63         [ 2] 2646 	jp next_line  
                                   2647 
                                   2648 
                                   2649 ;------------------------
                                   2650 ; BASIC: GOTO line# 
                                   2651 ; jump to line# 
                                   2652 ; here cstack is 2 call deep from interpreter 
                                   2653 ;------------------------
      0021E2                       2654 goto:
      0021E2 CD 16 D7         [ 4] 2655 	call runtime_only
      0021E5                       2656 goto_1:
      0021E5 CD 20 E5         [ 4] 2657 	call get_target_line
      0021E8                       2658 jp_to_target:
      0021E8 CF 00 04         [ 2] 2659 	ldw basicptr,x 
      0021EB E6 02            [ 1] 2660 	ld a,(2,x)
      0021ED C7 00 02         [ 1] 2661 	ld count,a 
      0021F0 35 03 00 01      [ 1] 2662 	mov in,#3 
      0021F4 81               [ 4] 2663 	ret 
                                   2664 
                                   2665 
                                   2666 ;--------------------
                                   2667 ; BASIC: GOSUB line#
                                   2668 ; basic subroutine call
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



                                   2669 ; actual line# and basicptr 
                                   2670 ; are saved on cstack
                                   2671 ; here cstack is 2 call deep from interpreter 
                                   2672 ;--------------------
                           000001  2673 	RET_ADDR=1 ; subroutine return address 
                           000003  2674 	RET_BPTR=3 ; basicptr return point 
                           000005  2675 	RET_INW=5  ; in.w return point 
                           000004  2676 	VSIZE=4 
      0021F5                       2677 gosub:
      0021F5 CD 16 D7         [ 4] 2678 	call runtime_only
      0021F8                       2679 gosub_1:
      0021F8 CD 20 E5         [ 4] 2680 	call get_target_line 
      0021FB CF 00 19         [ 2] 2681 	ldw ptr16,x
      0021FE                       2682 gosub_2: 
      0021FE 85               [ 2] 2683 	popw x 
      0021FF                       2684 	_vars VSIZE  
      0021FF 52 04            [ 2]    1     sub sp,#VSIZE 
      002201 89               [ 2] 2685 	pushw x ; RET_ADDR 
                                   2686 ; save BASIC subroutine return point.   
      002202 CE 00 04         [ 2] 2687 	ldw x,basicptr
      002205 1F 03            [ 2] 2688 	ldw (RET_BPTR,sp),x 
      002207 CE 00 00         [ 2] 2689 	ldw x,in.w 
      00220A 1F 05            [ 2] 2690 	ldw (RET_INW,sp),x
      00220C CE 00 19         [ 2] 2691 	ldw x,ptr16  
      00220F 20 D7            [ 2] 2692 	jra jp_to_target
                                   2693 
                                   2694 ;------------------------
                                   2695 ; BASIC: RETURN 
                                   2696 ; exit from BASIC subroutine 
                                   2697 ;------------------------
      002211                       2698 return:
      002211 CD 16 D7         [ 4] 2699 	call runtime_only
      002214 1E 03            [ 2] 2700 	ldw x,(RET_BPTR,sp) 
      002216 CF 00 04         [ 2] 2701 	ldw basicptr,x
      002219 E6 02            [ 1] 2702 	ld a,(2,x)
      00221B C7 00 02         [ 1] 2703 	ld count,a  
      00221E 1E 05            [ 2] 2704 	ldw x,(RET_INW,sp)
      002220 CF 00 00         [ 2] 2705 	ldw in.w,x 
      002223 85               [ 2] 2706 	popw x 
      002224                       2707 	_drop VSIZE 
      002224 5B 04            [ 2]    1     addw sp,#VSIZE 
      002226 FC               [ 2] 2708 	jp (x)
                                   2709 
                                   2710 ;---------------------------------
                                   2711 ; check if A:X contain the address 
                                   2712 ; of a program in FLASH 
                                   2713 ; output:
                                   2714 ;     Z    set is progam 
                                   2715 ;----------------------------------
      002227                       2716 is_program_addr:
      002227 4D               [ 1] 2717 	tnz a 
      002228 26 0D            [ 1] 2718 	jrne 9$
      00222A A3 34 00         [ 2] 2719 	cpw x,#app_space 
      00222D 25 07            [ 1] 2720 	jrult 8$
      00222F 89               [ 2] 2721 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002230 CD 25 B8         [ 4] 2722 	call qsign 
      002233 85               [ 2] 2723 	popw x 
      002234 27 01            [ 1] 2724 	jreq 9$ 
      002236 43               [ 1] 2725 8$:	cpl a ; clr Z bit  
      002237 81               [ 4] 2726 9$:	ret 
                                   2727 
                                   2728 ;----------------------------------
                                   2729 ; BASIC: RUN [label]
                                   2730 ; run BASIC program in RAM
                                   2731 ;----------------------------------- 
      002238                       2732 cmd_run: 
      002238 72 01 00 22 02   [ 2] 2733 	btjf flags,#FRUN,0$  
      00223D 4F               [ 1] 2734 	clr a 
      00223E 81               [ 4] 2735 	ret
      00223F                       2736 0$: ; check for STOP condition 
      00223F 72 09 00 22 12   [ 2] 2737 	btjf flags,#FBREAK,1$
      002244                       2738 	_drop 2 
      002244 5B 02            [ 2]    1     addw sp,#2 
      002246 CD 1D C9         [ 4] 2739 	call rest_context
      002249                       2740 	_drop CTXT_SIZE 
      002249 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      00224B 72 19 00 22      [ 1] 2741 	bres flags,#FBREAK 
      00224F 72 10 00 22      [ 1] 2742 	bset flags,#FRUN 
      002253 CC 14 5B         [ 2] 2743 	jp interpreter 
      002256                       2744 1$:	; check for label option 
      002256 CD 15 19         [ 4] 2745 	call next_token 
      002259 A1 03            [ 1] 2746 	cp a,#TK_LABEL 
      00225B 26 1F            [ 1] 2747 	jrne 3$
      00225D 89               [ 2] 2748 	pushw x 
      00225E CD 15 32         [ 4] 2749 	call skip_string 
      002261 85               [ 2] 2750 	popw x  
      002262 CD 2F 13         [ 4] 2751 	call search_program
      002265 26 05            [ 1] 2752 	jrne 2$
      002267 A6 12            [ 1] 2753 	ld a,#ERR_NO_PROGRAM
      002269 CC 13 BF         [ 2] 2754 	jp tb_error 
      00226C CF 00 1B         [ 2] 2755 2$: ldw txtbgn,x 
      00226F 1D 00 02         [ 2] 2756 	subw x,#2 
      002272 FE               [ 2] 2757 	ldw x,(x)
      002273 72 BB 00 1B      [ 2] 2758 	addw x,txtbgn 
      002277 CF 00 1D         [ 2] 2759 	ldw txtend,x 
      00227A 20 19            [ 2] 2760 	jra run_it 	
      00227C                       2761 3$:	_unget_token 
      00227C 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002281 CE 00 1B         [ 2] 2762 	ldw x,txtbgn
      002284 C3 00 1D         [ 2] 2763 	cpw x,txtend 
      002287 2B 0C            [ 1] 2764 	jrmi run_it 
      002289 AE 13 14         [ 2] 2765 	ldw x,#err_no_prog
      00228C CD 06 82         [ 4] 2766 	call puts 
      00228F 55 00 02 00 01   [ 1] 2767 	mov in,count
      002294 81               [ 4] 2768 	ret 
      002295                       2769 run_it:	 
      002295                       2770 	_drop 2 ; drop return address 
      002295 5B 02            [ 2]    1     addw sp,#2 
      002297                       2771 run_it_02: 
      002297 CD 1A 01         [ 4] 2772     call ubound 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      00229A CD 11 29         [ 4] 2773 	call clear_vars
                                   2774 ; initialize DIM variables pointers 
      00229D CE 00 1D         [ 2] 2775 	ldw x,txtend 
      0022A0 CF 00 2F         [ 2] 2776 	ldw dvar_bgn,x 
      0022A3 CF 00 31         [ 2] 2777 	ldw dvar_end,x 	 
                                   2778 ; clear data pointer 
      0022A6 5F               [ 1] 2779 	clrw x 
      0022A7 CF 00 06         [ 2] 2780 	ldw data_ptr,x 
      0022AA 72 5F 00 08      [ 1] 2781 	clr data_ofs 
      0022AE 72 5F 00 09      [ 1] 2782 	clr data_len 
                                   2783 ; initialize BASIC pointer 
      0022B2 CE 00 1B         [ 2] 2784 	ldw x,txtbgn 
      0022B5 CF 00 04         [ 2] 2785 	ldw basicptr,x 
      0022B8 E6 02            [ 1] 2786 	ld a,(2,x)
      0022BA C7 00 02         [ 1] 2787 	ld count,a
      0022BD 35 03 00 01      [ 1] 2788 	mov in,#3	
      0022C1 72 10 00 22      [ 1] 2789 	bset flags,#FRUN 
      0022C5 CC 14 5B         [ 2] 2790 	jp interpreter 
                                   2791 
                                   2792 
                                   2793 ;----------------------
                                   2794 ; BASIC: END
                                   2795 ; end running program
                                   2796 ;---------------------- 
                           000001  2797 	CHAIN_BP=1 
                           000003  2798 	CHAIN_IN=3
                           000005  2799 	CHAIN_TXTBGN=5
                           000007  2800 	CHAIN_TXTEND=7
                           000008  2801 	CHAIN_CNTX_SIZE=8  
      0022C8                       2802 cmd_end: 
      0022C8                       2803 	_drop 2 ; no need for return address 
      0022C8 5B 02            [ 2]    1     addw sp,#2 
                                   2804 ; check for chained program 
      0022CA 72 5D 00 33      [ 1] 2805 	tnz chain_level
      0022CE 27 1D            [ 1] 2806 	jreq 8$
                                   2807 ; restore chain context 
      0022D0 72 5A 00 33      [ 1] 2808 	dec chain_level 
      0022D4 1E 01            [ 2] 2809 	ldw x,(CHAIN_BP,sp) ; chain saved basicptr 
      0022D6 CF 00 04         [ 2] 2810 	ldw basicptr,x 
      0022D9 1E 03            [ 2] 2811 	ldw x,(CHAIN_IN,sp) ; chain saved in and count  
      0022DB CF 00 01         [ 2] 2812 	ldw in,x 
      0022DE 1E 05            [ 2] 2813 	ldw x,(CHAIN_TXTBGN,sp)
      0022E0 CF 00 1B         [ 2] 2814 	ldw txtbgn,x 
      0022E3 1E 07            [ 2] 2815 	ldw x,(CHAIN_TXTEND,sp)
      0022E5 CF 00 1D         [ 2] 2816 	ldw txtend,x 
      0022E8                       2817 	_drop CHAIN_CNTX_SIZE ; CHAIN saved data size  
      0022E8 5B 08            [ 2]    1     addw sp,#CHAIN_CNTX_SIZE 
      0022EA CC 14 5B         [ 2] 2818 	jp interpreter 
      0022ED                       2819 8$: ; clean stack 
      0022ED AE 17 FF         [ 2] 2820 	ldw x,#STACK_EMPTY
      0022F0 94               [ 1] 2821 	ldw sp,x 
      0022F1 CC 14 3C         [ 2] 2822 	jp warm_start
                                   2823 
                                   2824 ;---------------------------
                                   2825 ; BASIC: GET var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



                                   2826 ; receive a key in variable 
                                   2827 ; don't wait 
                                   2828 ;---------------------------
      0022F4                       2829 cmd_get:
      0022F4 CD 15 19         [ 4] 2830 	call next_token 
      0022F7 A1 85            [ 1] 2831 	cp a,#TK_VAR 
      0022F9 27 03            [ 1] 2832 	jreq 0$
      0022FB CC 13 BD         [ 2] 2833 	jp syntax_error 
      0022FE CD 15 41         [ 4] 2834 0$: call get_addr 
      002301 CF 00 19         [ 2] 2835 	ldw ptr16,x 
      002304 CD 06 2E         [ 4] 2836 	call qgetc 
      002307 27 03            [ 1] 2837 	jreq 2$
      002309 CD 06 35         [ 4] 2838 	call getc  
      00230C 72 3F 00 19      [ 4] 2839 2$: clr [ptr16]
      002310 72 5C 00 1A      [ 1] 2840 	inc ptr8 
      002314 72 3F 00 19      [ 4] 2841 	clr [ptr16]
      002318 72 5C 00 1A      [ 1] 2842 	inc ptr8 
      00231C 72 C7 00 19      [ 4] 2843 	ld [ptr16],a 
      002320 81               [ 4] 2844 	ret 
                                   2845 
                                   2846 
                                   2847 ;-----------------
                                   2848 ; 1 Khz beep 
                                   2849 ;-----------------
      002321                       2850 beep_1khz:: 
      002321 90 89            [ 2] 2851 	pushw y 
      002323 AE 00 64         [ 2] 2852 	ldw x,#100
      002326 90 AE 03 E8      [ 2] 2853 	ldw y,#1000
      00232A 20 22            [ 2] 2854 	jra beep
                                   2855 
                                   2856 ;-----------------------
                                   2857 ; BASIC: TONE expr1,expr2
                                   2858 ; used TIMER2 channel 1
                                   2859 ; to produce a tone 
                                   2860 ; arguments:
                                   2861 ;    expr1   frequency 
                                   2862 ;    expr2   duration msec.
                                   2863 ;---------------------------
      00232C                       2864 tone:
      00232C 90 89            [ 2] 2865 	pushw y 
      00232E CD 16 F4         [ 4] 2866 	call arg_list 
      002331 A1 02            [ 1] 2867 	cp a,#2 
      002333 27 03            [ 1] 2868 	jreq 1$
      002335 CC 13 BD         [ 2] 2869 	jp syntax_error 
      002338                       2870 1$: 
      002338                       2871 	_xpop 
      002338 90 F6            [ 1]    1     ld a,(y)
      00233A 93               [ 1]    2     ldw x,y 
      00233B EE 01            [ 2]    3     ldw x,(1,x)
      00233D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002341 89               [ 2] 2872 	pushw x ; duration 
      002342                       2873 	_xpop ; frequency
      002342 90 F6            [ 1]    1     ld a,(y)
      002344 93               [ 1]    2     ldw x,y 
      002345 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      002347 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00234B 90 93            [ 1] 2874 	ldw y,x ; frequency 
      00234D 85               [ 2] 2875 	popw x  ; duration 
      00234E                       2876 beep:  
      00234E 89               [ 2] 2877 	pushw x 
      00234F AE F4 24         [ 2] 2878 	ldw x,#TIM2_CLK_FREQ
      002352 65               [ 2] 2879 	divw x,y ; cntr=Fclk/freq 
                                   2880 ; round to nearest integer 
      002353 90 A3 7A 12      [ 2] 2881 	cpw y,#TIM2_CLK_FREQ/2
      002357 2B 01            [ 1] 2882 	jrmi 2$
      002359 5C               [ 1] 2883 	incw x 
      00235A                       2884 2$:	 
      00235A 9E               [ 1] 2885 	ld a,xh 
      00235B C7 53 0D         [ 1] 2886 	ld TIM2_ARRH,a 
      00235E 9F               [ 1] 2887 	ld a,xl 
      00235F C7 53 0E         [ 1] 2888 	ld TIM2_ARRL,a 
                                   2889 ; 50% duty cycle 
      002362 8C               [ 1] 2890 	ccf 
      002363 56               [ 2] 2891 	rrcw x 
      002364 9E               [ 1] 2892 	ld a,xh 
      002365 C7 53 0F         [ 1] 2893 	ld TIM2_CCR1H,a 
      002368 9F               [ 1] 2894 	ld a,xl
      002369 C7 53 10         [ 1] 2895 	ld TIM2_CCR1L,a
      00236C 72 10 53 08      [ 1] 2896 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      002370 72 10 53 00      [ 1] 2897 	bset TIM2_CR1,#TIM2_CR1_CEN
      002374 72 10 53 04      [ 1] 2898 	bset TIM2_EGR,#TIM2_EGR_UG
      002378 85               [ 2] 2899 	popw x 
      002379 CD 28 88         [ 4] 2900 	call pause02
      00237C 72 11 53 08      [ 1] 2901 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      002380 72 11 53 00      [ 1] 2902 	bres TIM2_CR1,#TIM2_CR1_CEN 
      002384 90 85            [ 2] 2903 	popw y 
      002386 81               [ 4] 2904 	ret 
                                   2905 
                                   2906 ;-------------------------------
                                   2907 ; BASIC: ADCON 0|1 [,divisor]  
                                   2908 ; disable/enanble ADC 
                                   2909 ;-------------------------------
                           000003  2910 	ONOFF=3 
                           000001  2911 	DIVSOR=1
                           000004  2912 	VSIZE=4 
      002387                       2913 power_adc:
      002387 CD 16 F4         [ 4] 2914 	call arg_list 
      00238A A1 02            [ 1] 2915 	cp a,#2	
      00238C 27 12            [ 1] 2916 	jreq 1$
      00238E A1 01            [ 1] 2917 	cp a,#1 
      002390 27 03            [ 1] 2918 	jreq 0$ 
      002392 CC 13 BD         [ 2] 2919 	jp syntax_error 
      002395 4F               [ 1] 2920 0$:	clr a 
      002396 5F               [ 1] 2921 	clrw x
      002397                       2922 	_xpush   ; divisor  
      002397 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00239B 90 F7            [ 1]    2     ld (y),a 
      00239D 90 EF 01         [ 2]    3     ldw (1,y),x 
      0023A0                       2923 1$: _at_next 
      0023A0 90 E6 03         [ 1]    1     ld a,(3,y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0023A3 93               [ 1]    2     ldw x,y 
      0023A4 EE 04            [ 2]    3     ldw x,(4,x)
      0023A6 5D               [ 2] 2924 	tnzw x 
      0023A7 27 25            [ 1] 2925 	jreq 2$ 
      0023A9                       2926 	_xpop
      0023A9 90 F6            [ 1]    1     ld a,(y)
      0023AB 93               [ 1]    2     ldw x,y 
      0023AC EE 01            [ 2]    3     ldw x,(1,x)
      0023AE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0023B2                       2927 	_xdrop  
      0023B2 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      0023B6 9F               [ 1] 2928 	ld a,xl
      0023B7 A4 07            [ 1] 2929 	and a,#7
      0023B9 4E               [ 1] 2930 	swap a 
      0023BA C7 54 01         [ 1] 2931 	ld ADC_CR1,a
      0023BD 72 16 50 CA      [ 1] 2932 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0023C1 72 10 54 01      [ 1] 2933 	bset ADC_CR1,#ADC_CR1_ADON 
      0023C5                       2934 	_usec_dly 7 
      0023C5 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0023C8 5A               [ 2]    2     decw x
      0023C9 9D               [ 1]    3     nop 
      0023CA 26 FA            [ 1]    4     jrne .-4
      0023CC 20 08            [ 2] 2935 	jra 3$
      0023CE 72 11 54 01      [ 1] 2936 2$: bres ADC_CR1,#ADC_CR1_ADON
      0023D2 72 17 50 CA      [ 1] 2937 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0023D6                       2938 3$:	
      0023D6 81               [ 4] 2939 	ret
                                   2940 
                                   2941 ;-----------------------------
                                   2942 ; BASIC: ADCREAD (channel)
                                   2943 ; read adc channel {0..5}
                                   2944 ; output:
                                   2945 ;   A 		TK_INTGR 
                                   2946 ;   X 		value 
                                   2947 ;-----------------------------
      0023D7                       2948 analog_read:
      0023D7 CD 16 EF         [ 4] 2949 	call func_args 
      0023DA A1 01            [ 1] 2950 	cp a,#1 
      0023DC 27 03            [ 1] 2951 	jreq 1$
      0023DE CC 13 BD         [ 2] 2952 	jp syntax_error
      0023E1                       2953 1$: _xpop 
      0023E1 90 F6            [ 1]    1     ld a,(y)
      0023E3 93               [ 1]    2     ldw x,y 
      0023E4 EE 01            [ 2]    3     ldw x,(1,x)
      0023E6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0023EA A3 00 05         [ 2] 2954 	cpw x,#5 
      0023ED 23 05            [ 2] 2955 	jrule 2$
      0023EF A6 0A            [ 1] 2956 	ld a,#ERR_BAD_VALUE
      0023F1 CC 13 BF         [ 2] 2957 	jp tb_error 
      0023F4 9F               [ 1] 2958 2$: ld a,xl
      0023F5 C7 00 0E         [ 1] 2959 	ld acc8,a 
      0023F8 A6 05            [ 1] 2960 	ld a,#5
      0023FA C0 00 0E         [ 1] 2961 	sub a,acc8 
      0023FD C7 54 00         [ 1] 2962 	ld ADC_CSR,a
      002400 72 16 54 02      [ 1] 2963 	bset ADC_CR2,#ADC_CR2_ALIGN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      002404 72 10 54 01      [ 1] 2964 	bset ADC_CR1,#ADC_CR1_ADON
      002408 72 0F 54 00 FB   [ 2] 2965 	btjf ADC_CSR,#ADC_CSR_EOC,.
      00240D CE 54 04         [ 2] 2966 	ldw x,ADC_DRH
      002410 A6 84            [ 1] 2967 	ld a,#TK_INTGR
      002412 81               [ 4] 2968 	ret 
                                   2969 
                                   2970 ;-----------------------
                                   2971 ; BASIC: DREAD(pin)
                                   2972 ; Arduino pins 
                                   2973 ; read state of a digital pin 
                                   2974 ; pin# {0..15}
                                   2975 ; output:
                                   2976 ;    A 		TK_INTGR
                                   2977 ;    X      0|1 
                                   2978 ;-------------------------
                           000001  2979 	PINNO=1
                           000001  2980 	VSIZE=1
      002413                       2981 digital_read:
      002413                       2982 	_vars VSIZE 
      002413 52 01            [ 2]    1     sub sp,#VSIZE 
      002415 CD 16 EF         [ 4] 2983 	call func_args
      002418 A1 01            [ 1] 2984 	cp a,#1
      00241A 27 03            [ 1] 2985 	jreq 1$
      00241C CC 13 BD         [ 2] 2986 	jp syntax_error
      00241F                       2987 1$: _xpop 
      00241F 90 F6            [ 1]    1     ld a,(y)
      002421 93               [ 1]    2     ldw x,y 
      002422 EE 01            [ 2]    3     ldw x,(1,x)
      002424 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002428 A3 00 0F         [ 2] 2988 	cpw x,#15 
      00242B 23 05            [ 2] 2989 	jrule 2$
      00242D A6 0A            [ 1] 2990 	ld a,#ERR_BAD_VALUE
      00242F CC 13 BF         [ 2] 2991 	jp tb_error 
      002432 CD 29 CB         [ 4] 2992 2$:	call select_pin 
      002435 6B 01            [ 1] 2993 	ld (PINNO,sp),a
      002437 E6 01            [ 1] 2994 	ld a,(GPIO_IDR,x)
      002439 0D 01            [ 1] 2995 	tnz (PINNO,sp)
      00243B 27 05            [ 1] 2996 	jreq 8$
      00243D 44               [ 1] 2997 3$: srl a 
      00243E 0A 01            [ 1] 2998 	dec (PINNO,sp)
      002440 26 FB            [ 1] 2999 	jrne 3$ 
      002442 A4 01            [ 1] 3000 8$: and a,#1 
      002444 5F               [ 1] 3001 	clrw x 
      002445 97               [ 1] 3002 	ld xl,a 
      002446 4F               [ 1] 3003 	clr a 
      002447                       3004 	_drop VSIZE
      002447 5B 01            [ 2]    1     addw sp,#VSIZE 
      002449 81               [ 4] 3005 	ret
                                   3006 
                                   3007 
                                   3008 ;-----------------------
                                   3009 ; BASIC: DWRITE pin,0|1
                                   3010 ; Arduino pins 
                                   3011 ; write to a digital pin 
                                   3012 ; pin# {0..15}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



                                   3013 ; output:
                                   3014 ;    A 		TK_INTGR
                                   3015 ;    X      0|1 
                                   3016 ;-------------------------
                           000001  3017 	PINNO=1
                           000002  3018 	PINVAL=2
                           000002  3019 	VSIZE=2
      00244A                       3020 digital_write:
      00244A                       3021 	_vars VSIZE 
      00244A 52 02            [ 2]    1     sub sp,#VSIZE 
      00244C CD 16 F4         [ 4] 3022 	call arg_list  
      00244F A1 02            [ 1] 3023 	cp a,#2 
      002451 27 03            [ 1] 3024 	jreq 1$
      002453 CC 13 BD         [ 2] 3025 	jp syntax_error
      002456                       3026 1$: _xpop 
      002456 90 F6            [ 1]    1     ld a,(y)
      002458 93               [ 1]    2     ldw x,y 
      002459 EE 01            [ 2]    3     ldw x,(1,x)
      00245B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00245F 9F               [ 1] 3027 	ld a,xl 
      002460 6B 02            [ 1] 3028 	ld (PINVAL,sp),a
      002462                       3029 	_xpop 
      002462 90 F6            [ 1]    1     ld a,(y)
      002464 93               [ 1]    2     ldw x,y 
      002465 EE 01            [ 2]    3     ldw x,(1,x)
      002467 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00246B A3 00 0F         [ 2] 3030 	cpw x,#15 
      00246E 23 05            [ 2] 3031 	jrule 2$
      002470 A6 0A            [ 1] 3032 	ld a,#ERR_BAD_VALUE
      002472 CC 13 BF         [ 2] 3033 	jp tb_error 
      002475 CD 29 CB         [ 4] 3034 2$:	call select_pin 
      002478 6B 01            [ 1] 3035 	ld (PINNO,sp),a 
      00247A A6 01            [ 1] 3036 	ld a,#1
      00247C 0D 01            [ 1] 3037 	tnz (PINNO,sp)
      00247E 27 05            [ 1] 3038 	jreq 4$
      002480 48               [ 1] 3039 3$: sll a
      002481 0A 01            [ 1] 3040 	dec (PINNO,sp)
      002483 26 FB            [ 1] 3041 	jrne 3$
      002485 0D 02            [ 1] 3042 4$: tnz (PINVAL,sp)
      002487 26 05            [ 1] 3043 	jrne 5$
      002489 43               [ 1] 3044 	cpl a 
      00248A E4 00            [ 1] 3045 	and a,(GPIO_ODR,x)
      00248C 20 02            [ 2] 3046 	jra 8$
      00248E EA 00            [ 1] 3047 5$: or a,(GPIO_ODR,x)
      002490 E7 00            [ 1] 3048 8$: ld (GPIO_ODR,x),a 
      002492                       3049 	_drop VSIZE 
      002492 5B 02            [ 2]    1     addw sp,#VSIZE 
      002494 81               [ 4] 3050 	ret
                                   3051 
                                   3052 
                                   3053 ;-----------------------
                                   3054 ; BASIC: STOP
                                   3055 ; stop progam execution  
                                   3056 ; without resetting pointers 
                                   3057 ; the program is resumed
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                                   3058 ; with RUN 
                                   3059 ;-------------------------
      002495                       3060 stop:
      002495 72 00 00 22 01   [ 2] 3061 	btjt flags,#FRUN,2$
      00249A 81               [ 4] 3062 	ret 
      00249B                       3063 2$:	 
                                   3064 ; create space on cstack to save context 
      00249B AE 24 C2         [ 2] 3065 	ldw x,#break_point 
      00249E CD 06 82         [ 4] 3066 	call puts 
      0024A1                       3067 	_drop 2 ;drop return address 
      0024A1 5B 02            [ 2]    1     addw sp,#2 
      0024A3                       3068 	_vars CTXT_SIZE ; context size 
      0024A3 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0024A5 CD 1D B9         [ 4] 3069 	call save_context 
      0024A8 AE 16 68         [ 2] 3070 	ldw x,#tib 
      0024AB CF 00 04         [ 2] 3071 	ldw basicptr,x
      0024AE 7F               [ 1] 3072 	clr (x)
      0024AF 72 5F 00 02      [ 1] 3073 	clr count  
      0024B3 5F               [ 1] 3074 	clrw x 
      0024B4 CF 00 00         [ 2] 3075 	ldw in.w,x
      0024B7 72 11 00 22      [ 1] 3076 	bres flags,#FRUN 
      0024BB 72 18 00 22      [ 1] 3077 	bset flags,#FBREAK
      0024BF CC 14 5B         [ 2] 3078 	jp interpreter 
      0024C2 0A 62 72 65 61 6B 20  3079 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3080 
                                   3081 ;-----------------------
                                   3082 ; BASIC: NEW
                                   3083 ; from command line only 
                                   3084 ; free program memory
                                   3085 ; and clear variables 
                                   3086 ;------------------------
      0024E0                       3087 new: 
      0024E0 CD 16 CC         [ 4] 3088 	call cmd_line_only
      0024E3 72 5F 00 22      [ 1] 3089 0$:	clr flags 
      0024E7 CD 11 C9         [ 4] 3090 	call clear_basic 
      0024EA 81               [ 4] 3091 	ret 
                                   3092 
                                   3093 ;-----------------------------------
                                   3094 ; erase program at specified address
                                   3095 ; keep signature and size fields. 
                                   3096 ; signature replaced by "XX"
                                   3097 ; input:
                                   3098 ;    X    address 
                                   3099 ;-----------------------------------
                           000001  3100 	ADDR=1    ; program address
                           000003  3101 	PRG_SIZE=3    ; program size 
                           000005  3102 	BLOCKS=5 ; blocks to erase 
                           000006  3103 	VSIZE=6
      0024EB                       3104 erase_program:
      0024EB 89               [ 2] 3105 	pushw x 
      0024EC CD 15 32         [ 4] 3106 	call skip_string 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      0024EF 85               [ 2] 3107 	popw x 
      0024F0 CD 2F 13         [ 4] 3108 	call search_program 
      0024F3 27 4A            [ 1] 3109 	jreq 9$
      0024F5 CD 04 0D         [ 4] 3110 	call move_erase_to_ram
      0024F8 72 5F 00 18      [ 1] 3111 	clr farptr 
      0024FC                       3112 	_vars VSIZE 
      0024FC 52 06            [ 2]    1     sub sp,#VSIZE 
      0024FE 1D 00 04         [ 2] 3113 1$:	subw x,#4 
      002501 1F 01            [ 2] 3114 	ldw (ADDR,sp),x
      002503 EE 02            [ 2] 3115 	ldw x,(2,x)
      002505 1F 03            [ 2] 3116 	ldw (PRG_SIZE,sp),x
      002507 A6 80            [ 1] 3117 	ld a,#BLOCK_SIZE 
      002509 62               [ 2] 3118 	div x,a 
      00250A 4D               [ 1] 3119 	tnz a 
      00250B 27 01            [ 1] 3120 	jreq 2$ 
      00250D 5C               [ 1] 3121 	incw x 
      00250E 1F 05            [ 2] 3122 2$:	ldw (BLOCKS,sp),x 
      002510 1E 01            [ 2] 3123 	ldw x,(ADDR,sp)
      002512 CF 00 19         [ 2] 3124 	ldw ptr16,x 
      002515 CD 04 8B         [ 4] 3125 3$:	call block_erase
      002518 AE 00 80         [ 2] 3126 	ldw x,#BLOCK_SIZE 
      00251B CD 05 86         [ 4] 3127 	call incr_farptr
      00251E 1E 05            [ 2] 3128 	ldw x,(BLOCKS,sp)
      002520 5A               [ 2] 3129 	decw x 
      002521 1F 05            [ 2] 3130 	ldw (BLOCKS,sp),x 
      002523 26 F0            [ 1] 3131 	jrne 3$ 
                                   3132 ; write XX and size at addr 
      002525 1E 01            [ 2] 3133 	ldw x,(ADDR,sp)
      002527 CF 00 19         [ 2] 3134 	ldw ptr16,x 
      00252A A6 58            [ 1] 3135 	ld a,#'X 
      00252C 5F               [ 1] 3136 	clrw x 
      00252D CD 04 B1         [ 4] 3137 	call write_byte 
      002530 CD 04 B1         [ 4] 3138 	call write_byte 
      002533 7B 03            [ 1] 3139 	ld a,(PRG_SIZE,sp)
      002535 CD 04 B1         [ 4] 3140 	call write_byte 
      002538 7B 04            [ 1] 3141 	ld a,(PRG_SIZE+1,sp)
      00253A CD 04 B1         [ 4] 3142 	call write_byte 
      00253D                       3143 	_drop VSIZE 
      00253D 5B 06            [ 2]    1     addw sp,#VSIZE 
      00253F                       3144 9$:	
      00253F 81               [ 4] 3145 	ret 
                                   3146 
                                   3147 ;-----------------------------------
                                   3148 ; BASIC: ERASE \E | \F || address
                                   3149 ; erase all block in range from 
                                   3150 ;  'app_space' to FLASH end (0x27fff)
                                   3151 ;  or all EEPROM 
                                   3152 ; that contains a non zero byte. 
                                   3153 ; if the argument is an address  
                                   3154 ; mark the program at this address 
                                   3155 ; as erased. Erase the blocks 
                                   3156 ; replace signature by 'XX' and 
                                   3157 ; keep size field.  
                                   3158 ;-----------------------------------
                           000001  3159 	LIMIT=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



                           000003  3160 	VSIZE = 3 
      002540                       3161 cmd_erase:
      002540 CD 16 CC         [ 4] 3162 	call cmd_line_only
      002543 72 5F 00 18      [ 1] 3163 	clr farptr 
      002547 CD 15 19         [ 4] 3164 	call next_token
      00254A A1 03            [ 1] 3165 	cp a,#TK_LABEL 
      00254C 27 9D            [ 1] 3166 	jreq erase_program  
      00254E                       3167 	_vars VSIZE 
      00254E 52 03            [ 2]    1     sub sp,#VSIZE 
      002550 A1 04            [ 1] 3168 	cp a,#TK_CHAR 
      002552 27 03            [ 1] 3169 	jreq 0$ 
      002554 CC 13 BD         [ 2] 3170 	jp syntax_error
      002557 CD 15 5B         [ 4] 3171 0$: call get_char 
      00255A A4 DF            [ 1] 3172 	and a,#0XDF 
      00255C A1 45            [ 1] 3173 	cp a,#'E
      00255E 26 0C            [ 1] 3174 	jrne 1$
      002560 AE 40 00         [ 2] 3175 	ldw x,#EEPROM_BASE 
      002563 CF 00 19         [ 2] 3176 	ldw farptr+1,x 
      002566 AE 47 FF         [ 2] 3177 	ldw x,#EEPROM_END
      002569 4F               [ 1] 3178 	clr a 
      00256A 20 15            [ 2] 3179 	jra 3$ 
      00256C A1 46            [ 1] 3180 1$: cp a,#'F 
      00256E 27 06            [ 1] 3181 	jreq 2$
      002570 AE 12 C5         [ 2] 3182 	ldw x,#err_bad_value
      002573 CC 13 BF         [ 2] 3183 	jp tb_error
      002576                       3184 2$:
      002576 AE 34 00         [ 2] 3185 	ldw x,#app_space  
      002579 CF 00 19         [ 2] 3186 	ldw farptr+1,x 
      00257C A6 02            [ 1] 3187 	ld a,#(FLASH_END>>16)&0XFF 
      00257E AE 7F FF         [ 2] 3188 	ldw x,#FLASH_END&0xffff
      002581                       3189 3$:
      002581 6B 01            [ 1] 3190 	ld (LIMIT,sp),a 
      002583 1F 02            [ 2] 3191 	ldw (LIMIT+1,sp),x 
                                   3192 ; operation done from RAM
                                   3193 ; copy code to RAM in tib   
      002585 CD 04 0D         [ 4] 3194 	call move_erase_to_ram
      002588                       3195 4$:	 
      002588 CD 05 94         [ 4] 3196     call scan_block 
      00258B 27 08            [ 1] 3197 	jreq 5$  ; block already erased 
      00258D A6 45            [ 1] 3198     ld a,#'E 
      00258F CD 06 25         [ 4] 3199     call putc 
      002592 CD 04 8B         [ 4] 3200 	call block_erase   
                                   3201 ; this block is clean, next  
      002595 AE 00 80         [ 2] 3202 5$:	ldw x,#BLOCK_SIZE
      002598 CD 05 86         [ 4] 3203 	call incr_farptr
                                   3204 ; check limit, 24 bit substraction  	
      00259B 7B 01            [ 1] 3205 	ld a,(LIMIT,sp)
      00259D 1E 02            [ 2] 3206 	ldw x,(LIMIT+1,sp)
      00259F 72 B0 00 19      [ 2] 3207 	subw x,farptr+1
      0025A3 C2 00 18         [ 1] 3208 	sbc a,farptr 
      0025A6 22 E0            [ 1] 3209 	jrugt 4$ 
      0025A8 CD 11 C9         [ 4] 3210 9$: call clear_basic
      0025AB 1E 02            [ 2] 3211 	ldw x,(LIMIT+1,sp)
      0025AD A3 47 FF         [ 2] 3212 	cpw x,#EEPROM_END
      0025B0 26 03            [ 1] 3213 	jrne 10$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0025B2 CD 1A 60         [ 4] 3214 	call func_eefree 
      0025B5                       3215 10$:
      0025B5                       3216 	_drop VSIZE 
      0025B5 5B 03            [ 2]    1     addw sp,#VSIZE 
      0025B7 81               [ 4] 3217 	ret 
                                   3218 	
                                   3219 
                                   3220 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3221 ;  check for application signature 
                                   3222 ; input:
                                   3223 ;	x       address to check 
                                   3224 ; output:
                                   3225 ;   Z      1  signature present 
                                   3226 ;          0 not app signature  
                                   3227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025B8                       3228 qsign: 
      0025B8 89               [ 2] 3229 	pushw x 
                                   3230 ; align to block 
      0025B9 9F               [ 1] 3231 	ld a,xl 
      0025BA A4 80            [ 1] 3232 	and a,#BLOCK_SIZE 
      0025BC 97               [ 1] 3233 	ld xl,a 
      0025BD FE               [ 2] 3234 	ldw x,(x)
      0025BE C3 26 D3         [ 2] 3235 	cpw x,SIGNATURE ; "TB" 
      0025C1 85               [ 2] 3236 	popw x 
      0025C2 81               [ 4] 3237 	ret 
                                   3238 
                                   3239 ;--------------------------------------
                                   3240 ;  fill write buffer 
                                   3241 ;  input:
                                   3242 ;    y  point to output buffer 
                                   3243 ;    x  point to source 
                                   3244 ;    a  bytes to write in buffer 
                                   3245 ;  output:
                                   3246 ;    y   += A 
                                   3247 ;    X   += A 
                                   3248 ;    A   0 
                                   3249 ;---------------------------------------
      0025C3                       3250 fill_write_buffer:
      0025C3 88               [ 1] 3251 	push a 
      0025C4 4D               [ 1] 3252 	tnz a 
      0025C5 27 0A            [ 1] 3253 	jreq 9$ 
      0025C7 F6               [ 1] 3254 1$: ld a,(x)
      0025C8 5C               [ 1] 3255 	incw x 
      0025C9 90 F7            [ 1] 3256 	ld (y),a 
      0025CB 90 5C            [ 1] 3257 	incw y 
      0025CD 0A 01            [ 1] 3258 	dec (1,sp) 
      0025CF 26 F6            [ 1] 3259 	jrne 1$ 
      0025D1 84               [ 1] 3260 9$:	pop a 
      0025D2 81               [ 4] 3261     ret 	
                                   3262 
                                   3263 ;--------------------------------------
                                   3264 ;  fill pad buffer with zero 
                                   3265 ;  input:
                                   3266 ;	none 
                                   3267 ;  output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



                                   3268 ;    y     buffer address  
                                   3269 ;--------------------------------------
      0025D3                       3270 clear_block_buffer:
      0025D3 88               [ 1] 3271 	push a 
      0025D4 90 AE 16 B8      [ 2] 3272 	ldw y,#block_buffer 
      0025D8 90 89            [ 2] 3273 	pushw y
      0025DA A6 80            [ 1] 3274 	ld a,#BLOCK_SIZE   
      0025DC 90 7F            [ 1] 3275 1$:	clr (y)
      0025DE 90 5C            [ 1] 3276 	incw y
      0025E0 4A               [ 1] 3277 	dec a  
      0025E1 26 F9            [ 1] 3278 	jrne 1$ 	
      0025E3 90 85            [ 2] 3279 9$: popw y 
      0025E5 84               [ 1] 3280 	pop a 			
      0025E6 81               [ 4] 3281 	ret 
                                   3282 
                                   3283 
                                   3284 ;----------------------------------
                                   3285 ;  search  a free space space that 
                                   3286 ;  fit program size 
                                   3287 ; input:
                                   3288 ;    X    program size 
                                   3289 ; output:
                                   3290 ;    X    address | 0 
                                   3291 ;------------------------------------
                           000001  3292 	PG_SIZE=1 
                           000002  3293 	VSIZE=2 
      0025E7                       3294 search_fit:
      0025E7 89               [ 2] 3295 	pushw x; PG_SIZE 
      0025E8 AE 34 00         [ 2] 3296 	ldw x,#app_space 
      0025EB CD 26 D7         [ 4] 3297 1$:	call is_erased 
      0025EE 27 0D            [ 1] 3298 	jreq 4$
      0025F0 F6               [ 1] 3299 	ld a,(x)
      0025F1 EA 01            [ 1] 3300 	or a,(1,x)
      0025F3 27 23            [ 1] 3301 	jreq 9$ ; free space 
      0025F5 CD 26 E2         [ 4] 3302 2$:	call skip_to_next
      0025F8 5D               [ 2] 3303 	tnzw x 
      0025F9 26 F0            [ 1] 3304 	jrne 1$
      0025FB 20 1B            [ 2] 3305 	jra 9$
      0025FD                       3306 4$: ; erased program 
                                   3307     ; does it fit? 
      0025FD CF 00 0D         [ 2] 3308 	ldw acc16,x 
      002600 EE 02            [ 2] 3309 	ldw x,(2,x) ; size erased program
                                   3310 ; top multiple of BLOCK_SIZE 
      002602 1C 00 04         [ 2] 3311 	addw x,#4 
      002605 1C 00 7F         [ 2] 3312 	addw x,#BLOCK_SIZE-1 
      002608 9F               [ 1] 3313 	ld a,xl 
      002609 A4 80            [ 1] 3314 	and a,#BLOCK_SIZE 
      00260B 97               [ 1] 3315 	ld xl,a  
      00260C 13 01            [ 2] 3316 	cpw x,(1,sp) ; size program to save 
      00260E 24 05            [ 1] 3317 	jruge 8$   ; fit 
      002610 CE 00 0D         [ 2] 3318 	ldw x,acc16 
      002613 20 E0            [ 2] 3319 	jra 2$ 
      002615 CE 00 0D         [ 2] 3320 8$: ldw x,acc16 ; fit in this one 	
      002618                       3321 9$:	_drop VSIZE 
      002618 5B 02            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      00261A 81               [ 4] 3322 	ret  
                                   3323 
                                   3324 ;-------------------------
                                   3325 ; erase header and 
                                   3326 ; size fields 
                                   3327 ; input: 
                                   3328 ;    X    program address 
                                   3329 ; output:
                                   3330 ;    X    unchanged 
                                   3331 ;-------------------------
                           000001  3332 	COUNT=1 
      00261B                       3333 erase_header:
      00261B 89               [ 2] 3334 	pushw x 
      00261C 4B 04            [ 1] 3335 	push #4 ; COUNT 
      00261E 72 5F 00 18      [ 1] 3336 	clr farptr 
      002622 CF 00 19         [ 2] 3337 	ldw ptr16,x 
      002625 4F               [ 1] 3338 	clr a 
      002626 5F               [ 1] 3339 	clrw x 
      002627 CD 04 B1         [ 4] 3340 1$:	call write_byte 
      00262A 0A 01            [ 1] 3341 	dec (COUNT,sp)
      00262C 26 F9            [ 1] 3342 	jrne 1$
      00262E                       3343 	_drop 1 
      00262E 5B 01            [ 2]    1     addw sp,#1 
      002630 85               [ 2] 3344 	popw x 
      002631 CF 00 19         [ 2] 3345 	ldw ptr16,x 
      002634 81               [ 4] 3346 	ret 
                                   3347 
                                   3348 ;---------------------------------------
                                   3349 ; BASIC: SAVE
                                   3350 ; write application from RAM to FLASH
                                   3351 ; at UFLASH address
                                   3352 ;--------------------------------------
                           000001  3353 	XTEMP=1
                           000003  3354 	COUNT=3  ; last count bytes written 
                           000004  3355 	CNT_LO=4 ; count low byte 
                           000005  3356 	TOWRITE=5 ; how bytes left to write  
                           000006  3357 	VSIZE=6 
      002635                       3358 cmd_save:
      002635 CD 16 CC         [ 4] 3359 	call cmd_line_only
      002638 89               [ 2] 3360 	pushw x 
      002639 90 89            [ 2] 3361 	pushw y 
      00263B                       3362 	_vars VSIZE
      00263B 52 06            [ 2]    1     sub sp,#VSIZE 
      00263D CD 1B 70         [ 4] 3363 	call prog_size 
      002640 26 03            [ 1] 3364 	jrne 0$ 
      002642 CC 26 CD         [ 2] 3365 	jp 9$ ; no program to save 
      002645 1F 05            [ 2] 3366 0$:	ldw (TOWRITE,sp),x ; program size
      002647 72 5F 00 18      [ 1] 3367 	clr farptr 
      00264B CD 25 E7         [ 4] 3368 	call search_fit
      00264E CF 00 19         [ 2] 3369 	ldw ptr16,x 
      002651 AE FF FF         [ 2] 3370 	ldw x,#0xFFFF
      002654 72 B0 00 19      [ 2] 3371 	subw x,ptr16 ; free flash 
      002658 1D 00 04         [ 2] 3372 	subw x,#4 ; signature and size field 
      00265B 13 05            [ 2] 3373 	cpw x,(TOWRITE,sp)
      00265D 24 05            [ 1] 3374 	jruge 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      00265F A6 01            [ 1] 3375 	ld a,#ERR_MEM_FULL
      002661 CC 13 BF         [ 2] 3376 	jp tb_error 
      002664                       3377 1$: ; check if header bytes are zero's 
      002664 CE 00 19         [ 2] 3378 	ldw x,ptr16 
      002667 F6               [ 1] 3379 	ld a,(x)
      002668 EA 01            [ 1] 3380 	or a,(1,x)
      00266A EA 02            [ 1] 3381 	or a,(2,x)
      00266C EA 03            [ 1] 3382 	or a,(3,x)
      00266E 27 03            [ 1] 3383 	jreq 2$
      002670 CD 26 1B         [ 4] 3384 	call erase_header ; preserve X and farptr 
      002673                       3385 2$: 
                                   3386 ; block programming flash
                                   3387 ; must be done from RAM
                                   3388 ; moved in tib  
      002673 CD 04 4D         [ 4] 3389 	call move_prg_to_ram
                                   3390 ; initialize written bytes count  
      002676 0F 03            [ 1] 3391 	clr (COUNT,sp)
                                   3392 ; first bock 
                                   3393 ; containt signature 2 bytes 
                                   3394 ; and size 	2 bytes 
                                   3395 ; use Y as pointer to block_buffer
      002678 CD 25 D3         [ 4] 3396 	call clear_block_buffer ; -- y=*block_buffer	
                                   3397 ; write signature
      00267B CE 26 D3         [ 2] 3398 	ldw x,SIGNATURE ; "TB" 
      00267E 90 FF            [ 2] 3399 	ldw (y),x 
      002680 72 A9 00 02      [ 2] 3400 	addw y,#2
      002684 1E 05            [ 2] 3401 	ldw x,(TOWRITE,sp)
      002686 90 FF            [ 2] 3402 	ldw (y),x
      002688 72 A9 00 02      [ 2] 3403 	addw y,#2   
      00268C A6 7C            [ 1] 3404 	ld a,#(BLOCK_SIZE-4)
      00268E A3 00 7C         [ 2] 3405 	cpw x,#(BLOCK_SIZE-4) 
      002691 22 01            [ 1] 3406 	jrugt 3$
      002693 9F               [ 1] 3407 	ld a,xl 
      002694 6B 04            [ 1] 3408 3$:	ld (CNT_LO,sp),a   
      002696 CE 00 1B         [ 2] 3409 	ldw x,txtbgn 
      002699 1F 01            [ 2] 3410 	ldw (XTEMP,sp),x 
      00269B                       3411 32$: 
      00269B 1E 01            [ 2] 3412 	ldw x,(XTEMP,sp)
      00269D 7B 04            [ 1] 3413 	ld a,(CNT_LO,sp)
      00269F CD 25 C3         [ 4] 3414 	call fill_write_buffer 
      0026A2 1F 01            [ 2] 3415 	ldw (XTEMP,sp),x 
      0026A4 AE 16 B8         [ 2] 3416 	ldw x,#block_buffer
      0026A7 CD 04 67         [ 4] 3417 	call write_buffer
      0026AA AE 00 80         [ 2] 3418 	ldw x,#BLOCK_SIZE 
      0026AD CD 05 86         [ 4] 3419 	call incr_farptr  
                                   3420 ; following blocks 
      0026B0 1E 01            [ 2] 3421 	ldw x,(XTEMP,sp)
      0026B2 C3 00 1D         [ 2] 3422 	cpw x,txtend 
      0026B5 24 16            [ 1] 3423 	jruge 9$ 
      0026B7 1E 05            [ 2] 3424 	ldw x,(TOWRITE,sp)
      0026B9 72 F0 03         [ 2] 3425 	subw x,(COUNT,sp)
      0026BC 1F 05            [ 2] 3426 	ldw (TOWRITE,sp),x 
      0026BE A6 80            [ 1] 3427 	ld a,#BLOCK_SIZE 
      0026C0 A3 00 80         [ 2] 3428 	cpw x,#BLOCK_SIZE 
      0026C3 24 01            [ 1] 3429 	jruge 4$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0026C5 9F               [ 1] 3430 	ld a,xl 
      0026C6 6B 04            [ 1] 3431 4$:	ld (CNT_LO,sp),a 
      0026C8 CD 25 D3         [ 4] 3432 	call clear_block_buffer 
      0026CB 20 CE            [ 2] 3433 	jra 32$ 
      0026CD                       3434 9$:	_drop VSIZE 
      0026CD 5B 06            [ 2]    1     addw sp,#VSIZE 
      0026CF 90 85            [ 2] 3435     popw y 
      0026D1 85               [ 2] 3436 	popw x 
      0026D2 81               [ 4] 3437 	ret 
                                   3438 
      0026D3 54 42                 3439 SIGNATURE: .ascii "TB"
      0026D5 58 58                 3440 ERASED: .ascii "XX" 
                                   3441 
                                   3442 ;---------------------
                                   3443 ; check if there is 
                                   3444 ; an erased program 
                                   3445 ; at this address 
                                   3446 ; input:
                                   3447 ;    X    address 
                                   3448 ; output:
                                   3449 ;    Z    Set=erased program 
                                   3450 ;--------------------
      0026D7                       3451 is_erased:
      0026D7 89               [ 2] 3452 	pushw x 
                                   3453 ; align to BLOCK 
      0026D8 9F               [ 1] 3454 	ld a,xl 
      0026D9 A4 80            [ 1] 3455 	and a,#BLOCK_SIZE 
      0026DB 97               [ 1] 3456 	ld xl,a 
      0026DC FE               [ 2] 3457 	ldw x,(x)
      0026DD C3 26 D5         [ 2] 3458 	cpw x,ERASED 
      0026E0 85               [ 2] 3459 	popw x 
      0026E1 81               [ 4] 3460 	ret 
                                   3461 
                                   3462 ;----------------------------
                                   3463 ;  skip to next program
                                   3464 ;  block 
                                   3465 ; input:
                                   3466 ;    X   actual program addr
                                   3467 ; output:
                                   3468 ;    X   next block 
                                   3469 ;        after program 
                                   3470 ;----------------------------
      0026E2                       3471 skip_to_next:
                                   3472 ; align to block 
      0026E2 9F               [ 1] 3473 	ld a,xl 
      0026E3 A4 80            [ 1] 3474 	and a,#BLOCK_SIZE 
      0026E5 97               [ 1] 3475 	ld xl,a 
      0026E6 CF 00 0D         [ 2] 3476 	ldw acc16,x 
      0026E9 EE 02            [ 2] 3477 	ldw x,(2,x)
      0026EB 72 BB 00 0D      [ 2] 3478 	addw x,acc16 ; blk_addr+prg_size 
      0026EF 1C 00 04         [ 2] 3479 	addw x,#4 ; +header fields 
                                   3480 ; align to next block 
      0026F2 1C 00 7F         [ 2] 3481 	addw x,#BLOCK_SIZE-1 
      0026F5 9F               [ 1] 3482 	ld a,xl 
      0026F6 A4 80            [ 1] 3483 	and a,#0x80 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      0026F8 97               [ 1] 3484 	ld xl,a  
      0026F9 81               [ 4] 3485 	ret 
                                   3486 
                                   3487 
                                   3488 ;---------------------
                                   3489 ; BASIC: DIR 
                                   3490 ; list programs saved 
                                   3491 ; in flash 
                                   3492 ;--------------------
                           000001  3493 	XTEMP=1 
      0026FA                       3494 cmd_dir:
      0026FA CD 16 CC         [ 4] 3495 	call cmd_line_only
      0026FD AE 34 00         [ 2] 3496 	ldw x,#app_space 
      002700 89               [ 2] 3497 	pushw x 
      002701                       3498 1$: 
      002701 CD 25 B8         [ 4] 3499 	call qsign 
      002704 26 3B            [ 1] 3500 	jrne 4$
      002706 1C 00 04         [ 2] 3501 	addw x,#4
      002709 35 10 00 0A      [ 1] 3502 	mov base,#16
      00270D CD 15 61         [ 4] 3503 	call prt_i16
      002710 A6 20            [ 1] 3504 	ld a,#SPACE 
      002712 CD 06 25         [ 4] 3505 	call putc 
      002715 1E 01            [ 2] 3506 	ldw x,(1,sp)
      002717 EE 02            [ 2] 3507 	ldw x,(2,x)
      002719 35 0A 00 0A      [ 1] 3508 	mov base,#10  
      00271D CD 15 61         [ 4] 3509 	call prt_i16 
      002720 AE 1B DA         [ 2] 3510 	ldw x,#STR_BYTES
      002723 CD 06 82         [ 4] 3511 	call puts
      002726 A6 2C            [ 1] 3512 	ld a,#', 
      002728 CD 06 25         [ 4] 3513 	call putc
      00272B 1E 01            [ 2] 3514 	ldw x,(1,sp)
      00272D 1C 00 08         [ 2] 3515 	addw x,#8
      002730 CD 06 82         [ 4] 3516 	call puts 
      002733 A6 0D            [ 1] 3517 	ld a,#CR 
      002735 CD 06 25         [ 4] 3518 	call putc
      002738 1E 01            [ 2] 3519 	ldw x,(1,sp)
      00273A CD 26 E2         [ 4] 3520 3$:	call skip_to_next
      00273D 1F 01            [ 2] 3521 	ldw (1,sp),x 
      00273F 20 C0            [ 2] 3522 	jra 1$
      002741                       3523 4$: ; check if it is an erased program 
      002741 CD 26 D7         [ 4] 3524 	call is_erased 
      002744 27 F4            [ 1] 3525 	jreq 3$ 
      002746                       3526 8$: ; done 
      002746                       3527 	_drop 2 
      002746 5B 02            [ 2]    1     addw sp,#2 
      002748 81               [ 4] 3528 	ret 
                                   3529 
                                   3530 ;---------------------
                                   3531 ; BASIC: WRITE expr1,expr2|char|string[,expr|char|string]* 
                                   3532 ; write 1 or more byte to FLASH or EEPROM
                                   3533 ; starting at address  
                                   3534 ; input:
                                   3535 ;   expr1  	is address 
                                   3536 ;   expr2,...,exprn   are bytes to write
                                   3537 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   3538 ;   none 
                                   3539 ;---------------------
      002749                       3540 write:
      002749 CD 18 34         [ 4] 3541 	call expression
      00274C A1 84            [ 1] 3542 	cp a,#TK_INTGR 
      00274E 27 03            [ 1] 3543 	jreq 0$
      002750 CC 13 BD         [ 2] 3544 	jp syntax_error
      002753                       3545 0$: _xpop 
      002753 90 F6            [ 1]    1     ld a,(y)
      002755 93               [ 1]    2     ldw x,y 
      002756 EE 01            [ 2]    3     ldw x,(1,x)
      002758 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00275C C7 00 18         [ 1] 3546 	ld farptr,a 
      00275F CF 00 19         [ 2] 3547 	ldw ptr16,x 
      002762                       3548 1$:	
      002762 CD 15 19         [ 4] 3549 	call next_token 
      002765 A1 08            [ 1] 3550 	cp a,#TK_COMMA 
      002767 27 02            [ 1] 3551 	jreq 2$ 
      002769 20 46            [ 2] 3552 	jra 9$ ; no more data 
      00276B CD 15 19         [ 4] 3553 2$:	call next_token 
      00276E A1 04            [ 1] 3554 	cp a,#TK_CHAR 
      002770 27 23            [ 1] 3555 	jreq 4$ 
      002772 A1 02            [ 1] 3556 	cp a,#TK_QSTR
      002774 27 2A            [ 1] 3557 	jreq 6$
      002776                       3558 	_unget_token 
      002776 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      00277B CD 18 34         [ 4] 3559 	call expression
      00277E A1 84            [ 1] 3560 	cp a,#TK_INTGR
      002780 27 03            [ 1] 3561 	jreq 3$
      002782 CC 13 BD         [ 2] 3562 	jp syntax_error
      002785                       3563 3$:	_xpop 
      002785 90 F6            [ 1]    1     ld a,(y)
      002787 93               [ 1]    2     ldw x,y 
      002788 EE 01            [ 2]    3     ldw x,(1,x)
      00278A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00278E 9F               [ 1] 3564 	ld a,xl 
      00278F 5F               [ 1] 3565 	clrw x 
      002790 CD 04 B1         [ 4] 3566 	call write_byte
      002793 20 CD            [ 2] 3567 	jra 1$ 
      002795                       3568 4$: ; write character 
      002795 F6               [ 1] 3569 	ld a,(x)
      002796 72 5C 00 01      [ 1] 3570 	inc in 
      00279A 5F               [ 1] 3571 	clrw x 
      00279B CD 04 B1         [ 4] 3572 	call write_byte 
      00279E 20 C2            [ 2] 3573 	jra 1$ 
      0027A0                       3574 6$: ; write string 
      0027A0 89               [ 2] 3575 	pushw x 
      0027A1 F6               [ 1] 3576 	ld a,(x)
      0027A2 72 5C 00 01      [ 1] 3577 	inc in 
      0027A6 5F               [ 1] 3578 	clrw x 
      0027A7 CD 04 B1         [ 4] 3579 	call write_byte 
      0027AA 85               [ 2] 3580 	popw x 
      0027AB F6               [ 1] 3581 	ld a,(x)
      0027AC 27 B4            [ 1] 3582 	jreq 1$
      0027AE 5C               [ 1] 3583 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      0027AF 20 EF            [ 2] 3584 	jra 6$ 	
      0027B1                       3585 9$:
      0027B1 81               [ 4] 3586 	ret 
                                   3587 
                                   3588 
                                   3589 ;---------------------
                                   3590 ;BASIC: CHAR(expr)
                                   3591 ; évaluate expression 
                                   3592 ; and take the 7 least 
                                   3593 ; bits as ASCII character
                                   3594 ; output: 
                                   3595 ; 	A char 
                                   3596 ;---------------------
      0027B2                       3597 func_char:
      0027B2 CD 16 EF         [ 4] 3598 	call func_args 
      0027B5 A1 01            [ 1] 3599 	cp a,#1
      0027B7 27 03            [ 1] 3600 	jreq 1$
      0027B9 CC 13 BD         [ 2] 3601 	jp syntax_error
      0027BC                       3602 1$:	_xpop
      0027BC 90 F6            [ 1]    1     ld a,(y)
      0027BE 93               [ 1]    2     ldw x,y 
      0027BF EE 01            [ 2]    3     ldw x,(1,x)
      0027C1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0027C5 9F               [ 1] 3603 	ld a,xl
      0027C6 A4 7F            [ 1] 3604 	and a,#0x7f 
      0027C8 81               [ 4] 3605 	ret
                                   3606 
                                   3607 ;---------------------
                                   3608 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3609 ; extract first character 
                                   3610 ; of string argument 
                                   3611 ; output:
                                   3612 ;    A:X    int24 
                                   3613 ;---------------------
      0027C9                       3614 ascii:
      0027C9 A6 06            [ 1] 3615 	ld a,#TK_LPAREN
      0027CB CD 16 E2         [ 4] 3616 	call expect 
      0027CE CD 15 19         [ 4] 3617 	call next_token 
      0027D1 A1 02            [ 1] 3618 	cp a,#TK_QSTR 
      0027D3 27 0E            [ 1] 3619 	jreq 1$
      0027D5 A1 04            [ 1] 3620 	cp a,#TK_CHAR 
      0027D7 27 12            [ 1] 3621 	jreq 2$ 
      0027D9 A1 82            [ 1] 3622 	cp a,#TK_CFUNC 
      0027DB 27 03            [ 1] 3623 	jreq 0$
      0027DD CC 13 BD         [ 2] 3624 	jp syntax_error
      0027E0                       3625 0$: ; cfunc 
      0027E0 FD               [ 4] 3626 	call (x)
      0027E1 20 0B            [ 2] 3627 	jra 3$
      0027E3                       3628 1$: ; quoted string 
      0027E3 F6               [ 1] 3629 	ld a,(x)
      0027E4 88               [ 1] 3630 	push a  
      0027E5 CD 15 32         [ 4] 3631 	call skip_string
      0027E8 84               [ 1] 3632 	pop a  	
      0027E9 20 03            [ 2] 3633 	jra 3$ 
      0027EB                       3634 2$: ; character 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      0027EB CD 15 5B         [ 4] 3635 	call get_char 
      0027EE 5F               [ 1] 3636 3$:	clrw x 
      0027EF 02               [ 1] 3637 	rlwa x   
      0027F0                       3638 4$:	_xpush  
      0027F0 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0027F4 90 F7            [ 1]    2     ld (y),a 
      0027F6 90 EF 01         [ 2]    3     ldw (1,y),x 
      0027F9 A6 07            [ 1] 3639 	ld a,#TK_RPAREN 
      0027FB CD 16 E2         [ 4] 3640 	call expect
      0027FE                       3641 9$:	
      0027FE                       3642 	_xpop  
      0027FE 90 F6            [ 1]    1     ld a,(y)
      002800 93               [ 1]    2     ldw x,y 
      002801 EE 01            [ 2]    3     ldw x,(1,x)
      002803 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002807 81               [ 4] 3643 	ret 
                                   3644 
                                   3645 ;---------------------
                                   3646 ;BASIC: KEY
                                   3647 ; wait for a character 
                                   3648 ; received from STDIN 
                                   3649 ; input:
                                   3650 ;	none 
                                   3651 ; output:
                                   3652 ;	a	 character 
                                   3653 ;---------------------
      002808                       3654 key:
      002808 CD 06 35         [ 4] 3655 	call getc 
      00280B 81               [ 4] 3656 	ret
                                   3657 
                                   3658 ;----------------------
                                   3659 ; BASIC: QKEY
                                   3660 ; Return true if there 
                                   3661 ; is a character in 
                                   3662 ; waiting in STDIN 
                                   3663 ; input:
                                   3664 ;  none 
                                   3665 ; output:
                                   3666 ;   A     0|-1
                                   3667 ;-----------------------
      00280C                       3668 qkey:: 
      00280C 5F               [ 1] 3669 	clrw x 
      00280D C6 00 2D         [ 1] 3670 	ld a,rx1_head
      002810 C0 00 2E         [ 1] 3671 	sub a,rx1_tail 
      002813 27 03            [ 1] 3672 	jreq 9$ 
      002815 53               [ 2] 3673 	cplw x
      002816 A6 FF            [ 1] 3674 	ld a,#255    
      002818                       3675 9$: 
      002818 81               [ 4] 3676 	ret 
                                   3677 
                                   3678 ;-------------------------
                                   3679 ; BASIC: UFLASH 
                                   3680 ; return free flash address
                                   3681 ; scan all block starting at 
                                   3682 ; app_space and return 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



                                   3683 ; address of first free block 
                                   3684 ; below extended memory.  
                                   3685 ; return 0 if no free block 
                                   3686 ; input:
                                   3687 ;  none 
                                   3688 ; output:
                                   3689 ;	A:X		FLASH free address
                                   3690 ;---------------------------
      002819                       3691 uflash:
      002819 72 5F 00 18      [ 1] 3692 	clr farptr 
      00281D AE 34 00         [ 2] 3693 	ldw x,#app_space 
      002820 89               [ 2] 3694 	pushw x 
      002821 CF 00 19         [ 2] 3695 1$:	ldw ptr16,x 
      002824 CD 05 94         [ 4] 3696 	call scan_block 
      002827 27 0F            [ 1] 3697 	jreq 8$
      002829 1E 01            [ 2] 3698 	ldw x,(1,sp)
      00282B 1C 00 80         [ 2] 3699 	addw x,#BLOCK_SIZE 
      00282E 27 04            [ 1] 3700 	jreq 7$ 
      002830 1F 01            [ 2] 3701 	ldw (1,sp),x 
      002832 20 ED            [ 2] 3702 	jra 1$ 
      002834                       3703 7$: ; no free block 
      002834 0F 01            [ 1] 3704 	clr (1,sp) 
      002836 0F 02            [ 1] 3705 	clr (2,sp)
      002838 85               [ 2] 3706 8$: popw x 
      002839 4F               [ 1] 3707 	clr a 
      00283A 81               [ 4] 3708 	ret 
                                   3709 
                                   3710 
                                   3711 ;---------------------
                                   3712 ; BASIC: USR(addr,arg)
                                   3713 ; execute a function written 
                                   3714 ; in binary code.
                                   3715 ; input:
                                   3716 ;   addr	routine address 
                                   3717 ;   arg 	is an argument
                                   3718 ;           it can be ignore 
                                   3719 ;           by cally. 
                                   3720 ; output:
                                   3721 ;   xstack 	value returned by cally  
                                   3722 ;---------------------
      00283B                       3723 usr:
      00283B CD 16 EF         [ 4] 3724 	call func_args 
      00283E A1 02            [ 1] 3725 	cp a,#2
      002840 27 03            [ 1] 3726 	jreq 1$  
      002842 CC 13 BD         [ 2] 3727 	jp syntax_error 
      002845                       3728 1$: 
      002845                       3729 	_at_next ; A:X addr 
      002845 90 E6 03         [ 1]    1     ld a,(3,y)
      002848 93               [ 1]    2     ldw x,y 
      002849 EE 04            [ 2]    3     ldw x,(4,x)
      00284B CF 00 19         [ 2] 3730 	ldw ptr16,X 
      00284E                       3731 	_xpop  ; arg 
      00284E 90 F6            [ 1]    1     ld a,(y)
      002850 93               [ 1]    2     ldw x,y 
      002851 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      002853 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002857                       3732 	_store_top ; overwrite addr 
      002857 90 F7            [ 1]    1     ld (y),a 
      002859 90 EF 01         [ 2]    2     ldw (1,y),x     
      00285C 72 CD 00 19      [ 6] 3733     call [ptr16]
      002860 81               [ 4] 3734 	ret 
                                   3735 
                                   3736 
                                   3737 ;------------------------------
                                   3738 ; BASIC: BYE 
                                   3739 ; halt mcu in its lowest power mode 
                                   3740 ; wait for reset or external interrupt
                                   3741 ; do a cold start on wakeup.
                                   3742 ;------------------------------
      002861                       3743 bye:
      002861 72 0D 52 30 FB   [ 2] 3744 	btjf UART1_SR,#UART_SR_TC,.
      002866 8E               [10] 3745 	halt
      002867 CC 00 B5         [ 2] 3746 	jp cold_start  
                                   3747 
                                   3748 ;----------------------------------
                                   3749 ; BASIC: SLEEP 
                                   3750 ; halt mcu until reset or external
                                   3751 ; interrupt.
                                   3752 ; Resume progam after SLEEP command
                                   3753 ;----------------------------------
      00286A                       3754 sleep:
      00286A 72 0D 52 30 FB   [ 2] 3755 	btjf UART1_SR,#UART_SR_TC,.
      00286F 72 16 00 22      [ 1] 3756 	bset flags,#FSLEEP
      002873 8E               [10] 3757 	halt 
      002874 81               [ 4] 3758 	ret 
                                   3759 
                                   3760 ;-------------------------------
                                   3761 ; BASIC: PAUSE expr 
                                   3762 ; suspend execution for n msec.
                                   3763 ; input:
                                   3764 ;	none
                                   3765 ; output:
                                   3766 ;	none 
                                   3767 ;------------------------------
      002875                       3768 pause:
      002875 CD 18 34         [ 4] 3769 	call expression
      002878 A1 84            [ 1] 3770 	cp a,#TK_INTGR
      00287A 27 03            [ 1] 3771 	jreq 1$ 
      00287C CC 13 BD         [ 2] 3772 	jp syntax_error
      00287F                       3773 1$: _xpop 
      00287F 90 F6            [ 1]    1     ld a,(y)
      002881 93               [ 1]    2     ldw x,y 
      002882 EE 01            [ 2]    3     ldw x,(1,x)
      002884 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002888                       3774 pause02:
      002888 CF 00 12         [ 2] 3775 	ldw timer,x 
      00288B CE 00 12         [ 2] 3776 1$: ldw x,timer 
      00288E 5D               [ 2] 3777 	tnzw x 
      00288F 27 03            [ 1] 3778 	jreq 2$
      002891 8F               [10] 3779 	wfi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      002892 26 F7            [ 1] 3780 	jrne 1$
      002894                       3781 2$:	
      002894 81               [ 4] 3782 	ret 
                                   3783 
                                   3784 ;------------------------------
                                   3785 ; BASIC: AWU expr
                                   3786 ; halt mcu for 'expr' milliseconds
                                   3787 ; use Auto wakeup peripheral
                                   3788 ; all oscillators stopped except LSI
                                   3789 ; range: 1ms - 511ms
                                   3790 ; input:
                                   3791 ;  none
                                   3792 ; output:
                                   3793 ;  none:
                                   3794 ;------------------------------
      002895                       3795 awu:
      002895 CD 18 34         [ 4] 3796   call expression
      002898 A1 84            [ 1] 3797   cp a,#TK_INTGR
      00289A 27 03            [ 1] 3798   jreq 1$
      00289C CC 13 BD         [ 2] 3799   jp syntax_error
      00289F                       3800 1$: _xpop 
      00289F 90 F6            [ 1]    1     ld a,(y)
      0028A1 93               [ 1]    2     ldw x,y 
      0028A2 EE 01            [ 2]    3     ldw x,(1,x)
      0028A4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028A8                       3801 awu02:
      0028A8 A3 14 00         [ 2] 3802   cpw x,#5120
      0028AB 2B 0C            [ 1] 3803   jrmi 1$ 
      0028AD 35 0F 50 F2      [ 1] 3804   mov AWU_TBR,#15 
      0028B1 A6 1E            [ 1] 3805   ld a,#30
      0028B3 62               [ 2] 3806   div x,a
      0028B4 A6 10            [ 1] 3807   ld a,#16
      0028B6 62               [ 2] 3808   div x,a 
      0028B7 20 1E            [ 2] 3809   jra 4$
      0028B9                       3810 1$: 
      0028B9 A3 08 00         [ 2] 3811   cpw x,#2048
      0028BC 2B 09            [ 1] 3812   jrmi 2$ 
      0028BE 35 0E 50 F2      [ 1] 3813   mov AWU_TBR,#14
      0028C2 A6 50            [ 1] 3814   ld a,#80
      0028C4 62               [ 2] 3815   div x,a 
      0028C5 20 10            [ 2] 3816   jra 4$   
      0028C7                       3817 2$:
      0028C7 35 07 50 F2      [ 1] 3818   mov AWU_TBR,#7
      0028CB                       3819 3$:  
                                   3820 ; while X > 64  divide by 2 and increment AWU_TBR 
      0028CB A3 00 40         [ 2] 3821   cpw x,#64 
      0028CE 23 07            [ 2] 3822   jrule 4$ 
      0028D0 72 5C 50 F2      [ 1] 3823   inc AWU_TBR 
      0028D4 54               [ 2] 3824   srlw x 
      0028D5 20 F4            [ 2] 3825   jra 3$ 
      0028D7                       3826 4$:
      0028D7 9F               [ 1] 3827   ld a, xl
      0028D8 4A               [ 1] 3828   dec a 
      0028D9 27 01            [ 1] 3829   jreq 5$
      0028DB 4A               [ 1] 3830   dec a 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      0028DC                       3831 5$: 
      0028DC A4 3E            [ 1] 3832   and a,#0x3e 
      0028DE C7 50 F1         [ 1] 3833   ld AWU_APR,a 
      0028E1 72 18 50 F0      [ 1] 3834   bset AWU_CSR,#AWU_CSR_AWUEN
      0028E5 8E               [10] 3835   halt 
                                   3836 
      0028E6 81               [ 4] 3837   ret 
                                   3838 
                                   3839 ;------------------------------
                                   3840 ; BASIC: TICKS
                                   3841 ; return msec ticks counter value 
                                   3842 ; input:
                                   3843 ; 	none 
                                   3844 ; output:
                                   3845 ;	X 		TK_INTGR
                                   3846 ;-------------------------------
      0028E7                       3847 get_ticks:
      0028E7 C6 00 0F         [ 1] 3848 	ld a,ticks 
      0028EA CE 00 10         [ 2] 3849 	ldw x,ticks+1 
      0028ED 81               [ 4] 3850 	ret 
                                   3851 
                                   3852 ;------------------------------
                                   3853 ; BASIC: ABS(expr)
                                   3854 ; return absolute value of expr.
                                   3855 ; input:
                                   3856 ;   none
                                   3857 ; output:
                                   3858 ;   xstack    positive int24 
                                   3859 ;-------------------------------
      0028EE                       3860 abs:
      0028EE CD 16 EF         [ 4] 3861 	call func_args 
      0028F1 A1 01            [ 1] 3862 	cp a,#1 
      0028F3 27 03            [ 1] 3863 	jreq 0$ 
      0028F5 CC 13 BD         [ 2] 3864 	jp syntax_error
      0028F8                       3865 0$:  
      0028F8 CD 01 F3         [ 4] 3866 	call abs24 
      0028FB                       3867 	_xpop 
      0028FB 90 F6            [ 1]    1     ld a,(y)
      0028FD 93               [ 1]    2     ldw x,y 
      0028FE EE 01            [ 2]    3     ldw x,(1,x)
      002900 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002904 81               [ 4] 3868 	ret 
                                   3869 
                                   3870 ;------------------------------
                                   3871 ; BASIC: LSHIFT(expr1,expr2)
                                   3872 ; logical shift left expr1 by 
                                   3873 ; expr2 bits 
                                   3874 ; output:
                                   3875 ; 	A:x 	result 
                                   3876 ;------------------------------
      002905                       3877 lshift:
      002905 CD 16 EF         [ 4] 3878 	call func_args
      002908 A1 02            [ 1] 3879 	cp a,#2 
      00290A 27 03            [ 1] 3880 	jreq 1$
      00290C CC 13 BD         [ 2] 3881 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      00290F                       3882 1$: _xpop 
      00290F 90 F6            [ 1]    1     ld a,(y)
      002911 93               [ 1]    2     ldw x,y 
      002912 EE 01            [ 2]    3     ldw x,(1,x)
      002914 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002918 9F               [ 1] 3883 	ld a,xl 
      002919 88               [ 1] 3884 	push a      
      00291A                       3885 	_xpop  ; T>A:X 
      00291A 90 F6            [ 1]    1     ld a,(y)
      00291C 93               [ 1]    2     ldw x,y 
      00291D EE 01            [ 2]    3     ldw x,(1,x)
      00291F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002923 0D 01            [ 1] 3886 	tnz (1,sp) 
      002925 27 07            [ 1] 3887 	jreq 4$
      002927 98               [ 1] 3888 2$:	rcf 
      002928 59               [ 2] 3889 	rlcw x 
      002929 49               [ 1] 3890 	rlc a 
      00292A 0A 01            [ 1] 3891 	dec (1,sp) 
      00292C 26 F9            [ 1] 3892 	jrne 2$
      00292E                       3893 4$: _drop 1 
      00292E 5B 01            [ 2]    1     addw sp,#1 
      002930 81               [ 4] 3894 	ret
                                   3895 
                                   3896 ;------------------------------
                                   3897 ; BASIC: RSHIFT(expr1,expr2)
                                   3898 ; logical shift right expr1 by 
                                   3899 ; expr2 bits.
                                   3900 ; output:
                                   3901 ; 	A 		TK_INTGR
                                   3902 ;   X 		result 
                                   3903 ;------------------------------
      002931                       3904 rshift:
      002931 CD 16 EF         [ 4] 3905 	call func_args
      002934 A1 02            [ 1] 3906 	cp a,#2 
      002936 27 03            [ 1] 3907 	jreq 1$
      002938 CC 13 BD         [ 2] 3908 	jp syntax_error
      00293B                       3909 1$: _xpop ; T>A:X
      00293B 90 F6            [ 1]    1     ld a,(y)
      00293D 93               [ 1]    2     ldw x,y 
      00293E EE 01            [ 2]    3     ldw x,(1,x)
      002940 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002944 9F               [ 1] 3910     ld a,xl 
      002945 88               [ 1] 3911 	push a    
      002946                       3912 	_xpop  
      002946 90 F6            [ 1]    1     ld a,(y)
      002948 93               [ 1]    2     ldw x,y 
      002949 EE 01            [ 2]    3     ldw x,(1,x)
      00294B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00294F 0D 01            [ 1] 3913 	tnz (1,sp)
      002951 27 07            [ 1] 3914 	jreq 4$
      002953 98               [ 1] 3915 2$:	rcf 
      002954 46               [ 1] 3916 	rrc a 
      002955 56               [ 2] 3917 	rrcw x 
      002956 0A 01            [ 1] 3918 	dec (1,sp) 
      002958 26 F9            [ 1] 3919 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      00295A                       3920 4$: _drop 1 
      00295A 5B 01            [ 2]    1     addw sp,#1 
      00295C 81               [ 4] 3921 	ret
                                   3922 
                                   3923 ;--------------------------
                                   3924 ; BASIC: FCPU integer
                                   3925 ; set CPU frequency 
                                   3926 ;-------------------------- 
                                   3927 
      00295D                       3928 fcpu:
      00295D A6 84            [ 1] 3929 	ld a,#TK_INTGR
      00295F CD 16 E2         [ 4] 3930 	call expect 
      002962 CD 15 4B         [ 4] 3931 	call get_int24 
      002965 9F               [ 1] 3932 	ld a,xl 
      002966 A4 07            [ 1] 3933 	and a,#7 
      002968 C7 50 C6         [ 1] 3934 	ld CLK_CKDIVR,a 
      00296B 81               [ 4] 3935 	ret 
                                   3936 
                                   3937 ;------------------------------
                                   3938 ; BASIC: PMODE pin#, mode 
                                   3939 ; Arduino pin. 
                                   3940 ; define pin as input or output
                                   3941 ; pin#: {0..15}
                                   3942 ; mode: INPUT|OUTPUT  
                                   3943 ;------------------------------
                           000001  3944 	PINNO=1
                           000001  3945 	VSIZE=1
      00296C                       3946 pin_mode:
      00296C                       3947 	_vars VSIZE 
      00296C 52 01            [ 2]    1     sub sp,#VSIZE 
      00296E CD 16 F4         [ 4] 3948 	call arg_list 
      002971 A1 02            [ 1] 3949 	cp a,#2 
      002973 27 03            [ 1] 3950 	jreq 1$
      002975 CC 13 BD         [ 2] 3951 	jp syntax_error 
      002978                       3952 1$: _xpop 
      002978 90 F6            [ 1]    1     ld a,(y)
      00297A 93               [ 1]    2     ldw x,y 
      00297B EE 01            [ 2]    3     ldw x,(1,x)
      00297D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002981 CF 00 19         [ 2] 3953 	ldw ptr16,x ; mode 
      002984                       3954 	_xpop ; Dx pin 
      002984 90 F6            [ 1]    1     ld a,(y)
      002986 93               [ 1]    2     ldw x,y 
      002987 EE 01            [ 2]    3     ldw x,(1,x)
      002989 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00298D CD 29 CB         [ 4] 3955 	call select_pin 
      002990 6B 01            [ 1] 3956 	ld (PINNO,sp),a  
      002992 A6 01            [ 1] 3957 	ld a,#1 
      002994 0D 01            [ 1] 3958 	tnz (PINNO,sp)
      002996 27 0D            [ 1] 3959 	jreq 4$
      002998 48               [ 1] 3960 2$:	sll a 
      002999 0A 01            [ 1] 3961 	dec (PINNO,sp)
      00299B 26 FB            [ 1] 3962 	jrne 2$ 
      00299D 6B 01            [ 1] 3963 	ld (PINNO,sp),a
      00299F 7B 01            [ 1] 3964 	ld a,(PINNO,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      0029A1 EA 03            [ 1] 3965 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      0029A3 E7 03            [ 1] 3966 	ld (GPIO_CR1,x),a 
      0029A5 A6 01            [ 1] 3967 4$:	ld a,#OUTP
      0029A7 C1 00 0E         [ 1] 3968 	cp a,acc8 
      0029AA 27 10            [ 1] 3969 	jreq 6$
                                   3970 ; input mode
                                   3971 ; disable external interrupt 
      0029AC 7B 01            [ 1] 3972 	ld a,(PINNO,sp)
      0029AE 43               [ 1] 3973 	cpl a 
      0029AF E4 04            [ 1] 3974 	and a,(GPIO_CR2,x)
      0029B1 E7 04            [ 1] 3975 	ld (GPIO_CR2,x),a 
                                   3976 ;clear bit in DDR for input mode 
      0029B3 7B 01            [ 1] 3977 	ld a,(PINNO,sp)
      0029B5 43               [ 1] 3978 	cpl a 
      0029B6 E4 02            [ 1] 3979 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      0029B8 E7 02            [ 1] 3980 	ld (GPIO_DDR,x),a 
      0029BA 20 0C            [ 2] 3981 	jra 9$
      0029BC                       3982 6$: ;output mode  
      0029BC 7B 01            [ 1] 3983 	ld a,(PINNO,sp)
      0029BE EA 02            [ 1] 3984 	or a,(GPIO_DDR,x) ; bit==1 for output 
      0029C0 E7 02            [ 1] 3985 	ld (GPIO_DDR,x),a 
      0029C2 7B 01            [ 1] 3986 	ld a,(PINNO,sp)
      0029C4 EA 04            [ 1] 3987 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      0029C6 E7 04            [ 1] 3988 	ld (GPIO_CR2,x),a 
      0029C8                       3989 9$:	
      0029C8                       3990 	_drop VSIZE 
      0029C8 5B 01            [ 2]    1     addw sp,#VSIZE 
      0029CA 81               [ 4] 3991 	ret
                                   3992 
                                   3993 ;------------------------
                                   3994 ; select Arduino pin 
                                   3995 ; input:
                                   3996 ;   X 	 {0..15} Arduino Dx 
                                   3997 ; output:
                                   3998 ;   A     stm8s208 pin 
                                   3999 ;   X     base address s208 GPIO port 
                                   4000 ;---------------------------
      0029CB                       4001 select_pin:
      0029CB 58               [ 2] 4002 	sllw x 
      0029CC 1C 29 DB         [ 2] 4003 	addw x,#arduino_to_8s208 
      0029CF FE               [ 2] 4004 	ldw x,(x)
      0029D0 9F               [ 1] 4005 	ld a,xl 
      0029D1 88               [ 1] 4006 	push a 
      0029D2 5E               [ 1] 4007 	swapw x 
      0029D3 A6 05            [ 1] 4008 	ld a,#5 
      0029D5 42               [ 4] 4009 	mul x,a 
      0029D6 1C 50 00         [ 2] 4010 	addw x,#GPIO_BASE 
      0029D9 84               [ 1] 4011 	pop a 
      0029DA 81               [ 4] 4012 	ret 
                                   4013 ; translation from Arduino D0..D15 to stm8s208rb 
      0029DB                       4014 arduino_to_8s208:
      0029DB 03 06                 4015 .byte 3,6 ; D0 
      0029DD 03 05                 4016 .byte 3,5 ; D1 
      0029DF 04 00                 4017 .byte 4,0 ; D2 
      0029E1 02 01                 4018 .byte 2,1 ; D3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      0029E3 06 00                 4019 .byte 6,0 ; D4
      0029E5 02 02                 4020 .byte 2,2 ; D5
      0029E7 02 03                 4021 .byte 2,3 ; D6
      0029E9 03 01                 4022 .byte 3,1 ; D7
      0029EB 03 03                 4023 .byte 3,3 ; D8
      0029ED 02 04                 4024 .byte 2,4 ; D9
      0029EF 04 05                 4025 .byte 4,5 ; D10
      0029F1 02 06                 4026 .byte 2,6 ; D11
      0029F3 02 07                 4027 .byte 2,7 ; D12
      0029F5 02 05                 4028 .byte 2,5 ; D13
      0029F7 04 02                 4029 .byte 4,2 ; D14
      0029F9 04 01                 4030 .byte 4,1 ; D15
                                   4031 
                                   4032 
                                   4033 ;------------------------------
                                   4034 ; BASIC: RND(expr)
                                   4035 ; return random number 
                                   4036 ; between 1 and expr inclusive
                                   4037 ; xorshift16 
                                   4038 ; ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4039 ; input:
                                   4040 ; 	none 
                                   4041 ; output:
                                   4042 ;	xstack 	random positive integer 
                                   4043 ;------------------------------
      0029FB                       4044 random:
      0029FB CD 16 EF         [ 4] 4045 	call func_args 
      0029FE A1 01            [ 1] 4046 	cp a,#1
      002A00 27 03            [ 1] 4047 	jreq 1$
      002A02 CC 13 BD         [ 2] 4048 	jp syntax_error
      002A05                       4049 1$:  
      002A05                       4050 	_xpop   
      002A05 90 F6            [ 1]    1     ld a,(y)
      002A07 93               [ 1]    2     ldw x,y 
      002A08 EE 01            [ 2]    3     ldw x,(1,x)
      002A0A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A0E 89               [ 2] 4051 	pushw x 
      002A0F 88               [ 1] 4052 	push a  
      002A10 A6 80            [ 1] 4053 	ld a,#0x80 
      002A12 15 01            [ 1] 4054 	bcp a,(1,sp)
      002A14 27 05            [ 1] 4055 	jreq 2$
      002A16 A6 0A            [ 1] 4056 	ld a,#ERR_BAD_VALUE
      002A18 CC 13 BF         [ 2] 4057 	jp tb_error
      002A1B                       4058 2$: 
                                   4059 ; acc16=(x<<5)^x 
      002A1B CE 00 14         [ 2] 4060 	ldw x,seedx 
      002A1E 58               [ 2] 4061 	sllw x 
      002A1F 58               [ 2] 4062 	sllw x 
      002A20 58               [ 2] 4063 	sllw x 
      002A21 58               [ 2] 4064 	sllw x 
      002A22 58               [ 2] 4065 	sllw x 
      002A23 9E               [ 1] 4066 	ld a,xh 
      002A24 C8 00 14         [ 1] 4067 	xor a,seedx 
      002A27 C7 00 0D         [ 1] 4068 	ld acc16,a 
      002A2A 9F               [ 1] 4069 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002A2B C8 00 15         [ 1] 4070 	xor a,seedx+1 
      002A2E C7 00 0E         [ 1] 4071 	ld acc8,a 
                                   4072 ; seedx=seedy 
      002A31 CE 00 16         [ 2] 4073 	ldw x,seedy 
      002A34 CF 00 14         [ 2] 4074 	ldw seedx,x  
                                   4075 ; seedy=seedy^(seedy>>1)
      002A37 CE 00 16         [ 2] 4076 	ldw x,seedy 
      002A3A 54               [ 2] 4077 	srlw x 
      002A3B 9E               [ 1] 4078 	ld a,xh 
      002A3C C8 00 16         [ 1] 4079 	xor a,seedy 
      002A3F C7 00 16         [ 1] 4080 	ld seedy,a  
      002A42 9F               [ 1] 4081 	ld a,xl 
      002A43 C8 00 17         [ 1] 4082 	xor a,seedy+1 
      002A46 C7 00 17         [ 1] 4083 	ld seedy+1,a 
                                   4084 ; acc16>>3 
      002A49 CE 00 0D         [ 2] 4085 	ldw x,acc16 
      002A4C 54               [ 2] 4086 	srlw x 
      002A4D 54               [ 2] 4087 	srlw x 
      002A4E 54               [ 2] 4088 	srlw x 
                                   4089 ; x=acc16^x 
      002A4F 9E               [ 1] 4090 	ld a,xh 
      002A50 C8 00 0D         [ 1] 4091 	xor a,acc16 
      002A53 C7 00 0D         [ 1] 4092 	ld acc16,a 
      002A56 9F               [ 1] 4093 	ld a,xl 
      002A57 C8 00 0E         [ 1] 4094 	xor a,acc8 
      002A5A C7 00 0E         [ 1] 4095 	ld acc8,a 
                                   4096 ; seedy=acc16^seedy 
      002A5D C8 00 17         [ 1] 4097 	xor a,seedy+1
      002A60 97               [ 1] 4098 	ld xl,a 
      002A61 C6 00 0D         [ 1] 4099 	ld a,acc16 
      002A64 C8 00 16         [ 1] 4100 	xor a,seedy
      002A67 95               [ 1] 4101 	ld xh,a 
      002A68 CF 00 16         [ 2] 4102 	ldw seedy,x 
                                   4103 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002A6B C6 00 15         [ 1] 4104 	ld a,seedx+1
      002A6E A4 7F            [ 1] 4105 	and a,#127
      002A70                       4106 	_xpush 
      002A70 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002A74 90 F7            [ 1]    2     ld (y),a 
      002A76 90 EF 01         [ 2]    3     ldw (1,y),x 
      002A79 84               [ 1] 4107 	pop a 
      002A7A 85               [ 2] 4108 	popw x 
      002A7B                       4109 	_xpush 
      002A7B 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002A7F 90 F7            [ 1]    2     ld (y),a 
      002A81 90 EF 01         [ 2]    3     ldw (1,y),x 
      002A84 CD 03 A1         [ 4] 4110 	call mod24 
      002A87                       4111 	_xpop
      002A87 90 F6            [ 1]    1     ld a,(y)
      002A89 93               [ 1]    2     ldw x,y 
      002A8A EE 01            [ 2]    3     ldw x,(1,x)
      002A8C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A90 1C 00 01         [ 2] 4112 	addw x,#1 
      002A93 A9 00            [ 1] 4113 	adc a,#0  
      002A95 81               [ 4] 4114 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



                                   4115 
                                   4116 ;---------------------------------
                                   4117 ; BASIC: WORDS 
                                   4118 ; affiche la listes des mots du
                                   4119 ; dictionnaire ainsi que le nombre
                                   4120 ; de mots.
                                   4121 ;---------------------------------
                           000001  4122 	WLEN=1 ; word length
                           000002  4123 	LLEN=2 ; character sent to console
                           000003  4124 	WCNT=3 ; count words printed 
                           000003  4125 	VSIZE=3 
      002A96                       4126 words:
      002A96 CD 16 CC         [ 4] 4127 	call cmd_line_only
      002A99 90 89            [ 2] 4128 	pushw y
      002A9B                       4129 	_vars VSIZE
      002A9B 52 03            [ 2]    1     sub sp,#VSIZE 
      002A9D 0F 02            [ 1] 4130 	clr (LLEN,sp)
      002A9F 0F 03            [ 1] 4131 	clr (WCNT,sp)
      002AA1 90 AE 33 AD      [ 2] 4132 	ldw y,#kword_dict+2
      002AA5 93               [ 1] 4133 0$:	ldw x,y
      002AA6 F6               [ 1] 4134 	ld a,(x)
      002AA7 A4 0F            [ 1] 4135 	and a,#15 
      002AA9 6B 01            [ 1] 4136 	ld (WLEN,sp),a 
      002AAB 0C 03            [ 1] 4137 	inc (WCNT,sp)
      002AAD 5C               [ 1] 4138 1$:	incw x 
      002AAE F6               [ 1] 4139 	ld a,(x)
      002AAF CD 06 25         [ 4] 4140 	call putc 
      002AB2 0C 02            [ 1] 4141 	inc (LLEN,sp)
      002AB4 0A 01            [ 1] 4142 	dec (WLEN,sp)
      002AB6 26 F5            [ 1] 4143 	jrne 1$
      002AB8 A6 46            [ 1] 4144 	ld a,#70
      002ABA 11 02            [ 1] 4145 	cp a,(LLEN,sp)
      002ABC 2B 09            [ 1] 4146 	jrmi 2$   
      002ABE A6 20            [ 1] 4147 	ld a,#SPACE 
      002AC0 CD 06 25         [ 4] 4148 	call putc 
      002AC3 0C 02            [ 1] 4149 	inc (LLEN,sp) 
      002AC5 20 07            [ 2] 4150 	jra 3$
      002AC7 A6 0D            [ 1] 4151 2$: ld a,#CR 
      002AC9 CD 06 25         [ 4] 4152 	call putc 
      002ACC 0F 02            [ 1] 4153 	clr (LLEN,sp)
      002ACE 72 A2 00 02      [ 2] 4154 3$:	subw y,#2 
      002AD2 90 FE            [ 2] 4155 	ldw y,(y)
      002AD4 26 CF            [ 1] 4156 	jrne 0$ 
      002AD6 A6 0D            [ 1] 4157 	ld a,#CR 
      002AD8 CD 06 25         [ 4] 4158 	call putc  
      002ADB 5F               [ 1] 4159 	clrw x 
      002ADC 7B 03            [ 1] 4160 	ld a,(WCNT,sp)
      002ADE 97               [ 1] 4161 	ld xl,a 
      002ADF CD 15 61         [ 4] 4162 	call prt_i16 
      002AE2 AE 2A ED         [ 2] 4163 	ldw x,#words_count_msg
      002AE5 CD 06 82         [ 4] 4164 	call puts 
      002AE8                       4165 	_drop VSIZE 
      002AE8 5B 03            [ 2]    1     addw sp,#VSIZE 
      002AEA 90 85            [ 2] 4166 	popw y 
      002AEC 81               [ 4] 4167 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002AED 20 77 6F 72 64 73 20  4168 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4169 
                                   4170 
                                   4171 ;-----------------------------
                                   4172 ; BASIC: TIMER expr 
                                   4173 ; initialize count down timer 
                                   4174 ;-----------------------------
      002B03                       4175 set_timer:
      002B03 CD 16 F4         [ 4] 4176 	call arg_list
      002B06 A1 01            [ 1] 4177 	cp a,#1 
      002B08 27 03            [ 1] 4178 	jreq 1$
      002B0A CC 13 BD         [ 2] 4179 	jp syntax_error
      002B0D                       4180 1$: 
      002B0D                       4181 	_xpop  
      002B0D 90 F6            [ 1]    1     ld a,(y)
      002B0F 93               [ 1]    2     ldw x,y 
      002B10 EE 01            [ 2]    3     ldw x,(1,x)
      002B12 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B16 CF 00 12         [ 2] 4182 	ldw timer,x 
      002B19 81               [ 4] 4183 	ret 
                                   4184 
                                   4185 ;------------------------------
                                   4186 ; BASIC: TIMEOUT 
                                   4187 ; return state of timer 
                                   4188 ; output:
                                   4189 ;   A:X     0 not timeout 
                                   4190 ;   A:X     -1 timeout 
                                   4191 ;------------------------------
      002B1A                       4192 timeout:
      002B1A 4F               [ 1] 4193 	clr a 
      002B1B CE 00 12         [ 2] 4194 	ldw x,timer 
      002B1E 27 02            [ 1] 4195 	jreq 1$
      002B20 5F               [ 1] 4196 	clrw x
      002B21 81               [ 4] 4197 	ret  
      002B22 43               [ 1] 4198 1$:	cpl a
      002B23 53               [ 2] 4199 	cplw x 
      002B24 81               [ 4] 4200 	ret 
                                   4201  	
                                   4202 
                                   4203 
                                   4204 
                                   4205 ;-----------------------------------
                                   4206 ; BASIC: IWDGEN expr1 
                                   4207 ; enable independant watchdog timer
                                   4208 ; expr1 is delay in multiple of 62.5µsec
                                   4209 ; expr1 -> {1..16383}
                                   4210 ;-----------------------------------
      002B25                       4211 enable_iwdg:
      002B25 CD 16 F4         [ 4] 4212 	call arg_list
      002B28 A1 01            [ 1] 4213 	cp a,#1 
      002B2A 27 03            [ 1] 4214 	jreq 1$
      002B2C CC 13 BD         [ 2] 4215 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002B2F                       4216 1$: _xpop  
      002B2F 90 F6            [ 1]    1     ld a,(y)
      002B31 93               [ 1]    2     ldw x,y 
      002B32 EE 01            [ 2]    3     ldw x,(1,x)
      002B34 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B38 4B 00            [ 1] 4217 	push #0
      002B3A 35 CC 50 E0      [ 1] 4218 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002B3E 9E               [ 1] 4219 	ld a,xh 
      002B3F A4 3F            [ 1] 4220 	and a,#0x3f
      002B41 95               [ 1] 4221 	ld xh,a  
      002B42 A3 00 FF         [ 2] 4222 2$:	cpw x,#255
      002B45 23 06            [ 2] 4223 	jrule 3$
      002B47 0C 01            [ 1] 4224 	inc (1,sp)
      002B49 98               [ 1] 4225 	rcf 
      002B4A 56               [ 2] 4226 	rrcw x 
      002B4B 20 F5            [ 2] 4227 	jra 2$
      002B4D 35 55 50 E0      [ 1] 4228 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002B51 84               [ 1] 4229 	pop a  
      002B52 C7 50 E1         [ 1] 4230 	ld IWDG_PR,a 
      002B55 9F               [ 1] 4231 	ld a,xl
      002B56 4A               [ 1] 4232 	dec a 
      002B57 35 55 50 E0      [ 1] 4233 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002B5B C7 50 E2         [ 1] 4234 	ld IWDG_RLR,a 
      002B5E 35 AA 50 E0      [ 1] 4235 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002B62 81               [ 4] 4236 	ret 
                                   4237 
                                   4238 
                                   4239 ;-----------------------------------
                                   4240 ; BASIC: IWDGREF  
                                   4241 ; refresh independant watchdog count down 
                                   4242 ; timer before it reset MCU. 
                                   4243 ;-----------------------------------
      002B63                       4244 refresh_iwdg:
      002B63 35 AA 50 E0      [ 1] 4245 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002B67 81               [ 4] 4246 	ret 
                                   4247 
                                   4248 
                                   4249 ;-------------------------------------
                                   4250 ; BASIC: LOG2(expr)
                                   4251 ; return logarithm base 2 of expr 
                                   4252 ; this is the position of most significant
                                   4253 ; bit set. 
                                   4254 ; input: 
                                   4255 ; output:
                                   4256 ;   A     TK_INTGR 
                                   4257 ;   xstack log2 
                                   4258 ;*********************************
      002B68                       4259 log2:
      002B68 CD 16 EF         [ 4] 4260 	call func_args 
      002B6B A1 01            [ 1] 4261 	cp a,#1 
      002B6D 27 03            [ 1] 4262 	jreq 1$
      002B6F CC 13 BD         [ 2] 4263 	jp syntax_error 
      002B72                       4264 1$: 
      002B72                       4265 	_xpop    
      002B72 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002B74 93               [ 1]    2     ldw x,y 
      002B75 EE 01            [ 2]    3     ldw x,(1,x)
      002B77 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B7B 4D               [ 1] 4266 	tnz a
      002B7C 26 08            [ 1] 4267 	jrne 2$ 
      002B7E 5D               [ 2] 4268 	tnzw x 
      002B7F 26 05            [ 1] 4269 	jrne 2$
      002B81 A6 0A            [ 1] 4270 	ld a,#ERR_BAD_VALUE
      002B83 CC 13 BF         [ 2] 4271 	jp tb_error 
      002B86 4B 18            [ 1] 4272 2$: push #24 
      002B88 59               [ 2] 4273 3$: rlcw x 
      002B89 49               [ 1] 4274     rlc a 
      002B8A 25 04            [ 1] 4275 	jrc 4$
      002B8C 0A 01            [ 1] 4276 	dec (1,sp) 
      002B8E 26 F8            [ 1] 4277 	jrne 3$
      002B90 5F               [ 1] 4278 4$: clrw x 
      002B91 84               [ 1] 4279     pop a 
      002B92 4A               [ 1] 4280 	dec a
      002B93 02               [ 1] 4281 	rlwa x  
      002B94                       4282 9$:	
      002B94 81               [ 4] 4283 	ret 
                                   4284 
                                   4285 ;-----------------------------------
                                   4286 ; BASIC: BIT(expr) 
                                   4287 ; expr ->{0..23}
                                   4288 ; return 2^expr 
                                   4289 ; output:
                                   4290 ;    A:X    2^expr 
                                   4291 ;-----------------------------------
      002B95                       4292 bitmask:
      002B95 CD 16 EF         [ 4] 4293     call func_args 
      002B98 A1 01            [ 1] 4294 	cp a,#1
      002B9A 27 03            [ 1] 4295 	jreq 1$
      002B9C CC 13 BD         [ 2] 4296 	jp syntax_error 
      002B9F                       4297 1$: _xpop 
      002B9F 90 F6            [ 1]    1     ld a,(y)
      002BA1 93               [ 1]    2     ldw x,y 
      002BA2 EE 01            [ 2]    3     ldw x,(1,x)
      002BA4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BA8 9F               [ 1] 4298 	ld a,xl 
      002BA9 AE 00 01         [ 2] 4299 	ldw x,#1 
      002BAC A4 17            [ 1] 4300 	and a,#23
      002BAE 27 0A            [ 1] 4301 	jreq 9$
      002BB0 88               [ 1] 4302 	push a 
      002BB1 4F               [ 1] 4303 	clr a 
      002BB2                       4304 2$: 
      002BB2 58               [ 2] 4305 	slaw x 
      002BB3 49               [ 1] 4306 	rlc a 	
      002BB4 0A 01            [ 1] 4307 	dec (1,sp)
      002BB6 26 FA            [ 1] 4308 	jrne 2$ 
      002BB8                       4309 4$:
      002BB8                       4310     _drop 1 
      002BB8 5B 01            [ 2]    1     addw sp,#1 
      002BBA 81               [ 4] 4311 9$:	ret 
                                   4312 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



                                   4313 ;------------------------------
                                   4314 ; BASIC: DO 
                                   4315 ; initiate a DO ... UNTIL loop 
                                   4316 ;------------------------------
                           000003  4317 	DOLP_ADR=3 
                           000005  4318 	DOLP_INW=5
                           000004  4319 	VSIZE=4 
      002BBB                       4320 do_loop:
      002BBB 85               [ 2] 4321 	popw x 
      002BBC                       4322 	_vars VSIZE 
      002BBC 52 04            [ 2]    1     sub sp,#VSIZE 
      002BBE 89               [ 2] 4323 	pushw x 
      002BBF CE 00 04         [ 2] 4324 	ldw x,basicptr 
      002BC2 1F 03            [ 2] 4325 	ldw (DOLP_ADR,sp),x
      002BC4 CE 00 00         [ 2] 4326 	ldw x,in.w 
      002BC7 1F 05            [ 2] 4327 	ldw (DOLP_INW,sp),x
      002BC9 72 5C 00 1F      [ 1] 4328 	inc loop_depth 
      002BCD 81               [ 4] 4329 	ret 
                                   4330 
                                   4331 ;--------------------------------
                                   4332 ; BASIC: UNTIL expr 
                                   4333 ; loop if exprssion is false 
                                   4334 ; else terminate loop
                                   4335 ;--------------------------------
      002BCE                       4336 until: 
      002BCE 72 5D 00 1F      [ 1] 4337 	tnz loop_depth 
      002BD2 26 03            [ 1] 4338 	jrne 1$ 
      002BD4 CC 13 BD         [ 2] 4339 	jp syntax_error 
      002BD7                       4340 1$: 
      002BD7 CD 19 4D         [ 4] 4341 	call condition  
      002BDA                       4342 	_xpop 
      002BDA 90 F6            [ 1]    1     ld a,(y)
      002BDC 93               [ 1]    2     ldw x,y 
      002BDD EE 01            [ 2]    3     ldw x,(1,x)
      002BDF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BE3 4D               [ 1] 4343 	tnz a 
      002BE4 26 13            [ 1] 4344 	jrne 9$ 
      002BE6 5D               [ 2] 4345 	tnzw x 
      002BE7 26 10            [ 1] 4346 	jrne 9$ 
      002BE9 1E 03            [ 2] 4347 	ldw x,(DOLP_ADR,sp)
      002BEB CF 00 04         [ 2] 4348 	ldw basicptr,x 
      002BEE E6 02            [ 1] 4349 	ld a,(2,x)
      002BF0 C7 00 02         [ 1] 4350 	ld count,a 
      002BF3 1E 05            [ 2] 4351 	ldw x,(DOLP_INW,sp)
      002BF5 CF 00 00         [ 2] 4352 	ldw in.w,x 
      002BF8 81               [ 4] 4353 	ret 
      002BF9                       4354 9$:	; remove loop data from stack  
      002BF9 85               [ 2] 4355 	popw x
      002BFA                       4356 	_drop VSIZE
      002BFA 5B 04            [ 2]    1     addw sp,#VSIZE 
      002BFC 72 5A 00 1F      [ 1] 4357 	dec loop_depth 
      002C00 FC               [ 2] 4358 	jp (x)
                                   4359 
                                   4360 ;--------------------------
                                   4361 ; BASIC: PORTA...PORTI  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



                                   4362 ;  return constant value 
                                   4363 ;  PORT  base address 
                                   4364 ;---------------------------
      002C01                       4365 const_porta:
      002C01 AE 50 00         [ 2] 4366 	ldw x,#PA_BASE 
      002C04 4F               [ 1] 4367 	clr a 
      002C05 81               [ 4] 4368 	ret 
      002C06                       4369 const_portb:
      002C06 AE 50 05         [ 2] 4370 	ldw x,#PB_BASE 
      002C09 4F               [ 1] 4371 	clr a 
      002C0A 81               [ 4] 4372 	ret 
      002C0B                       4373 const_portc:
      002C0B AE 50 0A         [ 2] 4374 	ldw x,#PC_BASE 
      002C0E 4F               [ 1] 4375 	clr a 
      002C0F 81               [ 4] 4376 	ret 
      002C10                       4377 const_portd:
      002C10 AE 50 0F         [ 2] 4378 	ldw x,#PD_BASE 
      002C13 4F               [ 1] 4379 	clr a 
      002C14 81               [ 4] 4380 	ret 
      002C15                       4381 const_porte:
      002C15 AE 50 14         [ 2] 4382 	ldw x,#PE_BASE 
      002C18 4F               [ 1] 4383 	clr a 
      002C19 81               [ 4] 4384 	ret 
      002C1A                       4385 const_portf:
      002C1A AE 50 19         [ 2] 4386 	ldw x,#PF_BASE 
      002C1D 4F               [ 1] 4387 	clr a 
      002C1E 81               [ 4] 4388 	ret 
      002C1F                       4389 const_portg:
      002C1F AE 50 1E         [ 2] 4390 	ldw x,#PG_BASE 
      002C22 4F               [ 1] 4391 	clr a 
      002C23 81               [ 4] 4392 	ret 
      002C24                       4393 const_porti:
      002C24 AE 50 28         [ 2] 4394 	ldw x,#PI_BASE 
      002C27 4F               [ 1] 4395 	clr a 
      002C28 81               [ 4] 4396 	ret 
                                   4397 
                                   4398 ;-------------------------------
                                   4399 ; following return constant 
                                   4400 ; related to GPIO register offset 
                                   4401 ;---------------------------------
      002C29                       4402 const_odr:
      002C29 4F               [ 1] 4403 	clr a 
      002C2A AE 00 00         [ 2] 4404 	ldw x,#GPIO_ODR
      002C2D 81               [ 4] 4405 	ret 
      002C2E                       4406 const_idr:
      002C2E 4F               [ 1] 4407 	clr a 
      002C2F AE 00 01         [ 2] 4408 	ldw x,#GPIO_IDR
      002C32 81               [ 4] 4409 	ret 
      002C33                       4410 const_ddr:
      002C33 4F               [ 1] 4411 	clr a
      002C34 AE 00 02         [ 2] 4412 	ldw x,#GPIO_DDR
      002C37 81               [ 4] 4413 	ret 
      002C38                       4414 const_cr1:
      002C38 4F               [ 1] 4415 	clr a 
      002C39 AE 00 03         [ 2] 4416 	ldw x,#GPIO_CR1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002C3C 81               [ 4] 4417 	ret 
      002C3D                       4418 const_cr2:
      002C3D 4F               [ 1] 4419 	clr a
      002C3E AE 00 04         [ 2] 4420 	ldw x,#GPIO_CR2
      002C41 81               [ 4] 4421 	ret 
                                   4422 ;-------------------------
                                   4423 ; BASIC: POUT 
                                   4424 ;  constant for port mode
                                   4425 ;  used by PMODE 
                                   4426 ;  to set pin as output
                                   4427 ;------------------------
      002C42                       4428 const_output:
      002C42 4F               [ 1] 4429 	clr a 
      002C43 AE 00 01         [ 2] 4430 	ldw x,#OUTP
      002C46 81               [ 4] 4431 	ret 
                                   4432 
                                   4433 ;-------------------------
                                   4434 ; BASIC: PINP 
                                   4435 ;  constant for port mode
                                   4436 ;  used by PMODE 
                                   4437 ;  to set pin as input
                                   4438 ;------------------------
      002C47                       4439 const_input:
      002C47 4F               [ 1] 4440 	clr a  
      002C48 AE 00 00         [ 2] 4441 	ldw x,#INP 
      002C4B 81               [ 4] 4442 	ret 
                                   4443 	
                                   4444 ;-----------------------
                                   4445 ; memory area constants
                                   4446 ;-----------------------
      002C4C                       4447 const_eeprom_base:
      002C4C 4F               [ 1] 4448 	clr a  
      002C4D AE 40 00         [ 2] 4449 	ldw x,#EEPROM_BASE 
      002C50 81               [ 4] 4450 	ret 
                                   4451 
                                   4452 ;---------------------------
                                   4453 ; BASIC: DATA 
                                   4454 ; when the interpreter find 
                                   4455 ; a DATA line it skip it.
                                   4456 ;---------------------------
      002C51                       4457 data:
      002C51 55 00 02 00 01   [ 1] 4458 	mov in,count 
      002C56 81               [ 4] 4459 	ret 
                                   4460 
                                   4461 ;------------------------------
                                   4462 ; check if it is a DATA line 
                                   4463 ; input: 
                                   4464 ;    X    line address 
                                   4465 ; output:
                                   4466 ;    Z    set if DATA line 
                                   4467 ;----------------------------
      002C57                       4468 is_data_line:
      002C57 89               [ 2] 4469 	pushw x 
      002C58 E6 03            [ 1] 4470 	ld a,(3,x)
      002C5A A1 80            [ 1] 4471 	cp a,#TK_CMD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002C5C 26 05            [ 1] 4472 	jrne 9$
      002C5E EE 04            [ 2] 4473 	ldw x,(4,x)
      002C60 A3 2C 51         [ 2] 4474 	cpw x,#data  
      002C63 85               [ 2] 4475 9$: popw x 
      002C64 81               [ 4] 4476 	ret 
                                   4477 
                                   4478 ;---------------------------------
                                   4479 ; BASIC: RESTORE [line#]
                                   4480 ; set data_ptr to first data line
                                   4481 ; if no DATA found pointer set to
                                   4482 ; zero.
                                   4483 ; if a line# is given as argument 
                                   4484 ; a data line with that number 
                                   4485 ; is searched and the data pointer 
                                   4486 ; is set to it. If there is no 
                                   4487 ; data line with that number 
                                   4488 ; the program is interrupted. 
                                   4489 ;---------------------------------
      002C65                       4490 restore:
      002C65 CD 16 D7         [ 4] 4491 	call runtime_only
      002C68 5F               [ 1] 4492 	clrw x 
      002C69 CF 00 06         [ 2] 4493 	ldw data_ptr,x 
      002C6C CF 00 08         [ 2] 4494 	ldw data_ofs,x 
      002C6F CE 00 1B         [ 2] 4495 	ldw x,txtbgn 
      002C72 CD 15 19         [ 4] 4496 	call next_token 
      002C75 A1 84            [ 1] 4497 	cp a,#TK_INTGR
      002C77 26 10            [ 1] 4498 	jrne 0$
      002C79 CD 15 4B         [ 4] 4499 	call get_int24
      002C7C 90 89            [ 2] 4500 	pushw y 
      002C7E 4F               [ 1] 4501 	clr a 
      002C7F CD 09 6B         [ 4] 4502 	call search_lineno  
      002C82 90 85            [ 2] 4503 	popw y 
      002C84 5D               [ 2] 4504 	tnzw x 
      002C85 26 17            [ 1] 4505 	jrne set_data_pointer 
      002C87 20 44            [ 2] 4506 	jra data_error 
      002C89                       4507 0$:
      002C89                       4508 	_unget_token  
      002C89 55 00 03 00 01   [ 1]    1      mov in,in.saved  
                                   4509 ; search first DATA line 	
      002C8E C3 00 1D         [ 2] 4510 1$:	cpw x,txtend
      002C91 24 3A            [ 1] 4511 	jruge data_error 
      002C93                       4512 2$:	
      002C93 CD 2C 57         [ 4] 4513 	call is_data_line 
      002C96 26 00            [ 1] 4514 	jrne 4$
      002C98 CD 2C AB         [ 4] 4515 4$:	call try_next_line 
      002C9B 26 FB            [ 1] 4516 	jrne 4$ 
      002C9D 81               [ 4] 4517 	ret 
                                   4518 
                                   4519 ;---------------------
                                   4520 ; set data pointer 
                                   4521 ; variables at new line 
                                   4522 ; input:
                                   4523 ;    X    line address 
                                   4524 ;----------------------
      002C9E                       4525 set_data_pointer:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002C9E CF 00 06         [ 2] 4526 	ldw data_ptr,x
      002CA1 E6 02            [ 1] 4527 	ld a,(2,x)
      002CA3 C7 00 09         [ 1] 4528 	ld data_len,a 
      002CA6 35 06 00 08      [ 1] 4529 	mov data_ofs,#FIRST_DATA_ITEM
      002CAA 81               [ 4] 4530 	ret 
                                   4531 
                                   4532 
                                   4533 ;--------------------
                                   4534 ; at end of data line 
                                   4535 ; check if next line 
                                   4536 ; is a data line 
                                   4537 ; input:
                                   4538 ;    X   actual line address 
                                   4539 ;  
                                   4540 ;-------------------
      002CAB                       4541 try_next_line: 
      002CAB E6 02            [ 1] 4542 	ld a,(2,x)
      002CAD C7 00 0E         [ 1] 4543 	ld acc8,a 
      002CB0 72 5F 00 0D      [ 1] 4544 	clr acc16 
      002CB4 72 BB 00 0D      [ 2] 4545 	addw x,acc16 
      002CB8 C3 00 1D         [ 2] 4546 	cpw x,txtend 
      002CBB 25 02            [ 1] 4547 	jrult 1$
      002CBD 20 0E            [ 2] 4548 	jra data_error 
      002CBF                       4549 1$:	
      002CBF CD 2C 57         [ 4] 4550 	call is_data_line 
      002CC2 27 04            [ 1] 4551 	jreq 2$
      002CC4 A6 01            [ 1] 4552 	ld a,#1  
      002CC6 20 04            [ 2] 4553 	jra 9$
      002CC8 CD 2C 9E         [ 4] 4554 2$:	call set_data_pointer
      002CCB 4F               [ 1] 4555 	clr a  
      002CCC 81               [ 4] 4556 9$:	ret 
      002CCD                       4557 data_error:	
      002CCD A6 0C            [ 1] 4558     ld a,#ERR_NO_DATA 
      002CCF CC 13 BF         [ 2] 4559 	jp tb_error 
                                   4560 
                                   4561 
                                   4562 ;---------------------------------
                                   4563 ; BASIC: READ 
                                   4564 ; return next data item | 0 
                                   4565 ;---------------------------------
                           000001  4566 	CTX_BPTR=1 
                           000003  4567 	CTX_IN=3 
                           000004  4568 	CTX_COUNT=4 
                           000005  4569 	INT24=5
                           000007  4570 	VSIZE=7 
      002CD2                       4571 read:
      002CD2 CD 16 D7         [ 4] 4572 	call runtime_only
      002CD5                       4573 	_vars  VSIZE 
      002CD5 52 07            [ 2]    1     sub sp,#VSIZE 
      002CD7 CD 1D B9         [ 4] 4574 	call save_context
      002CDA                       4575 read01:	
      002CDA C6 00 08         [ 1] 4576 	ld a,data_ofs
      002CDD C1 00 09         [ 1] 4577 	cp a,data_len 
      002CE0 27 37            [ 1] 4578 	jreq 2$ ; end of line  
      002CE2                       4579 0$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002CE2 CE 00 06         [ 2] 4580 	ldw x,data_ptr 
      002CE5 CF 00 04         [ 2] 4581 	ldw basicptr,x 
      002CE8 55 00 08 00 01   [ 1] 4582 	mov in,data_ofs 
      002CED 55 00 09 00 02   [ 1] 4583 	mov count,data_len  
      002CF2 CD 18 34         [ 4] 4584 	call expression 
      002CF5 A1 84            [ 1] 4585 	cp a,#TK_INTGR 
      002CF7 27 03            [ 1] 4586 	jreq 1$ 
      002CF9 CC 13 BD         [ 2] 4587 	jp syntax_error 
      002CFC                       4588 1$:
      002CFC CD 15 19         [ 4] 4589 	call next_token ; skip comma
      002CFF CE 00 04         [ 2] 4590 	ldw x,basicptr 
      002D02 CF 00 06         [ 2] 4591 	ldw data_ptr,x 
      002D05 55 00 01 00 08   [ 1] 4592 	mov data_ofs,in 
      002D0A CD 1D C9         [ 4] 4593 	call rest_context
      002D0D                       4594 	_xpop 
      002D0D 90 F6            [ 1]    1     ld a,(y)
      002D0F 93               [ 1]    2     ldw x,y 
      002D10 EE 01            [ 2]    3     ldw x,(1,x)
      002D12 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D16                       4595 	_drop VSIZE 
      002D16 5B 07            [ 2]    1     addw sp,#VSIZE 
      002D18 81               [ 4] 4596 	ret 
      002D19                       4597 2$: ; end of line reached 
                                   4598 	; try next line 
      002D19 CE 00 06         [ 2] 4599 	ldw x,data_ptr  
      002D1C CD 2C AB         [ 4] 4600 	call try_next_line
      002D1F 27 C1            [ 1] 4601 	jreq 0$ 
      002D21 20 AA            [ 2] 4602 	jra data_error 
                                   4603 
                                   4604 ;---------------------------------
                                   4605 ; BASIC: SPIEN clkdiv, 0|1  
                                   4606 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4607 ; if clkdiv==-1 disable SPI
                                   4608 ; 0|1 -> disable|enable  
                                   4609 ;--------------------------------- 
                           000005  4610 SPI_CS_BIT=5
      002D23                       4611 spi_enable:
      002D23 CD 16 F4         [ 4] 4612 	call arg_list 
      002D26 A1 02            [ 1] 4613 	cp a,#2
      002D28 27 03            [ 1] 4614 	jreq 1$
      002D2A CC 13 BD         [ 2] 4615 	jp syntax_error 
      002D2D                       4616 1$: 
      002D2D 72 12 50 C7      [ 1] 4617 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002D31 85               [ 2] 4618 	popw x  
      002D32 5D               [ 2] 4619 	tnzw x 
      002D33 27 21            [ 1] 4620 	jreq spi_disable 
      002D35 85               [ 2] 4621 	popw x 
      002D36 A6 08            [ 1] 4622 	ld a,#(1<<SPI_CR1_BR)
      002D38 42               [ 4] 4623 	mul x,a 
      002D39 9F               [ 1] 4624 	ld a,xl 
      002D3A C7 52 00         [ 1] 4625 	ld SPI_CR1,a 
                                   4626 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002D3D 72 1A 50 14      [ 1] 4627 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002D41 72 1A 50 16      [ 1] 4628 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4629 ; configure SPI as master mode 0.	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002D45 72 14 52 00      [ 1] 4630 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4631 ; ~CS line controlled by sofware 	
      002D49 72 12 52 01      [ 1] 4632 	bset SPI_CR2,#SPI_CR2_SSM 
      002D4D 72 10 52 01      [ 1] 4633     bset SPI_CR2,#SPI_CR2_SSI 
                                   4634 ; enable SPI
      002D51 72 1C 52 00      [ 1] 4635 	bset SPI_CR1,#SPI_CR1_SPE 	
      002D55 81               [ 4] 4636 	ret 
      002D56                       4637 spi_disable:
      002D56                       4638 	_drop #2; throw first argument.
      002D56 5B 02            [ 2]    1     addw sp,##2 
                                   4639 ; wait spi idle 
      002D58 A6 82            [ 1] 4640 1$:	ld a,#0x82 
      002D5A C4 52 03         [ 1] 4641 	and a,SPI_SR
      002D5D A1 02            [ 1] 4642 	cp a,#2 
      002D5F 26 F7            [ 1] 4643 	jrne 1$
      002D61 72 1D 52 00      [ 1] 4644 	bres SPI_CR1,#SPI_CR1_SPE
      002D65 72 13 50 C7      [ 1] 4645 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002D69 72 1B 50 16      [ 1] 4646 	bres PE_DDR,#SPI_CS_BIT 
      002D6D 81               [ 4] 4647 	ret 
                                   4648 
      002D6E                       4649 spi_clear_error:
      002D6E A6 78            [ 1] 4650 	ld a,#0x78 
      002D70 C5 52 03         [ 1] 4651 	bcp a,SPI_SR 
      002D73 27 04            [ 1] 4652 	jreq 1$
      002D75 72 5F 52 03      [ 1] 4653 	clr SPI_SR 
      002D79 81               [ 4] 4654 1$: ret 
                                   4655 
      002D7A                       4656 spi_send_byte:
      002D7A 88               [ 1] 4657 	push a 
      002D7B CD 2D 6E         [ 4] 4658 	call spi_clear_error
      002D7E 84               [ 1] 4659 	pop a 
      002D7F 72 03 52 03 FB   [ 2] 4660 	btjf SPI_SR,#SPI_SR_TXE,.
      002D84 C7 52 04         [ 1] 4661 	ld SPI_DR,a
      002D87 72 01 52 03 FB   [ 2] 4662 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002D8C C6 52 04         [ 1] 4663 	ld a,SPI_DR 
      002D8F 81               [ 4] 4664 	ret 
                                   4665 
      002D90                       4666 spi_rcv_byte:
      002D90 A6 FF            [ 1] 4667 	ld a,#255
      002D92 72 01 52 03 E3   [ 2] 4668 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002D97 C6 52 04         [ 1] 4669 	ld a,SPI_DR 
      002D9A 81               [ 4] 4670 	ret
                                   4671 
                                   4672 ;------------------------------
                                   4673 ; BASIC: SPIWR byte [,byte]
                                   4674 ; write 1 or more byte
                                   4675 ;------------------------------
      002D9B                       4676 spi_write:
      002D9B CD 18 34         [ 4] 4677 	call expression
      002D9E A1 84            [ 1] 4678 	cp a,#TK_INTGR 
      002DA0 27 03            [ 1] 4679 	jreq 1$
      002DA2 CC 13 BD         [ 2] 4680 	jp syntax_error 
      002DA5                       4681 1$:	
      002DA5 9F               [ 1] 4682 	ld a,xl 
      002DA6 CD 2D 7A         [ 4] 4683 	call spi_send_byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      002DA9 CD 15 19         [ 4] 4684 	call next_token 
      002DAC A1 08            [ 1] 4685 	cp a,#TK_COMMA 
      002DAE 26 02            [ 1] 4686 	jrne 2$ 
      002DB0 20 E9            [ 2] 4687 	jra spi_write 
      002DB2 4D               [ 1] 4688 2$:	tnz a 
      002DB3 27 05            [ 1] 4689 	jreq 3$
      002DB5                       4690 	_unget_token  
      002DB5 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002DBA 81               [ 4] 4691 3$:	ret 
                                   4692 
                                   4693 
                                   4694 ;-------------------------------
                                   4695 ; BASIC: SPIRD 	
                                   4696 ; read one byte from SPI 
                                   4697 ;-------------------------------
      002DBB                       4698 spi_read:
      002DBB CD 2D 90         [ 4] 4699 	call spi_rcv_byte 
      002DBE 5F               [ 1] 4700 	clrw x 
      002DBF 97               [ 1] 4701 	ld xl,a 
      002DC0 4F               [ 1] 4702 	clr a  
      002DC1 81               [ 4] 4703 	ret 
                                   4704 
                                   4705 ;------------------------------
                                   4706 ; BASIC: SPISEL 0|1 
                                   4707 ; set state of ~CS line
                                   4708 ; 0|1 deselect|select  
                                   4709 ;------------------------------
      002DC2                       4710 spi_select:
      002DC2 CD 15 19         [ 4] 4711 	call next_token 
      002DC5 A1 84            [ 1] 4712 	cp a,#TK_INTGR 
      002DC7 27 03            [ 1] 4713 	jreq 1$
      002DC9 CC 13 BD         [ 2] 4714 	jp syntax_error 
      002DCC 5D               [ 2] 4715 1$: tnzw x  
      002DCD 27 05            [ 1] 4716 	jreq cs_high 
      002DCF 72 1B 50 14      [ 1] 4717 	bres PE_ODR,#SPI_CS_BIT
      002DD3 81               [ 4] 4718 	ret 
      002DD4                       4719 cs_high: 
      002DD4 72 1A 50 14      [ 1] 4720 	bset PE_ODR,#SPI_CS_BIT
      002DD8 81               [ 4] 4721 	ret 
                                   4722 
                                   4723 ;-------------------------------
                                   4724 ; BASIC: PAD 
                                   4725 ; Return pad buffer address.
                                   4726 ;------------------------------
      002DD9                       4727 pad_ref:
      002DD9 AE 16 B8         [ 2] 4728 	ldw x,#pad 
      002DDC 4F               [ 1] 4729 	clr a
      002DDD 81               [ 4] 4730 	ret 
                                   4731 
                                   4732 ;****************************
                                   4733 ; expression stack 
                                   4734 ; manipulation routines
                                   4735 ;****************************
                                   4736 
                                   4737 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



                                   4738 ; BASIC: PUSH expr|rel|cond 
                                   4739 ; push the result on xtack
                                   4740 ;-----------------------------
      002DDE                       4741 xpush:
      002DDE CD 19 4D         [ 4] 4742 	call condition 
      002DE1 81               [ 4] 4743 	ret 
                                   4744 
                                   4745 ;------------------------------
                                   4746 ; BASIC: POP 
                                   4747 ; pop top of xstack 
                                   4748 ;------------------------------
      002DE2                       4749 xpop:
      002DE2                       4750 	_xpop 
      002DE2 90 F6            [ 1]    1     ld a,(y)
      002DE4 93               [ 1]    2     ldw x,y 
      002DE5 EE 01            [ 2]    3     ldw x,(1,x)
      002DE7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DEB 81               [ 4] 4751 	ret 
                                   4752 
                                   4753 
                                   4754 ;------------------------------
                                   4755 ; BASIC: ALLOC expr 
                                   4756 ; allocate expr element on xtack 
                                   4757 ;-------------------------------
      002DEC                       4758 xalloc: 
      002DEC CD 18 34         [ 4] 4759 	call expression 
      002DEF A1 84            [ 1] 4760 	cp a,#TK_INTGR
      002DF1 27 03            [ 1] 4761 	jreq 1$ 
      002DF3 CC 13 BD         [ 2] 4762 	jp syntax_error
      002DF6                       4763 1$: _xpop 
      002DF6 90 F6            [ 1]    1     ld a,(y)
      002DF8 93               [ 1]    2     ldw x,y 
      002DF9 EE 01            [ 2]    3     ldw x,(1,x)
      002DFB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DFF 4D               [ 1] 4764 	tnz a 
      002E00 27 05            [ 1] 4765 	jreq 3$ 
      002E02 A6 0A            [ 1] 4766 2$:	ld a,#ERR_BAD_VALUE
      002E04 CC 13 BF         [ 2] 4767 	jp tb_error 
      002E07 A3 00 14         [ 2] 4768 3$: cpw x,#XSTACK_SIZE 
      002E0A 22 F6            [ 1] 4769 	jrugt 2$
      002E0C A6 03            [ 1] 4770 	ld a,#CELL_SIZE 
      002E0E 42               [ 4] 4771 	mul x,a 
      002E0F CF 00 0D         [ 2] 4772 	ldw acc16,x 
      002E12 72 B2 00 0D      [ 2] 4773 	subw y,acc16 
      002E16 90 A3 17 38      [ 2] 4774 	cpw y,#xstack_full
      002E1A 22 05            [ 1] 4775 	jrugt 9$
      002E1C A6 01            [ 1] 4776 	ld a,#ERR_MEM_FULL
      002E1E CC 13 BF         [ 2] 4777 	jp tb_error 
      002E21                       4778 9$:	 
      002E21 81               [ 4] 4779 	ret 
                                   4780 
                                   4781 
                                   4782 ;------------------------------
                                   4783 ;  BASIC DROP expr 
                                   4784 ;  expr in range {0..XSTACK_SIZE}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



                                   4785 ;  discard n elements from xtack
                                   4786 ;------------------------------
      002E22                       4787 xdrop:
      002E22 CD 18 34         [ 4] 4788 	call expression 
      002E25 A1 84            [ 1] 4789 	cp a,#TK_INTGR
      002E27 27 03            [ 1] 4790 	jreq 1$ 
      002E29 CC 13 BD         [ 2] 4791 	jp syntax_error 
      002E2C                       4792 1$:	_xpop 
      002E2C 90 F6            [ 1]    1     ld a,(y)
      002E2E 93               [ 1]    2     ldw x,y 
      002E2F EE 01            [ 2]    3     ldw x,(1,x)
      002E31 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E35 9F               [ 1] 4793 	ld a,xl 
      002E36 A4 1F            [ 1] 4794 	and a,#0x1f 
      002E38 5F               [ 1] 4795 	clrw x 
      002E39 97               [ 1] 4796 	ld xl,a 
      002E3A A6 03            [ 1] 4797 	ld a,#CELL_SIZE 
      002E3C 42               [ 4] 4798 	mul x,a 
      002E3D CF 00 0D         [ 2] 4799 	ldw acc16,x  
      002E40 72 B9 00 0D      [ 2] 4800 	addw y,acc16 
      002E44 90 A3 17 73      [ 2] 4801 	cpw y,#XSTACK_EMPTY 
      002E48 23 04            [ 2] 4802 	jrule 9$
      002E4A 90 AE 17 73      [ 2] 4803 	ldw y,#XSTACK_EMPTY 
      002E4E 81               [ 4] 4804 9$:	ret 
                                   4805 
                                   4806 ;-----------------------
                                   4807 ; check if value in A:X 
                                   4808 ; is inside xstack bound
                                   4809 ; output:
                                   4810 ;    X     slot address  
                                   4811 ;-----------------------
      002E4F                       4812 xstack_bound:
      002E4F 4D               [ 1] 4813 	tnz a 
      002E50 26 16            [ 1] 4814 	jrne 8$ 
      002E52 A3 00 14         [ 2] 4815 1$: cpw x,#XSTACK_SIZE 
      002E55 22 11            [ 1] 4816 	jrugt 8$
      002E57 A6 03            [ 1] 4817 	ld a,#CELL_SIZE 
      002E59 42               [ 4] 4818 	mul x,a
      002E5A CF 00 0D         [ 2] 4819 	ldw acc16,x 
      002E5D 93               [ 1] 4820 	ldw x,y 
      002E5E 72 BB 00 0D      [ 2] 4821 	addw x,acc16 
      002E62 A3 17 73         [ 2] 4822 	cpw x,#XSTACK_EMPTY 
      002E65 24 01            [ 1] 4823 	jruge 8$  
      002E67 81               [ 4] 4824 	ret 
      002E68 A6 0A            [ 1] 4825 8$: ld a,#ERR_BAD_VALUE
      002E6A CC 13 BF         [ 2] 4826 	jp tb_error 
                                   4827 
                                   4828 ;-------------------------
                                   4829 ; BASIC: PUT expr, cond 
                                   4830 ; expr -> slot 
                                   4831 ; cond -> valut to put 
                                   4832 ; on xstack 
                                   4833 ;-------------------------
      002E6D                       4834 xput:
      002E6D CD 16 F4         [ 4] 4835 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      002E70 A1 02            [ 1] 4836 	cp a,#2 
      002E72 27 03            [ 1] 4837 	jreq 1$ 
      002E74 CC 13 BD         [ 2] 4838 0$:	jp syntax_error
      002E77                       4839 1$: _xpop   ; value to put 
      002E77 90 F6            [ 1]    1     ld a,(y)
      002E79 93               [ 1]    2     ldw x,y 
      002E7A EE 01            [ 2]    3     ldw x,(1,x)
      002E7C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E80 89               [ 2] 4840 	pushw x 
      002E81 88               [ 1] 4841 	push a 
      002E82                       4842 	_xpop    ; slot 
      002E82 90 F6            [ 1]    1     ld a,(y)
      002E84 93               [ 1]    2     ldw x,y 
      002E85 EE 01            [ 2]    3     ldw x,(1,x)
      002E87 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E8B CD 2E 4F         [ 4] 4843 	call xstack_bound
      002E8E CF 00 19         [ 2] 4844     ldw ptr16,x 
      002E91 84               [ 1] 4845 	pop a 
      002E92 85               [ 2] 4846 	popw x 
      002E93 72 C7 00 19      [ 4] 4847 	ld [ptr16],a 
      002E97 72 5C 00 1A      [ 1] 4848 	inc ptr8 
      002E9B 72 CF 00 19      [ 5] 4849 	ldw [ptr16],x 
      002E9F 81               [ 4] 4850 	ret 
                                   4851 
                                   4852 ;------------------------
                                   4853 ; BASIC: PICK expr 
                                   4854 ; get nième element on 
                                   4855 ; xtack. 
                                   4856 ;-----------------------
      002EA0                       4857 xpick:
      002EA0 CD 16 EF         [ 4] 4858 	call func_args 
      002EA3 A1 01            [ 1] 4859 	cp a,#1 
      002EA5 27 03            [ 1] 4860 	jreq 1$
      002EA7 CC 13 BD         [ 2] 4861 	jp syntax_error 
      002EAA                       4862 1$: _xpop 
      002EAA 90 F6            [ 1]    1     ld a,(y)
      002EAC 93               [ 1]    2     ldw x,y 
      002EAD EE 01            [ 2]    3     ldw x,(1,x)
      002EAF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EB3 CD 2E 4F         [ 4] 4863 	call xstack_bound
      002EB6 F6               [ 1] 4864     ld a,(x)
      002EB7 EE 01            [ 2] 4865 	ldw x,(1,x)				
      002EB9 81               [ 4] 4866 	ret 
                                   4867 
                                   4868 
                                   4869 ;----------------------------
                                   4870 ; BASIC: AUTORUN \C | label  
                                   4871 ;  \C -> cancel autorun 
                                   4872 ;  addr -> register an 
                                   4873 ;    autorun program 
                                   4874 ;    this program execute at 
                                   4875 ;     reset/boot 
                                   4876 ;----------------------------
      002EBA                       4877 cmd_auto_run:
      002EBA CD 16 CC         [ 4] 4878 	call cmd_line_only
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      002EBD CD 15 19         [ 4] 4879 	call next_token 
      002EC0 A1 03            [ 1] 4880 	cp a,#TK_LABEL 
      002EC2 27 19            [ 1] 4881 	jreq 1$ 
      002EC4 A1 04            [ 1] 4882 	cp a,#TK_CHAR 
      002EC6 26 12            [ 1] 4883 	jrne 0$ 
      002EC8 F6               [ 1] 4884 	ld a,(x)
      002EC9 72 5C 00 01      [ 1] 4885 	inc in 
      002ECD A4 DF            [ 1] 4886 	and a,#0xDF 
      002ECF A1 43            [ 1] 4887 	cp a,#'C 
      002ED1 26 07            [ 1] 4888 	jrne 0$ 
      002ED3 AE 40 00         [ 2] 4889 	ldw x,#EEPROM_BASE 
      002ED6 CD 26 1B         [ 4] 4890 	call erase_header
      002ED9 81               [ 4] 4891 	ret 
      002EDA CC 13 BD         [ 2] 4892 0$:	jp syntax_error
      002EDD 89               [ 2] 4893 1$:	pushw x 
      002EDE CD 15 32         [ 4] 4894 	call skip_string
      002EE1 85               [ 2] 4895 	popw x 
      002EE2 CD 2F 13         [ 4] 4896 	call search_program
      002EE5 26 05            [ 1] 4897 	jrne 2$ 
      002EE7 A6 0A            [ 1] 4898 	ld a,#ERR_BAD_VALUE
      002EE9 CC 13 BF         [ 2] 4899 	jp tb_error 
      002EEC 89               [ 2] 4900 2$: pushw x 
      002EED 72 5F 00 18      [ 1] 4901 	clr farptr 
      002EF1 AE 40 00         [ 2] 4902 	ldw x,#EEPROM_BASE
      002EF4 CF 00 19         [ 2] 4903 	ldw ptr16,x 
      002EF7 C6 2F 11         [ 1] 4904 	ld a,AR_SIGN 
      002EFA 5F               [ 1] 4905 	clrw x 	 
      002EFB CD 04 B1         [ 4] 4906 	call write_byte
      002EFE C6 2F 12         [ 1] 4907 	ld a,AR_SIGN+1
      002F01 CD 04 B1         [ 4] 4908 	call write_byte 
      002F04 7B 01            [ 1] 4909 	ld a,(1,sp)
      002F06 CD 04 B1         [ 4] 4910 	call write_byte 
      002F09 7B 02            [ 1] 4911 	ld a,(2,sp)
      002F0B CD 04 B1         [ 4] 4912 	call write_byte 
      002F0E                       4913 	_drop 2 
      002F0E 5B 02            [ 2]    1     addw sp,#2 
      002F10 81               [ 4] 4914 	ret 
                                   4915 
      002F11 41 52                 4916 AR_SIGN: .ascii "AR" ; autorun signature 
                                   4917 
                                   4918 ;-------------------------------
                                   4919 ; search a program in flash 
                                   4920 ; memory with a label at first 
                                   4921 ; that correspond to name 
                                   4922 ; pointed by X 
                                   4923 ; input:
                                   4924 ;    x      *name 
                                   4925 ; output: 
                                   4926 ;    X     prog_addr|0
                                   4927 ;-------------------------------
                           000001  4928 	WLKPTR=1 
                           000003  4929 	PNAME=3
                           000005  4930 	LIMIT=5
                           000007  4931 	YSAVE=7
                           000006  4932 	VSIZE=6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      002F13                       4933 search_program:
      002F13 90 89            [ 2] 4934 	pushw y 
      002F15                       4935 	_vars VSIZE 
      002F15 52 06            [ 2]    1     sub sp,#VSIZE 
      002F17 1F 03            [ 2] 4936 	ldw (PNAME,sp),x 
      002F19 CD 28 19         [ 4] 4937 	call uflash 
      002F1C 1F 05            [ 2] 4938 	ldw (LIMIT,sp),x 
      002F1E AE 34 00         [ 2] 4939 	ldw x,#app_space 
      002F21 1F 01            [ 2] 4940 1$:	ldw (WLKPTR,sp),x  
      002F23 4F               [ 1] 4941 	clr a 
      002F24 CD 22 27         [ 4] 4942 	call is_program_addr
      002F27 26 10            [ 1] 4943 	jrne 4$
      002F29 1C 00 07         [ 2] 4944 	addw x,#7 
      002F2C F6               [ 1] 4945 	ld a,(x)
      002F2D A1 03            [ 1] 4946 	cp a,#TK_LABEL 
      002F2F 26 08            [ 1] 4947 	jrne 4$ 
      002F31 5C               [ 1] 4948 	incw x 
      002F32 16 03            [ 2] 4949 	ldw y,(PNAME,sp)
      002F34 CD 10 C4         [ 4] 4950 	call strcmp
      002F37 26 0A            [ 1] 4951 	jrne 6$
      002F39                       4952 4$: 
      002F39 CD 26 E2         [ 4] 4953 	call skip_to_next
      002F3C 13 05            [ 2] 4954 	cpw x,(LIMIT,sp)
      002F3E 25 E1            [ 1] 4955 	jrult 1$
      002F40 5F               [ 1] 4956 	clrw x 
      002F41 20 05            [ 2] 4957 	jra 8$
      002F43                       4958 6$: ; found label 
      002F43 1E 01            [ 2] 4959 	ldw x,(WLKPTR,sp)
      002F45 1C 00 04         [ 2] 4960 	addw x,#4 	
      002F48                       4961 8$:	
      002F48                       4962 	_drop VSIZE  
      002F48 5B 06            [ 2]    1     addw sp,#VSIZE 
      002F4A 90 85            [ 2] 4963 	popw y 
      002F4C 81               [ 4] 4964 	ret 
                                   4965 
                                   4966 
                                   4967 ;-------------------------------
                                   4968 ; BASIC: CHAIN label [, line#]
                                   4969 ; Execute another program like it 
                                   4970 ; is a sub-routine. When the 
                                   4971 ; called program terminate 
                                   4972 ; execution continue at caller 
                                   4973 ; after CHAIN command. 
                                   4974 ; if a line# is given, the 
                                   4975 ; chained program start execution 
                                   4976 ; at this line#.
                                   4977 ;---------------------------------
                           000003  4978 	CHAIN_LN=3 
                           000005  4979 	CHAIN_ADDR=5 
                           000007  4980 	CHAIN_BP=7
                           000009  4981 	CHAIN_IN=9
                           00000A  4982 	CHAIN_COUNT=10 
                           00000B  4983 	CHAIN_TXTBGN=11 
                           00000D  4984 	CHAIN_TXTEND=13 
                           00000C  4985 	VSIZE=12 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



                           000004  4986 	DISCARD=4 
      002F4D                       4987 cmd_chain:
      002F4D 85               [ 2] 4988 	popw x 
      002F4E                       4989 	_vars VSIZE 
      002F4E 52 0C            [ 2]    1     sub sp,#VSIZE 
      002F50 89               [ 2] 4990 	pushw x
      002F51 0F 03            [ 1] 4991 	clr (CHAIN_LN,sp) 
      002F53 0F 04            [ 1] 4992 	clr (CHAIN_LN+1,sp)  
      002F55 A6 03            [ 1] 4993 	ld a,#TK_LABEL 
      002F57 CD 16 E2         [ 4] 4994 	call expect 
      002F5A 89               [ 2] 4995 	pushw x 
      002F5B CD 15 32         [ 4] 4996 	call skip_string
      002F5E 85               [ 2] 4997 	popw x 
      002F5F CD 2F 13         [ 4] 4998 	call search_program 
      002F62 5D               [ 2] 4999 	tnzw x  
      002F63 26 05            [ 1] 5000 	jrne 1$ 
      002F65 A6 0A            [ 1] 5001 0$:	ld a,#ERR_BAD_VALUE
      002F67 CC 13 BF         [ 2] 5002 	jp tb_error 
      002F6A 1F 05            [ 2] 5003 1$: ldw (CHAIN_ADDR,sp), x ; program addr 
      002F6C CD 15 19         [ 4] 5004     call next_token 
      002F6F A1 08            [ 1] 5005 	cp a,#TK_COMMA 
      002F71 26 0C            [ 1] 5006 	jrne 4$
      002F73 A6 84            [ 1] 5007 	ld a,#TK_INTGR
      002F75 CD 16 E2         [ 4] 5008 	call expect 
      002F78 CD 15 4B         [ 4] 5009 	call get_int24 
      002F7B 1F 03            [ 2] 5010 	ldw (CHAIN_LN,sp),x
      002F7D 20 05            [ 2] 5011 	jra 6$ 
      002F7F                       5012 4$: _unget_token 
      002F7F 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002F84                       5013 6$: ; save chain context 
      002F84 CE 00 04         [ 2] 5014 	ldw x,basicptr 
      002F87 1F 07            [ 2] 5015 	ldw (CHAIN_BP,sp),x 
      002F89 CE 00 01         [ 2] 5016 	ldw x,in
      002F8C 1F 09            [ 2] 5017 	ldw (CHAIN_IN,sp),x
      002F8E CE 00 1B         [ 2] 5018 	ldw x,txtbgn 
      002F91 1F 0B            [ 2] 5019 	ldw (CHAIN_TXTBGN,sp),x
      002F93 CE 00 1D         [ 2] 5020 	ldw x,txtend 
      002F96 1F 0D            [ 2] 5021 	ldw (CHAIN_TXTEND,sp),x  
                                   5022 ; set chained program context 	
      002F98 1E 05            [ 2] 5023 	ldw x,(CHAIN_ADDR,sp)
      002F9A CF 00 04         [ 2] 5024 	ldw basicptr,x 
      002F9D CF 00 1B         [ 2] 5025 	ldw txtbgn,x 
      002FA0 1D 00 02         [ 2] 5026 	subw x,#2
      002FA3 FE               [ 2] 5027 	ldw x,(x)
      002FA4 72 FB 05         [ 2] 5028 	addw x,(CHAIN_ADDR,sp)
      002FA7 CF 00 1D         [ 2] 5029 	ldw txtend,x  
      002FAA 1E 05            [ 2] 5030 	ldw x,(CHAIN_ADDR,sp)
      002FAC E6 02            [ 1] 5031 	ld a,(2,x)
      002FAE C7 00 02         [ 1] 5032 	ld count,a 
      002FB1 35 03 00 01      [ 1] 5033 	mov in,#3 
      002FB5 1E 03            [ 2] 5034 	ldw x,(CHAIN_LN,sp)
      002FB7 5D               [ 2] 5035 	tnzw x 
      002FB8 27 13            [ 1] 5036 	jreq 8$ 
      002FBA 90 89            [ 2] 5037 	pushw y
      002FBC 4F               [ 1] 5038 	clr a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      002FBD CD 09 6B         [ 4] 5039 	call search_lineno
      002FC0 90 85            [ 2] 5040 	popw y 
      002FC2 5D               [ 2] 5041 	tnzw x 
      002FC3 27 A0            [ 1] 5042 	jreq 0$ 
      002FC5 CF 00 04         [ 2] 5043 	ldw basicptr,x 
      002FC8 E6 02            [ 1] 5044 	ld a,(2,x)
      002FCA C7 00 02         [ 1] 5045 	ld count,a 
      002FCD 72 5C 00 33      [ 1] 5046 8$: inc chain_level
      002FD1 85               [ 2] 5047 	popw x 
      002FD2                       5048 	_drop DISCARD
      002FD2 5B 04            [ 2]    1     addw sp,#DISCARD 
      002FD4 FC               [ 2] 5049 	jp (x)
                                   5050 
                                   5051 
                                   5052 ;------------------------------
                                   5053 ;      dictionary 
                                   5054 ; format:
                                   5055 ;   link:   2 bytes 
                                   5056 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   5057 ;   cmd_name: 16 byte max 
                                   5058 ;   code_addr: 2 bytes 
                                   5059 ;------------------------------
                                   5060 	.macro _dict_entry len,name,code_addr 
                                   5061 	.word LINK 
                                   5062 	LINK=.
                                   5063 	.byte len   	
                                   5064 	.ascii "name"
                                   5065 	.word code_addr  
                                   5066 	.endm 
                                   5067 
                           000000  5068 	LINK=0
                                   5069 ; respect alphabetic order for BASIC names from Z-A
                                   5070 ; this sort order is for a cleaner WORDS cmd output. 	
      002FD5                       5071 kword_end:
      002FD5                       5072 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      002FD5 00 00                    1 	.word LINK 
                           002FD7     2 	LINK=.
      002FD7 A3                       3 	.byte 3+F_XOR   	
      002FD8 58 4F 52                 4 	.ascii "XOR"
      002FDB 00 8A                    5 	.word TK_XOR  
      002FDD                       5073 	_dict_entry,5,WRITE,write  
      002FDD 2F D7                    1 	.word LINK 
                           002FDF     2 	LINK=.
      002FDF 05                       3 	.byte 5   	
      002FE0 57 52 49 54 45           4 	.ascii "WRITE"
      002FE5 27 49                    5 	.word write  
      002FE7                       5074 	_dict_entry,5,WORDS,words 
      002FE7 2F DF                    1 	.word LINK 
                           002FE9     2 	LINK=.
      002FE9 05                       3 	.byte 5   	
      002FEA 57 4F 52 44 53           4 	.ascii "WORDS"
      002FEF 2A 96                    5 	.word words  
      002FF1                       5075 	_dict_entry 4,WAIT,wait 
      002FF1 2F E9                    1 	.word LINK 
                           002FF3     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      002FF3 04                       3 	.byte 4   	
      002FF4 57 41 49 54              4 	.ascii "WAIT"
      002FF8 1E 7E                    5 	.word wait  
      002FFA                       5076 	_dict_entry,3+F_IFUNC,USR,usr
      002FFA 2F F3                    1 	.word LINK 
                           002FFC     2 	LINK=.
      002FFC 13                       3 	.byte 3+F_IFUNC   	
      002FFD 55 53 52                 4 	.ascii "USR"
      003000 28 3B                    5 	.word usr  
      003002                       5077 	_dict_entry,5,UNTIL,until 
      003002 2F FC                    1 	.word LINK 
                           003004     2 	LINK=.
      003004 05                       3 	.byte 5   	
      003005 55 4E 54 49 4C           4 	.ascii "UNTIL"
      00300A 2B CE                    5 	.word until  
      00300C                       5078 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      00300C 30 04                    1 	.word LINK 
                           00300E     2 	LINK=.
      00300E 16                       3 	.byte 6+F_IFUNC   	
      00300F 55 46 4C 41 53 48        4 	.ascii "UFLASH"
      003015 28 19                    5 	.word uflash  
      003017                       5079 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      003017 30 0E                    1 	.word LINK 
                           003019     2 	LINK=.
      003019 16                       3 	.byte 6+F_IFUNC   	
      00301A 55 42 4F 55 4E 44        4 	.ascii "UBOUND"
      003020 1A 01                    5 	.word ubound  
      003022                       5080 	_dict_entry,4,TONE,tone  
      003022 30 19                    1 	.word LINK 
                           003024     2 	LINK=.
      003024 04                       3 	.byte 4   	
      003025 54 4F 4E 45              4 	.ascii "TONE"
      003029 23 2C                    5 	.word tone  
      00302B                       5081 	_dict_entry,2,TO,to
      00302B 30 24                    1 	.word LINK 
                           00302D     2 	LINK=.
      00302D 02                       3 	.byte 2   	
      00302E 54 4F                    4 	.ascii "TO"
      003030 1F E8                    5 	.word to  
      003032                       5082 	_dict_entry,5,TIMER,set_timer
      003032 30 2D                    1 	.word LINK 
                           003034     2 	LINK=.
      003034 05                       3 	.byte 5   	
      003035 54 49 4D 45 52           4 	.ascii "TIMER"
      00303A 2B 03                    5 	.word set_timer  
      00303C                       5083 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      00303C 30 34                    1 	.word LINK 
                           00303E     2 	LINK=.
      00303E 17                       3 	.byte 7+F_IFUNC   	
      00303F 54 49 4D 45 4F 55 54     4 	.ascii "TIMEOUT"
      003046 2B 1A                    5 	.word timeout  
      003048                       5084 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      003048 30 3E                    1 	.word LINK 
                           00304A     2 	LINK=.
      00304A 15                       3 	.byte 5+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      00304B 54 49 43 4B 53           4 	.ascii "TICKS"
      003050 28 E7                    5 	.word get_ticks  
      003052                       5085 	_dict_entry,4,STOP,stop 
      003052 30 4A                    1 	.word LINK 
                           003054     2 	LINK=.
      003054 04                       3 	.byte 4   	
      003055 53 54 4F 50              4 	.ascii "STOP"
      003059 24 95                    5 	.word stop  
      00305B                       5086 	_dict_entry,4,STEP,step 
      00305B 30 54                    1 	.word LINK 
                           00305D     2 	LINK=.
      00305D 04                       3 	.byte 4   	
      00305E 53 54 45 50              4 	.ascii "STEP"
      003062 20 2E                    5 	.word step  
      003064                       5087 	_dict_entry,5,SPIWR,spi_write
      003064 30 5D                    1 	.word LINK 
                           003066     2 	LINK=.
      003066 05                       3 	.byte 5   	
      003067 53 50 49 57 52           4 	.ascii "SPIWR"
      00306C 2D 9B                    5 	.word spi_write  
      00306E                       5088 	_dict_entry,6,SPISEL,spi_select
      00306E 30 66                    1 	.word LINK 
                           003070     2 	LINK=.
      003070 06                       3 	.byte 6   	
      003071 53 50 49 53 45 4C        4 	.ascii "SPISEL"
      003077 2D C2                    5 	.word spi_select  
      003079                       5089 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      003079 30 70                    1 	.word LINK 
                           00307B     2 	LINK=.
      00307B 15                       3 	.byte 5+F_IFUNC   	
      00307C 53 50 49 52 44           4 	.ascii "SPIRD"
      003081 2D BB                    5 	.word spi_read  
      003083                       5090 	_dict_entry,5,SPIEN,spi_enable 
      003083 30 7B                    1 	.word LINK 
                           003085     2 	LINK=.
      003085 05                       3 	.byte 5   	
      003086 53 50 49 45 4E           4 	.ascii "SPIEN"
      00308B 2D 23                    5 	.word spi_enable  
      00308D                       5091 	_dict_entry,5,SLEEP,sleep 
      00308D 30 85                    1 	.word LINK 
                           00308F     2 	LINK=.
      00308F 05                       3 	.byte 5   	
      003090 53 4C 45 45 50           4 	.ascii "SLEEP"
      003095 28 6A                    5 	.word sleep  
      003097                       5092     _dict_entry,4,SIZE,cmd_size 
      003097 30 8F                    1 	.word LINK 
                           003099     2 	LINK=.
      003099 04                       3 	.byte 4   	
      00309A 53 49 5A 45              4 	.ascii "SIZE"
      00309E 19 D4                    5 	.word cmd_size  
      0030A0                       5093 	_dict_entry,4,SAVE,cmd_save 
      0030A0 30 99                    1 	.word LINK 
                           0030A2     2 	LINK=.
      0030A2 04                       3 	.byte 4   	
      0030A3 53 41 56 45              4 	.ascii "SAVE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      0030A7 26 35                    5 	.word cmd_save  
      0030A9                       5094 	_dict_entry 3,RUN,cmd_run
      0030A9 30 A2                    1 	.word LINK 
                           0030AB     2 	LINK=.
      0030AB 03                       3 	.byte 3   	
      0030AC 52 55 4E                 4 	.ascii "RUN"
      0030AF 22 38                    5 	.word cmd_run  
      0030B1                       5095 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0030B1 30 AB                    1 	.word LINK 
                           0030B3     2 	LINK=.
      0030B3 16                       3 	.byte 6+F_IFUNC   	
      0030B4 52 53 48 49 46 54        4 	.ascii "RSHIFT"
      0030BA 29 31                    5 	.word rshift  
      0030BC                       5096 	_dict_entry,3+F_IFUNC,RND,random 
      0030BC 30 B3                    1 	.word LINK 
                           0030BE     2 	LINK=.
      0030BE 13                       3 	.byte 3+F_IFUNC   	
      0030BF 52 4E 44                 4 	.ascii "RND"
      0030C2 29 FB                    5 	.word random  
      0030C4                       5097 	_dict_entry,6,RETURN,return 
      0030C4 30 BE                    1 	.word LINK 
                           0030C6     2 	LINK=.
      0030C6 06                       3 	.byte 6   	
      0030C7 52 45 54 55 52 4E        4 	.ascii "RETURN"
      0030CD 22 11                    5 	.word return  
      0030CF                       5098 	_dict_entry,7,RESTORE,restore 
      0030CF 30 C6                    1 	.word LINK 
                           0030D1     2 	LINK=.
      0030D1 07                       3 	.byte 7   	
      0030D2 52 45 53 54 4F 52 45     4 	.ascii "RESTORE"
      0030D9 2C 65                    5 	.word restore  
      0030DB                       5099 	_dict_entry 3,REM,remark 
      0030DB 30 D1                    1 	.word LINK 
                           0030DD     2 	LINK=.
      0030DD 03                       3 	.byte 3   	
      0030DE 52 45 4D                 4 	.ascii "REM"
      0030E1 1E 78                    5 	.word remark  
      0030E3                       5100 	_dict_entry,6,REBOOT,cold_start
      0030E3 30 DD                    1 	.word LINK 
                           0030E5     2 	LINK=.
      0030E5 06                       3 	.byte 6   	
      0030E6 52 45 42 4F 4F 54        4 	.ascii "REBOOT"
      0030EC 00 B5                    5 	.word cold_start  
      0030EE                       5101 	_dict_entry,4+F_IFUNC,READ,read  
      0030EE 30 E5                    1 	.word LINK 
                           0030F0     2 	LINK=.
      0030F0 14                       3 	.byte 4+F_IFUNC   	
      0030F1 52 45 41 44              4 	.ascii "READ"
      0030F5 2C D2                    5 	.word read  
      0030F7                       5102 	_dict_entry,3,PUT,xput 
      0030F7 30 F0                    1 	.word LINK 
                           0030F9     2 	LINK=.
      0030F9 03                       3 	.byte 3   	
      0030FA 50 55 54                 4 	.ascii "PUT"
      0030FD 2E 6D                    5 	.word xput  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      0030FF                       5103 	_dict_entry,4,PUSH,xpush   
      0030FF 30 F9                    1 	.word LINK 
                           003101     2 	LINK=.
      003101 04                       3 	.byte 4   	
      003102 50 55 53 48              4 	.ascii "PUSH"
      003106 2D DE                    5 	.word xpush  
      003108                       5104 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      003108 31 01                    1 	.word LINK 
                           00310A     2 	LINK=.
      00310A 15                       3 	.byte 5+F_IFUNC   	
      00310B 50 4F 52 54 49           4 	.ascii "PORTI"
      003110 2C 24                    5 	.word const_porti  
      003112                       5105 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      003112 31 0A                    1 	.word LINK 
                           003114     2 	LINK=.
      003114 15                       3 	.byte 5+F_IFUNC   	
      003115 50 4F 52 54 47           4 	.ascii "PORTG"
      00311A 2C 1F                    5 	.word const_portg  
      00311C                       5106 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      00311C 31 14                    1 	.word LINK 
                           00311E     2 	LINK=.
      00311E 15                       3 	.byte 5+F_IFUNC   	
      00311F 50 4F 52 54 46           4 	.ascii "PORTF"
      003124 2C 1A                    5 	.word const_portf  
      003126                       5107 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      003126 31 1E                    1 	.word LINK 
                           003128     2 	LINK=.
      003128 15                       3 	.byte 5+F_IFUNC   	
      003129 50 4F 52 54 45           4 	.ascii "PORTE"
      00312E 2C 15                    5 	.word const_porte  
      003130                       5108 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      003130 31 28                    1 	.word LINK 
                           003132     2 	LINK=.
      003132 15                       3 	.byte 5+F_IFUNC   	
      003133 50 4F 52 54 44           4 	.ascii "PORTD"
      003138 2C 10                    5 	.word const_portd  
      00313A                       5109 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      00313A 31 32                    1 	.word LINK 
                           00313C     2 	LINK=.
      00313C 15                       3 	.byte 5+F_IFUNC   	
      00313D 50 4F 52 54 43           4 	.ascii "PORTC"
      003142 2C 0B                    5 	.word const_portc  
      003144                       5110 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      003144 31 3C                    1 	.word LINK 
                           003146     2 	LINK=.
      003146 15                       3 	.byte 5+F_IFUNC   	
      003147 50 4F 52 54 42           4 	.ascii "PORTB"
      00314C 2C 06                    5 	.word const_portb  
      00314E                       5111 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      00314E 31 46                    1 	.word LINK 
                           003150     2 	LINK=.
      003150 15                       3 	.byte 5+F_IFUNC   	
      003151 50 4F 52 54 41           4 	.ascii "PORTA"
      003156 2C 01                    5 	.word const_porta  
      003158                       5112 	_dict_entry 5,PRINT,cmd_print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      003158 31 50                    1 	.word LINK 
                           00315A     2 	LINK=.
      00315A 05                       3 	.byte 5   	
      00315B 50 52 49 4E 54           4 	.ascii "PRINT"
      003160 1D 3D                    5 	.word cmd_print  
      003162                       5113 	_dict_entry,4+F_IFUNC,POUT,const_output
      003162 31 5A                    1 	.word LINK 
                           003164     2 	LINK=.
      003164 14                       3 	.byte 4+F_IFUNC   	
      003165 50 4F 55 54              4 	.ascii "POUT"
      003169 2C 42                    5 	.word const_output  
      00316B                       5114 	_dict_entry,3+F_IFUNC,POP,xpop 
      00316B 31 64                    1 	.word LINK 
                           00316D     2 	LINK=.
      00316D 13                       3 	.byte 3+F_IFUNC   	
      00316E 50 4F 50                 4 	.ascii "POP"
      003171 2D E2                    5 	.word xpop  
      003173                       5115 	_dict_entry,4,POKE,poke 
      003173 31 6D                    1 	.word LINK 
                           003175     2 	LINK=.
      003175 04                       3 	.byte 4   	
      003176 50 4F 4B 45              4 	.ascii "POKE"
      00317A 1F 59                    5 	.word poke  
      00317C                       5116 	_dict_entry,5,PMODE,pin_mode 
      00317C 31 75                    1 	.word LINK 
                           00317E     2 	LINK=.
      00317E 05                       3 	.byte 5   	
      00317F 50 4D 4F 44 45           4 	.ascii "PMODE"
      003184 29 6C                    5 	.word pin_mode  
      003186                       5117 	_dict_entry,4+F_IFUNC,PINP,const_input
      003186 31 7E                    1 	.word LINK 
                           003188     2 	LINK=.
      003188 14                       3 	.byte 4+F_IFUNC   	
      003189 50 49 4E 50              4 	.ascii "PINP"
      00318D 2C 47                    5 	.word const_input  
      00318F                       5118 	_dict_entry,4+F_IFUNC,PICK,xpick 
      00318F 31 88                    1 	.word LINK 
                           003191     2 	LINK=.
      003191 14                       3 	.byte 4+F_IFUNC   	
      003192 50 49 43 4B              4 	.ascii "PICK"
      003196 2E A0                    5 	.word xpick  
      003198                       5119 	_dict_entry,4+F_IFUNC,PEEK,peek 
      003198 31 91                    1 	.word LINK 
                           00319A     2 	LINK=.
      00319A 14                       3 	.byte 4+F_IFUNC   	
      00319B 50 45 45 4B              4 	.ascii "PEEK"
      00319F 1F 7A                    5 	.word peek  
      0031A1                       5120 	_dict_entry,5,PAUSE,pause 
      0031A1 31 9A                    1 	.word LINK 
                           0031A3     2 	LINK=.
      0031A3 05                       3 	.byte 5   	
      0031A4 50 41 55 53 45           4 	.ascii "PAUSE"
      0031A9 28 75                    5 	.word pause  
      0031AB                       5121 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      0031AB 31 A3                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



                           0031AD     2 	LINK=.
      0031AD 13                       3 	.byte 3+F_IFUNC   	
      0031AE 50 41 44                 4 	.ascii "PAD"
      0031B1 2D D9                    5 	.word pad_ref  
      0031B3                       5122 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      0031B3 31 AD                    1 	.word LINK 
                           0031B5     2 	LINK=.
      0031B5 92                       3 	.byte 2+F_OR   	
      0031B6 4F 52                    4 	.ascii "OR"
      0031B8 00 89                    5 	.word TK_OR  
      0031BA                       5123 	_dict_entry,2,ON,cmd_on 
      0031BA 31 B5                    1 	.word LINK 
                           0031BC     2 	LINK=.
      0031BC 02                       3 	.byte 2   	
      0031BD 4F 4E                    4 	.ascii "ON"
      0031BF 21 57                    5 	.word cmd_on  
      0031C1                       5124 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0031C1 31 BC                    1 	.word LINK 
                           0031C3     2 	LINK=.
      0031C3 13                       3 	.byte 3+F_IFUNC   	
      0031C4 4F 44 52                 4 	.ascii "ODR"
      0031C7 2C 29                    5 	.word const_odr  
      0031C9                       5125 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      0031C9 31 C3                    1 	.word LINK 
                           0031CB     2 	LINK=.
      0031CB 73                       3 	.byte 3+F_NOT   	
      0031CC 4E 4F 54                 4 	.ascii "NOT"
      0031CF 00 87                    5 	.word TK_NOT  
      0031D1                       5126 	_dict_entry,4,NEXT,next 
      0031D1 31 CB                    1 	.word LINK 
                           0031D3     2 	LINK=.
      0031D3 04                       3 	.byte 4   	
      0031D4 4E 45 58 54              4 	.ascii "NEXT"
      0031D8 20 70                    5 	.word next  
      0031DA                       5127 	_dict_entry,3,NEW,new
      0031DA 31 D3                    1 	.word LINK 
                           0031DC     2 	LINK=.
      0031DC 03                       3 	.byte 3   	
      0031DD 4E 45 57                 4 	.ascii "NEW"
      0031E0 24 E0                    5 	.word new  
      0031E2                       5128 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0031E2 31 DC                    1 	.word LINK 
                           0031E4     2 	LINK=.
      0031E4 16                       3 	.byte 6+F_IFUNC   	
      0031E5 4C 53 48 49 46 54        4 	.ascii "LSHIFT"
      0031EB 29 05                    5 	.word lshift  
      0031ED                       5129 	_dict_entry,4+F_IFUNC,LOG2,log2 
      0031ED 31 E4                    1 	.word LINK 
                           0031EF     2 	LINK=.
      0031EF 14                       3 	.byte 4+F_IFUNC   	
      0031F0 4C 4F 47 32              4 	.ascii "LOG2"
      0031F4 2B 68                    5 	.word log2  
      0031F6                       5130 	_dict_entry 4,LIST,cmd_list
      0031F6 31 EF                    1 	.word LINK 
                           0031F8     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      0031F8 04                       3 	.byte 4   	
      0031F9 4C 49 53 54              4 	.ascii "LIST"
      0031FD 1C 01                    5 	.word cmd_list  
      0031FF                       5131 	_dict_entry 3,LET,let 
      0031FF 31 F8                    1 	.word LINK 
                           003201     2 	LINK=.
      003201 03                       3 	.byte 3   	
      003202 4C 45 54                 4 	.ascii "LET"
      003205 1A 0C                    5 	.word let  
      003207                       5132 	_dict_entry,4+F_IFUNC,KEY?,qkey
      003207 32 01                    1 	.word LINK 
                           003209     2 	LINK=.
      003209 14                       3 	.byte 4+F_IFUNC   	
      00320A 4B 45 59 3F              4 	.ascii "KEY?"
      00320E 28 0C                    5 	.word qkey  
      003210                       5133 	_dict_entry,3+F_CFUNC,KEY,key 
      003210 32 09                    1 	.word LINK 
                           003212     2 	LINK=.
      003212 23                       3 	.byte 3+F_CFUNC   	
      003213 4B 45 59                 4 	.ascii "KEY"
      003216 28 08                    5 	.word key  
      003218                       5134 	_dict_entry,7,IWDGREF,refresh_iwdg
      003218 32 12                    1 	.word LINK 
                           00321A     2 	LINK=.
      00321A 07                       3 	.byte 7   	
      00321B 49 57 44 47 52 45 46     4 	.ascii "IWDGREF"
      003222 2B 63                    5 	.word refresh_iwdg  
      003224                       5135 	_dict_entry,6,IWDGEN,enable_iwdg
      003224 32 1A                    1 	.word LINK 
                           003226     2 	LINK=.
      003226 06                       3 	.byte 6   	
      003227 49 57 44 47 45 4E        4 	.ascii "IWDGEN"
      00322D 2B 25                    5 	.word enable_iwdg  
      00322F                       5136 	_dict_entry,5,INPUT,input_var  
      00322F 32 26                    1 	.word LINK 
                           003231     2 	LINK=.
      003231 05                       3 	.byte 5   	
      003232 49 4E 50 55 54           4 	.ascii "INPUT"
      003237 1D D9                    5 	.word input_var  
      003239                       5137 	_dict_entry,2,IF,if 
      003239 32 31                    1 	.word LINK 
                           00323B     2 	LINK=.
      00323B 02                       3 	.byte 2   	
      00323C 49 46                    4 	.ascii "IF"
      00323E 1F 9B                    5 	.word if  
      003240                       5138 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      003240 32 3B                    1 	.word LINK 
                           003242     2 	LINK=.
      003242 13                       3 	.byte 3+F_IFUNC   	
      003243 49 44 52                 4 	.ascii "IDR"
      003246 2C 2E                    5 	.word const_idr  
      003248                       5139 	_dict_entry,3,HEX,hex_base
      003248 32 42                    1 	.word LINK 
                           00324A     2 	LINK=.
      00324A 03                       3 	.byte 3   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



      00324B 48 45 58                 4 	.ascii "HEX"
      00324E 19 C1                    5 	.word hex_base  
      003250                       5140 	_dict_entry,4,GOTO,goto 
      003250 32 4A                    1 	.word LINK 
                           003252     2 	LINK=.
      003252 04                       3 	.byte 4   	
      003253 47 4F 54 4F              4 	.ascii "GOTO"
      003257 21 E2                    5 	.word goto  
      003259                       5141 	_dict_entry,5,GOSUB,gosub 
      003259 32 52                    1 	.word LINK 
                           00325B     2 	LINK=.
      00325B 05                       3 	.byte 5   	
      00325C 47 4F 53 55 42           4 	.ascii "GOSUB"
      003261 21 F5                    5 	.word gosub  
      003263                       5142 	_dict_entry,3,GET,cmd_get 
      003263 32 5B                    1 	.word LINK 
                           003265     2 	LINK=.
      003265 03                       3 	.byte 3   	
      003266 47 45 54                 4 	.ascii "GET"
      003269 22 F4                    5 	.word cmd_get  
      00326B                       5143 	_dict_entry,4+F_IFUNC,FREE,free
      00326B 32 65                    1 	.word LINK 
                           00326D     2 	LINK=.
      00326D 14                       3 	.byte 4+F_IFUNC   	
      00326E 46 52 45 45              4 	.ascii "FREE"
      003272 19 CB                    5 	.word free  
      003274                       5144 	_dict_entry,3,FOR,for 
      003274 32 6D                    1 	.word LINK 
                           003276     2 	LINK=.
      003276 03                       3 	.byte 3   	
      003277 46 4F 52                 4 	.ascii "FOR"
      00327A 1F B8                    5 	.word for  
      00327C                       5145 	_dict_entry,4,FCPU,fcpu 
      00327C 32 76                    1 	.word LINK 
                           00327E     2 	LINK=.
      00327E 04                       3 	.byte 4   	
      00327F 46 43 50 55              4 	.ascii "FCPU"
      003283 29 5D                    5 	.word fcpu  
      003285                       5146 	_dict_entry,5,ERASE,cmd_erase 
      003285 32 7E                    1 	.word LINK 
                           003287     2 	LINK=.
      003287 05                       3 	.byte 5   	
      003288 45 52 41 53 45           4 	.ascii "ERASE"
      00328D 25 40                    5 	.word cmd_erase  
      00328F                       5147 	_dict_entry,3,END,cmd_end  
      00328F 32 87                    1 	.word LINK 
                           003291     2 	LINK=.
      003291 03                       3 	.byte 3   	
      003292 45 4E 44                 4 	.ascii "END"
      003295 22 C8                    5 	.word cmd_end  
      003297                       5148 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      003297 32 91                    1 	.word LINK 
                           003299     2 	LINK=.
      003299 16                       3 	.byte 6+F_IFUNC   	
      00329A 45 45 50 52 4F 4D        4 	.ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      0032A0 2C 4C                    5 	.word const_eeprom_base  
      0032A2                       5149 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      0032A2 32 99                    1 	.word LINK 
                           0032A4     2 	LINK=.
      0032A4 16                       3 	.byte 6+F_IFUNC   	
      0032A5 45 45 46 52 45 45        4 	.ascii "EEFREE"
      0032AB 1A 60                    5 	.word func_eefree  
      0032AD                       5150 	_dict_entry,4,EDIT,cmd_edit 
      0032AD 32 A4                    1 	.word LINK 
                           0032AF     2 	LINK=.
      0032AF 04                       3 	.byte 4   	
      0032B0 45 44 49 54              4 	.ascii "EDIT"
      0032B4 1C D8                    5 	.word cmd_edit  
      0032B6                       5151 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0032B6 32 AF                    1 	.word LINK 
                           0032B8     2 	LINK=.
      0032B8 06                       3 	.byte 6+F_CMD   	
      0032B9 44 57 52 49 54 45        4 	.ascii "DWRITE"
      0032BF 24 4A                    5 	.word digital_write  
      0032C1                       5152 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      0032C1 32 B8                    1 	.word LINK 
                           0032C3     2 	LINK=.
      0032C3 04                       3 	.byte 4   	
      0032C4 44 52 4F 50              4 	.ascii "DROP"
      0032C8 2E 22                    5 	.word xdrop  
      0032CA                       5153 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0032CA 32 C3                    1 	.word LINK 
                           0032CC     2 	LINK=.
      0032CC 15                       3 	.byte 5+F_IFUNC   	
      0032CD 44 52 45 41 44           4 	.ascii "DREAD"
      0032D2 24 13                    5 	.word digital_read  
      0032D4                       5154 	_dict_entry,2,DO,do_loop
      0032D4 32 CC                    1 	.word LINK 
                           0032D6     2 	LINK=.
      0032D6 02                       3 	.byte 2   	
      0032D7 44 4F                    4 	.ascii "DO"
      0032D9 2B BB                    5 	.word do_loop  
      0032DB                       5155 	_dict_entry,3,DIR,cmd_dir
      0032DB 32 D6                    1 	.word LINK 
                           0032DD     2 	LINK=.
      0032DD 03                       3 	.byte 3   	
      0032DE 44 49 52                 4 	.ascii "DIR"
      0032E1 26 FA                    5 	.word cmd_dir  
      0032E3                       5156 	_dict_entry,3,DIM,cmd_dim 
      0032E3 32 DD                    1 	.word LINK 
                           0032E5     2 	LINK=.
      0032E5 03                       3 	.byte 3   	
      0032E6 44 49 4D                 4 	.ascii "DIM"
      0032E9 1A DF                    5 	.word cmd_dim  
      0032EB                       5157 	_dict_entry,3,DEC,dec_base
      0032EB 32 E5                    1 	.word LINK 
                           0032ED     2 	LINK=.
      0032ED 03                       3 	.byte 3   	
      0032EE 44 45 43                 4 	.ascii "DEC"
      0032F1 19 C6                    5 	.word dec_base  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      0032F3                       5158 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      0032F3 32 ED                    1 	.word LINK 
                           0032F5     2 	LINK=.
      0032F5 13                       3 	.byte 3+F_IFUNC   	
      0032F6 44 44 52                 4 	.ascii "DDR"
      0032F9 2C 33                    5 	.word const_ddr  
      0032FB                       5159 	_dict_entry,4,DATA,data  
      0032FB 32 F5                    1 	.word LINK 
                           0032FD     2 	LINK=.
      0032FD 04                       3 	.byte 4   	
      0032FE 44 41 54 41              4 	.ascii "DATA"
      003302 2C 51                    5 	.word data  
      003304                       5160 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      003304 32 FD                    1 	.word LINK 
                           003306     2 	LINK=.
      003306 13                       3 	.byte 3+F_IFUNC   	
      003307 43 52 32                 4 	.ascii "CR2"
      00330A 2C 3D                    5 	.word const_cr2  
      00330C                       5161 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      00330C 33 06                    1 	.word LINK 
                           00330E     2 	LINK=.
      00330E 13                       3 	.byte 3+F_IFUNC   	
      00330F 43 52 31                 4 	.ascii "CR1"
      003312 2C 38                    5 	.word const_cr1  
      003314                       5162 	_dict_entry,5,CONST,cmd_const 
      003314 33 0E                    1 	.word LINK 
                           003316     2 	LINK=.
      003316 05                       3 	.byte 5   	
      003317 43 4F 4E 53 54           4 	.ascii "CONST"
      00331C 1A D2                    5 	.word cmd_const  
      00331E                       5163 	_dict_entry,4+F_CFUNC,CHAR,func_char
      00331E 33 16                    1 	.word LINK 
                           003320     2 	LINK=.
      003320 24                       3 	.byte 4+F_CFUNC   	
      003321 43 48 41 52              4 	.ascii "CHAR"
      003325 27 B2                    5 	.word func_char  
      003327                       5164 	_dict_entry,5,CHAIN,cmd_chain
      003327 33 20                    1 	.word LINK 
                           003329     2 	LINK=.
      003329 05                       3 	.byte 5   	
      00332A 43 48 41 49 4E           4 	.ascii "CHAIN"
      00332F 2F 4D                    5 	.word cmd_chain  
      003331                       5165 	_dict_entry,3,BYE,bye 
      003331 33 29                    1 	.word LINK 
                           003333     2 	LINK=.
      003333 03                       3 	.byte 3   	
      003334 42 59 45                 4 	.ascii "BYE"
      003337 28 61                    5 	.word bye  
      003339                       5166 	_dict_entry,5,BTOGL,bit_toggle
      003339 33 33                    1 	.word LINK 
                           00333B     2 	LINK=.
      00333B 05                       3 	.byte 5   	
      00333C 42 54 4F 47 4C           4 	.ascii "BTOGL"
      003341 1F 00                    5 	.word bit_toggle  
      003343                       5167 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      003343 33 3B                    1 	.word LINK 
                           003345     2 	LINK=.
      003345 15                       3 	.byte 5+F_IFUNC   	
      003346 42 54 45 53 54           4 	.ascii "BTEST"
      00334B 1F 22                    5 	.word bit_test  
      00334D                       5168 	_dict_entry,4,BSET,bit_set 
      00334D 33 45                    1 	.word LINK 
                           00334F     2 	LINK=.
      00334F 04                       3 	.byte 4   	
      003350 42 53 45 54              4 	.ascii "BSET"
      003354 1E BB                    5 	.word bit_set  
      003356                       5169 	_dict_entry,4,BRES,bit_reset
      003356 33 4F                    1 	.word LINK 
                           003358     2 	LINK=.
      003358 04                       3 	.byte 4   	
      003359 42 52 45 53              4 	.ascii "BRES"
      00335D 1E DD                    5 	.word bit_reset  
      00335F                       5170 	_dict_entry,3+F_IFUNC,BIT,bitmask
      00335F 33 58                    1 	.word LINK 
                           003361     2 	LINK=.
      003361 13                       3 	.byte 3+F_IFUNC   	
      003362 42 49 54                 4 	.ascii "BIT"
      003365 2B 95                    5 	.word bitmask  
      003367                       5171 	_dict_entry,3,AWU,awu 
      003367 33 61                    1 	.word LINK 
                           003369     2 	LINK=.
      003369 03                       3 	.byte 3   	
      00336A 41 57 55                 4 	.ascii "AWU"
      00336D 28 95                    5 	.word awu  
      00336F                       5172 	_dict_entry,7,AUTORUN,cmd_auto_run
      00336F 33 69                    1 	.word LINK 
                           003371     2 	LINK=.
      003371 07                       3 	.byte 7   	
      003372 41 55 54 4F 52 55 4E     4 	.ascii "AUTORUN"
      003379 2E BA                    5 	.word cmd_auto_run  
      00337B                       5173 	_dict_entry,3+F_IFUNC,ASC,ascii
      00337B 33 71                    1 	.word LINK 
                           00337D     2 	LINK=.
      00337D 13                       3 	.byte 3+F_IFUNC   	
      00337E 41 53 43                 4 	.ascii "ASC"
      003381 27 C9                    5 	.word ascii  
      003383                       5174 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      003383 33 7D                    1 	.word LINK 
                           003385     2 	LINK=.
      003385 83                       3 	.byte 3+F_AND   	
      003386 41 4E 44                 4 	.ascii "AND"
      003389 00 88                    5 	.word TK_AND  
      00338B                       5175 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      00338B 33 85                    1 	.word LINK 
                           00338D     2 	LINK=.
      00338D 05                       3 	.byte 5   	
      00338E 41 4C 4C 4F 43           4 	.ascii "ALLOC"
      003393 2D EC                    5 	.word xalloc  
      003395                       5176 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      003395 33 8D                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



                           003397     2 	LINK=.
      003397 17                       3 	.byte 7+F_IFUNC   	
      003398 41 44 43 52 45 41 44     4 	.ascii "ADCREAD"
      00339F 23 D7                    5 	.word analog_read  
      0033A1                       5177 	_dict_entry,5,ADCON,power_adc 
      0033A1 33 97                    1 	.word LINK 
                           0033A3     2 	LINK=.
      0033A3 05                       3 	.byte 5   	
      0033A4 41 44 43 4F 4E           4 	.ascii "ADCON"
      0033A9 23 87                    5 	.word power_adc  
      0033AB                       5178 kword_dict::
      0033AB                       5179 	_dict_entry,3+F_IFUNC,ABS,abs
      0033AB 33 A3                    1 	.word LINK 
                           0033AD     2 	LINK=.
      0033AD 13                       3 	.byte 3+F_IFUNC   	
      0033AE 41 42 53                 4 	.ascii "ABS"
      0033B1 28 EE                    5 	.word abs  
                                   5180 
                                   5181 
                                   5182 
                                   5183 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000000    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                                     19 LOOP_CNT=10000
                                     20 VAL1=0x2ffff ; 196607
                                     21 VAL2=0x2a    ; 42  
                                     22 VAL3=3 
                                     23 VAL4=0X5FF   ; 1535 
                                     24 VAL5=-3 
                                     25 ; test code
                                     26     T=1    ; .word 
                                     27     CNTR=3 ; .word 
                                     28     A32=5  ; .blkw 2
                                     29     VSIZE= 8 
                                     30 test:
                                     31     _vars VSIZE 
                                     32     ldw x,#LOOP_CNT
                                     33     ldw (CNTR,sp),x  
                                     34     ldw x,ticks 
                                     35     ldw (T,sp),x
                                     36 1$: ; test add24 
                                     37     ld a,#(VAL1>>16)&0XFF
                                     38     ldw x,#VAL1&0XFFFF
                                     39     ld acc24,a 
                                     40     ldw acc24+1,x  
                                     41     ld a,#(VAL4>>16)&0XFF
                                     42     ldw x,#(VAL4&0XFFFF)
                                     43     call add24 
                                     44     ldw x,(CNTR,sp)
                                     45     subw x,#1
                                     46     ldw (CNTR,sp),x 
                                     47     jrne 1$
                                     48     call prt_acc24
                                     49     ld a,#SPACE 
                                     50     call putc 
                                     51     ldw x,ticks 
                                     52     subw x,(T,sp)
                                     53     call prt_i16  
                                     54     ld a,#CR 
                                     55     call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



                                     56 
                                     57 ; test mul24     
                                     58     ldw x,LOOP_CNT
                                     59     ldw (CNTR,sp),x 
                                     60     ldw x,ticks 
                                     61     ldw (T,sp),x 
                                     62 2$: 
                                     63     ld a,#(VAL1>>16)&0XFF
                                     64     ldw x,#VAL1&0XFFFF
                                     65     ld acc24,a 
                                     66     ldw acc24+1,x  
                                     67     ld a,#(VAL2>>16)&0XFF
                                     68     ldw x,#(VAL2&0XFFFF)
                                     69     call mul24 
                                     70     ldw x,(CNTR,sp)
                                     71     subw x,#1
                                     72     ldw (CNTR,sp),x 
                                     73     jrne 2$ 
                                     74    call prt_acc24 
                                     75    ld a,#SPACE 
                                     76    call putc 
                                     77     ldw x,ticks 
                                     78     subw x,(T,sp)
                                     79     call prt_i16 
                                     80     ld a,#CR 
                                     81     call putc 
                                     82 ; test mul24 with overflow     
                                     83     ldw x,LOOP_CNT
                                     84     ldw (CNTR,sp),x 
                                     85     ldw x,ticks 
                                     86     ldw (T,sp),x 
                                     87 3$: 
                                     88     ld a,#(VAL1>>16)&0XFF
                                     89     ldw x,#VAL1&0XFFFF
                                     90     ld acc24,a 
                                     91     ldw acc24+1,x  
                                     92     ld a,#(VAL4>>16)&0XFF
                                     93     ldw x,#(VAL4&0XFFFF)
                                     94     call mul24 
                                     95     ldw x,(CNTR,sp)
                                     96     subw x,#1
                                     97     ldw (CNTR,sp),x 
                                     98     jrne 3$ 
                                     99     call prt_acc24    
                                    100     ld a,#SPACE 
                                    101     call putc 
                                    102     ldw x,ticks 
                                    103     subw x,(T,sp)
                                    104     call prt_i16 
                                    105     ld a,#CR 
                                    106     call putc 
                                    107 ; test mul24  with negative result   
                                    108     ldw x,LOOP_CNT
                                    109     ldw (CNTR,sp),x 
                                    110     ldw x,ticks 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]



                                    111     ldw (T,sp),x 
                                    112 4$:
                                    113     ld a,#(VAL1>>16)&0XFF
                                    114     ldw x,#VAL1&0XFFFF
                                    115     ld acc24,a 
                                    116     ldw acc24+1,x  
                                    117     ld a,#(VAL5>>16)&0XFF
                                    118     ldw x,#(VAL5&0XFFFF)
                                    119     call mul24 
                                    120     ldw x,(CNTR,sp)
                                    121     subw x,#1
                                    122     ldw (CNTR,sp),x 
                                    123     jrne 4$ 
                                    124     call prt_acc24 
                                    125     ld a,#SPACE 
                                    126     call putc 
                                    127     ldw x,ticks 
                                    128     subw x,(T,sp)
                                    129     call prt_i16 
                                    130     ld a,#CR 
                                    131     call putc 
                                    132 ; test abs24 
                                    133     ldw x,LOOP_CNT
                                    134     ldw (CNTR,sp),x 
                                    135     ldw x,ticks 
                                    136     ldw (T,sp),x 
                                    137 5$: 
                                    138     ld a,#0xff
                                    139     ldw x,#0xffff
                                    140     call abs24 
                                    141     ld acc24,a 
                                    142     ldw acc24+1,x
                                    143     ldw x,(CNTR,sp)
                                    144     subw x,#1
                                    145     ldw (CNTR,sp),x 
                                    146     jrne 5$ 
                                    147     call prt_acc24 
                                    148     ld a,#SPACE 
                                    149     call putc 
                                    150     ldw x,ticks 
                                    151     subw x,(T,sp)
                                    152     call prt_i16 
                                    153 6$:
                                    154     ld a,#CR 
                                    155     call putc 
                                    156     call read_integer 
                                    157     mov farptr,acc24 
                                    158     mov farptr+1,acc16 
                                    159     mov farptr+2,acc8 
                                    160     call read_integer 
                                    161     ld a,acc24 
                                    162     ldw x,acc16 
                                    163     mov acc24,farptr 
                                    164     mov acc16,farptr+1
                                    165     mov acc8,farptr+2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]



                                    166     call div24 
                                    167     push a 
                                    168     pushw x 
                                    169     call prt_acc24 
                                    170     ld a,#SPACE 
                                    171     call putc 
                                    172     popw x
                                    173     ldw acc16,x  
                                    174     pop acc24 
                                    175     call prt_acc24
                                    176     jra 6$
                                    177     _drop VSIZE 
                                    178     ret 
                                    179 
                                    180 
                                    181 read_integer:
                                    182     ld a,#'? 
                                    183     call putc  
                                    184 	clr count  
                                    185 	call readln 
                                    186 	ldw x,#tib 
                                    187 	push count
                                    188 	push #0 
                                    189 	addw x,(1,sp)
                                    190 	incw x 
                                    191 	_drop 2 
                                    192 	clr in 
                                    193 	call get_token
                                    194 	cp a,#TK_INTGR
                                    195 	jreq 3$ 
                                    196 	cp a,#TK_MINUS
                                    197 	call get_token 
                                    198 	cp a,#TK_INTGR 
                                    199 	jreq 2$
                                    200 	jp syntax_error
                                    201 2$:
                                    202 	call neg_acc24  	
                                    203 3$: 
                                    204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003400                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003400                         30 app_space::
      003400 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003402 00 00                   32 app_size: .word 0 
      003404                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     ACK     =  000006     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |     ARG_OFS =  000002     |     ARROW_LE=  000080 
    ARROW_RI=  000081     |   4 AR_SIGN    002F11 R   |     ATMP    =  000001 
    ATTRIB  =  000002     |   4 AUTO_RUN   00015C R   |   4 AWUHandl   000004 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
    BCNT    =  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BLOCKS  =  000005     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |     BS      =  000008 
    BSIZE   =  000006     |     BTW     =  000001     |     C       =  000001 
    CAN     =  000018     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000003 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
    CHAIN_AD=  000005     |     CHAIN_BP=  000007     |     CHAIN_CN=  000008 
    CHAIN_CO=  00000A     |     CHAIN_IN=  000009     |     CHAIN_LN=  000003 
    CHAIN_TX=  00000B     |     CHAIN_TX=  00000D     |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000006     |     CNTR    =  000004     |     CNT_LO  =  000004 
    CODE_ADD=  000001     |     COLON   =  00003A     |     COMMA   =  00002C 
    COUNT   =  000003     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000004     |     CTX_BPTR=  000001 
    CTX_COUN=  000004     |     CTX_IN  =  000003     |     CURR    =  000002 
    CVAR    =  000009     |     CX_BPTR =  000001     |     CX_CNT  =  000004 
    CX_IN   =  000003     |     DC1     =  000011     |     DC2     =  000012 
    DC3     =  000013     |     DC4     =  000014     |     DEBUG   =  000000 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |     DISCARD =  000004 
    DIVISOR =  000001     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_S=  000800     |     EM      =  000019     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   4 ERASED     0026D5 R
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_NO_P=  000012 
    ERR_OVER=  000010     |     ERR_RD_O=  000011     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FBREAK  =  000004     |     FCOMP   =  000005     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
  4 FLASH_ME   001BE1 R   |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLN_REJE=  000006 
    FLOOP   =  000002     |     FLSI    =  01F400     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_AND   =  000080     |     F_CFUNC =  000020 
    F_CMD   =  000000     |     F_CONST =  000030     |     F_IFUNC =  000010 
    F_NOT   =  000070     |     F_OR    =  000090     |     F_XOR   =  0000A0 
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     GS      =  00001D     |     HOME    =  000082 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |     INT24   =  000005 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     INW     =  00000B     |     IPOS    =  000001 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
    KEY_END =  000083     |     KW_TYPE_=  0000F0     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |     LF      =  00000A 
    LIMIT   =  000005     |     LINENO  =  000005     |   4 LINES_RE   001CAF R
  4 LINK    =  0033AD R   |     LL      =  000001     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |     MAJOR   =  000002 
    MASK    =  000002     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
    MULOP   =  000001     |     N1      =  000005     |     NAFR    =  004804 
    NAK     =  000015     |     NAMEPTR =  000001     |     NAME_MAX=  00000F 
    NCLKOPT =  004808     |     NEG     =  000001     |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NLEN    =  000005     |     NLEN_MAS=  00000F 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |     NOT_OP  =  000001 
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  4 NonHandl   000000 R   |     ONOFF   =  000003     |     OP      =  000002 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVRWR   =  000004     |     PA      =  000000     |     PAD_SIZE=  000080 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    PG_SIZE =  000001     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PINNO   =  000001     |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |     PNAME   =  000003 
    PREV    =  000001     |     PRG_SIZE=  000003     |     PROD    =  000001 
    PROD_SIG=  000004     |   4 PROG_ADD   001BB7 R   |   4 PROG_SIZ   001BC9 R
    PSTR    =  000003     |     QSIGN   =  000005     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |   4 RAM_MEM    001BF2 R   |     RAM_SIZE=  001800 
    REC_LEN =  000003     |     REC_LEN_=  00001F     |     REC_XTRA=  000005 
    RELOP   =  000001     |     RETL1   =  000001     |     RET_ADDR=  000001 
    RET_BPTR=  000003     |     RET_INW =  000005     |     RONLY   =  000005 
    ROP     =  004800     |     RS      =  00001E     |     RSIGN   =  000006 
    RST_SR  =  0050B3     |     RXCHAR  =  000001     |     RX_QUEUE=  000008 
    SEMIC   =  00003B     |     SEMICOL =  000001     |     SEPARATE=  000000 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
    SI      =  00000F     |     SIGN    =  000001     |   4 SIGNATUR   0026D3 R
    SKIP    =  000005     |     SLEN    =  000002     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_CS_B=  000005     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  00008C     |     STR     =  000002     |   4 STR_BYTE   001BDA R
    STX     =  000002     |     SUB     =  00001A     |     SUP     =  000084 
    SWIM_CSR=  007F80     |     SYN     =  000016     |   4 SysCall    000012 R
    TAB     =  000009     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_AND  =  000088     |     TK_ARRAY=  000005     |     TK_CFUNC=  000082 
    TK_CHAR =  000004     |     TK_CMD  =  000080     |     TK_COLON=  000009 
    TK_COMMA=  000008     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_FLOAT=  000086     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LABEL=  000003 
    TK_LE   =  000036     |     TK_LPARE=  000006     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_NOT  =  000087 
    TK_OR   =  000089     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000007     |     TK_SEMIC=  00000A     |     TK_VAR  =  000085 
    TK_XOR  =  00008A     |     TOWRITE =  000005     |   4 Timer4Up   000013 R
    U8      =  000001     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART2   =  000001 
    UART3   =  000002     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   4 UBTN_Han   00005A R   |     US      =  00001F 
  4 USER_ABO   000062 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |   4 Uart1RxH   0005A2 R   |   4 UserButt   000036 R
    VAR_NAME=  000001     |     VSIZE   =  00000C     |     VT      =  00000B 
    WCNT    =  000003     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

    WIDTH   =  000001     |     WLEN    =  000001     |     WLKPTR  =  000001 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XFIRST  =  000001 
    XMASK   =  000001     |     XOFF    =  000013     |     XON     =  000011 
    XSAVE   =  000002     |     XSTACK_E=  001773     |     XSTACK_S=  000014 
    XTEMP   =  000001     |     YSAVE   =  000007     |     YTEMP   =  000005 
  4 abs        0028EE R   |   4 abs24      0001F3 R   |   5 acc16      00000D GR
  5 acc24      00000C GR  |   5 acc32      00000B GR  |   5 acc8       00000E GR
  4 accept_c   0008ED R   |   4 add24      00017E R   |   4 add_char   001065 R
  4 add_spac   000E6B R   |   4 analog_r   0023D7 R   |   4 and_cond   0018FB R
  4 and_fact   0018CB R   |   4 app        003404 R   |   4 app_sign   003400 R
  4 app_size   003402 R   |   4 app_spac   003400 GR  |   4 arduino_   0029DB R
  4 arg_list   0016F4 R   |   5 array_si   000020 R   |   4 ascii      0027C9 R
  4 at_tst     000CDD R   |   4 atoi24     001600 GR  |   4 atoi_exi   00166F R
  4 awu        002895 R   |   4 awu02      0028A8 R   |   5 base       00000A GR
  5 basicptr   000004 GR  |   4 beep       00234E R   |   4 beep_1kh   002321 GR
  4 bin_exit   000B3C R   |   4 bit_rese   001EDD R   |   4 bit_set    001EBB R
  4 bit_test   001F22 R   |   4 bit_togg   001F00 R   |   4 bitmask    002B95 R
  4 bkslsh_t   000C8A R   |   4 bksp       00068C R   |   2 block_bu   0016B8 GR
  4 block_er   00048B R   |   4 break_po   0024C2 R   |   4 bye        002861 R
  5 chain_le   000033 R   |   4 clear_au   0005D9 R   |   4 clear_ba   0011C9 R
  4 clear_bl   0025D3 R   |   4 clear_va   001129 R   |   4 clock_in   00007D R
  4 cmd_auto   002EBA R   |   4 cmd_chai   002F4D R   |   4 cmd_cons   001AD2 R
  4 cmd_dim    001ADF R   |   4 cmd_dim1   001AE2 R   |   4 cmd_dim2   001AE8 R
  4 cmd_dir    0026FA R   |   4 cmd_edit   001CD8 R   |   4 cmd_end    0022C8 R
  4 cmd_eras   002540 R   |   4 cmd_get    0022F4 R   |   4 cmd_line   00143F R
  4 cmd_line   0016CC R   |   4 cmd_list   001C01 R   |   4 cmd_name   001085 R
  4 cmd_on     002157 R   |   4 cmd_prin   001D3D R   |   4 cmd_run    002238 R
  4 cmd_save   002635 R   |   4 cmd_size   0019D4 R   |   4 cold_sta   0000B5 R
  4 colon_ts   000CB1 R   |   4 comma_ts   000CBC R   |   4 comp_msg   00139C R
  4 compile    000DD7 GR  |   4 conditio   00194D R   |   4 const_cr   002C38 R
  4 const_cr   002C3D R   |   4 const_dd   002C33 R   |   4 const_ee   002C4C R
  4 const_id   002C2E R   |   4 const_in   002C47 R   |   4 const_od   002C29 R
  4 const_ou   002C42 R   |   4 const_po   002C01 R   |   4 const_po   002C06 R
  4 const_po   002C0B R   |   4 const_po   002C10 R   |   4 const_po   002C15 R
  4 const_po   002C1A R   |   4 const_po   002C1F R   |   4 const_po   002C24 R
  4 convert_   000AA8 R   |   4 convert_   000650 R   |   4 copy_com   000D12 R
  5 count      000002 GR  |   4 cp24       0001B8 R   |   4 cp24_ax    0001EA R
  4 cp_loop    00168F R   |   4 cpl24      0001FA R   |   4 cpy_cmd_   000E53 R
  4 cpy_quot   000E9C R   |   4 cs_high    002DD4 R   |   4 dash_tst   000CD2 R
  4 data       002C51 R   |   4 data_err   002CCD R   |   5 data_len   000009 R
  5 data_ofs   000008 R   |   5 data_ptr   000006 R   |   4 dec_base   0019C6 R
  4 decomp_l   000F29 R   |   4 decompil   000EEC GR  |   4 del_line   000996 R
  4 delete_l   000779 R   |   4 delete_n   00069C R   |   4 delete_u   00073E R
  4 digital_   002413 R   |   4 digital_   00244A R   |   4 div24      000307 R
  4 divu24_8   0002E9 R   |   4 do_loop    002BBB R   |   4 do_progr   00047E R
  4 dup24      00016F R   |   5 dvar_bgn   00002F GR  |   5 dvar_end   000031 GR
  4 enable_i   002B25 R   |   4 end_at_l   001C5A R   |   4 eql_tst    000D5D R
  4 equal      001078 R   |   4 erase_ex   0004AF R   |   4 erase_fl   0004A5 R
  4 erase_he   00261B R   |   4 erase_pr   0024EB R   |   4 err_bad_   0012C5 R
  4 err_buf_   00133B R   |   4 err_cmd_   001289 R   |   4 err_div0   00124E R
  4 err_dupl   0012A3 R   |   4 err_math   001235 R   |   4 err_mem_   001210 R
  4 err_msg    0011EA R   |   4 err_no_a   0012D1 R   |   4 err_no_d   001304 R
  4 err_no_f   001328 R   |   4 err_no_l   00125D R   |   4 err_no_p   001314 R
  4 err_not_   0012B4 R   |   4 err_not_   00136E R   |   4 err_over   001348 R
  4 err_read   001352 R   |   4 err_run_   001273 R   |   4 err_synt   001227 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Symbol Table

  4 escaped    000ABD GR  |   4 expect     0016E2 R   |   4 expressi   001834 R
  4 factor     00173E R   |   5 farptr     000018 R   |   4 fcpu       00295D R
  4 fill_wri   0025C3 R   |   4 final_te   0008E6 R   |   5 flags      000022 GR
  4 for        001FB8 R   |   4 free       0019CB R   |   5 free_eep   000023 R
  7 free_ram   000090 R   |   4 func_arg   0016EF R   |   4 func_cha   0027B2 R
  4 func_eef   001A60 R   |   4 ge         00107A R   |   4 get_addr   001541 R
  4 get_arra   001710 R   |   4 get_char   00155B R   |   4 get_esca   00065C R
  4 get_int2   00154B R   |   4 get_targ   0020E5 R   |   4 get_targ   0020F3 R
  4 get_tick   0028E7 R   |   4 get_toke   000C23 GR  |   4 get_valu   001A4F R
  4 getc       000635 GR  |   4 gosub      0021F5 R   |   4 gosub_1    0021F8 R
  4 gosub_2    0021FE R   |   4 goto       0021E2 R   |   4 goto_1     0021E5 R
  4 gt         001076 R   |   4 gt_tst     000D68 R   |   4 hex_base   0019C1 R
  4 if         001F9B R   |   5 in         000001 GR  |   5 in.saved   000003 GR
  5 in.w       000000 GR  |   4 incr_far   000586 R   |   4 input_ex   001E73 R
  4 input_lo   001DDD R   |   4 input_va   001DD9 R   |   4 insert_c   0006FB R
  4 insert_l   000A02 R   |   4 interp_l   001483 R   |   4 interpre   00145B R
  4 is_alnum   000B6F GR  |   4 is_alpha   000B55 GR  |   4 is_data_   002C57 R
  4 is_digit   000B66 GR  |   4 is_erase   0026D7 R   |   4 is_minus   001C20 R
  4 is_progr   002227 R   |   4 is_symbo   000B78 R   |   4 itoa       001596 GR
  4 itoa_loo   0015B8 R   |   4 jp_to_ta   0021E8 R   |   4 key        002808 R
  4 kword_di   0033AB GR  |   4 kword_en   002FD5 R   |   4 le         00107F R
  4 let        001A0C GR  |   4 let_arra   001A1A R   |   4 let_dvar   0014BC R
  4 let_eval   001A22 R   |   4 let_var    001A1F R   |   4 lines_sk   001C34 R
  4 list_exi   001C93 R   |   4 list_loo   001C71 R   |   4 log2       002B68 R
  4 look_tar   002116 R   |   4 loop_bac   0020C8 R   |   5 loop_dep   00001F R
  4 loop_don   0020DD R   |   4 lshift     002905 R   |   4 lt         00107D R
  4 lt_tst     000D91 R   |   4 mod24      0003A1 R   |   4 move       0010E5 GR
  4 move_dow   001104 R   |   4 move_era   00040D R   |   4 move_exi   001125 R
  4 move_lef   0006D3 R   |   4 move_loo   001109 R   |   4 move_prg   00044D R
  4 move_rig   0006E1 R   |   4 move_up    0010F6 R   |   4 mul24      000279 R
  4 mul_char   001067 R   |   4 mulu24_8   00023A R   |   4 nbr_tst    000C56 R
  4 ne         001082 R   |   4 neg24      000203 R   |   4 neg_acc2   00021D R
  4 neg_ax     000215 R   |   4 new        0024E0 R   |   4 next       002070 R
  4 next_lin   001463 R   |   4 next_tok   001519 GR  |   4 no_match   0016A1 R
  4 open_gap   0009CB R   |   4 other      000DBA R   |   4 overwrit   000912 R
  2 pad        0016B8 GR  |   4 pad_ref    002DD9 R   |   4 parse_bi   000B1A R
  4 parse_in   000AC5 R   |   4 parse_ke   000BA3 R   |   4 parse_qu   000A70 R
  4 parse_sy   000B8B R   |   4 pause      002875 R   |   4 pause02    002888 R
  4 peek       001F7A R   |   4 pin_mode   00296C R   |   4 plus_tst   000D31 R
  4 poke       001F59 R   |   4 power_ad   002387 R   |   4 prcnt_ts   000D52 R
  4 print_he   000949 GR  |   4 print_to   001583 R   |   4 prog_siz   001B70 R
  4 program_   001B78 R   |   4 program_   000427 R   |   4 program_   00044D R
  4 prt_acc2   001578 R   |   4 prt_basi   001D19 R   |   4 prt_i16    001561 R
  4 prt_loop   001D41 R   |   5 ptr16      000019 GR  |   5 ptr8       00001A R
  4 putc       000625 GR  |   4 puts       000682 GR  |   4 qgetc      00062E GR
  4 qkey       00280C GR  |   4 qmark_ts   000CE8 R   |   4 qsign      0025B8 R
  4 random     0029FB R   |   4 read       002CD2 R   |   4 read01     002CDA R
  4 readln     000787 GR  |   4 readln_l   000796 R   |   4 readln_q   00092F R
  4 refresh_   002B63 R   |   4 relation   00186C R   |   4 relop_st   00106A R
  4 remark     001E78 GR  |   4 reset_se   001D3F R   |   4 rest_con   001DC9 R
  4 restore    002C65 R   |   4 return     002211 R   |   4 right_al   000E81 GR
  4 row_alig   00056B R   |   4 row_eras   0003E0 R   |   4 row_eras   00040D R
  4 rparnt_t   000CA6 R   |   4 rshift     002931 R   |   7 rsign      00008C R
  7 rsize      00008E R   |   4 rt_msg     00138A R   |   4 run_app    00012A R
  4 run_it     002295 R   |   4 run_it_0   002297 R   |   4 runtime_   0016D7 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 246.
Hexadecimal [24-Bits]

Symbol Table

  5 rx1_head   00002D R   |   5 rx1_queu   000025 R   |   5 rx1_tail   00002E R
  4 save_con   001DB9 R   |   4 scan_blo   000594 R   |   4 search_d   001681 GR
  4 search_e   0016C9 R   |   4 search_f   0025E7 R   |   4 search_l   00096B GR
  4 search_l   00097A R   |   4 search_n   001A89 R   |   4 search_n   001685 R
  4 search_p   002F13 R   |   5 seedx      000014 R   |   5 seedy      000016 R
  4 select_p   0029CB R   |   4 semic_ts   000CC7 R   |   4 send_esc   0006AA R
  4 send_par   0006B5 R   |   4 set_data   002C9E R   |   4 set_time   002B03 R
  4 single_c   00105F R   |   4 skip       000C10 R   |   4 skip_str   001532 R
  4 skip_to_   0026E2 R   |   4 slash_ts   000D47 R   |   4 sleep      00286A R
  4 software   001138 R   |   4 spaces     0006EF GR  |   4 spi_clea   002D6E R
  4 spi_disa   002D56 R   |   4 spi_enab   002D23 R   |   4 spi_rcv_   002D90 R
  4 spi_read   002DBB R   |   4 spi_sele   002DC2 R   |   4 spi_send   002D7A R
  4 spi_writ   002D9B R   |   2 stack_fu   001774 GR  |   2 stack_un   001800 R
  4 star_tst   000D3C R   |   4 start_fr   001C2F R   |   4 step       00202E R
  4 stop       002495 R   |   4 store_lo   00205D R   |   4 str_matc   0016AE R
  4 str_tst    000C46 R   |   4 strcmp     0010C4 R   |   4 strcpy     0010D5 GR
  4 strlen     0010B9 GR  |   4 sub24      00019B R   |   4 symb_loo   000B8C R
  4 syntax_e   0013BD GR  |   4 system_i   00117E R   |   4 tb_error   0013BF GR
  4 term       0017F1 R   |   4 term01     0017F9 R   |   4 term_exi   001831 R
  2 tib        001668 GR  |   4 tick_tst   000D00 R   |   5 ticks      00000F R
  4 timeout    002B1A R   |   5 timer      000012 GR  |   4 timer2_i   000093 R
  4 timer4_i   0000A0 R   |   4 tk_id      0013AD R   |   4 to         001FE8 R
  4 to_eepro   000476 R   |   4 to_flash   00047B R   |   4 to_hex_c   000960 GR
  4 to_upper   0015F4 GR  |   4 token_ch   000DD0 R   |   4 token_ex   000DD4 R
  4 tone       00232C R   |   4 try_next   002CAB R   |   5 txtbgn     00001B GR
  5 txtend     00001D GR  |   4 uart1_ge   000635 GR  |   4 uart1_in   0005E0 R
  4 uart1_pu   000625 GR  |   4 uart1_qg   00062E GR  |   4 uart1_se   0005F0 R
  4 ubound     001A01 R   |   4 uflash     002819 R   |   4 unlock_e   0003AA R
  4 unlock_f   0003C5 R   |   4 until      002BCE R   |   4 user_int   000049 R
  4 usr        00283B R   |   4 var_name   000EE2 GR  |   5 vars       000034 GR
  4 wait       001E7E R   |   4 warm_ini   0011AB R   |   4 warm_sta   00143C R
  4 words      002A96 R   |   4 words_co   002AED R   |   4 write      002749 R
  4 write_bl   000530 GR  |   4 write_bu   000467 R   |   4 write_by   0004B1 R
  4 write_ee   0004ED R   |   4 write_ex   000526 R   |   4 write_fl   0004D7 R
  4 write_nb   000555 R   |   4 xalloc     002DEC R   |   4 xdrop      002E22 R
  4 xpick      002EA0 R   |   4 xpop       002DE2 R   |   4 xpush      002DDE R
  4 xput       002E6D R   |   4 xstack_b   002E4F R   |   2 xstack_f   001738 GR
  2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 247.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3404   flags    0
   5 DATA       size     82   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

