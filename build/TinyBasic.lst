ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module STM8_TBI
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; parsed 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                     34     .list 
                                     35 
                                     36 ;_dbg 
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000080    43     PAD_SIZE=128
                           0000A0    44 	STACK_SIZE=160
                           0017FF    45 	STACK_EMPTY=RAM_SIZE-1  
                           000000    46 	FRUN=0 ; flags run code in variable flags
                           000001    47 	FTRAP=1 ; inside trap handler 
                           000002    48 	FLOOP=2 ; FOR loop in preparation 
                           000003    49 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    50 	FBREAK=4 ; break point flag 
                           000005    51 	FCOMP=5  ; compiling flags 
                           000006    52 	FAUTORUN=6; auto start program running 
                                     53 
                           004000    54 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     55 
                           000006    56     FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     57 
                           007FFF    58 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     59 
      000000                         60 in.w:  .blkb 1 ; parser position in text line high-byte 
      000001                         61 in:    .blkb 1 ; low byte of in.w 
      000002                         62 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         63 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         64 basicptr:  .blkb 2  ; point to current BASIC line address.
      000006                         65 data_ptr:  .blkw 1  ; point to DATA address
      000008                         66 data_ofs:  .blkb 1  ; index to next data item 
      000009                         67 data_len:  .blkb 1  ; length of data line 
      00000A                         68 base:  .blkb 1 ; nemeric base used to print integer 
      00000B                         69 acc24: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         70 acc16: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         71 acc8:  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         72 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         73 timer: .blkw 1 ;  milliseconds count down timer 
      000012                         74 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         75 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         76 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         77 ptr16:  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         78 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000019                         79 ffree: .blkb 3 ; flash free address ; file system free space pointer
      00001C                         80 txtbgn: .blkw 1 ; tokenized BASIC text beginning address 
      00001E                         81 txtend: .blkw 1 ; tokenized BASIC text end address 
      000020                         82 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000021                         83 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000023                         84 flags: .blkb 1 ; various boolean flags
      000024                         85 tab_width: .blkb 1 ; print colon width (default 4)
      000025                         86 rx_char: .blkb 1 ; last received character from UART1 
      000026                         87 vars: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     88 ; keep 'free_ram' as last variable 
      00005A                         89 free_ram: ; from here RAM free for BASIC text 
                                     90 
                                     91 ;;-----------------------------------
                                     92     .area SSEG (ABS)
                                     93 ;; working buffers and stack at end of RAM. 	
                                     94 ;;-----------------------------------
      001690                         95     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         96 tib: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         97 pad: .ds PAD_SIZE             ; working buffer
      001760                         98 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         99 stack_unf: ; stack underflow ; control_stack bottom 
                                    100 
                                    101 ;;--------------------------------------
                                    102     .area HOME 
                                    103 ;; interrupt vector table at 0x8000
                                    104 ;;--------------------------------------
      000000 82 00 05 CB            105     int cold_start			; RESET vector 
                           000000   106 .if DEBUG
                                    107 	int TrapHandler 		;TRAP  software interrupt
                           000001   108 .else
      000004 82 00 00 00            109 	int NonHandledInterrupt ;TRAP  software interrupt
                                    110 .endif
      000008 82 00 00 00            111 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            112 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            113 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            114 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            115 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            116 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            117 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 4D            118 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            119 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            120 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            121 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            122 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            123 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            124 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            125 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            126 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            127 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            128 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            129 	int Uart1RxHandler		;int18 UART1 RX full ; user communication channel.
      000054 82 00 00 00            130 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            131 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 00            132 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 00            133 	int NonHandledInterrupt ;int22 ADC2 end of conversion
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000064 82 00 00 37            134 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            135 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            136 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            137 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            138 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            139 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            140 	int NonHandledInterrupt ;int29  not used
                                    141 
                                    142 ;---------------------------------------
                                    143     .area CODE
                                    144 ;---------------------------------------
                           000000   145 .if DEBUG
                                    146 .asciz "STM8_TBI" ; I like to put module name here.
                                    147 .endif 
                                    148 
                                    149 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    150 ; non handled interrupt 
                                    151 ; reset MCU
                                    152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        153 NonHandledInterrupt:
      000000 71                     154     .byte 0x71  ; invalid opcode reinitialize MCU
                                    155 
                                    156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    157 ; auto wakeup from halt
                                    158 ; at iret, program continue 
                                    159 ; after hatl instruction
                                    160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        161 AWUHandler:
      000001 72 19 50 F0      [ 1]  162 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  163 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  164 	clr AWU_TBR 
      00000E 80               [11]  165 	iret
                                    166 
                                    167 ;--------------------------
                                    168 ; UART1 receive character
                                    169 ; CTRL-C (ASCII 3)
                                    170 ; cancel program execution
                                    171 ; and fall back to command line
                                    172 ;--------------------------
      00000F                        173 Uart1RxHandler:
      00000F 72 0B 52 30 FB   [ 2]  174 	btjf UART1_SR,#UART_SR_RXNE,.
      000014 C6 52 31         [ 1]  175 	ld a,UART1_DR 
      000017 A1 03            [ 1]  176 	cp a,#CTRL_C 
      000019 26 07            [ 1]  177 	jrne 1$
      00001B 72 5F 00 25      [ 1]  178 	clr rx_char 
      00001F CC 00 60         [ 2]  179 	jp user_interrupted
      000022                        180 1$:
      000022 A1 18            [ 1]  181 	cp a,#CAN ; CTRL_X 
      000024 26 03            [ 1]  182 	jrne 2$
      000026 CC 05 CB         [ 2]  183 	jp cold_start 	
      000029                        184 2$: 
      000029 A1 1A            [ 1]  185 	cp a,#CTRL_Z
      00002B 26 06            [ 1]  186 	jrne 3$
      00002D CD 06 90         [ 4]  187 	call cancel_autorun 
      000030 CC 05 CB         [ 2]  188 	jp cold_start 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000033 C7 00 25         [ 1]  189 3$:	ld rx_char,a 	
      000036 80               [11]  190 	iret 
                                    191 
                                    192 ;------------------------------------
                                    193 ; software interrupt handler  
                                    194 ;------------------------------------
                           000000   195 .if DEBUG 
                                    196 TrapHandler:
                                    197 	bset flags,#FTRAP 
                                    198 	call print_registers
                                    199 	call cmd_itf
                                    200 	bres flags,#FTRAP 	
                                    201 	iret
                                    202 .endif 
                                    203 
                                    204 ;------------------------------
                                    205 ; TIMER 4 is used to maintain 
                                    206 ; a milliseconds 'ticks' counter
                                    207 ; and decrement 'timer' varaiable
                                    208 ;--------------------------------
      000037                        209 Timer4UpdateHandler:
      000037 72 5F 53 42      [ 1]  210 	clr TIM4_SR 
      00003B CE 00 0E         [ 2]  211 	ldw x,ticks
      00003E 5C               [ 2]  212 	incw x
      00003F CF 00 0E         [ 2]  213 	ldw ticks,x 
      000042 CE 00 10         [ 2]  214 	ldw x,timer
      000045 5D               [ 2]  215 	tnzw x 
      000046 27 04            [ 1]  216 	jreq 1$
      000048 5A               [ 2]  217 	decw x 
      000049 CF 00 10         [ 2]  218 	ldw timer,x 
      00004C                        219 1$:	
      00004C 80               [11]  220 	iret 
                                    221 
                                    222 
                                    223 ;------------------------------------
                                    224 ; Triggered by pressing USER UserButton 
                                    225 ; on NUCLEO card.
                                    226 ; This is used to abort a progam lock 
                                    227 ; in infinite loop. 
                                    228 ;------------------------------------
      00004D                        229 UserButtonHandler:
                                    230 ; wait button release
      00004D 5F               [ 1]  231 	clrw x
      00004E 5A               [ 2]  232 1$: decw x 
      00004F 26 FD            [ 1]  233 	jrne 1$
      000051 72 09 50 15 F8   [ 2]  234 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    235 ; if MCU suspended by SLEEP resume program
      000056 72 07 00 23 05   [ 2]  236     btjf flags,#FSLEEP,2$
      00005B 72 17 00 23      [ 1]  237 	bres flags,#FSLEEP 
      00005F 80               [11]  238 	iret
      000060                        239 2$:	
      000060                        240 user_interrupted:
      000060 72 00 00 23 02   [ 2]  241     btjt flags,#FRUN,4$
      000065 20 13            [ 2]  242 	jra UBTN_Handler_exit 
      000067                        243 4$:	; program interrupted by user 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000067 72 11 00 23      [ 1]  244 	bres flags,#FRUN 
      00006B AE 00 82         [ 2]  245 	ldw x,#USER_ABORT
      00006E CD 02 B3         [ 4]  246 	call puts 
      000071 CE 00 04         [ 2]  247 	ldw x,basicptr 
      000074 C6 00 01         [ 1]  248 	ld a,in 
      000077 CD 13 6D         [ 4]  249 	call prt_basic_line
      00007A                        250 UBTN_Handler_exit:
      00007A AE 17 FF         [ 2]  251     ldw x,#STACK_EMPTY 
      00007D 94               [ 1]  252     ldw sp,x
      00007E 9A               [ 1]  253 	rim 
      00007F CC 08 F8         [ 2]  254 	jp warm_start
                                    255 
      000082 0A 50 72 6F 67 72 61   256 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    257 
                                    258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    259 ;    peripherals initialization
                                    260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    261 
                                    262 ;----------------------------------------
                                    263 ; inialize MCU clock 
                                    264 ; input:
                                    265 ;   A 		source  HSI | 1 HSE 
                                    266 ;   XL      CLK_CKDIVR , clock divisor 
                                    267 ; output:
                                    268 ;   none 
                                    269 ;----------------------------------------
      00009D                        270 clock_init:	
      00009D C1 50 C3         [ 1]  271 	cp a,CLK_CMSR 
      0000A0 27 0C            [ 1]  272 	jreq 2$ ; no switching required 
                                    273 ; select clock source 
      0000A2 72 12 50 C5      [ 1]  274 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A6 C7 50 C4         [ 1]  275 	ld CLK_SWR,a
      0000A9 C1 50 C3         [ 1]  276 1$:	cp a,CLK_CMSR
      0000AC 26 FB            [ 1]  277 	jrne 1$
      0000AE                        278 2$: 	
                                    279 ; HSI and cpu clock divisor 
      0000AE 9F               [ 1]  280 	ld a,xl 
      0000AF C7 50 C6         [ 1]  281 	ld CLK_CKDIVR,a  
      0000B2 81               [ 4]  282 	ret
                                    283 
                                    284 ;----------------------------------
                                    285 ; TIMER2 used as audio tone output 
                                    286 ; on port D:5.
                                    287 ; channel 1 configured as PWM mode 1 
                                    288 ;-----------------------------------  
                           00F424   289 TIM2_CLK_FREQ=62500
      0000B3                        290 timer2_init:
      0000B3 72 1A 50 C7      [ 1]  291 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000B7 35 60 53 05      [ 1]  292  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000BB 35 08 53 0C      [ 1]  293 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000BF 81               [ 4]  294 	ret 
                                    295 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    296 ;---------------------------------
                                    297 ; TIM4 is configured to generate an 
                                    298 ; interrupt every millisecond 
                                    299 ;----------------------------------
      0000C0                        300 timer4_init:
      0000C0 72 18 50 C7      [ 1]  301 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000C4 35 07 53 45      [ 1]  302 	mov TIM4_PSCR,#7 ; prescale 128  
      0000C8 35 7D 53 46      [ 1]  303 	mov TIM4_ARR,#125 ; set for 1msec.
      0000CC 35 05 53 40      [ 1]  304 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000D0 72 10 53 41      [ 1]  305 	bset TIM4_IER,#TIM4_IER_UIE
      0000D4 81               [ 4]  306 	ret
                                    307 
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    309 ;  routines to write to FLASH, EEPROM 
                                    310 ;  and OPTION 
                                    311 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    312 
                                    313 ;----------------------------------
                                    314 ; unlock EEPROM/OPT for writing/erasing
                                    315 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    316 ; input:
                                    317 ;  none
                                    318 ; output:
                                    319 ;  none 
                                    320 ;----------------------------------
      0000D5                        321 unlock_eeprom:
      0000D5 35 00 50 5B      [ 1]  322 	mov FLASH_CR2,#0 
      0000D9 35 FF 50 5C      [ 1]  323 	mov FLASH_NCR2,#0xFF 
      0000DD 35 AE 50 64      [ 1]  324 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000E1 35 56 50 64      [ 1]  325     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000E5 72 07 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000EA 81               [ 4]  327 	ret
                                    328 
                                    329 ;----------------------------------
                                    330 ; unlock FLASH for writing/erasing
                                    331 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    332 ; input:
                                    333 ;  none
                                    334 ; output:
                                    335 ;  none
                                    336 ;----------------------------------
      0000EB                        337 unlock_flash:
      0000EB 35 00 50 5B      [ 1]  338 	mov FLASH_CR2,#0 
      0000EF 35 FF 50 5C      [ 1]  339 	mov FLASH_NCR2,#0xFF 
      0000F3 35 56 50 62      [ 1]  340 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000F7 35 AE 50 62      [ 1]  341 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000FB 72 03 50 5F FB   [ 2]  342 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000100 81               [ 4]  343 	ret
                                    344 
                                    345 ;----------------------------
                                    346 ; erase block code must be 
                                    347 ; executed from RAM
                                    348 ; input:
                                    349 ;-----------------------------
      000101                        350 row_erase:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000101 35 20 50 5B      [ 1]  351 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      000105 35 DF 50 5C      [ 1]  352 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000109 4F               [ 1]  353 	clr a 
      00010A 90 5F            [ 1]  354 	clrw y 
      00010C 91 A7 00 16      [ 1]  355 	ldf ([farptr],y),a
      000110 90 5C            [ 2]  356     incw y
      000112 91 A7 00 16      [ 1]  357 	ldf ([farptr],y),a
      000116 90 5C            [ 2]  358     incw y
      000118 91 A7 00 16      [ 1]  359 	ldf ([farptr],y),a
      00011C 90 5C            [ 2]  360     incw y
      00011E 91 A7 00 16      [ 1]  361 	ldf ([farptr],y),a
      000122 72 05 50 5F FB   [ 2]  362 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000127 81               [ 4]  363 	ret
      000128                        364 row_erase_end:
                                    365 
                                    366 ; copy erase_start in RAM 
      000128                        367 move_erase_to_ram:
      000128 AE 01 28         [ 2]  368 	ldw x,#row_erase_end 
      00012B 1D 01 01         [ 2]  369 	subw x,#row_erase
      00012E CF 00 0C         [ 2]  370 	ldw acc16,x 
      000131 AE 16 90         [ 2]  371 	ldw x,#tib 
      000134 90 AE 01 01      [ 2]  372 	ldw y,#row_erase 
      000138 CD 03 BE         [ 4]  373 	call move 
      00013B 81               [ 4]  374 	ret 
                                    375 
                                    376 ;-----------------------------------
                                    377 ; block programming must be 
                                    378 ; executed from RAM 
                                    379 ; initial contidions: 
                                    380 ; 	memory unlocked
                                    381 ;   bit PRG set in 
                                    382 ; input:
                                    383 ;   x        128 bytes row to program 
                                    384 ;   farptr   row address 
                                    385 ; output:
                                    386 ;   none 
                                    387 ;----------------------------------
                           000001   388 	BCNT=1 
      00013C                        389 program_row:
      00013C 4B 80            [ 1]  390 	push #BLOCK_SIZE  
                                    391 ;enable block programming 
      00013E 72 10 50 5B      [ 1]  392 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000142 72 11 50 5C      [ 1]  393 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000146 90 5F            [ 1]  394 	clrw y 
      000148 F6               [ 1]  395 1$:	ld a,(x)
      000149 91 A7 00 16      [ 1]  396 	ldf ([farptr],y),a
      00014D 5C               [ 2]  397 	incw x 
      00014E 90 5C            [ 2]  398 	incw y 
      000150 0A 01            [ 1]  399 	dec (BCNT,sp)
      000152 26 F4            [ 1]  400 	jrne 1$
                                    401 ; wait EOP bit 
      000154 72 05 50 5F FB   [ 2]  402 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      000159                        403 	_drop 1 
      000159 5B 01            [ 2]    1     addw sp,#1 
      00015B 81               [ 4]  404 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      00015C                        405 program_row_end:
                                    406 
                                    407 ;-------------------------
                                    408 ; move program_row to RAM 
                                    409 ; at txtubound address 
                                    410 ;------------------------
      00015C                        411 move_prg_to_ram:
      00015C AE 01 5C         [ 2]  412 	ldw x,#program_row_end 
      00015F 1D 01 3C         [ 2]  413 	subw x,#program_row 
      000162 CF 00 0C         [ 2]  414 	ldw acc16,x 
      000165 AE 16 90         [ 2]  415 	ldw x,#tib 
      000168 90 AE 01 3C      [ 2]  416 	ldw y,#program_row 
      00016C CD 03 BE         [ 4]  417 	call move 
      00016F 81               [ 4]  418 	ret 
                                    419 
                                    420 
                                    421 ;-----------------------------
                                    422 ; write a row in FLASH/EEPROM 
                                    423 ; input:
                                    424 ;    farptr   destination address 
                                    425 ;    x        source address 
                                    426 ;-----------------------------
      000170                        427 write_row:
      000170 89               [ 2]  428 	pushw x 
      000171 72 5D 00 16      [ 1]  429 	tnz farptr 
      000175 26 1C            [ 1]  430 	jrne to_flash 
      000177 AE 80 00         [ 2]  431 	ldw x,#FLASH_BASE 
      00017A C3 00 17         [ 2]  432 	cpw x,farptr+1 
      00017D 24 14            [ 1]  433 	jruge to_flash 
      00017F                        434 to_eeprom:
      00017F AE 40 00         [ 2]  435 	ldw x,#EEPROM_BASE 
      000182 C3 00 17         [ 2]  436 	cpw x,farptr+1 
      000185 24 01            [ 1]  437 	jruge 1$
      000187 81               [ 4]  438 	ret ; bad address 
      000188 AE 47 FF         [ 2]  439 1$: ldw x,#EEPROM_END 
      00018B 23 01            [ 2]  440 	jrule 2$ 
      00018D 81               [ 4]  441 	ret ; bad address 
      00018E CD 00 D5         [ 4]  442 2$:	call unlock_eeprom
      000191 20 03            [ 2]  443 	jra do_programming
      000193                        444 to_flash:
      000193 CD 00 EB         [ 4]  445 	call unlock_flash 
      000196                        446 do_programming:
      000196 85               [ 2]  447 	popw x 
      000197 CD 16 90         [ 4]  448 	call tib
      00019A 72 13 50 5F      [ 1]  449 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      00019E 72 17 50 5F      [ 1]  450 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001A2 81               [ 4]  451 	ret 
                                    452 
                                    453 
                                    454 ;-----------------------------------
                                    455 ; erase flash or EEPROM block
                                    456 ; a blow is 128 bytes 
                                    457 ; input:
                                    458 ;   farptr  address row begin
                                    459 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    460 ;   none
                                    461 ;--------------------------------------
      0001A3                        462 block_erase:
      0001A3 CE 00 17         [ 2]  463 	ldw x,farptr+1
      0001A6 A3 27 00         [ 2]  464 	cpw x,#user_space 
      0001A9 2A 17            [ 1]  465 	jrpl erase_flash 
                                    466 ; erase eeprom block
      0001AB A3 40 00         [ 2]  467 	cpw x,#EEPROM_BASE 
      0001AE 24 01            [ 1]  468 	jruge 1$
      0001B0 81               [ 4]  469 	ret ; bad address 
      0001B1 AE 47 FF         [ 2]  470 1$: ldw x,#EEPROM_END 
      0001B4 23 01            [ 2]  471 	jrule 2$ 
      0001B6 81               [ 4]  472 	ret ; bad address 
      0001B7 CD 00 D5         [ 4]  473 2$:	call unlock_eeprom 
      0001BA CD 16 90         [ 4]  474 	call tib 
      0001BD 72 17 50 5F      [ 1]  475 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001C1 81               [ 4]  476 	ret 
                                    477 ; erase flash block:
      0001C2                        478 erase_flash:
      0001C2 CD 00 EB         [ 4]  479 	call unlock_flash 
      0001C5 CD 16 90         [ 4]  480 	call tib 
      0001C8 72 13 50 5F      [ 1]  481     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001CC 81               [ 4]  482 	ret 
                                    483 
                                    484 
                                    485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    486 ; write a byte to FLASH or EEPROM/OPTION  
                                    487 ; input:
                                    488 ;    a  		byte to write
                                    489 ;    farptr  	address
                                    490 ;    x          farptr[x]
                                    491 ; output:
                                    492 ;    none
                                    493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    494 	; variables locales
                           000001   495 	BTW = 1   ; byte to write offset on stack
                           000002   496 	OPT = 2   ; OPTION flag offset on stack
                           000002   497 	VSIZE = 2
      0001CD                        498 write_byte:
      0001CD 90 89            [ 2]  499 	pushw y
      0001CF                        500 	_vars VSIZE
      0001CF 52 02            [ 2]    1     sub sp,#VSIZE 
      0001D1 6B 01            [ 1]  501 	ld (BTW,sp),a ; byte to write 
      0001D3 0F 02            [ 1]  502 	clr (OPT,sp)  ; OPTION flag
                                    503 ; put addr[15:0] in Y, for bounds check.
      0001D5 90 CE 00 17      [ 2]  504 	ldw y,farptr+1   ; Y=addr15:0
                                    505 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001D9 72 5D 00 16      [ 1]  506 	tnz farptr 
      0001DD 26 14            [ 1]  507 	jrne write_flash
      0001DF 90 A3 27 00      [ 2]  508     cpw y,#user_space
      0001E3 24 0E            [ 1]  509     jruge write_flash
      0001E5 90 A3 40 00      [ 2]  510 	cpw y,#EEPROM_BASE  
      0001E9 25 52            [ 1]  511     jrult write_exit
      0001EB 90 A3 48 7F      [ 2]  512 	cpw y,#OPTION_END 
      0001EF 22 4C            [ 1]  513 	jrugt write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0001F1 20 16            [ 2]  514 	jra write_eeprom 
                                    515 ; write program memory
      0001F3                        516 write_flash:
      0001F3 CD 00 EB         [ 4]  517 	call unlock_flash 
      0001F6 9B               [ 1]  518 1$:	sim 
      0001F7 7B 01            [ 1]  519 	ld a,(BTW,sp)
      0001F9 92 A7 00 16      [ 4]  520 	ldf ([farptr],x),a ; farptr[x]=A
      0001FD 72 05 50 5F FB   [ 2]  521 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000202 9A               [ 1]  522     rim 
      000203 72 13 50 5F      [ 1]  523     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000207 20 34            [ 2]  524     jra write_exit
                                    525 ; write eeprom and option
      000209                        526 write_eeprom:
      000209 CD 00 D5         [ 4]  527 	call unlock_eeprom
                                    528 	; check for data eeprom or option eeprom
      00020C 90 A3 48 00      [ 2]  529 	cpw y,#OPTION_BASE
      000210 2B 08            [ 1]  530 	jrmi 1$
      000212 90 A3 48 80      [ 2]  531 	cpw y,#OPTION_END+1
      000216 2A 02            [ 1]  532 	jrpl 1$
      000218 03 02            [ 1]  533 	cpl (OPT,sp)
      00021A                        534 1$: 
      00021A 0D 02            [ 1]  535     tnz (OPT,sp)
      00021C 27 08            [ 1]  536     jreq 2$
                                    537 	; pour modifier une option il faut modifier ces 2 bits
      00021E 72 1E 50 5B      [ 1]  538     bset FLASH_CR2,#FLASH_CR2_OPT
      000222 72 1F 50 5C      [ 1]  539     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000226                        540 2$: 
      000226 7B 01            [ 1]  541     ld a,(BTW,sp)
      000228 92 A7 00 16      [ 4]  542     ldf ([farptr],x),a
      00022C 0D 02            [ 1]  543     tnz (OPT,sp)
      00022E 27 08            [ 1]  544     jreq 3$
      000230 5C               [ 2]  545     incw x
      000231 7B 01            [ 1]  546     ld a,(BTW,sp)
      000233 43               [ 1]  547     cpl a
      000234 92 A7 00 16      [ 4]  548     ldf ([farptr],x),a
      000238 72 05 50 5F FB   [ 2]  549 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00023D                        550 write_exit:
      00023D                        551 	_drop VSIZE 
      00023D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00023F 90 85            [ 2]  552 	popw y
      000241 81               [ 4]  553     ret
                                    554 
                                    555 ;--------------------------------------------
                                    556 ; write a data block to eeprom or flash 
                                    557 ; input:
                                    558 ;   Y        source address   
                                    559 ;   X        array index  destination  farptr[x]
                                    560 ;   BSIZE    block size bytes 
                                    561 ;   farptr   write address , byte* 
                                    562 ; output:
                                    563 ;	X 		after last byte written 
                                    564 ;   Y 		after last byte read 
                                    565 ;  farptr   point after block
                                    566 ;---------------------------------------------
      000242                        567 	_argofs 2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           000004     1     ARG_OFS=2+2 
      000242                        568 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    569 	; local var 
                           000001   570 	XSAVE=1 
                           000002   571 	VSIZE=2 
      000242                        572 write_block:
      000242                        573 	_vars VSIZE
      000242 52 02            [ 2]    1     sub sp,#VSIZE 
      000244 1F 01            [ 2]  574 	ldw (XSAVE,sp),x 
      000246 1E 05            [ 2]  575 	ldw x,(BSIZE,sp) 
      000248 27 13            [ 1]  576 	jreq 9$
      00024A 1E 01            [ 2]  577 1$:	ldw x,(XSAVE,sp)
      00024C 90 F6            [ 1]  578 	ld a,(y)
      00024E CD 01 CD         [ 4]  579 	call write_byte 
      000251 5C               [ 2]  580 	incw x 
      000252 90 5C            [ 2]  581 	incw y 
      000254 1F 01            [ 2]  582 	ldw (XSAVE,sp),x
      000256 1E 05            [ 2]  583 	ldw x,(BSIZE,sp)
      000258 5A               [ 2]  584 	decw x
      000259 1F 05            [ 2]  585 	ldw (BSIZE,sp),x 
      00025B 26 ED            [ 1]  586 	jrne 1$
      00025D                        587 9$:
      00025D 1E 01            [ 2]  588 	ldw x,(XSAVE,sp)
      00025F CD 19 AC         [ 4]  589 	call incr_farptr
      000262                        590 	_drop VSIZE
      000262 5B 02            [ 2]    1     addw sp,#VSIZE 
      000264 81               [ 4]  591 	ret 
                                    592 
                                    593 
                                    594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    595 ;;   UART1 subroutines
                                    596 ;;   used for user interface 
                                    597 ;;   communication channel.
                                    598 ;;   settings: 
                                    599 ;;		115200 8N1 no flow control
                                    600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    601 
                                    602 ;---------------------------------------------
                                    603 ; initialize UART1, 115200 8N1
                                    604 ; input:
                                    605 ;	none
                                    606 ; output:
                                    607 ;   none
                                    608 ;---------------------------------------------
      000265                        609 uart1_init:
      000265 72 1A 50 02      [ 1]  610     bset PA_DDR,#UART1_TX_PIN
      000269 72 1A 50 03      [ 1]  611     bset PA_CR1,#UART1_TX_PIN 
      00026D 72 1A 50 04      [ 1]  612     bset PA_CR2,#UART1_TX_PIN 
                                    613 ; enable UART1 clock
      000271 72 14 50 C7      [ 1]  614 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      000275                        615 uart1_set_baud: 
                                    616 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    617 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000275 A6 E1            [ 1]  618 	ld a,#CLK_SWR_HSI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000277 C1 50 C3         [ 1]  619 	cp a,CLK_CMSR 
      00027A 27 0A            [ 1]  620 	jreq 2$ 
      00027C                        621 1$: ; 8 Mhz 	
      00027C 35 05 52 33      [ 1]  622 	mov UART1_BRR2,#0x05 ; must be loaded first
      000280 35 04 52 32      [ 1]  623 	mov UART1_BRR1,#0x4
      000284 20 08            [ 2]  624 	jra 3$
      000286                        625 2$: ; 16 Mhz 	
      000286 35 0B 52 33      [ 1]  626 	mov UART1_BRR2,#0x0b ; must be loaded first
      00028A 35 08 52 32      [ 1]  627 	mov UART1_BRR1,#0x08
      00028E                        628 3$:
      00028E 72 5F 52 31      [ 1]  629     clr UART1_DR
      000292 35 2C 52 35      [ 1]  630 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000296 72 10 52 35      [ 1]  631 	bset UART1_CR2,#UART_CR2_SBK
      00029A 72 0D 52 30 FB   [ 2]  632     btjf UART1_SR,#UART_SR_TC,.
      00029F 81               [ 4]  633     ret
                                    634 
                                    635 ;---------------------------------
                                    636 ; send character to UART1 
                                    637 ; input:
                                    638 ;   A 
                                    639 ; output:
                                    640 ;   none 
                                    641 ;--------------------------------	
      0002A0                        642 putc:
      0002A0 72 0F 52 30 FB   [ 2]  643 	btjf UART1_SR,#UART_SR_TXE,.
      0002A5 C7 52 31         [ 1]  644 	ld UART1_DR,a 
      0002A8 81               [ 4]  645 	ret 
                                    646 
                                    647 ;---------------------------------
                                    648 ; wait character from UART1 
                                    649 ; input:
                                    650 ;   none
                                    651 ; output:
                                    652 ;   A 			char  
                                    653 ;--------------------------------	
      0002A9                        654 getc:
      0002A9 C6 00 25         [ 1]  655 	ld a,rx_char 
      0002AC 27 FB            [ 1]  656 	jreq getc 
      0002AE 72 5F 00 25      [ 1]  657 	clr rx_char 
      0002B2 81               [ 4]  658 	ret 
                                    659 
                                    660 ;-----------------------------
                                    661 ; send an ASCIZ string to UART1 
                                    662 ; input: 
                                    663 ;   x 		char * 
                                    664 ; output:
                                    665 ;   none 
                                    666 ;-------------------------------
      0002B3                        667 puts:
      0002B3 F6               [ 1]  668     ld a,(x)
      0002B4 27 06            [ 1]  669 	jreq 1$
      0002B6 CD 02 A0         [ 4]  670 	call putc 
      0002B9 5C               [ 2]  671 	incw x 
      0002BA 20 F7            [ 2]  672 	jra puts 
      0002BC 81               [ 4]  673 1$:	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    674 
                                    675 
                                    676 ;---------------------------
                                    677 ; delete character at left 
                                    678 ; of cursor on terminal 
                                    679 ; input:
                                    680 ;   none 
                                    681 ; output:
                                    682 ;	none 
                                    683 ;---------------------------
      0002BD                        684 bksp:
      0002BD A6 08            [ 1]  685 	ld a,#BS 
      0002BF CD 02 A0         [ 4]  686 	call putc 
      0002C2 A6 20            [ 1]  687 	ld a,#SPACE 
      0002C4 CD 02 A0         [ 4]  688 	call putc 
      0002C7 A6 08            [ 1]  689 	ld a,#BS 
      0002C9 CD 02 A0         [ 4]  690 	call putc 
      0002CC 81               [ 4]  691 	ret 
                                    692 ;---------------------------
                                    693 ; delete n character left of cursor 
                                    694 ; at terminal.
                                    695 ; input: 
                                    696 ;   A   number of characters to delete.
                                    697 ; output:
                                    698 ;    none 
                                    699 ;--------------------------	
      0002CD                        700 delete:
      0002CD 88               [ 1]  701 	push a 
      0002CE 0D 01            [ 1]  702 0$:	tnz (1,sp)
      0002D0 27 07            [ 1]  703 	jreq 1$
      0002D2 CD 02 BD         [ 4]  704 	call bksp 
      0002D5 0A 01            [ 1]  705 	dec (1,sp)
      0002D7 20 F5            [ 2]  706 	jra 0$
      0002D9 84               [ 1]  707 1$:	pop a 
      0002DA 81               [ 4]  708 	ret
                                    709 
                                    710 ;--------------------------
                                    711 ; print n spaces on terminal
                                    712 ; input:
                                    713 ;  X 		number of spaces 
                                    714 ; output:
                                    715 ;	none 
                                    716 ;---------------------------
      0002DB                        717 spaces:
      0002DB A6 20            [ 1]  718 	ld a,#SPACE 
      0002DD 5D               [ 2]  719 1$:	tnzw x
      0002DE 27 06            [ 1]  720 	jreq 9$
      0002E0 CD 02 A0         [ 4]  721 	call putc 
      0002E3 5A               [ 2]  722 	decw x
      0002E4 20 F7            [ 2]  723 	jra 1$
      0002E6                        724 9$: 
      0002E6 81               [ 4]  725 	ret 
                                    726 
                                    727 ;----------------------
                                    728 ; print token id && value
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    729 ; input:
                                    730 ;   A     token id 
                                    731 ;   X     token value 
                                    732 ;---------------------
                           000001   733 	BSAVE=1
                           000002   734 	AREG=2
                           000003   735 	XREG=3
                           000004   736 	VSIZE=4
      0002E7                        737 prt_tok:
      0002E7                        738 	_vars VSIZE 
      0002E7 52 04            [ 2]    1     sub sp,#VSIZE 
      0002E9 6B 02            [ 1]  739 	ld (AREG,sp),a 
      0002EB 1F 03            [ 2]  740 	ldw (XREG,sp),x 
      0002ED C6 00 0A         [ 1]  741 	ld a, base
      0002F0 6B 01            [ 1]  742 	ld (BSAVE,sp),a 
      0002F2 35 10 00 0A      [ 1]  743 	mov base,#16  
      0002F6 AE 03 1E         [ 2]  744 	ldw x,#token_msg
      0002F9 CD 02 B3         [ 4]  745 	call puts 
      0002FC 5F               [ 1]  746 	clrw x 
      0002FD 7B 02            [ 1]  747 	ld a,(AREG,sp)
      0002FF 97               [ 1]  748 	ld xl,a 
      000300 CD 0A 00         [ 4]  749 	call print_int 
      000303 A6 20            [ 1]  750 	ld a,#SPACE
      000305 CD 02 A0         [ 4]  751 	call putc 
      000308 1E 03            [ 2]  752 	ldw x,(XREG,sp)
      00030A CD 0A 00         [ 4]  753 	call print_int 
      00030D A6 0D            [ 1]  754 	ld a,#CR 
      00030F CD 02 A0         [ 4]  755 	call putc 
      000312 7B 01            [ 1]  756 	ld a,(BSAVE,sp)
      000314 C7 00 0A         [ 1]  757 	ld base,a 
      000317 7B 02            [ 1]  758 	ld a,(AREG,sp)
      000319 1E 03            [ 2]  759 	ldw x,(XREG,sp)
      00031B                        760 	_drop VSIZE 
      00031B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00031D 81               [ 4]  761 	ret 
      00031E 74 6F 6B 65 6E 3A 20   762 token_msg: .asciz "token: "
             00
                                    763 
                                    764 
                                    765 ;---------------------
                                    766 ; display n bytes row 
                                    767 ; from memory.
                                    768 ; input:
                                    769 ;   A   bytes to print 
                                    770 ;	X   start address 
                                    771 ; output:
                                    772 ;   X   address after last shown  
                                    773 ;---------------------
                           000001   774 	CNT=1 
                           000002   775 	ADR=2 
                           000003   776 	VSIZE=3 
      000326                        777 show_row:
      000326 4D               [ 1]  778 	tnz a 
      000327 26 01            [ 1]  779 	jrne 1$
      000329 81               [ 4]  780 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00032A                        781 1$:	
      00032A 89               [ 2]  782 	pushw x  
      00032B 88               [ 1]  783 	push a 
      00032C 35 04 00 24      [ 1]  784 	mov tab_width,#4 
      000330 CD 0A 00         [ 4]  785 	call print_int 
      000333 A6 20            [ 1]  786 	ld a,#SPACE  
      000335 CD 02 A0         [ 4]  787 	call putc
      000338                        788 row_loop:
      000338 1E 02            [ 2]  789 	ldw x,(ADR,sp)
      00033A F6               [ 1]  790 	ld a,(x)
      00033B 5F               [ 1]  791 	clrw x 
      00033C 97               [ 1]  792 	ld xl,a 
      00033D CD 0A 00         [ 4]  793 	call print_int 
      000340 1E 02            [ 2]  794 	ldw x,(ADR,sp)
      000342 5C               [ 2]  795 	incw x 
      000343 1F 02            [ 2]  796 	ldw (ADR,sp),x 
      000345 0A 01            [ 1]  797 	dec (CNT,sp)
      000347 26 EF            [ 1]  798 	jrne row_loop
      000349                        799 	_drop VSIZE  		
      000349 5B 03            [ 2]    1     addw sp,#VSIZE 
      00034B 35 04 00 24      [ 1]  800 	mov tab_width,#4
      00034F A6 0D            [ 1]  801 	ld a,#CR 
      000351 CD 02 A0         [ 4]  802 	call putc 
      000354 81               [ 4]  803 	ret 
                                    804 
                                    805 ;--------------------------
                                    806 ; print memory content 
                                    807 ; in hexadecimal format
                                    808 ;  input:
                                    809 ;    X    start address 
                                    810 ;    Y    count 
                                    811 ;--------------------------
                           000001   812 	BCNT=1
                           000003   813 	BASE=3
                           000004   814 	TABW=4
                           000004   815 	VSIZE=4   
      000355                        816 hex_dump:
      000355                        817 	_vars VSIZE
      000355 52 04            [ 2]    1     sub sp,#VSIZE 
      000357 C6 00 0A         [ 1]  818 	ld a,base
      00035A 6B 03            [ 1]  819 	ld (BASE,sp),a 
      00035C 35 10 00 0A      [ 1]  820 	mov base,#16
      000360 C6 00 24         [ 1]  821 	ld a,tab_width 
      000363 6B 04            [ 1]  822 	ld (TABW,sp),a
      000365 A6 0D            [ 1]  823 	ld a,#CR 
      000367 CD 02 A0         [ 4]  824 	call putc 
      00036A 17 01            [ 2]  825 1$: ldw (BCNT,sp),y
      00036C A6 10            [ 1]  826 	ld a,#16
      00036E 90 A3 00 10      [ 2]  827 	cpw y,#16
      000372 2A 02            [ 1]  828 	jrpl 2$
      000374 90 9F            [ 1]  829 	ld a,yl
      000376                        830 2$: 	
      000376 CD 03 26         [ 4]  831 	call show_row 
      000379 16 01            [ 2]  832 	ldw y,(BCNT,sp) 
      00037B 72 A2 00 10      [ 2]  833 	subw y,#16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00037F 90 A3 00 01      [ 2]  834 	cpw y,#1
      000383 2A E5            [ 1]  835 	jrpl 1$
      000385 7B 03            [ 1]  836 	ld a,(BASE,sp)
      000387 C7 00 0A         [ 1]  837 	ld base,a
      00038A 7B 04            [ 1]  838 	ld a,(TABW,sp)
      00038C C7 00 24         [ 1]  839 	ld tab_width,a 
      00038F                        840 	_drop VSIZE
      00038F 5B 04            [ 2]    1     addw sp,#VSIZE 
      000391 81               [ 4]  841 	ret 
                                    842 
                                    843 ;-------------------------------------
                                    844 ; retrun string length
                                    845 ; input:
                                    846 ;   X         .asciz  pointer 
                                    847 ; output:
                                    848 ;   X         length 
                                    849 ;-------------------------------------
      000392                        850 strlen:
      000392 90 93            [ 1]  851 	ldw y,x 
      000394 5F               [ 1]  852 	clrw x 
      000395 90 7D            [ 1]  853 1$:	tnz (y) 
      000397 27 05            [ 1]  854 	jreq 9$ 
      000399 5C               [ 2]  855 	incw x
      00039A 90 5C            [ 2]  856 	incw y 
      00039C 20 F7            [ 2]  857 	jra 1$ 
      00039E 81               [ 4]  858 9$: ret 
                                    859 
                                    860 ;------------------------------------
                                    861 ; compare 2 strings
                                    862 ; input:
                                    863 ;   X 		char* first string 
                                    864 ;   Y       char* second string 
                                    865 ; output:
                                    866 ;   A 		0|1 
                                    867 ;-------------------------------------
      00039F                        868 strcmp:
      00039F F6               [ 1]  869 	ld a,(x)
      0003A0 27 0B            [ 1]  870 	jreq 5$ 
      0003A2 90 F1            [ 1]  871 	cp a,(y) 
      0003A4 26 05            [ 1]  872 	jrne 4$ 
      0003A6 5C               [ 2]  873 	incw x 
      0003A7 90 5C            [ 2]  874 	incw y 
      0003A9 20 F4            [ 2]  875 	jra strcmp 
      0003AB                        876 4$: ; not same  
      0003AB 4F               [ 1]  877 	clr a 
      0003AC 81               [ 4]  878 	ret 
      0003AD                        879 5$: ; same 
      0003AD A6 01            [ 1]  880 	ld a,#1 
      0003AF 81               [ 4]  881 	ret 
                                    882 
                                    883 
                                    884 ;---------------------------------------
                                    885 ;  copy src to dest 
                                    886 ; input:
                                    887 ;   X 		dest 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    888 ;   Y 		src 
                                    889 ; output: 
                                    890 ;   X 		dest 
                                    891 ;----------------------------------
      0003B0                        892 strcpy:
      0003B0 89               [ 2]  893 	pushw x 
      0003B1 90 F6            [ 1]  894 1$: ld a,(y)
      0003B3 27 06            [ 1]  895 	jreq 9$ 
      0003B5 F7               [ 1]  896 	ld (x),a 
      0003B6 5C               [ 2]  897 	incw x 
      0003B7 90 5C            [ 2]  898 	incw y 
      0003B9 20 F6            [ 2]  899 	jra 1$ 
      0003BB 7F               [ 1]  900 9$:	clr (x)
      0003BC 85               [ 2]  901 	popw x 
      0003BD 81               [ 4]  902 	ret 
                                    903 
                                    904 ;---------------------------------------
                                    905 ; move memory block 
                                    906 ; input:
                                    907 ;   X 		destination 
                                    908 ;   Y 	    source 
                                    909 ;   acc16	bytes count 
                                    910 ; output:
                                    911 ;   none 
                                    912 ;--------------------------------------
                           000001   913 	INCR=1 ; increament high byte 
                           000002   914 	LB=2 ; increament low byte 
                           000002   915 	VSIZE=2
      0003BE                        916 move:
      0003BE                        917 	_vars VSIZE 
      0003BE 52 02            [ 2]    1     sub sp,#VSIZE 
      0003C0 0F 01            [ 1]  918 	clr (INCR,sp)
      0003C2 0F 02            [ 1]  919 	clr (LB,sp)
      0003C4 90 89            [ 2]  920 	pushw y 
      0003C6 13 01            [ 2]  921 	cpw x,(1,sp) ; compare DEST to SRC 
      0003C8 90 85            [ 2]  922 	popw y 
      0003CA 27 31            [ 1]  923 	jreq move_exit ; x==y 
      0003CC 2B 0E            [ 1]  924 	jrmi move_down
      0003CE                        925 move_up: ; start from top address with incr=-1
      0003CE 72 BB 00 0C      [ 2]  926 	addw x,acc16
      0003D2 72 B9 00 0C      [ 2]  927 	addw y,acc16
      0003D6 03 01            [ 1]  928 	cpl (INCR,sp)
      0003D8 03 02            [ 1]  929 	cpl (LB,sp)   ; increment = -1 
      0003DA 20 05            [ 2]  930 	jra move_loop  
      0003DC                        931 move_down: ; start from bottom address with incr=1 
      0003DC 5A               [ 2]  932     decw x 
      0003DD 90 5A            [ 2]  933 	decw y
      0003DF 0C 02            [ 1]  934 	inc (LB,sp) ; incr=1 
      0003E1                        935 move_loop:	
      0003E1 C6 00 0C         [ 1]  936     ld a, acc16 
      0003E4 CA 00 0D         [ 1]  937 	or a, acc8
      0003E7 27 14            [ 1]  938 	jreq move_exit 
      0003E9 72 FB 01         [ 2]  939 	addw x,(INCR,sp)
      0003EC 72 F9 01         [ 2]  940 	addw y,(INCR,sp) 
      0003EF 90 F6            [ 1]  941 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003F1 F7               [ 1]  942 	ld (x),a 
      0003F2 89               [ 2]  943 	pushw x 
      0003F3 CE 00 0C         [ 2]  944 	ldw x,acc16 
      0003F6 5A               [ 2]  945 	decw x 
      0003F7 CF 00 0C         [ 2]  946 	ldw acc16,x 
      0003FA 85               [ 2]  947 	popw x 
      0003FB 20 E4            [ 2]  948 	jra move_loop
      0003FD                        949 move_exit:
      0003FD                        950 	_drop VSIZE
      0003FD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0003FF 81               [ 4]  951 	ret 	
                                    952 
                                    953 ;-------------------------------------
                                    954 ; search text area for a line#
                                    955 ; input:
                                    956 ;	X 			line# 
                                    957 ; output:
                                    958 ;   X 			addr of line | 0 
                                    959 ;   Y           line#|insert address if not found  
                                    960 ;-------------------------------------
                           000001   961 	LL=1 ; line length 
                           000002   962 	LB=2 ; line length low byte 
                           000002   963 	VSIZE=2 
      000400                        964 search_lineno:
      000400                        965 	_vars VSIZE
      000400 52 02            [ 2]    1     sub sp,#VSIZE 
      000402 0F 01            [ 1]  966 	clr (LL,sp)
      000404 90 CE 00 1C      [ 2]  967 	ldw y,txtbgn
      000408                        968 search_ln_loop:
      000408 90 C3 00 1E      [ 2]  969 	cpw y,txtend 
      00040C 2A 10            [ 1]  970 	jrpl 8$
      00040E 90 F3            [ 1]  971 	cpw x,(y)
      000410 27 0E            [ 1]  972 	jreq 9$
      000412 2B 0A            [ 1]  973 	jrmi 8$ 
      000414 90 E6 02         [ 1]  974 	ld a,(2,y)
      000417 6B 02            [ 1]  975 	ld (LB,sp),a 
      000419 72 F9 01         [ 2]  976 	addw y,(LL,sp)
      00041C 20 EA            [ 2]  977 	jra search_ln_loop 
      00041E                        978 8$: 
      00041E 5F               [ 1]  979 	clrw x 	
      00041F 51               [ 1]  980 	exgw x,y 
      000420                        981 9$: _drop VSIZE
      000420 5B 02            [ 2]    1     addw sp,#VSIZE 
      000422 51               [ 1]  982 	exgw x,y   
      000423 81               [ 4]  983 	ret 
                                    984 
                                    985 ;-------------------------------------
                                    986 ; delete line at addr
                                    987 ; input:
                                    988 ;   X 		addr of line i.e DEST for move 
                                    989 ;-------------------------------------
                           000001   990 	LLEN=1
                           000003   991 	SRC=3
                           000004   992 	VSIZE=4
      000424                        993 del_line: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000424                        994 	_vars VSIZE 
      000424 52 04            [ 2]    1     sub sp,#VSIZE 
      000426 E6 02            [ 1]  995 	ld a,(2,x) ; line length
      000428 6B 02            [ 1]  996 	ld (LLEN+1,sp),a 
      00042A 0F 01            [ 1]  997 	clr (LLEN,sp)
      00042C 90 93            [ 1]  998 	ldw y,x  
      00042E 72 F9 01         [ 2]  999 	addw y,(LLEN,sp) ;SRC  
      000431 17 03            [ 2] 1000 	ldw (SRC,sp),y  ;save source 
      000433 90 CE 00 1E      [ 2] 1001 	ldw y,txtend 
      000437 72 F2 03         [ 2] 1002 	subw y,(SRC,sp) ; y=count 
      00043A 90 CF 00 0C      [ 2] 1003 	ldw acc16,y 
      00043E 16 03            [ 2] 1004 	ldw y,(SRC,sp)    ; source
      000440 CD 03 BE         [ 4] 1005 	call move
      000443 90 CE 00 1E      [ 2] 1006 	ldw y,txtend 
      000447 72 F2 01         [ 2] 1007 	subw y,(LLEN,sp)
      00044A 90 CF 00 1E      [ 2] 1008 	ldw txtend,y  
      00044E                       1009 	_drop VSIZE     
      00044E 5B 04            [ 2]    1     addw sp,#VSIZE 
      000450 81               [ 4] 1010 	ret 
                                   1011 
                                   1012 ;---------------------------------------------
                                   1013 ; create a gap in text area to 
                                   1014 ; move new line in this gap
                                   1015 ; input:
                                   1016 ;    X 			addr gap start 
                                   1017 ;    Y 			gap length 
                                   1018 ; output:
                                   1019 ;    X 			addr gap start 
                                   1020 ;--------------------------------------------
                           000001  1021 	DEST=1
                           000003  1022 	SRC=3
                           000005  1023 	LEN=5
                           000006  1024 	VSIZE=6 
      000451                       1025 create_gap:
      000451                       1026 	_vars VSIZE
      000451 52 06            [ 2]    1     sub sp,#VSIZE 
      000453 1F 03            [ 2] 1027 	ldw (SRC,sp),x 
      000455 17 05            [ 2] 1028 	ldw (LEN,sp),y 
      000457 90 CF 00 0C      [ 2] 1029 	ldw acc16,y 
      00045B 90 93            [ 1] 1030 	ldw y,x ; SRC
      00045D 72 BB 00 0C      [ 2] 1031 	addw x,acc16  
      000461 1F 01            [ 2] 1032 	ldw (DEST,sp),x 
                                   1033 ;compute size to move 	
      000463 CE 00 1E         [ 2] 1034 	ldw x,txtend 
      000466 72 F0 03         [ 2] 1035 	subw x,(SRC,sp)
      000469 CF 00 0C         [ 2] 1036 	ldw acc16,x ; size to move
      00046C 1E 01            [ 2] 1037 	ldw x,(DEST,sp) 
      00046E CD 03 BE         [ 4] 1038 	call move
      000471 CE 00 1E         [ 2] 1039 	ldw x,txtend
      000474 72 FB 05         [ 2] 1040 	addw x,(LEN,sp)
      000477 CF 00 1E         [ 2] 1041 	ldw txtend,x
      00047A                       1042 9$:	_drop VSIZE 
      00047A 5B 06            [ 2]    1     addw sp,#VSIZE 
      00047C 81               [ 4] 1043 	ret 
                                   1044 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1045 ;--------------------------------------------
                                   1046 ; insert line in pad into text area 
                                   1047 ; first search for already existing 
                                   1048 ; replace existing 
                                   1049 ; if new line empty delete existing one. 
                                   1050 ; input:
                                   1051 ;   ptr16		pointer to tokenized line  
                                   1052 ; output:
                                   1053 ;   none
                                   1054 ;---------------------------------------------
                           000001  1055 	DEST=1  ; text area insertion address 
                           000003  1056 	SRC=3   ; str to insert address 
                           000005  1057 	LINENO=5 ; line number 
                           000007  1058 	LLEN=7 ; line length 
                           000008  1059 	VSIZE=8  
      00047D                       1060 insert_line:
      00047D                       1061 	_vars VSIZE 
      00047D 52 08            [ 2]    1     sub sp,#VSIZE 
      00047F CE 00 1E         [ 2] 1062 	ldw x,txtend  
      000482 C3 00 1C         [ 2] 1063 	cpw x,txtbgn 
      000485 26 15            [ 1] 1064 	jrne 0$
                                   1065 ;first text line 
      000487 AE 00 02         [ 2] 1066 	ldw x,#2 
      00048A 72 D6 00 17      [ 4] 1067 	ld a,([ptr16],x)
      00048E 5F               [ 1] 1068 	clrw x 
      00048F 97               [ 1] 1069 	ld xl,a
      000490 1F 07            [ 2] 1070 	ldw (LLEN,sp),x 
      000492 CE 00 1C         [ 2] 1071 	ldw x,txtbgn
      000495 1F 01            [ 2] 1072 	ldw (DEST,sp),x 
      000497 CE 00 1E         [ 2] 1073 	ldw x,txtend 
      00049A 20 37            [ 2] 1074 	jra 4$
      00049C 72 CE 00 17      [ 5] 1075 0$:	ldw x,[ptr16]
                                   1076 ; line number
      0004A0 1F 05            [ 2] 1077 	ldw (LINENO,sp),x 
      0004A2 AE 00 02         [ 2] 1078 	ldw x,#2 
      0004A5 72 D6 00 17      [ 4] 1079 	ld a,([ptr16],x)
      0004A9 97               [ 1] 1080 	ld xl,a
                                   1081 ; line length
      0004AA 1F 07            [ 2] 1082 	ldw (LLEN,sp),x
                                   1083 ; check if that line number already exit 	
      0004AC 1E 05            [ 2] 1084 	ldw x,(LINENO,sp)
      0004AE CD 04 00         [ 4] 1085 	call search_lineno 
      0004B1 5D               [ 2] 1086 	tnzw x 
      0004B2 26 04            [ 1] 1087 	jrne 2$
                                   1088 ; line doesn't exit
                                   1089 ; it will be inserted at this point.  	
      0004B4 17 01            [ 2] 1090 	ldw (DEST,sp),y 
      0004B6 20 05            [ 2] 1091 	jra 3$
                                   1092 ; line exit delete it.
                                   1093 ; it will be replaced by new one 	
      0004B8 1F 01            [ 2] 1094 2$: ldw (DEST,sp),x 
      0004BA CD 04 24         [ 4] 1095 	call del_line
      0004BD                       1096 3$: 
                                   1097 ; insert new line or leave if LLEN==3
                                   1098 ; LLEN==3 means empty line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004BD A6 03            [ 1] 1099 	ld a,#3
      0004BF 11 08            [ 1] 1100 	cp a,(LLEN+1,sp)
      0004C1 27 24            [ 1] 1101 	jreq insert_ln_exit ; empty line exit.
                                   1102 ; if insertion point at txtend 
                                   1103 ; move no need to create a gap 
      0004C3 1E 01            [ 2] 1104 	ldw x,(DEST,sp)
      0004C5 C3 00 1E         [ 2] 1105 	cpw x,txtend 
      0004C8 27 09            [ 1] 1106 	jreq 4$ 
                                   1107 ; must create a gap
                                   1108 ; at insertion point  
      0004CA 1E 01            [ 2] 1109 	ldw x,(DEST,sp)
      0004CC 16 07            [ 2] 1110 	ldw y,(LLEN,sp)
      0004CE CD 04 51         [ 4] 1111 	call create_gap
      0004D1 20 06            [ 2] 1112 	jra 5$
      0004D3                       1113 4$: 
      0004D3 72 FB 07         [ 2] 1114 	addw x,(LLEN,sp)
      0004D6 CF 00 1E         [ 2] 1115 	ldw txtend,x 	 
                                   1116 ; move new line in gap 
      0004D9 1E 07            [ 2] 1117 5$:	ldw x,(LLEN,sp)
      0004DB CF 00 0C         [ 2] 1118 	ldw acc16,x 
      0004DE 90 AE 16 E0      [ 2] 1119 	ldw y,#pad ;SRC 
      0004E2 1E 01            [ 2] 1120 	ldw x,(DEST,sp) ; dest address 
      0004E4 CD 03 BE         [ 4] 1121 	call move 
      0004E7                       1122 insert_ln_exit:	
      0004E7                       1123 	_drop VSIZE
      0004E7 5B 08            [ 2]    1     addw sp,#VSIZE 
      0004E9 81               [ 4] 1124 	ret
                                   1125 
                                   1126 ;-----------------------------------
                                   1127 ; create token list fromm text line 
                                   1128 ; save this list in pad buffer 
                                   1129 ;  compiled line format: 
                                   1130 ;    line_no  2 bytes {0...32767}
                                   1131 ;    count    1 byte  
                                   1132 ;    tokens   variable length 
                                   1133 ;   
                                   1134 ; input:
                                   1135 ;   none
                                   1136 ; modified variables:
                                   1137 ;   basicptr     token list buffer address 
                                   1138 ;   in.w  		 3|count, i.e. index in buffer
                                   1139 ;   count        length of line | 0  
                                   1140 ;-----------------------------------
                           000001  1141 	XSAVE=1
                           000002  1142 	VSIZE=2
      0004EA                       1143 compile:
      0004EA                       1144 	_vars VSIZE 
      0004EA 52 02            [ 2]    1     sub sp,#VSIZE 
      0004EC 72 1A 00 23      [ 1] 1145 	bset flags,#FCOMP 
      0004F0 A6 00            [ 1] 1146 	ld a,#0
      0004F2 AE 00 00         [ 2] 1147 	ldw x,#0
      0004F5 CF 16 E0         [ 2] 1148 	ldw pad,x ; destination buffer 
      0004F8 C7 16 E2         [ 1] 1149 	ld pad+2,a ; count 
      0004FB AE 16 E3         [ 2] 1150 	ldw x,#pad+3
      0004FE 72 5F 00 01      [ 1] 1151 	clr in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000502 CD 0C E6         [ 4] 1152 	call get_token
      000505 A1 84            [ 1] 1153 	cp a,#TK_INTGR
      000507 26 11            [ 1] 1154 	jrne 2$
      000509 A3 00 01         [ 2] 1155 	cpw x,#1 
      00050C 2A 05            [ 1] 1156 	jrpl 1$
      00050E A6 0A            [ 1] 1157 	ld a,#ERR_BAD_VALUE
      000510 CC 08 73         [ 2] 1158 	jp tb_error
      000513 CF 16 E0         [ 2] 1159 1$:	ldw pad,x 
      000516 90 AE 16 E3      [ 2] 1160 	ldw y,#pad+3 
      00051A 90 A3 17 60      [ 2] 1161 2$:	cpw y,#stack_full 
      00051E 25 05            [ 1] 1162 	jrult 3$
      000520 A6 0F            [ 1] 1163 	ld a,#ERR_BUF_FULL 
      000522 CC 08 73         [ 2] 1164 	jp tb_error 
      000525                       1165 3$:	
      000525 93               [ 1] 1166 	ldw x,y 
      000526 CD 0C E6         [ 4] 1167 	call get_token 
      000529 A1 00            [ 1] 1168 	cp a,#TK_NONE 
      00052B 26 ED            [ 1] 1169 	jrne 2$ 
                                   1170 ; compilation completed  
      00052D 72 A2 16 E0      [ 2] 1171 	subw y,#pad
      000531 90 9F            [ 1] 1172     ld a,yl
      000533 AE 16 E0         [ 2] 1173 	ldw x,#pad 
      000536 CF 00 17         [ 2] 1174 	ldw ptr16,x 
      000539 E7 02            [ 1] 1175 	ld (2,x),a 
      00053B FE               [ 2] 1176 	ldw x,(x)
      00053C 27 09            [ 1] 1177 	jreq 10$
      00053E CD 04 7D         [ 4] 1178 	call insert_line
      000541 72 5F 00 03      [ 1] 1179 	clr  count 
      000545 20 0F            [ 2] 1180 	jra  11$ 
      000547                       1181 10$: ; line# is zero 
      000547 CE 00 17         [ 2] 1182 	ldw x,ptr16  
      00054A CF 00 04         [ 2] 1183 	ldw basicptr,x 
      00054D E6 02            [ 1] 1184 	ld a,(2,x)
      00054F C7 00 03         [ 1] 1185 	ld count,a 
      000552 35 03 00 01      [ 1] 1186 	mov in,#3 
      000556                       1187 11$:
      000556                       1188 	_drop VSIZE 
      000556 5B 02            [ 2]    1     addw sp,#VSIZE 
      000558 72 1B 00 23      [ 1] 1189 	bres flags,#FCOMP 
      00055C 81               [ 4] 1190 	ret 
                                   1191 
                                   1192 ;------------------------------------
                                   1193 ;  set all variables to zero 
                                   1194 ; input:
                                   1195 ;   none 
                                   1196 ; output:
                                   1197 ;	none
                                   1198 ;------------------------------------
      00055D                       1199 clear_vars:
      00055D AE 00 26         [ 2] 1200 	ldw x,#vars 
      000560 90 AE 00 34      [ 2] 1201 	ldw y,#2*26 
      000564 7F               [ 1] 1202 1$:	clr (x)
      000565 5C               [ 2] 1203 	incw x 
      000566 90 5A            [ 2] 1204 	decw y 
      000568 26 FA            [ 1] 1205 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      00056A 81               [ 4] 1206 	ret 
                                   1207 
                                   1208 ;-------------------------------------
                                   1209 ; check if A is a letter 
                                   1210 ; input:
                                   1211 ;   A 			character to test 
                                   1212 ; output:
                                   1213 ;   C flag      1 true, 0 false 
                                   1214 ;-------------------------------------
      00056B                       1215 is_alpha:
      00056B A1 41            [ 1] 1216 	cp a,#'A 
      00056D 8C               [ 1] 1217 	ccf
      00056E 24 0B            [ 1] 1218 	jrnc 9$ 
      000570 A1 5B            [ 1] 1219 	cp a,#'Z+1 
      000572 25 07            [ 1] 1220 	jrc 9$ 
      000574 A1 61            [ 1] 1221 	cp a,#'a 
      000576 8C               [ 1] 1222 	ccf 
      000577 24 02            [ 1] 1223 	jrnc 9$
      000579 A1 7B            [ 1] 1224 	cp a,#'z+1   
      00057B 81               [ 4] 1225 9$: ret 	
                                   1226 
                                   1227 ;------------------------------------
                                   1228 ; check if character in {'0'..'9'}
                                   1229 ; input:
                                   1230 ;    A  character to test
                                   1231 ; output:
                                   1232 ;    Carry  0 not digit | 1 digit
                                   1233 ;------------------------------------
      00057C                       1234 is_digit:
      00057C A1 30            [ 1] 1235 	cp a,#'0
      00057E 25 03            [ 1] 1236 	jrc 1$
      000580 A1 3A            [ 1] 1237     cp a,#'9+1
      000582 8C               [ 1] 1238 	ccf 
      000583 8C               [ 1] 1239 1$:	ccf 
      000584 81               [ 4] 1240     ret
                                   1241 
                                   1242 ;-------------------------------------
                                   1243 ;  program initialization entry point 
                                   1244 ;-------------------------------------
                           000001  1245 	MAJOR=1
                           000000  1246 	MINOR=0
      000585 0A 0A 54 69 6E 79 20  1247 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      0005CB                       1248 cold_start:
                                   1249 ;set stack 
      0005CB AE 17 FF         [ 2] 1250 	ldw x,#STACK_EMPTY
      0005CE 94               [ 1] 1251 	ldw sp,x   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1252 ; clear all ram 
      0005CF 7F               [ 1] 1253 0$: clr (x)
      0005D0 5A               [ 2] 1254 	decw x 
      0005D1 26 FC            [ 1] 1255 	jrne 0$
                                   1256 ; activate pull up on all inputs 
      0005D3 A6 FF            [ 1] 1257 	ld a,#255 
      0005D5 C7 50 03         [ 1] 1258 	ld PA_CR1,a 
      0005D8 C7 50 08         [ 1] 1259 	ld PB_CR1,a 
      0005DB C7 50 0D         [ 1] 1260 	ld PC_CR1,a 
      0005DE C7 50 12         [ 1] 1261 	ld PD_CR1,a 
      0005E1 C7 50 17         [ 1] 1262 	ld PE_CR1,a 
      0005E4 C7 50 1C         [ 1] 1263 	ld PF_CR1,a 
      0005E7 C7 50 21         [ 1] 1264 	ld PG_CR1,a 
      0005EA C7 50 2B         [ 1] 1265 	ld PI_CR1,a
                                   1266 ; set LD2 pin as output and turn it on
      0005ED 72 1A 50 0D      [ 1] 1267     bset PC_CR1,#LED2_BIT
      0005F1 72 1A 50 0E      [ 1] 1268     bset PC_CR2,#LED2_BIT
      0005F5 72 1A 50 0C      [ 1] 1269     bset PC_DDR,#LED2_BIT
      0005F9 72 1A 50 0A      [ 1] 1270 	bset PC_ODR,#LED2_BIT 
                                   1271 ; disable schmitt triggers on Arduino CN4 analog inputs
      0005FD 55 00 3F 54 07   [ 1] 1272 	mov ADC_TDRL,0x3f
                                   1273 ; disable peripherals clocks
                                   1274 ;	clr CLK_PCKENR1 
                                   1275 ;	clr CLK_PCKENR2
      000602 72 5F 50 F2      [ 1] 1276 	clr AWU_TBR 
      000606 72 14 50 CA      [ 1] 1277 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1278 ; select internal clock no divisor: 16 Mhz 	
      00060A A6 E1            [ 1] 1279 	ld a,#CLK_SWR_HSI 
      00060C 5F               [ 1] 1280 	clrw x  
      00060D CD 00 9D         [ 4] 1281     call clock_init 
      000610 CD 00 C0         [ 4] 1282 	call timer4_init
      000613 CD 00 B3         [ 4] 1283 	call timer2_init
                                   1284 ; UART1 at 115200 BAUD
      000616 CD 02 65         [ 4] 1285 	call uart1_init
                                   1286 ; activate PE_4 (user button interrupt)
      000619 72 18 50 18      [ 1] 1287     bset PE_CR2,#USR_BTN_BIT 
                                   1288 ; display system information
      00061D AE 05 85         [ 2] 1289 	ldw x,#software 
      000620 CD 02 B3         [ 4] 1290 	call puts 
      000623 A6 01            [ 1] 1291 	ld a,#MAJOR 
      000625 C7 00 0D         [ 1] 1292 	ld acc8,a 
      000628 5F               [ 1] 1293 	clrw x 
      000629 CF 00 0B         [ 2] 1294 	ldw acc24,x 
      00062C A6 0A            [ 1] 1295 	ld a,#10 
      00062E CD 09 B8         [ 4] 1296 	call prti24 
      000631 A6 2E            [ 1] 1297 	ld a,#'.
      000633 CD 02 A0         [ 4] 1298 	call putc 
      000636 A6 00            [ 1] 1299 	ld a,#MINOR 
      000638 C7 00 0D         [ 1] 1300 	ld acc8,a 
      00063B 5F               [ 1] 1301 	clrw x 
      00063C CF 00 0B         [ 2] 1302 	ldw acc24,x 
      00063F A6 0A            [ 1] 1303 	ld a,#10 
      000641 CD 09 B8         [ 4] 1304 	call prti24 
      000644 A6 0D            [ 1] 1305 	ld a,#CR 
      000646 CD 02 A0         [ 4] 1306 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000649 CD 19 BA         [ 4] 1307 	call seek_fdrive 
      00064C 9A               [ 1] 1308 	rim 
      00064D 72 5C 00 15      [ 1] 1309 	inc seedy+1 
      000651 72 5C 00 13      [ 1] 1310 	inc seedx+1 
      000655 CD 06 DD         [ 4] 1311 	call clear_basic
      000658 CD 12 53         [ 4] 1312 	call ubound 
                                   1313 ;	jra 2$	
                                   1314 ; 150 msec beep 
      00065B AE 00 96         [ 2] 1315 	ldw x,#150 
      00065E 90 AE 03 E6      [ 2] 1316 	ldw y,#998 
      000662 CD 18 19         [ 4] 1317 	call beep  
      000665 72 1B 50 0A      [ 1] 1318 2$:	bres PC_ODR,#LED2_BIT	
      000669 CD 06 72         [ 4] 1319 	call warm_init
      00066C CD 06 9F         [ 4] 1320 	call load_autorun
      00066F CC 08 FB         [ 2] 1321     jp cmd_line  
                                   1322 
      000672                       1323 warm_init:
      000672 72 5F 00 23      [ 1] 1324 	clr flags 
      000676 72 5F 00 20      [ 1] 1325 	clr loop_depth 
      00067A 35 04 00 24      [ 1] 1326 	mov tab_width,#TAB_WIDTH 
      00067E 35 0A 00 0A      [ 1] 1327 	mov base,#10 
      000682 AE 00 00         [ 2] 1328 	ldw x,#0 
      000685 CF 00 04         [ 2] 1329 	ldw basicptr,x 
      000688 CF 00 00         [ 2] 1330 	ldw in.w,x 
      00068B 72 5F 00 03      [ 1] 1331 	clr count
      00068F 81               [ 4] 1332 	ret 
                                   1333 
                                   1334 ;--------------------------
                                   1335 ; called by tb_error when
                                   1336 ; flag FAUTORUN is set.
                                   1337 ; There is a bug in autorun 
                                   1338 ; program so cancel it.
                                   1339 ;---------------------------
      000690                       1340 cancel_autorun:
      000690 AE 40 00         [ 2] 1341 	ldw x,#AUTORUN_NAME 
      000693 CF 00 17         [ 2] 1342 	ldw farptr+1,x 
      000696 4F               [ 1] 1343 	clr a
      000697 5F               [ 1] 1344 	clrw x  
      000698 C7 00 16         [ 1] 1345 	ld farptr,a 
      00069B CD 01 CD         [ 4] 1346 	call write_byte 
      00069E 81               [ 4] 1347 	ret 
                                   1348 
                                   1349 
                                   1350 ;--------------------------
                                   1351 ; if autorun file defined 
                                   1352 ; in eeprom address AUTORUN_NAME 
                                   1353 ; load and run it.
                                   1354 ;-------------------------
      00069F                       1355 load_autorun:
      00069F 90 AE 40 00      [ 2] 1356 	ldw y,#AUTORUN_NAME
      0006A3 90 F6            [ 1] 1357 	ld a,(y)
      0006A5 27 20            [ 1] 1358 	jreq 9$
      0006A7 CD 1A 1A         [ 4] 1359 	call search_file
      0006AA 25 05            [ 1] 1360 	jrc 2$ 
                                   1361 ; if file doesn't exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0006AC CD 06 90         [ 4] 1362 	call cancel_autorun
      0006AF 20 16            [ 2] 1363 	jra 9$ 
      0006B1 CD 1B 2E         [ 4] 1364 2$:	call load_file
      0006B4 AE 40 00         [ 2] 1365 	ldw x,#AUTORUN_NAME 
      0006B7 CD 02 B3         [ 4] 1366 	call puts
      0006BA AE 06 C8         [ 2] 1367 	ldw x,#autorun_msg 
      0006BD CD 02 B3         [ 4] 1368 	call puts 
      0006C0 72 1C 00 23      [ 1] 1369 	bset flags,#FAUTORUN 
      0006C4 CC 17 DE         [ 2] 1370 	jp run_it    
      0006C7 81               [ 4] 1371 9$: ret 	
                                   1372 
      0006C8 20 6C 6F 61 64 65 64  1373 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1374 ;---------------------------
                                   1375 ; reset BASIC text variables 
                                   1376 ; and clear variables 
                                   1377 ;---------------------------
      0006DD                       1378 clear_basic:
      0006DD 72 5F 00 03      [ 1] 1379 	clr count
      0006E1 72 5F 00 01      [ 1] 1380 	clr in  
      0006E5 AE 00 5A         [ 2] 1381 	ldw x,#free_ram 
      0006E8 CF 00 1C         [ 2] 1382 	ldw txtbgn,x 
      0006EB CF 00 1E         [ 2] 1383 	ldw txtend,x 
      0006EE CD 05 5D         [ 4] 1384 	call clear_vars 
      0006F1 81               [ 4] 1385 	ret 
                                   1386 
                                   1387 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1388 ;;   Tiny BASIC error messages     ;;
                                   1389 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F2                       1390 err_msg:
      0006F2 00 00 07 12 07 1F 07  1391 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             2D 07 46 07 55
      0006FE 07 6B 07 81 07 9B 07  1392 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             AC 07 BD
      000708 07 C9 07 FC 08 0C 08  1393 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             20 08 33
                                   1394 
      000712 4D 65 6D 6F 72 79 20  1395 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      00071F 73 79 6E 74 61 78 20  1396 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      00072D 6D 61 74 68 20 6F 70  1397 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      000746 64 69 76 69 73 69 6F  1398 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      000755 69 6E 76 61 6C 69 64  1399 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00076B 72 75 6E 20 74 69 6D  1400 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



             75 73 61 67 65 2E 0A
             00
      000781 63 6F 6D 6D 61 6E 64  1401 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      00079B 64 75 70 6C 69 63 61  1402 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0007AC 46 69 6C 65 20 6E 6F  1403 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0007BD 62 61 64 20 76 61 6C  1404 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0007C9 46 69 6C 65 20 69 6E  1405 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0007FC 4E 6F 20 64 61 74 61  1406 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      00080C 4E 6F 20 70 72 6F 67  1407 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      000820 46 69 6C 65 20 73 79  1408 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      000833 42 75 66 66 65 72 20  1409 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1410 
      000840 72 75 6E 20 74 69 6D  1411 rt_msg: .asciz "run time error, "
             65 20 65 72 72 6F 72
             2C 20 00
      000851 63 6F 6D 70 69 6C 65  1412 comp_msg: .asciz "compile error, "
             20 65 72 72 6F 72 2C
             20 00
      000861 6C 61 73 74 20 74 6F  1413 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1414 
      000871                       1415 syntax_error:
      000871 A6 02            [ 1] 1416 	ld a,#ERR_SYNTAX 
                                   1417 
      000873                       1418 tb_error:
      000873 72 0A 00 23 47   [ 2] 1419 	btjt flags,#FCOMP,1$
      000878 88               [ 1] 1420 	push a 
      000879 AE 08 40         [ 2] 1421 	ldw x, #rt_msg 
      00087C CD 02 B3         [ 4] 1422 	call puts 
      00087F 84               [ 1] 1423 	pop a 
      000880 AE 06 F2         [ 2] 1424 	ldw x, #err_msg 
      000883 72 5F 00 0C      [ 1] 1425 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000887 48               [ 1] 1426 	sll a
      000888 72 59 00 0C      [ 1] 1427 	rlc acc16  
      00088C C7 00 0D         [ 1] 1428 	ld acc8, a 
      00088F 72 BB 00 0C      [ 2] 1429 	addw x,acc16 
      000893 FE               [ 2] 1430 	ldw x,(x)
      000894 CD 02 B3         [ 4] 1431 	call puts
      000897 CE 00 04         [ 2] 1432 	ldw x,basicptr
      00089A C6 00 01         [ 1] 1433 	ld a,in 
      00089D CD 13 6D         [ 4] 1434 	call prt_basic_line
      0008A0 AE 08 61         [ 2] 1435 	ldw x,#tk_id 
      0008A3 CD 02 B3         [ 4] 1436 	call puts 
      0008A6 C6 00 02         [ 1] 1437 	ld a,in.saved 
      0008A9 5F               [ 1] 1438 	clrw x 
      0008AA 97               [ 1] 1439 	ld xl,a 
      0008AB 72 BB 00 04      [ 2] 1440 	addw x,basicptr 
      0008AF F6               [ 1] 1441 	ld a,(x)
      0008B0 5F               [ 1] 1442 	clrw x 
      0008B1 97               [ 1] 1443 	ld xl,a 
      0008B2 CD 0A 00         [ 4] 1444 	call print_int
      0008B5 72 0D 00 23 3A   [ 2] 1445 	btjf flags,#FAUTORUN ,6$
      0008BA CD 06 90         [ 4] 1446 	call cancel_autorun  
      0008BD 20 35            [ 2] 1447 	jra 6$
      0008BF                       1448 1$:	
      0008BF 88               [ 1] 1449 	push a 
      0008C0 AE 08 51         [ 2] 1450 	ldw x,#comp_msg
      0008C3 CD 02 B3         [ 4] 1451 	call puts 
      0008C6 84               [ 1] 1452 	pop a 
      0008C7 AE 06 F2         [ 2] 1453 	ldw x, #err_msg 
      0008CA 72 5F 00 0C      [ 1] 1454 	clr acc16 
      0008CE 48               [ 1] 1455 	sll a
      0008CF 72 59 00 0C      [ 1] 1456 	rlc acc16  
      0008D3 C7 00 0D         [ 1] 1457 	ld acc8, a 
      0008D6 72 BB 00 0C      [ 2] 1458 	addw x,acc16 
      0008DA FE               [ 2] 1459 	ldw x,(x)
      0008DB CD 02 B3         [ 4] 1460 	call puts
      0008DE AE 16 90         [ 2] 1461 	ldw x,#tib
      0008E1 CD 02 B3         [ 4] 1462 	call puts 
      0008E4 A6 0D            [ 1] 1463 	ld a,#CR 
      0008E6 CD 02 A0         [ 4] 1464 	call putc
      0008E9 CE 00 00         [ 2] 1465 	ldw x,in.w
      0008EC CD 02 DB         [ 4] 1466 	call spaces
      0008EF A6 5E            [ 1] 1467 	ld a,#'^
      0008F1 CD 02 A0         [ 4] 1468 	call putc 
      0008F4 AE 17 FF         [ 2] 1469 6$: ldw x,#STACK_EMPTY 
      0008F7 94               [ 1] 1470     ldw sp,x
      0008F8                       1471 warm_start:
      0008F8 CD 06 72         [ 4] 1472 	call warm_init
                                   1473 ;----------------------------
                                   1474 ;   BASIC interpreter
                                   1475 ;----------------------------
      0008FB                       1476 cmd_line: ; user interface 
      0008FB A6 0D            [ 1] 1477 	ld a,#CR 
      0008FD CD 02 A0         [ 4] 1478 	call putc 
      000900 A6 3E            [ 1] 1479 	ld a,#'> 
      000902 CD 02 A0         [ 4] 1480 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000905 CD 0B 31         [ 4] 1481 	call readln
      000908 72 5D 00 03      [ 1] 1482 	tnz count 
      00090C 27 ED            [ 1] 1483 	jreq cmd_line
      00090E CD 04 EA         [ 4] 1484 	call compile
                                   1485 ; if text begin with a line number
                                   1486 ; the compiler set count to zero    
                                   1487 ; so code is not interpreted
      000911 72 5D 00 03      [ 1] 1488 	tnz count 
      000915 27 E4            [ 1] 1489 	jreq cmd_line
                                   1490 
                                   1491 ; if direct command 
                                   1492 ; it's ready to interpret 
                                   1493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1494 ;; This is the interpreter loop
                                   1495 ;; for each BASIC code line. 
                                   1496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      000917                       1497 interpreter: 
      000917 C6 00 01         [ 1] 1498 	ld a,in 
      00091A C1 00 03         [ 1] 1499 	cp a,count 
      00091D 2B 1D            [ 1] 1500 	jrmi interp_loop
      00091F                       1501 next_line:
      00091F 72 01 00 23 D7   [ 2] 1502 	btjf flags, #FRUN, cmd_line
      000924 CE 00 04         [ 2] 1503 	ldw x,basicptr
      000927 72 BB 00 00      [ 2] 1504 	addw x,in.w 
      00092B C3 00 1E         [ 2] 1505 	cpw x,txtend 
      00092E 2A C8            [ 1] 1506 	jrpl warm_start
      000930 CF 00 04         [ 2] 1507 	ldw basicptr,x ; start of next line  
      000933 E6 02            [ 1] 1508 	ld a,(2,x)
      000935 C7 00 03         [ 1] 1509 	ld count,a 
      000938 35 03 00 01      [ 1] 1510 	mov in,#3 ; skip first 3 bytes of line 
      00093C                       1511 interp_loop: 
      00093C CD 09 63         [ 4] 1512 	call next_token
      00093F A1 00            [ 1] 1513 	cp a,#TK_NONE 
      000941 27 DC            [ 1] 1514 	jreq next_line 
      000943 A1 80            [ 1] 1515 	cp a,#TK_CMD
      000945 26 03            [ 1] 1516 	jrne 1$
      000947 FD               [ 4] 1517 	call (x) 
      000948 20 F2            [ 2] 1518 	jra interp_loop 
      00094A                       1519 1$:	 
      00094A A1 85            [ 1] 1520 	cp a,#TK_VAR
      00094C 26 05            [ 1] 1521 	jrne 2$
      00094E CD 12 86         [ 4] 1522 	call let_var  
      000951 20 E9            [ 2] 1523 	jra interp_loop 
      000953                       1524 2$:	
      000953 A1 06            [ 1] 1525 	cp a,#TK_ARRAY 
      000955 26 05            [ 1] 1526 	jrne 3$
      000957 CD 12 83         [ 4] 1527 	call let_array 
      00095A 20 E0            [ 2] 1528 	jra interp_loop
      00095C                       1529 3$:	
      00095C A1 01            [ 1] 1530 	cp a,#TK_COLON 
      00095E 27 DC            [ 1] 1531 	jreq interp_loop 
      000960 CC 08 71         [ 2] 1532 	jp syntax_error 
                                   1533 
                                   1534 		
                                   1535 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1536 ; extract next token from
                                   1537 ; token list 
                                   1538 ; basicptr -> base address 
                                   1539 ; in  -> offset in list array 
                                   1540 ; output:
                                   1541 ;   A 		token attribute
                                   1542 ;   X 		token value if there is one
                                   1543 ;----------------------------------------
      000963                       1544 next_token:
      000963 5F               [ 1] 1545 	clrw x 
      000964 C6 00 01         [ 1] 1546 	ld a,in 
      000967 C0 00 03         [ 1] 1547 	sub a,count ; don't replace sub by cp!  
      00096A 2B 01            [ 1] 1548 	jrmi 0$
      00096C 81               [ 4] 1549 	ret  ; end of BASIC line 
      00096D                       1550 0$: 
      00096D 55 00 01 00 02   [ 1] 1551 	mov in.saved,in 
      000972 90 CE 00 04      [ 2] 1552 	ldw y,basicptr 
      000976 91 D6 00         [ 4] 1553 	ld a,([in.w],y)
      000979 72 5C 00 01      [ 1] 1554 	inc in  
      00097D 4D               [ 1] 1555 	tnz a 
      00097E 2B 2B            [ 1] 1556 	jrmi 6$
      000980 A1 06            [ 1] 1557 	cp a,#TK_ARRAY
      000982 2A 33            [ 1] 1558 	jrpl 9$  ; no attribute for these
      000984 A1 01            [ 1] 1559 	cp a,#TK_COLON
      000986 27 2F            [ 1] 1560 	jreq 9$  
      000988                       1561 1$: ; 
      000988 A1 03            [ 1] 1562 	cp a,#TK_CHAR
      00098A 26 0B            [ 1] 1563 	jrne 2$
      00098C 91 D6 00         [ 4] 1564 	ld a,([in.w],y)
      00098F 72 5C 00 01      [ 1] 1565 	inc in 
      000993 41               [ 1] 1566 	exg a,xl  
      000994 A6 03            [ 1] 1567 	ld a,#TK_CHAR
      000996 81               [ 4] 1568 	ret
      000997 A1 02            [ 1] 1569 2$:	cp a,#TK_QSTR 
      000999 26 1C            [ 1] 1570 	jrne 9$
      00099B 93               [ 1] 1571 	ldw x,y 
      00099C 72 BB 00 00      [ 2] 1572 	addw x,in.w ; pointer to string 
                                   1573 ; move pointer after string 
      0009A0 91 6D 00         [ 4] 1574 3$:	tnz ([in.w],y)
      0009A3 27 0E            [ 1] 1575 	jreq 8$
      0009A5 72 5C 00 01      [ 1] 1576 	inc in 
      0009A9 20 F5            [ 2] 1577 	jra 3$
      0009AB                       1578 6$: 
      0009AB 91 DE 00         [ 5] 1579 	ldw y,([in.w],y)
      0009AE 51               [ 1] 1580 	exgw x,y 
      0009AF 72 5C 00 01      [ 1] 1581 	inc in
      0009B3 72 5C 00 01      [ 1] 1582 8$:	inc in 
      0009B7                       1583 9$: 
      0009B7 81               [ 4] 1584 	ret	
                                   1585 
                                   1586 
                                   1587 
                                   1588 
                                   1589 ;------------------------------------
                                   1590 ; print integer in acc24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1591 ; input:
                                   1592 ;	acc24 		integer to print 
                                   1593 ;	A 			numerical base for conversion 
                                   1594 ;               if bit 7 is set add a space at print end.
                                   1595 ;   XL 			field width, 0 -> no fill.
                                   1596 ;  output:
                                   1597 ;    none 
                                   1598 ;------------------------------------
                           000001  1599 	WIDTH = 1
                           000002  1600 	BASE = 2
                           000003  1601 	ADD_SPACE=3 ; add a space after number 
                           000003  1602 	VSIZE = 3
      0009B8                       1603 prti24:
      0009B8                       1604 	_vars VSIZE 
      0009B8 52 03            [ 2]    1     sub sp,#VSIZE 
      0009BA 0F 03            [ 1] 1605 	clr (ADD_SPACE,sp)
      0009BC A5 80            [ 1] 1606 	bcp a,#0x80 
      0009BE 27 02            [ 1] 1607 	jreq 0$ 
      0009C0 03 03            [ 1] 1608 	cpl (ADD_SPACE,sp)
      0009C2 A4 1F            [ 1] 1609 0$:	and a,#31 
      0009C4 6B 02            [ 1] 1610 	ld (BASE,sp),a
      0009C6 9F               [ 1] 1611 	ld a,xl
      0009C7 6B 01            [ 1] 1612 	ld (WIDTH,sp),a 
      0009C9 7B 02            [ 1] 1613 	ld a, (BASE,sp)  
      0009CB CD 0A 65         [ 4] 1614     call itoa  ; conversion entier en  .asciz
      0009CE 7B 01            [ 1] 1615 1$: ld a,(WIDTH,sp)
      0009D0 27 1F            [ 1] 1616 	jreq 4$
      0009D2 C7 00 0D         [ 1] 1617 	ld acc8,a 
      0009D5 89               [ 2] 1618 	pushw x 
      0009D6 CD 03 92         [ 4] 1619 	call strlen 
      0009D9 9F               [ 1] 1620 	ld a,xl 
      0009DA 85               [ 2] 1621 	popw x 
      0009DB 31 00 0D         [ 3] 1622 	exg a,acc8 
      0009DE C0 00 0D         [ 1] 1623 	sub a,acc8 
      0009E1 2B 0E            [ 1] 1624 	jrmi 4$
      0009E3 6B 01            [ 1] 1625 	ld (WIDTH,sp),a 
      0009E5 A6 20            [ 1] 1626 	ld  a,#SPACE
      0009E7 0D 01            [ 1] 1627 3$: tnz (WIDTH,sp)
      0009E9 27 06            [ 1] 1628 	jreq 4$
      0009EB 5A               [ 2] 1629 	decw x 
      0009EC F7               [ 1] 1630 	ld (x),a 
      0009ED 0A 01            [ 1] 1631 	dec (WIDTH,sp) 
      0009EF 20 F6            [ 2] 1632 	jra 3$
      0009F1                       1633 4$: 
      0009F1 CD 02 B3         [ 4] 1634 	call puts 
      0009F4 0D 03            [ 1] 1635 	tnz (ADD_SPACE,sp)
      0009F6 27 05            [ 1] 1636 	jreq 5$
      0009F8 A6 20            [ 1] 1637     ld a,#SPACE 
      0009FA CD 02 A0         [ 4] 1638 	call putc 
      0009FD                       1639 5$: _drop VSIZE 
      0009FD 5B 03            [ 2]    1     addw sp,#VSIZE 
      0009FF 81               [ 4] 1640     ret	
                                   1641 
                                   1642 ;-----------------------------------
                                   1643 ; print a 16 bit integer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1644 ; using variable 'base' as conversion
                                   1645 ; format.
                                   1646 ; input:
                                   1647 ;   X       integer to print 
                                   1648 ;   base    conversion base 
                                   1649 ; output:
                                   1650 ;   none 
                                   1651 ;-----------------------------------
                           000001  1652 	SIGN=1
                           000002  1653 	STRING=2
                                   1654 ;; 9 char on stack for string buffer	
                           00000A  1655 	STREND=2+8 
                           00000A  1656 	VSIZE=10
      000A00                       1657 print_int: 
      000A00                       1658 	_vars VSIZE 
      000A00 52 0A            [ 2]    1     sub sp,#VSIZE 
      000A02 0F 01            [ 1] 1659 	clr (SIGN,sp)
      000A04 90 96            [ 1] 1660 	ldw y,sp 
      000A06 72 A9 00 0A      [ 2] 1661 	addw y,#STREND  
      000A0A 90 7F            [ 1] 1662 	clr (y)
      000A0C C6 00 0A         [ 1] 1663 	ld a,base  
      000A0F A1 0A            [ 1] 1664 	cp a,#10 
      000A11 26 06            [ 1] 1665 	jrne 1$ 
      000A13 5D               [ 2] 1666 	tnzw x 
      000A14 2A 03            [ 1] 1667 	jrpl 1$ 
      000A16 03 01            [ 1] 1668 	cpl (SIGN,sp)
      000A18 50               [ 2] 1669 	negw x 	 
      000A19                       1670 1$:	
      000A19 C6 00 0A         [ 1] 1671 	ld a,base 
      000A1C 62               [ 2] 1672 	div x,a 
      000A1D AB 30            [ 1] 1673 	add a,#'0 
      000A1F A1 3A            [ 1] 1674 	cp a,#'9+1 
      000A21 2B 02            [ 1] 1675 	jrmi 2$ 
      000A23 AB 07            [ 1] 1676 	add a,#7 
      000A25 90 5A            [ 2] 1677 2$: decw y 
      000A27 90 F7            [ 1] 1678 	ld (y),a 
      000A29 5D               [ 2] 1679 	tnzw x 
      000A2A 26 ED            [ 1] 1680 	jrne 1$ 
      000A2C A6 10            [ 1] 1681 	ld a,#16 
      000A2E C1 00 0A         [ 1] 1682 	cp a,base 
      000A31 26 08            [ 1] 1683 	jrne 3$
      000A33 A6 24            [ 1] 1684 	ld a,#'$
      000A35 90 5A            [ 2] 1685 	decw y  
      000A37 90 F7            [ 1] 1686 	ld (y),a
      000A39 20 0A            [ 2] 1687 	jra 9$ 
      000A3B 0D 01            [ 1] 1688 3$: tnz (SIGN,sp)
      000A3D 27 06            [ 1] 1689 	jreq 9$ 
      000A3F A6 2D            [ 1] 1690 	ld a,#'-
      000A41 90 5A            [ 2] 1691 	decw y  
      000A43 90 F7            [ 1] 1692 	ld (y),a
      000A45                       1693 9$:	
      000A45 96               [ 1] 1694 	ldw x,sp 
      000A46 1C 00 0A         [ 2] 1695 	addw x,#STREND  
      000A49 90 89            [ 2] 1696 	pushw y
      000A4B 72 F0 01         [ 2] 1697 	subw x,(1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A4E                       1698 	_drop 2 
      000A4E 5B 02            [ 2]    1     addw sp,#2 
      000A50                       1699 10$:
      000A50 9F               [ 1] 1700 	ld a,xl 
      000A51 C1 00 24         [ 1] 1701 	cp a,tab_width
      000A54 24 08            [ 1] 1702 	jruge 12$
      000A56 A6 20            [ 1] 1703 	ld a,#SPACE 
      000A58 CD 02 A0         [ 4] 1704 	call putc 
      000A5B 5C               [ 2] 1705 	incw x 
      000A5C 20 F2            [ 2] 1706 	jra 10$ 
      000A5E                       1707 12$:
      000A5E 93               [ 1] 1708     ldw x,y 
      000A5F CD 02 B3         [ 4] 1709 	call puts  
      000A62                       1710 	_drop VSIZE 
      000A62 5B 0A            [ 2]    1     addw sp,#VSIZE 
      000A64 81               [ 4] 1711 	ret 
                                   1712 
                                   1713 ;------------------------------------
                                   1714 ; convert integer in acc24 to string
                                   1715 ; input:
                                   1716 ;   A	  	base
                                   1717 ;	acc24	integer to convert
                                   1718 ; output:
                                   1719 ;   X  		pointer to string
                                   1720 ;------------------------------------
                           000001  1721 	SIGN=1  ; integer sign 
                           000002  1722 	BASE=2  ; numeric base 
                           000002  1723 	VSIZE=2  ;locals size
      000A65                       1724 itoa:
      000A65 52 02            [ 2] 1725 	sub sp,#VSIZE
      000A67 6B 02            [ 1] 1726 	ld (BASE,sp), a  ; base
      000A69 0F 01            [ 1] 1727 	clr (SIGN,sp)    ; sign
      000A6B A1 0A            [ 1] 1728 	cp a,#10
      000A6D 26 0A            [ 1] 1729 	jrne 1$
                                   1730 	; base 10 string display with negative sign if bit 23==1
      000A6F 72 0F 00 0B 05   [ 2] 1731 	btjf acc24,#7,1$
      000A74 03 01            [ 1] 1732 	cpl (SIGN,sp)
      000A76 CD 0B 0E         [ 4] 1733 	call neg_acc24
      000A79                       1734 1$:
                                   1735 ; initialize string pointer 
      000A79 AE 17 5F         [ 2] 1736 	ldw x,#pad+PAD_SIZE-1
      000A7C 7F               [ 1] 1737 	clr (x)
      000A7D                       1738 itoa_loop:
      000A7D 7B 02            [ 1] 1739     ld a,(BASE,sp)
      000A7F CD 0A AC         [ 4] 1740     call divu24_8 ; acc24/A 
      000A82 AB 30            [ 1] 1741     add a,#'0  ; remainder of division
      000A84 A1 3A            [ 1] 1742     cp a,#'9+1
      000A86 2B 02            [ 1] 1743     jrmi 2$
      000A88 AB 07            [ 1] 1744     add a,#7 
      000A8A 5A               [ 2] 1745 2$: decw x
      000A8B F7               [ 1] 1746     ld (x),a
                                   1747 	; if acc24==0 conversion done
      000A8C C6 00 0B         [ 1] 1748 	ld a,acc24
      000A8F CA 00 0C         [ 1] 1749 	or a,acc16
      000A92 CA 00 0D         [ 1] 1750 	or a,acc8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A95 26 E6            [ 1] 1751     jrne itoa_loop
                                   1752 	;conversion done, next add '$' or '-' as required
      000A97 7B 02            [ 1] 1753 	ld a,(BASE,sp)
      000A99 A1 10            [ 1] 1754 	cp a,#16
      000A9B 27 08            [ 1] 1755 	jreq 8$
      000A9D 7B 01            [ 1] 1756 	ld a,(SIGN,sp)
      000A9F 27 08            [ 1] 1757     jreq 10$
      000AA1 A6 2D            [ 1] 1758     ld a,#'-
      000AA3 20 02            [ 2] 1759 	jra 9$ 
      000AA5 A6 24            [ 1] 1760 8$: ld a,#'$ 
      000AA7 5A               [ 2] 1761 9$: decw x
      000AA8 F7               [ 1] 1762     ld (x),a
      000AA9                       1763 10$:
      000AA9 5B 02            [ 2] 1764 	addw sp,#VSIZE
      000AAB 81               [ 4] 1765 	ret
                                   1766 
                                   1767 ;-------------------------------------
                                   1768 ; divide uint24_t by uint8_t
                                   1769 ; used to convert uint24_t to string
                                   1770 ; input:
                                   1771 ;	acc24	dividend
                                   1772 ;   A 		divisor
                                   1773 ; output:
                                   1774 ;   acc24	quotient
                                   1775 ;   A		remainder
                                   1776 ;------------------------------------- 
                                   1777 ; offset  on sp of arguments and locals
                           000001  1778 	U8   = 1   ; divisor on stack
                           000001  1779 	VSIZE =1
      000AAC                       1780 divu24_8:
      000AAC 89               [ 2] 1781 	pushw x ; save x
      000AAD 88               [ 1] 1782 	push a 
                                   1783 	; ld dividend UU:MM bytes in X
      000AAE C6 00 0B         [ 1] 1784 	ld a, acc24
      000AB1 95               [ 1] 1785 	ld xh,a
      000AB2 C6 00 0C         [ 1] 1786 	ld a,acc24+1
      000AB5 97               [ 1] 1787 	ld xl,a
      000AB6 7B 01            [ 1] 1788 	ld a,(U8,SP) ; divisor
      000AB8 62               [ 2] 1789 	div x,a ; UU:MM/U8
      000AB9 88               [ 1] 1790 	push a  ;save remainder
      000ABA 9E               [ 1] 1791 	ld a,xh
      000ABB C7 00 0B         [ 1] 1792 	ld acc24,a
      000ABE 9F               [ 1] 1793 	ld a,xl
      000ABF C7 00 0C         [ 1] 1794 	ld acc24+1,a
      000AC2 84               [ 1] 1795 	pop a
      000AC3 95               [ 1] 1796 	ld xh,a
      000AC4 C6 00 0D         [ 1] 1797 	ld a,acc24+2
      000AC7 97               [ 1] 1798 	ld xl,a
      000AC8 7B 01            [ 1] 1799 	ld a,(U8,sp) ; divisor
      000ACA 62               [ 2] 1800 	div x,a  ; R:LL/U8
      000ACB 6B 01            [ 1] 1801 	ld (U8,sp),a ; save remainder
      000ACD 9F               [ 1] 1802 	ld a,xl
      000ACE C7 00 0D         [ 1] 1803 	ld acc24+2,a
      000AD1 84               [ 1] 1804 	pop a
      000AD2 85               [ 2] 1805 	popw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000AD3 81               [ 4] 1806 	ret
                                   1807 
                                   1808 ;--------------------------------------
                                   1809 ; unsigned multiply uint24_t by uint8_t
                                   1810 ; use to convert numerical string to uint24_t
                                   1811 ; input:
                                   1812 ;	acc24	uint24_t 
                                   1813 ;   A		uint8_t
                                   1814 ; output:
                                   1815 ;   acc24   A*acc24
                                   1816 ;-------------------------------------
                                   1817 ; local variables offset  on sp
                           000003  1818 	U8   = 3   ; A pushed on stack
                           000002  1819 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1820 	OVFH = 1  ; multiplication overflow high byte
                           000003  1821 	VSIZE = 3
      000AD4                       1822 mulu24_8:
      000AD4 89               [ 2] 1823 	pushw x    ; save X
                                   1824 	; local variables
      000AD5 88               [ 1] 1825 	push a     ; U8
      000AD6 5F               [ 1] 1826 	clrw x     ; initialize overflow to 0
      000AD7 89               [ 2] 1827 	pushw x    ; multiplication overflow
                                   1828 ; multiply low byte.
      000AD8 C6 00 0D         [ 1] 1829 	ld a,acc24+2
      000ADB 97               [ 1] 1830 	ld xl,a
      000ADC 7B 03            [ 1] 1831 	ld a,(U8,sp)
      000ADE 42               [ 4] 1832 	mul x,a
      000ADF 9F               [ 1] 1833 	ld a,xl
      000AE0 C7 00 0D         [ 1] 1834 	ld acc24+2,a
      000AE3 9E               [ 1] 1835 	ld a, xh
      000AE4 6B 02            [ 1] 1836 	ld (OVFL,sp),a
                                   1837 ; multipy middle byte
      000AE6 C6 00 0C         [ 1] 1838 	ld a,acc24+1
      000AE9 97               [ 1] 1839 	ld xl,a
      000AEA 7B 03            [ 1] 1840 	ld a, (U8,sp)
      000AEC 42               [ 4] 1841 	mul x,a
                                   1842 ; add overflow to this partial product
      000AED 72 FB 01         [ 2] 1843 	addw x,(OVFH,sp)
      000AF0 9F               [ 1] 1844 	ld a,xl
      000AF1 C7 00 0C         [ 1] 1845 	ld acc24+1,a
      000AF4 4F               [ 1] 1846 	clr a
      000AF5 A9 00            [ 1] 1847 	adc a,#0
      000AF7 6B 01            [ 1] 1848 	ld (OVFH,sp),a
      000AF9 9E               [ 1] 1849 	ld a,xh
      000AFA 6B 02            [ 1] 1850 	ld (OVFL,sp),a
                                   1851 ; multiply most signficant byte	
      000AFC C6 00 0B         [ 1] 1852 	ld a, acc24
      000AFF 97               [ 1] 1853 	ld xl, a
      000B00 7B 03            [ 1] 1854 	ld a, (U8,sp)
      000B02 42               [ 4] 1855 	mul x,a
      000B03 72 FB 01         [ 2] 1856 	addw x, (OVFH,sp)
      000B06 9F               [ 1] 1857 	ld a, xl
      000B07 C7 00 0B         [ 1] 1858 	ld acc24,a
      000B0A 5B 03            [ 2] 1859     addw sp,#VSIZE
      000B0C 85               [ 2] 1860 	popw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000B0D 81               [ 4] 1861 	ret
                                   1862 
                                   1863 ;------------------------------------
                                   1864 ;  two's complement acc24
                                   1865 ;  input:
                                   1866 ;		acc24 variable
                                   1867 ;  output:
                                   1868 ;		acc24 variable
                                   1869 ;-------------------------------------
      000B0E                       1870 neg_acc24:
      000B0E 72 53 00 0D      [ 1] 1871 	cpl acc24+2
      000B12 72 53 00 0C      [ 1] 1872 	cpl acc24+1
      000B16 72 53 00 0B      [ 1] 1873 	cpl acc24
      000B1A A6 01            [ 1] 1874 	ld a,#1
      000B1C CB 00 0D         [ 1] 1875 	add a,acc24+2
      000B1F C7 00 0D         [ 1] 1876 	ld acc24+2,a
      000B22 4F               [ 1] 1877 	clr a
      000B23 C9 00 0C         [ 1] 1878 	adc a,acc24+1
      000B26 C7 00 0C         [ 1] 1879 	ld acc24+1,a 
      000B29 4F               [ 1] 1880 	clr a 
      000B2A C9 00 0B         [ 1] 1881 	adc a,acc24 
      000B2D C7 00 0B         [ 1] 1882 	ld acc24,a 
      000B30 81               [ 4] 1883 	ret
                                   1884 
                                   1885 
                                   1886 ;------------------------------------
                                   1887 ; read a line of text from terminal
                                   1888 ; input:
                                   1889 ;	none
                                   1890 ; local variable on stack:
                                   1891 ;	LL  line length
                                   1892 ;   RXCHAR last received character 
                                   1893 ; output:
                                   1894 ;   text in tib  buffer
                                   1895 ;   count  line length 
                                   1896 ;------------------------------------
                                   1897 	; local variables
                           000001  1898 	LL_HB=1
                           000001  1899 	RXCHAR = 1 ; last char received
                           000002  1900 	LL = 2  ; accepted line length
                           000002  1901 	VSIZE=2 
      000B31                       1902 readln:
      000B31 4B 00            [ 1] 1903 	push #0
      000B33 4B 00            [ 1] 1904 	push #0  
      000B35 90 AE 16 90      [ 2] 1905  	ldw y,#tib ; input buffer
      000B39                       1906 readln_loop:
      000B39 CD 02 A9         [ 4] 1907 	call getc
      000B3C 6B 01            [ 1] 1908 	ld (RXCHAR,sp),a
      000B3E A1 0D            [ 1] 1909 	cp a,#CR
      000B40 26 03            [ 1] 1910 	jrne 1$
      000B42 CC 0B AE         [ 2] 1911 	jp readln_quit
      000B45 A1 0A            [ 1] 1912 1$:	cp a,#LF 
      000B47 27 65            [ 1] 1913 	jreq readln_quit
      000B49 A1 08            [ 1] 1914 	cp a,#BS
      000B4B 27 3D            [ 1] 1915 	jreq del_back
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B4D A1 04            [ 1] 1916 	cp a,#CTRL_D
      000B4F 27 2A            [ 1] 1917 	jreq del_ln
      000B51 A1 12            [ 1] 1918 	cp a,#CTRL_R 
      000B53 27 06            [ 1] 1919 	jreq reprint 
                                   1920 ;	cp a,#'[
                                   1921 ;	jreq ansi_seq
      000B55                       1922 final_test:
      000B55 A1 20            [ 1] 1923 	cp a,#SPACE
      000B57 2A 40            [ 1] 1924 	jrpl accept_char
      000B59 20 DE            [ 2] 1925 	jra readln_loop
      000B5B                       1926 ansi_seq:
                                   1927 ;	call getc
                                   1928 ;	cp a,#'C 
                                   1929 ;	jreq rigth_arrow
                                   1930 ;	cp a,#'D 
                                   1931 ;	jreq left_arrow 
                                   1932 ;	jra final_test
      000B5B                       1933 right_arrow:
                                   1934 ;	ld a,#BSP 
                                   1935 ;	call putc 
                                   1936 ;	jra realn_loop 
      000B5B                       1937 left_arrow:
                                   1938 ;	jra readln_loop
      000B5B                       1939 reprint: 
      000B5B 0D 02            [ 1] 1940 	tnz (LL,sp)
      000B5D 26 DA            [ 1] 1941 	jrne readln_loop
      000B5F AE 16 90         [ 2] 1942 	ldw x,#tib 
      000B62 CD 03 92         [ 4] 1943 	call strlen 
      000B65 90 AE 16 90      [ 2] 1944 	ldw y,#tib 
      000B69 9F               [ 1] 1945 	ld a,xl
      000B6A 27 CD            [ 1] 1946 	jreq readln_loop
      000B6C 6B 02            [ 1] 1947 	ld (LL,sp),a 
      000B6E AE 16 90         [ 2] 1948 	ldw x,#tib 
      000B71 CD 02 B3         [ 4] 1949 	call puts
      000B74 0F 01            [ 1] 1950 	clr (LL_HB,sp)
      000B76 72 F9 01         [ 2] 1951 	addw y,(LL_HB,sp)
      000B79 20 BE            [ 2] 1952 	jra readln_loop 
      000B7B                       1953 del_ln:
      000B7B 7B 02            [ 1] 1954 	ld a,(LL,sp)
      000B7D CD 02 CD         [ 4] 1955 	call delete
      000B80 90 AE 16 90      [ 2] 1956 	ldw y,#tib
      000B84 90 7F            [ 1] 1957 	clr (y)
      000B86 0F 02            [ 1] 1958 	clr (LL,sp)
      000B88 20 AF            [ 2] 1959 	jra readln_loop
      000B8A                       1960 del_back:
      000B8A 0D 02            [ 1] 1961     tnz (LL,sp)
      000B8C 27 AB            [ 1] 1962     jreq readln_loop
      000B8E 0A 02            [ 1] 1963     dec (LL,sp)
      000B90 90 5A            [ 2] 1964     decw y
      000B92 90 7F            [ 1] 1965     clr  (y)
      000B94 CD 02 BD         [ 4] 1966     call bksp 
      000B97 20 A0            [ 2] 1967     jra readln_loop	
      000B99                       1968 accept_char:
      000B99 A6 4F            [ 1] 1969 	ld a,#TIB_SIZE-1
      000B9B 11 02            [ 1] 1970 	cp a, (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000B9D 27 9A            [ 1] 1971 	jreq readln_loop
      000B9F 7B 01            [ 1] 1972 	ld a,(RXCHAR,sp)
      000BA1 90 F7            [ 1] 1973 	ld (y),a
      000BA3 0C 02            [ 1] 1974 	inc (LL,sp)
      000BA5 90 5C            [ 2] 1975 	incw y
      000BA7 90 7F            [ 1] 1976 	clr (y)
      000BA9 CD 02 A0         [ 4] 1977 	call putc 
      000BAC 20 8B            [ 2] 1978 	jra readln_loop
      000BAE                       1979 readln_quit:
      000BAE 90 7F            [ 1] 1980 	clr (y)
      000BB0 7B 02            [ 1] 1981 	ld a,(LL,sp)
      000BB2 C7 00 03         [ 1] 1982 	ld count,a 
      000BB5 A6 0D            [ 1] 1983 	ld a,#CR
      000BB7 CD 02 A0         [ 4] 1984 	call putc
      000BBA                       1985 	_drop VSIZE 
      000BBA 5B 02            [ 2]    1     addw sp,#VSIZE 
      000BBC 81               [ 4] 1986 	ret
                                   1987 
                                   1988 
                                   1989 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1990 ;; compiler routines        ;;
                                   1991 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1992 ;------------------------------------
                                   1993 ; parse quoted string 
                                   1994 ; input:
                                   1995 ;   Y 	pointer to tib 
                                   1996 ;   X   pointer to output buffer 
                                   1997 ; output:
                                   1998 ;	buffer   parsed string
                                   1999 ;------------------------------------
                           000001  2000 	PREV = 1
                           000002  2001 	CURR =2
                           000002  2002 	VSIZE=2
      000BBD                       2003 parse_quote: 
      000BBD                       2004 	_vars VSIZE 
      000BBD 52 02            [ 2]    1     sub sp,#VSIZE 
      000BBF 4F               [ 1] 2005 	clr a
      000BC0 6B 01            [ 1] 2006 1$:	ld (PREV,sp),a 
      000BC2                       2007 2$:	
      000BC2 91 D6 00         [ 4] 2008 	ld a,([in.w],y)
      000BC5 27 24            [ 1] 2009 	jreq 6$
      000BC7 72 5C 00 01      [ 1] 2010 	inc in 
      000BCB 6B 02            [ 1] 2011 	ld (CURR,sp),a 
      000BCD A6 5C            [ 1] 2012 	ld a,#'\
      000BCF 11 01            [ 1] 2013 	cp a, (PREV,sp)
      000BD1 26 0A            [ 1] 2014 	jrne 3$
      000BD3 0F 01            [ 1] 2015 	clr (PREV,sp)
      000BD5 7B 02            [ 1] 2016 	ld a,(CURR,sp)
      000BD7 AD 1C            [ 4] 2017 	callr convert_escape
      000BD9 F7               [ 1] 2018 	ld (x),a 
      000BDA 5C               [ 2] 2019 	incw x 
      000BDB 20 E5            [ 2] 2020 	jra 2$
      000BDD                       2021 3$:
      000BDD 7B 02            [ 1] 2022 	ld a,(CURR,sp)
      000BDF A1 5C            [ 1] 2023 	cp a,#'\'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000BE1 27 DD            [ 1] 2024 	jreq 1$
      000BE3 A1 22            [ 1] 2025 	cp a,#'"
      000BE5 27 04            [ 1] 2026 	jreq 6$ 
      000BE7 F7               [ 1] 2027 	ld (x),a 
      000BE8 5C               [ 2] 2028 	incw x 
      000BE9 20 D7            [ 2] 2029 	jra 2$
      000BEB                       2030 6$:
      000BEB 7F               [ 1] 2031 	clr (x)
      000BEC 5C               [ 2] 2032 	incw x 
      000BED 90 93            [ 1] 2033 	ldw y,x 
      000BEF 5F               [ 1] 2034 	clrw x 
      000BF0 A6 02            [ 1] 2035 	ld a,#TK_QSTR  
      000BF2                       2036 	_drop VSIZE
      000BF2 5B 02            [ 2]    1     addw sp,#VSIZE 
      000BF4 81               [ 4] 2037 	ret 
                                   2038 
                                   2039 ;---------------------------------------
                                   2040 ; called by parse_quote
                                   2041 ; subtitute escaped character 
                                   2042 ; by their ASCII value .
                                   2043 ; input:
                                   2044 ;   A  character following '\'
                                   2045 ; output:
                                   2046 ;   A  substitued char or same if not valid.
                                   2047 ;---------------------------------------
      000BF5                       2048 convert_escape:
      000BF5 89               [ 2] 2049 	pushw x 
      000BF6 AE 0C 0A         [ 2] 2050 	ldw x,#escaped 
      000BF9 F1               [ 1] 2051 1$:	cp a,(x)
      000BFA 27 06            [ 1] 2052 	jreq 2$
      000BFC 7D               [ 1] 2053 	tnz (x)
      000BFD 27 09            [ 1] 2054 	jreq 3$
      000BFF 5C               [ 2] 2055 	incw x 
      000C00 20 F7            [ 2] 2056 	jra 1$
      000C02 1D 0C 0A         [ 2] 2057 2$: subw x,#escaped 
      000C05 9F               [ 1] 2058 	ld a,xl 
      000C06 AB 07            [ 1] 2059 	add a,#7
      000C08 85               [ 2] 2060 3$:	popw x 
      000C09 81               [ 4] 2061 	ret 
                                   2062 
      000C0A 61 62 74 6E 76 66 72  2063 escaped: .asciz "abtnvfr"
             00
                                   2064 
                                   2065 ;-------------------------
                                   2066 ; integer parser 
                                   2067 ; input:
                                   2068 ;   X 		point to output buffer  
                                   2069 ;   Y 		point to tib 
                                   2070 ;   A 	    first digit|'$' 
                                   2071 ; output:  
                                   2072 ;   pad     number string 
                                   2073 ;   X 		integer 
                                   2074 ;   A 		TK_INTGR
                                   2075 ;-------------------------
                           000001  2076 	BASE=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                           000002  2077 	TCHAR=2 
                           000003  2078 	XSAVE=3
                           000004  2079 	VSIZE=4 
      000C12                       2080 parse_integer: ; { -- n }
      000C12 89               [ 2] 2081 	pushw x 	
      000C13 4B 00            [ 1] 2082 	push #0 ; TCHAR
      000C15 4B 0A            [ 1] 2083 	push #10 ; BASE=10
      000C17 A1 24            [ 1] 2084 	cp a,#'$
      000C19 26 04            [ 1] 2085 	jrne 2$ 
      000C1B                       2086     _drop #1
      000C1B 5B 01            [ 2]    1     addw sp,##1 
      000C1D 4B 10            [ 1] 2087 	push #16  ; BASE=16
      000C1F F7               [ 1] 2088 2$:	ld (x),a 
      000C20 5C               [ 2] 2089 	incw x 
      000C21 91 D6 00         [ 4] 2090 	ld a,([in.w],y)
      000C24 72 5C 00 01      [ 1] 2091 	inc in 
      000C28 CD 0E A5         [ 4] 2092 	call to_upper 
      000C2B 6B 02            [ 1] 2093 	ld (TCHAR,sp),a 
      000C2D CD 05 7C         [ 4] 2094 	call is_digit 
      000C30 25 ED            [ 1] 2095 	jrc 2$
      000C32 A6 10            [ 1] 2096 	ld a,#16 
      000C34 11 01            [ 1] 2097 	cp a,(BASE,sp)
      000C36 26 0A            [ 1] 2098 	jrne 3$ 
      000C38 7B 02            [ 1] 2099 	ld a,(TCHAR,sp)
      000C3A A1 41            [ 1] 2100 	cp a,#'A 
      000C3C 2B 04            [ 1] 2101 	jrmi 3$ 
      000C3E A1 47            [ 1] 2102 	cp a,#'G 
      000C40 2B DD            [ 1] 2103 	jrmi 2$ 
      000C42 72 5A 00 01      [ 1] 2104 3$: dec in 	
      000C46 7F               [ 1] 2105     clr (x)
      000C47 1E 03            [ 2] 2106 	ldw x,(XSAVE,sp)
      000C49 CD 0E B1         [ 4] 2107 	call atoi24
      000C4C 90 93            [ 1] 2108 	ldw y,x 
      000C4E CE 00 0C         [ 2] 2109 	ldw x,acc16 
      000C51 A6 84            [ 1] 2110 	ld a,#TK_INTGR
      000C53 90 FF            [ 2] 2111 	ldw (y),x 
      000C55 72 A9 00 02      [ 2] 2112 	addw y,#2
      000C59                       2113 	_drop VSIZE  
      000C59 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C5B 81               [ 4] 2114 	ret 	
                                   2115 
                                   2116 ;-------------------------
                                   2117 ; binary integer parser
                                   2118 ; build integer in acc24  
                                   2119 ; input:
                                   2120 ;   X 		point to output buffer  
                                   2121 ;   Y 		point to tib 
                                   2122 ;   A 	    '&' 
                                   2123 ; output:  
                                   2124 ;   buffer  TK_INTGR integer  
                                   2125 ;   X 		int16 
                                   2126 ;   A 		TK_INTGR
                                   2127 ;   acc24    int24 
                                   2128 ;-------------------------
                           000001  2129 	BINARY=1 ; 24 bits integer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                           000003  2130 	VSIZE=3
      000C5C                       2131 parse_binary: ; { -- n }
      000C5C 4B 00            [ 1] 2132 	push #0
      000C5E 4B 00            [ 1] 2133 	push #0
      000C60 4B 00            [ 1] 2134 	push #0
      000C62                       2135 2$:	
      000C62 91 D6 00         [ 4] 2136 	ld a,([in.w],y)
      000C65 72 5C 00 01      [ 1] 2137 	inc in 
      000C69 A1 30            [ 1] 2138 	cp a,#'0 
      000C6B 27 06            [ 1] 2139 	jreq 3$
      000C6D A1 31            [ 1] 2140 	cp a,#'1 
      000C6F 27 02            [ 1] 2141 	jreq 3$ 
      000C71 20 0B            [ 2] 2142 	jra bin_exit 
      000C73 A0 30            [ 1] 2143 3$: sub a,#'0 
      000C75 46               [ 1] 2144 	rrc a
      000C76 09 03            [ 1] 2145 	rlc (BINARY+2,sp) 
      000C78 09 02            [ 1] 2146 	rlc (BINARY+1,sp)
      000C7A 09 01            [ 1] 2147 	rlc (BINARY,sp) 
      000C7C 20 E4            [ 2] 2148 	jra 2$  
      000C7E                       2149 bin_exit:
      000C7E 72 5A 00 01      [ 1] 2150 	dec in 
      000C82 90 93            [ 1] 2151 	ldw y,x
      000C84 7B 01            [ 1] 2152 	ld a,(BINARY,sp)
      000C86 C7 00 0B         [ 1] 2153 	ld acc24,a 
      000C89 1E 02            [ 2] 2154 	ldw x,(BINARY+1,sp)
      000C8B CF 00 0C         [ 2] 2155 	ldw acc16,x
      000C8E 90 FF            [ 2] 2156 	ldw (y),x 
      000C90 72 A9 00 02      [ 2] 2157 	addw y,#2  
      000C94 A6 84            [ 1] 2158 	ld a,#TK_INTGR 	
      000C96                       2159 	_drop VSIZE 
      000C96 5B 03            [ 2]    1     addw sp,#VSIZE 
      000C98 81               [ 4] 2160 	ret
                                   2161 
                                   2162 ;---------------------------
                                   2163 ;  token begin with a letter,
                                   2164 ;  is keyword or variable. 	
                                   2165 ; input:
                                   2166 ;   X 		point to pad 
                                   2167 ;   Y 		point to text
                                   2168 ;   A 	    first letter  
                                   2169 ; output:
                                   2170 ;   X		exec_addr|var_addr 
                                   2171 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                   2172 ;   pad 	keyword|var_name  
                                   2173 ;--------------------------  
                           000001  2174 	XFIRST=1
                           000002  2175 	VSIZE=2
      000C99                       2176 parse_keyword: 
      000C99 89               [ 2] 2177 	pushw x 
      000C9A                       2178 kw_loop:	
      000C9A CD 0E A5         [ 4] 2179 	call to_upper 
      000C9D F7               [ 1] 2180 	ld (x),a 
      000C9E 5C               [ 2] 2181 	incw x 
      000C9F 91 D6 00         [ 4] 2182 	ld a,([in.w],y)
      000CA2 72 5C 00 01      [ 1] 2183 	inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000CA6 CD 05 6B         [ 4] 2184 	call is_alpha 
      000CA9 25 EF            [ 1] 2185 	jrc kw_loop
      000CAB 72 5A 00 01      [ 1] 2186 	dec in   
      000CAF 7F               [ 1] 2187 1$: clr (x)
      000CB0 1E 01            [ 2] 2188 	ldw x,(XFIRST,sp) 
      000CB2 E6 01            [ 1] 2189 	ld a,(1,x)
      000CB4 26 13            [ 1] 2190 	jrne 2$
                                   2191 ; one letter variable name 
      000CB6 F6               [ 1] 2192 	ld a,(x) 
      000CB7 A0 41            [ 1] 2193 	sub a,#'A 
      000CB9 48               [ 1] 2194 	sll a 
      000CBA 88               [ 1] 2195 	push a 
      000CBB 4B 00            [ 1] 2196 	push #0
      000CBD AE 00 26         [ 2] 2197 	ldw x,#vars 
      000CC0 72 FB 01         [ 2] 2198 	addw x,(1,sp) ; X=var address 
      000CC3                       2199 	_drop 2 
      000CC3 5B 02            [ 2]    1     addw sp,#2 
      000CC5 A6 85            [ 1] 2200 	ld a,#TK_VAR 
      000CC7 20 0E            [ 2] 2201 	jra 4$ 
      000CC9                       2202 2$: ; check for keyword, otherwise syntax error.
      000CC9                       2203 	_ldx_dict kword_dict ; dictionary entry point
      000CC9 AE 26 BB         [ 2]    1     ldw x,#kword_dict+2
      000CCC 16 01            [ 2] 2204 	ldw y,(XFIRST,sp) ; name to search for
      000CCE CD 10 0B         [ 4] 2205 	call search_dict
      000CD1 4D               [ 1] 2206 	tnz a
      000CD2 26 03            [ 1] 2207 	jrne 4$ 
      000CD4 CC 08 71         [ 2] 2208 	jp syntax_error
      000CD7                       2209 4$:	
      000CD7 16 01            [ 2] 2210 	ldw y,(XFIRST,sp)
      000CD9 90 F7            [ 1] 2211 	ld (y),a 
      000CDB 90 5C            [ 2] 2212 	incw y 
      000CDD 90 FF            [ 2] 2213 	ldw (y),x
      000CDF 72 A9 00 02      [ 2] 2214 	addw y,#2  
      000CE3                       2215 	_drop VSIZE 
      000CE3 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CE5 81               [ 4] 2216 	ret  	
                                   2217 
                                   2218 
                                   2219 ;------------------------------------
                                   2220 ; scan text for next token
                                   2221 ; input: 
                                   2222 ;	X 		pointer to buffer where 
                                   2223 ;	        token id and value are copied 
                                   2224 ; use:
                                   2225 ;	Y   pointer to text in tib 
                                   2226 ; output:
                                   2227 ;   A       token attribute 
                                   2228 ;   X 		token value
                                   2229 ;   Y       updated position in output buffer   
                                   2230 ;------------------------------------
                                   2231 	; use to check special character 
                                   2232 	.macro _case c t  
                                   2233 	ld a,#c 
                                   2234 	cp a,(TCHAR,sp) 
                                   2235 	jrne t
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2236 	.endm 
                                   2237 
                           000001  2238 	TCHAR=1
                           000002  2239 	ATTRIB=2
                           000002  2240 	VSIZE=2
      000CE6                       2241 get_token: 
      000CE6                       2242 	_vars VSIZE
      000CE6 52 02            [ 2]    1     sub sp,#VSIZE 
                                   2243 ;	ld a,in 
                                   2244 ;	sub a,count
                                   2245 ;   jrmi 0$
                                   2246 ;	clr a 
                                   2247 ;	ret 
      000CE8                       2248 0$: 
      000CE8 90 AE 16 90      [ 2] 2249 	ldw y,#tib    	
      000CEC A6 20            [ 1] 2250 	ld a,#SPACE
      000CEE CD 0F 1B         [ 4] 2251 	call skip
      000CF1 55 00 01 00 02   [ 1] 2252 	mov in.saved,in 
      000CF6 91 D6 00         [ 4] 2253 	ld a,([in.w],y)
      000CF9 26 05            [ 1] 2254 	jrne 1$
      000CFB 90 93            [ 1] 2255 	ldw y,x 
      000CFD CC 0E A2         [ 2] 2256 	jp token_exit ; end of line 
      000D00 72 5C 00 01      [ 1] 2257 1$:	inc in 
      000D04 CD 0E A5         [ 4] 2258 	call to_upper 
      000D07 6B 01            [ 1] 2259 	ld (TCHAR,sp),a 
                                   2260 ; check for quoted string
      000D09                       2261 str_tst:  	
      000D09                       2262 	_case '"' nbr_tst
      000D09 A6 22            [ 1]    1 	ld a,#'"' 
      000D0B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D0D 26 0A            [ 1]    3 	jrne nbr_tst
      000D0F A6 02            [ 1] 2263 	ld a,#TK_QSTR
      000D11 F7               [ 1] 2264 	ld (x),a 
      000D12 5C               [ 2] 2265 	incw x 
      000D13 CD 0B BD         [ 4] 2266 	call parse_quote
      000D16 CC 0E A2         [ 2] 2267 	jp token_exit
      000D19                       2268 nbr_tst:
                                   2269 ; check for hexadecimal number 
      000D19 A6 24            [ 1] 2270 	ld a,#'$'
      000D1B 11 01            [ 1] 2271 	cp a,(TCHAR,sp) 
      000D1D 27 17            [ 1] 2272 	jreq 1$
                                   2273 ;check for binary number 
      000D1F A6 26            [ 1] 2274 	ld a,#'&
      000D21 11 01            [ 1] 2275 	cp a,(TCHAR,sp)
      000D23 26 0A            [ 1] 2276 	jrne 0$
      000D25 A6 84            [ 1] 2277 	ld a,#TK_INTGR
      000D27 F7               [ 1] 2278 	ld (x),a 
      000D28 5C               [ 2] 2279 	incw x 
      000D29 CD 0C 5C         [ 4] 2280 	call parse_binary ; expect binary integer 
      000D2C CC 0E A2         [ 2] 2281 	jp token_exit 
                                   2282 ; check for decimal number 	
      000D2F 7B 01            [ 1] 2283 0$:	ld a,(TCHAR,sp)
      000D31 CD 05 7C         [ 4] 2284 	call is_digit
      000D34 24 0C            [ 1] 2285 	jrnc 3$
      000D36 A6 84            [ 1] 2286 1$:	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D38 F7               [ 1] 2287 	ld (x),a 
      000D39 5C               [ 2] 2288 	incw x 
      000D3A 7B 01            [ 1] 2289 	ld a,(TCHAR,sp)
      000D3C CD 0C 12         [ 4] 2290 	call parse_integer 
      000D3F CC 0E A2         [ 2] 2291 	jp token_exit 
      000D42                       2292 3$: 
      000D42                       2293 	_case '(' bkslsh_tst 
      000D42 A6 28            [ 1]    1 	ld a,#'(' 
      000D44 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D46 26 05            [ 1]    3 	jrne bkslsh_tst
      000D48 A6 07            [ 1] 2294 	ld a,#TK_LPAREN
      000D4A CC 0E 9E         [ 2] 2295 	jp token_char   	
      000D4D                       2296 bkslsh_tst: ; character token 
      000D4D                       2297 	_case '\',rparnt_tst
      000D4D A6 5C            [ 1]    1 	ld a,#'\' 
      000D4F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D51 26 16            [ 1]    3 	jrne rparnt_tst
      000D53 A6 03            [ 1] 2298 	ld a,#TK_CHAR 
      000D55 F7               [ 1] 2299 	ld (x),a 
      000D56 5C               [ 2] 2300 	incw x 
      000D57 91 D6 00         [ 4] 2301 	ld a,([in.w],y)
      000D5A F7               [ 1] 2302 	ld (x),a 
      000D5B 5C               [ 2] 2303 	incw x
      000D5C 90 93            [ 1] 2304 	ldw y,x 	 
      000D5E 72 5C 00 01      [ 1] 2305 	inc in  
      000D62 5F               [ 1] 2306 	clrw x 
      000D63 97               [ 1] 2307 	ld xl,a 
      000D64 A6 03            [ 1] 2308 	ld a,#TK_CHAR 
      000D66 CC 0E A2         [ 2] 2309 	jp token_exit 
      000D69                       2310 rparnt_tst:		
      000D69                       2311 	_case ')' colon_tst 
      000D69 A6 29            [ 1]    1 	ld a,#')' 
      000D6B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D6D 26 05            [ 1]    3 	jrne colon_tst
      000D6F A6 08            [ 1] 2312 	ld a,#TK_RPAREN 
      000D71 CC 0E 9E         [ 2] 2313 	jp token_char
      000D74                       2314 colon_tst:
      000D74                       2315 	_case ':' comma_tst 
      000D74 A6 3A            [ 1]    1 	ld a,#':' 
      000D76 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D78 26 05            [ 1]    3 	jrne comma_tst
      000D7A A6 01            [ 1] 2316 	ld a,#TK_COLON 
      000D7C CC 0E 9E         [ 2] 2317 	jp token_char  
      000D7F                       2318 comma_tst:
      000D7F                       2319 	_case COMMA sharp_tst 
      000D7F A6 2C            [ 1]    1 	ld a,#COMMA 
      000D81 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D83 26 05            [ 1]    3 	jrne sharp_tst
      000D85 A6 09            [ 1] 2320 	ld a,#TK_COMMA
      000D87 CC 0E 9E         [ 2] 2321 	jp token_char
      000D8A                       2322 sharp_tst:
      000D8A                       2323 	_case SHARP dash_tst 
      000D8A A6 23            [ 1]    1 	ld a,#SHARP 
      000D8C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D8E 26 05            [ 1]    3 	jrne dash_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000D90 A6 0A            [ 1] 2324 	ld a,#TK_SHARP
      000D92 CC 0E 9E         [ 2] 2325 	jp token_char  	 	 
      000D95                       2326 dash_tst: 	
      000D95                       2327 	_case '-' at_tst 
      000D95 A6 2D            [ 1]    1 	ld a,#'-' 
      000D97 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D99 26 05            [ 1]    3 	jrne at_tst
      000D9B A6 11            [ 1] 2328 	ld a,#TK_MINUS  
      000D9D CC 0E 9E         [ 2] 2329 	jp token_char 
      000DA0                       2330 at_tst:
      000DA0                       2331 	_case '@' qmark_tst 
      000DA0 A6 40            [ 1]    1 	ld a,#'@' 
      000DA2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DA4 26 05            [ 1]    3 	jrne qmark_tst
      000DA6 A6 06            [ 1] 2332 	ld a,#TK_ARRAY 
      000DA8 CC 0E 9E         [ 2] 2333 	jp token_char
      000DAB                       2334 qmark_tst:
      000DAB                       2335 	_case '?' tick_tst 
      000DAB A6 3F            [ 1]    1 	ld a,#'?' 
      000DAD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DAF 26 12            [ 1]    3 	jrne tick_tst
      000DB1 A6 80            [ 1] 2336 	ld a,#TK_CMD  
      000DB3 F7               [ 1] 2337 	ld (x),a 
      000DB4 5C               [ 2] 2338 	incw x 
      000DB5 90 93            [ 1] 2339 	ldw y,x 
      000DB7 AE 14 A3         [ 2] 2340 	ldw x,#print 
      000DBA 90 FF            [ 2] 2341 	ldw (y),x 
      000DBC 72 A9 00 02      [ 2] 2342 	addw y,#2
      000DC0 CC 0E A2         [ 2] 2343 	jp token_exit
      000DC3                       2344 tick_tst: ; comment 
      000DC3                       2345 	_case TICK plus_tst 
      000DC3 A6 27            [ 1]    1 	ld a,#TICK 
      000DC5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DC7 26 35            [ 1]    3 	jrne plus_tst
      000DC9 A6 80            [ 1] 2346 	ld a,#TK_CMD
      000DCB F7               [ 1] 2347 	ld (x),a 
      000DCC 5C               [ 2] 2348 	incw x
      000DCD 90 AE 15 A0      [ 2] 2349 	ldw y,#remark
      000DD1 FF               [ 2] 2350 	ldw (x),y 
      000DD2 1C 00 02         [ 2] 2351 	addw x,#2  
      000DD5                       2352 copy_comment:
      000DD5 90 AE 16 90      [ 2] 2353 	ldw y,#tib 
      000DD9 72 B9 00 00      [ 2] 2354 	addw y,in.w
      000DDD 90 89            [ 2] 2355 	pushw y
      000DDF CD 03 B0         [ 4] 2356 	call strcpy
      000DE2 72 F2 01         [ 2] 2357     subw y,(1,sp)
      000DE5 90 9F            [ 1] 2358 	ld a,yl 
      000DE7 CB 00 01         [ 1] 2359 	add a,in
      000DEA C7 00 01         [ 1] 2360 	ld in,a 
      000DED 1F 01            [ 2] 2361 	ldw (1,sp),x
      000DEF 72 F9 01         [ 2] 2362 	addw y,(1,sp)
      000DF2 90 5C            [ 2] 2363 	incw y 
      000DF4                       2364 	_drop 2 
      000DF4 5B 02            [ 2]    1     addw sp,#2 
      000DF6 AE 15 A0         [ 2] 2365 	ldw x,#remark 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000DF9 A6 80            [ 1] 2366 	ld a,#TK_CMD 
      000DFB CC 0E A2         [ 2] 2367 	jp token_exit 
      000DFE                       2368 plus_tst:
      000DFE                       2369 	_case '+' star_tst 
      000DFE A6 2B            [ 1]    1 	ld a,#'+' 
      000E00 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E02 26 05            [ 1]    3 	jrne star_tst
      000E04 A6 10            [ 1] 2370 	ld a,#TK_PLUS  
      000E06 CC 0E 9E         [ 2] 2371 	jp token_char 
      000E09                       2372 star_tst:
      000E09                       2373 	_case '*' slash_tst 
      000E09 A6 2A            [ 1]    1 	ld a,#'*' 
      000E0B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E0D 26 05            [ 1]    3 	jrne slash_tst
      000E0F A6 20            [ 1] 2374 	ld a,#TK_MULT 
      000E11 CC 0E 9E         [ 2] 2375 	jp token_char 
      000E14                       2376 slash_tst: 
      000E14                       2377 	_case '/' prcnt_tst 
      000E14 A6 2F            [ 1]    1 	ld a,#'/' 
      000E16 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E18 26 05            [ 1]    3 	jrne prcnt_tst
      000E1A A6 21            [ 1] 2378 	ld a,#TK_DIV 
      000E1C CC 0E 9E         [ 2] 2379 	jp token_char 
      000E1F                       2380 prcnt_tst:
      000E1F                       2381 	_case '%' eql_tst 
      000E1F A6 25            [ 1]    1 	ld a,#'%' 
      000E21 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E23 26 05            [ 1]    3 	jrne eql_tst
      000E25 A6 22            [ 1] 2382 	ld a,#TK_MOD
      000E27 CC 0E 9E         [ 2] 2383 	jp token_char  
                                   2384 ; 1 or 2 character tokens 	
      000E2A                       2385 eql_tst:
      000E2A                       2386 	_case '=' gt_tst 		
      000E2A A6 3D            [ 1]    1 	ld a,#'=' 
      000E2C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E2E 26 05            [ 1]    3 	jrne gt_tst
      000E30 A6 32            [ 1] 2387 	ld a,#TK_EQUAL
      000E32 CC 0E 9E         [ 2] 2388 	jp token_char 
      000E35                       2389 gt_tst:
      000E35                       2390 	_case '>' lt_tst 
      000E35 A6 3E            [ 1]    1 	ld a,#'>' 
      000E37 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E39 26 23            [ 1]    3 	jrne lt_tst
      000E3B A6 31            [ 1] 2391 	ld a,#TK_GT 
      000E3D 6B 02            [ 1] 2392 	ld (ATTRIB,sp),a 
      000E3F 72 5C 00 01      [ 1] 2393 	inc in 
      000E43 91 D6 00         [ 4] 2394 	ld a,([in.w],y)
      000E46 A1 3D            [ 1] 2395 	cp a,#'=
      000E48 26 04            [ 1] 2396 	jrne 1$
      000E4A A6 33            [ 1] 2397 	ld a,#TK_GE 
      000E4C 20 50            [ 2] 2398 	jra token_char  
      000E4E A1 3C            [ 1] 2399 1$: cp a,#'<
      000E50 26 04            [ 1] 2400 	jrne 2$
      000E52 A6 35            [ 1] 2401 	ld a,#TK_NE 
      000E54 20 48            [ 2] 2402 	jra token_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E56 72 5A 00 01      [ 1] 2403 2$: dec in
      000E5A 7B 02            [ 1] 2404 	ld a,(ATTRIB,sp)
      000E5C 20 40            [ 2] 2405 	jra token_char 	 
      000E5E                       2406 lt_tst:
      000E5E                       2407 	_case '<' other
      000E5E A6 3C            [ 1]    1 	ld a,#'<' 
      000E60 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E62 26 23            [ 1]    3 	jrne other
      000E64 A6 34            [ 1] 2408 	ld a,#TK_LT 
      000E66 6B 02            [ 1] 2409 	ld (ATTRIB,sp),a 
      000E68 72 5C 00 01      [ 1] 2410 	inc in 
      000E6C 91 D6 00         [ 4] 2411 	ld a,([in.w],y)
      000E6F A1 3D            [ 1] 2412 	cp a,#'=
      000E71 26 04            [ 1] 2413 	jrne 1$
      000E73 A6 36            [ 1] 2414 	ld a,#TK_LE 
      000E75 20 27            [ 2] 2415 	jra token_char 
      000E77 A1 3E            [ 1] 2416 1$: cp a,#'>
      000E79 26 04            [ 1] 2417 	jrne 2$
      000E7B A6 35            [ 1] 2418 	ld a,#TK_NE 
      000E7D 20 1F            [ 2] 2419 	jra token_char 
      000E7F 72 5A 00 01      [ 1] 2420 2$: dec in 
      000E83 7B 02            [ 1] 2421 	ld a,(ATTRIB,sp)
      000E85 20 17            [ 2] 2422 	jra token_char 	
      000E87                       2423 other: ; not a special character 	 
      000E87 7B 01            [ 1] 2424 	ld a,(TCHAR,sp)
      000E89 CD 05 6B         [ 4] 2425 	call is_alpha 
      000E8C 25 03            [ 1] 2426 	jrc 30$ 
      000E8E CC 08 71         [ 2] 2427 	jp syntax_error 
      000E91                       2428 30$: 
      000E91 CD 0C 99         [ 4] 2429 	call parse_keyword
      000E94 A3 15 A0         [ 2] 2430 	cpw x,#remark 
      000E97 26 09            [ 1] 2431 	jrne token_exit 
      000E99 90 93            [ 1] 2432 	ldw y,x 
      000E9B CC 0D D5         [ 2] 2433 	jp copy_comment 
      000E9E                       2434 token_char:
      000E9E F7               [ 1] 2435 	ld (x),a 
      000E9F 5C               [ 2] 2436 	incw x
      000EA0 90 93            [ 1] 2437 	ldw y,x 
      000EA2                       2438 token_exit:
      000EA2                       2439 	_drop VSIZE 
      000EA2 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EA4 81               [ 4] 2440 	ret
                                   2441 
                                   2442 
                                   2443 ;------------------------------------
                                   2444 ; convert alpha to uppercase
                                   2445 ; input:
                                   2446 ;    a  character to convert
                                   2447 ; output:
                                   2448 ;    a  uppercase character
                                   2449 ;------------------------------------
      000EA5                       2450 to_upper::
      000EA5 A1 61            [ 1] 2451 	cp a,#'a
      000EA7 2A 01            [ 1] 2452 	jrpl 1$
      000EA9 81               [ 4] 2453 0$:	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000EAA A1 7A            [ 1] 2454 1$: cp a,#'z	
      000EAC 22 FB            [ 1] 2455 	jrugt 0$
      000EAE A0 20            [ 1] 2456 	sub a,#32
      000EB0 81               [ 4] 2457 	ret
                                   2458 	
                                   2459 ;------------------------------------
                                   2460 ; convert pad content in integer
                                   2461 ; input:
                                   2462 ;    x		.asciz to convert
                                   2463 ; output:
                                   2464 ;    acc24      int24_t
                                   2465 ;------------------------------------
                                   2466 	; local variables
                           000001  2467 	SIGN=1 ; 1 byte, 
                           000002  2468 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2469 	TEMP=3 ; 1 byte, temporary storage
                           000003  2470 	VSIZE=3 ; 3 bytes reserved for local storage
      000EB1                       2471 atoi24:
      000EB1 89               [ 2] 2472 	pushw x 
      000EB2                       2473 	_vars VSIZE
      000EB2 52 03            [ 2]    1     sub sp,#VSIZE 
                                   2474 	; acc24=0 
      000EB4 72 5F 00 0B      [ 1] 2475 	clr acc24    
      000EB8 72 5F 00 0C      [ 1] 2476 	clr acc16
      000EBC 72 5F 00 0D      [ 1] 2477 	clr acc8 
      000EC0 0F 01            [ 1] 2478 	clr (SIGN,sp)
      000EC2 A6 0A            [ 1] 2479 	ld a,#10
      000EC4 6B 02            [ 1] 2480 	ld (BASE,sp),a ; default base decimal
      000EC6 F6               [ 1] 2481 	ld a,(x)
      000EC7 27 47            [ 1] 2482 	jreq 9$  ; completed if 0
      000EC9 A1 2D            [ 1] 2483 	cp a,#'-
      000ECB 26 04            [ 1] 2484 	jrne 1$
      000ECD 03 01            [ 1] 2485 	cpl (SIGN,sp)
      000ECF 20 08            [ 2] 2486 	jra 2$
      000ED1 A1 24            [ 1] 2487 1$: cp a,#'$
      000ED3 26 06            [ 1] 2488 	jrne 3$
      000ED5 A6 10            [ 1] 2489 	ld a,#16
      000ED7 6B 02            [ 1] 2490 	ld (BASE,sp),a
      000ED9 5C               [ 2] 2491 2$:	incw x
      000EDA F6               [ 1] 2492 	ld a,(x)
      000EDB                       2493 3$:	
      000EDB A1 61            [ 1] 2494 	cp a,#'a
      000EDD 2B 02            [ 1] 2495 	jrmi 4$
      000EDF A0 20            [ 1] 2496 	sub a,#32
      000EE1 A1 30            [ 1] 2497 4$:	cp a,#'0
      000EE3 2B 2B            [ 1] 2498 	jrmi 9$
      000EE5 A0 30            [ 1] 2499 	sub a,#'0
      000EE7 A1 0A            [ 1] 2500 	cp a,#10
      000EE9 2B 06            [ 1] 2501 	jrmi 5$
      000EEB A0 07            [ 1] 2502 	sub a,#7
      000EED 11 02            [ 1] 2503 	cp a,(BASE,sp)
      000EEF 2A 1F            [ 1] 2504 	jrpl 9$
      000EF1 6B 03            [ 1] 2505 5$:	ld (TEMP,sp),a
      000EF3 7B 02            [ 1] 2506 	ld a,(BASE,sp)
      000EF5 CD 0A D4         [ 4] 2507 	call mulu24_8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000EF8 7B 03            [ 1] 2508 	ld a,(TEMP,sp)
      000EFA CB 00 0D         [ 1] 2509 	add a,acc24+2
      000EFD C7 00 0D         [ 1] 2510 	ld acc24+2,a
      000F00 4F               [ 1] 2511 	clr a
      000F01 C9 00 0C         [ 1] 2512 	adc a,acc24+1
      000F04 C7 00 0C         [ 1] 2513 	ld acc24+1,a
      000F07 4F               [ 1] 2514 	clr a
      000F08 C9 00 0B         [ 1] 2515 	adc a,acc24
      000F0B C7 00 0B         [ 1] 2516 	ld acc24,a
      000F0E 20 C9            [ 2] 2517 	jra 2$
      000F10 0D 01            [ 1] 2518 9$:	tnz (SIGN,sp)
      000F12 27 03            [ 1] 2519     jreq atoi_exit
      000F14 CD 0B 0E         [ 4] 2520     call neg_acc24
      000F17                       2521 atoi_exit: 
      000F17                       2522 	_drop VSIZE
      000F17 5B 03            [ 2]    1     addw sp,#VSIZE 
      000F19 85               [ 2] 2523 	popw x ; restore x
      000F1A 81               [ 4] 2524 	ret
                                   2525 
                                   2526 
                                   2527 ;------------------------------------
                                   2528 ; skip character c in text starting from 'in'
                                   2529 ; input:
                                   2530 ;	 y 		point to text buffer
                                   2531 ;    a 		character to skip
                                   2532 ; output:  
                                   2533 ;	'in' ajusted to new position
                                   2534 ;------------------------------------
                           000001  2535 	C = 1 ; local var
      000F1B                       2536 skip:
      000F1B 88               [ 1] 2537 	push a
      000F1C 91 D6 00         [ 4] 2538 1$:	ld a,([in.w],y)
      000F1F 27 0A            [ 1] 2539 	jreq 2$
      000F21 11 01            [ 1] 2540 	cp a,(C,sp)
      000F23 26 06            [ 1] 2541 	jrne 2$
      000F25 72 5C 00 01      [ 1] 2542 	inc in
      000F29 20 F1            [ 2] 2543 	jra 1$
      000F2B                       2544 2$: _drop 1 
      000F2B 5B 01            [ 2]    1     addw sp,#1 
      000F2D 81               [ 4] 2545 	ret
                                   2546 	
                                   2547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2548 ;;   TINY BASIC  operators,
                                   2549 ;;   commands and functions 
                                   2550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2551 
                                   2552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2553 ;;  Arithmetic operators
                                   2554 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2555 
                                   2556 ;--------------------------------
                                   2557 ;  add 2 integers
                                   2558 ;  input:
                                   2559 ;    N1     on cstack 
                                   2560 ;    N2     on cstack 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2561 ;  output:
                                   2562 ;    X 		n2+n1 
                                   2563 ;--------------------------------
                                   2564 	;arugments on cstack 
      000F2E                       2565 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000F2E                       2566 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000F2E                       2567 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      000F2E                       2568 add:
      000F2E 1E 05            [ 2] 2569 	ldw x ,(N2,sp)
      000F30 72 FB 03         [ 2] 2570 	addw x,(N1,sp)
      000F33 1F 03            [ 2] 2571 	ldw (N1,sp),x 
      000F35 81               [ 4] 2572 	ret 
                                   2573 
                                   2574 ;--------------------------------
                                   2575 ;  substract 2 ntegers
                                   2576 ;  input:
                                   2577 ;    N1     on cstack 
                                   2578 ;    N2     on cstack 
                                   2579 ;  output:
                                   2580 ;    X 		n2+n1 
                                   2581 ;--------------------------------
      000F36                       2582 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000F36                       2583 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000F36                       2584 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      000F36                       2585 substract:
      000F36 1E 05            [ 2] 2586 	ldw x,(N2,sp)
      000F38 72 F0 03         [ 2] 2587 	subw x,(N1,sp)
      000F3B 81               [ 4] 2588 	ret 
                                   2589 
                                   2590 ;-------------------------------------
                                   2591 ; multiply 2 integers
                                   2592 ; product overflow is ignored unless
                                   2593 ; MATH_OVF assembler flag is set to 1
                                   2594 ; input:
                                   2595 ;  	N1      on cstack
                                   2596 ;   N2 		on cstack 
                                   2597 ; output:
                                   2598 ;	X        N1*N2 
                                   2599 ;-------------------------------------
                                   2600 	;arguments 
      000F3C                       2601 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      000F3C                       2602 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      000F3C                       2603 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      000F3C                       2604 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      000F3C                       2605 	_arg N2_LB 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                           000009     1     N2_LB=ARG_OFS+4 
                                   2606    ; local variables 
                           000001  2607 	SIGN=1
                           000002  2608 	PROD=2
                           000003  2609 	VSIZE=3
      000F3C                       2610 multiply:
      000F3C                       2611 	_vars VSIZE 
      000F3C 52 03            [ 2]    1     sub sp,#VSIZE 
      000F3E 0F 01            [ 1] 2612 	clr (SIGN,sp)
      000F40 1E 06            [ 2] 2613 	ldw x,(N1_HB,sp)
      000F42 9E               [ 1] 2614 	ld a,xh  
      000F43 A5 80            [ 1] 2615 	bcp a,#0x80 
      000F45 27 05            [ 1] 2616 	jreq 2$
      000F47 03 01            [ 1] 2617 	cpl (SIGN,sp)
      000F49 50               [ 2] 2618 	negw x 
      000F4A 1F 06            [ 2] 2619 	ldw (N1_HB,sp),x 
      000F4C 1E 08            [ 2] 2620 2$: ldw x,(N2_HB,sp)
      000F4E 9E               [ 1] 2621 	ld a,xh  
      000F4F A5 80            [ 1] 2622 	bcp a,#0x80 
      000F51 27 05            [ 1] 2623 	jreq 3$
      000F53 03 01            [ 1] 2624 	cpl (SIGN,sp)
      000F55 50               [ 2] 2625 	negw x 
      000F56 1F 08            [ 2] 2626 	ldw (N2_HB,sp),x 
                                   2627 ; N1_LB * N2_LB 	
      000F58 7B 07            [ 1] 2628 3$:	ld a,(N1_LB,sp)
      000F5A 97               [ 1] 2629 	ld xl,a 
      000F5B 7B 09            [ 1] 2630 	ld a,(N2_LB,sp) 
      000F5D 42               [ 4] 2631 	mul x,a 
                           000000  2632 .if MATH_OVF 	
                                   2633 	ld a,xh 
                                   2634 	bcp a,#0x80 
                                   2635 	jreq 4$ 
                                   2636 	ld a,#ERR_MATH_OVF 
                                   2637 	jp tb_error
                                   2638 .endif 	 
      000F5E 1F 02            [ 2] 2639 4$:	ldw (PROD,sp),x
                                   2640 ; N1_LB * N2_HB	 
      000F60 7B 07            [ 1] 2641 	ld a,(N1_LB,sp) 
      000F62 97               [ 1] 2642 	ld xl,a 
      000F63 7B 08            [ 1] 2643 	ld a,(N2_HB,sp)
      000F65 42               [ 4] 2644 	mul x,a
      000F66 9F               [ 1] 2645 	ld a,xl 
      000F67 1B 02            [ 1] 2646 	add a,(PROD,sp)
                           000000  2647 .if MATH_OVF 	
                                   2648 	bcp a,#0x80 
                                   2649 	jreq 5$ 
                                   2650 	ld a,#ERR_MATH_OVF 
                                   2651 	jp tb_error
                                   2652 .endif 	 
      000F69 6B 02            [ 1] 2653 5$:	ld (PROD,sp),a 
                                   2654 ; N1_HB * N2_LB 
      000F6B 7B 06            [ 1] 2655 	ld a,(N1_HB,sp)
      000F6D 97               [ 1] 2656 	ld xl,a 
      000F6E 7B 09            [ 1] 2657 	ld a,(N2_LB,sp)
      000F70 42               [ 4] 2658 	mul x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000F71 9F               [ 1] 2659 	ld a,xl 
      000F72 1B 02            [ 1] 2660 	add a,(PROD,sp)
                           000000  2661 .if MATH_OVF 	
                                   2662 	bcp a,#0x80 
                                   2663 	jreq 6$ 
                                   2664 	ld a,#ERR_MATH_OVF 
                                   2665 	jp tb_error
                                   2666 .endif 	 
      000F74 6B 02            [ 1] 2667 6$:	ld (PROD,sp),a 
                                   2668 ; N1_HB * N2_HB 	
                                   2669 ; it is pointless to multiply N1_HB*N2_HB 
                                   2670 ; as this product is over 65535 or 0 
                                   2671 ;
                                   2672 ; sign adjust product
      000F76 0D 01            [ 1] 2673 	tnz (SIGN,sp)
      000F78 27 05            [ 1] 2674 	jreq 7$
      000F7A 1E 02            [ 2] 2675 	ldw x, (PROD,sp)
      000F7C 50               [ 2] 2676 	negw x
      000F7D 1F 02            [ 2] 2677 	ldw (PROD,sp),x  
      000F7F                       2678 7$: 
      000F7F 1E 02            [ 2] 2679 	ldw x,(PROD,sp) 
      000F81                       2680 	_drop VSIZE 
      000F81 5B 03            [ 2]    1     addw sp,#VSIZE 
      000F83 81               [ 4] 2681 	ret
                                   2682 
                                   2683 ;----------------------------------
                                   2684 ;  euclidian divide n2/n1 
                                   2685 ; input:
                                   2686 ;    N2 	on cstack
                                   2687 ;    N1 	on cstack
                                   2688 ; output:
                                   2689 ;    X      n2/n1 
                                   2690 ;    Y      remainder 
                                   2691 ;----------------------------------
      000F84                       2692 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      000F84                       2693 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      000F84                       2694 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2695 	; local variables
                           000001  2696 	SQUOT=1 ; sign quotient
                           000002  2697 	SDIVD=2 ; sign dividend  
                           000002  2698 	VSIZE=2
      000F84                       2699 divide:
      000F84                       2700 	_vars VSIZE 
      000F84 52 02            [ 2]    1     sub sp,#VSIZE 
      000F86 0F 01            [ 1] 2701 	clr (SQUOT,sp)
      000F88 0F 02            [ 1] 2702 	clr (SDIVD,sp)
                                   2703 ; check for 0 divisor
      000F8A 1E 05            [ 2] 2704 	ldw x,(DIVISR,sp)
      000F8C 5D               [ 2] 2705 	tnzw x 
      000F8D 26 05            [ 1] 2706     jrne 0$
      000F8F A6 04            [ 1] 2707 	ld a,#ERR_DIV0 
      000F91 CC 08 73         [ 2] 2708 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2709 ; check divisor sign 	
      000F94 9E               [ 1] 2710 0$:	ld a,xh 
      000F95 A5 80            [ 1] 2711 	bcp a,#0x80 
      000F97 27 03            [ 1] 2712 	jreq 1$
      000F99 03 01            [ 1] 2713 	cpl (SQUOT,sp)
      000F9B 50               [ 2] 2714 	negw x 
      000F9C 1F 05            [ 2] 2715 1$:	ldw (DIVISR,sp),x
                                   2716 ; check dividend sign 	 
      000F9E 1E 07            [ 2] 2717     ldw x,(DIVIDND,sp)
      000FA0 9E               [ 1] 2718 	ld a,xh 
      000FA1 A5 80            [ 1] 2719 	bcp a,#0x80 
      000FA3 27 05            [ 1] 2720 	jreq 2$ 
      000FA5 03 01            [ 1] 2721 	cpl (SQUOT,sp)
      000FA7 03 02            [ 1] 2722 	cpl (SDIVD,sp)
      000FA9 50               [ 2] 2723 	negw x 
      000FAA 16 05            [ 2] 2724 2$:	ldw y,(DIVISR,sp)
      000FAC 65               [ 2] 2725 	divw x,y
      000FAD 90 CF 00 0C      [ 2] 2726 	ldw acc16,y 
                                   2727 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      000FB1 0D 02            [ 1] 2728 	tnz (SDIVD,sp)
      000FB3 27 0B            [ 1] 2729 	jreq 7$
      000FB5 90 5D            [ 2] 2730 	tnzw y 
      000FB7 27 07            [ 1] 2731 	jreq 7$
      000FB9 5C               [ 2] 2732 	incw x
      000FBA 16 05            [ 2] 2733 	ldw y,(DIVISR,sp)
      000FBC 72 B2 00 0C      [ 2] 2734 	subw y,acc16
      000FC0 0D 01            [ 1] 2735 7$: tnz (SQUOT,sp)
      000FC2 27 01            [ 1] 2736 	jreq 9$ 	 
      000FC4 50               [ 2] 2737 8$:	negw x 
      000FC5                       2738 9$: 
      000FC5                       2739 	_drop VSIZE 
      000FC5 5B 02            [ 2]    1     addw sp,#VSIZE 
      000FC7 81               [ 4] 2740 	ret 
                                   2741 
                                   2742 
                                   2743 ;----------------------------------
                                   2744 ;  remainder resulting from euclidian 
                                   2745 ;  division of n2/n1 
                                   2746 ; input:
                                   2747 ;   N1 		cstack 
                                   2748 ;   N2      cstack
                                   2749 ; output:
                                   2750 ;   X       N2%N1 
                                   2751 ;----------------------------------
                           000003  2752 	N1=3
                           000005  2753 	N2=5
                           000004  2754 	VSIZE=4
      000FC8                       2755 modulo:
      000FC8 1E 03            [ 2] 2756 	Ldw x,(N1,sp)
      000FCA 16 05            [ 2] 2757 	ldw y,(N2,sp)
      000FCC                       2758 	_vars VSIZE 
      000FCC 52 04            [ 2]    1     sub sp,#VSIZE 
      000FCE 1F 01            [ 2] 2759 	ldw (1,sp),x 
      000FD0 17 03            [ 2] 2760 	ldw (3,sp),y 
      000FD2 CD 0F 84         [ 4] 2761 	call divide 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000FD5 93               [ 1] 2762 	ldw x,y
      000FD6                       2763 	_drop VSIZE 
      000FD6 5B 04            [ 2]    1     addw sp,#VSIZE 
      000FD8 81               [ 4] 2764 	ret 
                                   2765 
                                   2766 
                                   2767 ;----------------------------------
                                   2768 ; search in kword_dict name
                                   2769 ; from its execution address 
                                   2770 ; input:
                                   2771 ;   X       	execution address 
                                   2772 ; output:
                                   2773 ;   X 			cstr*  | 0 
                                   2774 ;--------------------------------
                           000001  2775 	XADR=1 
                           000003  2776 	LINK=3 
                           000004  2777 	VSIZE=4
      000FD9                       2778 cmd_name:
      000FD9                       2779 	_vars VSIZE 
      000FD9 52 04            [ 2]    1     sub sp,#VSIZE 
      000FDB 72 5F 00 0C      [ 1] 2780 	clr acc16 
      000FDF 1F 01            [ 2] 2781 	ldw (XADR,sp),x  
      000FE1 AE 26 B9         [ 2] 2782 	ldw x,#kword_dict	
      000FE4 1F 03            [ 2] 2783 1$:	ldw (LINK,sp),x
      000FE6 E6 02            [ 1] 2784 	ld a,(2,x)
      000FE8 A4 0F            [ 1] 2785 	and a,#15 
      000FEA C7 00 0D         [ 1] 2786 	ld acc8,a 
      000FED 1C 00 03         [ 2] 2787 	addw x,#3
      000FF0 72 BB 00 0C      [ 2] 2788 	addw x,acc16
      000FF4 FE               [ 2] 2789 	ldw x,(x) ; execution address 
      000FF5 13 01            [ 2] 2790 	cpw x,(XADR,sp)
      000FF7 27 0A            [ 1] 2791 	jreq 2$
      000FF9 1E 03            [ 2] 2792 	ldw x,(LINK,sp)
      000FFB FE               [ 2] 2793 	ldw x,(x) 
      000FFC 1D 00 02         [ 2] 2794 	subw x,#2  
      000FFF 26 E3            [ 1] 2795 	jrne 1$
      001001 20 05            [ 2] 2796 	jra 9$
      001003 1E 03            [ 2] 2797 2$: ldw x,(LINK,sp)
      001005 1C 00 02         [ 2] 2798 	addw x,#2 	
      001008                       2799 9$:	_drop VSIZE
      001008 5B 04            [ 2]    1     addw sp,#VSIZE 
      00100A 81               [ 4] 2800 	ret
                                   2801 
                                   2802 
                                   2803 ;---------------------------------
                                   2804 ; dictionary search 
                                   2805 ; input:
                                   2806 ;	X 		dictionary entry point, name field  
                                   2807 ;   y		.asciz name to search 
                                   2808 ; output:
                                   2809 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2810 ;  X		execution address | 0 
                                   2811 ;---------------------------------
                           000001  2812 	NLEN=1 ; cmd length 
                           000002  2813 	XSAVE=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                           000004  2814 	YSAVE=4
                           000005  2815 	VSIZE=5 
      00100B                       2816 search_dict:
      00100B                       2817 	_vars VSIZE 
      00100B 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2818 
      00100D 17 04            [ 2] 2819 	ldw (YSAVE,sp),y 
      00100F                       2820 search_next:
      00100F 1F 02            [ 2] 2821 	ldw (XSAVE,sp),x 
                                   2822 ; get name length in dictionary	
      001011 F6               [ 1] 2823 	ld a,(x)
      001012 A4 0F            [ 1] 2824 	and a,#0xf 
      001014 6B 01            [ 1] 2825 	ld (NLEN,sp),a  
      001016 16 04            [ 2] 2826 	ldw y,(YSAVE,sp) ; name pointer 
      001018 5C               [ 2] 2827 	incw x 
      001019                       2828 cp_loop:
      001019 90 F6            [ 1] 2829 	ld a,(y)
      00101B 27 1B            [ 1] 2830 	jreq str_match 
      00101D 0D 01            [ 1] 2831 	tnz (NLEN,sp)
      00101F 27 0A            [ 1] 2832 	jreq no_match  
      001021 F1               [ 1] 2833 	cp a,(x)
      001022 26 07            [ 1] 2834 	jrne no_match 
      001024 90 5C            [ 2] 2835 	incw y 
      001026 5C               [ 2] 2836 	incw x
      001027 0A 01            [ 1] 2837 	dec (NLEN,sp)
      001029 20 EE            [ 2] 2838 	jra cp_loop 
      00102B                       2839 no_match:
      00102B 1E 02            [ 2] 2840 	ldw x,(XSAVE,sp) 
      00102D 1D 00 02         [ 2] 2841 	subw x,#2 ; move X to link field
      001030 4B 00            [ 1] 2842 	push #TK_NONE 
      001032 FE               [ 2] 2843 	ldw x,(x) ; next word link 
      001033 84               [ 1] 2844 	pop a ; TK_NONE 
      001034 27 1F            [ 1] 2845 	jreq search_exit  ; not found  
                                   2846 ;try next 
      001036 20 D7            [ 2] 2847 	jra search_next
      001038                       2848 str_match:
      001038 1E 02            [ 2] 2849 	ldw x,(XSAVE,sp)
      00103A F6               [ 1] 2850 	ld a,(X)
      00103B 6B 01            [ 1] 2851 	ld (NLEN,sp),a ; needed to test keyword type  
      00103D A4 0F            [ 1] 2852 	and a,#0xf 
                                   2853 ; move x to procedure address field 	
      00103F 4C               [ 1] 2854 	inc a 
      001040 C7 00 0D         [ 1] 2855 	ld acc8,a 
      001043 72 5F 00 0C      [ 1] 2856 	clr acc16 
      001047 72 BB 00 0C      [ 2] 2857 	addw x,acc16 
      00104B FE               [ 2] 2858 	ldw x,(x) ; routine entry point 
                                   2859 ;determine keyword type bits 7:6 
      00104C 7B 01            [ 1] 2860 	ld a,(NLEN,sp)
      00104E 4E               [ 1] 2861 	swap a 
      00104F A4 0C            [ 1] 2862 	and a,#0xc
      001051 44               [ 1] 2863 	srl a
      001052 44               [ 1] 2864 	srl a 
      001053 AB 80            [ 1] 2865 	add a,#128
      001055                       2866 search_exit: 
      001055                       2867 	_drop VSIZE 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001055 5B 05            [ 2]    1     addw sp,#VSIZE 
      001057 81               [ 4] 2868 	ret 
                                   2869 
                                   2870 ;---------------------
                                   2871 ; check if next token
                                   2872 ;  is of expected type 
                                   2873 ; input:
                                   2874 ;   A 		 expected token attribute
                                   2875 ;  ouput:
                                   2876 ;   none     if fail call syntax_error 
                                   2877 ;--------------------
      001058                       2878 expect:
      001058 88               [ 1] 2879 	push a 
      001059 CD 09 63         [ 4] 2880 	call next_token 
      00105C 11 01            [ 1] 2881 	cp a,(1,sp)
      00105E 27 03            [ 1] 2882 	jreq 1$
      001060 CC 08 71         [ 2] 2883 	jp syntax_error
      001063 84               [ 1] 2884 1$: pop a 
      001064 81               [ 4] 2885 	ret 
                                   2886 
                                   2887 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2888 ; parse arguments list 
                                   2889 ; between ()
                                   2890 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001065                       2891 func_args:
      001065 A6 07            [ 1] 2892 	ld a,#TK_LPAREN 
      001067 CD 10 58         [ 4] 2893 	call expect 
                                   2894 ; expected to continue in arg_list 
                                   2895 ; caller must check for TK_RPAREN 
                                   2896 
                                   2897 ;-------------------------------
                                   2898 ; parse embedded BASIC routines 
                                   2899 ; arguments list.
                                   2900 ; arg_list::=  rel[','rel]*
                                   2901 ; all arguments are of integer type
                                   2902 ; and pushed on stack 
                                   2903 ; input:
                                   2904 ;   none
                                   2905 ; output:
                                   2906 ;   stack{n}   arguments pushed on stack
                                   2907 ;   A 	number of arguments pushed on stack  
                                   2908 ;--------------------------------
      00106A                       2909 arg_list:
      00106A 4B 00            [ 1] 2910 	push #0  
      00106C CD 11 A7         [ 4] 2911 1$: call relation
      00106F A1 00            [ 1] 2912 	cp a,#TK_NONE 
      001071 27 20            [ 1] 2913 	jreq 5$
      001073 A1 84            [ 1] 2914 	cp a,#TK_INTGR
      001075 26 13            [ 1] 2915 	jrne 4$
      001077                       2916 3$: 
                                   2917 ; swap return address with argument
      001077 84               [ 1] 2918 	pop a ; arg_count
      001078 90 85            [ 2] 2919 	popw y ; return address 
      00107A 89               [ 2] 2920 	pushw x ; new argument 
      00107B 90 89            [ 2] 2921 	pushw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00107D 4C               [ 1] 2922     inc a
      00107E 88               [ 1] 2923 	push a 
      00107F CD 09 63         [ 4] 2924 	call next_token 
      001082 A1 09            [ 1] 2925 	cp a,#TK_COMMA 
      001084 27 E6            [ 1] 2926 	jreq 1$ 
      001086 A1 00            [ 1] 2927 	cp a,#TK_NONE 
      001088 27 09            [ 1] 2928 	jreq 5$ 
      00108A A1 08            [ 1] 2929 4$:	cp a,#TK_RPAREN 
      00108C 27 05            [ 1] 2930 	jreq 5$
      00108E                       2931 	_unget_token 
      00108E 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001093 84               [ 1] 2932 5$:	pop a  
      001094 81               [ 4] 2933 	ret 
                                   2934 
                                   2935 ;--------------------------------
                                   2936 ;   BASIC commnands 
                                   2937 ;--------------------------------
                                   2938 
                                   2939 ;--------------------------------
                                   2940 ;  arithmetic and relational 
                                   2941 ;  routines
                                   2942 ;  operators precedence
                                   2943 ;  highest to lowest
                                   2944 ;  operators on same row have 
                                   2945 ;  same precedence and are executed
                                   2946 ;  from left to right.
                                   2947 ;	'*','/','%'
                                   2948 ;   '-','+'
                                   2949 ;   '=','>','<','>=','<=','<>','><'
                                   2950 ;   '<>' and '><' are equivalent for not equal.
                                   2951 ;--------------------------------
                                   2952 
                                   2953 ;---------------------
                                   2954 ; return array element
                                   2955 ; address from @(expr)
                                   2956 ; input:
                                   2957 ;   A 		TK_ARRAY
                                   2958 ; output:
                                   2959 ;   A 		TK_INTGR
                                   2960 ;	X 		element address 
                                   2961 ;----------------------
      001095                       2962 get_array_element:
      001095 CD 10 65         [ 4] 2963 	call func_args 
      001098 A1 01            [ 1] 2964 	cp a,#1
      00109A 27 03            [ 1] 2965 	jreq 1$
      00109C CC 08 71         [ 2] 2966 	jp syntax_error
      00109F 85               [ 2] 2967 1$: popw x 
                                   2968 	; check for bounds 
      0010A0 C3 00 21         [ 2] 2969 	cpw x,array_size 
      0010A3 23 05            [ 2] 2970 	jrule 3$
                                   2971 ; bounds {1..array_size}	
      0010A5 A6 0A            [ 1] 2972 2$: ld a,#ERR_BAD_VALUE 
      0010A7 CC 08 73         [ 2] 2973 	jp tb_error 
      0010AA 5D               [ 2] 2974 3$: tnzw  x
      0010AB 27 F8            [ 1] 2975 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0010AD 58               [ 2] 2976 	sllw x 
      0010AE 89               [ 2] 2977 	pushw x 
      0010AF AE 16 90         [ 2] 2978 	ldw x,#tib
      0010B2 72 F0 01         [ 2] 2979 	subw x,(1,sp)
      0010B5                       2980 	_drop 2   
      0010B5 5B 02            [ 2]    1     addw sp,#2 
      0010B7 A6 84            [ 1] 2981 	ld a,#TK_INTGR
      0010B9 81               [ 4] 2982 	ret 
                                   2983 
                                   2984 ;***********************************
                                   2985 ;   expression parse,execute 
                                   2986 ;***********************************
                                   2987 ;-----------------------------------
                                   2988 ; factor ::= ['+'|'-'|e]  var | @ |
                                   2989 ;			 integer | function |
                                   2990 ;			 '('relation')' 
                                   2991 ; output:
                                   2992 ;   A    token attribute 
                                   2993 ;   X 	 integer
                                   2994 ; ---------------------------------
                           000001  2995 	NEG=1
                           000001  2996 	VSIZE=1
      0010BA                       2997 factor:
      0010BA                       2998 	_vars VSIZE 
      0010BA 52 01            [ 2]    1     sub sp,#VSIZE 
      0010BC CD 09 63         [ 4] 2999 	call next_token
      0010BF A1 02            [ 1] 3000 	cp a,#CMD_END 
      0010C1 25 4E            [ 1] 3001 	jrult 20$
      0010C3 6B 01            [ 1] 3002 1$:	ld (NEG,sp),a 
      0010C5 A4 30            [ 1] 3003 	and a,#TK_GRP_MASK
      0010C7 A1 10            [ 1] 3004 	cp a,#TK_GRP_ADD 
      0010C9 27 04            [ 1] 3005 	jreq 2$
      0010CB 7B 01            [ 1] 3006 	ld a,(NEG,sp)
      0010CD 20 03            [ 2] 3007 	jra 4$  
      0010CF                       3008 2$:	
      0010CF CD 09 63         [ 4] 3009 	call next_token 
      0010D2                       3010 4$:	
      0010D2 A1 81            [ 1] 3011 	cp a,#TK_IFUNC 
      0010D4 26 03            [ 1] 3012 	jrne 5$ 
      0010D6 FD               [ 4] 3013 	call (x) 
      0010D7 20 2F            [ 2] 3014 	jra 18$ 
      0010D9                       3015 5$:
      0010D9 A1 84            [ 1] 3016 	cp a,#TK_INTGR
      0010DB 26 02            [ 1] 3017 	jrne 6$
      0010DD 20 29            [ 2] 3018 	jra 18$
      0010DF                       3019 6$:
      0010DF A1 06            [ 1] 3020 	cp a,#TK_ARRAY
      0010E1 26 06            [ 1] 3021 	jrne 10$
      0010E3 CD 10 95         [ 4] 3022 	call get_array_element
      0010E6 FE               [ 2] 3023 	ldw x,(x)
      0010E7 20 1F            [ 2] 3024 	jra 18$ 
      0010E9                       3025 10$:
      0010E9 A1 85            [ 1] 3026 	cp a,#TK_VAR 
      0010EB 26 03            [ 1] 3027 	jrne 12$
      0010ED FE               [ 2] 3028 	ldw x,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0010EE 20 18            [ 2] 3029 	jra 18$
      0010F0                       3030 12$:			
      0010F0 A1 07            [ 1] 3031 	cp a,#TK_LPAREN
      0010F2 26 0C            [ 1] 3032 	jrne 16$
      0010F4 CD 11 A7         [ 4] 3033 	call relation
      0010F7 89               [ 2] 3034 	pushw x 
      0010F8 A6 08            [ 1] 3035 	ld a,#TK_RPAREN 
      0010FA CD 10 58         [ 4] 3036 	call expect
      0010FD 85               [ 2] 3037 	popw x 
      0010FE 20 08            [ 2] 3038 	jra 18$	
      001100                       3039 16$:
      001100                       3040 	_unget_token
      001100 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001105 4F               [ 1] 3041 	clr a 
      001106 20 09            [ 2] 3042 	jra 20$ 
      001108                       3043 18$: 
      001108 A6 11            [ 1] 3044 	ld a,#TK_MINUS 
      00110A 11 01            [ 1] 3045 	cp a,(NEG,sp)
      00110C 26 01            [ 1] 3046 	jrne 19$
      00110E 50               [ 2] 3047 	negw x
      00110F                       3048 19$:
      00110F A6 84            [ 1] 3049 	ld a,#TK_INTGR
      001111                       3050 20$:
      001111                       3051 	_drop VSIZE
      001111 5B 01            [ 2]    1     addw sp,#VSIZE 
      001113 81               [ 4] 3052 	ret
                                   3053 
                                   3054 ;-----------------------------------
                                   3055 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3056 ; output:
                                   3057 ;   A    	token attribute 
                                   3058 ;	X		integer
                                   3059 ;-----------------------------------
                           000001  3060 	N1=1
                           000003  3061 	N2=3
                           000005  3062 	MULOP=5
                           000005  3063 	VSIZE=5
      001114                       3064 term:
      001114                       3065 	_vars VSIZE
      001114 52 05            [ 2]    1     sub sp,#VSIZE 
      001116 CD 10 BA         [ 4] 3066 	call factor
      001119 A1 02            [ 1] 3067 	cp a,#CMD_END
      00111B 25 43            [ 1] 3068 	jrult term_exit
      00111D                       3069 term01:	 ; check for  operator 
      00111D 1F 03            [ 2] 3070 	ldw (N2,sp),x  ; save first factor 
      00111F CD 09 63         [ 4] 3071 	call next_token
      001122 A1 02            [ 1] 3072 	cp a,#CMD_END
      001124 25 36            [ 1] 3073 	jrult 9$
      001126 6B 05            [ 1] 3074 0$:	ld (MULOP,sp),a
      001128 A4 30            [ 1] 3075 	and a,#TK_GRP_MASK
      00112A A1 20            [ 1] 3076 	cp a,#TK_GRP_MULT
      00112C 27 09            [ 1] 3077 	jreq 1$
      00112E 7B 05            [ 1] 3078 	ld a,(MULOP,sp) 
      001130                       3079 	_unget_token 
      001130 55 00 02 00 01   [ 1]    1     mov in,in.saved
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001135 20 25            [ 2] 3080 	jra 9$
      001137                       3081 1$:	; got *|/|%
      001137 CD 10 BA         [ 4] 3082 	call factor
      00113A A1 84            [ 1] 3083 	cp a,#TK_INTGR
      00113C 27 03            [ 1] 3084 	jreq 2$ 
      00113E CC 08 71         [ 2] 3085 	jp syntax_error
      001141 1F 01            [ 2] 3086 2$:	ldw (N1,sp),x  
      001143 7B 05            [ 1] 3087 	ld a,(MULOP,sp) 
      001145 A1 20            [ 1] 3088 	cp a,#TK_MULT 
      001147 26 05            [ 1] 3089 	jrne 3$
      001149 CD 0F 3C         [ 4] 3090 	call multiply 
      00114C 20 CF            [ 2] 3091 	jra term01
      00114E A1 21            [ 1] 3092 3$: cp a,#TK_DIV 
      001150 26 05            [ 1] 3093 	jrne 4$ 
      001152 CD 0F 84         [ 4] 3094 	call divide 
      001155 20 C6            [ 2] 3095 	jra term01 
      001157 CD 0F C8         [ 4] 3096 4$: call modulo
      00115A 20 C1            [ 2] 3097 	jra term01 
      00115C 1E 03            [ 2] 3098 9$: ldw x,(N2,sp)  
      00115E A6 84            [ 1] 3099 	ld a,#TK_INTGR 	
      001160                       3100 term_exit:
      001160                       3101 	_drop VSIZE 
      001160 5B 05            [ 2]    1     addw sp,#VSIZE 
      001162 81               [ 4] 3102 	ret 
                                   3103 
                                   3104 ;-------------------------------
                                   3105 ;  expr ::= term [['+'|'-'] term]*
                                   3106 ;  result range {-32768..32767}
                                   3107 ;  output:
                                   3108 ;   A    token attribute 
                                   3109 ;   X	 integer   
                                   3110 ;-------------------------------
                           000001  3111 	N1=1 
                           000003  3112 	N2=3
                           000005  3113 	OP=5 
                           000005  3114 	VSIZE=5 
      001163                       3115 expression:
      001163                       3116 	_vars VSIZE 
      001163 52 05            [ 2]    1     sub sp,#VSIZE 
      001165 CD 11 14         [ 4] 3117 	call term
      001168 A1 02            [ 1] 3118 	cp a,#CMD_END 
      00116A 25 38            [ 1] 3119 	jrult expr_exit 
      00116C 1F 03            [ 2] 3120 0$:	ldw (N2,sp),x 
      00116E CD 09 63         [ 4] 3121 	call next_token
      001171 A1 02            [ 1] 3122 	cp a,#CMD_END 
      001173 25 2B            [ 1] 3123 	jrult 9$ 
      001175 6B 05            [ 1] 3124 1$:	ld (OP,sp),a  
      001177 A4 30            [ 1] 3125 	and a,#TK_GRP_MASK
      001179 A1 10            [ 1] 3126 	cp a,#TK_GRP_ADD 
      00117B 27 07            [ 1] 3127 	jreq 2$ 
      00117D                       3128 	_unget_token
      00117D 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001182 20 1C            [ 2] 3129 	jra 9$
      001184                       3130 2$: 
      001184 CD 11 14         [ 4] 3131 	call term
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001187 A1 84            [ 1] 3132 	cp a,#TK_INTGR 
      001189 27 03            [ 1] 3133 	jreq 3$
      00118B CC 08 71         [ 2] 3134 	jp syntax_error
      00118E 1F 01            [ 2] 3135 3$:	ldw (N1,sp),x 
      001190 7B 05            [ 1] 3136 	ld a,(OP,sp)
      001192 A1 10            [ 1] 3137 	cp a,#TK_PLUS 
      001194 26 05            [ 1] 3138 	jrne 4$
      001196 CD 0F 2E         [ 4] 3139 	call add 
      001199 20 D1            [ 2] 3140 	jra 0$ 
      00119B CD 0F 36         [ 4] 3141 4$:	call substract
      00119E 20 CC            [ 2] 3142 	jra 0$
      0011A0 1E 03            [ 2] 3143 9$: ldw x,(N2,sp)
      0011A2 A6 84            [ 1] 3144 	ld a,#TK_INTGR	
      0011A4                       3145 expr_exit:
      0011A4                       3146 	_drop VSIZE 
      0011A4 5B 05            [ 2]    1     addw sp,#VSIZE 
      0011A6 81               [ 4] 3147 	ret 
                                   3148 
                                   3149 ;---------------------------------------------
                                   3150 ; rel ::= expr rel_op expr
                                   3151 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3152 ;  relation return 1 | 0  for true | false 
                                   3153 ;  output:
                                   3154 ;    A 		token attribute  
                                   3155 ;	 X		1|0
                                   3156 ;---------------------------------------------
                           000001  3157 	N1=1
                           000003  3158 	N2=3
                           000005  3159 	RELOP=5
                           000005  3160 	VSIZE=5 
      0011A7                       3161 relation: 
      0011A7                       3162 	_vars VSIZE
      0011A7 52 05            [ 2]    1     sub sp,#VSIZE 
      0011A9 CD 11 63         [ 4] 3163 	call expression
      0011AC A1 02            [ 1] 3164 	cp a,#CMD_END  
      0011AE 25 4B            [ 1] 3165 	jrult rel_exit 
                                   3166 	; expect rel_op or leave 
      0011B0 1F 03            [ 2] 3167 	ldw (N2,sp),x 
      0011B2 CD 09 63         [ 4] 3168 	call next_token 
      0011B5 A1 02            [ 1] 3169 	cp a,#CMD_END 
      0011B7 25 3E            [ 1] 3170 	jrult 9$
      0011B9                       3171 1$:	
      0011B9 6B 05            [ 1] 3172 	ld (RELOP,sp),a 
      0011BB A4 30            [ 1] 3173 	and a,#TK_GRP_MASK
      0011BD A1 30            [ 1] 3174 	cp a,#TK_GRP_RELOP 
      0011BF 27 07            [ 1] 3175 	jreq 2$
      0011C1                       3176 	_unget_token  
      0011C1 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0011C6 20 2F            [ 2] 3177 	jra 9$
      0011C8                       3178 2$:	; expect another expression or error 
      0011C8 CD 11 63         [ 4] 3179 	call expression
      0011CB A1 84            [ 1] 3180 	cp a,#TK_INTGR 
      0011CD 27 03            [ 1] 3181 	jreq 3$
      0011CF CC 08 71         [ 2] 3182 	jp syntax_error 
      0011D2 1F 01            [ 2] 3183 3$:	ldw (N1,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011D4 CD 0F 36         [ 4] 3184 	call substract
      0011D7 26 06            [ 1] 3185 	jrne 4$
      0011D9 35 02 00 0D      [ 1] 3186 	mov acc8,#2 ; n1==n2
      0011DD 20 0C            [ 2] 3187 	jra 6$ 
      0011DF                       3188 4$: 
      0011DF 2C 06            [ 1] 3189 	jrsgt 5$  
      0011E1 35 04 00 0D      [ 1] 3190 	mov acc8,#4 ; n1<2 
      0011E5 20 04            [ 2] 3191 	jra 6$
      0011E7                       3192 5$:
      0011E7 35 01 00 0D      [ 1] 3193 	mov acc8,#1 ; n1>n2 
      0011EB                       3194 6$:
      0011EB 5F               [ 1] 3195 	clrw x 
      0011EC C6 00 0D         [ 1] 3196 	ld a, acc8  
      0011EF 14 05            [ 1] 3197 	and a,(RELOP,sp)
      0011F1 4D               [ 1] 3198 	tnz a 
      0011F2 27 05            [ 1] 3199 	jreq 10$
      0011F4 5C               [ 2] 3200 	incw x 
      0011F5                       3201 7$:	 
      0011F5 20 02            [ 2] 3202 	jra 10$  	
      0011F7 1E 03            [ 2] 3203 9$: ldw x,(N2,sp)
      0011F9                       3204 10$:
      0011F9 A6 84            [ 1] 3205 	ld a,#TK_INTGR
      0011FB                       3206 rel_exit: 	 
      0011FB                       3207 	_drop VSIZE
      0011FB 5B 05            [ 2]    1     addw sp,#VSIZE 
      0011FD 81               [ 4] 3208 	ret 
                                   3209 
                                   3210 ;--------------------------------
                                   3211 ; BASIC: SHOW 
                                   3212 ; print stack content in hexadecimal bytes 
                                   3213 ; 16 bytes per row 
                                   3214 ;--------------------------------
      0011FE                       3215 show:
      0011FE AE 12 18         [ 2] 3216 	ldw x,#cstk_prompt
      001201 CD 02 B3         [ 4] 3217 	call puts 
      001204 96               [ 1] 3218 	ldw x,sp 
      001205 1C 00 03         [ 2] 3219 	addw x,#3 ; ignore return address
      001208 90 AE 18 00      [ 2] 3220 	ldw y,#RAM_SIZE  
      00120C CF 00 0C         [ 2] 3221 	ldw acc16,x 
      00120F 72 B2 00 0C      [ 2] 3222 	subw y,acc16
      001213 CD 03 55         [ 4] 3223 	call hex_dump
      001216 4F               [ 1] 3224 	clr a 
      001217 81               [ 4] 3225 	ret
                                   3226 
      001218 0A 63 6F 6E 74 65 6E  3227 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   3228 
                                   3229 
                                   3230 ;--------------------------------------------
                                   3231 ; BASIC: HEX 
                                   3232 ; select hexadecimal base for integer print
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3233 ;---------------------------------------------
      00123F                       3234 hex_base:
      00123F 35 10 00 0A      [ 1] 3235 	mov base,#16 
      001243 81               [ 4] 3236 	ret 
                                   3237 
                                   3238 ;--------------------------------------------
                                   3239 ; BASIC: DEC 
                                   3240 ; select decimal base for integer print
                                   3241 ;---------------------------------------------
      001244                       3242 dec_base:
      001244 35 0A 00 0A      [ 1] 3243 	mov base,#10
      001248 81               [ 4] 3244 	ret 
                                   3245 
                                   3246 ;------------------------
                                   3247 ; BASIC: SIZE 
                                   3248 ; return free size in text area
                                   3249 ; output:
                                   3250 ;   A 		TK_INTGR
                                   3251 ;   X 	    size integer
                                   3252 ;--------------------------
      001249                       3253 size:
      001249 AE 16 90         [ 2] 3254 	ldw x,#tib 
      00124C 72 B0 00 1E      [ 2] 3255 	subw x,txtend 
      001250 A6 84            [ 1] 3256 	ld a,#TK_INTGR
      001252 81               [ 4] 3257 	ret 
                                   3258 
                                   3259 
                                   3260 ;------------------------
                                   3261 ; BASIC: UBOUND  
                                   3262 ; return array variable size 
                                   3263 ; output:
                                   3264 ;   A 		TK_INTGR
                                   3265 ;   X 	    array size 
                                   3266 ;--------------------------
      001253                       3267 ubound:
      001253 AE 16 90         [ 2] 3268 	ldw x,#tib
      001256 72 B0 00 1E      [ 2] 3269 	subw x,txtend 
      00125A 90 CE 00 04      [ 2] 3270 	ldw y,basicptr 
      00125E 90 C3 00 1E      [ 2] 3271 	cpw y,txtend 
      001262 25 0A            [ 1] 3272 	jrult 1$
      001264 3B 00 03         [ 1] 3273 	push count 
      001267 4B 00            [ 1] 3274 	push #0 
      001269 72 F0 01         [ 2] 3275 	subw x,(1,sp)
      00126C                       3276 	_drop 2 
      00126C 5B 02            [ 2]    1     addw sp,#2 
      00126E 54               [ 2] 3277 1$:	srlw x 
      00126F CF 00 21         [ 2] 3278 	ldw array_size,x
      001272 A6 84            [ 1] 3279 	ld a,#TK_INTGR
      001274 81               [ 4] 3280 	ret 
                                   3281 
                                   3282 ;-----------------------------
                                   3283 ; BASIC: LET var=expr 
                                   3284 ; variable assignement 
                                   3285 ; output:
                                   3286 ;   A 		TK_NONE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3287 ;-----------------------------
      001275                       3288 let:
      001275 CD 09 63         [ 4] 3289 	call next_token 
      001278 A1 85            [ 1] 3290 	cp a,#TK_VAR 
      00127A 27 0A            [ 1] 3291 	jreq let_var
      00127C A1 06            [ 1] 3292 	cp a,#TK_ARRAY 
      00127E 27 03            [ 1] 3293 	jreq  let_array
      001280 CC 08 71         [ 2] 3294 	jp syntax_error
      001283                       3295 let_array:
      001283 CD 10 95         [ 4] 3296 	call get_array_element
      001286                       3297 let_var:
      001286 89               [ 2] 3298 	pushw x  
      001287 CD 09 63         [ 4] 3299 	call next_token 
      00128A A1 32            [ 1] 3300 	cp a,#TK_EQUAL
      00128C 27 03            [ 1] 3301 	jreq 1$
      00128E CC 08 71         [ 2] 3302 	jp syntax_error
      001291                       3303 1$:	
      001291 CD 11 A7         [ 4] 3304 	call relation   
      001294 A1 84            [ 1] 3305 	cp a,#TK_INTGR 
      001296 27 03            [ 1] 3306 	jreq 2$
      001298 CC 08 71         [ 2] 3307 	jp syntax_error
      00129B                       3308 2$:	
      00129B 90 93            [ 1] 3309 	ldw y,x 
      00129D 85               [ 2] 3310 	popw x   
      00129E FF               [ 2] 3311 	ldw (x),y   
      00129F 81               [ 4] 3312 	ret 
                                   3313 
                                   3314 ;----------------------------
                                   3315 ; BASIC: LIST [[start][,end]]
                                   3316 ; list program lines 
                                   3317 ; form start to end 
                                   3318 ; if empty argument list then 
                                   3319 ; list all.
                                   3320 ;----------------------------
                           000001  3321 	FIRST=1
                           000003  3322 	LAST=3 
                           000005  3323 	LN_PTR=5
                           000006  3324 	VSIZE=6 
      0012A0                       3325 list:
      0012A0 CE 00 1C         [ 2] 3326 	ldw x,txtbgn 
      0012A3 C3 00 1E         [ 2] 3327 	cpw x,txtend 
      0012A6 2B 01            [ 1] 3328 	jrmi 1$
      0012A8 81               [ 4] 3329 	ret 
      0012A9                       3330 1$:	
      0012A9                       3331 	_vars VSIZE
      0012A9 52 06            [ 2]    1     sub sp,#VSIZE 
      0012AB 1F 05            [ 2] 3332 	ldw (LN_PTR,sp),x 
      0012AD FE               [ 2] 3333 	ldw x,(x) 
      0012AE 1F 01            [ 2] 3334 	ldw (FIRST,sp),x ; list from first line 
      0012B0 AE 7F FF         [ 2] 3335 	ldw x,#MAX_LINENO ; biggest line number 
      0012B3 1F 03            [ 2] 3336 	ldw (LAST,sp),x 
      0012B5 CD 10 6A         [ 4] 3337 	call arg_list
      0012B8 4D               [ 1] 3338 	tnz a
      0012B9 27 31            [ 1] 3339 	jreq list_start 
      0012BB A1 02            [ 1] 3340 	cp a,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012BD 27 07            [ 1] 3341 	jreq 4$
      0012BF A1 01            [ 1] 3342 	cp a,#1 
      0012C1 27 06            [ 1] 3343 	jreq first_line 
      0012C3 CC 08 71         [ 2] 3344 	jp syntax_error 
      0012C6 85               [ 2] 3345 4$:	popw x 
      0012C7 1F 05            [ 2] 3346 	ldw (LAST+2,sp),x 
      0012C9                       3347 first_line:
      0012C9 85               [ 2] 3348 	popw x
      0012CA 1F 01            [ 2] 3349 	ldw (FIRST,sp),x 
      0012CC                       3350 lines_skip:
      0012CC CE 00 1C         [ 2] 3351 	ldw x,txtbgn
      0012CF 1F 05            [ 2] 3352 2$:	ldw (LN_PTR,sp),x 
      0012D1 C3 00 1E         [ 2] 3353 	cpw x,txtend 
      0012D4 2A 3C            [ 1] 3354 	jrpl list_exit 
      0012D6 FE               [ 2] 3355 	ldw x,(x) ;line# 
      0012D7 13 01            [ 2] 3356 	cpw x,(FIRST,sp)
      0012D9 2A 11            [ 1] 3357 	jrpl list_start 
      0012DB 1E 05            [ 2] 3358 	ldw x,(LN_PTR,sp) 
      0012DD E6 02            [ 1] 3359 	ld a,(2,x)
      0012DF C7 00 0D         [ 1] 3360 	ld acc8,a 
      0012E2 72 5F 00 0C      [ 1] 3361 	clr acc16 
      0012E6 72 BB 00 0C      [ 2] 3362 	addw x,acc16
      0012EA 20 E3            [ 2] 3363 	jra 2$ 
                                   3364 ; print loop
      0012EC                       3365 list_start:
      0012EC 1E 05            [ 2] 3366 	ldw x,(LN_PTR,sp)
      0012EE E6 02            [ 1] 3367 3$:	ld a,(2,x) 
      0012F0 CD 13 6D         [ 4] 3368 	call prt_basic_line
      0012F3 1E 05            [ 2] 3369 	ldw x,(LN_PTR,sp)
      0012F5 E6 02            [ 1] 3370 	ld a,(2,x)
      0012F7 C7 00 0D         [ 1] 3371 	ld acc8,a 
      0012FA 72 5F 00 0C      [ 1] 3372 	clr acc16 
      0012FE 72 BB 00 0C      [ 2] 3373 	addw x,acc16
      001302 C3 00 1E         [ 2] 3374 	cpw x,txtend 
      001305 2A 0B            [ 1] 3375 	jrpl list_exit
      001307 1F 05            [ 2] 3376 	ldw (LN_PTR,sp),x
      001309 FE               [ 2] 3377 	ldw x,(x)
      00130A 13 03            [ 2] 3378 	cpw x,(LAST,sp)  
      00130C 2C 04            [ 1] 3379 	jrsgt list_exit 
      00130E 1E 05            [ 2] 3380 	ldw x,(LN_PTR,sp)
      001310 20 DC            [ 2] 3381 	jra 3$
      001312                       3382 list_exit:
      001312                       3383 	_drop VSIZE 
      001312 5B 06            [ 2]    1     addw sp,#VSIZE 
      001314 81               [ 4] 3384 	ret
                                   3385 
                                   3386 ;-------------------------
                                   3387 ; print counted string 
                                   3388 ; input:
                                   3389 ;   X 	address of string
                                   3390 ;--------------------------
      001315                       3391 prt_cmd_name:
      001315 F6               [ 1] 3392 	ld a,(x)
      001316 5C               [ 2] 3393 	incw x
      001317 A4 0F            [ 1] 3394 	and a,#15  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001319 88               [ 1] 3395 	push a 
      00131A 0D 01            [ 1] 3396 1$: tnz (1,sp) 
      00131C 27 09            [ 1] 3397 	jreq 9$
      00131E F6               [ 1] 3398 	ld a,(x)
      00131F CD 02 A0         [ 4] 3399 	call putc 
      001322 5C               [ 2] 3400 	incw x
      001323 0A 01            [ 1] 3401 	dec (1,sp)	 
      001325 20 F3            [ 2] 3402 	jra 1$
      001327 84               [ 1] 3403 9$: pop a 
      001328 81               [ 4] 3404 	ret	
                                   3405 
                                   3406 ;--------------------------
                                   3407 ; print TK_QSTR
                                   3408 ; converting control character
                                   3409 ; to backslash sequence
                                   3410 ; input:
                                   3411 ;   X        char *
                                   3412 ;-----------------------------
      001329                       3413 prt_quote:
      001329 A6 22            [ 1] 3414 	ld a,#'"
      00132B CD 02 A0         [ 4] 3415 	call putc 
      00132E F6               [ 1] 3416 1$:	ld a,(x)
      00132F 27 2D            [ 1] 3417 	jreq 9$
      001331 5C               [ 2] 3418 	incw x 
      001332 A1 20            [ 1] 3419 	cp a,#SPACE 
      001334 25 0C            [ 1] 3420 	jrult 3$
      001336 CD 02 A0         [ 4] 3421 	call putc
      001339 A1 5C            [ 1] 3422 	cp a,#'\ 
      00133B 26 F1            [ 1] 3423 	jrne 1$ 
      00133D                       3424 2$:
      00133D CD 02 A0         [ 4] 3425 	call putc 
      001340 20 EC            [ 2] 3426 	jra 1$
      001342 88               [ 1] 3427 3$: push a 
      001343 A6 5C            [ 1] 3428 	ld a,#'\
      001345 CD 02 A0         [ 4] 3429 	call putc 
      001348 84               [ 1] 3430 	pop a 
      001349 A0 07            [ 1] 3431 	sub a,#7
      00134B C7 00 0D         [ 1] 3432 	ld acc8,a 
      00134E 72 5F 00 0C      [ 1] 3433 	clr acc16
      001352 90 AE 0C 0A      [ 2] 3434 	ldw y,#escaped 
      001356 72 B9 00 0C      [ 2] 3435 	addw y,acc16 
      00135A 90 F6            [ 1] 3436 	ld a,(y)
      00135C 20 DF            [ 2] 3437 	jra 2$
      00135E A6 22            [ 1] 3438 9$: ld a,#'"
      001360 CD 02 A0         [ 4] 3439 	call putc 
      001363 5C               [ 2] 3440 	incw x 
      001364 81               [ 4] 3441 	ret
                                   3442 
                                   3443 ;--------------------------
                                   3444 ; return variable name 
                                   3445 ; from its address.
                                   3446 ; input:
                                   3447 ;   X    variable address
                                   3448 ; output:
                                   3449 ;   A     variable letter
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3450 ;--------------------------
      001365                       3451 var_name:
      001365 1D 00 26         [ 2] 3452 		subw x,#vars 
      001368 9F               [ 1] 3453 		ld a,xl 
      001369 44               [ 1] 3454 		srl a 
      00136A AB 41            [ 1] 3455 		add a,#'A 
      00136C 81               [ 4] 3456 		ret 
                                   3457 
                                   3458 
                                   3459 ;--------------------------
                                   3460 ; decompile line from token list 
                                   3461 ; input:
                                   3462 ;   A       stop at this position 
                                   3463 ;   X 		pointer at line
                                   3464 ; output:
                                   3465 ;   none 
                                   3466 ;--------------------------	
                           000001  3467 	BASE_SAV=1
                           000002  3468 	WIDTH_SAV=2
                           000003  3469 	XSAVE=3
                           000005  3470 	LLEN=5
                           000005  3471 	VSIZE=5 
      00136D                       3472 prt_basic_line:
      00136D                       3473 	_vars VSIZE
      00136D 52 05            [ 2]    1     sub sp,#VSIZE 
      00136F 6B 05            [ 1] 3474 	ld (LLEN,sp),a  
      001371 C6 00 0A         [ 1] 3475 	ld a,base
      001374 6B 01            [ 1] 3476 	ld (BASE_SAV,sp),a  
      001376 C6 00 24         [ 1] 3477 	ld a,tab_width 
      001379 6B 02            [ 1] 3478 	ld (WIDTH_SAV,sp),a 
      00137B CF 00 17         [ 2] 3479 	ldw ptr16,x
      00137E FE               [ 2] 3480 	ldw x,(x)
      00137F 35 0A 00 0A      [ 1] 3481 	mov base,#10
      001383 35 05 00 24      [ 1] 3482 	mov tab_width,#5
      001387 CD 0A 00         [ 4] 3483 	call print_int ; print line number 
      00138A A6 20            [ 1] 3484 	ld a,#SPACE 
      00138C CD 02 A0         [ 4] 3485 	call putc 
      00138F 72 5F 00 24      [ 1] 3486 	clr tab_width
      001393 AE 00 03         [ 2] 3487 	ldw x,#3
      001396 9F               [ 1] 3488 1$:	ld a,xl 
      001397 11 05            [ 1] 3489 	cp a,(LLEN,sp)
      001399 2B 03            [ 1] 3490 	jrmi 2$
      00139B CC 14 6C         [ 2] 3491 	jp 20$
      00139E                       3492 2$:	 
      00139E 72 D6 00 17      [ 4] 3493 	ld a,([ptr16],x)
      0013A2 5C               [ 2] 3494 	incw x 
      0013A3 1F 03            [ 2] 3495 	ldw (XSAVE,sp),x 
      0013A5 72 DE 00 17      [ 5] 3496 	ldw x,([ptr16],x)
      0013A9 4D               [ 1] 3497 	tnz a 
      0013AA 2B 0A            [ 1] 3498 	jrmi 3$
      0013AC A1 02            [ 1] 3499 	cp a,#TK_QSTR 
      0013AE 27 4B            [ 1] 3500 	jreq 6$
      0013B0 A1 03            [ 1] 3501 	cp a,#TK_CHAR 
      0013B2 27 57            [ 1] 3502 	jreq 7$
      0013B4 20 64            [ 2] 3503 	jra 8$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3504 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST
      0013B6                       3505 3$:	
      0013B6 A1 85            [ 1] 3506 	cp a,#TK_VAR 
      0013B8 27 34            [ 1] 3507 	jreq 4$
      0013BA A1 84            [ 1] 3508 	cp a,#TK_INTGR
      0013BC 27 38            [ 1] 3509 	jreq 5$
      0013BE A3 15 A0         [ 2] 3510 	cpw x,#remark 
      0013C1 26 14            [ 1] 3511 	jrne 30$
      0013C3 A6 27            [ 1] 3512 	ld a,#''
      0013C5 CD 02 A0         [ 4] 3513 	call putc 
      0013C8 1E 03            [ 2] 3514 	ldw x,(XSAVE,sp)
      0013CA 1C 00 02         [ 2] 3515 	addw x,#2
      0013CD 72 BB 00 17      [ 2] 3516 	addw x,ptr16  
      0013D1 CD 02 B3         [ 4] 3517 	call puts 
      0013D4 CC 14 6C         [ 2] 3518 	jp 20$ 
      0013D7                       3519 30$:
      0013D7 A6 20            [ 1] 3520 	ld a,#SPACE 
      0013D9 CD 02 A0         [ 4] 3521 	call putc 
      0013DC CD 0F D9         [ 4] 3522 	call cmd_name
      0013DF CD 13 15         [ 4] 3523 	call prt_cmd_name
      0013E2 A6 20            [ 1] 3524 	ld a,#SPACE 
      0013E4 CD 02 A0         [ 4] 3525 	call putc 
      0013E7                       3526 31$:
      0013E7 1E 03            [ 2] 3527 	ldw x,(XSAVE,sp)
      0013E9 1C 00 02         [ 2] 3528 	addw x,#2
      0013EC 20 A8            [ 2] 3529 	jra 1$
                                   3530 ;; TK_VAR 
      0013EE                       3531 4$:
                                   3532 ;	ld a,#SPACE 
                                   3533 ;	call putc 
      0013EE CD 13 65         [ 4] 3534 	call var_name
      0013F1 CD 02 A0         [ 4] 3535 	call putc 
      0013F4 20 F1            [ 2] 3536 	jra 31$
                                   3537 ;; TK_INTGR
      0013F6                       3538 5$:
                                   3539 ;	ld a,#SPACE 
                                   3540 ;	call putc
      0013F6 CD 0A 00         [ 4] 3541 	call print_int 
      0013F9 20 EC            [ 2] 3542 	jra 31$
                                   3543 ;; TK_QSTR
      0013FB                       3544 6$:
      0013FB 1E 03            [ 2] 3545 	ldw x,(XSAVE,sp)
      0013FD 72 BB 00 17      [ 2] 3546 	addw x,ptr16 
      001401 CD 13 29         [ 4] 3547 	call prt_quote  
      001404 72 B0 00 17      [ 2] 3548 	subw x,ptr16  
      001408 CC 13 96         [ 2] 3549 	jp 1$
                                   3550 ;; TK_CHAR 
      00140B                       3551 7$:
      00140B A6 5C            [ 1] 3552 	ld a,#'\ 
      00140D CD 02 A0         [ 4] 3553 	call putc 
      001410 9E               [ 1] 3554 	ld a,xh 
      001411 CD 02 A0         [ 4] 3555 	call putc 
      001414 1E 03            [ 2] 3556 	ldw x,(XSAVE,sp)
      001416 5C               [ 2] 3557 	incw x 
      001417 CC 13 96         [ 2] 3558 	jp 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00141A A1 01            [ 1] 3559 8$: cp a,#TK_COLON 
      00141C 26 0A            [ 1] 3560 	jrne 9$
      00141E A6 3A            [ 1] 3561 	ld a,#':
      001420                       3562 81$:
      001420 CD 02 A0         [ 4] 3563 	call putc
      001423                       3564 82$:
      001423 1E 03            [ 2] 3565 	ldw x,(XSAVE,sp)
      001425 CC 13 96         [ 2] 3566 	jp 1$ 
      001428                       3567 9$: 
      001428 A1 0A            [ 1] 3568 	cp a,#TK_SHARP
      00142A 22 0E            [ 1] 3569 	jrugt 10$ 
      00142C A0 06            [ 1] 3570 	sub a,#TK_ARRAY 
      00142E 90 5F            [ 1] 3571 	clrw y 
      001430 90 97            [ 1] 3572 	ld yl,a
      001432 72 A9 14 7E      [ 2] 3573 	addw y,#single_char 
      001436 90 F6            [ 1] 3574 	ld a,(y)
      001438 20 E6            [ 2] 3575 	jra 81$ 
      00143A                       3576 10$: 
      00143A A1 11            [ 1] 3577 	cp a,#TK_MINUS 
      00143C 22 0E            [ 1] 3578 	jrugt 11$
      00143E A0 10            [ 1] 3579 	sub a,#TK_PLUS 
      001440 90 5F            [ 1] 3580 	clrw y 
      001442 90 97            [ 1] 3581 	ld yl,a 
      001444 72 A9 14 83      [ 2] 3582 	addw y,#add_char 
      001448 90 F6            [ 1] 3583 	ld a,(y)
      00144A 20 D4            [ 2] 3584 	jra 81$
      00144C                       3585 11$:
      00144C A1 22            [ 1] 3586     cp a,#TK_MOD 
      00144E 22 0E            [ 1] 3587 	jrugt 12$
      001450 A0 20            [ 1] 3588 	sub a,#TK_MULT
      001452 90 5F            [ 1] 3589 	clrw y 
      001454 90 97            [ 1] 3590 	ld yl,a 
      001456 72 A9 14 85      [ 2] 3591 	addw y,#mul_char
      00145A 90 F6            [ 1] 3592 	ld a,(y)
      00145C 20 C2            [ 2] 3593 	jra 81$
      00145E                       3594 12$:
      00145E A0 31            [ 1] 3595 	sub a,#TK_GT  
      001460 48               [ 1] 3596 	sll a 
      001461 5F               [ 1] 3597 	clrw x 
      001462 97               [ 1] 3598 	ld xl,a 
      001463 1C 14 88         [ 2] 3599 	addw x,#relop_str 
      001466 FE               [ 2] 3600 	ldw x,(x)
      001467 CD 02 B3         [ 4] 3601 	call puts 
      00146A 20 B7            [ 2] 3602 	jra 82$
      00146C                       3603 20$: 
      00146C A6 0D            [ 1] 3604 	ld a,#CR 
      00146E CD 02 A0         [ 4] 3605 	call putc
      001471 7B 02            [ 1] 3606 	ld a,(WIDTH_SAV,sp) 
      001473 C7 00 24         [ 1] 3607 	ld tab_width,a 
      001476 7B 01            [ 1] 3608 	ld a,(BASE_SAV,sp) 
      001478 C7 00 0A         [ 1] 3609 	ld base,a
      00147B                       3610 	_drop VSIZE 
      00147B 5B 05            [ 2]    1     addw sp,#VSIZE 
      00147D 81               [ 4] 3611 	ret 
                                   3612 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00147E 40 28 29 2C 23        3613 single_char: .byte '@','(',')',',','#'
      001483 2B 2D                 3614 add_char: .byte '+','-'
      001485 2A 2F 25              3615 mul_char: .byte '*','/','%'
      001488 14 94 14 96 14 98 14  3616 relop_str: .word gt,equal,ge,lt,le,ne 
             9B 14 9D 14 A0
      001494 3E 00                 3617 gt: .asciz ">"
      001496 3D 00                 3618 equal: .asciz "="
      001498 3E 3D 00              3619 ge: .asciz ">="
      00149B 3C 00                 3620 lt: .asciz "<"
      00149D 3C 3D 00              3621 le: .asciz "<="
      0014A0 3C 3E 00              3622 ne:  .asciz "<>"
                                   3623 
                                   3624 
                                   3625 ;---------------------------------
                                   3626 ; BASIC: PRINT|? arg_list 
                                   3627 ; print values from argument list
                                   3628 ;----------------------------------
                           000001  3629 	COMMA=1
                           000001  3630 	VSIZE=1
      0014A3                       3631 print:
      0014A3 4B 00            [ 1] 3632 push #0 ; local variable COMMA 
      0014A5                       3633 reset_comma:
      0014A5 0F 01            [ 1] 3634 	clr (COMMA,sp)
      0014A7                       3635 prt_loop:
      0014A7 CD 09 63         [ 4] 3636 	call next_token
      0014AA A1 02            [ 1] 3637 	cp a,#CMD_END 
      0014AC 25 5A            [ 1] 3638 	jrult print_exit ; colon or end of line 
      0014AE A1 02            [ 1] 3639 	cp a,#TK_QSTR
      0014B0 27 12            [ 1] 3640 	jreq 1$
      0014B2 A1 03            [ 1] 3641 	cp a,#TK_CHAR 
      0014B4 27 13            [ 1] 3642 	jreq 2$ 
      0014B6 A1 82            [ 1] 3643 	cp a,#TK_CFUNC 
      0014B8 27 15            [ 1] 3644 	jreq 3$
      0014BA A1 09            [ 1] 3645 	cp a,#TK_COMMA 
      0014BC 27 18            [ 1] 3646 	jreq 4$
      0014BE A1 0A            [ 1] 3647 	cp a,#TK_SHARP 
      0014C0 27 1B            [ 1] 3648 	jreq 5$
      0014C2 20 2B            [ 2] 3649 	jra 7$ 
      0014C4                       3650 1$:	; print string 
      0014C4 CD 02 B3         [ 4] 3651 	call puts
      0014C7 20 DC            [ 2] 3652 	jra reset_comma
      0014C9                       3653 2$:	; print character 
      0014C9 9F               [ 1] 3654 	ld a,xl 
      0014CA CD 02 A0         [ 4] 3655 	call putc 
      0014CD 20 D6            [ 2] 3656 	jra reset_comma 
      0014CF                       3657 3$: ; print character function value  	
      0014CF FD               [ 4] 3658 	call (x)
      0014D0 9F               [ 1] 3659 	ld a,xl 
      0014D1 CD 02 A0         [ 4] 3660 	call putc
      0014D4 20 CF            [ 2] 3661 	jra reset_comma 
      0014D6                       3662 4$: ; set comma state 
      0014D6 A6 FF            [ 1] 3663 	ld a,#255 
      0014D8 6B 01            [ 1] 3664 	ld (COMMA,sp),a  
      0014DA CC 14 A7         [ 2] 3665 	jp prt_loop   
      0014DD                       3666 5$: ; # character must be followed by an integer   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014DD CD 09 63         [ 4] 3667 	call next_token
      0014E0 A1 84            [ 1] 3668 	cp a,#TK_INTGR 
      0014E2 27 03            [ 1] 3669 	jreq 6$
      0014E4 CC 08 71         [ 2] 3670 	jp syntax_error 
      0014E7                       3671 6$: ; set tab width
      0014E7 9F               [ 1] 3672 	ld a,xl 
      0014E8 A4 0F            [ 1] 3673 	and a,#15 
      0014EA C7 00 24         [ 1] 3674 	ld tab_width,a 
      0014ED 20 B6            [ 2] 3675 	jra reset_comma 
      0014EF                       3676 7$:	
      0014EF                       3677 	_unget_token
      0014EF 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0014F4 CD 11 A7         [ 4] 3678 	call relation 
      0014F7 A1 84            [ 1] 3679 	cp a,#TK_INTGR
      0014F9 27 08            [ 1] 3680 	jreq 8$
      0014FB                       3681 	_unget_token
      0014FB 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001500 CC 15 08         [ 2] 3682 	jp print_exit 
      001503 CD 0A 00         [ 4] 3683 8$: call print_int 
      001506 20 9D            [ 2] 3684 	jra reset_comma 
      001508                       3685 print_exit:
      001508 0D 01            [ 1] 3686 	tnz (COMMA,sp)
      00150A 26 05            [ 1] 3687 	jrne 9$
      00150C A6 0D            [ 1] 3688 	ld a,#CR 
      00150E CD 02 A0         [ 4] 3689     call putc 
      001511                       3690 9$:	_drop VSIZE 
      001511 5B 01            [ 2]    1     addw sp,#VSIZE 
      001513 81               [ 4] 3691 	ret 
                                   3692 
      001514                       3693 print_type: 
                                   3694 
                                   3695 ;----------------------
                                   3696 ; 'save_context' and
                                   3697 ; 'rest_context' must be 
                                   3698 ; called at the same 
                                   3699 ; call stack depth 
                                   3700 ; i.e. SP must have the 
                                   3701 ; save value at  
                                   3702 ; entry point of both 
                                   3703 ; routine. 
                                   3704 ;---------------------
                           000004  3705 	CTXT_SIZE=4 ; size of saved data 
                                   3706 ;--------------------
                                   3707 ; save current BASIC
                                   3708 ; interpreter context 
                                   3709 ; on stack 
                                   3710 ;--------------------
      001514                       3711 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001514                       3712 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001514                       3713 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001514                       3714 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001514                       3715 save_context:
      001514 CE 00 04         [ 2] 3716 	ldw x,basicptr 
      001517 1F 03            [ 2] 3717 	ldw (BPTR,sp),x
      001519 C6 00 01         [ 1] 3718 	ld a,in 
      00151C 6B 05            [ 1] 3719 	ld (IN,sp),a
      00151E C6 00 03         [ 1] 3720 	ld a,count 
      001521 6B 06            [ 1] 3721 	ld (CNT,sp),a  
      001523 81               [ 4] 3722 	ret
                                   3723 
                                   3724 ;-----------------------
                                   3725 ; restore previously saved 
                                   3726 ; BASIC interpreter context 
                                   3727 ; from stack 
                                   3728 ;-------------------------
      001524                       3729 rest_context:
      001524 1E 03            [ 2] 3730 	ldw x,(BPTR,sp)
      001526 CF 00 04         [ 2] 3731 	ldw basicptr,x 
      001529 7B 05            [ 1] 3732 	ld a,(IN,sp)
      00152B C7 00 01         [ 1] 3733 	ld in,a
      00152E 7B 06            [ 1] 3734 	ld a,(CNT,sp)
      001530 C7 00 03         [ 1] 3735 	ld count,a  
      001533 81               [ 4] 3736 	ret
                                   3737 
                                   3738 
                                   3739 
                                   3740 ;------------------------------------------
                                   3741 ; BASIC: INPUT [string]var[,[string]var]
                                   3742 ; input value in variables 
                                   3743 ; [string] optionally can be used as prompt 
                                   3744 ;-----------------------------------------
                           000001  3745 	CX_BPTR=1
                           000003  3746 	CX_IN=3
                           000004  3747 	CX_CNT=4
                           000005  3748 	SKIP=5
                           000006  3749 	VAR_ADDR=6
                           000007  3750 	VSIZE=7
      001534                       3751 input_var:
      001534                       3752 	_vars VSIZE 
      001534 52 07            [ 2]    1     sub sp,#VSIZE 
      001536                       3753 input_loop:
      001536 0F 05            [ 1] 3754 	clr (SKIP,sp)
      001538 CD 09 63         [ 4] 3755 	call next_token 
      00153B A1 02            [ 1] 3756 	cp a,#TK_QSTR 
      00153D 26 08            [ 1] 3757 	jrne 1$ 
      00153F CD 02 B3         [ 4] 3758 	call puts 
      001542 03 05            [ 1] 3759 	cpl (SKIP,sp)
      001544 CD 09 63         [ 4] 3760 	call next_token 
      001547 A1 85            [ 1] 3761 1$: cp a,#TK_VAR  
      001549 27 03            [ 1] 3762 	jreq 2$ 
      00154B CC 08 71         [ 2] 3763 	jp syntax_error
      00154E 1F 06            [ 2] 3764 2$:	ldw (VAR_ADDR,sp),x 
      001550 0D 05            [ 1] 3765 	tnz (SKIP,sp)
      001552 26 06            [ 1] 3766 	jrne 21$ 
      001554 CD 13 65         [ 4] 3767 	call var_name 
      001557 CD 02 A0         [ 4] 3768 	call putc   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00155A                       3769 21$:
      00155A A6 3A            [ 1] 3770 	ld a,#':
      00155C CD 02 A0         [ 4] 3771 	call putc 
      00155F CD 15 14         [ 4] 3772 	call save_context 
      001562 72 5F 00 03      [ 1] 3773 	clr count  
      001566 CD 0B 31         [ 4] 3774 	call readln 
      001569 AE 16 90         [ 2] 3775 	ldw x,#tib 
      00156C 3B 00 03         [ 1] 3776 	push count
      00156F 4B 00            [ 1] 3777 	push #0 
      001571 72 FB 01         [ 2] 3778 	addw x,(1,sp)
      001574 5C               [ 2] 3779 	incw x 
      001575                       3780 	_drop 2 
      001575 5B 02            [ 2]    1     addw sp,#2 
      001577 72 5F 00 01      [ 1] 3781 	clr in 
      00157B CD 0C E6         [ 4] 3782 	call get_token
      00157E A1 84            [ 1] 3783 	cp a,#TK_INTGR
      001580 27 06            [ 1] 3784 	jreq 3$ 
      001582 CD 15 24         [ 4] 3785 	call rest_context 
      001585 CC 08 71         [ 2] 3786 	jp syntax_error
      001588 16 06            [ 2] 3787 3$: ldw y,(VAR_ADDR,sp) 
      00158A 90 FF            [ 2] 3788 	ldw (y),x 
      00158C CD 15 24         [ 4] 3789 	call rest_context
      00158F CD 09 63         [ 4] 3790 	call next_token 
      001592 A1 09            [ 1] 3791 	cp a,#TK_COMMA 
      001594 27 A0            [ 1] 3792 	jreq input_loop 
      001596 A1 01            [ 1] 3793 	cp a,#TK_COLON 
      001598 23 03            [ 2] 3794     jrule input_exit 
      00159A CC 08 71         [ 2] 3795 	jp syntax_error 
      00159D                       3796 input_exit:
      00159D                       3797 	_drop VSIZE 
      00159D 5B 07            [ 2]    1     addw sp,#VSIZE 
      00159F 81               [ 4] 3798 	ret 
                                   3799 
                                   3800 
                                   3801 ;---------------------
                                   3802 ; BASIC: REMARK | ' 
                                   3803 ; skip comment to end of line 
                                   3804 ;---------------------- 
      0015A0                       3805 remark:
      0015A0 55 00 03 00 01   [ 1] 3806 	mov in,count 
      0015A5 81               [ 4] 3807  	ret 
                                   3808 
                                   3809 
                                   3810 ;---------------------
                                   3811 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3812 ; read in loop 'addr'  
                                   3813 ; apply & 'mask' to value 
                                   3814 ; loop while result==0.  
                                   3815 ; 'xor_mask' is used to 
                                   3816 ; invert the wait logic.
                                   3817 ; i.e. loop while not 0.
                                   3818 ;---------------------
                           000001  3819 	XMASK=1 
                           000002  3820 	MASK=2
                           000003  3821 	ADDR=3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                           000004  3822 	VSIZE=4
      0015A6                       3823 wait: 
      0015A6                       3824 	_vars VSIZE
      0015A6 52 04            [ 2]    1     sub sp,#VSIZE 
      0015A8 0F 01            [ 1] 3825 	clr (XMASK,sp) 
      0015AA CD 10 6A         [ 4] 3826 	call arg_list 
      0015AD A1 02            [ 1] 3827 	cp a,#2
      0015AF 24 03            [ 1] 3828 	jruge 0$
      0015B1 CC 08 71         [ 2] 3829 	jp syntax_error 
      0015B4 A1 03            [ 1] 3830 0$:	cp a,#3
      0015B6 25 04            [ 1] 3831 	jrult 1$
      0015B8 85               [ 2] 3832 	popw x 
      0015B9 9F               [ 1] 3833 	ld a,xl
      0015BA 6B 01            [ 1] 3834 	ld (XMASK,sp),a 
      0015BC 85               [ 2] 3835 1$: popw x ; mask 
      0015BD 9F               [ 1] 3836 	ld a,xl 
      0015BE 6B 02            [ 1] 3837 	ld (MASK,sp),a 
      0015C0 85               [ 2] 3838 	popw x ; address 
      0015C1 F6               [ 1] 3839 2$:	ld a,(x)
      0015C2 14 02            [ 1] 3840 	and a,(MASK,sp)
      0015C4 18 01            [ 1] 3841 	xor a,(XMASK,sp)
      0015C6 27 F9            [ 1] 3842 	jreq 2$ 
      0015C8                       3843 	_drop VSIZE 
      0015C8 5B 04            [ 2]    1     addw sp,#VSIZE 
      0015CA 81               [ 4] 3844 	ret 
                                   3845 
                                   3846 ;---------------------
                                   3847 ; BASIC: BSET addr,mask
                                   3848 ; set bits at 'addr' corresponding 
                                   3849 ; to those of 'mask' that are at 1.
                                   3850 ; arguments:
                                   3851 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3852 ;   mask        mask|addr
                                   3853 ; output:
                                   3854 ;	none 
                                   3855 ;--------------------------
      0015CB                       3856 bit_set:
      0015CB CD 10 6A         [ 4] 3857 	call arg_list 
      0015CE A1 02            [ 1] 3858 	cp a,#2	 
      0015D0 27 03            [ 1] 3859 	jreq 1$ 
      0015D2 CC 08 71         [ 2] 3860 	jp syntax_error
      0015D5                       3861 1$: 
      0015D5 85               [ 2] 3862 	popw x ; mask 
      0015D6 9F               [ 1] 3863 	ld a,xl 
      0015D7 85               [ 2] 3864 	popw x ; addr  
      0015D8 FA               [ 1] 3865 	or a,(x)
      0015D9 F7               [ 1] 3866 	ld (x),a
      0015DA 81               [ 4] 3867 	ret 
                                   3868 
                                   3869 ;---------------------
                                   3870 ; BASIC: BRES addr,mask
                                   3871 ; reset bits at 'addr' corresponding 
                                   3872 ; to those of 'mask' that are at 1.
                                   3873 ; arguments:
                                   3874 ; 	addr 		memory address RAM|PERIPHERAL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   3875 ;   mask	    ~mask&*addr  
                                   3876 ; output:
                                   3877 ;	none 
                                   3878 ;--------------------------
      0015DB                       3879 bit_reset:
      0015DB CD 10 6A         [ 4] 3880 	call arg_list 
      0015DE A1 02            [ 1] 3881 	cp a,#2  
      0015E0 27 03            [ 1] 3882 	jreq 1$ 
      0015E2 CC 08 71         [ 2] 3883 	jp syntax_error
      0015E5                       3884 1$: 
      0015E5 85               [ 2] 3885 	popw x ; mask 
      0015E6 9F               [ 1] 3886 	ld a,xl 
      0015E7 43               [ 1] 3887 	cpl a 
      0015E8 85               [ 2] 3888 	popw x ; addr  
      0015E9 F4               [ 1] 3889 	and a,(x)
      0015EA F7               [ 1] 3890 	ld (x),a 
      0015EB 81               [ 4] 3891 	ret 
                                   3892 
                                   3893 ;---------------------
                                   3894 ; BASIC: BTOGL addr,mask
                                   3895 ; toggle bits at 'addr' corresponding 
                                   3896 ; to those of 'mask' that are at 1.
                                   3897 ; arguments:
                                   3898 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3899 ;   mask	    mask^*addr  
                                   3900 ; output:
                                   3901 ;	none 
                                   3902 ;--------------------------
      0015EC                       3903 bit_toggle:
      0015EC CD 10 6A         [ 4] 3904 	call arg_list 
      0015EF A1 02            [ 1] 3905 	cp a,#2 
      0015F1 27 03            [ 1] 3906 	jreq 1$ 
      0015F3 CC 08 71         [ 2] 3907 	jp syntax_error
      0015F6 85               [ 2] 3908 1$: popw x ; mask 
      0015F7 9F               [ 1] 3909 	ld a,xl 
      0015F8 85               [ 2] 3910 	popw x ; addr  
      0015F9 F8               [ 1] 3911 	xor a,(x)
      0015FA F7               [ 1] 3912 	ld (x),a 
      0015FB 81               [ 4] 3913 	ret 
                                   3914 
                                   3915 
                                   3916 ;---------------------
                                   3917 ; BASIC: BTEST(addr,bit)
                                   3918 ; return bit value at 'addr' 
                                   3919 ; bit is in range {0..7}.
                                   3920 ; arguments:
                                   3921 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3922 ;   bit 	    bit position {0..7}  
                                   3923 ; output:
                                   3924 ;	none 
                                   3925 ;--------------------------
      0015FC                       3926 bit_test:
      0015FC CD 10 65         [ 4] 3927 	call func_args 
      0015FF A1 02            [ 1] 3928 	cp a,#2
      001601 27 03            [ 1] 3929 	jreq 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001603 CC 08 71         [ 2] 3930 	jp syntax_error
      001606                       3931 0$:	
      001606 85               [ 2] 3932 	popw x 
      001607 9F               [ 1] 3933 	ld a,xl 
      001608 A4 07            [ 1] 3934 	and a,#7
      00160A 88               [ 1] 3935 	push a   
      00160B A6 01            [ 1] 3936 	ld a,#1 
      00160D 0D 01            [ 1] 3937 1$: tnz (1,sp)
      00160F 27 05            [ 1] 3938 	jreq 2$
      001611 48               [ 1] 3939 	sll a 
      001612 0A 01            [ 1] 3940 	dec (1,sp)
      001614 20 F7            [ 2] 3941 	jra 1$
      001616                       3942 2$: _drop 1 
      001616 5B 01            [ 2]    1     addw sp,#1 
      001618 85               [ 2] 3943 	popw x 
      001619 F4               [ 1] 3944 	and a,(x)
      00161A 27 02            [ 1] 3945 	jreq 3$
      00161C A6 01            [ 1] 3946 	ld a,#1 
      00161E 5F               [ 1] 3947 3$:	clrw x 
      00161F 97               [ 1] 3948 	ld xl,a 
      001620 A6 84            [ 1] 3949 	ld a,#TK_INTGR
      001622 81               [ 4] 3950 	ret
                                   3951 
                                   3952 
                                   3953 ;--------------------
                                   3954 ; BASIC: POKE addr,byte
                                   3955 ; put a byte at addr 
                                   3956 ;--------------------
      001623                       3957 poke:
      001623 CD 10 6A         [ 4] 3958 	call arg_list 
      001626 A1 02            [ 1] 3959 	cp a,#2
      001628 27 03            [ 1] 3960 	jreq 1$
      00162A CC 08 71         [ 2] 3961 	jp syntax_error
      00162D                       3962 1$:	
      00162D 85               [ 2] 3963 	popw x  
      00162E 9F               [ 1] 3964     ld a,xl 
      00162F 85               [ 2] 3965 	popw x 
      001630 F7               [ 1] 3966 	ld (x),a 
      001631 81               [ 4] 3967 	ret 
                                   3968 
                                   3969 ;-----------------------
                                   3970 ; BASIC: PEEK(addr)
                                   3971 ; get the byte at addr 
                                   3972 ; input:
                                   3973 ;	none 
                                   3974 ; output:
                                   3975 ;	X 		value 
                                   3976 ;-----------------------
      001632                       3977 peek:
      001632 CD 10 65         [ 4] 3978 	call func_args
      001635 A1 01            [ 1] 3979 	cp a,#1
      001637 27 03            [ 1] 3980 	jreq 1$
      001639 CC 08 71         [ 2] 3981 	jp syntax_error
      00163C 85               [ 2] 3982 1$:	popw x 
      00163D F6               [ 1] 3983 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      00163E 5F               [ 1] 3984 	clrw x 
      00163F 97               [ 1] 3985 	ld xl,a 
      001640 A6 84            [ 1] 3986 	ld a,#TK_INTGR
      001642 81               [ 4] 3987 	ret 
                                   3988 
                                   3989 ;----------------------------
                                   3990 ; BASIC: XPEEK(page,addr)
                                   3991 ; read extended memory byte
                                   3992 ; page in range {0,1,2}
                                   3993 ;----------------------------
      001643                       3994 xpeek:
      001643 CD 10 65         [ 4] 3995 	call func_args 
      001646 A1 02            [ 1] 3996 	cp a,#2 
      001648 27 03            [ 1] 3997 	jreq 1$
      00164A CC 08 71         [ 2] 3998 	jp syntax_error
      00164D                       3999 1$: 
      00164D 85               [ 2] 4000 	popw x  
      00164E CF 00 17         [ 2] 4001 	ldw farptr+1,x 
      001651 85               [ 2] 4002 	popw x 
      001652 9F               [ 1] 4003 	ld a,xl 
      001653 C7 00 16         [ 1] 4004 	ld farptr,a 
      001656 5F               [ 1] 4005 	clrw x
      001657 92 BC 00 16      [ 5] 4006 	ldf a,[farptr]
      00165B 97               [ 1] 4007 	ld xl,a 
      00165C A6 84            [ 1] 4008 	ld a,#TK_INTGR 
      00165E 81               [ 4] 4009 	ret 
                                   4010 
                                   4011 ;---------------------------
                                   4012 ; BASIC IF expr : instructions
                                   4013 ; evaluate expr and if true 
                                   4014 ; execute instructions on same line. 
                                   4015 ;----------------------------
      00165F                       4016 if: 
      00165F CD 11 A7         [ 4] 4017 	call relation 
      001662 A1 84            [ 1] 4018 	cp a,#TK_INTGR
      001664 27 03            [ 1] 4019 	jreq 1$ 
      001666 CC 08 71         [ 2] 4020 	jp syntax_error
      001669 4F               [ 1] 4021 1$:	clr a 
      00166A 5D               [ 2] 4022 	tnzw x 
      00166B 26 05            [ 1] 4023 	jrne 9$  
                                   4024 ;skip to next line
      00166D 55 00 03 00 01   [ 1] 4025 	mov in,count
      001672 81               [ 4] 4026 9$:	ret 
                                   4027 
                                   4028 ;------------------------
                                   4029 ; BASIC: FOR var=expr 
                                   4030 ; set variable to expression 
                                   4031 ; leave variable address 
                                   4032 ; on stack and set
                                   4033 ; FLOOP bit in 'flags'
                                   4034 ;-----------------
                           000001  4035 	RETL1=1 ; return address  
                           000003  4036 	FSTEP=3  ; variable increment
                           000005  4037 	LIMIT=5 ; loop limit 
                           000007  4038 	CVAR=7   ; control variable 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                           000009  4039 	INW=9   ;  in.w saved
                           00000B  4040 	BPTR=11 ; baseptr saved
                           00000A  4041 	VSIZE=10  
      001673                       4042 for: ; { -- var_addr }
      001673 85               [ 2] 4043 	popw x ; call return address 
      001674                       4044 	_vars VSIZE 
      001674 52 0A            [ 2]    1     sub sp,#VSIZE 
      001676 89               [ 2] 4045 	pushw x  ; RETL1 
      001677 A6 85            [ 1] 4046 	ld a,#TK_VAR 
      001679 CD 10 58         [ 4] 4047 	call expect
      00167C 1F 07            [ 2] 4048 	ldw (CVAR,sp),x  ; control variable 
      00167E CD 12 86         [ 4] 4049 	call let_var 
      001681 72 14 00 23      [ 1] 4050 	bset flags,#FLOOP 
                                   4051 ; open space on stack for loop data 
      001685 5F               [ 1] 4052 	clrw x 
      001686 1F 0B            [ 2] 4053 	ldw (BPTR,sp),x 
      001688 1F 09            [ 2] 4054 	ldw (INW,sp),x 
      00168A CD 09 63         [ 4] 4055 	call next_token 
      00168D A1 80            [ 1] 4056 	cp a,#TK_CMD 
      00168F 27 03            [ 1] 4057 	jreq 1$
      001691 CC 08 71         [ 2] 4058 	jp syntax_error
      001694                       4059 1$:  
      001694 A3 16 9C         [ 2] 4060 	cpw x,#to 
      001697 27 03            [ 1] 4061 	jreq to
      001699 CC 08 71         [ 2] 4062 	jp syntax_error 
                                   4063 
                                   4064 ;-----------------------------------
                                   4065 ; BASIC: TO expr 
                                   4066 ; second part of FOR loop initilization
                                   4067 ; leave limit on stack and set 
                                   4068 ; FTO bit in 'flags'
                                   4069 ;-----------------------------------
      00169C                       4070 to: ; { var_addr -- var_addr limit step }
      00169C 72 04 00 23 03   [ 2] 4071 	btjt flags,#FLOOP,1$
      0016A1 CC 08 71         [ 2] 4072 	jp syntax_error
      0016A4 CD 11 A7         [ 4] 4073 1$: call relation  
      0016A7 A1 84            [ 1] 4074 	cp a,#TK_INTGR 
      0016A9 27 03            [ 1] 4075 	jreq 2$ 
      0016AB CC 08 71         [ 2] 4076 	jp syntax_error
      0016AE 1F 05            [ 2] 4077 2$: ldw (LIMIT,sp),x
                                   4078 ;	ldw x,in.w 
      0016B0 CD 09 63         [ 4] 4079 	call next_token
      0016B3 A1 00            [ 1] 4080 	cp a,#TK_NONE  
      0016B5 27 0E            [ 1] 4081 	jreq 4$ 
      0016B7 A1 80            [ 1] 4082 	cp a,#TK_CMD
      0016B9 26 05            [ 1] 4083 	jrne 3$
      0016BB A3 16 CC         [ 2] 4084 	cpw x,#step 
      0016BE 27 0C            [ 1] 4085 	jreq step
      0016C0                       4086 3$:	
      0016C0                       4087 	_unget_token   	 
      0016C0 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0016C5                       4088 4$:	
      0016C5 AE 00 01         [ 2] 4089 	ldw x,#1   ; default step  
      0016C8 1F 03            [ 2] 4090 	ldw (FSTEP,sp),x 
      0016CA 20 14            [ 2] 4091 	jra store_loop_addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4092 
                                   4093 
                                   4094 ;----------------------------------
                                   4095 ; BASIC: STEP expr 
                                   4096 ; optional third par of FOR loop
                                   4097 ; initialization. 	
                                   4098 ;------------------------------------
      0016CC                       4099 step: ; {var limit -- var limit step}
      0016CC 72 04 00 23 03   [ 2] 4100 	btjt flags,#FLOOP,1$
      0016D1 CC 08 71         [ 2] 4101 	jp syntax_error
      0016D4 CD 11 A7         [ 4] 4102 1$: call relation
      0016D7 A1 84            [ 1] 4103 	cp a,#TK_INTGR
      0016D9 27 03            [ 1] 4104 	jreq 2$
      0016DB CC 08 71         [ 2] 4105 	jp syntax_error
      0016DE 1F 03            [ 2] 4106 2$:	ldw (FSTEP,sp),x ; step
                                   4107 ; leave loop back entry point on cstack 
                                   4108 ; cstack is 1 call deep from interpreter
      0016E0                       4109 store_loop_addr:
      0016E0 CE 00 04         [ 2] 4110 	ldw x,basicptr  
      0016E3 1F 0B            [ 2] 4111 	ldw (BPTR,sp),x 
      0016E5 CE 00 00         [ 2] 4112 	ldw x,in.w 
      0016E8 1F 09            [ 2] 4113 	ldw (INW,sp),x   
      0016EA 72 15 00 23      [ 1] 4114 	bres flags,#FLOOP 
      0016EE 72 5C 00 20      [ 1] 4115 	inc loop_depth  
      0016F2 81               [ 4] 4116 	ret 
                                   4117 
                                   4118 ;--------------------------------
                                   4119 ; BASIC: NEXT var 
                                   4120 ; FOR loop control 
                                   4121 ; increment variable with step 
                                   4122 ; and compare with limit 
                                   4123 ; loop if threshold not crossed.
                                   4124 ; else stack. 
                                   4125 ; and decrement 'loop_depth' 
                                   4126 ;--------------------------------
      0016F3                       4127 next: ; {var limit step retl1 -- [var limit step ] }
      0016F3 72 5D 00 20      [ 1] 4128 	tnz loop_depth 
      0016F7 26 03            [ 1] 4129 	jrne 1$ 
      0016F9 CC 08 71         [ 2] 4130 	jp syntax_error 
      0016FC                       4131 1$: 
      0016FC A6 85            [ 1] 4132 	ld a,#TK_VAR 
      0016FE CD 10 58         [ 4] 4133 	call expect
                                   4134 ; check for good variable after NEXT 	 
      001701 13 07            [ 2] 4135 	cpw x,(CVAR,sp)
      001703 27 03            [ 1] 4136 	jreq 2$  
      001705 CC 08 71         [ 2] 4137 	jp syntax_error ; not the good one 
      001708                       4138 2$: ; increment variable 
      001708 FE               [ 2] 4139 	ldw x,(x)  ; get var value 
      001709 72 FB 03         [ 2] 4140 	addw x,(FSTEP,sp) ; var+step 
      00170C 16 07            [ 2] 4141 	ldw y,(CVAR,sp)
      00170E 90 FF            [ 2] 4142 	ldw (y),x ; save var new value 
                                   4143 ; check sign of STEP  
      001710 A6 80            [ 1] 4144 	ld a,#0x80
      001712 15 03            [ 1] 4145 	bcp a,(FSTEP,sp)
      001714 2A 06            [ 1] 4146 	jrpl 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4147 ;negative step 
      001716 13 05            [ 2] 4148 	cpw x,(LIMIT,sp)
      001718 2F 1B            [ 1] 4149 	jrslt loop_done
      00171A 20 04            [ 2] 4150 	jra loop_back 
      00171C                       4151 4$: ; positive step
      00171C 13 05            [ 2] 4152 	cpw x,(LIMIT,sp)
      00171E 2C 15            [ 1] 4153 	jrsgt loop_done
      001720                       4154 loop_back:
      001720 1E 0B            [ 2] 4155 	ldw x,(BPTR,sp)
      001722 CF 00 04         [ 2] 4156 	ldw basicptr,x 
      001725 72 01 00 23 05   [ 2] 4157 	btjf flags,#FRUN,1$ 
      00172A E6 02            [ 1] 4158 	ld a,(2,x)
      00172C C7 00 03         [ 1] 4159 	ld count,a
      00172F 1E 09            [ 2] 4160 1$:	ldw x,(INW,sp)
      001731 CF 00 00         [ 2] 4161 	ldw in.w,x 
      001734 81               [ 4] 4162 	ret 
      001735                       4163 loop_done:
                                   4164 	; remove loop data from stack  
      001735 85               [ 2] 4165 	popw x
      001736                       4166 	_drop VSIZE 
      001736 5B 0A            [ 2]    1     addw sp,#VSIZE 
      001738 72 5A 00 20      [ 1] 4167 	dec loop_depth 
                                   4168 ;	pushw x 
                                   4169 ;	ret 
      00173C FC               [ 2] 4170 	jp (x)
                                   4171 
                                   4172 ;----------------------------
                                   4173 ; called by goto/gosub
                                   4174 ; to get target line number 
                                   4175 ;---------------------------
      00173D                       4176 get_target_line:
      00173D CD 11 A7         [ 4] 4177 	call relation 
      001740 A1 84            [ 1] 4178 	cp a,#TK_INTGR
      001742 27 03            [ 1] 4179 	jreq 1$
      001744 CC 08 71         [ 2] 4180 	jp syntax_error
      001747 CD 04 00         [ 4] 4181 1$:	call search_lineno  
      00174A 5D               [ 2] 4182 	tnzw x 
      00174B 26 05            [ 1] 4183 	jrne 2$ 
      00174D A6 05            [ 1] 4184 	ld a,#ERR_NO_LINE 
      00174F CC 08 73         [ 2] 4185 	jp tb_error 
      001752 81               [ 4] 4186 2$:	ret 
                                   4187 
                                   4188 ;------------------------
                                   4189 ; BASIC: GOTO line# 
                                   4190 ; jump to line# 
                                   4191 ; here cstack is 2 call deep from interpreter 
                                   4192 ;------------------------
      001753                       4193 goto:
      001753 72 00 00 23 06   [ 2] 4194 	btjt flags,#FRUN,0$ 
      001758 A6 06            [ 1] 4195 	ld a,#ERR_RUN_ONLY
      00175A CC 08 73         [ 2] 4196 	jp tb_error 
      00175D 81               [ 4] 4197 	ret 
      00175E CD 17 3D         [ 4] 4198 0$:	call get_target_line
      001761                       4199 jp_to_target:
      001761 CF 00 04         [ 2] 4200 	ldw basicptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001764 E6 02            [ 1] 4201 	ld a,(2,x)
      001766 C7 00 03         [ 1] 4202 	ld count,a 
      001769 35 03 00 01      [ 1] 4203 	mov in,#3 
      00176D 81               [ 4] 4204 	ret 
                                   4205 
                                   4206 
                                   4207 ;--------------------
                                   4208 ; BASIC: GOSUB line#
                                   4209 ; basic subroutine call
                                   4210 ; actual line# and basicptr 
                                   4211 ; are saved on cstack
                                   4212 ; here cstack is 2 call deep from interpreter 
                                   4213 ;--------------------
                           000003  4214 	RET_ADDR=3
                           000005  4215 	RET_INW=5
                           000004  4216 	VSIZE=4  
      00176E                       4217 gosub:
      00176E 72 00 00 23 06   [ 2] 4218 	btjt flags,#FRUN,0$ 
      001773 A6 06            [ 1] 4219 	ld a,#ERR_RUN_ONLY
      001775 CC 08 73         [ 2] 4220 	jp tb_error 
      001778 81               [ 4] 4221 	ret 
      001779 85               [ 2] 4222 0$:	popw x 
      00177A                       4223 	_vars VSIZE  
      00177A 52 04            [ 2]    1     sub sp,#VSIZE 
      00177C 89               [ 2] 4224 	pushw x 
      00177D CE 00 04         [ 2] 4225 	ldw x,basicptr
      001780 1F 03            [ 2] 4226 	ldw (RET_ADDR,sp),x 
      001782 CD 17 3D         [ 4] 4227 	call get_target_line  
      001785 89               [ 2] 4228 	pushw x 
      001786 CE 00 00         [ 2] 4229 	ldw x,in.w 
      001789 1F 07            [ 2] 4230 	ldw (RET_INW+2,sp),x
      00178B 85               [ 2] 4231 	popw x 
      00178C 20 D3            [ 2] 4232 	jra jp_to_target
                                   4233 
                                   4234 ;------------------------
                                   4235 ; BASIC: RETURN 
                                   4236 ; exit from a subroutine 
                                   4237 ; 
                                   4238 ;------------------------
      00178E                       4239 return:
      00178E 72 00 00 23 05   [ 2] 4240 	btjt flags,#FRUN,0$ 
      001793 A6 06            [ 1] 4241 	ld a,#ERR_RUN_ONLY
      001795 CC 08 73         [ 2] 4242 	jp tb_error 
      001798                       4243 0$:	
      001798 1E 03            [ 2] 4244 	ldw x,(RET_ADDR,sp) 
      00179A CF 00 04         [ 2] 4245 	ldw basicptr,x
      00179D E6 02            [ 1] 4246 	ld a,(2,x)
      00179F C7 00 03         [ 1] 4247 	ld count,a  
      0017A2 1E 05            [ 2] 4248 	ldw x,(RET_INW,sp)
      0017A4 CF 00 00         [ 2] 4249 	ldw in.w,x 
      0017A7 85               [ 2] 4250 	popw x 
      0017A8                       4251 	_drop VSIZE 
      0017A8 5B 04            [ 2]    1     addw sp,#VSIZE 
      0017AA 89               [ 2] 4252 	pushw x
      0017AB 81               [ 4] 4253 	ret  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4254 
                                   4255 
                                   4256 ;----------------------------------
                                   4257 ; BASIC: RUN
                                   4258 ; run BASIC program in RAM
                                   4259 ;----------------------------------- 
      0017AC                       4260 run: 
      0017AC 72 01 00 23 02   [ 2] 4261 	btjf flags,#FRUN,0$  
      0017B1 4F               [ 1] 4262 	clr a 
      0017B2 81               [ 4] 4263 	ret
      0017B3                       4264 0$: 
      0017B3 72 09 00 23 12   [ 2] 4265 	btjf flags,#FBREAK,1$
      0017B8                       4266 	_drop 2 
      0017B8 5B 02            [ 2]    1     addw sp,#2 
      0017BA CD 15 24         [ 4] 4267 	call rest_context
      0017BD                       4268 	_drop CTXT_SIZE 
      0017BD 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0017BF 72 19 00 23      [ 1] 4269 	bres flags,#FBREAK 
      0017C3 72 10 00 23      [ 1] 4270 	bset flags,#FRUN 
      0017C7 CC 09 17         [ 2] 4271 	jp interpreter 
      0017CA CE 00 1C         [ 2] 4272 1$:	ldw x,txtbgn
      0017CD C3 00 1E         [ 2] 4273 	cpw x,txtend 
      0017D0 2B 0C            [ 1] 4274 	jrmi run_it 
      0017D2 AE 08 0C         [ 2] 4275 	ldw x,#err_no_prog
      0017D5 CD 02 B3         [ 4] 4276 	call puts 
      0017D8 55 00 03 00 01   [ 1] 4277 	mov in,count
      0017DD 81               [ 4] 4278 	ret 
      0017DE                       4279 run_it:	 
      0017DE CD 12 53         [ 4] 4280     call ubound 
      0017E1                       4281 	_drop 2 ; drop return address 
      0017E1 5B 02            [ 2]    1     addw sp,#2 
                                   4282 ; clear data pointer 
      0017E3 5F               [ 1] 4283 	clrw x 
      0017E4 CF 00 06         [ 2] 4284 	ldw data_ptr,x 
      0017E7 72 5F 00 08      [ 1] 4285 	clr data_ofs 
      0017EB 72 5F 00 09      [ 1] 4286 	clr data_len 
                                   4287 ; initialize BASIC pointer 
      0017EF CE 00 1C         [ 2] 4288 	ldw x,txtbgn 
      0017F2 CF 00 04         [ 2] 4289 	ldw basicptr,x 
      0017F5 E6 02            [ 1] 4290 	ld a,(2,x)
      0017F7 C7 00 03         [ 1] 4291 	ld count,a
      0017FA 35 03 00 01      [ 1] 4292 	mov in,#3	
      0017FE 72 10 00 23      [ 1] 4293 	bset flags,#FRUN 
      001802 CC 09 17         [ 2] 4294 	jp interpreter 
                                   4295 
                                   4296 
                                   4297 ;----------------------
                                   4298 ; BASIC: END
                                   4299 ; end running program
                                   4300 ;---------------------- 
      001805                       4301 cmd_end: 
                                   4302 ; clean stack 
      001805 AE 17 FF         [ 2] 4303 	ldw x,#STACK_EMPTY
      001808 94               [ 1] 4304 	ldw sp,x 
      001809 CC 08 F8         [ 2] 4305 	jp warm_start
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4306 
                                   4307 
                                   4308 ;-----------------------
                                   4309 ; BASIC: TONE expr1,expr2
                                   4310 ; used TIMER2 channel 1
                                   4311 ; to produce a tone 
                                   4312 ; arguments:
                                   4313 ;    expr1   frequency 
                                   4314 ;    expr2   duration msec.
                                   4315 ;---------------------------
      00180C                       4316 tone:
      00180C CD 10 6A         [ 4] 4317 	call arg_list 
      00180F A1 02            [ 1] 4318 	cp a,#2 
      001811 27 03            [ 1] 4319 	jreq 1$
      001813 CC 08 71         [ 2] 4320 	jp syntax_error 
      001816                       4321 1$: 
      001816 85               [ 2] 4322 	popw x ; duration
      001817 90 85            [ 2] 4323 	popw y ; frequency 
      001819                       4324 beep:  
      001819 89               [ 2] 4325 	pushw x 
      00181A AE F4 24         [ 2] 4326 	ldw x,#TIM2_CLK_FREQ
      00181D 65               [ 2] 4327 	divw x,y 
                                   4328 ; round to nearest integer 
      00181E 90 A3 7A 12      [ 2] 4329 	cpw y,#TIM2_CLK_FREQ/2
      001822 2B 01            [ 1] 4330 	jrmi 2$
      001824 5C               [ 2] 4331 	incw x 
      001825                       4332 2$:	 
      001825 9E               [ 1] 4333 	ld a,xh 
      001826 C7 53 0D         [ 1] 4334 	ld TIM2_ARRH,a 
      001829 9F               [ 1] 4335 	ld a,xl 
      00182A C7 53 0E         [ 1] 4336 	ld TIM2_ARRL,a 
                                   4337 ; 50% duty cycle 
      00182D 8C               [ 1] 4338 	ccf 
      00182E 56               [ 2] 4339 	rrcw x 
      00182F 9E               [ 1] 4340 	ld a,xh 
      001830 C7 53 0F         [ 1] 4341 	ld TIM2_CCR1H,a 
      001833 9F               [ 1] 4342 	ld a,xl
      001834 C7 53 10         [ 1] 4343 	ld TIM2_CCR1L,a
      001837 72 10 53 08      [ 1] 4344 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      00183B 72 10 53 00      [ 1] 4345 	bset TIM2_CR1,#TIM2_CR1_CEN
      00183F 72 10 53 04      [ 1] 4346 	bset TIM2_EGR,#TIM2_EGR_UG
      001843 85               [ 2] 4347 	popw x 
      001844 CF 00 10         [ 2] 4348 	ldw timer,x 
      001847 CE 00 10         [ 2] 4349 3$: ldw x,timer 	
      00184A 26 FB            [ 1] 4350 	jrne 3$ 
      00184C 72 11 53 08      [ 1] 4351 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      001850 72 11 53 00      [ 1] 4352 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001854 81               [ 4] 4353 	ret 
                                   4354 
                                   4355 ;-------------------------------
                                   4356 ; BASIC: ADCON 0|1 [,divisor]  
                                   4357 ; disable/enanble ADC 
                                   4358 ;-------------------------------
                           000003  4359 	ONOFF=3 
                           000001  4360 	DIVSOR=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                           000004  4361 	VSIZE=4 
      001855                       4362 power_adc:
      001855 CD 10 6A         [ 4] 4363 	call arg_list 
      001858 A1 02            [ 1] 4364 	cp a,#2	
      00185A 27 0B            [ 1] 4365 	jreq 1$
      00185C A1 01            [ 1] 4366 	cp a,#1 
      00185E 27 03            [ 1] 4367 	jreq 0$ 
      001860 CC 08 71         [ 2] 4368 	jp syntax_error 
      001863 AE 00 00         [ 2] 4369 0$: ldw x,#0
      001866 89               [ 2] 4370 	pushw x  ; divisor 
      001867 1E 03            [ 2] 4371 1$: ldw x,(ONOFF,sp)
      001869 5D               [ 2] 4372 	tnzw x 
      00186A 27 1A            [ 1] 4373 	jreq 2$ 
      00186C 1E 01            [ 2] 4374 	ldw x,(DIVSOR,sp) ; divisor 
      00186E 9F               [ 1] 4375 	ld a,xl
      00186F A4 07            [ 1] 4376 	and a,#7
      001871 4E               [ 1] 4377 	swap a 
      001872 C7 54 01         [ 1] 4378 	ld ADC_CR1,a
      001875 72 16 50 CA      [ 1] 4379 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001879 72 10 54 01      [ 1] 4380 	bset ADC_CR1,#ADC_CR1_ADON 
      00187D                       4381 	_usec_dly 7 
      00187D AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001880 5A               [ 2]    2     decw x
      001881 9D               [ 1]    3     nop 
      001882 26 FA            [ 1]    4     jrne .-4
      001884 20 08            [ 2] 4382 	jra 3$
      001886 72 11 54 01      [ 1] 4383 2$: bres ADC_CR1,#ADC_CR1_ADON
      00188A 72 17 50 CA      [ 1] 4384 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00188E                       4385 3$:	_drop VSIZE 
      00188E 5B 04            [ 2]    1     addw sp,#VSIZE 
      001890 81               [ 4] 4386 	ret
                                   4387 
                                   4388 ;-----------------------------
                                   4389 ; BASIC: ADCREAD (channel)
                                   4390 ; read adc channel {0..5}
                                   4391 ; output:
                                   4392 ;   A 		TK_INTGR 
                                   4393 ;   X 		value 
                                   4394 ;-----------------------------
      001891                       4395 analog_read:
      001891 CD 10 65         [ 4] 4396 	call func_args 
      001894 A1 01            [ 1] 4397 	cp a,#1 
      001896 27 03            [ 1] 4398 	jreq 1$
      001898 CC 08 71         [ 2] 4399 	jp syntax_error
      00189B 85               [ 2] 4400 1$: popw x 
      00189C A3 00 05         [ 2] 4401 	cpw x,#5 
      00189F 23 05            [ 2] 4402 	jrule 2$
      0018A1 A6 0A            [ 1] 4403 	ld a,#ERR_BAD_VALUE
      0018A3 CC 08 73         [ 2] 4404 	jp tb_error 
      0018A6 9F               [ 1] 4405 2$: ld a,xl
      0018A7 C7 00 0D         [ 1] 4406 	ld acc8,a 
      0018AA A6 05            [ 1] 4407 	ld a,#5
      0018AC C0 00 0D         [ 1] 4408 	sub a,acc8 
      0018AF C7 54 00         [ 1] 4409 	ld ADC_CSR,a
      0018B2 72 16 54 02      [ 1] 4410 	bset ADC_CR2,#ADC_CR2_ALIGN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0018B6 72 10 54 01      [ 1] 4411 	bset ADC_CR1,#ADC_CR1_ADON
      0018BA 72 0F 54 00 FB   [ 2] 4412 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0018BF CE 54 04         [ 2] 4413 	ldw x,ADC_DRH
      0018C2 A6 84            [ 1] 4414 	ld a,#TK_INTGR
      0018C4 81               [ 4] 4415 	ret 
                                   4416 
                                   4417 ;-----------------------
                                   4418 ; BASIC: DREAD(pin)
                                   4419 ; Arduino pins 
                                   4420 ; read state of a digital pin 
                                   4421 ; pin# {0..15}
                                   4422 ; output:
                                   4423 ;    A 		TK_INTGR
                                   4424 ;    X      0|1 
                                   4425 ;-------------------------
                           000001  4426 	PINNO=1
                           000001  4427 	VSIZE=1
      0018C5                       4428 digital_read:
      0018C5                       4429 	_vars VSIZE 
      0018C5 52 01            [ 2]    1     sub sp,#VSIZE 
      0018C7 CD 10 65         [ 4] 4430 	call func_args
      0018CA A1 01            [ 1] 4431 	cp a,#1
      0018CC 27 03            [ 1] 4432 	jreq 1$
      0018CE CC 08 71         [ 2] 4433 	jp syntax_error
      0018D1 85               [ 2] 4434 1$: popw x 
      0018D2 A3 00 0F         [ 2] 4435 	cpw x,#15 
      0018D5 23 05            [ 2] 4436 	jrule 2$
      0018D7 A6 0A            [ 1] 4437 	ld a,#ERR_BAD_VALUE
      0018D9 CC 08 73         [ 2] 4438 	jp tb_error 
      0018DC CD 1F 00         [ 4] 4439 2$:	call select_pin 
      0018DF 6B 01            [ 1] 4440 	ld (PINNO,sp),a
      0018E1 E6 01            [ 1] 4441 	ld a,(GPIO_IDR,x)
      0018E3 0D 01            [ 1] 4442 	tnz (PINNO,sp)
      0018E5 27 05            [ 1] 4443 	jreq 8$
      0018E7 44               [ 1] 4444 3$: srl a 
      0018E8 0A 01            [ 1] 4445 	dec (PINNO,sp)
      0018EA 26 FB            [ 1] 4446 	jrne 3$ 
      0018EC A4 01            [ 1] 4447 8$: and a,#1 
      0018EE 5F               [ 1] 4448 	clrw x 
      0018EF 97               [ 1] 4449 	ld xl,a 
      0018F0 A6 84            [ 1] 4450 	ld a,#TK_INTGR
      0018F2                       4451 	_drop VSIZE
      0018F2 5B 01            [ 2]    1     addw sp,#VSIZE 
      0018F4 81               [ 4] 4452 	ret
                                   4453 
                                   4454 ;-----------------------
                                   4455 ; BASIC: DWRITE pin,0|1
                                   4456 ; Arduino pins 
                                   4457 ; write to a digital pin 
                                   4458 ; pin# {0..15}
                                   4459 ; output:
                                   4460 ;    A 		TK_INTGR
                                   4461 ;    X      0|1 
                                   4462 ;-------------------------
                           000001  4463 	PINNO=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                           000002  4464 	PINVAL=2
                           000002  4465 	VSIZE=2
      0018F5                       4466 digital_write:
      0018F5                       4467 	_vars VSIZE 
      0018F5 52 02            [ 2]    1     sub sp,#VSIZE 
      0018F7 CD 10 6A         [ 4] 4468 	call arg_list  
      0018FA A1 02            [ 1] 4469 	cp a,#2 
      0018FC 27 03            [ 1] 4470 	jreq 1$
      0018FE CC 08 71         [ 2] 4471 	jp syntax_error
      001901 85               [ 2] 4472 1$: popw x 
      001902 9F               [ 1] 4473 	ld a,xl 
      001903 6B 02            [ 1] 4474 	ld (PINVAL,sp),a
      001905 85               [ 2] 4475 	popw x 
      001906 A3 00 0F         [ 2] 4476 	cpw x,#15 
      001909 23 05            [ 2] 4477 	jrule 2$
      00190B A6 0A            [ 1] 4478 	ld a,#ERR_BAD_VALUE
      00190D CC 08 73         [ 2] 4479 	jp tb_error 
      001910 CD 1F 00         [ 4] 4480 2$:	call select_pin 
      001913 6B 01            [ 1] 4481 	ld (PINNO,sp),a 
      001915 A6 01            [ 1] 4482 	ld a,#1
      001917 0D 01            [ 1] 4483 	tnz (PINNO,sp)
      001919 27 05            [ 1] 4484 	jreq 4$
      00191B 48               [ 1] 4485 3$: sll a
      00191C 0A 01            [ 1] 4486 	dec (PINNO,sp)
      00191E 26 FB            [ 1] 4487 	jrne 3$
      001920 0D 02            [ 1] 4488 4$: tnz (PINVAL,sp)
      001922 26 05            [ 1] 4489 	jrne 5$
      001924 43               [ 1] 4490 	cpl a 
      001925 E4 00            [ 1] 4491 	and a,(GPIO_ODR,x)
      001927 20 02            [ 2] 4492 	jra 8$
      001929 EA 00            [ 1] 4493 5$: or a,(GPIO_ODR,x)
      00192B E7 00            [ 1] 4494 8$: ld (GPIO_ODR,x),a 
      00192D                       4495 	_drop VSIZE 
      00192D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00192F 81               [ 4] 4496 	ret
                                   4497 
                                   4498 
                                   4499 ;-----------------------
                                   4500 ; BASIC: STOP
                                   4501 ; stop progam execution  
                                   4502 ; without resetting pointers 
                                   4503 ; the program is resumed
                                   4504 ; with RUN 
                                   4505 ;-------------------------
      001930                       4506 stop:
      001930 72 00 00 23 02   [ 2] 4507 	btjt flags,#FRUN,2$
      001935 4F               [ 1] 4508 	clr a
      001936 81               [ 4] 4509 	ret 
      001937                       4510 2$:	 
                                   4511 ; create space on cstack to save context 
      001937 AE 19 5E         [ 2] 4512 	ldw x,#break_point 
      00193A CD 02 B3         [ 4] 4513 	call puts 
      00193D                       4514 	_drop 2 ;drop return address 
      00193D 5B 02            [ 2]    1     addw sp,#2 
      00193F                       4515 	_vars CTXT_SIZE ; context size 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      00193F 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      001941 CD 15 14         [ 4] 4516 	call save_context 
      001944 AE 16 90         [ 2] 4517 	ldw x,#tib 
      001947 CF 00 04         [ 2] 4518 	ldw basicptr,x
      00194A 7F               [ 1] 4519 	clr (x)
      00194B 72 5F 00 03      [ 1] 4520 	clr count  
      00194F 5F               [ 1] 4521 	clrw x 
      001950 CF 00 00         [ 2] 4522 	ldw in.w,x
      001953 72 11 00 23      [ 1] 4523 	bres flags,#FRUN 
      001957 72 18 00 23      [ 1] 4524 	bset flags,#FBREAK
      00195B CC 09 17         [ 2] 4525 	jp interpreter 
      00195E 0A 62 72 65 61 6B 20  4526 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4527 
                                   4528 ;-----------------------
                                   4529 ; BASIC: NEW
                                   4530 ; from command line only 
                                   4531 ; free program memory
                                   4532 ; and clear variables 
                                   4533 ;------------------------
      00197C                       4534 new: 
      00197C 72 01 00 23 01   [ 2] 4535 	btjf flags,#FRUN,0$ 
      001981 81               [ 4] 4536 	ret 
      001982                       4537 0$:	
      001982 CD 06 DD         [ 4] 4538 	call clear_basic 
      001985 81               [ 4] 4539 	ret 
                                   4540 	 
                                   4541 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4542 ;  file system routines
                                   4543 ;  MCU flash memory from
                                   4544 ;  0x10000-0x27fff is 
                                   4545 ;  used to store BASIC 
                                   4546 ;  program files. 
                                   4547 ;  use 128 bytes sectors
                                   4548 ;  because this is the MCU 
                                   4549 ;  row size.
                                   4550 ;  file entry aligned to row
                                   4551 ;  	name  variable length
                                   4552 ;  	size  2 bytes  
                                   4553 ; 	data  variable length 
                                   4554 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4555 
                                   4556 ;---------------------------
                                   4557 ; fill pad with zeros 
                                   4558 ;--------------------------
      001986                       4559 zero_pad:
      001986 AE 16 E0         [ 2] 4560 	ldw x,#pad 
      001989 A6 80            [ 1] 4561 	ld a,#PAD_SIZE 
      00198B 7F               [ 1] 4562 1$:	clr (x)
      00198C 5C               [ 2] 4563 	incw x 
      00198D 4A               [ 1] 4564 	dec a 
      00198E 26 FB            [ 1] 4565 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001990 81               [ 4] 4566 	ret 
                                   4567 
                                   4568 ;--------------------------
                                   4569 ; align farptr to BLOCK_SIZE 
                                   4570 ;---------------------------
      001991                       4571 row_align:
      001991 A6 7F            [ 1] 4572 	ld a,#0x7f 
      001993 C4 00 18         [ 1] 4573 	and a,farptr+2 
      001996 27 13            [ 1] 4574 	jreq 1$ 
      001998 CE 00 17         [ 2] 4575 	ldw x,farptr+1 
      00199B 1C 00 80         [ 2] 4576 	addw x,#BLOCK_SIZE 
      00199E 24 04            [ 1] 4577 	jrnc 0$
      0019A0 72 5C 00 16      [ 1] 4578 	inc farptr 
      0019A4 9F               [ 1] 4579 0$: ld a,xl 
      0019A5 A4 80            [ 1] 4580 	and a,#0x80
      0019A7 97               [ 1] 4581 	ld xl,a
      0019A8 CF 00 17         [ 2] 4582 	ldw farptr+1,x  	
      0019AB 81               [ 4] 4583 1$:	ret
                                   4584 
                                   4585 ;--------------------
                                   4586 ; input:
                                   4587 ;   X     increment 
                                   4588 ; output:
                                   4589 ;   farptr  incremented 
                                   4590 ;---------------------
      0019AC                       4591 incr_farptr:
      0019AC 72 BB 00 17      [ 2] 4592 	addw x,farptr+1 
      0019B0 24 04            [ 1] 4593 	jrnc 1$
      0019B2 72 5C 00 16      [ 1] 4594 	inc farptr 
      0019B6 CF 00 17         [ 2] 4595 1$:	ldw farptr+1,x  
      0019B9 81               [ 4] 4596 	ret 
                                   4597 
                                   4598 ;------------------------------
                                   4599 ; extended flash memory used as FLASH_DRIVE 
                                   4600 ; seek end of used flash drive   
                                   4601 ; starting at 0x10000 address.
                                   4602 ; 4 consecutives 0 bytes signal free space. 
                                   4603 ; input:
                                   4604 ;	none
                                   4605 ; output:
                                   4606 ;   ffree     free_addr| 0 if memory full.
                                   4607 ;------------------------------
      0019BA                       4608 seek_fdrive:
                                   4609 ; start scan at 0x10000 address 
      0019BA A6 01            [ 1] 4610 	ld a,#1
      0019BC C7 00 16         [ 1] 4611 	ld farptr,a 
      0019BF 5F               [ 1] 4612 	clrw x 
      0019C0 CF 00 17         [ 2] 4613 	ldw farptr+1,x 
      0019C3                       4614 1$:
      0019C3 AE 00 03         [ 2] 4615 	ldw x,#3  
      0019C6 92 AF 00 16      [ 5] 4616 2$:	ldf a,([farptr],x) 
      0019CA 26 05            [ 1] 4617 	jrne 3$
      0019CC 5A               [ 2] 4618 	decw x
      0019CD 2A F7            [ 1] 4619 	jrpl 2$
      0019CF 20 1B            [ 2] 4620 	jra 4$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0019D1 AE 00 80         [ 2] 4621 3$:	ldw x,#BLOCK_SIZE 
      0019D4 CD 19 AC         [ 4] 4622 	call incr_farptr
      0019D7 AE 02 7F         [ 2] 4623 	ldw x,#0x27f  
      0019DA C3 00 16         [ 2] 4624 	cpw x,farptr
      0019DD 2A E4            [ 1] 4625 	jrpl 1$
                                   4626 ; drive full 
      0019DF 72 5F 00 19      [ 1] 4627 	clr ffree 
      0019E3 72 5F 00 1A      [ 1] 4628 	clr ffree+1 
      0019E7 72 5F 00 1B      [ 1] 4629 	clr ffree+2 
      0019EB 81               [ 4] 4630 	ret
      0019EC                       4631 4$: ; copy farptr to ffree	 
      0019EC CE 00 16         [ 2] 4632 	ldw x,farptr 
      0019EF C6 00 18         [ 1] 4633 	ld a,farptr+2 
      0019F2 CF 00 19         [ 2] 4634 	ldw ffree,x 
      0019F5 C7 00 1B         [ 1] 4635 	ld ffree+2,a  
      0019F8 81               [ 4] 4636 	ret 
                                   4637 
                                   4638 ;-----------------------
                                   4639 ; compare file name 
                                   4640 ; with name pointed by Y  
                                   4641 ; input:
                                   4642 ;   farptr   file name 
                                   4643 ;   Y        target name 
                                   4644 ; output:
                                   4645 ;   farptr 	 at file_name
                                   4646 ;   X 		 farptr[x] point at size field  
                                   4647 ;   Carry    0|1 no match|match  
                                   4648 ;----------------------
      0019F9                       4649 cmp_name:
      0019F9 5F               [ 1] 4650 	clrw x
      0019FA 92 AF 00 16      [ 5] 4651 1$:	ldf a,([farptr],x)
      0019FE 90 F1            [ 1] 4652 	cp a,(y)
      001A00 26 08            [ 1] 4653 	jrne 4$
      001A02 4D               [ 1] 4654 	tnz a 
      001A03 27 12            [ 1] 4655 	jreq 9$ 
      001A05 5C               [ 2] 4656     incw x 
      001A06 90 5C            [ 2] 4657 	incw y 
      001A08 20 F0            [ 2] 4658 	jra 1$
      001A0A                       4659 4$: ;no match 
      001A0A 4D               [ 1] 4660 	tnz a 
      001A0B 27 07            [ 1] 4661 	jreq 5$
      001A0D 5C               [ 2] 4662 	incw x 
      001A0E 92 AF 00 16      [ 5] 4663 	ldf a,([farptr],x)
      001A12 20 F6            [ 2] 4664 	jra 4$  
      001A14 5C               [ 2] 4665 5$:	incw x ; farptr[x] point at 'size' field 
      001A15 98               [ 1] 4666 	rcf 
      001A16 81               [ 4] 4667 	ret
      001A17                       4668 9$: ; match  
      001A17 5C               [ 2] 4669 	incw x  ; farptr[x] at 'size' field 
      001A18 99               [ 1] 4670 	scf 
      001A19 81               [ 4] 4671 	ret 
                                   4672 
                                   4673 ;-----------------------
                                   4674 ; search file in 
                                   4675 ; flash memory 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4676 ; input:
                                   4677 ;   Y       file name  
                                   4678 ; output:
                                   4679 ;   farptr  addr at name|0
                                   4680 ;   X       offset to size field
                                   4681 ;-----------------------
                           000001  4682 	FSIZE=1
                           000003  4683 	YSAVE=3
                           000004  4684 	VSIZE=4 
      001A1A                       4685 search_file: 
      001A1A                       4686 	_vars VSIZE
      001A1A 52 04            [ 2]    1     sub sp,#VSIZE 
      001A1C 17 03            [ 2] 4687 	ldw (YSAVE,sp),y  
      001A1E 5F               [ 1] 4688 	clrw x 
      001A1F CF 00 17         [ 2] 4689 	ldw farptr+1,x 
      001A22 35 01 00 16      [ 1] 4690 	mov farptr,#1
      001A26                       4691 1$:	
                                   4692 ; check if farptr is after any file 
                                   4693 ; if  0 then so.
      001A26 92 BC 00 16      [ 5] 4694 	ldf a,[farptr]
      001A2A 27 27            [ 1] 4695 	jreq 6$
      001A2C 5F               [ 1] 4696 2$: clrw x 	
      001A2D 16 03            [ 2] 4697 	ldw y,(YSAVE,sp) 
      001A2F CD 19 F9         [ 4] 4698 	call cmp_name
      001A32 25 2F            [ 1] 4699 	jrc 9$
      001A34 92 AF 00 16      [ 5] 4700 	ldf a,([farptr],x)
      001A38 6B 01            [ 1] 4701 	ld (FSIZE,sp),a 
      001A3A 5C               [ 2] 4702 	incw x 
      001A3B 92 AF 00 16      [ 5] 4703 	ldf a,([farptr],x)
      001A3F 6B 02            [ 1] 4704 	ld (FSIZE+1,sp),a 
      001A41 5C               [ 2] 4705 	incw x 
      001A42 72 FB 01         [ 2] 4706 	addw x,(FSIZE,sp) ; skip over file data
      001A45 CD 19 AC         [ 4] 4707 	call incr_farptr
      001A48 CD 19 91         [ 4] 4708 	call row_align  
      001A4B AE 02 80         [ 2] 4709 	ldw x,#0x280
      001A4E C3 00 16         [ 2] 4710 	cpw x,farptr 
      001A51 2A D3            [ 1] 4711 	jrpl 1$
      001A53                       4712 6$: ; file not found 
      001A53 72 5F 00 16      [ 1] 4713 	clr farptr
      001A57 72 5F 00 17      [ 1] 4714 	clr farptr+1 
      001A5B 72 5F 00 18      [ 1] 4715 	clr farptr+2 
      001A5F                       4716 	_drop VSIZE 
      001A5F 5B 04            [ 2]    1     addw sp,#VSIZE 
      001A61 98               [ 1] 4717 	rcf
      001A62 81               [ 4] 4718 	ret
      001A63                       4719 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001A63                       4720 	_drop VSIZE 
      001A63 5B 04            [ 2]    1     addw sp,#VSIZE 
      001A65 99               [ 1] 4721 	scf 	
      001A66 81               [ 4] 4722 	ret
                                   4723 
                                   4724 ;--------------------------------
                                   4725 ; BASIC: SAVE "name" 
                                   4726 ; save text program in 
                                   4727 ; flash memory used as permanent
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4728 ; storage from address 0x10000-0x27fff 
                                   4729 ;--------------------------------
                           000001  4730 	BSIZE=1
                           000003  4731 	NAMEPTR=3
                           000005  4732 	XSAVE=5
                           000007  4733 	YSAVE=7
                           000008  4734 	VSIZE=8 
      001A67                       4735 save:
      001A67 72 01 00 23 05   [ 2] 4736 	btjf flags,#FRUN,0$ 
      001A6C A6 07            [ 1] 4737 	ld a,#ERR_CMD_ONLY 
      001A6E CC 08 73         [ 2] 4738 	jp tb_error
      001A71                       4739 0$:	 
      001A71 CE 00 1E         [ 2] 4740 	ldw x,txtend 
      001A74 72 B0 00 1C      [ 2] 4741 	subw x,txtbgn
      001A78 26 0C            [ 1] 4742 	jrne 1$
                                   4743 ; nothing to save 
      001A7A AE 08 0C         [ 2] 4744 	ldw x,#err_no_prog 
      001A7D CD 02 B3         [ 4] 4745 	call puts 
      001A80 55 00 03 00 01   [ 1] 4746 	mov in,count 
      001A85 81               [ 4] 4747 	ret  	
      001A86                       4748 1$:	
      001A86                       4749 	_vars VSIZE 
      001A86 52 08            [ 2]    1     sub sp,#VSIZE 
      001A88 1F 01            [ 2] 4750 	ldw (BSIZE,sp),x 
      001A8A CD 09 63         [ 4] 4751 	call next_token	
      001A8D A1 02            [ 1] 4752 	cp a,#TK_QSTR
      001A8F 27 03            [ 1] 4753 	jreq 2$
      001A91 CC 08 71         [ 2] 4754 	jp syntax_error
      001A94                       4755 2$: 
      001A94 1F 03            [ 2] 4756 	ldw (NAMEPTR,sp),x  
      001A96 CD 01 5C         [ 4] 4757 	call move_prg_to_ram ; move flashing program to 'tib' buffer 
                                   4758 ; check if enough free space 
      001A99 CD 03 92         [ 4] 4759 	call strlen 
      001A9C 1C 00 03         [ 2] 4760 	addw x,#3 
      001A9F 72 FB 01         [ 2] 4761 	addw x,(BSIZE,sp)
      001AA2 72 5D 00 19      [ 1] 4762 	tnz ffree 
      001AA6 26 0B            [ 1] 4763 	jrne 21$
      001AA8 72 B0 00 1A      [ 2] 4764 	subw x,ffree+1 
      001AAC 23 05            [ 2] 4765 	jrule 21$
      001AAE A6 0E            [ 1] 4766 	ld a,#ERR_NO_FSPACE  
      001AB0 CC 08 73         [ 2] 4767 	jp tb_error
      001AB3                       4768 21$: 
                                   4769 ; check for existing file of that name 
      001AB3 16 03            [ 2] 4770 	ldw y,(NAMEPTR,sp)	
      001AB5 CD 1A 1A         [ 4] 4771 	call search_file 
      001AB8 24 05            [ 1] 4772 	jrnc 3$ 
      001ABA A6 08            [ 1] 4773 	ld a,#ERR_DUPLICATE 
      001ABC CC 08 73         [ 2] 4774 	jp tb_error 
      001ABF                       4775 3$:	; initialize farptr 
      001ABF CE 00 19         [ 2] 4776 	ldw x,ffree 
      001AC2 C6 00 1B         [ 1] 4777 	ld a,ffree+2 
      001AC5 CF 00 16         [ 2] 4778 	ldw farptr,x 
      001AC8 C7 00 18         [ 1] 4779 	ld farptr+2,a 
                                   4780 ;** write file name to row buffer **	
      001ACB 16 03            [ 2] 4781 	ldw y,(NAMEPTR,sp)  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001ACD AE 16 E0         [ 2] 4782 	ldw x,#pad 
      001AD0 CD 03 B0         [ 4] 4783 	call strcpy
      001AD3 AE 16 E0         [ 2] 4784 	ldw x,#pad  
      001AD6 CD 03 92         [ 4] 4785 	call strlen 
      001AD9 5C               [ 2] 4786 	incw  x
      001ADA 1C 16 E0         [ 2] 4787 	addw x,#pad 
                                   4788 ; ** write file size to row buffer 
      001ADD 16 01            [ 2] 4789 	ldw y,(BSIZE,sp)
      001ADF FF               [ 2] 4790 	ldw (x),y 
      001AE0 1C 00 02         [ 2] 4791 	addw x,#2 
                                   4792 ; ** write file data to row buffer 
      001AE3 90 CE 00 1C      [ 2] 4793 	ldw y,txtbgn 
      001AE7 90 F6            [ 1] 4794 6$:	ld a,(y)
      001AE9 F7               [ 1] 4795 	ld (x),a 
      001AEA 90 5C            [ 2] 4796 	incw y
      001AEC 90 C3 00 1E      [ 2] 4797 	cpw y,txtend 
      001AF0 27 06            [ 1] 4798 	jreq 12$
      001AF2 5C               [ 2] 4799 	incw x 
      001AF3 A3 17 60         [ 2] 4800 	cpw x,#stack_full 
      001AF6 2B EF            [ 1] 4801 	jrmi 6$
      001AF8                       4802 12$:
      001AF8 17 07            [ 2] 4803 	ldw (YSAVE,sp),y 
      001AFA                       4804 14$: ; zero buffer end 
      001AFA A3 17 60         [ 2] 4805 	cpw x,#stack_full
      001AFD 27 04            [ 1] 4806 	jreq 16$
      001AFF 7F               [ 1] 4807 	clr (x)
      001B00 5C               [ 2] 4808 	incw x 
      001B01 20 F7            [ 2] 4809 	jra 14$
      001B03                       4810 16$:
      001B03 AE 16 E0         [ 2] 4811 	ldw x,#pad 
      001B06 CD 01 70         [ 4] 4812 	call write_row 
      001B09 AE 00 80         [ 2] 4813 	ldw x,#BLOCK_SIZE 
      001B0C CD 19 AC         [ 4] 4814 	call incr_farptr
      001B0F AE 16 E0         [ 2] 4815 	ldw x,#pad 
      001B12 16 07            [ 2] 4816 	ldw y,(YSAVE,sp)
      001B14 90 C3 00 1E      [ 2] 4817 	cpw y,txtend 
      001B18 2B CD            [ 1] 4818 	jrmi 6$
                                   4819 ; save farptr in ffree
      001B1A CE 00 16         [ 2] 4820 	ldw x,farptr 
      001B1D C6 00 18         [ 1] 4821 	ld a,farptr+2 
      001B20 CF 00 19         [ 2] 4822 	ldw ffree,x 
      001B23 C7 00 1B         [ 1] 4823 	ld ffree+2,a
                                   4824 ; print file size 	
      001B26 1E 01            [ 2] 4825 	ldw x,(BSIZE,sp) 
      001B28 CD 0A 00         [ 4] 4826 	call print_int 
      001B2B                       4827 	_drop VSIZE 
      001B2B 5B 08            [ 2]    1     addw sp,#VSIZE 
      001B2D 81               [ 4] 4828 	ret 
                                   4829 
                                   4830 ;----------------------
                                   4831 ; load file in RAM memory
                                   4832 ; input:
                                   4833 ;    farptr point at file size 
                                   4834 ; output:
                                   4835 ;   y point after BASIC program in RAM.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   4836 ;------------------------
      001B2E                       4837 load_file:
      001B2E CD 19 AC         [ 4] 4838 	call incr_farptr  
      001B31 CD 06 DD         [ 4] 4839 	call clear_basic  
      001B34 5F               [ 1] 4840 	clrw x
      001B35 92 AF 00 16      [ 5] 4841 	ldf a,([farptr],x)
      001B39 90 95            [ 1] 4842 	ld yh,a 
      001B3B 5C               [ 2] 4843 	incw x  
      001B3C 92 AF 00 16      [ 5] 4844 	ldf a,([farptr],x)
      001B40 5C               [ 2] 4845 	incw x 
      001B41 90 97            [ 1] 4846 	ld yl,a 
      001B43 72 B9 00 1C      [ 2] 4847 	addw y,txtbgn
      001B47 90 CF 00 1E      [ 2] 4848 	ldw txtend,y
      001B4B 90 CE 00 1C      [ 2] 4849 	ldw y,txtbgn
      001B4F                       4850 3$:	; load BASIC text 	
      001B4F 92 AF 00 16      [ 5] 4851 	ldf a,([farptr],x)
      001B53 90 F7            [ 1] 4852 	ld (y),a 
      001B55 5C               [ 2] 4853 	incw x 
      001B56 90 5C            [ 2] 4854 	incw y 
      001B58 90 C3 00 1E      [ 2] 4855 	cpw y,txtend 
      001B5C 2B F1            [ 1] 4856 	jrmi 3$
      001B5E 81               [ 4] 4857 	ret 
                                   4858 
                                   4859 ;------------------------
                                   4860 ; BASIC: LOAD "file" 
                                   4861 ; load file to RAM 
                                   4862 ; for execution 
                                   4863 ;------------------------
      001B5F                       4864 load:
      001B5F 72 01 00 23 07   [ 2] 4865 	btjf flags,#FRUN,0$ 
      001B64 27 05            [ 1] 4866 	jreq 0$ 
      001B66 A6 07            [ 1] 4867 	ld a,#ERR_CMD_ONLY 
      001B68 CC 08 73         [ 2] 4868 	jp tb_error 
      001B6B                       4869 0$:	
      001B6B CD 09 63         [ 4] 4870 	call next_token 
      001B6E A1 02            [ 1] 4871 	cp a,#TK_QSTR
      001B70 27 03            [ 1] 4872 	jreq 1$
      001B72 CC 08 71         [ 2] 4873 	jp syntax_error 
      001B75 90 93            [ 1] 4874 1$:	ldw y,x 
      001B77 CD 1A 1A         [ 4] 4875 	call search_file 
      001B7A 25 05            [ 1] 4876 	jrc 2$ 
      001B7C A6 09            [ 1] 4877 	ld a,#ERR_NOT_FILE
      001B7E CC 08 73         [ 2] 4878 	jp tb_error  
      001B81                       4879 2$:
      001B81 CD 1B 2E         [ 4] 4880 	call load_file
                                   4881 ; print loaded size 	 
      001B84 CE 00 1E         [ 2] 4882 	ldw x,txtend 
      001B87 72 B0 00 1C      [ 2] 4883 	subw x,txtbgn
      001B8B CD 0A 00         [ 4] 4884 	call print_int 
      001B8E 81               [ 4] 4885 	ret 
                                   4886 
                                   4887 ;-----------------------------------
                                   4888 ; BASIC: FORGET ["file_name"] 
                                   4889 ; erase file_name and all others 
                                   4890 ; after it. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                   4891 ; without argument erase all files 
                                   4892 ;-----------------------------------
                           000001  4893 	NEW_FREE=1 
                           000003  4894 	VSIZE=3 
      001B8F                       4895 forget:
      001B8F                       4896 	_vars VSIZE 
      001B8F 52 03            [ 2]    1     sub sp,#VSIZE 
      001B91 CD 09 63         [ 4] 4897 	call next_token 
      001B94 A1 00            [ 1] 4898 	cp a,#TK_NONE 
      001B96 27 20            [ 1] 4899 	jreq 3$ 
      001B98 A1 02            [ 1] 4900 	cp a,#TK_QSTR
      001B9A 27 03            [ 1] 4901 	jreq 1$
      001B9C CC 08 71         [ 2] 4902 	jp syntax_error
      001B9F 90 93            [ 1] 4903 1$: ldw y,x 
      001BA1 55 00 03 00 01   [ 1] 4904 	mov in,count 
      001BA6 CD 1A 1A         [ 4] 4905 	call search_file
      001BA9 25 05            [ 1] 4906 	jrc 2$
      001BAB A6 09            [ 1] 4907 	ld a,#ERR_NOT_FILE 
      001BAD CC 08 73         [ 2] 4908 	jp tb_error 
      001BB0                       4909 2$: 
      001BB0 CE 00 16         [ 2] 4910 	ldw x,farptr
      001BB3 C6 00 18         [ 1] 4911 	ld a,farptr+2
      001BB6 20 0A            [ 2] 4912 	jra 4$ 
      001BB8                       4913 3$: ; forget all files 
      001BB8 AE 01 00         [ 2] 4914 	ldw x,#0x100
      001BBB 4F               [ 1] 4915 	clr a 
      001BBC CF 00 16         [ 2] 4916 	ldw farptr,x 
      001BBF C7 00 18         [ 1] 4917 	ld farptr+2,a 
      001BC2                       4918 4$:	; save new free address 
      001BC2 1F 01            [ 2] 4919 	ldw (NEW_FREE,sp),x
      001BC4 6B 03            [ 1] 4920 	ld (NEW_FREE+2,sp),a 
      001BC6 CD 01 28         [ 4] 4921 	call move_erase_to_ram
      001BC9 CD 01 A3         [ 4] 4922 5$: call block_erase 
      001BCC AE 00 80         [ 2] 4923 	ldw x,#BLOCK_SIZE 
      001BCF CD 19 AC         [ 4] 4924 	call incr_farptr 
      001BD2 CD 19 91         [ 4] 4925 	call row_align 
                                   4926 ; check if all blocks erased
      001BD5 C6 00 18         [ 1] 4927 	ld a,farptr+2  
      001BD8 C0 00 1B         [ 1] 4928 	sub a,ffree+2
      001BDB C6 00 17         [ 1] 4929 	ld a,farptr+1 
      001BDE C2 00 1A         [ 1] 4930 	sbc a,ffree+1 
      001BE1 C6 00 16         [ 1] 4931 	ld a,farptr 
      001BE4 C2 00 19         [ 1] 4932 	sbc a,ffree 
      001BE7 2B E0            [ 1] 4933 	jrmi 5$ 
      001BE9 7B 03            [ 1] 4934 	ld a,(NEW_FREE+2,sp)
      001BEB 1E 01            [ 2] 4935 	ldw x,(NEW_FREE,sp)
      001BED C7 00 1B         [ 1] 4936 	ld ffree+2,a 
      001BF0 CF 00 19         [ 2] 4937 	ldw ffree,x 
      001BF3                       4938 	_drop VSIZE 
      001BF3 5B 03            [ 2]    1     addw sp,#VSIZE 
      001BF5 81               [ 4] 4939 	ret 
                                   4940 
                                   4941 ;----------------------
                                   4942 ; BASIC: DIR 
                                   4943 ; list saved files 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4944 ;----------------------
                           000001  4945 	COUNT=1 ; files counter 
                           000002  4946 	VSIZE=2 
      001BF6                       4947 directory:
      001BF6                       4948 	_vars VSIZE 
      001BF6 52 02            [ 2]    1     sub sp,#VSIZE 
      001BF8 5F               [ 1] 4949 	clrw x 
      001BF9 1F 01            [ 2] 4950 	ldw (COUNT,sp),x 
      001BFB CF 00 17         [ 2] 4951 	ldw farptr+1,x 
      001BFE 35 01 00 16      [ 1] 4952 	mov farptr,#1 
      001C02                       4953 dir_loop:
      001C02 5F               [ 1] 4954 	clrw x 
      001C03 92 AF 00 16      [ 5] 4955 	ldf a,([farptr],x)
      001C07 27 3B            [ 1] 4956 	jreq 8$ 
      001C09                       4957 1$: ;name loop 	
      001C09 92 AF 00 16      [ 5] 4958 	ldf a,([farptr],x)
      001C0D 27 06            [ 1] 4959 	jreq 2$ 
      001C0F CD 02 A0         [ 4] 4960 	call putc 
      001C12 5C               [ 2] 4961 	incw x 
      001C13 20 F4            [ 2] 4962 	jra 1$
      001C15 5C               [ 2] 4963 2$: incw x ; skip ending 0. 
      001C16 A6 20            [ 1] 4964 	ld a,#SPACE 
      001C18 CD 02 A0         [ 4] 4965 	call putc 
                                   4966 ; get file size 	
      001C1B 92 AF 00 16      [ 5] 4967 	ldf a,([farptr],x)
      001C1F 90 95            [ 1] 4968 	ld yh,a 
      001C21 5C               [ 2] 4969 	incw x 
      001C22 92 AF 00 16      [ 5] 4970 	ldf a,([farptr],x)
      001C26 5C               [ 2] 4971 	incw x 
      001C27 90 97            [ 1] 4972 	ld yl,a 
      001C29 90 89            [ 2] 4973 	pushw y 
      001C2B 72 FB 01         [ 2] 4974 	addw x,(1,sp)
                                   4975 ; skip to next file 
      001C2E CD 19 AC         [ 4] 4976 	call incr_farptr
      001C31 CD 19 91         [ 4] 4977 	call row_align
                                   4978 ; print file size 
      001C34 85               [ 2] 4979 	popw x ; file size 
      001C35 CD 0A 00         [ 4] 4980 	call print_int 
      001C38 A6 0D            [ 1] 4981 	ld a,#CR 
      001C3A CD 02 A0         [ 4] 4982 	call putc
      001C3D 1E 01            [ 2] 4983 	ldw x,(COUNT,sp)
      001C3F 5C               [ 2] 4984 	incw x
      001C40 1F 01            [ 2] 4985 	ldw (COUNT,sp),x  
      001C42 20 BE            [ 2] 4986 	jra dir_loop
      001C44                       4987 8$: ; print number of files 
      001C44 1E 01            [ 2] 4988 	ldw x,(COUNT,sp)
      001C46 CD 0A 00         [ 4] 4989 	call print_int 
      001C49 AE 1C 79         [ 2] 4990 	ldw x,#file_count 
      001C4C CD 02 B3         [ 4] 4991 	call puts  
                                   4992 ; print drive free space 	
      001C4F A6 FF            [ 1] 4993 	ld a,#0xff 
      001C51 C0 00 1B         [ 1] 4994 	sub a,ffree+2 
      001C54 C7 00 0D         [ 1] 4995 	ld acc8,a 
      001C57 A6 7F            [ 1] 4996 	ld a,#0x7f 
      001C59 C2 00 1A         [ 1] 4997 	sbc a,ffree+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001C5C C7 00 0C         [ 1] 4998 	ld acc16,a 
      001C5F A6 02            [ 1] 4999 	ld a,#2 
      001C61 C2 00 19         [ 1] 5000 	sbc a,ffree 
      001C64 C7 00 0B         [ 1] 5001 	ld acc24,a 
      001C67 5F               [ 1] 5002 	clrw x  
      001C68 A6 06            [ 1] 5003 	ld a,#6 
      001C6A 97               [ 1] 5004 	ld xl,a 
      001C6B A6 0A            [ 1] 5005 	ld a,#10 
      001C6D CD 09 B8         [ 4] 5006 	call prti24 
      001C70 AE 1C 81         [ 2] 5007 	ldw x,#drive_free
      001C73 CD 02 B3         [ 4] 5008 	call puts 
      001C76                       5009 	_drop VSIZE 
      001C76 5B 02            [ 2]    1     addw sp,#VSIZE 
      001C78 81               [ 4] 5010 	ret
      001C79 20 66 69 6C 65 73 0A  5011 file_count: .asciz " files\n"
             00
      001C81 20 62 79 74 65 73 20  5012 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5013 
                                   5014 ;---------------------
                                   5015 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5016 ; write 1 or more byte to FLASH or EEPROM
                                   5017 ; starting at address  
                                   5018 ; input:
                                   5019 ;   expr1  	is address 
                                   5020 ;   expr2,...,exprn   are bytes to write
                                   5021 ; output:
                                   5022 ;   none 
                                   5023 ;---------------------
                           000001  5024 	ADDR=1
                           000002  5025 	VSIZ=2 
      001C8E                       5026 write:
      001C8E                       5027 	_vars VSIZE 
      001C8E 52 02            [ 2]    1     sub sp,#VSIZE 
      001C90 72 5F 00 16      [ 1] 5028 	clr farptr ; expect 16 bits address 
      001C94 CD 11 63         [ 4] 5029 	call expression
      001C97 A1 84            [ 1] 5030 	cp a,#TK_INTGR 
      001C99 27 03            [ 1] 5031 	jreq 0$
      001C9B CC 08 71         [ 2] 5032 	jp syntax_error
      001C9E 1F 01            [ 2] 5033 0$: ldw (ADDR,sp),x 
      001CA0 CD 09 63         [ 4] 5034 	call next_token 
      001CA3 A1 09            [ 1] 5035 	cp a,#TK_COMMA 
      001CA5 27 02            [ 1] 5036 	jreq 1$ 
      001CA7 20 19            [ 2] 5037 	jra 9$ 
      001CA9 CD 11 63         [ 4] 5038 1$:	call expression
      001CAC A1 84            [ 1] 5039 	cp a,#TK_INTGR
      001CAE 27 03            [ 1] 5040 	jreq 2$
      001CB0 CC 08 71         [ 2] 5041 	jp syntax_error
      001CB3 9F               [ 1] 5042 2$:	ld a,xl 
      001CB4 1E 01            [ 2] 5043 	ldw x,(ADDR,sp) 
      001CB6 CF 00 17         [ 2] 5044 	ldw farptr+1,x 
      001CB9 5F               [ 1] 5045 	clrw x 
      001CBA CD 01 CD         [ 4] 5046 	call write_byte
      001CBD 1E 01            [ 2] 5047 	ldw x,(ADDR,sp)
      001CBF 5C               [ 2] 5048 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001CC0 20 DC            [ 2] 5049 	jra 0$ 
      001CC2                       5050 9$:
      001CC2                       5051 	_drop VSIZE
      001CC2 5B 02            [ 2]    1     addw sp,#VSIZE 
      001CC4 81               [ 4] 5052 	ret 
                                   5053 
                                   5054 
                                   5055 ;---------------------
                                   5056 ;BASIC: CHAR(expr)
                                   5057 ; évaluate expression 
                                   5058 ; and take the 7 least 
                                   5059 ; bits as ASCII character
                                   5060 ;---------------------
      001CC5                       5061 char:
      001CC5 CD 10 65         [ 4] 5062 	call func_args 
      001CC8 A1 01            [ 1] 5063 	cp a,#1
      001CCA 27 03            [ 1] 5064 	jreq 1$
      001CCC CC 08 71         [ 2] 5065 	jp syntax_error
      001CCF 85               [ 2] 5066 1$:	popw x 
      001CD0 9F               [ 1] 5067 	ld a,xl 
      001CD1 A4 7F            [ 1] 5068 	and a,#0x7f 
      001CD3 97               [ 1] 5069 	ld xl,a
      001CD4 A6 03            [ 1] 5070 	ld a,#TK_CHAR
      001CD6 81               [ 4] 5071 	ret
                                   5072 
                                   5073 ;---------------------
                                   5074 ; BASIC: ASC(string|char)
                                   5075 ; extract first character 
                                   5076 ; of string argument 
                                   5077 ; return it as TK_INTGR 
                                   5078 ;---------------------
      001CD7                       5079 ascii:
      001CD7 A6 07            [ 1] 5080 	ld a,#TK_LPAREN
      001CD9 CD 10 58         [ 4] 5081 	call expect 
      001CDC CD 09 63         [ 4] 5082 	call next_token 
      001CDF A1 02            [ 1] 5083 	cp a,#TK_QSTR 
      001CE1 27 07            [ 1] 5084 	jreq 1$
      001CE3 A1 03            [ 1] 5085 	cp a,#TK_CHAR 
      001CE5 27 06            [ 1] 5086 	jreq 2$ 
      001CE7 CC 08 71         [ 2] 5087 	jp syntax_error
      001CEA                       5088 1$: 
      001CEA F6               [ 1] 5089 	ld a,(x) 
      001CEB 5F               [ 1] 5090 	clrw x
      001CEC 97               [ 1] 5091 	ld xl,a 
      001CED                       5092 2$: 
      001CED 89               [ 2] 5093 	pushw x 
      001CEE A6 08            [ 1] 5094 	ld a,#TK_RPAREN 
      001CF0 CD 10 58         [ 4] 5095 	call expect
      001CF3 85               [ 2] 5096 	popw x 
      001CF4 A6 84            [ 1] 5097 	ld a,#TK_INTGR 
      001CF6 81               [ 4] 5098 	ret 
                                   5099 
                                   5100 ;---------------------
                                   5101 ;BASIC: KEY
                                   5102 ; wait for a character 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   5103 ; received from STDIN 
                                   5104 ; input:
                                   5105 ;	none 
                                   5106 ; output:
                                   5107 ;	X 		ASCII character 
                                   5108 ;---------------------
      001CF7                       5109 key:
      001CF7 CD 02 A9         [ 4] 5110 	call getc 
      001CFA 5F               [ 1] 5111 	clrw x 
      001CFB 97               [ 1] 5112 	ld xl,a 
      001CFC A6 84            [ 1] 5113 	ld a,#TK_INTGR
      001CFE 81               [ 4] 5114 	ret
                                   5115 
                                   5116 ;----------------------
                                   5117 ; BASIC: QKEY
                                   5118 ; Return true if there 
                                   5119 ; is a character in 
                                   5120 ; waiting in STDIN 
                                   5121 ; input:
                                   5122 ;  none 
                                   5123 ; output:
                                   5124 ;   X 		0|-1 
                                   5125 ;-----------------------
      001CFF                       5126 qkey:: 
      001CFF 5F               [ 1] 5127 	clrw x 
      001D00 72 5D 00 25      [ 1] 5128 	tnz rx_char
      001D04 27 01            [ 1] 5129 	jreq 9$ 
      001D06 53               [ 2] 5130 	cplw x 
      001D07 A6 84            [ 1] 5131 9$: ld a,#TK_INTGR
      001D09 81               [ 4] 5132 	ret 
                                   5133 
                                   5134 ;---------------------
                                   5135 ; BASIC: GPIO(expr,reg)
                                   5136 ; return gpio address 
                                   5137 ; expr {0..8}
                                   5138 ; input:
                                   5139 ;   none 
                                   5140 ; output:
                                   5141 ;   X 		gpio register address
                                   5142 ;----------------------------
                           000003  5143 	PORT=3
                           000001  5144 	REG=1 
                           000004  5145 	VSIZE=4 
      001D0A                       5146 gpio:
      001D0A CD 10 65         [ 4] 5147 	call func_args 
      001D0D A1 02            [ 1] 5148 	cp a,#2
      001D0F 27 03            [ 1] 5149 	jreq 1$
      001D11 CC 08 71         [ 2] 5150 	jp syntax_error  
      001D14                       5151 1$:	
      001D14 1E 03            [ 2] 5152 	ldw x,(PORT,sp)
      001D16 2B 17            [ 1] 5153 	jrmi bad_port
      001D18 A3 00 09         [ 2] 5154 	cpw x,#9
      001D1B 2A 12            [ 1] 5155 	jrpl bad_port
      001D1D A6 05            [ 1] 5156 	ld a,#5
      001D1F 42               [ 4] 5157 	mul x,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001D20 1C 50 00         [ 2] 5158 	addw x,#GPIO_BASE 
      001D23 1F 03            [ 2] 5159 	ldw (PORT,sp),x  
      001D25 1E 01            [ 2] 5160 	ldw x,(REG,sp) 
      001D27 72 FB 03         [ 2] 5161 	addw x,(PORT,sp)
      001D2A A6 84            [ 1] 5162 	ld a,#TK_INTGR
      001D2C                       5163 	_drop VSIZE 
      001D2C 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D2E 81               [ 4] 5164 	ret
      001D2F                       5165 bad_port:
      001D2F A6 0A            [ 1] 5166 	ld a,#ERR_BAD_VALUE
      001D31 CC 08 73         [ 2] 5167 	jp tb_error
                                   5168 
                                   5169 
                                   5170 ;-------------------------
                                   5171 ; BASIC: UFLASH 
                                   5172 ; return user flash address
                                   5173 ; input:
                                   5174 ;  none 
                                   5175 ; output:
                                   5176 ;	A		TK_INTGR
                                   5177 ;   X 		user address 
                                   5178 ;---------------------------
      001D34                       5179 uflash:
      001D34 AE 27 00         [ 2] 5180 	ldw x,#user_space 
      001D37 A6 84            [ 1] 5181 	ld a,#TK_INTGR 
      001D39 81               [ 4] 5182 	ret 
                                   5183 
                                   5184 
                                   5185 ;---------------------
                                   5186 ; BASIC: USR(addr[,arg])
                                   5187 ; execute a function written 
                                   5188 ; in binary code.
                                   5189 ; binary fonction should 
                                   5190 ; return token attribute in A 
                                   5191 ; and value in X. 
                                   5192 ; input:
                                   5193 ;   addr	routine address 
                                   5194 ;   arg 	is an optional argument 
                                   5195 ; output:
                                   5196 ;   A 		token attribute 
                                   5197 ;   X       returned value 
                                   5198 ;---------------------
      001D3A                       5199 usr:
      001D3A 90 89            [ 2] 5200 	pushw y 	
      001D3C CD 10 65         [ 4] 5201 	call func_args 
      001D3F A1 01            [ 1] 5202 	cp a,#1 
      001D41 27 07            [ 1] 5203 	jreq 2$
      001D43 A1 02            [ 1] 5204 	cp a,#2
      001D45 27 03            [ 1] 5205 	jreq 2$  
      001D47 CC 08 71         [ 2] 5206 	jp syntax_error 
      001D4A 90 85            [ 2] 5207 2$: popw y  ; arg|addr 
      001D4C A1 01            [ 1] 5208 	cp a,#1
      001D4E 27 02            [ 1] 5209 	jreq 3$
      001D50 85               [ 2] 5210 	popw x ; addr
      001D51 51               [ 1] 5211 	exgw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001D52 90 FD            [ 4] 5212 3$: call (y)
      001D54 90 85            [ 2] 5213 	popw y 
      001D56 81               [ 4] 5214 	ret 
                                   5215 
                                   5216 ;------------------------------
                                   5217 ; BASIC: BYE 
                                   5218 ; halt mcu in its lowest power mode 
                                   5219 ; wait for reset or external interrupt
                                   5220 ; do a cold start on wakeup.
                                   5221 ;------------------------------
      001D57                       5222 bye:
      001D57 72 0D 52 30 FB   [ 2] 5223 	btjf UART1_SR,#UART_SR_TC,.
      001D5C 8E               [10] 5224 	halt
      001D5D CC 05 CB         [ 2] 5225 	jp cold_start  
                                   5226 
                                   5227 ;----------------------------------
                                   5228 ; BASIC: AUTORUN ["file_name"] 
                                   5229 ; record in eeprom at adrress AUTORUN_NAME
                                   5230 ; the name of file to load and execute
                                   5231 ; at startup. 
                                   5232 ; empty string delete autorun name 
                                   5233 ; no argument display autorun name  
                                   5234 ; input:
                                   5235 ;   file_name   file to execute 
                                   5236 ; output:
                                   5237 ;   none
                                   5238 ;-----------------------------------
      001D60                       5239 autorun: 
      001D60 72 01 00 23 07   [ 2] 5240 	btjf flags,#FRUN,0$ 
      001D65 27 05            [ 1] 5241 	jreq 0$ 
      001D67 A6 07            [ 1] 5242 	ld a,#ERR_CMD_ONLY 
      001D69 CC 08 73         [ 2] 5243 	jp tb_error 
      001D6C                       5244 0$:	
      001D6C CD 09 63         [ 4] 5245 	call next_token
      001D6F 26 08            [ 1] 5246 	jrne 1$
      001D71 AE 40 00         [ 2] 5247 	ldw x,#AUTORUN_NAME
      001D74 CD 02 B3         [ 4] 5248 	call puts 
      001D77 4F               [ 1] 5249 	clr a 
      001D78 81               [ 4] 5250 	ret 
      001D79                       5251 1$:
      001D79 A1 02            [ 1] 5252 	cp a,#TK_QSTR
      001D7B 27 03            [ 1] 5253 	jreq 2$
      001D7D CC 08 71         [ 2] 5254 	jp syntax_error 
      001D80                       5255 2$:	
      001D80 7D               [ 1] 5256 	tnz (x) 
      001D81 26 09            [ 1] 5257 	jrne 3$
                                   5258 ; empty string, delete autorun 	
      001D83 CD 06 90         [ 4] 5259 	call cancel_autorun
      001D86 55 00 03 00 01   [ 1] 5260 	mov in,count 
      001D8B 81               [ 4] 5261 	ret 
      001D8C 89               [ 2] 5262 3$:	pushw x 
      001D8D 90 93            [ 1] 5263 	ldw y,x  
      001D8F CD 1A 1A         [ 4] 5264 	call search_file 
      001D92 25 05            [ 1] 5265 	jrc 4$ 
      001D94 A6 09            [ 1] 5266 	ld a,#ERR_NOT_FILE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001D96 CC 08 73         [ 2] 5267 	jp tb_error  
      001D99                       5268 4$: 
      001D99 55 00 03 00 01   [ 1] 5269 	mov in,count 
      001D9E 72 5F 00 16      [ 1] 5270 	clr farptr 
      001DA2 AE 40 00         [ 2] 5271 	ldw x,#AUTORUN_NAME
      001DA5 CF 00 17         [ 2] 5272 	ldw farptr+1,x 
      001DA8 1E 01            [ 2] 5273 	ldw x,(1,sp)  
      001DAA CD 03 92         [ 4] 5274 	call strlen  ; return length in X 
      001DAD 5C               [ 2] 5275 	incw x 
      001DAE 90 85            [ 2] 5276 	popw y 
      001DB0 89               [ 2] 5277 	pushw x 
      001DB1 5F               [ 1] 5278 	clrw x 
      001DB2 CD 02 42         [ 4] 5279 	call write_block 
      001DB5                       5280 	_drop 2 
      001DB5 5B 02            [ 2]    1     addw sp,#2 
      001DB7 81               [ 4] 5281 	ret 
                                   5282 
                                   5283 ;----------------------------------
                                   5284 ; BASIC: SLEEP 
                                   5285 ; halt mcu until reset or external
                                   5286 ; interrupt.
                                   5287 ; Resume progam after SLEEP command
                                   5288 ;----------------------------------
      001DB8                       5289 sleep:
      001DB8 72 0D 52 30 FB   [ 2] 5290 	btjf UART1_SR,#UART_SR_TC,.
      001DBD 72 16 00 23      [ 1] 5291 	bset flags,#FSLEEP
      001DC1 8E               [10] 5292 	halt 
      001DC2 81               [ 4] 5293 	ret 
                                   5294 
                                   5295 ;-------------------------------
                                   5296 ; BASIC: PAUSE expr 
                                   5297 ; suspend execution for n msec.
                                   5298 ; input:
                                   5299 ;	none
                                   5300 ; output:
                                   5301 ;	none 
                                   5302 ;------------------------------
      001DC3                       5303 pause:
      001DC3 CD 11 63         [ 4] 5304 	call expression
      001DC6 A1 84            [ 1] 5305 	cp a,#TK_INTGR
      001DC8 27 03            [ 1] 5306 	jreq pause02 
      001DCA CC 08 71         [ 2] 5307 	jp syntax_error
      001DCD                       5308 pause02: 
      001DCD 5D               [ 2] 5309 1$: tnzw x 
      001DCE 27 04            [ 1] 5310 	jreq 2$
      001DD0 8F               [10] 5311 	wfi 
      001DD1 5A               [ 2] 5312 	decw x 
      001DD2 26 F9            [ 1] 5313 	jrne 1$
      001DD4 4F               [ 1] 5314 2$:	clr a 
      001DD5 81               [ 4] 5315 	ret 
                                   5316 
                                   5317 ;------------------------------
                                   5318 ; BASIC: AWU expr
                                   5319 ; halt mcu for 'expr' milliseconds
                                   5320 ; use Auto wakeup peripheral
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                   5321 ; all oscillators stopped except LSI
                                   5322 ; range: 1ms - 511ms
                                   5323 ; input:
                                   5324 ;  none
                                   5325 ; output:
                                   5326 ;  none:
                                   5327 ;------------------------------
      001DD6                       5328 awu:
      001DD6 CD 11 63         [ 4] 5329   call expression
      001DD9 A1 84            [ 1] 5330   cp a,#TK_INTGR
      001DDB 27 03            [ 1] 5331   jreq awu02
      001DDD CC 08 71         [ 2] 5332   jp syntax_error
      001DE0                       5333 awu02:
      001DE0 A3 14 00         [ 2] 5334   cpw x,#5120
      001DE3 2B 0C            [ 1] 5335   jrmi 1$ 
      001DE5 35 0F 50 F2      [ 1] 5336   mov AWU_TBR,#15 
      001DE9 A6 1E            [ 1] 5337   ld a,#30
      001DEB 62               [ 2] 5338   div x,a
      001DEC A6 10            [ 1] 5339   ld a,#16
      001DEE 62               [ 2] 5340   div x,a 
      001DEF 20 1E            [ 2] 5341   jra 4$
      001DF1                       5342 1$: 
      001DF1 A3 08 00         [ 2] 5343   cpw x,#2048
      001DF4 2B 09            [ 1] 5344   jrmi 2$ 
      001DF6 35 0E 50 F2      [ 1] 5345   mov AWU_TBR,#14
      001DFA A6 50            [ 1] 5346   ld a,#80
      001DFC 62               [ 2] 5347   div x,a 
      001DFD 20 10            [ 2] 5348   jra 4$   
      001DFF                       5349 2$:
      001DFF 35 07 50 F2      [ 1] 5350   mov AWU_TBR,#7
      001E03                       5351 3$:  
                                   5352 ; while X > 64  divide by 2 and increment AWU_TBR 
      001E03 A3 00 40         [ 2] 5353   cpw x,#64 
      001E06 23 07            [ 2] 5354   jrule 4$ 
      001E08 72 5C 50 F2      [ 1] 5355   inc AWU_TBR 
      001E0C 54               [ 2] 5356   srlw x 
      001E0D 20 F4            [ 2] 5357   jra 3$ 
      001E0F                       5358 4$:
      001E0F 9F               [ 1] 5359   ld a, xl
      001E10 4A               [ 1] 5360   dec a 
      001E11 27 01            [ 1] 5361   jreq 5$
      001E13 4A               [ 1] 5362   dec a 	
      001E14                       5363 5$: 
      001E14 A4 3E            [ 1] 5364   and a,#0x3e 
      001E16 C7 50 F1         [ 1] 5365   ld AWU_APR,a 
      001E19 72 18 50 F0      [ 1] 5366   bset AWU_CSR,#AWU_CSR_AWUEN
      001E1D 8E               [10] 5367   halt 
                                   5368 
      001E1E 81               [ 4] 5369   ret 
                                   5370 
                                   5371 ;------------------------------
                                   5372 ; BASIC: TICKS
                                   5373 ; return msec ticks counter value 
                                   5374 ; input:
                                   5375 ; 	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   5376 ; output:
                                   5377 ;	X 		TK_INTGR
                                   5378 ;-------------------------------
      001E1F                       5379 get_ticks:
      001E1F CE 00 0E         [ 2] 5380 	ldw x,ticks 
      001E22 A6 84            [ 1] 5381 	ld a,#TK_INTGR
      001E24 81               [ 4] 5382 	ret 
                                   5383 
                                   5384 
                                   5385 
                                   5386 ;------------------------------
                                   5387 ; BASIC: ABS(expr)
                                   5388 ; return absolute value of expr.
                                   5389 ; input:
                                   5390 ;   none
                                   5391 ; output:
                                   5392 ;   X     	positive integer
                                   5393 ;-------------------------------
      001E25                       5394 abs:
      001E25 CD 10 65         [ 4] 5395 	call func_args 
      001E28 A1 01            [ 1] 5396 	cp a,#1 
      001E2A 27 03            [ 1] 5397 	jreq 0$ 
      001E2C CC 08 71         [ 2] 5398 	jp syntax_error
      001E2F                       5399 0$:  
      001E2F 85               [ 2] 5400     popw x   
      001E30 9E               [ 1] 5401 	ld a,xh 
      001E31 A5 80            [ 1] 5402 	bcp a,#0x80 
      001E33 27 01            [ 1] 5403 	jreq 2$ 
      001E35 50               [ 2] 5404 	negw x 
      001E36 A6 84            [ 1] 5405 2$: ld a,#TK_INTGR 
      001E38 81               [ 4] 5406 	ret 
                                   5407 
                                   5408 ;------------------------------
                                   5409 ; BASIC: AND(expr1,expr2)
                                   5410 ; Apply bit AND relation between
                                   5411 ; the 2 arguments, i.e expr1 & expr2 
                                   5412 ; output:
                                   5413 ; 	A 		TK_INTGR
                                   5414 ;   X 		result 
                                   5415 ;------------------------------
      001E39                       5416 bit_and:
      001E39 CD 10 65         [ 4] 5417 	call func_args 
      001E3C A1 02            [ 1] 5418 	cp a,#2
      001E3E 27 03            [ 1] 5419 	jreq 1$
      001E40 CC 08 71         [ 2] 5420 	jp syntax_error 
      001E43 85               [ 2] 5421 1$:	popw x 
      001E44 9E               [ 1] 5422 	ld a,xh 
      001E45 14 01            [ 1] 5423 	and a,(1,sp)
      001E47 95               [ 1] 5424 	ld xh,a 
      001E48 9F               [ 1] 5425 	ld a,xl
      001E49 14 02            [ 1] 5426 	and a,(2,sp)
      001E4B 97               [ 1] 5427 	ld xl,a 
      001E4C                       5428 	_drop 2 
      001E4C 5B 02            [ 2]    1     addw sp,#2 
      001E4E A6 84            [ 1] 5429 	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001E50 81               [ 4] 5430 	ret
                                   5431 
                                   5432 ;------------------------------
                                   5433 ; BASIC: OR(expr1,expr2)
                                   5434 ; Apply bit OR relation between
                                   5435 ; the 2 arguments, i.e expr1 | expr2 
                                   5436 ; output:
                                   5437 ; 	A 		TK_INTGR
                                   5438 ;   X 		result 
                                   5439 ;------------------------------
      001E51                       5440 bit_or:
      001E51 CD 10 65         [ 4] 5441 	call func_args 
      001E54 A1 02            [ 1] 5442 	cp a,#2
      001E56 27 03            [ 1] 5443 	jreq 1$
      001E58 CC 08 71         [ 2] 5444 	jp syntax_error 
      001E5B                       5445 1$: 
      001E5B 85               [ 2] 5446 	popw x 
      001E5C 9E               [ 1] 5447 	ld a,xh 
      001E5D 1A 01            [ 1] 5448 	or a,(1,sp)
      001E5F 95               [ 1] 5449 	ld xh,a 
      001E60 9F               [ 1] 5450 	ld a,xl 
      001E61 1A 02            [ 1] 5451 	or a,(2,sp)
      001E63 97               [ 1] 5452 	ld xl,a 
      001E64                       5453 	_drop 2 
      001E64 5B 02            [ 2]    1     addw sp,#2 
      001E66 A6 84            [ 1] 5454 	ld a,#TK_INTGR 
      001E68 81               [ 4] 5455 	ret
                                   5456 
                                   5457 ;------------------------------
                                   5458 ; BASIC: XOR(expr1,expr2)
                                   5459 ; Apply bit XOR relation between
                                   5460 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5461 ; output:
                                   5462 ; 	A 		TK_INTGR
                                   5463 ;   X 		result 
                                   5464 ;------------------------------
      001E69                       5465 bit_xor:
      001E69 CD 10 65         [ 4] 5466 	call func_args 
      001E6C A1 02            [ 1] 5467 	cp a,#2
      001E6E 27 03            [ 1] 5468 	jreq 1$
      001E70 CC 08 71         [ 2] 5469 	jp syntax_error 
      001E73                       5470 1$: 
      001E73 85               [ 2] 5471 	popw x 
      001E74 9E               [ 1] 5472 	ld a,xh 
      001E75 18 01            [ 1] 5473 	xor a,(1,sp)
      001E77 95               [ 1] 5474 	ld xh,a 
      001E78 9F               [ 1] 5475 	ld a,xl 
      001E79 18 02            [ 1] 5476 	xor a,(2,sp)
      001E7B 97               [ 1] 5477 	ld xl,a 
      001E7C                       5478 	_drop 2 
      001E7C 5B 02            [ 2]    1     addw sp,#2 
      001E7E A6 84            [ 1] 5479 	ld a,#TK_INTGR 
      001E80 81               [ 4] 5480 	ret 
                                   5481 
                                   5482 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   5483 ; BASIC: LSHIFT(expr1,expr2)
                                   5484 ; logical shift left expr1 by 
                                   5485 ; expr2 bits 
                                   5486 ; output:
                                   5487 ; 	A 		TK_INTGR
                                   5488 ;   X 		result 
                                   5489 ;------------------------------
      001E81                       5490 lshift:
      001E81 CD 10 65         [ 4] 5491 	call func_args
      001E84 A1 02            [ 1] 5492 	cp a,#2 
      001E86 27 03            [ 1] 5493 	jreq 1$
      001E88 CC 08 71         [ 2] 5494 	jp syntax_error
      001E8B 90 85            [ 2] 5495 1$: popw y   
      001E8D 85               [ 2] 5496 	popw x 
      001E8E 90 5D            [ 2] 5497 	tnzw y 
      001E90 27 05            [ 1] 5498 	jreq 4$
      001E92 58               [ 2] 5499 2$:	sllw x 
      001E93 90 5A            [ 2] 5500 	decw y 
      001E95 26 FB            [ 1] 5501 	jrne 2$
      001E97                       5502 4$:  
      001E97 A6 84            [ 1] 5503 	ld a,#TK_INTGR
      001E99 81               [ 4] 5504 	ret
                                   5505 
                                   5506 ;------------------------------
                                   5507 ; BASIC: RSHIFT(expr1,expr2)
                                   5508 ; logical shift right expr1 by 
                                   5509 ; expr2 bits.
                                   5510 ; output:
                                   5511 ; 	A 		TK_INTGR
                                   5512 ;   X 		result 
                                   5513 ;------------------------------
      001E9A                       5514 rshift:
      001E9A CD 10 65         [ 4] 5515 	call func_args
      001E9D A1 02            [ 1] 5516 	cp a,#2 
      001E9F 27 03            [ 1] 5517 	jreq 1$
      001EA1 CC 08 71         [ 2] 5518 	jp syntax_error
      001EA4 90 85            [ 2] 5519 1$: popw y  
      001EA6 85               [ 2] 5520 	popw x
      001EA7 90 5D            [ 2] 5521 	tnzw y 
      001EA9 27 05            [ 1] 5522 	jreq 4$
      001EAB 54               [ 2] 5523 2$:	srlw x 
      001EAC 90 5A            [ 2] 5524 	decw y 
      001EAE 26 FB            [ 1] 5525 	jrne 2$
      001EB0                       5526 4$:  
      001EB0 A6 84            [ 1] 5527 	ld a,#TK_INTGR
      001EB2 81               [ 4] 5528 	ret
                                   5529 
                                   5530 ;--------------------------
                                   5531 ; BASIC: FCPU integer
                                   5532 ; set CPU frequency 
                                   5533 ;-------------------------- 
                                   5534 
      001EB3                       5535 fcpu:
      001EB3 A6 84            [ 1] 5536 	ld a,#TK_INTGR
      001EB5 CD 10 58         [ 4] 5537 	call expect 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001EB8 9F               [ 1] 5538 	ld a,xl 
      001EB9 A4 07            [ 1] 5539 	and a,#7 
      001EBB C7 50 C6         [ 1] 5540 	ld CLK_CKDIVR,a 
      001EBE 81               [ 4] 5541 	ret 
                                   5542 
                                   5543 ;------------------------------
                                   5544 ; BASIC: PMODE pin#, mode 
                                   5545 ; Arduino pin. 
                                   5546 ; define pin as input or output
                                   5547 ; pin#: {0..15}
                                   5548 ; mode: INPUT|OUTPUT  
                                   5549 ;------------------------------
                           000001  5550 	PINNO=1
                           000001  5551 	VSIZE=1
      001EBF                       5552 pin_mode:
      001EBF                       5553 	_vars VSIZE 
      001EBF 52 01            [ 2]    1     sub sp,#VSIZE 
      001EC1 CD 10 6A         [ 4] 5554 	call arg_list 
      001EC4 A1 02            [ 1] 5555 	cp a,#2 
      001EC6 27 03            [ 1] 5556 	jreq 1$
      001EC8 CC 08 71         [ 2] 5557 	jp syntax_error 
      001ECB 90 85            [ 2] 5558 1$: popw y ; mode 
      001ECD 85               [ 2] 5559 	popw x ; Dx pin 
      001ECE CD 1F 00         [ 4] 5560 	call select_pin 
      001ED1 6B 01            [ 1] 5561 	ld (PINNO,sp),a  
      001ED3 A6 01            [ 1] 5562 	ld a,#1 
      001ED5 0D 01            [ 1] 5563 	tnz (PINNO,sp)
      001ED7 27 0B            [ 1] 5564 	jreq 4$
      001ED9 48               [ 1] 5565 2$:	sll a 
      001EDA 0A 01            [ 1] 5566 	dec (PINNO,sp)
      001EDC 26 FB            [ 1] 5567 	jrne 2$ 
      001EDE 6B 01            [ 1] 5568 	ld (PINNO,sp),a
      001EE0 EA 03            [ 1] 5569 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      001EE2 E7 03            [ 1] 5570 	ld (GPIO_CR1,x),a 
      001EE4 90 A3 00 01      [ 2] 5571 4$:	cpw y,#OUTP 
      001EE8 27 07            [ 1] 5572 	jreq 6$
                                   5573 ; input mode
      001EEA 7B 01            [ 1] 5574 	ld a,(PINNO,sp)
      001EEC 43               [ 1] 5575 	cpl a 
      001EED E4 02            [ 1] 5576 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001EEF 20 0A            [ 2] 5577 	jra 9$
      001EF1                       5578 6$: ;output mode  
      001EF1 7B 01            [ 1] 5579 	ld a,(PINNO,sp)
      001EF3 EA 04            [ 1] 5580 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      001EF5 E7 04            [ 1] 5581 	ld (GPIO_CR2,x),a 
      001EF7 7B 01            [ 1] 5582 	ld a,(PINNO,sp)
      001EF9 EA 02            [ 1] 5583 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001EFB E7 02            [ 1] 5584 9$:	ld (GPIO_DDR,x),a 
      001EFD                       5585 	_drop VSIZE 
      001EFD 5B 01            [ 2]    1     addw sp,#VSIZE 
      001EFF 81               [ 4] 5586 	ret
                                   5587 
                                   5588 ;------------------------
                                   5589 ; select Arduino pin 
                                   5590 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   5591 ;   X 	 {0..15} Arduino Dx 
                                   5592 ; output:
                                   5593 ;   A     stm8s208 pin 
                                   5594 ;   X     base address s208 GPIO port 
                                   5595 ;---------------------------
      001F00                       5596 select_pin:
      001F00 58               [ 2] 5597 	sllw x 
      001F01 1C 1F 10         [ 2] 5598 	addw x,#arduino_to_8s208 
      001F04 FE               [ 2] 5599 	ldw x,(x)
      001F05 9F               [ 1] 5600 	ld a,xl 
      001F06 88               [ 1] 5601 	push a 
      001F07 5E               [ 1] 5602 	swapw x 
      001F08 A6 05            [ 1] 5603 	ld a,#5 
      001F0A 42               [ 4] 5604 	mul x,a 
      001F0B 1C 50 00         [ 2] 5605 	addw x,#GPIO_BASE 
      001F0E 84               [ 1] 5606 	pop a 
      001F0F 81               [ 4] 5607 	ret 
                                   5608 ; translation from Arduino D0..D15 to stm8s208rb 
      001F10                       5609 arduino_to_8s208:
      001F10 03 06                 5610 .byte 3,6 ; D0 
      001F12 03 05                 5611 .byte 3,5 ; D1 
      001F14 04 00                 5612 .byte 4,0 ; D2 
      001F16 02 01                 5613 .byte 2,1 ; D3
      001F18 06 00                 5614 .byte 6,0 ; D4
      001F1A 02 02                 5615 .byte 2,2 ; D5
      001F1C 02 03                 5616 .byte 2,3 ; D6
      001F1E 03 01                 5617 .byte 3,1 ; D7
      001F20 03 03                 5618 .byte 3,3 ; D8
      001F22 02 04                 5619 .byte 2,4 ; D9
      001F24 04 05                 5620 .byte 4,5 ; D10
      001F26 02 06                 5621 .byte 2,6 ; D11
      001F28 02 07                 5622 .byte 2,7 ; D12
      001F2A 02 05                 5623 .byte 2,5 ; D13
      001F2C 04 02                 5624 .byte 4,2 ; D14
      001F2E 04 01                 5625 .byte 4,1 ; D15
                                   5626 
                                   5627 
                                   5628 ;------------------------------
                                   5629 ; BASIC: RND(expr)
                                   5630 ; return random number 
                                   5631 ; between 1 and expr inclusive
                                   5632 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5633 ; input:
                                   5634 ; 	none 
                                   5635 ; output:
                                   5636 ;	X 		random positive integer 
                                   5637 ;------------------------------
      001F30                       5638 random:
      001F30 CD 10 65         [ 4] 5639 	call func_args 
      001F33 A1 01            [ 1] 5640 	cp a,#1
      001F35 27 03            [ 1] 5641 	jreq 1$
      001F37 CC 08 71         [ 2] 5642 	jp syntax_error
      001F3A                       5643 1$:  
      001F3A A6 80            [ 1] 5644 	ld a,#0x80 
      001F3C 15 01            [ 1] 5645 	bcp a,(1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001F3E 27 05            [ 1] 5646 	jreq 2$
      001F40 A6 0A            [ 1] 5647 	ld a,#ERR_BAD_VALUE
      001F42 CC 08 73         [ 2] 5648 	jp tb_error
      001F45                       5649 2$: 
                                   5650 ; acc16=(x<<5)^x 
      001F45 CE 00 12         [ 2] 5651 	ldw x,seedx 
      001F48 58               [ 2] 5652 	sllw x 
      001F49 58               [ 2] 5653 	sllw x 
      001F4A 58               [ 2] 5654 	sllw x 
      001F4B 58               [ 2] 5655 	sllw x 
      001F4C 58               [ 2] 5656 	sllw x 
      001F4D 9E               [ 1] 5657 	ld a,xh 
      001F4E C8 00 12         [ 1] 5658 	xor a,seedx 
      001F51 C7 00 0C         [ 1] 5659 	ld acc16,a 
      001F54 9F               [ 1] 5660 	ld a,xl 
      001F55 C8 00 13         [ 1] 5661 	xor a,seedx+1 
      001F58 C7 00 0D         [ 1] 5662 	ld acc8,a 
                                   5663 ; seedx=seedy 
      001F5B CE 00 14         [ 2] 5664 	ldw x,seedy 
      001F5E CF 00 12         [ 2] 5665 	ldw seedx,x  
                                   5666 ; seedy=seedy^(seedy>>1)
      001F61 90 54            [ 2] 5667 	srlw y 
      001F63 90 9E            [ 1] 5668 	ld a,yh 
      001F65 C8 00 14         [ 1] 5669 	xor a,seedy 
      001F68 C7 00 14         [ 1] 5670 	ld seedy,a  
      001F6B 90 9F            [ 1] 5671 	ld a,yl 
      001F6D C8 00 15         [ 1] 5672 	xor a,seedy+1 
      001F70 C7 00 15         [ 1] 5673 	ld seedy+1,a 
                                   5674 ; acc16>>3 
      001F73 CE 00 0C         [ 2] 5675 	ldw x,acc16 
      001F76 54               [ 2] 5676 	srlw x 
      001F77 54               [ 2] 5677 	srlw x 
      001F78 54               [ 2] 5678 	srlw x 
                                   5679 ; x=acc16^x 
      001F79 9E               [ 1] 5680 	ld a,xh 
      001F7A C8 00 0C         [ 1] 5681 	xor a,acc16 
      001F7D 95               [ 1] 5682 	ld xh,a 
      001F7E 9F               [ 1] 5683 	ld a,xl 
      001F7F C8 00 0D         [ 1] 5684 	xor a,acc8 
      001F82 97               [ 1] 5685 	ld xl,a 
                                   5686 ; seedy=x^seedy 
      001F83 C8 00 15         [ 1] 5687 	xor a,seedy+1
      001F86 97               [ 1] 5688 	ld xl,a 
      001F87 9E               [ 1] 5689 	ld a,xh 
      001F88 C8 00 14         [ 1] 5690 	xor a,seedy
      001F8B 95               [ 1] 5691 	ld xh,a 
      001F8C CF 00 14         [ 2] 5692 	ldw seedy,x 
                                   5693 ; return seedy modulo expr + 1 
      001F8F 90 85            [ 2] 5694 	popw y 
      001F91 65               [ 2] 5695 	divw x,y 
      001F92 93               [ 1] 5696 	ldw x,y 
      001F93 5C               [ 2] 5697 	incw x 
      001F94                       5698 10$:
      001F94 A6 84            [ 1] 5699 	ld a,#TK_INTGR
      001F96 81               [ 4] 5700 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                   5701 
                                   5702 ;---------------------------------
                                   5703 ; BASIC: WORDS 
                                   5704 ; affiche la listes des mots du
                                   5705 ; dictionnaire ainsi que le nombre
                                   5706 ; de mots.
                                   5707 ;---------------------------------
                           000001  5708 	WLEN=1 ; word length
                           000002  5709 	LLEN=2 ; character sent to console
                           000003  5710 	WCNT=3 ; count words printed 
                           000003  5711 	VSIZE=3 
      001F97                       5712 words:
      001F97                       5713 	_vars VSIZE
      001F97 52 03            [ 2]    1     sub sp,#VSIZE 
      001F99 0F 02            [ 1] 5714 	clr (LLEN,sp)
      001F9B 0F 03            [ 1] 5715 	clr (WCNT,sp)
      001F9D 90 AE 26 BB      [ 2] 5716 	ldw y,#kword_dict+2
      001FA1 93               [ 1] 5717 0$:	ldw x,y
      001FA2 F6               [ 1] 5718 	ld a,(x)
      001FA3 A4 0F            [ 1] 5719 	and a,#15 
      001FA5 6B 01            [ 1] 5720 	ld (WLEN,sp),a 
      001FA7 0C 03            [ 1] 5721 	inc (WCNT,sp)
      001FA9 5C               [ 2] 5722 1$:	incw x 
      001FAA F6               [ 1] 5723 	ld a,(x)
      001FAB CD 02 A0         [ 4] 5724 	call putc 
      001FAE 0C 02            [ 1] 5725 	inc (LLEN,sp)
      001FB0 0A 01            [ 1] 5726 	dec (WLEN,sp)
      001FB2 26 F5            [ 1] 5727 	jrne 1$
      001FB4 A6 46            [ 1] 5728 	ld a,#70
      001FB6 11 02            [ 1] 5729 	cp a,(LLEN,sp)
      001FB8 2B 09            [ 1] 5730 	jrmi 2$   
      001FBA A6 20            [ 1] 5731 	ld a,#SPACE 
      001FBC CD 02 A0         [ 4] 5732 	call putc 
      001FBF 0C 02            [ 1] 5733 	inc (LLEN,sp) 
      001FC1 20 07            [ 2] 5734 	jra 3$
      001FC3 A6 0D            [ 1] 5735 2$: ld a,#CR 
      001FC5 CD 02 A0         [ 4] 5736 	call putc 
      001FC8 0F 02            [ 1] 5737 	clr (LLEN,sp)
      001FCA 72 A2 00 02      [ 2] 5738 3$:	subw y,#2 
      001FCE 90 FE            [ 2] 5739 	ldw y,(y)
      001FD0 26 CF            [ 1] 5740 	jrne 0$ 
      001FD2 A6 0D            [ 1] 5741 	ld a,#CR 
      001FD4 CD 02 A0         [ 4] 5742 	call putc  
      001FD7 5F               [ 1] 5743 	clrw x 
      001FD8 7B 03            [ 1] 5744 	ld a,(WCNT,sp)
      001FDA 97               [ 1] 5745 	ld xl,a 
      001FDB CD 0A 00         [ 4] 5746 	call print_int 
      001FDE AE 1F E7         [ 2] 5747 	ldw x,#words_count_msg
      001FE1 CD 02 B3         [ 4] 5748 	call puts 
      001FE4                       5749 	_drop VSIZE 
      001FE4 5B 03            [ 2]    1     addw sp,#VSIZE 
      001FE6 81               [ 4] 5750 	ret 
      001FE7 20 77 6F 72 64 73 20  5751 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



             00
                                   5752 
                                   5753 
                                   5754 ;-----------------------------
                                   5755 ; BASIC: TIMER expr 
                                   5756 ; initialize count down timer 
                                   5757 ;-----------------------------
      001FFD                       5758 set_timer:
      001FFD CD 10 6A         [ 4] 5759 	call arg_list
      002000 A1 01            [ 1] 5760 	cp a,#1 
      002002 27 03            [ 1] 5761 	jreq 1$
      002004 CC 08 71         [ 2] 5762 	jp syntax_error
      002007                       5763 1$: 
      002007 85               [ 2] 5764 	popw x 
      002008 CF 00 10         [ 2] 5765 	ldw timer,x 
      00200B 81               [ 4] 5766 	ret 
                                   5767 
                                   5768 ;------------------------------
                                   5769 ; BASIC: TIMEOUT 
                                   5770 ; return state of timer 
                                   5771 ;------------------------------
      00200C                       5772 timeout:
      00200C CE 00 10         [ 2] 5773 	ldw x,timer 
      00200F                       5774 logical_complement:
      00200F 53               [ 2] 5775 	cplw x 
      002010 A3 FF FF         [ 2] 5776 	cpw x,#-1
      002013 27 01            [ 1] 5777 	jreq 2$
      002015 5F               [ 1] 5778 	clrw x 
      002016 A6 84            [ 1] 5779 2$:	ld a,#TK_INTGR
      002018 81               [ 4] 5780 	ret 
                                   5781 
                                   5782 ;--------------------------------
                                   5783 ; BASIC NOT(expr) 
                                   5784 ; return logical complement of expr
                                   5785 ;--------------------------------
      002019                       5786 func_not:
      002019 CD 10 65         [ 4] 5787 	call func_args  
      00201C A1 01            [ 1] 5788 	cp a,#1
      00201E 27 03            [ 1] 5789 	jreq 1$
      002020 CC 08 71         [ 2] 5790 	jp syntax_error
      002023 85               [ 2] 5791 1$:	popw x 
      002024 20 E9            [ 2] 5792 	jra logical_complement
                                   5793 
                                   5794 
                                   5795 
                                   5796 ;-----------------------------------
                                   5797 ; BASIC: IWDGEN expr1 
                                   5798 ; enable independant watchdog timer
                                   5799 ; expr1 is delay in multiple of 62.5µsec
                                   5800 ; expr1 -> {1..16383}
                                   5801 ;-----------------------------------
      002026                       5802 enable_iwdg:
      002026 CD 10 6A         [ 4] 5803 	call arg_list
      002029 A1 01            [ 1] 5804 	cp a,#1 
      00202B 27 03            [ 1] 5805 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      00202D CC 08 71         [ 2] 5806 	jp syntax_error 
      002030 85               [ 2] 5807 1$: popw x 
      002031 4B 00            [ 1] 5808 	push #0
      002033 35 CC 50 E0      [ 1] 5809 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002037 9E               [ 1] 5810 	ld a,xh 
      002038 A4 3F            [ 1] 5811 	and a,#0x3f
      00203A 95               [ 1] 5812 	ld xh,a  
      00203B A3 00 FF         [ 2] 5813 2$:	cpw x,#255
      00203E 23 06            [ 2] 5814 	jrule 3$
      002040 0C 01            [ 1] 5815 	inc (1,sp)
      002042 98               [ 1] 5816 	rcf 
      002043 56               [ 2] 5817 	rrcw x 
      002044 20 F5            [ 2] 5818 	jra 2$
      002046 35 55 50 E0      [ 1] 5819 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      00204A 84               [ 1] 5820 	pop a  
      00204B C7 50 E1         [ 1] 5821 	ld IWDG_PR,a 
      00204E 9F               [ 1] 5822 	ld a,xl
      00204F 4A               [ 1] 5823 	dec a 
      002050 35 55 50 E0      [ 1] 5824 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002054 C7 50 E2         [ 1] 5825 	ld IWDG_RLR,a 
      002057 35 AA 50 E0      [ 1] 5826 	mov IWDG_KR,#IWDG_KEY_REFRESH
      00205B 81               [ 4] 5827 	ret 
                                   5828 
                                   5829 
                                   5830 ;-----------------------------------
                                   5831 ; BASIC: IWDGREF  
                                   5832 ; refresh independant watchdog count down 
                                   5833 ; timer before it reset MCU. 
                                   5834 ;-----------------------------------
      00205C                       5835 refresh_iwdg:
      00205C 35 AA 50 E0      [ 1] 5836 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002060 81               [ 4] 5837 	ret 
                                   5838 
                                   5839 
                                   5840 ;-------------------------------------
                                   5841 ; BASIC: LOG(expr)
                                   5842 ; return logarithm base 2 of expr 
                                   5843 ; this is the position of most significant
                                   5844 ; bit set. 
                                   5845 ; input: 
                                   5846 ; output:
                                   5847 ;   X     log2 
                                   5848 ;   A     TK_INTGR 
                                   5849 ;*********************************
      002061                       5850 log2:
      002061 CD 10 65         [ 4] 5851 	call func_args 
      002064 A1 01            [ 1] 5852 	cp a,#1 
      002066 27 03            [ 1] 5853 	jreq 1$
      002068 CC 08 71         [ 2] 5854 	jp syntax_error 
      00206B 85               [ 2] 5855 1$: popw x 
      00206C                       5856 leading_one:
      00206C 5D               [ 2] 5857 	tnzw x 
      00206D 27 0A            [ 1] 5858 	jreq 4$
      00206F A6 0F            [ 1] 5859 	ld a,#15 
      002071 59               [ 2] 5860 2$: rlcw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      002072 25 03            [ 1] 5861     jrc 3$
      002074 4A               [ 1] 5862 	dec a 
      002075 20 FA            [ 2] 5863 	jra 2$
      002077 5F               [ 1] 5864 3$: clrw x 
      002078 97               [ 1] 5865     ld xl,a
      002079 A6 84            [ 1] 5866 4$:	ld a,#TK_INTGR
      00207B 81               [ 4] 5867 	ret 
                                   5868 
                                   5869 ;-----------------------------------
                                   5870 ; BASIC: BIT(expr) 
                                   5871 ; expr ->{0..15}
                                   5872 ; return 2^expr 
                                   5873 ; output:
                                   5874 ;    x    2^expr 
                                   5875 ;-----------------------------------
      00207C                       5876 bitmask:
      00207C CD 10 65         [ 4] 5877     call func_args 
      00207F A1 01            [ 1] 5878 	cp a,#1
      002081 27 03            [ 1] 5879 	jreq 1$
      002083 CC 08 71         [ 2] 5880 	jp syntax_error 
      002086 85               [ 2] 5881 1$: popw x 
      002087 9F               [ 1] 5882 	ld a,xl 
      002088 A4 0F            [ 1] 5883 	and a,#15
      00208A 5F               [ 1] 5884 	clrw x 
      00208B 5C               [ 2] 5885 	incw x 
      00208C 4D               [ 1] 5886 2$: tnz a 
      00208D 27 04            [ 1] 5887 	jreq 3$
      00208F 58               [ 2] 5888 	slaw x 
      002090 4A               [ 1] 5889 	dec a 
      002091 20 F9            [ 2] 5890 	jra 2$ 
      002093 A6 84            [ 1] 5891 3$: ld a,#TK_INTGR
      002095 81               [ 4] 5892 	ret 
                                   5893 
                                   5894 ;------------------------------
                                   5895 ; BASIC: INVERT(expr)
                                   5896 ; 1's complement 
                                   5897 ;--------------------------------
      002096                       5898 invert:
      002096 CD 10 65         [ 4] 5899 	call func_args
      002099 A1 01            [ 1] 5900 	cp a,#1 
      00209B 27 03            [ 1] 5901 	jreq 1$
      00209D CC 08 71         [ 2] 5902 	jp syntax_error
      0020A0 85               [ 2] 5903 1$: popw x  
      0020A1 53               [ 2] 5904 	cplw x 
      0020A2 A6 84            [ 1] 5905 	ld a,#TK_INTGR 
      0020A4 81               [ 4] 5906 	ret 
                                   5907 
                                   5908 ;------------------------------
                                   5909 ; BASIC: DO 
                                   5910 ; initiate a DO ... UNTIL loop 
                                   5911 ;------------------------------
                           000003  5912 	DOLP_ADR=3 
                           000005  5913 	DOLP_INW=5
                           000004  5914 	VSIZE=4 
      0020A5                       5915 do_loop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      0020A5 85               [ 2] 5916 	popw x 
      0020A6                       5917 	_vars VSIZE 
      0020A6 52 04            [ 2]    1     sub sp,#VSIZE 
      0020A8 89               [ 2] 5918 	pushw x 
      0020A9 90 CE 00 04      [ 2] 5919 	ldw y,basicptr 
      0020AD 17 03            [ 2] 5920 	ldw (DOLP_ADR,sp),y
      0020AF 90 CE 00 00      [ 2] 5921 	ldw y,in.w 
      0020B3 17 05            [ 2] 5922 	ldw (DOLP_INW,sp),y
      0020B5 72 5C 00 20      [ 1] 5923 	inc loop_depth 
      0020B9 81               [ 4] 5924 	ret 
                                   5925 
                                   5926 ;--------------------------------
                                   5927 ; BASIC: UNTIL expr 
                                   5928 ; loop if exprssion is false 
                                   5929 ; else terminate loop
                                   5930 ;--------------------------------
      0020BA                       5931 until: 
      0020BA 72 5D 00 20      [ 1] 5932 	tnz loop_depth 
      0020BE 26 03            [ 1] 5933 	jrne 1$ 
      0020C0 CC 08 71         [ 2] 5934 	jp syntax_error 
      0020C3                       5935 1$: 
      0020C3 CD 11 A7         [ 4] 5936 	call relation 
      0020C6 A1 84            [ 1] 5937 	cp a,#TK_INTGR
      0020C8 27 03            [ 1] 5938 	jreq 2$
      0020CA CC 08 71         [ 2] 5939 	jp syntax_error
      0020CD                       5940 2$: 
      0020CD 5D               [ 2] 5941 	tnzw x 
      0020CE 26 10            [ 1] 5942 	jrne 9$
      0020D0 1E 03            [ 2] 5943 	ldw x,(DOLP_ADR,sp)
      0020D2 CF 00 04         [ 2] 5944 	ldw basicptr,x 
      0020D5 E6 02            [ 1] 5945 	ld a,(2,x)
      0020D7 C7 00 03         [ 1] 5946 	ld count,a 
      0020DA 1E 05            [ 2] 5947 	ldw x,(DOLP_INW,sp)
      0020DC CF 00 00         [ 2] 5948 	ldw in.w,x 
      0020DF 81               [ 4] 5949 	ret 
      0020E0                       5950 9$:	; remove loop data from stack  
      0020E0 85               [ 2] 5951 	popw x
      0020E1                       5952 	_drop VSIZE
      0020E1 5B 04            [ 2]    1     addw sp,#VSIZE 
      0020E3 72 5A 00 20      [ 1] 5953 	dec loop_depth 
      0020E7 FC               [ 2] 5954 	jp (x)
                                   5955 
                                   5956 ;--------------------------
                                   5957 ; BASIC: PRTA...PRTI  
                                   5958 ;  return constant value 
                                   5959 ;  PORT  offset in GPIO
                                   5960 ;  array
                                   5961 ;---------------------------
      0020E8                       5962 const_porta:
      0020E8 AE 00 00         [ 2] 5963 	ldw x,#0
      0020EB A6 84            [ 1] 5964 	ld a,#TK_INTGR 
      0020ED 81               [ 4] 5965 	ret 
      0020EE                       5966 const_portb:
      0020EE AE 00 01         [ 2] 5967 	ldw x,#1
      0020F1 A6 84            [ 1] 5968 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      0020F3 81               [ 4] 5969 	ret 
      0020F4                       5970 const_portc:
      0020F4 AE 00 02         [ 2] 5971 	ldw x,#2
      0020F7 A6 84            [ 1] 5972 	ld a,#TK_INTGR 
      0020F9 81               [ 4] 5973 	ret 
      0020FA                       5974 const_portd:
      0020FA AE 00 03         [ 2] 5975 	ldw x,#3
      0020FD A6 84            [ 1] 5976 	ld a,#TK_INTGR 
      0020FF 81               [ 4] 5977 	ret 
      002100                       5978 const_porte:
      002100 AE 00 04         [ 2] 5979 	ldw x,#4
      002103 A6 84            [ 1] 5980 	ld a,#TK_INTGR 
      002105 81               [ 4] 5981 	ret 
      002106                       5982 const_portf:
      002106 AE 00 05         [ 2] 5983 	ldw x,#5
      002109 A6 84            [ 1] 5984 	ld a,#TK_INTGR 
      00210B 81               [ 4] 5985 	ret 
      00210C                       5986 const_portg:
      00210C AE 00 06         [ 2] 5987 	ldw x,#6
      00210F A6 84            [ 1] 5988 	ld a,#TK_INTGR 
      002111 81               [ 4] 5989 	ret 
      002112                       5990 const_porth:
      002112 AE 00 07         [ 2] 5991 	ldw x,#7
      002115 A6 84            [ 1] 5992 	ld a,#TK_INTGR 
      002117 81               [ 4] 5993 	ret 
      002118                       5994 const_porti:
      002118 AE 00 08         [ 2] 5995 	ldw x,#8
      00211B A6 84            [ 1] 5996 	ld a,#TK_INTGR 
      00211D 81               [ 4] 5997 	ret 
                                   5998 
                                   5999 ;-------------------------------
                                   6000 ; following return constant 
                                   6001 ; related to GPIO register offset 
                                   6002 ;---------------------------------
      00211E                       6003 const_odr:
      00211E A6 84            [ 1] 6004 	ld a,#TK_INTGR 
      002120 AE 00 00         [ 2] 6005 	ldw x,#GPIO_ODR
      002123 81               [ 4] 6006 	ret 
      002124                       6007 const_idr:
      002124 A6 84            [ 1] 6008 	ld a,#TK_INTGR 
      002126 AE 00 01         [ 2] 6009 	ldw x,#GPIO_IDR
      002129 81               [ 4] 6010 	ret 
      00212A                       6011 const_ddr:
      00212A A6 84            [ 1] 6012 	ld a,#TK_INTGR 
      00212C AE 00 02         [ 2] 6013 	ldw x,#GPIO_DDR
      00212F 81               [ 4] 6014 	ret 
      002130                       6015 const_cr1:
      002130 A6 84            [ 1] 6016 	ld a,#TK_INTGR 
      002132 AE 00 03         [ 2] 6017 	ldw x,#GPIO_CR1
      002135 81               [ 4] 6018 	ret 
      002136                       6019 const_cr2:
      002136 A6 84            [ 1] 6020 	ld a,#TK_INTGR 
      002138 AE 00 04         [ 2] 6021 	ldw x,#GPIO_CR2
      00213B 81               [ 4] 6022 	ret 
                                   6023 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   6024 ;  constant for port mode
                                   6025 ;  used by PMODE 
                                   6026 ;  input or output
                                   6027 ;------------------------
      00213C                       6028 const_output:
      00213C A6 84            [ 1] 6029 	ld a,#TK_INTGR 
      00213E AE 00 01         [ 2] 6030 	ldw x,#OUTP
      002141 81               [ 4] 6031 	ret 
      002142                       6032 const_input:
      002142 A6 84            [ 1] 6033 	ld a,#TK_INTGR 
      002144 AE 00 00         [ 2] 6034 	ldw x,#INP 
      002147 81               [ 4] 6035 	ret 
                                   6036 ;-----------------------
                                   6037 ; memory area constants
                                   6038 ;-----------------------
      002148                       6039 const_eeprom_base:
      002148 A6 84            [ 1] 6040 	ld a,#TK_INTGR 
      00214A AE 40 00         [ 2] 6041 	ldw x,#EEPROM_BASE 
      00214D 81               [ 4] 6042 	ret 
                                   6043 
                                   6044 ;---------------------------
                                   6045 ; BASIC: DATA 
                                   6046 ; when the interpreter find 
                                   6047 ; a DATA line it skip it.
                                   6048 ;---------------------------
      00214E                       6049 data:
      00214E 55 00 03 00 01   [ 1] 6050 	mov in,count 
      002153 81               [ 4] 6051 	ret 
                                   6052 
                                   6053 ;---------------------------
                                   6054 ; BASIC: DATLN  *expr*
                                   6055 ; set DATA pointer at line# 
                                   6056 ; specified by *expr* 
                                   6057 ;---------------------------
      002154                       6058 data_line:
      002154 CD 11 63         [ 4] 6059 	call expression
      002157 A1 84            [ 1] 6060 	cp a,#TK_INTGR
      002159 27 03            [ 1] 6061 	jreq 1$
      00215B CC 08 71         [ 2] 6062 	jp syntax_error 
      00215E CD 04 00         [ 4] 6063 1$: call search_lineno
      002161 5D               [ 2] 6064 	tnzw x 
      002162 26 05            [ 1] 6065 	jrne 3$
      002164 A6 05            [ 1] 6066 2$:	ld a,#ERR_NO_LINE 
      002166 CC 08 73         [ 2] 6067 	jp tb_error
      002169                       6068 3$: ; check if valid data line 
      002169 90 93            [ 1] 6069     ldw y,x 
      00216B EE 04            [ 2] 6070 	ldw x,(4,x)
      00216D A3 21 4E         [ 2] 6071 	cpw x,#data 
      002170 26 F2            [ 1] 6072 	jrne 2$ 
      002172 90 CF 00 06      [ 2] 6073 	ldw data_ptr,y
      002176 90 E6 02         [ 1] 6074 	ld a,(2,y)
      002179 C7 00 09         [ 1] 6075 	ld data_len,a 
      00217C 35 06 00 08      [ 1] 6076 	mov data_ofs,#FIRST_DATA_ITEM 
      002180 81               [ 4] 6077 	ret
                                   6078 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                   6079 ;---------------------------------
                                   6080 ; BASIC: RESTORE 
                                   6081 ; set data_ptr to first data line
                                   6082 ; if not DATA found pointer set to
                                   6083 ; zero 
                                   6084 ;---------------------------------
      002181                       6085 restore:
      002181 72 5F 00 06      [ 1] 6086 	clr data_ptr 
      002185 72 5F 00 07      [ 1] 6087 	clr data_ptr+1
      002189 72 5F 00 08      [ 1] 6088 	clr data_ofs 
      00218D 72 5F 00 09      [ 1] 6089 	clr data_len
      002191 CE 00 1C         [ 2] 6090 	ldw x,txtbgn
      002194                       6091 data_search_loop: 	
      002194 C3 00 1E         [ 2] 6092 	cpw x,txtend
      002197 24 17            [ 1] 6093 	jruge 9$
      002199 90 93            [ 1] 6094 	ldw y,x 
      00219B EE 04            [ 2] 6095 	ldw x,(4,x)
      00219D A3 21 4E         [ 2] 6096 	cpw x,#data 
      0021A0 26 1A            [ 1] 6097 	jrne try_next_line 
      0021A2 90 CF 00 06      [ 2] 6098 	ldw data_ptr,y 
      0021A6 90 E6 02         [ 1] 6099 	ld a,(2,y)
      0021A9 C7 00 09         [ 1] 6100 	ld data_len,a 
      0021AC 35 06 00 08      [ 1] 6101 	mov data_ofs,#FIRST_DATA_ITEM
      0021B0 72 5D 00 09      [ 1] 6102 9$:	tnz data_len 
      0021B4 26 05            [ 1] 6103     jrne 10$
      0021B6 A6 0C            [ 1] 6104 	ld a,#ERR_NO_DATA 
      0021B8 CC 08 73         [ 2] 6105 	jp tb_error 
      0021BB 81               [ 4] 6106 10$:ret
      0021BC                       6107 try_next_line:
      0021BC 93               [ 1] 6108 	ldw x,y 
      0021BD E6 02            [ 1] 6109 	ld a,(2,x)
      0021BF C7 00 0D         [ 1] 6110 	ld acc8,a 
      0021C2 72 5F 00 0C      [ 1] 6111 	clr acc16 
      0021C6 72 BB 00 0C      [ 2] 6112 	addw x,acc16 
      0021CA 20 C8            [ 2] 6113 	jra data_search_loop
                                   6114 
                                   6115 
                                   6116 ;---------------------------------
                                   6117 ; BASIC: READ 
                                   6118 ; return next data item | 0 
                                   6119 ;---------------------------------
                           000001  6120 	CTX_BPTR=1 
                           000003  6121 	CTX_IN=3 
                           000004  6122 	CTX_COUNT=4 
                           000005  6123 	XSAVE=5
                           000006  6124 	VSIZE=6
      0021CC                       6125 read:
      0021CC                       6126 	_vars  VSIZE 
      0021CC 52 06            [ 2]    1     sub sp,#VSIZE 
      0021CE                       6127 read01:	
      0021CE C6 00 08         [ 1] 6128 	ld a,data_ofs
      0021D1 C1 00 09         [ 1] 6129 	cp a,data_len 
      0021D4 27 37            [ 1] 6130 	jreq 2$ ; end of line  
      0021D6 CD 15 14         [ 4] 6131 	call save_context
      0021D9 CE 00 06         [ 2] 6132 	ldw x,data_ptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0021DC CF 00 04         [ 2] 6133 	ldw basicptr,x 
      0021DF 55 00 08 00 01   [ 1] 6134 	mov in,data_ofs 
      0021E4 55 00 09 00 03   [ 1] 6135 	mov count,data_len  
      0021E9 CD 11 63         [ 4] 6136 	call expression 
      0021EC A1 84            [ 1] 6137 	cp a,#TK_INTGR 
      0021EE 27 03            [ 1] 6138 	jreq 1$ 
      0021F0 CC 08 71         [ 2] 6139 	jp syntax_error 
      0021F3                       6140 1$:
      0021F3 1F 05            [ 2] 6141 	ldw (XSAVE,SP),x
      0021F5 CD 09 63         [ 4] 6142 	call next_token ; skip comma
      0021F8 CE 00 04         [ 2] 6143 	ldw x,basicptr 
      0021FB CF 00 06         [ 2] 6144 	ldw data_ptr,x 
      0021FE 55 00 01 00 08   [ 1] 6145 	mov data_ofs,in 
      002203 CD 15 24         [ 4] 6146 	call rest_context
      002206 1E 05            [ 2] 6147 	ldw x,(XSAVE,sp)
      002208 A6 84            [ 1] 6148 	ld a,#TK_INTGR
      00220A                       6149 	_drop VSIZE 
      00220A 5B 06            [ 2]    1     addw sp,#VSIZE 
      00220C 81               [ 4] 6150 	ret 
      00220D                       6151 2$: ; end of line reached 
      00220D 90 CE 00 06      [ 2] 6152 	ldw y, data_ptr 
      002211 72 5F 00 06      [ 1] 6153 	clr data_ptr
      002215 72 5F 00 07      [ 1] 6154 	clr data_ptr+1   
      002219 72 5F 00 08      [ 1] 6155 	clr data_ofs 
      00221D 72 5F 00 09      [ 1] 6156 	clr data_len 
      002221 CD 21 BC         [ 4] 6157 	call try_next_line 
      002224 20 A8            [ 2] 6158 	jra read01
                                   6159 
                                   6160 
                                   6161 ;---------------------------------
                                   6162 ; BASIC: SPIEN clkdiv, 0|1  
                                   6163 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   6164 ; if clkdiv==-1 disable SPI
                                   6165 ; 0|1 -> disable|enable  
                                   6166 ;--------------------------------- 
                           000005  6167 SPI_CS_BIT=5
      002226                       6168 spi_enable:
      002226 CD 10 6A         [ 4] 6169 	call arg_list 
      002229 A1 02            [ 1] 6170 	cp a,#2
      00222B 27 03            [ 1] 6171 	jreq 1$
      00222D CC 08 71         [ 2] 6172 	jp syntax_error 
      002230                       6173 1$: 
      002230 72 12 50 C7      [ 1] 6174 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002234 85               [ 2] 6175 	popw x  
      002235 5D               [ 2] 6176 	tnzw x 
      002236 27 21            [ 1] 6177 	jreq spi_disable 
      002238 85               [ 2] 6178 	popw x 
      002239 A6 08            [ 1] 6179 	ld a,#(1<<SPI_CR1_BR)
      00223B 42               [ 4] 6180 	mul x,a 
      00223C 9F               [ 1] 6181 	ld a,xl 
      00223D C7 52 00         [ 1] 6182 	ld SPI_CR1,a 
                                   6183 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002240 72 1A 50 14      [ 1] 6184 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002244 72 1A 50 16      [ 1] 6185 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   6186 ; configure SPI as master mode 0.	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      002248 72 14 52 00      [ 1] 6187 	bset SPI_CR1,#SPI_CR1_MSTR
                                   6188 ; ~CS line controlled by sofware 	
      00224C 72 12 52 01      [ 1] 6189 	bset SPI_CR2,#SPI_CR2_SSM 
      002250 72 10 52 01      [ 1] 6190     bset SPI_CR2,#SPI_CR2_SSI 
                                   6191 ; enable SPI
      002254 72 1C 52 00      [ 1] 6192 	bset SPI_CR1,#SPI_CR1_SPE 	
      002258 81               [ 4] 6193 	ret 
      002259                       6194 spi_disable:
      002259                       6195 	_drop #2; throw first argument.
      002259 5B 02            [ 2]    1     addw sp,##2 
                                   6196 ; wait spi idle 
      00225B A6 82            [ 1] 6197 1$:	ld a,#0x82 
      00225D C4 52 03         [ 1] 6198 	and a,SPI_SR
      002260 A1 02            [ 1] 6199 	cp a,#2 
      002262 26 F7            [ 1] 6200 	jrne 1$
      002264 72 1D 52 00      [ 1] 6201 	bres SPI_CR1,#SPI_CR1_SPE
      002268 72 13 50 C7      [ 1] 6202 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      00226C 72 1B 50 16      [ 1] 6203 	bres PE_DDR,#SPI_CS_BIT 
      002270 81               [ 4] 6204 	ret 
                                   6205 
      002271                       6206 spi_clear_error:
      002271 A6 78            [ 1] 6207 	ld a,#0x78 
      002273 C5 52 03         [ 1] 6208 	bcp a,SPI_SR 
      002276 27 04            [ 1] 6209 	jreq 1$
      002278 72 5F 52 03      [ 1] 6210 	clr SPI_SR 
      00227C 81               [ 4] 6211 1$: ret 
                                   6212 
      00227D                       6213 spi_send_byte:
      00227D 88               [ 1] 6214 	push a 
      00227E CD 22 71         [ 4] 6215 	call spi_clear_error
      002281 84               [ 1] 6216 	pop a 
      002282 72 03 52 03 FB   [ 2] 6217 	btjf SPI_SR,#SPI_SR_TXE,.
      002287 C7 52 04         [ 1] 6218 	ld SPI_DR,a
      00228A 72 01 52 03 FB   [ 2] 6219 	btjf SPI_SR,#SPI_SR_RXNE,.  
      00228F C6 52 04         [ 1] 6220 	ld a,SPI_DR 
      002292 81               [ 4] 6221 	ret 
                                   6222 
      002293                       6223 spi_rcv_byte:
      002293 A6 FF            [ 1] 6224 	ld a,#255
      002295 72 01 52 03 E3   [ 2] 6225 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      00229A C6 52 04         [ 1] 6226 	ld a,SPI_DR 
      00229D 81               [ 4] 6227 	ret
                                   6228 
                                   6229 ;------------------------------
                                   6230 ; BASIC: SPIWR byte [,byte]
                                   6231 ; write 1 or more byte
                                   6232 ;------------------------------
      00229E                       6233 spi_write:
      00229E CD 11 63         [ 4] 6234 	call expression
      0022A1 A1 84            [ 1] 6235 	cp a,#TK_INTGR 
      0022A3 27 03            [ 1] 6236 	jreq 1$
      0022A5 CC 08 71         [ 2] 6237 	jp syntax_error 
      0022A8                       6238 1$:	
      0022A8 9F               [ 1] 6239 	ld a,xl 
      0022A9 CD 22 7D         [ 4] 6240 	call spi_send_byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      0022AC CD 09 63         [ 4] 6241 	call next_token 
      0022AF A1 09            [ 1] 6242 	cp a,#TK_COMMA 
      0022B1 26 02            [ 1] 6243 	jrne 2$ 
      0022B3 20 E9            [ 2] 6244 	jra spi_write 
      0022B5 4D               [ 1] 6245 2$:	tnz a 
      0022B6 27 05            [ 1] 6246 	jreq 3$
      0022B8                       6247 	_unget_token  
      0022B8 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0022BD 81               [ 4] 6248 3$:	ret 
                                   6249 
                                   6250 
                                   6251 ;-------------------------------
                                   6252 ; BASIC: SPIRD 	
                                   6253 ; read one byte from SPI 
                                   6254 ;-------------------------------
      0022BE                       6255 spi_read:
      0022BE CD 22 93         [ 4] 6256 	call spi_rcv_byte 
      0022C1 5F               [ 1] 6257 	clrw x 
      0022C2 97               [ 1] 6258 	ld xl,a 
      0022C3 A6 84            [ 1] 6259 	ld a,#TK_INTGR 
      0022C5 81               [ 4] 6260 	ret 
                                   6261 
                                   6262 ;------------------------------
                                   6263 ; BASIC: SPISEL 0|1 
                                   6264 ; set state of ~CS line
                                   6265 ; 0|1 deselect|select  
                                   6266 ;------------------------------
      0022C6                       6267 spi_select:
      0022C6 CD 09 63         [ 4] 6268 	call next_token 
      0022C9 A1 84            [ 1] 6269 	cp a,#TK_INTGR 
      0022CB 27 03            [ 1] 6270 	jreq 1$
      0022CD CC 08 71         [ 2] 6271 	jp syntax_error 
      0022D0 5D               [ 2] 6272 1$: tnzw x  
      0022D1 27 05            [ 1] 6273 	jreq cs_high 
      0022D3 72 1B 50 14      [ 1] 6274 	bres PE_ODR,#SPI_CS_BIT
      0022D7 81               [ 4] 6275 	ret 
      0022D8                       6276 cs_high: 
      0022D8 72 1A 50 14      [ 1] 6277 	bset PE_ODR,#SPI_CS_BIT
      0022DC 81               [ 4] 6278 	ret 
                                   6279 
                                   6280 
                                   6281 ;------------------------------
                                   6282 ; BASIC: FILERX
                                   6283 ; Use to receive a BASIC program
                                   6284 ; from the PC using XMODEM 
                                   6285 ; protocol. The file is store in
                                   6286 ; Each line received is compiled
                                   6287 ; then stored in RAM. When reception 
                                   6288 ; is completed with success  the 
                                   6289 ; program is ready to be executed 
                                   6290 ; or save as local file.
                                   6291 ;--------------------------------
      0022DD                       6292 file_receive:
      0022DD 72 01 00 23 05   [ 2] 6293 	btjf flags,#FRUN,1$
      0022E2 A6 07            [ 1] 6294 	ld a,#ERR_CMD_ONLY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0022E4 CC 08 73         [ 2] 6295 	jp tb_error 
      0022E7                       6296 1$:	
      0022E7 CD 06 DD         [ 4] 6297 	call clear_basic
      0022EA CE 00 1C         [ 2] 6298 	ldw x, txtbgn
      0022ED CD 00 00         [ 4] 6299 	call xreceive 
      0022F0 72 BB 00 1C      [ 2] 6300 	addw x,txtbgn 
      0022F4 CF 00 1E         [ 2] 6301 	ldw txtend,x 
      0022F7 CD 0A 00         [ 4] 6302 	call print_int 
      0022FA AE 23 01         [ 2] 6303 	ldw x,#fsize_msg 
      0022FD CD 02 B3         [ 4] 6304 	call puts 
      002300 81               [ 4] 6305 	ret 
      002301 20 62 79 74 65 73 20  6306 fsize_msg: .asciz " bytes received\n"
             72 65 63 65 69 76 65
             64 0A 00
                                   6307 
                                   6308 ;------------------------------
                                   6309 ; BASIC: FILETX "file_name" 
                                   6310 ; Transmit the program in RAM 
                                   6311 ; To the PC using XMODEM protocol.
                                   6312 ; The file transmitted as source 
                                   6313 ; file not tokenized. 
                                   6314 ;-------------------------------
      002312                       6315 file_transmit:
                                   6316 
      002312 81               [ 4] 6317 	ret 
                                   6318 
                                   6319 
                                   6320 ;------------------------------
                                   6321 ;      dictionary 
                                   6322 ; format:
                                   6323 ;   link:   2 bytes 
                                   6324 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6325 ;   cmd_name: 16 byte max 
                                   6326 ;   code_address: 2 bytes 
                                   6327 ;------------------------------
                                   6328 	.macro _dict_entry len,name,cmd 
                                   6329 	.word LINK 
                                   6330 	LINK=.
                                   6331 name:
                                   6332 	.byte len 	
                                   6333 	.ascii "name"
                                   6334 	.word cmd 
                                   6335 	.endm 
                                   6336 
                           000000  6337 	LINK=0
                                   6338 ; respect alphabetic order for BASIC names from Z-A
                                   6339 ; this sort order is for a cleaner WORDS cmd output. 	
      002313                       6340 kword_end:
      002313                       6341 	_dict_entry,5+F_IFUNC,XPEEK,xpeek 
      002313 00 00                    1 	.word LINK 
                           002315     2 	LINK=.
      002315                          3 XPEEK:
      002315 45                       4 	.byte 5+F_IFUNC 	
      002316 58 50 45 45 4B           5 	.ascii "XPEEK"
      00231B 16 43                    6 	.word xpeek 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      00231D                       6342 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      00231D 23 15                    1 	.word LINK 
                           00231F     2 	LINK=.
      00231F                          3 XOR:
      00231F 43                       4 	.byte 3+F_IFUNC 	
      002320 58 4F 52                 5 	.ascii "XOR"
      002323 1E 69                    6 	.word bit_xor 
      002325                       6343 	_dict_entry,5,WRITE,write  
      002325 23 1F                    1 	.word LINK 
                           002327     2 	LINK=.
      002327                          3 WRITE:
      002327 05                       4 	.byte 5 	
      002328 57 52 49 54 45           5 	.ascii "WRITE"
      00232D 1C 8E                    6 	.word write 
      00232F                       6344 	_dict_entry,5,WORDS,words 
      00232F 23 27                    1 	.word LINK 
                           002331     2 	LINK=.
      002331                          3 WORDS:
      002331 05                       4 	.byte 5 	
      002332 57 4F 52 44 53           5 	.ascii "WORDS"
      002337 1F 97                    6 	.word words 
      002339                       6345 	_dict_entry 4,WAIT,wait 
      002339 23 31                    1 	.word LINK 
                           00233B     2 	LINK=.
      00233B                          3 WAIT:
      00233B 04                       4 	.byte 4 	
      00233C 57 41 49 54              5 	.ascii "WAIT"
      002340 15 A6                    6 	.word wait 
      002342                       6346 	_dict_entry,3+F_IFUNC,USR,usr
      002342 23 3B                    1 	.word LINK 
                           002344     2 	LINK=.
      002344                          3 USR:
      002344 43                       4 	.byte 3+F_IFUNC 	
      002345 55 53 52                 5 	.ascii "USR"
      002348 1D 3A                    6 	.word usr 
      00234A                       6347 	_dict_entry,5,UNTIL,until 
      00234A 23 44                    1 	.word LINK 
                           00234C     2 	LINK=.
      00234C                          3 UNTIL:
      00234C 05                       4 	.byte 5 	
      00234D 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002352 20 BA                    6 	.word until 
      002354                       6348 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      002354 23 4C                    1 	.word LINK 
                           002356     2 	LINK=.
      002356                          3 UFLASH:
      002356 46                       4 	.byte 6+F_IFUNC 	
      002357 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      00235D 1D 34                    6 	.word uflash 
      00235F                       6349 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      00235F 23 56                    1 	.word LINK 
                           002361     2 	LINK=.
      002361                          3 UBOUND:
      002361 46                       4 	.byte 6+F_IFUNC 	
      002362 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002368 12 53                    6 	.word ubound 
      00236A                       6350 	_dict_entry,4,TONE,tone  
      00236A 23 61                    1 	.word LINK 
                           00236C     2 	LINK=.
      00236C                          3 TONE:
      00236C 04                       4 	.byte 4 	
      00236D 54 4F 4E 45              5 	.ascii "TONE"
      002371 18 0C                    6 	.word tone 
      002373                       6351 	_dict_entry,2,TO,to
      002373 23 6C                    1 	.word LINK 
                           002375     2 	LINK=.
      002375                          3 TO:
      002375 02                       4 	.byte 2 	
      002376 54 4F                    5 	.ascii "TO"
      002378 16 9C                    6 	.word to 
      00237A                       6352 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      00237A 23 75                    1 	.word LINK 
                           00237C     2 	LINK=.
      00237C                          3 TIMEOUT:
      00237C 47                       4 	.byte 7+F_IFUNC 	
      00237D 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002384 20 0C                    6 	.word timeout 
      002386                       6353 	_dict_entry,5,TIMER,set_timer
      002386 23 7C                    1 	.word LINK 
                           002388     2 	LINK=.
      002388                          3 TIMER:
      002388 05                       4 	.byte 5 	
      002389 54 49 4D 45 52           5 	.ascii "TIMER"
      00238E 1F FD                    6 	.word set_timer 
      002390                       6354 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      002390 23 88                    1 	.word LINK 
                           002392     2 	LINK=.
      002392                          3 TICKS:
      002392 45                       4 	.byte 5+F_IFUNC 	
      002393 54 49 43 4B 53           5 	.ascii "TICKS"
      002398 1E 1F                    6 	.word get_ticks 
      00239A                       6355 	_dict_entry,4,STOP,stop 
      00239A 23 92                    1 	.word LINK 
                           00239C     2 	LINK=.
      00239C                          3 STOP:
      00239C 04                       4 	.byte 4 	
      00239D 53 54 4F 50              5 	.ascii "STOP"
      0023A1 19 30                    6 	.word stop 
      0023A3                       6356 	_dict_entry,4,STEP,step 
      0023A3 23 9C                    1 	.word LINK 
                           0023A5     2 	LINK=.
      0023A5                          3 STEP:
      0023A5 04                       4 	.byte 4 	
      0023A6 53 54 45 50              5 	.ascii "STEP"
      0023AA 16 CC                    6 	.word step 
      0023AC                       6357 	_dict_entry,5,SPIWR,spi_write
      0023AC 23 A5                    1 	.word LINK 
                           0023AE     2 	LINK=.
      0023AE                          3 SPIWR:
      0023AE 05                       4 	.byte 5 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0023AF 53 50 49 57 52           5 	.ascii "SPIWR"
      0023B4 22 9E                    6 	.word spi_write 
      0023B6                       6358 	_dict_entry,6,SPISEL,spi_select
      0023B6 23 AE                    1 	.word LINK 
                           0023B8     2 	LINK=.
      0023B8                          3 SPISEL:
      0023B8 06                       4 	.byte 6 	
      0023B9 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      0023BF 22 C6                    6 	.word spi_select 
      0023C1                       6359 	_dict_entry,5,SPIEN,spi_enable 
      0023C1 23 B8                    1 	.word LINK 
                           0023C3     2 	LINK=.
      0023C3                          3 SPIEN:
      0023C3 05                       4 	.byte 5 	
      0023C4 53 50 49 45 4E           5 	.ascii "SPIEN"
      0023C9 22 26                    6 	.word spi_enable 
      0023CB                       6360 	_dict_entry,5+F_IFUNC,SPIRD, spi_read 
      0023CB 23 C3                    1 	.word LINK 
                           0023CD     2 	LINK=.
      0023CD                          3 SPIRD:
      0023CD 45                       4 	.byte 5+F_IFUNC 	
      0023CE 53 50 49 52 44           5 	.ascii "SPIRD"
      0023D3 22 BE                    6 	.word spi_read 
      0023D5                       6361 	_dict_entry,5,SLEEP,sleep 
      0023D5 23 CD                    1 	.word LINK 
                           0023D7     2 	LINK=.
      0023D7                          3 SLEEP:
      0023D7 05                       4 	.byte 5 	
      0023D8 53 4C 45 45 50           5 	.ascii "SLEEP"
      0023DD 1D B8                    6 	.word sleep 
      0023DF                       6362 	_dict_entry,4+F_IFUNC,SIZE,size
      0023DF 23 D7                    1 	.word LINK 
                           0023E1     2 	LINK=.
      0023E1                          3 SIZE:
      0023E1 44                       4 	.byte 4+F_IFUNC 	
      0023E2 53 49 5A 45              5 	.ascii "SIZE"
      0023E6 12 49                    6 	.word size 
      0023E8                       6363     _dict_entry,4,SHOW,show 
      0023E8 23 E1                    1 	.word LINK 
                           0023EA     2 	LINK=.
      0023EA                          3 SHOW:
      0023EA 04                       4 	.byte 4 	
      0023EB 53 48 4F 57              5 	.ascii "SHOW"
      0023EF 11 FE                    6 	.word show 
      0023F1                       6364 	_dict_entry,4,SAVE,save
      0023F1 23 EA                    1 	.word LINK 
                           0023F3     2 	LINK=.
      0023F3                          3 SAVE:
      0023F3 04                       4 	.byte 4 	
      0023F4 53 41 56 45              5 	.ascii "SAVE"
      0023F8 1A 67                    6 	.word save 
      0023FA                       6365 	_dict_entry 3,RUN,run
      0023FA 23 F3                    1 	.word LINK 
                           0023FC     2 	LINK=.
      0023FC                          3 RUN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0023FC 03                       4 	.byte 3 	
      0023FD 52 55 4E                 5 	.ascii "RUN"
      002400 17 AC                    6 	.word run 
      002402                       6366 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      002402 23 FC                    1 	.word LINK 
                           002404     2 	LINK=.
      002404                          3 RSHIFT:
      002404 46                       4 	.byte 6+F_IFUNC 	
      002405 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00240B 1E 9A                    6 	.word rshift 
      00240D                       6367 	_dict_entry,3+F_IFUNC,RND,random 
      00240D 24 04                    1 	.word LINK 
                           00240F     2 	LINK=.
      00240F                          3 RND:
      00240F 43                       4 	.byte 3+F_IFUNC 	
      002410 52 4E 44                 5 	.ascii "RND"
      002413 1F 30                    6 	.word random 
      002415                       6368 	_dict_entry,6,RETURN,return 
      002415 24 0F                    1 	.word LINK 
                           002417     2 	LINK=.
      002417                          3 RETURN:
      002417 06                       4 	.byte 6 	
      002418 52 45 54 55 52 4E        5 	.ascii "RETURN"
      00241E 17 8E                    6 	.word return 
      002420                       6369 	_dict_entry,7,RESTORE,restore 
      002420 24 17                    1 	.word LINK 
                           002422     2 	LINK=.
      002422                          3 RESTORE:
      002422 07                       4 	.byte 7 	
      002423 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      00242A 21 81                    6 	.word restore 
      00242C                       6370 	_dict_entry 6,REMARK,remark 
      00242C 24 22                    1 	.word LINK 
                           00242E     2 	LINK=.
      00242E                          3 REMARK:
      00242E 06                       4 	.byte 6 	
      00242F 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      002435 15 A0                    6 	.word remark 
      002437                       6371 	_dict_entry,6,REBOOT,cold_start
      002437 24 2E                    1 	.word LINK 
                           002439     2 	LINK=.
      002439                          3 REBOOT:
      002439 06                       4 	.byte 6 	
      00243A 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      002440 05 CB                    6 	.word cold_start 
      002442                       6372 	_dict_entry,4+F_IFUNC,READ,read  
      002442 24 39                    1 	.word LINK 
                           002444     2 	LINK=.
      002444                          3 READ:
      002444 44                       4 	.byte 4+F_IFUNC 	
      002445 52 45 41 44              5 	.ascii "READ"
      002449 21 CC                    6 	.word read 
      00244B                       6373 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      00244B 24 44                    1 	.word LINK 
                           00244D     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      00244D                          3 QKEY:
      00244D 44                       4 	.byte 4+F_IFUNC 	
      00244E 51 4B 45 59              5 	.ascii "QKEY"
      002452 1C FF                    6 	.word qkey 
      002454                       6374 	_dict_entry,4+F_IFUNC,PRTI,const_porti 
      002454 24 4D                    1 	.word LINK 
                           002456     2 	LINK=.
      002456                          3 PRTI:
      002456 44                       4 	.byte 4+F_IFUNC 	
      002457 50 52 54 49              5 	.ascii "PRTI"
      00245B 21 18                    6 	.word const_porti 
      00245D                       6375 	_dict_entry,4+F_IFUNC,PRTH,const_porth 
      00245D 24 56                    1 	.word LINK 
                           00245F     2 	LINK=.
      00245F                          3 PRTH:
      00245F 44                       4 	.byte 4+F_IFUNC 	
      002460 50 52 54 48              5 	.ascii "PRTH"
      002464 21 12                    6 	.word const_porth 
      002466                       6376 	_dict_entry,4+F_IFUNC,PRTG,const_portg 
      002466 24 5F                    1 	.word LINK 
                           002468     2 	LINK=.
      002468                          3 PRTG:
      002468 44                       4 	.byte 4+F_IFUNC 	
      002469 50 52 54 47              5 	.ascii "PRTG"
      00246D 21 0C                    6 	.word const_portg 
      00246F                       6377 	_dict_entry,4+F_IFUNC,PRTF,const_portf
      00246F 24 68                    1 	.word LINK 
                           002471     2 	LINK=.
      002471                          3 PRTF:
      002471 44                       4 	.byte 4+F_IFUNC 	
      002472 50 52 54 46              5 	.ascii "PRTF"
      002476 21 06                    6 	.word const_portf 
      002478                       6378 	_dict_entry,4+F_IFUNC,PRTE,const_porte
      002478 24 71                    1 	.word LINK 
                           00247A     2 	LINK=.
      00247A                          3 PRTE:
      00247A 44                       4 	.byte 4+F_IFUNC 	
      00247B 50 52 54 45              5 	.ascii "PRTE"
      00247F 21 00                    6 	.word const_porte 
      002481                       6379 	_dict_entry,4+F_IFUNC,PRTD,const_portd
      002481 24 7A                    1 	.word LINK 
                           002483     2 	LINK=.
      002483                          3 PRTD:
      002483 44                       4 	.byte 4+F_IFUNC 	
      002484 50 52 54 44              5 	.ascii "PRTD"
      002488 20 FA                    6 	.word const_portd 
      00248A                       6380 	_dict_entry,4+F_IFUNC,PRTC,const_portc
      00248A 24 83                    1 	.word LINK 
                           00248C     2 	LINK=.
      00248C                          3 PRTC:
      00248C 44                       4 	.byte 4+F_IFUNC 	
      00248D 50 52 54 43              5 	.ascii "PRTC"
      002491 20 F4                    6 	.word const_portc 
      002493                       6381 	_dict_entry,4+F_IFUNC,PRTB,const_portb
      002493 24 8C                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                           002495     2 	LINK=.
      002495                          3 PRTB:
      002495 44                       4 	.byte 4+F_IFUNC 	
      002496 50 52 54 42              5 	.ascii "PRTB"
      00249A 20 EE                    6 	.word const_portb 
      00249C                       6382 	_dict_entry,4+F_IFUNC,PRTA,const_porta 
      00249C 24 95                    1 	.word LINK 
                           00249E     2 	LINK=.
      00249E                          3 PRTA:
      00249E 44                       4 	.byte 4+F_IFUNC 	
      00249F 50 52 54 41              5 	.ascii "PRTA"
      0024A3 20 E8                    6 	.word const_porta 
      0024A5                       6383 	_dict_entry 5,PRINT,print 
      0024A5 24 9E                    1 	.word LINK 
                           0024A7     2 	LINK=.
      0024A7                          3 PRINT:
      0024A7 05                       4 	.byte 5 	
      0024A8 50 52 49 4E 54           5 	.ascii "PRINT"
      0024AD 14 A3                    6 	.word print 
      0024AF                       6384 	_dict_entry,4+F_IFUNC,POUT,const_output
      0024AF 24 A7                    1 	.word LINK 
                           0024B1     2 	LINK=.
      0024B1                          3 POUT:
      0024B1 44                       4 	.byte 4+F_IFUNC 	
      0024B2 50 4F 55 54              5 	.ascii "POUT"
      0024B6 21 3C                    6 	.word const_output 
      0024B8                       6385 	_dict_entry,4,POKE,poke 
      0024B8 24 B1                    1 	.word LINK 
                           0024BA     2 	LINK=.
      0024BA                          3 POKE:
      0024BA 04                       4 	.byte 4 	
      0024BB 50 4F 4B 45              5 	.ascii "POKE"
      0024BF 16 23                    6 	.word poke 
      0024C1                       6386 	_dict_entry,4+F_IFUNC,PINP,const_input
      0024C1 24 BA                    1 	.word LINK 
                           0024C3     2 	LINK=.
      0024C3                          3 PINP:
      0024C3 44                       4 	.byte 4+F_IFUNC 	
      0024C4 50 49 4E 50              5 	.ascii "PINP"
      0024C8 21 42                    6 	.word const_input 
      0024CA                       6387 	_dict_entry,4+F_IFUNC,PEEK,peek 
      0024CA 24 C3                    1 	.word LINK 
                           0024CC     2 	LINK=.
      0024CC                          3 PEEK:
      0024CC 44                       4 	.byte 4+F_IFUNC 	
      0024CD 50 45 45 4B              5 	.ascii "PEEK"
      0024D1 16 32                    6 	.word peek 
      0024D3                       6388 	_dict_entry,5,PMODE,pin_mode 
      0024D3 24 CC                    1 	.word LINK 
                           0024D5     2 	LINK=.
      0024D5                          3 PMODE:
      0024D5 05                       4 	.byte 5 	
      0024D6 50 4D 4F 44 45           5 	.ascii "PMODE"
      0024DB 1E BF                    6 	.word pin_mode 
      0024DD                       6389 	_dict_entry,5,PAUSE,pause 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0024DD 24 D5                    1 	.word LINK 
                           0024DF     2 	LINK=.
      0024DF                          3 PAUSE:
      0024DF 05                       4 	.byte 5 	
      0024E0 50 41 55 53 45           5 	.ascii "PAUSE"
      0024E5 1D C3                    6 	.word pause 
      0024E7                       6390 	_dict_entry,2+F_IFUNC,OR,bit_or
      0024E7 24 DF                    1 	.word LINK 
                           0024E9     2 	LINK=.
      0024E9                          3 OR:
      0024E9 42                       4 	.byte 2+F_IFUNC 	
      0024EA 4F 52                    5 	.ascii "OR"
      0024EC 1E 51                    6 	.word bit_or 
      0024EE                       6391 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0024EE 24 E9                    1 	.word LINK 
                           0024F0     2 	LINK=.
      0024F0                          3 ODR:
      0024F0 43                       4 	.byte 3+F_IFUNC 	
      0024F1 4F 44 52                 5 	.ascii "ODR"
      0024F4 21 1E                    6 	.word const_odr 
      0024F6                       6392 	_dict_entry,3+F_IFUNC,NOT,func_not 
      0024F6 24 F0                    1 	.word LINK 
                           0024F8     2 	LINK=.
      0024F8                          3 NOT:
      0024F8 43                       4 	.byte 3+F_IFUNC 	
      0024F9 4E 4F 54                 5 	.ascii "NOT"
      0024FC 20 19                    6 	.word func_not 
      0024FE                       6393 	_dict_entry,3,NEW,new
      0024FE 24 F8                    1 	.word LINK 
                           002500     2 	LINK=.
      002500                          3 NEW:
      002500 03                       4 	.byte 3 	
      002501 4E 45 57                 5 	.ascii "NEW"
      002504 19 7C                    6 	.word new 
      002506                       6394 	_dict_entry,4,NEXT,next 
      002506 25 00                    1 	.word LINK 
                           002508     2 	LINK=.
      002508                          3 NEXT:
      002508 04                       4 	.byte 4 	
      002509 4E 45 58 54              5 	.ascii "NEXT"
      00250D 16 F3                    6 	.word next 
      00250F                       6395 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      00250F 25 08                    1 	.word LINK 
                           002511     2 	LINK=.
      002511                          3 LSHIFT:
      002511 46                       4 	.byte 6+F_IFUNC 	
      002512 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      002518 1E 81                    6 	.word lshift 
      00251A                       6396 	_dict_entry,3+F_IFUNC,LOG,log2 
      00251A 25 11                    1 	.word LINK 
                           00251C     2 	LINK=.
      00251C                          3 LOG:
      00251C 43                       4 	.byte 3+F_IFUNC 	
      00251D 4C 4F 47                 5 	.ascii "LOG"
      002520 20 61                    6 	.word log2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002522                       6397 	_dict_entry,4,LOAD,load 
      002522 25 1C                    1 	.word LINK 
                           002524     2 	LINK=.
      002524                          3 LOAD:
      002524 04                       4 	.byte 4 	
      002525 4C 4F 41 44              5 	.ascii "LOAD"
      002529 1B 5F                    6 	.word load 
      00252B                       6398 	_dict_entry 4,LIST,list
      00252B 25 24                    1 	.word LINK 
                           00252D     2 	LINK=.
      00252D                          3 LIST:
      00252D 04                       4 	.byte 4 	
      00252E 4C 49 53 54              5 	.ascii "LIST"
      002532 12 A0                    6 	.word list 
      002534                       6399 	_dict_entry 3,LET,let 
      002534 25 2D                    1 	.word LINK 
                           002536     2 	LINK=.
      002536                          3 LET:
      002536 03                       4 	.byte 3 	
      002537 4C 45 54                 5 	.ascii "LET"
      00253A 12 75                    6 	.word let 
      00253C                       6400 	_dict_entry,3+F_IFUNC,KEY,key 
      00253C 25 36                    1 	.word LINK 
                           00253E     2 	LINK=.
      00253E                          3 KEY:
      00253E 43                       4 	.byte 3+F_IFUNC 	
      00253F 4B 45 59                 5 	.ascii "KEY"
      002542 1C F7                    6 	.word key 
      002544                       6401 	_dict_entry,7,IWDGREF,refresh_iwdg
      002544 25 3E                    1 	.word LINK 
                           002546     2 	LINK=.
      002546                          3 IWDGREF:
      002546 07                       4 	.byte 7 	
      002547 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      00254E 20 5C                    6 	.word refresh_iwdg 
      002550                       6402 	_dict_entry,6,IWDGEN,enable_iwdg
      002550 25 46                    1 	.word LINK 
                           002552     2 	LINK=.
      002552                          3 IWDGEN:
      002552 06                       4 	.byte 6 	
      002553 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      002559 20 26                    6 	.word enable_iwdg 
      00255B                       6403 	_dict_entry,6+F_IFUNC,INVERT,invert 
      00255B 25 52                    1 	.word LINK 
                           00255D     2 	LINK=.
      00255D                          3 INVERT:
      00255D 46                       4 	.byte 6+F_IFUNC 	
      00255E 49 4E 56 45 52 54        5 	.ascii "INVERT"
      002564 20 96                    6 	.word invert 
      002566                       6404 	_dict_entry,5,INPUT,input_var  
      002566 25 5D                    1 	.word LINK 
                           002568     2 	LINK=.
      002568                          3 INPUT:
      002568 05                       4 	.byte 5 	
      002569 49 4E 50 55 54           5 	.ascii "INPUT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      00256E 15 34                    6 	.word input_var 
      002570                       6405 	_dict_entry,2,IF,if 
      002570 25 68                    1 	.word LINK 
                           002572     2 	LINK=.
      002572                          3 IF:
      002572 02                       4 	.byte 2 	
      002573 49 46                    5 	.ascii "IF"
      002575 16 5F                    6 	.word if 
      002577                       6406 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      002577 25 72                    1 	.word LINK 
                           002579     2 	LINK=.
      002579                          3 IDR:
      002579 43                       4 	.byte 3+F_IFUNC 	
      00257A 49 44 52                 5 	.ascii "IDR"
      00257D 21 24                    6 	.word const_idr 
      00257F                       6407 	_dict_entry,3,HEX,hex_base
      00257F 25 79                    1 	.word LINK 
                           002581     2 	LINK=.
      002581                          3 HEX:
      002581 03                       4 	.byte 3 	
      002582 48 45 58                 5 	.ascii "HEX"
      002585 12 3F                    6 	.word hex_base 
      002587                       6408 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      002587 25 81                    1 	.word LINK 
                           002589     2 	LINK=.
      002589                          3 GPIO:
      002589 44                       4 	.byte 4+F_IFUNC 	
      00258A 47 50 49 4F              5 	.ascii "GPIO"
      00258E 1D 0A                    6 	.word gpio 
      002590                       6409 	_dict_entry,4,GOTO,goto 
      002590 25 89                    1 	.word LINK 
                           002592     2 	LINK=.
      002592                          3 GOTO:
      002592 04                       4 	.byte 4 	
      002593 47 4F 54 4F              5 	.ascii "GOTO"
      002597 17 53                    6 	.word goto 
      002599                       6410 	_dict_entry,5,GOSUB,gosub 
      002599 25 92                    1 	.word LINK 
                           00259B     2 	LINK=.
      00259B                          3 GOSUB:
      00259B 05                       4 	.byte 5 	
      00259C 47 4F 53 55 42           5 	.ascii "GOSUB"
      0025A1 17 6E                    6 	.word gosub 
      0025A3                       6411 	_dict_entry,6,FORGET,forget 
      0025A3 25 9B                    1 	.word LINK 
                           0025A5     2 	LINK=.
      0025A5                          3 FORGET:
      0025A5 06                       4 	.byte 6 	
      0025A6 46 4F 52 47 45 54        5 	.ascii "FORGET"
      0025AC 1B 8F                    6 	.word forget 
      0025AE                       6412 	_dict_entry,3,FOR,for 
      0025AE 25 A5                    1 	.word LINK 
                           0025B0     2 	LINK=.
      0025B0                          3 FOR:
      0025B0 03                       4 	.byte 3 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0025B1 46 4F 52                 5 	.ascii "FOR"
      0025B4 16 73                    6 	.word for 
      0025B6                       6413 	_dict_entry,6,FILETX,file_transmit
      0025B6 25 B0                    1 	.word LINK 
                           0025B8     2 	LINK=.
      0025B8                          3 FILETX:
      0025B8 06                       4 	.byte 6 	
      0025B9 46 49 4C 45 54 58        5 	.ascii "FILETX"
      0025BF 23 12                    6 	.word file_transmit 
      0025C1                       6414 	_dict_entry,6,FILERX,file_receive 
      0025C1 25 B8                    1 	.word LINK 
                           0025C3     2 	LINK=.
      0025C3                          3 FILERX:
      0025C3 06                       4 	.byte 6 	
      0025C4 46 49 4C 45 52 58        5 	.ascii "FILERX"
      0025CA 22 DD                    6 	.word file_receive 
      0025CC                       6415 	_dict_entry,4,FCPU,fcpu 
      0025CC 25 C3                    1 	.word LINK 
                           0025CE     2 	LINK=.
      0025CE                          3 FCPU:
      0025CE 04                       4 	.byte 4 	
      0025CF 46 43 50 55              5 	.ascii "FCPU"
      0025D3 1E B3                    6 	.word fcpu 
      0025D5                       6416 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      0025D5 25 CE                    1 	.word LINK 
                           0025D7     2 	LINK=.
      0025D7                          3 EEPROM:
      0025D7 46                       4 	.byte 6+F_IFUNC 	
      0025D8 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0025DE 21 48                    6 	.word const_eeprom_base 
      0025E0                       6417 	_dict_entry,3,END,cmd_end  
      0025E0 25 D7                    1 	.word LINK 
                           0025E2     2 	LINK=.
      0025E2                          3 END:
      0025E2 03                       4 	.byte 3 	
      0025E3 45 4E 44                 5 	.ascii "END"
      0025E6 18 05                    6 	.word cmd_end 
      0025E8                       6418 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0025E8 25 E2                    1 	.word LINK 
                           0025EA     2 	LINK=.
      0025EA                          3 DWRITE:
      0025EA 06                       4 	.byte 6+F_CMD 	
      0025EB 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0025F1 18 F5                    6 	.word digital_write 
      0025F3                       6419 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0025F3 25 EA                    1 	.word LINK 
                           0025F5     2 	LINK=.
      0025F5                          3 DREAD:
      0025F5 45                       4 	.byte 5+F_IFUNC 	
      0025F6 44 52 45 41 44           5 	.ascii "DREAD"
      0025FB 18 C5                    6 	.word digital_read 
      0025FD                       6420 	_dict_entry,2,DO,do_loop
      0025FD 25 F5                    1 	.word LINK 
                           0025FF     2 	LINK=.
      0025FF                          3 DO:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0025FF 02                       4 	.byte 2 	
      002600 44 4F                    5 	.ascii "DO"
      002602 20 A5                    6 	.word do_loop 
      002604                       6421 	_dict_entry,3,DIR,directory 
      002604 25 FF                    1 	.word LINK 
                           002606     2 	LINK=.
      002606                          3 DIR:
      002606 03                       4 	.byte 3 	
      002607 44 49 52                 5 	.ascii "DIR"
      00260A 1B F6                    6 	.word directory 
      00260C                       6422 	_dict_entry,3,DEC,dec_base
      00260C 26 06                    1 	.word LINK 
                           00260E     2 	LINK=.
      00260E                          3 DEC:
      00260E 03                       4 	.byte 3 	
      00260F 44 45 43                 5 	.ascii "DEC"
      002612 12 44                    6 	.word dec_base 
      002614                       6423 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      002614 26 0E                    1 	.word LINK 
                           002616     2 	LINK=.
      002616                          3 DDR:
      002616 43                       4 	.byte 3+F_IFUNC 	
      002617 44 44 52                 5 	.ascii "DDR"
      00261A 21 2A                    6 	.word const_ddr 
      00261C                       6424 	_dict_entry,6,DATALN,data_line  
      00261C 26 16                    1 	.word LINK 
                           00261E     2 	LINK=.
      00261E                          3 DATALN:
      00261E 06                       4 	.byte 6 	
      00261F 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      002625 21 54                    6 	.word data_line 
      002627                       6425 	_dict_entry,4,DATA,data  
      002627 26 1E                    1 	.word LINK 
                           002629     2 	LINK=.
      002629                          3 DATA:
      002629 04                       4 	.byte 4 	
      00262A 44 41 54 41              5 	.ascii "DATA"
      00262E 21 4E                    6 	.word data 
      002630                       6426 	_dict_entry,3+F_IFUNC,CRL,const_cr1 
      002630 26 29                    1 	.word LINK 
                           002632     2 	LINK=.
      002632                          3 CRL:
      002632 43                       4 	.byte 3+F_IFUNC 	
      002633 43 52 4C                 5 	.ascii "CRL"
      002636 21 30                    6 	.word const_cr1 
      002638                       6427 	_dict_entry,3+F_IFUNC,CRH,const_cr2 
      002638 26 32                    1 	.word LINK 
                           00263A     2 	LINK=.
      00263A                          3 CRH:
      00263A 43                       4 	.byte 3+F_IFUNC 	
      00263B 43 52 48                 5 	.ascii "CRH"
      00263E 21 36                    6 	.word const_cr2 
      002640                       6428 	_dict_entry,4+F_CFUNC,CHAR,char
      002640 26 3A                    1 	.word LINK 
                           002642     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      002642                          3 CHAR:
      002642 84                       4 	.byte 4+F_CFUNC 	
      002643 43 48 41 52              5 	.ascii "CHAR"
      002647 1C C5                    6 	.word char 
      002649                       6429 	_dict_entry,3,BYE,bye 
      002649 26 42                    1 	.word LINK 
                           00264B     2 	LINK=.
      00264B                          3 BYE:
      00264B 03                       4 	.byte 3 	
      00264C 42 59 45                 5 	.ascii "BYE"
      00264F 1D 57                    6 	.word bye 
      002651                       6430 	_dict_entry,5,BTOGL,bit_toggle
      002651 26 4B                    1 	.word LINK 
                           002653     2 	LINK=.
      002653                          3 BTOGL:
      002653 05                       4 	.byte 5 	
      002654 42 54 4F 47 4C           5 	.ascii "BTOGL"
      002659 15 EC                    6 	.word bit_toggle 
      00265B                       6431 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      00265B 26 53                    1 	.word LINK 
                           00265D     2 	LINK=.
      00265D                          3 BTEST:
      00265D 45                       4 	.byte 5+F_IFUNC 	
      00265E 42 54 45 53 54           5 	.ascii "BTEST"
      002663 15 FC                    6 	.word bit_test 
      002665                       6432 	_dict_entry,4,BSET,bit_set 
      002665 26 5D                    1 	.word LINK 
                           002667     2 	LINK=.
      002667                          3 BSET:
      002667 04                       4 	.byte 4 	
      002668 42 53 45 54              5 	.ascii "BSET"
      00266C 15 CB                    6 	.word bit_set 
      00266E                       6433 	_dict_entry,4,BRES,bit_reset
      00266E 26 67                    1 	.word LINK 
                           002670     2 	LINK=.
      002670                          3 BRES:
      002670 04                       4 	.byte 4 	
      002671 42 52 45 53              5 	.ascii "BRES"
      002675 15 DB                    6 	.word bit_reset 
      002677                       6434 	_dict_entry,3+F_IFUNC,BIT,bitmask
      002677 26 70                    1 	.word LINK 
                           002679     2 	LINK=.
      002679                          3 BIT:
      002679 43                       4 	.byte 3+F_IFUNC 	
      00267A 42 49 54                 5 	.ascii "BIT"
      00267D 20 7C                    6 	.word bitmask 
      00267F                       6435 	_dict_entry,3,AWU,awu 
      00267F 26 79                    1 	.word LINK 
                           002681     2 	LINK=.
      002681                          3 AWU:
      002681 03                       4 	.byte 3 	
      002682 41 57 55                 5 	.ascii "AWU"
      002685 1D D6                    6 	.word awu 
      002687                       6436 	_dict_entry,7,AUTORUN,autorun
      002687 26 81                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                           002689     2 	LINK=.
      002689                          3 AUTORUN:
      002689 07                       4 	.byte 7 	
      00268A 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      002691 1D 60                    6 	.word autorun 
      002693                       6437 	_dict_entry,3+F_IFUNC,ASC,ascii
      002693 26 89                    1 	.word LINK 
                           002695     2 	LINK=.
      002695                          3 ASC:
      002695 43                       4 	.byte 3+F_IFUNC 	
      002696 41 53 43                 5 	.ascii "ASC"
      002699 1C D7                    6 	.word ascii 
      00269B                       6438 	_dict_entry,3+F_IFUNC,AND,bit_and
      00269B 26 95                    1 	.word LINK 
                           00269D     2 	LINK=.
      00269D                          3 AND:
      00269D 43                       4 	.byte 3+F_IFUNC 	
      00269E 41 4E 44                 5 	.ascii "AND"
      0026A1 1E 39                    6 	.word bit_and 
      0026A3                       6439 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      0026A3 26 9D                    1 	.word LINK 
                           0026A5     2 	LINK=.
      0026A5                          3 ADCREAD:
      0026A5 47                       4 	.byte 7+F_IFUNC 	
      0026A6 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0026AD 18 91                    6 	.word analog_read 
      0026AF                       6440 	_dict_entry,5,ADCON,power_adc 
      0026AF 26 A5                    1 	.word LINK 
                           0026B1     2 	LINK=.
      0026B1                          3 ADCON:
      0026B1 05                       4 	.byte 5 	
      0026B2 41 44 43 4F 4E           5 	.ascii "ADCON"
      0026B7 18 55                    6 	.word power_adc 
      0026B9                       6441 kword_dict:
      0026B9                       6442 	_dict_entry,3+F_IFUNC,ABS,abs
      0026B9 26 B1                    1 	.word LINK 
                           0026BB     2 	LINK=.
      0026BB                          3 ABS:
      0026BB 43                       4 	.byte 3+F_IFUNC 	
      0026BC 41 42 53                 5 	.ascii "ABS"
      0026BF 1E 25                    6 	.word abs 
                                   6443 	
                                   6444 
      002700                       6445 	.bndry 128 ; align on FLASH block.
                                   6446 ; free space for user application  
      002700                       6447 user_space:
                                   6448 ; USR() function test
      002700 89               [ 2] 6449 	pushw x 
      002701 72 1A 50 0A      [ 1] 6450 	bset PC_ODR,#5 
      002705 85               [ 2] 6451 	popw x 
      002706 CD 1D CD         [ 4] 6452 	call pause02 
      002709 72 1B 50 0A      [ 1] 6453 	bres PC_ODR,#5 
      00270D 81               [ 4] 6454 	ret
                                   6455 
                                   6456 	.area FLASH_DRIVE (ABS)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      010000                       6457 	.org 0x10000
      010000                       6458 fdrive:
                                   6459 ; .byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        0026BB R   |     ACK     =  000006 
  5 ADCON      0026B1 R   |   5 ADCREAD    0026A5 R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  5 AND        00269D R   |     AREG    =  000002     |     ARG_OFS =  000002 
  5 ASC        002695 R   |     ATTRIB  =  000002     |   5 AUTORUN    002689 R
    AUTORUN_=  004000     |   5 AWU        002681 R   |   5 AWUHandl   000001 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
    BCNT    =  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |   5 BIT        002679 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000B     |   5 BRES       002670 R
    BS      =  000008     |     BSAVE   =  000001     |   5 BSET       002667 R
    BSIZE   =  000001     |   5 BTEST      00265D R   |   5 BTOGL      002653 R
    BTW     =  000001     |   5 BYE        00264B R   |     C       =  000001 
    CAN     =  000018     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  5 CHAR       002642 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]

Symbol Table

    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMD_END =  000002     |     CNT     =  000006 
    COMMA   =  000001     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        00263A R
  5 CRL        002632 R   |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000007 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  5 DATA       002629 R   |   5 DATALN     00261E R   |     DBG_A   =  000005 
    DBG_CC  =  000006     |     DBG_X   =  000003     |     DBG_Y   =  000001 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   5 DDR        002616 R   |     DEBUG   =  000000 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   5 DEC        00260E R
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  5 DIR        002606 R   |     DIVIDND =  000007     |     DIVISR  =  000005 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   5 DO         0025FF R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |   5 DREAD      0025F5 R   |   5 DWRITE     0025EA R
  5 EEPROM     0025D7 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_S=  000800     |     EM      =  000019     |   5 END        0025E2 R
    ENQ     =  000005     |     EOF     =  0000FF     |     EOT     =  000004 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]

Symbol Table

    FAUTORUN=  000006     |     FBREAK  =  000004     |     FCOMP   =  000005 
  5 FCPU       0025CE R   |     FF      =  00000C     |     FHSE    =  7A1200 
    FHSI    =  F42400     |   5 FILERX     0025C3 R   |   5 FILETX     0025B8 R
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   5 FOR        0025B0 R   |   5 FORGET     0025A5 R
    FRUN    =  000000     |     FS      =  00001C     |     FSIZE   =  000001 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   5 GOSUB      00259B R   |   5 GOTO       002592 R
  5 GPIO       002589 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  5 HEX        002581 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   5 IDR        002579 R
  5 IF         002572 R   |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   5 INPUT      002568 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   5 INVERT     00255D R   |     INW     =  000009 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   5 IWDGEN     002552 R
  5 IWDGREF    002546 R   |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   5 KEY        00253E R   |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000005     |   5 LET        002536 R
    LF      =  00000A     |     LIMIT   =  000005     |     LINENO  =  000005 
  5 LINK    =  0026BB R   |   5 LIST       00252D R   |     LL      =  000002 
    LLEN    =  000002     |     LL_HB   =  000001     |     LN_PTR  =  000005 
  5 LOAD       002524 R   |   5 LOG        00251C R   |   5 LSHIFT     002511 R
    MAJOR   =  000001     |     MASK    =  000002     |     MATH_OVF=  000000 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |     MULOP   =  000005 
    N1      =  000001     |     N1_HB   =  000006     |     N1_LB   =  000007 
    N2      =  000003     |     N2_HB   =  000008     |     N2_LB   =  000009 
    NAFR    =  004804     |     NAK     =  000015     |     NAMEPTR =  000003 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        002500 R
    NEW_FREE=  000001     |   5 NEXT       002508 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   5 NOT        0024F8 R   |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000000 R
  5 ODR        0024F0 R   |     ONOFF   =  000003     |     OP      =  000005 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   5 OR         0024E9 R   |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    PA      =  000000     |     PAD_SIZE=  000080     |   5 PAUSE      0024DF R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   5 PEEK       0024CC R   |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PINNO   =  000001     |   5 PINP       0024C3 R   |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  5 PMODE      0024D5 R   |   5 POKE       0024BA R   |     PORT    =  000003 
  5 POUT       0024B1 R   |     PREV    =  000001     |   5 PRINT      0024A7 R
    PROD    =  000002     |   5 PRTA       00249E R   |   5 PRTB       002495 R
  5 PRTC       00248C R   |   5 PRTD       002483 R   |   5 PRTE       00247A R
  5 PRTF       002471 R   |   5 PRTG       002468 R   |   5 PRTH       00245F R
  5 PRTI       002456 R   |   5 QKEY       00244D R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   5 READ       002444 R
  5 REBOOT     002439 R   |     REG     =  000001     |     RELOP   =  000005 
  5 REMARK     00242E R   |   5 RESTORE    002422 R   |     RETL1   =  000001 
  5 RETURN     002417 R   |     RET_ADDR=  000003     |     RET_INW =  000005 
  5 RND        00240F R   |     ROP     =  004800     |     RS      =  00001E 
  5 RSHIFT     002404 R   |     RST_SR  =  0050B3     |   5 RUN        0023FC R
    RXCHAR  =  000001     |   5 SAVE       0023F3 R   |     SDIVD   =  000002 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
  5 SHOW       0023EA R   |     SI      =  00000F     |     SIGN    =  000001 
  5 SIZE       0023E1 R   |     SKIP    =  000005     |   5 SLEEP      0023D7 R
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  5 SPIEN      0023C3 R   |   5 SPIRD      0023CD R   |   5 SPISEL     0023B8 R
  5 SPIWR      0023AE R   |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SQUOT   =  000001     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  0000A0     |   5 STEP       0023A5 R   |   5 STOP       00239C R
    STREND  =  00000A     |     STRING  =  000002     |     STX     =  000002 
    SUB     =  00001A     |     SWIM_CSR=  007F80     |     SYN     =  000016 
    TAB     =  000009     |     TABW    =  000004     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   5 TICKS      002392 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  5 TIMEOUT    00237C R   |   5 TIMER      002388 R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  000006     |     TK_CFUNC=  000082 
    TK_CHAR =  000003     |     TK_CMD  =  000080     |     TK_COLON=  000001 
    TK_COMMA=  000009     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LE   =  000036     |     TK_LPARE=  000007 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000008 
    TK_SHARP=  00000A     |     TK_VAR  =  000085     |   5 TO         002375 R
  5 TONE       00236C R   |   5 Timer4Up   000037 R   |     U8      =  000003 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   5 UBOUND     002361 R
  5 UBTN_Han   00007A R   |   5 UFLASH     002356 R   |   5 UNTIL      00234C R
    US      =  00001F     |   5 USER_ABO   000082 R   |   5 USR        002344 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
  5 Uart1RxH   00000F R   |   5 UserButt   00004D R   |     VAR_ADDR=  000006 
    VSIZ    =  000002     |     VSIZE   =  000006     |     VT      =  00000B 
  5 WAIT       00233B R   |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH   =  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |   5 WORDS      002331 R   |   5 WRITE      002327 R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XADR    =  000001 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   5 XOR        00231F R   |   5 XPEEK      002315 R
    XREG    =  000003     |     XSAVE   =  000005     |     YSAVE   =  000007 
  5 abs        001E25 R   |   1 acc16      00000C R   |   1 acc24      00000B R
  1 acc8       00000D R   |   5 accept_c   000B99 R   |   5 add        000F2E R
  5 add_char   001483 R   |   5 analog_r   001891 R   |   5 ansi_seq   000B5B R
  5 arduino_   001F10 R   |   5 arg_list   00106A R   |   1 array_si   000021 R
  5 ascii      001CD7 R   |   5 at_tst     000DA0 R   |   5 atoi24     000EB1 R
  5 atoi_exi   000F17 R   |   5 autorun    001D60 R   |   5 autorun_   0006C8 R
  5 awu        001DD6 R   |   5 awu02      001DE0 R   |   5 bad_port   001D2F R
  1 base       00000A R   |   1 basicptr   000004 R   |   5 beep       001819 R
  5 bin_exit   000C7E R   |   5 bit_and    001E39 R   |   5 bit_or     001E51 R
  5 bit_rese   0015DB R   |   5 bit_set    0015CB R   |   5 bit_test   0015FC R
  5 bit_togg   0015EC R   |   5 bit_xor    001E69 R   |   5 bitmask    00207C R
  5 bkslsh_t   000D4D R   |   5 bksp       0002BD R   |   5 block_er   0001A3 R
  5 break_po   00195E R   |   5 bye        001D57 R   |   5 cancel_a   000690 R
  5 char       001CC5 R   |   5 clear_ba   0006DD R   |   5 clear_va   00055D R
  5 clock_in   00009D R   |   5 cmd_end    001805 R   |   5 cmd_line   0008FB R
  5 cmd_name   000FD9 R   |   5 cmp_name   0019F9 R   |   5 cold_sta   0005CB R
  5 colon_ts   000D74 R   |   5 comma_ts   000D7F R   |   5 comp_msg   000851 R
  5 compile    0004EA R   |   5 const_cr   002130 R   |   5 const_cr   002136 R
  5 const_dd   00212A R   |   5 const_ee   002148 R   |   5 const_id   002124 R
  5 const_in   002142 R   |   5 const_od   00211E R   |   5 const_ou   00213C R
  5 const_po   0020E8 R   |   5 const_po   0020EE R   |   5 const_po   0020F4 R
  5 const_po   0020FA R   |   5 const_po   002100 R   |   5 const_po   002106 R
  5 const_po   00210C R   |   5 const_po   002112 R   |   5 const_po   002118 R
  5 convert_   000BF5 R   |   5 copy_com   000DD5 R   |   1 count      000003 R
  5 cp_loop    001019 R   |   5 create_g   000451 R   |   5 cs_high    0022D8 R
  5 cstk_pro   001218 R   |   5 dash_tst   000D95 R   |   5 data       00214E R
  1 data_len   000009 R   |   5 data_lin   002154 R   |   1 data_ofs   000008 R
  1 data_ptr   000006 R   |   5 data_sea   002194 R   |   5 dec_base   001244 R
  5 del_back   000B8A R   |   5 del_line   000424 R   |   5 del_ln     000B7B R
  5 delete     0002CD R   |   5 digital_   0018C5 R   |   5 digital_   0018F5 R
  5 dir_loop   001C02 R   |   5 director   001BF6 R   |   5 divide     000F84 R
  5 divu24_8   000AAC R   |   5 do_loop    0020A5 R   |   5 do_progr   000196 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

  5 drive_fr   001C81 R   |   5 enable_i   002026 R   |   5 eql_tst    000E2A R
  5 equal      001496 R   |   5 erase_fl   0001C2 R   |   5 err_bad_   0007BD R
  5 err_buf_   000833 R   |   5 err_cmd_   000781 R   |   5 err_div0   000746 R
  5 err_dupl   00079B R   |   5 err_math   00072D R   |   5 err_mem_   000712 R
  5 err_msg    0006F2 R   |   5 err_no_a   0007C9 R   |   5 err_no_d   0007FC R
  5 err_no_f   000820 R   |   5 err_no_l   000755 R   |   5 err_no_p   00080C R
  5 err_not_   0007AC R   |   5 err_run_   00076B R   |   5 err_synt   00071F R
  5 escaped    000C0A R   |   5 expect     001058 R   |   5 expr_exi   0011A4 R
  5 expressi   001163 R   |   5 factor     0010BA R   |   1 farptr     000016 R
  5 fcpu       001EB3 R   |   7 fdrive     010000 R   |   1 ffree      000019 R
  5 file_cou   001C79 R   |   5 file_rec   0022DD R   |   5 file_tra   002312 R
  5 final_te   000B55 R   |   5 first_li   0012C9 R   |   1 flags      000023 R
  5 for        001673 R   |   5 forget     001B8F R   |   1 free_ram   00005A R
  5 fsize_ms   002301 R   |   5 func_arg   001065 R   |   5 func_not   002019 R
  5 ge         001498 R   |   5 get_arra   001095 R   |   5 get_targ   00173D R
  5 get_tick   001E1F R   |   5 get_toke   000CE6 R   |   5 getc       0002A9 R
  5 gosub      00176E R   |   5 goto       001753 R   |   5 gpio       001D0A R
  5 gt         001494 R   |   5 gt_tst     000E35 R   |   5 hex_base   00123F R
  5 hex_dump   000355 R   |   5 if         00165F R   |   1 in         000001 R
  1 in.saved   000002 R   |   1 in.w       000000 R   |   5 incr_far   0019AC R
  5 input_ex   00159D R   |   5 input_lo   001536 R   |   5 input_va   001534 R
  5 insert_l   00047D R   |   5 insert_l   0004E7 R   |   5 interp_l   00093C R
  5 interpre   000917 R   |   5 invert     002096 R   |   5 is_alpha   00056B R
  5 is_digit   00057C R   |   5 itoa       000A65 R   |   5 itoa_loo   000A7D R
  5 jp_to_ta   001761 R   |   5 key        001CF7 R   |   5 kw_loop    000C9A R
  5 kword_di   0026B9 R   |   5 kword_en   002313 R   |   5 le         00149D R
  5 leading_   00206C R   |   5 left_arr   000B5B R   |   5 let        001275 R
  5 let_arra   001283 R   |   5 let_var    001286 R   |   5 lines_sk   0012CC R
  5 list       0012A0 R   |   5 list_exi   001312 R   |   5 list_sta   0012EC R
  5 load       001B5F R   |   5 load_aut   00069F R   |   5 load_fil   001B2E R
  5 log2       002061 R   |   5 logical_   00200F R   |   5 loop_bac   001720 R
  1 loop_dep   000020 R   |   5 loop_don   001735 R   |   5 lshift     001E81 R
  5 lt         00149B R   |   5 lt_tst     000E5E R   |   5 modulo     000FC8 R
  5 move       0003BE R   |   5 move_dow   0003DC R   |   5 move_era   000128 R
  5 move_exi   0003FD R   |   5 move_loo   0003E1 R   |   5 move_prg   00015C R
  5 move_up    0003CE R   |   5 mul_char   001485 R   |   5 multiply   000F3C R
  5 mulu24_8   000AD4 R   |   5 nbr_tst    000D19 R   |   5 ne         0014A0 R
  5 neg_acc2   000B0E R   |   5 new        00197C R   |   5 next       0016F3 R
  5 next_lin   00091F R   |   5 next_tok   000963 R   |   5 no_match   00102B R
  5 other      000E87 R   |   3 pad        0016E0 R   |   5 parse_bi   000C5C R
  5 parse_in   000C12 R   |   5 parse_ke   000C99 R   |   5 parse_qu   000BBD R
  5 pause      001DC3 R   |   5 pause02    001DCD R   |   5 peek       001632 R
  5 pin_mode   001EBF R   |   5 plus_tst   000DFE R   |   5 poke       001623 R
  5 power_ad   001855 R   |   5 prcnt_ts   000E1F R   |   5 print      0014A3 R
  5 print_ex   001508 R   |   5 print_in   000A00 R   |   5 print_ty   001514 R
  5 program_   00013C R   |   5 program_   00015C R   |   5 prt_basi   00136D R
  5 prt_cmd_   001315 R   |   5 prt_loop   0014A7 R   |   5 prt_quot   001329 R
  5 prt_tok    0002E7 R   |   5 prti24     0009B8 R   |   1 ptr16      000017 R
  1 ptr8       000018 R   |   5 putc       0002A0 R   |   5 puts       0002B3 R
  5 qkey       001CFF GR  |   5 qmark_ts   000DAB R   |   5 random     001F30 R
  5 read       0021CC R   |   5 read01     0021CE R   |   5 readln     000B31 R
  5 readln_l   000B39 R   |   5 readln_q   000BAE R   |   5 refresh_   00205C R
  5 rel_exit   0011FB R   |   5 relation   0011A7 R   |   5 relop_st   001488 R
  5 remark     0015A0 R   |   5 reprint    000B5B R   |   5 reset_co   0014A5 R
  5 rest_con   001524 R   |   5 restore    002181 R   |   5 return     00178E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

  5 right_ar   000B5B R   |   5 row_alig   001991 R   |   5 row_eras   000101 R
  5 row_eras   000128 R   |   5 row_loop   000338 R   |   5 rparnt_t   000D69 R
  5 rshift     001E9A R   |   5 rt_msg     000840 R   |   5 run        0017AC R
  5 run_it     0017DE R   |   1 rx_char    000025 R   |   5 save       001A67 R
  5 save_con   001514 R   |   5 search_d   00100B R   |   5 search_e   001055 R
  5 search_f   001A1A R   |   5 search_l   000400 R   |   5 search_l   000408 R
  5 search_n   00100F R   |   1 seedx      000012 R   |   1 seedy      000014 R
  5 seek_fdr   0019BA R   |   5 select_p   001F00 R   |   5 set_time   001FFD R
  5 sharp_ts   000D8A R   |   5 show       0011FE R   |   5 show_row   000326 R
  5 single_c   00147E R   |   5 size       001249 R   |   5 skip       000F1B R
  5 slash_ts   000E14 R   |   5 sleep      001DB8 R   |   5 software   000585 R
  5 spaces     0002DB R   |   5 spi_clea   002271 R   |   5 spi_disa   002259 R
  5 spi_enab   002226 R   |   5 spi_rcv_   002293 R   |   5 spi_read   0022BE R
  5 spi_sele   0022C6 R   |   5 spi_send   00227D R   |   5 spi_writ   00229E R
  3 stack_fu   001760 R   |   3 stack_un   001800 R   |   5 star_tst   000E09 R
  5 step       0016CC R   |   5 stop       001930 R   |   5 store_lo   0016E0 R
  5 str_matc   001038 R   |   5 str_tst    000D09 R   |   5 strcmp     00039F R
  5 strcpy     0003B0 R   |   5 strlen     000392 R   |   5 substrac   000F36 R
  5 syntax_e   000871 R   |   1 tab_widt   000024 R   |   5 tb_error   000873 R
  5 term       001114 R   |   5 term01     00111D R   |   5 term_exi   001160 R
  3 tib        001690 R   |   5 tick_tst   000DC3 R   |   1 ticks      00000E R
  5 timeout    00200C R   |   1 timer      000010 R   |   5 timer2_i   0000B3 R
  5 timer4_i   0000C0 R   |   5 tk_id      000861 R   |   5 to         00169C R
  5 to_eepro   00017F R   |   5 to_flash   000193 R   |   5 to_upper   000EA5 GR
  5 token_ch   000E9E R   |   5 token_ex   000EA2 R   |   5 token_ms   00031E R
  5 tone       00180C R   |   5 try_next   0021BC R   |   1 txtbgn     00001C R
  1 txtend     00001E R   |   5 uart1_in   000265 R   |   5 uart1_se   000275 R
  5 ubound     001253 R   |   5 uflash     001D34 R   |   5 unlock_e   0000D5 R
  5 unlock_f   0000EB R   |   5 until      0020BA R   |   5 user_int   000060 R
  5 user_spa   002700 R   |   5 usr        001D3A R   |   5 var_name   001365 R
  1 vars       000026 R   |   5 wait       0015A6 R   |   5 warm_ini   000672 R
  5 warm_sta   0008F8 R   |   5 words      001F97 R   |   5 words_co   001FE7 R
  5 write      001C8E R   |   5 write_bl   000242 R   |   5 write_by   0001CD R
  5 write_ee   000209 R   |   5 write_ex   00023D R   |   5 write_fl   0001F3 R
  5 write_ro   000170 R   |   5 xpeek      001643 R   |     xreceive   ****** GX
  5 zero_pad   001986 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5A   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   270E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

