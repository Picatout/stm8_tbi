ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                                     45 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                           00000F    58         NAME_MAX_LEN=15  ; CONST and DIM variables maximum length 
                                     59 
                                     60 ;--------------------------------------
                                     61 ;   constantes related to Arduino 
                                     62 ;   API mapping 
                                     63 ;-------------------------------------
                           000000    64         INP=0
                           000001    65         OUTP=1 
                                     66 
                                     67 ;--------------------------------------
                                     68 ;       token attribute
                                     69 ;--------------------------------------
                                     70         ; bits 4:5 identify token group 
                                     71         ; 0x0n -> miscelinous 
                                     72         ; 0x1n -> +|- operators 
                                     73         ; 0x2n -> *|/|% operators
                                     74         ; 0x3n -> relational operators 
                           000080    75         TK_CMD=128      ; BASIC command   
                           000081    76         TK_IFUNC=129    ; BASIC integer function
                           000082    77         TK_CFUNC=130    ; BASIC character function
                           000083    78         TK_CONST=131    ; BASIC constant 
                           000084    79         TK_INTGR=132    ; 16 bits integer 
                           000085    80         TK_VAR=133
                           000086    81         TK_FLOAT=134    ; float32 
                           000087    82         TK_NOT=135
                           000088    83         TK_AND=136      ;
                           000089    84         TK_OR=137       ;
                           00008A    85         TK_XOR=138      ; 
                           000000    86         TK_NONE=0       ; not a token 
                           000002    87         TK_QSTR=2       ; quoted string  
                           000003    88         TK_LABEL=3      ; used for defined, constants, variables
                           000004    89         TK_CHAR=4       ; ASCII character 
                           000005    90         TK_ARRAY=5     ; array variable '@' 
                           000006    91         TK_LPAREN=6     ; left parenthesis '('
                           000007    92         TK_RPAREN=7     ; right parenthesis ')'
                           000008    93         TK_COMMA=8     ; item separator ',' 
                           000009    94         TK_SHARP=9     ; print colon width '#' 
                           00000A    95         TK_COLON=0xa      ; command separator ':' 
                                     96         
                           000010    97         TK_PLUS=0x10    ; addition operator '+'
                           000011    98         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    99         TK_MULT=0x20    ; multiplication operator '*'
                           000021   100         TK_DIV=0x21     ; division operator '/'
                           000022   101         TK_MOD=0x22     ; modulo operator '%'
                                    102 
                                    103         ; don't change these token values 
                                    104         ; values chosen to be used as a mask.
                                    105         ; bit 7   1 for dictionary words else 0 
                                    106         ; bits 6  always 0 
                                    107         ; bits 5:4 identify group 
                                    108         ; bits 3:0 token identifier inside group  
                           000031   109         TK_GT=0x31      ; relation operator '>'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000032   110         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   111         TK_GE=0x33      ; relation operator '>='
                           000034   112         TK_LT=0x34      ; relation operator '<'
                           000036   113         TK_LE=0x36      ; relation operator '<='
                           000035   114         TK_NE=0x35      ; relation operator '<>' not equal 
                                    115         ; token groups 
                           000030   116         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   117         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   118         TK_GRP_ADD=0x10  ; additive operators
                           000020   119         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   120         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   121         CMD_END=2 
                                    122 
                                    123 ;--------------------------------------
                                    124 ;   error codes 
                                    125 ;--------------------------------------
                           000000   126     ERR_NONE=0
                           000001   127     ERR_MEM_FULL=1 
                           000002   128     ERR_SYNTAX=2
                           000003   129     ERR_MATH_OVF=3
                           000004   130     ERR_DIV0=4 
                           000005   131     ERR_NO_LINE=5
                           000006   132     ERR_RUN_ONLY=6
                           000007   133     ERR_CMD_ONLY=7
                           000008   134     ERR_DUPLICATE=8
                           000009   135     ERR_NOT_FILE=9
                           00000A   136     ERR_BAD_VALUE=10
                           00000B   137     ERR_NO_ACCESS=11
                           00000C   138     ERR_NO_DATA=12 
                           00000D   139     ERR_NO_PROG=13
                           00000E   140     ERR_NO_FSPACE=14
                           00000F   141     ERR_BUF_FULL=15
                           000010   142     ERR_OVERFLOW=16 
                           000011   143     ERR_RD_ONLY=17
                                    144 
                                    145 ;--------------------------------------
                                    146 ;   assembler flags 
                                    147 ;-------------------------------------
                                    148 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    149 
                                    150      .macro _usec_dly n 
                                    151     ldw x,#(16*n-2)/4
                                    152     decw x
                                    153     nop 
                                    154     jrne .-4
                                    155     .endm 
                                    156     
                                    157     ; load X register with 
                                    158     ; entry point of dictionary
                                    159     ; before calling 'search_dict'
                                    160     .macro _ldx_dict dict_name
                                    161     ldw x,#dict_name+2
                                    162     .endm 
                                    163 
                                    164     ; reset BASIC pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; to beginning of last token
                                    166     ; extracted except if it was end of line 
                                    167     .macro _unget_token 
                                    168      mov in,in.saved  
                                    169     .endm
                                    170 
                                    171 
                                    172     ; extract code address for 
                                    173     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    174     .macro _get_code_addr
                                    175         ldw x,(x)
                                    176         inc in 
                                    177         inc in 
                                    178     .endm 
                                    179 
                                    180 
                                    181 
                                    182 ;---------------------------------------
                                    183 ;    xtack manipulation macros 
                                    184 ;    Y is used as xstack pointer  
                                    185 ;----------------------------------------
                                    186     ; pop in A:X from XSTACK 
                                    187     .macro _xpop 
                                    188     ld a,(y)
                                    189     ldw x,y 
                                    190     ldw x,(1,x)
                                    191     addw y,#CELL_SIZE 
                                    192     .endm 
                                    193 
                                    194     ; push A:X  to XSTACK 
                                    195     .macro _xpush 
                                    196     subw y,#CELL_SIZE
                                    197     ld (y),a 
                                    198     ldw (1,y),x 
                                    199     .endm 
                                    200 
                                    201     ; drop from XSTACK 
                                    202     .macro _xdrop 
                                    203     addw y,#CELL_SIZE 
                                    204     .endm 
                                    205 
                                    206     ; @T fetch top xstack 
                                    207     .macro _at_top
                                    208     ld a,(y)
                                    209     ldw x,y 
                                    210     ldw x,(1,x)
                                    211     .endm 
                                    212 
                                    213     ; @N  fetch next on xstack 
                                    214     .macro _at_next 
                                    215     ld a,(3,y)
                                    216     ldw x,y 
                                    217     ldw x,(4,x)
                                    218     .endm 
                                    219 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220     ; !T put on top of xtack 
                                    221     .macro _store_top 
                                    222     ld (y),a 
                                    223     ldw (1,y),x     
                                    224     .endm 
                                    225 
                                    226     ; !N put next on xstack 
                                    227     .macro _store_next 
                                    228     ld (3,y),a 
                                    229     ldw (4,y),x 
                                    230     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTI_IDX=PRTG_IDX+2
                           000076    84     QKEY_IDX=PRTI_IDX+2
                           000078    85     READ_IDX=QKEY_IDX+2
                           00007A    86     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007C    87 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00007E    88     REST_IDX=REM_IDX+2 ; RESTORE
                           000080    89     RET_IDX=REST_IDX+2  ; RETURN 
                           000082    90     RND_IDX=RET_IDX+2 ; RANDOM 
                           000084    91     RSHIFT_IDX=RND_IDX+2
                           000086    92     RUN_IDX=RSHIFT_IDX+2
                           000088    93     FREE_IDX=RUN_IDX+2
                           00008A    94     SLEEP_IDX=FREE_IDX+2
                           00008C    95     SPIRD_IDX=SLEEP_IDX+2
                           00008E    96     SPIEN_IDX=SPIRD_IDX+2
                           000090    97     SPISEL_IDX=SPIEN_IDX+2
                           000092    98     SPIWR_IDX=SPISEL_IDX+2
                           000094    99     STEP_IDX=SPIWR_IDX+2
                           000096   100     STOP_IDX=STEP_IDX+2
                           000098   101     TICKS_IDX=STOP_IDX+2
                           00009A   102     TIMER_IDX=TICKS_IDX+2
                           00009C   103     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           00009E   104     TO_IDX=TMROUT_IDX+2
                           0000A0   105     TONE_IDX=TO_IDX+2
                           0000A2   106     UBOUND_IDX=TONE_IDX+2
                           0000A4   107     UFLASH_IDX=UBOUND_IDX+2
                           0000A6   108     UNTIL_IDX=UFLASH_IDX+2
                           0000A8   109     USR_IDX=UNTIL_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           0000AA   110     WAIT_IDX=USR_IDX+2
                           0000AC   111     WORDS_IDX=WAIT_IDX+2
                           0000AE   112     WRITE_IDX=WORDS_IDX+2
                           0000B0   113     SIZE_IDX=WRITE_IDX+2 
                           0000B2   114     ON_IDX=SIZE_IDX+2 
                           0000B4   115     GET_IDX=ON_IDX+2
                           0000B6   116     CONST_IDX=GET_IDX+2
                           0000B8   117     EEFREE_IDX=CONST_IDX+2
                                    118      
                                    119     ; keep these 3 at end
                                    120     ; these have no entry in code_addr 
                           0000F8   121     NOT_IDX=248
                           0000FA   122     AND_IDX=250 
                           0000FC   123     OR_IDX=252 
                           0000FE   124     XOR_IDX=254    
                                    125 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     34 	.include "dbg_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;----------------------------------
                                     21 ;  macros used for debugging
                                     22 ;---------------------------------
                                     23 ;-------------------------------
                                     24 ;  macros used to help debugging
                                     25 ;-------------------------------
                                     26     
                           000009    27     DBG_CC=9
                           000008    28     DBG_A=8 
                           000006    29     DBG_X=6 
                           000004    30     DBG_Y=4 
                                     31     .macro _dbg_save_regs 
                                     32     .if DEBUG 
                                     33     push cc ; (9,sp)
                                     34     push a   ; (8,sp)
                                     35     pushw x  ; (6,sp)
                                     36     pushw y  ; (4,sp)
                                     37     ; save acc24 
                                     38     ld a,acc24 
                                     39     ldw x,acc16 
                                     40     pushw x 
                                     41     push a 
                                     42     .endif 
                                     43     .endm 
                                     44 
                                     45     .macro _dbg_restore_regs 
                                     46     ; restore acc24 
                                     47     .if DEBUG 
                                     48     pop a 
                                     49     popw x 
                                     50     ld acc24,a 
                                     51     ldw acc16,x 
                                     52     popw y 
                                     53     popw x 
                                     54     pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                     55     pop cc 
                                     56     .endif 
                                     57     .endm 
                                     58 
                                     59     .macro _dbg_getc
                                     60     .if DEBUG  
                                     61     _dbg_save_regs 
                                     62     call getc
                                     63     ld (DBG_A,sp),a 
                                     64     _dbg_restore_regs
                                     65     .endif   
                                     66     .endm 
                                     67 
                                     68     .macro _dbg_putc
                                     69     .if DEBUG  
                                     70     push cc 
                                     71     call putc 
                                     72     pop cc 
                                     73     .endif 
                                     74     .endm 
                                     75 
                                     76     .macro _dbg_puts
                                     77     .if DEBUG  
                                     78     _dbg_save_regs
                                     79     call puts 
                                     80     _dbg_restore_regs
                                     81     .endif 
                                     82     .endm 
                                     83 
                                     84     .macro _dbg_prti24 
                                     85     .if DEBUG 
                                     86     _dbg_save_regs
                                     87     call prti24 
                                     88     _dbg_restore_regs
                                     89     .endif 
                                     90     .endm 
                                     91 
                                     92     .macro _dbg_prt_regs
                                     93     .if DEBUG 
                                     94     call print_registers
                                     95     .endif  
                                     96     .endm 
                                     97 
                                     98     .macro _dbg_peek addr 
                                     99     .if DEBUG 
                                    100     _dbg_save_regs 
                                    101     ldw x,addr 
                                    102     call peek     
                                    103     _dbg_restore_regs
                                    104     .endif 
                                    105     .endm 
                                    106 
                                    107     .macro _dbg_parser_init 
                                    108     .if DEBUG 
                                    109     _dbg_save_regs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    110     call parser_init 
                                    111     _dbg_restore_regs
                                    112     .endif 
                                    113     .endm
                                    114 
                                    115     .macro _dbg_readln
                                    116     .if DEBUG 
                                    117     _dbg_save_regs
                                    118     call readln
                                    119     _dbg_restore_regs
                                    120     .endif 
                                    121     .endm
                                    122 
                                    123     .macro _dbg_number
                                    124     .if DEBUG 
                                    125     _dbg_save_regs
                                    126     call number 
                                    127     _dbg_restore_regs
                                    128     .endif 
                                    129     .endm  
                                    130 
                                    131     .macro _dbg_nextword
                                    132     .if DEBUG 
                                    133     _dbg_save_regs
                                    134     call get_token   
                                    135     _dbg_restore_regs
                                    136     .endif 
                                    137     .endm  
                                    138 
                                    139     .macro _dbg_dots 
                                    140     .if DEBUG 
                                    141     _dbg_save_regs
                                    142     call dots 
                                    143     _dbg_restore_regs
                                    144     .endif 
                                    145     .endm 
                                    146 
                                    147     .macro _dbg_trap
                                    148     bset flags,#FTRAP 
                                    149     trap 
                                    150     .endm 
                                    151 
                                    152     .macro _dbg_mark n  
                                    153     .if DEBUG 
                                    154     push cc
                                    155     push a 
                                    156     ld a,#n 
                                    157     call putc
                                    158     btjf UART1_SR,#UART_SR_TC,. 
                                    159     pop a 
                                    160     pop cc 
                                    161     .endif 
                                    162     .endm 
                                    163     
                                    164     .macro _dbg_prt_var var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                    165     .if DEBUG 
                                    166     _dbg_save_regs 
                                    167     ldw x,var 
                                    168     ldw acc16,x 
                                    169     clr acc24 
                                    170     clrw x 
                                    171     ld a,#16+128  
                                    172     call prti24
                                    173     ld a,#CR 
                                    174     call putc  
                                    175     _dbg_restore_regs
                                    176     .endif  
                                    177     .endm 
                                    178 
                                    179     .macro _dbg_show
                                    180     .if DEBUG  
                                    181     _dbg_save_regs 
                                    182     call show 
                                    183     _dbg_restore_regs
                                    184     .endif 
                                    185     .endm 
                                    186 
                                    187 
                                    188 
                                    189 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                     35   
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001690                         41     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         43 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016E0                         44 pad:: .ds PAD_SIZE             ; working buffer
      001760                         45 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      00179C                         46 xstack_unf:: ; xstack underflow 
      00179C                         47 stack_full:: .ds STACK_SIZE   ; control stack 
      001828                         48 stack_unf: ; stack underflow ; control_stack bottom 
                                     49 
                                     50 ;;--------------------------------------
                                     51     .area HOME 
                                     52 ;; interrupt vector table at 0x8000
                                     53 ;;--------------------------------------
                                     54 
      000000 82 00 00 C3             55     int cold_start			; RESET vector 
                           000001    56 .if DEBUG
      000004 82 00 00 12             57 	int TrapHandler 		;TRAP  software interrupt
                           000000    58 .else
                                     59 	int NonHandledInterrupt ;TRAP  software interrupt
                                     60 .endif
      000008 82 00 00 00             61 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             62 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             63 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             64 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             65 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             66 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             67 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 44             68 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             69 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             70 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             71 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             72 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             73 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             74 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             75 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             76 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             77 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             78 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 99             79 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             80 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             81 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             82 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             83 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 21             84 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             85 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             86 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             87 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             88 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             89 	int NonHandledInterrupt ;int28  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      00007C 82 00 00 00             90 	int NonHandledInterrupt ;int29  not used
                                     91 
                                     92 ;---------------------------------------
                                     93     .area CODE
                                     94 ;---------------------------------------
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; non handled interrupt 
                                     98 ; reset MCU
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        100 NonHandledInterrupt:
      000000                        101 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ; auto wakeup from halt
                                    105 ; at iret, program continue 
                                    106 ; after hatl instruction
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        108 AWUHandler:
      000004 72 19 50 F0      [ 1]  109 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  110 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  111 	clr AWU_TBR 
      000011 80               [11]  112 	iret
                                    113 
                                    114 ;------------------------------------
                                    115 ; software interrupt handler  
                                    116 ;------------------------------------
                           000001   117 .if DEBUG 
      000012                        118 TrapHandler:
      000012 72 12 00 22      [ 1]  119 	bset flags,#FTRAP 
      000016 CD 04 8C         [ 4]  120 	call print_registers
      000019 CD 05 37         [ 4]  121 	call cmd_itf
      00001C 72 13 00 22      [ 1]  122 	bres flags,#FTRAP 	
      000020 80               [11]  123 	iret
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ; ticks range {0..2^23-1}
                                    131 ;--------------------------------
      000021                        132 Timer4UpdateHandler:
      000021 72 5F 53 42      [ 1]  133 	clr TIM4_SR 
      000025 C6 00 0F         [ 1]  134 	ld a,ticks 
      000028 CE 00 10         [ 2]  135 	ldw x,ticks+1
      00002B 1C 00 01         [ 2]  136 	addw x,#1 
      00002E A9 00            [ 1]  137 	adc a,#0 
      000030 2A 02            [ 1]  138 	jrpl 0$
                                    139 ; reset to 0 when negatif 
      000032 4F               [ 1]  140 	clr a 
      000033 5F               [ 1]  141 	clrw x 
      000034 C7 00 0F         [ 1]  142 0$:	ld ticks,a 
      000037 CF 00 10         [ 2]  143 	ldw ticks+1,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00003A CE 00 12         [ 2]  144 	ldw x,timer
      00003D 27 04            [ 1]  145 	jreq 1$
      00003F 5A               [ 2]  146 	decw x 
      000040 CF 00 12         [ 2]  147 	ldw timer,x 
      000043                        148 1$:	
      000043 80               [11]  149 	iret 
                                    150 
                                    151 ;------------------------------------
                                    152 ; Triggered by pressing USER UserButton 
                                    153 ; on NUCLEO card.
                                    154 ; This is used to abort a progam lock 
                                    155 ; in infinite loop. 
                                    156 ;------------------------------------
      000044                        157 UserButtonHandler:
                                    158 ; wait button release
      000044 5F               [ 1]  159 	clrw x
      000045 5A               [ 2]  160 1$: decw x 
      000046 26 FD            [ 1]  161 	jrne 1$
      000048 72 09 50 15 F8   [ 2]  162 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    163 ; if MCU suspended by SLEEP resume program
      00004D 72 07 00 22 05   [ 2]  164     btjf flags,#FSLEEP,2$
      000052 72 17 00 22      [ 1]  165 	bres flags,#FSLEEP 
      000056 80               [11]  166 	iret
      000057                        167 2$:	
      000057                        168 user_interrupted:
      000057 72 00 00 22 02   [ 2]  169     btjt flags,#FRUN,4$
      00005C 20 0A            [ 2]  170 	jra UBTN_Handler_exit 
      00005E                        171 4$:	; program interrupted by user 
      00005E 72 11 00 22      [ 1]  172 	bres flags,#FRUN 
      000062 AE 00 70         [ 2]  173 	ldw x,#USER_ABORT
      000065 CD 09 68         [ 4]  174 	call puts 
      000068                        175 UBTN_Handler_exit:
      000068 AE 17 FF         [ 2]  176     ldw x,#STACK_EMPTY 
      00006B 94               [ 1]  177     ldw sp,x
      00006C 9A               [ 1]  178 	rim 
      00006D CC 16 F2         [ 2]  179 5$:	jp warm_start
                                    180 
      000070 0A 50 72 6F 67 72 61   181 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    182 
                                    183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    184 ;    peripherals initialization
                                    185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    186 
                                    187 ;----------------------------------------
                                    188 ; inialize MCU clock 
                                    189 ; input:
                                    190 ;   A 		source  HSI | 1 HSE 
                                    191 ;   XL      CLK_CKDIVR , clock divisor 
                                    192 ; output:
                                    193 ;   none 
                                    194 ;----------------------------------------
      00008B                        195 clock_init:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00008B C1 50 C3         [ 1]  196 	cp a,CLK_CMSR 
      00008E 27 0C            [ 1]  197 	jreq 2$ ; no switching required 
                                    198 ; select clock source 
      000090 72 12 50 C5      [ 1]  199 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000094 C7 50 C4         [ 1]  200 	ld CLK_SWR,a
      000097 C1 50 C3         [ 1]  201 1$:	cp a,CLK_CMSR
      00009A 26 FB            [ 1]  202 	jrne 1$
      00009C                        203 2$: 	
                                    204 ; HSI and cpu clock divisor 
      00009C 9F               [ 1]  205 	ld a,xl 
      00009D C7 50 C6         [ 1]  206 	ld CLK_CKDIVR,a  
      0000A0 81               [ 4]  207 	ret
                                    208 
                                    209 ;----------------------------------
                                    210 ; TIMER2 used as audio tone output 
                                    211 ; on port D:5. CN9-6
                                    212 ; channel 1 configured as PWM mode 1 
                                    213 ;-----------------------------------  
                                    214 
      0000A1                        215 timer2_init:
      0000A1 72 1A 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000A5 35 60 53 05      [ 1]  217  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000A9 35 08 53 0C      [ 1]  218 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000AD 81               [ 4]  219 	ret 
                                    220 
                                    221 ;---------------------------------
                                    222 ; TIM4 is configured to generate an 
                                    223 ; interrupt every millisecond 
                                    224 ;----------------------------------
      0000AE                        225 timer4_init:
      0000AE 72 18 50 C7      [ 1]  226 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000B2 35 07 53 45      [ 1]  227 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B6 35 7D 53 46      [ 1]  228 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BA 35 05 53 40      [ 1]  229 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BE 72 10 53 41      [ 1]  230 	bset TIM4_IER,#TIM4_IER_UIE
      0000C2 81               [ 4]  231 	ret
                                    232 
                                    233 ;-------------------------------------
                                    234 ;  initialization entry point 
                                    235 ;-------------------------------------
      0000C3                        236 cold_start:
                                    237 ;set stack 
      0000C3 AE 17 FF         [ 2]  238 	ldw x,#STACK_EMPTY
      0000C6 94               [ 1]  239 	ldw sp,x
                                    240 ; clear all ram 
      0000C7 7F               [ 1]  241 0$: clr (x)
      0000C8 5A               [ 2]  242 	decw x 
      0000C9 26 FC            [ 1]  243 	jrne 0$
                                    244 ; activate pull up on all inputs 
      0000CB A6 FF            [ 1]  245 	ld a,#255 
      0000CD C7 50 03         [ 1]  246 	ld PA_CR1,a 
      0000D0 C7 50 08         [ 1]  247 	ld PB_CR1,a 
      0000D3 C7 50 0D         [ 1]  248 	ld PC_CR1,a 
      0000D6 C7 50 12         [ 1]  249 	ld PD_CR1,a 
      0000D9 C7 50 17         [ 1]  250 	ld PE_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      0000DC C7 50 1C         [ 1]  251 	ld PF_CR1,a 
      0000DF C7 50 21         [ 1]  252 	ld PG_CR1,a 
      0000E2 C7 50 2B         [ 1]  253 	ld PI_CR1,a
                                    254 ; set LD2 pin as output 
      0000E5 72 1A 50 0D      [ 1]  255     bset PC_CR1,#LED2_BIT
      0000E9 72 1A 50 0E      [ 1]  256     bset PC_CR2,#LED2_BIT
      0000ED 72 1A 50 0C      [ 1]  257     bset PC_DDR,#LED2_BIT
      0000F1 72 1B 50 0A      [ 1]  258 	bres PC_ODR,#LED2_BIT 
                                    259 ; disable schmitt triggers on Arduino CN4 analog inputs
      0000F5 55 00 3F 54 07   [ 1]  260 	mov ADC_TDRL,0x3f
                                    261 ; disable peripherals clocks
                                    262 ;	clr CLK_PCKENR1 
                                    263 ;	clr CLK_PCKENR2
      0000FA 72 5F 50 F2      [ 1]  264 	clr AWU_TBR 
      0000FE 72 14 50 CA      [ 1]  265 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    266 ; select internal clock no divisor: 16 Mhz 	
      000102 A6 E1            [ 1]  267 	ld a,#CLK_SWR_HSI 
      000104 5F               [ 1]  268 	clrw x  
      000105 CD 00 8B         [ 4]  269     call clock_init 
      000108 CD 00 AE         [ 4]  270 	call timer4_init
      00010B CD 00 A1         [ 4]  271 	call timer2_init
                                    272 ; UART1 at 115200 BAUD
      00010E CD 08 C6         [ 4]  273 	call uart1_init
                                    274 ; activate PE_4 (user button interrupt)
      000111 72 18 50 18      [ 1]  275     bset PE_CR2,#USR_BTN_BIT 
                                    276 ; display system information
      000115 9A               [ 1]  277 	rim ; enable interrupts 
      000116 72 5C 00 17      [ 1]  278 	inc seedy+1 
      00011A 72 5C 00 15      [ 1]  279 	inc seedx+1 
      00011E CD 1D 6E         [ 4]  280 	call func_eefree 
      000121 CD 1C A3         [ 4]  281 	call ubound 
      000124 CD 14 9E         [ 4]  282 	call clear_basic
      000127 CD 25 D3         [ 4]  283 	call beep_1khz  
      00012A CD 14 4B         [ 4]  284 	call system_information
      00012D                        285 2$:	
                                    286 ; check for application in flash memory 
      00012D CD 28 0E         [ 4]  287 	call qsign 
      000130 27 03            [ 1]  288 	jreq run_app
      000132 CC 16 F2         [ 2]  289 	jp warm_start 
      000135                        290 run_app:
                                    291 ; run application in FLASH|EEPROM 
      000135 90 CE 17 73      [ 2]  292 	ldw y,XSTACK_EMPTY
      000139 CD 14 7C         [ 4]  293 	call warm_init
      00013C AE 36 04         [ 2]  294 	ldw x,#app 
      00013F CF 00 1B         [ 2]  295 	ldw txtbgn,x
      000142 72 BB 36 02      [ 2]  296 	addw x,app_size 
      000146 CF 00 1D         [ 2]  297 	ldw txtend,x 
      000149 AE 01 57         [ 2]  298 	ldw x,#AUTO_RUN 
      00014C CD 09 68         [ 4]  299 	call puts 
      00014F CD 1E 90         [ 4]  300 	call program_info 
      000152 CC 25 6E         [ 2]  301 	jp run_it_02  
      000155 20 FE            [ 2]  302     jra .  
                                    303 
      000157 20 61 75 74 6F 20 72   304 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00016A                         37 dup24:
      00016A                         38     _at_top 
      00016A 90 F6            [ 1]    1     ld a,(y)
      00016C 93               [ 1]    2     ldw x,y 
      00016D EE 01            [ 2]    3     ldw x,(1,x)
      00016F                         39     _xpush 
      00016F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000173 90 F7            [ 1]    2     ld (y),a 
      000175 90 EF 01         [ 2]    3     ldw (1,y),x 
      000178 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      000179                         48 add24: ; ( N T -- N+T )
      000179                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000179 90 F6            [ 1]    1     ld a,(y)
      00017B 93               [ 1]    2     ldw x,y 
      00017C EE 01            [ 2]    3     ldw x,(1,x)
      00017E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000182 89               [ 2]   50     pushw x  
      000183 88               [ 1]   51     push a  
      000184                         52     _at_top  
      000184 90 F6            [ 1]    1     ld a,(y)
      000186 93               [ 1]    2     ldw x,y 
      000187 EE 01            [ 2]    3     ldw x,(1,x)
      000189 72 FB 02         [ 2]   53     addw x,(2,sp)
      00018C 19 01            [ 1]   54     adc a, (1,sp)
      00018E                         55     _store_top 
      00018E 90 F7            [ 1]    1     ld (y),a 
      000190 90 EF 01         [ 2]    2     ldw (1,y),x     
      000193                         56     _drop 3 
      000193 5B 03            [ 2]    1     addw sp,#3 
      000195 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      000196                         63 sub24: ; ( N T -- N-T ) 
      000196                         64     _xpop 
      000196 90 F6            [ 1]    1     ld a,(y)
      000198 93               [ 1]    2     ldw x,y 
      000199 EE 01            [ 2]    3     ldw x,(1,x)
      00019B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00019F 89               [ 2]   65     pushw x 
      0001A0 88               [ 1]   66     push  a
      0001A1                         67     _at_top  
      0001A1 90 F6            [ 1]    1     ld a,(y)
      0001A3 93               [ 1]    2     ldw x,y 
      0001A4 EE 01            [ 2]    3     ldw x,(1,x)
      0001A6 72 F0 02         [ 2]   68     subw x,(2,sp) 
      0001A9 12 01            [ 1]   69     sbc a, (1,sp)
      0001AB                         70     _store_top  
      0001AB 90 F7            [ 1]    1     ld (y),a 
      0001AD 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001B0                         71     _drop 3 
      0001B0 5B 03            [ 2]    1     addw sp,#3 
      0001B2 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001B3                         77 cp24:
      0001B3                         78     _xpop 
      0001B3 90 F6            [ 1]    1     ld a,(y)
      0001B5 93               [ 1]    2     ldw x,y 
      0001B6 EE 01            [ 2]    3     ldw x,(1,x)
      0001B8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001BC C7 00 0C         [ 1]   79     ld acc24,a 
      0001BF CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0001C2                         81     _at_top 
      0001C2 90 F6            [ 1]    1     ld a,(y)
      0001C4 93               [ 1]    2     ldw x,y 
      0001C5 EE 01            [ 2]    3     ldw x,(1,x)
      0001C7 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001CB C2 00 0C         [ 1]   83     sbc a,acc24
      0001CE 2F 08            [ 1]   84     jrslt 1$
      0001D0 26 0A            [ 1]   85     jrne 2$
      0001D2 5D               [ 2]   86     tnzw x 
      0001D3 26 07            [ 1]   87     jrne 2$
      0001D5 4F               [ 1]   88     clr a 
      0001D6 20 06            [ 2]   89     jra 9$ 
      0001D8                         90 1$: ; i1 < i2 
      0001D8 A6 FF            [ 1]   91     ld a,#255
      0001DA 20 02            [ 2]   92     jra 9$ 
      0001DC                         93 2$: ; i1 > i2 
      0001DC A6 01            [ 1]   94     ld a,#1 
      0001DE 5F               [ 1]   95 9$: clrw x
      0001DF                         96      _store_top 
      0001DF 90 F7            [ 1]    1     ld (y),a 
      0001E1 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001E4 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001E5                        103 cp24_ax:
      0001E5 88               [ 1]  104     push a 
      0001E6 C3 00 0D         [ 2]  105     cpw x,acc16 
      0001E9 C2 00 0C         [ 1]  106     sbc a,acc24
      0001EC 84               [ 1]  107     pop a 
      0001ED 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001EE                        115 abs24: ; ( i -- u )
      0001EE 90 F6            [ 1]  116     ld a,(y)
      0001F0 A1 80            [ 1]  117     cp a,#0x80 
      0001F2 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001F4 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001F5                        124 cpl24:  ; i -- ~i 
      0001F5 90 73            [ 1]  125     cpl (y) 
      0001F7 90 63 01         [ 1]  126     cpl (1,y)
      0001FA 90 63 02         [ 1]  127     cpl (2,y)
      0001FD 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      0001FE                        133 neg24: ; (i -- -i )
      0001FE                        134     _at_top
      0001FE 90 F6            [ 1]    1     ld a,(y)
      000200 93               [ 1]    2     ldw x,y 
      000201 EE 01            [ 2]    3     ldw x,(1,x)
      000203 43               [ 1]  135     cpl  a  
      000204 53               [ 2]  136     cplw x 
      000205 1C 00 01         [ 2]  137     addw x,#1
      000208 A9 00            [ 1]  138     adc a,#0
      00020A                        139     _store_top  
      00020A 90 F7            [ 1]    1     ld (y),a 
      00020C 90 EF 01         [ 2]    2     ldw (1,y),x     
      00020F 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000210                        145 neg_ax:
      000210 43               [ 1]  146     cpl  a  
      000211 53               [ 2]  147     cplw x 
      000212 1C 00 01         [ 2]  148     addw x,#1
      000215 A9 00            [ 1]  149     adc a,#0
      000217 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      000218                        155 neg_acc24: ; 
      000218 72 53 00 0C      [ 1]  156     cpl acc24 
      00021C 72 53 00 0D      [ 1]  157     cpl acc16 
      000220 72 53 00 0E      [ 1]  158     cpl acc8
      000224 72 5C 00 0E      [ 1]  159     inc acc8 
      000228 26 0A            [ 1]  160     jrne 9$
      00022A 72 5C 00 0D      [ 1]  161     inc acc16 
      00022E 26 04            [ 1]  162     jrne 9$
      000230 72 5C 00 0C      [ 1]  163     inc acc24 
      000234 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      000235                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000235 88               [ 1]  181     push a 
      000236 72 5F 00 0B      [ 1]  182 	clr acc32
      00023A 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      00023E 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000241 97               [ 1]  186     ld xl,a 
      000242 7B 01            [ 1]  187     ld a,(U8,sp)
      000244 42               [ 4]  188     mul x,a 
      000245 CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      000248 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      00024B 97               [ 1]  192     ld xl,a 
      00024C 7B 01            [ 1]  193     ld a,(U8,sp) 
      00024E 42               [ 4]  194     mul x,a 
      00024F 72 BB 00 0C      [ 2]  195     addw x,acc24
      000253 72 59 00 0B      [ 1]  196     rlc acc32 
      000257 CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00025A 90 F6            [ 1]  199     ld a,(Y)
      00025C 97               [ 1]  200     ld xl,a 
      00025D 7B 01            [ 1]  201     ld a,(U8,sp)
      00025F 42               [ 4]  202     mul x,a 
      000260 72 BB 00 0B      [ 2]  203     addw x,acc32
      000264 02               [ 1]  204     rlwa x 
      000265 4D               [ 1]  205     tnz a 
      000266 27 05            [ 1]  206     jreq 1$
      000268 A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00026A CC 16 68         [ 2]  208     jp tb_error 
      00026D                        209 1$:
      00026D 9E               [ 1]  210     ld a,xh  
      00026E CE 00 0D         [ 2]  211     ldw x,acc16   
      000271                        212     _drop VSIZE 
      000271 5B 01            [ 2]    1     addw sp,#VSIZE 
      000273 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000274                        224 mul24:
      000274                        225     _vars VSIZE
      000274 52 07            [ 2]    1     sub sp,#VSIZE 
      000276 5F               [ 1]  226     clrw x 
      000277 1F 01            [ 2]  227     ldw (PROD,sp),x 
      000279 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      00027B                        229     _xpop 
      00027B 90 F6            [ 1]    1     ld a,(y)
      00027D 93               [ 1]    2     ldw x,y 
      00027E EE 01            [ 2]    3     ldw x,(1,x)
      000280 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000284 4D               [ 1]  230     tnz a 
      000285 2A 05            [ 1]  231     jrpl 0$
      000287 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      000289 CD 02 10         [ 4]  233     call neg_ax 
      00028C                        234 0$:    
      00028C 6B 05            [ 1]  235     ld (N1,sp),a 
      00028E 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000290 90 7D            [ 1]  237     tnz (Y)
      000292 2A 05            [ 1]  238     jrpl 2$ 
      000294 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      000296 CD 01 FE         [ 4]  240     call neg24
      000299                        241 2$: 
      000299 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      00029B 27 0A            [ 1]  243     jreq 4$
      00029D CD 02 35         [ 4]  244     call mulu24_8
      0002A0 4D               [ 1]  245     tnz a 
      0002A1 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      0002A3 6B 01            [ 1]  247     ld (PROD,sp),a
      0002A5 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      0002A7                        249 4$:
      0002A7 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      0002A9 27 0D            [ 1]  251     jreq 5$
      0002AB CD 02 35         [ 4]  252     call mulu24_8
      0002AE 4D               [ 1]  253     tnz a 
      0002AF 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002B1 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002B4 29 29            [ 1]  256     jrv 8$ ; overflow
      0002B6 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002B8                        258 5$:
      0002B8 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002BA 27 10            [ 1]  260     jreq 6$
      0002BC CD 02 35         [ 4]  261     call mulu24_8
      0002BF 01               [ 1]  262     rrwa x 
      0002C0 5D               [ 2]  263     tnzw x 
      0002C1 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002C3 4D               [ 1]  265     tnz a 
      0002C4 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002C6 1B 01            [ 1]  267     add a,(PROD,sp)
      0002C8 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002CA 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002CC                        270 6$:
      0002CC 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002CE 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002D0 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002D2 27 03            [ 1]  274     jreq 9$
      0002D4 CD 02 10         [ 4]  275     call neg_ax 
      0002D7                        276 9$:
      0002D7                        277     _store_top 
      0002D7 90 F7            [ 1]    1     ld (y),a 
      0002D9 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002DC                        278     _drop VSIZE 
      0002DC 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002DE 81               [ 4]  279     ret 
      0002DF                        280 8$: ; overflow
      0002DF A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0002E1 CC 16 68         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002E4                        296 divu24_8:
      0002E4 89               [ 2]  297 	pushw x ; save x
      0002E5 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002E6 CE 00 0C         [ 2]  300 	ldw x,acc24
      0002E9 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002EB 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002EC 88               [ 1]  303 	push a  ;save remainder
      0002ED CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002F0 84               [ 1]  305 	pop a
      0002F1 95               [ 1]  306 	ld xh,a
      0002F2 C6 00 0E         [ 1]  307 	ld a,acc8
      0002F5 97               [ 1]  308 	ld xl,a
      0002F6 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002F8 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002F9 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      0002FB 9F               [ 1]  312 	ld a,xl
      0002FC C7 00 0E         [ 1]  313 	ld acc8,a
      0002FF 84               [ 1]  314 	pop a
      000300 85               [ 2]  315 	popw x
      000301 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      000302                        332 div24:
      000302                        333     _vars VSIZE 
      000302 52 06            [ 2]    1     sub sp,#VSIZE 
      000304 0F 06            [ 1]  334     clr (RSIGN,sp)
      000306 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000308                        336     _xpop 
      000308 90 F6            [ 1]    1     ld a,(y)
      00030A 93               [ 1]    2     ldw x,y 
      00030B EE 01            [ 2]    3     ldw x,(1,x)
      00030D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000311 4D               [ 1]  337     tnz a 
      000312 2A 05            [ 1]  338     jrpl 0$ 
      000314 03 05            [ 1]  339     cpl (QSIGN,sp)
      000316 CD 02 10         [ 4]  340     call neg_ax
      000319                        341 0$:
      000319 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      00031B 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      00031D 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      00031F 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000321 26 05            [ 1]  346     jrne 1$ 
      000323 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      000325 CC 16 68         [ 2]  348     jp tb_error 
      000328                        349 1$: ; dividend  
      000328                        350     _at_top
      000328 90 F6            [ 1]    1     ld a,(y)
      00032A 93               [ 1]    2     ldw x,y 
      00032B EE 01            [ 2]    3     ldw x,(1,x)
      00032D 4D               [ 1]  351     tnz a 
      00032E 2A 07            [ 1]  352     jrpl 2$
      000330 CD 02 10         [ 4]  353     call neg_ax
      000333 03 05            [ 1]  354     cpl (QSIGN,sp)
      000335 03 06            [ 1]  355     cpl (RSIGN,sp)
      000337                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      000337                        359     _store_top 
      000337 90 F7            [ 1]    1     ld (y),a 
      000339 90 EF 01         [ 2]    2     ldw (1,y),x     
      00033C A6 18            [ 1]  360     ld a,#24 
      00033E 6B 04            [ 1]  361     ld (CNTR,sp),a
      000340 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000342 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000344 CD 01 E5         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      000347 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      000349 C6 00 0C         [ 1]  368     ld a,acc24 
      00034C CE 00 0D         [ 2]  369     ldw x,acc16 
      00034F 72 5F 00 0C      [ 1]  370     clr acc24 
      000353 72 5F 00 0D      [ 1]  371     clr acc16 
      000357 72 5F 00 0E      [ 1]  372     clr acc8 
      00035B 20 26            [ 2]  373     jra 6$
      00035D                        374 22$:     
      00035D 4F               [ 1]  375     clr a 
      00035E 5F               [ 1]  376     clrw x 
      00035F 98               [ 1]  377     rcf  
      000360                        378 3$: ; shift carry in acc24 bit 0 
      000360 90 69 02         [ 1]  379     rlc (2,y) 
      000363 90 69 01         [ 1]  380     rlc (1,y)
      000366 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000368 59               [ 2]  382     rlcw x  
      000369 49               [ 1]  383     rlc a
      00036A 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      00036D 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      00036F 24 05            [ 1]  386     jrnc 5$
      000371 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000374 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      000376                        389 5$: ; shift carry in QUOTIENT 
      000376 8C               [ 1]  390     ccf
      000377 0A 04            [ 1]  391     dec (CNTR,sp)
      000379 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      00037B 90 69 02         [ 1]  394     rlc (2,y)
      00037E 90 69 01         [ 1]  395     rlc (1,y) 
      000381 90 79            [ 1]  396     rlc (y) 
      000383                        397 6$:    
      000383 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      000385 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      000387 0D 05            [ 1]  400     tnz (QSIGN,sp)
      000389 27 03            [ 1]  401     jreq 8$
      00038B CD 01 FE         [ 4]  402     call neg24
      00038E                        403 8$: 
      00038E 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000390 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000392                        406 81$:
      000392 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000394 27 03            [ 1]  408     jreq 9$
      000396 CD 02 10         [ 4]  409     call neg_ax       
      000399                        410 9$: _drop VSIZE 
      000399 5B 06            [ 2]    1     addw sp,#VSIZE 
      00039B 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      00039C                        423 mod24:
      00039C CD 03 02         [ 4]  424     call div24 
      00039F                        425     _store_top  ; replace quotient by remainder 
      00039F 90 F7            [ 1]    1     ld (y),a 
      0003A1 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003A4 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;;;;;;;;;;;;;;;;;;;
                                     22 
                           000001    23 .if DEBUG 
                                     24 
                                     25     .area CODE
                                     26 
                                     27 ;---------------------------------
                                     28 ;; print actual registers states 
                                     29 ;; as pushed on stack 
                                     30 ;; {Y,X,CC,A}
                                     31 ;---------------------------------
      0003A5                         32 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0003A5                         33 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0003A5                         34 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0003A5                         35 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0003A5                         36 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0003A5                         37 prt_regs::
      0003A5 AE 03 E8         [ 2]   38 	ldw x,#regs_state 
      0003A8 CD 09 68         [ 4]   39 	call puts
                                     40 ; register PC
      0003AB 16 01            [ 2]   41 	ldw y,(1,sp)
      0003AD AE 05 1C         [ 2]   42 	ldw x,#REG_EPC 
      0003B0 CD 04 6D         [ 4]   43 	call prt_reg16 
                                     44 ; register CC 
      0003B3 7B 08            [ 1]   45 	ld a,(R_CC,sp)
      0003B5 AE 05 2D         [ 2]   46 	ldw x,#REG_CC 
      0003B8 CD 04 4B         [ 4]   47 	call prt_reg8 
                                     48 ; register A 
      0003BB 7B 07            [ 1]   49 	ld a,(R_A,sp)
      0003BD AE 05 29         [ 2]   50 	ldw x,#REG_A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0003C0 CD 04 4B         [ 4]   51 	call prt_reg8 
                                     52 ; register X 
      0003C3 16 05            [ 2]   53 	ldw y,(R_X,sp)
      0003C5 AE 05 25         [ 2]   54 	ldw x,#REG_X 
      0003C8 CD 04 6D         [ 4]   55 	call prt_reg16 
                                     56 ; register Y 
      0003CB 16 03            [ 2]   57 	ldw y,(R_Y,sp)
      0003CD AE 05 21         [ 2]   58 	ldw x,#REG_Y 
      0003D0 CD 04 6D         [ 4]   59 	call prt_reg16 
                                     60 ; register SP 
      0003D3 90 96            [ 1]   61 	ldw y,sp
      0003D5 72 A9 00 08      [ 2]   62 	addw y,#6+ARG_OFS  
      0003D9 AE 05 32         [ 2]   63 	ldw x,#REG_SP
      0003DC CD 04 6D         [ 4]   64 	call prt_reg16
      0003DF A6 0D            [ 1]   65 	ld a,#CR 
      0003E1 CD 09 0B         [ 4]   66 	call putc
      0003E4 CD 09 0B         [ 4]   67 	call putc   
      0003E7 81               [ 4]   68 	ret 
                                     69 
                                     70 
      0003E8 0A 72 65 67 69 73 74    71 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                     72 
                                     73 
                                     74 ;--------------------
                                     75 ; print content at address in hex.
                                     76 ; input:
                                     77 ;   X 	address to peek 
                                     78 ; output:
                                     79 ;	none 
                                     80 ;--------------------	
      00040F                         81 prt_peek::
      00040F 89               [ 2]   82 	pushw x 
      000410 35 10 00 0A      [ 1]   83 	mov base,#16 
      000414 CD 18 12         [ 4]   84 	call prt_i16  
      000417 A6 3A            [ 1]   85 	ld a,#': 
      000419 CD 09 0B         [ 4]   86 	call putc 
      00041C A6 20            [ 1]   87 	ld a,#SPACE 
      00041E CD 09 0B         [ 4]   88 	call putc 
      000421 85               [ 2]   89 	popw x 
      000422 F6               [ 1]   90 	ld a,(x)
      000423 5F               [ 1]   91 	clrw x 
      000424 97               [ 1]   92 	ld xl,a 
      000425 35 0A 00 0A      [ 1]   93 	mov base,#10 
      000429 CD 18 12         [ 4]   94 	call prt_i16 
      00042C 81               [ 4]   95 	ret 
                                     96 
                                     97 ;----------------------------------------
                                     98 ;   DEBUG support functions
                                     99 ;----------------------------------------
                                    100 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    101 ; turn LED on 
      00042D                        102 ledon:
      00042D 72 1A 50 0A      [ 1]  103     bset PC_ODR,#LED2_BIT
      000431 81               [ 4]  104     ret 
                                    105 
                                    106 ; turn LED off 
      000432                        107 ledoff:
      000432 72 1B 50 0A      [ 1]  108     bres PC_ODR,#LED2_BIT 
      000436 81               [ 4]  109     ret 
                                    110 
                                    111 ; invert LED status 
      000437                        112 ledtoggle:
      000437 A6 20            [ 1]  113     ld a,#LED2_MASK
      000439 C8 50 0A         [ 1]  114     xor a,PC_ODR
      00043C C7 50 0A         [ 1]  115     ld PC_ODR,a
      00043F 81               [ 4]  116     ret 
                                    117 
      000440                        118 left_paren:
      000440 A6 20            [ 1]  119 	ld a,#SPACE 
      000442 CD 09 0B         [ 4]  120 	call putc
      000445 A6 28            [ 1]  121 	ld a,#'( 
      000447 CD 09 0B         [ 4]  122 	call putc 	
      00044A 81               [ 4]  123 	ret 
                                    124 
                                    125 ;------------------------------
                                    126 ; print 8 bit register 
                                    127 ; input:
                                    128 ;   X  point to register name 
                                    129 ;   A  register value to print 
                                    130 ; output:
                                    131 ;   none
                                    132 ;------------------------------- 
      00044B                        133 prt_reg8:
      00044B 88               [ 1]  134 	push a 
      00044C CD 09 68         [ 4]  135 	call puts 
      00044F 7B 01            [ 1]  136 	ld a,(1,sp) 
      000451 5F               [ 1]  137 	clrw x 
      000452 97               [ 1]  138 	ld xl,a 
      000453 35 10 00 0A      [ 1]  139 	mov base,#16
      000457 CD 18 12         [ 4]  140 	call prt_i16  
      00045A CD 04 40         [ 4]  141 	call left_paren 
      00045D 84               [ 1]  142 	pop a 
      00045E 5F               [ 1]  143 	clrw x 
      00045F 97               [ 1]  144 	ld xl,a 
      000460 35 0A 00 0A      [ 1]  145 	mov base,#10 
      000464 CD 18 12         [ 4]  146 	call prt_i16  
      000467 A6 29            [ 1]  147 	ld a,#') 
      000469 CD 09 0B         [ 4]  148 	call putc
      00046C 81               [ 4]  149 	ret
                                    150 
                                    151 ;--------------------------------
                                    152 ; print 16 bits register 
                                    153 ; input:
                                    154 ;   X   point register name 
                                    155 ;   Y   register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                    156 ; output:
                                    157 ;  none
                                    158 ;--------------------------------
      00046D                        159 prt_reg16: 
      00046D 90 89            [ 2]  160 	pushw y 
      00046F CD 09 68         [ 4]  161 	call puts 
      000472 1E 01            [ 2]  162 	ldw x,(1,sp) 
      000474 35 10 00 0A      [ 1]  163 	mov base,#16 
      000478 CD 18 12         [ 4]  164 	call prt_i16  
      00047B CD 04 40         [ 4]  165 	call left_paren 
      00047E 85               [ 2]  166 	popw x 
      00047F 35 0A 00 0A      [ 1]  167 	mov base,#10 
      000483 CD 18 12         [ 4]  168 	call prt_i16  
      000486 A6 29            [ 1]  169 	ld a,#') 
      000488 CD 09 0B         [ 4]  170 	call putc
      00048B 81               [ 4]  171 	ret 
                                    172 
                                    173 ;------------------------------------
                                    174 ; print registers contents saved on
                                    175 ; stack by trap interrupt.
                                    176 ;------------------------------------
      00048C                        177 print_registers:
      00048C AE 04 DF         [ 2]  178 	ldw x,#STATES
      00048F CD 09 68         [ 4]  179 	call puts
                                    180 ; print EPC 
      000492 AE 05 1C         [ 2]  181 	ldw x, #REG_EPC
      000495 CD 09 68         [ 4]  182 	call puts 
      000498 7B 0B            [ 1]  183 	ld a, (11,sp)
      00049A C7 00 0E         [ 1]  184 	ld acc8,a 
      00049D 7B 0A            [ 1]  185 	ld a, (10,sp) 
      00049F C7 00 0D         [ 1]  186 	ld acc16,a 
      0004A2 7B 09            [ 1]  187 	ld a,(9,sp) 
      0004A4 C7 00 0C         [ 1]  188 	ld acc24,a
      0004A7 5F               [ 1]  189 	clrw x  
      0004A8 A6 10            [ 1]  190 	ld a,#16
      0004AA CD 18 29         [ 4]  191 	call prt_acc24  
                                    192 ; print X
      0004AD AE 05 25         [ 2]  193 	ldw x,#REG_X
      0004B0 16 05            [ 2]  194 	ldw y,(5,sp)
      0004B2 CD 04 6D         [ 4]  195 	call prt_reg16  
                                    196 ; print Y 
      0004B5 AE 05 21         [ 2]  197 	ldw x,#REG_Y
      0004B8 16 07            [ 2]  198 	ldw y, (7,sp)
      0004BA CD 04 6D         [ 4]  199 	call prt_reg16  
                                    200 ; print A 
      0004BD AE 05 29         [ 2]  201 	ldw x,#REG_A
      0004C0 7B 04            [ 1]  202 	ld a, (4,sp) 
      0004C2 CD 04 4B         [ 4]  203 	call prt_reg8
                                    204 ; print CC 
      0004C5 AE 05 2D         [ 2]  205 	ldw x,#REG_CC 
      0004C8 7B 03            [ 1]  206 	ld a, (3,sp) 
      0004CA CD 04 4B         [ 4]  207 	call prt_reg8 
                                    208 ; print SP 
      0004CD AE 05 32         [ 2]  209 	ldw x,#REG_SP
      0004D0 90 96            [ 1]  210 	ldw y,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0004D2 72 A9 00 0C      [ 2]  211 	addw y,#12
      0004D6 CD 04 6D         [ 4]  212 	call prt_reg16  
      0004D9 A6 0A            [ 1]  213 	ld a,#'\n' 
      0004DB CD 09 0B         [ 4]  214 	call putc
      0004DE 81               [ 4]  215 	ret
                                    216 
      0004DF 0A 52 65 67 69 73 74   217 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      00051C 45 50 43 3A 00         218 REG_EPC: .asciz "EPC:"
      000521 0A 59 3A 00            219 REG_Y:   .asciz "\nY:" 
      000525 0A 58 3A 00            220 REG_X:   .asciz "\nX:"
      000529 0A 41 3A 00            221 REG_A:   .asciz "\nA:" 
      00052D 0A 43 43 3A 00         222 REG_CC:  .asciz "\nCC:"
      000532 0A 53 50 3A 00         223 REG_SP:  .asciz "\nSP:"
                                    224 
                                    225 ;----------------------------
                                    226 ; command interface
                                    227 ; only 3 commands:
                                    228 ;  'q' to resume application
                                    229 ;  'p [addr]' to print memory values 
                                    230 ;  's addr' to print string 
                                    231 ;----------------------------
                                    232 ;local variable 
                           000001   233 	PSIZE=1
                           000001   234 	VSIZE=1 
      000537                        235 cmd_itf:
      000537 52 01            [ 2]  236 	sub sp,#VSIZE 
      000539 72 5F 00 18      [ 1]  237 	clr farptr 
      00053D 72 5F 00 19      [ 1]  238 	clr farptr+1 
      000541 72 5F 00 1A      [ 1]  239 	clr farptr+2  
      000545                        240 repl:
      000545 A6 0D            [ 1]  241 	ld a,#CR 
      000547 CD 09 0B         [ 4]  242 	call putc 
      00054A A6 3F            [ 1]  243 	ld a,#'? 
      00054C CD 09 0B         [ 4]  244 	call putc
      00054F 72 5F 00 00      [ 1]  245 	clr in.w 
      000553 72 5F 00 01      [ 1]  246 	clr in 
      000557 CD 0A 6D         [ 4]  247 	call readln
      00055A 90 AE 16 90      [ 2]  248 	ldw y,#tib  
      00055E 90 F6            [ 1]  249 	ld a,(y)
      000560 27 E3            [ 1]  250 	jreq repl  
      000562 72 5C 00 01      [ 1]  251 	inc in 
      000566 CD 18 A8         [ 4]  252 	call to_upper 
      000569 A1 51            [ 1]  253 	cp a,#'Q 
      00056B 26 17            [ 1]  254 	jrne test_p
      00056D                        255 repl_exit:
      00056D 72 5F 16 90      [ 1]  256 	clr tib 
      000571 72 5F 00 03      [ 1]  257 	clr count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000575 72 5F 00 01      [ 1]  258 	clr in 
      000579                        259 	_drop #VSIZE 	
      000579 5B 01            [ 2]    1     addw sp,##VSIZE 
      00057B 81               [ 4]  260 	ret  
      00057C                        261 invalid:
      00057C AE 05 FD         [ 2]  262 	ldw x,#invalid_cmd 
      00057F CD 09 68         [ 4]  263 	call puts 
      000582 20 C1            [ 2]  264 	jra repl 
      000584                        265 test_p:	
      000584 A1 50            [ 1]  266     cp a,#'P 
      000586 27 11            [ 1]  267 	jreq mem_peek
      000588 A1 53            [ 1]  268     cp a,#'S 
      00058A 26 F0            [ 1]  269 	jrne invalid 
      00058C                        270 print_string:	
      00058C CD 0E E2         [ 4]  271 	call get_token
      00058F A1 84            [ 1]  272 	cp a,#TK_INTGR 
      000591 26 E9            [ 1]  273 	jrne invalid 
      000593 CD 09 68         [ 4]  274 	call puts
      000596 CC 05 45         [ 2]  275 	jp repl 	
      000599                        276 mem_peek:
      000599 A6 20            [ 1]  277 	ld a,#SPACE 
      00059B CD 0E CF         [ 4]  278 	call skip  	 
      00059E 72 B9 00 00      [ 2]  279 	addw y,in.w 
      0005A2 AE 16 E0         [ 2]  280 	ldw x,#pad 
      0005A5 CD 13 A2         [ 4]  281 	call strcpy
      0005A8 AE 16 E0         [ 2]  282 	ldw x,#pad
      0005AB CD 18 B4         [ 4]  283 	call atoi24 	
      0005AE C6 00 0C         [ 1]  284 	ld a, acc24 
      0005B1 CA 00 0D         [ 1]  285 	or a,acc16 
      0005B4 CA 00 0E         [ 1]  286 	or a,acc8 
      0005B7 26 02            [ 1]  287 	jrne 1$ 
      0005B9 20 0C            [ 2]  288 	jra peek_byte  
      0005BB CE 00 0C         [ 2]  289 1$:	ldw x,acc24 
      0005BE CF 00 18         [ 2]  290 	ldw farptr,x 
      0005C1 C6 00 0E         [ 1]  291 	ld a,acc8 
      0005C4 C7 00 1A         [ 1]  292 	ld farptr+2,a 
      0005C7                        293 peek_byte:
      0005C7 CD 06 0C         [ 4]  294 	call print_farptr 
      0005CA A6 08            [ 1]  295 	ld a,#8 
      0005CC 6B 01            [ 1]  296 	ld (PSIZE,sp),a 
      0005CE 5F               [ 1]  297 	clrw x 
      0005CF CD 06 27         [ 4]  298 1$:	call fetchc  
      0005D2 89               [ 2]  299 	pushw x 
      0005D3 C7 00 0E         [ 1]  300 	ld acc8,a 
      0005D6 5F               [ 1]  301 	clrw x 
      0005D7 CF 00 0C         [ 2]  302 	ldw acc24,x 
      0005DA A6 90            [ 1]  303 	ld a,#16+128
      0005DC CD 18 29         [ 4]  304 	call prt_acc24
      0005DF 85               [ 2]  305 	popw x 
      0005E0 0A 01            [ 1]  306 	dec (PSIZE,sp)
      0005E2 26 EB            [ 1]  307 	jrne 1$ 
      0005E4 A6 08            [ 1]  308 	ld a,#8 
      0005E6 CB 00 1A         [ 1]  309 	add a,farptr+2 
      0005E9 C7 00 1A         [ 1]  310 	ld farptr+2,a
      0005EC 4F               [ 1]  311 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0005ED C9 00 19         [ 1]  312 	adc a,farptr+1 
      0005F0 C7 00 19         [ 1]  313 	ld farptr+1,a 
      0005F3 4F               [ 1]  314 	clr a 
      0005F4 C9 00 18         [ 1]  315 	adc a,farptr 
      0005F7 C7 00 18         [ 1]  316 	ld farptr,a 
      0005FA CC 05 45         [ 2]  317 	jp repl  
                                    318 
      0005FD 6E 6F 74 20 61 20 63   319 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    320 
                                    321 ;----------------------------
                                    322 ; display farptr address
                                    323 ;----------------------------
      00060C                        324 print_farptr:
      00060C C6 00 1A         [ 1]  325 	ld a ,farptr+2 
      00060F C7 00 0E         [ 1]  326 	ld acc8,a 
      000612 CE 00 18         [ 2]  327 	ldw x,farptr 
      000615 CF 00 0C         [ 2]  328 	ldw acc24,x 
      000618 5F               [ 1]  329 	clrw x 
      000619 A6 10            [ 1]  330 	ld a,#16 
      00061B CD 18 29         [ 4]  331 	call prt_acc24
      00061E A6 20            [ 1]  332 	ld a,#SPACE 
      000620 CD 09 0B         [ 4]  333 	call putc 
      000623 CD 09 0B         [ 4]  334 	call putc 
      000626 81               [ 4]  335 	ret
                                    336 
                                    337 ;------------------------------------
                                    338 ; get byte at address farptr[X]
                                    339 ; input:
                                    340 ;	 farptr   address to peek
                                    341 ;    X		  farptr index 	
                                    342 ; output:
                                    343 ;	 A 		  byte from memory  
                                    344 ;    x		  incremented by 1
                                    345 ;------------------------------------
      000627                        346 fetchc: ; @C
      000627 92 AF 00 18      [ 5]  347 	ldf a,([farptr],x)
      00062B 5C               [ 1]  348 	incw x
      00062C 81               [ 4]  349 	ret
                                    350 
                                    351 
                                    352 ;------------------------------------
                                    353 ; expect a number from command line 
                                    354 ; next argument
                                    355 ;  input:
                                    356 ;	  none
                                    357 ;  output:
                                    358 ;    acc24   int24_t 
                                    359 ;------------------------------------
      00062D                        360 number:
      00062D CD 0E E2         [ 4]  361 	call get_token
      000630 A1 84            [ 1]  362 	cp a,#TK_INTGR
      000632 27 03            [ 1]  363 	jreq 1$
      000634 CC 16 66         [ 2]  364 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000637 81               [ 4]  365 1$:	ret
                                    366 
                                    367 
                                    368 ;---------------------
                                    369 ; display n bytes row 
                                    370 ; from memory.
                                    371 ; input:
                                    372 ;   A   bytes to print 
                                    373 ;	X   start address 
                                    374 ; output:
                                    375 ;   X   address after last shown  
                                    376 ;---------------------
                           000001   377 	CNT=1 
                           000002   378 	ADR=2 
                           000003   379 	VSIZE=3 
      000638                        380 show_row:
      000638 4D               [ 1]  381 	tnz a 
      000639 26 01            [ 1]  382 	jrne 1$
      00063B 81               [ 4]  383 	ret 
      00063C                        384 1$:	
      00063C 89               [ 2]  385 	pushw x  
      00063D 88               [ 1]  386 	push a 
      00063E 35 04 00 23      [ 1]  387 	mov tab_width,#4 
      000642 CD 18 12         [ 4]  388 	call prt_i16 
      000645 A6 20            [ 1]  389 	ld a,#SPACE  
      000647 CD 09 0B         [ 4]  390 	call putc
      00064A                        391 row_loop:
      00064A 1E 02            [ 2]  392 	ldw x,(ADR,sp)
      00064C F6               [ 1]  393 	ld a,(x)
      00064D 5F               [ 1]  394 	clrw x 
      00064E 97               [ 1]  395 	ld xl,a 
      00064F CD 18 12         [ 4]  396 	call prt_i16 
      000652 1E 02            [ 2]  397 	ldw x,(ADR,sp)
      000654 5C               [ 1]  398 	incw x 
      000655 1F 02            [ 2]  399 	ldw (ADR,sp),x 
      000657 0A 01            [ 1]  400 	dec (CNT,sp)
      000659 26 EF            [ 1]  401 	jrne row_loop
      00065B                        402 	_drop VSIZE  		
      00065B 5B 03            [ 2]    1     addw sp,#VSIZE 
      00065D 35 04 00 23      [ 1]  403 	mov tab_width,#4
      000661 A6 0D            [ 1]  404 	ld a,#CR 
      000663 CD 09 0B         [ 4]  405 	call putc 
      000666 81               [ 4]  406 	ret 
                                    407 
                                    408 ;--------------------------
                                    409 ; print memory content 
                                    410 ; in hexadecimal format
                                    411 ;  input:
                                    412 ;    X    start address 
                                    413 ;    Y    count 
                                    414 ;--------------------------
                           000001   415 	BCNT=1
                           000003   416 	BASE=3
                           000004   417 	TABW=4
                           000004   418 	VSIZE=4   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000667                        419 hex_dump:
      000667 88               [ 1]  420 	push a 
      000668                        421 	_vars VSIZE
      000668 52 04            [ 2]    1     sub sp,#VSIZE 
      00066A C6 00 0A         [ 1]  422 	ld a,base
      00066D 6B 03            [ 1]  423 	ld (BASE,sp),a 
      00066F 35 10 00 0A      [ 1]  424 	mov base,#16
      000673 C6 00 23         [ 1]  425 	ld a,tab_width 
      000676 6B 04            [ 1]  426 	ld (TABW,sp),a
      000678 A6 0D            [ 1]  427 	ld a,#CR 
      00067A CD 09 0B         [ 4]  428 	call putc 
      00067D 17 01            [ 2]  429 1$: ldw (BCNT,sp),y
      00067F A6 10            [ 1]  430 	ld a,#16
      000681 90 A3 00 10      [ 2]  431 	cpw y,#16
      000685 2A 02            [ 1]  432 	jrpl 2$
      000687 90 9F            [ 1]  433 	ld a,yl
      000689                        434 2$: 	
      000689 CD 06 38         [ 4]  435 	call show_row 
      00068C 16 01            [ 2]  436 	ldw y,(BCNT,sp) 
      00068E 72 A2 00 10      [ 2]  437 	subw y,#16 
      000692 90 A3 00 01      [ 2]  438 	cpw y,#1
      000696 2A E5            [ 1]  439 	jrpl 1$
      000698 7B 03            [ 1]  440 	ld a,(BASE,sp)
      00069A C7 00 0A         [ 1]  441 	ld base,a
      00069D 7B 04            [ 1]  442 	ld a,(TABW,sp)
      00069F C7 00 23         [ 1]  443 	ld tab_width,a 
      0006A2                        444 	_drop VSIZE
      0006A2 5B 04            [ 2]    1     addw sp,#VSIZE 
      0006A4 84               [ 1]  445 	pop a 
      0006A5 81               [ 4]  446 	ret 
                                    447 
                                    448 .endif ; DEBUG 
                                    449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0006A6                         45 unlock_eeprom:
      0006A6 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0006AB 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0006AF 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0006B3 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0006B7 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0006BB 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006C0 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0006C1                         62 unlock_flash:
      0006C1 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006C6 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0006CA 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0006CE 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006D2 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006D6 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006DB 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006DC                         76 row_erase:
      0006DC 88               [ 1]   77 	push a 
      0006DD 90 89            [ 2]   78 	pushw y 
      0006DF 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006E3 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006E7 4F               [ 1]   81 	clr a 
      0006E8 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0006EA 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0006EE 90 5C            [ 1]   84     incw y
      0006F0 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0006F4 90 5C            [ 1]   86     incw y
      0006F6 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0006FA 90 5C            [ 1]   88     incw y
      0006FC 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      000700 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000705 90 85            [ 2]   91 	popw y 
      000707 84               [ 1]   92 	pop a 
      000708 81               [ 4]   93 	ret
      000709                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      000709                         97 move_erase_to_ram:
      000709 89               [ 2]   98 	pushw x 
      00070A 90 89            [ 2]   99 	pushw y 
      00070C AE 07 09         [ 2]  100 	ldw x,#row_erase_end 
      00070F 1D 06 DC         [ 2]  101 	subw x,#row_erase
      000712 CF 00 0D         [ 2]  102 	ldw acc16,x 
      000715 AE 16 90         [ 2]  103 	ldw x,#tib 
      000718 90 AE 06 DC      [ 2]  104 	ldw y,#row_erase 
      00071C CD 13 B2         [ 4]  105 	call move
      00071F 90 85            [ 2]  106 	popw y
      000721 85               [ 2]  107 	popw x
      000722 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000723                        123 program_row:
      000723 88               [ 1]  124 	push a 
      000724 90 89            [ 2]  125 	pushw y 
      000726 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000728 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00072C 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000730 90 5F            [ 1]  130 	clrw y 
      000732 F6               [ 1]  131 1$:	ld a,(x)
      000733 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000737 5C               [ 1]  133 	incw x 
      000738 90 5C            [ 1]  134 	incw y 
      00073A 0A 01            [ 1]  135 	dec (BCNT,sp)
      00073C 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00073E 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000743                        139 	_drop 1 
      000743 5B 01            [ 2]    1     addw sp,#1 
      000745 90 85            [ 2]  140 	popw y 
      000747 84               [ 1]  141 	pop a 
      000748 81               [ 4]  142 	ret 
      000749                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000749                        149 move_prg_to_ram:
      000749 89               [ 2]  150 	pushw x 
      00074A 90 89            [ 2]  151 	pushw y 
      00074C AE 07 49         [ 2]  152 	ldw x,#program_row_end 
      00074F 1D 07 23         [ 2]  153 	subw x,#program_row 
      000752 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      000755 AE 16 90         [ 2]  155 	ldw x,#tib ; destination address 
      000758 90 AE 07 23      [ 2]  156 	ldw y,#program_row ; source address 
      00075C CD 13 B2         [ 4]  157 	call move
      00075F 90 85            [ 2]  158 	popw y 
      000761 85               [ 2]  159 	popw x  
      000762 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000763                        169 write_buffer:
      000763 89               [ 2]  170 	pushw x 
      000764 72 5D 00 18      [ 1]  171 	tnz farptr 
      000768 26 0D            [ 1]  172 	jrne to_flash 
      00076A CE 00 19         [ 2]  173 	ldw x,farptr+1 
      00076D A3 36 00         [ 2]  174 	cpw x,#app_space  
      000770 24 05            [ 1]  175 	jruge to_flash 
      000772                        176 to_eeprom:
      000772 CD 06 A6         [ 4]  177 	call unlock_eeprom
      000775 20 03            [ 2]  178 	jra do_programming
      000777                        179 to_flash:
      000777 CD 06 C1         [ 4]  180 	call unlock_flash
      00077A                        181 do_programming:
      00077A 85               [ 2]  182 	popw x 
      00077B CD 16 90         [ 4]  183 	call tib
      00077E 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000782 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      000786 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      000787                        197 block_erase:
      000787 89               [ 2]  198 	pushw x 
      000788 C6 00 18         [ 1]  199 	ld a,farptr 
      00078B 26 14            [ 1]  200 	jrne erase_flash
      00078D CE 00 19         [ 2]  201 	ldw x,farptr+1
      000790 A3 36 00         [ 2]  202 	cpw x,#app_space 
      000793 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000795 CD 06 A6         [ 4]  205 	call unlock_eeprom 
      000798 CD 16 90         [ 4]  206 	call tib 
      00079B 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      00079F 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0007A1                        210 erase_flash:
      0007A1 CD 06 C1         [ 4]  211 	call unlock_flash 
      0007A4 CD 16 90         [ 4]  212 	call tib 
      0007A7 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007AB                        214 erase_exit: 
      0007AB 85               [ 2]  215 	popw x 
      0007AC 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0007AD                        232 write_byte:
      0007AD 90 89            [ 2]  233 	pushw y
      0007AF                        234 	_vars VSIZE
      0007AF 52 02            [ 2]    1     sub sp,#VSIZE 
      0007B1 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0007B3 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0007B5 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0007B9 72 5D 00 18      [ 1]  240 	tnz farptr 
      0007BD 26 14            [ 1]  241 	jrne write_flash
      0007BF 90 A3 36 00      [ 2]  242     cpw y,#app_space 	 
      0007C3 24 0E            [ 1]  243     jruge write_flash
      0007C5 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0007C9 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0007CB 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0007CF 22 51            [ 1]  247 	jrugt write_exit
      0007D1 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0007D3                        250 write_flash:
      0007D3 CD 06 C1         [ 4]  251 	call unlock_flash 
      0007D6 9B               [ 1]  252 1$:	sim 
      0007D7 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007D9 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0007DD 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007E2 9A               [ 1]  256     rim 
      0007E3 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007E7 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0007E9                        260 write_eeprom:
      0007E9 CD 06 A6         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0007EC 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0007F0 2B 08            [ 1]  264 	jrmi 1$
      0007F2 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0007F6 2A 02            [ 1]  266 	jrpl 1$
      0007F8 03 02            [ 1]  267 	cpl (OPT,sp)
      0007FA                        268 1$: 
      0007FA 0D 02            [ 1]  269     tnz (OPT,sp)
      0007FC 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      0007FE 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      000802 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000806                        274 2$: 
      000806 7B 01            [ 1]  275     ld a,(BTW,sp)
      000808 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      00080C 0D 02            [ 1]  277     tnz (OPT,sp)
      00080E 27 08            [ 1]  278     jreq 3$
      000810 5C               [ 1]  279     incw x
      000811 7B 01            [ 1]  280     ld a,(BTW,sp)
      000813 43               [ 1]  281     cpl a
      000814 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      000818 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00081D 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000822                        285 write_exit:
      000822                        286 	_drop VSIZE 
      000822 5B 02            [ 2]    1     addw sp,#VSIZE 
      000824 90 85            [ 2]  287 	popw y
      000826 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; the block must be erased before 
                                    293 ; using this routine.
                                    294 ; input:
                                    295 ;   Y        source address   
                                    296 ;   X        array index  destination  farptr[x]
                                    297 ;   BSIZE    block size bytes 
                                    298 ;   farptr   write address , byte* 
                                    299 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                    300 ;	X 		after last byte written 
                                    301 ;   Y 		after last byte read 
                                    302 ;  farptr   point after block
                                    303 ;---------------------------------------------
      000827                        304 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000827                        305 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    306 	; local var 
                           000001   307 	XSAVE=1 
                           000002   308 	VSIZE=2 
      000827                        309 write_block::
      000827 88               [ 1]  310 	push a 
      000828                        311 	_vars VSIZE
      000828 52 02            [ 2]    1     sub sp,#VSIZE 
      00082A 1F 01            [ 2]  312 	ldw (XSAVE,sp),x 
      00082C 1E 06            [ 2]  313 	ldw x,(BSIZE,sp) 
      00082E 27 13            [ 1]  314 	jreq 9$
      000830 1E 01            [ 2]  315 1$:	ldw x,(XSAVE,sp)
      000832 90 F6            [ 1]  316 	ld a,(y)
      000834 CD 07 AD         [ 4]  317 	call write_byte 
      000837 5C               [ 1]  318 	incw x 
      000838 90 5C            [ 1]  319 	incw y 
      00083A 1F 01            [ 2]  320 	ldw (XSAVE,sp),x
      00083C 1E 06            [ 2]  321 	ldw x,(BSIZE,sp)
      00083E 5A               [ 2]  322 	decw x
      00083F 1F 06            [ 2]  323 	ldw (BSIZE,sp),x 
      000841 26 ED            [ 1]  324 	jrne 1$
      000843                        325 9$:
      000843 1E 01            [ 2]  326 	ldw x,(XSAVE,sp)
      000845 CD 08 7D         [ 4]  327 	call incr_farptr
      000848                        328 	_drop VSIZE
      000848 5B 02            [ 2]    1     addw sp,#VSIZE 
      00084A 84               [ 1]  329 	pop a 
      00084B 81               [ 4]  330 	ret 
                                    331 
                                    332 
                                    333 ;------------------------------------
                                    334 ; write n bytes to flash | eeprom 
                                    335 ; if the number of bytes is 
                                    336 ; >=128 it is faster to 
                                    337 ; use write_block
                                    338 ; the bytes are written one by 
                                    339 ; one and auto erased if required. 
                                    340 ; input:
                                    341 ;    farptr    dest address 
                                    342 ;    X         src address 
                                    343 ;    A         count 
                                    344 ; output:
                                    345 ;    none   
                                    346 ;----------------------------------
      00084C                        347 write_nbytes:
      00084C 90 89            [ 2]  348 	pushw y
      00084E 88               [ 1]  349 	push a 
      00084F 90 93            [ 1]  350 	ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      000851 5F               [ 1]  351 	clrw x 
      000852                        352 1$:  
      000852 90 F6            [ 1]  353 	ld a,(y)
      000854 90 5C            [ 1]  354 	incw y
      000856 CD 07 AD         [ 4]  355 	call write_byte 
      000859 5C               [ 1]  356 	incw x 
      00085A 0A 01            [ 1]  357 	dec (1,sp)  
      00085C 26 F4            [ 1]  358 	jrne 1$ 
      00085E 84               [ 1]  359 9$: pop a 
      00085F 90 85            [ 2]  360 	popw y 
      000861 81               [ 4]  361 	ret 
                                    362 
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 ;;;  flash memory operations
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 
                                    367 ;--------------------------
                                    368 ; align farptr to BLOCK_SIZE 
                                    369 ;---------------------------
      000862                        370 row_align:
      000862 A6 7F            [ 1]  371 	ld a,#0x7f 
      000864 C4 00 1A         [ 1]  372 	and a,farptr+2 
      000867 27 13            [ 1]  373 	jreq 1$ 
      000869 CE 00 19         [ 2]  374 	ldw x,farptr+1 
      00086C 1C 00 80         [ 2]  375 	addw x,#BLOCK_SIZE 
      00086F 24 04            [ 1]  376 	jrnc 0$
      000871 72 5C 00 18      [ 1]  377 	inc farptr 
      000875 9F               [ 1]  378 0$: ld a,xl 
      000876 A4 80            [ 1]  379 	and a,#0x80
      000878 97               [ 1]  380 	ld xl,a
      000879 CF 00 19         [ 2]  381 	ldw farptr+1,x  	
      00087C 81               [ 4]  382 1$:	ret
                                    383 
                                    384 ;--------------------
                                    385 ; input:
                                    386 ;   X     increment 
                                    387 ; output:
                                    388 ;   farptr  incremented 
                                    389 ;---------------------
      00087D                        390 incr_farptr:
      00087D 72 BB 00 19      [ 2]  391 	addw x,farptr+1 
      000881 24 04            [ 1]  392 	jrnc 1$
      000883 72 5C 00 18      [ 1]  393 	inc farptr 
      000887 CF 00 19         [ 2]  394 1$:	ldw farptr+1,x  
      00088A 81               [ 4]  395 	ret 
                                    396 
                                    397 ;-----------------------------------
                                    398 ; scan block for non zero byte 
                                    399 ; block are 128 bytes 
                                    400 ; input:
                                    401 ;    farptr     address block  
                                    402 ; output:
                                    403 ;     A     0 cleared, other not cleared  
                                    404 ;-----------------------------------
      00088B                        405 scan_block:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      00088B 5F               [ 1]  406 	clrw x 
      00088C 92 AF 00 18      [ 5]  407 1$: ldf a,([farptr],x) 
      000890 26 06            [ 1]  408 	jrne 2$
      000892 5C               [ 1]  409 	incw x 
      000893 A3 00 80         [ 2]  410 	cpw x,#BLOCK_SIZE 
      000896 25 F4            [ 1]  411 	jrult 1$ 
      000898 81               [ 4]  412 2$:	ret 
                                    413 
                                    414 
                                    415 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      000899                         66 Uart1RxHandler: ; console receive char 
      000899 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      00089E C6 52 31         [ 1]   68 	ld a,UART1_DR 
      0008A1 A1 03            [ 1]   69 	cp a,#CTRL_C 
      0008A3 26 06            [ 1]   70 	jrne 2$
      0008A5 CD 09 0B         [ 4]   71 	call putc 
      0008A8 CC 00 57         [ 2]   72 	jp user_interrupted
      0008AB                         73 2$:
      0008AB A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      0008AD 26 03            [ 1]   75 	jrne 3$
      0008AF CC 00 C3         [ 2]   76 	jp cold_start 	
      0008B2 88               [ 1]   77 3$:	push a 
      0008B3 A6 26            [ 1]   78 	ld a,#rx1_queue 
      0008B5 CB 00 2F         [ 1]   79 	add a,rx1_tail 
      0008B8 5F               [ 1]   80 	clrw x 
      0008B9 97               [ 1]   81 	ld xl,a 
      0008BA 84               [ 1]   82 	pop a 
      0008BB F7               [ 1]   83 	ld (x),a 
      0008BC C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      0008BF 4C               [ 1]   85 	inc a 
      0008C0 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0008C2 C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0008C5 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0008C6                         97 uart1_init:
      0008C6 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      0008CA 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      0008CE 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      0008D2 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008D6                        103 uart1_set_baud: 
      0008D6 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008D7 A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      0008D9 C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      0008DC 27 0A            [ 1]  109 	jreq 2$ 
      0008DE                        110 1$: ; 8 Mhz 	
      0008DE 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008E2 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      0008E6 20 08            [ 2]  113 	jra 3$
      0008E8                        114 2$: ; 16 Mhz 	
      0008E8 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008EC 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0008F0                        117 3$:
      0008F0 72 5F 52 31      [ 1]  118     clr UART1_DR
      0008F4 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008F8 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      0008FC 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      000901 72 5F 00 2E      [ 1]  122     clr rx1_head 
      000905 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      000909 84               [ 1]  124 	pop a  
      00090A 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      00090B                        133 putc:: ; console output always on UART1
      00090B                        134 uart1_putc:: 
      00090B 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      000910 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      000913 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      000914                        148 qgetc::
      000914                        149 uart1_qgetc::
      000914 C6 00 2E         [ 1]  150 	ld a,rx1_head 
      000917 C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      00091A 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      00091B                        161 getc:: ;console input
      00091B                        162 uart1_getc::
      00091B CD 09 14         [ 4]  163 	call uart1_qgetc
      00091E 27 FB            [ 1]  164 	jreq uart1_getc 
      000920 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      000921 A6 26            [ 1]  167 	ld a,#rx1_queue
      000923 CB 00 2E         [ 1]  168 	add a,rx1_head 
      000926 5F               [ 1]  169 	clrw x  
      000927 97               [ 1]  170 	ld xl,a 
      000928 F6               [ 1]  171 	ld a,(x)
      000929 88               [ 1]  172 	push a
      00092A C6 00 2E         [ 1]  173 	ld a,rx1_head 
      00092D 4C               [ 1]  174 	inc a 
      00092E A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000930 C7 00 2E         [ 1]  176 	ld rx1_head,a 
      000933 84               [ 1]  177 	pop a  
      000934 85               [ 2]  178 	popw x
      000935 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      000936 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000942                        207 get_escape:
      000942 CD 09 1B         [ 4]  208     call getc 
      000945 A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      000947 27 02            [ 1]  210     jreq 1$
      000949 4F               [ 1]  211     clr a
      00094A 81               [ 4]  212     ret
      00094B CD 09 1B         [ 4]  213 1$: call getc 
      00094E AE 09 36         [ 2]  214     ldw x,#convert_table
      000951                        215 2$:
      000951 F1               [ 1]  216     cp a,(x)
      000952 27 08            [ 1]  217     jreq 4$
      000954 1C 00 02         [ 2]  218     addw x,#2
      000957 7D               [ 1]  219     tnz (x)
      000958 26 F7            [ 1]  220     jrne 2$
      00095A 4F               [ 1]  221     clr a
      00095B 81               [ 4]  222     ret 
      00095C 5C               [ 1]  223 4$: incw x 
      00095D F6               [ 1]  224     ld a,(x)
      00095E A1 84            [ 1]  225     cp a,#SUP
      000960 26 05            [ 1]  226     jrne 5$
      000962 88               [ 1]  227     push a 
      000963 CD 09 1B         [ 4]  228     call getc
      000966 84               [ 1]  229     pop a 
      000967                        230 5$:
      000967 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      000968                        241 puts::
      000968 F6               [ 1]  242     ld a,(x)
      000969 27 06            [ 1]  243 	jreq 1$
      00096B CD 09 0B         [ 4]  244 	call putc 
      00096E 5C               [ 1]  245 	incw x 
      00096F 20 F7            [ 2]  246 	jra puts 
      000971 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000972                        258 bksp:
      000972 A6 08            [ 1]  259 	ld a,#BS 
      000974 CD 09 0B         [ 4]  260 	call putc 
      000977 A6 20            [ 1]  261 	ld a,#SPACE 
      000979 CD 09 0B         [ 4]  262 	call putc 
      00097C A6 08            [ 1]  263 	ld a,#BS 
      00097E CD 09 0B         [ 4]  264 	call putc 
      000981 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      000982                        274 delete_nchar:
      000982 88               [ 1]  275 	push a 
      000983 0D 01            [ 1]  276 0$:	tnz (1,sp)
      000985 27 07            [ 1]  277 	jreq 1$
      000987 CD 09 72         [ 4]  278 	call bksp 
      00098A 0A 01            [ 1]  279 	dec (1,sp)
      00098C 20 F5            [ 2]  280 	jra 0$
      00098E 84               [ 1]  281 1$:	pop a 
      00098F 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      000990                        290 send_escape:
      000990 A6 1B            [ 1]  291 	ld a,#ESC 
      000992 CD 09 0B         [ 4]  292 	call putc 
      000995 A6 5B            [ 1]  293 	ld a,#'[
      000997 CD 09 0B         [ 4]  294 	call putc 
      00099A 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      00099B                        311 send_parameter:
      00099B 89               [ 2]  312 	pushw x 
      00099C 5F               [ 1]  313 	clrw x 
      00099D 97               [ 1]  314 	ld xl,a 
      00099E A6 0A            [ 1]  315 	ld a,#10 
      0009A0 62               [ 2]  316 	div x,a 
      0009A1 95               [ 1]  317 	ld xh,a 
      0009A2 9F               [ 1]  318 	ld a,xl
      0009A3 4D               [ 1]  319     tnz a 
      0009A4 27 0B            [ 1]  320     jreq 2$
      0009A6 A1 09            [ 1]  321 	cp a,#9 
      0009A8 23 02            [ 2]  322 	jrule 1$
      0009AA A6 09            [ 1]  323 	ld a,#9
      0009AC                        324 1$:
      0009AC AB 30            [ 1]  325 	add a,#'0 
      0009AE CD 09 0B         [ 4]  326 	call putc
      0009B1 9E               [ 1]  327 2$:	ld a,xh 
      0009B2 AB 30            [ 1]  328 	add a,#'0
      0009B4 CD 09 0B         [ 4]  329 	call putc 
      0009B7 85               [ 2]  330 	popw x 
      0009B8 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      0009B9                        344 move_left:
      0009B9 88               [ 1]  345 	push a 
      0009BA CD 09 90         [ 4]  346 	call send_escape
      0009BD 84               [ 1]  347     pop a
      0009BE CD 09 9B         [ 4]  348 	call send_parameter 
      0009C1 A6 44            [ 1]  349 	ld a,#'D 
      0009C3 CD 09 0B         [ 4]  350 	call putc 
      0009C6 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0009C7                        362 move_right:
      0009C7 88               [ 1]  363 	push a 
      0009C8 CD 09 90         [ 4]  364 	call send_escape
      0009CB 84               [ 1]  365     pop a
      0009CC CD 09 9B         [ 4]  366 	call send_parameter 
      0009CF A6 43            [ 1]  367 	ld a,#'C 
      0009D1 CD 09 0B         [ 4]  368 	call putc 
      0009D4 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      0009D5                        379 spaces::
      0009D5 A6 20            [ 1]  380 	ld a,#SPACE 
      0009D7 5D               [ 2]  381 1$:	tnzw x
      0009D8 27 06            [ 1]  382 	jreq 9$
      0009DA CD 09 0B         [ 4]  383 	call putc 
      0009DD 5A               [ 2]  384 	decw x
      0009DE 20 F7            [ 2]  385 	jra 1$
      0009E0                        386 9$: 
      0009E0 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   tib     updated 
                                    399 ;   Y       updated  
                                    400 ;-------------------------
                           000001   401 	IPOS=1
                           000002   402 	KCHAR=2 
                           000003   403     LLEN=3 
                           000003   404 	VSIZE=3 
      0009E1                        405 insert_char: 
      0009E1                        406 	_vars VSIZE 
      0009E1 52 03            [ 2]    1     sub sp,#VSIZE 
      0009E3 6B 02            [ 1]  407     ld (KCHAR,sp),a 
      0009E5 9E               [ 1]  408     ld a,xh 
      0009E6 6B 01            [ 1]  409 	ld (IPOS,sp),a
      0009E8 9F               [ 1]  410     ld a,xl 
      0009E9 6B 03            [ 1]  411     ld (LLEN,sp),a  
      0009EB 93               [ 1]  412     ldw x,y
      0009EC 5C               [ 1]  413     incw x 
      0009ED 7B 03            [ 1]  414     ld a,(LLEN,sp)
      0009EF 10 01            [ 1]  415     sub a,(IPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0009F1 4C               [ 1]  416     inc a 
      0009F2 C7 00 0E         [ 1]  417     ld acc8,a 
      0009F5 72 5F 00 0D      [ 1]  418     clr acc16
      0009F9 CD 13 B2         [ 4]  419     call move
      0009FC 90 AE 16 90      [ 2]  420     ldw y,#tib 
      000A00 7B 01            [ 1]  421     ld a,(IPOS,sp)
      000A02 C7 00 0E         [ 1]  422     ld acc8,a 
      000A05 72 B9 00 0D      [ 2]  423     addw y,acc16 
      000A09 7B 02            [ 1]  424     ld a,(KCHAR,sp)
      000A0B 90 F7            [ 1]  425     ld (y),a
      000A0D 90 5C            [ 1]  426     incw y  
      000A0F 7B 01            [ 1]  427     ld a,(IPOS,sp)
      000A11 CD 09 B9         [ 4]  428     call move_left
      000A14 AE 16 90         [ 2]  429     ldw x,#tib 
      000A17 CD 09 68         [ 4]  430     call puts 
      000A1A 7B 03            [ 1]  431     ld a,(LLEN,sp)
      000A1C 10 01            [ 1]  432     sub a,(IPOS,sp) 
      000A1E CD 09 B9         [ 4]  433     call move_left 
      000A21                        434 	_drop VSIZE 
      000A21 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A23 81               [ 4]  435 	ret 
                                    436 
                                    437 
                                    438 ;--------------------------
                                    439 ; delete character under cursor
                                    440 ; input:
                                    441 ;   A       line length   
                                    442 ;   xl      delete position
                                    443 ;   Y       line pointer 
                                    444 ;-------------------------
                           000001   445 	CPOS=1
                           000002   446 	LLEN=2
                           000002   447 	VSIZE=2
      000A24                        448 delete_under:
      000A24                        449 	_vars VSIZE 
      000A24 52 02            [ 2]    1     sub sp,#VSIZE 
      000A26 6B 02            [ 1]  450     ld (LLEN,sp),a 
      000A28 9F               [ 1]  451     ld a,xl 
      000A29 6B 01            [ 1]  452     ld (CPOS,sp),a 
      000A2B 93               [ 1]  453     ldw x,y ; move destination
      000A2C 90 5C            [ 1]  454     incw y  ; move source 
      000A2E 7B 02            [ 1]  455     ld a,(LLEN,sp)
      000A30 10 01            [ 1]  456     sub a,(CPOS,sp)
      000A32 4C               [ 1]  457     inc a ; move including zero at end.
      000A33 C7 00 0E         [ 1]  458     ld acc8,a 
      000A36 72 5F 00 0D      [ 1]  459     clr acc16 
      000A3A CD 13 B2         [ 4]  460 	call move 
      000A3D 90 AE 16 90      [ 2]  461     ldw y,#tib 
      000A41 7B 01            [ 1]  462     ld a,(CPOS,sp)
      000A43 C7 00 0E         [ 1]  463     ld acc8,a 
      000A46 72 B9 00 0D      [ 2]  464     addw y,acc16 
      000A4A 93               [ 1]  465     ldw x,y 
      000A4B CD 09 68         [ 4]  466     call puts 
      000A4E A6 20            [ 1]  467     ld a,#SPACE  
      000A50 CD 09 0B         [ 4]  468     call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000A53 7B 02            [ 1]  469     ld a,(LLEN,sp)
      000A55 10 01            [ 1]  470     sub a,(CPOS,sp)
      000A57 CD 09 B9         [ 4]  471     call move_left 
      000A5A 0A 02            [ 1]  472     dec (LLEN,sp)
      000A5C                        473 	_drop VSIZE 
      000A5C 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A5E 81               [ 4]  474 	ret 
                                    475 
                                    476 ;-----------------------------
                                    477 ; send ANSI sequence to delete
                                    478 ; whole line. Cursor position
                                    479 ; is not updated.
                                    480 ; ANSI: ESC[2K
                                    481 ; input:
                                    482 ;   none
                                    483 ; output:
                                    484 ;   none 
                                    485 ;-----------------------------
      000A5F                        486 delete_line:
      000A5F CD 09 90         [ 4]  487     call send_escape
      000A62 A6 32            [ 1]  488 	ld a,#'2
      000A64 CD 09 0B         [ 4]  489 	call putc 
      000A67 A6 4B            [ 1]  490 	ld a,#'K 
      000A69 CD 09 0B         [ 4]  491 	call putc 
      000A6C 81               [ 4]  492 	ret 
                                    493 
                                    494 
                                    495 
                                    496 ;------------------------------------
                                    497 ; read a line of text from terminal
                                    498 ;  control keys: 
                                    499 ;    BS   efface caractère à gauche 
                                    500 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    501 ;    CTRL_R  edit previous line.
                                    502 ;    CTRL_D  delete line  
                                    503 ;    HOME  go to start of line  
                                    504 ;    KEY_END  go to end of line 
                                    505 ;    ARROW_LEFT  move cursor left 
                                    506 ;    ARROW_RIGHT  move cursor right 
                                    507 ;    CTRL_O  toggle between insert/overwrite
                                    508 ; input:
                                    509 ;	none
                                    510 ; local variable on stack:
                                    511 ;	LL  line length
                                    512 ;   RXCHAR last received character 
                                    513 ; output:
                                    514 ;   text in tib  buffer
                                    515 ;   count  line length 
                                    516 ;------------------------------------
                                    517 	; local variables
                           000001   518 	LL_HB=1  ; line length high byte 
                           000001   519 	RXCHAR = 1 ; last char received
                           000002   520 	LL = 2  ; accepted line length
                           000003   521 	CPOS=3  ; cursor position 
                           000004   522 	OVRWR=4 ; overwrite flag 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                           000004   523 	VSIZE=4 
      000A6D                        524 readln::
      000A6D 90 89            [ 2]  525 	pushw y 
      000A6F                        526 	_vars VSIZE 
      000A6F 52 04            [ 2]    1     sub sp,#VSIZE 
      000A71 5F               [ 1]  527 	clrw x 
      000A72 1F 02            [ 2]  528 	ldw (LL,sp),x 
      000A74 1F 03            [ 2]  529 	ldw (CPOS,sp),x 
      000A76 03 04            [ 1]  530 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A78 90 AE 16 90      [ 2]  531  	ldw y,#tib ; terminal input buffer
      000A7C                        532 readln_loop:
      000A7C CD 09 1B         [ 4]  533 	call getc
      000A7F 6B 01            [ 1]  534 	ld (RXCHAR,sp),a
      000A81 A1 1B            [ 1]  535     cp a,#ESC 
      000A83 26 05            [ 1]  536     jrne 0$
      000A85 CD 09 42         [ 4]  537     call get_escape 
      000A88 6B 01            [ 1]  538     ld (RXCHAR,sp),a 
      000A8A A1 0D            [ 1]  539 0$:	cp a,#CR
      000A8C 26 03            [ 1]  540 	jrne 1$
      000A8E CC 0C 09         [ 2]  541 	jp readln_quit
      000A91 A1 0A            [ 1]  542 1$:	cp a,#LF 
      000A93 26 03            [ 1]  543 	jrne 2$ 
      000A95 CC 0C 09         [ 2]  544 	jp readln_quit
      000A98                        545 2$:
      000A98 A1 08            [ 1]  546 	cp a,#BS
      000A9A 26 12            [ 1]  547 	jrne 3$
                                    548 ; delete left 
      000A9C 0D 03            [ 1]  549     tnz (CPOS,sp)
      000A9E 27 DC            [ 1]  550     jreq readln_loop 
      000AA0 A6 01            [ 1]  551     ld a,#1 
      000AA2 CD 09 B9         [ 4]  552     call move_left
      000AA5 0A 03            [ 1]  553     dec (CPOS,sp)
      000AA7 90 5A            [ 2]  554     decw y 
      000AA9 7B 03            [ 1]  555     ld a,(CPOS,sp) 
      000AAB CC 0B B5         [ 2]  556     jp 12$
      000AAE                        557 3$:
      000AAE A1 04            [ 1]  558 	cp a,#CTRL_D
      000AB0 26 1A            [ 1]  559 	jrne 4$
                                    560 ;delete line 
      000AB2 CD 0A 5F         [ 4]  561 	call delete_line 
      000AB5 7B 03            [ 1]  562     ld a,(CPOS,sp)
      000AB7 4C               [ 1]  563     inc a 
      000AB8 CD 09 B9         [ 4]  564     call move_left 
      000ABB A6 3E            [ 1]  565 	ld a,#'> 
      000ABD CD 09 0B         [ 4]  566 	call putc 
      000AC0 90 AE 16 90      [ 2]  567 	ldw y,#tib
      000AC4 90 7F            [ 1]  568 	clr (y)
      000AC6 0F 02            [ 1]  569 	clr (LL,sp)
      000AC8 0F 03            [ 1]  570 	clr (CPOS,sp)
      000ACA 20 B0            [ 2]  571 	jra readln_loop
      000ACC                        572 4$:
      000ACC A1 12            [ 1]  573 	cp a,#CTRL_R 
      000ACE 26 1E            [ 1]  574 	jrne 5$
                                    575 ;repeat line 
      000AD0 0D 02            [ 1]  576 	tnz (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000AD2 26 A8            [ 1]  577 	jrne readln_loop
      000AD4 90 AE 16 90      [ 2]  578 	ldw y,#tib 
      000AD8 93               [ 1]  579 	ldw x,y
      000AD9 CD 13 86         [ 4]  580 	call strlen
      000ADC 4D               [ 1]  581 	tnz a  
      000ADD 27 9D            [ 1]  582 	jreq readln_loop
      000ADF 6B 02            [ 1]  583 	ld (LL,sp),a 
      000AE1 6B 03            [ 1]  584     ld (CPOS,sp),a
      000AE3 93               [ 1]  585 	ldw x,y  
      000AE4 CD 09 68         [ 4]  586 	call puts
      000AE7 0F 01            [ 1]  587 	clr (LL_HB,sp)
      000AE9 72 F9 01         [ 2]  588 	addw y,(LL_HB,sp)
      000AEC 20 8E            [ 2]  589 	jra readln_loop 
      000AEE                        590 5$:
      000AEE A1 05            [ 1]  591 	cp a,#CTRL_E 
      000AF0 26 41            [ 1]  592 	jrne 6$
                                    593 ;edit line number 
      000AF2 AE 16 90         [ 2]  594 	ldw x,#tib 
      000AF5 CD 18 B4         [ 4]  595 	call atoi24
      000AF8 CE 00 0D         [ 2]  596 	ldw x,acc16
      000AFB CD 0C 45         [ 4]  597 	call search_lineno
      000AFE 5D               [ 2]  598 	tnzw x 
      000AFF 26 03            [ 1]  599 	jrne 51$
                                    600 ;	clr (LL,sp)
                                    601 ;	ldw y,#tib
                                    602 ;   clr (y) 	
      000B01 CC 0C 09         [ 2]  603 	jp readln_quit  
      000B04                        604 51$:
      000B04 CF 00 04         [ 2]  605 	ldw basicptr,x
      000B07 E6 02            [ 1]  606 	ld a,(2,x)
      000B09 C7 00 03         [ 1]  607 	ld count,a 
      000B0C 90 AE 16 90      [ 2]  608 	ldw y,#tib 
      000B10 CD 11 A2         [ 4]  609 	call decompile 
      000B13 0F 01            [ 1]  610 	clr (LL_HB,sp)
      000B15 A6 0D            [ 1]  611 	ld a,#CR 
      000B17 CD 09 0B         [ 4]  612 	call putc 
      000B1A A6 3E            [ 1]  613 	ld a,#'>
      000B1C CD 09 0B         [ 4]  614 	call putc
      000B1F AE 16 90         [ 2]  615     ldw x,#tib  
      000B22 CD 13 86         [ 4]  616 	call strlen 
      000B25 6B 02            [ 1]  617 	ld (LL,sp),a 
      000B27 CD 09 68         [ 4]  618 	call puts 
      000B2A 90 93            [ 1]  619 	ldw y,x
      000B2C 7B 02            [ 1]  620     ld a,(LL,sp)
      000B2E 6B 03            [ 1]  621     ld (CPOS,sp),a  
      000B30 CC 0A 7C         [ 2]  622 	jp readln_loop
      000B33                        623 6$:
      000B33 A1 81            [ 1]  624 	cp a,#ARROW_RIGHT
      000B35 26 15            [ 1]  625    	jrne 7$ 
                                    626 ; right arrow
      000B37 7B 03            [ 1]  627 	ld a,(CPOS,sp)
      000B39 11 02            [ 1]  628     cp a,(LL,sp)
      000B3B 2B 03            [ 1]  629     jrmi 61$
      000B3D CC 0A 7C         [ 2]  630     jp readln_loop 
      000B40                        631 61$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000B40 A6 01            [ 1]  632     ld a,#1 
      000B42 CD 09 C7         [ 4]  633 	call move_right 
      000B45 0C 03            [ 1]  634 	inc (CPOS,sp)
      000B47 90 5C            [ 1]  635     incw y 
      000B49 CC 0A 7C         [ 2]  636     jp readln_loop 
      000B4C A1 80            [ 1]  637 7$: cp a,#ARROW_LEFT  
      000B4E 26 13            [ 1]  638 	jrne 8$
                                    639 ; left arrow 
      000B50 0D 03            [ 1]  640 	tnz (CPOS,sp)
      000B52 26 03            [ 1]  641 	jrne 71$
      000B54 CC 0A 7C         [ 2]  642 	jp readln_loop
      000B57                        643 71$:
      000B57 A6 01            [ 1]  644     ld a,#1 
      000B59 CD 09 B9         [ 4]  645 	call move_left 
      000B5C 0A 03            [ 1]  646 	dec (CPOS,sp)
      000B5E 90 5A            [ 2]  647     decw y 
      000B60 CC 0A 7C         [ 2]  648 	jp readln_loop 
      000B63 A1 82            [ 1]  649 8$: cp a,#HOME  
      000B65 26 0E            [ 1]  650 	jrne 9$
                                    651 ; HOME 
      000B67 7B 03            [ 1]  652     ld a,(CPOS,sp)
      000B69 CD 09 B9         [ 4]  653     call move_left 
      000B6C 0F 03            [ 1]  654 	clr (CPOS,sp)
      000B6E 90 AE 16 90      [ 2]  655     ldw y,#tib 
      000B72 CC 0A 7C         [ 2]  656 	jp readln_loop  
      000B75 A1 83            [ 1]  657 9$: cp a,#KEY_END  
      000B77 26 26            [ 1]  658 	jrne 10$
                                    659 ; KEY_END 
      000B79 7B 03            [ 1]  660 	ld a,(CPOS,sp)
      000B7B 11 02            [ 1]  661 	cp a,(LL,sp)
      000B7D 26 03            [ 1]  662 	jrne 91$
      000B7F CC 0A 7C         [ 2]  663 	jp readln_loop 
      000B82                        664 91$:
      000B82 7B 02            [ 1]  665 	ld a,(LL,sp)
      000B84 10 03            [ 1]  666 	sub a,(CPOS,sp)
      000B86 CD 09 C7         [ 4]  667 	call move_right 
      000B89 7B 02            [ 1]  668 	ld a,(LL,sp)
      000B8B 6B 03            [ 1]  669 	ld (CPOS,sp),a
      000B8D 90 AE 16 90      [ 2]  670     ldw y,#tib
      000B91 72 5F 00 0D      [ 1]  671     clr acc16 
      000B95 C7 00 0E         [ 1]  672     ld acc8,a 
      000B98 72 B9 00 0D      [ 2]  673     addw y,acc16  
      000B9C CC 0A 7C         [ 2]  674 	jp readln_loop 
      000B9F A1 0F            [ 1]  675 10$: cp a,#CTRL_O
      000BA1 26 08            [ 1]  676 	jrne 11$ 
                                    677 ; toggle between insert/overwrite
      000BA3 03 04            [ 1]  678 	cpl (OVRWR,sp)
      000BA5 CD 25 D3         [ 4]  679 	call beep_1khz
      000BA8 CC 0A 7C         [ 2]  680 	jp readln_loop 
      000BAB A1 84            [ 1]  681 11$: cp a,#SUP 
      000BAD 26 11            [ 1]  682     jrne final_test 
                                    683 ; del character under cursor 
      000BAF 7B 03            [ 1]  684     ld a,(CPOS,sp)
      000BB1 11 02            [ 1]  685     cp a,(LL,sp)
      000BB3 2A 08            [ 1]  686     jrpl 13$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      000BB5                        687 12$:
      000BB5 97               [ 1]  688     ld xl,a    ; cursor position 
      000BB6 7B 02            [ 1]  689     ld a,(LL,sp)  ; line length
      000BB8 CD 0A 24         [ 4]  690     call delete_under
      000BBB 0A 02            [ 1]  691     dec (LLEN,sp)
      000BBD                        692 13$:
      000BBD CC 0A 7C         [ 2]  693     jp readln_loop 
      000BC0                        694 final_test:
      000BC0 A1 20            [ 1]  695 	cp a,#SPACE
      000BC2 2A 03            [ 1]  696 	jrpl accept_char
      000BC4 CC 0A 7C         [ 2]  697 	jp readln_loop
      000BC7                        698 accept_char:
      000BC7 A6 4F            [ 1]  699 	ld a,#TIB_SIZE-1
      000BC9 11 02            [ 1]  700 	cp a, (LL,sp)
      000BCB 2A 03            [ 1]  701 	jrpl 1$
      000BCD CC 0A 7C         [ 2]  702 	jp readln_loop
      000BD0 0D 04            [ 1]  703 1$:	tnz (OVRWR,sp)
      000BD2 26 18            [ 1]  704 	jrne overwrite
                                    705 ; insert mode 
      000BD4 7B 03            [ 1]  706     ld a,(CPOS,sp)
      000BD6 11 02            [ 1]  707     cp a,(LL,sp)
      000BD8 27 12            [ 1]  708     jreq overwrite
      000BDA 7B 02            [ 1]  709     ld a,(LL,sp)
      000BDC 97               [ 1]  710     ld xl,a 
      000BDD 7B 03            [ 1]  711     ld a,(CPOS,sp)
      000BDF 95               [ 1]  712     ld xh,a
      000BE0 7B 01            [ 1]  713     ld a,(RXCHAR,sp)
      000BE2 CD 09 E1         [ 4]  714     call insert_char
      000BE5 0C 02            [ 1]  715     inc (LLEN,sp)
      000BE7 0C 03            [ 1]  716     inc (CPOS,sp)	
      000BE9 CC 0A 7C         [ 2]  717     jp readln_loop 
      000BEC                        718 overwrite:
      000BEC 7B 01            [ 1]  719 	ld a,(RXCHAR,sp)
      000BEE 90 F7            [ 1]  720 	ld (y),a
      000BF0 90 5C            [ 1]  721     incw y
      000BF2 CD 09 0B         [ 4]  722     call putc 
      000BF5 7B 03            [ 1]  723 	ld a,(CPOS,sp)
      000BF7 11 02            [ 1]  724 	cp a,(LL,sp)
      000BF9 2B 09            [ 1]  725 	jrmi 1$
      000BFB 90 7F            [ 1]  726 	clr (y)
      000BFD 0C 02            [ 1]  727 	inc (LL,sp)
      000BFF 0C 03            [ 1]  728     inc (CPOS,sp)
      000C01 CC 0A 7C         [ 2]  729 	jp readln_loop 
      000C04                        730 1$:	
      000C04 0C 03            [ 1]  731 	inc (CPOS,sp)
      000C06 CC 0A 7C         [ 2]  732 	jp readln_loop 
      000C09                        733 readln_quit:
      000C09 90 AE 16 90      [ 2]  734 	ldw y,#tib
      000C0D 0F 01            [ 1]  735     clr (LL_HB,sp) 
      000C0F 72 F9 01         [ 2]  736     addw y,(LL_HB,sp)
      000C12 90 7F            [ 1]  737     clr (y)
      000C14 7B 02            [ 1]  738 	ld a,(LL,sp)
      000C16 C7 00 03         [ 1]  739 	ld count,a 
      000C19 A6 0D            [ 1]  740 	ld a,#CR
      000C1B CD 09 0B         [ 4]  741 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000C1E                        742 	_drop VSIZE 
      000C1E 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C20 90 85            [ 2]  743 	popw y 
      000C22 81               [ 4]  744 	ret
                                    745 
                                    746 ;------------------------------
                                    747 ; print byte  in hexadecimal 
                                    748 ; on console
                                    749 ; input:
                                    750 ;    A		byte to print
                                    751 ;------------------------------
      000C23                        752 print_hex::
      000C23 88               [ 1]  753 	push a 
      000C24 4E               [ 1]  754 	swap a 
      000C25 CD 0C 3A         [ 4]  755 	call to_hex_char 
      000C28 CD 09 0B         [ 4]  756 	call putc 
      000C2B 7B 01            [ 1]  757     ld a,(1,sp) 
      000C2D CD 0C 3A         [ 4]  758 	call to_hex_char
      000C30 CD 09 0B         [ 4]  759 	call putc
      000C33 A6 20            [ 1]  760 	ld a,#SPACE 
      000C35 CD 09 0B         [ 4]  761 	call putc 
      000C38 84               [ 1]  762 	pop a 
      000C39 81               [ 4]  763 	ret 
                                    764 
                                    765 ;----------------------------------
                                    766 ; convert to hexadecimal digit 
                                    767 ; input:
                                    768 ;   A       digit to convert 
                                    769 ; output:
                                    770 ;   A       hexdecimal character 
                                    771 ;----------------------------------
      000C3A                        772 to_hex_char::
      000C3A A4 0F            [ 1]  773 	and a,#15 
      000C3C A1 09            [ 1]  774 	cp a,#9 
      000C3E 23 02            [ 2]  775 	jrule 1$ 
      000C40 AB 07            [ 1]  776 	add a,#7
      000C42 AB 30            [ 1]  777 1$: add a,#'0 
      000C44 81               [ 4]  778 	ret 
                                    779 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C45                         51 search_lineno::
      000C45                         52 	_vars VSIZE
      000C45 52 02            [ 2]    1     sub sp,#VSIZE 
      000C47 0F 01            [ 1]   53 	clr (LL,sp)
      000C49 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C4D 4D               [ 1]   55 	tnz a 
      000C4E 27 04            [ 1]   56 	jreq search_ln_loop
      000C50 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C54                         58 search_ln_loop:
      000C54 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C58 2A 10            [ 1]   60 	jrpl 8$
      000C5A 90 F3            [ 1]   61 	cpw x,(y)
      000C5C 27 0E            [ 1]   62 	jreq 9$
      000C5E 2B 0A            [ 1]   63 	jrmi 8$ 
      000C60 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C63 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C65 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C68 20 EA            [ 2]   67 	jra search_ln_loop 
      000C6A                         68 8$: 
      000C6A 5F               [ 1]   69 	clrw x 	
      000C6B 51               [ 1]   70 	exgw x,y 
      000C6C                         71 9$: _drop VSIZE
      000C6C 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C6E 51               [ 1]   72 	exgw x,y   
      000C6F 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C70                         83 del_line: 
      000C70                         84 	_vars VSIZE 
      000C70 52 04            [ 2]    1     sub sp,#VSIZE 
      000C72 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C74 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C76 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C78 90 93            [ 1]   88 	ldw y,x  
      000C7A 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C7D 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C7F 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000C83 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C86 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C8A 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C8C CD 13 B2         [ 4]   95 	call move
      000C8F 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000C93 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C96 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000C9A                         99 	_drop VSIZE     
      000C9A 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C9C 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000C9D                        115 create_gap:
      000C9D                        116 	_vars VSIZE
      000C9D 52 06            [ 2]    1     sub sp,#VSIZE 
      000C9F 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000CA1 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000CA3 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000CA7 90 93            [ 1]  120 	ldw y,x ; SRC
      000CA9 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000CAD 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000CAF CE 00 1D         [ 2]  124 	ldw x,txtend 
      000CB2 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000CB5 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000CB8 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000CBA CD 13 B2         [ 4]  128 	call move
      000CBD CE 00 1D         [ 2]  129 	ldw x,txtend
      000CC0 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000CC3 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      000CC6                        132 9$:	_drop VSIZE 
      000CC6 5B 06            [ 2]    1     addw sp,#VSIZE 
      000CC8 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000CC9                        150 insert_line:
      000CC9                        151 	_vars VSIZE 
      000CC9 52 08            [ 2]    1     sub sp,#VSIZE 
      000CCB CE 00 1D         [ 2]  152 	ldw x,txtend  
      000CCE C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000CD1 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000CD3 AE 00 02         [ 2]  156 	ldw x,#2 
      000CD6 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000CDA A1 03            [ 1]  158 	cp a,#3
      000CDC 27 5A            [ 1]  159 	jreq insert_ln_exit
      000CDE 5F               [ 1]  160 	clrw x 
      000CDF 97               [ 1]  161 	ld xl,a
      000CE0 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000CE2 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000CE5 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000CE7 CE 00 1D         [ 2]  165 	ldw x,txtend 
      000CEA 20 38            [ 2]  166 	jra 4$
      000CEC 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000CF0 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000CF2 AE 00 02         [ 2]  170 	ldw x,#2 
      000CF5 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000CF9 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000CFA 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000CFC 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000CFE 4F               [ 1]  177 	clr a 
      000CFF CD 0C 45         [ 4]  178 	call search_lineno 
      000D02 5D               [ 2]  179 	tnzw x 
      000D03 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000D05 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000D07 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000D09 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000D0B CD 0C 70         [ 4]  188 	call del_line
      000D0E                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000D0E A6 03            [ 1]  192 	ld a,#3
      000D10 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000D12 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000D14 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000D16 C3 00 1D         [ 2]  198 	cpw x,txtend 
      000D19 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000D1B 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000D1D 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000D1F CD 0C 9D         [ 4]  204 	call create_gap
      000D22 20 06            [ 2]  205 	jra 5$
      000D24                        206 4$: 
      000D24 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000D27 CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000D2A 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000D2C CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D2F 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      000D33 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D35 CD 13 B2         [ 4]  214 	call move 
      000D38                        215 insert_ln_exit:	
      000D38                        216 	_drop VSIZE
      000D38 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D3A 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D3B                        233 parse_quote: 
      000D3B                        234 	_vars VSIZE 
      000D3B 52 02            [ 2]    1     sub sp,#VSIZE 
      000D3D 4F               [ 1]  235 	clr a
      000D3E 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D40                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      000D40 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D43 27 24            [ 1]  239 	jreq 6$
      000D45 72 5C 00 01      [ 1]  240 	inc in 
      000D49 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D4B A6 5C            [ 1]  242 	ld a,#'\
      000D4D 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D4F 26 0A            [ 1]  244 	jrne 3$
      000D51 0F 01            [ 1]  245 	clr (PREV,sp)
      000D53 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D55 AD 1C            [ 4]  247 	callr convert_escape
      000D57 F7               [ 1]  248 	ld (x),a 
      000D58 5C               [ 1]  249 	incw x 
      000D59 20 E5            [ 2]  250 	jra 2$
      000D5B                        251 3$:
      000D5B 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000D5D A1 5C            [ 1]  253 	cp a,#'\'
      000D5F 27 DD            [ 1]  254 	jreq 1$
      000D61 A1 22            [ 1]  255 	cp a,#'"
      000D63 27 04            [ 1]  256 	jreq 6$ 
      000D65 F7               [ 1]  257 	ld (x),a 
      000D66 5C               [ 1]  258 	incw x 
      000D67 20 D7            [ 2]  259 	jra 2$
      000D69                        260 6$:
      000D69 7F               [ 1]  261 	clr (x)
      000D6A 5C               [ 1]  262 	incw x 
      000D6B 90 93            [ 1]  263 	ldw y,x 
      000D6D 5F               [ 1]  264 	clrw x 
      000D6E A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000D70                        266 	_drop VSIZE
      000D70 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D72 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000D73                        278 convert_escape:
      000D73 89               [ 2]  279 	pushw x 
      000D74 AE 0D 88         [ 2]  280 	ldw x,#escaped 
      000D77 F1               [ 1]  281 1$:	cp a,(x)
      000D78 27 06            [ 1]  282 	jreq 2$
      000D7A 7D               [ 1]  283 	tnz (x)
      000D7B 27 09            [ 1]  284 	jreq 3$
      000D7D 5C               [ 1]  285 	incw x 
      000D7E 20 F7            [ 2]  286 	jra 1$
      000D80 1D 0D 88         [ 2]  287 2$: subw x,#escaped 
      000D83 9F               [ 1]  288 	ld a,xl 
      000D84 AB 07            [ 1]  289 	add a,#7
      000D86 85               [ 2]  290 3$:	popw x 
      000D87 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    292 
      000D88 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000D90                        310 parse_integer: ; { -- n }
      000D90 89               [ 2]  311 	pushw x 	
      000D91 4B 00            [ 1]  312 	push #0 ; TCHAR
      000D93 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000D95 A1 24            [ 1]  314 	cp a,#'$
      000D97 26 04            [ 1]  315 	jrne 2$ 
      000D99                        316     _drop #1
      000D99 5B 01            [ 2]    1     addw sp,##1 
      000D9B 4B 10            [ 1]  317 	push #16  ; BASE=16
      000D9D F7               [ 1]  318 2$:	ld (x),a 
      000D9E 5C               [ 1]  319 	incw x 
      000D9F 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000DA2 72 5C 00 01      [ 1]  321 	inc in 
      000DA6 CD 18 A8         [ 4]  322 	call to_upper 
      000DA9 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000DAB CD 0E 2D         [ 4]  324 	call is_digit 
      000DAE 25 ED            [ 1]  325 	jrc 2$
      000DB0 A6 10            [ 1]  326 	ld a,#16 
      000DB2 11 01            [ 1]  327 	cp a,(BASE,sp)
      000DB4 26 0A            [ 1]  328 	jrne 3$ 
      000DB6 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000DB8 A1 41            [ 1]  330 	cp a,#'A 
      000DBA 2B 04            [ 1]  331 	jrmi 3$ 
      000DBC A1 47            [ 1]  332 	cp a,#'G 
      000DBE 2B DD            [ 1]  333 	jrmi 2$ 
      000DC0 72 5A 00 01      [ 1]  334 3$: dec in 	
      000DC4 7F               [ 1]  335     clr (x)
      000DC5 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000DC7 CD 18 B4         [ 4]  337 	call atoi24
      000DCA 16 03            [ 2]  338 	ldw y,(XSAVE,sp)
      000DCC C6 00 0C         [ 1]  339 	ld a,acc24 
      000DCF 90 F7            [ 1]  340 	ld (y),a 
      000DD1 90 5C            [ 1]  341 	incw y  
      000DD3 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000DD6 90 FF            [ 2]  343 	ldw (y),x 
      000DD8 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000DDC A6 84            [ 1]  345 	ld a,#TK_INTGR
      000DDE                        346 	_drop VSIZE  
      000DDE 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DE0 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000DE1                        364 parse_binary: ; { -- n }
      000DE1 4B 00            [ 1]  365 	push #0
      000DE3 4B 00            [ 1]  366 	push #0
      000DE5 4B 00            [ 1]  367 	push #0
      000DE7                        368 2$:	
      000DE7 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000DEA 72 5C 00 01      [ 1]  370 	inc in 
      000DEE A1 30            [ 1]  371 	cp a,#'0 
      000DF0 27 06            [ 1]  372 	jreq 3$
      000DF2 A1 31            [ 1]  373 	cp a,#'1 
      000DF4 27 02            [ 1]  374 	jreq 3$ 
      000DF6 20 0B            [ 2]  375 	jra bin_exit 
      000DF8 A0 30            [ 1]  376 3$: sub a,#'0 
      000DFA 46               [ 1]  377 	rrc a
      000DFB 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000DFD 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000DFF 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000E01 20 E4            [ 2]  381 	jra 2$  
      000E03                        382 bin_exit:
      000E03 72 5A 00 01      [ 1]  383 	dec in 
      000E07 90 93            [ 1]  384 	ldw y,x
      000E09 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000E0B 90 F7            [ 1]  386 	ld (y),a 
      000E0D 90 5C            [ 1]  387 	incw y 
      000E0F 1E 02            [ 2]  388 	ldw x,(BINARY+1,sp)
      000E11 90 FF            [ 2]  389 	ldw (y),x 
      000E13 72 A9 00 02      [ 2]  390 	addw y,#2  
      000E17 A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000E19                        392 	_drop VSIZE 
      000E19 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E1B 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000E1C                        402 is_alpha::
      000E1C A1 41            [ 1]  403 	cp a,#'A 
      000E1E 8C               [ 1]  404 	ccf 
      000E1F 24 0B            [ 1]  405 	jrnc 9$ 
      000E21 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000E23 25 07            [ 1]  407 	jrc 9$ 
      000E25 A1 61            [ 1]  408 	cp a,#'a 
      000E27 8C               [ 1]  409 	ccf 
      000E28 24 02            [ 1]  410 	jrnc 9$
      000E2A A1 7B            [ 1]  411 	cp a,#'z+1
      000E2C 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E2D                        421 is_digit::
      000E2D A1 30            [ 1]  422 	cp a,#'0
      000E2F 25 03            [ 1]  423 	jrc 1$
      000E31 A1 3A            [ 1]  424     cp a,#'9+1
      000E33 8C               [ 1]  425 	ccf 
      000E34 8C               [ 1]  426 1$:	ccf 
      000E35 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E36                        438 is_alnum::
      000E36 CD 0E 2D         [ 4]  439 	call is_digit
      000E39 25 03            [ 1]  440 	jrc 1$ 
      000E3B CD 0E 1C         [ 4]  441 	call is_alpha
      000E3E 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000E3F                        453 is_symbol_char: 
      000E3F A1 5F            [ 1]  454 	cp a,#'_ 
      000E41 26 03            [ 1]  455 	jrne 1$
      000E43 99               [ 1]  456 	scf 
      000E44 20 03            [ 2]  457 	jra 9$ 
      000E46 CD 0E 36         [ 4]  458 1$:	call is_alnum 
      000E49 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E4A                        473 parse_symbol:
      000E4A 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E4B                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E4B CD 18 A8         [ 4]  477 	call to_upper  
      000E4E F7               [ 1]  478 	ld (x), a 
      000E4F 5C               [ 1]  479 	incw x
      000E50 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E53 72 5C 00 01      [ 1]  481 	inc in 
      000E57 CD 0E 3F         [ 4]  482 	call is_symbol_char 
      000E5A 25 EF            [ 1]  483 	jrc symb_loop 
      000E5C 7F               [ 1]  484 	clr (x)
      000E5D 72 5A 00 01      [ 1]  485 	dec in  
      000E61 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000E62                        502 parse_keyword: 
      000E62 89               [ 2]  503 	pushw x ; preserve *symbol 
      000E63 CD 0E 4A         [ 4]  504 	call parse_symbol
      000E66 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000E68 E6 02            [ 1]  506 	ld a,(2,x)
      000E6A 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000E6C E6 01            [ 1]  509 	ld a,(1,x) 
      000E6E A0 41            [ 1]  510 	sub a,#'A 
      000E70 AE 00 03         [ 2]  511 	ldw x,#3 
      000E73 42               [ 4]  512 	mul x,a 
      000E74 1C 00 34         [ 2]  513 	addw x,#vars 
      000E77 A6 85            [ 1]  514 	ld a,#TK_VAR 
      000E79 20 36            [ 2]  515 	jra 4$ 
      000E7B                        516 2$: ; check for keyword, otherwise syntax error.
      000E7B                        517 	_ldx_dict kword_dict ; dictionary entry point
      000E7B AE 34 4F         [ 2]    1     ldw x,#kword_dict+2
      000E7E 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000E80 90 5C            [ 1]  519 	incw y 
      000E82 CD 19 35         [ 4]  520 	call search_dict
      000E85 4D               [ 1]  521 	tnz a
      000E86 26 29            [ 1]  522 	jrne 4$
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000E88 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000E8A A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000E8C 90 F7            [ 1]  527 	ld (y),a 
      000E8E 90 5C            [ 1]  528 	incw y
      000E90 93               [ 1]  529 	ldw x,y 
      000E91 CD 13 86         [ 4]  530 	call strlen
      000E94 A1 0F            [ 1]  531 	cp a,#NAME_MAX_LEN 
      000E96 23 02            [ 2]  532 	jrule 22$ 
      000E98 A6 0F            [ 1]  533 	ld a,#NAME_MAX_LEN 
      000E9A                        534 22$:	
      000E9A 88               [ 1]  535 	push a 
      000E9B                        536 24$:
      000E9B 90 F6            [ 1]  537     ld a,(y)
      000E9D 27 09            [ 1]  538 	jreq 3$
      000E9F 90 5C            [ 1]  539 	incw y
      000EA1 0A 01            [ 1]  540 	dec (1,sp) 
      000EA3 26 F6            [ 1]  541 	jrne 24$
      000EA5 4F               [ 1]  542 	clr a 
      000EA6 90 F7            [ 1]  543 	ld (y),a 
      000EA8 90 5C            [ 1]  544 3$: incw y 
      000EAA                        545 	_drop 1 
      000EAA 5B 01            [ 2]    1     addw sp,#1 
      000EAC A6 03            [ 1]  546 	ld a,#TK_LABEL 
      000EAE 5F               [ 1]  547 	clrw x 
      000EAF 20 1B            [ 2]  548 	jra 5$ 
      000EB1                        549 4$:	
      000EB1 16 01            [ 2]  550 	ldw y,(XFIRST,sp)
      000EB3 A1 87            [ 1]  551 	cp a,#TK_NOT 
      000EB5 2B 06            [ 1]  552 	jrmi 41$
      000EB7 90 F7            [ 1]  553 	ld (y),a 
      000EB9 90 5C            [ 1]  554 	incw y 
      000EBB 20 0F            [ 2]  555 	jra 5$ 
      000EBD                        556 41$:	
      000EBD A3 1C AE         [ 2]  557 	cpw x,#let  
      000EC0 27 0A            [ 1]  558 	jreq 5$  ; don't compile LET command 
      000EC2 90 F7            [ 1]  559 	ld (y),a 
      000EC4 90 5C            [ 1]  560 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000EC6 90 FF            [ 2]  561 	ldw (y),x
      000EC8 72 A9 00 02      [ 2]  562 	addw y,#2  
      000ECC                        563 5$:	_drop VSIZE 
      000ECC 5B 02            [ 2]    1     addw sp,#VSIZE 
      000ECE 81               [ 4]  564 	ret  	
                                    565 
                                    566 ;------------------------------------
                                    567 ; skip character c in text starting from 'in'
                                    568 ; input:
                                    569 ;	 y 		point to text buffer
                                    570 ;    a 		character to skip
                                    571 ; output:  
                                    572 ;	'in' ajusted to new position
                                    573 ;------------------------------------
                           000001   574 	C = 1 ; local var
      000ECF                        575 skip:
      000ECF 88               [ 1]  576 	push a
      000ED0 91 D6 00         [ 4]  577 1$:	ld a,([in.w],y)
      000ED3 27 0A            [ 1]  578 	jreq 2$
      000ED5 11 01            [ 1]  579 	cp a,(C,sp)
      000ED7 26 06            [ 1]  580 	jrne 2$
      000ED9 72 5C 00 01      [ 1]  581 	inc in
      000EDD 20 F1            [ 2]  582 	jra 1$
      000EDF                        583 2$: _drop 1 
      000EDF 5B 01            [ 2]    1     addw sp,#1 
      000EE1 81               [ 4]  584 	ret
                                    585 	
                                    586 
                                    587 ;------------------------------------
                                    588 ; scan text for next token
                                    589 ; input: 
                                    590 ;	X 		pointer to buffer where 
                                    591 ;	        token id and value are copied 
                                    592 ; use:
                                    593 ;	Y   pointer to text in tib 
                                    594 ; output:
                                    595 ;   A       token attribute 
                                    596 ;   X 		token value
                                    597 ;   Y       updated position in output buffer   
                                    598 ;------------------------------------
                                    599 	; use to check special character 
                                    600 	.macro _case c t  
                                    601 	ld a,#c 
                                    602 	cp a,(TCHAR,sp) 
                                    603 	jrne t
                                    604 	.endm 
                                    605 
                           000001   606 	TCHAR=1
                           000002   607 	ATTRIB=2
                           000002   608 	VSIZE=2
      000EE2                        609 get_token:: 
      000EE2                        610 	_vars VSIZE
      000EE2 52 02            [ 2]    1     sub sp,#VSIZE 
                                    611 ;	ld a,in 
                                    612 ;	sub a,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                    613 ;   jrmi 0$
                                    614 ;	clr a 
                                    615 ;	ret 
      000EE4                        616 0$: 
      000EE4 90 AE 16 90      [ 2]  617 	ldw y,#tib    	
      000EE8 A6 20            [ 1]  618 	ld a,#SPACE
      000EEA CD 0E CF         [ 4]  619 	call skip
      000EED 55 00 01 00 02   [ 1]  620 	mov in.saved,in 
      000EF2 91 D6 00         [ 4]  621 	ld a,([in.w],y)
      000EF5 26 05            [ 1]  622 	jrne 1$
      000EF7 90 93            [ 1]  623 	ldw y,x 
      000EF9 CC 10 93         [ 2]  624 	jp token_exit ; end of line 
      000EFC 72 5C 00 01      [ 1]  625 1$:	inc in 
      000F00 CD 18 A8         [ 4]  626 	call to_upper 
      000F03 6B 01            [ 1]  627 	ld (TCHAR,sp),a 
                                    628 ; check for quoted string
      000F05                        629 str_tst:  	
      000F05                        630 	_case '"' nbr_tst
      000F05 A6 22            [ 1]    1 	ld a,#'"' 
      000F07 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F09 26 0A            [ 1]    3 	jrne nbr_tst
      000F0B A6 02            [ 1]  631 	ld a,#TK_QSTR
      000F0D F7               [ 1]  632 	ld (x),a 
      000F0E 5C               [ 1]  633 	incw x 
      000F0F CD 0D 3B         [ 4]  634 	call parse_quote
      000F12 CC 10 93         [ 2]  635 	jp token_exit
      000F15                        636 nbr_tst:
                                    637 ; check for hexadecimal number 
      000F15 A6 24            [ 1]  638 	ld a,#'$'
      000F17 11 01            [ 1]  639 	cp a,(TCHAR,sp) 
      000F19 27 17            [ 1]  640 	jreq 1$
                                    641 ;check for binary number 
      000F1B A6 26            [ 1]  642 	ld a,#'&
      000F1D 11 01            [ 1]  643 	cp a,(TCHAR,sp)
      000F1F 26 0A            [ 1]  644 	jrne 0$
      000F21 A6 84            [ 1]  645 	ld a,#TK_INTGR
      000F23 F7               [ 1]  646 	ld (x),a 
      000F24 5C               [ 1]  647 	incw x 
      000F25 CD 0D E1         [ 4]  648 	call parse_binary ; expect binary integer 
      000F28 CC 10 93         [ 2]  649 	jp token_exit 
                                    650 ; check for decimal number 	
      000F2B 7B 01            [ 1]  651 0$:	ld a,(TCHAR,sp)
      000F2D CD 0E 2D         [ 4]  652 	call is_digit
      000F30 24 0C            [ 1]  653 	jrnc 3$
      000F32 A6 84            [ 1]  654 1$:	ld a,#TK_INTGR 
      000F34 F7               [ 1]  655 	ld (x),a 
      000F35 5C               [ 1]  656 	incw x 
      000F36 7B 01            [ 1]  657 	ld a,(TCHAR,sp)
      000F38 CD 0D 90         [ 4]  658 	call parse_integer 
      000F3B CC 10 93         [ 2]  659 	jp token_exit 
      000F3E                        660 3$: 
      000F3E                        661 	_case '(' bkslsh_tst 
      000F3E A6 28            [ 1]    1 	ld a,#'(' 
      000F40 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F42 26 05            [ 1]    3 	jrne bkslsh_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      000F44 A6 06            [ 1]  662 	ld a,#TK_LPAREN
      000F46 CC 10 8F         [ 2]  663 	jp token_char   	
      000F49                        664 bkslsh_tst: ; character token 
      000F49                        665 	_case '\',rparnt_tst
      000F49 A6 5C            [ 1]    1 	ld a,#'\' 
      000F4B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F4D 26 16            [ 1]    3 	jrne rparnt_tst
      000F4F A6 04            [ 1]  666 	ld a,#TK_CHAR 
      000F51 F7               [ 1]  667 	ld (x),a 
      000F52 5C               [ 1]  668 	incw x 
      000F53 91 D6 00         [ 4]  669 	ld a,([in.w],y)
      000F56 F7               [ 1]  670 	ld (x),a 
      000F57 5C               [ 1]  671 	incw x
      000F58 90 93            [ 1]  672 	ldw y,x 	 
      000F5A 72 5C 00 01      [ 1]  673 	inc in  
      000F5E 5F               [ 1]  674 	clrw x 
      000F5F 97               [ 1]  675 	ld xl,a 
      000F60 A6 04            [ 1]  676 	ld a,#TK_CHAR 
      000F62 CC 10 93         [ 2]  677 	jp token_exit 
      000F65                        678 rparnt_tst:		
      000F65                        679 	_case ')' colon_tst 
      000F65 A6 29            [ 1]    1 	ld a,#')' 
      000F67 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F69 26 05            [ 1]    3 	jrne colon_tst
      000F6B A6 07            [ 1]  680 	ld a,#TK_RPAREN 
      000F6D CC 10 8F         [ 2]  681 	jp token_char
      000F70                        682 colon_tst:
      000F70                        683 	_case ':' comma_tst 
      000F70 A6 3A            [ 1]    1 	ld a,#':' 
      000F72 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F74 26 05            [ 1]    3 	jrne comma_tst
      000F76 A6 0A            [ 1]  684 	ld a,#TK_COLON 
      000F78 CC 10 8F         [ 2]  685 	jp token_char  
      000F7B                        686 comma_tst:
      000F7B                        687 	_case COMMA sharp_tst 
      000F7B A6 2C            [ 1]    1 	ld a,#COMMA 
      000F7D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7F 26 05            [ 1]    3 	jrne sharp_tst
      000F81 A6 08            [ 1]  688 	ld a,#TK_COMMA
      000F83 CC 10 8F         [ 2]  689 	jp token_char
      000F86                        690 sharp_tst:
      000F86                        691 	_case SHARP dash_tst 
      000F86 A6 23            [ 1]    1 	ld a,#SHARP 
      000F88 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F8A 26 05            [ 1]    3 	jrne dash_tst
      000F8C A6 09            [ 1]  692 	ld a,#TK_SHARP
      000F8E CC 10 8F         [ 2]  693 	jp token_char  	 	 
      000F91                        694 dash_tst: 	
      000F91                        695 	_case '-' at_tst 
      000F91 A6 2D            [ 1]    1 	ld a,#'-' 
      000F93 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F95 26 05            [ 1]    3 	jrne at_tst
      000F97 A6 11            [ 1]  696 	ld a,#TK_MINUS  
      000F99 CC 10 8F         [ 2]  697 	jp token_char 
      000F9C                        698 at_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      000F9C                        699 	_case '@' qmark_tst 
      000F9C A6 40            [ 1]    1 	ld a,#'@' 
      000F9E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA0 26 05            [ 1]    3 	jrne qmark_tst
      000FA2 A6 05            [ 1]  700 	ld a,#TK_ARRAY 
      000FA4 CC 10 8F         [ 2]  701 	jp token_char
      000FA7                        702 qmark_tst:
      000FA7                        703 	_case '?' tick_tst 
      000FA7 A6 3F            [ 1]    1 	ld a,#'?' 
      000FA9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FAB 26 12            [ 1]    3 	jrne tick_tst
      000FAD A6 80            [ 1]  704 	ld a,#TK_CMD  
      000FAF F7               [ 1]  705 	ld (x),a 
      000FB0 5C               [ 1]  706 	incw x 
      000FB1 90 93            [ 1]  707 	ldw y,x 
      000FB3 AE 20 26         [ 2]  708 	ldw x,#print
      000FB6 90 FF            [ 2]  709 	ldw (y),x 
      000FB8 72 A9 00 02      [ 2]  710 	addw y,#2
      000FBC CC 10 93         [ 2]  711 	jp token_exit
      000FBF                        712 tick_tst: ; comment 
      000FBF                        713 	_case TICK plus_tst 
      000FBF A6 27            [ 1]    1 	ld a,#TICK 
      000FC1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC3 26 2B            [ 1]    3 	jrne plus_tst
      000FC5 A6 80            [ 1]  714 	ld a,#TK_CMD
      000FC7 F7               [ 1]  715 	ld (x),a 
      000FC8 5C               [ 1]  716 	incw x
      000FC9 90 AE 21 6E      [ 2]  717 	ldw y,#remark 
      000FCD FF               [ 2]  718 	ldw (x),y 
      000FCE 1C 00 02         [ 2]  719 	addw x,#2  
      000FD1                        720 copy_comment:
      000FD1 90 AE 16 90      [ 2]  721 	ldw y,#tib 
      000FD5 72 B9 00 00      [ 2]  722 	addw y,in.w
      000FD9 90 89            [ 2]  723 	pushw y 
      000FDB CD 13 A2         [ 4]  724 	call strcpy
      000FDE 72 F2 01         [ 2]  725 	subw y,(1,sp)
      000FE1 90 5C            [ 1]  726 	incw y ; strlen+1 
      000FE3 17 01            [ 2]  727 	ldw (1,sp),y 
      000FE5 72 FB 01         [ 2]  728 	addw x,(1,sp) 
      000FE8                        729 	_drop 2 
      000FE8 5B 02            [ 2]    1     addw sp,#2 
      000FEA 4F               [ 1]  730 	clr a 
      000FEB 90 93            [ 1]  731 	ldw y,x 
      000FED CC 10 93         [ 2]  732 	jp token_exit 
      000FF0                        733 plus_tst:
      000FF0                        734 	_case '+' star_tst 
      000FF0 A6 2B            [ 1]    1 	ld a,#'+' 
      000FF2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF4 26 05            [ 1]    3 	jrne star_tst
      000FF6 A6 10            [ 1]  735 	ld a,#TK_PLUS  
      000FF8 CC 10 8F         [ 2]  736 	jp token_char 
      000FFB                        737 star_tst:
      000FFB                        738 	_case '*' slash_tst 
      000FFB A6 2A            [ 1]    1 	ld a,#'*' 
      000FFD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      000FFF 26 05            [ 1]    3 	jrne slash_tst
      001001 A6 20            [ 1]  739 	ld a,#TK_MULT 
      001003 CC 10 8F         [ 2]  740 	jp token_char 
      001006                        741 slash_tst: 
      001006                        742 	_case '/' prcnt_tst 
      001006 A6 2F            [ 1]    1 	ld a,#'/' 
      001008 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00100A 26 05            [ 1]    3 	jrne prcnt_tst
      00100C A6 21            [ 1]  743 	ld a,#TK_DIV 
      00100E CC 10 8F         [ 2]  744 	jp token_char 
      001011                        745 prcnt_tst:
      001011                        746 	_case '%' eql_tst 
      001011 A6 25            [ 1]    1 	ld a,#'%' 
      001013 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001015 26 05            [ 1]    3 	jrne eql_tst
      001017 A6 22            [ 1]  747 	ld a,#TK_MOD
      001019 CC 10 8F         [ 2]  748 	jp token_char  
                                    749 ; 1 or 2 character tokens 	
      00101C                        750 eql_tst:
      00101C                        751 	_case '=' gt_tst 		
      00101C A6 3D            [ 1]    1 	ld a,#'=' 
      00101E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001020 26 05            [ 1]    3 	jrne gt_tst
      001022 A6 32            [ 1]  752 	ld a,#TK_EQUAL
      001024 CC 10 8F         [ 2]  753 	jp token_char 
      001027                        754 gt_tst:
      001027                        755 	_case '>' lt_tst 
      001027 A6 3E            [ 1]    1 	ld a,#'>' 
      001029 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00102B 26 23            [ 1]    3 	jrne lt_tst
      00102D A6 31            [ 1]  756 	ld a,#TK_GT 
      00102F 6B 02            [ 1]  757 	ld (ATTRIB,sp),a 
      001031 91 D6 00         [ 4]  758 	ld a,([in.w],y)
      001034 72 5C 00 01      [ 1]  759 	inc in 
      001038 A1 3D            [ 1]  760 	cp a,#'=
      00103A 26 04            [ 1]  761 	jrne 1$
      00103C A6 33            [ 1]  762 	ld a,#TK_GE 
      00103E 20 4F            [ 2]  763 	jra token_char  
      001040 A1 3C            [ 1]  764 1$: cp a,#'<
      001042 26 04            [ 1]  765 	jrne 2$
      001044 A6 35            [ 1]  766 	ld a,#TK_NE 
      001046 20 47            [ 2]  767 	jra token_char 
      001048 72 5A 00 01      [ 1]  768 2$: dec in
      00104C 7B 02            [ 1]  769 	ld a,(ATTRIB,sp)
      00104E 20 3F            [ 2]  770 	jra token_char 	 
      001050                        771 lt_tst:
      001050                        772 	_case '<' other
      001050 A6 3C            [ 1]    1 	ld a,#'<' 
      001052 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001054 26 23            [ 1]    3 	jrne other
      001056 A6 34            [ 1]  773 	ld a,#TK_LT 
      001058 6B 02            [ 1]  774 	ld (ATTRIB,sp),a 
      00105A 91 D6 00         [ 4]  775 	ld a,([in.w],y)
      00105D 72 5C 00 01      [ 1]  776 	inc in 
      001061 A1 3D            [ 1]  777 	cp a,#'=
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001063 26 04            [ 1]  778 	jrne 1$
      001065 A6 36            [ 1]  779 	ld a,#TK_LE 
      001067 20 26            [ 2]  780 	jra token_char 
      001069 A1 3E            [ 1]  781 1$: cp a,#'>
      00106B 26 04            [ 1]  782 	jrne 2$
      00106D A6 35            [ 1]  783 	ld a,#TK_NE 
      00106F 20 1E            [ 2]  784 	jra token_char 
      001071 72 5A 00 01      [ 1]  785 2$: dec in 
      001075 7B 02            [ 1]  786 	ld a,(ATTRIB,sp)
      001077 20 16            [ 2]  787 	jra token_char 	
      001079                        788 other: ; not a special character 	 
      001079 7B 01            [ 1]  789 	ld a,(TCHAR,sp)
      00107B CD 0E 1C         [ 4]  790 	call is_alpha 
      00107E 25 03            [ 1]  791 	jrc 30$ 
      001080 CC 16 66         [ 2]  792 	jp syntax_error 
      001083                        793 30$: 
      001083 CD 0E 62         [ 4]  794 	call parse_keyword
      001086 A3 21 6E         [ 2]  795 	cpw x,#remark 
      001089 26 08            [ 1]  796 	jrne token_exit 
      00108B 93               [ 1]  797 	ldw x,y 
      00108C CC 0F D1         [ 2]  798 	jp copy_comment 
      00108F                        799 token_char:
      00108F F7               [ 1]  800 	ld (x),a 
      001090 5C               [ 1]  801 	incw x
      001091 90 93            [ 1]  802 	ldw y,x 
      001093                        803 token_exit:
      001093                        804 	_drop VSIZE 
      001093 5B 02            [ 2]    1     addw sp,#VSIZE 
      001095 81               [ 4]  805 	ret
                                    806 
                                    807 
                                    808 ;-----------------------------------
                                    809 ; create token list fromm text line 
                                    810 ; save this list in pad buffer 
                                    811 ;  compiled line format: 
                                    812 ;    line_no  2 bytes {0...32767}
                                    813 ;    count    1 byte  
                                    814 ;    tokens   variable length 
                                    815 ;   
                                    816 ; input:
                                    817 ;   none
                                    818 ; modified variables:
                                    819 ;   basicptr     token list buffer address 
                                    820 ;   in.w  		 3|count, i.e. index in buffer
                                    821 ;   count        length of line | 0  
                                    822 ;-----------------------------------
                           000001   823 	XSAVE=1
                           000002   824 	VSIZE=2
      001096                        825 compile::
      001096 90 89            [ 2]  826 	pushw y 
      001098                        827 	_vars VSIZE 
      001098 52 02            [ 2]    1     sub sp,#VSIZE 
      00109A 55 00 1B 00 04   [ 1]  828 	mov basicptr,txtbgn
      00109F 72 1A 00 22      [ 1]  829 	bset flags,#FCOMP 
      0010A3 A6 00            [ 1]  830 	ld a,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      0010A5 AE 00 00         [ 2]  831 	ldw x,#0
      0010A8 CF 16 E0         [ 2]  832 	ldw pad,x ; destination buffer 
      0010AB C7 16 E2         [ 1]  833 	ld pad+2,a ; count 
      0010AE AE 16 E3         [ 2]  834 	ldw x,#pad+3
      0010B1 72 5F 00 01      [ 1]  835 	clr in 
      0010B5 CD 0E E2         [ 4]  836 	call get_token
      0010B8 A1 84            [ 1]  837 	cp a,#TK_INTGR
      0010BA 26 11            [ 1]  838 	jrne 2$
      0010BC A3 00 01         [ 2]  839 	cpw x,#1 
      0010BF 2A 05            [ 1]  840 	jrpl 1$
      0010C1 A6 0A            [ 1]  841 	ld a,#ERR_BAD_VALUE
      0010C3 CC 16 68         [ 2]  842 	jp tb_error
      0010C6 CF 16 E0         [ 2]  843 1$:	ldw pad,x 
      0010C9 90 AE 16 E3      [ 2]  844 	ldw y,#pad+3 
      0010CD 90 A3 17 60      [ 2]  845 2$:	cpw y,#xstack_full 
      0010D1 25 05            [ 1]  846 	jrult 3$
      0010D3 A6 0F            [ 1]  847 	ld a,#ERR_BUF_FULL 
      0010D5 CC 16 68         [ 2]  848 	jp tb_error 
      0010D8                        849 3$:	
      0010D8 93               [ 1]  850 	ldw x,y 
      0010D9 CD 0E E2         [ 4]  851 	call get_token 
      0010DC A1 00            [ 1]  852 	cp a,#TK_NONE 
      0010DE 26 ED            [ 1]  853 	jrne 2$ 
                                    854 ; compilation completed  
      0010E0 72 A2 16 E0      [ 2]  855 	subw y,#pad
      0010E4 90 9F            [ 1]  856     ld a,yl
      0010E6 AE 16 E0         [ 2]  857 	ldw x,#pad 
      0010E9 CF 00 19         [ 2]  858 	ldw ptr16,x 
      0010EC E7 02            [ 1]  859 	ld (2,x),a 
      0010EE FE               [ 2]  860 	ldw x,(x)
      0010EF 27 09            [ 1]  861 	jreq 10$
      0010F1 CD 0C C9         [ 4]  862 	call insert_line
      0010F4 72 5F 00 03      [ 1]  863 	clr  count 
      0010F8 20 0F            [ 2]  864 	jra  11$ 
      0010FA                        865 10$: ; line# is zero 
      0010FA CE 00 19         [ 2]  866 	ldw x,ptr16  
      0010FD CF 00 04         [ 2]  867 	ldw basicptr,x 
      001100 E6 02            [ 1]  868 	ld a,(2,x)
      001102 C7 00 03         [ 1]  869 	ld count,a 
      001105 35 03 00 01      [ 1]  870 	mov in,#3 
      001109                        871 11$:
      001109                        872 	_drop VSIZE 
      001109 5B 02            [ 2]    1     addw sp,#VSIZE 
      00110B 72 1B 00 22      [ 1]  873 	bres flags,#FCOMP 
      00110F 90 85            [ 2]  874 	popw y 
      001111 81               [ 4]  875 	ret 
                                    876 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      001112                         48 cpy_cmd_name:
      001112 5D               [ 2]   49 	tnzw x 
      001113 27 14            [ 1]   50 	jreq 10$
      001115 F6               [ 1]   51 	ld a,(x)
      001116 5C               [ 1]   52 	incw x
      001117 A4 0F            [ 1]   53 	and a,#15  
      001119 88               [ 1]   54 	push a 
      00111A 0D 01            [ 1]   55     tnz (1,sp) 
      00111C 27 0A            [ 1]   56 	jreq 9$
      00111E F6               [ 1]   57 1$:	ld a,(x)
      00111F 90 F7            [ 1]   58 	ld (y),a  
      001121 5C               [ 1]   59 	incw x
      001122 90 5C            [ 1]   60 	incw y 
      001124 0A 01            [ 1]   61 	dec (1,sp)	 
      001126 26 F6            [ 1]   62 	jrne 1$
      001128 84               [ 1]   63 9$: pop a 
      001129                         64 10$: 
      001129 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      00112A                         75 add_space:
      00112A 90 5A            [ 2]   76 	decw y 
      00112C 90 F6            [ 1]   77 	ld a,(y)
      00112E 90 5C            [ 1]   78 	incw y
      001130 A1 29            [ 1]   79 	cp a,#') 
      001132 27 05            [ 1]   80 	jreq 0$
      001134 CD 0E 36         [ 4]   81 	call is_alnum 
      001137 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001139                         83 0$: 
      001139 A6 20            [ 1]   84 	ld a,#SPACE 
      00113B 90 F7            [ 1]   85 	ld (y),a 
      00113D 90 5C            [ 1]   86 	incw y 
      00113F 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      001140                         99 right_align::
      001140 88               [ 1]  100 	push a 
      001141 7B 01            [ 1]  101 0$: ld a,(1,sp)
      001143 C1 00 23         [ 1]  102 	cp a,tab_width 
      001146 2A 08            [ 1]  103 	jrpl 1$
      001148 A6 20            [ 1]  104 	ld a,#SPACE 
      00114A 5A               [ 2]  105 	decw x
      00114B F7               [ 1]  106 	ld (x),a  
      00114C 0C 01            [ 1]  107 	inc (1,sp)
      00114E 20 F1            [ 2]  108 	jra 0$ 
      001150 84               [ 1]  109 1$: pop a 	
      001151 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      001152                        123 cpy_quote:
      001152 A6 22            [ 1]  124 	ld a,#'"
      001154 90 F7            [ 1]  125 	ld (y),a 
      001156 90 5C            [ 1]  126 	incw y 
      001158 89               [ 2]  127 	pushw x 
      001159 CD 17 E3         [ 4]  128 	call skip_string 
      00115C 85               [ 2]  129 	popw x 
      00115D F6               [ 1]  130 1$:	ld a,(x)
      00115E 27 30            [ 1]  131 	jreq 9$
      001160 5C               [ 1]  132 	incw x 
      001161 A1 20            [ 1]  133 	cp a,#SPACE 
      001163 25 0E            [ 1]  134 	jrult 3$
      001165 90 F7            [ 1]  135 	ld (y),a
      001167 90 5C            [ 1]  136 	incw y 
      001169 A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      00116B 26 F0            [ 1]  138 	jrne 1$ 
      00116D                        139 2$:
      00116D 90 F7            [ 1]  140 	ld (y),a
      00116F 90 5C            [ 1]  141 	incw y  
      001171 20 EA            [ 2]  142 	jra 1$
      001173 88               [ 1]  143 3$: push a 
      001174 A6 5C            [ 1]  144 	ld a,#'\
      001176 90 F7            [ 1]  145 	ld (y),a 
      001178 90 5C            [ 1]  146 	incw y  
      00117A 84               [ 1]  147 	pop a 
      00117B A0 07            [ 1]  148 	sub a,#7
      00117D C7 00 0E         [ 1]  149 	ld acc8,a 
      001180 72 5F 00 0D      [ 1]  150 	clr acc16
      001184 89               [ 2]  151 	pushw x
      001185 AE 0D 88         [ 2]  152 	ldw x,#escaped 
      001188 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      00118C F6               [ 1]  154 	ld a,(x)
      00118D 85               [ 2]  155 	popw x
      00118E 20 DD            [ 2]  156 	jra 2$
      001190 A6 22            [ 1]  157 9$: ld a,#'"
      001192 90 F7            [ 1]  158 	ld (y),a 
      001194 90 5C            [ 1]  159 	incw y  
      001196 5C               [ 1]  160 	incw x 
      001197 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      001198                        171 var_name::
      001198 1D 00 34         [ 2]  172 		subw x,#vars 
      00119B A6 03            [ 1]  173 		ld a,#3
      00119D 62               [ 2]  174 		div x,a 
      00119E 9F               [ 1]  175 		ld a,xl 
      00119F AB 41            [ 1]  176 		add a,#'A 
      0011A1 81               [ 4]  177 		ret 
                                    178 
                                    179 
                                    180 
                                    181 ;-------------------------------------
                                    182 ; decompile tokens list 
                                    183 ; to original text line 
                                    184 ; input:
                                    185 ;   [basicptr]  pointer at line 
                                    186 ;   Y           output buffer
                                    187 ; output:
                                    188 ;   A           length 
                                    189 ;   Y           after string  
                                    190 ;------------------------------------
                           000001   191 	BASE_SAV=1
                           000002   192 	WIDTH_SAV=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                           000003   193 	STR=3
                           000004   194 	VSIZE=4 
      0011A2                        195 decompile::
      0011A2                        196 	_vars VSIZE
      0011A2 52 04            [ 2]    1     sub sp,#VSIZE 
      0011A4 C6 00 0A         [ 1]  197 	ld a,base
      0011A7 6B 01            [ 1]  198 	ld (BASE_SAV,sp),a  
      0011A9 C6 00 23         [ 1]  199 	ld a,tab_width 
      0011AC 6B 02            [ 1]  200 	ld (WIDTH_SAV,sp),a 
      0011AE 17 03            [ 2]  201 	ldw (STR,sp),y   
      0011B0 72 CE 00 04      [ 5]  202 	ldw x,[basicptr] ; line number 
      0011B4 35 0A 00 0A      [ 1]  203 	mov base,#10
      0011B8 35 05 00 23      [ 1]  204 	mov tab_width,#5
      0011BC 72 5F 00 0C      [ 1]  205 	clr acc24 
      0011C0 CF 00 0D         [ 2]  206 	ldw acc16,x
      0011C3 4F               [ 1]  207 	clr a ; unsigned conversion 
      0011C4 CD 18 4F         [ 4]  208 	call itoa  
      0011C7 CD 11 40         [ 4]  209 	call right_align 
      0011CA 88               [ 1]  210 	push a 
      0011CB 90 93            [ 1]  211 1$:	ldw y,x ; source
      0011CD 1E 04            [ 2]  212 	ldw x,(STR+1,sp) ; destination
      0011CF CD 13 A2         [ 4]  213 	call strcpy 
      0011D2 90 5F            [ 1]  214 	clrw y 
      0011D4 84               [ 1]  215 	pop a 
      0011D5 90 97            [ 1]  216 	ld yl,a 
      0011D7 72 F9 03         [ 2]  217 	addw y,(STR,sp)
      0011DA A6 20            [ 1]  218 	ld a,#SPACE 
      0011DC 90 F7            [ 1]  219 	ld (y),a 
      0011DE 90 5C            [ 1]  220 	incw y 
      0011E0 72 5F 00 23      [ 1]  221 	clr tab_width
      0011E4 AE 00 03         [ 2]  222 	ldw x,#3
      0011E7 CF 00 00         [ 2]  223 	ldw in.w,x 
      0011EA                        224 decomp_loop:
      0011EA 90 89            [ 2]  225 	pushw y
      0011EC CD 17 CA         [ 4]  226 	call next_token 
      0011EF 90 85            [ 2]  227 	popw y 
      0011F1 4D               [ 1]  228 	tnz a  
      0011F2 26 03            [ 1]  229 	jrne 1$
      0011F4 CC 13 17         [ 2]  230 	jp 20$
      0011F7 2B 03            [ 1]  231 1$:	jrmi 2$
      0011F9 CC 12 88         [ 2]  232 	jp 6$
      0011FC                        233 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      0011FC A1 85            [ 1]  234 	cp a,#TK_VAR 
      0011FE 26 0F            [ 1]  235 	jrne 3$
                                    236 ;; TK_VAR 
      001200 CD 11 2A         [ 4]  237 	call add_space
      001203 CD 17 F2         [ 4]  238 	call get_addr   
      001206 CD 11 98         [ 4]  239 	call var_name
      001209 90 F7            [ 1]  240 	ld (y),a 
      00120B 90 5C            [ 1]  241 	incw y  
      00120D 20 DB            [ 2]  242 	jra decomp_loop
      00120F                        243 3$:
      00120F A1 84            [ 1]  244 	cp a,#TK_INTGR
      001211 26 26            [ 1]  245 	jrne 4$
                                    246 ;; TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001213 CD 17 FC         [ 4]  247 	call get_int24 
      001216 C7 00 0C         [ 1]  248 	ld acc24,a 
      001219 CF 00 0D         [ 2]  249 	ldw acc16,x 
      00121C CD 11 2A         [ 4]  250 	call add_space
      00121F 90 89            [ 2]  251 	pushw y 
      001221 A6 FF            [ 1]  252 	ld a,#255 ; signed conversion 
      001223 CD 18 4F         [ 4]  253 	call itoa  
      001226 16 01            [ 2]  254 	ldw y,(1,sp) 
      001228 88               [ 1]  255 	push a 
      001229 51               [ 1]  256 	exgw x,y 
      00122A CD 13 A2         [ 4]  257 	call strcpy 
      00122D 90 5F            [ 1]  258 	clrw y
      00122F 84               [ 1]  259 	pop a  
      001230 90 97            [ 1]  260 	ld yl,a 
      001232 72 F9 01         [ 2]  261 	addw y,(1,sp)
      001235                        262 	_drop 2 
      001235 5B 02            [ 2]    1     addw sp,#2 
      001237 20 B1            [ 2]  263 	jra decomp_loop
      001239                        264 4$: ; dictionary keyword
      001239 A1 87            [ 1]  265 	cp a,#TK_NOT 
      00123B 24 39            [ 1]  266 	jruge 50$ 
      00123D FE               [ 2]  267 	ldw x,(x)
      00123E 72 5C 00 01      [ 1]  268 	inc in 
      001242 72 5C 00 01      [ 1]  269 	inc in 
      001246 A3 21 6E         [ 2]  270 	cpw x,#remark 
      001249 26 23            [ 1]  271 	jrne 5$
      00124B CE 00 04         [ 2]  272 	ldw x,basicptr 
                                    273 ; copy comment to buffer 
      00124E CD 11 2A         [ 4]  274 	call add_space
      001251 A6 27            [ 1]  275 	ld a,#''
      001253 90 F7            [ 1]  276 	ld (y),a 
      001255 90 5C            [ 1]  277 	incw y 
      001257                        278 46$:
      001257 72 D6 00 00      [ 4]  279 	ld a,([in.w],x)
      00125B 72 5C 00 01      [ 1]  280 	inc in  
      00125F 90 F7            [ 1]  281 	ld (y),a 
      001261 90 5C            [ 1]  282 	incw y 
      001263 C6 00 01         [ 1]  283 	ld a,in 
      001266 C1 00 03         [ 1]  284 	cp a,count 
      001269 2B EC            [ 1]  285 	jrmi 46$
      00126B CC 13 17         [ 2]  286 	jp 20$  
      00126E A3 1C AE         [ 2]  287 5$: cpw x,#let  
      001271 26 05            [ 1]  288 	jrne 54$
      001273 CC 11 EA         [ 2]  289 	jp decomp_loop ; down display LET
      001276                        290 50$:
      001276 5F               [ 1]  291 	clrw x 
      001277 97               [ 1]  292 	ld xl,a 
                                    293 ;	sub a,#TK_NOT  
                                    294 ;	sll a 
                                    295 ;	ld xl,a 
                                    296 ;	addw x,#NOT_IDX
      001278                        297 54$: ; insert command name 
      001278 CD 11 2A         [ 4]  298 	call add_space  
      00127B 90 89            [ 2]  299 	pushw y
      00127D CD 13 52         [ 4]  300 	call cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      001280 90 85            [ 2]  301 	popw y 
      001282 CD 11 12         [ 4]  302 	call cpy_cmd_name
      001285 CC 11 EA         [ 2]  303 	jp decomp_loop 
      001288                        304 6$:
                                    305 ; label?
      001288 A1 03            [ 1]  306 	cp a,#TK_LABEL 
      00128A 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      00128C A6 20            [ 1]  309 	ld a,#32 
      00128E 90 F7            [ 1]  310 	ld (y),a 
      001290 90 5C            [ 1]  311 	incw y 
      001292                        312 61$:
      001292 89               [ 2]  313 	pushw x 
      001293 CD 17 E3         [ 4]  314 	call skip_string 
      001296 85               [ 2]  315 	popw x 
      001297                        316 62$:	
      001297 F6               [ 1]  317 	ld a,(x)
      001298 27 07            [ 1]  318 	jreq 63$ 
      00129A 5C               [ 1]  319 	incw x  
      00129B 90 F7            [ 1]  320 	ld (y),a 
      00129D 90 5C            [ 1]  321 	incw y 
      00129F 20 F6            [ 2]  322 	jra 62$ 
      0012A1                        323 63$: 
      0012A1 A6 20            [ 1]  324 	ld a,#32 
      0012A3 90 F7            [ 1]  325 	ld (y),a 
      0012A5 90 5C            [ 1]  326 	incw y 
      0012A7 CC 11 EA         [ 2]  327 	jp decomp_loop
      0012AA                        328 64$:
      0012AA A1 02            [ 1]  329 	cp a,#TK_QSTR 
      0012AC 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      0012AE CD 11 2A         [ 4]  332 	call add_space
      0012B1 CD 11 52         [ 4]  333 	call cpy_quote  
      0012B4 CC 11 EA         [ 2]  334 	jp decomp_loop
      0012B7                        335 7$:
      0012B7 A1 04            [ 1]  336 	cp a,#TK_CHAR 
      0012B9 26 10            [ 1]  337 	jrne 8$
                                    338 ;; TK_CHAR
      0012BB CD 11 2A         [ 4]  339 	call add_space 
      0012BE A6 5C            [ 1]  340 	ld a,#'\ 
      0012C0 90 F7            [ 1]  341 	ld (y),a 
      0012C2 90 5C            [ 1]  342 	incw y
      0012C4 F6               [ 1]  343 	ld a,(x)
      0012C5 72 5C 00 01      [ 1]  344 	inc in  
      0012C9 20 06            [ 2]  345 	jra 81$
      0012CB A1 0A            [ 1]  346 8$: cp a,#TK_COLON 
      0012CD 26 09            [ 1]  347 	jrne 9$
      0012CF A6 3A            [ 1]  348 	ld a,#':
      0012D1                        349 81$:
      0012D1 90 F7            [ 1]  350 	ld (y),a 
      0012D3 90 5C            [ 1]  351 	incw y 
      0012D5                        352 82$:
      0012D5 CC 11 EA         [ 2]  353 	jp decomp_loop
      0012D8                        354 9$: 
      0012D8 A1 09            [ 1]  355 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0012DA 22 0A            [ 1]  356 	jrugt 10$ 
      0012DC A0 05            [ 1]  357 	sub a,#TK_ARRAY 
      0012DE 5F               [ 1]  358 	clrw x 
      0012DF 97               [ 1]  359 	ld xl,a
      0012E0 1C 13 2D         [ 2]  360 	addw x,#single_char 
      0012E3 F6               [ 1]  361 	ld a,(x)
      0012E4 20 EB            [ 2]  362 	jra 81$ 
      0012E6                        363 10$: 
      0012E6 A1 11            [ 1]  364 	cp a,#TK_MINUS 
      0012E8 22 0A            [ 1]  365 	jrugt 11$
      0012EA A0 10            [ 1]  366 	sub a,#TK_PLUS 
      0012EC 5F               [ 1]  367 	clrw x 
      0012ED 97               [ 1]  368 	ld xl,a 
      0012EE 1C 13 32         [ 2]  369 	addw x,#add_char 
      0012F1 F6               [ 1]  370 	ld a,(x)
      0012F2 20 DD            [ 2]  371 	jra 81$
      0012F4                        372 11$:
      0012F4 A1 22            [ 1]  373     cp a,#TK_MOD 
      0012F6 22 0A            [ 1]  374 	jrugt 12$
      0012F8 A0 20            [ 1]  375 	sub a,#TK_MULT
      0012FA 5F               [ 1]  376 	clrw x 
      0012FB 97               [ 1]  377 	ld xl,a 
      0012FC 1C 13 34         [ 2]  378 	addw x,#mul_char
      0012FF F6               [ 1]  379 	ld a,(x)
      001300 20 CF            [ 2]  380 	jra 81$
      001302                        381 12$:
      001302 A0 31            [ 1]  382 	sub a,#TK_GT  
      001304 48               [ 1]  383 	sll a 
      001305 5F               [ 1]  384 	clrw x 
      001306 97               [ 1]  385 	ld xl,a 
      001307 1C 13 37         [ 2]  386 	addw x,#relop_str 
      00130A FE               [ 2]  387 	ldw x,(x)
      00130B F6               [ 1]  388 	ld a,(x)
      00130C 5C               [ 1]  389 	incw x 
      00130D 90 F7            [ 1]  390 	ld (y),a
      00130F 90 5C            [ 1]  391 	incw y 
      001311 F6               [ 1]  392 	ld a,(x)
      001312 26 BD            [ 1]  393 	jrne 81$
      001314 CC 11 EA         [ 2]  394 	jp decomp_loop 
      001317                        395 20$: 
      001317 90 7F            [ 1]  396 	clr (y)
      001319 1E 03            [ 2]  397 	ldw x,(STR,sp)
      00131B 7B 01            [ 1]  398 	ld a,(BASE_SAV,sp)
      00131D C7 00 0A         [ 1]  399 	ld base,a 
      001320 7B 02            [ 1]  400 	ld a,(WIDTH_SAV,sp)
      001322 C7 00 23         [ 1]  401 	ld tab_width,a
      001325 72 F2 03         [ 2]  402 	subw y,(STR,sp) 
      001328 90 9F            [ 1]  403 	ld a,yl 
      00132A                        404 	_drop VSIZE 
      00132A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00132C 81               [ 4]  405 	ret 
                                    406 
      00132D 40 28 29 2C 23         407 single_char: .byte '@','(',')',',','#'
      001332 2B 2D                  408 add_char: .byte '+','-'
      001334 2A 2F 25               409 mul_char: .byte '*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      001337 13 43 13 45 13 47 13   410 relop_str: .word gt,equal,ge,lt,ne,le 
             4A 13 4F 13 4C
      001343 3E 00                  411 gt: .asciz ">"
      001345 3D 00                  412 equal: .asciz "="
      001347 3E 3D 00               413 ge: .asciz ">="
      00134A 3C 00                  414 lt: .asciz "<"
      00134C 3C 3D 00               415 le: .asciz "<="
      00134F 3C 3E 00               416 ne:  .asciz "<>"
                                    417 
                                    418 ;----------------------------------
                                    419 ; search in kword_dict name
                                    420 ; from its execution address 
                                    421 ; input:
                                    422 ;   X       	routine_address  
                                    423 ; output:
                                    424 ;   X 			cstr*  | 0 
                                    425 ;--------------------------------
                           000001   426 	CODE_ADDR=1 
                           000003   427 	LINK=3 
                           000004   428 	VSIZE=4
      001352                        429 cmd_name:
      001352                        430 	_vars VSIZE 
      001352 52 04            [ 2]    1     sub sp,#VSIZE 
      001354 72 5F 00 0D      [ 1]  431 	clr acc16 
      001358 1F 01            [ 2]  432 	ldw (CODE_ADDR,sp),x  
      00135A AE 34 4D         [ 2]  433 	ldw x,#kword_dict	
      00135D 1F 03            [ 2]  434 1$:	ldw (LINK,sp),x
      00135F E6 02            [ 1]  435 	ld a,(2,x)
      001361 A4 0F            [ 1]  436 	and a,#15 
      001363 C7 00 0E         [ 1]  437 	ld acc8,a 
      001366 1C 00 03         [ 2]  438 	addw x,#3
      001369 72 BB 00 0D      [ 2]  439 	addw x,acc16
      00136D FE               [ 2]  440 	ldw x,(x) ; code address   
      00136E 13 01            [ 2]  441 	cpw x,(CODE_ADDR,sp)
      001370 27 0C            [ 1]  442 	jreq 2$
      001372 1E 03            [ 2]  443 	ldw x,(LINK,sp)
      001374 FE               [ 2]  444 	ldw x,(x) 
      001375 1D 00 02         [ 2]  445 	subw x,#2  
      001378 26 E3            [ 1]  446 	jrne 1$
      00137A 4F               [ 1]  447 	clr a 
      00137B 5F               [ 1]  448 	clrw x 
      00137C 20 05            [ 2]  449 	jra 9$
      00137E 1E 03            [ 2]  450 2$: ldw x,(LINK,sp)
      001380 1C 00 02         [ 2]  451 	addw x,#2 	
      001383                        452 9$:	_drop VSIZE
      001383 5B 04            [ 2]    1     addw sp,#VSIZE 
      001385 81               [ 4]  453 	ret
                                    454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      000030                         94 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000032                         95 dvar_end:: .blkw 1 ; DIM variables end address 
                                     96 ; 24 bits integer variables 
      000034                         97 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     98 
                                     99 	.area BTXT (ABS)
      00008C                        100 	.org 0x8C  
                                    101 ; keep 'free_ram' as last variable 
                                    102 ; basic code compiled here. 
      00008C                        103 rsign: .blkw 1 ; "TB" 
      00008E                        104 rsize: .blkw 1 ; code size 	 
      000090                        105 free_ram: ; from here RAM free for BASIC text 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                    106 
                                    107 	.area CODE 
                                    108 
                                    109 
                                    110 ;-------------------------------------
                                    111 ; retrun string length
                                    112 ; input:
                                    113 ;   X         .asciz  pointer 
                                    114 ; output:
                                    115 ;   X         not affected 
                                    116 ;   A         length 
                                    117 ;-------------------------------------
      001386                        118 strlen::
      001386 89               [ 2]  119 	pushw x 
      001387 4F               [ 1]  120 	clr a
      001388 7D               [ 1]  121 1$:	tnz (x) 
      001389 27 04            [ 1]  122 	jreq 9$ 
      00138B 4C               [ 1]  123 	inc a 
      00138C 5C               [ 1]  124 	incw x 
      00138D 20 F9            [ 2]  125 	jra 1$ 
      00138F 85               [ 2]  126 9$:	popw x 
      001390 81               [ 4]  127 	ret 
                                    128 
                                    129 ;------------------------------------
                                    130 ; compare 2 strings
                                    131 ; input:
                                    132 ;   X 		char* first string 
                                    133 ;   Y       char* second string 
                                    134 ; output:
                                    135 ;   A 		0 not == |1 ==  
                                    136 ;-------------------------------------
      001391                        137 strcmp:
      001391 F6               [ 1]  138 	ld a,(x)
      001392 27 0B            [ 1]  139 	jreq 5$ 
      001394 90 F1            [ 1]  140 	cp a,(y) 
      001396 26 05            [ 1]  141 	jrne 4$ 
      001398 5C               [ 1]  142 	incw x 
      001399 90 5C            [ 1]  143 	incw y 
      00139B 20 F4            [ 2]  144 	jra strcmp 
      00139D                        145 4$: ; not same  
      00139D 4F               [ 1]  146 	clr a 
      00139E 81               [ 4]  147 	ret 
      00139F                        148 5$: ; same 
      00139F A6 01            [ 1]  149 	ld a,#1 
      0013A1 81               [ 4]  150 	ret 
                                    151 
                                    152 
                                    153 ;---------------------------------------
                                    154 ;  copy src to dest 
                                    155 ; input:
                                    156 ;   X 		dest 
                                    157 ;   Y 		src 
                                    158 ; output: 
                                    159 ;   X 		dest 
                                    160 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0013A2                        161 strcpy::
      0013A2 88               [ 1]  162 	push a 
      0013A3 89               [ 2]  163 	pushw x 
      0013A4 90 F6            [ 1]  164 1$: ld a,(y)
      0013A6 27 06            [ 1]  165 	jreq 9$ 
      0013A8 F7               [ 1]  166 	ld (x),a 
      0013A9 5C               [ 1]  167 	incw x 
      0013AA 90 5C            [ 1]  168 	incw y 
      0013AC 20 F6            [ 2]  169 	jra 1$ 
      0013AE 7F               [ 1]  170 9$:	clr (x)
      0013AF 85               [ 2]  171 	popw x 
      0013B0 84               [ 1]  172 	pop a 
      0013B1 81               [ 4]  173 	ret 
                                    174 
                                    175 ;---------------------------------------
                                    176 ; move memory block 
                                    177 ; input:
                                    178 ;   X 		destination 
                                    179 ;   Y 	    source 
                                    180 ;   acc16	bytes count 
                                    181 ; output:
                                    182 ;   none 
                                    183 ;--------------------------------------
                           000001   184 	INCR=1 ; incrament high byte 
                           000002   185 	LB=2 ; increment low byte 
                           000002   186 	VSIZE=2
      0013B2                        187 move::
      0013B2 88               [ 1]  188 	push a 
      0013B3                        189 	_vars VSIZE 
      0013B3 52 02            [ 2]    1     sub sp,#VSIZE 
      0013B5 0F 01            [ 1]  190 	clr (INCR,sp)
      0013B7 0F 02            [ 1]  191 	clr (LB,sp)
      0013B9 90 89            [ 2]  192 	pushw y 
      0013BB 13 01            [ 2]  193 	cpw x,(1,sp) ; compare DEST to SRC 
      0013BD 90 85            [ 2]  194 	popw y 
      0013BF 27 31            [ 1]  195 	jreq move_exit ; x==y 
      0013C1 2B 0E            [ 1]  196 	jrmi move_down
      0013C3                        197 move_up: ; start from top address with incr=-1
      0013C3 72 BB 00 0D      [ 2]  198 	addw x,acc16
      0013C7 72 B9 00 0D      [ 2]  199 	addw y,acc16
      0013CB 03 01            [ 1]  200 	cpl (INCR,sp)
      0013CD 03 02            [ 1]  201 	cpl (LB,sp)   ; increment = -1 
      0013CF 20 05            [ 2]  202 	jra move_loop  
      0013D1                        203 move_down: ; start from bottom address with incr=1 
      0013D1 5A               [ 2]  204     decw x 
      0013D2 90 5A            [ 2]  205 	decw y
      0013D4 0C 02            [ 1]  206 	inc (LB,sp) ; incr=1 
      0013D6                        207 move_loop:	
      0013D6 C6 00 0D         [ 1]  208     ld a, acc16 
      0013D9 CA 00 0E         [ 1]  209 	or a, acc8
      0013DC 27 14            [ 1]  210 	jreq move_exit 
      0013DE 72 FB 01         [ 2]  211 	addw x,(INCR,sp)
      0013E1 72 F9 01         [ 2]  212 	addw y,(INCR,sp) 
      0013E4 90 F6            [ 1]  213 	ld a,(y)
      0013E6 F7               [ 1]  214 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0013E7 89               [ 2]  215 	pushw x 
      0013E8 CE 00 0D         [ 2]  216 	ldw x,acc16 
      0013EB 5A               [ 2]  217 	decw x 
      0013EC CF 00 0D         [ 2]  218 	ldw acc16,x 
      0013EF 85               [ 2]  219 	popw x 
      0013F0 20 E4            [ 2]  220 	jra move_loop
      0013F2                        221 move_exit:
      0013F2                        222 	_drop VSIZE
      0013F2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013F4 84               [ 1]  223 	pop a 
      0013F5 81               [ 4]  224 	ret 	
                                    225 
                                    226 ;------------------------------------
                                    227 ;  set all variables to zero 
                                    228 ; input:
                                    229 ;   none 
                                    230 ; output:
                                    231 ;	none
                                    232 ;------------------------------------
      0013F6                        233 clear_vars:
      0013F6 89               [ 2]  234 	pushw x 
      0013F7 88               [ 1]  235 	push a  
      0013F8 AE 00 34         [ 2]  236 	ldw x,#vars 
      0013FB A6 4E            [ 1]  237 	ld a,#CELL_SIZE*26 
      0013FD 7F               [ 1]  238 1$:	clr (x)
      0013FE 5C               [ 1]  239 	incw x 
      0013FF 4A               [ 1]  240 	dec a 
      001400 26 FB            [ 1]  241 	jrne 1$
      001402 84               [ 1]  242 	pop a 
      001403 85               [ 2]  243 	popw x 
      001404 81               [ 4]  244 	ret 
                                    245 
                                    246 
                                    247 ;-----------------------
                                    248 ;  display system 
                                    249 ;  information 
                                    250 ;-----------------------
                           000002   251 	MAJOR=2
                           000000   252 	MINOR=0 
      001405 0A 0A 54 69 6E 79 20   253 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    254 
      00144B                        255 system_information:
      00144B AE 14 05         [ 2]  256 	ldw x,#software 
      00144E CD 09 68         [ 4]  257 	call puts 
      001451 A6 02            [ 1]  258 	ld a,#MAJOR 
      001453 C7 00 0E         [ 1]  259 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      001456 5F               [ 1]  260 	clrw x 
      001457 CF 00 0C         [ 2]  261 	ldw acc24,x
      00145A 72 5F 00 23      [ 1]  262 	clr tab_width  
      00145E 35 0A 00 0A      [ 1]  263 	mov base, #10 
      001462 CD 18 29         [ 4]  264 	call prt_acc24 
      001465 A6 2E            [ 1]  265 	ld a,#'.
      001467 CD 09 0B         [ 4]  266 	call putc 
      00146A A6 00            [ 1]  267 	ld a,#MINOR 
      00146C C7 00 0E         [ 1]  268 	ld acc8,a 
      00146F 5F               [ 1]  269 	clrw x 
      001470 CF 00 0C         [ 2]  270 	ldw acc24,x 
      001473 CD 18 29         [ 4]  271 	call prt_acc24
      001476 A6 0D            [ 1]  272 	ld a,#CR 
      001478 CD 09 0B         [ 4]  273 	call putc
                                    274 ;call test 
      00147B 81               [ 4]  275 	ret
                                    276 
      00147C                        277 warm_init:
      00147C 90 AE 17 73      [ 2]  278 	ldw y,#XSTACK_EMPTY  
      001480 72 5F 00 22      [ 1]  279 	clr flags 
      001484 72 5F 00 1F      [ 1]  280 	clr loop_depth 
      001488 35 04 00 23      [ 1]  281 	mov tab_width,#TAB_WIDTH 
      00148C 35 0A 00 0A      [ 1]  282 	mov base,#10 
      001490 AE 00 00         [ 2]  283 	ldw x,#0 
      001493 CF 00 04         [ 2]  284 	ldw basicptr,x 
      001496 CF 00 00         [ 2]  285 	ldw in.w,x 
      001499 72 5F 00 03      [ 1]  286 	clr count
      00149D 81               [ 4]  287 	ret 
                                    288 
                                    289 ;---------------------------
                                    290 ; reset BASIC text variables 
                                    291 ; and clear variables 
                                    292 ;---------------------------
      00149E                        293 clear_basic:
      00149E 89               [ 2]  294 	pushw x 
      00149F 72 5F 00 03      [ 1]  295 	clr count
      0014A3 72 5F 00 01      [ 1]  296 	clr in  
      0014A7 AE 00 90         [ 2]  297 	ldw x,#free_ram 
      0014AA CF 00 1B         [ 2]  298 	ldw txtbgn,x 
      0014AD CF 00 1D         [ 2]  299 	ldw txtend,x 
      0014B0 CF 00 30         [ 2]  300 	ldw dvar_bgn,x 
      0014B3 CF 00 32         [ 2]  301 	ldw dvar_end,x 
      0014B6 CD 13 F6         [ 4]  302 	call clear_vars 
      0014B9 85               [ 2]  303 	popw x
      0014BA 81               [ 4]  304 	ret 
                                    305 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 ;;   Tiny BASIC error messages     ;;
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014BB                        309 err_msg:
      0014BB 00 00 14 DF 14 EC 14   310 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             FA 15 13 15 22
      0014C7 15 38 15 4E 15 68 15   311 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             79 15 8A
      0014D1 15 96 15 C9 15 D9 15   312 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



             ED 16 00
      0014DB 16 0D 16 17            313 	.word err_overflow,err_read_only  
                                    314 
      0014DF 4D 65 6D 6F 72 79 20   315 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0014EC 73 79 6E 74 61 78 20   316 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0014FA 6D 61 74 68 20 6F 70   317 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001513 64 69 76 69 73 69 6F   318 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001522 69 6E 76 61 6C 69 64   319 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      001538 72 75 6E 20 74 69 6D   320 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      00154E 63 6F 6D 6D 61 6E 64   321 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      001568 64 75 70 6C 69 63 61   322 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      001579 46 69 6C 65 20 6E 6F   323 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      00158A 62 61 64 20 76 61 6C   324 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      001596 46 69 6C 65 20 69 6E   325 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0015C9 4E 6F 20 64 61 74 61   326 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015D9 4E 6F 20 70 72 6F 67   327 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0015ED 46 69 6C 65 20 73 79   328 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001600 42 75 66 66 65 72 20   329 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      00160D 6F 76 65 72 66 6C 6F   330 err_overflow: .asciz "overflow\n" 
             77 0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      001617 63 6F 6E 73 74 61 6E   331 err_read_only: .asciz "constant can't be modified\n"
             74 20 63 61 6E 27 74
             20 62 65 20 6D 6F 64
             69 66 69 65 64 0A 00
                                    332 
      001633 0A 72 75 6E 20 74 69   333 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001645 0A 63 6F 6D 70 69 6C   334 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001656 6C 61 73 74 20 74 6F   335 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    336 
      001666                        337 syntax_error::
      001666 A6 02            [ 1]  338 	ld a,#ERR_SYNTAX 
                                    339 
      001668                        340 tb_error::
      001668 72 0A 00 22 4C   [ 2]  341 	btjt flags,#FCOMP,1$
      00166D 88               [ 1]  342 	push a 
      00166E AE 16 33         [ 2]  343 	ldw x, #rt_msg 
      001671 CD 09 68         [ 4]  344 	call puts 
      001674 84               [ 1]  345 	pop a 
      001675 AE 14 BB         [ 2]  346 	ldw x, #err_msg 
      001678 72 5F 00 0D      [ 1]  347 	clr acc16 
      00167C 48               [ 1]  348 	sll a
      00167D 72 59 00 0D      [ 1]  349 	rlc acc16  
      001681 C7 00 0E         [ 1]  350 	ld acc8, a 
      001684 72 BB 00 0D      [ 2]  351 	addw x,acc16 
      001688 FE               [ 2]  352 	ldw x,(x)
      001689 CD 09 68         [ 4]  353 	call puts
      00168C CE 00 04         [ 2]  354 	ldw x,basicptr 
                           000001   355 .if DEBUG 
      00168F C6 00 03         [ 1]  356 ld a,count 
      001692 90 5F            [ 1]  357 clrw y 
      001694 90 02            [ 1]  358 rlwa y  
      001696 CD 06 67         [ 4]  359 call hex_dump
      001699 CE 00 04         [ 2]  360 ldw x,basicptr
                                    361 .endif 
      00169C C6 00 01         [ 1]  362 	ld a,in 
      00169F CD 20 02         [ 4]  363 	call prt_basic_line
      0016A2 AE 16 56         [ 2]  364 	ldw x,#tk_id 
      0016A5 CD 09 68         [ 4]  365 	call puts 
      0016A8 C6 00 02         [ 1]  366 	ld a,in.saved 
      0016AB 5F               [ 1]  367 	clrw x 
      0016AC 97               [ 1]  368 	ld xl,a 
      0016AD 72 BB 00 04      [ 2]  369 	addw x,basicptr 
      0016B1 F6               [ 1]  370 	ld a,(x)
      0016B2 5F               [ 1]  371 	clrw x 
      0016B3 97               [ 1]  372 	ld xl,a 
      0016B4 CD 18 12         [ 4]  373 	call prt_i16
      0016B7 20 35            [ 2]  374 	jra 6$
      0016B9                        375 1$:	
      0016B9 88               [ 1]  376 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0016BA AE 16 45         [ 2]  377 	ldw x,#comp_msg
      0016BD CD 09 68         [ 4]  378 	call puts 
      0016C0 84               [ 1]  379 	pop a 
      0016C1 AE 14 BB         [ 2]  380 	ldw x, #err_msg 
      0016C4 72 5F 00 0D      [ 1]  381 	clr acc16 
      0016C8 48               [ 1]  382 	sll a
      0016C9 72 59 00 0D      [ 1]  383 	rlc acc16  
      0016CD C7 00 0E         [ 1]  384 	ld acc8, a 
      0016D0 72 BB 00 0D      [ 2]  385 	addw x,acc16 
      0016D4 FE               [ 2]  386 	ldw x,(x)
      0016D5 CD 09 68         [ 4]  387 	call puts
      0016D8 AE 16 90         [ 2]  388 	ldw x,#tib
      0016DB CD 09 68         [ 4]  389 	call puts 
      0016DE A6 0D            [ 1]  390 	ld a,#CR 
      0016E0 CD 09 0B         [ 4]  391 	call putc
      0016E3 CE 00 00         [ 2]  392 	ldw x,in.w
      0016E6 CD 09 D5         [ 4]  393 	call spaces
      0016E9 A6 5E            [ 1]  394 	ld a,#'^
      0016EB CD 09 0B         [ 4]  395 	call putc 
      0016EE AE 17 FF         [ 2]  396 6$: ldw x,#STACK_EMPTY 
      0016F1 94               [ 1]  397     ldw sp,x
                                    398 
      0016F2                        399 warm_start:
      0016F2 CD 14 7C         [ 4]  400 	call warm_init
                                    401 ;----------------------------
                                    402 ;   BASIC interpreter
                                    403 ;----------------------------
      0016F5                        404 cmd_line: ; user interface 
      0016F5 A6 0D            [ 1]  405 	ld a,#CR 
      0016F7 CD 09 0B         [ 4]  406 	call putc 
      0016FA A6 3E            [ 1]  407 	ld a,#'> 
      0016FC CD 09 0B         [ 4]  408 	call putc
      0016FF CD 0A 6D         [ 4]  409 	call readln
      001702 72 5D 00 03      [ 1]  410 	tnz count 
      001706 27 ED            [ 1]  411 	jreq cmd_line
      001708 CD 10 96         [ 4]  412 	call compile
                                    413 ;;;;;;;;;;;;;;;;;;;;;;	
                                    414 ;pushw y 
                                    415 ;ldw x,txtbgn  
                                    416 ;ldw y,txtend
                                    417 ;ldw acc16,x   
                                    418 ;subw y,acc16 
                                    419 ;call hex_dump
                                    420 ;popw y 
                                    421 ;;;;;;;;;;;;;;;;;;;;;;
                                    422 
                                    423 ; if text begin with a line number
                                    424 ; the compiler set count to zero    
                                    425 ; so code is not interpreted
      00170B 72 5D 00 03      [ 1]  426 	tnz count 
      00170F 27 E4            [ 1]  427 	jreq cmd_line
                                    428 	
                                    429 ; if direct command 
                                    430 ; it's ready to interpret 
                                    431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                    432 ;; This is the interpreter loop
                                    433 ;; for each BASIC code line. 
                                    434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      001711                        435 interpreter: 
      001711 C6 00 01         [ 1]  436 	ld a,in 
      001714 C1 00 03         [ 1]  437 	cp a,count 
      001717 2B 1D            [ 1]  438 	jrmi interp_loop
      001719                        439 next_line:
      001719 72 01 00 22 D7   [ 2]  440 	btjf flags, #FRUN, cmd_line
      00171E CE 00 04         [ 2]  441 	ldw x,basicptr
      001721 72 BB 00 00      [ 2]  442 	addw x,in.w 
      001725 C3 00 1D         [ 2]  443 	cpw x,txtend 
      001728 2A C8            [ 1]  444 	jrpl warm_start
      00172A CF 00 04         [ 2]  445 	ldw basicptr,x ; start of next line  
      00172D E6 02            [ 1]  446 	ld a,(2,x)
      00172F C7 00 03         [ 1]  447 	ld count,a 
      001732 35 03 00 01      [ 1]  448 	mov in,#3 ; skip first 3 bytes of line 
      001736                        449 interp_loop:
      001736 CD 17 CA         [ 4]  450 	call next_token
      001739 A1 00            [ 1]  451 	cp a,#TK_NONE 
      00173B 27 DC            [ 1]  452 	jreq next_line 
      00173D A1 80            [ 1]  453 	cp a,#TK_CMD
      00173F 26 0C            [ 1]  454 	jrne 1$
      001741                        455 	_get_code_addr
      001741 FE               [ 2]    1         ldw x,(x)
      001742 72 5C 00 01      [ 1]    2         inc in 
      001746 72 5C 00 01      [ 1]    3         inc in 
      00174A FD               [ 4]  456 	call(x)
      00174B 20 E9            [ 2]  457 	jra interp_loop 
      00174D                        458 1$:	 
      00174D A1 85            [ 1]  459 	cp a,#TK_VAR
      00174F 26 05            [ 1]  460 	jrne 2$
      001751 CD 1C C1         [ 4]  461 	call let_var  
      001754 20 E0            [ 2]  462 	jra interp_loop 
      001756                        463 2$:	
      001756 A1 05            [ 1]  464 	cp a,#TK_ARRAY 
      001758 26 05            [ 1]  465 	jrne 3$
      00175A CD 1C BC         [ 4]  466 	call let_array 
      00175D 20 D7            [ 2]  467 	jra interp_loop
      00175F                        468 3$:	
      00175F A1 03            [ 1]  469 	cp a,#TK_LABEL
      001761 26 05            [ 1]  470 	jrne 4$
      001763 CD 17 6F         [ 4]  471 	call let_dvar  
      001766 20 CE            [ 2]  472 	jra interp_loop 
      001768                        473 4$: 
      001768 A1 0A            [ 1]  474 	cp a,#TK_COLON 
      00176A 27 CA            [ 1]  475 	jreq interp_loop
      00176C CC 16 66         [ 2]  476 5$:	jp syntax_error 
                                    477 
                                    478 
                                    479 ;----------------------
                                    480 ; when a label is met 
                                    481 ; at interp_loop
                                    482 ; it may be a variable 
                                    483 ; assignement to DIM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                    484 ; variable 
                                    485 ;----------------------
                           000001   486 	VAR_NAME=1 
                           000003   487 	REC_LEN=3
                           000004   488 	VSIZE=4 
      00176F                        489 let_dvar:
      00176F                        490 	_vars VSIZE 
      00176F 52 04            [ 2]    1     sub sp,#VSIZE 
      001771 1F 01            [ 2]  491 	ldw (VAR_NAME,sp),x
      001773 0F 03            [ 1]  492 	clr (REC_LEN,sp) 
      001775 CD 17 E3         [ 4]  493 	call skip_string 
      001778 CE 00 04         [ 2]  494 	ldw x,basicptr 
      00177B 72 BB 00 00      [ 2]  495 	addw x,in.w 
      00177F F6               [ 1]  496 	ld a,(x)
      001780 A1 32            [ 1]  497 	cp a,#TK_EQUAL 
      001782 26 43            [ 1]  498 	jrne 9$ 
                                    499 ; dvar assignment 
      001784 72 5C 00 01      [ 1]  500 	inc in  
      001788 CD 1B EF         [ 4]  501 	call condition  
      00178B A1 84            [ 1]  502 	cp a,#TK_INTGR 
      00178D 27 03            [ 1]  503 	jreq 1$ 
      00178F CC 16 66         [ 2]  504 0$:	jp syntax_error 
      001792                        505 1$: 
      001792 1E 01            [ 2]  506 	ldw x,(VAR_NAME,sp) ; pointer to var name 
      001794 CD 13 86         [ 4]  507 	call strlen 
      001797 AB 05            [ 1]  508 	add a,#REC_XTRA_BYTES
      001799 6B 04            [ 1]  509 	ld (REC_LEN+1,sp),a 
      00179B CD 1D 97         [ 4]  510 	call search_name 
      00179E 5D               [ 2]  511 	tnzw x 
      00179F 27 EE            [ 1]  512 	jreq 0$ 
      0017A1 F6               [ 1]  513 	ld a,(x)
      0017A2 2A 05            [ 1]  514 	jrpl 2$
      0017A4 A6 11            [ 1]  515 	ld a,#ERR_RD_ONLY 
      0017A6 CC 16 68         [ 2]  516 	jp tb_error 
      0017A9                        517 2$:
      0017A9 72 FB 03         [ 2]  518 	addw x,(REC_LEN,sp)
      0017AC 1D 00 03         [ 2]  519 	subw x,#CELL_SIZE 
      0017AF CF 00 19         [ 2]  520 	ldw ptr16,x
      0017B2                        521 	_xpop 
      0017B2 90 F6            [ 1]    1     ld a,(y)
      0017B4 93               [ 1]    2     ldw x,y 
      0017B5 EE 01            [ 2]    3     ldw x,(1,x)
      0017B7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0017BB 72 C7 00 19      [ 4]  522 	ld [ptr16],a 
      0017BF 72 5C 00 1A      [ 1]  523 	inc ptr8 
      0017C3 72 CF 00 19      [ 5]  524 	ldw [ptr16],x 
      0017C7                        525 9$: _drop VSIZE 	
      0017C7 5B 04            [ 2]    1     addw sp,#VSIZE 
      0017C9 81               [ 4]  526 	ret 
                                    527 
                                    528 
                                    529 ;--------------------------
                                    530 ; extract next token from
                                    531 ; token list 
                                    532 ; basicptr -> base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    533 ; in  -> offset in list array 
                                    534 ; output:
                                    535 ;   A 		token attribute
                                    536 ;   X 		*token_value 
                                    537 ;----------------------------------------
      0017CA                        538 next_token::
                                    539 ;	clrw x 
      0017CA C6 00 01         [ 1]  540 	ld a,in 
      0017CD C7 00 02         [ 1]  541 	ld in.saved,a ; in case "_unget_token" needed 
                                    542 ; don't replace sub by "cp a,count" 
                                    543 ; if end of line must return with A=0   	
      0017D0 C0 00 03         [ 1]  544 	sub a,count 
      0017D3 27 0D            [ 1]  545 	jreq 9$ ; end of line 
      0017D5                        546 0$: 
      0017D5 CE 00 04         [ 2]  547 	ldw x,basicptr 
      0017D8 72 BB 00 00      [ 2]  548 	addw x,in.w 
      0017DC F6               [ 1]  549 	ld a,(x)
      0017DD 5C               [ 1]  550 	incw x
      0017DE 72 5C 00 01      [ 1]  551 	inc in   
      0017E2 81               [ 4]  552 9$: ret 
                                    553 
                                    554 ;-------------------------
                                    555 ;  skip .asciz in BASIC line 
                                    556 ;  name 
                                    557 ;  input:
                                    558 ;     x		* string 
                                    559 ;  output:
                                    560 ;     none 
                                    561 ;-------------------------
      0017E3                        562 skip_string:
      0017E3 F6               [ 1]  563 	ld a,(x)
      0017E4 27 03            [ 1]  564 	jreq 1$
      0017E6 5C               [ 1]  565 	incw x 
      0017E7 20 FA            [ 2]  566 	jra skip_string 
      0017E9 5C               [ 1]  567 1$: incw x 	
      0017EA 72 B0 00 04      [ 2]  568 	subw x,basicptr 
      0017EE CF 00 00         [ 2]  569 	ldw in.w,x 
      0017F1 81               [ 4]  570 	ret 
                                    571 
                                    572 ;---------------------
                                    573 ; extract 16 bits  
                                    574 ; address from BASIC
                                    575 ; code 
                                    576 ; input:
                                    577 ;    X    *address
                                    578 ; output:
                                    579 ;    X    address 
                                    580 ;-------------------- 
      0017F2                        581 get_addr:
      0017F2 FE               [ 2]  582 	ldw x,(x)
      0017F3 72 5C 00 01      [ 1]  583 	inc in 
      0017F7 72 5C 00 01      [ 1]  584 	inc in 
      0017FB 81               [ 4]  585 	ret 
                                    586 
                                    587 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    588 ; extract int24_t  
                                    589 ; value from BASIC 
                                    590 ; code 
                                    591 ; input:
                                    592 ;    X   *integer 
                                    593 ; output:
                                    594 ;    A:X   int24  
                                    595 ;--------------------
      0017FC                        596 get_int24:
      0017FC F6               [ 1]  597 	ld a,(x)
      0017FD EE 01            [ 2]  598 	ldw x,(1,x)
                                    599 ; skip 3 bytes 
      0017FF 72 5C 00 01      [ 1]  600 	inc in 
      001803 72 5C 00 01      [ 1]  601 	inc in 
      001807 72 5C 00 01      [ 1]  602 	inc in 
      00180B 81               [ 4]  603 	ret 
                                    604 
                                    605 ;-------------------------
                                    606 ; get character from 
                                    607 ; BASIC code 
                                    608 ; input:
                                    609 ;    X   *char 
                                    610 ; output:
                                    611 ;    A    char 
                                    612 ;-------------------------
      00180C                        613 get_char:
      00180C F6               [ 1]  614 	ld a,(x)
      00180D 72 5C 00 01      [ 1]  615 	inc in  
      001811 81               [ 4]  616     ret 
                                    617 
                                    618 ;-----------------------------------
                                    619 ; print a 16 bit integer 
                                    620 ; using variable 'base' as conversion
                                    621 ; format.
                                    622 ; input:
                                    623 ;    X       integer to print 
                                    624 ;   'base'    conversion base 
                                    625 ; output:
                                    626 ;   terminal  
                                    627 ;-----------------------------------
      001812                        628 prt_i16:
      001812 72 5F 00 0C      [ 1]  629 	clr acc24 
      001816 CF 00 0D         [ 2]  630 	ldw acc16,x 
      001819 A6 10            [ 1]  631 	ld a,#16
      00181B C1 00 0A         [ 1]  632 	cp a,base
      00181E 27 09            [ 1]  633 	jreq prt_acc24  
      001820 72 0F 00 0D 04   [ 2]  634 	btjf acc16,#7,prt_acc24
      001825 72 53 00 0C      [ 1]  635 	cpl acc24 ; sign extend 
                                    636 	
                                    637 ;------------------------------------
                                    638 ; print integer in acc24 
                                    639 ; input:
                                    640 ;	acc24 		integer to print 
                                    641 ;	'base' 		numerical base for conversion 
                                    642 ;   'tab_width' field width 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    643 ;    A 			signed||unsigned conversion
                                    644 ;  output:
                                    645 ;    A          string length
                                    646 ;------------------------------------
      001829                        647 prt_acc24:
      001829 A6 FF            [ 1]  648 	ld a,#255  ; signed conversion  
      00182B CD 18 4F         [ 4]  649     call itoa  ; conversion entier en  .asciz
      00182E CD 11 40         [ 4]  650 	call right_align  
      001831 88               [ 1]  651 	push a 
      001832 CD 09 68         [ 4]  652 	call puts
      001835 84               [ 1]  653 	pop a 
      001836 81               [ 4]  654     ret	
                                    655 
                                    656 ;---------------------------------------
                                    657 ;  print value at xstack top 
                                    658 ;---------------------------------------
      001837                        659 print_top: 
      001837                        660 	_xpop 
      001837 90 F6            [ 1]    1     ld a,(y)
      001839 93               [ 1]    2     ldw x,y 
      00183A EE 01            [ 2]    3     ldw x,(1,x)
      00183C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001840 C7 00 0C         [ 1]  661 	ld acc24,a 
      001843 CF 00 0D         [ 2]  662 	ldw acc16,x 
      001846 CD 18 29         [ 4]  663 	call prt_acc24 
      001849 A6 20            [ 1]  664 	ld a,#SPACE
      00184B CD 09 0B         [ 4]  665 	call putc 
      00184E 81               [ 4]  666 	ret 
                                    667 
                                    668 ;------------------------------------
                                    669 ; convert integer in acc24 to string
                                    670 ; input:
                                    671 ;   'base'	conversion base 
                                    672 ;	acc24	integer to convert
                                    673 ;   A       0=unsigned, else signed 
                                    674 ; output:
                                    675 ;   X  		pointer to first char of string
                                    676 ;   A       string length
                                    677 ;------------------------------------
                           000001   678 	SIGN=1  ; integer sign 
                           000002   679 	LEN=2 
                           000003   680 	PSTR=3
                           000004   681 	VSIZE=4 ;locals size
      00184F                        682 itoa::
      00184F                        683 	_vars VSIZE
      00184F 52 04            [ 2]    1     sub sp,#VSIZE 
      001851 0F 02            [ 1]  684 	clr (LEN,sp) ; string length  
      001853 0F 01            [ 1]  685 	clr (SIGN,sp)    ; sign
      001855 4D               [ 1]  686 	tnz A
      001856 27 11            [ 1]  687 	jreq 1$ ; unsigned conversion  
      001858 C6 00 0A         [ 1]  688 	ld a,base 
      00185B A1 0A            [ 1]  689 	cp a,#10
      00185D 26 0A            [ 1]  690 	jrne 1$
                                    691 	; base 10 string display with negative sign if bit 23==1
      00185F 72 0F 00 0C 05   [ 2]  692 	btjf acc24,#7,1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      001864 03 01            [ 1]  693 	cpl (SIGN,sp)
      001866 CD 02 18         [ 4]  694 	call neg_acc24
      001869                        695 1$:
                                    696 ; initialize string pointer 
      001869 AE 16 90         [ 2]  697 	ldw x,#tib 
      00186C 1C 00 50         [ 2]  698 	addw x,#TIB_SIZE
      00186F 5A               [ 2]  699 	decw x 
      001870 7F               [ 1]  700 	clr (x)
      001871                        701 itoa_loop:
      001871 C6 00 0A         [ 1]  702     ld a,base
                                    703 ;	ldw (PSTR,sp),x 
      001874 CD 02 E4         [ 4]  704     call divu24_8 ; acc24/A 
                                    705 ;	ldw x,(PSTR,sp)
      001877 AB 30            [ 1]  706     add a,#'0  ; remainder of division
      001879 A1 3A            [ 1]  707     cp a,#'9+1
      00187B 2B 02            [ 1]  708     jrmi 2$
      00187D AB 07            [ 1]  709     add a,#7 
      00187F                        710 2$:	
      00187F 5A               [ 2]  711 	decw x
      001880 F7               [ 1]  712     ld (x),a
      001881 0C 02            [ 1]  713 	inc (LEN,sp)
                                    714 	; if acc24==0 conversion done
      001883 C6 00 0C         [ 1]  715 	ld a,acc24
      001886 CA 00 0D         [ 1]  716 	or a,acc16
      001889 CA 00 0E         [ 1]  717 	or a,acc8
      00188C 26 E3            [ 1]  718     jrne itoa_loop
                                    719 	;conversion done, next add '$' or '-' as required
      00188E C6 00 0A         [ 1]  720 	ld a,base 
      001891 A1 10            [ 1]  721 	cp a,#16
      001893 27 08            [ 1]  722 	jreq 8$
      001895 7B 01            [ 1]  723 	ld a,(SIGN,sp)
      001897 27 0A            [ 1]  724     jreq 10$
      001899 A6 2D            [ 1]  725     ld a,#'-
      00189B 20 02            [ 2]  726 	jra 9$ 
      00189D                        727 8$:	
      00189D A6 24            [ 1]  728 	ld a,#'$ 
      00189F 5A               [ 2]  729 9$: decw x
      0018A0 F7               [ 1]  730     ld (x),a
      0018A1 0C 02            [ 1]  731 	inc (LEN,sp)
      0018A3                        732 10$:
      0018A3 7B 02            [ 1]  733 	ld a,(LEN,sp)
      0018A5                        734 	_drop VSIZE
      0018A5 5B 04            [ 2]    1     addw sp,#VSIZE 
      0018A7 81               [ 4]  735 	ret
                                    736 
                                    737 ;------------------------------------
                                    738 ; convert alpha to uppercase
                                    739 ; input:
                                    740 ;    a  character to convert
                                    741 ; output:
                                    742 ;    a  uppercase character
                                    743 ;------------------------------------
      0018A8                        744 to_upper::
      0018A8 A1 61            [ 1]  745 	cp a,#'a
      0018AA 2A 01            [ 1]  746 	jrpl 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0018AC 81               [ 4]  747 0$:	ret
      0018AD A1 7A            [ 1]  748 1$: cp a,#'z	
      0018AF 22 FB            [ 1]  749 	jrugt 0$
      0018B1 A0 20            [ 1]  750 	sub a,#32
      0018B3 81               [ 4]  751 	ret
                                    752 	
                                    753 ;------------------------------------
                                    754 ; convert pad content in integer
                                    755 ; input:
                                    756 ;    x		* .asciz to convert
                                    757 ; output:
                                    758 ;    acc24      int24_t
                                    759 ;------------------------------------
                                    760 	; local variables
                           000001   761 	SIGN=1 ; 1 byte, 
                           000002   762 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   763 	TEMP=3 ; 1 byte, temporary storage
                           000004   764 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   765 	VSIZE=5 ; 5 bytes reserved for local storage
      0018B4                        766 atoi24::
      0018B4                        767 	_vars VSIZE
      0018B4 52 05            [ 2]    1     sub sp,#VSIZE 
      0018B6 1F 04            [ 2]  768 	ldw (XTEMP,sp),x 
                                    769 ; conversion made on xstack 
      0018B8 4F               [ 1]  770 	clr a 
      0018B9 5F               [ 1]  771 	clrw x 
      0018BA                        772 	_xpush 
      0018BA 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018BE 90 F7            [ 1]    2     ld (y),a 
      0018C0 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018C3 0F 01            [ 1]  773 	clr (SIGN,sp)
      0018C5 A6 0A            [ 1]  774 	ld a,#10
      0018C7 6B 02            [ 1]  775 	ld (BASE,sp),a ; default base decimal
      0018C9 1E 04            [ 2]  776 	ldw x,(XTEMP,sp)
      0018CB F6               [ 1]  777 	ld a,(x)
      0018CC 27 4E            [ 1]  778 	jreq 9$  ; completed if 0
      0018CE A1 2D            [ 1]  779 	cp a,#'-
      0018D0 26 04            [ 1]  780 	jrne 1$
      0018D2 03 01            [ 1]  781 	cpl (SIGN,sp)
      0018D4 20 08            [ 2]  782 	jra 2$
      0018D6 A1 24            [ 1]  783 1$: cp a,#'$
      0018D8 26 08            [ 1]  784 	jrne 3$
      0018DA A6 10            [ 1]  785 	ld a,#16
      0018DC 6B 02            [ 1]  786 	ld (BASE,sp),a
      0018DE 5C               [ 1]  787 2$:	incw x
      0018DF 1F 04            [ 2]  788 	ldw (XTEMP,sp),x 
      0018E1 F6               [ 1]  789 	ld a,(x)
      0018E2                        790 3$:	; char to digit 
      0018E2 A1 61            [ 1]  791 	cp a,#'a
      0018E4 2B 02            [ 1]  792 	jrmi 4$
      0018E6 A0 20            [ 1]  793 	sub a,#32
      0018E8 A1 30            [ 1]  794 4$:	cp a,#'0
      0018EA 2B 30            [ 1]  795 	jrmi 9$
      0018EC A0 30            [ 1]  796 	sub a,#'0
      0018EE A1 0A            [ 1]  797 	cp a,#10
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0018F0 2B 06            [ 1]  798 	jrmi 5$
      0018F2 A0 07            [ 1]  799 	sub a,#7
      0018F4 11 02            [ 1]  800 	cp a,(BASE,sp)
      0018F6 2A 24            [ 1]  801 	jrpl 9$
      0018F8 6B 03            [ 1]  802 5$:	ld (TEMP,sp),a
      0018FA 7B 02            [ 1]  803 	ld a,(BASE,sp)
      0018FC CD 02 35         [ 4]  804 	call mulu24_8
      0018FF                        805 	_xpush 
      0018FF 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001903 90 F7            [ 1]    2     ld (y),a 
      001905 90 EF 01         [ 2]    3     ldw (1,y),x 
      001908 5F               [ 1]  806 	clrw x 
      001909 7B 03            [ 1]  807 	ld a,(TEMP,sp)
      00190B 02               [ 1]  808 	rlwa x 
      00190C                        809 	_xpush 
      00190C 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001910 90 F7            [ 1]    2     ld (y),a 
      001912 90 EF 01         [ 2]    3     ldw (1,y),x 
      001915 CD 01 79         [ 4]  810 	call add24 
      001918 1E 04            [ 2]  811 	ldw x,(XTEMP,sp)
      00191A 20 C2            [ 2]  812 	jra 2$
      00191C 0D 01            [ 1]  813 9$:	tnz (SIGN,sp)
      00191E 27 03            [ 1]  814     jreq atoi_exit
      001920 CD 01 FE         [ 4]  815     call neg24
      001923                        816 atoi_exit:
      001923                        817 	_xpop 
      001923 90 F6            [ 1]    1     ld a,(y)
      001925 93               [ 1]    2     ldw x,y 
      001926 EE 01            [ 2]    3     ldw x,(1,x)
      001928 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00192C C7 00 0C         [ 1]  818 	ld acc24,a 
      00192F CF 00 0D         [ 2]  819 	ldw acc16,x  
      001932                        820 	_drop VSIZE
      001932 5B 05            [ 2]    1     addw sp,#VSIZE 
      001934 81               [ 4]  821 	ret
                                    822 
                                    823 
                                    824 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    825 ;;   TINY BASIC  operators,
                                    826 ;;   commands and functions 
                                    827 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    828 
                                    829 ;---------------------------------
                                    830 ; dictionary search 
                                    831 ; input:
                                    832 ;	X 		dictionary entry point, name field  
                                    833 ;   y		.asciz name to search 
                                    834 ; output:
                                    835 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    836 ;  X		routine address|TK_OP 
                                    837 ;---------------------------------
                           000001   838 	NLEN=1 ; cmd length 
                           000002   839 	XSAVE=2
                           000004   840 	YSAVE=4
                           000005   841 	VSIZE=5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001935                        842 search_dict::
      001935                        843 	_vars VSIZE 
      001935 52 05            [ 2]    1     sub sp,#VSIZE 
      001937 17 04            [ 2]  844 	ldw (YSAVE,sp),y 
      001939                        845 search_next:
      001939 1F 02            [ 2]  846 	ldw (XSAVE,sp),x 
                                    847 ; get name length in dictionary	
      00193B F6               [ 1]  848 	ld a,(x)
      00193C A4 0F            [ 1]  849 	and a,#0xf 
      00193E 6B 01            [ 1]  850 	ld (NLEN,sp),a  
      001940 16 04            [ 2]  851 	ldw y,(YSAVE,sp) ; name pointer 
      001942 5C               [ 1]  852 	incw x 
      001943                        853 cp_loop:
      001943 90 F6            [ 1]  854 	ld a,(y)
      001945 27 1B            [ 1]  855 	jreq str_match 
      001947 0D 01            [ 1]  856 	tnz (NLEN,sp)
      001949 27 0A            [ 1]  857 	jreq no_match  
      00194B F1               [ 1]  858 	cp a,(x)
      00194C 26 07            [ 1]  859 	jrne no_match 
      00194E 90 5C            [ 1]  860 	incw y 
      001950 5C               [ 1]  861 	incw x
      001951 0A 01            [ 1]  862 	dec (NLEN,sp)
      001953 20 EE            [ 2]  863 	jra cp_loop 
      001955                        864 no_match:
      001955 1E 02            [ 2]  865 	ldw x,(XSAVE,sp) 
      001957 1D 00 02         [ 2]  866 	subw x,#2 ; move X to link field
      00195A 4B 00            [ 1]  867 	push #TK_NONE 
      00195C FE               [ 2]  868 	ldw x,(x) ; next word link 
      00195D 84               [ 1]  869 	pop a ; TK_NONE 
      00195E 27 1D            [ 1]  870 	jreq search_exit  ; not found  
                                    871 ;try next 
      001960 20 D7            [ 2]  872 	jra search_next
      001962                        873 str_match:
      001962 1E 02            [ 2]  874 	ldw x,(XSAVE,sp)
      001964 F6               [ 1]  875 	ld a,(X)
      001965 6B 01            [ 1]  876 	ld (NLEN,sp),a ; needed to test keyword type  
      001967 A4 0F            [ 1]  877 	and a,#NLEN_MASK 
                                    878 ; move x to procedure address field 	
      001969 4C               [ 1]  879 	inc a 
      00196A C7 00 0E         [ 1]  880 	ld acc8,a 
      00196D 72 5F 00 0D      [ 1]  881 	clr acc16 
      001971 72 BB 00 0D      [ 2]  882 	addw x,acc16 
      001975 FE               [ 2]  883 	ldw x,(x) ; routine address  
                                    884 ;determine keyword type bits 7:4 
      001976 7B 01            [ 1]  885 	ld a,(NLEN,sp)
      001978 A4 F0            [ 1]  886 	and a,#KW_TYPE_MASK 
      00197A 4E               [ 1]  887 	swap a 
      00197B AB 80            [ 1]  888 	add a,#128
      00197D                        889 search_exit: 
      00197D                        890 	_drop VSIZE 
      00197D 5B 05            [ 2]    1     addw sp,#VSIZE 
      00197F 81               [ 4]  891 	ret 
                                    892 
                                    893 ;---------------------
                                    894 ; check if next token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



                                    895 ;  is of expected type 
                                    896 ; input:
                                    897 ;   A 		 expected token attribute
                                    898 ;  ouput:
                                    899 ;   none     if fail call syntax_error 
                                    900 ;--------------------
      001980                        901 expect:
      001980 88               [ 1]  902 	push a 
      001981 CD 17 CA         [ 4]  903 	call next_token 
      001984 11 01            [ 1]  904 	cp a,(1,sp)
      001986 27 03            [ 1]  905 	jreq 1$
      001988 CC 16 66         [ 2]  906 	jp syntax_error
      00198B 84               [ 1]  907 1$: pop a 
      00198C 81               [ 4]  908 	ret 
                                    909 
                                    910 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    911 ; parse arguments list 
                                    912 ; between ()
                                    913 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00198D                        914 func_args:
      00198D A6 06            [ 1]  915 	ld a,#TK_LPAREN 
      00198F CD 19 80         [ 4]  916 	call expect 
                                    917 ; expected to continue in arg_list 
                                    918 ; caller must check for TK_RPAREN 
                                    919 
                                    920 ;-------------------------------
                                    921 ; parse embedded BASIC routines 
                                    922 ; arguments list.
                                    923 ; arg_list::=  expr[','expr]*
                                    924 ; all arguments are of int24_t type
                                    925 ; and pushed on stack 
                                    926 ; input:
                                    927 ;   none
                                    928 ; output:
                                    929 ;   xstack{n}   arguments pushed on xstack
                                    930 ;   A 	number of arguments pushed on xstack  
                                    931 ;--------------------------------
      001992                        932 arg_list:
      001992 4B 00            [ 1]  933 	push #0
      001994 CD 1B EF         [ 4]  934 1$:	call condition 
      001997 4D               [ 1]  935 	tnz a 
      001998 27 12            [ 1]  936 	jreq 7$  
      00199A 0C 01            [ 1]  937 	inc (1,sp)
      00199C CD 17 CA         [ 4]  938 	call next_token 
      00199F A1 08            [ 1]  939 	cp a,#TK_COMMA 
      0019A1 27 F1            [ 1]  940 	jreq 1$ 
      0019A3 A1 07            [ 1]  941 	cp a,#TK_RPAREN
      0019A5 27 05            [ 1]  942 	jreq 7$
      0019A7                        943 	_unget_token 
      0019A7 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0019AC 84               [ 1]  944 7$:	pop a  
      0019AD 81               [ 4]  945 	ret 
                                    946 
                                    947 ;--------------------------------
                                    948 ;   BASIC commnands 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                                    949 ;--------------------------------
                                    950 
                                    951 ;--------------------------------
                                    952 ;  arithmetic and relational 
                                    953 ;  routines
                                    954 ;  operators precedence
                                    955 ;  highest to lowest
                                    956 ;  operators on same row have 
                                    957 ;  same precedence and are executed
                                    958 ;  from left to right.
                                    959 ;	'*','/','%'
                                    960 ;   '-','+'
                                    961 ;   '=','>','<','>=','<=','<>','><'
                                    962 ;   '<>' and '><' are equivalent for not equal.
                                    963 ;--------------------------------
                                    964 
                                    965 ;---------------------
                                    966 ; return array element
                                    967 ; address from @(expr)
                                    968 ; input:
                                    969 ;   A 		TK_ARRAY
                                    970 ; output:
                                    971 ;	X 		element address 
                                    972 ;----------------------
      0019AE                        973 get_array_element:
      0019AE CD 19 8D         [ 4]  974 	call func_args 
      0019B1 A1 01            [ 1]  975 	cp a,#1
      0019B3 27 03            [ 1]  976 	jreq 1$
      0019B5 CC 16 66         [ 2]  977 	jp syntax_error
      0019B8                        978 1$: _xpop 
      0019B8 90 F6            [ 1]    1     ld a,(y)
      0019BA 93               [ 1]    2     ldw x,y 
      0019BB EE 01            [ 2]    3     ldw x,(1,x)
      0019BD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    979     ; ignore A, index < 65536 in any case 
                                    980 	; check for bounds 
      0019C1 C3 00 20         [ 2]  981 	cpw x,array_size 
      0019C4 23 05            [ 2]  982 	jrule 3$
                                    983 ; bounds {1..array_size}	
      0019C6 A6 0A            [ 1]  984 2$: ld a,#ERR_BAD_VALUE 
      0019C8 CC 16 68         [ 2]  985 	jp tb_error 
      0019CB 5D               [ 2]  986 3$: tnzw  x
      0019CC 27 F8            [ 1]  987 	jreq 2$ 
      0019CE 89               [ 2]  988 	pushw x 
      0019CF 58               [ 2]  989 	sllw x 
      0019D0 72 FB 01         [ 2]  990 	addw x,(1,sp) ; index*size_of(int24)
      0019D3 1F 01            [ 2]  991 	ldw (1,sp),x  
      0019D5 AE 16 90         [ 2]  992 	ldw x,#tib ; array is below tib 
      0019D8 72 F0 01         [ 2]  993 	subw x,(1,sp)
      0019DB                        994 	_drop 2   
      0019DB 5B 02            [ 2]    1     addw sp,#2 
      0019DD 81               [ 4]  995 	ret 
                                    996 
                                    997 
                                    998 ;***********************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



                                    999 ;   expression parse,execute 
                                   1000 ;***********************************
                                   1001 ;-----------------------------------
                                   1002 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1003 ;			 integer | function |
                                   1004 ;			 '('relation')' 
                                   1005 ; output:
                                   1006 ;   A       token attribute 
                                   1007 ;   xstack  value  
                                   1008 ; ---------------------------------
                           000001  1009 	NEG=1
                           000001  1010 	VSIZE=1
      0019DE                       1011 factor:
      0019DE                       1012 	_vars VSIZE 
      0019DE 52 01            [ 2]    1     sub sp,#VSIZE 
      0019E0 0F 01            [ 1] 1013 	clr (NEG,sp)
      0019E2 CD 17 CA         [ 4] 1014 	call next_token
      0019E5 4D               [ 1] 1015 	tnz a 
      0019E6 26 03            [ 1] 1016 	jrne 1$ 
      0019E8 CC 1A 90         [ 2] 1017 	jp 22$ 
      0019EB A1 10            [ 1] 1018 1$:	cp a,#TK_PLUS 
      0019ED 27 06            [ 1] 1019 	jreq 2$
      0019EF A1 11            [ 1] 1020 	cp a,#TK_MINUS 
      0019F1 26 05            [ 1] 1021 	jrne 4$ 
      0019F3 03 01            [ 1] 1022 	cpl (NEG,sp)
      0019F5                       1023 2$:	
      0019F5 CD 17 CA         [ 4] 1024 	call next_token
      0019F8                       1025 4$:
      0019F8 4D               [ 1] 1026 	tnz a 
      0019F9 26 03            [ 1] 1027 	jrne 41$ 
      0019FB CC 16 66         [ 2] 1028 	jp syntax_error  
      0019FE                       1029 41$:	
      0019FE A1 81            [ 1] 1030 	cp a,#TK_IFUNC 
      001A00 26 0C            [ 1] 1031 	jrne 5$ 
      001A02                       1032 	_get_code_addr 
      001A02 FE               [ 2]    1         ldw x,(x)
      001A03 72 5C 00 01      [ 1]    2         inc in 
      001A07 72 5C 00 01      [ 1]    3         inc in 
      001A0B FD               [ 4] 1033 	call (x); result in A:X  
      001A0C 20 70            [ 2] 1034 	jra 18$ 
      001A0E                       1035 5$:
      001A0E A1 84            [ 1] 1036 	cp a,#TK_INTGR
      001A10 26 05            [ 1] 1037 	jrne 6$
      001A12 CD 17 FC         [ 4] 1038 	call get_int24 ; A:X
      001A15 20 67            [ 2] 1039 	jra 18$
      001A17                       1040 6$:
      001A17 A1 05            [ 1] 1041 	cp a,#TK_ARRAY
      001A19 26 05            [ 1] 1042 	jrne 7$
      001A1B CD 19 AE         [ 4] 1043 	call get_array_element
      001A1E 20 07            [ 2] 1044     jra 71$
      001A20                       1045 7$:
      001A20 A1 85            [ 1] 1046 	cp a,#TK_VAR 
      001A22 26 08            [ 1] 1047 	jrne 8$
      001A24 CD 17 F2         [ 4] 1048 	call get_addr 
      001A27                       1049 71$: ; put value in A:X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001A27 F6               [ 1] 1050 	ld a,(x)
      001A28 EE 01            [ 2] 1051 	ldw x,(1,x)
      001A2A 20 52            [ 2] 1052 	jra 18$
      001A2C                       1053 8$:
      001A2C A1 03            [ 1] 1054 	cp a,#TK_LABEL 
      001A2E 26 1D            [ 1] 1055 	jrne 9$
      001A30 90 89            [ 2] 1056 	pushw y  
      001A32 89               [ 2] 1057 	pushw x 
      001A33 CD 17 E3         [ 4] 1058 	call skip_string
      001A36 85               [ 2] 1059 	popw x  
      001A37 CD 13 86         [ 4] 1060 	call strlen 
      001A3A AB 05            [ 1] 1061 	add a,#REC_XTRA_BYTES
      001A3C CD 1D 97         [ 4] 1062 	call search_name
      001A3F 5D               [ 2] 1063 	tnzw x 
      001A40 26 04            [ 1] 1064 	jrne 82$ 
      001A42 90 85            [ 2] 1065 	popw y 
      001A44 20 30            [ 2] 1066 	jra 16$
      001A46                       1067 82$:
      001A46 90 85            [ 2] 1068 	popw y   
      001A48 CD 1C F1         [ 4] 1069 	call get_value ; in A:X 
      001A4B 20 31            [ 2] 1070 	jra 18$
      001A4D                       1071 9$: 
      001A4D A1 82            [ 1] 1072 	cp a,#TK_CFUNC 
      001A4F 26 0E            [ 1] 1073 	jrne 12$
      001A51                       1074 	_get_code_addr 
      001A51 FE               [ 2]    1         ldw x,(x)
      001A52 72 5C 00 01      [ 1]    2         inc in 
      001A56 72 5C 00 01      [ 1]    3         inc in 
      001A5A FD               [ 4] 1075 	call(x)
      001A5B 5F               [ 1] 1076 	clrw x 
      001A5C 02               [ 1] 1077 	rlwa x  ; char>int24 in A:X 
      001A5D 20 1F            [ 2] 1078 	jra 18$ 	 
      001A5F                       1079 12$:			
      001A5F A1 06            [ 1] 1080 	cp a,#TK_LPAREN
      001A61 26 13            [ 1] 1081 	jrne 16$
      001A63 CD 1A D6         [ 4] 1082 	call expression
      001A66 A6 07            [ 1] 1083 	ld a,#TK_RPAREN 
      001A68 CD 19 80         [ 4] 1084 	call expect
      001A6B                       1085 	_xpop 
      001A6B 90 F6            [ 1]    1     ld a,(y)
      001A6D 93               [ 1]    2     ldw x,y 
      001A6E EE 01            [ 2]    3     ldw x,(1,x)
      001A70 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A74 20 08            [ 2] 1086 	jra 18$	
      001A76                       1087 16$:
      001A76                       1088 	_unget_token 
      001A76 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A7B 4F               [ 1] 1089 	clr a 
      001A7C 20 12            [ 2] 1090 	jra 22$ 
      001A7E                       1091 18$: 
      001A7E 0D 01            [ 1] 1092 	tnz (NEG,sp)
      001A80 27 03            [ 1] 1093 	jreq 20$
      001A82 CD 02 10         [ 4] 1094 	call neg_ax   
      001A85                       1095 20$:
      001A85                       1096 	_xpush 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001A85 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001A89 90 F7            [ 1]    2     ld (y),a 
      001A8B 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A8E A6 84            [ 1] 1097 	ld a,#TK_INTGR
      001A90                       1098 22$:
      001A90                       1099 	_drop VSIZE
      001A90 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A92 81               [ 4] 1100 	ret
                                   1101 
                                   1102 
                                   1103 ;-----------------------------------
                                   1104 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1105 ; output:
                                   1106 ;   A    	token attribute 
                                   1107 ;	xstack		value 
                                   1108 ;-----------------------------------
                           000001  1109 	MULOP=1
                           000001  1110 	VSIZE=1
      001A93                       1111 term:
      001A93                       1112 	_vars VSIZE
      001A93 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1113 ; first factor 	
      001A95 CD 19 DE         [ 4] 1114 	call factor
      001A98 4D               [ 1] 1115 	tnz a 
      001A99 27 38            [ 1] 1116 	jreq term_exit  
      001A9B                       1117 term01:	 ; check for  operator '*'|'/'|'%' 
      001A9B CD 17 CA         [ 4] 1118 	call next_token
      001A9E 6B 01            [ 1] 1119 	ld (MULOP,sp),a
      001AA0 A4 30            [ 1] 1120 	and a,#TK_GRP_MASK
      001AA2 A1 20            [ 1] 1121 	cp a,#TK_GRP_MULT
      001AA4 27 09            [ 1] 1122 	jreq 1$
      001AA6 A6 84            [ 1] 1123 	ld a,#TK_INTGR
      001AA8                       1124 	_unget_token 
      001AA8 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AAD 20 24            [ 2] 1125 	jra term_exit 
      001AAF                       1126 1$:	; got *|/|%
                                   1127 ;second factor
      001AAF CD 19 DE         [ 4] 1128 	call factor
      001AB2 4D               [ 1] 1129 	tnz a 
      001AB3 26 03            [ 1] 1130 	jrne 2$ 
      001AB5 CC 16 66         [ 2] 1131 	jp syntax_error 
      001AB8                       1132 2$: ; select operation 	
      001AB8 7B 01            [ 1] 1133 	ld a,(MULOP,sp) 
      001ABA A1 20            [ 1] 1134 	cp a,#TK_MULT 
      001ABC 26 05            [ 1] 1135 	jrne 3$
                                   1136 ; '*' operator
      001ABE CD 02 74         [ 4] 1137 	call mul24 
      001AC1 20 D8            [ 2] 1138 	jra term01
      001AC3 A1 21            [ 1] 1139 3$: cp a,#TK_DIV 
      001AC5 26 05            [ 1] 1140 	jrne 4$ 
                                   1141 ; '/' operator	
      001AC7 CD 03 02         [ 4] 1142 	call div24 
      001ACA 20 CF            [ 2] 1143 	jra term01 
      001ACC                       1144 4$: ; '%' operator
      001ACC CD 03 9C         [ 4] 1145 	call mod24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001ACF 20 CA            [ 2] 1146 	jra term01 
      001AD1                       1147 9$: 
      001AD1 A6 84            [ 1] 1148 	ld a,#TK_INTGR
      001AD3                       1149 term_exit:
      001AD3                       1150 	_drop VSIZE 
      001AD3 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AD5 81               [ 4] 1151 	ret 
                                   1152 
                                   1153 ;-------------------------------
                                   1154 ;  expr ::= term [['+'|'-'] term]*
                                   1155 ;  result range {-32768..32767}
                                   1156 ;  output:
                                   1157 ;   A    token attribute 
                                   1158 ;   xstack	 result    
                                   1159 ;-------------------------------
                           000001  1160 	OP=1 
                           000001  1161 	VSIZE=1 
      001AD6                       1162 expression:
      001AD6                       1163 	_vars VSIZE 
      001AD6 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1164 ; first term 	
      001AD8 CD 1A 93         [ 4] 1165 	call term
      001ADB 4D               [ 1] 1166 	tnz a 
      001ADC 27 2D            [ 1] 1167 	jreq 9$
      001ADE                       1168 1$:	; operator '+'|'-'
      001ADE CD 17 CA         [ 4] 1169 	call next_token
      001AE1 6B 01            [ 1] 1170 	ld (OP,sp),a 
      001AE3 A4 30            [ 1] 1171 	and a,#TK_GRP_MASK
      001AE5 A1 10            [ 1] 1172 	cp a,#TK_GRP_ADD 
      001AE7 27 09            [ 1] 1173 	jreq 2$ 
      001AE9                       1174 	_unget_token 
      001AE9 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AEE A6 84            [ 1] 1175 	ld a,#TK_INTGR
      001AF0 20 19            [ 2] 1176 	jra 9$ 
      001AF2                       1177 2$: ; second term 
      001AF2 CD 1A 93         [ 4] 1178 	call term
      001AF5 4D               [ 1] 1179 	tnz a 
      001AF6 26 03            [ 1] 1180 	jrne 3$
      001AF8 CC 16 66         [ 2] 1181 	jp syntax_error
      001AFB                       1182 3$:
      001AFB 7B 01            [ 1] 1183 	ld a,(OP,sp)
      001AFD A1 10            [ 1] 1184 	cp a,#TK_PLUS 
      001AFF 26 05            [ 1] 1185 	jrne 4$
                                   1186 ; '+' operator	
      001B01 CD 01 79         [ 4] 1187 	call add24
      001B04 20 D8            [ 2] 1188 	jra 1$ 
      001B06                       1189 4$:	; '-' operator 
      001B06 CD 01 96         [ 4] 1190 	call sub24
      001B09 20 D3            [ 2] 1191 	jra 1$
      001B0B                       1192 9$:
      001B0B                       1193 	_drop VSIZE 
      001B0B 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B0D 81               [ 4] 1194 	ret 
                                   1195 
                                   1196 ;---------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



                                   1197 ; rel ::= expr rel_op expr
                                   1198 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1199 ;  relation return  integer , zero is false 
                                   1200 ;  output:
                                   1201 ;	 xstack		value  
                                   1202 ;---------------------------------------------
                           000001  1203 	RELOP=1
                           000001  1204 	VSIZE=1 
      001B0E                       1205 relation: 
      001B0E                       1206 	_vars VSIZE
      001B0E 52 01            [ 2]    1     sub sp,#VSIZE 
      001B10 CD 1A D6         [ 4] 1207 	call expression
      001B13 4D               [ 1] 1208 	tnz a 
      001B14 27 54            [ 1] 1209 	jreq 9$ 
                                   1210 ; expect rel_op or leave 
      001B16 CD 17 CA         [ 4] 1211 	call next_token 
      001B19 6B 01            [ 1] 1212 	ld (RELOP,sp),a 
      001B1B A4 30            [ 1] 1213 	and a,#TK_GRP_MASK
      001B1D A1 30            [ 1] 1214 	cp a,#TK_GRP_RELOP 
      001B1F 27 09            [ 1] 1215 	jreq 2$
      001B21 A6 84            [ 1] 1216 	ld a,#TK_INTGR 
      001B23                       1217 	_unget_token 
      001B23 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B28 20 40            [ 2] 1218 	jra 9$ 
      001B2A                       1219 2$:	; expect another expression
      001B2A CD 1A D6         [ 4] 1220 	call expression
      001B2D 4D               [ 1] 1221 	tnz a 
      001B2E 26 03            [ 1] 1222 	jrne 3$
      001B30 CC 16 66         [ 2] 1223 	jp syntax_error 
      001B33                       1224 3$: 
      001B33 CD 01 B3         [ 4] 1225 	call cp24 
      001B36                       1226 	_xpop  
      001B36 90 F6            [ 1]    1     ld a,(y)
      001B38 93               [ 1]    2     ldw x,y 
      001B39 EE 01            [ 2]    3     ldw x,(1,x)
      001B3B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B3F 4D               [ 1] 1227 	tnz a 
      001B40 2B 08            [ 1] 1228 	jrmi 4$
      001B42 26 0C            [ 1] 1229 	jrne 5$
      001B44 35 02 00 0E      [ 1] 1230 	mov acc8,#2 ; i1==i2
      001B48 20 0A            [ 2] 1231 	jra 6$ 
      001B4A                       1232 4$: ; i1<i2
      001B4A 35 04 00 0E      [ 1] 1233 	mov acc8,#4 
      001B4E 20 04            [ 2] 1234 	jra 6$
      001B50                       1235 5$: ; i1>i2
      001B50 35 01 00 0E      [ 1] 1236 	mov acc8,#1  
      001B54                       1237 6$: ; 0=false, -1=true 
      001B54 5F               [ 1] 1238 	clrw x 
      001B55 C6 00 0E         [ 1] 1239 	ld a, acc8  
      001B58 14 01            [ 1] 1240 	and a,(RELOP,sp)
      001B5A 27 03            [ 1] 1241 	jreq 7$
      001B5C 53               [ 2] 1242 	cplw x 
      001B5D A6 FF            [ 1] 1243 	ld a,#255 
      001B5F                       1244 7$:	_xpush 
      001B5F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001B63 90 F7            [ 1]    2     ld (y),a 
      001B65 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B68 A6 84            [ 1] 1245 	ld a,#TK_INTGR
      001B6A                       1246 9$: 
      001B6A                       1247 	_drop VSIZE
      001B6A 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B6C 81               [ 4] 1248 	ret 
                                   1249 
                                   1250 ;-------------------------------------------
                                   1251 ;  AND factor:  [NOT] relation | (condition)
                                   1252 ;  output:
                                   1253 ;     A      TK_INTGR|0
                                   1254 ;-------------------------------------------
                           000001  1255 	NOT_OP=1
      001B6D                       1256 and_factor:
      001B6D 4B 00            [ 1] 1257 	push #0 
      001B6F CD 17 CA         [ 4] 1258 0$:	call next_token  
      001B72 4D               [ 1] 1259 	tnz a 
      001B73 27 25            [ 1] 1260 	jreq 8$ 
      001B75 A1 87            [ 1] 1261 	cp a,#TK_NOT 
      001B77 26 04            [ 1] 1262 	jrne 1$ 
      001B79 03 01            [ 1] 1263 	cpl (NOT_OP,sp)
      001B7B 20 F2            [ 2] 1264 	jra 0$ 
      001B7D                       1265 1$:	
      001B7D A1 06            [ 1] 1266 	cp a,#TK_LPAREN 
      001B7F 26 0A            [ 1] 1267 	jrne 2$
      001B81 CD 1B EF         [ 4] 1268 	call condition
      001B84 A6 07            [ 1] 1269 	ld a,#TK_RPAREN 
      001B86 CD 19 80         [ 4] 1270 	call expect
      001B89 20 08            [ 2] 1271 	jra 3$
      001B8B                       1272 2$: _unget_token 
      001B8B 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B90 CD 1B 0E         [ 4] 1273 	call relation
      001B93                       1274 3$:
      001B93 0D 01            [ 1] 1275 	tnz (NOT_OP,sp)
      001B95 27 03            [ 1] 1276 	jreq 8$ 
      001B97 CD 01 F5         [ 4] 1277 	call cpl24
      001B9A                       1278 8$:
      001B9A                       1279 	_drop 1  
      001B9A 5B 01            [ 2]    1     addw sp,#1 
      001B9C 81               [ 4] 1280     ret 
                                   1281 
                                   1282 
                                   1283 ;--------------------------------------------
                                   1284 ;  AND operator as priority over OR||XOR 
                                   1285 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1286 ;          
                                   1287 ;  output:
                                   1288 ;     A     TK_INTGR|0
                                   1289 ;    xtack   value 
                                   1290 ;--------------------------------------------
      001B9D                       1291 and_cond:
      001B9D CD 1B 6D         [ 4] 1292 	call and_factor
      001BA0 4D               [ 1] 1293 	tnz a 
      001BA1 27 4B            [ 1] 1294 	jreq 9$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001BA3 CD 17 CA         [ 4] 1295 1$: call next_token 
      001BA6 4D               [ 1] 1296 	tnz a 
      001BA7 27 43            [ 1] 1297 	jreq 6$ 
      001BA9 A1 88            [ 1] 1298 	cp a,#TK_AND 
      001BAB 27 07            [ 1] 1299 	jreq 3$
      001BAD                       1300 	_unget_token 
      001BAD 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BB2 20 38            [ 2] 1301 	jra 6$ 
      001BB4 CD 1B 6D         [ 4] 1302 3$:	call and_factor  
      001BB7 4D               [ 1] 1303 	tnz a 
      001BB8 26 03            [ 1] 1304 	jrne 4$
      001BBA CC 16 66         [ 2] 1305 	jp syntax_error 
      001BBD                       1306 4$:	
      001BBD                       1307 	_xpop 
      001BBD 90 F6            [ 1]    1     ld a,(y)
      001BBF 93               [ 1]    2     ldw x,y 
      001BC0 EE 01            [ 2]    3     ldw x,(1,x)
      001BC2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BC6 C7 00 0C         [ 1] 1308 	ld acc24,a 
      001BC9 CF 00 0D         [ 2] 1309 	ldw acc16,x
      001BCC                       1310 	_xpop 
      001BCC 90 F6            [ 1]    1     ld a,(y)
      001BCE 93               [ 1]    2     ldw x,y 
      001BCF EE 01            [ 2]    3     ldw x,(1,x)
      001BD1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BD5 C4 00 0C         [ 1] 1311 	and a,acc24 
      001BD8 02               [ 1] 1312 	rlwa x 
      001BD9 C4 00 0D         [ 1] 1313 	and a,acc16 
      001BDC 02               [ 1] 1314 	rlwa x 
      001BDD C4 00 0E         [ 1] 1315 	and a,acc8 
      001BE0 02               [ 1] 1316 	rlwa x
      001BE1                       1317 	_xpush
      001BE1 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BE5 90 F7            [ 1]    2     ld (y),a 
      001BE7 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BEA 20 B7            [ 2] 1318 	jra 1$  
      001BEC A6 84            [ 1] 1319 6$: ld a,#TK_INTGR 
      001BEE 81               [ 4] 1320 9$:	ret 	 
                                   1321 
                                   1322 
                                   1323 ;--------------------------------------------
                                   1324 ; condition for IF and UNTIL 
                                   1325 ; operators: OR,XOR 
                                   1326 ; format:  and_cond [ OP and_cond ]* 
                                   1327 ; output:
                                   1328 ;    A        INTGR|0 
                                   1329 ;    xstack   value 
                                   1330 ;--------------------------------------------
                           000001  1331 	ATMP=1
                           000002  1332 	OP=2
                           000002  1333 	VSIZE=2 
      001BEF                       1334 condition:
      001BEF                       1335 	_vars VSIZE 
      001BEF 52 02            [ 2]    1     sub sp,#VSIZE 
      001BF1 CD 1B 9D         [ 4] 1336 	call and_cond
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001BF4 4D               [ 1] 1337 	tnz a 
      001BF5 27 69            [ 1] 1338 	jreq 9$ 
      001BF7 CD 17 CA         [ 4] 1339 1$:	call next_token 
      001BFA A1 89            [ 1] 1340 	cp a,#TK_OR 
      001BFC 27 0B            [ 1] 1341 	jreq 2$
      001BFE A1 8A            [ 1] 1342 	cp a,#TK_XOR
      001C00 27 07            [ 1] 1343 	jreq 2$ 
      001C02                       1344 	_unget_token 
      001C02 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001C07 20 55            [ 2] 1345 	jra 8$ 
      001C09 6B 02            [ 1] 1346 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001C0B CD 1B 9D         [ 4] 1347 	call and_cond
      001C0E A1 84            [ 1] 1348 	cp a,#TK_INTGR 
      001C10 27 03            [ 1] 1349 	jreq 3$
      001C12 CC 16 66         [ 2] 1350 	jp syntax_error 
      001C15                       1351 3$:	 
      001C15                       1352 	_xpop  ; rigth arg 
      001C15 90 F6            [ 1]    1     ld a,(y)
      001C17 93               [ 1]    2     ldw x,y 
      001C18 EE 01            [ 2]    3     ldw x,(1,x)
      001C1A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C1E C7 00 0C         [ 1] 1353 	ld acc24,a 
      001C21 CF 00 0D         [ 2] 1354 	ldw acc16,x 
      001C24                       1355 	_xpop  ; left arg  
      001C24 90 F6            [ 1]    1     ld a,(y)
      001C26 93               [ 1]    2     ldw x,y 
      001C27 EE 01            [ 2]    3     ldw x,(1,x)
      001C29 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C2D 6B 01            [ 1] 1356 	ld (ATMP,sp),a 
      001C2F 7B 02            [ 1] 1357 	ld a,(OP,sp)
      001C31 A1 8A            [ 1] 1358 	cp a,#TK_XOR 
      001C33 27 10            [ 1] 1359 	jreq 5$ 
      001C35                       1360 4$: ; A:X OR acc24   
      001C35 7B 01            [ 1] 1361 	ld a,(ATMP,sp)
      001C37 CA 00 0C         [ 1] 1362 	or a,acc24 
      001C3A 02               [ 1] 1363 	rlwa x 
      001C3B CA 00 0D         [ 1] 1364 	or a,acc16 
      001C3E 02               [ 1] 1365 	rlwa x 
      001C3F CA 00 0E         [ 1] 1366 	or a,acc8 
      001C42 02               [ 1] 1367 	rlwa x 
      001C43 20 0E            [ 2] 1368 	jra 6$  
      001C45                       1369 5$: ; A:X XOR acc24 
      001C45 7B 01            [ 1] 1370 	ld a,(ATMP,sp)
      001C47 C8 00 0C         [ 1] 1371 	xor a,acc24 
      001C4A 02               [ 1] 1372 	rlwa x 
      001C4B C8 00 0D         [ 1] 1373 	xor a,acc16 
      001C4E 02               [ 1] 1374 	rlwa x 
      001C4F C8 00 0E         [ 1] 1375 	xor a,acc8 
      001C52 02               [ 1] 1376 	rlwa x 
      001C53                       1377 6$: _xpush
      001C53 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C57 90 F7            [ 1]    2     ld (y),a 
      001C59 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C5C 20 99            [ 2] 1378 	jra 1$ 
      001C5E A6 84            [ 1] 1379 8$:	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001C60                       1380 9$:	_drop VSIZE 
      001C60 5B 02            [ 2]    1     addw sp,#VSIZE 
      001C62 81               [ 4] 1381 	ret 
                                   1382 
                                   1383 
                                   1384 ;--------------------------------------------
                                   1385 ; BASIC: HEX 
                                   1386 ; select hexadecimal base for integer print
                                   1387 ;---------------------------------------------
      001C63                       1388 hex_base:
      001C63 35 10 00 0A      [ 1] 1389 	mov base,#16 
      001C67 81               [ 4] 1390 	ret 
                                   1391 
                                   1392 ;--------------------------------------------
                                   1393 ; BASIC: DEC 
                                   1394 ; select decimal base for integer print
                                   1395 ;---------------------------------------------
      001C68                       1396 dec_base:
      001C68 35 0A 00 0A      [ 1] 1397 	mov base,#10
      001C6C 81               [ 4] 1398 	ret 
                                   1399 
                                   1400 ;------------------------
                                   1401 ; BASIC: FREE 
                                   1402 ; return free size in RAM 
                                   1403 ; output:
                                   1404 ;   A:x		size 
                                   1405 ;--------------------------
      001C6D                       1406 free:
      001C6D 4F               [ 1] 1407 	clr a 
      001C6E AE 16 90         [ 2] 1408 	ldw x,#tib 
      001C71 72 B0 00 32      [ 2] 1409 	subw x,dvar_end 
      001C75 81               [ 4] 1410 	ret 
                                   1411 
                                   1412 ;------------------------------
                                   1413 ; BASIC: SIZE 
                                   1414 ; command that print 
                                   1415 ; program start addres and size 
                                   1416 ;------------------------------
      001C76                       1417 cmd_size:
      001C76 3B 00 0A         [ 1] 1418 	push base 
      001C79 AE 1E CF         [ 2] 1419 	ldw x,#PROG_ADDR 
      001C7C CD 09 68         [ 4] 1420 	call puts 
      001C7F CE 00 1B         [ 2] 1421 	ldw x,txtbgn     
      001C82 35 10 00 0A      [ 1] 1422 	mov base,#16 
      001C86 CD 18 12         [ 4] 1423 	call prt_i16
      001C89 32 00 0A         [ 1] 1424 	pop base 
      001C8C AE 1E E1         [ 2] 1425 	ldw x,#PROG_SIZE 
      001C8F CD 09 68         [ 4] 1426 	call puts 
      001C92 CE 00 1D         [ 2] 1427 	ldw x,txtend 
      001C95 72 B0 00 1B      [ 2] 1428 	subw x,txtbgn 
      001C99 CD 18 12         [ 4] 1429 	call prt_i16
      001C9C AE 1E F2         [ 2] 1430 	ldw x,#STR_BYTES 
      001C9F CD 09 68         [ 4] 1431 	call puts  
      001CA2 81               [ 4] 1432 	ret 
                                   1433 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                   1434 
                                   1435 ;------------------------
                                   1436 ; BASIC: UBOUND  
                                   1437 ; return array variable size 
                                   1438 ; and set 'array_size' variable 
                                   1439 ; output:
                                   1440 ;   A:X 	array_size
                                   1441 ;--------------------------
      001CA3                       1442 ubound:
      001CA3 CD 1C 6D         [ 4] 1443 	call free 
      001CA6 A6 03            [ 1] 1444 	ld a,#CELL_SIZE 
      001CA8 62               [ 2] 1445 	div x,a 
      001CA9 CF 00 20         [ 2] 1446 	ldw array_size,x
      001CAC 4F               [ 1] 1447 	clr a 
      001CAD 81               [ 4] 1448 	ret 
                                   1449 
                                   1450 ;-----------------------------
                                   1451 ; BASIC: LET var=expr 
                                   1452 ; variable assignement 
                                   1453 ; output:
                                   1454 ;   A 		TK_NONE 
                                   1455 ;-----------------------------
      001CAE                       1456 let::
      001CAE CD 17 CA         [ 4] 1457 	call next_token 
      001CB1 A1 85            [ 1] 1458 	cp a,#TK_VAR 
      001CB3 27 0C            [ 1] 1459 	jreq let_var
      001CB5 A1 05            [ 1] 1460 	cp a,#TK_ARRAY 
      001CB7 27 03            [ 1] 1461 	jreq  let_array
      001CB9 CC 16 66         [ 2] 1462 	jp syntax_error
      001CBC                       1463 let_array:
      001CBC CD 19 AE         [ 4] 1464 	call get_array_element
      001CBF 20 03            [ 2] 1465 	jra let_eval 
      001CC1                       1466 let_var:
      001CC1 CD 17 F2         [ 4] 1467 	call get_addr
      001CC4                       1468 let_eval:
      001CC4 CF 00 19         [ 2] 1469 	ldw ptr16,x  ; variable address 
      001CC7 CD 17 CA         [ 4] 1470 	call next_token 
      001CCA A1 32            [ 1] 1471 	cp a,#TK_EQUAL
      001CCC 27 03            [ 1] 1472 	jreq 1$
      001CCE CC 16 66         [ 2] 1473 	jp syntax_error
      001CD1                       1474 1$:	
      001CD1 CD 1B EF         [ 4] 1475 	call condition   
      001CD4 A1 84            [ 1] 1476 	cp a,#TK_INTGR 
      001CD6 27 03            [ 1] 1477 	jreq 2$
      001CD8 CC 16 66         [ 2] 1478 	jp syntax_error
      001CDB                       1479 2$:	
      001CDB                       1480 	_xpop ; value 
      001CDB 90 F6            [ 1]    1     ld a,(y)
      001CDD 93               [ 1]    2     ldw x,y 
      001CDE EE 01            [ 2]    3     ldw x,(1,x)
      001CE0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001CE4                       1481 3$:
      001CE4 72 C7 00 19      [ 4] 1482 	ld [ptr16],a
      001CE8 72 5C 00 1A      [ 1] 1483 	inc ptr8  
      001CEC 72 CF 00 19      [ 5] 1484 	ldw [ptr16],x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001CF0 81               [ 4] 1485 	ret 
                                   1486 
                                   1487 
                                   1488 ;--------------------------
                                   1489 ; return constant/dvar value 
                                   1490 ; from it's record address
                                   1491 ; input:
                                   1492 ;	X	*const record 
                                   1493 ; output:
                                   1494 ;   A:X   const  value
                                   1495 ;--------------------------
      001CF1                       1496 get_value: ; -- i 
      001CF1 F6               [ 1] 1497 	ld a,(x) ; record size 
      001CF2 A4 0F            [ 1] 1498 	and a,#NAME_MAX_LEN
      001CF4 A0 03            [ 1] 1499 	sub a,#CELL_SIZE ; * value 
      001CF6 88               [ 1] 1500 	push a 
      001CF7 4B 00            [ 1] 1501 	push #0 
      001CF9 72 FB 01         [ 2] 1502 	addw x,(1,sp)
      001CFC F6               [ 1] 1503 	ld a,(x)
      001CFD EE 01            [ 2] 1504 	ldw x,(1,x)
      001CFF                       1505 	_drop 2
      001CFF 5B 02            [ 2]    1     addw sp,#2 
      001D01 81               [ 4] 1506 	ret 
                                   1507 
                                   1508 
                                   1509 ;--------------------------
                                   1510 ; list constants in EEPROM 
                                   1511 ; call when using LIST \C 
                                   1512 ;-------------------------
                           000001  1513 	COUNT=1
                           000003  1514 	YTEMP=3
                           000004  1515 	VSIZE=4 
      001D02                       1516 list_const:
      001D02 90 89            [ 2] 1517 	pushw y 
      001D04                       1518 	_vars 4 
      001D04 52 04            [ 2]    1     sub sp,#4 
      001D06 5F               [ 1] 1519 	clrw x 
      001D07 1F 01            [ 2] 1520 	ldw (COUNT,sp),x  
      001D09 90 AE 40 00      [ 2] 1521 	ldw Y,#EEPROM_BASE 
      001D0D 90 C3 00 24      [ 2] 1522 1$:	cpw y,free_eeprom 
      001D11 24 35            [ 1] 1523 	jruge 9$
      001D13 17 03            [ 2] 1524     ldw (YTEMP,sp),y 
      001D15 93               [ 1] 1525 	ldw x,y
      001D16 5C               [ 1] 1526 	incw x 
      001D17 CD 09 68         [ 4] 1527 	call puts  
      001D1A A6 3D            [ 1] 1528 	ld a,#'= 
      001D1C CD 09 0B         [ 4] 1529 	call putc 
      001D1F 1E 03            [ 2] 1530 	ldw x,(YTEMP,sp)
      001D21 CD 1C F1         [ 4] 1531 	call get_value 
      001D24 C7 00 0C         [ 1] 1532 	ld acc24,a 
      001D27 CF 00 0D         [ 2] 1533 	ldw acc16,x 
      001D2A CD 18 29         [ 4] 1534 	call prt_acc24
      001D2D A6 0D            [ 1] 1535 	ld a,#CR 
      001D2F CD 09 0B         [ 4] 1536 	call putc 
      001D32 1E 01            [ 2] 1537 	ldw x,(COUNT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001D34 5C               [ 1] 1538 	incw x 
      001D35 1F 01            [ 2] 1539 	ldw (COUNT,sp),x 
      001D37 72 5F 00 0D      [ 1] 1540 	clr acc16 
      001D3B 16 03            [ 2] 1541 	ldw y,(YTEMP,sp)
      001D3D 90 F6            [ 1] 1542 	ld a,(y)
      001D3F C7 00 0E         [ 1] 1543 	ld acc8,a
      001D42 72 B9 00 0D      [ 2] 1544 	addw y,acc16 
      001D46 20 C5            [ 2] 1545 	jra 1$ 
      001D48                       1546 9$:	
      001D48 1E 01            [ 2] 1547 	ldw x,(COUNT,sp)
      001D4A CD 18 12         [ 4] 1548 	call prt_i16 
      001D4D AE 1D 58         [ 2] 1549 	ldw x,#CONST_COUNT 
      001D50 CD 09 68         [ 4] 1550 	call puts 
      001D53                       1551 	_drop VSIZE 
      001D53 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D55 90 85            [ 2] 1552 	popw y 
      001D57 81               [ 4] 1553 	ret 
                                   1554 
      001D58 20 63 6F 6E 73 74 61  1555 CONST_COUNT: .asciz " constants in EEPROM\n"
             6E 74 73 20 69 6E 20
             45 45 50 52 4F 4D 0A
             00
                                   1556 
                                   1557 
                                   1558 ;--------------------------
                                   1559 ; BASIC: EEFREE 
                                   1560 ; eeprom_free 
                                   1561 ; search end of data  
                                   1562 ; in EEPROM 
                                   1563 ; input:
                                   1564 ;    none 
                                   1565 ; output:
                                   1566 ;    A:X     address free
                                   1567 ;-------------------------
      001D6E                       1568 func_eefree:
      001D6E AE 40 00         [ 2] 1569 	ldw x,#EEPROM_BASE 
      001D71 35 08 00 0E      [ 1] 1570 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001D75 A3 47 F8         [ 2] 1571     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D78 24 17            [ 1] 1572 	jruge 8$ ; no free space 
      001D7A F6               [ 1] 1573 2$: ld a,(x)
      001D7B 26 0C            [ 1] 1574 	jrne 3$
      001D7D 5C               [ 1] 1575 	incw x 
      001D7E 72 5A 00 0E      [ 1] 1576 	dec acc8 
      001D82 26 F6            [ 1] 1577 	jrne 2$
      001D84 1D 00 08         [ 2] 1578 	subw x,#8 
      001D87 20 09            [ 2] 1579 	jra 9$  
      001D89 F6               [ 1] 1580 3$: ld a,(x)
      001D8A 5C               [ 1] 1581 	incw x
      001D8B 4D               [ 1] 1582 	tnz a  
      001D8C 26 FB            [ 1] 1583 	jrne 3$
      001D8E 5A               [ 2] 1584 	decw x   
      001D8F 20 E0            [ 2] 1585 	jra 1$ 
      001D91 5F               [ 1] 1586 8$: clrw x ; no free space 
      001D92 4F               [ 1] 1587 9$: clr a 
      001D93 CF 00 24         [ 2] 1588 	ldw free_eeprom,x ; save in system variable 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001D96 81               [ 4] 1589 	ret 
                                   1590 
                           000005  1591 REC_XTRA_BYTES=5 
                                   1592 ;--------------------------
                                   1593 ; search constant/dim_var name 
                                   1594 ; format of record  
                                   1595 ;   .byte record length 
                                   1596 ;         = strlen(name)+5 
                                   1597 ;   .asciz name (variable length)
                                   1598 ;   .int24 value (3 bytes )
                                   1599 ; a constant record use 7+ bytes
                                   1600 ; constants are saved in EEPROM  
                                   1601 ; input:
                                   1602 ;    A     record_len 
                                   1603 ;    X     *name
                                   1604 ; output:
                                   1605 ;    X     address|0
                                   1606 ; use:
                                   1607 ;   A,Y, acc16 
                                   1608 ;-------------------------
                           000001  1609 	NAMEPTR=1 ; target name pointer 
                           000003  1610 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
                           000005  1611 	RECLEN=5  ; record length of target
                           000007  1612 	LIMIT=7   ; search area limit 
                           000008  1613 	VSIZE=8  
      001D97                       1614 search_name:
      001D97 90 89            [ 2] 1615 	pushw y 
      001D99                       1616 	_vars VSIZE
      001D99 52 08            [ 2]    1     sub sp,#VSIZE 
      001D9B 72 5F 00 0D      [ 1] 1617 	clr acc16 
      001D9F 6B 05            [ 1] 1618 	ld (RECLEN,sp),a    
      001DA1 1F 01            [ 2] 1619 	ldw (NAMEPTR,sp),x
      001DA3 CE 00 32         [ 2] 1620 	ldw x,dvar_end 
      001DA6 1F 07            [ 2] 1621 	ldw (LIMIT,sp),x 
      001DA8 90 CE 00 30      [ 2] 1622 	ldw y,dvar_bgn
      001DAC 17 03            [ 2] 1623 1$:	ldw (WLKPTR,sp),y
      001DAE 93               [ 1] 1624 	ldw x,y 
      001DAF 13 07            [ 2] 1625 	cpw x, (LIMIT,sp) 
      001DB1 24 20            [ 1] 1626 	jruge 7$ ; no match found 
      001DB3 90 F6            [ 1] 1627 	ld a,(y)
      001DB5 A4 0F            [ 1] 1628 	and a,#NAME_MAX_LEN
      001DB7 11 05            [ 1] 1629 	cp a,(RECLEN,sp)
      001DB9 26 09            [ 1] 1630 	jrne 2$ 
      001DBB 90 5C            [ 1] 1631 	incw y 
      001DBD 1E 01            [ 2] 1632 	ldw x,(NAMEPTR,sp)
      001DBF CD 13 91         [ 4] 1633 	call strcmp
      001DC2 26 13            [ 1] 1634 	jrne 8$ ; match found 
      001DC4                       1635 2$: ; skip this one 	
      001DC4 16 03            [ 2] 1636 	ldW Y,(WLKPTR,sp)
      001DC6 90 F6            [ 1] 1637 	ld a,(y)
      001DC8 A4 0F            [ 1] 1638 	and a,#NAME_MAX_LEN 
      001DCA C7 00 0E         [ 1] 1639 	ld acc8,a 
      001DCD 72 B9 00 0D      [ 2] 1640 	addw y,acc16 
      001DD1 20 D9            [ 2] 1641 	jra 1$  
      001DD3                       1642 7$: ; no match found 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001DD3 0F 03            [ 1] 1643 	clr (WLKPTR,sp)
      001DD5 0F 04            [ 1] 1644 	clr (WLKPTR+1,sp)
      001DD7                       1645 8$: ; match found 
      001DD7 1E 03            [ 2] 1646 	ldw x,(WLKPTR,sp) ; record address 
      001DD9                       1647 9$:	_DROP VSIZE
      001DD9 5B 08            [ 2]    1     addw sp,#VSIZE 
      001DDB 90 85            [ 2] 1648 	popw y 
      001DDD 81               [ 4] 1649 	 ret 
                                   1650 
                                   1651 ;--------------------------------------------
                                   1652 ; BASIC: CONST name=value [, name=value]*
                                   1653 ; define constant(s) saved in EEPROM
                                   1654 ; share most of his code with cmd_dim 
                                   1655 ;--------------------------------------------
                           000001  1656 	VAR_NAME=1 
                           000003  1657 	REC_LEN=3
                           000005  1658 	RONLY=5
                           000005  1659 	VSIZE=5
      001DDE                       1660 cmd_const:
      001DDE 72 00 00 22 05   [ 2] 1661 	btjt flags,#FRUN,0$
      001DE3 A6 06            [ 1] 1662 	ld a,#ERR_RUN_ONLY
      001DE5 CC 16 68         [ 2] 1663 	jp tb_error 
      001DE8                       1664 0$: 
      001DE8                       1665 	_vars VSIZE 
      001DE8 52 05            [ 2]    1     sub sp,#VSIZE 
      001DEA A6 80            [ 1] 1666 	ld a,#128 
      001DEC 6B 05            [ 1] 1667 	ld (RONLY,sp),a 
      001DEE 0F 03            [ 1] 1668 	clr (REC_LEN,sp)
      001DF0 20 10            [ 2] 1669 	jra cmd_dim2 ; shared code with cmd_dim  
                                   1670 
                                   1671 ;---------------------------------
                                   1672 ; BASIC: DIM var_name [var_name]* 
                                   1673 ; create named variables at end 
                                   1674 ; of BASIC program. 
                                   1675 ; These variables are initialized 
                                   1676 ; to 0. 
                                   1677 ; record format same ast CONST 
                                   1678 ; but r/w because stored in RAM 
                                   1679 ;---------------------------------
      001DF2                       1680 cmd_dim:
      001DF2 72 00 00 22 05   [ 2] 1681 	btjt flags,#FRUN,cmd_dim1
      001DF7 A6 06            [ 1] 1682 	ld a,#ERR_RUN_ONLY
      001DF9 CC 16 68         [ 2] 1683 	jp tb_error 
      001DFC                       1684 cmd_dim1:	
      001DFC                       1685 	_vars VSIZE
      001DFC 52 05            [ 2]    1     sub sp,#VSIZE 
      001DFE 0F 03            [ 1] 1686 	clr (REC_LEN,sp )
      001E00 0F 05            [ 1] 1687 	clr (RONLY,sp)
      001E02                       1688 cmd_dim2: 
      001E02 CD 17 CA         [ 4] 1689 0$:	call next_token 
      001E05 A1 03            [ 1] 1690 	cp a,#TK_LABEL  
      001E07 27 03            [ 1] 1691 	jreq 1$ 
      001E09 CC 16 66         [ 2] 1692 	jp syntax_error 
      001E0C 1F 01            [ 2] 1693 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001E0E CD 13 86         [ 4] 1694 	call strlen
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001E11 AB 05            [ 1] 1695 	add a,#REC_XTRA_BYTES
      001E13 6B 04            [ 1] 1696 	ld (REC_LEN+1,sp),a
      001E15 CD 17 E3         [ 4] 1697 	call skip_string 
      001E18 7B 04            [ 1] 1698 	ld a,(REC_LEN+1,sp)
      001E1A 1E 01            [ 2] 1699 	ldw x,(VAR_NAME,sp) 
      001E1C CD 1D 97         [ 4] 1700 	call search_name  
      001E1F 5D               [ 2] 1701 	tnzw x 
      001E20 27 05            [ 1] 1702 	jreq 2$
      001E22 A6 08            [ 1] 1703 	ld a,#ERR_DUPLICATE
      001E24 CC 16 68         [ 2] 1704 	jp tb_error  
      001E27 CE 00 32         [ 2] 1705 2$:	ldw x,dvar_end 
      001E2A 7B 04            [ 1] 1706 	ld a,(REC_LEN+1,sp)
      001E2C 1A 05            [ 1] 1707 	or a,(RONLY,sp)
      001E2E F7               [ 1] 1708 	ld (x),a 
      001E2F 5C               [ 1] 1709 	incw x 
      001E30 90 89            [ 2] 1710 	pushw y 
      001E32 16 03            [ 2] 1711 	ldw y,(VAR_NAME+2,sp)
      001E34 CD 13 A2         [ 4] 1712 	call strcpy
      001E37 90 85            [ 2] 1713 	popw y 
      001E39 5A               [ 2] 1714 	decw x
      001E3A 72 FB 03         [ 2] 1715 	addw x,(REC_LEN,sp)
      001E3D CF 00 32         [ 2] 1716 	ldw dvar_end,x 
      001E40 1D 00 03         [ 2] 1717 	subw x,#CELL_SIZE  
      001E43 7F               [ 1] 1718 	clr (x)
      001E44 6F 01            [ 1] 1719 	clr (1,x)  
      001E46 6F 02            [ 1] 1720 	clr (2,x)
      001E48 CD 17 CA         [ 4] 1721 4$: call next_token 
      001E4B A1 08            [ 1] 1722 	cp a,#TK_COMMA 
      001E4D 27 B3            [ 1] 1723 	jreq 0$ 
      001E4F A1 32            [ 1] 1724 	cp a,#TK_EQUAL 
      001E51 26 2A            [ 1] 1725 	jrne 8$
                                   1726 ; initialize variable 
      001E53 CD 1B EF         [ 4] 1727 	call condition 
      001E56 A1 84            [ 1] 1728 	cp a,#TK_INTGR
      001E58 27 03            [ 1] 1729 	jreq 5$
      001E5A CC 16 66         [ 2] 1730 	jp syntax_error
      001E5D CE 00 32         [ 2] 1731 5$: ldw x,dvar_end 
      001E60 1D 00 03         [ 2] 1732 	subw x,#CELL_SIZE 
      001E63 CF 00 19         [ 2] 1733 	ldw ptr16,x 
      001E66                       1734 	_xpop 
      001E66 90 F6            [ 1]    1     ld a,(y)
      001E68 93               [ 1]    2     ldw x,y 
      001E69 EE 01            [ 2]    3     ldw x,(1,x)
      001E6B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E6F 72 C7 00 19      [ 4] 1735 	ld [ptr16],a 
      001E73 72 5C 00 1A      [ 1] 1736 	inc ptr8 
      001E77 72 CF 00 19      [ 5] 1737 	ldw [ptr16],x 
      001E7B 20 CB            [ 2] 1738 	jra 4$ 
      001E7D                       1739 8$:	
      001E7D                       1740 	_unget_token 	
      001E7D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E82                       1741 	_drop VSIZE 
      001E82 5B 05            [ 2]    1     addw sp,#VSIZE 
      001E84 CD 1C A3         [ 4] 1742 	call ubound 
      001E87 81               [ 4] 1743 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                                   1744 
                                   1745 
                                   1746 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1747 ; return program size 
                                   1748 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E88                       1749 prog_size:
      001E88 CE 00 1D         [ 2] 1750 	ldw x,txtend 
      001E8B 72 B0 00 1B      [ 2] 1751 	subw x,txtbgn 
      001E8F 81               [ 4] 1752 	ret 
                                   1753 
                                   1754 ;----------------------------
                                   1755 ; print program information 
                                   1756 ;---------------------------
      001E90                       1757 program_info: 
      001E90 AE 1E CF         [ 2] 1758 	ldw x,#PROG_ADDR 
      001E93 CD 09 68         [ 4] 1759 	call puts 
      001E96 CE 00 1B         [ 2] 1760 	ldw x,txtbgn 
      001E99 35 10 00 0A      [ 1] 1761 	mov base,#16 
      001E9D CD 18 12         [ 4] 1762 	call prt_i16
      001EA0 35 0A 00 0A      [ 1] 1763 	mov base,#10  
      001EA4 AE 1E E1         [ 2] 1764 	ldw x,#PROG_SIZE
      001EA7 CD 09 68         [ 4] 1765 	call puts 
      001EAA CD 1E 88         [ 4] 1766 	call prog_size 
      001EAD CD 18 12         [ 4] 1767 	call prt_i16 
      001EB0 AE 1E F2         [ 2] 1768 	ldw x,#STR_BYTES 
      001EB3 CD 09 68         [ 4] 1769 	call puts
      001EB6 CE 00 1B         [ 2] 1770 	ldw x,txtbgn
      001EB9 A3 36 04         [ 2] 1771 	cpw x,#app 
      001EBC 25 05            [ 1] 1772 	jrult 2$
      001EBE AE 1E F9         [ 2] 1773 	ldw x,#FLASH_MEM 
      001EC1 20 03            [ 2] 1774 	jra 3$
      001EC3 AE 1F 0A         [ 2] 1775 2$: ldw x,#RAM_MEM 	 
      001EC6 CD 09 68         [ 4] 1776 3$:	call puts 
      001EC9 A6 0D            [ 1] 1777 	ld a,#CR 
      001ECB CD 09 0B         [ 4] 1778 	call putc
      001ECE 81               [ 4] 1779 	ret 
                                   1780 
      001ECF 70 72 6F 67 72 61 6D  1781 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001EE1 2C 20 70 72 6F 67 72  1782 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001EF2 20 62 79 74 65 73 00  1783 STR_BYTES: .asciz " bytes" 
      001EF9 20 69 6E 20 46 4C 41  1784 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001F0A 20 69 6E 20 52 41 4D  1785 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1786 
                                   1787 
                                   1788 ;----------------------------
                                   1789 ; BASIC: LIST [[start][,end]]
                                   1790 ; list program lines 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                   1791 ; form start to end 
                                   1792 ; if empty argument list then 
                                   1793 ; list all.
                                   1794 ;----------------------------
                           000001  1795 	FIRST=1
                           000003  1796 	LAST=3 
                           000005  1797 	LN_PTR=5
                           000006  1798 	VSIZE=6 
      001F19                       1799 list:
      001F19 72 01 00 22 05   [ 2] 1800 	btjf flags,#FRUN,0$
      001F1E A6 07            [ 1] 1801 	ld a,#ERR_CMD_ONLY
      001F20 CC 16 68         [ 2] 1802 	jp tb_error
      001F23                       1803 0$:	 
      001F23 CD 17 CA         [ 4] 1804 	call next_token 
      001F26 A1 04            [ 1] 1805 	cp a,#TK_CHAR 
      001F28 26 10            [ 1] 1806 	jrne 2$
      001F2A CD 18 0C         [ 4] 1807 	call get_char 
      001F2D A4 DF            [ 1] 1808 	and a,#0xDF 
      001F2F A1 43            [ 1] 1809 	cp a,#'C 
      001F31 26 04            [ 1] 1810 	jrne 1$
      001F33 CD 1D 02         [ 4] 1811 	call list_const
      001F36 81               [ 4] 1812 	ret 
      001F37 CC 16 66         [ 2] 1813 1$: jp syntax_error 
      001F3A                       1814 2$:	_unget_token 
      001F3A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001F3F CD 1E 88         [ 4] 1815 	call prog_size 
      001F42 22 01            [ 1] 1816 	jrugt 3$
      001F44 81               [ 4] 1817 	ret 
      001F45                       1818 3$: _vars VSIZE
      001F45 52 06            [ 2]    1     sub sp,#VSIZE 
      001F47 CE 00 1B         [ 2] 1819 	ldw x,txtbgn 
      001F4A 1F 05            [ 2] 1820 	ldw (LN_PTR,sp),x 
      001F4C FE               [ 2] 1821 	ldw x,(x) 
      001F4D 1F 01            [ 2] 1822 	ldw (FIRST,sp),x ; list from first line 
      001F4F AE 7F FF         [ 2] 1823 	ldw x,#MAX_LINENO ; biggest line number 
      001F52 1F 03            [ 2] 1824 	ldw (LAST,sp),x 
      001F54 CD 19 92         [ 4] 1825 	call arg_list
      001F57 4D               [ 1] 1826 	tnz a
      001F58 27 31            [ 1] 1827 	jreq list_loop 
      001F5A A1 02            [ 1] 1828 	cp a,#2 
      001F5C 27 07            [ 1] 1829 	jreq 4$
      001F5E A1 01            [ 1] 1830 	cp a,#1 
      001F60 27 06            [ 1] 1831 	jreq first_line 
      001F62 CC 16 66         [ 2] 1832 	jp syntax_error 
      001F65 85               [ 2] 1833 4$:	popw x 
      001F66 1F 05            [ 2] 1834 	ldw (LAST+2,sp),x 
      001F68                       1835 first_line:
      001F68 85               [ 2] 1836 	popw x
      001F69 1F 01            [ 2] 1837 	ldw (FIRST,sp),x 
      001F6B                       1838 lines_skip:
      001F6B CE 00 1B         [ 2] 1839 	ldw x,txtbgn
      001F6E 1F 05            [ 2] 1840 2$:	ldw (LN_PTR,sp),x 
      001F70 C3 00 1D         [ 2] 1841 	cpw x,txtend 
      001F73 2A 38            [ 1] 1842 	jrpl list_exit 
      001F75 FE               [ 2] 1843 	ldw x,(x) ;line# 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      001F76 13 01            [ 2] 1844 	cpw x,(FIRST,sp)
      001F78 2A 11            [ 1] 1845 	jrpl list_loop 
      001F7A 1E 05            [ 2] 1846 	ldw x,(LN_PTR,sp) 
      001F7C E6 02            [ 1] 1847 	ld a,(2,x)
      001F7E C7 00 0E         [ 1] 1848 	ld acc8,a 
      001F81 72 5F 00 0D      [ 1] 1849 	clr acc16 
      001F85 72 BB 00 0D      [ 2] 1850 	addw x,acc16
      001F89 20 E3            [ 2] 1851 	jra 2$ 
                                   1852 ; print loop
      001F8B                       1853 list_loop:
      001F8B 1E 05            [ 2] 1854 	ldw x,(LN_PTR,sp)
      001F8D E6 02            [ 1] 1855 	ld a,(2,x) 
      001F8F CD 20 02         [ 4] 1856 	call prt_basic_line
      001F92 1E 05            [ 2] 1857 	ldw x,(LN_PTR,sp)
      001F94 E6 02            [ 1] 1858 	ld a,(2,x)
      001F96 C7 00 0E         [ 1] 1859 	ld acc8,a 
      001F99 72 5F 00 0D      [ 1] 1860 	clr acc16 
      001F9D 72 BB 00 0D      [ 2] 1861 	addw x,acc16
      001FA1 C3 00 1D         [ 2] 1862 	cpw x,txtend 
      001FA4 2A 07            [ 1] 1863 	jrpl list_exit
      001FA6 1F 05            [ 2] 1864 	ldw (LN_PTR,sp),x
      001FA8 FE               [ 2] 1865 	ldw x,(x)
      001FA9 13 03            [ 2] 1866 	cpw x,(LAST,sp)  
      001FAB 2F DE            [ 1] 1867 	jrslt list_loop
      001FAD                       1868 list_exit:
      001FAD 55 00 03 00 01   [ 1] 1869 	mov in,count 
      001FB2 AE 16 E0         [ 2] 1870 	ldw x,#pad 
      001FB5 CF 00 04         [ 2] 1871 	ldw basicptr,x 
      001FB8                       1872 	_drop VSIZE 
      001FB8 5B 06            [ 2]    1     addw sp,#VSIZE 
      001FBA CD 1E 90         [ 4] 1873 	call program_info 
      001FBD 81               [ 4] 1874 	ret
                                   1875 
                                   1876 
                                   1877 ;--------------------------
                                   1878 ; BASIC: EDIT 
                                   1879 ;  copy program in FLASH 
                                   1880 ;  to RAM for edition 
                                   1881 ;-------------------------
      001FBE                       1882 edit:
      001FBE CD 28 0E         [ 4] 1883 	call qsign 
      001FC1 27 07            [ 1] 1884 	jreq 1$ 
      001FC3 AE 1F EB         [ 2] 1885 	ldw x,#NOT_SAVED 
      001FC6 CD 09 68         [ 4] 1886 	call puts 
      001FC9 81               [ 4] 1887 	ret 
      001FCA                       1888 1$: 
      001FCA 90 AE 36 00      [ 2] 1889 	ldw y,#app_sign ; source address 
      001FCE CE 36 02         [ 2] 1890     ldw x,app_size  
      001FD1 1C 00 04         [ 2] 1891 	addw x,#4 
      001FD4 CF 00 0D         [ 2] 1892 	ldw acc16,x  ; bytes to copy 
      001FD7 AE 00 8C         [ 2] 1893 	ldw x,#rsign ; destination address 
      001FDA CD 13 B2         [ 4] 1894 	call move  
      001FDD AE 00 90         [ 2] 1895 	ldw x,#free_ram 
      001FE0 CF 00 1B         [ 2] 1896 	ldw txtbgn,x 
      001FE3 72 BB 00 8E      [ 2] 1897 	addw x,rsize  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      001FE7 CF 00 1D         [ 2] 1898 	ldw txtend,x 
      001FEA 81               [ 4] 1899 	ret 
                                   1900 
      001FEB 4E 6F 20 61 70 70 6C  1901 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1902 
                                   1903 
                                   1904 ;--------------------------
                                   1905 ; decompile line from token list
                                   1906 ; and print it. 
                                   1907 ; input:
                                   1908 ;   A       stop at this position 
                                   1909 ;   X 		pointer at line
                                   1910 ; output:
                                   1911 ;   none 
                                   1912 ;--------------------------	
      002002                       1913 prt_basic_line:
      002002 90 89            [ 2] 1914 	pushw y 
      002004 C7 00 03         [ 1] 1915 	ld count,a 
      002007 E6 02            [ 1] 1916 	ld a,(2,x)
      002009 C1 00 03         [ 1] 1917 	cp a,count 
      00200C 2A 03            [ 1] 1918 	jrpl 1$ 
      00200E C7 00 03         [ 1] 1919 	ld count,a 
      002011 CF 00 04         [ 2] 1920 1$:	ldw basicptr,x 
      002014 90 AE 16 90      [ 2] 1921 	ldw y,#tib  
      002018 CD 11 A2         [ 4] 1922 	call decompile 
      00201B CD 09 68         [ 4] 1923 	call puts 
      00201E A6 0D            [ 1] 1924 	ld a,#CR 
      002020 CD 09 0B         [ 4] 1925 	call putc 
      002023 90 85            [ 2] 1926 	popw y 
      002025 81               [ 4] 1927 	ret 
                                   1928 
                                   1929 
                                   1930 ;---------------------------------
                                   1931 ; BASIC: PRINT|? arg_list 
                                   1932 ; print values from argument list
                                   1933 ;----------------------------------
                           000001  1934 	CCOMMA=1
                           000001  1935 	VSIZE=1
      002026                       1936 print:
      002026                       1937 	_vars VSIZE 
      002026 52 01            [ 2]    1     sub sp,#VSIZE 
      002028                       1938 reset_comma:
      002028 0F 01            [ 1] 1939 	clr (CCOMMA,sp)
      00202A                       1940 prt_loop:
      00202A CD 17 CA         [ 4] 1941 	call next_token
      00202D A1 02            [ 1] 1942 	cp a,#CMD_END 
      00202F 25 08            [ 1] 1943 	jrult 0$
      002031 A1 0A            [ 1] 1944 	cp a,#TK_COLON 
      002033 27 04            [ 1] 1945 	jreq 0$
      002035 A1 80            [ 1] 1946 	cp a,#TK_CMD
      002037 26 07            [ 1] 1947 	jrne 10$
      002039                       1948 0$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002039                       1949 	_unget_token 
      002039 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00203E 20 63            [ 2] 1950 	jra 8$ 
      002040                       1951 10$:	
      002040 A1 02            [ 1] 1952 	cp a,#TK_QSTR
      002042 27 12            [ 1] 1953 	jreq 1$
      002044 A1 04            [ 1] 1954 	cp a,#TK_CHAR 
      002046 27 1B            [ 1] 1955 	jreq 2$ 
      002048 A1 82            [ 1] 1956 	cp a,#TK_CFUNC 
      00204A 27 1F            [ 1] 1957 	jreq 3$
      00204C A1 08            [ 1] 1958 	cp a,#TK_COMMA 
      00204E 27 2A            [ 1] 1959 	jreq 4$
      002050 A1 09            [ 1] 1960 	cp a,#TK_SHARP 
      002052 27 2A            [ 1] 1961 	jreq 5$
      002054 20 3D            [ 2] 1962 	jra 7$ 
      002056                       1963 1$:	; print string 
      002056 CD 09 68         [ 4] 1964 	call puts
      002059 5C               [ 1] 1965 	incw x
      00205A 72 B0 00 04      [ 2] 1966 	subw x,basicptr 
      00205E CF 00 00         [ 2] 1967 	ldw in.w,x  
      002061 20 C5            [ 2] 1968 	jra reset_comma
      002063                       1969 2$:	; print character 
      002063 CD 18 0C         [ 4] 1970 	call get_char 
      002066 CD 09 0B         [ 4] 1971 	call putc 
      002069 20 BD            [ 2] 1972 	jra reset_comma 
      00206B                       1973 3$: ; print character function value  	
      00206B                       1974 	_get_code_addr 
      00206B FE               [ 2]    1         ldw x,(x)
      00206C 72 5C 00 01      [ 1]    2         inc in 
      002070 72 5C 00 01      [ 1]    3         inc in 
      002074 FD               [ 4] 1975 	call (x)
      002075 CD 09 0B         [ 4] 1976 	call putc
      002078 20 AE            [ 2] 1977 	jra reset_comma 
      00207A                       1978 4$: ; set comma state 
      00207A 03 01            [ 1] 1979 	cpl (CCOMMA,sp)
      00207C 20 AC            [ 2] 1980 	jra prt_loop   
      00207E                       1981 5$: ; # character must be followed by an integer   
      00207E CD 17 CA         [ 4] 1982 	call next_token
      002081 A1 84            [ 1] 1983 	cp a,#TK_INTGR 
      002083 27 03            [ 1] 1984 	jreq 6$
      002085 CC 16 66         [ 2] 1985 	jp syntax_error 
      002088                       1986 6$: ; set tab width
      002088 CD 17 FC         [ 4] 1987 	call get_int24 
      00208B 9F               [ 1] 1988 	ld a,xl 
      00208C A4 0F            [ 1] 1989 	and a,#15 
      00208E C7 00 23         [ 1] 1990 	ld tab_width,a 
      002091 20 95            [ 2] 1991 	jra reset_comma 
      002093                       1992 7$:	
      002093                       1993 	_unget_token 
      002093 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002098 CD 1B EF         [ 4] 1994 	call condition
      00209B 4D               [ 1] 1995 	tnz a 
      00209C 27 05            [ 1] 1996 	jreq 8$    
      00209E CD 18 37         [ 4] 1997     call print_top
      0020A1 20 85            [ 2] 1998 	jra reset_comma 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      0020A3                       1999 8$:
      0020A3 0D 01            [ 1] 2000 	tnz (CCOMMA,sp)
      0020A5 26 05            [ 1] 2001 	jrne 9$
      0020A7 A6 0D            [ 1] 2002 	ld a,#CR 
      0020A9 CD 09 0B         [ 4] 2003     call putc 
      0020AC                       2004 9$:	_drop VSIZE 
      0020AC 5B 01            [ 2]    1     addw sp,#VSIZE 
      0020AE 81               [ 4] 2005 	ret 
                                   2006 
                                   2007 ;----------------------
                                   2008 ; 'save_context' and
                                   2009 ; 'rest_context' must be 
                                   2010 ; called at the same 
                                   2011 ; call stack depth 
                                   2012 ; i.e. SP must have the 
                                   2013 ; save value at  
                                   2014 ; entry point of both 
                                   2015 ; routine. 
                                   2016 ;---------------------
                           000004  2017 	CTXT_SIZE=4 ; size of saved data 
                                   2018 ;--------------------
                                   2019 ; save current BASIC
                                   2020 ; interpreter context 
                                   2021 ; on stack 
                                   2022 ;--------------------
      0020AF                       2023 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0020AF                       2024 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      0020AF                       2025 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      0020AF                       2026 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      0020AF                       2027 save_context:
      0020AF CE 00 04         [ 2] 2028 	ldw x,basicptr 
      0020B2 1F 03            [ 2] 2029 	ldw (BPTR,sp),x
      0020B4 C6 00 01         [ 1] 2030 	ld a,in 
      0020B7 6B 05            [ 1] 2031 	ld (IN,sp),a
      0020B9 C6 00 03         [ 1] 2032 	ld a,count 
      0020BC 6B 06            [ 1] 2033 	ld (CNT,sp),a  
      0020BE 81               [ 4] 2034 	ret
                                   2035 
                                   2036 ;-----------------------
                                   2037 ; restore previously saved 
                                   2038 ; BASIC interpreter context 
                                   2039 ; from stack 
                                   2040 ;-------------------------
      0020BF                       2041 rest_context:
      0020BF 1E 03            [ 2] 2042 	ldw x,(BPTR,sp)
      0020C1 CF 00 04         [ 2] 2043 	ldw basicptr,x 
      0020C4 7B 05            [ 1] 2044 	ld a,(IN,sp)
      0020C6 C7 00 01         [ 1] 2045 	ld in,a
      0020C9 7B 06            [ 1] 2046 	ld a,(CNT,sp)
      0020CB C7 00 03         [ 1] 2047 	ld count,a  
      0020CE 81               [ 4] 2048 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                                   2049 
                                   2050 
                                   2051 
                                   2052 ;------------------------------------------
                                   2053 ; BASIC: INPUT [string]var[,[string]var]
                                   2054 ; input value in variables 
                                   2055 ; [string] optionally can be used as prompt 
                                   2056 ;-----------------------------------------
                           000001  2057 	CX_BPTR=1
                           000003  2058 	CX_IN=3
                           000004  2059 	CX_CNT=4
                           000005  2060 	SKIP=5
                           000005  2061 	VSIZE=5
      0020CF                       2062 input_var:
      0020CF 90 89            [ 2] 2063 	pushw y 
      0020D1                       2064 	_vars VSIZE 
      0020D1 52 05            [ 2]    1     sub sp,#VSIZE 
      0020D3                       2065 input_loop:
      0020D3 0F 05            [ 1] 2066 	clr (SKIP,sp)
      0020D5 CD 17 CA         [ 4] 2067 	call next_token 
      0020D8 A1 02            [ 1] 2068 	cp a,#TK_QSTR 
      0020DA 26 10            [ 1] 2069 	jrne 1$ 
      0020DC CD 09 68         [ 4] 2070 	call puts 
      0020DF 5C               [ 1] 2071 	incw x 
      0020E0 72 B0 00 04      [ 2] 2072 	subw x,basicptr 
      0020E4 CF 00 00         [ 2] 2073 	ldw in.w,x 
      0020E7 03 05            [ 1] 2074 	cpl (SKIP,sp)
      0020E9 CD 17 CA         [ 4] 2075 	call next_token 
      0020EC A1 85            [ 1] 2076 1$: cp a,#TK_VAR  
      0020EE 27 03            [ 1] 2077 	jreq 2$ 
      0020F0 CC 16 66         [ 2] 2078 	jp syntax_error
      0020F3 CD 17 F2         [ 4] 2079 2$:	call get_addr
      0020F6 CF 00 19         [ 2] 2080 	ldw ptr16,x 
      0020F9 0D 05            [ 1] 2081 	tnz (SKIP,sp)
      0020FB 26 06            [ 1] 2082 	jrne 21$ 
      0020FD CD 11 98         [ 4] 2083 	call var_name 
      002100 CD 09 0B         [ 4] 2084 	call putc   
      002103                       2085 21$:
      002103 A6 3A            [ 1] 2086 	ld a,#':
      002105 CD 09 0B         [ 4] 2087 	call putc 
      002108 CD 20 AF         [ 4] 2088 	call save_context 
      00210B 72 5F 00 03      [ 1] 2089 	clr count  
      00210F CD 0A 6D         [ 4] 2090 	call readln 
      002112 AE 16 90         [ 2] 2091 	ldw x,#tib 
      002115 3B 00 03         [ 1] 2092 	push count
      002118 4B 00            [ 1] 2093 	push #0 
      00211A 72 FB 01         [ 2] 2094 	addw x,(1,sp)
      00211D 5C               [ 1] 2095 	incw x 
      00211E                       2096 	_drop 2 
      00211E 5B 02            [ 2]    1     addw sp,#2 
      002120 72 5F 00 01      [ 1] 2097 	clr in 
      002124 CD 0E E2         [ 4] 2098 	call get_token
      002127 A1 84            [ 1] 2099 	cp a,#TK_INTGR
      002129 27 14            [ 1] 2100 	jreq 3$ 
      00212B A1 11            [ 1] 2101 	cp a,#TK_MINUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      00212D 26 07            [ 1] 2102 	jrne 22$
      00212F CD 0E E2         [ 4] 2103 	call get_token 
      002132 A1 84            [ 1] 2104 	cp a,#TK_INTGR 
      002134 27 06            [ 1] 2105 	jreq 23$
      002136                       2106 22$:
      002136 CD 20 BF         [ 4] 2107 	call rest_context 
      002139 CC 16 66         [ 2] 2108 	jp syntax_error
      00213C                       2109 23$:
      00213C CD 02 18         [ 4] 2110 	call neg_acc24	
      00213F                       2111 3$: 
      00213F C6 00 0C         [ 1] 2112 	ld a,acc24 
      002142 CE 00 0D         [ 2] 2113 	ldw x,acc16 
      002145 72 C7 00 19      [ 4] 2114 	ld [ptr16],a
      002149 72 5C 00 1A      [ 1] 2115 	inc ptr8  
      00214D 72 CF 00 19      [ 5] 2116 	ldw [ptr16],x 
      002151 CD 20 BF         [ 4] 2117 	call rest_context
      002154 CD 17 CA         [ 4] 2118 	call next_token 
      002157 A1 08            [ 1] 2119 	cp a,#TK_COMMA
      002159 26 03            [ 1] 2120 	jrne 4$ 
      00215B CC 20 D3         [ 2] 2121 	jp input_loop
      00215E                       2122 4$:
      00215E A1 00            [ 1] 2123 	cp a,#TK_NONE 
      002160 27 07            [ 1] 2124 	jreq input_exit  
      002162 A1 0A            [ 1] 2125 	cp a,#TK_COLON 
      002164 27 03            [ 1] 2126     jreq input_exit 
      002166 CC 16 66         [ 2] 2127 	jp syntax_error 
      002169                       2128 input_exit:
      002169                       2129 	_drop VSIZE 
      002169 5B 05            [ 2]    1     addw sp,#VSIZE 
      00216B 90 85            [ 2] 2130 	popw y 
      00216D 81               [ 4] 2131 	ret 
                                   2132 
                                   2133 
                                   2134 ;---------------------
                                   2135 ; BASIC: REM | ' 
                                   2136 ; skip comment to end of line 
                                   2137 ;---------------------- 
      00216E                       2138 remark::
      00216E 55 00 03 00 01   [ 1] 2139 	mov in,count 
      002173 81               [ 4] 2140  	ret 
                                   2141 
                                   2142 
                                   2143 ;---------------------
                                   2144 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2145 ; read in loop 'addr'  
                                   2146 ; apply & 'mask' to value 
                                   2147 ; loop while result==0.  
                                   2148 ; 'xor_mask' is used to 
                                   2149 ; invert the wait logic.
                                   2150 ; i.e. loop while not 0.
                                   2151 ;---------------------
                           000001  2152 	XMASK=1 
                           000002  2153 	MASK=2
                           000003  2154 	ADDR=3
                           000004  2155 	VSIZE=4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002174                       2156 wait: 
      002174                       2157 	_vars VSIZE
      002174 52 04            [ 2]    1     sub sp,#VSIZE 
      002176 0F 01            [ 1] 2158 	clr (XMASK,sp) 
      002178 CD 19 92         [ 4] 2159 	call arg_list 
      00217B A1 02            [ 1] 2160 	cp a,#2
      00217D 24 03            [ 1] 2161 	jruge 0$
      00217F CC 16 66         [ 2] 2162 	jp syntax_error 
      002182 A1 03            [ 1] 2163 0$:	cp a,#3
      002184 25 0C            [ 1] 2164 	jrult 1$
      002186                       2165 	_xpop  ; xor mask 
      002186 90 F6            [ 1]    1     ld a,(y)
      002188 93               [ 1]    2     ldw x,y 
      002189 EE 01            [ 2]    3     ldw x,(1,x)
      00218B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00218F 9F               [ 1] 2166 	ld a,xl 
      002190 6B 01            [ 1] 2167 	ld (XMASK,sp),a 
      002192                       2168 1$: _xpop ; mask
      002192 90 F6            [ 1]    1     ld a,(y)
      002194 93               [ 1]    2     ldw x,y 
      002195 EE 01            [ 2]    3     ldw x,(1,x)
      002197 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00219B 9F               [ 1] 2169     ld a,xl  
      00219C 6B 02            [ 1] 2170 	ld (MASK,sp),a 
      00219E                       2171 	_xpop ; address 
      00219E 90 F6            [ 1]    1     ld a,(y)
      0021A0 93               [ 1]    2     ldw x,y 
      0021A1 EE 01            [ 2]    3     ldw x,(1,x)
      0021A3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021A7 F6               [ 1] 2172 2$:	ld a,(x)
      0021A8 14 02            [ 1] 2173 	and a,(MASK,sp)
      0021AA 18 01            [ 1] 2174 	xor a,(XMASK,sp)
      0021AC 27 F9            [ 1] 2175 	jreq 2$ 
      0021AE                       2176 	_drop VSIZE 
      0021AE 5B 04            [ 2]    1     addw sp,#VSIZE 
      0021B0 81               [ 4] 2177 	ret 
                                   2178 
                                   2179 ;---------------------
                                   2180 ; BASIC: BSET addr,mask
                                   2181 ; set bits at 'addr' corresponding 
                                   2182 ; to those of 'mask' that are at 1.
                                   2183 ; arguments:
                                   2184 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2185 ;   mask        mask|addr
                                   2186 ; output:
                                   2187 ;	none 
                                   2188 ;--------------------------
      0021B1                       2189 bit_set:
      0021B1 CD 19 92         [ 4] 2190 	call arg_list 
      0021B4 A1 02            [ 1] 2191 	cp a,#2	 
      0021B6 27 03            [ 1] 2192 	jreq 1$ 
      0021B8 CC 16 66         [ 2] 2193 	jp syntax_error
      0021BB                       2194 1$: 
      0021BB                       2195 	_xpop ; mask 
      0021BB 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0021BD 93               [ 1]    2     ldw x,y 
      0021BE EE 01            [ 2]    3     ldw x,(1,x)
      0021C0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021C4 9F               [ 1] 2196 	ld a,xl
      0021C5 88               [ 1] 2197 	push a  
      0021C6                       2198 	_xpop ; addr  
      0021C6 90 F6            [ 1]    1     ld a,(y)
      0021C8 93               [ 1]    2     ldw x,y 
      0021C9 EE 01            [ 2]    3     ldw x,(1,x)
      0021CB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021CF 84               [ 1] 2199 	pop a 
      0021D0 FA               [ 1] 2200 	or a,(x)
      0021D1 F7               [ 1] 2201 	ld (x),a
      0021D2 81               [ 4] 2202 	ret 
                                   2203 
                                   2204 ;---------------------
                                   2205 ; BASIC: BRES addr,mask
                                   2206 ; reset bits at 'addr' corresponding 
                                   2207 ; to those of 'mask' that are at 1.
                                   2208 ; arguments:
                                   2209 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2210 ;   mask	    ~mask&*addr  
                                   2211 ; output:
                                   2212 ;	none 
                                   2213 ;--------------------------
      0021D3                       2214 bit_reset:
      0021D3 CD 19 92         [ 4] 2215 	call arg_list 
      0021D6 A1 02            [ 1] 2216 	cp a,#2  
      0021D8 27 03            [ 1] 2217 	jreq 1$ 
      0021DA CC 16 66         [ 2] 2218 	jp syntax_error
      0021DD                       2219 1$: 
      0021DD                       2220 	_xpop ; mask 
      0021DD 90 F6            [ 1]    1     ld a,(y)
      0021DF 93               [ 1]    2     ldw x,y 
      0021E0 EE 01            [ 2]    3     ldw x,(1,x)
      0021E2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021E6 9F               [ 1] 2221 	ld a,xl 
      0021E7 43               [ 1] 2222 	cpl a
      0021E8 88               [ 1] 2223 	push a  
      0021E9                       2224 	_xpop ; addr  
      0021E9 90 F6            [ 1]    1     ld a,(y)
      0021EB 93               [ 1]    2     ldw x,y 
      0021EC EE 01            [ 2]    3     ldw x,(1,x)
      0021EE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021F2 84               [ 1] 2225 	pop a 
      0021F3 F4               [ 1] 2226 	and a,(x)
      0021F4 F7               [ 1] 2227 	ld (x),a 
      0021F5 81               [ 4] 2228 	ret 
                                   2229 
                                   2230 ;---------------------
                                   2231 ; BASIC: BTOGL addr,mask
                                   2232 ; toggle bits at 'addr' corresponding 
                                   2233 ; to those of 'mask' that are at 1.
                                   2234 ; arguments:
                                   2235 ; 	addr 		memory address RAM|PERIPHERAL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



                                   2236 ;   mask	    mask^*addr  
                                   2237 ; output:
                                   2238 ;	none 
                                   2239 ;--------------------------
      0021F6                       2240 bit_toggle:
      0021F6 CD 19 92         [ 4] 2241 	call arg_list 
      0021F9 A1 02            [ 1] 2242 	cp a,#2 
      0021FB 27 03            [ 1] 2243 	jreq 1$ 
      0021FD CC 16 66         [ 2] 2244 	jp syntax_error
      002200                       2245 1$: _xpop ; mask 
      002200 90 F6            [ 1]    1     ld a,(y)
      002202 93               [ 1]    2     ldw x,y 
      002203 EE 01            [ 2]    3     ldw x,(1,x)
      002205 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002209 9F               [ 1] 2246 	ld a,xl
      00220A 88               [ 1] 2247 	push a 
      00220B                       2248 	_xpop  ; addr  
      00220B 90 F6            [ 1]    1     ld a,(y)
      00220D 93               [ 1]    2     ldw x,y 
      00220E EE 01            [ 2]    3     ldw x,(1,x)
      002210 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002214 84               [ 1] 2249 	pop a 
      002215 F8               [ 1] 2250 	xor a,(x)
      002216 F7               [ 1] 2251 	ld (x),a 
      002217 81               [ 4] 2252 	ret 
                                   2253 
                                   2254 
                                   2255 ;---------------------
                                   2256 ; BASIC: BTEST(addr,bit)
                                   2257 ; return bit value at 'addr' 
                                   2258 ; bit is in range {0..7}.
                                   2259 ; arguments:
                                   2260 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2261 ;   bit 	    bit position {0..7}  
                                   2262 ; output:
                                   2263 ;	A:X       bit value  
                                   2264 ;--------------------------
      002218                       2265 bit_test:
      002218 CD 19 8D         [ 4] 2266 	call func_args 
      00221B A1 02            [ 1] 2267 	cp a,#2
      00221D 27 03            [ 1] 2268 	jreq 0$
      00221F CC 16 66         [ 2] 2269 	jp syntax_error
      002222                       2270 0$:	
      002222                       2271 	_xpop 
      002222 90 F6            [ 1]    1     ld a,(y)
      002224 93               [ 1]    2     ldw x,y 
      002225 EE 01            [ 2]    3     ldw x,(1,x)
      002227 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00222B 9F               [ 1] 2272 	ld a,xl 
      00222C A4 07            [ 1] 2273 	and a,#7
      00222E 88               [ 1] 2274 	push a   
      00222F A6 01            [ 1] 2275 	ld a,#1 
      002231 0D 01            [ 1] 2276 1$: tnz (1,sp)
      002233 27 05            [ 1] 2277 	jreq 2$
      002235 48               [ 1] 2278 	sll a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002236 0A 01            [ 1] 2279 	dec (1,sp)
      002238 20 F7            [ 2] 2280 	jra 1$
      00223A 6B 01            [ 1] 2281 2$: ld (1,sp),a  
      00223C                       2282 	_xpop ; address  
      00223C 90 F6            [ 1]    1     ld a,(y)
      00223E 93               [ 1]    2     ldw x,y 
      00223F EE 01            [ 2]    3     ldw x,(1,x)
      002241 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002245 84               [ 1] 2283 	pop a 
      002246 F4               [ 1] 2284 	and a,(x)
      002247 27 02            [ 1] 2285 	jreq 3$
      002249 A6 01            [ 1] 2286 	ld a,#1 
      00224B 5F               [ 1] 2287 3$:	clrw x 
      00224C 97               [ 1] 2288 	ld xl,a
      00224D 4F               [ 1] 2289 	clr a  
      00224E 81               [ 4] 2290 	ret
                                   2291 
                                   2292 ;--------------------
                                   2293 ; BASIC: POKE addr,byte
                                   2294 ; put a byte at addr 
                                   2295 ;--------------------
      00224F                       2296 poke:
      00224F CD 19 92         [ 4] 2297 	call arg_list 
      002252 A1 02            [ 1] 2298 	cp a,#2
      002254 27 03            [ 1] 2299 	jreq 1$
      002256 CC 16 66         [ 2] 2300 	jp syntax_error
      002259                       2301 1$:	
      002259                       2302 	_xpop ; byte   
      002259 90 F6            [ 1]    1     ld a,(y)
      00225B 93               [ 1]    2     ldw x,y 
      00225C EE 01            [ 2]    3     ldw x,(1,x)
      00225E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002262 9F               [ 1] 2303     ld a,xl 
      002263 88               [ 1] 2304 	push a 
      002264                       2305 	_xpop ; address 
      002264 90 F6            [ 1]    1     ld a,(y)
      002266 93               [ 1]    2     ldw x,y 
      002267 EE 01            [ 2]    3     ldw x,(1,x)
      002269 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00226D 84               [ 1] 2306 	pop a 
      00226E F7               [ 1] 2307 	ld (x),a 
      00226F 81               [ 4] 2308 	ret 
                                   2309 
                                   2310 ;-----------------------
                                   2311 ; BASIC: PEEK(addr)
                                   2312 ; get the byte at addr 
                                   2313 ; input:
                                   2314 ;	none 
                                   2315 ; output:
                                   2316 ;	X 		value 
                                   2317 ;-----------------------
      002270                       2318 peek:
      002270 CD 19 8D         [ 4] 2319 	call func_args
      002273 A1 01            [ 1] 2320 	cp a,#1 
      002275 27 03            [ 1] 2321 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      002277 CC 16 66         [ 2] 2322 	jp syntax_error
      00227A                       2323 1$: _xpop ; address  
      00227A 90 F6            [ 1]    1     ld a,(y)
      00227C 93               [ 1]    2     ldw x,y 
      00227D EE 01            [ 2]    3     ldw x,(1,x)
      00227F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002283 C7 00 18         [ 1] 2324 	ld farptr,a 
      002286 CF 00 19         [ 2] 2325 	ldw ptr16,x 
      002289 92 BC 00 18      [ 5] 2326 	ldf a,[farptr]
      00228D 5F               [ 1] 2327 	clrw x 
      00228E 97               [ 1] 2328 	ld xl,a 
      00228F 4F               [ 1] 2329 	clr a 
      002290 81               [ 4] 2330 	ret 
                                   2331 
                                   2332 ;---------------------------
                                   2333 ; BASIC IF expr : instructions
                                   2334 ; evaluate expr and if true 
                                   2335 ; execute instructions on same line. 
                                   2336 ;----------------------------
      002291                       2337 if: 
      002291 CD 1B EF         [ 4] 2338 	call condition  
      002294                       2339 	_xpop 
      002294 90 F6            [ 1]    1     ld a,(y)
      002296 93               [ 1]    2     ldw x,y 
      002297 EE 01            [ 2]    3     ldw x,(1,x)
      002299 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00229D 4D               [ 1] 2340 	tnz  a  
      00229E 26 0D            [ 1] 2341 	jrne 9$
      0022A0 5D               [ 2] 2342 	tnzw x 
      0022A1 26 0A            [ 1] 2343 	jrne 9$  
                                   2344 ;skip to next line
      0022A3 55 00 03 00 01   [ 1] 2345 	mov in,count
      0022A8                       2346 	_drop 2 
      0022A8 5B 02            [ 2]    1     addw sp,#2 
      0022AA CC 17 19         [ 2] 2347 	jp next_line
      0022AD 81               [ 4] 2348 9$:	ret 
                                   2349 
                                   2350 ;------------------------
                                   2351 ; BASIC: FOR var=expr 
                                   2352 ; set variable to expression 
                                   2353 ; leave variable address 
                                   2354 ; on stack and set
                                   2355 ; FLOOP bit in 'flags'
                                   2356 ;-----------------
                           000001  2357 	RETL1=1 ; return address  
                           000003  2358 	FSTEP=3  ; variable increment int24
                           000006  2359 	LIMIT=6 ; loop limit, int24  
                           000009  2360 	CVAR=9   ; control variable 
                           00000B  2361 	INW=11   ;  in.w saved
                           00000D  2362 	BPTR=13 ; baseptr saved
                           00000D  2363 	VSIZE=13  
      0022AE                       2364 for: ; { -- var_addr }
      0022AE 85               [ 2] 2365 	popw x ; call return address 
      0022AF                       2366 	_vars VSIZE 
      0022AF 52 0D            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      0022B1 89               [ 2] 2367 	pushw x  ; RETL1 
      0022B2 A6 85            [ 1] 2368 	ld a,#TK_VAR 
      0022B4 CD 19 80         [ 4] 2369 	call expect
      0022B7 CD 17 F2         [ 4] 2370 	call get_addr
      0022BA 1F 09            [ 2] 2371 	ldw (CVAR,sp),x  ; control variable 
      0022BC CD 1C C4         [ 4] 2372 	call let_eval 
      0022BF 72 14 00 22      [ 1] 2373 	bset flags,#FLOOP 
      0022C3 CD 17 CA         [ 4] 2374 	call next_token 
      0022C6 A1 80            [ 1] 2375 	cp a,#TK_CMD 
      0022C8 27 03            [ 1] 2376 	jreq 1$
      0022CA CC 16 66         [ 2] 2377 	jp syntax_error
      0022CD                       2378 1$:  
      0022CD                       2379 	_get_code_addr
      0022CD FE               [ 2]    1         ldw x,(x)
      0022CE 72 5C 00 01      [ 1]    2         inc in 
      0022D2 72 5C 00 01      [ 1]    3         inc in 
      0022D6 A3 22 DE         [ 2] 2380 	cpw x,#to   
      0022D9 27 03            [ 1] 2381 	jreq to
      0022DB CC 16 66         [ 2] 2382 	jp syntax_error 
                                   2383 
                                   2384 ;-----------------------------------
                                   2385 ; BASIC: TO expr 
                                   2386 ; second part of FOR loop initilization
                                   2387 ; leave limit on stack and set 
                                   2388 ; FTO bit in 'flags'
                                   2389 ;-----------------------------------
      0022DE                       2390 to: ; { var_addr -- var_addr limit step }
      0022DE 72 04 00 22 03   [ 2] 2391 	btjt flags,#FLOOP,1$
      0022E3 CC 16 66         [ 2] 2392 	jp syntax_error
      0022E6 CD 1A D6         [ 4] 2393 1$: call expression   
      0022E9 A1 84            [ 1] 2394 	cp a,#TK_INTGR 
      0022EB 27 03            [ 1] 2395 	jreq 2$ 
      0022ED CC 16 66         [ 2] 2396 	jp syntax_error
      0022F0                       2397 2$: _xpop
      0022F0 90 F6            [ 1]    1     ld a,(y)
      0022F2 93               [ 1]    2     ldw x,y 
      0022F3 EE 01            [ 2]    3     ldw x,(1,x)
      0022F5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022F9 6B 06            [ 1] 2398 	ld (LIMIT,sp),a 
      0022FB 1F 07            [ 2] 2399 	ldw (LIMIT+1,sp),x
      0022FD CD 17 CA         [ 4] 2400 	call next_token
      002300 A1 00            [ 1] 2401 	cp a,#TK_NONE  
      002302 27 17            [ 1] 2402 	jreq 4$ 
      002304 A1 80            [ 1] 2403 	cp a,#TK_CMD
      002306 26 0E            [ 1] 2404 	jrne 3$
      002308                       2405 	_get_code_addr
      002308 FE               [ 2]    1         ldw x,(x)
      002309 72 5C 00 01      [ 1]    2         inc in 
      00230D 72 5C 00 01      [ 1]    3         inc in 
      002311 A3 23 24         [ 2] 2406 	cpw x,#step 
      002314 27 0E            [ 1] 2407 	jreq step
      002316                       2408 3$:	
      002316                       2409 	_unget_token   	 
      002316 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00231B                       2410 4$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      00231B 0F 03            [ 1] 2411 	clr (FSTEP,sp) 
      00231D AE 00 01         [ 2] 2412 	ldw x,#1   ; default step  
      002320 1F 04            [ 2] 2413 	ldw (FSTEP+1,sp),x 
      002322 20 2F            [ 2] 2414 	jra store_loop_addr 
                                   2415 
                                   2416 
                                   2417 ;----------------------------------
                                   2418 ; BASIC: STEP expr 
                                   2419 ; optional third par of FOR loop
                                   2420 ; initialization. 	
                                   2421 ;------------------------------------
      002324                       2422 step: ; {var limit -- var limit step}
      002324 72 04 00 22 03   [ 2] 2423 	btjt flags,#FLOOP,1$
      002329 CC 16 66         [ 2] 2424 	jp syntax_error
      00232C CD 1A D6         [ 4] 2425 1$: call expression 
      00232F A1 84            [ 1] 2426 	cp a,#TK_INTGR
      002331 27 03            [ 1] 2427 	jreq 2$
      002333 CC 16 66         [ 2] 2428 	jp syntax_error
      002336                       2429 2$:	
      002336                       2430 	_xpop 
      002336 90 F6            [ 1]    1     ld a,(y)
      002338 93               [ 1]    2     ldw x,y 
      002339 EE 01            [ 2]    3     ldw x,(1,x)
      00233B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00233F 6B 03            [ 1] 2431 	ld (FSTEP,sp),a 
      002341 1F 04            [ 2] 2432 	ldw (FSTEP+1,sp),x ; step
                                   2433 ; if step < 0 decrement LIMIT 
      002343 4D               [ 1] 2434 	tnz a
      002344 2A 0D            [ 1] 2435 	jrpl store_loop_addr 
      002346 7B 06            [ 1] 2436 	ld a,(LIMIT,sp)
      002348 1E 07            [ 2] 2437 	ldw x,(LIMIT+1,sp)
      00234A 1D 00 01         [ 2] 2438 	subw x,#1 
      00234D A2 00            [ 1] 2439 	sbc a,#0 
      00234F 6B 06            [ 1] 2440 	ld (LIMIT,sp),a 
      002351 1F 07            [ 2] 2441 	ldw (LIMIT+1,sp),x 
                                   2442 ; leave loop back entry point on cstack 
                                   2443 ; cstack is 1 call deep from interpreter
      002353                       2444 store_loop_addr:
      002353 CE 00 04         [ 2] 2445 	ldw x,basicptr
      002356 1F 0D            [ 2] 2446 	ldw (BPTR,sp),x 
      002358 CE 00 00         [ 2] 2447 	ldw x,in.w 
      00235B 1F 0B            [ 2] 2448 	ldw (INW,sp),x   
      00235D 72 15 00 22      [ 1] 2449 	bres flags,#FLOOP 
      002361 72 5C 00 1F      [ 1] 2450 	inc loop_depth  
      002365 81               [ 4] 2451 	ret 
                                   2452 
                                   2453 ;--------------------------------
                                   2454 ; BASIC: NEXT var 
                                   2455 ; FOR loop control 
                                   2456 ; increment variable with step 
                                   2457 ; and compare with limit 
                                   2458 ; loop if threshold not crossed.
                                   2459 ; else stack. 
                                   2460 ; and decrement 'loop_depth' 
                                   2461 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      002366                       2462 next: ; {var limit step retl1 -- [var limit step ] }
      002366 72 5D 00 1F      [ 1] 2463 	tnz loop_depth 
      00236A 26 03            [ 1] 2464 	jrne 1$ 
      00236C CC 16 66         [ 2] 2465 	jp syntax_error 
      00236F                       2466 1$: 
      00236F A6 85            [ 1] 2467 	ld a,#TK_VAR 
      002371 CD 19 80         [ 4] 2468 	call expect
      002374 CD 17 F2         [ 4] 2469 	call get_addr 
                                   2470 ; check for good variable after NEXT 	 
      002377 13 09            [ 2] 2471 	cpw x,(CVAR,sp)
      002379 27 03            [ 1] 2472 	jreq 2$  
      00237B CC 16 66         [ 2] 2473 	jp syntax_error ; not the good one 
      00237E                       2474 2$: 
      00237E CF 00 19         [ 2] 2475 	ldw ptr16,x 
                                   2476 	; increment variable 
      002381 F6               [ 1] 2477 	ld a,(x)
      002382 EE 01            [ 2] 2478 	ldw x,(1,x)  ; get var value 
      002384 72 FB 04         [ 2] 2479 	addw x,(FSTEP+1,sp) ; var+step 
      002387 19 03            [ 1] 2480 	adc a,(FSTEP,sp)
      002389 72 C7 00 19      [ 4] 2481 	ld [ptr16],a
      00238D 72 5C 00 1A      [ 1] 2482 	inc ptr8  
      002391 72 CF 00 19      [ 5] 2483 	ldw [ptr16],x 
      002395 C7 00 0C         [ 1] 2484 	ld acc24,a 
      002398 CF 00 0D         [ 2] 2485 	ldw acc16,x 
      00239B 7B 06            [ 1] 2486 	ld a,(LIMIT,sp)
      00239D 1E 07            [ 2] 2487 	ldw x,(LIMIT+1,sp)
      00239F 72 B0 00 0D      [ 2] 2488 	subw x,acc16 
      0023A3 C2 00 0C         [ 1] 2489 	sbc a,acc24
      0023A6 18 03            [ 1] 2490 	xor a,(FSTEP,sp)
      0023A8 A8 80            [ 1] 2491 	xor a,#0x80
      0023AA 2B 12            [ 1] 2492 	jrmi loop_back  
      0023AC 20 25            [ 2] 2493 	jra loop_done   
                                   2494 ; check sign of STEP  
      0023AE 7B 03            [ 1] 2495 	ld a,(FSTEP,sp)
      0023B0 2A 07            [ 1] 2496 	jrpl 4$
                                   2497 ;negative step
      0023B2 C6 00 0E         [ 1] 2498     ld a,acc8 
      0023B5 2F 07            [ 1] 2499 	jrslt loop_back   
      0023B7 20 1A            [ 2] 2500 	jra loop_done  
      0023B9                       2501 4$: ; positive step
      0023B9 72 0E 00 0E 15   [ 2] 2502 	btjt acc8,#7,loop_done 
      0023BE                       2503 loop_back:
      0023BE 1E 0D            [ 2] 2504 	ldw x,(BPTR,sp)
      0023C0 CF 00 04         [ 2] 2505 	ldw basicptr,x 
      0023C3 72 01 00 22 05   [ 2] 2506 	btjf flags,#FRUN,1$ 
      0023C8 E6 02            [ 1] 2507 	ld a,(2,x)
      0023CA C7 00 03         [ 1] 2508 	ld count,a
      0023CD 1E 0B            [ 2] 2509 1$:	ldw x,(INW,sp)
      0023CF CF 00 00         [ 2] 2510 	ldw in.w,x 
      0023D2 81               [ 4] 2511 	ret 
      0023D3                       2512 loop_done:
                                   2513 	; remove loop data from stack  
      0023D3 85               [ 2] 2514 	popw x
      0023D4                       2515 	_drop VSIZE 
      0023D4 5B 0D            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      0023D6 72 5A 00 1F      [ 1] 2516 	dec loop_depth 
      0023DA FC               [ 2] 2517 	jp (x)
                                   2518 
                                   2519 ;----------------------------
                                   2520 ; called by goto/gosub
                                   2521 ; to get target line number 
                                   2522 ; output:
                                   2523 ;    x    line address 
                                   2524 ;---------------------------
      0023DB                       2525 get_target_line:
      0023DB CD 17 CA         [ 4] 2526 	call next_token  
      0023DE A1 84            [ 1] 2527 	cp a,#TK_INTGR
      0023E0 27 07            [ 1] 2528 	jreq get_target_line_addr 
      0023E2 A1 03            [ 1] 2529 	cp a,#TK_LABEL 
      0023E4 27 26            [ 1] 2530 	jreq look_target_symbol 
      0023E6 CC 16 66         [ 2] 2531 	jp syntax_error
                                   2532 ; the target is a line number 
                                   2533 ; search it. 
      0023E9                       2534 get_target_line_addr:
      0023E9 90 89            [ 2] 2535 	pushw y 
      0023EB CD 17 FC         [ 4] 2536 	call get_int24 ; line # 
      0023EE 4F               [ 1] 2537 	clr a
      0023EF 90 CE 00 04      [ 2] 2538 	ldw y,basicptr 
      0023F3 90 FE            [ 2] 2539 	ldw y,(y)
      0023F5 90 89            [ 2] 2540 	pushw y 
      0023F7 13 01            [ 2] 2541 	cpw x,(1,sp)
      0023F9                       2542 	_drop 2  
      0023F9 5B 02            [ 2]    1     addw sp,#2 
      0023FB 25 01            [ 1] 2543 	jrult 11$
      0023FD 4C               [ 1] 2544 	inc a 
      0023FE                       2545 11$: ; scan program for this line# 	
      0023FE CD 0C 45         [ 4] 2546 	call search_lineno  
      002401 5D               [ 2] 2547 	tnzw x ; 0| line# address 
      002402 26 05            [ 1] 2548 	jrne 2$ 
      002404 A6 05            [ 1] 2549 	ld a,#ERR_NO_LINE 
      002406 CC 16 68         [ 2] 2550 	jp tb_error 
      002409 90 85            [ 2] 2551 2$:	popw y  
      00240B 81               [ 4] 2552 	ret 
                                   2553 
                                   2554 ; the GOTO|GOSUB target is a symbol.
                                   2555 ; output:
                                   2556 ;    X    line address|0 
      00240C                       2557 look_target_symbol:
      00240C 90 89            [ 2] 2558 	pushw y 
      00240E 89               [ 2] 2559 	pushw x 
      00240F CD 17 E3         [ 4] 2560 	call skip_string 
      002412 72 5F 00 0D      [ 1] 2561 	clr acc16 
      002416 90 CE 00 1B      [ 2] 2562 	ldw y,txtbgn 
      00241A 90 E6 03         [ 1] 2563 1$:	ld a,(3,y) ; first TK_ID on line 
      00241D A1 03            [ 1] 2564 	cp a,#TK_LABEL 
      00241F 27 15            [ 1] 2565 	jreq 3$ 
      002421 90 E6 02         [ 1] 2566 2$:	ld a,(2,y); line length 
      002424 C7 00 0E         [ 1] 2567 	ld acc8,a 
      002427 72 B9 00 0D      [ 2] 2568 	addw y,acc16 ;point to next line 
      00242B 90 C3 00 1D      [ 2] 2569 	cpw y,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      00242F 25 E9            [ 1] 2570 	jrult 1$
      002431 A6 0A            [ 1] 2571 	ld a,#ERR_BAD_VALUE
      002433 CC 16 68         [ 2] 2572 	jp tb_error 
      002436                       2573 3$: ; found a TK_LABEL 
                                   2574 	; compare with GOTO|GOSUB target 
      002436 90 89            [ 2] 2575 	pushw y ; line address 
      002438 72 A9 00 04      [ 2] 2576 	addw y,#4 ; label string 
      00243C 1E 03            [ 2] 2577 	ldw x,(3,sp) ; target string 
      00243E CD 13 91         [ 4] 2578 	call strcmp
      002441 26 04            [ 1] 2579 	jrne 4$
      002443 90 85            [ 2] 2580 	popw y 
      002445 20 DA            [ 2] 2581 	jra 2$ 
      002447                       2582 4$: ; target found 
      002447 85               [ 2] 2583 	popw x ;  address line target  
      002448                       2584 	_drop 2 ; target string 
      002448 5B 02            [ 2]    1     addw sp,#2 
      00244A 90 85            [ 2] 2585 	popw y 
      00244C 81               [ 4] 2586 	ret
                                   2587 
                                   2588 
                                   2589 ;--------------------------------
                                   2590 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2591 ; selective goto or gosub 
                                   2592 ;--------------------------------
      00244D                       2593 cmd_on:
      00244D 72 00 00 22 05   [ 2] 2594 	btjt flags,#FRUN,0$ 
      002452 A6 06            [ 1] 2595 	ld a,#ERR_RUN_ONLY
      002454 CC 16 68         [ 2] 2596 	jp tb_error 
      002457 CD 1A D6         [ 4] 2597 0$:	call expression 
      00245A A1 84            [ 1] 2598 	cp a,#TK_INTGR
      00245C 27 03            [ 1] 2599 	jreq 1$
      00245E CC 16 66         [ 2] 2600 	jp syntax_error
      002461                       2601 1$: _xpop
      002461 90 F6            [ 1]    1     ld a,(y)
      002463 93               [ 1]    2     ldw x,y 
      002464 EE 01            [ 2]    3     ldw x,(1,x)
      002466 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2602 ; the selector is the element indice 
                                   2603 ; in the list of arguments. {1..#elements} 
      00246A 9F               [ 1] 2604 	ld a,xl ; keep only bits 7..0
      00246B 27 68            [ 1] 2605 	jreq 9$ ; element # begin at 1. 
      00246D 88               [ 1] 2606 	push a  ; selector  
      00246E CD 17 CA         [ 4] 2607 	call next_token
      002471 A1 80            [ 1] 2608 	cp a,#TK_CMD 
      002473 27 03            [ 1] 2609 	jreq 2$ 
      002475 CC 16 66         [ 2] 2610 	jp syntax_error 
      002478                       2611 2$: _get_code_addr
      002478 FE               [ 2]    1         ldw x,(x)
      002479 72 5C 00 01      [ 1]    2         inc in 
      00247D 72 5C 00 01      [ 1]    3         inc in 
                                   2612 ;; must be a GOTO or GOSUB 
      002481 A3 24 DF         [ 2] 2613 	cpw x,#goto 
      002484 27 08            [ 1] 2614 	jreq 4$
      002486 A3 24 F9         [ 2] 2615 	cpw x,#gosub 
      002489 27 03            [ 1] 2616 	jreq 4$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      00248B CC 16 66         [ 2] 2617 	jp syntax_error 
      00248E                       2618 4$: 
      00248E 84               [ 1] 2619 	pop a 
      00248F 89               [ 2] 2620 	pushw x ; save routine address 	
      002490 88               [ 1] 2621 	push a  ; selector  
      002491                       2622 5$: ; skip elements in list until selector==0 
      002491 0A 01            [ 1] 2623 	dec (1,sp)
      002493 27 26            [ 1] 2624 	jreq 6$ 
                                   2625 ; can be a line# or a label 
      002495 CD 17 CA         [ 4] 2626 	call next_token 
      002498 A1 84            [ 1] 2627 	cp a,#TK_INTGR 
      00249A 27 07            [ 1] 2628 	jreq 52$
      00249C A1 03            [ 1] 2629 	cp a,#TK_LABEL 
      00249E 27 0D            [ 1] 2630 	jreq 54$
      0024A0 CC 16 66         [ 2] 2631 	jp syntax_error 
      0024A3                       2632 52$: ; got a line number 
      0024A3 C6 00 01         [ 1] 2633 	ld a,in ; skip over int24 value 
      0024A6 AB 03            [ 1] 2634 	add a,#CELL_SIZE ; integer size  
      0024A8 C7 00 01         [ 1] 2635 	ld in,a 
      0024AB 20 03            [ 2] 2636 	jra 56$
      0024AD CD 17 E3         [ 4] 2637 54$: call skip_string ; skip over label 	
      0024B0                       2638 56$: ; if another element comma present 
      0024B0 CD 17 CA         [ 4] 2639 	call next_token
      0024B3 A1 08            [ 1] 2640 	cp a,#TK_COMMA 
      0024B5 27 DA            [ 1] 2641 	jreq 5$ 
                                   2642 ; arg list exhausted, selector to big 
                                   2643 ; continue execution on next line 
      0024B7                       2644 	_drop 3 ; drop selector and GOTO|GOSUB address 
      0024B7 5B 03            [ 2]    1     addw sp,#3 
      0024B9 20 1A            [ 2] 2645 	jra 9$
      0024BB                       2646 6$: ;at selected position  
      0024BB                       2647 	_drop 1 ; discard selector
      0024BB 5B 01            [ 2]    1     addw sp,#1 
                                   2648 ; here only the routine address 
                                   2649 ; of GOTO|GOSUB is on stack 
      0024BD CD 23 DB         [ 4] 2650     call get_target_line
      0024C0 CF 00 19         [ 2] 2651 	ldw ptr16,x 	
      0024C3 55 00 03 00 01   [ 1] 2652 	mov in,count ; move to end of line  
      0024C8 85               [ 2] 2653 	popw x ; cmd address, GOTO||GOSUB 
      0024C9 A3 24 DF         [ 2] 2654 	cpw x,#goto 
      0024CC 26 05            [ 1] 2655 	jrne 7$ 
      0024CE CE 00 19         [ 2] 2656 	ldw x,ptr16 
      0024D1 20 19            [ 2] 2657 	jra jp_to_target
      0024D3                       2658 7$: 
      0024D3 20 35            [ 2] 2659 	jra gosub_2 ; target in ptr16 
      0024D5                       2660 9$: ; expr out of range skip to end of line
                                   2661     ; this will force a fall to next line  
      0024D5 55 00 03 00 01   [ 1] 2662 	mov in,count
      0024DA                       2663 	_drop 2
      0024DA 5B 02            [ 2]    1     addw sp,#2 
      0024DC CC 17 19         [ 2] 2664 	jp next_line  
                                   2665 
                                   2666 
                                   2667 ;------------------------
                                   2668 ; BASIC: GOTO line# 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



                                   2669 ; jump to line# 
                                   2670 ; here cstack is 2 call deep from interpreter 
                                   2671 ;------------------------
      0024DF                       2672 goto:
      0024DF 72 00 00 22 05   [ 2] 2673 	btjt flags,#FRUN,goto_1  
      0024E4 A6 06            [ 1] 2674 	ld a,#ERR_RUN_ONLY
      0024E6 CC 16 68         [ 2] 2675 	jp tb_error 
      0024E9                       2676 goto_1:
      0024E9 CD 23 DB         [ 4] 2677 	call get_target_line
      0024EC                       2678 jp_to_target:
      0024EC CF 00 04         [ 2] 2679 	ldw basicptr,x 
      0024EF E6 02            [ 1] 2680 	ld a,(2,x)
      0024F1 C7 00 03         [ 1] 2681 	ld count,a 
      0024F4 35 03 00 01      [ 1] 2682 	mov in,#3 
      0024F8 81               [ 4] 2683 	ret 
                                   2684 
                                   2685 
                                   2686 ;--------------------
                                   2687 ; BASIC: GOSUB line#
                                   2688 ; basic subroutine call
                                   2689 ; actual line# and basicptr 
                                   2690 ; are saved on cstack
                                   2691 ; here cstack is 2 call deep from interpreter 
                                   2692 ;--------------------
                           000001  2693 	RET_ADDR=1 ; subroutine return address 
                           000003  2694 	RET_BPTR=3 ; basicptr return point 
                           000005  2695 	RET_INW=5  ; in.w return point 
                           000004  2696 	VSIZE=4 
      0024F9                       2697 gosub:
      0024F9 72 00 00 22 06   [ 2] 2698 	btjt flags,#FRUN,gosub_1 
      0024FE A6 06            [ 1] 2699 	ld a,#ERR_RUN_ONLY
      002500 CC 16 68         [ 2] 2700 	jp tb_error 
      002503 81               [ 4] 2701 	ret 
      002504                       2702 gosub_1:
      002504 CD 23 DB         [ 4] 2703 	call get_target_line 
      002507 CF 00 19         [ 2] 2704 	ldw ptr16,x
      00250A                       2705 gosub_2: 
      00250A 85               [ 2] 2706 	popw x 
      00250B                       2707 	_vars VSIZE  
      00250B 52 04            [ 2]    1     sub sp,#VSIZE 
      00250D 89               [ 2] 2708 	pushw x ; RET_ADDR 
                                   2709 ; save BASIC subroutine return point.   
      00250E CE 00 04         [ 2] 2710 	ldw x,basicptr
      002511 1F 03            [ 2] 2711 	ldw (RET_BPTR,sp),x 
      002513 CE 00 00         [ 2] 2712 	ldw x,in.w 
      002516 1F 05            [ 2] 2713 	ldw (RET_INW,sp),x
      002518 CE 00 19         [ 2] 2714 	ldw x,ptr16  
      00251B 20 CF            [ 2] 2715 	jra jp_to_target
                                   2716 
                                   2717 ;------------------------
                                   2718 ; BASIC: RETURN 
                                   2719 ; exit from BASIC subroutine 
                                   2720 ;------------------------
      00251D                       2721 return:
      00251D 72 00 00 22 05   [ 2] 2722 	btjt flags,#FRUN,0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      002522 A6 06            [ 1] 2723 	ld a,#ERR_RUN_ONLY
      002524 CC 16 68         [ 2] 2724 	jp tb_error 
      002527                       2725 0$:	
      002527 1E 03            [ 2] 2726 	ldw x,(RET_BPTR,sp) 
      002529 CF 00 04         [ 2] 2727 	ldw basicptr,x
      00252C E6 02            [ 1] 2728 	ld a,(2,x)
      00252E C7 00 03         [ 1] 2729 	ld count,a  
      002531 1E 05            [ 2] 2730 	ldw x,(RET_INW,sp)
      002533 CF 00 00         [ 2] 2731 	ldw in.w,x 
      002536 85               [ 2] 2732 	popw x 
      002537                       2733 	_drop VSIZE 
      002537 5B 04            [ 2]    1     addw sp,#VSIZE 
      002539 FC               [ 2] 2734 	jp (x)
                                   2735 
                                   2736 
                                   2737 ;----------------------------------
                                   2738 ; BASIC: RUN
                                   2739 ; run BASIC program in RAM
                                   2740 ;----------------------------------- 
      00253A                       2741 run: 
      00253A 72 01 00 22 02   [ 2] 2742 	btjf flags,#FRUN,0$  
      00253F 4F               [ 1] 2743 	clr a 
      002540 81               [ 4] 2744 	ret
      002541                       2745 0$: 
      002541 72 09 00 22 12   [ 2] 2746 	btjf flags,#FBREAK,1$
      002546                       2747 	_drop 2 
      002546 5B 02            [ 2]    1     addw sp,#2 
      002548 CD 20 BF         [ 4] 2748 	call rest_context
      00254B                       2749 	_drop CTXT_SIZE 
      00254B 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      00254D 72 19 00 22      [ 1] 2750 	bres flags,#FBREAK 
      002551 72 10 00 22      [ 1] 2751 	bset flags,#FRUN 
      002555 CC 17 11         [ 2] 2752 	jp interpreter 
      002558 CE 00 1B         [ 2] 2753 1$:	ldw x,txtbgn
      00255B C3 00 1D         [ 2] 2754 	cpw x,txtend 
      00255E 2B 0C            [ 1] 2755 	jrmi run_it 
      002560 AE 15 D9         [ 2] 2756 	ldw x,#err_no_prog
      002563 CD 09 68         [ 4] 2757 	call puts 
      002566 55 00 03 00 01   [ 1] 2758 	mov in,count
      00256B 81               [ 4] 2759 	ret 
      00256C                       2760 run_it:	 
      00256C                       2761 	_drop 2 ; drop return address 
      00256C 5B 02            [ 2]    1     addw sp,#2 
      00256E                       2762 run_it_02: 
      00256E CD 1C A3         [ 4] 2763     call ubound 
      002571 CD 13 F6         [ 4] 2764 	call clear_vars
                                   2765 ; initialize DIM variables pointers 
      002574 CE 00 1D         [ 2] 2766 	ldw x,txtend 
      002577 CF 00 30         [ 2] 2767 	ldw dvar_bgn,x 
      00257A CF 00 32         [ 2] 2768 	ldw dvar_end,x 	 
                                   2769 ; clear data pointer 
      00257D 5F               [ 1] 2770 	clrw x 
      00257E CF 00 06         [ 2] 2771 	ldw data_ptr,x 
      002581 72 5F 00 08      [ 1] 2772 	clr data_ofs 
      002585 72 5F 00 09      [ 1] 2773 	clr data_len 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                                   2774 ; initialize BASIC pointer 
      002589 CE 00 1B         [ 2] 2775 	ldw x,txtbgn 
      00258C CF 00 04         [ 2] 2776 	ldw basicptr,x 
      00258F E6 02            [ 1] 2777 	ld a,(2,x)
      002591 C7 00 03         [ 1] 2778 	ld count,a
      002594 35 03 00 01      [ 1] 2779 	mov in,#3	
      002598 72 10 00 22      [ 1] 2780 	bset flags,#FRUN 
      00259C CC 17 11         [ 2] 2781 	jp interpreter 
                                   2782 
                                   2783 
                                   2784 ;----------------------
                                   2785 ; BASIC: END
                                   2786 ; end running program
                                   2787 ;---------------------- 
      00259F                       2788 cmd_end: 
                                   2789 ; clean stack 
      00259F AE 17 FF         [ 2] 2790 	ldw x,#STACK_EMPTY
      0025A2 94               [ 1] 2791 	ldw sp,x 
      0025A3 CC 16 F2         [ 2] 2792 	jp warm_start
                                   2793 
                                   2794 ;---------------------------
                                   2795 ; BASIC: GET var 
                                   2796 ; receive a key in variable 
                                   2797 ; don't wait 
                                   2798 ;---------------------------
      0025A6                       2799 cmd_get:
      0025A6 CD 17 CA         [ 4] 2800 	call next_token 
      0025A9 A1 85            [ 1] 2801 	cp a,#TK_VAR 
      0025AB 27 03            [ 1] 2802 	jreq 0$
      0025AD CC 16 66         [ 2] 2803 	jp syntax_error 
      0025B0 CD 17 F2         [ 4] 2804 0$: call get_addr 
      0025B3 CF 00 19         [ 2] 2805 	ldw ptr16,x 
      0025B6 CD 09 14         [ 4] 2806 	call qgetc 
      0025B9 27 03            [ 1] 2807 	jreq 2$
      0025BB CD 09 1B         [ 4] 2808 	call getc  
      0025BE 72 3F 00 19      [ 4] 2809 2$: clr [ptr16]
      0025C2 72 5C 00 1A      [ 1] 2810 	inc ptr8 
      0025C6 72 3F 00 19      [ 4] 2811 	clr [ptr16]
      0025CA 72 5C 00 1A      [ 1] 2812 	inc ptr8 
      0025CE 72 C7 00 19      [ 4] 2813 	ld [ptr16],a 
      0025D2 81               [ 4] 2814 	ret 
                                   2815 
                                   2816 
                                   2817 ;-----------------
                                   2818 ; 1 Khz beep 
                                   2819 ;-----------------
      0025D3                       2820 beep_1khz:: 
      0025D3 90 89            [ 2] 2821 	pushw y 
      0025D5 AE 00 64         [ 2] 2822 	ldw x,#100
      0025D8 90 AE 03 E8      [ 2] 2823 	ldw y,#1000
      0025DC 20 22            [ 2] 2824 	jra beep
                                   2825 
                                   2826 ;-----------------------
                                   2827 ; BASIC: TONE expr1,expr2
                                   2828 ; used TIMER2 channel 1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                                   2829 ; to produce a tone 
                                   2830 ; arguments:
                                   2831 ;    expr1   frequency 
                                   2832 ;    expr2   duration msec.
                                   2833 ;---------------------------
      0025DE                       2834 tone:
      0025DE 90 89            [ 2] 2835 	pushw y 
      0025E0 CD 19 92         [ 4] 2836 	call arg_list 
      0025E3 A1 02            [ 1] 2837 	cp a,#2 
      0025E5 27 03            [ 1] 2838 	jreq 1$
      0025E7 CC 16 66         [ 2] 2839 	jp syntax_error 
      0025EA                       2840 1$: 
      0025EA                       2841 	_xpop 
      0025EA 90 F6            [ 1]    1     ld a,(y)
      0025EC 93               [ 1]    2     ldw x,y 
      0025ED EE 01            [ 2]    3     ldw x,(1,x)
      0025EF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025F3 89               [ 2] 2842 	pushw x ; duration 
      0025F4                       2843 	_xpop ; frequency
      0025F4 90 F6            [ 1]    1     ld a,(y)
      0025F6 93               [ 1]    2     ldw x,y 
      0025F7 EE 01            [ 2]    3     ldw x,(1,x)
      0025F9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025FD 90 93            [ 1] 2844 	ldw y,x ; frequency 
      0025FF 85               [ 2] 2845 	popw x  ; duration 
      002600                       2846 beep:  
      002600 89               [ 2] 2847 	pushw x 
      002601 AE F4 24         [ 2] 2848 	ldw x,#TIM2_CLK_FREQ
      002604 65               [ 2] 2849 	divw x,y ; cntr=Fclk/freq 
                                   2850 ; round to nearest integer 
      002605 90 A3 7A 12      [ 2] 2851 	cpw y,#TIM2_CLK_FREQ/2
      002609 2B 01            [ 1] 2852 	jrmi 2$
      00260B 5C               [ 1] 2853 	incw x 
      00260C                       2854 2$:	 
      00260C 9E               [ 1] 2855 	ld a,xh 
      00260D C7 53 0D         [ 1] 2856 	ld TIM2_ARRH,a 
      002610 9F               [ 1] 2857 	ld a,xl 
      002611 C7 53 0E         [ 1] 2858 	ld TIM2_ARRL,a 
                                   2859 ; 50% duty cycle 
      002614 8C               [ 1] 2860 	ccf 
      002615 56               [ 2] 2861 	rrcw x 
      002616 9E               [ 1] 2862 	ld a,xh 
      002617 C7 53 0F         [ 1] 2863 	ld TIM2_CCR1H,a 
      00261A 9F               [ 1] 2864 	ld a,xl
      00261B C7 53 10         [ 1] 2865 	ld TIM2_CCR1L,a
      00261E 72 10 53 08      [ 1] 2866 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      002622 72 10 53 00      [ 1] 2867 	bset TIM2_CR1,#TIM2_CR1_CEN
      002626 72 10 53 04      [ 1] 2868 	bset TIM2_EGR,#TIM2_EGR_UG
      00262A 85               [ 2] 2869 	popw x 
      00262B CD 2A 6C         [ 4] 2870 	call pause02
      00262E 72 11 53 08      [ 1] 2871 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      002632 72 11 53 00      [ 1] 2872 	bres TIM2_CR1,#TIM2_CR1_CEN 
      002636 90 85            [ 2] 2873 	popw y 
      002638 81               [ 4] 2874 	ret 
                                   2875 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



                                   2876 ;-------------------------------
                                   2877 ; BASIC: ADCON 0|1 [,divisor]  
                                   2878 ; disable/enanble ADC 
                                   2879 ;-------------------------------
                           000003  2880 	ONOFF=3 
                           000001  2881 	DIVSOR=1
                           000004  2882 	VSIZE=4 
      002639                       2883 power_adc:
      002639 CD 19 92         [ 4] 2884 	call arg_list 
      00263C A1 02            [ 1] 2885 	cp a,#2	
      00263E 27 12            [ 1] 2886 	jreq 1$
      002640 A1 01            [ 1] 2887 	cp a,#1 
      002642 27 03            [ 1] 2888 	jreq 0$ 
      002644 CC 16 66         [ 2] 2889 	jp syntax_error 
      002647 4F               [ 1] 2890 0$:	clr a 
      002648 5F               [ 1] 2891 	clrw x
      002649                       2892 	_xpush   ; divisor  
      002649 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00264D 90 F7            [ 1]    2     ld (y),a 
      00264F 90 EF 01         [ 2]    3     ldw (1,y),x 
      002652                       2893 1$: _at_next 
      002652 90 E6 03         [ 1]    1     ld a,(3,y)
      002655 93               [ 1]    2     ldw x,y 
      002656 EE 04            [ 2]    3     ldw x,(4,x)
      002658 5D               [ 2] 2894 	tnzw x 
      002659 27 25            [ 1] 2895 	jreq 2$ 
      00265B                       2896 	_xpop
      00265B 90 F6            [ 1]    1     ld a,(y)
      00265D 93               [ 1]    2     ldw x,y 
      00265E EE 01            [ 2]    3     ldw x,(1,x)
      002660 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002664                       2897 	_xdrop  
      002664 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      002668 9F               [ 1] 2898 	ld a,xl
      002669 A4 07            [ 1] 2899 	and a,#7
      00266B 4E               [ 1] 2900 	swap a 
      00266C C7 54 01         [ 1] 2901 	ld ADC_CR1,a
      00266F 72 16 50 CA      [ 1] 2902 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      002673 72 10 54 01      [ 1] 2903 	bset ADC_CR1,#ADC_CR1_ADON 
      002677                       2904 	_usec_dly 7 
      002677 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00267A 5A               [ 2]    2     decw x
      00267B 9D               [ 1]    3     nop 
      00267C 26 FA            [ 1]    4     jrne .-4
      00267E 20 08            [ 2] 2905 	jra 3$
      002680 72 11 54 01      [ 1] 2906 2$: bres ADC_CR1,#ADC_CR1_ADON
      002684 72 17 50 CA      [ 1] 2907 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      002688                       2908 3$:	
      002688 81               [ 4] 2909 	ret
                                   2910 
                                   2911 ;-----------------------------
                                   2912 ; BASIC: ADCREAD (channel)
                                   2913 ; read adc channel {0..5}
                                   2914 ; output:
                                   2915 ;   A 		TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



                                   2916 ;   X 		value 
                                   2917 ;-----------------------------
      002689                       2918 analog_read:
      002689 CD 19 8D         [ 4] 2919 	call func_args 
      00268C A1 01            [ 1] 2920 	cp a,#1 
      00268E 27 03            [ 1] 2921 	jreq 1$
      002690 CC 16 66         [ 2] 2922 	jp syntax_error
      002693                       2923 1$: _xpop 
      002693 90 F6            [ 1]    1     ld a,(y)
      002695 93               [ 1]    2     ldw x,y 
      002696 EE 01            [ 2]    3     ldw x,(1,x)
      002698 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00269C A3 00 05         [ 2] 2924 	cpw x,#5 
      00269F 23 05            [ 2] 2925 	jrule 2$
      0026A1 A6 0A            [ 1] 2926 	ld a,#ERR_BAD_VALUE
      0026A3 CC 16 68         [ 2] 2927 	jp tb_error 
      0026A6 9F               [ 1] 2928 2$: ld a,xl
      0026A7 C7 00 0E         [ 1] 2929 	ld acc8,a 
      0026AA A6 05            [ 1] 2930 	ld a,#5
      0026AC C0 00 0E         [ 1] 2931 	sub a,acc8 
      0026AF C7 54 00         [ 1] 2932 	ld ADC_CSR,a
      0026B2 72 16 54 02      [ 1] 2933 	bset ADC_CR2,#ADC_CR2_ALIGN
      0026B6 72 10 54 01      [ 1] 2934 	bset ADC_CR1,#ADC_CR1_ADON
      0026BA 72 0F 54 00 FB   [ 2] 2935 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0026BF CE 54 04         [ 2] 2936 	ldw x,ADC_DRH
      0026C2 A6 84            [ 1] 2937 	ld a,#TK_INTGR
      0026C4 81               [ 4] 2938 	ret 
                                   2939 
                                   2940 ;-----------------------
                                   2941 ; BASIC: DREAD(pin)
                                   2942 ; Arduino pins 
                                   2943 ; read state of a digital pin 
                                   2944 ; pin# {0..15}
                                   2945 ; output:
                                   2946 ;    A 		TK_INTGR
                                   2947 ;    X      0|1 
                                   2948 ;-------------------------
                           000001  2949 	PINNO=1
                           000001  2950 	VSIZE=1
      0026C5                       2951 digital_read:
      0026C5                       2952 	_vars VSIZE 
      0026C5 52 01            [ 2]    1     sub sp,#VSIZE 
      0026C7 CD 19 8D         [ 4] 2953 	call func_args
      0026CA A1 01            [ 1] 2954 	cp a,#1
      0026CC 27 03            [ 1] 2955 	jreq 1$
      0026CE CC 16 66         [ 2] 2956 	jp syntax_error
      0026D1                       2957 1$: _xpop 
      0026D1 90 F6            [ 1]    1     ld a,(y)
      0026D3 93               [ 1]    2     ldw x,y 
      0026D4 EE 01            [ 2]    3     ldw x,(1,x)
      0026D6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026DA A3 00 0F         [ 2] 2958 	cpw x,#15 
      0026DD 23 05            [ 2] 2959 	jrule 2$
      0026DF A6 0A            [ 1] 2960 	ld a,#ERR_BAD_VALUE
      0026E1 CC 16 68         [ 2] 2961 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0026E4 CD 2B AF         [ 4] 2962 2$:	call select_pin 
      0026E7 6B 01            [ 1] 2963 	ld (PINNO,sp),a
      0026E9 E6 01            [ 1] 2964 	ld a,(GPIO_IDR,x)
      0026EB 0D 01            [ 1] 2965 	tnz (PINNO,sp)
      0026ED 27 05            [ 1] 2966 	jreq 8$
      0026EF 44               [ 1] 2967 3$: srl a 
      0026F0 0A 01            [ 1] 2968 	dec (PINNO,sp)
      0026F2 26 FB            [ 1] 2969 	jrne 3$ 
      0026F4 A4 01            [ 1] 2970 8$: and a,#1 
      0026F6 5F               [ 1] 2971 	clrw x 
      0026F7 97               [ 1] 2972 	ld xl,a 
      0026F8 4F               [ 1] 2973 	clr a 
      0026F9                       2974 	_drop VSIZE
      0026F9 5B 01            [ 2]    1     addw sp,#VSIZE 
      0026FB 81               [ 4] 2975 	ret
                                   2976 
                                   2977 
                                   2978 ;-----------------------
                                   2979 ; BASIC: DWRITE pin,0|1
                                   2980 ; Arduino pins 
                                   2981 ; write to a digital pin 
                                   2982 ; pin# {0..15}
                                   2983 ; output:
                                   2984 ;    A 		TK_INTGR
                                   2985 ;    X      0|1 
                                   2986 ;-------------------------
                           000001  2987 	PINNO=1
                           000002  2988 	PINVAL=2
                           000002  2989 	VSIZE=2
      0026FC                       2990 digital_write:
      0026FC                       2991 	_vars VSIZE 
      0026FC 52 02            [ 2]    1     sub sp,#VSIZE 
      0026FE CD 19 92         [ 4] 2992 	call arg_list  
      002701 A1 02            [ 1] 2993 	cp a,#2 
      002703 27 03            [ 1] 2994 	jreq 1$
      002705 CC 16 66         [ 2] 2995 	jp syntax_error
      002708                       2996 1$: _xpop 
      002708 90 F6            [ 1]    1     ld a,(y)
      00270A 93               [ 1]    2     ldw x,y 
      00270B EE 01            [ 2]    3     ldw x,(1,x)
      00270D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002711 9F               [ 1] 2997 	ld a,xl 
      002712 6B 02            [ 1] 2998 	ld (PINVAL,sp),a
      002714                       2999 	_xpop 
      002714 90 F6            [ 1]    1     ld a,(y)
      002716 93               [ 1]    2     ldw x,y 
      002717 EE 01            [ 2]    3     ldw x,(1,x)
      002719 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00271D A3 00 0F         [ 2] 3000 	cpw x,#15 
      002720 23 05            [ 2] 3001 	jrule 2$
      002722 A6 0A            [ 1] 3002 	ld a,#ERR_BAD_VALUE
      002724 CC 16 68         [ 2] 3003 	jp tb_error 
      002727 CD 2B AF         [ 4] 3004 2$:	call select_pin 
      00272A 6B 01            [ 1] 3005 	ld (PINNO,sp),a 
      00272C A6 01            [ 1] 3006 	ld a,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      00272E 0D 01            [ 1] 3007 	tnz (PINNO,sp)
      002730 27 05            [ 1] 3008 	jreq 4$
      002732 48               [ 1] 3009 3$: sll a
      002733 0A 01            [ 1] 3010 	dec (PINNO,sp)
      002735 26 FB            [ 1] 3011 	jrne 3$
      002737 0D 02            [ 1] 3012 4$: tnz (PINVAL,sp)
      002739 26 05            [ 1] 3013 	jrne 5$
      00273B 43               [ 1] 3014 	cpl a 
      00273C E4 00            [ 1] 3015 	and a,(GPIO_ODR,x)
      00273E 20 02            [ 2] 3016 	jra 8$
      002740 EA 00            [ 1] 3017 5$: or a,(GPIO_ODR,x)
      002742 E7 00            [ 1] 3018 8$: ld (GPIO_ODR,x),a 
      002744                       3019 	_drop VSIZE 
      002744 5B 02            [ 2]    1     addw sp,#VSIZE 
      002746 81               [ 4] 3020 	ret
                                   3021 
                                   3022 
                                   3023 ;-----------------------
                                   3024 ; BASIC: STOP
                                   3025 ; stop progam execution  
                                   3026 ; without resetting pointers 
                                   3027 ; the program is resumed
                                   3028 ; with RUN 
                                   3029 ;-------------------------
      002747                       3030 stop:
      002747 72 00 00 22 02   [ 2] 3031 	btjt flags,#FRUN,2$
      00274C 4F               [ 1] 3032 	clr a
      00274D 81               [ 4] 3033 	ret 
      00274E                       3034 2$:	 
                                   3035 ; create space on cstack to save context 
      00274E AE 27 75         [ 2] 3036 	ldw x,#break_point 
      002751 CD 09 68         [ 4] 3037 	call puts 
      002754                       3038 	_drop 2 ;drop return address 
      002754 5B 02            [ 2]    1     addw sp,#2 
      002756                       3039 	_vars CTXT_SIZE ; context size 
      002756 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      002758 CD 20 AF         [ 4] 3040 	call save_context 
      00275B AE 16 90         [ 2] 3041 	ldw x,#tib 
      00275E CF 00 04         [ 2] 3042 	ldw basicptr,x
      002761 7F               [ 1] 3043 	clr (x)
      002762 72 5F 00 03      [ 1] 3044 	clr count  
      002766 5F               [ 1] 3045 	clrw x 
      002767 CF 00 00         [ 2] 3046 	ldw in.w,x
      00276A 72 11 00 22      [ 1] 3047 	bres flags,#FRUN 
      00276E 72 18 00 22      [ 1] 3048 	bset flags,#FBREAK
      002772 CC 17 11         [ 2] 3049 	jp interpreter 
      002775 0A 62 72 65 61 6B 20  3050 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3051 
                                   3052 ;-----------------------
                                   3053 ; BASIC: NEW
                                   3054 ; from command line only 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                                   3055 ; free program memory
                                   3056 ; and clear variables 
                                   3057 ;------------------------
      002793                       3058 new: 
      002793 72 01 00 22 01   [ 2] 3059 	btjf flags,#FRUN,0$ 
      002798 81               [ 4] 3060 	ret 
      002799                       3061 0$:	
      002799 CD 14 9E         [ 4] 3062 	call clear_basic 
      00279C 81               [ 4] 3063 	ret 
                                   3064 
                                   3065 ;-----------------------------------
                                   3066 ; BASIC: ERASE \E | \F 
                                   3067 ; erase all block in range from 
                                   3068 ;  'app_space' to FLASH end (0x20000)
                                   3069 ;  or all EEPROM 
                                   3070 ; that contains a non zero byte.  
                                   3071 ;-----------------------------------
                           000001  3072 	LIMIT=1 
                           000003  3073 	VSIZE = 3 
      00279D                       3074 erase:
      00279D 72 5F 00 18      [ 1] 3075 	clr farptr 
      0027A1                       3076 	_vars VSIZE 
      0027A1 52 03            [ 2]    1     sub sp,#VSIZE 
      0027A3 CD 17 CA         [ 4] 3077 	call next_token 
      0027A6 A1 04            [ 1] 3078 	cp a,#TK_CHAR 
      0027A8 27 03            [ 1] 3079 	jreq 0$ 
      0027AA CC 16 66         [ 2] 3080 	jp syntax_error
      0027AD CD 18 0C         [ 4] 3081 0$: call get_char 
      0027B0 A4 DF            [ 1] 3082 	and a,#0XDF 
      0027B2 A1 45            [ 1] 3083 	cp a,#'E
      0027B4 26 0C            [ 1] 3084 	jrne 1$
      0027B6 AE 40 00         [ 2] 3085 	ldw x,#EEPROM_BASE 
      0027B9 CF 00 19         [ 2] 3086 	ldw farptr+1,x 
      0027BC AE 47 FF         [ 2] 3087 	ldw x,#EEPROM_END
      0027BF 4F               [ 1] 3088 	clr a 
      0027C0 20 15            [ 2] 3089 	jra 3$ 
      0027C2 A1 46            [ 1] 3090 1$: cp a,#'F 
      0027C4 27 06            [ 1] 3091 	jreq 2$
      0027C6 AE 15 8A         [ 2] 3092 	ldw x,#err_bad_value
      0027C9 CC 16 68         [ 2] 3093 	jp tb_error
      0027CC                       3094 2$:
      0027CC AE 36 00         [ 2] 3095 	ldw x,#app_space  
      0027CF CF 00 19         [ 2] 3096 	ldw farptr+1,x 
      0027D2 A6 02            [ 1] 3097 	ld a,#(FLASH_END>>16)&0XFF 
      0027D4 AE 7F FF         [ 2] 3098 	ldw x,#FLASH_END&0xffff
      0027D7                       3099 3$:
      0027D7 6B 01            [ 1] 3100 	ld (LIMIT,sp),a 
      0027D9 1F 02            [ 2] 3101 	ldw (LIMIT+1,sp),x 
                                   3102  ; operation done from RAM
                                   3103  ; copy code to RAM in tib   
      0027DB CD 07 09         [ 4] 3104 	call move_erase_to_ram
      0027DE                       3105 4$:	 
      0027DE CD 08 8B         [ 4] 3106     call scan_block 
      0027E1 27 08            [ 1] 3107 	jreq 5$  ; block already erased 
      0027E3 A6 45            [ 1] 3108     ld a,#'E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0027E5 CD 09 0B         [ 4] 3109     call putc 
      0027E8 CD 07 87         [ 4] 3110 	call block_erase   
                                   3111 ; this block is clean, next  
      0027EB AE 00 80         [ 2] 3112 5$:	ldw x,#BLOCK_SIZE
      0027EE CD 08 7D         [ 4] 3113 	call incr_farptr
                                   3114 ; check limit, 24 bit substraction  	
      0027F1 7B 01            [ 1] 3115 	ld a,(LIMIT,sp)
      0027F3 1E 02            [ 2] 3116 	ldw x,(LIMIT+1,sp)
      0027F5 72 B0 00 19      [ 2] 3117 	subw x,farptr+1
      0027F9 C2 00 18         [ 1] 3118 	sbc a,farptr 
      0027FC 22 E0            [ 1] 3119 	jrugt 4$ 
      0027FE CD 14 9E         [ 4] 3120 9$: call clear_basic
      002801 1E 02            [ 2] 3121 	ldw x,(LIMIT+1,sp)
      002803 A3 47 FF         [ 2] 3122 	cpw x,#EEPROM_END
      002806 26 03            [ 1] 3123 	jrne 10$
      002808 CD 1D 6E         [ 4] 3124 	call func_eefree 
      00280B                       3125 10$:
      00280B                       3126 	_drop VSIZE 
      00280B 5B 03            [ 2]    1     addw sp,#VSIZE 
      00280D 81               [ 4] 3127 	ret 
                                   3128 	
                                   3129 
                                   3130 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3131 ;  check for application signature 
                                   3132 ; output:
                                   3133 ;   Carry    0 app present 
                                   3134 ;            1 no app installed  
                                   3135 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00280E                       3136 qsign: 
      00280E CE 36 00         [ 2] 3137 	ldw x,app_sign 
      002811 C3 28 CE         [ 2] 3138 	cpw x,SIGNATURE ; "TB" 
      002814 81               [ 4] 3139 	ret 
                                   3140 
                                   3141 ;--------------------------------------
                                   3142 ;  fill write buffer 
                                   3143 ;  input:
                                   3144 ;    y  point to output buffer 
                                   3145 ;    x  point to source 
                                   3146 ;    a  bytes to write in buffer 
                                   3147 ;  output:
                                   3148 ;    y   += A 
                                   3149 ;    X   += A 
                                   3150 ;    A   0 
                                   3151 ;---------------------------------------
      002815                       3152 fill_write_buffer:
      002815 88               [ 1] 3153 	push a 
      002816 4D               [ 1] 3154 	tnz a 
      002817 27 0A            [ 1] 3155 	jreq 9$ 
      002819 F6               [ 1] 3156 1$: ld a,(x)
      00281A 5C               [ 1] 3157 	incw x 
      00281B 90 F7            [ 1] 3158 	ld (y),a 
      00281D 90 5C            [ 1] 3159 	incw y 
      00281F 0A 01            [ 1] 3160 	dec (1,sp) 
      002821 26 F6            [ 1] 3161 	jrne 1$ 
      002823 84               [ 1] 3162 9$:	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      002824 81               [ 4] 3163     ret 	
                                   3164 
                                   3165 ;--------------------------------------
                                   3166 ;  fill pad buffer with zero 
                                   3167 ;  input:
                                   3168 ;	none 
                                   3169 ;  output:
                                   3170 ;    y     buffer address  
                                   3171 ;--------------------------------------
      002825                       3172 clear_block_buffer:
      002825 88               [ 1] 3173 	push a 
      002826 90 AE 16 E0      [ 2] 3174 	ldw y,#block_buffer 
      00282A 90 89            [ 2] 3175 	pushw y
      00282C A6 80            [ 1] 3176 	ld a,#BLOCK_SIZE   
      00282E 90 7F            [ 1] 3177 1$:	clr (y)
      002830 90 5C            [ 1] 3178 	incw y
      002832 4A               [ 1] 3179 	dec a  
      002833 26 F9            [ 1] 3180 	jrne 1$ 	
      002835 90 85            [ 2] 3181 9$: popw y 
      002837 84               [ 1] 3182 	pop a 			
      002838 81               [ 4] 3183 	ret 
                                   3184 
                                   3185 
                                   3186 ;---------------------------------------
                                   3187 ; BASIC: SAVE
                                   3188 ; write application from RAM to FLASH
                                   3189 ; at UFLASH address
                                   3190 ;--------------------------------------
                           000001  3191 	XTEMP=1
                           000003  3192 	COUNT=3  ; last count bytes written 
                           000004  3193 	CNT_LO=4 ; count low byte 
                           000005  3194 	TOWRITE=5 ; how bytes left to write  
                           000006  3195 	VSIZE=6 
      002839                       3196 save_app:
      002839 89               [ 2] 3197 	pushw x 
      00283A 90 89            [ 2] 3198 	pushw y 
      00283C                       3199 	_vars VSIZE
      00283C 52 06            [ 2]    1     sub sp,#VSIZE 
      00283E CD 28 0E         [ 4] 3200 	call qsign 
      002841 26 09            [ 1] 3201 	jrne 1$
      002843 AE 28 D0         [ 2] 3202 	ldw x,#CANT_DO 
      002846 CD 09 68         [ 4] 3203 	call puts 
      002849 CC 28 C8         [ 2] 3204 	jp 9$
      00284C                       3205 1$: 
      00284C CE 00 1B         [ 2] 3206 	ldw x,txtbgn
      00284F C3 00 1D         [ 2] 3207 	cpw x,txtend 
      002852 25 09            [ 1] 3208 	jrult 2$ 
      002854 AE 29 12         [ 2] 3209 	ldw x,#NO_APP
      002857 CD 09 68         [ 4] 3210 	call puts 
      00285A CC 28 C8         [ 2] 3211 	jp 9$
      00285D                       3212 2$: 
                                   3213 ; block programming flash
                                   3214 ; must be done from RAM
                                   3215 ; moved in tib  
      00285D CD 07 49         [ 4] 3216 	call move_prg_to_ram
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   3217 ; initialize farptr 
                                   3218 ; to app_sign address 
      002860 72 5F 00 18      [ 1] 3219 	clr farptr 
      002864 AE 36 00         [ 2] 3220 	ldw x,#app_sign 
      002867 CF 00 19         [ 2] 3221 	ldw farptr+1,x
                                   3222 ; initialize local variables 
      00286A CD 1E 88         [ 4] 3223 	call prog_size
      00286D 1F 05            [ 2] 3224 	ldw (TOWRITE,sp),x
      00286F 0F 03            [ 1] 3225 	clr (COUNT,sp)
                                   3226 ; first bock 
                                   3227 ; containt signature 2 bytes 
                                   3228 ; and size 	2 bytes 
                                   3229 ; use Y as pointer to block_buffer
      002871 CD 28 25         [ 4] 3230 	call clear_block_buffer ; -- y=*block_buffer	
                                   3231 ; write signature
      002874 CE 28 CE         [ 2] 3232 	ldw x,SIGNATURE ; "BC" 
      002877 90 FF            [ 2] 3233 	ldw (y),x 
      002879 72 A9 00 02      [ 2] 3234 	addw y,#2
      00287D 1E 05            [ 2] 3235 	ldw x,(TOWRITE,sp)
      00287F 90 FF            [ 2] 3236 	ldw (y),x
      002881 72 A9 00 02      [ 2] 3237 	addw y,#2   
      002885 A6 7C            [ 1] 3238 	ld a,#(BLOCK_SIZE-4)
      002887 6B 04            [ 1] 3239 	ld (CNT_LO,sp),a 
      002889 A3 00 7C         [ 2] 3240 	cpw x,#(BLOCK_SIZE-4) 
      00288C 22 01            [ 1] 3241 	jrugt 3$
      00288E 9F               [ 1] 3242 	ld a,xl 
      00288F 6B 04            [ 1] 3243 3$:	ld (CNT_LO,sp),a   
      002891 CE 00 1B         [ 2] 3244 	ldw x,txtbgn 
      002894 1F 01            [ 2] 3245 	ldw (XTEMP,sp),x 
      002896                       3246 32$: 
      002896 1E 01            [ 2] 3247 	ldw x,(XTEMP,sp)
      002898 7B 04            [ 1] 3248 	ld a,(CNT_LO,sp)
      00289A CD 28 15         [ 4] 3249 	call fill_write_buffer 
      00289D 1F 01            [ 2] 3250 	ldw (XTEMP,sp),x 
      00289F AE 16 E0         [ 2] 3251 	ldw x,#block_buffer
      0028A2 CD 07 63         [ 4] 3252 	call write_buffer
      0028A5 AE 00 80         [ 2] 3253 	ldw x,#BLOCK_SIZE 
      0028A8 CD 08 7D         [ 4] 3254 	call incr_farptr  
                                   3255 ; following blocks 
      0028AB 1E 01            [ 2] 3256 	ldw x,(XTEMP,sp)
      0028AD C3 00 1D         [ 2] 3257 	cpw x,txtend 
      0028B0 24 16            [ 1] 3258 	jruge 9$ 
      0028B2 1E 05            [ 2] 3259 	ldw x,(TOWRITE,sp)
      0028B4 72 F0 03         [ 2] 3260 	subw x,(COUNT,sp)
      0028B7 1F 05            [ 2] 3261 	ldw (TOWRITE,sp),x 
      0028B9 A6 80            [ 1] 3262 	ld a,#BLOCK_SIZE 
      0028BB A3 00 80         [ 2] 3263 	cpw x,#BLOCK_SIZE 
      0028BE 24 01            [ 1] 3264 	jruge 4$ 
      0028C0 9F               [ 1] 3265 	ld a,xl 
      0028C1 6B 04            [ 1] 3266 4$:	ld (CNT_LO,sp),a 
      0028C3 CD 28 25         [ 4] 3267 	call clear_block_buffer 
      0028C6 20 CE            [ 2] 3268 	jra 32$ 
      0028C8                       3269 9$:	_drop VSIZE 
      0028C8 5B 06            [ 2]    1     addw sp,#VSIZE 
      0028CA 90 85            [ 2] 3270     popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      0028CC 85               [ 2] 3271 	popw x 
      0028CD 81               [ 4] 3272 	ret 
                                   3273 
                                   3274 
      0028CE 54 42                 3275 SIGNATURE: .ascii "TB"
      0028D0 43 61 6E 27 74 20 66  3276 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      002912 4E 6F 20 61 70 70 6C  3277 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3278 
                                   3279 ;---------------------
                                   3280 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3281 ; write 1 or more byte to FLASH or EEPROM
                                   3282 ; starting at address  
                                   3283 ; input:
                                   3284 ;   expr1  	is address 
                                   3285 ;   expr2,...,exprn   are bytes to write
                                   3286 ; output:
                                   3287 ;   none 
                                   3288 ;---------------------
      002928                       3289 write:
      002928 CD 1A D6         [ 4] 3290 	call expression
      00292B A1 84            [ 1] 3291 	cp a,#TK_INTGR 
      00292D 27 03            [ 1] 3292 	jreq 0$
      00292F CC 16 66         [ 2] 3293 	jp syntax_error
      002932                       3294 0$: _xpop 
      002932 90 F6            [ 1]    1     ld a,(y)
      002934 93               [ 1]    2     ldw x,y 
      002935 EE 01            [ 2]    3     ldw x,(1,x)
      002937 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00293B C7 00 18         [ 1] 3295 	ld farptr,a 
      00293E CF 00 19         [ 2] 3296 	ldw ptr16,x 
      002941                       3297 1$:	
      002941 CD 17 CA         [ 4] 3298 	call next_token 
      002944 A1 08            [ 1] 3299 	cp a,#TK_COMMA 
      002946 27 02            [ 1] 3300 	jreq 2$ 
      002948 20 20            [ 2] 3301 	jra 9$ ; no more data 
      00294A CD 1A D6         [ 4] 3302 2$:	call expression
      00294D A1 84            [ 1] 3303 	cp a,#TK_INTGR
      00294F 27 03            [ 1] 3304 	jreq 3$
      002951 CC 16 66         [ 2] 3305 	jp syntax_error
      002954                       3306 3$:	_xpop 
      002954 90 F6            [ 1]    1     ld a,(y)
      002956 93               [ 1]    2     ldw x,y 
      002957 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      002959 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00295D 9F               [ 1] 3307 	ld a,xl 
      00295E 5F               [ 1] 3308 	clrw x 
      00295F CD 07 AD         [ 4] 3309 	call write_byte
      002962 AE 00 01         [ 2] 3310 	ldw x,#1 
      002965 CD 08 7D         [ 4] 3311 	call incr_farptr 
      002968 20 D7            [ 2] 3312 	jra 1$ 
      00296A                       3313 9$:
      00296A 81               [ 4] 3314 	ret 
                                   3315 
                                   3316 
                                   3317 ;---------------------
                                   3318 ;BASIC: CHAR(expr)
                                   3319 ; évaluate expression 
                                   3320 ; and take the 7 least 
                                   3321 ; bits as ASCII character
                                   3322 ; output: 
                                   3323 ; 	A char 
                                   3324 ;---------------------
      00296B                       3325 func_char:
      00296B CD 19 8D         [ 4] 3326 	call func_args 
      00296E A1 01            [ 1] 3327 	cp a,#1
      002970 27 03            [ 1] 3328 	jreq 1$
      002972 CC 16 66         [ 2] 3329 	jp syntax_error
      002975                       3330 1$:	_xpop
      002975 90 F6            [ 1]    1     ld a,(y)
      002977 93               [ 1]    2     ldw x,y 
      002978 EE 01            [ 2]    3     ldw x,(1,x)
      00297A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00297E 9F               [ 1] 3331 	ld a,xl
      00297F A4 7F            [ 1] 3332 	and a,#0x7f 
      002981 81               [ 4] 3333 	ret
                                   3334 
                                   3335 ;---------------------
                                   3336 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3337 ; extract first character 
                                   3338 ; of string argument 
                                   3339 ; output:
                                   3340 ;    A:X    int24 
                                   3341 ;---------------------
      002982                       3342 ascii:
      002982 A6 06            [ 1] 3343 	ld a,#TK_LPAREN
      002984 CD 19 80         [ 4] 3344 	call expect 
      002987 CD 17 CA         [ 4] 3345 	call next_token 
      00298A A1 02            [ 1] 3346 	cp a,#TK_QSTR 
      00298C 27 0E            [ 1] 3347 	jreq 1$
      00298E A1 04            [ 1] 3348 	cp a,#TK_CHAR 
      002990 27 12            [ 1] 3349 	jreq 2$ 
      002992 A1 82            [ 1] 3350 	cp a,#TK_CFUNC 
      002994 27 03            [ 1] 3351 	jreq 0$
      002996 CC 16 66         [ 2] 3352 	jp syntax_error
      002999                       3353 0$: ; cfunc 
      002999 FD               [ 4] 3354 	call (x)
      00299A 20 0B            [ 2] 3355 	jra 3$
      00299C                       3356 1$: ; quoted string 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      00299C F6               [ 1] 3357 	ld a,(x)
      00299D 88               [ 1] 3358 	push a  
      00299E CD 17 E3         [ 4] 3359 	call skip_string
      0029A1 84               [ 1] 3360 	pop a  	
      0029A2 20 03            [ 2] 3361 	jra 3$ 
      0029A4                       3362 2$: ; character 
      0029A4 CD 18 0C         [ 4] 3363 	call get_char 
      0029A7 5F               [ 1] 3364 3$:	clrw x 
      0029A8 02               [ 1] 3365 	rlwa x   
      0029A9                       3366 4$:	_xpush  
      0029A9 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0029AD 90 F7            [ 1]    2     ld (y),a 
      0029AF 90 EF 01         [ 2]    3     ldw (1,y),x 
      0029B2 A6 07            [ 1] 3367 	ld a,#TK_RPAREN 
      0029B4 CD 19 80         [ 4] 3368 	call expect
      0029B7                       3369 9$:	
      0029B7                       3370 	_xpop  
      0029B7 90 F6            [ 1]    1     ld a,(y)
      0029B9 93               [ 1]    2     ldw x,y 
      0029BA EE 01            [ 2]    3     ldw x,(1,x)
      0029BC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029C0 81               [ 4] 3371 	ret 
                                   3372 
                                   3373 ;---------------------
                                   3374 ;BASIC: KEY
                                   3375 ; wait for a character 
                                   3376 ; received from STDIN 
                                   3377 ; input:
                                   3378 ;	none 
                                   3379 ; output:
                                   3380 ;	a	 character 
                                   3381 ;---------------------
      0029C1                       3382 key:
      0029C1 CD 09 1B         [ 4] 3383 	call getc 
      0029C4 81               [ 4] 3384 	ret
                                   3385 
                                   3386 ;----------------------
                                   3387 ; BASIC: QKEY
                                   3388 ; Return true if there 
                                   3389 ; is a character in 
                                   3390 ; waiting in STDIN 
                                   3391 ; input:
                                   3392 ;  none 
                                   3393 ; output:
                                   3394 ;   A     0|-1
                                   3395 ;-----------------------
      0029C5                       3396 qkey:: 
      0029C5 5F               [ 1] 3397 	clrw x 
      0029C6 C6 00 2E         [ 1] 3398 	ld a,rx1_head
      0029C9 C0 00 2F         [ 1] 3399 	sub a,rx1_tail 
      0029CC 27 03            [ 1] 3400 	jreq 9$ 
      0029CE 53               [ 2] 3401 	cplw x
      0029CF A6 FF            [ 1] 3402 	ld a,#255    
      0029D1                       3403 9$: 
      0029D1 81               [ 4] 3404 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



                                   3405 
                                   3406 ;---------------------
                                   3407 ; BASIC: GPIO(port,reg)
                                   3408 ; return gpio register address 
                                   3409 ; expr {PORTA..PORTI}
                                   3410 ; input:
                                   3411 ;   none 
                                   3412 ; output:
                                   3413 ;   A:X 	gpio register address
                                   3414 ;----------------------------
                                   3415 ;	N=PORT
                                   3416 ;	T=REG 
      0029D2                       3417 gpio:
      0029D2 CD 19 8D         [ 4] 3418 	call func_args 
      0029D5 A1 02            [ 1] 3419 	cp a,#2
      0029D7 27 03            [ 1] 3420 	jreq 1$
      0029D9 CC 16 66         [ 2] 3421 	jp syntax_error  
      0029DC                       3422 1$:	_at_next 
      0029DC 90 E6 03         [ 1]    1     ld a,(3,y)
      0029DF 93               [ 1]    2     ldw x,y 
      0029E0 EE 04            [ 2]    3     ldw x,(4,x)
      0029E2 A3 50 00         [ 2] 3423 	cpw x,#PA_BASE 
      0029E5 2B 16            [ 1] 3424 	jrmi bad_port
      0029E7 A3 50 29         [ 2] 3425 	cpw x,#PI_BASE+1 
      0029EA 2A 11            [ 1] 3426 	jrpl bad_port
      0029EC 89               [ 2] 3427 	pushw x 
      0029ED                       3428 	_xpop
      0029ED 90 F6            [ 1]    1     ld a,(y)
      0029EF 93               [ 1]    2     ldw x,y 
      0029F0 EE 01            [ 2]    3     ldw x,(1,x)
      0029F2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029F6 72 FB 01         [ 2] 3429 	addw x,(1,sp)
      0029F9                       3430 	_drop 2 
      0029F9 5B 02            [ 2]    1     addw sp,#2 
      0029FB 4F               [ 1] 3431 	clr a 
      0029FC 81               [ 4] 3432 	ret
      0029FD                       3433 bad_port:
      0029FD A6 0A            [ 1] 3434 	ld a,#ERR_BAD_VALUE
      0029FF CC 16 68         [ 2] 3435 	jp tb_error
                                   3436 
                                   3437 
                                   3438 ;-------------------------
                                   3439 ; BASIC: UFLASH 
                                   3440 ; return free flash address
                                   3441 ; align to BLOCK address 
                                   3442 ; input:
                                   3443 ;  none 
                                   3444 ; output:
                                   3445 ;	A		TK_INTGR
                                   3446 ;   xstack	free address 
                                   3447 ;---------------------------
      002A02                       3448 uflash:
      002A02 CD 28 0E         [ 4] 3449 	call qsign 
      002A05 26 13            [ 1] 3450 	jrne 1$
      002A07 AE 36 00         [ 2] 3451 	ldw x,#app_space 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      002A0A 72 BB 36 02      [ 2] 3452 	addw x,app_size 
      002A0E 1C 00 04         [ 2] 3453 	addw x,#4
                                   3454 ; align on 128 bytes block 
      002A11 1C 00 80         [ 2] 3455 	addw x,#BLOCK_SIZE 
      002A14 9F               [ 1] 3456 	ld a,xl 
      002A15 A4 80            [ 1] 3457 	and a,#0x80 
      002A17 97               [ 1] 3458 	ld xl,a 
      002A18 20 03            [ 2] 3459 	jra 2$
      002A1A AE 36 00         [ 2] 3460 1$:	ldw x,#app_space 
      002A1D                       3461 2$:
      002A1D 4F               [ 1] 3462 	clr a 
      002A1E 81               [ 4] 3463 	ret 
                                   3464 
                                   3465 
                                   3466 ;---------------------
                                   3467 ; BASIC: USR(addr,arg)
                                   3468 ; execute a function written 
                                   3469 ; in binary code.
                                   3470 ; input:
                                   3471 ;   addr	routine address 
                                   3472 ;   arg 	is an argument
                                   3473 ;           it can be ignore 
                                   3474 ;           by cally. 
                                   3475 ; output:
                                   3476 ;   xstack 	value returned by cally  
                                   3477 ;---------------------
      002A1F                       3478 usr:
      002A1F CD 19 8D         [ 4] 3479 	call func_args 
      002A22 A1 02            [ 1] 3480 	cp a,#2
      002A24 27 03            [ 1] 3481 	jreq 1$  
      002A26 CC 16 66         [ 2] 3482 	jp syntax_error 
      002A29                       3483 1$: 
      002A29                       3484 	_at_next ; A:X addr 
      002A29 90 E6 03         [ 1]    1     ld a,(3,y)
      002A2C 93               [ 1]    2     ldw x,y 
      002A2D EE 04            [ 2]    3     ldw x,(4,x)
      002A2F CF 00 19         [ 2] 3485 	ldw ptr16,X 
      002A32                       3486 	_xpop  ; arg 
      002A32 90 F6            [ 1]    1     ld a,(y)
      002A34 93               [ 1]    2     ldw x,y 
      002A35 EE 01            [ 2]    3     ldw x,(1,x)
      002A37 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A3B                       3487 	_store_top ; overwrite addr 
      002A3B 90 F7            [ 1]    1     ld (y),a 
      002A3D 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A40 72 CD 00 19      [ 6] 3488     call [ptr16]
      002A44 81               [ 4] 3489 	ret 
                                   3490 
                                   3491 
                                   3492 ;------------------------------
                                   3493 ; BASIC: BYE 
                                   3494 ; halt mcu in its lowest power mode 
                                   3495 ; wait for reset or external interrupt
                                   3496 ; do a cold start on wakeup.
                                   3497 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002A45                       3498 bye:
      002A45 72 0D 52 30 FB   [ 2] 3499 	btjf UART1_SR,#UART_SR_TC,.
      002A4A 8E               [10] 3500 	halt
      002A4B CC 00 C3         [ 2] 3501 	jp cold_start  
                                   3502 
                                   3503 ;----------------------------------
                                   3504 ; BASIC: SLEEP 
                                   3505 ; halt mcu until reset or external
                                   3506 ; interrupt.
                                   3507 ; Resume progam after SLEEP command
                                   3508 ;----------------------------------
      002A4E                       3509 sleep:
      002A4E 72 0D 52 30 FB   [ 2] 3510 	btjf UART1_SR,#UART_SR_TC,.
      002A53 72 16 00 22      [ 1] 3511 	bset flags,#FSLEEP
      002A57 8E               [10] 3512 	halt 
      002A58 81               [ 4] 3513 	ret 
                                   3514 
                                   3515 ;-------------------------------
                                   3516 ; BASIC: PAUSE expr 
                                   3517 ; suspend execution for n msec.
                                   3518 ; input:
                                   3519 ;	none
                                   3520 ; output:
                                   3521 ;	none 
                                   3522 ;------------------------------
      002A59                       3523 pause:
      002A59 CD 1A D6         [ 4] 3524 	call expression
      002A5C A1 84            [ 1] 3525 	cp a,#TK_INTGR
      002A5E 27 03            [ 1] 3526 	jreq 1$ 
      002A60 CC 16 66         [ 2] 3527 	jp syntax_error
      002A63                       3528 1$: _xpop 
      002A63 90 F6            [ 1]    1     ld a,(y)
      002A65 93               [ 1]    2     ldw x,y 
      002A66 EE 01            [ 2]    3     ldw x,(1,x)
      002A68 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A6C                       3529 pause02:
      002A6C CF 00 12         [ 2] 3530 	ldw timer,x 
      002A6F CE 00 12         [ 2] 3531 1$: ldw x,timer 
      002A72 5D               [ 2] 3532 	tnzw x 
      002A73 27 03            [ 1] 3533 	jreq 2$
      002A75 8F               [10] 3534 	wfi 
      002A76 26 F7            [ 1] 3535 	jrne 1$
      002A78                       3536 2$:	
      002A78 81               [ 4] 3537 	ret 
                                   3538 
                                   3539 ;------------------------------
                                   3540 ; BASIC: AWU expr
                                   3541 ; halt mcu for 'expr' milliseconds
                                   3542 ; use Auto wakeup peripheral
                                   3543 ; all oscillators stopped except LSI
                                   3544 ; range: 1ms - 511ms
                                   3545 ; input:
                                   3546 ;  none
                                   3547 ; output:
                                   3548 ;  none:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



                                   3549 ;------------------------------
      002A79                       3550 awu:
      002A79 CD 1A D6         [ 4] 3551   call expression
      002A7C A1 84            [ 1] 3552   cp a,#TK_INTGR
      002A7E 27 03            [ 1] 3553   jreq 1$
      002A80 CC 16 66         [ 2] 3554   jp syntax_error
      002A83                       3555 1$: _xpop 
      002A83 90 F6            [ 1]    1     ld a,(y)
      002A85 93               [ 1]    2     ldw x,y 
      002A86 EE 01            [ 2]    3     ldw x,(1,x)
      002A88 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A8C                       3556 awu02:
      002A8C A3 14 00         [ 2] 3557   cpw x,#5120
      002A8F 2B 0C            [ 1] 3558   jrmi 1$ 
      002A91 35 0F 50 F2      [ 1] 3559   mov AWU_TBR,#15 
      002A95 A6 1E            [ 1] 3560   ld a,#30
      002A97 62               [ 2] 3561   div x,a
      002A98 A6 10            [ 1] 3562   ld a,#16
      002A9A 62               [ 2] 3563   div x,a 
      002A9B 20 1E            [ 2] 3564   jra 4$
      002A9D                       3565 1$: 
      002A9D A3 08 00         [ 2] 3566   cpw x,#2048
      002AA0 2B 09            [ 1] 3567   jrmi 2$ 
      002AA2 35 0E 50 F2      [ 1] 3568   mov AWU_TBR,#14
      002AA6 A6 50            [ 1] 3569   ld a,#80
      002AA8 62               [ 2] 3570   div x,a 
      002AA9 20 10            [ 2] 3571   jra 4$   
      002AAB                       3572 2$:
      002AAB 35 07 50 F2      [ 1] 3573   mov AWU_TBR,#7
      002AAF                       3574 3$:  
                                   3575 ; while X > 64  divide by 2 and increment AWU_TBR 
      002AAF A3 00 40         [ 2] 3576   cpw x,#64 
      002AB2 23 07            [ 2] 3577   jrule 4$ 
      002AB4 72 5C 50 F2      [ 1] 3578   inc AWU_TBR 
      002AB8 54               [ 2] 3579   srlw x 
      002AB9 20 F4            [ 2] 3580   jra 3$ 
      002ABB                       3581 4$:
      002ABB 9F               [ 1] 3582   ld a, xl
      002ABC 4A               [ 1] 3583   dec a 
      002ABD 27 01            [ 1] 3584   jreq 5$
      002ABF 4A               [ 1] 3585   dec a 	
      002AC0                       3586 5$: 
      002AC0 A4 3E            [ 1] 3587   and a,#0x3e 
      002AC2 C7 50 F1         [ 1] 3588   ld AWU_APR,a 
      002AC5 72 18 50 F0      [ 1] 3589   bset AWU_CSR,#AWU_CSR_AWUEN
      002AC9 8E               [10] 3590   halt 
                                   3591 
      002ACA 81               [ 4] 3592   ret 
                                   3593 
                                   3594 ;------------------------------
                                   3595 ; BASIC: TICKS
                                   3596 ; return msec ticks counter value 
                                   3597 ; input:
                                   3598 ; 	none 
                                   3599 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



                                   3600 ;	X 		TK_INTGR
                                   3601 ;-------------------------------
      002ACB                       3602 get_ticks:
      002ACB C6 00 0F         [ 1] 3603 	ld a,ticks 
      002ACE CE 00 10         [ 2] 3604 	ldw x,ticks+1 
      002AD1 81               [ 4] 3605 	ret 
                                   3606 
                                   3607 ;------------------------------
                                   3608 ; BASIC: ABS(expr)
                                   3609 ; return absolute value of expr.
                                   3610 ; input:
                                   3611 ;   none
                                   3612 ; output:
                                   3613 ;   xstack    positive int24 
                                   3614 ;-------------------------------
      002AD2                       3615 abs:
      002AD2 CD 19 8D         [ 4] 3616 	call func_args 
      002AD5 A1 01            [ 1] 3617 	cp a,#1 
      002AD7 27 03            [ 1] 3618 	jreq 0$ 
      002AD9 CC 16 66         [ 2] 3619 	jp syntax_error
      002ADC                       3620 0$:  
      002ADC CD 01 EE         [ 4] 3621 	call abs24 
      002ADF                       3622 	_xpop 
      002ADF 90 F6            [ 1]    1     ld a,(y)
      002AE1 93               [ 1]    2     ldw x,y 
      002AE2 EE 01            [ 2]    3     ldw x,(1,x)
      002AE4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AE8 81               [ 4] 3623 	ret 
                                   3624 
                                   3625 ;------------------------------
                                   3626 ; BASIC: LSHIFT(expr1,expr2)
                                   3627 ; logical shift left expr1 by 
                                   3628 ; expr2 bits 
                                   3629 ; output:
                                   3630 ; 	A:x 	result 
                                   3631 ;------------------------------
      002AE9                       3632 lshift:
      002AE9 CD 19 8D         [ 4] 3633 	call func_args
      002AEC A1 02            [ 1] 3634 	cp a,#2 
      002AEE 27 03            [ 1] 3635 	jreq 1$
      002AF0 CC 16 66         [ 2] 3636 	jp syntax_error
      002AF3                       3637 1$: _xpop 
      002AF3 90 F6            [ 1]    1     ld a,(y)
      002AF5 93               [ 1]    2     ldw x,y 
      002AF6 EE 01            [ 2]    3     ldw x,(1,x)
      002AF8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AFC 9F               [ 1] 3638 	ld a,xl 
      002AFD 88               [ 1] 3639 	push a      
      002AFE                       3640 	_xpop  ; T>A:X 
      002AFE 90 F6            [ 1]    1     ld a,(y)
      002B00 93               [ 1]    2     ldw x,y 
      002B01 EE 01            [ 2]    3     ldw x,(1,x)
      002B03 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B07 0D 01            [ 1] 3641 	tnz (1,sp) 
      002B09 27 07            [ 1] 3642 	jreq 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002B0B 98               [ 1] 3643 2$:	rcf 
      002B0C 59               [ 2] 3644 	rlcw x 
      002B0D 49               [ 1] 3645 	rlc a 
      002B0E 0A 01            [ 1] 3646 	dec (1,sp) 
      002B10 26 F9            [ 1] 3647 	jrne 2$
      002B12                       3648 4$: _drop 1 
      002B12 5B 01            [ 2]    1     addw sp,#1 
      002B14 81               [ 4] 3649 	ret
                                   3650 
                                   3651 ;------------------------------
                                   3652 ; BASIC: RSHIFT(expr1,expr2)
                                   3653 ; logical shift right expr1 by 
                                   3654 ; expr2 bits.
                                   3655 ; output:
                                   3656 ; 	A 		TK_INTGR
                                   3657 ;   X 		result 
                                   3658 ;------------------------------
      002B15                       3659 rshift:
      002B15 CD 19 8D         [ 4] 3660 	call func_args
      002B18 A1 02            [ 1] 3661 	cp a,#2 
      002B1A 27 03            [ 1] 3662 	jreq 1$
      002B1C CC 16 66         [ 2] 3663 	jp syntax_error
      002B1F                       3664 1$: _xpop ; T>A:X
      002B1F 90 F6            [ 1]    1     ld a,(y)
      002B21 93               [ 1]    2     ldw x,y 
      002B22 EE 01            [ 2]    3     ldw x,(1,x)
      002B24 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B28 9F               [ 1] 3665     ld a,xl 
      002B29 88               [ 1] 3666 	push a    
      002B2A                       3667 	_xpop  
      002B2A 90 F6            [ 1]    1     ld a,(y)
      002B2C 93               [ 1]    2     ldw x,y 
      002B2D EE 01            [ 2]    3     ldw x,(1,x)
      002B2F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B33 0D 01            [ 1] 3668 	tnz (1,sp)
      002B35 27 07            [ 1] 3669 	jreq 4$
      002B37 98               [ 1] 3670 2$:	rcf 
      002B38 46               [ 1] 3671 	rrc a 
      002B39 56               [ 2] 3672 	rrcw x 
      002B3A 0A 01            [ 1] 3673 	dec (1,sp) 
      002B3C 26 F9            [ 1] 3674 	jrne 2$
      002B3E                       3675 4$: _drop 1 
      002B3E 5B 01            [ 2]    1     addw sp,#1 
      002B40 81               [ 4] 3676 	ret
                                   3677 
                                   3678 ;--------------------------
                                   3679 ; BASIC: FCPU integer
                                   3680 ; set CPU frequency 
                                   3681 ;-------------------------- 
                                   3682 
      002B41                       3683 fcpu:
      002B41 A6 84            [ 1] 3684 	ld a,#TK_INTGR
      002B43 CD 19 80         [ 4] 3685 	call expect 
      002B46 CD 17 FC         [ 4] 3686 	call get_int24 
      002B49 9F               [ 1] 3687 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002B4A A4 07            [ 1] 3688 	and a,#7 
      002B4C C7 50 C6         [ 1] 3689 	ld CLK_CKDIVR,a 
      002B4F 81               [ 4] 3690 	ret 
                                   3691 
                                   3692 ;------------------------------
                                   3693 ; BASIC: PMODE pin#, mode 
                                   3694 ; Arduino pin. 
                                   3695 ; define pin as input or output
                                   3696 ; pin#: {0..15}
                                   3697 ; mode: INPUT|OUTPUT  
                                   3698 ;------------------------------
                           000001  3699 	PINNO=1
                           000001  3700 	VSIZE=1
      002B50                       3701 pin_mode:
      002B50                       3702 	_vars VSIZE 
      002B50 52 01            [ 2]    1     sub sp,#VSIZE 
      002B52 CD 19 92         [ 4] 3703 	call arg_list 
      002B55 A1 02            [ 1] 3704 	cp a,#2 
      002B57 27 03            [ 1] 3705 	jreq 1$
      002B59 CC 16 66         [ 2] 3706 	jp syntax_error 
      002B5C                       3707 1$: _xpop 
      002B5C 90 F6            [ 1]    1     ld a,(y)
      002B5E 93               [ 1]    2     ldw x,y 
      002B5F EE 01            [ 2]    3     ldw x,(1,x)
      002B61 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B65 CF 00 19         [ 2] 3708 	ldw ptr16,x ; mode 
      002B68                       3709 	_xpop ; Dx pin 
      002B68 90 F6            [ 1]    1     ld a,(y)
      002B6A 93               [ 1]    2     ldw x,y 
      002B6B EE 01            [ 2]    3     ldw x,(1,x)
      002B6D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B71 CD 2B AF         [ 4] 3710 	call select_pin 
      002B74 6B 01            [ 1] 3711 	ld (PINNO,sp),a  
      002B76 A6 01            [ 1] 3712 	ld a,#1 
      002B78 0D 01            [ 1] 3713 	tnz (PINNO,sp)
      002B7A 27 0D            [ 1] 3714 	jreq 4$
      002B7C 48               [ 1] 3715 2$:	sll a 
      002B7D 0A 01            [ 1] 3716 	dec (PINNO,sp)
      002B7F 26 FB            [ 1] 3717 	jrne 2$ 
      002B81 6B 01            [ 1] 3718 	ld (PINNO,sp),a
      002B83 7B 01            [ 1] 3719 	ld a,(PINNO,sp)
      002B85 EA 03            [ 1] 3720 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002B87 E7 03            [ 1] 3721 	ld (GPIO_CR1,x),a 
      002B89 A6 01            [ 1] 3722 4$:	ld a,#OUTP
      002B8B C1 00 0E         [ 1] 3723 	cp a,acc8 
      002B8E 27 10            [ 1] 3724 	jreq 6$
                                   3725 ; input mode
                                   3726 ; disable external interrupt 
      002B90 7B 01            [ 1] 3727 	ld a,(PINNO,sp)
      002B92 43               [ 1] 3728 	cpl a 
      002B93 E4 04            [ 1] 3729 	and a,(GPIO_CR2,x)
      002B95 E7 04            [ 1] 3730 	ld (GPIO_CR2,x),a 
                                   3731 ;clear bit in DDR for input mode 
      002B97 7B 01            [ 1] 3732 	ld a,(PINNO,sp)
      002B99 43               [ 1] 3733 	cpl a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002B9A E4 02            [ 1] 3734 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002B9C E7 02            [ 1] 3735 	ld (GPIO_DDR,x),a 
      002B9E 20 0C            [ 2] 3736 	jra 9$
      002BA0                       3737 6$: ;output mode  
      002BA0 7B 01            [ 1] 3738 	ld a,(PINNO,sp)
      002BA2 EA 02            [ 1] 3739 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002BA4 E7 02            [ 1] 3740 	ld (GPIO_DDR,x),a 
      002BA6 7B 01            [ 1] 3741 	ld a,(PINNO,sp)
      002BA8 EA 04            [ 1] 3742 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002BAA E7 04            [ 1] 3743 	ld (GPIO_CR2,x),a 
      002BAC                       3744 9$:	
      002BAC                       3745 	_drop VSIZE 
      002BAC 5B 01            [ 2]    1     addw sp,#VSIZE 
      002BAE 81               [ 4] 3746 	ret
                                   3747 
                                   3748 ;------------------------
                                   3749 ; select Arduino pin 
                                   3750 ; input:
                                   3751 ;   X 	 {0..15} Arduino Dx 
                                   3752 ; output:
                                   3753 ;   A     stm8s208 pin 
                                   3754 ;   X     base address s208 GPIO port 
                                   3755 ;---------------------------
      002BAF                       3756 select_pin:
      002BAF 58               [ 2] 3757 	sllw x 
      002BB0 1C 2B BF         [ 2] 3758 	addw x,#arduino_to_8s208 
      002BB3 FE               [ 2] 3759 	ldw x,(x)
      002BB4 9F               [ 1] 3760 	ld a,xl 
      002BB5 88               [ 1] 3761 	push a 
      002BB6 5E               [ 1] 3762 	swapw x 
      002BB7 A6 05            [ 1] 3763 	ld a,#5 
      002BB9 42               [ 4] 3764 	mul x,a 
      002BBA 1C 50 00         [ 2] 3765 	addw x,#GPIO_BASE 
      002BBD 84               [ 1] 3766 	pop a 
      002BBE 81               [ 4] 3767 	ret 
                                   3768 ; translation from Arduino D0..D15 to stm8s208rb 
      002BBF                       3769 arduino_to_8s208:
      002BBF 03 06                 3770 .byte 3,6 ; D0 
      002BC1 03 05                 3771 .byte 3,5 ; D1 
      002BC3 04 00                 3772 .byte 4,0 ; D2 
      002BC5 02 01                 3773 .byte 2,1 ; D3
      002BC7 06 00                 3774 .byte 6,0 ; D4
      002BC9 02 02                 3775 .byte 2,2 ; D5
      002BCB 02 03                 3776 .byte 2,3 ; D6
      002BCD 03 01                 3777 .byte 3,1 ; D7
      002BCF 03 03                 3778 .byte 3,3 ; D8
      002BD1 02 04                 3779 .byte 2,4 ; D9
      002BD3 04 05                 3780 .byte 4,5 ; D10
      002BD5 02 06                 3781 .byte 2,6 ; D11
      002BD7 02 07                 3782 .byte 2,7 ; D12
      002BD9 02 05                 3783 .byte 2,5 ; D13
      002BDB 04 02                 3784 .byte 4,2 ; D14
      002BDD 04 01                 3785 .byte 4,1 ; D15
                                   3786 
                                   3787 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



                                   3788 ;------------------------------
                                   3789 ; BASIC: RND(expr)
                                   3790 ; return random number 
                                   3791 ; between 1 and expr inclusive
                                   3792 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3793 ; input:
                                   3794 ; 	none 
                                   3795 ; output:
                                   3796 ;	xstack 	random positive integer 
                                   3797 ;------------------------------
      002BDF                       3798 random:
      002BDF CD 19 8D         [ 4] 3799 	call func_args 
      002BE2 A1 01            [ 1] 3800 	cp a,#1
      002BE4 27 03            [ 1] 3801 	jreq 1$
      002BE6 CC 16 66         [ 2] 3802 	jp syntax_error
      002BE9                       3803 1$:  
      002BE9                       3804 	_xpop   
      002BE9 90 F6            [ 1]    1     ld a,(y)
      002BEB 93               [ 1]    2     ldw x,y 
      002BEC EE 01            [ 2]    3     ldw x,(1,x)
      002BEE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BF2 89               [ 2] 3805 	pushw x 
      002BF3 88               [ 1] 3806 	push a  
      002BF4 A6 80            [ 1] 3807 	ld a,#0x80 
      002BF6 15 01            [ 1] 3808 	bcp a,(1,sp)
      002BF8 27 05            [ 1] 3809 	jreq 2$
      002BFA A6 0A            [ 1] 3810 	ld a,#ERR_BAD_VALUE
      002BFC CC 16 68         [ 2] 3811 	jp tb_error
      002BFF                       3812 2$: 
                                   3813 ; acc16=(x<<5)^x 
      002BFF CE 00 14         [ 2] 3814 	ldw x,seedx 
      002C02 58               [ 2] 3815 	sllw x 
      002C03 58               [ 2] 3816 	sllw x 
      002C04 58               [ 2] 3817 	sllw x 
      002C05 58               [ 2] 3818 	sllw x 
      002C06 58               [ 2] 3819 	sllw x 
      002C07 9E               [ 1] 3820 	ld a,xh 
      002C08 C8 00 14         [ 1] 3821 	xor a,seedx 
      002C0B C7 00 0D         [ 1] 3822 	ld acc16,a 
      002C0E 9F               [ 1] 3823 	ld a,xl 
      002C0F C8 00 15         [ 1] 3824 	xor a,seedx+1 
      002C12 C7 00 0E         [ 1] 3825 	ld acc8,a 
                                   3826 ; seedx=seedy 
      002C15 CE 00 16         [ 2] 3827 	ldw x,seedy 
      002C18 CF 00 14         [ 2] 3828 	ldw seedx,x  
                                   3829 ; seedy=seedy^(seedy>>1)
      002C1B CE 00 16         [ 2] 3830 	ldw x,seedy 
      002C1E 54               [ 2] 3831 	srlw x 
      002C1F 9E               [ 1] 3832 	ld a,xh 
      002C20 C8 00 16         [ 1] 3833 	xor a,seedy 
      002C23 C7 00 16         [ 1] 3834 	ld seedy,a  
      002C26 9F               [ 1] 3835 	ld a,xl 
      002C27 C8 00 17         [ 1] 3836 	xor a,seedy+1 
      002C2A C7 00 17         [ 1] 3837 	ld seedy+1,a 
                                   3838 ; acc16>>3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002C2D CE 00 0D         [ 2] 3839 	ldw x,acc16 
      002C30 54               [ 2] 3840 	srlw x 
      002C31 54               [ 2] 3841 	srlw x 
      002C32 54               [ 2] 3842 	srlw x 
                                   3843 ; x=acc16^x 
      002C33 9E               [ 1] 3844 	ld a,xh 
      002C34 C8 00 0D         [ 1] 3845 	xor a,acc16 
      002C37 C7 00 0D         [ 1] 3846 	ld acc16,a 
      002C3A 9F               [ 1] 3847 	ld a,xl 
      002C3B C8 00 0E         [ 1] 3848 	xor a,acc8 
      002C3E C7 00 0E         [ 1] 3849 	ld acc8,a 
                                   3850 ; seedy=acc16^seedy 
      002C41 C8 00 17         [ 1] 3851 	xor a,seedy+1
      002C44 97               [ 1] 3852 	ld xl,a 
      002C45 C6 00 0D         [ 1] 3853 	ld a,acc16 
      002C48 C8 00 16         [ 1] 3854 	xor a,seedy
      002C4B 95               [ 1] 3855 	ld xh,a 
      002C4C CF 00 16         [ 2] 3856 	ldw seedy,x 
                                   3857 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002C4F C6 00 15         [ 1] 3858 	ld a,seedx+1
      002C52 A4 7F            [ 1] 3859 	and a,#127
      002C54                       3860 	_xpush 
      002C54 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C58 90 F7            [ 1]    2     ld (y),a 
      002C5A 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C5D 84               [ 1] 3861 	pop a 
      002C5E 85               [ 2] 3862 	popw x 
      002C5F                       3863 	_xpush 
      002C5F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C63 90 F7            [ 1]    2     ld (y),a 
      002C65 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C68 CD 03 9C         [ 4] 3864 	call mod24 
      002C6B                       3865 	_xpop
      002C6B 90 F6            [ 1]    1     ld a,(y)
      002C6D 93               [ 1]    2     ldw x,y 
      002C6E EE 01            [ 2]    3     ldw x,(1,x)
      002C70 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C74 1C 00 01         [ 2] 3866 	addw x,#1 
      002C77 A9 00            [ 1] 3867 	adc a,#0  
      002C79 81               [ 4] 3868 	ret 
                                   3869 
                                   3870 ;---------------------------------
                                   3871 ; BASIC: WORDS 
                                   3872 ; affiche la listes des mots du
                                   3873 ; dictionnaire ainsi que le nombre
                                   3874 ; de mots.
                                   3875 ;---------------------------------
                           000001  3876 	WLEN=1 ; word length
                           000002  3877 	LLEN=2 ; character sent to console
                           000003  3878 	WCNT=3 ; count words printed 
                           000003  3879 	VSIZE=3 
      002C7A                       3880 words:
      002C7A 90 89            [ 2] 3881 	pushw y
      002C7C                       3882 	_vars VSIZE
      002C7C 52 03            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002C7E 0F 02            [ 1] 3883 	clr (LLEN,sp)
      002C80 0F 03            [ 1] 3884 	clr (WCNT,sp)
      002C82 90 AE 34 4F      [ 2] 3885 	ldw y,#kword_dict+2
      002C86 93               [ 1] 3886 0$:	ldw x,y
      002C87 F6               [ 1] 3887 	ld a,(x)
      002C88 A4 0F            [ 1] 3888 	and a,#15 
      002C8A 6B 01            [ 1] 3889 	ld (WLEN,sp),a 
      002C8C 0C 03            [ 1] 3890 	inc (WCNT,sp)
      002C8E 5C               [ 1] 3891 1$:	incw x 
      002C8F F6               [ 1] 3892 	ld a,(x)
      002C90 CD 09 0B         [ 4] 3893 	call putc 
      002C93 0C 02            [ 1] 3894 	inc (LLEN,sp)
      002C95 0A 01            [ 1] 3895 	dec (WLEN,sp)
      002C97 26 F5            [ 1] 3896 	jrne 1$
      002C99 A6 46            [ 1] 3897 	ld a,#70
      002C9B 11 02            [ 1] 3898 	cp a,(LLEN,sp)
      002C9D 2B 09            [ 1] 3899 	jrmi 2$   
      002C9F A6 20            [ 1] 3900 	ld a,#SPACE 
      002CA1 CD 09 0B         [ 4] 3901 	call putc 
      002CA4 0C 02            [ 1] 3902 	inc (LLEN,sp) 
      002CA6 20 07            [ 2] 3903 	jra 3$
      002CA8 A6 0D            [ 1] 3904 2$: ld a,#CR 
      002CAA CD 09 0B         [ 4] 3905 	call putc 
      002CAD 0F 02            [ 1] 3906 	clr (LLEN,sp)
      002CAF 72 A2 00 02      [ 2] 3907 3$:	subw y,#2 
      002CB3 90 FE            [ 2] 3908 	ldw y,(y)
      002CB5 26 CF            [ 1] 3909 	jrne 0$ 
      002CB7 A6 0D            [ 1] 3910 	ld a,#CR 
      002CB9 CD 09 0B         [ 4] 3911 	call putc  
      002CBC 5F               [ 1] 3912 	clrw x 
      002CBD 7B 03            [ 1] 3913 	ld a,(WCNT,sp)
      002CBF 97               [ 1] 3914 	ld xl,a 
      002CC0 CD 18 12         [ 4] 3915 	call prt_i16 
      002CC3 AE 2C CE         [ 2] 3916 	ldw x,#words_count_msg
      002CC6 CD 09 68         [ 4] 3917 	call puts 
      002CC9                       3918 	_drop VSIZE 
      002CC9 5B 03            [ 2]    1     addw sp,#VSIZE 
      002CCB 90 85            [ 2] 3919 	popw y 
      002CCD 81               [ 4] 3920 	ret 
      002CCE 20 77 6F 72 64 73 20  3921 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3922 
                                   3923 
                                   3924 ;-----------------------------
                                   3925 ; BASIC: TIMER expr 
                                   3926 ; initialize count down timer 
                                   3927 ;-----------------------------
      002CE4                       3928 set_timer:
      002CE4 CD 19 92         [ 4] 3929 	call arg_list
      002CE7 A1 01            [ 1] 3930 	cp a,#1 
      002CE9 27 03            [ 1] 3931 	jreq 1$
      002CEB CC 16 66         [ 2] 3932 	jp syntax_error
      002CEE                       3933 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002CEE                       3934 	_xpop  
      002CEE 90 F6            [ 1]    1     ld a,(y)
      002CF0 93               [ 1]    2     ldw x,y 
      002CF1 EE 01            [ 2]    3     ldw x,(1,x)
      002CF3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CF7 CF 00 12         [ 2] 3935 	ldw timer,x 
      002CFA 81               [ 4] 3936 	ret 
                                   3937 
                                   3938 ;------------------------------
                                   3939 ; BASIC: TIMEOUT 
                                   3940 ; return state of timer 
                                   3941 ; output:
                                   3942 ;   A:X     0 not timeout 
                                   3943 ;   A:X     -1 timeout 
                                   3944 ;------------------------------
      002CFB                       3945 timeout:
      002CFB 4F               [ 1] 3946 	clr a 
      002CFC CE 00 12         [ 2] 3947 	ldw x,timer 
      002CFF 27 02            [ 1] 3948 	jreq 1$
      002D01 5F               [ 1] 3949 	clrw x
      002D02 81               [ 4] 3950 	ret  
      002D03 43               [ 1] 3951 1$:	cpl a
      002D04 53               [ 2] 3952 	cplw x 
      002D05 81               [ 4] 3953 	ret 
                                   3954  	
                                   3955 
                                   3956 
                                   3957 
                                   3958 ;-----------------------------------
                                   3959 ; BASIC: IWDGEN expr1 
                                   3960 ; enable independant watchdog timer
                                   3961 ; expr1 is delay in multiple of 62.5µsec
                                   3962 ; expr1 -> {1..16383}
                                   3963 ;-----------------------------------
      002D06                       3964 enable_iwdg:
      002D06 CD 19 92         [ 4] 3965 	call arg_list
      002D09 A1 01            [ 1] 3966 	cp a,#1 
      002D0B 27 03            [ 1] 3967 	jreq 1$
      002D0D CC 16 66         [ 2] 3968 	jp syntax_error 
      002D10                       3969 1$: _xpop  
      002D10 90 F6            [ 1]    1     ld a,(y)
      002D12 93               [ 1]    2     ldw x,y 
      002D13 EE 01            [ 2]    3     ldw x,(1,x)
      002D15 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D19 4B 00            [ 1] 3970 	push #0
      002D1B 35 CC 50 E0      [ 1] 3971 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002D1F 9E               [ 1] 3972 	ld a,xh 
      002D20 A4 3F            [ 1] 3973 	and a,#0x3f
      002D22 95               [ 1] 3974 	ld xh,a  
      002D23 A3 00 FF         [ 2] 3975 2$:	cpw x,#255
      002D26 23 06            [ 2] 3976 	jrule 3$
      002D28 0C 01            [ 1] 3977 	inc (1,sp)
      002D2A 98               [ 1] 3978 	rcf 
      002D2B 56               [ 2] 3979 	rrcw x 
      002D2C 20 F5            [ 2] 3980 	jra 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002D2E 35 55 50 E0      [ 1] 3981 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002D32 84               [ 1] 3982 	pop a  
      002D33 C7 50 E1         [ 1] 3983 	ld IWDG_PR,a 
      002D36 9F               [ 1] 3984 	ld a,xl
      002D37 4A               [ 1] 3985 	dec a 
      002D38 35 55 50 E0      [ 1] 3986 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002D3C C7 50 E2         [ 1] 3987 	ld IWDG_RLR,a 
      002D3F 35 AA 50 E0      [ 1] 3988 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002D43 81               [ 4] 3989 	ret 
                                   3990 
                                   3991 
                                   3992 ;-----------------------------------
                                   3993 ; BASIC: IWDGREF  
                                   3994 ; refresh independant watchdog count down 
                                   3995 ; timer before it reset MCU. 
                                   3996 ;-----------------------------------
      002D44                       3997 refresh_iwdg:
      002D44 35 AA 50 E0      [ 1] 3998 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002D48 81               [ 4] 3999 	ret 
                                   4000 
                                   4001 
                                   4002 ;-------------------------------------
                                   4003 ; BASIC: LOG2(expr)
                                   4004 ; return logarithm base 2 of expr 
                                   4005 ; this is the position of most significant
                                   4006 ; bit set. 
                                   4007 ; input: 
                                   4008 ; output:
                                   4009 ;   A     TK_INTGR 
                                   4010 ;   xstack log2 
                                   4011 ;*********************************
      002D49                       4012 log2:
      002D49 CD 19 8D         [ 4] 4013 	call func_args 
      002D4C A1 01            [ 1] 4014 	cp a,#1 
      002D4E 27 03            [ 1] 4015 	jreq 1$
      002D50 CC 16 66         [ 2] 4016 	jp syntax_error 
      002D53                       4017 1$: 
      002D53                       4018 	_xpop    
      002D53 90 F6            [ 1]    1     ld a,(y)
      002D55 93               [ 1]    2     ldw x,y 
      002D56 EE 01            [ 2]    3     ldw x,(1,x)
      002D58 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D5C 4D               [ 1] 4019 	tnz a
      002D5D 26 08            [ 1] 4020 	jrne 2$ 
      002D5F 5D               [ 2] 4021 	tnzw x 
      002D60 26 05            [ 1] 4022 	jrne 2$
      002D62 A6 0A            [ 1] 4023 	ld a,#ERR_BAD_VALUE
      002D64 CC 16 68         [ 2] 4024 	jp tb_error 
      002D67 4B 18            [ 1] 4025 2$: push #24 
      002D69 59               [ 2] 4026 3$: rlcw x 
      002D6A 49               [ 1] 4027     rlc a 
      002D6B 25 04            [ 1] 4028 	jrc 4$
      002D6D 0A 01            [ 1] 4029 	dec (1,sp) 
      002D6F 26 F8            [ 1] 4030 	jrne 3$
      002D71 5F               [ 1] 4031 4$: clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002D72 84               [ 1] 4032     pop a 
      002D73 4A               [ 1] 4033 	dec a
      002D74 02               [ 1] 4034 	rlwa x  
      002D75                       4035 9$:	
      002D75 81               [ 4] 4036 	ret 
                                   4037 
                                   4038 ;-----------------------------------
                                   4039 ; BASIC: BIT(expr) 
                                   4040 ; expr ->{0..23}
                                   4041 ; return 2^expr 
                                   4042 ; output:
                                   4043 ;    A:X    2^expr 
                                   4044 ;-----------------------------------
      002D76                       4045 bitmask:
      002D76 CD 19 8D         [ 4] 4046     call func_args 
      002D79 A1 01            [ 1] 4047 	cp a,#1
      002D7B 27 03            [ 1] 4048 	jreq 1$
      002D7D CC 16 66         [ 2] 4049 	jp syntax_error 
      002D80                       4050 1$: _xpop 
      002D80 90 F6            [ 1]    1     ld a,(y)
      002D82 93               [ 1]    2     ldw x,y 
      002D83 EE 01            [ 2]    3     ldw x,(1,x)
      002D85 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D89 9F               [ 1] 4051 	ld a,xl 
      002D8A AE 00 01         [ 2] 4052 	ldw x,#1 
      002D8D A4 17            [ 1] 4053 	and a,#23
      002D8F 27 0A            [ 1] 4054 	jreq 9$
      002D91 88               [ 1] 4055 	push a 
      002D92 4F               [ 1] 4056 	clr a 
      002D93                       4057 2$: 
      002D93 58               [ 2] 4058 	slaw x 
      002D94 49               [ 1] 4059 	rlc a 	
      002D95 0A 01            [ 1] 4060 	dec (1,sp)
      002D97 26 FA            [ 1] 4061 	jrne 2$ 
      002D99                       4062 4$:
      002D99                       4063     _drop 1 
      002D99 5B 01            [ 2]    1     addw sp,#1 
      002D9B 81               [ 4] 4064 9$:	ret 
                                   4065 
                                   4066 ;------------------------------
                                   4067 ; BASIC: DO 
                                   4068 ; initiate a DO ... UNTIL loop 
                                   4069 ;------------------------------
                           000003  4070 	DOLP_ADR=3 
                           000005  4071 	DOLP_INW=5
                           000004  4072 	VSIZE=4 
      002D9C                       4073 do_loop:
      002D9C 85               [ 2] 4074 	popw x 
      002D9D                       4075 	_vars VSIZE 
      002D9D 52 04            [ 2]    1     sub sp,#VSIZE 
      002D9F 89               [ 2] 4076 	pushw x 
      002DA0 CE 00 04         [ 2] 4077 	ldw x,basicptr 
      002DA3 1F 03            [ 2] 4078 	ldw (DOLP_ADR,sp),x
      002DA5 CE 00 00         [ 2] 4079 	ldw x,in.w 
      002DA8 1F 05            [ 2] 4080 	ldw (DOLP_INW,sp),x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002DAA 72 5C 00 1F      [ 1] 4081 	inc loop_depth 
      002DAE 81               [ 4] 4082 	ret 
                                   4083 
                                   4084 ;--------------------------------
                                   4085 ; BASIC: UNTIL expr 
                                   4086 ; loop if exprssion is false 
                                   4087 ; else terminate loop
                                   4088 ;--------------------------------
      002DAF                       4089 until: 
      002DAF 72 5D 00 1F      [ 1] 4090 	tnz loop_depth 
      002DB3 26 03            [ 1] 4091 	jrne 1$ 
      002DB5 CC 16 66         [ 2] 4092 	jp syntax_error 
      002DB8                       4093 1$: 
      002DB8 CD 1B EF         [ 4] 4094 	call condition  
      002DBB                       4095 	_xpop 
      002DBB 90 F6            [ 1]    1     ld a,(y)
      002DBD 93               [ 1]    2     ldw x,y 
      002DBE EE 01            [ 2]    3     ldw x,(1,x)
      002DC0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DC4 4D               [ 1] 4096 	tnz a 
      002DC5 26 13            [ 1] 4097 	jrne 9$ 
      002DC7 5D               [ 2] 4098 	tnzw x 
      002DC8 26 10            [ 1] 4099 	jrne 9$ 
      002DCA 1E 03            [ 2] 4100 	ldw x,(DOLP_ADR,sp)
      002DCC CF 00 04         [ 2] 4101 	ldw basicptr,x 
      002DCF E6 02            [ 1] 4102 	ld a,(2,x)
      002DD1 C7 00 03         [ 1] 4103 	ld count,a 
      002DD4 1E 05            [ 2] 4104 	ldw x,(DOLP_INW,sp)
      002DD6 CF 00 00         [ 2] 4105 	ldw in.w,x 
      002DD9 81               [ 4] 4106 	ret 
      002DDA                       4107 9$:	; remove loop data from stack  
      002DDA 85               [ 2] 4108 	popw x
      002DDB                       4109 	_drop VSIZE
      002DDB 5B 04            [ 2]    1     addw sp,#VSIZE 
      002DDD 72 5A 00 1F      [ 1] 4110 	dec loop_depth 
      002DE1 FC               [ 2] 4111 	jp (x)
                                   4112 
                                   4113 ;--------------------------
                                   4114 ; BASIC: PORTA...PORTI  
                                   4115 ;  return constant value 
                                   4116 ;  PORT  base address 
                                   4117 ;---------------------------
      002DE2                       4118 const_porta:
      002DE2 AE 50 00         [ 2] 4119 	ldw x,#PA_BASE 
      002DE5 4F               [ 1] 4120 	clr a 
      002DE6 81               [ 4] 4121 	ret 
      002DE7                       4122 const_portb:
      002DE7 AE 50 05         [ 2] 4123 	ldw x,#PB_BASE 
      002DEA 4F               [ 1] 4124 	clr a 
      002DEB 81               [ 4] 4125 	ret 
      002DEC                       4126 const_portc:
      002DEC AE 50 0A         [ 2] 4127 	ldw x,#PC_BASE 
      002DEF 4F               [ 1] 4128 	clr a 
      002DF0 81               [ 4] 4129 	ret 
      002DF1                       4130 const_portd:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002DF1 AE 50 0F         [ 2] 4131 	ldw x,#PD_BASE 
      002DF4 4F               [ 1] 4132 	clr a 
      002DF5 81               [ 4] 4133 	ret 
      002DF6                       4134 const_porte:
      002DF6 AE 50 14         [ 2] 4135 	ldw x,#PE_BASE 
      002DF9 4F               [ 1] 4136 	clr a 
      002DFA 81               [ 4] 4137 	ret 
      002DFB                       4138 const_portf:
      002DFB AE 50 19         [ 2] 4139 	ldw x,#PF_BASE 
      002DFE 4F               [ 1] 4140 	clr a 
      002DFF 81               [ 4] 4141 	ret 
      002E00                       4142 const_portg:
      002E00 AE 50 1E         [ 2] 4143 	ldw x,#PG_BASE 
      002E03 4F               [ 1] 4144 	clr a 
      002E04 81               [ 4] 4145 	ret 
      002E05                       4146 const_porti:
      002E05 AE 50 28         [ 2] 4147 	ldw x,#PI_BASE 
      002E08 4F               [ 1] 4148 	clr a 
      002E09 81               [ 4] 4149 	ret 
                                   4150 
                                   4151 ;-------------------------------
                                   4152 ; following return constant 
                                   4153 ; related to GPIO register offset 
                                   4154 ;---------------------------------
      002E0A                       4155 const_odr:
      002E0A 4F               [ 1] 4156 	clr a 
      002E0B AE 00 00         [ 2] 4157 	ldw x,#GPIO_ODR
      002E0E 81               [ 4] 4158 	ret 
      002E0F                       4159 const_idr:
      002E0F 4F               [ 1] 4160 	clr a 
      002E10 AE 00 01         [ 2] 4161 	ldw x,#GPIO_IDR
      002E13 81               [ 4] 4162 	ret 
      002E14                       4163 const_ddr:
      002E14 4F               [ 1] 4164 	clr a
      002E15 AE 00 02         [ 2] 4165 	ldw x,#GPIO_DDR
      002E18 81               [ 4] 4166 	ret 
      002E19                       4167 const_cr1:
      002E19 4F               [ 1] 4168 	clr a 
      002E1A AE 00 03         [ 2] 4169 	ldw x,#GPIO_CR1
      002E1D 81               [ 4] 4170 	ret 
      002E1E                       4171 const_cr2:
      002E1E 4F               [ 1] 4172 	clr a
      002E1F AE 00 04         [ 2] 4173 	ldw x,#GPIO_CR2
      002E22 81               [ 4] 4174 	ret 
                                   4175 ;-------------------------
                                   4176 ; BASIC: POUT 
                                   4177 ;  constant for port mode
                                   4178 ;  used by PMODE 
                                   4179 ;  to set pin as output
                                   4180 ;------------------------
      002E23                       4181 const_output:
      002E23 4F               [ 1] 4182 	clr a 
      002E24 AE 00 01         [ 2] 4183 	ldw x,#OUTP
      002E27 81               [ 4] 4184 	ret 
                                   4185 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



                                   4186 ;-------------------------
                                   4187 ; BASIC: PINP 
                                   4188 ;  constant for port mode
                                   4189 ;  used by PMODE 
                                   4190 ;  to set pin as input
                                   4191 ;------------------------
      002E28                       4192 const_input:
      002E28 4F               [ 1] 4193 	clr a  
      002E29 AE 00 00         [ 2] 4194 	ldw x,#INP 
      002E2C 81               [ 4] 4195 	ret 
                                   4196 	
                                   4197 ;-----------------------
                                   4198 ; memory area constants
                                   4199 ;-----------------------
      002E2D                       4200 const_eeprom_base:
      002E2D 4F               [ 1] 4201 	clr a  
      002E2E AE 40 00         [ 2] 4202 	ldw x,#EEPROM_BASE 
      002E31 81               [ 4] 4203 	ret 
                                   4204 
                                   4205 ;---------------------------
                                   4206 ; BASIC: DATA 
                                   4207 ; when the interpreter find 
                                   4208 ; a DATA line it skip it.
                                   4209 ;---------------------------
      002E32                       4210 data:
      002E32 55 00 03 00 01   [ 1] 4211 	mov in,count 
      002E37 81               [ 4] 4212 	ret 
                                   4213 
                                   4214 ;------------------------------
                                   4215 ; check if it is a DATA line 
                                   4216 ; input: 
                                   4217 ;    X    line address 
                                   4218 ; output:
                                   4219 ;    Z    set if DATA line 
                                   4220 ;----------------------------
      002E38                       4221 is_data_line:
      002E38 89               [ 2] 4222 	pushw x 
      002E39 E6 03            [ 1] 4223 	ld a,(3,x)
      002E3B A1 80            [ 1] 4224 	cp a,#TK_CMD 
      002E3D 26 05            [ 1] 4225 	jrne 9$
      002E3F EE 04            [ 2] 4226 	ldw x,(4,x)
      002E41 A3 2E 32         [ 2] 4227 	cpw x,#data  
      002E44 85               [ 2] 4228 9$: popw x 
      002E45 81               [ 4] 4229 	ret 
                                   4230 
                                   4231 ;---------------------------------
                                   4232 ; BASIC: RESTORE [line#]
                                   4233 ; set data_ptr to first data line
                                   4234 ; if no DATA found pointer set to
                                   4235 ; zero.
                                   4236 ; if a line# is given as argument 
                                   4237 ; a data line with that number 
                                   4238 ; is searched and the data pointer 
                                   4239 ; is set to it. If there is no 
                                   4240 ; data line with that number 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



                                   4241 ; the program is interrupted. 
                                   4242 ;---------------------------------
      002E46                       4243 restore:
      002E46 5F               [ 1] 4244 	clrw x 
      002E47 CF 00 06         [ 2] 4245 	ldw data_ptr,x 
      002E4A CF 00 08         [ 2] 4246 	ldw data_ofs,x 
      002E4D CE 00 1B         [ 2] 4247 	ldw x,txtbgn 
      002E50 CD 17 CA         [ 4] 4248 	call next_token 
      002E53 A1 84            [ 1] 4249 	cp a,#TK_INTGR
      002E55 26 10            [ 1] 4250 	jrne 0$
      002E57 CD 17 FC         [ 4] 4251 	call get_int24
      002E5A 90 89            [ 2] 4252 	pushw y 
      002E5C 4F               [ 1] 4253 	clr a 
      002E5D CD 0C 45         [ 4] 4254 	call search_lineno  
      002E60 90 85            [ 2] 4255 	popw y 
      002E62 5D               [ 2] 4256 	tnzw x 
      002E63 26 17            [ 1] 4257 	jrne set_data_pointer 
      002E65 20 44            [ 2] 4258 	jra data_error 
      002E67                       4259 0$:
      002E67                       4260 	_unget_token  
      002E67 55 00 02 00 01   [ 1]    1      mov in,in.saved  
                                   4261 ; search first DATA line 	
      002E6C C3 00 1D         [ 2] 4262 1$:	cpw x,txtend
      002E6F 24 3A            [ 1] 4263 	jruge data_error 
      002E71                       4264 2$:	
      002E71 CD 2E 38         [ 4] 4265 	call is_data_line 
      002E74 26 00            [ 1] 4266 	jrne 4$
      002E76 CD 2E 89         [ 4] 4267 4$:	call try_next_line 
      002E79 26 FB            [ 1] 4268 	jrne 4$ 
      002E7B 81               [ 4] 4269 	ret 
                                   4270 
                                   4271 ;---------------------
                                   4272 ; set data pointer 
                                   4273 ; variables at new line 
                                   4274 ; input:
                                   4275 ;    X    line address 
                                   4276 ;----------------------
      002E7C                       4277 set_data_pointer:
      002E7C CF 00 06         [ 2] 4278 	ldw data_ptr,x
      002E7F E6 02            [ 1] 4279 	ld a,(2,x)
      002E81 C7 00 09         [ 1] 4280 	ld data_len,a 
      002E84 35 06 00 08      [ 1] 4281 	mov data_ofs,#FIRST_DATA_ITEM
      002E88 81               [ 4] 4282 	ret 
                                   4283 
                                   4284 
                                   4285 ;--------------------
                                   4286 ; at end of data line 
                                   4287 ; check if next line 
                                   4288 ; is a data line 
                                   4289 ; input:
                                   4290 ;    X   actual line address 
                                   4291 ;  
                                   4292 ;-------------------
      002E89                       4293 try_next_line: 
      002E89 E6 02            [ 1] 4294 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002E8B C7 00 0E         [ 1] 4295 	ld acc8,a 
      002E8E 72 5F 00 0D      [ 1] 4296 	clr acc16 
      002E92 72 BB 00 0D      [ 2] 4297 	addw x,acc16 
      002E96 C3 00 1D         [ 2] 4298 	cpw x,txtend 
      002E99 25 02            [ 1] 4299 	jrult 1$
      002E9B 20 0E            [ 2] 4300 	jra data_error 
      002E9D                       4301 1$:	
      002E9D CD 2E 38         [ 4] 4302 	call is_data_line 
      002EA0 27 04            [ 1] 4303 	jreq 2$
      002EA2 A6 01            [ 1] 4304 	ld a,#1  
      002EA4 20 04            [ 2] 4305 	jra 9$
      002EA6 CD 2E 7C         [ 4] 4306 2$:	call set_data_pointer
      002EA9 4F               [ 1] 4307 	clr a  
      002EAA 81               [ 4] 4308 9$:	ret 
      002EAB                       4309 data_error:	
      002EAB A6 0C            [ 1] 4310     ld a,#ERR_NO_DATA 
      002EAD CC 16 68         [ 2] 4311 	jp tb_error 
                                   4312 
                                   4313 
                                   4314 ;---------------------------------
                                   4315 ; BASIC: READ 
                                   4316 ; return next data item | 0 
                                   4317 ;---------------------------------
                           000001  4318 	CTX_BPTR=1 
                           000003  4319 	CTX_IN=3 
                           000004  4320 	CTX_COUNT=4 
                           000005  4321 	INT24=5
                           000007  4322 	VSIZE=7 
      002EB0                       4323 read:
      002EB0                       4324 	_vars  VSIZE 
      002EB0 52 07            [ 2]    1     sub sp,#VSIZE 
      002EB2 CD 20 AF         [ 4] 4325 	call save_context
      002EB5                       4326 read01:	
      002EB5 C6 00 08         [ 1] 4327 	ld a,data_ofs
      002EB8 C1 00 09         [ 1] 4328 	cp a,data_len 
      002EBB 27 37            [ 1] 4329 	jreq 2$ ; end of line  
      002EBD                       4330 0$:
      002EBD CE 00 06         [ 2] 4331 	ldw x,data_ptr 
      002EC0 CF 00 04         [ 2] 4332 	ldw basicptr,x 
      002EC3 55 00 08 00 01   [ 1] 4333 	mov in,data_ofs 
      002EC8 55 00 09 00 03   [ 1] 4334 	mov count,data_len  
      002ECD CD 1A D6         [ 4] 4335 	call expression 
      002ED0 A1 84            [ 1] 4336 	cp a,#TK_INTGR 
      002ED2 27 03            [ 1] 4337 	jreq 1$ 
      002ED4 CC 16 66         [ 2] 4338 	jp syntax_error 
      002ED7                       4339 1$:
      002ED7 CD 17 CA         [ 4] 4340 	call next_token ; skip comma
      002EDA CE 00 04         [ 2] 4341 	ldw x,basicptr 
      002EDD CF 00 06         [ 2] 4342 	ldw data_ptr,x 
      002EE0 55 00 01 00 08   [ 1] 4343 	mov data_ofs,in 
      002EE5 CD 20 BF         [ 4] 4344 	call rest_context
      002EE8                       4345 	_xpop 
      002EE8 90 F6            [ 1]    1     ld a,(y)
      002EEA 93               [ 1]    2     ldw x,y 
      002EEB EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      002EED 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EF1                       4346 	_drop VSIZE 
      002EF1 5B 07            [ 2]    1     addw sp,#VSIZE 
      002EF3 81               [ 4] 4347 	ret 
      002EF4                       4348 2$: ; end of line reached 
                                   4349 	; try next line 
      002EF4 CE 00 06         [ 2] 4350 	ldw x,data_ptr  
      002EF7 CD 2E 89         [ 4] 4351 	call try_next_line
      002EFA 27 C1            [ 1] 4352 	jreq 0$ 
      002EFC 20 AD            [ 2] 4353 	jra data_error 
                                   4354 
                                   4355 ;---------------------------------
                                   4356 ; BASIC: SPIEN clkdiv, 0|1  
                                   4357 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4358 ; if clkdiv==-1 disable SPI
                                   4359 ; 0|1 -> disable|enable  
                                   4360 ;--------------------------------- 
                           000005  4361 SPI_CS_BIT=5
      002EFE                       4362 spi_enable:
      002EFE CD 19 92         [ 4] 4363 	call arg_list 
      002F01 A1 02            [ 1] 4364 	cp a,#2
      002F03 27 03            [ 1] 4365 	jreq 1$
      002F05 CC 16 66         [ 2] 4366 	jp syntax_error 
      002F08                       4367 1$: 
      002F08 72 12 50 C7      [ 1] 4368 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002F0C 85               [ 2] 4369 	popw x  
      002F0D 5D               [ 2] 4370 	tnzw x 
      002F0E 27 21            [ 1] 4371 	jreq spi_disable 
      002F10 85               [ 2] 4372 	popw x 
      002F11 A6 08            [ 1] 4373 	ld a,#(1<<SPI_CR1_BR)
      002F13 42               [ 4] 4374 	mul x,a 
      002F14 9F               [ 1] 4375 	ld a,xl 
      002F15 C7 52 00         [ 1] 4376 	ld SPI_CR1,a 
                                   4377 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002F18 72 1A 50 14      [ 1] 4378 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002F1C 72 1A 50 16      [ 1] 4379 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4380 ; configure SPI as master mode 0.	
      002F20 72 14 52 00      [ 1] 4381 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4382 ; ~CS line controlled by sofware 	
      002F24 72 12 52 01      [ 1] 4383 	bset SPI_CR2,#SPI_CR2_SSM 
      002F28 72 10 52 01      [ 1] 4384     bset SPI_CR2,#SPI_CR2_SSI 
                                   4385 ; enable SPI
      002F2C 72 1C 52 00      [ 1] 4386 	bset SPI_CR1,#SPI_CR1_SPE 	
      002F30 81               [ 4] 4387 	ret 
      002F31                       4388 spi_disable:
      002F31                       4389 	_drop #2; throw first argument.
      002F31 5B 02            [ 2]    1     addw sp,##2 
                                   4390 ; wait spi idle 
      002F33 A6 82            [ 1] 4391 1$:	ld a,#0x82 
      002F35 C4 52 03         [ 1] 4392 	and a,SPI_SR
      002F38 A1 02            [ 1] 4393 	cp a,#2 
      002F3A 26 F7            [ 1] 4394 	jrne 1$
      002F3C 72 1D 52 00      [ 1] 4395 	bres SPI_CR1,#SPI_CR1_SPE
      002F40 72 13 50 C7      [ 1] 4396 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002F44 72 1B 50 16      [ 1] 4397 	bres PE_DDR,#SPI_CS_BIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      002F48 81               [ 4] 4398 	ret 
                                   4399 
      002F49                       4400 spi_clear_error:
      002F49 A6 78            [ 1] 4401 	ld a,#0x78 
      002F4B C5 52 03         [ 1] 4402 	bcp a,SPI_SR 
      002F4E 27 04            [ 1] 4403 	jreq 1$
      002F50 72 5F 52 03      [ 1] 4404 	clr SPI_SR 
      002F54 81               [ 4] 4405 1$: ret 
                                   4406 
      002F55                       4407 spi_send_byte:
      002F55 88               [ 1] 4408 	push a 
      002F56 CD 2F 49         [ 4] 4409 	call spi_clear_error
      002F59 84               [ 1] 4410 	pop a 
      002F5A 72 03 52 03 FB   [ 2] 4411 	btjf SPI_SR,#SPI_SR_TXE,.
      002F5F C7 52 04         [ 1] 4412 	ld SPI_DR,a
      002F62 72 01 52 03 FB   [ 2] 4413 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002F67 C6 52 04         [ 1] 4414 	ld a,SPI_DR 
      002F6A 81               [ 4] 4415 	ret 
                                   4416 
      002F6B                       4417 spi_rcv_byte:
      002F6B A6 FF            [ 1] 4418 	ld a,#255
      002F6D 72 01 52 03 E3   [ 2] 4419 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002F72 C6 52 04         [ 1] 4420 	ld a,SPI_DR 
      002F75 81               [ 4] 4421 	ret
                                   4422 
                                   4423 ;------------------------------
                                   4424 ; BASIC: SPIWR byte [,byte]
                                   4425 ; write 1 or more byte
                                   4426 ;------------------------------
      002F76                       4427 spi_write:
      002F76 CD 1A D6         [ 4] 4428 	call expression
      002F79 A1 84            [ 1] 4429 	cp a,#TK_INTGR 
      002F7B 27 03            [ 1] 4430 	jreq 1$
      002F7D CC 16 66         [ 2] 4431 	jp syntax_error 
      002F80                       4432 1$:	
      002F80 9F               [ 1] 4433 	ld a,xl 
      002F81 CD 2F 55         [ 4] 4434 	call spi_send_byte 
      002F84 CD 17 CA         [ 4] 4435 	call next_token 
      002F87 A1 08            [ 1] 4436 	cp a,#TK_COMMA 
      002F89 26 02            [ 1] 4437 	jrne 2$ 
      002F8B 20 E9            [ 2] 4438 	jra spi_write 
      002F8D 4D               [ 1] 4439 2$:	tnz a 
      002F8E 27 05            [ 1] 4440 	jreq 3$
      002F90                       4441 	_unget_token  
      002F90 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F95 81               [ 4] 4442 3$:	ret 
                                   4443 
                                   4444 
                                   4445 ;-------------------------------
                                   4446 ; BASIC: SPIRD 	
                                   4447 ; read one byte from SPI 
                                   4448 ;-------------------------------
      002F96                       4449 spi_read:
      002F96 CD 2F 6B         [ 4] 4450 	call spi_rcv_byte 
      002F99 5F               [ 1] 4451 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      002F9A 97               [ 1] 4452 	ld xl,a 
      002F9B 4F               [ 1] 4453 	clr a  
      002F9C 81               [ 4] 4454 	ret 
                                   4455 
                                   4456 ;------------------------------
                                   4457 ; BASIC: SPISEL 0|1 
                                   4458 ; set state of ~CS line
                                   4459 ; 0|1 deselect|select  
                                   4460 ;------------------------------
      002F9D                       4461 spi_select:
      002F9D CD 17 CA         [ 4] 4462 	call next_token 
      002FA0 A1 84            [ 1] 4463 	cp a,#TK_INTGR 
      002FA2 27 03            [ 1] 4464 	jreq 1$
      002FA4 CC 16 66         [ 2] 4465 	jp syntax_error 
      002FA7 5D               [ 2] 4466 1$: tnzw x  
      002FA8 27 05            [ 1] 4467 	jreq cs_high 
      002FAA 72 1B 50 14      [ 1] 4468 	bres PE_ODR,#SPI_CS_BIT
      002FAE 81               [ 4] 4469 	ret 
      002FAF                       4470 cs_high: 
      002FAF 72 1A 50 14      [ 1] 4471 	bset PE_ODR,#SPI_CS_BIT
      002FB3 81               [ 4] 4472 	ret 
                                   4473 
                                   4474 ;-------------------------------
                                   4475 ; BASIC: PAD 
                                   4476 ; Return pad buffer address.
                                   4477 ;------------------------------
      002FB4                       4478 pad_ref:
      002FB4 AE 16 E0         [ 2] 4479 	ldw x,#pad 
      002FB7 4F               [ 1] 4480 	clr a
      002FB8 81               [ 4] 4481 	ret 
                                   4482 
                                   4483 ;****************************
                                   4484 ; expression stack 
                                   4485 ; manipulation routines
                                   4486 ;****************************
                                   4487 
                                   4488 ;-----------------------------
                                   4489 ; BASIC: PUSH expr|rel|cond 
                                   4490 ; push the result on xtack
                                   4491 ;-----------------------------
      002FB9                       4492 xpush:
      002FB9 CD 1B EF         [ 4] 4493 	call condition 
      002FBC 81               [ 4] 4494 	ret 
                                   4495 
                                   4496 ;------------------------------
                                   4497 ; BASIC: POP 
                                   4498 ; pop top of xstack 
                                   4499 ;------------------------------
      002FBD                       4500 xpop:
      002FBD                       4501 	_xpop 
      002FBD 90 F6            [ 1]    1     ld a,(y)
      002FBF 93               [ 1]    2     ldw x,y 
      002FC0 EE 01            [ 2]    3     ldw x,(1,x)
      002FC2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002FC6 81               [ 4] 4502 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



                                   4503 
                                   4504 
                                   4505 ;------------------------------
                                   4506 ; BASIC: ALLOC expr 
                                   4507 ; allocate expr element on xtack 
                                   4508 ;-------------------------------
      002FC7                       4509 xalloc: 
      002FC7 CD 1A D6         [ 4] 4510 	call expression 
      002FCA A1 84            [ 1] 4511 	cp a,#TK_INTGR
      002FCC 27 03            [ 1] 4512 	jreq 1$ 
      002FCE CC 16 66         [ 2] 4513 	jp syntax_error
      002FD1                       4514 1$: _xpop 
      002FD1 90 F6            [ 1]    1     ld a,(y)
      002FD3 93               [ 1]    2     ldw x,y 
      002FD4 EE 01            [ 2]    3     ldw x,(1,x)
      002FD6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002FDA 4D               [ 1] 4515 	tnz a 
      002FDB 27 05            [ 1] 4516 	jreq 3$ 
      002FDD A6 0A            [ 1] 4517 2$:	ld a,#ERR_BAD_VALUE
      002FDF CC 16 68         [ 2] 4518 	jp tb_error 
      002FE2 A3 00 14         [ 2] 4519 3$: cpw x,#XSTACK_SIZE 
      002FE5 22 F6            [ 1] 4520 	jrugt 2$
      002FE7 A6 03            [ 1] 4521 	ld a,#CELL_SIZE 
      002FE9 42               [ 4] 4522 	mul x,a 
      002FEA CF 00 0D         [ 2] 4523 	ldw acc16,x 
      002FED 72 B2 00 0D      [ 2] 4524 	subw y,acc16 
      002FF1 90 A3 17 60      [ 2] 4525 	cpw y,#xstack_full
      002FF5 22 05            [ 1] 4526 	jrugt 9$
      002FF7 A6 01            [ 1] 4527 	ld a,#ERR_MEM_FULL
      002FF9 CC 16 68         [ 2] 4528 	jp tb_error 
      002FFC                       4529 9$:	 
      002FFC 81               [ 4] 4530 	ret 
                                   4531 
                                   4532 
                                   4533 ;------------------------------
                                   4534 ;  BASIC DROP expr 
                                   4535 ;  expr in range {0..XSTACK_SIZE}
                                   4536 ;  discard n elements from xtack
                                   4537 ;------------------------------
      002FFD                       4538 xdrop:
      002FFD CD 1A D6         [ 4] 4539 	call expression 
      003000 A1 84            [ 1] 4540 	cp a,#TK_INTGR
      003002 27 03            [ 1] 4541 	jreq 1$ 
      003004 CC 16 66         [ 2] 4542 	jp syntax_error 
      003007                       4543 1$:	_xpop 
      003007 90 F6            [ 1]    1     ld a,(y)
      003009 93               [ 1]    2     ldw x,y 
      00300A EE 01            [ 2]    3     ldw x,(1,x)
      00300C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003010 9F               [ 1] 4544 	ld a,xl 
      003011 A4 1F            [ 1] 4545 	and a,#0x1f 
      003013 5F               [ 1] 4546 	clrw x 
      003014 97               [ 1] 4547 	ld xl,a 
      003015 A6 03            [ 1] 4548 	ld a,#CELL_SIZE 
      003017 42               [ 4] 4549 	mul x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      003018 CF 00 0D         [ 2] 4550 	ldw acc16,x  
      00301B 72 B9 00 0D      [ 2] 4551 	addw y,acc16 
      00301F 90 A3 17 73      [ 2] 4552 	cpw y,#XSTACK_EMPTY 
      003023 23 04            [ 2] 4553 	jrule 9$
      003025 90 AE 17 73      [ 2] 4554 	ldw y,#XSTACK_EMPTY 
      003029 81               [ 4] 4555 9$:	ret 
                                   4556 
                                   4557 ;-----------------------
                                   4558 ; check if value in A:X 
                                   4559 ; is inside xstack bound
                                   4560 ; output:
                                   4561 ;    X     slot address  
                                   4562 ;-----------------------
      00302A                       4563 xstack_bound:
      00302A 4D               [ 1] 4564 	tnz a 
      00302B 26 16            [ 1] 4565 	jrne 8$ 
      00302D A3 00 14         [ 2] 4566 1$: cpw x,#XSTACK_SIZE 
      003030 22 11            [ 1] 4567 	jrugt 8$
      003032 A6 03            [ 1] 4568 	ld a,#CELL_SIZE 
      003034 42               [ 4] 4569 	mul x,a
      003035 CF 00 0D         [ 2] 4570 	ldw acc16,x 
      003038 93               [ 1] 4571 	ldw x,y 
      003039 72 BB 00 0D      [ 2] 4572 	addw x,acc16 
      00303D A3 17 73         [ 2] 4573 	cpw x,#XSTACK_EMPTY 
      003040 24 01            [ 1] 4574 	jruge 8$  
      003042 81               [ 4] 4575 	ret 
      003043 A6 0A            [ 1] 4576 8$: ld a,#ERR_BAD_VALUE
      003045 CC 16 68         [ 2] 4577 	jp tb_error 
                                   4578 
                                   4579 ;-------------------------
                                   4580 ; BASIC: PUT expr, cond 
                                   4581 ; expr -> slot 
                                   4582 ; cond -> valut to put 
                                   4583 ; on xstack 
                                   4584 ;-------------------------
      003048                       4585 xput:
      003048 CD 19 92         [ 4] 4586 	call arg_list 
      00304B A1 02            [ 1] 4587 	cp a,#2 
      00304D 27 03            [ 1] 4588 	jreq 1$ 
      00304F CC 16 66         [ 2] 4589 0$:	jp syntax_error
      003052                       4590 1$: _xpop   ; value to put 
      003052 90 F6            [ 1]    1     ld a,(y)
      003054 93               [ 1]    2     ldw x,y 
      003055 EE 01            [ 2]    3     ldw x,(1,x)
      003057 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00305B 89               [ 2] 4591 	pushw x 
      00305C 88               [ 1] 4592 	push a 
      00305D                       4593 	_xpop    ; slot 
      00305D 90 F6            [ 1]    1     ld a,(y)
      00305F 93               [ 1]    2     ldw x,y 
      003060 EE 01            [ 2]    3     ldw x,(1,x)
      003062 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003066 CD 30 2A         [ 4] 4594 	call xstack_bound
      003069 CF 00 19         [ 2] 4595     ldw ptr16,x 
      00306C 84               [ 1] 4596 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      00306D 85               [ 2] 4597 	popw x 
      00306E 72 C7 00 19      [ 4] 4598 	ld [ptr16],a 
      003072 72 5C 00 1A      [ 1] 4599 	inc ptr8 
      003076 72 CF 00 19      [ 5] 4600 	ldw [ptr16],x 
      00307A 81               [ 4] 4601 	ret 
                                   4602 
                                   4603 ;------------------------
                                   4604 ; BASIC: PICK expr 
                                   4605 ; get nième element on 
                                   4606 ; xtack. 
                                   4607 ;-----------------------
      00307B                       4608 xpick:
      00307B CD 19 8D         [ 4] 4609 	call func_args 
      00307E A1 01            [ 1] 4610 	cp a,#1 
      003080 27 03            [ 1] 4611 	jreq 1$
      003082 CC 16 66         [ 2] 4612 	jp syntax_error 
      003085                       4613 1$: _xpop 
      003085 90 F6            [ 1]    1     ld a,(y)
      003087 93               [ 1]    2     ldw x,y 
      003088 EE 01            [ 2]    3     ldw x,(1,x)
      00308A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00308E CD 30 2A         [ 4] 4614 	call xstack_bound
      003091 F6               [ 1] 4615     ld a,(x)
      003092 EE 01            [ 2] 4616 	ldw x,(1,x)				
      003094 81               [ 4] 4617 	ret 
                                   4618 
                                   4619 
                                   4620 
                                   4621 ;------------------------------
                                   4622 ;      dictionary 
                                   4623 ; format:
                                   4624 ;   link:   2 bytes 
                                   4625 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   4626 ;   cmd_name: 16 byte max 
                                   4627 ;   code_addr: 2 bytes 
                                   4628 ;------------------------------
                                   4629 	.macro _dict_entry len,name,code_addr 
                                   4630 	.word LINK 
                                   4631 	LINK=.
                                   4632 name:
                                   4633 	.byte len   	
                                   4634 	.ascii "name"
                                   4635 	.word code_addr  
                                   4636 	.endm 
                                   4637 
                           000000  4638 	LINK=0
                                   4639 ; respect alphabetic order for BASIC names from Z-A
                                   4640 ; this sort order is for a cleaner WORDS cmd output. 	
      003095                       4641 kword_end:
      003095                       4642 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      003095 00 00                    1 	.word LINK 
                           003097     2 	LINK=.
      003097                          3 XOR:
      003097 A3                       4 	.byte 3+F_XOR   	
      003098 58 4F 52                 5 	.ascii "XOR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      00309B 00 8A                    6 	.word TK_XOR  
      00309D                       4643 	_dict_entry,5,WRITE,write  
      00309D 30 97                    1 	.word LINK 
                           00309F     2 	LINK=.
      00309F                          3 WRITE:
      00309F 05                       4 	.byte 5   	
      0030A0 57 52 49 54 45           5 	.ascii "WRITE"
      0030A5 29 28                    6 	.word write  
      0030A7                       4644 	_dict_entry,5,WORDS,words 
      0030A7 30 9F                    1 	.word LINK 
                           0030A9     2 	LINK=.
      0030A9                          3 WORDS:
      0030A9 05                       4 	.byte 5   	
      0030AA 57 4F 52 44 53           5 	.ascii "WORDS"
      0030AF 2C 7A                    6 	.word words  
      0030B1                       4645 	_dict_entry 4,WAIT,wait 
      0030B1 30 A9                    1 	.word LINK 
                           0030B3     2 	LINK=.
      0030B3                          3 WAIT:
      0030B3 04                       4 	.byte 4   	
      0030B4 57 41 49 54              5 	.ascii "WAIT"
      0030B8 21 74                    6 	.word wait  
      0030BA                       4646 	_dict_entry,3+F_IFUNC,USR,usr
      0030BA 30 B3                    1 	.word LINK 
                           0030BC     2 	LINK=.
      0030BC                          3 USR:
      0030BC 13                       4 	.byte 3+F_IFUNC   	
      0030BD 55 53 52                 5 	.ascii "USR"
      0030C0 2A 1F                    6 	.word usr  
      0030C2                       4647 	_dict_entry,5,UNTIL,until 
      0030C2 30 BC                    1 	.word LINK 
                           0030C4     2 	LINK=.
      0030C4                          3 UNTIL:
      0030C4 05                       4 	.byte 5   	
      0030C5 55 4E 54 49 4C           5 	.ascii "UNTIL"
      0030CA 2D AF                    6 	.word until  
      0030CC                       4648 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      0030CC 30 C4                    1 	.word LINK 
                           0030CE     2 	LINK=.
      0030CE                          3 UFLASH:
      0030CE 16                       4 	.byte 6+F_IFUNC   	
      0030CF 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      0030D5 2A 02                    6 	.word uflash  
      0030D7                       4649 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      0030D7 30 CE                    1 	.word LINK 
                           0030D9     2 	LINK=.
      0030D9                          3 UBOUND:
      0030D9 16                       4 	.byte 6+F_IFUNC   	
      0030DA 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      0030E0 1C A3                    6 	.word ubound  
      0030E2                       4650 	_dict_entry,4,TONE,tone  
      0030E2 30 D9                    1 	.word LINK 
                           0030E4     2 	LINK=.
      0030E4                          3 TONE:
      0030E4 04                       4 	.byte 4   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      0030E5 54 4F 4E 45              5 	.ascii "TONE"
      0030E9 25 DE                    6 	.word tone  
      0030EB                       4651 	_dict_entry,2,TO,to
      0030EB 30 E4                    1 	.word LINK 
                           0030ED     2 	LINK=.
      0030ED                          3 TO:
      0030ED 02                       4 	.byte 2   	
      0030EE 54 4F                    5 	.ascii "TO"
      0030F0 22 DE                    6 	.word to  
      0030F2                       4652 	_dict_entry,5,TIMER,set_timer
      0030F2 30 ED                    1 	.word LINK 
                           0030F4     2 	LINK=.
      0030F4                          3 TIMER:
      0030F4 05                       4 	.byte 5   	
      0030F5 54 49 4D 45 52           5 	.ascii "TIMER"
      0030FA 2C E4                    6 	.word set_timer  
      0030FC                       4653 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      0030FC 30 F4                    1 	.word LINK 
                           0030FE     2 	LINK=.
      0030FE                          3 TIMEOUT:
      0030FE 17                       4 	.byte 7+F_IFUNC   	
      0030FF 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      003106 2C FB                    6 	.word timeout  
      003108                       4654 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      003108 30 FE                    1 	.word LINK 
                           00310A     2 	LINK=.
      00310A                          3 TICKS:
      00310A 15                       4 	.byte 5+F_IFUNC   	
      00310B 54 49 43 4B 53           5 	.ascii "TICKS"
      003110 2A CB                    6 	.word get_ticks  
      003112                       4655 	_dict_entry,4,STOP,stop 
      003112 31 0A                    1 	.word LINK 
                           003114     2 	LINK=.
      003114                          3 STOP:
      003114 04                       4 	.byte 4   	
      003115 53 54 4F 50              5 	.ascii "STOP"
      003119 27 47                    6 	.word stop  
      00311B                       4656 	_dict_entry,4,STEP,step 
      00311B 31 14                    1 	.word LINK 
                           00311D     2 	LINK=.
      00311D                          3 STEP:
      00311D 04                       4 	.byte 4   	
      00311E 53 54 45 50              5 	.ascii "STEP"
      003122 23 24                    6 	.word step  
      003124                       4657 	_dict_entry,5,SPIWR,spi_write
      003124 31 1D                    1 	.word LINK 
                           003126     2 	LINK=.
      003126                          3 SPIWR:
      003126 05                       4 	.byte 5   	
      003127 53 50 49 57 52           5 	.ascii "SPIWR"
      00312C 2F 76                    6 	.word spi_write  
      00312E                       4658 	_dict_entry,6,SPISEL,spi_select
      00312E 31 26                    1 	.word LINK 
                           003130     2 	LINK=.
      003130                          3 SPISEL:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      003130 06                       4 	.byte 6   	
      003131 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      003137 2F 9D                    6 	.word spi_select  
      003139                       4659 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      003139 31 30                    1 	.word LINK 
                           00313B     2 	LINK=.
      00313B                          3 SPIRD:
      00313B 15                       4 	.byte 5+F_IFUNC   	
      00313C 53 50 49 52 44           5 	.ascii "SPIRD"
      003141 2F 96                    6 	.word spi_read  
      003143                       4660 	_dict_entry,5,SPIEN,spi_enable 
      003143 31 3B                    1 	.word LINK 
                           003145     2 	LINK=.
      003145                          3 SPIEN:
      003145 05                       4 	.byte 5   	
      003146 53 50 49 45 4E           5 	.ascii "SPIEN"
      00314B 2E FE                    6 	.word spi_enable  
      00314D                       4661 	_dict_entry,5,SLEEP,sleep 
      00314D 31 45                    1 	.word LINK 
                           00314F     2 	LINK=.
      00314F                          3 SLEEP:
      00314F 05                       4 	.byte 5   	
      003150 53 4C 45 45 50           5 	.ascii "SLEEP"
      003155 2A 4E                    6 	.word sleep  
      003157                       4662     _dict_entry,4,SIZE,cmd_size 
      003157 31 4F                    1 	.word LINK 
                           003159     2 	LINK=.
      003159                          3 SIZE:
      003159 04                       4 	.byte 4   	
      00315A 53 49 5A 45              5 	.ascii "SIZE"
      00315E 1C 76                    6 	.word cmd_size  
      003160                       4663 	_dict_entry,4,SAVE,save_app 
      003160 31 59                    1 	.word LINK 
                           003162     2 	LINK=.
      003162                          3 SAVE:
      003162 04                       4 	.byte 4   	
      003163 53 41 56 45              5 	.ascii "SAVE"
      003167 28 39                    6 	.word save_app  
      003169                       4664 	_dict_entry 3,RUN,run
      003169 31 62                    1 	.word LINK 
                           00316B     2 	LINK=.
      00316B                          3 RUN:
      00316B 03                       4 	.byte 3   	
      00316C 52 55 4E                 5 	.ascii "RUN"
      00316F 25 3A                    6 	.word run  
      003171                       4665 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      003171 31 6B                    1 	.word LINK 
                           003173     2 	LINK=.
      003173                          3 RSHIFT:
      003173 16                       4 	.byte 6+F_IFUNC   	
      003174 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00317A 2B 15                    6 	.word rshift  
      00317C                       4666 	_dict_entry,3+F_IFUNC,RND,random 
      00317C 31 73                    1 	.word LINK 
                           00317E     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      00317E                          3 RND:
      00317E 13                       4 	.byte 3+F_IFUNC   	
      00317F 52 4E 44                 5 	.ascii "RND"
      003182 2B DF                    6 	.word random  
      003184                       4667 	_dict_entry,6,RETURN,return 
      003184 31 7E                    1 	.word LINK 
                           003186     2 	LINK=.
      003186                          3 RETURN:
      003186 06                       4 	.byte 6   	
      003187 52 45 54 55 52 4E        5 	.ascii "RETURN"
      00318D 25 1D                    6 	.word return  
      00318F                       4668 	_dict_entry,7,RESTORE,restore 
      00318F 31 86                    1 	.word LINK 
                           003191     2 	LINK=.
      003191                          3 RESTORE:
      003191 07                       4 	.byte 7   	
      003192 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      003199 2E 46                    6 	.word restore  
      00319B                       4669 	_dict_entry 3,REM,remark 
      00319B 31 91                    1 	.word LINK 
                           00319D     2 	LINK=.
      00319D                          3 REM:
      00319D 03                       4 	.byte 3   	
      00319E 52 45 4D                 5 	.ascii "REM"
      0031A1 21 6E                    6 	.word remark  
      0031A3                       4670 	_dict_entry,6,REBOOT,cold_start
      0031A3 31 9D                    1 	.word LINK 
                           0031A5     2 	LINK=.
      0031A5                          3 REBOOT:
      0031A5 06                       4 	.byte 6   	
      0031A6 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0031AC 00 C3                    6 	.word cold_start  
      0031AE                       4671 	_dict_entry,4+F_IFUNC,READ,read  
      0031AE 31 A5                    1 	.word LINK 
                           0031B0     2 	LINK=.
      0031B0                          3 READ:
      0031B0 14                       4 	.byte 4+F_IFUNC   	
      0031B1 52 45 41 44              5 	.ascii "READ"
      0031B5 2E B0                    6 	.word read  
      0031B7                       4672 	_dict_entry,4+F_IFUNC,QKEY,qkey
      0031B7 31 B0                    1 	.word LINK 
                           0031B9     2 	LINK=.
      0031B9                          3 QKEY:
      0031B9 14                       4 	.byte 4+F_IFUNC   	
      0031BA 51 4B 45 59              5 	.ascii "QKEY"
      0031BE 29 C5                    6 	.word qkey  
      0031C0                       4673 	_dict_entry,3,PUT,xput 
      0031C0 31 B9                    1 	.word LINK 
                           0031C2     2 	LINK=.
      0031C2                          3 PUT:
      0031C2 03                       4 	.byte 3   	
      0031C3 50 55 54                 5 	.ascii "PUT"
      0031C6 30 48                    6 	.word xput  
      0031C8                       4674 	_dict_entry,4,PUSH,xpush   
      0031C8 31 C2                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



                           0031CA     2 	LINK=.
      0031CA                          3 PUSH:
      0031CA 04                       4 	.byte 4   	
      0031CB 50 55 53 48              5 	.ascii "PUSH"
      0031CF 2F B9                    6 	.word xpush  
      0031D1                       4675 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      0031D1 31 CA                    1 	.word LINK 
                           0031D3     2 	LINK=.
      0031D3                          3 PORTI:
      0031D3 15                       4 	.byte 5+F_IFUNC   	
      0031D4 50 4F 52 54 49           5 	.ascii "PORTI"
      0031D9 2E 05                    6 	.word const_porti  
      0031DB                       4676 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      0031DB 31 D3                    1 	.word LINK 
                           0031DD     2 	LINK=.
      0031DD                          3 PORTG:
      0031DD 15                       4 	.byte 5+F_IFUNC   	
      0031DE 50 4F 52 54 47           5 	.ascii "PORTG"
      0031E3 2E 00                    6 	.word const_portg  
      0031E5                       4677 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      0031E5 31 DD                    1 	.word LINK 
                           0031E7     2 	LINK=.
      0031E7                          3 PORTF:
      0031E7 15                       4 	.byte 5+F_IFUNC   	
      0031E8 50 4F 52 54 46           5 	.ascii "PORTF"
      0031ED 2D FB                    6 	.word const_portf  
      0031EF                       4678 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      0031EF 31 E7                    1 	.word LINK 
                           0031F1     2 	LINK=.
      0031F1                          3 PORTE:
      0031F1 15                       4 	.byte 5+F_IFUNC   	
      0031F2 50 4F 52 54 45           5 	.ascii "PORTE"
      0031F7 2D F6                    6 	.word const_porte  
      0031F9                       4679 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      0031F9 31 F1                    1 	.word LINK 
                           0031FB     2 	LINK=.
      0031FB                          3 PORTD:
      0031FB 15                       4 	.byte 5+F_IFUNC   	
      0031FC 50 4F 52 54 44           5 	.ascii "PORTD"
      003201 2D F1                    6 	.word const_portd  
      003203                       4680 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      003203 31 FB                    1 	.word LINK 
                           003205     2 	LINK=.
      003205                          3 PORTC:
      003205 15                       4 	.byte 5+F_IFUNC   	
      003206 50 4F 52 54 43           5 	.ascii "PORTC"
      00320B 2D EC                    6 	.word const_portc  
      00320D                       4681 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      00320D 32 05                    1 	.word LINK 
                           00320F     2 	LINK=.
      00320F                          3 PORTB:
      00320F 15                       4 	.byte 5+F_IFUNC   	
      003210 50 4F 52 54 42           5 	.ascii "PORTB"
      003215 2D E7                    6 	.word const_portb  
      003217                       4682 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      003217 32 0F                    1 	.word LINK 
                           003219     2 	LINK=.
      003219                          3 PORTA:
      003219 15                       4 	.byte 5+F_IFUNC   	
      00321A 50 4F 52 54 41           5 	.ascii "PORTA"
      00321F 2D E2                    6 	.word const_porta  
      003221                       4683 	_dict_entry 5,PRINT,print 
      003221 32 19                    1 	.word LINK 
                           003223     2 	LINK=.
      003223                          3 PRINT:
      003223 05                       4 	.byte 5   	
      003224 50 52 49 4E 54           5 	.ascii "PRINT"
      003229 20 26                    6 	.word print  
      00322B                       4684 	_dict_entry,4+F_IFUNC,POUT,const_output
      00322B 32 23                    1 	.word LINK 
                           00322D     2 	LINK=.
      00322D                          3 POUT:
      00322D 14                       4 	.byte 4+F_IFUNC   	
      00322E 50 4F 55 54              5 	.ascii "POUT"
      003232 2E 23                    6 	.word const_output  
      003234                       4685 	_dict_entry,3+F_IFUNC,POP,xpop 
      003234 32 2D                    1 	.word LINK 
                           003236     2 	LINK=.
      003236                          3 POP:
      003236 13                       4 	.byte 3+F_IFUNC   	
      003237 50 4F 50                 5 	.ascii "POP"
      00323A 2F BD                    6 	.word xpop  
      00323C                       4686 	_dict_entry,4,POKE,poke 
      00323C 32 36                    1 	.word LINK 
                           00323E     2 	LINK=.
      00323E                          3 POKE:
      00323E 04                       4 	.byte 4   	
      00323F 50 4F 4B 45              5 	.ascii "POKE"
      003243 22 4F                    6 	.word poke  
      003245                       4687 	_dict_entry,5,PMODE,pin_mode 
      003245 32 3E                    1 	.word LINK 
                           003247     2 	LINK=.
      003247                          3 PMODE:
      003247 05                       4 	.byte 5   	
      003248 50 4D 4F 44 45           5 	.ascii "PMODE"
      00324D 2B 50                    6 	.word pin_mode  
      00324F                       4688 	_dict_entry,4+F_IFUNC,PINP,const_input
      00324F 32 47                    1 	.word LINK 
                           003251     2 	LINK=.
      003251                          3 PINP:
      003251 14                       4 	.byte 4+F_IFUNC   	
      003252 50 49 4E 50              5 	.ascii "PINP"
      003256 2E 28                    6 	.word const_input  
      003258                       4689 	_dict_entry,4+F_IFUNC,PICK,xpick 
      003258 32 51                    1 	.word LINK 
                           00325A     2 	LINK=.
      00325A                          3 PICK:
      00325A 14                       4 	.byte 4+F_IFUNC   	
      00325B 50 49 43 4B              5 	.ascii "PICK"
      00325F 30 7B                    6 	.word xpick  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      003261                       4690 	_dict_entry,4+F_IFUNC,PEEK,peek 
      003261 32 5A                    1 	.word LINK 
                           003263     2 	LINK=.
      003263                          3 PEEK:
      003263 14                       4 	.byte 4+F_IFUNC   	
      003264 50 45 45 4B              5 	.ascii "PEEK"
      003268 22 70                    6 	.word peek  
      00326A                       4691 	_dict_entry,5,PAUSE,pause 
      00326A 32 63                    1 	.word LINK 
                           00326C     2 	LINK=.
      00326C                          3 PAUSE:
      00326C 05                       4 	.byte 5   	
      00326D 50 41 55 53 45           5 	.ascii "PAUSE"
      003272 2A 59                    6 	.word pause  
      003274                       4692 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      003274 32 6C                    1 	.word LINK 
                           003276     2 	LINK=.
      003276                          3 PAD:
      003276 13                       4 	.byte 3+F_IFUNC   	
      003277 50 41 44                 5 	.ascii "PAD"
      00327A 2F B4                    6 	.word pad_ref  
      00327C                       4693 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      00327C 32 76                    1 	.word LINK 
                           00327E     2 	LINK=.
      00327E                          3 OR:
      00327E 92                       4 	.byte 2+F_OR   	
      00327F 4F 52                    5 	.ascii "OR"
      003281 00 89                    6 	.word TK_OR  
      003283                       4694 	_dict_entry,2,ON,cmd_on 
      003283 32 7E                    1 	.word LINK 
                           003285     2 	LINK=.
      003285                          3 ON:
      003285 02                       4 	.byte 2   	
      003286 4F 4E                    5 	.ascii "ON"
      003288 24 4D                    6 	.word cmd_on  
      00328A                       4695 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      00328A 32 85                    1 	.word LINK 
                           00328C     2 	LINK=.
      00328C                          3 ODR:
      00328C 13                       4 	.byte 3+F_IFUNC   	
      00328D 4F 44 52                 5 	.ascii "ODR"
      003290 2E 0A                    6 	.word const_odr  
      003292                       4696 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      003292 32 8C                    1 	.word LINK 
                           003294     2 	LINK=.
      003294                          3 NOT:
      003294 73                       4 	.byte 3+F_NOT   	
      003295 4E 4F 54                 5 	.ascii "NOT"
      003298 00 87                    6 	.word TK_NOT  
      00329A                       4697 	_dict_entry,4,NEXT,next 
      00329A 32 94                    1 	.word LINK 
                           00329C     2 	LINK=.
      00329C                          3 NEXT:
      00329C 04                       4 	.byte 4   	
      00329D 4E 45 58 54              5 	.ascii "NEXT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      0032A1 23 66                    6 	.word next  
      0032A3                       4698 	_dict_entry,3,NEW,new
      0032A3 32 9C                    1 	.word LINK 
                           0032A5     2 	LINK=.
      0032A5                          3 NEW:
      0032A5 03                       4 	.byte 3   	
      0032A6 4E 45 57                 5 	.ascii "NEW"
      0032A9 27 93                    6 	.word new  
      0032AB                       4699 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0032AB 32 A5                    1 	.word LINK 
                           0032AD     2 	LINK=.
      0032AD                          3 LSHIFT:
      0032AD 16                       4 	.byte 6+F_IFUNC   	
      0032AE 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0032B4 2A E9                    6 	.word lshift  
      0032B6                       4700 	_dict_entry,4+F_IFUNC,LOG2,log2 
      0032B6 32 AD                    1 	.word LINK 
                           0032B8     2 	LINK=.
      0032B8                          3 LOG2:
      0032B8 14                       4 	.byte 4+F_IFUNC   	
      0032B9 4C 4F 47 32              5 	.ascii "LOG2"
      0032BD 2D 49                    6 	.word log2  
      0032BF                       4701 	_dict_entry 4,LIST,list
      0032BF 32 B8                    1 	.word LINK 
                           0032C1     2 	LINK=.
      0032C1                          3 LIST:
      0032C1 04                       4 	.byte 4   	
      0032C2 4C 49 53 54              5 	.ascii "LIST"
      0032C6 1F 19                    6 	.word list  
      0032C8                       4702 	_dict_entry 3,LET,let 
      0032C8 32 C1                    1 	.word LINK 
                           0032CA     2 	LINK=.
      0032CA                          3 LET:
      0032CA 03                       4 	.byte 3   	
      0032CB 4C 45 54                 5 	.ascii "LET"
      0032CE 1C AE                    6 	.word let  
      0032D0                       4703 	_dict_entry,3+F_CFUNC,KEY,key 
      0032D0 32 CA                    1 	.word LINK 
                           0032D2     2 	LINK=.
      0032D2                          3 KEY:
      0032D2 23                       4 	.byte 3+F_CFUNC   	
      0032D3 4B 45 59                 5 	.ascii "KEY"
      0032D6 29 C1                    6 	.word key  
      0032D8                       4704 	_dict_entry,7,IWDGREF,refresh_iwdg
      0032D8 32 D2                    1 	.word LINK 
                           0032DA     2 	LINK=.
      0032DA                          3 IWDGREF:
      0032DA 07                       4 	.byte 7   	
      0032DB 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      0032E2 2D 44                    6 	.word refresh_iwdg  
      0032E4                       4705 	_dict_entry,6,IWDGEN,enable_iwdg
      0032E4 32 DA                    1 	.word LINK 
                           0032E6     2 	LINK=.
      0032E6                          3 IWDGEN:
      0032E6 06                       4 	.byte 6   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      0032E7 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      0032ED 2D 06                    6 	.word enable_iwdg  
      0032EF                       4706 	_dict_entry,5,INPUT,input_var  
      0032EF 32 E6                    1 	.word LINK 
                           0032F1     2 	LINK=.
      0032F1                          3 INPUT:
      0032F1 05                       4 	.byte 5   	
      0032F2 49 4E 50 55 54           5 	.ascii "INPUT"
      0032F7 20 CF                    6 	.word input_var  
      0032F9                       4707 	_dict_entry,2,IF,if 
      0032F9 32 F1                    1 	.word LINK 
                           0032FB     2 	LINK=.
      0032FB                          3 IF:
      0032FB 02                       4 	.byte 2   	
      0032FC 49 46                    5 	.ascii "IF"
      0032FE 22 91                    6 	.word if  
      003300                       4708 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      003300 32 FB                    1 	.word LINK 
                           003302     2 	LINK=.
      003302                          3 IDR:
      003302 13                       4 	.byte 3+F_IFUNC   	
      003303 49 44 52                 5 	.ascii "IDR"
      003306 2E 0F                    6 	.word const_idr  
      003308                       4709 	_dict_entry,3,HEX,hex_base
      003308 33 02                    1 	.word LINK 
                           00330A     2 	LINK=.
      00330A                          3 HEX:
      00330A 03                       4 	.byte 3   	
      00330B 48 45 58                 5 	.ascii "HEX"
      00330E 1C 63                    6 	.word hex_base  
      003310                       4710 	_dict_entry,4,GOTO,goto 
      003310 33 0A                    1 	.word LINK 
                           003312     2 	LINK=.
      003312                          3 GOTO:
      003312 04                       4 	.byte 4   	
      003313 47 4F 54 4F              5 	.ascii "GOTO"
      003317 24 DF                    6 	.word goto  
      003319                       4711 	_dict_entry,5,GOSUB,gosub 
      003319 33 12                    1 	.word LINK 
                           00331B     2 	LINK=.
      00331B                          3 GOSUB:
      00331B 05                       4 	.byte 5   	
      00331C 47 4F 53 55 42           5 	.ascii "GOSUB"
      003321 24 F9                    6 	.word gosub  
      003323                       4712 	_dict_entry,3,GET,cmd_get 
      003323 33 1B                    1 	.word LINK 
                           003325     2 	LINK=.
      003325                          3 GET:
      003325 03                       4 	.byte 3   	
      003326 47 45 54                 5 	.ascii "GET"
      003329 25 A6                    6 	.word cmd_get  
      00332B                       4713 	_dict_entry,4+F_IFUNC,FREE,free
      00332B 33 25                    1 	.word LINK 
                           00332D     2 	LINK=.
      00332D                          3 FREE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



      00332D 14                       4 	.byte 4+F_IFUNC   	
      00332E 46 52 45 45              5 	.ascii "FREE"
      003332 1C 6D                    6 	.word free  
      003334                       4714 	_dict_entry,3,FOR,for 
      003334 33 2D                    1 	.word LINK 
                           003336     2 	LINK=.
      003336                          3 FOR:
      003336 03                       4 	.byte 3   	
      003337 46 4F 52                 5 	.ascii "FOR"
      00333A 22 AE                    6 	.word for  
      00333C                       4715 	_dict_entry,4,FCPU,fcpu 
      00333C 33 36                    1 	.word LINK 
                           00333E     2 	LINK=.
      00333E                          3 FCPU:
      00333E 04                       4 	.byte 4   	
      00333F 46 43 50 55              5 	.ascii "FCPU"
      003343 2B 41                    6 	.word fcpu  
      003345                       4716 	_dict_entry,5,ERASE,erase 
      003345 33 3E                    1 	.word LINK 
                           003347     2 	LINK=.
      003347                          3 ERASE:
      003347 05                       4 	.byte 5   	
      003348 45 52 41 53 45           5 	.ascii "ERASE"
      00334D 27 9D                    6 	.word erase  
      00334F                       4717 	_dict_entry,3,END,cmd_end  
      00334F 33 47                    1 	.word LINK 
                           003351     2 	LINK=.
      003351                          3 END:
      003351 03                       4 	.byte 3   	
      003352 45 4E 44                 5 	.ascii "END"
      003355 25 9F                    6 	.word cmd_end  
      003357                       4718 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      003357 33 51                    1 	.word LINK 
                           003359     2 	LINK=.
      003359                          3 EEPROM:
      003359 16                       4 	.byte 6+F_IFUNC   	
      00335A 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      003360 2E 2D                    6 	.word const_eeprom_base  
      003362                       4719 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      003362 33 59                    1 	.word LINK 
                           003364     2 	LINK=.
      003364                          3 EEFREE:
      003364 16                       4 	.byte 6+F_IFUNC   	
      003365 45 45 46 52 45 45        5 	.ascii "EEFREE"
      00336B 1D 6E                    6 	.word func_eefree  
      00336D                       4720 	_dict_entry,4,EDIT,edit 
      00336D 33 64                    1 	.word LINK 
                           00336F     2 	LINK=.
      00336F                          3 EDIT:
      00336F 04                       4 	.byte 4   	
      003370 45 44 49 54              5 	.ascii "EDIT"
      003374 1F BE                    6 	.word edit  
      003376                       4721 	_dict_entry,6+F_CMD,DWRITE,digital_write
      003376 33 6F                    1 	.word LINK 
                           003378     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      003378                          3 DWRITE:
      003378 06                       4 	.byte 6+F_CMD   	
      003379 44 57 52 49 54 45        5 	.ascii "DWRITE"
      00337F 26 FC                    6 	.word digital_write  
      003381                       4722 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      003381 33 78                    1 	.word LINK 
                           003383     2 	LINK=.
      003383                          3 DROP:
      003383 04                       4 	.byte 4   	
      003384 44 52 4F 50              5 	.ascii "DROP"
      003388 2F FD                    6 	.word xdrop  
      00338A                       4723 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      00338A 33 83                    1 	.word LINK 
                           00338C     2 	LINK=.
      00338C                          3 DREAD:
      00338C 15                       4 	.byte 5+F_IFUNC   	
      00338D 44 52 45 41 44           5 	.ascii "DREAD"
      003392 26 C5                    6 	.word digital_read  
      003394                       4724 	_dict_entry,2,DO,do_loop
      003394 33 8C                    1 	.word LINK 
                           003396     2 	LINK=.
      003396                          3 DO:
      003396 02                       4 	.byte 2   	
      003397 44 4F                    5 	.ascii "DO"
      003399 2D 9C                    6 	.word do_loop  
      00339B                       4725 	_dict_entry,3,DIM,cmd_dim 
      00339B 33 96                    1 	.word LINK 
                           00339D     2 	LINK=.
      00339D                          3 DIM:
      00339D 03                       4 	.byte 3   	
      00339E 44 49 4D                 5 	.ascii "DIM"
      0033A1 1D F2                    6 	.word cmd_dim  
      0033A3                       4726 	_dict_entry,3,DEC,dec_base
      0033A3 33 9D                    1 	.word LINK 
                           0033A5     2 	LINK=.
      0033A5                          3 DEC:
      0033A5 03                       4 	.byte 3   	
      0033A6 44 45 43                 5 	.ascii "DEC"
      0033A9 1C 68                    6 	.word dec_base  
      0033AB                       4727 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      0033AB 33 A5                    1 	.word LINK 
                           0033AD     2 	LINK=.
      0033AD                          3 DDR:
      0033AD 13                       4 	.byte 3+F_IFUNC   	
      0033AE 44 44 52                 5 	.ascii "DDR"
      0033B1 2E 14                    6 	.word const_ddr  
      0033B3                       4728 	_dict_entry,4,DATA,data  
      0033B3 33 AD                    1 	.word LINK 
                           0033B5     2 	LINK=.
      0033B5                          3 DATA:
      0033B5 04                       4 	.byte 4   	
      0033B6 44 41 54 41              5 	.ascii "DATA"
      0033BA 2E 32                    6 	.word data  
      0033BC                       4729 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      0033BC 33 B5                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



                           0033BE     2 	LINK=.
      0033BE                          3 CR2:
      0033BE 13                       4 	.byte 3+F_IFUNC   	
      0033BF 43 52 32                 5 	.ascii "CR2"
      0033C2 2E 1E                    6 	.word const_cr2  
      0033C4                       4730 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      0033C4 33 BE                    1 	.word LINK 
                           0033C6     2 	LINK=.
      0033C6                          3 CR1:
      0033C6 13                       4 	.byte 3+F_IFUNC   	
      0033C7 43 52 31                 5 	.ascii "CR1"
      0033CA 2E 19                    6 	.word const_cr1  
      0033CC                       4731 	_dict_entry,5,CONST,cmd_const 
      0033CC 33 C6                    1 	.word LINK 
                           0033CE     2 	LINK=.
      0033CE                          3 CONST:
      0033CE 05                       4 	.byte 5   	
      0033CF 43 4F 4E 53 54           5 	.ascii "CONST"
      0033D4 1D DE                    6 	.word cmd_const  
      0033D6                       4732 	_dict_entry,4+F_CFUNC,CHAR,func_char
      0033D6 33 CE                    1 	.word LINK 
                           0033D8     2 	LINK=.
      0033D8                          3 CHAR:
      0033D8 24                       4 	.byte 4+F_CFUNC   	
      0033D9 43 48 41 52              5 	.ascii "CHAR"
      0033DD 29 6B                    6 	.word func_char  
      0033DF                       4733 	_dict_entry,3,BYE,bye 
      0033DF 33 D8                    1 	.word LINK 
                           0033E1     2 	LINK=.
      0033E1                          3 BYE:
      0033E1 03                       4 	.byte 3   	
      0033E2 42 59 45                 5 	.ascii "BYE"
      0033E5 2A 45                    6 	.word bye  
      0033E7                       4734 	_dict_entry,5,BTOGL,bit_toggle
      0033E7 33 E1                    1 	.word LINK 
                           0033E9     2 	LINK=.
      0033E9                          3 BTOGL:
      0033E9 05                       4 	.byte 5   	
      0033EA 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0033EF 21 F6                    6 	.word bit_toggle  
      0033F1                       4735 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      0033F1 33 E9                    1 	.word LINK 
                           0033F3     2 	LINK=.
      0033F3                          3 BTEST:
      0033F3 15                       4 	.byte 5+F_IFUNC   	
      0033F4 42 54 45 53 54           5 	.ascii "BTEST"
      0033F9 22 18                    6 	.word bit_test  
      0033FB                       4736 	_dict_entry,4,BSET,bit_set 
      0033FB 33 F3                    1 	.word LINK 
                           0033FD     2 	LINK=.
      0033FD                          3 BSET:
      0033FD 04                       4 	.byte 4   	
      0033FE 42 53 45 54              5 	.ascii "BSET"
      003402 21 B1                    6 	.word bit_set  
      003404                       4737 	_dict_entry,4,BRES,bit_reset
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      003404 33 FD                    1 	.word LINK 
                           003406     2 	LINK=.
      003406                          3 BRES:
      003406 04                       4 	.byte 4   	
      003407 42 52 45 53              5 	.ascii "BRES"
      00340B 21 D3                    6 	.word bit_reset  
      00340D                       4738 	_dict_entry,3+F_IFUNC,BIT,bitmask
      00340D 34 06                    1 	.word LINK 
                           00340F     2 	LINK=.
      00340F                          3 BIT:
      00340F 13                       4 	.byte 3+F_IFUNC   	
      003410 42 49 54                 5 	.ascii "BIT"
      003413 2D 76                    6 	.word bitmask  
      003415                       4739 	_dict_entry,3,AWU,awu 
      003415 34 0F                    1 	.word LINK 
                           003417     2 	LINK=.
      003417                          3 AWU:
      003417 03                       4 	.byte 3   	
      003418 41 57 55                 5 	.ascii "AWU"
      00341B 2A 79                    6 	.word awu  
      00341D                       4740 	_dict_entry,3+F_IFUNC,ASC,ascii
      00341D 34 17                    1 	.word LINK 
                           00341F     2 	LINK=.
      00341F                          3 ASC:
      00341F 13                       4 	.byte 3+F_IFUNC   	
      003420 41 53 43                 5 	.ascii "ASC"
      003423 29 82                    6 	.word ascii  
      003425                       4741 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      003425 34 1F                    1 	.word LINK 
                           003427     2 	LINK=.
      003427                          3 AND:
      003427 83                       4 	.byte 3+F_AND   	
      003428 41 4E 44                 5 	.ascii "AND"
      00342B 00 88                    6 	.word TK_AND  
      00342D                       4742 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      00342D 34 27                    1 	.word LINK 
                           00342F     2 	LINK=.
      00342F                          3 ALLOC:
      00342F 05                       4 	.byte 5   	
      003430 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      003435 2F C7                    6 	.word xalloc  
      003437                       4743 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      003437 34 2F                    1 	.word LINK 
                           003439     2 	LINK=.
      003439                          3 ADCREAD:
      003439 17                       4 	.byte 7+F_IFUNC   	
      00343A 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      003441 26 89                    6 	.word analog_read  
      003443                       4744 	_dict_entry,5,ADCON,power_adc 
      003443 34 39                    1 	.word LINK 
                           003445     2 	LINK=.
      003445                          3 ADCON:
      003445 05                       4 	.byte 5   	
      003446 41 44 43 4F 4E           5 	.ascii "ADCON"
      00344B 26 39                    6 	.word power_adc  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



      00344D                       4745 kword_dict::
      00344D                       4746 	_dict_entry,3+F_IFUNC,ABS,abs
      00344D 34 45                    1 	.word LINK 
                           00344F     2 	LINK=.
      00344F                          3 ABS:
      00344F 13                       4 	.byte 3+F_IFUNC   	
      003450 41 42 53                 5 	.ascii "ABS"
      003453 2A D2                    6 	.word abs  
                                   4747 
                           000000  4748 INDIRECT=0 
                           000000  4749 .if INDIRECT 
                                   4750 ;comands and fonctions address table 	
                                   4751 code_addr::
                                   4752 	.word abs,power_adc,analog_read,ascii,awu,bitmask ; 0..7
                                   4753 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,func_char,const_cr2  ; 8..15
                                   4754 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
                                   4755 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto ; 24..31 
                                   4756 	.word hex_base,const_idr,if,input_var,enable_iwdg,refresh_iwdg,key ; 32..39 
                                   4757 	.word let,list,log2,lshift,next,new ; 40..47
                                   4758 	.word const_odr,pad_ref,pause,pin_mode,peek,const_input ; 48..55
                                   4759 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
                                   4760 	.word const_portf,const_portg,const_porti,qkey,read,cold_start,remark ; 64..71 
                                   4761 	.word restore,return, random,rshift,run,free ; 72..79
                                   4762 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
                                   4763 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
                                   4764 	.word wait,words,write,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
                                   4765 	.word func_eefree,0 
                                   4766 .endif 
                                   4767 
                                   4768 
                                   4769 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      003455                         30 test:
      003455                         31     _vars VSIZE 
      003455 52 08            [ 2]    1     sub sp,#VSIZE 
      003457 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      00345A 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      00345C CE 00 0F         [ 2]   34     ldw x,ticks 
      00345F 1F 01            [ 2]   35     ldw (T,sp),x
      003461                         36 1$: ; test add24 
      003461 A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      003463 AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      003466 C7 00 0C         [ 1]   39     ld acc24,a 
      003469 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      00346C A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      00346E AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      003471 CD 01 79         [ 4]   43     call add24 
      003474 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      003476 1D 00 01         [ 2]   45     subw x,#1
      003479 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      00347B 26 E4            [ 1]   47     jrne 1$
      00347D CD 18 29         [ 4]   48     call prt_acc24
      003480 A6 20            [ 1]   49     ld a,#SPACE 
      003482 CD 09 0B         [ 4]   50     call putc 
      003485 CE 00 0F         [ 2]   51     ldw x,ticks 
      003488 72 F0 01         [ 2]   52     subw x,(T,sp)
      00348B CD 18 12         [ 4]   53     call prt_i16  
      00348E A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



      003490 CD 09 0B         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      003493 CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      003496 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      003498 CE 00 0F         [ 2]   60     ldw x,ticks 
      00349B 1F 01            [ 2]   61     ldw (T,sp),x 
      00349D                         62 2$: 
      00349D A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      00349F AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      0034A2 C7 00 0C         [ 1]   65     ld acc24,a 
      0034A5 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      0034A8 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      0034AA AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      0034AD CD 02 74         [ 4]   69     call mul24 
      0034B0 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      0034B2 1D 00 01         [ 2]   71     subw x,#1
      0034B5 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      0034B7 26 E4            [ 1]   73     jrne 2$ 
      0034B9 CD 18 29         [ 4]   74    call prt_acc24 
      0034BC A6 20            [ 1]   75    ld a,#SPACE 
      0034BE CD 09 0B         [ 4]   76    call putc 
      0034C1 CE 00 0F         [ 2]   77     ldw x,ticks 
      0034C4 72 F0 01         [ 2]   78     subw x,(T,sp)
      0034C7 CD 18 12         [ 4]   79     call prt_i16 
      0034CA A6 0D            [ 1]   80     ld a,#CR 
      0034CC CD 09 0B         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      0034CF CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      0034D2 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      0034D4 CE 00 0F         [ 2]   85     ldw x,ticks 
      0034D7 1F 01            [ 2]   86     ldw (T,sp),x 
      0034D9                         87 3$: 
      0034D9 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      0034DB AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      0034DE C7 00 0C         [ 1]   90     ld acc24,a 
      0034E1 CF 00 0D         [ 2]   91     ldw acc24+1,x  
      0034E4 A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      0034E6 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      0034E9 CD 02 74         [ 4]   94     call mul24 
      0034EC 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      0034EE 1D 00 01         [ 2]   96     subw x,#1
      0034F1 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      0034F3 26 E4            [ 1]   98     jrne 3$ 
      0034F5 CD 18 29         [ 4]   99     call prt_acc24    
      0034F8 A6 20            [ 1]  100     ld a,#SPACE 
      0034FA CD 09 0B         [ 4]  101     call putc 
      0034FD CE 00 0F         [ 2]  102     ldw x,ticks 
      003500 72 F0 01         [ 2]  103     subw x,(T,sp)
      003503 CD 18 12         [ 4]  104     call prt_i16 
      003506 A6 0D            [ 1]  105     ld a,#CR 
      003508 CD 09 0B         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      00350B CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      00350E 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]



      003510 CE 00 0F         [ 2]  110     ldw x,ticks 
      003513 1F 01            [ 2]  111     ldw (T,sp),x 
      003515                        112 4$:
      003515 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      003517 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      00351A C7 00 0C         [ 1]  115     ld acc24,a 
      00351D CF 00 0D         [ 2]  116     ldw acc24+1,x  
      003520 A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      003522 AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      003525 CD 02 74         [ 4]  119     call mul24 
      003528 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      00352A 1D 00 01         [ 2]  121     subw x,#1
      00352D 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      00352F 26 E4            [ 1]  123     jrne 4$ 
      003531 CD 18 29         [ 4]  124     call prt_acc24 
      003534 A6 20            [ 1]  125     ld a,#SPACE 
      003536 CD 09 0B         [ 4]  126     call putc 
      003539 CE 00 0F         [ 2]  127     ldw x,ticks 
      00353C 72 F0 01         [ 2]  128     subw x,(T,sp)
      00353F CD 18 12         [ 4]  129     call prt_i16 
      003542 A6 0D            [ 1]  130     ld a,#CR 
      003544 CD 09 0B         [ 4]  131     call putc 
                                    132 ; test abs24 
      003547 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      00354A 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      00354C CE 00 0F         [ 2]  135     ldw x,ticks 
      00354F 1F 01            [ 2]  136     ldw (T,sp),x 
      003551                        137 5$: 
      003551 A6 FF            [ 1]  138     ld a,#0xff
      003553 AE FF FF         [ 2]  139     ldw x,#0xffff
      003556 CD 01 EE         [ 4]  140     call abs24 
      003559 C7 00 0C         [ 1]  141     ld acc24,a 
      00355C CF 00 0D         [ 2]  142     ldw acc24+1,x
      00355F 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      003561 1D 00 01         [ 2]  144     subw x,#1
      003564 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      003566 26 E9            [ 1]  146     jrne 5$ 
      003568 CD 18 29         [ 4]  147     call prt_acc24 
      00356B A6 20            [ 1]  148     ld a,#SPACE 
      00356D CD 09 0B         [ 4]  149     call putc 
      003570 CE 00 0F         [ 2]  150     ldw x,ticks 
      003573 72 F0 01         [ 2]  151     subw x,(T,sp)
      003576 CD 18 12         [ 4]  152     call prt_i16 
      003579                        153 6$:
      003579 A6 0D            [ 1]  154     ld a,#CR 
      00357B CD 09 0B         [ 4]  155     call putc 
      00357E CD 35 C4         [ 4]  156     call read_integer 
      003581 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      003586 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      00358B 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      003590 CD 35 C4         [ 4]  160     call read_integer 
      003593 C6 00 0C         [ 1]  161     ld a,acc24 
      003596 CE 00 0D         [ 2]  162     ldw x,acc16 
      003599 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      00359E 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]



      0035A3 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      0035A8 CD 03 02         [ 4]  166     call div24 
      0035AB 88               [ 1]  167     push a 
      0035AC 89               [ 2]  168     pushw x 
      0035AD CD 18 29         [ 4]  169     call prt_acc24 
      0035B0 A6 20            [ 1]  170     ld a,#SPACE 
      0035B2 CD 09 0B         [ 4]  171     call putc 
      0035B5 85               [ 2]  172     popw x
      0035B6 CF 00 0D         [ 2]  173     ldw acc16,x  
      0035B9 32 00 0C         [ 1]  174     pop acc24 
      0035BC CD 18 29         [ 4]  175     call prt_acc24
      0035BF 20 B8            [ 2]  176     jra 6$
      0035C1                        177     _drop VSIZE 
      0035C1 5B 08            [ 2]    1     addw sp,#VSIZE 
      0035C3 81               [ 4]  178     ret 
                                    179 
                                    180 
      0035C4                        181 read_integer:
      0035C4 A6 3F            [ 1]  182     ld a,#'? 
      0035C6 CD 09 0B         [ 4]  183     call putc  
      0035C9 72 5F 00 03      [ 1]  184 	clr count  
      0035CD CD 0A 6D         [ 4]  185 	call readln 
      0035D0 AE 16 90         [ 2]  186 	ldw x,#tib 
      0035D3 3B 00 03         [ 1]  187 	push count
      0035D6 4B 00            [ 1]  188 	push #0 
      0035D8 72 FB 01         [ 2]  189 	addw x,(1,sp)
      0035DB 5C               [ 1]  190 	incw x 
      0035DC                        191 	_drop 2 
      0035DC 5B 02            [ 2]    1     addw sp,#2 
      0035DE 72 5F 00 01      [ 1]  192 	clr in 
      0035E2 CD 0E E2         [ 4]  193 	call get_token
      0035E5 A1 84            [ 1]  194 	cp a,#TK_INTGR
      0035E7 27 0F            [ 1]  195 	jreq 3$ 
      0035E9 A1 11            [ 1]  196 	cp a,#TK_MINUS
      0035EB CD 0E E2         [ 4]  197 	call get_token 
      0035EE A1 84            [ 1]  198 	cp a,#TK_INTGR 
      0035F0 27 03            [ 1]  199 	jreq 2$
      0035F2 CC 16 66         [ 2]  200 	jp syntax_error
      0035F5                        201 2$:
      0035F5 CD 02 18         [ 4]  202 	call neg_acc24  	
      0035F8                        203 3$: 
      0035F8 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003600                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003600                         30 app_space::
      003600 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003602 00 00                   32 app_size: .word 0 
      003604                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        00344F R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      003445 R
    ADCON_ID=  000002     |   4 ADCREAD    003439 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 ALLOC      00342F R   |   4 AND        003427 R   |     AND_IDX =  0000FA 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 ASC        00341F R   |     ASC_IDX =  000006     |     ATMP    =  000001 
    ATTRIB  =  000002     |   4 AUTO_RUN   000157 R   |   4 AWU        003417 R
  4 AWUHandl   000004 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_CSR_=  000004     |     AWU_IDX =  000008     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
  4 BIT        00340F R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BIT_IDX =  00000A     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |   4 BRES       003406 R
    BRES_IDX=  00000C     |     BS      =  000008     |   4 BSET       0033FD R
    BSET_IDX=  00000E     |     BSIZE   =  000006     |   4 BTEST      0033F3 R
    BTEST_ID=  000010     |   4 BTOGL      0033E9 R   |     BTOGL_ID=  000012 
    BTW     =  000001     |   4 BYE        0033E1 R   |     BYE_IDX =  000014 
    C       =  000001     |     CAN     =  000018     |   4 CANT_DO    0028D0 R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000003 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  4 CHAR       0033D8 R   |     CHAR_IDX=  000016     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000006     |     CNTR    =  000003     |     CNT_LO  =  000004 
    CODE_ADD=  000001     |     COMMA   =  00002C     |   4 CONST      0033CE R
  4 CONST_CO   001D58 R   |     CONST_ID=  0000B6     |     COUNT   =  000003 
    CPOS    =  000003     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    CR      =  00000D     |   4 CR1        0033C6 R   |     CR1_IDX =  00001A 
  4 CR2        0033BE R   |     CR2_IDX =  000018     |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000004     |     CTX_BPTR=  000001 
    CTX_COUN=  000004     |     CTX_IN  =  000003     |     CURR    =  000002 
    CVAR    =  000009     |     CX_BPTR =  000001     |     CX_CNT  =  000004 
    CX_IN   =  000003     |   4 DATA       0033B5 R   |     DATA_IDX=  00001C 
    DBG_A   =  000008     |     DBG_CC  =  000009     |     DBG_X   =  000006 
    DBG_Y   =  000004     |     DC1     =  000011     |     DC2     =  000012 
    DC3     =  000013     |     DC4     =  000014     |   4 DDR        0033AD R
    DDR_IDX =  00001E     |     DEBUG   =  000001     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   4 DEC        0033A5 R   |     DEC_IDX =  000020 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  4 DIM        00339D R   |     DIVISOR =  000001     |     DIVSOR  =  000001 
    DLE     =  000010     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  4 DO         003396 R   |     DOLP_ADR=  000003     |     DOLP_INW=  000005 
    DO_IDX  =  000022     |   4 DREAD      00338C R   |     DREAD_ID=  000024 
  4 DROP       003383 R   |   4 DWRITE     003378 R   |     DWRITE_I=  000026 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

  4 EDIT       00336F R   |     EDIT_IDX=  000028     |   4 EEFREE     003364 R
    EEFREE_I=  0000B8     |   4 EEPROM     003359 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_I=  00002A     |     EEPROM_S=  000800 
    EM      =  000019     |   4 END        003351 R   |     END_IDX =  00002C 
    ENQ     =  000005     |     EOF     =  0000FF     |     EOT     =  000004 
  4 ERASE      003347 R   |     ERASE_ID=  00002E     |     ERR_BAD_=  00000A 
    ERR_BUF_=  00000F     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_D=  00000C     |     ERR_NO_F=  00000E     |     ERR_NO_L=  000005 
    ERR_NO_P=  00000D     |     ERR_OVER=  000010     |     ERR_RD_O=  000011 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
  4 FCPU       00333E R   |     FCPU_IDX=  000030     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
  4 FLASH_ME   001EF9 R   |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   4 FOR        003336 R   |     FOR_IDX =  000034 
  4 FREE       00332D R   |     FREE_IDX=  000088     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_AND   =  000080     |     F_CFUNC =  000020 
    F_CMD   =  000000     |     F_CONST =  000030     |     F_IFUNC =  000010 
    F_NOT   =  000070     |     F_OR    =  000090     |     F_XOR   =  0000A0 
  4 GET        003325 R   |     GET_IDX =  0000B4     |   4 GOSUB      00331B R
    GOSUB_ID=  000036     |   4 GOTO       003312 R   |     GOTO_IDX=  000038 
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     GS      =  00001D     |   4 HEX        00330A R
    HEX_IDX =  00003A     |     HOME    =  000082     |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  4 IDR        003302 R   |     IDR_IDX =  00003C     |   4 IF         0032FB R
    IF_IDX  =  00003E     |     IN      =  000005     |     INCR    =  000001 
    INDIRECT=  000000     |     INP     =  000000     |   4 INPUT      0032F1 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000040     |     INPUT_PU=  000001     |     INT24   =  000005 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     INW     =  00000B     |     IPOS    =  000001 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   4 IWDGEN     0032E6 R
    IWDGEN_I=  000042     |   4 IWDGREF    0032DA R   |     IWDGREF_=  000044 
    IWDG_KEY=  000055     |     IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
    KCHAR   =  000002     |   4 KEY        0032D2 R   |     KEY_END =  000083 
    KEY_IDX =  000046     |     KW_TYPE_=  0000F0     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |   4 LET        0032CA R
    LET_IDX =  000048     |     LF      =  00000A     |     LIMIT   =  000001 
    LINENO  =  000005     |   4 LINK    =  00344F R   |   4 LIST       0032C1 R
    LIST_IDX=  00004A     |     LL      =  000001     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   4 LOG2       0032B8 R
    LOG_IDX =  00004C     |     LOOP_CNT=  002710     |   4 LSHIFT     0032AD R
    LSHIFT_I=  00004E     |     MAJOR   =  000002     |     MASK    =  000002 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |     MULOP   =  000001 
    N1      =  000005     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000001     |     NAME_MAX=  00000F     |     NCLKOPT =  004808 
    NEG     =  000001     |   4 NEW        0032A5 R   |     NEW_IDX =  000052 
  4 NEXT       00329C R   |     NEXT_IDX=  000050     |     NFLASH_W=  00480E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    NHSECNT =  00480A     |     NLEN    =  000001     |     NLEN_MAS=  00000F 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   4 NOT        003294 R
    NOT_IDX =  0000F8     |     NOT_OP  =  000001     |   4 NOT_SAVE   001FEB R
  4 NO_APP     002912 R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R   |   4 ODR        00328C R
    ODR_IDX =  000054     |   4 ON         003285 R   |     ONOFF   =  000003 
    ON_IDX  =  0000B2     |     OP      =  000002     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  4 OR         00327E R   |     OR_IDX  =  0000FC     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVRWR   =  000004     |     PA      =  000000 
  4 PAD        003276 R   |     PAD_IDX =  000056     |     PAD_SIZE=  000080 
  4 PAUSE      00326C R   |     PAUSE_ID=  000058     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  4 PEEK       003263 R   |     PEEK_IDX=  00005C     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
  4 PICK       00325A R   |     PINNO   =  000001     |   4 PINP       003251 R
    PINP_IDX=  00005E     |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   4 PMODE      003247 R
    PMODE_ID=  00005A     |   4 POKE       00323E R   |     POKE_IDX=  000060 
  4 POP        003236 R   |   4 PORTA      003219 R   |   4 PORTB      00320F R
  4 PORTC      003205 R   |   4 PORTD      0031FB R   |   4 PORTE      0031F1 R
  4 PORTF      0031E7 R   |   4 PORTG      0031DD R   |   4 PORTI      0031D3 R
  4 POUT       00322D R   |     POUT_IDX=  000062     |     PREV    =  000001 
  4 PRINT      003223 R   |     PROD    =  000001     |     PROD_SIG=  000004 
  4 PROG_ADD   001ECF R   |   4 PROG_SIZ   001EE1 R   |     PRTA_IDX=  000066 
    PRTB_IDX=  000068     |     PRTC_IDX=  00006A     |     PRTD_IDX=  00006C 
    PRTE_IDX=  00006E     |     PRTF_IDX=  000070     |     PRTG_IDX=  000072 
    PRTI_IDX=  000074     |     PRT_IDX =  000064     |     PSIZE   =  000001 
    PSTR    =  000003     |   4 PUSH       0031CA R   |   4 PUT        0031C2 R
  4 QKEY       0031B9 R   |     QKEY_IDX=  000076     |     QSIGN   =  000005 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |   4 RAM_MEM    001F0A R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    RAM_SIZE=  001800     |     RBT_IDX =  00007A     |   4 READ       0031B0 R
    READ_IDX=  000078     |   4 REBOOT     0031A5 R   |     RECLEN  =  000005 
    REC_LEN =  000003     |     REC_XTRA=  000005     |   4 REG_A      000529 R
  4 REG_CC     00052D R   |   4 REG_EPC    00051C R   |   4 REG_SP     000532 R
  4 REG_X      000525 R   |   4 REG_Y      000521 R   |     RELOP   =  000001 
  4 REM        00319D R   |     REM_IDX =  00007C     |   4 RESTORE    003191 R
    REST_IDX=  00007E     |     RETL1   =  000001     |   4 RETURN     003186 R
    RET_ADDR=  000001     |     RET_BPTR=  000003     |     RET_IDX =  000080 
    RET_INW =  000005     |   4 RND        00317E R   |     RND_IDX =  000082 
    RONLY   =  000005     |     ROP     =  004800     |     RS      =  00001E 
  4 RSHIFT     003173 R   |     RSHIFT_I=  000084     |     RSIGN   =  000006 
    RST_SR  =  0050B3     |   4 RUN        00316B R   |     RUN_IDX =  000086 
    RXCHAR  =  000001     |     RX_QUEUE=  000008     |     R_A     =  000007 
    R_CC    =  000008     |     R_X     =  000005     |     R_Y     =  000003 
  4 SAVE       003162 R   |     SAVE_IDX=  000032     |     SEPARATE=  000000 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
    SI      =  00000F     |     SIGN    =  000001     |   4 SIGNATUR   0028CE R
  4 SIZE       003159 R   |     SIZE_IDX=  0000B0     |     SKIP    =  000005 
  4 SLEEP      00314F R   |     SLEEP_ID=  00008A     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   4 SPIEN      003145 R
    SPIEN_ID=  00008E     |   4 SPIRD      00313B R   |     SPIRD_ID=  00008C 
  4 SPISEL     003130 R   |     SPISEL_I=  000090     |   4 SPIWR      003126 R
    SPIWR_ID=  000092     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  00008C 
  4 STATES     0004DF R   |   4 STEP       00311D R   |     STEP_IDX=  000094 
  4 STOP       003114 R   |     STOP_IDX=  000096     |     STR     =  000003 
  4 STR_BYTE   001EF2 R   |     STX     =  000002     |     SUB     =  00001A 
    SUP     =  000084     |     SWIM_CSR=  007F80     |     SYN     =  000016 
    T       =  000001     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   4 TICKS      00310A R
    TICKS_ID=  000098     |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   4 TIMEOUT    0030FE R
  4 TIMER      0030F4 R   |     TIMER_ID=  00009A     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_AND  =  000088     |     TK_ARRAY=  000005 
    TK_CFUNC=  000082     |     TK_CHAR =  000004     |     TK_CMD  =  000080 
    TK_COLON=  00000A     |     TK_COMMA=  000008     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_FLOAT=  000086 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LABEL=  000003     |     TK_LE   =  000036     |     TK_LPARE=  000006 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_NOT  =  000087     |     TK_OR   =  000089     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  000007     |     TK_SHARP=  000009 
    TK_VAR  =  000085     |     TK_XOR  =  00008A     |     TMROUT_I=  00009C 
  4 TO         0030ED R   |   4 TONE       0030E4 R   |     TONE_IDX=  0000A0 
    TOWRITE =  000005     |     TO_IDX  =  00009E     |   4 Timer4Up   000021 R
  4 TrapHand   000012 R   |     U8      =  000001     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART2   =  000001     |     UART3   =  000002     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Symbol Table

    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   4 UBOUND     0030D9 R
    UBOUND_I=  0000A2     |   4 UBTN_Han   000068 R   |   4 UFLASH     0030CE R
    UFLASH_I=  0000A4     |   4 UNTIL      0030C4 R   |     UNTIL_ID=  0000A6 
    US      =  00001F     |   4 USER_ABO   000070 R   |   4 USR        0030BC R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    USR_IDX =  0000A8     |   4 Uart1RxH   000899 R   |   4 UserButt   000044 R
    VAL1    =  02FFFF     |     VAL2    =  00002A     |     VAL3    =  000003 
    VAL4    =  0005FF     |     VAL5    =  FFFFFFFD     |     VAR_NAME=  000001 
    VSIZE   =  000008     |     VT      =  00000B     |   4 WAIT       0030B3 R
    WAIT_IDX=  0000AA     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
    WLKPTR  =  000003     |   4 WORDS      0030A9 R   |     WORDS_ID=  0000AC 
  4 WRITE      00309F R   |     WRITE_ID=  0000AE     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XFIRST  =  000001     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   4 XOR        003097 R
    XOR_IDX =  0000FE     |     XSAVE   =  000002     |     XSTACK_E=  001773 
    XSTACK_S=  000014     |     XTEMP   =  000001     |     YSAVE   =  000004 
    YTEMP   =  000003     |   4 abs        002AD2 R   |   4 abs24      0001EE R
  5 acc16      00000D GR  |   5 acc24      00000C GR  |   5 acc32      00000B GR
  5 acc8       00000E GR  |   4 accept_c   000BC7 R   |   4 add24      000179 R
  4 add_char   001332 R   |   4 add_spac   00112A R   |   4 analog_r   002689 R
  4 and_cond   001B9D R   |   4 and_fact   001B6D R   |   4 app        003604 R
  4 app_sign   003600 R   |   4 app_size   003602 R   |   4 app_spac   003600 GR
  4 arduino_   002BBF R   |   4 arg_list   001992 R   |   5 array_si   000020 R
  4 ascii      002982 R   |   4 at_tst     000F9C R   |   4 atoi24     0018B4 GR
  4 atoi_exi   001923 R   |   4 awu        002A79 R   |   4 awu02      002A8C R
  4 bad_port   0029FD R   |   5 base       00000A GR  |   5 basicptr   000004 GR
  4 beep       002600 R   |   4 beep_1kh   0025D3 GR  |   4 bin_exit   000E03 R
  4 bit_rese   0021D3 R   |   4 bit_set    0021B1 R   |   4 bit_test   002218 R
  4 bit_togg   0021F6 R   |   4 bitmask    002D76 R   |   4 bkslsh_t   000F49 R
  4 bksp       000972 R   |   2 block_bu   0016E0 GR  |   4 block_er   000787 R
  4 break_po   002775 R   |   4 bye        002A45 R   |   4 clear_ba   00149E R
  4 clear_bl   002825 R   |   4 clear_va   0013F6 R   |   4 clock_in   00008B R
  4 cmd_cons   001DDE R   |   4 cmd_dim    001DF2 R   |   4 cmd_dim1   001DFC R
  4 cmd_dim2   001E02 R   |   4 cmd_end    00259F R   |   4 cmd_get    0025A6 R
  4 cmd_itf    000537 R   |   4 cmd_line   0016F5 R   |   4 cmd_name   001352 R
  4 cmd_on     00244D R   |   4 cmd_size   001C76 R   |   4 cold_sta   0000C3 R
  4 colon_ts   000F70 R   |   4 comma_ts   000F7B R   |   4 comp_msg   001645 R
  4 compile    001096 GR  |   4 conditio   001BEF R   |   4 const_cr   002E19 R
  4 const_cr   002E1E R   |   4 const_dd   002E14 R   |   4 const_ee   002E2D R
  4 const_id   002E0F R   |   4 const_in   002E28 R   |   4 const_od   002E0A R
  4 const_ou   002E23 R   |   4 const_po   002DE2 R   |   4 const_po   002DE7 R
  4 const_po   002DEC R   |   4 const_po   002DF1 R   |   4 const_po   002DF6 R
  4 const_po   002DFB R   |   4 const_po   002E00 R   |   4 const_po   002E05 R
  4 convert_   000D73 R   |   4 convert_   000936 R   |   4 copy_com   000FD1 R
  5 count      000003 GR  |   4 cp24       0001B3 R   |   4 cp24_ax    0001E5 R
  4 cp_loop    001943 R   |   4 cpl24      0001F5 R   |   4 cpy_cmd_   001112 R
  4 cpy_quot   001152 R   |   4 create_g   000C9D R   |   4 cs_high    002FAF R
  4 dash_tst   000F91 R   |   4 data       002E32 R   |   4 data_err   002EAB R
  5 data_len   000009 R   |   5 data_ofs   000008 R   |   5 data_ptr   000006 R
  4 dec_base   001C68 R   |   4 decomp_l   0011EA R   |   4 decompil   0011A2 GR
  4 del_line   000C70 R   |   4 delete_l   000A5F R   |   4 delete_n   000982 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 246.
Hexadecimal [24-Bits]

Symbol Table

  4 delete_u   000A24 R   |   4 digital_   0026C5 R   |   4 digital_   0026FC R
  4 div24      000302 R   |   4 divu24_8   0002E4 R   |   4 do_loop    002D9C R
  4 do_progr   00077A R   |   4 dup24      00016A R   |   5 dvar_bgn   000030 GR
  5 dvar_end   000032 GR  |   4 edit       001FBE R   |   4 enable_i   002D06 R
  4 eql_tst    00101C R   |   4 equal      001345 R   |   4 erase      00279D R
  4 erase_ex   0007AB R   |   4 erase_fl   0007A1 R   |   4 err_bad_   00158A R
  4 err_buf_   001600 R   |   4 err_cmd_   00154E R   |   4 err_div0   001513 R
  4 err_dupl   001568 R   |   4 err_math   0014FA R   |   4 err_mem_   0014DF R
  4 err_msg    0014BB R   |   4 err_no_a   001596 R   |   4 err_no_d   0015C9 R
  4 err_no_f   0015ED R   |   4 err_no_l   001522 R   |   4 err_no_p   0015D9 R
  4 err_not_   001579 R   |   4 err_over   00160D R   |   4 err_read   001617 R
  4 err_run_   001538 R   |   4 err_synt   0014EC R   |   4 escaped    000D88 GR
  4 expect     001980 R   |   4 expressi   001AD6 R   |   4 factor     0019DE R
  5 farptr     000018 R   |   4 fcpu       002B41 R   |   4 fetchc     000627 R
  4 fill_wri   002815 R   |   4 final_te   000BC0 R   |   4 first_li   001F68 R
  5 flags      000022 GR  |   4 for        0022AE R   |   4 free       001C6D R
  5 free_eep   000024 R   |   7 free_ram   000090 R   |   4 func_arg   00198D R
  4 func_cha   00296B R   |   4 func_eef   001D6E R   |   4 ge         001347 R
  4 get_addr   0017F2 R   |   4 get_arra   0019AE R   |   4 get_char   00180C R
  4 get_esca   000942 R   |   4 get_int2   0017FC R   |   4 get_targ   0023DB R
  4 get_targ   0023E9 R   |   4 get_tick   002ACB R   |   4 get_toke   000EE2 GR
  4 get_valu   001CF1 R   |   4 getc       00091B GR  |   4 gosub      0024F9 R
  4 gosub_1    002504 R   |   4 gosub_2    00250A R   |   4 goto       0024DF R
  4 goto_1     0024E9 R   |   4 gpio       0029D2 R   |   4 gt         001343 R
  4 gt_tst     001027 R   |   4 hex_base   001C63 R   |   4 hex_dump   000667 R
  4 if         002291 R   |   5 in         000001 GR  |   5 in.saved   000002 GR
  5 in.w       000000 GR  |   4 incr_far   00087D R   |   4 input_ex   002169 R
  4 input_lo   0020D3 R   |   4 input_va   0020CF R   |   4 insert_c   0009E1 R
  4 insert_l   000CC9 R   |   4 insert_l   000D38 R   |   4 interp_l   001736 R
  4 interpre   001711 R   |   4 invalid    00057C R   |   4 invalid_   0005FD R
  4 is_alnum   000E36 GR  |   4 is_alpha   000E1C GR  |   4 is_data_   002E38 R
  4 is_digit   000E2D GR  |   4 is_symbo   000E3F R   |   4 itoa       00184F GR
  4 itoa_loo   001871 R   |   4 jp_to_ta   0024EC R   |   4 key        0029C1 R
  4 kword_di   00344D GR  |   4 kword_en   003095 R   |   4 le         00134C R
  4 ledoff     000432 R   |   4 ledon      00042D R   |   4 ledtoggl   000437 R
  4 left_par   000440 R   |   4 let        001CAE GR  |   4 let_arra   001CBC R
  4 let_dvar   00176F R   |   4 let_eval   001CC4 R   |   4 let_var    001CC1 R
  4 lines_sk   001F6B R   |   4 list       001F19 R   |   4 list_con   001D02 R
  4 list_exi   001FAD R   |   4 list_loo   001F8B R   |   4 log2       002D49 R
  4 look_tar   00240C R   |   4 loop_bac   0023BE R   |   5 loop_dep   00001F R
  4 loop_don   0023D3 R   |   4 lshift     002AE9 R   |   4 lt         00134A R
  4 lt_tst     001050 R   |   4 mem_peek   000599 R   |   4 mod24      00039C R
  4 move       0013B2 GR  |   4 move_dow   0013D1 R   |   4 move_era   000709 R
  4 move_exi   0013F2 R   |   4 move_lef   0009B9 R   |   4 move_loo   0013D6 R
  4 move_prg   000749 R   |   4 move_rig   0009C7 R   |   4 move_up    0013C3 R
  4 mul24      000274 R   |   4 mul_char   001334 R   |   4 mulu24_8   000235 R
  4 nbr_tst    000F15 R   |   4 ne         00134F R   |   4 neg24      0001FE R
  4 neg_acc2   000218 R   |   4 neg_ax     000210 R   |   4 new        002793 R
  4 next       002366 R   |   4 next_lin   001719 R   |   4 next_tok   0017CA GR
  4 no_match   001955 R   |   4 number     00062D R   |   4 other      001079 R
  4 overwrit   000BEC R   |   2 pad        0016E0 GR  |   4 pad_ref    002FB4 R
  4 parse_bi   000DE1 R   |   4 parse_in   000D90 R   |   4 parse_ke   000E62 R
  4 parse_qu   000D3B R   |   4 parse_sy   000E4A R   |   4 pause      002A59 R
  4 pause02    002A6C R   |   4 peek       002270 R   |   4 peek_byt   0005C7 R
  4 pin_mode   002B50 R   |   4 plus_tst   000FF0 R   |   4 poke       00224F R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 247.
Hexadecimal [24-Bits]

Symbol Table

  4 power_ad   002639 R   |   4 prcnt_ts   001011 R   |   4 print      002026 R
  4 print_fa   00060C R   |   4 print_he   000C23 GR  |   4 print_re   00048C R
  4 print_st   00058C R   |   4 print_to   001837 R   |   4 prog_siz   001E88 R
  4 program_   001E90 R   |   4 program_   000723 R   |   4 program_   000749 R
  4 prt_acc2   001829 R   |   4 prt_basi   002002 R   |   4 prt_i16    001812 R
  4 prt_loop   00202A R   |   4 prt_peek   00040F GR  |   4 prt_reg1   00046D R
  4 prt_reg8   00044B R   |   4 prt_regs   0003A5 GR  |   5 ptr16      000019 GR
  5 ptr8       00001A R   |   4 putc       00090B GR  |   4 puts       000968 GR
  4 qgetc      000914 GR  |   4 qkey       0029C5 GR  |   4 qmark_ts   000FA7 R
  4 qsign      00280E R   |   4 random     002BDF R   |   4 read       002EB0 R
  4 read01     002EB5 R   |   4 read_int   0035C4 R   |   4 readln     000A6D GR
  4 readln_l   000A7C R   |   4 readln_q   000C09 R   |   4 refresh_   002D44 R
  4 regs_sta   0003E8 R   |   4 relation   001B0E R   |   4 relop_st   001337 R
  4 remark     00216E GR  |   4 repl       000545 R   |   4 repl_exi   00056D R
  4 reset_co   002028 R   |   4 rest_con   0020BF R   |   4 restore    002E46 R
  4 return     00251D R   |   4 right_al   001140 GR  |   4 row_alig   000862 R
  4 row_eras   0006DC R   |   4 row_eras   000709 R   |   4 row_loop   00064A R
  4 rparnt_t   000F65 R   |   4 rshift     002B15 R   |   7 rsign      00008C R
  7 rsize      00008E R   |   4 rt_msg     001633 R   |   4 run        00253A R
  4 run_app    000135 R   |   4 run_it     00256C R   |   4 run_it_0   00256E R
  5 rx1_head   00002E R   |   5 rx1_queu   000026 R   |   5 rx1_tail   00002F R
  4 save_app   002839 R   |   4 save_con   0020AF R   |   4 scan_blo   00088B R
  4 search_d   001935 GR  |   4 search_e   00197D R   |   4 search_l   000C45 GR
  4 search_l   000C54 R   |   4 search_n   001D97 R   |   4 search_n   001939 R
  5 seedx      000014 R   |   5 seedy      000016 R   |   4 select_p   002BAF R
  4 send_esc   000990 R   |   4 send_par   00099B R   |   4 set_data   002E7C R
  4 set_time   002CE4 R   |   4 sharp_ts   000F86 R   |   4 show_row   000638 R
  4 single_c   00132D R   |   4 skip       000ECF R   |   4 skip_str   0017E3 R
  4 slash_ts   001006 R   |   4 sleep      002A4E R   |   4 software   001405 R
  4 spaces     0009D5 GR  |   4 spi_clea   002F49 R   |   4 spi_disa   002F31 R
  4 spi_enab   002EFE R   |   4 spi_rcv_   002F6B R   |   4 spi_read   002F96 R
  4 spi_sele   002F9D R   |   4 spi_send   002F55 R   |   4 spi_writ   002F76 R
  2 stack_fu   00179C GR  |   2 stack_un   001828 R   |   4 star_tst   000FFB R
  4 step       002324 R   |   4 stop       002747 R   |   4 store_lo   002353 R
  4 str_matc   001962 R   |   4 str_tst    000F05 R   |   4 strcmp     001391 R
  4 strcpy     0013A2 GR  |   4 strlen     001386 GR  |   4 sub24      000196 R
  4 symb_loo   000E4B R   |   4 syntax_e   001666 GR  |   4 system_i   00144B R
  5 tab_widt   000023 GR  |   4 tb_error   001668 GR  |   4 term       001A93 R
  4 term01     001A9B R   |   4 term_exi   001AD3 R   |   4 test       003455 R
  4 test_p     000584 R   |   2 tib        001690 GR  |   4 tick_tst   000FBF R
  5 ticks      00000F R   |   4 timeout    002CFB R   |   5 timer      000012 GR
  4 timer2_i   0000A1 R   |   4 timer4_i   0000AE R   |   4 tk_id      001656 R
  4 to         0022DE R   |   4 to_eepro   000772 R   |   4 to_flash   000777 R
  4 to_hex_c   000C3A GR  |   4 to_upper   0018A8 GR  |   4 token_ch   00108F R
  4 token_ex   001093 R   |   4 tone       0025DE R   |   4 try_next   002E89 R
  5 txtbgn     00001B GR  |   5 txtend     00001D GR  |   4 uart1_ge   00091B GR
  4 uart1_in   0008C6 R   |   4 uart1_pu   00090B GR  |   4 uart1_qg   000914 GR
  4 uart1_se   0008D6 R   |   4 ubound     001CA3 R   |   4 uflash     002A02 R
  4 unlock_e   0006A6 R   |   4 unlock_f   0006C1 R   |   4 until      002DAF R
  4 user_int   000057 R   |   4 usr        002A1F R   |   4 var_name   001198 GR
  5 vars       000034 GR  |   4 wait       002174 R   |   4 warm_ini   00147C R
  4 warm_sta   0016F2 R   |   4 words      002C7A R   |   4 words_co   002CCE R
  4 write      002928 R   |   4 write_bl   000827 GR  |   4 write_bu   000763 R
  4 write_by   0007AD R   |   4 write_ee   0007E9 R   |   4 write_ex   000822 R
  4 write_fl   0007D3 R   |   4 write_nb   00084C R   |   4 xalloc     002FC7 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 248.
Hexadecimal [24-Bits]

Symbol Table

  4 xdrop      002FFD R   |   4 xpick      00307B R   |   4 xpop       002FBD R
  4 xpush      002FB9 R   |   4 xput       003048 R   |   4 xstack_b   00302A R
  2 xstack_f   001760 GR  |   2 xstack_u   00179C GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 249.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3604   flags    0
   5 DATA       size     82   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

