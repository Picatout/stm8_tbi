ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           00003C    37         XSTACK_SIZE=CELL_SIZE*20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                                     45 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                                     58 ;--------------------------------------
                                     59 ;   constantes related to Arduino 
                                     60 ;   API mapping 
                                     61 ;-------------------------------------
                           000000    62         INP=0
                           000001    63         OUTP=1 
                                     64 
                                     65 ;--------------------------------------
                                     66 ;       token attribute
                                     67 ;--------------------------------------
                                     68         ; bits 4:5 identify token group 
                                     69         ; 0x0n -> miscelinous 
                                     70         ; 0x1n -> +|- operators 
                                     71         ; 0x2n -> *|/|% operators
                                     72         ; 0x3n -> relational operators 
                           000080    73         TK_CMD=128      ; BASIC command   
                           000081    74         TK_IFUNC=129    ; BASIC integer function
                           000082    75         TK_CFUNC=130    ; BASIC character function
                           000083    76         TK_CONST=131    ; BASIC constant 
                           000084    77         TK_INTGR=132    ; 16 bits integer 
                           000085    78         TK_VAR=133
                           000086    79         TK_FLOAT=134    ; float32 
                           000087    80         TK_NOT=135
                           000088    81         TK_AND=136      ;
                           000089    82         TK_OR=137       ;
                           00008A    83         TK_XOR=138      ; 
                           000000    84         TK_NONE=0       ; not a token 
                           000002    85         TK_QSTR=2       ; quoted string  
                           000003    86         TK_LABEL=3      ; used for defined, constants, variables
                           000004    87         TK_CHAR=4       ; ASCII character 
                           000005    88         TK_ARRAY=5     ; array variable '@' 
                           000006    89         TK_LPAREN=6     ; left parenthesis '('
                           000007    90         TK_RPAREN=7     ; right parenthesis ')'
                           000008    91         TK_COMMA=8     ; item separator ',' 
                           000009    92         TK_SHARP=9     ; print colon width '#' 
                           00000A    93         TK_COLON=0xa      ; command separator ':' 
                                     94         
                           000010    95         TK_PLUS=0x10    ; addition operator '+'
                           000011    96         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    97         TK_MULT=0x20    ; multiplication operator '*'
                           000021    98         TK_DIV=0x21     ; division operator '/'
                           000022    99         TK_MOD=0x22     ; modulo operator '%'
                                    100 
                                    101         ; don't change these token values 
                                    102         ; values chosen to be used as a mask.
                                    103         ; bit 7   1 for dictionary words else 0 
                                    104         ; bits 6  always 0 
                                    105         ; bits 5:4 identify group 
                                    106         ; bits 3:0 token identifier inside group  
                           000031   107         TK_GT=0x31      ; relation operator '>'
                           000032   108         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   109         TK_GE=0x33      ; relation operator '>='
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000034   110         TK_LT=0x34      ; relation operator '<'
                           000036   111         TK_LE=0x36      ; relation operator '<='
                           000035   112         TK_NE=0x35      ; relation operator '<>' not equal 
                                    113         ; token groups 
                           000030   114         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   115         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   116         TK_GRP_ADD=0x10  ; additive operators
                           000020   117         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   118         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   119         CMD_END=2 
                                    120 
                                    121 ;--------------------------------------
                                    122 ;   error codes 
                                    123 ;--------------------------------------
                           000000   124     ERR_NONE=0
                           000001   125     ERR_MEM_FULL=1 
                           000002   126     ERR_SYNTAX=2
                           000003   127     ERR_MATH_OVF=3
                           000004   128     ERR_DIV0=4 
                           000005   129     ERR_NO_LINE=5
                           000006   130     ERR_RUN_ONLY=6
                           000007   131     ERR_CMD_ONLY=7
                           000008   132     ERR_DUPLICATE=8
                           000009   133     ERR_NOT_FILE=9
                           00000A   134     ERR_BAD_VALUE=10
                           00000B   135     ERR_NO_ACCESS=11
                           00000C   136     ERR_NO_DATA=12 
                           00000D   137     ERR_NO_PROG=13
                           00000E   138     ERR_NO_FSPACE=14
                           00000F   139     ERR_BUF_FULL=15
                           000010   140     ERR_OVERFLOW=16 
                                    141 
                                    142 ;--------------------------------------
                                    143 ;   assembler flags 
                                    144 ;-------------------------------------
                                    145 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    146 
                                    147      .macro _usec_dly n 
                                    148     ldw x,#(16*n-2)/4
                                    149     decw x
                                    150     nop 
                                    151     jrne .-4
                                    152     .endm 
                                    153     
                                    154     ; load X register with 
                                    155     ; entry point of dictionary
                                    156     ; before calling 'search_dict'
                                    157     .macro _ldx_dict dict_name
                                    158     ldw x,#dict_name+2
                                    159     .endm 
                                    160 
                                    161     ; reset BASIC pointer
                                    162     ; to beginning of last token
                                    163     ; extracted except if it was end of line 
                                    164     .macro _unget_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165      mov in,in.saved  
                                    166     .endm
                                    167 
                                    168 
                                    169     ; extract code address for 
                                    170     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    171     .macro _get_code_addr
                                    172         ldw x,(x)
                                    173         inc in 
                                    174         inc in 
                                    175     .endm 
                                    176 
                                    177 
                                    178 
                                    179 ;---------------------------------------
                                    180 ;    xtack manipulation macros 
                                    181 ;    Y is used as xstack pointer  
                                    182 ;----------------------------------------
                                    183     ; pop in A:X from XSTACK 
                                    184     .macro _xpop 
                                    185     ld a,(y)
                                    186     ldw x,y 
                                    187     ldw x,(1,x)
                                    188     addw y,#CELL_SIZE 
                                    189     .endm 
                                    190 
                                    191     ; push A:X  to XSTACK 
                                    192     .macro _xpush 
                                    193     subw y,#CELL_SIZE
                                    194     ld (y),a 
                                    195     ldw (1,y),x 
                                    196     .endm 
                                    197 
                                    198     ; drop from XSTACK 
                                    199     .macro _xdrop 
                                    200     addw y,#CELL_SIZE 
                                    201     .endm 
                                    202 
                                    203     ; @T fetch top xstack 
                                    204     .macro _at_top
                                    205     ld a,(y)
                                    206     ldw x,y 
                                    207     ldw x,(1,x)
                                    208     .endm 
                                    209 
                                    210     ; @N  fetch next on xstack 
                                    211     .macro _at_next 
                                    212     ld a,(3,y)
                                    213     ldw x,y 
                                    214     ldw x,(4,x)
                                    215     .endm 
                                    216 
                                    217     ; !T put on top of xtack 
                                    218     .macro _store_top 
                                    219     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220     ldw (1,y),x     
                                    221     .endm 
                                    222 
                                    223     ; !N put next on xstack 
                                    224     .macro _store_next 
                                    225     ld (3,y),a 
                                    226     ldw (4,y),x 
                                    227     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTH_IDX=PRTG_IDX+2
                           000076    84     PRTI_IDX=PRTH_IDX+2
                           000078    85     QKEY_IDX=PRTI_IDX+2
                           00007A    86     READ_IDX=QKEY_IDX+2
                           00007C    87     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007E    88 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           000080    89     REST_IDX=REM_IDX+2 ; RESTORE
                           000082    90     RET_IDX=REST_IDX+2  ; RETURN 
                           000084    91     RND_IDX=RET_IDX+2 ; RANDOM 
                           000086    92     RSHIFT_IDX=RND_IDX+2
                           000088    93     RUN_IDX=RSHIFT_IDX+2
                           00008A    94     FREE_IDX=RUN_IDX+2
                           00008C    95     SLEEP_IDX=FREE_IDX+2
                           00008E    96     SPIRD_IDX=SLEEP_IDX+2
                           000090    97     SPIEN_IDX=SPIRD_IDX+2
                           000092    98     SPISEL_IDX=SPIEN_IDX+2
                           000094    99     SPIWR_IDX=SPISEL_IDX+2
                           000096   100     STEP_IDX=SPIWR_IDX+2
                           000098   101     STOP_IDX=STEP_IDX+2
                           00009A   102     TICKS_IDX=STOP_IDX+2
                           00009C   103     TIMER_IDX=TICKS_IDX+2
                           00009E   104     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000A0   105     TO_IDX=TMROUT_IDX+2
                           0000A2   106     TONE_IDX=TO_IDX+2
                           0000A4   107     UBOUND_IDX=TONE_IDX+2
                           0000A6   108     UFLASH_IDX=UBOUND_IDX+2
                           0000A8   109     UNTIL_IDX=UFLASH_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           0000AA   110     USR_IDX=UNTIL_IDX+2
                           0000AC   111     WAIT_IDX=USR_IDX+2
                           0000AE   112     WORDS_IDX=WAIT_IDX+2
                           0000B0   113     WRITE_IDX=WORDS_IDX+2
                           0000B2   114     SIZE_IDX=WRITE_IDX+2 
                           0000B4   115     ON_IDX=SIZE_IDX+2 
                           0000B6   116     GET_IDX=ON_IDX+2
                           0000B8   117     CONST_IDX=GET_IDX+2
                           0000BA   118     EEFREE_IDX=CONST_IDX+2
                                    119      
                                    120     ; keep these 3 at end
                                    121     ; these have no entry in code_addr 
                           0000F8   122     NOT_IDX=248
                           0000FA   123     AND_IDX=250 
                           0000FC   124     OR_IDX=252 
                           0000FE   125     XOR_IDX=254    
                                    126 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     34 	.include "dbg_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;----------------------------------
                                     21 ;  macros used for debugging
                                     22 ;---------------------------------
                                     23 ;-------------------------------
                                     24 ;  macros used to help debugging
                                     25 ;-------------------------------
                                     26     
                           000009    27     DBG_CC=9
                           000008    28     DBG_A=8 
                           000006    29     DBG_X=6 
                           000004    30     DBG_Y=4 
                                     31     .macro _dbg_save_regs 
                                     32     .if DEBUG 
                                     33     push cc ; (9,sp)
                                     34     push a   ; (8,sp)
                                     35     pushw x  ; (6,sp)
                                     36     pushw y  ; (4,sp)
                                     37     ; save acc24 
                                     38     ld a,acc24 
                                     39     ldw x,acc16 
                                     40     pushw x 
                                     41     push a 
                                     42     .endif 
                                     43     .endm 
                                     44 
                                     45     .macro _dbg_restore_regs 
                                     46     ; restore acc24 
                                     47     .if DEBUG 
                                     48     pop a 
                                     49     popw x 
                                     50     ld acc24,a 
                                     51     ldw acc16,x 
                                     52     popw y 
                                     53     popw x 
                                     54     pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                     55     pop cc 
                                     56     .endif 
                                     57     .endm 
                                     58 
                                     59     .macro _dbg_getc
                                     60     .if DEBUG  
                                     61     _dbg_save_regs 
                                     62     call getc
                                     63     ld (DBG_A,sp),a 
                                     64     _dbg_restore_regs
                                     65     .endif   
                                     66     .endm 
                                     67 
                                     68     .macro _dbg_putc
                                     69     .if DEBUG  
                                     70     push cc 
                                     71     call putc 
                                     72     pop cc 
                                     73     .endif 
                                     74     .endm 
                                     75 
                                     76     .macro _dbg_puts
                                     77     .if DEBUG  
                                     78     _dbg_save_regs
                                     79     call puts 
                                     80     _dbg_restore_regs
                                     81     .endif 
                                     82     .endm 
                                     83 
                                     84     .macro _dbg_prti24 
                                     85     .if DEBUG 
                                     86     _dbg_save_regs
                                     87     call prti24 
                                     88     _dbg_restore_regs
                                     89     .endif 
                                     90     .endm 
                                     91 
                                     92     .macro _dbg_prt_regs
                                     93     .if DEBUG 
                                     94     call print_registers
                                     95     .endif  
                                     96     .endm 
                                     97 
                                     98     .macro _dbg_peek addr 
                                     99     .if DEBUG 
                                    100     _dbg_save_regs 
                                    101     ldw x,addr 
                                    102     call peek     
                                    103     _dbg_restore_regs
                                    104     .endif 
                                    105     .endm 
                                    106 
                                    107     .macro _dbg_parser_init 
                                    108     .if DEBUG 
                                    109     _dbg_save_regs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    110     call parser_init 
                                    111     _dbg_restore_regs
                                    112     .endif 
                                    113     .endm
                                    114 
                                    115     .macro _dbg_readln
                                    116     .if DEBUG 
                                    117     _dbg_save_regs
                                    118     call readln
                                    119     _dbg_restore_regs
                                    120     .endif 
                                    121     .endm
                                    122 
                                    123     .macro _dbg_number
                                    124     .if DEBUG 
                                    125     _dbg_save_regs
                                    126     call number 
                                    127     _dbg_restore_regs
                                    128     .endif 
                                    129     .endm  
                                    130 
                                    131     .macro _dbg_nextword
                                    132     .if DEBUG 
                                    133     _dbg_save_regs
                                    134     call get_token   
                                    135     _dbg_restore_regs
                                    136     .endif 
                                    137     .endm  
                                    138 
                                    139     .macro _dbg_dots 
                                    140     .if DEBUG 
                                    141     _dbg_save_regs
                                    142     call dots 
                                    143     _dbg_restore_regs
                                    144     .endif 
                                    145     .endm 
                                    146 
                                    147     .macro _dbg_trap
                                    148     bset flags,#FTRAP 
                                    149     trap 
                                    150     .endm 
                                    151 
                                    152     .macro _dbg_mark n  
                                    153     .if DEBUG 
                                    154     push cc
                                    155     push a 
                                    156     ld a,#n 
                                    157     call putc
                                    158     btjf UART1_SR,#UART_SR_TC,. 
                                    159     pop a 
                                    160     pop cc 
                                    161     .endif 
                                    162     .endm 
                                    163     
                                    164     .macro _dbg_prt_var var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                    165     .if DEBUG 
                                    166     _dbg_save_regs 
                                    167     ldw x,var 
                                    168     ldw acc16,x 
                                    169     clr acc24 
                                    170     clrw x 
                                    171     ld a,#16+128  
                                    172     call prti24
                                    173     ld a,#CR 
                                    174     call putc  
                                    175     _dbg_restore_regs
                                    176     .endif  
                                    177     .endm 
                                    178 
                                    179     .macro _dbg_show
                                    180     .if DEBUG  
                                    181     _dbg_save_regs 
                                    182     call show 
                                    183     _dbg_restore_regs
                                    184     .endif 
                                    185     .endm 
                                    186 
                                    187 
                                    188 
                                    189 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                     35   
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001668                         41     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016B8                         43 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         44 pad:: .ds PAD_SIZE             ; working buffer
      001738                         45 xstack_full:: .ds XSTACK_SIZE   ; expression stack 
      001774                         46 xstack_unf:: ; xstack underflow 
      001774                         47 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         48 stack_unf: ; stack underflow ; control_stack bottom 
                                     49 
                                     50 ;;--------------------------------------
                                     51     .area HOME 
                                     52 ;; interrupt vector table at 0x8000
                                     53 ;;--------------------------------------
                                     54 
      000000 82 00 00 C3             55     int cold_start			; RESET vector 
                           000001    56 .if DEBUG
      000004 82 00 00 12             57 	int TrapHandler 		;TRAP  software interrupt
                           000000    58 .else
                                     59 	int NonHandledInterrupt ;TRAP  software interrupt
                                     60 .endif
      000008 82 00 00 00             61 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             62 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             63 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             64 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             65 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             66 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             67 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 44             68 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             69 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             70 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             71 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             72 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             73 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             74 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             75 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             76 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             77 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             78 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 9E             79 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             80 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             81 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             82 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             83 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 21             84 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             85 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             86 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             87 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             88 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             89 	int NonHandledInterrupt ;int28  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      00007C 82 00 00 00             90 	int NonHandledInterrupt ;int29  not used
                                     91 
                                     92 ;---------------------------------------
                                     93     .area CODE
                                     94 ;---------------------------------------
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; non handled interrupt 
                                     98 ; reset MCU
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        100 NonHandledInterrupt:
      000000                        101 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ; auto wakeup from halt
                                    105 ; at iret, program continue 
                                    106 ; after hatl instruction
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        108 AWUHandler:
      000004 72 19 50 F0      [ 1]  109 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  110 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  111 	clr AWU_TBR 
      000011 80               [11]  112 	iret
                                    113 
                                    114 ;------------------------------------
                                    115 ; software interrupt handler  
                                    116 ;------------------------------------
                           000001   117 .if DEBUG 
      000012                        118 TrapHandler:
      000012 72 12 00 22      [ 1]  119 	bset flags,#FTRAP 
      000016 CD 04 91         [ 4]  120 	call print_registers
      000019 CD 05 3C         [ 4]  121 	call cmd_itf
      00001C 72 13 00 22      [ 1]  122 	bres flags,#FTRAP 	
      000020 80               [11]  123 	iret
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ; ticks range {0..2^23-1}
                                    131 ;--------------------------------
      000021                        132 Timer4UpdateHandler:
      000021 72 5F 53 42      [ 1]  133 	clr TIM4_SR 
      000025 C6 00 0F         [ 1]  134 	ld a,ticks 
      000028 CE 00 10         [ 2]  135 	ldw x,ticks+1
      00002B 1C 00 01         [ 2]  136 	addw x,#1 
      00002E A9 00            [ 1]  137 	adc a,#0 
      000030 2A 02            [ 1]  138 	jrpl 0$
                                    139 ; reset to 0 when negatif 
      000032 4F               [ 1]  140 	clr a 
      000033 5F               [ 1]  141 	clrw x 
      000034 C7 00 0F         [ 1]  142 0$:	ld ticks,a 
      000037 CF 00 10         [ 2]  143 	ldw ticks+1,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00003A CE 00 12         [ 2]  144 	ldw x,timer
      00003D 27 04            [ 1]  145 	jreq 1$
      00003F 5A               [ 2]  146 	decw x 
      000040 CF 00 12         [ 2]  147 	ldw timer,x 
      000043                        148 1$:	
      000043 80               [11]  149 	iret 
                                    150 
                                    151 ;------------------------------------
                                    152 ; Triggered by pressing USER UserButton 
                                    153 ; on NUCLEO card.
                                    154 ; This is used to abort a progam lock 
                                    155 ; in infinite loop. 
                                    156 ;------------------------------------
      000044                        157 UserButtonHandler:
                                    158 ; wait button release
      000044 5F               [ 1]  159 	clrw x
      000045 5A               [ 2]  160 1$: decw x 
      000046 26 FD            [ 1]  161 	jrne 1$
      000048 72 09 50 15 F8   [ 2]  162 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    163 ; if MCU suspended by SLEEP resume program
      00004D 72 07 00 22 05   [ 2]  164     btjf flags,#FSLEEP,2$
      000052 72 17 00 22      [ 1]  165 	bres flags,#FSLEEP 
      000056 80               [11]  166 	iret
      000057                        167 2$:	
      000057                        168 user_interrupted:
      000057 72 00 00 22 02   [ 2]  169     btjt flags,#FRUN,4$
      00005C 20 0A            [ 2]  170 	jra UBTN_Handler_exit 
      00005E                        171 4$:	; program interrupted by user 
      00005E 72 11 00 22      [ 1]  172 	bres flags,#FRUN 
      000062 AE 00 70         [ 2]  173 	ldw x,#USER_ABORT
      000065 CD 09 6D         [ 4]  174 	call puts 
      000068                        175 UBTN_Handler_exit:
      000068 AE 17 FF         [ 2]  176     ldw x,#STACK_EMPTY 
      00006B 94               [ 1]  177     ldw sp,x
      00006C 9A               [ 1]  178 	rim 
      00006D CC 16 D3         [ 2]  179 5$:	jp warm_start
                                    180 
      000070 0A 50 72 6F 67 72 61   181 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    182 
                                    183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    184 ;    peripherals initialization
                                    185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    186 
                                    187 ;----------------------------------------
                                    188 ; inialize MCU clock 
                                    189 ; input:
                                    190 ;   A 		source  HSI | 1 HSE 
                                    191 ;   XL      CLK_CKDIVR , clock divisor 
                                    192 ; output:
                                    193 ;   none 
                                    194 ;----------------------------------------
      00008B                        195 clock_init:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00008B C1 50 C3         [ 1]  196 	cp a,CLK_CMSR 
      00008E 27 0C            [ 1]  197 	jreq 2$ ; no switching required 
                                    198 ; select clock source 
      000090 72 12 50 C5      [ 1]  199 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000094 C7 50 C4         [ 1]  200 	ld CLK_SWR,a
      000097 C1 50 C3         [ 1]  201 1$:	cp a,CLK_CMSR
      00009A 26 FB            [ 1]  202 	jrne 1$
      00009C                        203 2$: 	
                                    204 ; HSI and cpu clock divisor 
      00009C 9F               [ 1]  205 	ld a,xl 
      00009D C7 50 C6         [ 1]  206 	ld CLK_CKDIVR,a  
      0000A0 81               [ 4]  207 	ret
                                    208 
                                    209 ;----------------------------------
                                    210 ; TIMER2 used as audio tone output 
                                    211 ; on port D:5. CN9-6
                                    212 ; channel 1 configured as PWM mode 1 
                                    213 ;-----------------------------------  
                                    214 
      0000A1                        215 timer2_init:
      0000A1 72 1A 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000A5 35 60 53 05      [ 1]  217  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000A9 35 08 53 0C      [ 1]  218 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000AD 81               [ 4]  219 	ret 
                                    220 
                                    221 ;---------------------------------
                                    222 ; TIM4 is configured to generate an 
                                    223 ; interrupt every millisecond 
                                    224 ;----------------------------------
      0000AE                        225 timer4_init:
      0000AE 72 18 50 C7      [ 1]  226 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000B2 35 07 53 45      [ 1]  227 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B6 35 7D 53 46      [ 1]  228 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BA 35 05 53 40      [ 1]  229 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BE 72 10 53 41      [ 1]  230 	bset TIM4_IER,#TIM4_IER_UIE
      0000C2 81               [ 4]  231 	ret
                                    232 
                                    233 ;-------------------------------------
                                    234 ;  initialization entry point 
                                    235 ;-------------------------------------
      0000C3                        236 cold_start:
                                    237 ;set stack 
      0000C3 AE 17 FF         [ 2]  238 	ldw x,#STACK_EMPTY
      0000C6 94               [ 1]  239 	ldw sp,x
                                    240 ; clear all ram 
      0000C7 7F               [ 1]  241 0$: clr (x)
      0000C8 5A               [ 2]  242 	decw x 
      0000C9 26 FC            [ 1]  243 	jrne 0$
                                    244 ; activate pull up on all inputs 
      0000CB A6 FF            [ 1]  245 	ld a,#255 
      0000CD C7 50 03         [ 1]  246 	ld PA_CR1,a 
      0000D0 C7 50 08         [ 1]  247 	ld PB_CR1,a 
      0000D3 C7 50 0D         [ 1]  248 	ld PC_CR1,a 
      0000D6 C7 50 12         [ 1]  249 	ld PD_CR1,a 
      0000D9 C7 50 17         [ 1]  250 	ld PE_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      0000DC C7 50 1C         [ 1]  251 	ld PF_CR1,a 
      0000DF C7 50 21         [ 1]  252 	ld PG_CR1,a 
      0000E2 C7 50 2B         [ 1]  253 	ld PI_CR1,a
                                    254 ; set LD2 pin as output 
      0000E5 72 1A 50 0D      [ 1]  255     bset PC_CR1,#LED2_BIT
      0000E9 72 1A 50 0E      [ 1]  256     bset PC_CR2,#LED2_BIT
      0000ED 72 1A 50 0C      [ 1]  257     bset PC_DDR,#LED2_BIT
      0000F1 72 1B 50 0A      [ 1]  258 	bres PC_ODR,#LED2_BIT 
                                    259 ; disable schmitt triggers on Arduino CN4 analog inputs
      0000F5 55 00 3F 54 07   [ 1]  260 	mov ADC_TDRL,0x3f
                                    261 ; disable peripherals clocks
                                    262 ;	clr CLK_PCKENR1 
                                    263 ;	clr CLK_PCKENR2
      0000FA 72 5F 50 F2      [ 1]  264 	clr AWU_TBR 
      0000FE 72 14 50 CA      [ 1]  265 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    266 ; select internal clock no divisor: 16 Mhz 	
      000102 A6 E1            [ 1]  267 	ld a,#CLK_SWR_HSI 
      000104 5F               [ 1]  268 	clrw x  
      000105 CD 00 8B         [ 4]  269     call clock_init 
      000108 CD 00 AE         [ 4]  270 	call timer4_init
      00010B CD 00 A1         [ 4]  271 	call timer2_init
                                    272 ; UART1 at 115200 BAUD
      00010E CD 08 CB         [ 4]  273 	call uart1_init
                                    274 ; activate PE_4 (user button interrupt)
      000111 72 18 50 18      [ 1]  275     bset PE_CR2,#USR_BTN_BIT 
                                    276 ; display system information
      000115 9A               [ 1]  277 	rim ; enable interrupts 
      000116 72 5C 00 17      [ 1]  278 	inc seedy+1 
      00011A 72 5C 00 15      [ 1]  279 	inc seedx+1 
      00011E CD 1C F8         [ 4]  280 	call func_eefree 
      000121 CD 1C 2F         [ 4]  281 	call ubound 
      000124 CD 14 A3         [ 4]  282 	call clear_basic
      000127 CD 25 5A         [ 4]  283 	call beep_1khz  
      00012A CD 14 50         [ 4]  284 	call system_information
      00012D                        285 2$:	
                                    286 ; check for application in flash memory 
      00012D CD 27 95         [ 4]  287 	call qsign 
      000130 27 03            [ 1]  288 	jreq run_app
      000132 CC 16 D3         [ 2]  289 	jp warm_start 
      000135                        290 run_app:
                                    291 ; run application in FLASH|EEPROM 
      000135 90 CE 17 73      [ 2]  292 	ldw y,XSTACK_EMPTY
      000139 CD 14 81         [ 4]  293 	call warm_init
      00013C AE 34 84         [ 2]  294 	ldw x,#app 
      00013F CF 00 1B         [ 2]  295 	ldw txtbgn,x
      000142 72 BB 34 82      [ 2]  296 	addw x,app_size 
      000146 CF 00 1D         [ 2]  297 	ldw txtend,x 
      000149 AE 01 57         [ 2]  298 	ldw x,#AUTO_RUN 
      00014C CD 09 6D         [ 4]  299 	call puts 
      00014F CD 1E 20         [ 4]  300 	call program_info 
      000152 CC 24 FE         [ 2]  301 	jp run_it_02  
      000155 20 FE            [ 2]  302     jra .  
                                    303 
      000157 20 61 75 74 6F 20 72   304 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic 
                                     21 ;;  format in registers: A:X 
                                     22 ;;      A  bits 23..16 
                                     23 ;;      X  bits 15..0 
                                     24 ;;  acc24 variable used for 
                                     25 ;;  computation 
                                     26 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     27 
                                     28 
                                     29     .area CODE 
                                     30 
                                     31 ;-------------------------------
                                     32 ; add24 A:X+acc24 
                                     33 ; add 24 bits integers 
                                     34 ;------------------------------
      00016A                         35 add24: ; ( i1 i2 -- i1 + i2 )
      00016A                         36     _xpop 
      00016A 90 F6            [ 1]    1     ld a,(y)
      00016C 93               [ 1]    2     ldw x,y 
      00016D EE 01            [ 2]    3     ldw x,(1,x)
      00016F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000173 89               [ 2]   37     pushw x  
      000174 88               [ 1]   38     push a  
      000175                         39     _at_top  
      000175 90 F6            [ 1]    1     ld a,(y)
      000177 93               [ 1]    2     ldw x,y 
      000178 EE 01            [ 2]    3     ldw x,(1,x)
      00017A 72 FB 02         [ 2]   40     addw x,(2,sp)
      00017D 19 01            [ 1]   41     adc a, (1,sp)
      00017F                         42     _store_top 
      00017F 90 F7            [ 1]    1     ld (y),a 
      000181 90 EF 01         [ 2]    2     ldw (1,y),x     
      000184                         43     _drop 3 
      000184 5B 03            [ 2]    1     addw sp,#3 
      000186 81               [ 4]   44     ret 
                                     45 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                     46 ;-------------------------------
                                     47 ; sub24 A:X-acc24 
                                     48 ; subtract 24 bits integers 
                                     49 ;------------------------------
      000187                         50 sub24: ; (i1 i2 -- i1-i2 ) 
      000187                         51     _xpop 
      000187 90 F6            [ 1]    1     ld a,(y)
      000189 93               [ 1]    2     ldw x,y 
      00018A EE 01            [ 2]    3     ldw x,(1,x)
      00018C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000190 89               [ 2]   52     pushw x 
      000191 88               [ 1]   53     push  a
      000192                         54     _at_top  
      000192 90 F6            [ 1]    1     ld a,(y)
      000194 93               [ 1]    2     ldw x,y 
      000195 EE 01            [ 2]    3     ldw x,(1,x)
      000197 72 F0 02         [ 2]   55     subw x,(2,sp) 
      00019A 12 01            [ 1]   56     sbc a, (1,sp)
      00019C                         57     _store_top  
      00019C 90 F7            [ 1]    1     ld (y),a 
      00019E 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001A1                         58     _drop 3 
      0001A1 5B 03            [ 2]    1     addw sp,#3 
      0001A3 81               [ 4]   59     ret 
                                     60 
                                     61 ;------------------------------
                                     62 ; cp24  i1 i2 -- 0x800000|0|0x010000
                                     63 ;------------------------------
      0001A4                         64 cp24:
      0001A4                         65     _xpop 
      0001A4 90 F6            [ 1]    1     ld a,(y)
      0001A6 93               [ 1]    2     ldw x,y 
      0001A7 EE 01            [ 2]    3     ldw x,(1,x)
      0001A9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001AD C7 00 0C         [ 1]   66     ld acc24,a 
      0001B0 CF 00 0D         [ 2]   67     ldw acc16,x
      0001B3                         68     _at_top 
      0001B3 90 F6            [ 1]    1     ld a,(y)
      0001B5 93               [ 1]    2     ldw x,y 
      0001B6 EE 01            [ 2]    3     ldw x,(1,x)
      0001B8 72 B0 00 0D      [ 2]   69     subw x,acc16
      0001BC C2 00 0C         [ 1]   70     sbc a,acc24
      0001BF 2F 08            [ 1]   71     jrslt 1$
      0001C1 26 0A            [ 1]   72     jrne 2$
      0001C3 5D               [ 2]   73     tnzw x 
      0001C4 26 07            [ 1]   74     jrne 2$
      0001C6 4F               [ 1]   75     clr a 
      0001C7 20 06            [ 2]   76     jra 9$ 
      0001C9                         77 1$: ; i1 < i2 
      0001C9 A6 FF            [ 1]   78     ld a,#255
      0001CB 20 02            [ 2]   79     jra 9$ 
      0001CD                         80 2$: ; i1 > i2 
      0001CD A6 01            [ 1]   81     ld a,#1 
      0001CF 5F               [ 1]   82 9$: clrw x
      0001D0                         83      _store_top 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0001D0 90 F7            [ 1]    1     ld (y),a 
      0001D2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001D5 81               [ 4]   84     ret 
                                     85 
                                     86 ;-------------------------------
                                     87 ; cp24_ax 
                                     88 ; compare acc24 with A:X 
                                     89 ;-------------------------------
      0001D6                         90 cp24_ax:
      0001D6 88               [ 1]   91     push a 
      0001D7 C3 00 0D         [ 2]   92     cpw x,acc16 
      0001DA C2 00 0C         [ 1]   93     sbc a,acc24
      0001DD 84               [ 1]   94     pop a 
      0001DE 81               [ 4]   95     ret 
                                     96 
                                     97 
                                     98 ;-------------------------------
                                     99 ; abs24 
                                    100 ; abolute value of top  
                                    101 ;-------------------------------
      0001DF                        102 abs24: ; ( i -- u )
      0001DF 90 F6            [ 1]  103     ld a,(y)
      0001E1 A1 80            [ 1]  104     cp a,#0x80 
      0001E3 2A 0A            [ 1]  105     jrpl neg24 ; negative integer
      0001E5 81               [ 4]  106     ret  
                                    107 
                                    108 ;----------------------------
                                    109 ;  one's compleement 
                                    110 ;----------------------------
      0001E6                        111 cpl24:  ; i -- ~i 
      0001E6 90 73            [ 1]  112     cpl (y) 
      0001E8 90 63 01         [ 1]  113     cpl (1,y)
      0001EB 90 63 02         [ 1]  114     cpl (2,y)
      0001EE 81               [ 4]  115     ret 
                                    116 
                                    117 ;----------------------------    
                                    118 ; two'2 complement of top  
                                    119 ;---------------------------
      0001EF                        120 neg24: ; (i -- -i )
      0001EF                        121     _at_top
      0001EF 90 F6            [ 1]    1     ld a,(y)
      0001F1 93               [ 1]    2     ldw x,y 
      0001F2 EE 01            [ 2]    3     ldw x,(1,x)
      0001F4 43               [ 1]  122     cpl  a  
      0001F5 53               [ 2]  123     cplw x 
      0001F6 1C 00 01         [ 2]  124     addw x,#1
      0001F9 A9 00            [ 1]  125     adc a,#0
      0001FB                        126     _store_top  
      0001FB 90 F7            [ 1]    1     ld (y),a 
      0001FD 90 EF 01         [ 2]    2     ldw (1,y),x     
      000200 81               [ 4]  127 9$: ret 
                                    128 
                                    129 ;-----------------------------
                                    130 ; negate integer in A:X 
                                    131 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000201                        132 neg_ax:
      000201 43               [ 1]  133     cpl  a  
      000202 53               [ 2]  134     cplw x 
      000203 1C 00 01         [ 2]  135     addw x,#1
      000206 A9 00            [ 1]  136     adc a,#0
      000208 81               [ 4]  137     ret 
                                    138 
                                    139 ;------------------------------------
                                    140 ;  two's complement of acc24 
                                    141 ;-------------------------------------
      000209                        142 neg_acc24: ; 
      000209 72 53 00 0C      [ 1]  143     cpl acc24 
      00020D 72 53 00 0D      [ 1]  144     cpl acc16 
      000211 72 53 00 0E      [ 1]  145     cpl acc8
      000215 72 5C 00 0E      [ 1]  146     inc acc8 
      000219 26 0A            [ 1]  147     jrne 9$
      00021B 72 5C 00 0D      [ 1]  148     inc acc16 
      00021F 26 04            [ 1]  149     jrne 9$
      000221 72 5C 00 0C      [ 1]  150     inc acc24 
      000225 81               [ 4]  151 9$: ret 
                                    152 
                                    153 
                                    154 ;--------------------------------------
                                    155 ; unsigned multiply uint24_t by uint8_t
                                    156 ; input:
                                    157 ;	xstack	    uint24_t 
                                    158 ;   a	        uint8_t
                                    159 ; output:
                                    160 ;   A:X     product 
                                    161 ;   acc32   overflow, bits 31..24 
                                    162 ;-------------------------------------
                                    163 ; local variables offset  on sp
                           000001   164 	U8   = 1 
                           000001   165     VSIZE=1 
      000226                        166 mulu24_8:
      000226 88               [ 1]  167     push a 
      000227 72 5F 00 0B      [ 1]  168 	clr acc32
      00022B 72 5F 00 0C      [ 1]  169     clr acc24  
                                    170 ; multiply top bits 7..0 * U8   	
      00022F 90 E6 02         [ 1]  171     ld a,(2,Y) ; top least byte  
      000232 97               [ 1]  172     ld xl,a 
      000233 7B 01            [ 1]  173     ld a,(U8,sp)
      000235 42               [ 4]  174     mul x,a 
      000236 CF 00 0D         [ 2]  175     ldw acc16,x 
                                    176 ; multiply top bits 15..8 * U8     
      000239 90 E6 01         [ 1]  177     ld a,(1,Y) ; top middle byte 
      00023C 97               [ 1]  178     ld xl,a 
      00023D 7B 01            [ 1]  179     ld a,(U8,sp) 
      00023F 42               [ 4]  180     mul x,a 
      000240 72 BB 00 0C      [ 2]  181     addw x,acc24
      000244 72 59 00 0B      [ 1]  182     rlc acc32 
      000248 CF 00 0C         [ 2]  183     ldw acc24,x 
                                    184 ; multiply top bits 23..16 * 8 
      00024B 90 F6            [ 1]  185     ld a,(Y)
      00024D 97               [ 1]  186     ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00024E 7B 01            [ 1]  187     ld a,(U8,sp)
      000250 42               [ 4]  188     mul x,a 
      000251 72 BB 00 0B      [ 2]  189     addw x,acc32
      000255 02               [ 1]  190     rlwa x 
      000256 4D               [ 1]  191     tnz a 
      000257 27 05            [ 1]  192     jreq 1$
      000259 A6 10            [ 1]  193     ld a,#ERR_OVERFLOW
      00025B CC 16 49         [ 2]  194     jp tb_error 
      00025E                        195 1$:
      00025E 9E               [ 1]  196     ld a,xh  
      00025F CE 00 0D         [ 2]  197     ldw x,acc16   
      000262                        198     _drop VSIZE 
      000262 5B 01            [ 2]    1     addw sp,#VSIZE 
      000264 81               [ 4]  199     ret
                                    200 
                                    201 
                                    202 ;-------------------------------
                                    203 ; mul24 i1 i2 -- i1*i2  
                                    204 ; multiply 24 bits integers 
                                    205 ;------------------------------
                           000001   206     PROD=1 
                           000004   207     PROD_SIGN=4
                           000005   208     N1=5
                           000007   209     VSIZE=7  
      000265                        210 mul24:
      000265                        211     _vars VSIZE
      000265 52 07            [ 2]    1     sub sp,#VSIZE 
      000267 5F               [ 1]  212     clrw x 
      000268 1F 01            [ 2]  213     ldw (PROD,sp),x 
      00026A 1F 03            [ 2]  214     ldw (PROD+2,sp),x
      00026C                        215     _xpop 
      00026C 90 F6            [ 1]    1     ld a,(y)
      00026E 93               [ 1]    2     ldw x,y 
      00026F EE 01            [ 2]    3     ldw x,(1,x)
      000271 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000275 4D               [ 1]  216     tnz a 
      000276 2A 05            [ 1]  217     jrpl 0$
      000278 03 04            [ 1]  218     cpl (PROD_SIGN,sp)
      00027A CD 02 01         [ 4]  219     call neg_ax 
      00027D                        220 0$:    
      00027D 6B 05            [ 1]  221     ld (N1,sp),a 
      00027F 1F 06            [ 2]  222     ldw (N1+1,sp),x
      000281 90 7D            [ 1]  223     tnz (Y)
      000283 2A 05            [ 1]  224     jrpl 2$ 
      000285 03 04            [ 1]  225     cpl (PROD_SIGN,sp) 
      000287 CD 01 EF         [ 4]  226     call neg24
      00028A                        227 2$: 
      00028A 7B 07            [ 1]  228     ld a,(N1+2,sp); least byte     
      00028C 27 0A            [ 1]  229     jreq 4$
      00028E CD 02 26         [ 4]  230     call mulu24_8
      000291 4D               [ 1]  231     tnz a 
      000292 2B 3C            [ 1]  232     jrmi 8$ ; overflow  
      000294 6B 01            [ 1]  233     ld (PROD,sp),a
      000296 1F 02            [ 2]  234     ldw (PROD+1,sp),x 
      000298                        235 4$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000298 7B 06            [ 1]  236     ld a,(N1+1,sp); middle byte     
      00029A 27 0D            [ 1]  237     jreq 5$
      00029C CD 02 26         [ 4]  238     call mulu24_8
      00029F 4D               [ 1]  239     tnz a 
      0002A0 26 2E            [ 1]  240     jrne 8$  ; overflow 
      0002A2 72 FB 01         [ 2]  241     addw x,(PROD,sp)
      0002A5 29 29            [ 1]  242     jrv 8$ ; overflow
      0002A7 1F 01            [ 2]  243     ldw (PROD,sp),x 
      0002A9                        244 5$:
      0002A9 7B 05            [ 1]  245     ld a,(N1,sp) ; high byte 
      0002AB 27 10            [ 1]  246     jreq 6$
      0002AD CD 02 26         [ 4]  247     call mulu24_8
      0002B0 01               [ 1]  248     rrwa x 
      0002B1 5D               [ 2]  249     tnzw x 
      0002B2 26 1C            [ 1]  250     jrne 8$ ; overflow 
      0002B4 4D               [ 1]  251     tnz a 
      0002B5 2B 19            [ 1]  252     jrmi 8$ ; overflow 
      0002B7 1B 01            [ 1]  253     add a,(PROD,sp)
      0002B9 6B 01            [ 1]  254     ld (PROD,sp),a 
      0002BB 29 13            [ 1]  255     jrv 8$ ; overflow 
      0002BD                        256 6$:
      0002BD 7B 01            [ 1]  257     ld a,(PROD,sp)
      0002BF 1E 02            [ 2]  258     ldw x,(PROD+1,sp)
      0002C1 0D 04            [ 1]  259     tnz (PROD_SIGN,sp)
      0002C3 27 03            [ 1]  260     jreq 9$
      0002C5 CD 02 01         [ 4]  261     call neg_ax 
      0002C8                        262 9$:
      0002C8                        263     _store_top 
      0002C8 90 F7            [ 1]    1     ld (y),a 
      0002CA 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002CD                        264     _drop VSIZE 
      0002CD 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002CF 81               [ 4]  265     ret 
      0002D0                        266 8$: ; overflow
      0002D0 A6 10            [ 1]  267     ld a,#ERR_OVERFLOW
      0002D2 CC 16 49         [ 2]  268     jp tb_error 
                                    269 
                                    270 ;-------------------------------------
                                    271 ; divide uint24_t by uint8_t
                                    272 ; input:
                                    273 ;	acc24	dividend
                                    274 ;   A 		divisor
                                    275 ; output:
                                    276 ;   acc24	quotient
                                    277 ;   A		remainder
                                    278 ;------------------------------------- 
                                    279 ; offset  on sp of arguments and locals
                           000001   280 	U8   = 1   ; divisor on stack
                           000001   281 	VSIZE =1
      0002D5                        282 divu24_8:
      0002D5 89               [ 2]  283 	pushw x ; save x
      0002D6 88               [ 1]  284 	push a 
                                    285 	; ld dividend UU:MM bytes in X
      0002D7 CE 00 0C         [ 2]  286 	ldw x,acc24
      0002DA 7B 01            [ 1]  287 	ld a,(U8,SP) ; divisor
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0002DC 62               [ 2]  288 	div x,a ; UU:MM/U8
      0002DD 88               [ 1]  289 	push a  ;save remainder
      0002DE CF 00 0C         [ 2]  290     ldw acc24,x ; quotient 
      0002E1 84               [ 1]  291 	pop a
      0002E2 95               [ 1]  292 	ld xh,a
      0002E3 C6 00 0E         [ 1]  293 	ld a,acc8
      0002E6 97               [ 1]  294 	ld xl,a
      0002E7 7B 01            [ 1]  295 	ld a,(U8,sp) ; divisor
      0002E9 62               [ 2]  296 	div x,a  ; R:LL/U8
      0002EA 6B 01            [ 1]  297 	ld (U8,sp),a ; save remainder
      0002EC 9F               [ 1]  298 	ld a,xl
      0002ED C7 00 0E         [ 1]  299 	ld acc8,a
      0002F0 84               [ 1]  300 	pop a
      0002F1 85               [ 2]  301 	popw x
      0002F2 81               [ 4]  302 	ret
                                    303 
                                    304 
                                    305 ;-------------------------------
                                    306 ; div24 N/T   
                                    307 ; divide 24 bits integers
                                    308 ;  i1 i2 -- i1/i2 
                                    309 ;------------------------------
                           000001   310     DIVISOR=1
                           000004   311     CNTR=4
                           000005   312     QSIGN=5
                           000006   313     RSIGN=6 
                           000006   314     VSIZE=6 
      0002F3                        315 div24:
      0002F3                        316     _vars VSIZE 
      0002F3 52 06            [ 2]    1     sub sp,#VSIZE 
      0002F5 0F 06            [ 1]  317     clr (RSIGN,sp)
      0002F7 0F 05            [ 1]  318     clr (QSIGN,sp)
      0002F9                        319     _xpop 
      0002F9 90 F6            [ 1]    1     ld a,(y)
      0002FB 93               [ 1]    2     ldw x,y 
      0002FC EE 01            [ 2]    3     ldw x,(1,x)
      0002FE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000302 4D               [ 1]  320     tnz a 
      000303 2A 05            [ 1]  321     jrpl 0$ 
      000305 03 05            [ 1]  322     cpl (QSIGN,sp)
      000307 CD 02 01         [ 4]  323     call neg_ax
      00030A                        324 0$:
      00030A 6B 01            [ 1]  325     ld  (DIVISOR,sp),a
      00030C 1F 02            [ 2]  326     ldw (DIVISOR+1,sp),x
      00030E 1A 02            [ 1]  327     or a,(DIVISOR+1,sp)
      000310 1A 03            [ 1]  328     or a,(DIVISOR+2,sp)
      000312 26 05            [ 1]  329     jrne 1$ 
      000314 A6 04            [ 1]  330     ld a,#ERR_DIV0 
      000316 CC 16 49         [ 2]  331     jp tb_error 
      000319                        332 1$: 
      000319                        333     _at_top
      000319 90 F6            [ 1]    1     ld a,(y)
      00031B 93               [ 1]    2     ldw x,y 
      00031C EE 01            [ 2]    3     ldw x,(1,x)
      00031E 4D               [ 1]  334     tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00031F 2A 07            [ 1]  335     jrpl 2$
      000321 CD 02 01         [ 4]  336     call neg_ax
      000324 03 05            [ 1]  337     cpl (QSIGN,sp)
      000326 03 06            [ 1]  338     cpl (RSIGN,sp)
      000328                        339 2$: 
      000328 C7 00 0C         [ 1]  340     ld acc24,a 
      00032B CF 00 0D         [ 2]  341     ldw acc16,x 
      00032E A6 18            [ 1]  342     ld a,#24 
      000330 6B 04            [ 1]  343     ld (CNTR,sp),a
      000332 7B 01            [ 1]  344     ld a,(DIVISOR,sp)
      000334 1E 02            [ 2]  345     ldw x,(DIVISOR+1,sp)
      000336 CD 01 D6         [ 4]  346     call cp24_ax ; A:X-acc24 ?
      000339 23 14            [ 2]  347     jrule 22$ 
                                    348 ; quotient=0, remainder=divisor      
      00033B C6 00 0C         [ 1]  349     ld a,acc24 
      00033E CE 00 0D         [ 2]  350     ldw x,acc16 
      000341 72 5F 00 0C      [ 1]  351     clr acc24 
      000345 72 5F 00 0D      [ 1]  352     clr acc16 
      000349 72 5F 00 0E      [ 1]  353     clr acc8 
      00034D 20 2E            [ 2]  354     jra 6$
      00034F                        355 22$:     
      00034F 4F               [ 1]  356     clr a 
      000350 5F               [ 1]  357     clrw x 
      000351 98               [ 1]  358     rcf  
      000352                        359 3$: 
      000352 72 59 00 0E      [ 1]  360     rlc acc8 
      000356 72 59 00 0D      [ 1]  361     rlc acc16
      00035A 72 59 00 0C      [ 1]  362     rlc acc24 
      00035E 59               [ 2]  363     rlcw x  
      00035F 49               [ 1]  364     rlc a
      000360 72 F0 02         [ 2]  365 4$: subw x,(DIVISOR+1,sp) 
      000363 12 01            [ 1]  366     sbc a,(DIVISOR,sp)
      000365 24 05            [ 1]  367     jrnc 5$
      000367 72 FB 02         [ 2]  368     addw x,(DIVISOR+1,sp)
      00036A 19 01            [ 1]  369     adc a,(DIVISOR,sp)
      00036C                        370 5$: ; shift carry in QUOTIENT 
      00036C 8C               [ 1]  371     ccf
      00036D 0A 04            [ 1]  372     dec (CNTR,sp)
      00036F 26 E1            [ 1]  373     jrne 3$ 
      000371 72 59 00 0E      [ 1]  374     rlc acc8 
      000375 72 59 00 0D      [ 1]  375     rlc acc16 
      000379 72 59 00 0B      [ 1]  376     rlc acc32 
      00037D                        377 6$:    
      00037D 6B 01            [ 1]  378     ld (DIVISOR,sp),a 
      00037F 1F 02            [ 2]  379     ldw (DIVISOR+1,sp),x 
      000381 C6 00 0C         [ 1]  380     ld a,acc24 
      000384 CE 00 0D         [ 2]  381     ldw x,acc16 
      000387 0D 05            [ 1]  382     tnz (QSIGN,sp)
      000389 27 03            [ 1]  383     jreq 8$
      00038B CD 02 01         [ 4]  384     call neg_ax 
      00038E                        385 8$: 
      00038E                        386     _store_top 
      00038E 90 F7            [ 1]    1     ld (y),a 
      000390 90 EF 01         [ 2]    2     ldw (1,y),x     
      000393 7B 01            [ 1]  387     ld a,(DIVISOR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000395 1E 02            [ 2]  388     ldw x,(DIVSOR+1,sp)
      000397                        389 81$:
      000397 0D 06            [ 1]  390     tnz (RSIGN,sp)
      000399 27 03            [ 1]  391     jreq 9$
      00039B CD 02 01         [ 4]  392     call neg_ax       
      00039E                        393 9$: _drop VSIZE 
      00039E 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A0 81               [ 4]  394     ret 
                                    395 
                                    396 
                                    397 ;-------------------------------
                                    398 ; mod24 A:X % acc24 
                                    399 ; remainder 24 bits integers 
                                    400 ; input:
                                    401 ;    acc24   dividend 
                                    402 ;    A:X     divisor 
                                    403 ; output:
                                    404 ;    acc24   acc24 % A:X 
                                    405 ;------------------------------
      0003A1                        406 mod24:
      0003A1 CD 02 F3         [ 4]  407     call div24 
      0003A4                        408     _store_top  ; replace quotient by remainder 
      0003A4 90 F7            [ 1]    1     ld (y),a 
      0003A6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003A9 81               [ 4]  409     ret 
                                    410 
                                    411 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;;;;;;;;;;;;;;;;;;;
                                     22 
                           000001    23 .if DEBUG 
                                     24 
                                     25     .area CODE
                                     26 
                                     27 ;---------------------------------
                                     28 ;; print actual registers states 
                                     29 ;; as pushed on stack 
                                     30 ;; {Y,X,CC,A}
                                     31 ;---------------------------------
      0003AA                         32 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0003AA                         33 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0003AA                         34 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0003AA                         35 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0003AA                         36 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0003AA                         37 prt_regs::
      0003AA AE 03 ED         [ 2]   38 	ldw x,#regs_state 
      0003AD CD 09 6D         [ 4]   39 	call puts
                                     40 ; register PC
      0003B0 16 01            [ 2]   41 	ldw y,(1,sp)
      0003B2 AE 05 21         [ 2]   42 	ldw x,#REG_EPC 
      0003B5 CD 04 72         [ 4]   43 	call prt_reg16 
                                     44 ; register CC 
      0003B8 7B 08            [ 1]   45 	ld a,(R_CC,sp)
      0003BA AE 05 32         [ 2]   46 	ldw x,#REG_CC 
      0003BD CD 04 50         [ 4]   47 	call prt_reg8 
                                     48 ; register A 
      0003C0 7B 07            [ 1]   49 	ld a,(R_A,sp)
      0003C2 AE 05 2E         [ 2]   50 	ldw x,#REG_A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0003C5 CD 04 50         [ 4]   51 	call prt_reg8 
                                     52 ; register X 
      0003C8 16 05            [ 2]   53 	ldw y,(R_X,sp)
      0003CA AE 05 2A         [ 2]   54 	ldw x,#REG_X 
      0003CD CD 04 72         [ 4]   55 	call prt_reg16 
                                     56 ; register Y 
      0003D0 16 03            [ 2]   57 	ldw y,(R_Y,sp)
      0003D2 AE 05 26         [ 2]   58 	ldw x,#REG_Y 
      0003D5 CD 04 72         [ 4]   59 	call prt_reg16 
                                     60 ; register SP 
      0003D8 90 96            [ 1]   61 	ldw y,sp
      0003DA 72 A9 00 08      [ 2]   62 	addw y,#6+ARG_OFS  
      0003DE AE 05 37         [ 2]   63 	ldw x,#REG_SP
      0003E1 CD 04 72         [ 4]   64 	call prt_reg16
      0003E4 A6 0D            [ 1]   65 	ld a,#CR 
      0003E6 CD 09 10         [ 4]   66 	call putc
      0003E9 CD 09 10         [ 4]   67 	call putc   
      0003EC 81               [ 4]   68 	ret 
                                     69 
                                     70 
      0003ED 0A 72 65 67 69 73 74    71 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                     72 
                                     73 
                                     74 ;--------------------
                                     75 ; print content at address in hex.
                                     76 ; input:
                                     77 ;   X 	address to peek 
                                     78 ; output:
                                     79 ;	none 
                                     80 ;--------------------	
      000414                         81 prt_peek::
      000414 89               [ 2]   82 	pushw x 
      000415 35 10 00 0A      [ 1]   83 	mov base,#16 
      000419 CD 17 96         [ 4]   84 	call prt_i16  
      00041C A6 3A            [ 1]   85 	ld a,#': 
      00041E CD 09 10         [ 4]   86 	call putc 
      000421 A6 20            [ 1]   87 	ld a,#SPACE 
      000423 CD 09 10         [ 4]   88 	call putc 
      000426 85               [ 2]   89 	popw x 
      000427 F6               [ 1]   90 	ld a,(x)
      000428 5F               [ 1]   91 	clrw x 
      000429 97               [ 1]   92 	ld xl,a 
      00042A 35 0A 00 0A      [ 1]   93 	mov base,#10 
      00042E CD 17 96         [ 4]   94 	call prt_i16 
      000431 81               [ 4]   95 	ret 
                                     96 
                                     97 ;----------------------------------------
                                     98 ;   DEBUG support functions
                                     99 ;----------------------------------------
                                    100 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    101 ; turn LED on 
      000432                        102 ledon:
      000432 72 1A 50 0A      [ 1]  103     bset PC_ODR,#LED2_BIT
      000436 81               [ 4]  104     ret 
                                    105 
                                    106 ; turn LED off 
      000437                        107 ledoff:
      000437 72 1B 50 0A      [ 1]  108     bres PC_ODR,#LED2_BIT 
      00043B 81               [ 4]  109     ret 
                                    110 
                                    111 ; invert LED status 
      00043C                        112 ledtoggle:
      00043C A6 20            [ 1]  113     ld a,#LED2_MASK
      00043E C8 50 0A         [ 1]  114     xor a,PC_ODR
      000441 C7 50 0A         [ 1]  115     ld PC_ODR,a
      000444 81               [ 4]  116     ret 
                                    117 
      000445                        118 left_paren:
      000445 A6 20            [ 1]  119 	ld a,#SPACE 
      000447 CD 09 10         [ 4]  120 	call putc
      00044A A6 28            [ 1]  121 	ld a,#'( 
      00044C CD 09 10         [ 4]  122 	call putc 	
      00044F 81               [ 4]  123 	ret 
                                    124 
                                    125 ;------------------------------
                                    126 ; print 8 bit register 
                                    127 ; input:
                                    128 ;   X  point to register name 
                                    129 ;   A  register value to print 
                                    130 ; output:
                                    131 ;   none
                                    132 ;------------------------------- 
      000450                        133 prt_reg8:
      000450 88               [ 1]  134 	push a 
      000451 CD 09 6D         [ 4]  135 	call puts 
      000454 7B 01            [ 1]  136 	ld a,(1,sp) 
      000456 5F               [ 1]  137 	clrw x 
      000457 97               [ 1]  138 	ld xl,a 
      000458 35 10 00 0A      [ 1]  139 	mov base,#16
      00045C CD 17 96         [ 4]  140 	call prt_i16  
      00045F CD 04 45         [ 4]  141 	call left_paren 
      000462 84               [ 1]  142 	pop a 
      000463 5F               [ 1]  143 	clrw x 
      000464 97               [ 1]  144 	ld xl,a 
      000465 35 0A 00 0A      [ 1]  145 	mov base,#10 
      000469 CD 17 96         [ 4]  146 	call prt_i16  
      00046C A6 29            [ 1]  147 	ld a,#') 
      00046E CD 09 10         [ 4]  148 	call putc
      000471 81               [ 4]  149 	ret
                                    150 
                                    151 ;--------------------------------
                                    152 ; print 16 bits register 
                                    153 ; input:
                                    154 ;   X   point register name 
                                    155 ;   Y   register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                    156 ; output:
                                    157 ;  none
                                    158 ;--------------------------------
      000472                        159 prt_reg16: 
      000472 90 89            [ 2]  160 	pushw y 
      000474 CD 09 6D         [ 4]  161 	call puts 
      000477 1E 01            [ 2]  162 	ldw x,(1,sp) 
      000479 35 10 00 0A      [ 1]  163 	mov base,#16 
      00047D CD 17 96         [ 4]  164 	call prt_i16  
      000480 CD 04 45         [ 4]  165 	call left_paren 
      000483 85               [ 2]  166 	popw x 
      000484 35 0A 00 0A      [ 1]  167 	mov base,#10 
      000488 CD 17 96         [ 4]  168 	call prt_i16  
      00048B A6 29            [ 1]  169 	ld a,#') 
      00048D CD 09 10         [ 4]  170 	call putc
      000490 81               [ 4]  171 	ret 
                                    172 
                                    173 ;------------------------------------
                                    174 ; print registers contents saved on
                                    175 ; stack by trap interrupt.
                                    176 ;------------------------------------
      000491                        177 print_registers:
      000491 AE 04 E4         [ 2]  178 	ldw x,#STATES
      000494 CD 09 6D         [ 4]  179 	call puts
                                    180 ; print EPC 
      000497 AE 05 21         [ 2]  181 	ldw x, #REG_EPC
      00049A CD 09 6D         [ 4]  182 	call puts 
      00049D 7B 0B            [ 1]  183 	ld a, (11,sp)
      00049F C7 00 0E         [ 1]  184 	ld acc8,a 
      0004A2 7B 0A            [ 1]  185 	ld a, (10,sp) 
      0004A4 C7 00 0D         [ 1]  186 	ld acc16,a 
      0004A7 7B 09            [ 1]  187 	ld a,(9,sp) 
      0004A9 C7 00 0C         [ 1]  188 	ld acc24,a
      0004AC 5F               [ 1]  189 	clrw x  
      0004AD A6 10            [ 1]  190 	ld a,#16
      0004AF CD 17 AD         [ 4]  191 	call prt_acc24  
                                    192 ; print X
      0004B2 AE 05 2A         [ 2]  193 	ldw x,#REG_X
      0004B5 16 05            [ 2]  194 	ldw y,(5,sp)
      0004B7 CD 04 72         [ 4]  195 	call prt_reg16  
                                    196 ; print Y 
      0004BA AE 05 26         [ 2]  197 	ldw x,#REG_Y
      0004BD 16 07            [ 2]  198 	ldw y, (7,sp)
      0004BF CD 04 72         [ 4]  199 	call prt_reg16  
                                    200 ; print A 
      0004C2 AE 05 2E         [ 2]  201 	ldw x,#REG_A
      0004C5 7B 04            [ 1]  202 	ld a, (4,sp) 
      0004C7 CD 04 50         [ 4]  203 	call prt_reg8
                                    204 ; print CC 
      0004CA AE 05 32         [ 2]  205 	ldw x,#REG_CC 
      0004CD 7B 03            [ 1]  206 	ld a, (3,sp) 
      0004CF CD 04 50         [ 4]  207 	call prt_reg8 
                                    208 ; print SP 
      0004D2 AE 05 37         [ 2]  209 	ldw x,#REG_SP
      0004D5 90 96            [ 1]  210 	ldw y,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0004D7 72 A9 00 0C      [ 2]  211 	addw y,#12
      0004DB CD 04 72         [ 4]  212 	call prt_reg16  
      0004DE A6 0A            [ 1]  213 	ld a,#'\n' 
      0004E0 CD 09 10         [ 4]  214 	call putc
      0004E3 81               [ 4]  215 	ret
                                    216 
      0004E4 0A 52 65 67 69 73 74   217 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000521 45 50 43 3A 00         218 REG_EPC: .asciz "EPC:"
      000526 0A 59 3A 00            219 REG_Y:   .asciz "\nY:" 
      00052A 0A 58 3A 00            220 REG_X:   .asciz "\nX:"
      00052E 0A 41 3A 00            221 REG_A:   .asciz "\nA:" 
      000532 0A 43 43 3A 00         222 REG_CC:  .asciz "\nCC:"
      000537 0A 53 50 3A 00         223 REG_SP:  .asciz "\nSP:"
                                    224 
                                    225 ;----------------------------
                                    226 ; command interface
                                    227 ; only 3 commands:
                                    228 ;  'q' to resume application
                                    229 ;  'p [addr]' to print memory values 
                                    230 ;  's addr' to print string 
                                    231 ;----------------------------
                                    232 ;local variable 
                           000001   233 	PSIZE=1
                           000001   234 	VSIZE=1 
      00053C                        235 cmd_itf:
      00053C 52 01            [ 2]  236 	sub sp,#VSIZE 
      00053E 72 5F 00 18      [ 1]  237 	clr farptr 
      000542 72 5F 00 19      [ 1]  238 	clr farptr+1 
      000546 72 5F 00 1A      [ 1]  239 	clr farptr+2  
      00054A                        240 repl:
      00054A A6 0D            [ 1]  241 	ld a,#CR 
      00054C CD 09 10         [ 4]  242 	call putc 
      00054F A6 3F            [ 1]  243 	ld a,#'? 
      000551 CD 09 10         [ 4]  244 	call putc
      000554 72 5F 00 00      [ 1]  245 	clr in.w 
      000558 72 5F 00 01      [ 1]  246 	clr in 
      00055C CD 0A 72         [ 4]  247 	call readln
      00055F 90 AE 16 68      [ 2]  248 	ldw y,#tib  
      000563 90 F6            [ 1]  249 	ld a,(y)
      000565 27 E3            [ 1]  250 	jreq repl  
      000567 72 5C 00 01      [ 1]  251 	inc in 
      00056B CD 18 2C         [ 4]  252 	call to_upper 
      00056E A1 51            [ 1]  253 	cp a,#'Q 
      000570 26 17            [ 1]  254 	jrne test_p
      000572                        255 repl_exit:
      000572 72 5F 16 68      [ 1]  256 	clr tib 
      000576 72 5F 00 03      [ 1]  257 	clr count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00057A 72 5F 00 01      [ 1]  258 	clr in 
      00057E                        259 	_drop #VSIZE 	
      00057E 5B 01            [ 2]    1     addw sp,##VSIZE 
      000580 81               [ 4]  260 	ret  
      000581                        261 invalid:
      000581 AE 06 02         [ 2]  262 	ldw x,#invalid_cmd 
      000584 CD 09 6D         [ 4]  263 	call puts 
      000587 20 C1            [ 2]  264 	jra repl 
      000589                        265 test_p:	
      000589 A1 50            [ 1]  266     cp a,#'P 
      00058B 27 11            [ 1]  267 	jreq mem_peek
      00058D A1 53            [ 1]  268     cp a,#'S 
      00058F 26 F0            [ 1]  269 	jrne invalid 
      000591                        270 print_string:	
      000591 CD 0E E7         [ 4]  271 	call get_token
      000594 A1 84            [ 1]  272 	cp a,#TK_INTGR 
      000596 26 E9            [ 1]  273 	jrne invalid 
      000598 CD 09 6D         [ 4]  274 	call puts
      00059B CC 05 4A         [ 2]  275 	jp repl 	
      00059E                        276 mem_peek:
      00059E A6 20            [ 1]  277 	ld a,#SPACE 
      0005A0 CD 0E D4         [ 4]  278 	call skip  	 
      0005A3 72 B9 00 00      [ 2]  279 	addw y,in.w 
      0005A7 AE 16 B8         [ 2]  280 	ldw x,#pad 
      0005AA CD 13 A7         [ 4]  281 	call strcpy
      0005AD AE 16 B8         [ 2]  282 	ldw x,#pad
      0005B0 CD 18 38         [ 4]  283 	call atoi24 	
      0005B3 C6 00 0C         [ 1]  284 	ld a, acc24 
      0005B6 CA 00 0D         [ 1]  285 	or a,acc16 
      0005B9 CA 00 0E         [ 1]  286 	or a,acc8 
      0005BC 26 02            [ 1]  287 	jrne 1$ 
      0005BE 20 0C            [ 2]  288 	jra peek_byte  
      0005C0 CE 00 0C         [ 2]  289 1$:	ldw x,acc24 
      0005C3 CF 00 18         [ 2]  290 	ldw farptr,x 
      0005C6 C6 00 0E         [ 1]  291 	ld a,acc8 
      0005C9 C7 00 1A         [ 1]  292 	ld farptr+2,a 
      0005CC                        293 peek_byte:
      0005CC CD 06 11         [ 4]  294 	call print_farptr 
      0005CF A6 08            [ 1]  295 	ld a,#8 
      0005D1 6B 01            [ 1]  296 	ld (PSIZE,sp),a 
      0005D3 5F               [ 1]  297 	clrw x 
      0005D4 CD 06 2C         [ 4]  298 1$:	call fetchc  
      0005D7 89               [ 2]  299 	pushw x 
      0005D8 C7 00 0E         [ 1]  300 	ld acc8,a 
      0005DB 5F               [ 1]  301 	clrw x 
      0005DC CF 00 0C         [ 2]  302 	ldw acc24,x 
      0005DF A6 90            [ 1]  303 	ld a,#16+128
      0005E1 CD 17 AD         [ 4]  304 	call prt_acc24
      0005E4 85               [ 2]  305 	popw x 
      0005E5 0A 01            [ 1]  306 	dec (PSIZE,sp)
      0005E7 26 EB            [ 1]  307 	jrne 1$ 
      0005E9 A6 08            [ 1]  308 	ld a,#8 
      0005EB CB 00 1A         [ 1]  309 	add a,farptr+2 
      0005EE C7 00 1A         [ 1]  310 	ld farptr+2,a
      0005F1 4F               [ 1]  311 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0005F2 C9 00 19         [ 1]  312 	adc a,farptr+1 
      0005F5 C7 00 19         [ 1]  313 	ld farptr+1,a 
      0005F8 4F               [ 1]  314 	clr a 
      0005F9 C9 00 18         [ 1]  315 	adc a,farptr 
      0005FC C7 00 18         [ 1]  316 	ld farptr,a 
      0005FF CC 05 4A         [ 2]  317 	jp repl  
                                    318 
      000602 6E 6F 74 20 61 20 63   319 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    320 
                                    321 ;----------------------------
                                    322 ; display farptr address
                                    323 ;----------------------------
      000611                        324 print_farptr:
      000611 C6 00 1A         [ 1]  325 	ld a ,farptr+2 
      000614 C7 00 0E         [ 1]  326 	ld acc8,a 
      000617 CE 00 18         [ 2]  327 	ldw x,farptr 
      00061A CF 00 0C         [ 2]  328 	ldw acc24,x 
      00061D 5F               [ 1]  329 	clrw x 
      00061E A6 10            [ 1]  330 	ld a,#16 
      000620 CD 17 AD         [ 4]  331 	call prt_acc24
      000623 A6 20            [ 1]  332 	ld a,#SPACE 
      000625 CD 09 10         [ 4]  333 	call putc 
      000628 CD 09 10         [ 4]  334 	call putc 
      00062B 81               [ 4]  335 	ret
                                    336 
                                    337 ;------------------------------------
                                    338 ; get byte at address farptr[X]
                                    339 ; input:
                                    340 ;	 farptr   address to peek
                                    341 ;    X		  farptr index 	
                                    342 ; output:
                                    343 ;	 A 		  byte from memory  
                                    344 ;    x		  incremented by 1
                                    345 ;------------------------------------
      00062C                        346 fetchc: ; @C
      00062C 92 AF 00 18      [ 5]  347 	ldf a,([farptr],x)
      000630 5C               [ 1]  348 	incw x
      000631 81               [ 4]  349 	ret
                                    350 
                                    351 
                                    352 ;------------------------------------
                                    353 ; expect a number from command line 
                                    354 ; next argument
                                    355 ;  input:
                                    356 ;	  none
                                    357 ;  output:
                                    358 ;    acc24   int24_t 
                                    359 ;------------------------------------
      000632                        360 number:
      000632 CD 0E E7         [ 4]  361 	call get_token
      000635 A1 84            [ 1]  362 	cp a,#TK_INTGR
      000637 27 03            [ 1]  363 	jreq 1$
      000639 CC 16 47         [ 2]  364 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00063C 81               [ 4]  365 1$:	ret
                                    366 
                                    367 
                                    368 ;---------------------
                                    369 ; display n bytes row 
                                    370 ; from memory.
                                    371 ; input:
                                    372 ;   A   bytes to print 
                                    373 ;	X   start address 
                                    374 ; output:
                                    375 ;   X   address after last shown  
                                    376 ;---------------------
                           000001   377 	CNT=1 
                           000002   378 	ADR=2 
                           000003   379 	VSIZE=3 
      00063D                        380 show_row:
      00063D 4D               [ 1]  381 	tnz a 
      00063E 26 01            [ 1]  382 	jrne 1$
      000640 81               [ 4]  383 	ret 
      000641                        384 1$:	
      000641 89               [ 2]  385 	pushw x  
      000642 88               [ 1]  386 	push a 
      000643 35 04 00 23      [ 1]  387 	mov tab_width,#4 
      000647 CD 17 96         [ 4]  388 	call prt_i16 
      00064A A6 20            [ 1]  389 	ld a,#SPACE  
      00064C CD 09 10         [ 4]  390 	call putc
      00064F                        391 row_loop:
      00064F 1E 02            [ 2]  392 	ldw x,(ADR,sp)
      000651 F6               [ 1]  393 	ld a,(x)
      000652 5F               [ 1]  394 	clrw x 
      000653 97               [ 1]  395 	ld xl,a 
      000654 CD 17 96         [ 4]  396 	call prt_i16 
      000657 1E 02            [ 2]  397 	ldw x,(ADR,sp)
      000659 5C               [ 1]  398 	incw x 
      00065A 1F 02            [ 2]  399 	ldw (ADR,sp),x 
      00065C 0A 01            [ 1]  400 	dec (CNT,sp)
      00065E 26 EF            [ 1]  401 	jrne row_loop
      000660                        402 	_drop VSIZE  		
      000660 5B 03            [ 2]    1     addw sp,#VSIZE 
      000662 35 04 00 23      [ 1]  403 	mov tab_width,#4
      000666 A6 0D            [ 1]  404 	ld a,#CR 
      000668 CD 09 10         [ 4]  405 	call putc 
      00066B 81               [ 4]  406 	ret 
                                    407 
                                    408 ;--------------------------
                                    409 ; print memory content 
                                    410 ; in hexadecimal format
                                    411 ;  input:
                                    412 ;    X    start address 
                                    413 ;    Y    count 
                                    414 ;--------------------------
                           000001   415 	BCNT=1
                           000003   416 	BASE=3
                           000004   417 	TABW=4
                           000004   418 	VSIZE=4   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00066C                        419 hex_dump:
      00066C 88               [ 1]  420 	push a 
      00066D                        421 	_vars VSIZE
      00066D 52 04            [ 2]    1     sub sp,#VSIZE 
      00066F C6 00 0A         [ 1]  422 	ld a,base
      000672 6B 03            [ 1]  423 	ld (BASE,sp),a 
      000674 35 10 00 0A      [ 1]  424 	mov base,#16
      000678 C6 00 23         [ 1]  425 	ld a,tab_width 
      00067B 6B 04            [ 1]  426 	ld (TABW,sp),a
      00067D A6 0D            [ 1]  427 	ld a,#CR 
      00067F CD 09 10         [ 4]  428 	call putc 
      000682 17 01            [ 2]  429 1$: ldw (BCNT,sp),y
      000684 A6 10            [ 1]  430 	ld a,#16
      000686 90 A3 00 10      [ 2]  431 	cpw y,#16
      00068A 2A 02            [ 1]  432 	jrpl 2$
      00068C 90 9F            [ 1]  433 	ld a,yl
      00068E                        434 2$: 	
      00068E CD 06 3D         [ 4]  435 	call show_row 
      000691 16 01            [ 2]  436 	ldw y,(BCNT,sp) 
      000693 72 A2 00 10      [ 2]  437 	subw y,#16 
      000697 90 A3 00 01      [ 2]  438 	cpw y,#1
      00069B 2A E5            [ 1]  439 	jrpl 1$
      00069D 7B 03            [ 1]  440 	ld a,(BASE,sp)
      00069F C7 00 0A         [ 1]  441 	ld base,a
      0006A2 7B 04            [ 1]  442 	ld a,(TABW,sp)
      0006A4 C7 00 23         [ 1]  443 	ld tab_width,a 
      0006A7                        444 	_drop VSIZE
      0006A7 5B 04            [ 2]    1     addw sp,#VSIZE 
      0006A9 84               [ 1]  445 	pop a 
      0006AA 81               [ 4]  446 	ret 
                                    447 
                                    448 .endif ; DEBUG 
                                    449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0006AB                         45 unlock_eeprom:
      0006AB 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0006B0 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0006B4 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0006B8 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0006BC 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0006C0 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006C5 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0006C6                         62 unlock_flash:
      0006C6 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006CB 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0006CF 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0006D3 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006D7 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006DB 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006E0 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006E1                         76 row_erase:
      0006E1 88               [ 1]   77 	push a 
      0006E2 90 89            [ 2]   78 	pushw y 
      0006E4 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006E8 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006EC 4F               [ 1]   81 	clr a 
      0006ED 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0006EF 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0006F3 90 5C            [ 1]   84     incw y
      0006F5 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0006F9 90 5C            [ 1]   86     incw y
      0006FB 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0006FF 90 5C            [ 1]   88     incw y
      000701 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      000705 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00070A 90 85            [ 2]   91 	popw y 
      00070C 84               [ 1]   92 	pop a 
      00070D 81               [ 4]   93 	ret
      00070E                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      00070E                         97 move_erase_to_ram:
      00070E 89               [ 2]   98 	pushw x 
      00070F 90 89            [ 2]   99 	pushw y 
      000711 AE 07 0E         [ 2]  100 	ldw x,#row_erase_end 
      000714 1D 06 E1         [ 2]  101 	subw x,#row_erase
      000717 CF 00 0D         [ 2]  102 	ldw acc16,x 
      00071A AE 16 68         [ 2]  103 	ldw x,#tib 
      00071D 90 AE 06 E1      [ 2]  104 	ldw y,#row_erase 
      000721 CD 13 B7         [ 4]  105 	call move
      000724 90 85            [ 2]  106 	popw y
      000726 85               [ 2]  107 	popw x
      000727 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000728                        123 program_row:
      000728 88               [ 1]  124 	push a 
      000729 90 89            [ 2]  125 	pushw y 
      00072B 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      00072D 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000731 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000735 90 5F            [ 1]  130 	clrw y 
      000737 F6               [ 1]  131 1$:	ld a,(x)
      000738 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      00073C 5C               [ 1]  133 	incw x 
      00073D 90 5C            [ 1]  134 	incw y 
      00073F 0A 01            [ 1]  135 	dec (BCNT,sp)
      000741 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      000743 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000748                        139 	_drop 1 
      000748 5B 01            [ 2]    1     addw sp,#1 
      00074A 90 85            [ 2]  140 	popw y 
      00074C 84               [ 1]  141 	pop a 
      00074D 81               [ 4]  142 	ret 
      00074E                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      00074E                        149 move_prg_to_ram:
      00074E 89               [ 2]  150 	pushw x 
      00074F 90 89            [ 2]  151 	pushw y 
      000751 AE 07 4E         [ 2]  152 	ldw x,#program_row_end 
      000754 1D 07 28         [ 2]  153 	subw x,#program_row 
      000757 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      00075A AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      00075D 90 AE 07 28      [ 2]  156 	ldw y,#program_row ; source address 
      000761 CD 13 B7         [ 4]  157 	call move
      000764 90 85            [ 2]  158 	popw y 
      000766 85               [ 2]  159 	popw x  
      000767 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000768                        169 write_buffer:
      000768 89               [ 2]  170 	pushw x 
      000769 72 5D 00 18      [ 1]  171 	tnz farptr 
      00076D 26 0D            [ 1]  172 	jrne to_flash 
      00076F CE 00 19         [ 2]  173 	ldw x,farptr+1 
      000772 A3 34 80         [ 2]  174 	cpw x,#app_space  
      000775 24 05            [ 1]  175 	jruge to_flash 
      000777                        176 to_eeprom:
      000777 CD 06 AB         [ 4]  177 	call unlock_eeprom
      00077A 20 03            [ 2]  178 	jra do_programming
      00077C                        179 to_flash:
      00077C CD 06 C6         [ 4]  180 	call unlock_flash
      00077F                        181 do_programming:
      00077F 85               [ 2]  182 	popw x 
      000780 CD 16 68         [ 4]  183 	call tib
      000783 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000787 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      00078B 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      00078C                        197 block_erase:
      00078C 89               [ 2]  198 	pushw x 
      00078D C6 00 18         [ 1]  199 	ld a,farptr 
      000790 26 14            [ 1]  200 	jrne erase_flash
      000792 CE 00 19         [ 2]  201 	ldw x,farptr+1
      000795 A3 34 80         [ 2]  202 	cpw x,#app_space 
      000798 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      00079A CD 06 AB         [ 4]  205 	call unlock_eeprom 
      00079D CD 16 68         [ 4]  206 	call tib 
      0007A0 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0007A4 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0007A6                        210 erase_flash:
      0007A6 CD 06 C6         [ 4]  211 	call unlock_flash 
      0007A9 CD 16 68         [ 4]  212 	call tib 
      0007AC 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007B0                        214 erase_exit: 
      0007B0 85               [ 2]  215 	popw x 
      0007B1 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0007B2                        232 write_byte:
      0007B2 90 89            [ 2]  233 	pushw y
      0007B4                        234 	_vars VSIZE
      0007B4 52 02            [ 2]    1     sub sp,#VSIZE 
      0007B6 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0007B8 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0007BA 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0007BE 72 5D 00 18      [ 1]  240 	tnz farptr 
      0007C2 26 14            [ 1]  241 	jrne write_flash
      0007C4 90 A3 34 80      [ 2]  242     cpw y,#app_space 	 
      0007C8 24 0E            [ 1]  243     jruge write_flash
      0007CA 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0007CE 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0007D0 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0007D4 22 51            [ 1]  247 	jrugt write_exit
      0007D6 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0007D8                        250 write_flash:
      0007D8 CD 06 C6         [ 4]  251 	call unlock_flash 
      0007DB 9B               [ 1]  252 1$:	sim 
      0007DC 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007DE 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0007E2 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007E7 9A               [ 1]  256     rim 
      0007E8 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007EC 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0007EE                        260 write_eeprom:
      0007EE CD 06 AB         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0007F1 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0007F5 2B 08            [ 1]  264 	jrmi 1$
      0007F7 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0007FB 2A 02            [ 1]  266 	jrpl 1$
      0007FD 03 02            [ 1]  267 	cpl (OPT,sp)
      0007FF                        268 1$: 
      0007FF 0D 02            [ 1]  269     tnz (OPT,sp)
      000801 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      000803 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      000807 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00080B                        274 2$: 
      00080B 7B 01            [ 1]  275     ld a,(BTW,sp)
      00080D 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      000811 0D 02            [ 1]  277     tnz (OPT,sp)
      000813 27 08            [ 1]  278     jreq 3$
      000815 5C               [ 1]  279     incw x
      000816 7B 01            [ 1]  280     ld a,(BTW,sp)
      000818 43               [ 1]  281     cpl a
      000819 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      00081D 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000822 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000827                        285 write_exit:
      000827                        286 	_drop VSIZE 
      000827 5B 02            [ 2]    1     addw sp,#VSIZE 
      000829 90 85            [ 2]  287 	popw y
      00082B 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; the block must be erased before 
                                    293 ; using this routine.
                                    294 ; input:
                                    295 ;   Y        source address   
                                    296 ;   X        array index  destination  farptr[x]
                                    297 ;   BSIZE    block size bytes 
                                    298 ;   farptr   write address , byte* 
                                    299 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                    300 ;	X 		after last byte written 
                                    301 ;   Y 		after last byte read 
                                    302 ;  farptr   point after block
                                    303 ;---------------------------------------------
      00082C                        304 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      00082C                        305 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    306 	; local var 
                           000001   307 	XSAVE=1 
                           000002   308 	VSIZE=2 
      00082C                        309 write_block::
      00082C 88               [ 1]  310 	push a 
      00082D                        311 	_vars VSIZE
      00082D 52 02            [ 2]    1     sub sp,#VSIZE 
      00082F 1F 01            [ 2]  312 	ldw (XSAVE,sp),x 
      000831 1E 06            [ 2]  313 	ldw x,(BSIZE,sp) 
      000833 27 13            [ 1]  314 	jreq 9$
      000835 1E 01            [ 2]  315 1$:	ldw x,(XSAVE,sp)
      000837 90 F6            [ 1]  316 	ld a,(y)
      000839 CD 07 B2         [ 4]  317 	call write_byte 
      00083C 5C               [ 1]  318 	incw x 
      00083D 90 5C            [ 1]  319 	incw y 
      00083F 1F 01            [ 2]  320 	ldw (XSAVE,sp),x
      000841 1E 06            [ 2]  321 	ldw x,(BSIZE,sp)
      000843 5A               [ 2]  322 	decw x
      000844 1F 06            [ 2]  323 	ldw (BSIZE,sp),x 
      000846 26 ED            [ 1]  324 	jrne 1$
      000848                        325 9$:
      000848 1E 01            [ 2]  326 	ldw x,(XSAVE,sp)
      00084A CD 08 82         [ 4]  327 	call incr_farptr
      00084D                        328 	_drop VSIZE
      00084D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00084F 84               [ 1]  329 	pop a 
      000850 81               [ 4]  330 	ret 
                                    331 
                                    332 
                                    333 ;------------------------------------
                                    334 ; write n bytes to flash | eeprom 
                                    335 ; if the number of bytes is 
                                    336 ; >=128 it is faster to 
                                    337 ; use write_block
                                    338 ; the bytes are written one by 
                                    339 ; one and auto erased if required. 
                                    340 ; input:
                                    341 ;    farptr    dest address 
                                    342 ;    X         src address 
                                    343 ;    A         count 
                                    344 ; output:
                                    345 ;    none   
                                    346 ;----------------------------------
      000851                        347 write_nbytes:
      000851 90 89            [ 2]  348 	pushw y
      000853 88               [ 1]  349 	push a 
      000854 90 93            [ 1]  350 	ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      000856 5F               [ 1]  351 	clrw x 
      000857                        352 1$:  
      000857 90 F6            [ 1]  353 	ld a,(y)
      000859 90 5C            [ 1]  354 	incw y
      00085B CD 07 B2         [ 4]  355 	call write_byte 
      00085E 5C               [ 1]  356 	incw x 
      00085F 0A 01            [ 1]  357 	dec (1,sp)  
      000861 26 F4            [ 1]  358 	jrne 1$ 
      000863 84               [ 1]  359 9$: pop a 
      000864 90 85            [ 2]  360 	popw y 
      000866 81               [ 4]  361 	ret 
                                    362 
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 ;;;  flash memory operations
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 
                                    367 ;--------------------------
                                    368 ; align farptr to BLOCK_SIZE 
                                    369 ;---------------------------
      000867                        370 row_align:
      000867 A6 7F            [ 1]  371 	ld a,#0x7f 
      000869 C4 00 1A         [ 1]  372 	and a,farptr+2 
      00086C 27 13            [ 1]  373 	jreq 1$ 
      00086E CE 00 19         [ 2]  374 	ldw x,farptr+1 
      000871 1C 00 80         [ 2]  375 	addw x,#BLOCK_SIZE 
      000874 24 04            [ 1]  376 	jrnc 0$
      000876 72 5C 00 18      [ 1]  377 	inc farptr 
      00087A 9F               [ 1]  378 0$: ld a,xl 
      00087B A4 80            [ 1]  379 	and a,#0x80
      00087D 97               [ 1]  380 	ld xl,a
      00087E CF 00 19         [ 2]  381 	ldw farptr+1,x  	
      000881 81               [ 4]  382 1$:	ret
                                    383 
                                    384 ;--------------------
                                    385 ; input:
                                    386 ;   X     increment 
                                    387 ; output:
                                    388 ;   farptr  incremented 
                                    389 ;---------------------
      000882                        390 incr_farptr:
      000882 72 BB 00 19      [ 2]  391 	addw x,farptr+1 
      000886 24 04            [ 1]  392 	jrnc 1$
      000888 72 5C 00 18      [ 1]  393 	inc farptr 
      00088C CF 00 19         [ 2]  394 1$:	ldw farptr+1,x  
      00088F 81               [ 4]  395 	ret 
                                    396 
                                    397 ;-----------------------------------
                                    398 ; scan block for non zero byte 
                                    399 ; block are 128 bytes 
                                    400 ; input:
                                    401 ;    farptr     address block  
                                    402 ; output:
                                    403 ;     A     0 cleared, other not cleared  
                                    404 ;-----------------------------------
      000890                        405 scan_block:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      000890 5F               [ 1]  406 	clrw x 
      000891 92 AF 00 18      [ 5]  407 1$: ldf a,([farptr],x) 
      000895 26 06            [ 1]  408 	jrne 2$
      000897 5C               [ 1]  409 	incw x 
      000898 A3 00 80         [ 2]  410 	cpw x,#BLOCK_SIZE 
      00089B 25 F4            [ 1]  411 	jrult 1$ 
      00089D 81               [ 4]  412 2$:	ret 
                                    413 
                                    414 
                                    415 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      00089E                         66 Uart1RxHandler: ; console receive char 
      00089E 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      0008A3 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      0008A6 A1 03            [ 1]   69 	cp a,#CTRL_C 
      0008A8 26 06            [ 1]   70 	jrne 2$
      0008AA CD 09 10         [ 4]   71 	call putc 
      0008AD CC 00 57         [ 2]   72 	jp user_interrupted
      0008B0                         73 2$:
      0008B0 A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      0008B2 26 03            [ 1]   75 	jrne 3$
      0008B4 CC 00 C3         [ 2]   76 	jp cold_start 	
      0008B7 88               [ 1]   77 3$:	push a 
      0008B8 A6 26            [ 1]   78 	ld a,#rx1_queue 
      0008BA CB 00 2F         [ 1]   79 	add a,rx1_tail 
      0008BD 5F               [ 1]   80 	clrw x 
      0008BE 97               [ 1]   81 	ld xl,a 
      0008BF 84               [ 1]   82 	pop a 
      0008C0 F7               [ 1]   83 	ld (x),a 
      0008C1 C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      0008C4 4C               [ 1]   85 	inc a 
      0008C5 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0008C7 C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0008CA 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0008CB                         97 uart1_init:
      0008CB 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      0008CF 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      0008D3 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      0008D7 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008DB                        103 uart1_set_baud: 
      0008DB 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008DC A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      0008DE C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      0008E1 27 0A            [ 1]  109 	jreq 2$ 
      0008E3                        110 1$: ; 8 Mhz 	
      0008E3 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008E7 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      0008EB 20 08            [ 2]  113 	jra 3$
      0008ED                        114 2$: ; 16 Mhz 	
      0008ED 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008F1 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0008F5                        117 3$:
      0008F5 72 5F 52 31      [ 1]  118     clr UART1_DR
      0008F9 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008FD 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      000901 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      000906 72 5F 00 2E      [ 1]  122     clr rx1_head 
      00090A 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      00090E 84               [ 1]  124 	pop a  
      00090F 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      000910                        133 putc:: ; console output always on UART1
      000910                        134 uart1_putc:: 
      000910 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      000915 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      000918 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      000919                        148 qgetc::
      000919                        149 uart1_qgetc::
      000919 C6 00 2E         [ 1]  150 	ld a,rx1_head 
      00091C C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      00091F 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      000920                        161 getc:: ;console input
      000920                        162 uart1_getc::
      000920 CD 09 19         [ 4]  163 	call uart1_qgetc
      000923 27 FB            [ 1]  164 	jreq uart1_getc 
      000925 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      000926 A6 26            [ 1]  167 	ld a,#rx1_queue
      000928 CB 00 2E         [ 1]  168 	add a,rx1_head 
      00092B 5F               [ 1]  169 	clrw x  
      00092C 97               [ 1]  170 	ld xl,a 
      00092D F6               [ 1]  171 	ld a,(x)
      00092E 88               [ 1]  172 	push a
      00092F C6 00 2E         [ 1]  173 	ld a,rx1_head 
      000932 4C               [ 1]  174 	inc a 
      000933 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000935 C7 00 2E         [ 1]  176 	ld rx1_head,a 
      000938 84               [ 1]  177 	pop a  
      000939 85               [ 2]  178 	popw x
      00093A 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      00093B 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000947                        207 get_escape:
      000947 CD 09 20         [ 4]  208     call getc 
      00094A A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      00094C 27 02            [ 1]  210     jreq 1$
      00094E 4F               [ 1]  211     clr a
      00094F 81               [ 4]  212     ret
      000950 CD 09 20         [ 4]  213 1$: call getc 
      000953 AE 09 3B         [ 2]  214     ldw x,#convert_table
      000956                        215 2$:
      000956 F1               [ 1]  216     cp a,(x)
      000957 27 08            [ 1]  217     jreq 4$
      000959 1C 00 02         [ 2]  218     addw x,#2
      00095C 7D               [ 1]  219     tnz (x)
      00095D 26 F7            [ 1]  220     jrne 2$
      00095F 4F               [ 1]  221     clr a
      000960 81               [ 4]  222     ret 
      000961 5C               [ 1]  223 4$: incw x 
      000962 F6               [ 1]  224     ld a,(x)
      000963 A1 84            [ 1]  225     cp a,#SUP
      000965 26 05            [ 1]  226     jrne 5$
      000967 88               [ 1]  227     push a 
      000968 CD 09 20         [ 4]  228     call getc
      00096B 84               [ 1]  229     pop a 
      00096C                        230 5$:
      00096C 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      00096D                        241 puts::
      00096D F6               [ 1]  242     ld a,(x)
      00096E 27 06            [ 1]  243 	jreq 1$
      000970 CD 09 10         [ 4]  244 	call putc 
      000973 5C               [ 1]  245 	incw x 
      000974 20 F7            [ 2]  246 	jra puts 
      000976 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000977                        258 bksp:
      000977 A6 08            [ 1]  259 	ld a,#BS 
      000979 CD 09 10         [ 4]  260 	call putc 
      00097C A6 20            [ 1]  261 	ld a,#SPACE 
      00097E CD 09 10         [ 4]  262 	call putc 
      000981 A6 08            [ 1]  263 	ld a,#BS 
      000983 CD 09 10         [ 4]  264 	call putc 
      000986 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      000987                        274 delete_nchar:
      000987 88               [ 1]  275 	push a 
      000988 0D 01            [ 1]  276 0$:	tnz (1,sp)
      00098A 27 07            [ 1]  277 	jreq 1$
      00098C CD 09 77         [ 4]  278 	call bksp 
      00098F 0A 01            [ 1]  279 	dec (1,sp)
      000991 20 F5            [ 2]  280 	jra 0$
      000993 84               [ 1]  281 1$:	pop a 
      000994 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      000995                        290 send_escape:
      000995 A6 1B            [ 1]  291 	ld a,#ESC 
      000997 CD 09 10         [ 4]  292 	call putc 
      00099A A6 5B            [ 1]  293 	ld a,#'[
      00099C CD 09 10         [ 4]  294 	call putc 
      00099F 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      0009A0                        311 send_parameter:
      0009A0 89               [ 2]  312 	pushw x 
      0009A1 5F               [ 1]  313 	clrw x 
      0009A2 97               [ 1]  314 	ld xl,a 
      0009A3 A6 0A            [ 1]  315 	ld a,#10 
      0009A5 62               [ 2]  316 	div x,a 
      0009A6 95               [ 1]  317 	ld xh,a 
      0009A7 9F               [ 1]  318 	ld a,xl
      0009A8 4D               [ 1]  319     tnz a 
      0009A9 27 0B            [ 1]  320     jreq 2$
      0009AB A1 09            [ 1]  321 	cp a,#9 
      0009AD 23 02            [ 2]  322 	jrule 1$
      0009AF A6 09            [ 1]  323 	ld a,#9
      0009B1                        324 1$:
      0009B1 AB 30            [ 1]  325 	add a,#'0 
      0009B3 CD 09 10         [ 4]  326 	call putc
      0009B6 9E               [ 1]  327 2$:	ld a,xh 
      0009B7 AB 30            [ 1]  328 	add a,#'0
      0009B9 CD 09 10         [ 4]  329 	call putc 
      0009BC 85               [ 2]  330 	popw x 
      0009BD 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      0009BE                        344 move_left:
      0009BE 88               [ 1]  345 	push a 
      0009BF CD 09 95         [ 4]  346 	call send_escape
      0009C2 84               [ 1]  347     pop a
      0009C3 CD 09 A0         [ 4]  348 	call send_parameter 
      0009C6 A6 44            [ 1]  349 	ld a,#'D 
      0009C8 CD 09 10         [ 4]  350 	call putc 
      0009CB 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0009CC                        362 move_right:
      0009CC 88               [ 1]  363 	push a 
      0009CD CD 09 95         [ 4]  364 	call send_escape
      0009D0 84               [ 1]  365     pop a
      0009D1 CD 09 A0         [ 4]  366 	call send_parameter 
      0009D4 A6 43            [ 1]  367 	ld a,#'C 
      0009D6 CD 09 10         [ 4]  368 	call putc 
      0009D9 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      0009DA                        379 spaces::
      0009DA A6 20            [ 1]  380 	ld a,#SPACE 
      0009DC 5D               [ 2]  381 1$:	tnzw x
      0009DD 27 06            [ 1]  382 	jreq 9$
      0009DF CD 09 10         [ 4]  383 	call putc 
      0009E2 5A               [ 2]  384 	decw x
      0009E3 20 F7            [ 2]  385 	jra 1$
      0009E5                        386 9$: 
      0009E5 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   tib     updated 
                                    399 ;   Y       updated  
                                    400 ;-------------------------
                           000001   401 	IPOS=1
                           000002   402 	KCHAR=2 
                           000003   403     LLEN=3 
                           000003   404 	VSIZE=3 
      0009E6                        405 insert_char: 
      0009E6                        406 	_vars VSIZE 
      0009E6 52 03            [ 2]    1     sub sp,#VSIZE 
      0009E8 6B 02            [ 1]  407     ld (KCHAR,sp),a 
      0009EA 9E               [ 1]  408     ld a,xh 
      0009EB 6B 01            [ 1]  409 	ld (IPOS,sp),a
      0009ED 9F               [ 1]  410     ld a,xl 
      0009EE 6B 03            [ 1]  411     ld (LLEN,sp),a  
      0009F0 93               [ 1]  412     ldw x,y
      0009F1 5C               [ 1]  413     incw x 
      0009F2 7B 03            [ 1]  414     ld a,(LLEN,sp)
      0009F4 10 01            [ 1]  415     sub a,(IPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0009F6 4C               [ 1]  416     inc a 
      0009F7 C7 00 0E         [ 1]  417     ld acc8,a 
      0009FA 72 5F 00 0D      [ 1]  418     clr acc16
      0009FE CD 13 B7         [ 4]  419     call move
      000A01 90 AE 16 68      [ 2]  420     ldw y,#tib 
      000A05 7B 01            [ 1]  421     ld a,(IPOS,sp)
      000A07 C7 00 0E         [ 1]  422     ld acc8,a 
      000A0A 72 B9 00 0D      [ 2]  423     addw y,acc16 
      000A0E 7B 02            [ 1]  424     ld a,(KCHAR,sp)
      000A10 90 F7            [ 1]  425     ld (y),a
      000A12 90 5C            [ 1]  426     incw y  
      000A14 7B 01            [ 1]  427     ld a,(IPOS,sp)
      000A16 CD 09 BE         [ 4]  428     call move_left
      000A19 AE 16 68         [ 2]  429     ldw x,#tib 
      000A1C CD 09 6D         [ 4]  430     call puts 
      000A1F 7B 03            [ 1]  431     ld a,(LLEN,sp)
      000A21 10 01            [ 1]  432     sub a,(IPOS,sp) 
      000A23 CD 09 BE         [ 4]  433     call move_left 
      000A26                        434 	_drop VSIZE 
      000A26 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A28 81               [ 4]  435 	ret 
                                    436 
                                    437 
                                    438 ;--------------------------
                                    439 ; delete character under cursor
                                    440 ; input:
                                    441 ;   A       line length   
                                    442 ;   xl      delete position
                                    443 ;   Y       line pointer 
                                    444 ;-------------------------
                           000001   445 	CPOS=1
                           000002   446 	LLEN=2
                           000002   447 	VSIZE=2
      000A29                        448 delete_under:
      000A29                        449 	_vars VSIZE 
      000A29 52 02            [ 2]    1     sub sp,#VSIZE 
      000A2B 6B 02            [ 1]  450     ld (LLEN,sp),a 
      000A2D 9F               [ 1]  451     ld a,xl 
      000A2E 6B 01            [ 1]  452     ld (CPOS,sp),a 
      000A30 93               [ 1]  453     ldw x,y ; move destination
      000A31 90 5C            [ 1]  454     incw y  ; move source 
      000A33 7B 02            [ 1]  455     ld a,(LLEN,sp)
      000A35 10 01            [ 1]  456     sub a,(CPOS,sp)
      000A37 4C               [ 1]  457     inc a ; move including zero at end.
      000A38 C7 00 0E         [ 1]  458     ld acc8,a 
      000A3B 72 5F 00 0D      [ 1]  459     clr acc16 
      000A3F CD 13 B7         [ 4]  460 	call move 
      000A42 90 AE 16 68      [ 2]  461     ldw y,#tib 
      000A46 7B 01            [ 1]  462     ld a,(CPOS,sp)
      000A48 C7 00 0E         [ 1]  463     ld acc8,a 
      000A4B 72 B9 00 0D      [ 2]  464     addw y,acc16 
      000A4F 93               [ 1]  465     ldw x,y 
      000A50 CD 09 6D         [ 4]  466     call puts 
      000A53 A6 20            [ 1]  467     ld a,#SPACE  
      000A55 CD 09 10         [ 4]  468     call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000A58 7B 02            [ 1]  469     ld a,(LLEN,sp)
      000A5A 10 01            [ 1]  470     sub a,(CPOS,sp)
      000A5C CD 09 BE         [ 4]  471     call move_left 
      000A5F 0A 02            [ 1]  472     dec (LLEN,sp)
      000A61                        473 	_drop VSIZE 
      000A61 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A63 81               [ 4]  474 	ret 
                                    475 
                                    476 ;-----------------------------
                                    477 ; send ANSI sequence to delete
                                    478 ; whole line. Cursor position
                                    479 ; is not updated.
                                    480 ; ANSI: ESC[2K
                                    481 ; input:
                                    482 ;   none
                                    483 ; output:
                                    484 ;   none 
                                    485 ;-----------------------------
      000A64                        486 delete_line:
      000A64 CD 09 95         [ 4]  487     call send_escape
      000A67 A6 32            [ 1]  488 	ld a,#'2
      000A69 CD 09 10         [ 4]  489 	call putc 
      000A6C A6 4B            [ 1]  490 	ld a,#'K 
      000A6E CD 09 10         [ 4]  491 	call putc 
      000A71 81               [ 4]  492 	ret 
                                    493 
                                    494 
                                    495 
                                    496 ;------------------------------------
                                    497 ; read a line of text from terminal
                                    498 ;  control keys: 
                                    499 ;    BS   efface caractère à gauche 
                                    500 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    501 ;    CTRL_R  edit previous line.
                                    502 ;    CTRL_D  delete line  
                                    503 ;    HOME  go to start of line  
                                    504 ;    KEY_END  go to end of line 
                                    505 ;    ARROW_LEFT  move cursor left 
                                    506 ;    ARROW_RIGHT  move cursor right 
                                    507 ;    CTRL_O  toggle between insert/overwrite
                                    508 ; input:
                                    509 ;	none
                                    510 ; local variable on stack:
                                    511 ;	LL  line length
                                    512 ;   RXCHAR last received character 
                                    513 ; output:
                                    514 ;   text in tib  buffer
                                    515 ;   count  line length 
                                    516 ;------------------------------------
                                    517 	; local variables
                           000001   518 	LL_HB=1  ; line length high byte 
                           000001   519 	RXCHAR = 1 ; last char received
                           000002   520 	LL = 2  ; accepted line length
                           000003   521 	CPOS=3  ; cursor position 
                           000004   522 	OVRWR=4 ; overwrite flag 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                           000004   523 	VSIZE=4 
      000A72                        524 readln::
      000A72 90 89            [ 2]  525 	pushw y 
      000A74                        526 	_vars VSIZE 
      000A74 52 04            [ 2]    1     sub sp,#VSIZE 
      000A76 5F               [ 1]  527 	clrw x 
      000A77 1F 02            [ 2]  528 	ldw (LL,sp),x 
      000A79 1F 03            [ 2]  529 	ldw (CPOS,sp),x 
      000A7B 03 04            [ 1]  530 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A7D 90 AE 16 68      [ 2]  531  	ldw y,#tib ; terminal input buffer
      000A81                        532 readln_loop:
      000A81 CD 09 20         [ 4]  533 	call getc
      000A84 6B 01            [ 1]  534 	ld (RXCHAR,sp),a
      000A86 A1 1B            [ 1]  535     cp a,#ESC 
      000A88 26 05            [ 1]  536     jrne 0$
      000A8A CD 09 47         [ 4]  537     call get_escape 
      000A8D 6B 01            [ 1]  538     ld (RXCHAR,sp),a 
      000A8F A1 0D            [ 1]  539 0$:	cp a,#CR
      000A91 26 03            [ 1]  540 	jrne 1$
      000A93 CC 0C 0E         [ 2]  541 	jp readln_quit
      000A96 A1 0A            [ 1]  542 1$:	cp a,#LF 
      000A98 26 03            [ 1]  543 	jrne 2$ 
      000A9A CC 0C 0E         [ 2]  544 	jp readln_quit
      000A9D                        545 2$:
      000A9D A1 08            [ 1]  546 	cp a,#BS
      000A9F 26 12            [ 1]  547 	jrne 3$
                                    548 ; delete left 
      000AA1 0D 03            [ 1]  549     tnz (CPOS,sp)
      000AA3 27 DC            [ 1]  550     jreq readln_loop 
      000AA5 A6 01            [ 1]  551     ld a,#1 
      000AA7 CD 09 BE         [ 4]  552     call move_left
      000AAA 0A 03            [ 1]  553     dec (CPOS,sp)
      000AAC 90 5A            [ 2]  554     decw y 
      000AAE 7B 03            [ 1]  555     ld a,(CPOS,sp) 
      000AB0 CC 0B BA         [ 2]  556     jp 12$
      000AB3                        557 3$:
      000AB3 A1 04            [ 1]  558 	cp a,#CTRL_D
      000AB5 26 1A            [ 1]  559 	jrne 4$
                                    560 ;delete line 
      000AB7 CD 0A 64         [ 4]  561 	call delete_line 
      000ABA 7B 03            [ 1]  562     ld a,(CPOS,sp)
      000ABC 4C               [ 1]  563     inc a 
      000ABD CD 09 BE         [ 4]  564     call move_left 
      000AC0 A6 3E            [ 1]  565 	ld a,#'> 
      000AC2 CD 09 10         [ 4]  566 	call putc 
      000AC5 90 AE 16 68      [ 2]  567 	ldw y,#tib
      000AC9 90 7F            [ 1]  568 	clr (y)
      000ACB 0F 02            [ 1]  569 	clr (LL,sp)
      000ACD 0F 03            [ 1]  570 	clr (CPOS,sp)
      000ACF 20 B0            [ 2]  571 	jra readln_loop
      000AD1                        572 4$:
      000AD1 A1 12            [ 1]  573 	cp a,#CTRL_R 
      000AD3 26 1E            [ 1]  574 	jrne 5$
                                    575 ;repeat line 
      000AD5 0D 02            [ 1]  576 	tnz (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000AD7 26 A8            [ 1]  577 	jrne readln_loop
      000AD9 90 AE 16 68      [ 2]  578 	ldw y,#tib 
      000ADD 93               [ 1]  579 	ldw x,y
      000ADE CD 13 8B         [ 4]  580 	call strlen
      000AE1 4D               [ 1]  581 	tnz a  
      000AE2 27 9D            [ 1]  582 	jreq readln_loop
      000AE4 6B 02            [ 1]  583 	ld (LL,sp),a 
      000AE6 6B 03            [ 1]  584     ld (CPOS,sp),a
      000AE8 93               [ 1]  585 	ldw x,y  
      000AE9 CD 09 6D         [ 4]  586 	call puts
      000AEC 0F 01            [ 1]  587 	clr (LL_HB,sp)
      000AEE 72 F9 01         [ 2]  588 	addw y,(LL_HB,sp)
      000AF1 20 8E            [ 2]  589 	jra readln_loop 
      000AF3                        590 5$:
      000AF3 A1 05            [ 1]  591 	cp a,#CTRL_E 
      000AF5 26 41            [ 1]  592 	jrne 6$
                                    593 ;edit line number 
      000AF7 AE 16 68         [ 2]  594 	ldw x,#tib 
      000AFA CD 18 38         [ 4]  595 	call atoi24
      000AFD CE 00 0D         [ 2]  596 	ldw x,acc16
      000B00 CD 0C 4A         [ 4]  597 	call search_lineno
      000B03 5D               [ 2]  598 	tnzw x 
      000B04 26 03            [ 1]  599 	jrne 51$
                                    600 ;	clr (LL,sp)
                                    601 ;	ldw y,#tib
                                    602 ;   clr (y) 	
      000B06 CC 0C 0E         [ 2]  603 	jp readln_quit  
      000B09                        604 51$:
      000B09 CF 00 04         [ 2]  605 	ldw basicptr,x
      000B0C E6 02            [ 1]  606 	ld a,(2,x)
      000B0E C7 00 03         [ 1]  607 	ld count,a 
      000B11 90 AE 16 68      [ 2]  608 	ldw y,#tib 
      000B15 CD 11 A7         [ 4]  609 	call decompile 
      000B18 0F 01            [ 1]  610 	clr (LL_HB,sp)
      000B1A A6 0D            [ 1]  611 	ld a,#CR 
      000B1C CD 09 10         [ 4]  612 	call putc 
      000B1F A6 3E            [ 1]  613 	ld a,#'>
      000B21 CD 09 10         [ 4]  614 	call putc
      000B24 AE 16 68         [ 2]  615     ldw x,#tib  
      000B27 CD 13 8B         [ 4]  616 	call strlen 
      000B2A 6B 02            [ 1]  617 	ld (LL,sp),a 
      000B2C CD 09 6D         [ 4]  618 	call puts 
      000B2F 90 93            [ 1]  619 	ldw y,x
      000B31 7B 02            [ 1]  620     ld a,(LL,sp)
      000B33 6B 03            [ 1]  621     ld (CPOS,sp),a  
      000B35 CC 0A 81         [ 2]  622 	jp readln_loop
      000B38                        623 6$:
      000B38 A1 81            [ 1]  624 	cp a,#ARROW_RIGHT
      000B3A 26 15            [ 1]  625    	jrne 7$ 
                                    626 ; right arrow
      000B3C 7B 03            [ 1]  627 	ld a,(CPOS,sp)
      000B3E 11 02            [ 1]  628     cp a,(LL,sp)
      000B40 2B 03            [ 1]  629     jrmi 61$
      000B42 CC 0A 81         [ 2]  630     jp readln_loop 
      000B45                        631 61$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000B45 A6 01            [ 1]  632     ld a,#1 
      000B47 CD 09 CC         [ 4]  633 	call move_right 
      000B4A 0C 03            [ 1]  634 	inc (CPOS,sp)
      000B4C 90 5C            [ 1]  635     incw y 
      000B4E CC 0A 81         [ 2]  636     jp readln_loop 
      000B51 A1 80            [ 1]  637 7$: cp a,#ARROW_LEFT  
      000B53 26 13            [ 1]  638 	jrne 8$
                                    639 ; left arrow 
      000B55 0D 03            [ 1]  640 	tnz (CPOS,sp)
      000B57 26 03            [ 1]  641 	jrne 71$
      000B59 CC 0A 81         [ 2]  642 	jp readln_loop
      000B5C                        643 71$:
      000B5C A6 01            [ 1]  644     ld a,#1 
      000B5E CD 09 BE         [ 4]  645 	call move_left 
      000B61 0A 03            [ 1]  646 	dec (CPOS,sp)
      000B63 90 5A            [ 2]  647     decw y 
      000B65 CC 0A 81         [ 2]  648 	jp readln_loop 
      000B68 A1 82            [ 1]  649 8$: cp a,#HOME  
      000B6A 26 0E            [ 1]  650 	jrne 9$
                                    651 ; HOME 
      000B6C 7B 03            [ 1]  652     ld a,(CPOS,sp)
      000B6E CD 09 BE         [ 4]  653     call move_left 
      000B71 0F 03            [ 1]  654 	clr (CPOS,sp)
      000B73 90 AE 16 68      [ 2]  655     ldw y,#tib 
      000B77 CC 0A 81         [ 2]  656 	jp readln_loop  
      000B7A A1 83            [ 1]  657 9$: cp a,#KEY_END  
      000B7C 26 26            [ 1]  658 	jrne 10$
                                    659 ; KEY_END 
      000B7E 7B 03            [ 1]  660 	ld a,(CPOS,sp)
      000B80 11 02            [ 1]  661 	cp a,(LL,sp)
      000B82 26 03            [ 1]  662 	jrne 91$
      000B84 CC 0A 81         [ 2]  663 	jp readln_loop 
      000B87                        664 91$:
      000B87 7B 02            [ 1]  665 	ld a,(LL,sp)
      000B89 10 03            [ 1]  666 	sub a,(CPOS,sp)
      000B8B CD 09 CC         [ 4]  667 	call move_right 
      000B8E 7B 02            [ 1]  668 	ld a,(LL,sp)
      000B90 6B 03            [ 1]  669 	ld (CPOS,sp),a
      000B92 90 AE 16 68      [ 2]  670     ldw y,#tib
      000B96 72 5F 00 0D      [ 1]  671     clr acc16 
      000B9A C7 00 0E         [ 1]  672     ld acc8,a 
      000B9D 72 B9 00 0D      [ 2]  673     addw y,acc16  
      000BA1 CC 0A 81         [ 2]  674 	jp readln_loop 
      000BA4 A1 0F            [ 1]  675 10$: cp a,#CTRL_O
      000BA6 26 08            [ 1]  676 	jrne 11$ 
                                    677 ; toggle between insert/overwrite
      000BA8 03 04            [ 1]  678 	cpl (OVRWR,sp)
      000BAA CD 25 5A         [ 4]  679 	call beep_1khz
      000BAD CC 0A 81         [ 2]  680 	jp readln_loop 
      000BB0 A1 84            [ 1]  681 11$: cp a,#SUP 
      000BB2 26 11            [ 1]  682     jrne final_test 
                                    683 ; del character under cursor 
      000BB4 7B 03            [ 1]  684     ld a,(CPOS,sp)
      000BB6 11 02            [ 1]  685     cp a,(LL,sp)
      000BB8 2A 08            [ 1]  686     jrpl 13$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      000BBA                        687 12$:
      000BBA 97               [ 1]  688     ld xl,a    ; cursor position 
      000BBB 7B 02            [ 1]  689     ld a,(LL,sp)  ; line length
      000BBD CD 0A 29         [ 4]  690     call delete_under
      000BC0 0A 02            [ 1]  691     dec (LLEN,sp)
      000BC2                        692 13$:
      000BC2 CC 0A 81         [ 2]  693     jp readln_loop 
      000BC5                        694 final_test:
      000BC5 A1 20            [ 1]  695 	cp a,#SPACE
      000BC7 2A 03            [ 1]  696 	jrpl accept_char
      000BC9 CC 0A 81         [ 2]  697 	jp readln_loop
      000BCC                        698 accept_char:
      000BCC A6 4F            [ 1]  699 	ld a,#TIB_SIZE-1
      000BCE 11 02            [ 1]  700 	cp a, (LL,sp)
      000BD0 2A 03            [ 1]  701 	jrpl 1$
      000BD2 CC 0A 81         [ 2]  702 	jp readln_loop
      000BD5 0D 04            [ 1]  703 1$:	tnz (OVRWR,sp)
      000BD7 26 18            [ 1]  704 	jrne overwrite
                                    705 ; insert mode 
      000BD9 7B 03            [ 1]  706     ld a,(CPOS,sp)
      000BDB 11 02            [ 1]  707     cp a,(LL,sp)
      000BDD 27 12            [ 1]  708     jreq overwrite
      000BDF 7B 02            [ 1]  709     ld a,(LL,sp)
      000BE1 97               [ 1]  710     ld xl,a 
      000BE2 7B 03            [ 1]  711     ld a,(CPOS,sp)
      000BE4 95               [ 1]  712     ld xh,a
      000BE5 7B 01            [ 1]  713     ld a,(RXCHAR,sp)
      000BE7 CD 09 E6         [ 4]  714     call insert_char
      000BEA 0C 02            [ 1]  715     inc (LLEN,sp)
      000BEC 0C 03            [ 1]  716     inc (CPOS,sp)	
      000BEE CC 0A 81         [ 2]  717     jp readln_loop 
      000BF1                        718 overwrite:
      000BF1 7B 01            [ 1]  719 	ld a,(RXCHAR,sp)
      000BF3 90 F7            [ 1]  720 	ld (y),a
      000BF5 90 5C            [ 1]  721     incw y
      000BF7 CD 09 10         [ 4]  722     call putc 
      000BFA 7B 03            [ 1]  723 	ld a,(CPOS,sp)
      000BFC 11 02            [ 1]  724 	cp a,(LL,sp)
      000BFE 2B 09            [ 1]  725 	jrmi 1$
      000C00 90 7F            [ 1]  726 	clr (y)
      000C02 0C 02            [ 1]  727 	inc (LL,sp)
      000C04 0C 03            [ 1]  728     inc (CPOS,sp)
      000C06 CC 0A 81         [ 2]  729 	jp readln_loop 
      000C09                        730 1$:	
      000C09 0C 03            [ 1]  731 	inc (CPOS,sp)
      000C0B CC 0A 81         [ 2]  732 	jp readln_loop 
      000C0E                        733 readln_quit:
      000C0E 90 AE 16 68      [ 2]  734 	ldw y,#tib
      000C12 0F 01            [ 1]  735     clr (LL_HB,sp) 
      000C14 72 F9 01         [ 2]  736     addw y,(LL_HB,sp)
      000C17 90 7F            [ 1]  737     clr (y)
      000C19 7B 02            [ 1]  738 	ld a,(LL,sp)
      000C1B C7 00 03         [ 1]  739 	ld count,a 
      000C1E A6 0D            [ 1]  740 	ld a,#CR
      000C20 CD 09 10         [ 4]  741 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000C23                        742 	_drop VSIZE 
      000C23 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C25 90 85            [ 2]  743 	popw y 
      000C27 81               [ 4]  744 	ret
                                    745 
                                    746 ;------------------------------
                                    747 ; print byte  in hexadecimal 
                                    748 ; on console
                                    749 ; input:
                                    750 ;    A		byte to print
                                    751 ;------------------------------
      000C28                        752 print_hex::
      000C28 88               [ 1]  753 	push a 
      000C29 4E               [ 1]  754 	swap a 
      000C2A CD 0C 3F         [ 4]  755 	call to_hex_char 
      000C2D CD 09 10         [ 4]  756 	call putc 
      000C30 7B 01            [ 1]  757     ld a,(1,sp) 
      000C32 CD 0C 3F         [ 4]  758 	call to_hex_char
      000C35 CD 09 10         [ 4]  759 	call putc
      000C38 A6 20            [ 1]  760 	ld a,#SPACE 
      000C3A CD 09 10         [ 4]  761 	call putc 
      000C3D 84               [ 1]  762 	pop a 
      000C3E 81               [ 4]  763 	ret 
                                    764 
                                    765 ;----------------------------------
                                    766 ; convert to hexadecimal digit 
                                    767 ; input:
                                    768 ;   A       digit to convert 
                                    769 ; output:
                                    770 ;   A       hexdecimal character 
                                    771 ;----------------------------------
      000C3F                        772 to_hex_char::
      000C3F A4 0F            [ 1]  773 	and a,#15 
      000C41 A1 09            [ 1]  774 	cp a,#9 
      000C43 23 02            [ 2]  775 	jrule 1$ 
      000C45 AB 07            [ 1]  776 	add a,#7
      000C47 AB 30            [ 1]  777 1$: add a,#'0 
      000C49 81               [ 4]  778 	ret 
                                    779 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C4A                         51 search_lineno::
      000C4A                         52 	_vars VSIZE
      000C4A 52 02            [ 2]    1     sub sp,#VSIZE 
      000C4C 0F 01            [ 1]   53 	clr (LL,sp)
      000C4E 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C52 4D               [ 1]   55 	tnz a 
      000C53 27 04            [ 1]   56 	jreq search_ln_loop
      000C55 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C59                         58 search_ln_loop:
      000C59 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C5D 2A 10            [ 1]   60 	jrpl 8$
      000C5F 90 F3            [ 1]   61 	cpw x,(y)
      000C61 27 0E            [ 1]   62 	jreq 9$
      000C63 2B 0A            [ 1]   63 	jrmi 8$ 
      000C65 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C68 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C6A 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C6D 20 EA            [ 2]   67 	jra search_ln_loop 
      000C6F                         68 8$: 
      000C6F 5F               [ 1]   69 	clrw x 	
      000C70 51               [ 1]   70 	exgw x,y 
      000C71                         71 9$: _drop VSIZE
      000C71 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C73 51               [ 1]   72 	exgw x,y   
      000C74 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C75                         83 del_line: 
      000C75                         84 	_vars VSIZE 
      000C75 52 04            [ 2]    1     sub sp,#VSIZE 
      000C77 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C79 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C7B 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C7D 90 93            [ 1]   88 	ldw y,x  
      000C7F 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C82 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C84 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000C88 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C8B 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C8F 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C91 CD 13 B7         [ 4]   95 	call move
      000C94 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000C98 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C9B 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000C9F                         99 	_drop VSIZE     
      000C9F 5B 04            [ 2]    1     addw sp,#VSIZE 
      000CA1 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000CA2                        115 create_gap:
      000CA2                        116 	_vars VSIZE
      000CA2 52 06            [ 2]    1     sub sp,#VSIZE 
      000CA4 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000CA6 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000CA8 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000CAC 90 93            [ 1]  120 	ldw y,x ; SRC
      000CAE 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000CB2 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000CB4 CE 00 1D         [ 2]  124 	ldw x,txtend 
      000CB7 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000CBA CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000CBD 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000CBF CD 13 B7         [ 4]  128 	call move
      000CC2 CE 00 1D         [ 2]  129 	ldw x,txtend
      000CC5 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000CC8 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      000CCB                        132 9$:	_drop VSIZE 
      000CCB 5B 06            [ 2]    1     addw sp,#VSIZE 
      000CCD 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000CCE                        150 insert_line:
      000CCE                        151 	_vars VSIZE 
      000CCE 52 08            [ 2]    1     sub sp,#VSIZE 
      000CD0 CE 00 1D         [ 2]  152 	ldw x,txtend  
      000CD3 C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000CD6 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000CD8 AE 00 02         [ 2]  156 	ldw x,#2 
      000CDB 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000CDF A1 03            [ 1]  158 	cp a,#3
      000CE1 27 5A            [ 1]  159 	jreq insert_ln_exit
      000CE3 5F               [ 1]  160 	clrw x 
      000CE4 97               [ 1]  161 	ld xl,a
      000CE5 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000CE7 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000CEA 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000CEC CE 00 1D         [ 2]  165 	ldw x,txtend 
      000CEF 20 38            [ 2]  166 	jra 4$
      000CF1 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000CF5 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000CF7 AE 00 02         [ 2]  170 	ldw x,#2 
      000CFA 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000CFE 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000CFF 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000D01 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000D03 4F               [ 1]  177 	clr a 
      000D04 CD 0C 4A         [ 4]  178 	call search_lineno 
      000D07 5D               [ 2]  179 	tnzw x 
      000D08 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000D0A 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000D0C 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000D0E 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000D10 CD 0C 75         [ 4]  188 	call del_line
      000D13                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000D13 A6 03            [ 1]  192 	ld a,#3
      000D15 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000D17 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000D19 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000D1B C3 00 1D         [ 2]  198 	cpw x,txtend 
      000D1E 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000D20 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000D22 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000D24 CD 0C A2         [ 4]  204 	call create_gap
      000D27 20 06            [ 2]  205 	jra 5$
      000D29                        206 4$: 
      000D29 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000D2C CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000D2F 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000D31 CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D34 90 AE 16 B8      [ 2]  212 	ldw y,#pad ;SRC 
      000D38 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D3A CD 13 B7         [ 4]  214 	call move 
      000D3D                        215 insert_ln_exit:	
      000D3D                        216 	_drop VSIZE
      000D3D 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D3F 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D40                        233 parse_quote: 
      000D40                        234 	_vars VSIZE 
      000D40 52 02            [ 2]    1     sub sp,#VSIZE 
      000D42 4F               [ 1]  235 	clr a
      000D43 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D45                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      000D45 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D48 27 24            [ 1]  239 	jreq 6$
      000D4A 72 5C 00 01      [ 1]  240 	inc in 
      000D4E 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D50 A6 5C            [ 1]  242 	ld a,#'\
      000D52 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D54 26 0A            [ 1]  244 	jrne 3$
      000D56 0F 01            [ 1]  245 	clr (PREV,sp)
      000D58 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D5A AD 1C            [ 4]  247 	callr convert_escape
      000D5C F7               [ 1]  248 	ld (x),a 
      000D5D 5C               [ 1]  249 	incw x 
      000D5E 20 E5            [ 2]  250 	jra 2$
      000D60                        251 3$:
      000D60 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000D62 A1 5C            [ 1]  253 	cp a,#'\'
      000D64 27 DD            [ 1]  254 	jreq 1$
      000D66 A1 22            [ 1]  255 	cp a,#'"
      000D68 27 04            [ 1]  256 	jreq 6$ 
      000D6A F7               [ 1]  257 	ld (x),a 
      000D6B 5C               [ 1]  258 	incw x 
      000D6C 20 D7            [ 2]  259 	jra 2$
      000D6E                        260 6$:
      000D6E 7F               [ 1]  261 	clr (x)
      000D6F 5C               [ 1]  262 	incw x 
      000D70 90 93            [ 1]  263 	ldw y,x 
      000D72 5F               [ 1]  264 	clrw x 
      000D73 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000D75                        266 	_drop VSIZE
      000D75 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D77 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000D78                        278 convert_escape:
      000D78 89               [ 2]  279 	pushw x 
      000D79 AE 0D 8D         [ 2]  280 	ldw x,#escaped 
      000D7C F1               [ 1]  281 1$:	cp a,(x)
      000D7D 27 06            [ 1]  282 	jreq 2$
      000D7F 7D               [ 1]  283 	tnz (x)
      000D80 27 09            [ 1]  284 	jreq 3$
      000D82 5C               [ 1]  285 	incw x 
      000D83 20 F7            [ 2]  286 	jra 1$
      000D85 1D 0D 8D         [ 2]  287 2$: subw x,#escaped 
      000D88 9F               [ 1]  288 	ld a,xl 
      000D89 AB 07            [ 1]  289 	add a,#7
      000D8B 85               [ 2]  290 3$:	popw x 
      000D8C 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    292 
      000D8D 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000D95                        310 parse_integer: ; { -- n }
      000D95 89               [ 2]  311 	pushw x 	
      000D96 4B 00            [ 1]  312 	push #0 ; TCHAR
      000D98 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000D9A A1 24            [ 1]  314 	cp a,#'$
      000D9C 26 04            [ 1]  315 	jrne 2$ 
      000D9E                        316     _drop #1
      000D9E 5B 01            [ 2]    1     addw sp,##1 
      000DA0 4B 10            [ 1]  317 	push #16  ; BASE=16
      000DA2 F7               [ 1]  318 2$:	ld (x),a 
      000DA3 5C               [ 1]  319 	incw x 
      000DA4 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000DA7 72 5C 00 01      [ 1]  321 	inc in 
      000DAB CD 18 2C         [ 4]  322 	call to_upper 
      000DAE 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000DB0 CD 0E 32         [ 4]  324 	call is_digit 
      000DB3 25 ED            [ 1]  325 	jrc 2$
      000DB5 A6 10            [ 1]  326 	ld a,#16 
      000DB7 11 01            [ 1]  327 	cp a,(BASE,sp)
      000DB9 26 0A            [ 1]  328 	jrne 3$ 
      000DBB 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000DBD A1 41            [ 1]  330 	cp a,#'A 
      000DBF 2B 04            [ 1]  331 	jrmi 3$ 
      000DC1 A1 47            [ 1]  332 	cp a,#'G 
      000DC3 2B DD            [ 1]  333 	jrmi 2$ 
      000DC5 72 5A 00 01      [ 1]  334 3$: dec in 	
      000DC9 7F               [ 1]  335     clr (x)
      000DCA 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000DCC CD 18 38         [ 4]  337 	call atoi24
      000DCF 16 03            [ 2]  338 	ldw y,(XSAVE,sp)
      000DD1 C6 00 0C         [ 1]  339 	ld a,acc24 
      000DD4 90 F7            [ 1]  340 	ld (y),a 
      000DD6 90 5C            [ 1]  341 	incw y  
      000DD8 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000DDB 90 FF            [ 2]  343 	ldw (y),x 
      000DDD 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000DE1 A6 84            [ 1]  345 	ld a,#TK_INTGR
      000DE3                        346 	_drop VSIZE  
      000DE3 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DE5 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000DE6                        364 parse_binary: ; { -- n }
      000DE6 4B 00            [ 1]  365 	push #0
      000DE8 4B 00            [ 1]  366 	push #0
      000DEA 4B 00            [ 1]  367 	push #0
      000DEC                        368 2$:	
      000DEC 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000DEF 72 5C 00 01      [ 1]  370 	inc in 
      000DF3 A1 30            [ 1]  371 	cp a,#'0 
      000DF5 27 06            [ 1]  372 	jreq 3$
      000DF7 A1 31            [ 1]  373 	cp a,#'1 
      000DF9 27 02            [ 1]  374 	jreq 3$ 
      000DFB 20 0B            [ 2]  375 	jra bin_exit 
      000DFD A0 30            [ 1]  376 3$: sub a,#'0 
      000DFF 46               [ 1]  377 	rrc a
      000E00 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000E02 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000E04 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000E06 20 E4            [ 2]  381 	jra 2$  
      000E08                        382 bin_exit:
      000E08 72 5A 00 01      [ 1]  383 	dec in 
      000E0C 90 93            [ 1]  384 	ldw y,x
      000E0E 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000E10 90 F7            [ 1]  386 	ld (y),a 
      000E12 90 5C            [ 1]  387 	incw y 
      000E14 1E 02            [ 2]  388 	ldw x,(BINARY+1,sp)
      000E16 90 FF            [ 2]  389 	ldw (y),x 
      000E18 72 A9 00 02      [ 2]  390 	addw y,#2  
      000E1C A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000E1E                        392 	_drop VSIZE 
      000E1E 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E20 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000E21                        402 is_alpha::
      000E21 A1 41            [ 1]  403 	cp a,#'A 
      000E23 8C               [ 1]  404 	ccf 
      000E24 24 0B            [ 1]  405 	jrnc 9$ 
      000E26 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000E28 25 07            [ 1]  407 	jrc 9$ 
      000E2A A1 61            [ 1]  408 	cp a,#'a 
      000E2C 8C               [ 1]  409 	ccf 
      000E2D 24 02            [ 1]  410 	jrnc 9$
      000E2F A1 7B            [ 1]  411 	cp a,#'z+1
      000E31 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E32                        421 is_digit::
      000E32 A1 30            [ 1]  422 	cp a,#'0
      000E34 25 03            [ 1]  423 	jrc 1$
      000E36 A1 3A            [ 1]  424     cp a,#'9+1
      000E38 8C               [ 1]  425 	ccf 
      000E39 8C               [ 1]  426 1$:	ccf 
      000E3A 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E3B                        438 is_alnum::
      000E3B CD 0E 32         [ 4]  439 	call is_digit
      000E3E 25 03            [ 1]  440 	jrc 1$ 
      000E40 CD 0E 21         [ 4]  441 	call is_alpha
      000E43 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000E44                        453 is_symbol_char: 
      000E44 A1 5F            [ 1]  454 	cp a,#'_ 
      000E46 26 03            [ 1]  455 	jrne 1$
      000E48 99               [ 1]  456 	scf 
      000E49 20 03            [ 2]  457 	jra 9$ 
      000E4B CD 0E 3B         [ 4]  458 1$:	call is_alnum 
      000E4E 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E4F                        473 parse_symbol:
      000E4F 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E50                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E50 CD 18 2C         [ 4]  477 	call to_upper  
      000E53 F7               [ 1]  478 	ld (x), a 
      000E54 5C               [ 1]  479 	incw x
      000E55 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E58 72 5C 00 01      [ 1]  481 	inc in 
      000E5C CD 0E 44         [ 4]  482 	call is_symbol_char 
      000E5F 25 EF            [ 1]  483 	jrc symb_loop 
      000E61 7F               [ 1]  484 	clr (x)
      000E62 72 5A 00 01      [ 1]  485 	dec in  
      000E66 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000E67                        502 parse_keyword: 
      000E67 89               [ 2]  503 	pushw x ; preserve *symbol 
      000E68 CD 0E 4F         [ 4]  504 	call parse_symbol
      000E6B 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000E6D E6 02            [ 1]  506 	ld a,(2,x)
      000E6F 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000E71 E6 01            [ 1]  509 	ld a,(1,x) 
      000E73 A0 41            [ 1]  510 	sub a,#'A 
      000E75 AE 00 03         [ 2]  511 	ldw x,#3 
      000E78 42               [ 4]  512 	mul x,a 
      000E79 1C 00 30         [ 2]  513 	addw x,#vars 
      000E7C A6 85            [ 1]  514 	ld a,#TK_VAR 
      000E7E 20 36            [ 2]  515 	jra 4$ 
      000E80                        516 2$: ; check for keyword, otherwise syntax error.
      000E80                        517 	_ldx_dict kword_dict ; dictionary entry point
      000E80 AE 32 CE         [ 2]    1     ldw x,#kword_dict+2
      000E83 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000E85 90 5C            [ 1]  519 	incw y 
      000E87 CD 18 BB         [ 4]  520 	call search_dict
      000E8A 4D               [ 1]  521 	tnz a
      000E8B 26 29            [ 1]  522 	jrne 4$
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000E8D 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000E8F A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000E91 90 F7            [ 1]  527 	ld (y),a 
      000E93 90 5C            [ 1]  528 	incw y
      000E95 93               [ 1]  529 	ldw x,y 
      000E96 CD 13 8B         [ 4]  530 	call strlen
      000E99 A1 0F            [ 1]  531 	cp a,#15 
      000E9B 23 02            [ 2]  532 	jrule 22$ 
      000E9D A6 0F            [ 1]  533 	ld a,#15
      000E9F                        534 22$:	
      000E9F 88               [ 1]  535 	push a 
      000EA0                        536 24$:
      000EA0 90 F6            [ 1]  537     ld a,(y)
      000EA2 27 09            [ 1]  538 	jreq 3$
      000EA4 90 5C            [ 1]  539 	incw y
      000EA6 0A 01            [ 1]  540 	dec (1,sp) 
      000EA8 26 F6            [ 1]  541 	jrne 24$
      000EAA 4F               [ 1]  542 	clr a 
      000EAB 90 F7            [ 1]  543 	ld (y),a 
      000EAD 90 5C            [ 1]  544 3$: incw y 
      000EAF                        545 	_drop 1 
      000EAF 5B 01            [ 2]    1     addw sp,#1 
      000EB1 A6 03            [ 1]  546 	ld a,#TK_LABEL 
      000EB3 5F               [ 1]  547 	clrw x 	
      000EB4 20 1B            [ 2]  548 	jra 5$ 
      000EB6                        549 4$:	
      000EB6 16 01            [ 2]  550 	ldw y,(XFIRST,sp)
      000EB8 A1 87            [ 1]  551 	cp a,#TK_NOT 
      000EBA 2B 06            [ 1]  552 	jrmi 41$
      000EBC 90 F7            [ 1]  553 	ld (y),a 
      000EBE 90 5C            [ 1]  554 	incw y 
      000EC0 20 0F            [ 2]  555 	jra 5$ 
      000EC2                        556 41$:	
      000EC2 A3 1C 3A         [ 2]  557 	cpw x,#let  
      000EC5 27 0A            [ 1]  558 	jreq 5$  ; don't compile LET command 
      000EC7 90 F7            [ 1]  559 	ld (y),a 
      000EC9 90 5C            [ 1]  560 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000ECB 90 FF            [ 2]  561 	ldw (y),x
      000ECD 72 A9 00 02      [ 2]  562 	addw y,#2  
      000ED1                        563 5$:	_drop VSIZE 
      000ED1 5B 02            [ 2]    1     addw sp,#VSIZE 
      000ED3 81               [ 4]  564 	ret  	
                                    565 
                                    566 ;------------------------------------
                                    567 ; skip character c in text starting from 'in'
                                    568 ; input:
                                    569 ;	 y 		point to text buffer
                                    570 ;    a 		character to skip
                                    571 ; output:  
                                    572 ;	'in' ajusted to new position
                                    573 ;------------------------------------
                           000001   574 	C = 1 ; local var
      000ED4                        575 skip:
      000ED4 88               [ 1]  576 	push a
      000ED5 91 D6 00         [ 4]  577 1$:	ld a,([in.w],y)
      000ED8 27 0A            [ 1]  578 	jreq 2$
      000EDA 11 01            [ 1]  579 	cp a,(C,sp)
      000EDC 26 06            [ 1]  580 	jrne 2$
      000EDE 72 5C 00 01      [ 1]  581 	inc in
      000EE2 20 F1            [ 2]  582 	jra 1$
      000EE4                        583 2$: _drop 1 
      000EE4 5B 01            [ 2]    1     addw sp,#1 
      000EE6 81               [ 4]  584 	ret
                                    585 	
                                    586 
                                    587 ;------------------------------------
                                    588 ; scan text for next token
                                    589 ; input: 
                                    590 ;	X 		pointer to buffer where 
                                    591 ;	        token id and value are copied 
                                    592 ; use:
                                    593 ;	Y   pointer to text in tib 
                                    594 ; output:
                                    595 ;   A       token attribute 
                                    596 ;   X 		token value
                                    597 ;   Y       updated position in output buffer   
                                    598 ;------------------------------------
                                    599 	; use to check special character 
                                    600 	.macro _case c t  
                                    601 	ld a,#c 
                                    602 	cp a,(TCHAR,sp) 
                                    603 	jrne t
                                    604 	.endm 
                                    605 
                           000001   606 	TCHAR=1
                           000002   607 	ATTRIB=2
                           000002   608 	VSIZE=2
      000EE7                        609 get_token:: 
      000EE7                        610 	_vars VSIZE
      000EE7 52 02            [ 2]    1     sub sp,#VSIZE 
                                    611 ;	ld a,in 
                                    612 ;	sub a,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                    613 ;   jrmi 0$
                                    614 ;	clr a 
                                    615 ;	ret 
      000EE9                        616 0$: 
      000EE9 90 AE 16 68      [ 2]  617 	ldw y,#tib    	
      000EED A6 20            [ 1]  618 	ld a,#SPACE
      000EEF CD 0E D4         [ 4]  619 	call skip
      000EF2 55 00 01 00 02   [ 1]  620 	mov in.saved,in 
      000EF7 91 D6 00         [ 4]  621 	ld a,([in.w],y)
      000EFA 26 05            [ 1]  622 	jrne 1$
      000EFC 90 93            [ 1]  623 	ldw y,x 
      000EFE CC 10 98         [ 2]  624 	jp token_exit ; end of line 
      000F01 72 5C 00 01      [ 1]  625 1$:	inc in 
      000F05 CD 18 2C         [ 4]  626 	call to_upper 
      000F08 6B 01            [ 1]  627 	ld (TCHAR,sp),a 
                                    628 ; check for quoted string
      000F0A                        629 str_tst:  	
      000F0A                        630 	_case '"' nbr_tst
      000F0A A6 22            [ 1]    1 	ld a,#'"' 
      000F0C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F0E 26 0A            [ 1]    3 	jrne nbr_tst
      000F10 A6 02            [ 1]  631 	ld a,#TK_QSTR
      000F12 F7               [ 1]  632 	ld (x),a 
      000F13 5C               [ 1]  633 	incw x 
      000F14 CD 0D 40         [ 4]  634 	call parse_quote
      000F17 CC 10 98         [ 2]  635 	jp token_exit
      000F1A                        636 nbr_tst:
                                    637 ; check for hexadecimal number 
      000F1A A6 24            [ 1]  638 	ld a,#'$'
      000F1C 11 01            [ 1]  639 	cp a,(TCHAR,sp) 
      000F1E 27 17            [ 1]  640 	jreq 1$
                                    641 ;check for binary number 
      000F20 A6 26            [ 1]  642 	ld a,#'&
      000F22 11 01            [ 1]  643 	cp a,(TCHAR,sp)
      000F24 26 0A            [ 1]  644 	jrne 0$
      000F26 A6 84            [ 1]  645 	ld a,#TK_INTGR
      000F28 F7               [ 1]  646 	ld (x),a 
      000F29 5C               [ 1]  647 	incw x 
      000F2A CD 0D E6         [ 4]  648 	call parse_binary ; expect binary integer 
      000F2D CC 10 98         [ 2]  649 	jp token_exit 
                                    650 ; check for decimal number 	
      000F30 7B 01            [ 1]  651 0$:	ld a,(TCHAR,sp)
      000F32 CD 0E 32         [ 4]  652 	call is_digit
      000F35 24 0C            [ 1]  653 	jrnc 3$
      000F37 A6 84            [ 1]  654 1$:	ld a,#TK_INTGR 
      000F39 F7               [ 1]  655 	ld (x),a 
      000F3A 5C               [ 1]  656 	incw x 
      000F3B 7B 01            [ 1]  657 	ld a,(TCHAR,sp)
      000F3D CD 0D 95         [ 4]  658 	call parse_integer 
      000F40 CC 10 98         [ 2]  659 	jp token_exit 
      000F43                        660 3$: 
      000F43                        661 	_case '(' bkslsh_tst 
      000F43 A6 28            [ 1]    1 	ld a,#'(' 
      000F45 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F47 26 05            [ 1]    3 	jrne bkslsh_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      000F49 A6 06            [ 1]  662 	ld a,#TK_LPAREN
      000F4B CC 10 94         [ 2]  663 	jp token_char   	
      000F4E                        664 bkslsh_tst: ; character token 
      000F4E                        665 	_case '\',rparnt_tst
      000F4E A6 5C            [ 1]    1 	ld a,#'\' 
      000F50 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F52 26 16            [ 1]    3 	jrne rparnt_tst
      000F54 A6 04            [ 1]  666 	ld a,#TK_CHAR 
      000F56 F7               [ 1]  667 	ld (x),a 
      000F57 5C               [ 1]  668 	incw x 
      000F58 91 D6 00         [ 4]  669 	ld a,([in.w],y)
      000F5B F7               [ 1]  670 	ld (x),a 
      000F5C 5C               [ 1]  671 	incw x
      000F5D 90 93            [ 1]  672 	ldw y,x 	 
      000F5F 72 5C 00 01      [ 1]  673 	inc in  
      000F63 5F               [ 1]  674 	clrw x 
      000F64 97               [ 1]  675 	ld xl,a 
      000F65 A6 04            [ 1]  676 	ld a,#TK_CHAR 
      000F67 CC 10 98         [ 2]  677 	jp token_exit 
      000F6A                        678 rparnt_tst:		
      000F6A                        679 	_case ')' colon_tst 
      000F6A A6 29            [ 1]    1 	ld a,#')' 
      000F6C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F6E 26 05            [ 1]    3 	jrne colon_tst
      000F70 A6 07            [ 1]  680 	ld a,#TK_RPAREN 
      000F72 CC 10 94         [ 2]  681 	jp token_char
      000F75                        682 colon_tst:
      000F75                        683 	_case ':' comma_tst 
      000F75 A6 3A            [ 1]    1 	ld a,#':' 
      000F77 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F79 26 05            [ 1]    3 	jrne comma_tst
      000F7B A6 0A            [ 1]  684 	ld a,#TK_COLON 
      000F7D CC 10 94         [ 2]  685 	jp token_char  
      000F80                        686 comma_tst:
      000F80                        687 	_case COMMA sharp_tst 
      000F80 A6 2C            [ 1]    1 	ld a,#COMMA 
      000F82 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F84 26 05            [ 1]    3 	jrne sharp_tst
      000F86 A6 08            [ 1]  688 	ld a,#TK_COMMA
      000F88 CC 10 94         [ 2]  689 	jp token_char
      000F8B                        690 sharp_tst:
      000F8B                        691 	_case SHARP dash_tst 
      000F8B A6 23            [ 1]    1 	ld a,#SHARP 
      000F8D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F8F 26 05            [ 1]    3 	jrne dash_tst
      000F91 A6 09            [ 1]  692 	ld a,#TK_SHARP
      000F93 CC 10 94         [ 2]  693 	jp token_char  	 	 
      000F96                        694 dash_tst: 	
      000F96                        695 	_case '-' at_tst 
      000F96 A6 2D            [ 1]    1 	ld a,#'-' 
      000F98 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F9A 26 05            [ 1]    3 	jrne at_tst
      000F9C A6 11            [ 1]  696 	ld a,#TK_MINUS  
      000F9E CC 10 94         [ 2]  697 	jp token_char 
      000FA1                        698 at_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      000FA1                        699 	_case '@' qmark_tst 
      000FA1 A6 40            [ 1]    1 	ld a,#'@' 
      000FA3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA5 26 05            [ 1]    3 	jrne qmark_tst
      000FA7 A6 05            [ 1]  700 	ld a,#TK_ARRAY 
      000FA9 CC 10 94         [ 2]  701 	jp token_char
      000FAC                        702 qmark_tst:
      000FAC                        703 	_case '?' tick_tst 
      000FAC A6 3F            [ 1]    1 	ld a,#'?' 
      000FAE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FB0 26 12            [ 1]    3 	jrne tick_tst
      000FB2 A6 80            [ 1]  704 	ld a,#TK_CMD  
      000FB4 F7               [ 1]  705 	ld (x),a 
      000FB5 5C               [ 1]  706 	incw x 
      000FB6 90 93            [ 1]  707 	ldw y,x 
      000FB8 AE 1F B6         [ 2]  708 	ldw x,#print
      000FBB 90 FF            [ 2]  709 	ldw (y),x 
      000FBD 72 A9 00 02      [ 2]  710 	addw y,#2
      000FC1 CC 10 98         [ 2]  711 	jp token_exit
      000FC4                        712 tick_tst: ; comment 
      000FC4                        713 	_case TICK plus_tst 
      000FC4 A6 27            [ 1]    1 	ld a,#TICK 
      000FC6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC8 26 2B            [ 1]    3 	jrne plus_tst
      000FCA A6 80            [ 1]  714 	ld a,#TK_CMD
      000FCC F7               [ 1]  715 	ld (x),a 
      000FCD 5C               [ 1]  716 	incw x
      000FCE 90 AE 20 FE      [ 2]  717 	ldw y,#remark 
      000FD2 FF               [ 2]  718 	ldw (x),y 
      000FD3 1C 00 02         [ 2]  719 	addw x,#2  
      000FD6                        720 copy_comment:
      000FD6 90 AE 16 68      [ 2]  721 	ldw y,#tib 
      000FDA 72 B9 00 00      [ 2]  722 	addw y,in.w
      000FDE 90 89            [ 2]  723 	pushw y 
      000FE0 CD 13 A7         [ 4]  724 	call strcpy
      000FE3 72 F2 01         [ 2]  725 	subw y,(1,sp)
      000FE6 90 5C            [ 1]  726 	incw y ; strlen+1 
      000FE8 17 01            [ 2]  727 	ldw (1,sp),y 
      000FEA 72 FB 01         [ 2]  728 	addw x,(1,sp) 
      000FED                        729 	_drop 2 
      000FED 5B 02            [ 2]    1     addw sp,#2 
      000FEF 4F               [ 1]  730 	clr a 
      000FF0 90 93            [ 1]  731 	ldw y,x 
      000FF2 CC 10 98         [ 2]  732 	jp token_exit 
      000FF5                        733 plus_tst:
      000FF5                        734 	_case '+' star_tst 
      000FF5 A6 2B            [ 1]    1 	ld a,#'+' 
      000FF7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF9 26 05            [ 1]    3 	jrne star_tst
      000FFB A6 10            [ 1]  735 	ld a,#TK_PLUS  
      000FFD CC 10 94         [ 2]  736 	jp token_char 
      001000                        737 star_tst:
      001000                        738 	_case '*' slash_tst 
      001000 A6 2A            [ 1]    1 	ld a,#'*' 
      001002 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001004 26 05            [ 1]    3 	jrne slash_tst
      001006 A6 20            [ 1]  739 	ld a,#TK_MULT 
      001008 CC 10 94         [ 2]  740 	jp token_char 
      00100B                        741 slash_tst: 
      00100B                        742 	_case '/' prcnt_tst 
      00100B A6 2F            [ 1]    1 	ld a,#'/' 
      00100D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00100F 26 05            [ 1]    3 	jrne prcnt_tst
      001011 A6 21            [ 1]  743 	ld a,#TK_DIV 
      001013 CC 10 94         [ 2]  744 	jp token_char 
      001016                        745 prcnt_tst:
      001016                        746 	_case '%' eql_tst 
      001016 A6 25            [ 1]    1 	ld a,#'%' 
      001018 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00101A 26 05            [ 1]    3 	jrne eql_tst
      00101C A6 22            [ 1]  747 	ld a,#TK_MOD
      00101E CC 10 94         [ 2]  748 	jp token_char  
                                    749 ; 1 or 2 character tokens 	
      001021                        750 eql_tst:
      001021                        751 	_case '=' gt_tst 		
      001021 A6 3D            [ 1]    1 	ld a,#'=' 
      001023 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001025 26 05            [ 1]    3 	jrne gt_tst
      001027 A6 32            [ 1]  752 	ld a,#TK_EQUAL
      001029 CC 10 94         [ 2]  753 	jp token_char 
      00102C                        754 gt_tst:
      00102C                        755 	_case '>' lt_tst 
      00102C A6 3E            [ 1]    1 	ld a,#'>' 
      00102E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001030 26 23            [ 1]    3 	jrne lt_tst
      001032 A6 31            [ 1]  756 	ld a,#TK_GT 
      001034 6B 02            [ 1]  757 	ld (ATTRIB,sp),a 
      001036 91 D6 00         [ 4]  758 	ld a,([in.w],y)
      001039 72 5C 00 01      [ 1]  759 	inc in 
      00103D A1 3D            [ 1]  760 	cp a,#'=
      00103F 26 04            [ 1]  761 	jrne 1$
      001041 A6 33            [ 1]  762 	ld a,#TK_GE 
      001043 20 4F            [ 2]  763 	jra token_char  
      001045 A1 3C            [ 1]  764 1$: cp a,#'<
      001047 26 04            [ 1]  765 	jrne 2$
      001049 A6 35            [ 1]  766 	ld a,#TK_NE 
      00104B 20 47            [ 2]  767 	jra token_char 
      00104D 72 5A 00 01      [ 1]  768 2$: dec in
      001051 7B 02            [ 1]  769 	ld a,(ATTRIB,sp)
      001053 20 3F            [ 2]  770 	jra token_char 	 
      001055                        771 lt_tst:
      001055                        772 	_case '<' other
      001055 A6 3C            [ 1]    1 	ld a,#'<' 
      001057 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001059 26 23            [ 1]    3 	jrne other
      00105B A6 34            [ 1]  773 	ld a,#TK_LT 
      00105D 6B 02            [ 1]  774 	ld (ATTRIB,sp),a 
      00105F 91 D6 00         [ 4]  775 	ld a,([in.w],y)
      001062 72 5C 00 01      [ 1]  776 	inc in 
      001066 A1 3D            [ 1]  777 	cp a,#'=
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001068 26 04            [ 1]  778 	jrne 1$
      00106A A6 36            [ 1]  779 	ld a,#TK_LE 
      00106C 20 26            [ 2]  780 	jra token_char 
      00106E A1 3E            [ 1]  781 1$: cp a,#'>
      001070 26 04            [ 1]  782 	jrne 2$
      001072 A6 35            [ 1]  783 	ld a,#TK_NE 
      001074 20 1E            [ 2]  784 	jra token_char 
      001076 72 5A 00 01      [ 1]  785 2$: dec in 
      00107A 7B 02            [ 1]  786 	ld a,(ATTRIB,sp)
      00107C 20 16            [ 2]  787 	jra token_char 	
      00107E                        788 other: ; not a special character 	 
      00107E 7B 01            [ 1]  789 	ld a,(TCHAR,sp)
      001080 CD 0E 21         [ 4]  790 	call is_alpha 
      001083 25 03            [ 1]  791 	jrc 30$ 
      001085 CC 16 47         [ 2]  792 	jp syntax_error 
      001088                        793 30$: 
      001088 CD 0E 67         [ 4]  794 	call parse_keyword
      00108B A3 20 FE         [ 2]  795 	cpw x,#remark 
      00108E 26 08            [ 1]  796 	jrne token_exit 
      001090 93               [ 1]  797 	ldw x,y 
      001091 CC 0F D6         [ 2]  798 	jp copy_comment 
      001094                        799 token_char:
      001094 F7               [ 1]  800 	ld (x),a 
      001095 5C               [ 1]  801 	incw x
      001096 90 93            [ 1]  802 	ldw y,x 
      001098                        803 token_exit:
      001098                        804 	_drop VSIZE 
      001098 5B 02            [ 2]    1     addw sp,#VSIZE 
      00109A 81               [ 4]  805 	ret
                                    806 
                                    807 
                                    808 ;-----------------------------------
                                    809 ; create token list fromm text line 
                                    810 ; save this list in pad buffer 
                                    811 ;  compiled line format: 
                                    812 ;    line_no  2 bytes {0...32767}
                                    813 ;    count    1 byte  
                                    814 ;    tokens   variable length 
                                    815 ;   
                                    816 ; input:
                                    817 ;   none
                                    818 ; modified variables:
                                    819 ;   basicptr     token list buffer address 
                                    820 ;   in.w  		 3|count, i.e. index in buffer
                                    821 ;   count        length of line | 0  
                                    822 ;-----------------------------------
                           000001   823 	XSAVE=1
                           000002   824 	VSIZE=2
      00109B                        825 compile::
      00109B 90 89            [ 2]  826 	pushw y 
      00109D                        827 	_vars VSIZE 
      00109D 52 02            [ 2]    1     sub sp,#VSIZE 
      00109F 55 00 1B 00 04   [ 1]  828 	mov basicptr,txtbgn
      0010A4 72 1A 00 22      [ 1]  829 	bset flags,#FCOMP 
      0010A8 A6 00            [ 1]  830 	ld a,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      0010AA AE 00 00         [ 2]  831 	ldw x,#0
      0010AD CF 16 B8         [ 2]  832 	ldw pad,x ; destination buffer 
      0010B0 C7 16 BA         [ 1]  833 	ld pad+2,a ; count 
      0010B3 AE 16 BB         [ 2]  834 	ldw x,#pad+3
      0010B6 72 5F 00 01      [ 1]  835 	clr in 
      0010BA CD 0E E7         [ 4]  836 	call get_token
      0010BD A1 84            [ 1]  837 	cp a,#TK_INTGR
      0010BF 26 11            [ 1]  838 	jrne 2$
      0010C1 A3 00 01         [ 2]  839 	cpw x,#1 
      0010C4 2A 05            [ 1]  840 	jrpl 1$
      0010C6 A6 0A            [ 1]  841 	ld a,#ERR_BAD_VALUE
      0010C8 CC 16 49         [ 2]  842 	jp tb_error
      0010CB CF 16 B8         [ 2]  843 1$:	ldw pad,x 
      0010CE 90 AE 16 BB      [ 2]  844 	ldw y,#pad+3 
      0010D2 90 A3 17 74      [ 2]  845 2$:	cpw y,#stack_full 
      0010D6 25 05            [ 1]  846 	jrult 3$
      0010D8 A6 0F            [ 1]  847 	ld a,#ERR_BUF_FULL 
      0010DA CC 16 49         [ 2]  848 	jp tb_error 
      0010DD                        849 3$:	
      0010DD 93               [ 1]  850 	ldw x,y 
      0010DE CD 0E E7         [ 4]  851 	call get_token 
      0010E1 A1 00            [ 1]  852 	cp a,#TK_NONE 
      0010E3 26 ED            [ 1]  853 	jrne 2$ 
                                    854 ; compilation completed  
      0010E5 72 A2 16 B8      [ 2]  855 	subw y,#pad
      0010E9 90 9F            [ 1]  856     ld a,yl
      0010EB AE 16 B8         [ 2]  857 	ldw x,#pad 
      0010EE CF 00 19         [ 2]  858 	ldw ptr16,x 
      0010F1 E7 02            [ 1]  859 	ld (2,x),a 
      0010F3 FE               [ 2]  860 	ldw x,(x)
      0010F4 27 09            [ 1]  861 	jreq 10$
      0010F6 CD 0C CE         [ 4]  862 	call insert_line
      0010F9 72 5F 00 03      [ 1]  863 	clr  count 
      0010FD 20 0F            [ 2]  864 	jra  11$ 
      0010FF                        865 10$: ; line# is zero 
      0010FF CE 00 19         [ 2]  866 	ldw x,ptr16  
      001102 CF 00 04         [ 2]  867 	ldw basicptr,x 
      001105 E6 02            [ 1]  868 	ld a,(2,x)
      001107 C7 00 03         [ 1]  869 	ld count,a 
      00110A 35 03 00 01      [ 1]  870 	mov in,#3 
      00110E                        871 11$:
      00110E                        872 	_drop VSIZE 
      00110E 5B 02            [ 2]    1     addw sp,#VSIZE 
      001110 72 1B 00 22      [ 1]  873 	bres flags,#FCOMP 
      001114 90 85            [ 2]  874 	popw y 
      001116 81               [ 4]  875 	ret 
                                    876 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      001117                         48 cpy_cmd_name:
      001117 5D               [ 2]   49 	tnzw x 
      001118 27 14            [ 1]   50 	jreq 10$
      00111A F6               [ 1]   51 	ld a,(x)
      00111B 5C               [ 1]   52 	incw x
      00111C A4 0F            [ 1]   53 	and a,#15  
      00111E 88               [ 1]   54 	push a 
      00111F 0D 01            [ 1]   55     tnz (1,sp) 
      001121 27 0A            [ 1]   56 	jreq 9$
      001123 F6               [ 1]   57 1$:	ld a,(x)
      001124 90 F7            [ 1]   58 	ld (y),a  
      001126 5C               [ 1]   59 	incw x
      001127 90 5C            [ 1]   60 	incw y 
      001129 0A 01            [ 1]   61 	dec (1,sp)	 
      00112B 26 F6            [ 1]   62 	jrne 1$
      00112D 84               [ 1]   63 9$: pop a 
      00112E                         64 10$: 
      00112E 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      00112F                         75 add_space:
      00112F 90 5A            [ 2]   76 	decw y 
      001131 90 F6            [ 1]   77 	ld a,(y)
      001133 90 5C            [ 1]   78 	incw y
      001135 A1 29            [ 1]   79 	cp a,#') 
      001137 27 05            [ 1]   80 	jreq 0$
      001139 CD 0E 3B         [ 4]   81 	call is_alnum 
      00113C 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      00113E                         83 0$: 
      00113E A6 20            [ 1]   84 	ld a,#SPACE 
      001140 90 F7            [ 1]   85 	ld (y),a 
      001142 90 5C            [ 1]   86 	incw y 
      001144 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      001145                         99 right_align::
      001145 88               [ 1]  100 	push a 
      001146 7B 01            [ 1]  101 0$: ld a,(1,sp)
      001148 C1 00 23         [ 1]  102 	cp a,tab_width 
      00114B 2A 08            [ 1]  103 	jrpl 1$
      00114D A6 20            [ 1]  104 	ld a,#SPACE 
      00114F 5A               [ 2]  105 	decw x
      001150 F7               [ 1]  106 	ld (x),a  
      001151 0C 01            [ 1]  107 	inc (1,sp)
      001153 20 F1            [ 2]  108 	jra 0$ 
      001155 84               [ 1]  109 1$: pop a 	
      001156 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      001157                        123 cpy_quote:
      001157 A6 22            [ 1]  124 	ld a,#'"
      001159 90 F7            [ 1]  125 	ld (y),a 
      00115B 90 5C            [ 1]  126 	incw y 
      00115D 89               [ 2]  127 	pushw x 
      00115E CD 17 67         [ 4]  128 	call skip_string 
      001161 85               [ 2]  129 	popw x 
      001162 F6               [ 1]  130 1$:	ld a,(x)
      001163 27 30            [ 1]  131 	jreq 9$
      001165 5C               [ 1]  132 	incw x 
      001166 A1 20            [ 1]  133 	cp a,#SPACE 
      001168 25 0E            [ 1]  134 	jrult 3$
      00116A 90 F7            [ 1]  135 	ld (y),a
      00116C 90 5C            [ 1]  136 	incw y 
      00116E A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001170 26 F0            [ 1]  138 	jrne 1$ 
      001172                        139 2$:
      001172 90 F7            [ 1]  140 	ld (y),a
      001174 90 5C            [ 1]  141 	incw y  
      001176 20 EA            [ 2]  142 	jra 1$
      001178 88               [ 1]  143 3$: push a 
      001179 A6 5C            [ 1]  144 	ld a,#'\
      00117B 90 F7            [ 1]  145 	ld (y),a 
      00117D 90 5C            [ 1]  146 	incw y  
      00117F 84               [ 1]  147 	pop a 
      001180 A0 07            [ 1]  148 	sub a,#7
      001182 C7 00 0E         [ 1]  149 	ld acc8,a 
      001185 72 5F 00 0D      [ 1]  150 	clr acc16
      001189 89               [ 2]  151 	pushw x
      00118A AE 0D 8D         [ 2]  152 	ldw x,#escaped 
      00118D 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      001191 F6               [ 1]  154 	ld a,(x)
      001192 85               [ 2]  155 	popw x
      001193 20 DD            [ 2]  156 	jra 2$
      001195 A6 22            [ 1]  157 9$: ld a,#'"
      001197 90 F7            [ 1]  158 	ld (y),a 
      001199 90 5C            [ 1]  159 	incw y  
      00119B 5C               [ 1]  160 	incw x 
      00119C 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      00119D                        171 var_name::
      00119D 1D 00 30         [ 2]  172 		subw x,#vars 
      0011A0 A6 03            [ 1]  173 		ld a,#3
      0011A2 62               [ 2]  174 		div x,a 
      0011A3 9F               [ 1]  175 		ld a,xl 
      0011A4 AB 41            [ 1]  176 		add a,#'A 
      0011A6 81               [ 4]  177 		ret 
                                    178 
                                    179 
                                    180 
                                    181 ;-------------------------------------
                                    182 ; decompile tokens list 
                                    183 ; to original text line 
                                    184 ; input:
                                    185 ;   [basicptr]  pointer at line 
                                    186 ;   Y           output buffer
                                    187 ; output:
                                    188 ;   A           length 
                                    189 ;   Y           after string  
                                    190 ;------------------------------------
                           000001   191 	BASE_SAV=1
                           000002   192 	WIDTH_SAV=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                           000003   193 	STR=3
                           000004   194 	VSIZE=4 
      0011A7                        195 decompile::
      0011A7                        196 	_vars VSIZE
      0011A7 52 04            [ 2]    1     sub sp,#VSIZE 
      0011A9 C6 00 0A         [ 1]  197 	ld a,base
      0011AC 6B 01            [ 1]  198 	ld (BASE_SAV,sp),a  
      0011AE C6 00 23         [ 1]  199 	ld a,tab_width 
      0011B1 6B 02            [ 1]  200 	ld (WIDTH_SAV,sp),a 
      0011B3 17 03            [ 2]  201 	ldw (STR,sp),y   
      0011B5 72 CE 00 04      [ 5]  202 	ldw x,[basicptr] ; line number 
      0011B9 35 0A 00 0A      [ 1]  203 	mov base,#10
      0011BD 35 05 00 23      [ 1]  204 	mov tab_width,#5
      0011C1 72 5F 00 0C      [ 1]  205 	clr acc24 
      0011C5 CF 00 0D         [ 2]  206 	ldw acc16,x
      0011C8 4F               [ 1]  207 	clr a ; unsigned conversion 
      0011C9 CD 17 D3         [ 4]  208 	call itoa  
      0011CC CD 11 45         [ 4]  209 	call right_align 
      0011CF 88               [ 1]  210 	push a 
      0011D0 90 93            [ 1]  211 1$:	ldw y,x ; source
      0011D2 1E 04            [ 2]  212 	ldw x,(STR+1,sp) ; destination
      0011D4 CD 13 A7         [ 4]  213 	call strcpy 
      0011D7 90 5F            [ 1]  214 	clrw y 
      0011D9 84               [ 1]  215 	pop a 
      0011DA 90 97            [ 1]  216 	ld yl,a 
      0011DC 72 F9 03         [ 2]  217 	addw y,(STR,sp)
      0011DF A6 20            [ 1]  218 	ld a,#SPACE 
      0011E1 90 F7            [ 1]  219 	ld (y),a 
      0011E3 90 5C            [ 1]  220 	incw y 
      0011E5 72 5F 00 23      [ 1]  221 	clr tab_width
      0011E9 AE 00 03         [ 2]  222 	ldw x,#3
      0011EC CF 00 00         [ 2]  223 	ldw in.w,x 
      0011EF                        224 decomp_loop:
      0011EF 90 89            [ 2]  225 	pushw y
      0011F1 CD 17 4E         [ 4]  226 	call next_token 
      0011F4 90 85            [ 2]  227 	popw y 
      0011F6 4D               [ 1]  228 	tnz a  
      0011F7 26 03            [ 1]  229 	jrne 1$
      0011F9 CC 13 1C         [ 2]  230 	jp 20$
      0011FC 2B 03            [ 1]  231 1$:	jrmi 2$
      0011FE CC 12 8D         [ 2]  232 	jp 6$
      001201                        233 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      001201 A1 85            [ 1]  234 	cp a,#TK_VAR 
      001203 26 0F            [ 1]  235 	jrne 3$
                                    236 ;; TK_VAR 
      001205 CD 11 2F         [ 4]  237 	call add_space
      001208 CD 17 76         [ 4]  238 	call get_addr   
      00120B CD 11 9D         [ 4]  239 	call var_name
      00120E 90 F7            [ 1]  240 	ld (y),a 
      001210 90 5C            [ 1]  241 	incw y  
      001212 20 DB            [ 2]  242 	jra decomp_loop
      001214                        243 3$:
      001214 A1 84            [ 1]  244 	cp a,#TK_INTGR
      001216 26 26            [ 1]  245 	jrne 4$
                                    246 ;; TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001218 CD 17 80         [ 4]  247 	call get_int24 
      00121B C7 00 0C         [ 1]  248 	ld acc24,a 
      00121E CF 00 0D         [ 2]  249 	ldw acc16,x 
      001221 CD 11 2F         [ 4]  250 	call add_space
      001224 90 89            [ 2]  251 	pushw y 
      001226 A6 FF            [ 1]  252 	ld a,#255 ; signed conversion 
      001228 CD 17 D3         [ 4]  253 	call itoa  
      00122B 16 01            [ 2]  254 	ldw y,(1,sp) 
      00122D 88               [ 1]  255 	push a 
      00122E 51               [ 1]  256 	exgw x,y 
      00122F CD 13 A7         [ 4]  257 	call strcpy 
      001232 90 5F            [ 1]  258 	clrw y
      001234 84               [ 1]  259 	pop a  
      001235 90 97            [ 1]  260 	ld yl,a 
      001237 72 F9 01         [ 2]  261 	addw y,(1,sp)
      00123A                        262 	_drop 2 
      00123A 5B 02            [ 2]    1     addw sp,#2 
      00123C 20 B1            [ 2]  263 	jra decomp_loop
      00123E                        264 4$: ; dictionary keyword
      00123E A1 87            [ 1]  265 	cp a,#TK_NOT 
      001240 24 39            [ 1]  266 	jruge 50$ 
      001242 FE               [ 2]  267 	ldw x,(x)
      001243 72 5C 00 01      [ 1]  268 	inc in 
      001247 72 5C 00 01      [ 1]  269 	inc in 
      00124B A3 20 FE         [ 2]  270 	cpw x,#remark 
      00124E 26 23            [ 1]  271 	jrne 5$
      001250 CE 00 04         [ 2]  272 	ldw x,basicptr 
                                    273 ; copy comment to buffer 
      001253 CD 11 2F         [ 4]  274 	call add_space
      001256 A6 27            [ 1]  275 	ld a,#''
      001258 90 F7            [ 1]  276 	ld (y),a 
      00125A 90 5C            [ 1]  277 	incw y 
      00125C                        278 46$:
      00125C 72 D6 00 00      [ 4]  279 	ld a,([in.w],x)
      001260 72 5C 00 01      [ 1]  280 	inc in  
      001264 90 F7            [ 1]  281 	ld (y),a 
      001266 90 5C            [ 1]  282 	incw y 
      001268 C6 00 01         [ 1]  283 	ld a,in 
      00126B C1 00 03         [ 1]  284 	cp a,count 
      00126E 2B EC            [ 1]  285 	jrmi 46$
      001270 CC 13 1C         [ 2]  286 	jp 20$  
      001273 A3 1C 3A         [ 2]  287 5$: cpw x,#let  
      001276 26 05            [ 1]  288 	jrne 54$
      001278 CC 11 EF         [ 2]  289 	jp decomp_loop ; down display LET
      00127B                        290 50$:
      00127B 5F               [ 1]  291 	clrw x 
      00127C 97               [ 1]  292 	ld xl,a 
                                    293 ;	sub a,#TK_NOT  
                                    294 ;	sll a 
                                    295 ;	ld xl,a 
                                    296 ;	addw x,#NOT_IDX
      00127D                        297 54$: ; insert command name 
      00127D CD 11 2F         [ 4]  298 	call add_space  
      001280 90 89            [ 2]  299 	pushw y
      001282 CD 13 57         [ 4]  300 	call cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      001285 90 85            [ 2]  301 	popw y 
      001287 CD 11 17         [ 4]  302 	call cpy_cmd_name
      00128A CC 11 EF         [ 2]  303 	jp decomp_loop 
      00128D                        304 6$:
                                    305 ; label?
      00128D A1 03            [ 1]  306 	cp a,#TK_LABEL 
      00128F 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      001291 A6 20            [ 1]  309 	ld a,#32 
      001293 90 F7            [ 1]  310 	ld (y),a 
      001295 90 5C            [ 1]  311 	incw y 
      001297                        312 61$:
      001297 89               [ 2]  313 	pushw x 
      001298 CD 17 67         [ 4]  314 	call skip_string 
      00129B 85               [ 2]  315 	popw x 
      00129C                        316 62$:	
      00129C F6               [ 1]  317 	ld a,(x)
      00129D 27 07            [ 1]  318 	jreq 63$ 
      00129F 5C               [ 1]  319 	incw x  
      0012A0 90 F7            [ 1]  320 	ld (y),a 
      0012A2 90 5C            [ 1]  321 	incw y 
      0012A4 20 F6            [ 2]  322 	jra 62$ 
      0012A6                        323 63$: 
      0012A6 A6 20            [ 1]  324 	ld a,#32 
      0012A8 90 F7            [ 1]  325 	ld (y),a 
      0012AA 90 5C            [ 1]  326 	incw y 
      0012AC CC 11 EF         [ 2]  327 	jp decomp_loop
      0012AF                        328 64$:
      0012AF A1 02            [ 1]  329 	cp a,#TK_QSTR 
      0012B1 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      0012B3 CD 11 2F         [ 4]  332 	call add_space
      0012B6 CD 11 57         [ 4]  333 	call cpy_quote  
      0012B9 CC 11 EF         [ 2]  334 	jp decomp_loop
      0012BC                        335 7$:
      0012BC A1 04            [ 1]  336 	cp a,#TK_CHAR 
      0012BE 26 10            [ 1]  337 	jrne 8$
                                    338 ;; TK_CHAR
      0012C0 CD 11 2F         [ 4]  339 	call add_space 
      0012C3 A6 5C            [ 1]  340 	ld a,#'\ 
      0012C5 90 F7            [ 1]  341 	ld (y),a 
      0012C7 90 5C            [ 1]  342 	incw y
      0012C9 F6               [ 1]  343 	ld a,(x)
      0012CA 72 5C 00 01      [ 1]  344 	inc in  
      0012CE 20 06            [ 2]  345 	jra 81$
      0012D0 A1 0A            [ 1]  346 8$: cp a,#TK_COLON 
      0012D2 26 09            [ 1]  347 	jrne 9$
      0012D4 A6 3A            [ 1]  348 	ld a,#':
      0012D6                        349 81$:
      0012D6 90 F7            [ 1]  350 	ld (y),a 
      0012D8 90 5C            [ 1]  351 	incw y 
      0012DA                        352 82$:
      0012DA CC 11 EF         [ 2]  353 	jp decomp_loop
      0012DD                        354 9$: 
      0012DD A1 09            [ 1]  355 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0012DF 22 0A            [ 1]  356 	jrugt 10$ 
      0012E1 A0 05            [ 1]  357 	sub a,#TK_ARRAY 
      0012E3 5F               [ 1]  358 	clrw x 
      0012E4 97               [ 1]  359 	ld xl,a
      0012E5 1C 13 32         [ 2]  360 	addw x,#single_char 
      0012E8 F6               [ 1]  361 	ld a,(x)
      0012E9 20 EB            [ 2]  362 	jra 81$ 
      0012EB                        363 10$: 
      0012EB A1 11            [ 1]  364 	cp a,#TK_MINUS 
      0012ED 22 0A            [ 1]  365 	jrugt 11$
      0012EF A0 10            [ 1]  366 	sub a,#TK_PLUS 
      0012F1 5F               [ 1]  367 	clrw x 
      0012F2 97               [ 1]  368 	ld xl,a 
      0012F3 1C 13 37         [ 2]  369 	addw x,#add_char 
      0012F6 F6               [ 1]  370 	ld a,(x)
      0012F7 20 DD            [ 2]  371 	jra 81$
      0012F9                        372 11$:
      0012F9 A1 22            [ 1]  373     cp a,#TK_MOD 
      0012FB 22 0A            [ 1]  374 	jrugt 12$
      0012FD A0 20            [ 1]  375 	sub a,#TK_MULT
      0012FF 5F               [ 1]  376 	clrw x 
      001300 97               [ 1]  377 	ld xl,a 
      001301 1C 13 39         [ 2]  378 	addw x,#mul_char
      001304 F6               [ 1]  379 	ld a,(x)
      001305 20 CF            [ 2]  380 	jra 81$
      001307                        381 12$:
      001307 A0 31            [ 1]  382 	sub a,#TK_GT  
      001309 48               [ 1]  383 	sll a 
      00130A 5F               [ 1]  384 	clrw x 
      00130B 97               [ 1]  385 	ld xl,a 
      00130C 1C 13 3C         [ 2]  386 	addw x,#relop_str 
      00130F FE               [ 2]  387 	ldw x,(x)
      001310 F6               [ 1]  388 	ld a,(x)
      001311 5C               [ 1]  389 	incw x 
      001312 90 F7            [ 1]  390 	ld (y),a
      001314 90 5C            [ 1]  391 	incw y 
      001316 F6               [ 1]  392 	ld a,(x)
      001317 26 BD            [ 1]  393 	jrne 81$
      001319 CC 11 EF         [ 2]  394 	jp decomp_loop 
      00131C                        395 20$: 
      00131C 90 7F            [ 1]  396 	clr (y)
      00131E 1E 03            [ 2]  397 	ldw x,(STR,sp)
      001320 7B 01            [ 1]  398 	ld a,(BASE_SAV,sp)
      001322 C7 00 0A         [ 1]  399 	ld base,a 
      001325 7B 02            [ 1]  400 	ld a,(WIDTH_SAV,sp)
      001327 C7 00 23         [ 1]  401 	ld tab_width,a
      00132A 72 F2 03         [ 2]  402 	subw y,(STR,sp) 
      00132D 90 9F            [ 1]  403 	ld a,yl 
      00132F                        404 	_drop VSIZE 
      00132F 5B 04            [ 2]    1     addw sp,#VSIZE 
      001331 81               [ 4]  405 	ret 
                                    406 
      001332 40 28 29 2C 23         407 single_char: .byte '@','(',')',',','#'
      001337 2B 2D                  408 add_char: .byte '+','-'
      001339 2A 2F 25               409 mul_char: .byte '*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      00133C 13 48 13 4A 13 4C 13   410 relop_str: .word gt,equal,ge,lt,ne,le 
             4F 13 54 13 51
      001348 3E 00                  411 gt: .asciz ">"
      00134A 3D 00                  412 equal: .asciz "="
      00134C 3E 3D 00               413 ge: .asciz ">="
      00134F 3C 00                  414 lt: .asciz "<"
      001351 3C 3D 00               415 le: .asciz "<="
      001354 3C 3E 00               416 ne:  .asciz "<>"
                                    417 
                                    418 ;----------------------------------
                                    419 ; search in kword_dict name
                                    420 ; from its execution address 
                                    421 ; input:
                                    422 ;   X       	routine_address  
                                    423 ; output:
                                    424 ;   X 			cstr*  | 0 
                                    425 ;--------------------------------
                           000001   426 	CODE_ADDR=1 
                           000003   427 	LINK=3 
                           000004   428 	VSIZE=4
      001357                        429 cmd_name:
      001357                        430 	_vars VSIZE 
      001357 52 04            [ 2]    1     sub sp,#VSIZE 
      001359 72 5F 00 0D      [ 1]  431 	clr acc16 
      00135D 1F 01            [ 2]  432 	ldw (CODE_ADDR,sp),x  
      00135F AE 32 CC         [ 2]  433 	ldw x,#kword_dict	
      001362 1F 03            [ 2]  434 1$:	ldw (LINK,sp),x
      001364 E6 02            [ 1]  435 	ld a,(2,x)
      001366 A4 0F            [ 1]  436 	and a,#15 
      001368 C7 00 0E         [ 1]  437 	ld acc8,a 
      00136B 1C 00 03         [ 2]  438 	addw x,#3
      00136E 72 BB 00 0D      [ 2]  439 	addw x,acc16
      001372 FE               [ 2]  440 	ldw x,(x) ; code address   
      001373 13 01            [ 2]  441 	cpw x,(CODE_ADDR,sp)
      001375 27 0C            [ 1]  442 	jreq 2$
      001377 1E 03            [ 2]  443 	ldw x,(LINK,sp)
      001379 FE               [ 2]  444 	ldw x,(x) 
      00137A 1D 00 02         [ 2]  445 	subw x,#2  
      00137D 26 E3            [ 1]  446 	jrne 1$
      00137F 4F               [ 1]  447 	clr a 
      001380 5F               [ 1]  448 	clrw x 
      001381 20 05            [ 2]  449 	jra 9$
      001383 1E 03            [ 2]  450 2$: ldw x,(LINK,sp)
      001385 1C 00 02         [ 2]  451 	addw x,#2 	
      001388                        452 9$:	_drop VSIZE
      001388 5B 04            [ 2]    1     addw sp,#VSIZE 
      00138A 81               [ 4]  453 	ret
                                    454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     94 ; 24 bits integer variables 
      000030                         95 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     96 
                                     97 	.area BTXT (ABS)
      00007C                         98 	.org 0x7C  
                                     99 ; keep 'free_ram' as last variable 
                                    100 ; basic code compiled here. 
      00007C                        101 rsign: .blkw 1 ; "BC" 
      00007E                        102 rsize: .blkw 1 ; code size 	 
      000080                        103 free_ram: ; from here RAM free for BASIC text 
                                    104 
                                    105 	.area CODE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                    106 
                                    107 
                                    108 ;-------------------------------------
                                    109 ; retrun string length
                                    110 ; input:
                                    111 ;   X         .asciz  pointer 
                                    112 ; output:
                                    113 ;   X         not affected 
                                    114 ;   A         length 
                                    115 ;-------------------------------------
      00138B                        116 strlen::
      00138B 89               [ 2]  117 	pushw x 
      00138C 4F               [ 1]  118 	clr a
      00138D 7D               [ 1]  119 1$:	tnz (x) 
      00138E 27 04            [ 1]  120 	jreq 9$ 
      001390 4C               [ 1]  121 	inc a 
      001391 5C               [ 1]  122 	incw x 
      001392 20 F9            [ 2]  123 	jra 1$ 
      001394 85               [ 2]  124 9$:	popw x 
      001395 81               [ 4]  125 	ret 
                                    126 
                                    127 ;------------------------------------
                                    128 ; compare 2 strings
                                    129 ; input:
                                    130 ;   X 		char* first string 
                                    131 ;   Y       char* second string 
                                    132 ; output:
                                    133 ;   A 		0 not == |1 ==  
                                    134 ;-------------------------------------
      001396                        135 strcmp:
      001396 F6               [ 1]  136 	ld a,(x)
      001397 27 0B            [ 1]  137 	jreq 5$ 
      001399 90 F1            [ 1]  138 	cp a,(y) 
      00139B 26 05            [ 1]  139 	jrne 4$ 
      00139D 5C               [ 1]  140 	incw x 
      00139E 90 5C            [ 1]  141 	incw y 
      0013A0 20 F4            [ 2]  142 	jra strcmp 
      0013A2                        143 4$: ; not same  
      0013A2 4F               [ 1]  144 	clr a 
      0013A3 81               [ 4]  145 	ret 
      0013A4                        146 5$: ; same 
      0013A4 A6 01            [ 1]  147 	ld a,#1 
      0013A6 81               [ 4]  148 	ret 
                                    149 
                                    150 
                                    151 ;---------------------------------------
                                    152 ;  copy src to dest 
                                    153 ; input:
                                    154 ;   X 		dest 
                                    155 ;   Y 		src 
                                    156 ; output: 
                                    157 ;   X 		dest 
                                    158 ;----------------------------------
      0013A7                        159 strcpy::
      0013A7 88               [ 1]  160 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0013A8 89               [ 2]  161 	pushw x 
      0013A9 90 F6            [ 1]  162 1$: ld a,(y)
      0013AB 27 06            [ 1]  163 	jreq 9$ 
      0013AD F7               [ 1]  164 	ld (x),a 
      0013AE 5C               [ 1]  165 	incw x 
      0013AF 90 5C            [ 1]  166 	incw y 
      0013B1 20 F6            [ 2]  167 	jra 1$ 
      0013B3 7F               [ 1]  168 9$:	clr (x)
      0013B4 85               [ 2]  169 	popw x 
      0013B5 84               [ 1]  170 	pop a 
      0013B6 81               [ 4]  171 	ret 
                                    172 
                                    173 ;---------------------------------------
                                    174 ; move memory block 
                                    175 ; input:
                                    176 ;   X 		destination 
                                    177 ;   Y 	    source 
                                    178 ;   acc16	bytes count 
                                    179 ; output:
                                    180 ;   none 
                                    181 ;--------------------------------------
                           000001   182 	INCR=1 ; incrament high byte 
                           000002   183 	LB=2 ; increment low byte 
                           000002   184 	VSIZE=2
      0013B7                        185 move::
      0013B7 88               [ 1]  186 	push a 
      0013B8                        187 	_vars VSIZE 
      0013B8 52 02            [ 2]    1     sub sp,#VSIZE 
      0013BA 0F 01            [ 1]  188 	clr (INCR,sp)
      0013BC 0F 02            [ 1]  189 	clr (LB,sp)
      0013BE 90 89            [ 2]  190 	pushw y 
      0013C0 13 01            [ 2]  191 	cpw x,(1,sp) ; compare DEST to SRC 
      0013C2 90 85            [ 2]  192 	popw y 
      0013C4 27 31            [ 1]  193 	jreq move_exit ; x==y 
      0013C6 2B 0E            [ 1]  194 	jrmi move_down
      0013C8                        195 move_up: ; start from top address with incr=-1
      0013C8 72 BB 00 0D      [ 2]  196 	addw x,acc16
      0013CC 72 B9 00 0D      [ 2]  197 	addw y,acc16
      0013D0 03 01            [ 1]  198 	cpl (INCR,sp)
      0013D2 03 02            [ 1]  199 	cpl (LB,sp)   ; increment = -1 
      0013D4 20 05            [ 2]  200 	jra move_loop  
      0013D6                        201 move_down: ; start from bottom address with incr=1 
      0013D6 5A               [ 2]  202     decw x 
      0013D7 90 5A            [ 2]  203 	decw y
      0013D9 0C 02            [ 1]  204 	inc (LB,sp) ; incr=1 
      0013DB                        205 move_loop:	
      0013DB C6 00 0D         [ 1]  206     ld a, acc16 
      0013DE CA 00 0E         [ 1]  207 	or a, acc8
      0013E1 27 14            [ 1]  208 	jreq move_exit 
      0013E3 72 FB 01         [ 2]  209 	addw x,(INCR,sp)
      0013E6 72 F9 01         [ 2]  210 	addw y,(INCR,sp) 
      0013E9 90 F6            [ 1]  211 	ld a,(y)
      0013EB F7               [ 1]  212 	ld (x),a 
      0013EC 89               [ 2]  213 	pushw x 
      0013ED CE 00 0D         [ 2]  214 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0013F0 5A               [ 2]  215 	decw x 
      0013F1 CF 00 0D         [ 2]  216 	ldw acc16,x 
      0013F4 85               [ 2]  217 	popw x 
      0013F5 20 E4            [ 2]  218 	jra move_loop
      0013F7                        219 move_exit:
      0013F7                        220 	_drop VSIZE
      0013F7 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013F9 84               [ 1]  221 	pop a 
      0013FA 81               [ 4]  222 	ret 	
                                    223 
                                    224 ;------------------------------------
                                    225 ;  set all variables to zero 
                                    226 ; input:
                                    227 ;   none 
                                    228 ; output:
                                    229 ;	none
                                    230 ;------------------------------------
      0013FB                        231 clear_vars:
      0013FB 89               [ 2]  232 	pushw x 
      0013FC 88               [ 1]  233 	push a  
      0013FD AE 00 30         [ 2]  234 	ldw x,#vars 
      001400 A6 4E            [ 1]  235 	ld a,#CELL_SIZE*26 
      001402 7F               [ 1]  236 1$:	clr (x)
      001403 5C               [ 1]  237 	incw x 
      001404 4A               [ 1]  238 	dec a 
      001405 26 FB            [ 1]  239 	jrne 1$
      001407 84               [ 1]  240 	pop a 
      001408 85               [ 2]  241 	popw x 
      001409 81               [ 4]  242 	ret 
                                    243 
                                    244 
                                    245 ;-----------------------
                                    246 ;  display system 
                                    247 ;  information 
                                    248 ;-----------------------
                           000002   249 	MAJOR=2
                           000000   250 	MINOR=0 
      00140A 0A 0A 54 69 6E 79 20   251 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    252 
      001450                        253 system_information:
      001450 AE 14 0A         [ 2]  254 	ldw x,#software 
      001453 CD 09 6D         [ 4]  255 	call puts 
      001456 A6 02            [ 1]  256 	ld a,#MAJOR 
      001458 C7 00 0E         [ 1]  257 	ld acc8,a 
      00145B 5F               [ 1]  258 	clrw x 
      00145C CF 00 0C         [ 2]  259 	ldw acc24,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      00145F 72 5F 00 23      [ 1]  260 	clr tab_width  
      001463 35 0A 00 0A      [ 1]  261 	mov base, #10 
      001467 CD 17 AD         [ 4]  262 	call prt_acc24 
      00146A A6 2E            [ 1]  263 	ld a,#'.
      00146C CD 09 10         [ 4]  264 	call putc 
      00146F A6 00            [ 1]  265 	ld a,#MINOR 
      001471 C7 00 0E         [ 1]  266 	ld acc8,a 
      001474 5F               [ 1]  267 	clrw x 
      001475 CF 00 0C         [ 2]  268 	ldw acc24,x 
      001478 CD 17 AD         [ 4]  269 	call prt_acc24
      00147B A6 0D            [ 1]  270 	ld a,#CR 
      00147D CD 09 10         [ 4]  271 	call putc
                                    272 ;call test 
      001480 81               [ 4]  273 	ret
                                    274 
      001481                        275 warm_init:
      001481 90 AE 17 73      [ 2]  276 	ldw y,#XSTACK_EMPTY  
      001485 72 5F 00 22      [ 1]  277 	clr flags 
      001489 72 5F 00 1F      [ 1]  278 	clr loop_depth 
      00148D 35 04 00 23      [ 1]  279 	mov tab_width,#TAB_WIDTH 
      001491 35 0A 00 0A      [ 1]  280 	mov base,#10 
      001495 AE 00 00         [ 2]  281 	ldw x,#0 
      001498 CF 00 04         [ 2]  282 	ldw basicptr,x 
      00149B CF 00 00         [ 2]  283 	ldw in.w,x 
      00149E 72 5F 00 03      [ 1]  284 	clr count
      0014A2 81               [ 4]  285 	ret 
                                    286 
                                    287 ;---------------------------
                                    288 ; reset BASIC text variables 
                                    289 ; and clear variables 
                                    290 ;---------------------------
      0014A3                        291 clear_basic:
      0014A3 89               [ 2]  292 	pushw x 
      0014A4 72 5F 00 03      [ 1]  293 	clr count
      0014A8 72 5F 00 01      [ 1]  294 	clr in  
      0014AC AE 00 80         [ 2]  295 	ldw x,#free_ram 
      0014AF CF 00 1B         [ 2]  296 	ldw txtbgn,x 
      0014B2 CF 00 1D         [ 2]  297 	ldw txtend,x 
      0014B5 CD 13 FB         [ 4]  298 	call clear_vars 
      0014B8 85               [ 2]  299 	popw x
      0014B9 81               [ 4]  300 	ret 
                                    301 
                                    302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    303 ;;   Tiny BASIC error messages     ;;
                                    304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014BA                        305 err_msg:
      0014BA 00 00 14 DC 14 E9 14   306 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             F7 15 10 15 1F
      0014C6 15 35 15 4B 15 65 15   307 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             76 15 87
      0014D0 15 93 15 C6 15 D6 15   308 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             EA 15 FD
      0014DA 16 0A                  309 	.word err_overflow 
                                    310 
      0014DC 4D 65 6D 6F 72 79 20   311 err_mem_full: .asciz "Memory full\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



             66 75 6C 6C 0A 00
      0014E9 73 79 6E 74 61 78 20   312 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0014F7 6D 61 74 68 20 6F 70   313 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001510 64 69 76 69 73 69 6F   314 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      00151F 69 6E 76 61 6C 69 64   315 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      001535 72 75 6E 20 74 69 6D   316 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      00154B 63 6F 6D 6D 61 6E 64   317 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      001565 64 75 70 6C 69 63 61   318 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      001576 46 69 6C 65 20 6E 6F   319 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      001587 62 61 64 20 76 61 6C   320 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      001593 46 69 6C 65 20 69 6E   321 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0015C6 4E 6F 20 64 61 74 61   322 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015D6 4E 6F 20 70 72 6F 67   323 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0015EA 46 69 6C 65 20 73 79   324 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0015FD 42 75 66 66 65 72 20   325 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      00160A 6F 76 65 72 66 6C 6F   326 err_overflow: .asciz "overflow\n" 
             77 0A 00
                                    327 
      001614 0A 72 75 6E 20 74 69   328 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      001626 0A 63 6F 6D 70 69 6C   329 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001637 6C 61 73 74 20 74 6F   330 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    331 
      001647                        332 syntax_error::
      001647 A6 02            [ 1]  333 	ld a,#ERR_SYNTAX 
                                    334 
      001649                        335 tb_error::
      001649 72 0A 00 22 4C   [ 2]  336 	btjt flags,#FCOMP,1$
      00164E 88               [ 1]  337 	push a 
      00164F AE 16 14         [ 2]  338 	ldw x, #rt_msg 
      001652 CD 09 6D         [ 4]  339 	call puts 
      001655 84               [ 1]  340 	pop a 
      001656 AE 14 BA         [ 2]  341 	ldw x, #err_msg 
      001659 72 5F 00 0D      [ 1]  342 	clr acc16 
      00165D 48               [ 1]  343 	sll a
      00165E 72 59 00 0D      [ 1]  344 	rlc acc16  
      001662 C7 00 0E         [ 1]  345 	ld acc8, a 
      001665 72 BB 00 0D      [ 2]  346 	addw x,acc16 
      001669 FE               [ 2]  347 	ldw x,(x)
      00166A CD 09 6D         [ 4]  348 	call puts
      00166D CE 00 04         [ 2]  349 	ldw x,basicptr 
                           000001   350 .if DEBUG 
      001670 C6 00 03         [ 1]  351 ld a,count 
      001673 90 5F            [ 1]  352 clrw y 
      001675 90 02            [ 1]  353 rlwa y  
      001677 CD 06 6C         [ 4]  354 call hex_dump
      00167A CE 00 04         [ 2]  355 ldw x,basicptr
                                    356 .endif 
      00167D C6 00 01         [ 1]  357 	ld a,in 
      001680 CD 1F 92         [ 4]  358 	call prt_basic_line
      001683 AE 16 37         [ 2]  359 	ldw x,#tk_id 
      001686 CD 09 6D         [ 4]  360 	call puts 
      001689 C6 00 02         [ 1]  361 	ld a,in.saved 
      00168C 5F               [ 1]  362 	clrw x 
      00168D 97               [ 1]  363 	ld xl,a 
      00168E 72 BB 00 04      [ 2]  364 	addw x,basicptr 
      001692 F6               [ 1]  365 	ld a,(x)
      001693 5F               [ 1]  366 	clrw x 
      001694 97               [ 1]  367 	ld xl,a 
      001695 CD 17 96         [ 4]  368 	call prt_i16
      001698 20 35            [ 2]  369 	jra 6$
      00169A                        370 1$:	
      00169A 88               [ 1]  371 	push a 
      00169B AE 16 26         [ 2]  372 	ldw x,#comp_msg
      00169E CD 09 6D         [ 4]  373 	call puts 
      0016A1 84               [ 1]  374 	pop a 
      0016A2 AE 14 BA         [ 2]  375 	ldw x, #err_msg 
      0016A5 72 5F 00 0D      [ 1]  376 	clr acc16 
      0016A9 48               [ 1]  377 	sll a
      0016AA 72 59 00 0D      [ 1]  378 	rlc acc16  
      0016AE C7 00 0E         [ 1]  379 	ld acc8, a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0016B1 72 BB 00 0D      [ 2]  380 	addw x,acc16 
      0016B5 FE               [ 2]  381 	ldw x,(x)
      0016B6 CD 09 6D         [ 4]  382 	call puts
      0016B9 AE 16 68         [ 2]  383 	ldw x,#tib
      0016BC CD 09 6D         [ 4]  384 	call puts 
      0016BF A6 0D            [ 1]  385 	ld a,#CR 
      0016C1 CD 09 10         [ 4]  386 	call putc
      0016C4 CE 00 00         [ 2]  387 	ldw x,in.w
      0016C7 CD 09 DA         [ 4]  388 	call spaces
      0016CA A6 5E            [ 1]  389 	ld a,#'^
      0016CC CD 09 10         [ 4]  390 	call putc 
      0016CF AE 17 FF         [ 2]  391 6$: ldw x,#STACK_EMPTY 
      0016D2 94               [ 1]  392     ldw sp,x
                                    393 
      0016D3                        394 warm_start:
      0016D3 CD 14 81         [ 4]  395 	call warm_init
                                    396 ;----------------------------
                                    397 ;   BASIC interpreter
                                    398 ;----------------------------
      0016D6                        399 cmd_line: ; user interface 
      0016D6 A6 0D            [ 1]  400 	ld a,#CR 
      0016D8 CD 09 10         [ 4]  401 	call putc 
      0016DB A6 3E            [ 1]  402 	ld a,#'> 
      0016DD CD 09 10         [ 4]  403 	call putc
      0016E0 CD 0A 72         [ 4]  404 	call readln
      0016E3 72 5D 00 03      [ 1]  405 	tnz count 
      0016E7 27 ED            [ 1]  406 	jreq cmd_line
      0016E9 CD 10 9B         [ 4]  407 	call compile
                                    408 ;;;;;;;;;;;;;;;;;;;;;;	
                                    409 ;pushw y 
                                    410 ;ldw x,txtbgn  
                                    411 ;ldw y,txtend
                                    412 ;ldw acc16,x   
                                    413 ;subw y,acc16 
                                    414 ;call hex_dump
                                    415 ;popw y 
                                    416 ;;;;;;;;;;;;;;;;;;;;;;
                                    417 
                                    418 ; if text begin with a line number
                                    419 ; the compiler set count to zero    
                                    420 ; so code is not interpreted
      0016EC 72 5D 00 03      [ 1]  421 	tnz count 
      0016F0 27 E4            [ 1]  422 	jreq cmd_line
                                    423 	
                                    424 ; if direct command 
                                    425 ; it's ready to interpret 
                                    426 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    427 ;; This is the interpreter loop
                                    428 ;; for each BASIC code line. 
                                    429 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0016F2                        430 interpreter: 
      0016F2 C6 00 01         [ 1]  431 	ld a,in 
      0016F5 C1 00 03         [ 1]  432 	cp a,count 
      0016F8 2B 1D            [ 1]  433 	jrmi interp_loop
      0016FA                        434 next_line:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      0016FA 72 01 00 22 D7   [ 2]  435 	btjf flags, #FRUN, cmd_line
      0016FF CE 00 04         [ 2]  436 	ldw x,basicptr
      001702 72 BB 00 00      [ 2]  437 	addw x,in.w 
      001706 C3 00 1D         [ 2]  438 	cpw x,txtend 
      001709 2A C8            [ 1]  439 	jrpl warm_start
      00170B CF 00 04         [ 2]  440 	ldw basicptr,x ; start of next line  
      00170E E6 02            [ 1]  441 	ld a,(2,x)
      001710 C7 00 03         [ 1]  442 	ld count,a 
      001713 35 03 00 01      [ 1]  443 	mov in,#3 ; skip first 3 bytes of line 
      001717                        444 interp_loop:
      001717 CD 17 4E         [ 4]  445 	call next_token
      00171A A1 00            [ 1]  446 	cp a,#TK_NONE 
      00171C 27 DC            [ 1]  447 	jreq next_line 
      00171E A1 80            [ 1]  448 	cp a,#TK_CMD
      001720 26 0C            [ 1]  449 	jrne 1$
      001722                        450 	_get_code_addr
      001722 FE               [ 2]    1         ldw x,(x)
      001723 72 5C 00 01      [ 1]    2         inc in 
      001727 72 5C 00 01      [ 1]    3         inc in 
      00172B FD               [ 4]  451 	call(x)
      00172C 20 E9            [ 2]  452 	jra interp_loop 
      00172E                        453 1$:	 
      00172E A1 85            [ 1]  454 	cp a,#TK_VAR
      001730 26 05            [ 1]  455 	jrne 2$
      001732 CD 1C 4D         [ 4]  456 	call let_var  
      001735 20 E0            [ 2]  457 	jra interp_loop 
      001737                        458 2$:	
      001737 A1 05            [ 1]  459 	cp a,#TK_ARRAY 
      001739 26 05            [ 1]  460 	jrne 3$
      00173B CD 1C 48         [ 4]  461 	call let_array 
      00173E 20 D7            [ 2]  462 	jra interp_loop
      001740                        463 3$:	
      001740 A1 0A            [ 1]  464 	cp a,#TK_COLON 
      001742 27 D3            [ 1]  465 	jreq interp_loop
      001744 A1 03            [ 1]  466 4$: cp a,#TK_LABEL
      001746 CD 17 67         [ 4]  467 	call skip_string 
      001749 20 CC            [ 2]  468 	jra interp_loop 
      00174B CC 16 47         [ 2]  469 5$:	jp syntax_error 
                                    470 
                                    471 ;--------------------------
                                    472 ; extract next token from
                                    473 ; token list 
                                    474 ; basicptr -> base address 
                                    475 ; in  -> offset in list array 
                                    476 ; output:
                                    477 ;   A 		token attribute
                                    478 ;   X 		*token_value 
                                    479 ;----------------------------------------
      00174E                        480 next_token::
                                    481 ;	clrw x 
      00174E C6 00 01         [ 1]  482 	ld a,in 
      001751 C7 00 02         [ 1]  483 	ld in.saved,a ; in case "_unget_token" needed 
                                    484 ; don't replace sub by "cp a,count" 
                                    485 ; if end of line must return with A=0   	
      001754 C0 00 03         [ 1]  486 	sub a,count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      001757 27 0D            [ 1]  487 	jreq 9$ ; end of line 
      001759                        488 0$: 
      001759 CE 00 04         [ 2]  489 	ldw x,basicptr 
      00175C 72 BB 00 00      [ 2]  490 	addw x,in.w 
      001760 F6               [ 1]  491 	ld a,(x)
      001761 5C               [ 1]  492 	incw x
      001762 72 5C 00 01      [ 1]  493 	inc in   
      001766 81               [ 4]  494 9$: ret 
                                    495 
                                    496 ;-------------------------
                                    497 ;  skip .asciz in BASIC line 
                                    498 ;  name 
                                    499 ;  input:
                                    500 ;     x		* string 
                                    501 ;  output:
                                    502 ;     none 
                                    503 ;-------------------------
      001767                        504 skip_string:
      001767 F6               [ 1]  505 	ld a,(x)
      001768 27 03            [ 1]  506 	jreq 1$
      00176A 5C               [ 1]  507 	incw x 
      00176B 20 FA            [ 2]  508 	jra skip_string 
      00176D 5C               [ 1]  509 1$: incw x 	
      00176E 72 B0 00 04      [ 2]  510 	subw x,basicptr 
      001772 CF 00 00         [ 2]  511 	ldw in.w,x 
      001775 81               [ 4]  512 	ret 
                                    513 
                                    514 ;---------------------
                                    515 ; extract 16 bits  
                                    516 ; address from BASIC
                                    517 ; code 
                                    518 ; input:
                                    519 ;    X    *address
                                    520 ; output:
                                    521 ;    X    address 
                                    522 ;-------------------- 
      001776                        523 get_addr:
      001776 FE               [ 2]  524 	ldw x,(x)
      001777 72 5C 00 01      [ 1]  525 	inc in 
      00177B 72 5C 00 01      [ 1]  526 	inc in 
      00177F 81               [ 4]  527 	ret 
                                    528 
                                    529 ;--------------------
                                    530 ; extract int24_t  
                                    531 ; value from BASIC 
                                    532 ; code 
                                    533 ; input:
                                    534 ;    X   *integer 
                                    535 ; output:
                                    536 ;    A:X   int24  
                                    537 ;--------------------
      001780                        538 get_int24:
      001780 F6               [ 1]  539 	ld a,(x)
      001781 EE 01            [ 2]  540 	ldw x,(1,x)
                                    541 ; skip 3 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      001783 72 5C 00 01      [ 1]  542 	inc in 
      001787 72 5C 00 01      [ 1]  543 	inc in 
      00178B 72 5C 00 01      [ 1]  544 	inc in 
      00178F 81               [ 4]  545 	ret 
                                    546 
                                    547 ;-------------------------
                                    548 ; get character from 
                                    549 ; BASIC code 
                                    550 ; input:
                                    551 ;    X   *char 
                                    552 ; output:
                                    553 ;    A    char 
                                    554 ;-------------------------
      001790                        555 get_char:
      001790 F6               [ 1]  556 	ld a,(x)
      001791 72 5C 00 01      [ 1]  557 	inc in  
      001795 81               [ 4]  558     ret 
                                    559 
                                    560 ;-----------------------------------
                                    561 ; print a 16 bit integer 
                                    562 ; using variable 'base' as conversion
                                    563 ; format.
                                    564 ; input:
                                    565 ;    X       integer to print 
                                    566 ;   'base'    conversion base 
                                    567 ; output:
                                    568 ;   terminal  
                                    569 ;-----------------------------------
      001796                        570 prt_i16:
      001796 72 5F 00 0C      [ 1]  571 	clr acc24 
      00179A CF 00 0D         [ 2]  572 	ldw acc16,x 
      00179D A6 10            [ 1]  573 	ld a,#16
      00179F C1 00 0A         [ 1]  574 	cp a,base
      0017A2 27 09            [ 1]  575 	jreq prt_acc24  
      0017A4 72 0F 00 0D 04   [ 2]  576 	btjf acc16,#7,prt_acc24
      0017A9 72 53 00 0C      [ 1]  577 	cpl acc24 ; sign extend 
                                    578 	
                                    579 ;------------------------------------
                                    580 ; print integer in acc24 
                                    581 ; input:
                                    582 ;	acc24 		integer to print 
                                    583 ;	'base' 		numerical base for conversion 
                                    584 ;   'tab_width' field width 
                                    585 ;    A 			signed||unsigned conversion
                                    586 ;  output:
                                    587 ;    A          string length
                                    588 ;------------------------------------
      0017AD                        589 prt_acc24:
      0017AD A6 FF            [ 1]  590 	ld a,#255  ; signed conversion  
      0017AF CD 17 D3         [ 4]  591     call itoa  ; conversion entier en  .asciz
      0017B2 CD 11 45         [ 4]  592 	call right_align  
      0017B5 88               [ 1]  593 	push a 
      0017B6 CD 09 6D         [ 4]  594 	call puts
      0017B9 84               [ 1]  595 	pop a 
      0017BA 81               [ 4]  596     ret	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    597 
                                    598 ;---------------------------------------
                                    599 ;  print value at xstack top 
                                    600 ;---------------------------------------
      0017BB                        601 print_top: 
      0017BB                        602 	_xpop 
      0017BB 90 F6            [ 1]    1     ld a,(y)
      0017BD 93               [ 1]    2     ldw x,y 
      0017BE EE 01            [ 2]    3     ldw x,(1,x)
      0017C0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0017C4 C7 00 0C         [ 1]  603 	ld acc24,a 
      0017C7 CF 00 0D         [ 2]  604 	ldw acc16,x 
      0017CA CD 17 AD         [ 4]  605 	call prt_acc24 
      0017CD A6 20            [ 1]  606 	ld a,#SPACE
      0017CF CD 09 10         [ 4]  607 	call putc 
      0017D2 81               [ 4]  608 	ret 
                                    609 
                                    610 ;------------------------------------
                                    611 ; convert integer in acc24 to string
                                    612 ; input:
                                    613 ;   'base'	conversion base 
                                    614 ;	acc24	integer to convert
                                    615 ;   A       0=unsigned, else signed 
                                    616 ; output:
                                    617 ;   X  		pointer to first char of string
                                    618 ;   A       string length
                                    619 ;------------------------------------
                           000001   620 	SIGN=1  ; integer sign 
                           000002   621 	LEN=2 
                           000003   622 	PSTR=3
                           000004   623 	VSIZE=4 ;locals size
      0017D3                        624 itoa::
      0017D3                        625 	_vars VSIZE
      0017D3 52 04            [ 2]    1     sub sp,#VSIZE 
      0017D5 0F 02            [ 1]  626 	clr (LEN,sp) ; string length  
      0017D7 0F 01            [ 1]  627 	clr (SIGN,sp)    ; sign
      0017D9 4D               [ 1]  628 	tnz A
      0017DA 27 11            [ 1]  629 	jreq 1$ ; unsigned conversion  
      0017DC C6 00 0A         [ 1]  630 	ld a,base 
      0017DF A1 0A            [ 1]  631 	cp a,#10
      0017E1 26 0A            [ 1]  632 	jrne 1$
                                    633 	; base 10 string display with negative sign if bit 23==1
      0017E3 72 0F 00 0C 05   [ 2]  634 	btjf acc24,#7,1$
      0017E8 03 01            [ 1]  635 	cpl (SIGN,sp)
      0017EA CD 02 09         [ 4]  636 	call neg_acc24
      0017ED                        637 1$:
                                    638 ; initialize string pointer 
      0017ED AE 16 68         [ 2]  639 	ldw x,#tib 
      0017F0 1C 00 50         [ 2]  640 	addw x,#TIB_SIZE
      0017F3 5A               [ 2]  641 	decw x 
      0017F4 7F               [ 1]  642 	clr (x)
      0017F5                        643 itoa_loop:
      0017F5 C6 00 0A         [ 1]  644     ld a,base
                                    645 ;	ldw (PSTR,sp),x 
      0017F8 CD 02 D5         [ 4]  646     call divu24_8 ; acc24/A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    647 ;	ldw x,(PSTR,sp)
      0017FB AB 30            [ 1]  648     add a,#'0  ; remainder of division
      0017FD A1 3A            [ 1]  649     cp a,#'9+1
      0017FF 2B 02            [ 1]  650     jrmi 2$
      001801 AB 07            [ 1]  651     add a,#7 
      001803                        652 2$:	
      001803 5A               [ 2]  653 	decw x
      001804 F7               [ 1]  654     ld (x),a
      001805 0C 02            [ 1]  655 	inc (LEN,sp)
                                    656 	; if acc24==0 conversion done
      001807 C6 00 0C         [ 1]  657 	ld a,acc24
      00180A CA 00 0D         [ 1]  658 	or a,acc16
      00180D CA 00 0E         [ 1]  659 	or a,acc8
      001810 26 E3            [ 1]  660     jrne itoa_loop
                                    661 	;conversion done, next add '$' or '-' as required
      001812 C6 00 0A         [ 1]  662 	ld a,base 
      001815 A1 10            [ 1]  663 	cp a,#16
      001817 27 08            [ 1]  664 	jreq 8$
      001819 7B 01            [ 1]  665 	ld a,(SIGN,sp)
      00181B 27 0A            [ 1]  666     jreq 10$
      00181D A6 2D            [ 1]  667     ld a,#'-
      00181F 20 02            [ 2]  668 	jra 9$ 
      001821                        669 8$:	
      001821 A6 24            [ 1]  670 	ld a,#'$ 
      001823 5A               [ 2]  671 9$: decw x
      001824 F7               [ 1]  672     ld (x),a
      001825 0C 02            [ 1]  673 	inc (LEN,sp)
      001827                        674 10$:
      001827 7B 02            [ 1]  675 	ld a,(LEN,sp)
      001829                        676 	_drop VSIZE
      001829 5B 04            [ 2]    1     addw sp,#VSIZE 
      00182B 81               [ 4]  677 	ret
                                    678 
                                    679 ;------------------------------------
                                    680 ; convert alpha to uppercase
                                    681 ; input:
                                    682 ;    a  character to convert
                                    683 ; output:
                                    684 ;    a  uppercase character
                                    685 ;------------------------------------
      00182C                        686 to_upper::
      00182C A1 61            [ 1]  687 	cp a,#'a
      00182E 2A 01            [ 1]  688 	jrpl 1$
      001830 81               [ 4]  689 0$:	ret
      001831 A1 7A            [ 1]  690 1$: cp a,#'z	
      001833 22 FB            [ 1]  691 	jrugt 0$
      001835 A0 20            [ 1]  692 	sub a,#32
      001837 81               [ 4]  693 	ret
                                    694 	
                                    695 ;------------------------------------
                                    696 ; convert pad content in integer
                                    697 ; input:
                                    698 ;    x		* .asciz to convert
                                    699 ; output:
                                    700 ;    acc24      int24_t
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                    701 ;------------------------------------
                                    702 	; local variables
                           000001   703 	SIGN=1 ; 1 byte, 
                           000002   704 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   705 	TEMP=3 ; 1 byte, temporary storage
                           000004   706 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   707 	VSIZE=5 ; 5 bytes reserved for local storage
      001838                        708 atoi24::
      001838                        709 	_vars VSIZE
      001838 52 05            [ 2]    1     sub sp,#VSIZE 
      00183A 1F 04            [ 2]  710 	ldw (XTEMP,sp),x 
                                    711 ; conversion made on xstack 
      00183C 4F               [ 1]  712 	clr a 
      00183D 5F               [ 1]  713 	clrw x 
      00183E                        714 	_xpush 
      00183E 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001842 90 F7            [ 1]    2     ld (y),a 
      001844 90 EF 01         [ 2]    3     ldw (1,y),x 
      001847 0F 01            [ 1]  715 	clr (SIGN,sp)
      001849 A6 0A            [ 1]  716 	ld a,#10
      00184B 6B 02            [ 1]  717 	ld (BASE,sp),a ; default base decimal
      00184D 1E 04            [ 2]  718 	ldw x,(XTEMP,sp)
      00184F F6               [ 1]  719 	ld a,(x)
      001850 27 50            [ 1]  720 	jreq 9$  ; completed if 0
      001852 A1 2D            [ 1]  721 	cp a,#'-
      001854 26 04            [ 1]  722 	jrne 1$
      001856 03 01            [ 1]  723 	cpl (SIGN,sp)
      001858 20 08            [ 2]  724 	jra 2$
      00185A A1 24            [ 1]  725 1$: cp a,#'$
      00185C 26 08            [ 1]  726 	jrne 3$
      00185E A6 10            [ 1]  727 	ld a,#16
      001860 6B 02            [ 1]  728 	ld (BASE,sp),a
      001862 5C               [ 1]  729 2$:	incw x
      001863 1F 04            [ 2]  730 	ldw (XTEMP,sp),x 
      001865 F6               [ 1]  731 	ld a,(x)
      001866                        732 3$:	; char to digit 
      001866 A1 61            [ 1]  733 	cp a,#'a
      001868 2B 02            [ 1]  734 	jrmi 4$
      00186A A0 20            [ 1]  735 	sub a,#32
      00186C A1 30            [ 1]  736 4$:	cp a,#'0
      00186E 2B 32            [ 1]  737 	jrmi 9$
      001870 A0 30            [ 1]  738 	sub a,#'0
      001872 A1 0A            [ 1]  739 	cp a,#10
      001874 2B 06            [ 1]  740 	jrmi 5$
      001876 A0 07            [ 1]  741 	sub a,#7
      001878 11 02            [ 1]  742 	cp a,(BASE,sp)
      00187A 2A 26            [ 1]  743 	jrpl 9$
      00187C 6B 03            [ 1]  744 5$:	ld (TEMP,sp),a
      00187E 7B 02            [ 1]  745 	ld a,(BASE,sp)
      001880 5F               [ 1]  746 	clrw x 
      001881 02               [ 1]  747 	rlwa x 
      001882                        748 	_xpush 
      001882 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001886 90 F7            [ 1]    2     ld (y),a 
      001888 90 EF 01         [ 2]    3     ldw (1,y),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      00188B CD 02 65         [ 4]  749 	call mul24
      00188E 5F               [ 1]  750 	clrw x 
      00188F 7B 03            [ 1]  751 	ld a,(TEMP,sp)
      001891 02               [ 1]  752 	rlwa x 
      001892                        753 	_xpush 
      001892 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001896 90 F7            [ 1]    2     ld (y),a 
      001898 90 EF 01         [ 2]    3     ldw (1,y),x 
      00189B CD 01 6A         [ 4]  754 	call add24 
      00189E 1E 04            [ 2]  755 	ldw x,(XTEMP,sp)
      0018A0 20 C0            [ 2]  756 	jra 2$
      0018A2 0D 01            [ 1]  757 9$:	tnz (SIGN,sp)
      0018A4 27 03            [ 1]  758     jreq atoi_exit
      0018A6 CD 01 EF         [ 4]  759     call neg24
      0018A9                        760 atoi_exit:
      0018A9                        761 	_xpop 
      0018A9 90 F6            [ 1]    1     ld a,(y)
      0018AB 93               [ 1]    2     ldw x,y 
      0018AC EE 01            [ 2]    3     ldw x,(1,x)
      0018AE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0018B2 C7 00 0C         [ 1]  762 	ld acc24,a 
      0018B5 CF 00 0D         [ 2]  763 	ldw acc16,x  
      0018B8                        764 	_drop VSIZE
      0018B8 5B 05            [ 2]    1     addw sp,#VSIZE 
      0018BA 81               [ 4]  765 	ret
                                    766 
                                    767 
                                    768 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    769 ;;   TINY BASIC  operators,
                                    770 ;;   commands and functions 
                                    771 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    772 
                                    773 ;---------------------------------
                                    774 ; dictionary search 
                                    775 ; input:
                                    776 ;	X 		dictionary entry point, name field  
                                    777 ;   y		.asciz name to search 
                                    778 ; output:
                                    779 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    780 ;  X		routine address|TK_OP 
                                    781 ;---------------------------------
                           000001   782 	NLEN=1 ; cmd length 
                           000002   783 	XSAVE=2
                           000004   784 	YSAVE=4
                           000005   785 	VSIZE=5 
      0018BB                        786 search_dict::
      0018BB                        787 	_vars VSIZE 
      0018BB 52 05            [ 2]    1     sub sp,#VSIZE 
      0018BD 17 04            [ 2]  788 	ldw (YSAVE,sp),y 
      0018BF                        789 search_next:
      0018BF 1F 02            [ 2]  790 	ldw (XSAVE,sp),x 
                                    791 ; get name length in dictionary	
      0018C1 F6               [ 1]  792 	ld a,(x)
      0018C2 A4 0F            [ 1]  793 	and a,#0xf 
      0018C4 6B 01            [ 1]  794 	ld (NLEN,sp),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0018C6 16 04            [ 2]  795 	ldw y,(YSAVE,sp) ; name pointer 
      0018C8 5C               [ 1]  796 	incw x 
      0018C9                        797 cp_loop:
      0018C9 90 F6            [ 1]  798 	ld a,(y)
      0018CB 27 1B            [ 1]  799 	jreq str_match 
      0018CD 0D 01            [ 1]  800 	tnz (NLEN,sp)
      0018CF 27 0A            [ 1]  801 	jreq no_match  
      0018D1 F1               [ 1]  802 	cp a,(x)
      0018D2 26 07            [ 1]  803 	jrne no_match 
      0018D4 90 5C            [ 1]  804 	incw y 
      0018D6 5C               [ 1]  805 	incw x
      0018D7 0A 01            [ 1]  806 	dec (NLEN,sp)
      0018D9 20 EE            [ 2]  807 	jra cp_loop 
      0018DB                        808 no_match:
      0018DB 1E 02            [ 2]  809 	ldw x,(XSAVE,sp) 
      0018DD 1D 00 02         [ 2]  810 	subw x,#2 ; move X to link field
      0018E0 4B 00            [ 1]  811 	push #TK_NONE 
      0018E2 FE               [ 2]  812 	ldw x,(x) ; next word link 
      0018E3 84               [ 1]  813 	pop a ; TK_NONE 
      0018E4 27 1D            [ 1]  814 	jreq search_exit  ; not found  
                                    815 ;try next 
      0018E6 20 D7            [ 2]  816 	jra search_next
      0018E8                        817 str_match:
      0018E8 1E 02            [ 2]  818 	ldw x,(XSAVE,sp)
      0018EA F6               [ 1]  819 	ld a,(X)
      0018EB 6B 01            [ 1]  820 	ld (NLEN,sp),a ; needed to test keyword type  
      0018ED A4 0F            [ 1]  821 	and a,#NLEN_MASK 
                                    822 ; move x to procedure address field 	
      0018EF 4C               [ 1]  823 	inc a 
      0018F0 C7 00 0E         [ 1]  824 	ld acc8,a 
      0018F3 72 5F 00 0D      [ 1]  825 	clr acc16 
      0018F7 72 BB 00 0D      [ 2]  826 	addw x,acc16 
      0018FB FE               [ 2]  827 	ldw x,(x) ; routine address  
                                    828 ;determine keyword type bits 7:4 
      0018FC 7B 01            [ 1]  829 	ld a,(NLEN,sp)
      0018FE A4 F0            [ 1]  830 	and a,#KW_TYPE_MASK 
      001900 4E               [ 1]  831 	swap a 
      001901 AB 80            [ 1]  832 	add a,#128
      001903                        833 search_exit: 
      001903                        834 	_drop VSIZE 
      001903 5B 05            [ 2]    1     addw sp,#VSIZE 
      001905 81               [ 4]  835 	ret 
                                    836 
                                    837 ;---------------------
                                    838 ; check if next token
                                    839 ;  is of expected type 
                                    840 ; input:
                                    841 ;   A 		 expected token attribute
                                    842 ;  ouput:
                                    843 ;   none     if fail call syntax_error 
                                    844 ;--------------------
      001906                        845 expect:
      001906 88               [ 1]  846 	push a 
      001907 CD 17 4E         [ 4]  847 	call next_token 
      00190A 11 01            [ 1]  848 	cp a,(1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      00190C 27 03            [ 1]  849 	jreq 1$
      00190E CC 16 47         [ 2]  850 	jp syntax_error
      001911 84               [ 1]  851 1$: pop a 
      001912 81               [ 4]  852 	ret 
                                    853 
                                    854 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    855 ; parse arguments list 
                                    856 ; between ()
                                    857 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001913                        858 func_args:
      001913 A6 06            [ 1]  859 	ld a,#TK_LPAREN 
      001915 CD 19 06         [ 4]  860 	call expect 
                                    861 ; expected to continue in arg_list 
                                    862 ; caller must check for TK_RPAREN 
                                    863 
                                    864 ;-------------------------------
                                    865 ; parse embedded BASIC routines 
                                    866 ; arguments list.
                                    867 ; arg_list::=  expr[','expr]*
                                    868 ; all arguments are of int24_t type
                                    869 ; and pushed on stack 
                                    870 ; input:
                                    871 ;   none
                                    872 ; output:
                                    873 ;   xstack{n}   arguments pushed on xstack
                                    874 ;   A 	number of arguments pushed on xstack  
                                    875 ;--------------------------------
      001918                        876 arg_list:
      001918 4B 00            [ 1]  877 	push #0
      00191A CD 1B 68         [ 4]  878 1$:	call condition 
      00191D 4D               [ 1]  879 	tnz a 
      00191E 27 12            [ 1]  880 	jreq 7$  
      001920 0C 01            [ 1]  881 	inc (1,sp)
      001922 CD 17 4E         [ 4]  882 	call next_token 
      001925 A1 08            [ 1]  883 	cp a,#TK_COMMA 
      001927 27 F1            [ 1]  884 	jreq 1$ 
      001929 A1 07            [ 1]  885 	cp a,#TK_RPAREN
      00192B 27 05            [ 1]  886 	jreq 7$
      00192D                        887 	_unget_token 
      00192D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001932 84               [ 1]  888 7$:	pop a  
      001933 81               [ 4]  889 	ret 
                                    890 
                                    891 ;--------------------------------
                                    892 ;   BASIC commnands 
                                    893 ;--------------------------------
                                    894 
                                    895 ;--------------------------------
                                    896 ;  arithmetic and relational 
                                    897 ;  routines
                                    898 ;  operators precedence
                                    899 ;  highest to lowest
                                    900 ;  operators on same row have 
                                    901 ;  same precedence and are executed
                                    902 ;  from left to right.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



                                    903 ;	'*','/','%'
                                    904 ;   '-','+'
                                    905 ;   '=','>','<','>=','<=','<>','><'
                                    906 ;   '<>' and '><' are equivalent for not equal.
                                    907 ;--------------------------------
                                    908 
                                    909 ;---------------------
                                    910 ; return array element
                                    911 ; address from @(expr)
                                    912 ; input:
                                    913 ;   A 		TK_ARRAY
                                    914 ; output:
                                    915 ;	X 		element address 
                                    916 ;----------------------
      001934                        917 get_array_element:
      001934 CD 19 13         [ 4]  918 	call func_args 
      001937 A1 01            [ 1]  919 	cp a,#1
      001939 27 03            [ 1]  920 	jreq 1$
      00193B CC 16 47         [ 2]  921 	jp syntax_error
      00193E                        922 1$: _xpop 
      00193E 90 F6            [ 1]    1     ld a,(y)
      001940 93               [ 1]    2     ldw x,y 
      001941 EE 01            [ 2]    3     ldw x,(1,x)
      001943 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    923     ; ignore A, index < 65536 in any case 
                                    924 	; check for bounds 
      001947 C3 00 20         [ 2]  925 	cpw x,array_size 
      00194A 23 05            [ 2]  926 	jrule 3$
                                    927 ; bounds {1..array_size}	
      00194C A6 0A            [ 1]  928 2$: ld a,#ERR_BAD_VALUE 
      00194E CC 16 49         [ 2]  929 	jp tb_error 
      001951 5D               [ 2]  930 3$: tnzw  x
      001952 27 F8            [ 1]  931 	jreq 2$ 
      001954 89               [ 2]  932 	pushw x 
      001955 58               [ 2]  933 	sllw x 
      001956 72 FB 01         [ 2]  934 	addw x,(1,sp) ; index*size_of(int24)
      001959 1F 01            [ 2]  935 	ldw (1,sp),x  
      00195B AE 16 68         [ 2]  936 	ldw x,#tib ; array is below tib 
      00195E 72 F0 01         [ 2]  937 	subw x,(1,sp)
      001961                        938 	_drop 2   
      001961 5B 02            [ 2]    1     addw sp,#2 
      001963 81               [ 4]  939 	ret 
                                    940 
                                    941 
                                    942 ;***********************************
                                    943 ;   expression parse,execute 
                                    944 ;***********************************
                                    945 ;-----------------------------------
                                    946 ; factor ::= ['+'|'-'|e]  var | @ |
                                    947 ;			 integer | function |
                                    948 ;			 '('relation')' 
                                    949 ; output:
                                    950 ;   A       token attribute 
                                    951 ;   xstack  value  
                                    952 ; ---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                           000001   953 	NEG=1
                           000001   954 	VSIZE=1
      001964                        955 factor:
      001964                        956 	_vars VSIZE 
      001964 52 01            [ 2]    1     sub sp,#VSIZE 
      001966 0F 01            [ 1]  957 	clr (NEG,sp)
      001968 CD 17 4E         [ 4]  958 	call next_token
      00196B 4D               [ 1]  959 	tnz a 
      00196C 26 03            [ 1]  960 	jrne 1$ 
      00196E CC 1A 09         [ 2]  961 	jp 22$ 
      001971 A1 10            [ 1]  962 1$:	cp a,#TK_PLUS 
      001973 27 06            [ 1]  963 	jreq 2$
      001975 A1 11            [ 1]  964 	cp a,#TK_MINUS 
      001977 26 05            [ 1]  965 	jrne 4$ 
      001979 03 01            [ 1]  966 	cpl (NEG,sp)
      00197B                        967 2$:	
      00197B CD 17 4E         [ 4]  968 	call next_token
      00197E                        969 4$:
      00197E 4D               [ 1]  970 	tnz a 
      00197F 26 03            [ 1]  971 	jrne 41$ 
      001981 CC 16 47         [ 2]  972 	jp syntax_error  
      001984                        973 41$:	
      001984 A1 81            [ 1]  974 	cp a,#TK_IFUNC 
      001986 26 0C            [ 1]  975 	jrne 5$ 
      001988                        976 	_get_code_addr 
      001988 FE               [ 2]    1         ldw x,(x)
      001989 72 5C 00 01      [ 1]    2         inc in 
      00198D 72 5C 00 01      [ 1]    3         inc in 
      001991 FD               [ 4]  977 	call (x); result in A:X  
      001992 20 63            [ 2]  978 	jra 18$ 
      001994                        979 5$:
      001994 A1 84            [ 1]  980 	cp a,#TK_INTGR
      001996 26 05            [ 1]  981 	jrne 6$
      001998 CD 17 80         [ 4]  982 	call get_int24 ; A:X
      00199B 20 5A            [ 2]  983 	jra 18$
      00199D                        984 6$:
      00199D A1 05            [ 1]  985 	cp a,#TK_ARRAY
      00199F 26 05            [ 1]  986 	jrne 7$
      0019A1 CD 19 34         [ 4]  987 	call get_array_element
      0019A4 20 07            [ 2]  988     jra 71$
      0019A6                        989 7$:
      0019A6 A1 85            [ 1]  990 	cp a,#TK_VAR 
      0019A8 26 08            [ 1]  991 	jrne 8$
      0019AA CD 17 76         [ 4]  992 	call get_addr 
      0019AD                        993 71$: ; put value in A:X
      0019AD F6               [ 1]  994 	ld a,(x)
      0019AE EE 01            [ 2]  995 	ldw x,(1,x)
      0019B0 20 45            [ 2]  996 	jra 18$
      0019B2                        997 8$:
      0019B2 A1 03            [ 1]  998 	cp a,#TK_LABEL 
      0019B4 26 10            [ 1]  999 	jrne 9$ 
      0019B6 89               [ 2] 1000 	pushw x 
      0019B7 CD 17 67         [ 4] 1001 	call skip_string
      0019BA 85               [ 2] 1002 	popw x 
      0019BB CD 1D 21         [ 4] 1003 	call search_const 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      0019BE 5D               [ 2] 1004 	tnzw x 
      0019BF 27 2E            [ 1] 1005 	jreq 16$
      0019C1 CD 1C 7D         [ 4] 1006 	call get_const_value ; in A:X 
      0019C4 20 31            [ 2] 1007 	jra 18$
      0019C6                       1008 9$: 
      0019C6 A1 82            [ 1] 1009 	cp a,#TK_CFUNC 
      0019C8 26 0E            [ 1] 1010 	jrne 12$
      0019CA                       1011 	_get_code_addr 
      0019CA FE               [ 2]    1         ldw x,(x)
      0019CB 72 5C 00 01      [ 1]    2         inc in 
      0019CF 72 5C 00 01      [ 1]    3         inc in 
      0019D3 FD               [ 4] 1012 	call(x)
      0019D4 5F               [ 1] 1013 	clrw x 
      0019D5 02               [ 1] 1014 	rlwa x  ; char>int24 in A:X 
      0019D6 20 1F            [ 2] 1015 	jra 18$ 	 
      0019D8                       1016 12$:			
      0019D8 A1 06            [ 1] 1017 	cp a,#TK_LPAREN
      0019DA 26 13            [ 1] 1018 	jrne 16$
      0019DC CD 1A 4F         [ 4] 1019 	call expression
      0019DF A6 07            [ 1] 1020 	ld a,#TK_RPAREN 
      0019E1 CD 19 06         [ 4] 1021 	call expect
      0019E4                       1022 	_xpop 
      0019E4 90 F6            [ 1]    1     ld a,(y)
      0019E6 93               [ 1]    2     ldw x,y 
      0019E7 EE 01            [ 2]    3     ldw x,(1,x)
      0019E9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0019ED 20 08            [ 2] 1023 	jra 18$	
      0019EF                       1024 16$:
      0019EF                       1025 	_unget_token 
      0019EF 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0019F4 4F               [ 1] 1026 	clr a 
      0019F5 20 12            [ 2] 1027 	jra 22$ 
      0019F7                       1028 18$: 
      0019F7 0D 01            [ 1] 1029 	tnz (NEG,sp)
      0019F9 27 03            [ 1] 1030 	jreq 20$
      0019FB CD 02 01         [ 4] 1031 	call neg_ax   
      0019FE                       1032 20$:
      0019FE                       1033 	_xpush 
      0019FE 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001A02 90 F7            [ 1]    2     ld (y),a 
      001A04 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A07 A6 84            [ 1] 1034 	ld a,#TK_INTGR
      001A09                       1035 22$:
      001A09                       1036 	_drop VSIZE
      001A09 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A0B 81               [ 4] 1037 	ret
                                   1038 
                                   1039 
                                   1040 ;-----------------------------------
                                   1041 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1042 ; output:
                                   1043 ;   A    	token attribute 
                                   1044 ;	xstack		value 
                                   1045 ;-----------------------------------
                           000001  1046 	MULOP=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                           000001  1047 	VSIZE=1
      001A0C                       1048 term:
      001A0C                       1049 	_vars VSIZE
      001A0C 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1050 ; first factor 	
      001A0E CD 19 64         [ 4] 1051 	call factor
      001A11 4D               [ 1] 1052 	tnz a 
      001A12 27 38            [ 1] 1053 	jreq term_exit  
      001A14                       1054 term01:	 ; check for  operator '*'|'/'|'%' 
      001A14 CD 17 4E         [ 4] 1055 	call next_token
      001A17 6B 01            [ 1] 1056 	ld (MULOP,sp),a
      001A19 A4 30            [ 1] 1057 	and a,#TK_GRP_MASK
      001A1B A1 20            [ 1] 1058 	cp a,#TK_GRP_MULT
      001A1D 27 09            [ 1] 1059 	jreq 1$
      001A1F A6 84            [ 1] 1060 	ld a,#TK_INTGR
      001A21                       1061 	_unget_token 
      001A21 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A26 20 24            [ 2] 1062 	jra term_exit 
      001A28                       1063 1$:	; got *|/|%
                                   1064 ;second factor
      001A28 CD 19 64         [ 4] 1065 	call factor
      001A2B 4D               [ 1] 1066 	tnz a 
      001A2C 26 03            [ 1] 1067 	jrne 2$ 
      001A2E CC 16 47         [ 2] 1068 	jp syntax_error 
      001A31                       1069 2$: ; select operation 	
      001A31 7B 01            [ 1] 1070 	ld a,(MULOP,sp) 
      001A33 A1 20            [ 1] 1071 	cp a,#TK_MULT 
      001A35 26 05            [ 1] 1072 	jrne 3$
                                   1073 ; '*' operator
      001A37 CD 02 65         [ 4] 1074 	call mul24 
      001A3A 20 D8            [ 2] 1075 	jra term01
      001A3C A1 21            [ 1] 1076 3$: cp a,#TK_DIV 
      001A3E 26 05            [ 1] 1077 	jrne 4$ 
                                   1078 ; '/' operator	
      001A40 CD 02 F3         [ 4] 1079 	call div24 
      001A43 20 CF            [ 2] 1080 	jra term01 
      001A45                       1081 4$: ; '%' operator
      001A45 CD 03 A1         [ 4] 1082 	call mod24
      001A48 20 CA            [ 2] 1083 	jra term01 
      001A4A                       1084 9$: 
      001A4A A6 84            [ 1] 1085 	ld a,#TK_INTGR
      001A4C                       1086 term_exit:
      001A4C                       1087 	_drop VSIZE 
      001A4C 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A4E 81               [ 4] 1088 	ret 
                                   1089 
                                   1090 ;-------------------------------
                                   1091 ;  expr ::= term [['+'|'-'] term]*
                                   1092 ;  result range {-32768..32767}
                                   1093 ;  output:
                                   1094 ;   A    token attribute 
                                   1095 ;   xstack	 result    
                                   1096 ;-------------------------------
                           000001  1097 	OP=1 
                           000001  1098 	VSIZE=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001A4F                       1099 expression:
      001A4F                       1100 	_vars VSIZE 
      001A4F 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1101 ; first term 	
      001A51 CD 1A 0C         [ 4] 1102 	call term
      001A54 4D               [ 1] 1103 	tnz a 
      001A55 27 2D            [ 1] 1104 	jreq 9$
      001A57                       1105 1$:	; operator '+'|'-'
      001A57 CD 17 4E         [ 4] 1106 	call next_token
      001A5A 6B 01            [ 1] 1107 	ld (OP,sp),a 
      001A5C A4 30            [ 1] 1108 	and a,#TK_GRP_MASK
      001A5E A1 10            [ 1] 1109 	cp a,#TK_GRP_ADD 
      001A60 27 09            [ 1] 1110 	jreq 2$ 
      001A62                       1111 	_unget_token 
      001A62 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A67 A6 84            [ 1] 1112 	ld a,#TK_INTGR
      001A69 20 19            [ 2] 1113 	jra 9$ 
      001A6B                       1114 2$: ; second term 
      001A6B CD 1A 0C         [ 4] 1115 	call term
      001A6E 4D               [ 1] 1116 	tnz a 
      001A6F 26 03            [ 1] 1117 	jrne 3$
      001A71 CC 16 47         [ 2] 1118 	jp syntax_error
      001A74                       1119 3$:
      001A74 7B 01            [ 1] 1120 	ld a,(OP,sp)
      001A76 A1 10            [ 1] 1121 	cp a,#TK_PLUS 
      001A78 26 05            [ 1] 1122 	jrne 4$
                                   1123 ; '+' operator	
      001A7A CD 01 6A         [ 4] 1124 	call add24
      001A7D 20 D8            [ 2] 1125 	jra 1$ 
      001A7F                       1126 4$:	; '-' operator 
      001A7F CD 01 87         [ 4] 1127 	call sub24
      001A82 20 D3            [ 2] 1128 	jra 1$
      001A84                       1129 9$:
      001A84                       1130 	_drop VSIZE 
      001A84 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A86 81               [ 4] 1131 	ret 
                                   1132 
                                   1133 ;---------------------------------------------
                                   1134 ; rel ::= expr rel_op expr
                                   1135 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1136 ;  relation return  integer , zero is false 
                                   1137 ;  output:
                                   1138 ;	 xstack		value  
                                   1139 ;---------------------------------------------
                           000001  1140 	RELOP=1
                           000001  1141 	VSIZE=1 
      001A87                       1142 relation: 
      001A87                       1143 	_vars VSIZE
      001A87 52 01            [ 2]    1     sub sp,#VSIZE 
      001A89 CD 1A 4F         [ 4] 1144 	call expression
      001A8C 4D               [ 1] 1145 	tnz a 
      001A8D 27 54            [ 1] 1146 	jreq 9$ 
                                   1147 ; expect rel_op or leave 
      001A8F CD 17 4E         [ 4] 1148 	call next_token 
      001A92 6B 01            [ 1] 1149 	ld (RELOP,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001A94 A4 30            [ 1] 1150 	and a,#TK_GRP_MASK
      001A96 A1 30            [ 1] 1151 	cp a,#TK_GRP_RELOP 
      001A98 27 09            [ 1] 1152 	jreq 2$
      001A9A A6 84            [ 1] 1153 	ld a,#TK_INTGR 
      001A9C                       1154 	_unget_token 
      001A9C 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AA1 20 40            [ 2] 1155 	jra 9$ 
      001AA3                       1156 2$:	; expect another expression
      001AA3 CD 1A 4F         [ 4] 1157 	call expression
      001AA6 4D               [ 1] 1158 	tnz a 
      001AA7 26 03            [ 1] 1159 	jrne 3$
      001AA9 CC 16 47         [ 2] 1160 	jp syntax_error 
      001AAC                       1161 3$: 
      001AAC CD 01 A4         [ 4] 1162 	call cp24 
      001AAF                       1163 	_xpop  
      001AAF 90 F6            [ 1]    1     ld a,(y)
      001AB1 93               [ 1]    2     ldw x,y 
      001AB2 EE 01            [ 2]    3     ldw x,(1,x)
      001AB4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001AB8 4D               [ 1] 1164 	tnz a 
      001AB9 2B 08            [ 1] 1165 	jrmi 4$
      001ABB 26 0C            [ 1] 1166 	jrne 5$
      001ABD 35 02 00 0E      [ 1] 1167 	mov acc8,#2 ; i1==i2
      001AC1 20 0A            [ 2] 1168 	jra 6$ 
      001AC3                       1169 4$: ; i1<i2
      001AC3 35 04 00 0E      [ 1] 1170 	mov acc8,#4 
      001AC7 20 04            [ 2] 1171 	jra 6$
      001AC9                       1172 5$: ; i1>i2
      001AC9 35 01 00 0E      [ 1] 1173 	mov acc8,#1  
      001ACD                       1174 6$: ; 0=false, -1=true 
      001ACD 5F               [ 1] 1175 	clrw x 
      001ACE C6 00 0E         [ 1] 1176 	ld a, acc8  
      001AD1 14 01            [ 1] 1177 	and a,(RELOP,sp)
      001AD3 27 03            [ 1] 1178 	jreq 7$
      001AD5 53               [ 2] 1179 	cplw x 
      001AD6 A6 FF            [ 1] 1180 	ld a,#255 
      001AD8                       1181 7$:	_xpush 
      001AD8 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001ADC 90 F7            [ 1]    2     ld (y),a 
      001ADE 90 EF 01         [ 2]    3     ldw (1,y),x 
      001AE1 A6 84            [ 1] 1182 	ld a,#TK_INTGR
      001AE3                       1183 9$: 
      001AE3                       1184 	_drop VSIZE
      001AE3 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AE5 81               [ 4] 1185 	ret 
                                   1186 
                                   1187 ;-------------------------------------------
                                   1188 ;  AND factor:  [NOT] relation | (condition)
                                   1189 ;  output:
                                   1190 ;     A      TK_INTGR|0
                                   1191 ;-------------------------------------------
                           000001  1192 	NOT_OP=1
      001AE6                       1193 and_factor:
      001AE6 4B 00            [ 1] 1194 	push #0 
      001AE8 CD 17 4E         [ 4] 1195 0$:	call next_token  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001AEB 4D               [ 1] 1196 	tnz a 
      001AEC 27 25            [ 1] 1197 	jreq 8$ 
      001AEE A1 87            [ 1] 1198 	cp a,#TK_NOT 
      001AF0 26 04            [ 1] 1199 	jrne 1$ 
      001AF2 03 01            [ 1] 1200 	cpl (NOT_OP,sp)
      001AF4 20 F2            [ 2] 1201 	jra 0$ 
      001AF6                       1202 1$:	
      001AF6 A1 06            [ 1] 1203 	cp a,#TK_LPAREN 
      001AF8 26 0A            [ 1] 1204 	jrne 2$
      001AFA CD 1B 68         [ 4] 1205 	call condition
      001AFD A6 07            [ 1] 1206 	ld a,#TK_RPAREN 
      001AFF CD 19 06         [ 4] 1207 	call expect
      001B02 20 08            [ 2] 1208 	jra 3$
      001B04                       1209 2$: _unget_token 
      001B04 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B09 CD 1A 87         [ 4] 1210 	call relation
      001B0C                       1211 3$:
      001B0C 0D 01            [ 1] 1212 	tnz (NOT_OP,sp)
      001B0E 27 03            [ 1] 1213 	jreq 8$ 
      001B10 CD 01 E6         [ 4] 1214 	call cpl24
      001B13                       1215 8$:
      001B13                       1216 	_drop 1  
      001B13 5B 01            [ 2]    1     addw sp,#1 
      001B15 81               [ 4] 1217     ret 
                                   1218 
                                   1219 
                                   1220 ;--------------------------------------------
                                   1221 ;  AND operator as priority over OR||XOR 
                                   1222 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1223 ;          
                                   1224 ;  output:
                                   1225 ;     A     TK_INTGR|0
                                   1226 ;    xtack   value 
                                   1227 ;--------------------------------------------
      001B16                       1228 and_cond:
      001B16 CD 1A E6         [ 4] 1229 	call and_factor
      001B19 4D               [ 1] 1230 	tnz a 
      001B1A 27 4B            [ 1] 1231 	jreq 9$  
      001B1C CD 17 4E         [ 4] 1232 1$: call next_token 
      001B1F 4D               [ 1] 1233 	tnz a 
      001B20 27 43            [ 1] 1234 	jreq 6$ 
      001B22 A1 88            [ 1] 1235 	cp a,#TK_AND 
      001B24 27 07            [ 1] 1236 	jreq 3$
      001B26                       1237 	_unget_token 
      001B26 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B2B 20 38            [ 2] 1238 	jra 6$ 
      001B2D CD 1A E6         [ 4] 1239 3$:	call and_factor  
      001B30 4D               [ 1] 1240 	tnz a 
      001B31 26 03            [ 1] 1241 	jrne 4$
      001B33 CC 16 47         [ 2] 1242 	jp syntax_error 
      001B36                       1243 4$:	
      001B36                       1244 	_xpop 
      001B36 90 F6            [ 1]    1     ld a,(y)
      001B38 93               [ 1]    2     ldw x,y 
      001B39 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001B3B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B3F C7 00 0C         [ 1] 1245 	ld acc24,a 
      001B42 CF 00 0D         [ 2] 1246 	ldw acc16,x
      001B45                       1247 	_xpop 
      001B45 90 F6            [ 1]    1     ld a,(y)
      001B47 93               [ 1]    2     ldw x,y 
      001B48 EE 01            [ 2]    3     ldw x,(1,x)
      001B4A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B4E C4 00 0C         [ 1] 1248 	and a,acc24 
      001B51 02               [ 1] 1249 	rlwa x 
      001B52 C4 00 0D         [ 1] 1250 	and a,acc16 
      001B55 02               [ 1] 1251 	rlwa x 
      001B56 C4 00 0E         [ 1] 1252 	and a,acc8 
      001B59 02               [ 1] 1253 	rlwa x
      001B5A                       1254 	_xpush
      001B5A 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B5E 90 F7            [ 1]    2     ld (y),a 
      001B60 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B63 20 B7            [ 2] 1255 	jra 1$  
      001B65 A6 84            [ 1] 1256 6$: ld a,#TK_INTGR 
      001B67 81               [ 4] 1257 9$:	ret 	 
                                   1258 
                                   1259 
                                   1260 ;--------------------------------------------
                                   1261 ; condition for IF and UNTIL 
                                   1262 ; operators: OR,XOR 
                                   1263 ; format:  and_cond [ OP and_cond ]* 
                                   1264 ; output:
                                   1265 ;    A        INTGR|0 
                                   1266 ;    xstack   value 
                                   1267 ;--------------------------------------------
                           000001  1268 	ATMP=1
                           000002  1269 	OP=2
                           000002  1270 	VSIZE=2 
      001B68                       1271 condition:
      001B68                       1272 	_vars VSIZE 
      001B68 52 02            [ 2]    1     sub sp,#VSIZE 
      001B6A CD 1B 16         [ 4] 1273 	call and_cond
      001B6D 4D               [ 1] 1274 	tnz a 
      001B6E 27 69            [ 1] 1275 	jreq 9$ 
      001B70 CD 17 4E         [ 4] 1276 1$:	call next_token 
      001B73 A1 89            [ 1] 1277 	cp a,#TK_OR 
      001B75 27 0B            [ 1] 1278 	jreq 2$
      001B77 A1 8A            [ 1] 1279 	cp a,#TK_XOR
      001B79 27 07            [ 1] 1280 	jreq 2$ 
      001B7B                       1281 	_unget_token 
      001B7B 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B80 20 55            [ 2] 1282 	jra 8$ 
      001B82 6B 02            [ 1] 1283 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001B84 CD 1B 16         [ 4] 1284 	call and_cond
      001B87 A1 84            [ 1] 1285 	cp a,#TK_INTGR 
      001B89 27 03            [ 1] 1286 	jreq 3$
      001B8B CC 16 47         [ 2] 1287 	jp syntax_error 
      001B8E                       1288 3$:	 
      001B8E                       1289 	_xpop  ; rigth arg 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001B8E 90 F6            [ 1]    1     ld a,(y)
      001B90 93               [ 1]    2     ldw x,y 
      001B91 EE 01            [ 2]    3     ldw x,(1,x)
      001B93 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B97 C7 00 0C         [ 1] 1290 	ld acc24,a 
      001B9A CF 00 0D         [ 2] 1291 	ldw acc16,x 
      001B9D                       1292 	_xpop  ; left arg  
      001B9D 90 F6            [ 1]    1     ld a,(y)
      001B9F 93               [ 1]    2     ldw x,y 
      001BA0 EE 01            [ 2]    3     ldw x,(1,x)
      001BA2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BA6 6B 01            [ 1] 1293 	ld (ATMP,sp),a 
      001BA8 7B 02            [ 1] 1294 	ld a,(OP,sp)
      001BAA A1 8A            [ 1] 1295 	cp a,#TK_XOR 
      001BAC 27 10            [ 1] 1296 	jreq 5$ 
      001BAE                       1297 4$: ; A:X OR acc24   
      001BAE 7B 01            [ 1] 1298 	ld a,(ATMP,sp)
      001BB0 CA 00 0C         [ 1] 1299 	or a,acc24 
      001BB3 02               [ 1] 1300 	rlwa x 
      001BB4 CA 00 0D         [ 1] 1301 	or a,acc16 
      001BB7 02               [ 1] 1302 	rlwa x 
      001BB8 CA 00 0E         [ 1] 1303 	or a,acc8 
      001BBB 02               [ 1] 1304 	rlwa x 
      001BBC 20 0E            [ 2] 1305 	jra 6$  
      001BBE                       1306 5$: ; A:X XOR acc24 
      001BBE 7B 01            [ 1] 1307 	ld a,(ATMP,sp)
      001BC0 C8 00 0C         [ 1] 1308 	xor a,acc24 
      001BC3 02               [ 1] 1309 	rlwa x 
      001BC4 C8 00 0D         [ 1] 1310 	xor a,acc16 
      001BC7 02               [ 1] 1311 	rlwa x 
      001BC8 C8 00 0E         [ 1] 1312 	xor a,acc8 
      001BCB 02               [ 1] 1313 	rlwa x 
      001BCC                       1314 6$: _xpush
      001BCC 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BD0 90 F7            [ 1]    2     ld (y),a 
      001BD2 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BD5 20 99            [ 2] 1315 	jra 1$ 
      001BD7 A6 84            [ 1] 1316 8$:	ld a,#TK_INTGR 
      001BD9                       1317 9$:	_drop VSIZE 
      001BD9 5B 02            [ 2]    1     addw sp,#VSIZE 
      001BDB 81               [ 4] 1318 	ret 
                                   1319 
                                   1320 
                                   1321 ;--------------------------------------------
                                   1322 ; BASIC: HEX 
                                   1323 ; select hexadecimal base for integer print
                                   1324 ;---------------------------------------------
      001BDC                       1325 hex_base:
      001BDC 35 10 00 0A      [ 1] 1326 	mov base,#16 
      001BE0 81               [ 4] 1327 	ret 
                                   1328 
                                   1329 ;--------------------------------------------
                                   1330 ; BASIC: DEC 
                                   1331 ; select decimal base for integer print
                                   1332 ;---------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001BE1                       1333 dec_base:
      001BE1 35 0A 00 0A      [ 1] 1334 	mov base,#10
      001BE5 81               [ 4] 1335 	ret 
                                   1336 
                                   1337 ;------------------------
                                   1338 ; BASIC: FREE 
                                   1339 ; return free size in RAM 
                                   1340 ; output:
                                   1341 ;   A:x		size 
                                   1342 ;--------------------------
      001BE6                       1343 free:
      001BE6 90 89            [ 2] 1344 	pushw y 
      001BE8 4F               [ 1] 1345 	clr a 
      001BE9 AE 16 68         [ 2] 1346 	ldw x,#tib 
      001BEC 90 CE 00 1D      [ 2] 1347 	ldw y,txtend 
      001BF0 90 A3 34 80      [ 2] 1348 	cpw y,#app_space
      001BF4 25 05            [ 1] 1349 	jrult 1$
      001BF6 1D 00 80         [ 2] 1350 	subw x,#free_ram 
      001BF9 20 04            [ 2] 1351 	jra 2$ 
      001BFB                       1352 1$:	
      001BFB 72 B0 00 1D      [ 2] 1353 	subw x,txtend
      001BFF 90 85            [ 2] 1354 2$:	popw y 
      001C01 81               [ 4] 1355 	ret 
                                   1356 
                                   1357 ;------------------------------
                                   1358 ; BASIC: SIZE 
                                   1359 ; command that print 
                                   1360 ; program start addres and size 
                                   1361 ;------------------------------
      001C02                       1362 cmd_size:
      001C02 3B 00 0A         [ 1] 1363 	push base 
      001C05 AE 1E 5F         [ 2] 1364 	ldw x,#PROG_ADDR 
      001C08 CD 09 6D         [ 4] 1365 	call puts 
      001C0B CE 00 1B         [ 2] 1366 	ldw x,txtbgn     
      001C0E 35 10 00 0A      [ 1] 1367 	mov base,#16 
      001C12 CD 17 96         [ 4] 1368 	call prt_i16
      001C15 32 00 0A         [ 1] 1369 	pop base 
      001C18 AE 1E 71         [ 2] 1370 	ldw x,#PROG_SIZE 
      001C1B CD 09 6D         [ 4] 1371 	call puts 
      001C1E CE 00 1D         [ 2] 1372 	ldw x,txtend 
      001C21 72 B0 00 1B      [ 2] 1373 	subw x,txtbgn 
      001C25 CD 17 96         [ 4] 1374 	call prt_i16
      001C28 AE 1E 82         [ 2] 1375 	ldw x,#STR_BYTES 
      001C2B CD 09 6D         [ 4] 1376 	call puts  
      001C2E 81               [ 4] 1377 	ret 
                                   1378 
                                   1379 
                                   1380 ;------------------------
                                   1381 ; BASIC: UBOUND  
                                   1382 ; return array variable size 
                                   1383 ; and set 'array_size' variable 
                                   1384 ; output:
                                   1385 ;   A:X 	array_size
                                   1386 ;--------------------------
      001C2F                       1387 ubound:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001C2F CD 1B E6         [ 4] 1388 	call free 
      001C32 A6 03            [ 1] 1389 	ld a,#CELL_SIZE 
      001C34 62               [ 2] 1390 	div x,a 
      001C35 CF 00 20         [ 2] 1391 	ldw array_size,x
      001C38 4F               [ 1] 1392 	clr a 
      001C39 81               [ 4] 1393 	ret 
                                   1394 
                                   1395 ;-----------------------------
                                   1396 ; BASIC: LET var=expr 
                                   1397 ; variable assignement 
                                   1398 ; output:
                                   1399 ;   A 		TK_NONE 
                                   1400 ;-----------------------------
      001C3A                       1401 let::
      001C3A CD 17 4E         [ 4] 1402 	call next_token 
      001C3D A1 85            [ 1] 1403 	cp a,#TK_VAR 
      001C3F 27 0C            [ 1] 1404 	jreq let_var
      001C41 A1 05            [ 1] 1405 	cp a,#TK_ARRAY 
      001C43 27 03            [ 1] 1406 	jreq  let_array
      001C45 CC 16 47         [ 2] 1407 	jp syntax_error
      001C48                       1408 let_array:
      001C48 CD 19 34         [ 4] 1409 	call get_array_element
      001C4B 20 03            [ 2] 1410 	jra let_eval 
      001C4D                       1411 let_var:
      001C4D CD 17 76         [ 4] 1412 	call get_addr
      001C50                       1413 let_eval:
      001C50 CF 00 19         [ 2] 1414 	ldw ptr16,x  ; variable address 
      001C53 CD 17 4E         [ 4] 1415 	call next_token 
      001C56 A1 32            [ 1] 1416 	cp a,#TK_EQUAL
      001C58 27 03            [ 1] 1417 	jreq 1$
      001C5A CC 16 47         [ 2] 1418 	jp syntax_error
      001C5D                       1419 1$:	
      001C5D CD 1B 68         [ 4] 1420 	call condition   
      001C60 A1 84            [ 1] 1421 	cp a,#TK_INTGR 
      001C62 27 03            [ 1] 1422 	jreq 2$
      001C64 CC 16 47         [ 2] 1423 	jp syntax_error
      001C67                       1424 2$:	
      001C67                       1425 	_xpop ; value 
      001C67 90 F6            [ 1]    1     ld a,(y)
      001C69 93               [ 1]    2     ldw x,y 
      001C6A EE 01            [ 2]    3     ldw x,(1,x)
      001C6C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C70                       1426 3$:
      001C70 72 C7 00 19      [ 4] 1427 	ld [ptr16],a
      001C74 72 5C 00 1A      [ 1] 1428 	inc ptr8  
      001C78 72 CF 00 19      [ 5] 1429 	ldw [ptr16],x 
      001C7C 81               [ 4] 1430 	ret 
                                   1431 
                                   1432 
                                   1433 ;--------------------------
                                   1434 ; return constant value 
                                   1435 ; from it's record address
                                   1436 ; input:
                                   1437 ;	X	*const record 
                                   1438 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                   1439 ;   A:X   const  value
                                   1440 ;--------------------------
      001C7D                       1441 get_const_value: ; -- i 
      001C7D F6               [ 1] 1442 	ld a,(x) ; record size 
      001C7E A0 03            [ 1] 1443 	sub a,#3 ; * value 
      001C80 88               [ 1] 1444 	push a 
      001C81 4B 00            [ 1] 1445 	push #0 
      001C83 72 FB 01         [ 2] 1446 	addw x,(1,sp)
      001C86 F6               [ 1] 1447 	ld a,(x)
      001C87 EE 01            [ 2] 1448 	ldw x,(1,x)
      001C89                       1449 	_drop 2
      001C89 5B 02            [ 2]    1     addw sp,#2 
      001C8B 81               [ 4] 1450 	ret 
                                   1451 
                                   1452 
                                   1453 ;--------------------------
                                   1454 ; list constants in EEPROM 
                                   1455 ; call when using LIST \C 
                                   1456 ;-------------------------
                           000001  1457 	COUNT=1
                           000003  1458 	YTEMP=3
                           000004  1459 	VSIZE=4 
      001C8C                       1460 list_const:
      001C8C 90 89            [ 2] 1461 	pushw y 
      001C8E                       1462 	_vars 4 
      001C8E 52 04            [ 2]    1     sub sp,#4 
      001C90 5F               [ 1] 1463 	clrw x 
      001C91 1F 01            [ 2] 1464 	ldw (COUNT,sp),x  
      001C93 90 AE 40 00      [ 2] 1465 	ldw Y,#EEPROM_BASE 
      001C97 90 C3 00 24      [ 2] 1466 1$:	cpw y,free_eeprom 
      001C9B 24 35            [ 1] 1467 	jruge 9$
      001C9D 17 03            [ 2] 1468     ldw (YTEMP,sp),y 
      001C9F 93               [ 1] 1469 	ldw x,y
      001CA0 5C               [ 1] 1470 	incw x 
      001CA1 CD 09 6D         [ 4] 1471 	call puts  
      001CA4 A6 3D            [ 1] 1472 	ld a,#'= 
      001CA6 CD 09 10         [ 4] 1473 	call putc 
      001CA9 1E 03            [ 2] 1474 	ldw x,(YTEMP,sp)
      001CAB CD 1C 7D         [ 4] 1475 	call get_const_value 
      001CAE C7 00 0C         [ 1] 1476 	ld acc24,a 
      001CB1 CF 00 0D         [ 2] 1477 	ldw acc16,x 
      001CB4 CD 17 AD         [ 4] 1478 	call prt_acc24
      001CB7 A6 0D            [ 1] 1479 	ld a,#CR 
      001CB9 CD 09 10         [ 4] 1480 	call putc 
      001CBC 1E 01            [ 2] 1481 	ldw x,(COUNT,sp)
      001CBE 5C               [ 1] 1482 	incw x 
      001CBF 1F 01            [ 2] 1483 	ldw (COUNT,sp),x 
      001CC1 72 5F 00 0D      [ 1] 1484 	clr acc16 
      001CC5 16 03            [ 2] 1485 	ldw y,(YTEMP,sp)
      001CC7 90 F6            [ 1] 1486 	ld a,(y)
      001CC9 C7 00 0E         [ 1] 1487 	ld acc8,a
      001CCC 72 B9 00 0D      [ 2] 1488 	addw y,acc16 
      001CD0 20 C5            [ 2] 1489 	jra 1$ 
      001CD2                       1490 9$:	
      001CD2 1E 01            [ 2] 1491 	ldw x,(COUNT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001CD4 CD 17 96         [ 4] 1492 	call prt_i16 
      001CD7 AE 1C E2         [ 2] 1493 	ldw x,#CONST_COUNT 
      001CDA CD 09 6D         [ 4] 1494 	call puts 
      001CDD                       1495 	_drop VSIZE 
      001CDD 5B 04            [ 2]    1     addw sp,#VSIZE 
      001CDF 90 85            [ 2] 1496 	popw y 
      001CE1 81               [ 4] 1497 	ret 
                                   1498 
      001CE2 20 63 6F 6E 73 74 61  1499 CONST_COUNT: .asciz " constants in EEPROM\n"
             6E 74 73 20 69 6E 20
             45 45 50 52 4F 4D 0A
             00
                                   1500 
                                   1501 
                                   1502 ;--------------------------
                                   1503 ; BASIC: EEFREE 
                                   1504 ; eeprom_free 
                                   1505 ; search end of data  
                                   1506 ; in EEPROM 
                                   1507 ; input:
                                   1508 ;    none 
                                   1509 ; output:
                                   1510 ;    A:X     address free
                                   1511 ;-------------------------
      001CF8                       1512 func_eefree:
      001CF8 AE 40 00         [ 2] 1513 	ldw x,#EEPROM_BASE 
      001CFB 35 08 00 0E      [ 1] 1514 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001CFF A3 47 F8         [ 2] 1515     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D02 24 17            [ 1] 1516 	jruge 8$ ; no free space 
      001D04 F6               [ 1] 1517 2$: ld a,(x)
      001D05 26 0C            [ 1] 1518 	jrne 3$
      001D07 5C               [ 1] 1519 	incw x 
      001D08 72 5A 00 0E      [ 1] 1520 	dec acc8 
      001D0C 26 F6            [ 1] 1521 	jrne 2$
      001D0E 1D 00 08         [ 2] 1522 	subw x,#8 
      001D11 20 09            [ 2] 1523 	jra 9$  
      001D13 F6               [ 1] 1524 3$: ld a,(x)
      001D14 5C               [ 1] 1525 	incw x
      001D15 4D               [ 1] 1526 	tnz a  
      001D16 26 FB            [ 1] 1527 	jrne 3$
      001D18 5A               [ 2] 1528 	decw x   
      001D19 20 E0            [ 2] 1529 	jra 1$ 
      001D1B 5F               [ 1] 1530 8$: clrw x ; no free space 
      001D1C 4F               [ 1] 1531 9$: clr a 
      001D1D CF 00 24         [ 2] 1532 	ldw free_eeprom,x ; save in system variable 
      001D20 81               [ 4] 1533 	ret 
                                   1534 
                           000005  1535 CONST_REC_XTRA_BYTES=5 
                                   1536 ;--------------------------
                                   1537 ; search constant name 
                                   1538 ; format of constant record  
                                   1539 ;   .byte record length 
                                   1540 ;         = strlen(name)+5 
                                   1541 ;   .asciz name (variable length)
                                   1542 ;   .int24 value (3 bytes )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



                                   1543 ; a constant record use 7+ bytes
                                   1544 ; constants are saved in EEPROM  
                                   1545 ; input:
                                   1546 ;    X     *name
                                   1547 ; output:
                                   1548 ;    X     address|0
                                   1549 ; use:
                                   1550 ;   A,Y, acc16 
                                   1551 ;-------------------------
                           000001  1552 	NAMEPTR=1 ; target name pointer 
                           000003  1553 	EEPTR=3   ; walking pointer in EEPROM
                           000005  1554 	RECLEN=5  ; record length of target
                           000005  1555 	VSIZE=5
      001D21                       1556 search_const:
      001D21 90 89            [ 2] 1557 	pushw y 
      001D23                       1558 	_vars VSIZE
      001D23 52 05            [ 2]    1     sub sp,#VSIZE 
      001D25 72 5F 00 0D      [ 1] 1559 	clr acc16 
      001D29 CD 13 8B         [ 4] 1560 	call strlen 
      001D2C AB 05            [ 1] 1561 	add a,#CONST_REC_XTRA_BYTES
      001D2E 6B 05            [ 1] 1562 	ld (RECLEN,sp),a    
      001D30 1F 01            [ 2] 1563 	ldw (NAMEPTR,sp),x
      001D32 90 AE 40 00      [ 2] 1564 	ldw y,#EEPROM_BASE 
      001D36 1E 01            [ 2] 1565 1$:	ldw x,(NAMEPTR,sp)
      001D38 17 03            [ 2] 1566 	ldw (EEPTR,sp),y
      001D3A 90 C3 00 24      [ 2] 1567 	cpw y, free_eeprom 
      001D3E 24 1A            [ 1] 1568 	jruge 7$ ; no match found 
      001D40 90 F6            [ 1] 1569 	ld a,(y)
      001D42 11 05            [ 1] 1570 	cp a,(RECLEN,sp)
      001D44 26 07            [ 1] 1571 	jrne 2$ 
      001D46 90 5C            [ 1] 1572 	incw y 
      001D48 CD 13 96         [ 4] 1573 	call strcmp
      001D4B 26 11            [ 1] 1574 	jrne 8$ ; match found 
      001D4D                       1575 2$: ; skip this one 	
      001D4D 16 03            [ 2] 1576 	ldW Y,(EEPTR,sp)
      001D4F 90 F6            [ 1] 1577 	ld a,(y)
      001D51 C7 00 0E         [ 1] 1578 	ld acc8,a 
      001D54 72 B9 00 0D      [ 2] 1579 	addw y,acc16 
      001D58 20 DC            [ 2] 1580 	jra 1$  
      001D5A                       1581 7$: ; no match found 
      001D5A 0F 03            [ 1] 1582 	clr (EEPTR,sp)
      001D5C 0F 04            [ 1] 1583 	clr (EEPTR+1,sp)
      001D5E                       1584 8$: ; match found 
      001D5E 1E 03            [ 2] 1585 	ldw x,(EEPTR,sp) ; record address 
      001D60                       1586 9$:	_DROP VSIZE
      001D60 5B 05            [ 2]    1     addw sp,#VSIZE 
      001D62 90 85            [ 2] 1587 	 popw y 
      001D64 81               [ 4] 1588 	 ret 
                                   1589 
                                   1590 
                                   1591 ;--------------------------------------------
                                   1592 ; BASIC: CONST name=value [, name=value]*
                                   1593 ; define constant(s) saved in EEPROM
                                   1594 ;--------------------------------------------
                           000001  1595 	CNAME=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                           000003  1596 	BUFPTR=3
                           000005  1597 	RECLEN=5
                           000006  1598 	UPDATE=6
                           000007  1599 	YSAVE=7
                           000008  1600 	VSIZE=8 
      001D65                       1601 cmd_const:
      001D65 90 89            [ 2] 1602 	pushw y 
      001D67                       1603 	_vars VSIZE 
      001D67 52 08            [ 2]    1     sub sp,#VSIZE 
      001D69 0F 06            [ 1] 1604 	clr (UPDATE,sp)
      001D6B CD 17 4E         [ 4] 1605 	call next_token 
      001D6E A1 04            [ 1] 1606 	cp a,#TK_CHAR 
      001D70 26 0D            [ 1] 1607 	jrne 0$
      001D72 CD 17 90         [ 4] 1608 	call get_char 
      001D75 A4 DF            [ 1] 1609 	and a,#0xDF 
      001D77 A1 55            [ 1] 1610 	cp a,#'U 
      001D79 26 08            [ 1] 1611 	jrne 1$
      001D7B 03 06            [ 1] 1612 	cpl (UPDATE,sp)
      001D7D 20 07            [ 2] 1613 	jra const_loop 
      001D7F A1 03            [ 1] 1614 0$: cp a,#TK_LABEL 
      001D81 27 08            [ 1] 1615 	jreq cloop_1
      001D83 CC 16 47         [ 2] 1616 1$: jp syntax_error
      001D86                       1617 const_loop: 
      001D86 A6 03            [ 1] 1618 	ld a,#TK_LABEL 
      001D88 CD 19 06         [ 4] 1619 	call expect  
      001D8B                       1620 cloop_1: 
      001D8B 1F 01            [ 2] 1621 	ldw (CNAME,sp),x ; *const_name
      001D8D CD 17 67         [ 4] 1622 	call skip_string
      001D90 1E 01            [ 2] 1623 	ldw x,(CNAME,sp)
      001D92 CD 13 8B         [ 4] 1624 	call strlen  
      001D95 AB 05            [ 1] 1625 	add a,#CONST_REC_XTRA_BYTES 
      001D97 6B 05            [ 1] 1626 	ld (RECLEN,sp),a 
                                   1627 ; copy name in buffer  
      001D99 16 01            [ 2] 1628 	ldw y,(CNAME,sp) 
      001D9B AE 16 68         [ 2] 1629 	ldw x,#tib  
      001D9E 7B 05            [ 1] 1630 	ld a,(RECLEN,sp)
      001DA0 F7               [ 1] 1631 	ld (x),a 
      001DA1 5C               [ 1] 1632 	incw x  
      001DA2 CD 13 A7         [ 4] 1633 	call strcpy 
      001DA5 1F 03            [ 2] 1634 	ldw (BUFPTR,sp),x 
                                   1635 ; x not updated by strcpy 
                                   1636 ; BUFPTR must be incremented 
                                   1637 ; to point after name 
      001DA7 5F               [ 1] 1638 	clrw x 
      001DA8 7B 05            [ 1] 1639 	ld a,(RECLEN,sp)
      001DAA A0 04            [ 1] 1640 	sub a,#CONST_REC_XTRA_BYTES-1
      001DAC 97               [ 1] 1641 	ld xl,a  
      001DAD 72 FB 03         [ 2] 1642 	addw x,(BUFPTR,sp)
      001DB0 1F 03            [ 2] 1643 	ldw (BUFPTR,sp),x 
      001DB2 A6 32            [ 1] 1644 	ld a,#TK_EQUAL 
      001DB4 CD 19 06         [ 4] 1645 	call expect 
      001DB7 16 07            [ 2] 1646 	ldw y,(YSAVE,sp) ; restore xstack pointer 
      001DB9 CD 1A 4F         [ 4] 1647 	call expression 
      001DBC A1 84            [ 1] 1648 	cp a,#TK_INTGR 
      001DBE 27 03            [ 1] 1649 	jreq 5$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001DC0 CC 16 47         [ 2] 1650 	jp syntax_error 
      001DC3                       1651 5$:	_xpop 
      001DC3 90 F6            [ 1]    1     ld a,(y)
      001DC5 93               [ 1]    2     ldw x,y 
      001DC6 EE 01            [ 2]    3     ldw x,(1,x)
      001DC8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001DCC 17 07            [ 2] 1652 	ldw (YSAVE,sp),y ; save xtack pointer 
      001DCE 16 03            [ 2] 1653 	ldw y,(BUFPTR,sp)
      001DD0 90 F7            [ 1] 1654 	ld (y),a 
      001DD2 90 EF 01         [ 2] 1655 	ldw (1,y),x 
                                   1656 ; record completed in buffer 
                                   1657 ; check if constant already exist 
                                   1658 ; if exist and \U option then update  
      001DD5 72 5F 00 18      [ 1] 1659 	clr farptr 
      001DD9 1E 01            [ 2] 1660 	ldw x,(CNAME,sp)
      001DDB CD 1D 21         [ 4] 1661 	call search_const 
      001DDE 5D               [ 2] 1662 	tnzw x 
      001DDF 27 06            [ 1] 1663 	jreq 6$ ; new constant  
      001DE1 0D 06            [ 1] 1664 	tnz (UPDATE,sp)
      001DE3 27 1F            [ 1] 1665 	jreq 8$ 
      001DE5 20 03            [ 2] 1666 	jra 7$	
      001DE7                       1667 6$:	
      001DE7 CE 00 24         [ 2] 1668 	ldw x,free_eeprom  
      001DEA                       1669 7$:	
      001DEA CF 00 19         [ 2] 1670 	ldw farptr+1,x 
      001DED AE 16 68         [ 2] 1671 	ldw x,#tib 
      001DF0 7B 05            [ 1] 1672 	ld a,(RECLEN,sp)
      001DF2 CD 08 51         [ 4] 1673 	call write_nbytes
      001DF5 0D 06            [ 1] 1674 	tnz (UPDATE,sp)
      001DF7 26 0B            [ 1] 1675 	jrne 8$ ; not a new constant, don't update free_eeprom
                                   1676 ; update free_eeprom 
      001DF9 5F               [ 1] 1677 	clrw x 
      001DFA 7B 05            [ 1] 1678 	ld a,(RECLEN,sp)
      001DFC 97               [ 1] 1679 	ld xl,a 
      001DFD 72 BB 00 24      [ 2] 1680 	addw x,free_eeprom 
      001E01 CF 00 24         [ 2] 1681 	ldw free_eeprom,x
      001E04                       1682 8$: ; check for next constant 
      001E04 CD 17 4E         [ 4] 1683 	call next_token 
      001E07 A1 08            [ 1] 1684 	cp a,#TK_COMMA 
      001E09 26 03            [ 1] 1685 	jrne 9$ ; no other constant 
      001E0B CC 1D 86         [ 2] 1686 	jp const_loop 
      001E0E                       1687 9$: 
      001E0E                       1688 	_unget_token    
      001E0E 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E13                       1689 10$: 
      001E13                       1690 	_drop VSIZE 
      001E13 5B 08            [ 2]    1     addw sp,#VSIZE 
      001E15 90 85            [ 2] 1691 	popw y ; restore xstack pointer 
      001E17 81               [ 4] 1692 	ret 
                                   1693 
                                   1694 
                                   1695 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1696 ; return program size 
                                   1697 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E18                       1698 prog_size:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001E18 CE 00 1D         [ 2] 1699 	ldw x,txtend 
      001E1B 72 B0 00 1B      [ 2] 1700 	subw x,txtbgn 
      001E1F 81               [ 4] 1701 	ret 
                                   1702 
                                   1703 ;----------------------------
                                   1704 ; print program information 
                                   1705 ;---------------------------
      001E20                       1706 program_info: 
      001E20 AE 1E 5F         [ 2] 1707 	ldw x,#PROG_ADDR 
      001E23 CD 09 6D         [ 4] 1708 	call puts 
      001E26 CE 00 1B         [ 2] 1709 	ldw x,txtbgn 
      001E29 35 10 00 0A      [ 1] 1710 	mov base,#16 
      001E2D CD 17 96         [ 4] 1711 	call prt_i16
      001E30 35 0A 00 0A      [ 1] 1712 	mov base,#10  
      001E34 AE 1E 71         [ 2] 1713 	ldw x,#PROG_SIZE
      001E37 CD 09 6D         [ 4] 1714 	call puts 
      001E3A CD 1E 18         [ 4] 1715 	call prog_size 
      001E3D CD 17 96         [ 4] 1716 	call prt_i16 
      001E40 AE 1E 82         [ 2] 1717 	ldw x,#STR_BYTES 
      001E43 CD 09 6D         [ 4] 1718 	call puts
      001E46 CE 00 1B         [ 2] 1719 	ldw x,txtbgn
      001E49 A3 34 84         [ 2] 1720 	cpw x,#app 
      001E4C 25 05            [ 1] 1721 	jrult 2$
      001E4E AE 1E 89         [ 2] 1722 	ldw x,#FLASH_MEM 
      001E51 20 03            [ 2] 1723 	jra 3$
      001E53 AE 1E 9A         [ 2] 1724 2$: ldw x,#RAM_MEM 	 
      001E56 CD 09 6D         [ 4] 1725 3$:	call puts 
      001E59 A6 0D            [ 1] 1726 	ld a,#CR 
      001E5B CD 09 10         [ 4] 1727 	call putc
      001E5E 81               [ 4] 1728 	ret 
                                   1729 
      001E5F 70 72 6F 67 72 61 6D  1730 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001E71 2C 20 70 72 6F 67 72  1731 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001E82 20 62 79 74 65 73 00  1732 STR_BYTES: .asciz " bytes" 
      001E89 20 69 6E 20 46 4C 41  1733 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001E9A 20 69 6E 20 52 41 4D  1734 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1735 
                                   1736 
                                   1737 ;----------------------------
                                   1738 ; BASIC: LIST [[start][,end]]
                                   1739 ; list program lines 
                                   1740 ; form start to end 
                                   1741 ; if empty argument list then 
                                   1742 ; list all.
                                   1743 ;----------------------------
                           000001  1744 	FIRST=1
                           000003  1745 	LAST=3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                           000005  1746 	LN_PTR=5
                           000006  1747 	VSIZE=6 
      001EA9                       1748 list:
      001EA9 72 01 00 22 05   [ 2] 1749 	btjf flags,#FRUN,0$
      001EAE A6 07            [ 1] 1750 	ld a,#ERR_CMD_ONLY
      001EB0 CC 16 49         [ 2] 1751 	jp tb_error
      001EB3                       1752 0$:	 
      001EB3 CD 17 4E         [ 4] 1753 	call next_token 
      001EB6 A1 04            [ 1] 1754 	cp a,#TK_CHAR 
      001EB8 26 10            [ 1] 1755 	jrne 2$
      001EBA CD 17 90         [ 4] 1756 	call get_char 
      001EBD A4 DF            [ 1] 1757 	and a,#0xDF 
      001EBF A1 43            [ 1] 1758 	cp a,#'C 
      001EC1 26 04            [ 1] 1759 	jrne 1$
      001EC3 CD 1C 8C         [ 4] 1760 	call list_const
      001EC6 81               [ 4] 1761 	ret 
      001EC7 CC 16 47         [ 2] 1762 1$: jp syntax_error 
      001ECA                       1763 2$:	_unget_token 
      001ECA 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001ECF CD 1E 18         [ 4] 1764 	call prog_size 
      001ED2 22 01            [ 1] 1765 	jrugt 3$
      001ED4 81               [ 4] 1766 	ret 
      001ED5                       1767 3$: _vars VSIZE
      001ED5 52 06            [ 2]    1     sub sp,#VSIZE 
      001ED7 CE 00 1B         [ 2] 1768 	ldw x,txtbgn 
      001EDA 1F 05            [ 2] 1769 	ldw (LN_PTR,sp),x 
      001EDC FE               [ 2] 1770 	ldw x,(x) 
      001EDD 1F 01            [ 2] 1771 	ldw (FIRST,sp),x ; list from first line 
      001EDF AE 7F FF         [ 2] 1772 	ldw x,#MAX_LINENO ; biggest line number 
      001EE2 1F 03            [ 2] 1773 	ldw (LAST,sp),x 
      001EE4 CD 19 18         [ 4] 1774 	call arg_list
      001EE7 4D               [ 1] 1775 	tnz a
      001EE8 27 31            [ 1] 1776 	jreq list_loop 
      001EEA A1 02            [ 1] 1777 	cp a,#2 
      001EEC 27 07            [ 1] 1778 	jreq 4$
      001EEE A1 01            [ 1] 1779 	cp a,#1 
      001EF0 27 06            [ 1] 1780 	jreq first_line 
      001EF2 CC 16 47         [ 2] 1781 	jp syntax_error 
      001EF5 85               [ 2] 1782 4$:	popw x 
      001EF6 1F 05            [ 2] 1783 	ldw (LAST+2,sp),x 
      001EF8                       1784 first_line:
      001EF8 85               [ 2] 1785 	popw x
      001EF9 1F 01            [ 2] 1786 	ldw (FIRST,sp),x 
      001EFB                       1787 lines_skip:
      001EFB CE 00 1B         [ 2] 1788 	ldw x,txtbgn
      001EFE 1F 05            [ 2] 1789 2$:	ldw (LN_PTR,sp),x 
      001F00 C3 00 1D         [ 2] 1790 	cpw x,txtend 
      001F03 2A 38            [ 1] 1791 	jrpl list_exit 
      001F05 FE               [ 2] 1792 	ldw x,(x) ;line# 
      001F06 13 01            [ 2] 1793 	cpw x,(FIRST,sp)
      001F08 2A 11            [ 1] 1794 	jrpl list_loop 
      001F0A 1E 05            [ 2] 1795 	ldw x,(LN_PTR,sp) 
      001F0C E6 02            [ 1] 1796 	ld a,(2,x)
      001F0E C7 00 0E         [ 1] 1797 	ld acc8,a 
      001F11 72 5F 00 0D      [ 1] 1798 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      001F15 72 BB 00 0D      [ 2] 1799 	addw x,acc16
      001F19 20 E3            [ 2] 1800 	jra 2$ 
                                   1801 ; print loop
      001F1B                       1802 list_loop:
      001F1B 1E 05            [ 2] 1803 	ldw x,(LN_PTR,sp)
      001F1D E6 02            [ 1] 1804 	ld a,(2,x) 
      001F1F CD 1F 92         [ 4] 1805 	call prt_basic_line
      001F22 1E 05            [ 2] 1806 	ldw x,(LN_PTR,sp)
      001F24 E6 02            [ 1] 1807 	ld a,(2,x)
      001F26 C7 00 0E         [ 1] 1808 	ld acc8,a 
      001F29 72 5F 00 0D      [ 1] 1809 	clr acc16 
      001F2D 72 BB 00 0D      [ 2] 1810 	addw x,acc16
      001F31 C3 00 1D         [ 2] 1811 	cpw x,txtend 
      001F34 2A 07            [ 1] 1812 	jrpl list_exit
      001F36 1F 05            [ 2] 1813 	ldw (LN_PTR,sp),x
      001F38 FE               [ 2] 1814 	ldw x,(x)
      001F39 13 03            [ 2] 1815 	cpw x,(LAST,sp)  
      001F3B 2F DE            [ 1] 1816 	jrslt list_loop
      001F3D                       1817 list_exit:
      001F3D 55 00 03 00 01   [ 1] 1818 	mov in,count 
      001F42 AE 16 B8         [ 2] 1819 	ldw x,#pad 
      001F45 CF 00 04         [ 2] 1820 	ldw basicptr,x 
      001F48                       1821 	_drop VSIZE 
      001F48 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F4A CD 1E 20         [ 4] 1822 	call program_info 
      001F4D 81               [ 4] 1823 	ret
                                   1824 
                                   1825 
                                   1826 ;--------------------------
                                   1827 ; BASIC: EDIT 
                                   1828 ;  copy program in FLASH 
                                   1829 ;  to RAM for edition 
                                   1830 ;-------------------------
      001F4E                       1831 edit:
      001F4E CD 27 95         [ 4] 1832 	call qsign 
      001F51 27 07            [ 1] 1833 	jreq 1$ 
      001F53 AE 1F 7B         [ 2] 1834 	ldw x,#NOT_SAVED 
      001F56 CD 09 6D         [ 4] 1835 	call puts 
      001F59 81               [ 4] 1836 	ret 
      001F5A                       1837 1$: 
      001F5A 90 AE 34 80      [ 2] 1838 	ldw y,#app_sign ; source address 
      001F5E CE 34 82         [ 2] 1839     ldw x,app_size  
      001F61 1C 00 04         [ 2] 1840 	addw x,#4 
      001F64 CF 00 0D         [ 2] 1841 	ldw acc16,x  ; bytes to copy 
      001F67 AE 00 7C         [ 2] 1842 	ldw x,#rsign ; destination address 
      001F6A CD 13 B7         [ 4] 1843 	call move  
      001F6D AE 00 80         [ 2] 1844 	ldw x,#free_ram 
      001F70 CF 00 1B         [ 2] 1845 	ldw txtbgn,x 
      001F73 72 BB 00 7E      [ 2] 1846 	addw x,rsize  
      001F77 CF 00 1D         [ 2] 1847 	ldw txtend,x 
      001F7A 81               [ 4] 1848 	ret 
                                   1849 
      001F7B 4E 6F 20 61 70 70 6C  1850 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



             0A 00
                                   1851 
                                   1852 
                                   1853 ;--------------------------
                                   1854 ; decompile line from token list
                                   1855 ; and print it. 
                                   1856 ; input:
                                   1857 ;   A       stop at this position 
                                   1858 ;   X 		pointer at line
                                   1859 ; output:
                                   1860 ;   none 
                                   1861 ;--------------------------	
      001F92                       1862 prt_basic_line:
      001F92 90 89            [ 2] 1863 	pushw y 
      001F94 C7 00 03         [ 1] 1864 	ld count,a 
      001F97 E6 02            [ 1] 1865 	ld a,(2,x)
      001F99 C1 00 03         [ 1] 1866 	cp a,count 
      001F9C 2A 03            [ 1] 1867 	jrpl 1$ 
      001F9E C7 00 03         [ 1] 1868 	ld count,a 
      001FA1 CF 00 04         [ 2] 1869 1$:	ldw basicptr,x 
      001FA4 90 AE 16 68      [ 2] 1870 	ldw y,#tib  
      001FA8 CD 11 A7         [ 4] 1871 	call decompile 
      001FAB CD 09 6D         [ 4] 1872 	call puts 
      001FAE A6 0D            [ 1] 1873 	ld a,#CR 
      001FB0 CD 09 10         [ 4] 1874 	call putc 
      001FB3 90 85            [ 2] 1875 	popw y 
      001FB5 81               [ 4] 1876 	ret 
                                   1877 
                                   1878 
                                   1879 ;---------------------------------
                                   1880 ; BASIC: PRINT|? arg_list 
                                   1881 ; print values from argument list
                                   1882 ;----------------------------------
                           000001  1883 	CCOMMA=1
                           000001  1884 	VSIZE=1
      001FB6                       1885 print:
      001FB6                       1886 	_vars VSIZE 
      001FB6 52 01            [ 2]    1     sub sp,#VSIZE 
      001FB8                       1887 reset_comma:
      001FB8 0F 01            [ 1] 1888 	clr (CCOMMA,sp)
      001FBA                       1889 prt_loop:
      001FBA CD 17 4E         [ 4] 1890 	call next_token
      001FBD A1 02            [ 1] 1891 	cp a,#CMD_END 
      001FBF 25 08            [ 1] 1892 	jrult 0$
      001FC1 A1 0A            [ 1] 1893 	cp a,#TK_COLON 
      001FC3 27 04            [ 1] 1894 	jreq 0$
      001FC5 A1 80            [ 1] 1895 	cp a,#TK_CMD
      001FC7 26 07            [ 1] 1896 	jrne 10$
      001FC9                       1897 0$:
      001FC9                       1898 	_unget_token 
      001FC9 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001FCE 20 63            [ 2] 1899 	jra 8$ 
      001FD0                       1900 10$:	
      001FD0 A1 02            [ 1] 1901 	cp a,#TK_QSTR
      001FD2 27 12            [ 1] 1902 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      001FD4 A1 04            [ 1] 1903 	cp a,#TK_CHAR 
      001FD6 27 1B            [ 1] 1904 	jreq 2$ 
      001FD8 A1 82            [ 1] 1905 	cp a,#TK_CFUNC 
      001FDA 27 1F            [ 1] 1906 	jreq 3$
      001FDC A1 08            [ 1] 1907 	cp a,#TK_COMMA 
      001FDE 27 2A            [ 1] 1908 	jreq 4$
      001FE0 A1 09            [ 1] 1909 	cp a,#TK_SHARP 
      001FE2 27 2A            [ 1] 1910 	jreq 5$
      001FE4 20 3D            [ 2] 1911 	jra 7$ 
      001FE6                       1912 1$:	; print string 
      001FE6 CD 09 6D         [ 4] 1913 	call puts
      001FE9 5C               [ 1] 1914 	incw x
      001FEA 72 B0 00 04      [ 2] 1915 	subw x,basicptr 
      001FEE CF 00 00         [ 2] 1916 	ldw in.w,x  
      001FF1 20 C5            [ 2] 1917 	jra reset_comma
      001FF3                       1918 2$:	; print character 
      001FF3 CD 17 90         [ 4] 1919 	call get_char 
      001FF6 CD 09 10         [ 4] 1920 	call putc 
      001FF9 20 BD            [ 2] 1921 	jra reset_comma 
      001FFB                       1922 3$: ; print character function value  	
      001FFB                       1923 	_get_code_addr 
      001FFB FE               [ 2]    1         ldw x,(x)
      001FFC 72 5C 00 01      [ 1]    2         inc in 
      002000 72 5C 00 01      [ 1]    3         inc in 
      002004 FD               [ 4] 1924 	call (x)
      002005 CD 09 10         [ 4] 1925 	call putc
      002008 20 AE            [ 2] 1926 	jra reset_comma 
      00200A                       1927 4$: ; set comma state 
      00200A 03 01            [ 1] 1928 	cpl (CCOMMA,sp)
      00200C 20 AC            [ 2] 1929 	jra prt_loop   
      00200E                       1930 5$: ; # character must be followed by an integer   
      00200E CD 17 4E         [ 4] 1931 	call next_token
      002011 A1 84            [ 1] 1932 	cp a,#TK_INTGR 
      002013 27 03            [ 1] 1933 	jreq 6$
      002015 CC 16 47         [ 2] 1934 	jp syntax_error 
      002018                       1935 6$: ; set tab width
      002018 CD 17 80         [ 4] 1936 	call get_int24 
      00201B 9F               [ 1] 1937 	ld a,xl 
      00201C A4 0F            [ 1] 1938 	and a,#15 
      00201E C7 00 23         [ 1] 1939 	ld tab_width,a 
      002021 20 95            [ 2] 1940 	jra reset_comma 
      002023                       1941 7$:	
      002023                       1942 	_unget_token 
      002023 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002028 CD 1B 68         [ 4] 1943 	call condition
      00202B 4D               [ 1] 1944 	tnz a 
      00202C 27 05            [ 1] 1945 	jreq 8$    
      00202E CD 17 BB         [ 4] 1946     call print_top
      002031 20 85            [ 2] 1947 	jra reset_comma 
      002033                       1948 8$:
      002033 0D 01            [ 1] 1949 	tnz (CCOMMA,sp)
      002035 26 05            [ 1] 1950 	jrne 9$
      002037 A6 0D            [ 1] 1951 	ld a,#CR 
      002039 CD 09 10         [ 4] 1952     call putc 
      00203C                       1953 9$:	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      00203C 5B 01            [ 2]    1     addw sp,#VSIZE 
      00203E 81               [ 4] 1954 	ret 
                                   1955 
                                   1956 ;----------------------
                                   1957 ; 'save_context' and
                                   1958 ; 'rest_context' must be 
                                   1959 ; called at the same 
                                   1960 ; call stack depth 
                                   1961 ; i.e. SP must have the 
                                   1962 ; save value at  
                                   1963 ; entry point of both 
                                   1964 ; routine. 
                                   1965 ;---------------------
                           000004  1966 	CTXT_SIZE=4 ; size of saved data 
                                   1967 ;--------------------
                                   1968 ; save current BASIC
                                   1969 ; interpreter context 
                                   1970 ; on stack 
                                   1971 ;--------------------
      00203F                       1972 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00203F                       1973 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      00203F                       1974 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      00203F                       1975 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      00203F                       1976 save_context:
      00203F CE 00 04         [ 2] 1977 	ldw x,basicptr 
      002042 1F 03            [ 2] 1978 	ldw (BPTR,sp),x
      002044 C6 00 01         [ 1] 1979 	ld a,in 
      002047 6B 05            [ 1] 1980 	ld (IN,sp),a
      002049 C6 00 03         [ 1] 1981 	ld a,count 
      00204C 6B 06            [ 1] 1982 	ld (CNT,sp),a  
      00204E 81               [ 4] 1983 	ret
                                   1984 
                                   1985 ;-----------------------
                                   1986 ; restore previously saved 
                                   1987 ; BASIC interpreter context 
                                   1988 ; from stack 
                                   1989 ;-------------------------
      00204F                       1990 rest_context:
      00204F 1E 03            [ 2] 1991 	ldw x,(BPTR,sp)
      002051 CF 00 04         [ 2] 1992 	ldw basicptr,x 
      002054 7B 05            [ 1] 1993 	ld a,(IN,sp)
      002056 C7 00 01         [ 1] 1994 	ld in,a
      002059 7B 06            [ 1] 1995 	ld a,(CNT,sp)
      00205B C7 00 03         [ 1] 1996 	ld count,a  
      00205E 81               [ 4] 1997 	ret
                                   1998 
                                   1999 
                                   2000 
                                   2001 ;------------------------------------------
                                   2002 ; BASIC: INPUT [string]var[,[string]var]
                                   2003 ; input value in variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



                                   2004 ; [string] optionally can be used as prompt 
                                   2005 ;-----------------------------------------
                           000001  2006 	CX_BPTR=1
                           000003  2007 	CX_IN=3
                           000004  2008 	CX_CNT=4
                           000005  2009 	SKIP=5
                           000005  2010 	VSIZE=5
      00205F                       2011 input_var:
      00205F 90 89            [ 2] 2012 	pushw y 
      002061                       2013 	_vars VSIZE 
      002061 52 05            [ 2]    1     sub sp,#VSIZE 
      002063                       2014 input_loop:
      002063 0F 05            [ 1] 2015 	clr (SKIP,sp)
      002065 CD 17 4E         [ 4] 2016 	call next_token 
      002068 A1 02            [ 1] 2017 	cp a,#TK_QSTR 
      00206A 26 10            [ 1] 2018 	jrne 1$ 
      00206C CD 09 6D         [ 4] 2019 	call puts 
      00206F 5C               [ 1] 2020 	incw x 
      002070 72 B0 00 04      [ 2] 2021 	subw x,basicptr 
      002074 CF 00 00         [ 2] 2022 	ldw in.w,x 
      002077 03 05            [ 1] 2023 	cpl (SKIP,sp)
      002079 CD 17 4E         [ 4] 2024 	call next_token 
      00207C A1 85            [ 1] 2025 1$: cp a,#TK_VAR  
      00207E 27 03            [ 1] 2026 	jreq 2$ 
      002080 CC 16 47         [ 2] 2027 	jp syntax_error
      002083 CD 17 76         [ 4] 2028 2$:	call get_addr
      002086 CF 00 19         [ 2] 2029 	ldw ptr16,x 
      002089 0D 05            [ 1] 2030 	tnz (SKIP,sp)
      00208B 26 06            [ 1] 2031 	jrne 21$ 
      00208D CD 11 9D         [ 4] 2032 	call var_name 
      002090 CD 09 10         [ 4] 2033 	call putc   
      002093                       2034 21$:
      002093 A6 3A            [ 1] 2035 	ld a,#':
      002095 CD 09 10         [ 4] 2036 	call putc 
      002098 CD 20 3F         [ 4] 2037 	call save_context 
      00209B 72 5F 00 03      [ 1] 2038 	clr count  
      00209F CD 0A 72         [ 4] 2039 	call readln 
      0020A2 AE 16 68         [ 2] 2040 	ldw x,#tib 
      0020A5 3B 00 03         [ 1] 2041 	push count
      0020A8 4B 00            [ 1] 2042 	push #0 
      0020AA 72 FB 01         [ 2] 2043 	addw x,(1,sp)
      0020AD 5C               [ 1] 2044 	incw x 
      0020AE                       2045 	_drop 2 
      0020AE 5B 02            [ 2]    1     addw sp,#2 
      0020B0 72 5F 00 01      [ 1] 2046 	clr in 
      0020B4 CD 0E E7         [ 4] 2047 	call get_token
      0020B7 A1 84            [ 1] 2048 	cp a,#TK_INTGR
      0020B9 27 14            [ 1] 2049 	jreq 3$ 
      0020BB A1 11            [ 1] 2050 	cp a,#TK_MINUS
      0020BD 26 07            [ 1] 2051 	jrne 22$
      0020BF CD 0E E7         [ 4] 2052 	call get_token 
      0020C2 A1 84            [ 1] 2053 	cp a,#TK_INTGR 
      0020C4 27 06            [ 1] 2054 	jreq 23$
      0020C6                       2055 22$:
      0020C6 CD 20 4F         [ 4] 2056 	call rest_context 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      0020C9 CC 16 47         [ 2] 2057 	jp syntax_error
      0020CC                       2058 23$:
      0020CC CD 02 09         [ 4] 2059 	call neg_acc24	
      0020CF                       2060 3$: 
      0020CF C6 00 0C         [ 1] 2061 	ld a,acc24 
      0020D2 CE 00 0D         [ 2] 2062 	ldw x,acc16 
      0020D5 72 C7 00 19      [ 4] 2063 	ld [ptr16],a
      0020D9 72 5C 00 1A      [ 1] 2064 	inc ptr8  
      0020DD 72 CF 00 19      [ 5] 2065 	ldw [ptr16],x 
      0020E1 CD 20 4F         [ 4] 2066 	call rest_context
      0020E4 CD 17 4E         [ 4] 2067 	call next_token 
      0020E7 A1 08            [ 1] 2068 	cp a,#TK_COMMA
      0020E9 26 03            [ 1] 2069 	jrne 4$ 
      0020EB CC 20 63         [ 2] 2070 	jp input_loop
      0020EE                       2071 4$:
      0020EE A1 00            [ 1] 2072 	cp a,#TK_NONE 
      0020F0 27 07            [ 1] 2073 	jreq input_exit  
      0020F2 A1 0A            [ 1] 2074 	cp a,#TK_COLON 
      0020F4 27 03            [ 1] 2075     jreq input_exit 
      0020F6 CC 16 47         [ 2] 2076 	jp syntax_error 
      0020F9                       2077 input_exit:
      0020F9                       2078 	_drop VSIZE 
      0020F9 5B 05            [ 2]    1     addw sp,#VSIZE 
      0020FB 90 85            [ 2] 2079 	popw y 
      0020FD 81               [ 4] 2080 	ret 
                                   2081 
                                   2082 
                                   2083 ;---------------------
                                   2084 ; BASIC: REM | ' 
                                   2085 ; skip comment to end of line 
                                   2086 ;---------------------- 
      0020FE                       2087 remark::
      0020FE 55 00 03 00 01   [ 1] 2088 	mov in,count 
      002103 81               [ 4] 2089  	ret 
                                   2090 
                                   2091 
                                   2092 ;---------------------
                                   2093 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2094 ; read in loop 'addr'  
                                   2095 ; apply & 'mask' to value 
                                   2096 ; loop while result==0.  
                                   2097 ; 'xor_mask' is used to 
                                   2098 ; invert the wait logic.
                                   2099 ; i.e. loop while not 0.
                                   2100 ;---------------------
                           000001  2101 	XMASK=1 
                           000002  2102 	MASK=2
                           000003  2103 	ADDR=3
                           000004  2104 	VSIZE=4
      002104                       2105 wait: 
      002104                       2106 	_vars VSIZE
      002104 52 04            [ 2]    1     sub sp,#VSIZE 
      002106 0F 01            [ 1] 2107 	clr (XMASK,sp) 
      002108 CD 19 18         [ 4] 2108 	call arg_list 
      00210B A1 02            [ 1] 2109 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      00210D 24 03            [ 1] 2110 	jruge 0$
      00210F CC 16 47         [ 2] 2111 	jp syntax_error 
      002112 A1 03            [ 1] 2112 0$:	cp a,#3
      002114 25 0C            [ 1] 2113 	jrult 1$
      002116                       2114 	_xpop  ; xor mask 
      002116 90 F6            [ 1]    1     ld a,(y)
      002118 93               [ 1]    2     ldw x,y 
      002119 EE 01            [ 2]    3     ldw x,(1,x)
      00211B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00211F 9F               [ 1] 2115 	ld a,xl 
      002120 6B 01            [ 1] 2116 	ld (XMASK,sp),a 
      002122                       2117 1$: _xpop ; mask
      002122 90 F6            [ 1]    1     ld a,(y)
      002124 93               [ 1]    2     ldw x,y 
      002125 EE 01            [ 2]    3     ldw x,(1,x)
      002127 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00212B 9F               [ 1] 2118     ld a,xl  
      00212C 6B 02            [ 1] 2119 	ld (MASK,sp),a 
      00212E                       2120 	_xpop ; address 
      00212E 90 F6            [ 1]    1     ld a,(y)
      002130 93               [ 1]    2     ldw x,y 
      002131 EE 01            [ 2]    3     ldw x,(1,x)
      002133 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002137 F6               [ 1] 2121 2$:	ld a,(x)
      002138 14 02            [ 1] 2122 	and a,(MASK,sp)
      00213A 18 01            [ 1] 2123 	xor a,(XMASK,sp)
      00213C 27 F9            [ 1] 2124 	jreq 2$ 
      00213E                       2125 	_drop VSIZE 
      00213E 5B 04            [ 2]    1     addw sp,#VSIZE 
      002140 81               [ 4] 2126 	ret 
                                   2127 
                                   2128 ;---------------------
                                   2129 ; BASIC: BSET addr,mask
                                   2130 ; set bits at 'addr' corresponding 
                                   2131 ; to those of 'mask' that are at 1.
                                   2132 ; arguments:
                                   2133 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2134 ;   mask        mask|addr
                                   2135 ; output:
                                   2136 ;	none 
                                   2137 ;--------------------------
      002141                       2138 bit_set:
      002141 CD 19 18         [ 4] 2139 	call arg_list 
      002144 A1 02            [ 1] 2140 	cp a,#2	 
      002146 27 03            [ 1] 2141 	jreq 1$ 
      002148 CC 16 47         [ 2] 2142 	jp syntax_error
      00214B                       2143 1$: 
      00214B                       2144 	_xpop ; mask 
      00214B 90 F6            [ 1]    1     ld a,(y)
      00214D 93               [ 1]    2     ldw x,y 
      00214E EE 01            [ 2]    3     ldw x,(1,x)
      002150 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002154 9F               [ 1] 2145 	ld a,xl
      002155 88               [ 1] 2146 	push a  
      002156                       2147 	_xpop ; addr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002156 90 F6            [ 1]    1     ld a,(y)
      002158 93               [ 1]    2     ldw x,y 
      002159 EE 01            [ 2]    3     ldw x,(1,x)
      00215B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00215F 84               [ 1] 2148 	pop a 
      002160 FA               [ 1] 2149 	or a,(x)
      002161 F7               [ 1] 2150 	ld (x),a
      002162 81               [ 4] 2151 	ret 
                                   2152 
                                   2153 ;---------------------
                                   2154 ; BASIC: BRES addr,mask
                                   2155 ; reset bits at 'addr' corresponding 
                                   2156 ; to those of 'mask' that are at 1.
                                   2157 ; arguments:
                                   2158 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2159 ;   mask	    ~mask&*addr  
                                   2160 ; output:
                                   2161 ;	none 
                                   2162 ;--------------------------
      002163                       2163 bit_reset:
      002163 CD 19 18         [ 4] 2164 	call arg_list 
      002166 A1 02            [ 1] 2165 	cp a,#2  
      002168 27 03            [ 1] 2166 	jreq 1$ 
      00216A CC 16 47         [ 2] 2167 	jp syntax_error
      00216D                       2168 1$: 
      00216D                       2169 	_xpop ; mask 
      00216D 90 F6            [ 1]    1     ld a,(y)
      00216F 93               [ 1]    2     ldw x,y 
      002170 EE 01            [ 2]    3     ldw x,(1,x)
      002172 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002176 9F               [ 1] 2170 	ld a,xl 
      002177 43               [ 1] 2171 	cpl a
      002178 88               [ 1] 2172 	push a  
      002179                       2173 	_xpop ; addr  
      002179 90 F6            [ 1]    1     ld a,(y)
      00217B 93               [ 1]    2     ldw x,y 
      00217C EE 01            [ 2]    3     ldw x,(1,x)
      00217E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002182 84               [ 1] 2174 	pop a 
      002183 F4               [ 1] 2175 	and a,(x)
      002184 F7               [ 1] 2176 	ld (x),a 
      002185 81               [ 4] 2177 	ret 
                                   2178 
                                   2179 ;---------------------
                                   2180 ; BASIC: BTOGL addr,mask
                                   2181 ; toggle bits at 'addr' corresponding 
                                   2182 ; to those of 'mask' that are at 1.
                                   2183 ; arguments:
                                   2184 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2185 ;   mask	    mask^*addr  
                                   2186 ; output:
                                   2187 ;	none 
                                   2188 ;--------------------------
      002186                       2189 bit_toggle:
      002186 CD 19 18         [ 4] 2190 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002189 A1 02            [ 1] 2191 	cp a,#2 
      00218B 27 03            [ 1] 2192 	jreq 1$ 
      00218D CC 16 47         [ 2] 2193 	jp syntax_error
      002190                       2194 1$: _xpop ; mask 
      002190 90 F6            [ 1]    1     ld a,(y)
      002192 93               [ 1]    2     ldw x,y 
      002193 EE 01            [ 2]    3     ldw x,(1,x)
      002195 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002199 9F               [ 1] 2195 	ld a,xl
      00219A 88               [ 1] 2196 	push a 
      00219B                       2197 	_xpop  ; addr  
      00219B 90 F6            [ 1]    1     ld a,(y)
      00219D 93               [ 1]    2     ldw x,y 
      00219E EE 01            [ 2]    3     ldw x,(1,x)
      0021A0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021A4 84               [ 1] 2198 	pop a 
      0021A5 F8               [ 1] 2199 	xor a,(x)
      0021A6 F7               [ 1] 2200 	ld (x),a 
      0021A7 81               [ 4] 2201 	ret 
                                   2202 
                                   2203 
                                   2204 ;---------------------
                                   2205 ; BASIC: BTEST(addr,bit)
                                   2206 ; return bit value at 'addr' 
                                   2207 ; bit is in range {0..7}.
                                   2208 ; arguments:
                                   2209 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2210 ;   bit 	    bit position {0..7}  
                                   2211 ; output:
                                   2212 ;	A:X       bit value  
                                   2213 ;--------------------------
      0021A8                       2214 bit_test:
      0021A8 CD 19 13         [ 4] 2215 	call func_args 
      0021AB A1 02            [ 1] 2216 	cp a,#2
      0021AD 27 03            [ 1] 2217 	jreq 0$
      0021AF CC 16 47         [ 2] 2218 	jp syntax_error
      0021B2                       2219 0$:	
      0021B2                       2220 	_xpop 
      0021B2 90 F6            [ 1]    1     ld a,(y)
      0021B4 93               [ 1]    2     ldw x,y 
      0021B5 EE 01            [ 2]    3     ldw x,(1,x)
      0021B7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021BB 9F               [ 1] 2221 	ld a,xl 
      0021BC A4 07            [ 1] 2222 	and a,#7
      0021BE 88               [ 1] 2223 	push a   
      0021BF A6 01            [ 1] 2224 	ld a,#1 
      0021C1 0D 01            [ 1] 2225 1$: tnz (1,sp)
      0021C3 27 05            [ 1] 2226 	jreq 2$
      0021C5 48               [ 1] 2227 	sll a 
      0021C6 0A 01            [ 1] 2228 	dec (1,sp)
      0021C8 20 F7            [ 2] 2229 	jra 1$
      0021CA 6B 01            [ 1] 2230 2$: ld (1,sp),a  
      0021CC                       2231 	_xpop ; address  
      0021CC 90 F6            [ 1]    1     ld a,(y)
      0021CE 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      0021CF EE 01            [ 2]    3     ldw x,(1,x)
      0021D1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021D5 84               [ 1] 2232 	pop a 
      0021D6 F4               [ 1] 2233 	and a,(x)
      0021D7 27 02            [ 1] 2234 	jreq 3$
      0021D9 A6 01            [ 1] 2235 	ld a,#1 
      0021DB 5F               [ 1] 2236 3$:	clrw x 
      0021DC 97               [ 1] 2237 	ld xl,a
      0021DD 4F               [ 1] 2238 	clr a  
      0021DE 81               [ 4] 2239 	ret
                                   2240 
                                   2241 ;--------------------
                                   2242 ; BASIC: POKE addr,byte
                                   2243 ; put a byte at addr 
                                   2244 ;--------------------
      0021DF                       2245 poke:
      0021DF CD 19 18         [ 4] 2246 	call arg_list 
      0021E2 A1 02            [ 1] 2247 	cp a,#2
      0021E4 27 03            [ 1] 2248 	jreq 1$
      0021E6 CC 16 47         [ 2] 2249 	jp syntax_error
      0021E9                       2250 1$:	
      0021E9                       2251 	_xpop ; byte   
      0021E9 90 F6            [ 1]    1     ld a,(y)
      0021EB 93               [ 1]    2     ldw x,y 
      0021EC EE 01            [ 2]    3     ldw x,(1,x)
      0021EE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021F2 9F               [ 1] 2252     ld a,xl 
      0021F3 88               [ 1] 2253 	push a 
      0021F4                       2254 	_xpop ; address 
      0021F4 90 F6            [ 1]    1     ld a,(y)
      0021F6 93               [ 1]    2     ldw x,y 
      0021F7 EE 01            [ 2]    3     ldw x,(1,x)
      0021F9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021FD 84               [ 1] 2255 	pop a 
      0021FE F7               [ 1] 2256 	ld (x),a 
      0021FF 81               [ 4] 2257 	ret 
                                   2258 
                                   2259 ;-----------------------
                                   2260 ; BASIC: PEEK(addr)
                                   2261 ; get the byte at addr 
                                   2262 ; input:
                                   2263 ;	none 
                                   2264 ; output:
                                   2265 ;	X 		value 
                                   2266 ;-----------------------
      002200                       2267 peek:
      002200 CD 19 13         [ 4] 2268 	call func_args
      002203 A1 01            [ 1] 2269 	cp a,#1 
      002205 27 03            [ 1] 2270 	jreq 1$
      002207 CC 16 47         [ 2] 2271 	jp syntax_error
      00220A                       2272 1$: _xpop ; address  
      00220A 90 F6            [ 1]    1     ld a,(y)
      00220C 93               [ 1]    2     ldw x,y 
      00220D EE 01            [ 2]    3     ldw x,(1,x)
      00220F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002213 C7 00 18         [ 1] 2273 	ld farptr,a 
      002216 CF 00 19         [ 2] 2274 	ldw ptr16,x 
      002219 92 BC 00 18      [ 5] 2275 	ldf a,[farptr]
      00221D 5F               [ 1] 2276 	clrw x 
      00221E 97               [ 1] 2277 	ld xl,a 
      00221F 4F               [ 1] 2278 	clr a 
      002220 81               [ 4] 2279 	ret 
                                   2280 
                                   2281 ;---------------------------
                                   2282 ; BASIC IF expr : instructions
                                   2283 ; evaluate expr and if true 
                                   2284 ; execute instructions on same line. 
                                   2285 ;----------------------------
      002221                       2286 if: 
      002221 CD 1B 68         [ 4] 2287 	call condition  
      002224                       2288 	_xpop 
      002224 90 F6            [ 1]    1     ld a,(y)
      002226 93               [ 1]    2     ldw x,y 
      002227 EE 01            [ 2]    3     ldw x,(1,x)
      002229 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00222D 4D               [ 1] 2289 	tnz  a  
      00222E 26 0D            [ 1] 2290 	jrne 9$
      002230 5D               [ 2] 2291 	tnzw x 
      002231 26 0A            [ 1] 2292 	jrne 9$  
                                   2293 ;skip to next line
      002233 55 00 03 00 01   [ 1] 2294 	mov in,count
      002238                       2295 	_drop 2 
      002238 5B 02            [ 2]    1     addw sp,#2 
      00223A CC 16 FA         [ 2] 2296 	jp next_line
      00223D 81               [ 4] 2297 9$:	ret 
                                   2298 
                                   2299 ;------------------------
                                   2300 ; BASIC: FOR var=expr 
                                   2301 ; set variable to expression 
                                   2302 ; leave variable address 
                                   2303 ; on stack and set
                                   2304 ; FLOOP bit in 'flags'
                                   2305 ;-----------------
                           000001  2306 	RETL1=1 ; return address  
                           000003  2307 	FSTEP=3  ; variable increment int24
                           000006  2308 	LIMIT=6 ; loop limit, int24  
                           000009  2309 	CVAR=9   ; control variable 
                           00000B  2310 	INW=11   ;  in.w saved
                           00000D  2311 	BPTR=13 ; baseptr saved
                           00000D  2312 	VSIZE=13  
      00223E                       2313 for: ; { -- var_addr }
      00223E 85               [ 2] 2314 	popw x ; call return address 
      00223F                       2315 	_vars VSIZE 
      00223F 52 0D            [ 2]    1     sub sp,#VSIZE 
      002241 89               [ 2] 2316 	pushw x  ; RETL1 
      002242 A6 85            [ 1] 2317 	ld a,#TK_VAR 
      002244 CD 19 06         [ 4] 2318 	call expect
      002247 CD 17 76         [ 4] 2319 	call get_addr
      00224A 1F 09            [ 2] 2320 	ldw (CVAR,sp),x  ; control variable 
      00224C CD 1C 50         [ 4] 2321 	call let_eval 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      00224F 72 14 00 22      [ 1] 2322 	bset flags,#FLOOP 
      002253 CD 17 4E         [ 4] 2323 	call next_token 
      002256 A1 80            [ 1] 2324 	cp a,#TK_CMD 
      002258 27 03            [ 1] 2325 	jreq 1$
      00225A CC 16 47         [ 2] 2326 	jp syntax_error
      00225D                       2327 1$:  
      00225D                       2328 	_get_code_addr
      00225D FE               [ 2]    1         ldw x,(x)
      00225E 72 5C 00 01      [ 1]    2         inc in 
      002262 72 5C 00 01      [ 1]    3         inc in 
      002266 A3 22 6E         [ 2] 2329 	cpw x,#to   
      002269 27 03            [ 1] 2330 	jreq to
      00226B CC 16 47         [ 2] 2331 	jp syntax_error 
                                   2332 
                                   2333 ;-----------------------------------
                                   2334 ; BASIC: TO expr 
                                   2335 ; second part of FOR loop initilization
                                   2336 ; leave limit on stack and set 
                                   2337 ; FTO bit in 'flags'
                                   2338 ;-----------------------------------
      00226E                       2339 to: ; { var_addr -- var_addr limit step }
      00226E 72 04 00 22 03   [ 2] 2340 	btjt flags,#FLOOP,1$
      002273 CC 16 47         [ 2] 2341 	jp syntax_error
      002276 CD 1A 4F         [ 4] 2342 1$: call expression   
      002279 A1 84            [ 1] 2343 	cp a,#TK_INTGR 
      00227B 27 03            [ 1] 2344 	jreq 2$ 
      00227D CC 16 47         [ 2] 2345 	jp syntax_error
      002280                       2346 2$: _xpop
      002280 90 F6            [ 1]    1     ld a,(y)
      002282 93               [ 1]    2     ldw x,y 
      002283 EE 01            [ 2]    3     ldw x,(1,x)
      002285 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002289 6B 06            [ 1] 2347 	ld (LIMIT,sp),a 
      00228B 1F 07            [ 2] 2348 	ldw (LIMIT+1,sp),x
      00228D CD 17 4E         [ 4] 2349 	call next_token
      002290 A1 00            [ 1] 2350 	cp a,#TK_NONE  
      002292 27 17            [ 1] 2351 	jreq 4$ 
      002294 A1 80            [ 1] 2352 	cp a,#TK_CMD
      002296 26 0E            [ 1] 2353 	jrne 3$
      002298                       2354 	_get_code_addr
      002298 FE               [ 2]    1         ldw x,(x)
      002299 72 5C 00 01      [ 1]    2         inc in 
      00229D 72 5C 00 01      [ 1]    3         inc in 
      0022A1 A3 22 B4         [ 2] 2355 	cpw x,#step 
      0022A4 27 0E            [ 1] 2356 	jreq step
      0022A6                       2357 3$:	
      0022A6                       2358 	_unget_token   	 
      0022A6 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0022AB                       2359 4$:	
      0022AB 0F 03            [ 1] 2360 	clr (FSTEP,sp) 
      0022AD AE 00 01         [ 2] 2361 	ldw x,#1   ; default step  
      0022B0 1F 04            [ 2] 2362 	ldw (FSTEP+1,sp),x 
      0022B2 20 2F            [ 2] 2363 	jra store_loop_addr 
                                   2364 
                                   2365 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



                                   2366 ;----------------------------------
                                   2367 ; BASIC: STEP expr 
                                   2368 ; optional third par of FOR loop
                                   2369 ; initialization. 	
                                   2370 ;------------------------------------
      0022B4                       2371 step: ; {var limit -- var limit step}
      0022B4 72 04 00 22 03   [ 2] 2372 	btjt flags,#FLOOP,1$
      0022B9 CC 16 47         [ 2] 2373 	jp syntax_error
      0022BC CD 1A 4F         [ 4] 2374 1$: call expression 
      0022BF A1 84            [ 1] 2375 	cp a,#TK_INTGR
      0022C1 27 03            [ 1] 2376 	jreq 2$
      0022C3 CC 16 47         [ 2] 2377 	jp syntax_error
      0022C6                       2378 2$:	
      0022C6                       2379 	_xpop 
      0022C6 90 F6            [ 1]    1     ld a,(y)
      0022C8 93               [ 1]    2     ldw x,y 
      0022C9 EE 01            [ 2]    3     ldw x,(1,x)
      0022CB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022CF 6B 03            [ 1] 2380 	ld (FSTEP,sp),a 
      0022D1 1F 04            [ 2] 2381 	ldw (FSTEP+1,sp),x ; step
                                   2382 ; if step < 0 decrement LIMIT 
      0022D3 4D               [ 1] 2383 	tnz a
      0022D4 2A 0D            [ 1] 2384 	jrpl store_loop_addr 
      0022D6 7B 06            [ 1] 2385 	ld a,(LIMIT,sp)
      0022D8 1E 07            [ 2] 2386 	ldw x,(LIMIT+1,sp)
      0022DA 1D 00 01         [ 2] 2387 	subw x,#1 
      0022DD A2 00            [ 1] 2388 	sbc a,#0 
      0022DF 6B 06            [ 1] 2389 	ld (LIMIT,sp),a 
      0022E1 1F 07            [ 2] 2390 	ldw (LIMIT+1,sp),x 
                                   2391 ; leave loop back entry point on cstack 
                                   2392 ; cstack is 1 call deep from interpreter
      0022E3                       2393 store_loop_addr:
      0022E3 CE 00 04         [ 2] 2394 	ldw x,basicptr
      0022E6 1F 0D            [ 2] 2395 	ldw (BPTR,sp),x 
      0022E8 CE 00 00         [ 2] 2396 	ldw x,in.w 
      0022EB 1F 0B            [ 2] 2397 	ldw (INW,sp),x   
      0022ED 72 15 00 22      [ 1] 2398 	bres flags,#FLOOP 
      0022F1 72 5C 00 1F      [ 1] 2399 	inc loop_depth  
      0022F5 81               [ 4] 2400 	ret 
                                   2401 
                                   2402 ;--------------------------------
                                   2403 ; BASIC: NEXT var 
                                   2404 ; FOR loop control 
                                   2405 ; increment variable with step 
                                   2406 ; and compare with limit 
                                   2407 ; loop if threshold not crossed.
                                   2408 ; else stack. 
                                   2409 ; and decrement 'loop_depth' 
                                   2410 ;--------------------------------
      0022F6                       2411 next: ; {var limit step retl1 -- [var limit step ] }
      0022F6 72 5D 00 1F      [ 1] 2412 	tnz loop_depth 
      0022FA 26 03            [ 1] 2413 	jrne 1$ 
      0022FC CC 16 47         [ 2] 2414 	jp syntax_error 
      0022FF                       2415 1$: 
      0022FF A6 85            [ 1] 2416 	ld a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002301 CD 19 06         [ 4] 2417 	call expect
      002304 CD 17 76         [ 4] 2418 	call get_addr 
                                   2419 ; check for good variable after NEXT 	 
      002307 13 09            [ 2] 2420 	cpw x,(CVAR,sp)
      002309 27 03            [ 1] 2421 	jreq 2$  
      00230B CC 16 47         [ 2] 2422 	jp syntax_error ; not the good one 
      00230E                       2423 2$: 
      00230E CF 00 19         [ 2] 2424 	ldw ptr16,x 
                                   2425 	; increment variable 
      002311 F6               [ 1] 2426 	ld a,(x)
      002312 EE 01            [ 2] 2427 	ldw x,(1,x)  ; get var value 
      002314 72 FB 04         [ 2] 2428 	addw x,(FSTEP+1,sp) ; var+step 
      002317 19 03            [ 1] 2429 	adc a,(FSTEP,sp)
      002319 72 C7 00 19      [ 4] 2430 	ld [ptr16],a
      00231D 72 5C 00 1A      [ 1] 2431 	inc ptr8  
      002321 72 CF 00 19      [ 5] 2432 	ldw [ptr16],x 
      002325 C7 00 0C         [ 1] 2433 	ld acc24,a 
      002328 CF 00 0D         [ 2] 2434 	ldw acc16,x 
      00232B 7B 06            [ 1] 2435 	ld a,(LIMIT,sp)
      00232D 1E 07            [ 2] 2436 	ldw x,(LIMIT+1,sp)
      00232F 72 B0 00 0D      [ 2] 2437 	subw x,acc16 
      002333 C2 00 0C         [ 1] 2438 	sbc a,acc24
      002336 18 03            [ 1] 2439 	xor a,(FSTEP,sp)
      002338 A8 80            [ 1] 2440 	xor a,#0x80
      00233A 2B 12            [ 1] 2441 	jrmi loop_back  
      00233C 20 25            [ 2] 2442 	jra loop_done   
                                   2443 ; check sign of STEP  
      00233E 7B 03            [ 1] 2444 	ld a,(FSTEP,sp)
      002340 2A 07            [ 1] 2445 	jrpl 4$
                                   2446 ;negative step
      002342 C6 00 0E         [ 1] 2447     ld a,acc8 
      002345 2F 07            [ 1] 2448 	jrslt loop_back   
      002347 20 1A            [ 2] 2449 	jra loop_done  
      002349                       2450 4$: ; positive step
      002349 72 0E 00 0E 15   [ 2] 2451 	btjt acc8,#7,loop_done 
      00234E                       2452 loop_back:
      00234E 1E 0D            [ 2] 2453 	ldw x,(BPTR,sp)
      002350 CF 00 04         [ 2] 2454 	ldw basicptr,x 
      002353 72 01 00 22 05   [ 2] 2455 	btjf flags,#FRUN,1$ 
      002358 E6 02            [ 1] 2456 	ld a,(2,x)
      00235A C7 00 03         [ 1] 2457 	ld count,a
      00235D 1E 0B            [ 2] 2458 1$:	ldw x,(INW,sp)
      00235F CF 00 00         [ 2] 2459 	ldw in.w,x 
      002362 81               [ 4] 2460 	ret 
      002363                       2461 loop_done:
                                   2462 	; remove loop data from stack  
      002363 85               [ 2] 2463 	popw x
      002364                       2464 	_drop VSIZE 
      002364 5B 0D            [ 2]    1     addw sp,#VSIZE 
      002366 72 5A 00 1F      [ 1] 2465 	dec loop_depth 
      00236A FC               [ 2] 2466 	jp (x)
                                   2467 
                                   2468 ;----------------------------
                                   2469 ; called by goto/gosub
                                   2470 ; to get target line number 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



                                   2471 ; output:
                                   2472 ;    x    line address 
                                   2473 ;---------------------------
      00236B                       2474 get_target_line:
      00236B CD 17 4E         [ 4] 2475 	call next_token  
      00236E A1 84            [ 1] 2476 	cp a,#TK_INTGR
      002370 27 07            [ 1] 2477 	jreq get_target_line_addr 
      002372 A1 03            [ 1] 2478 	cp a,#TK_LABEL 
      002374 27 26            [ 1] 2479 	jreq look_target_symbol 
      002376 CC 16 47         [ 2] 2480 	jp syntax_error
                                   2481 ; the target is a line number 
                                   2482 ; search it. 
      002379                       2483 get_target_line_addr:
      002379 90 89            [ 2] 2484 	pushw y 
      00237B CD 17 80         [ 4] 2485 	call get_int24 ; line # 
      00237E 4F               [ 1] 2486 	clr a
      00237F 90 CE 00 04      [ 2] 2487 	ldw y,basicptr 
      002383 90 FE            [ 2] 2488 	ldw y,(y)
      002385 90 89            [ 2] 2489 	pushw y 
      002387 13 01            [ 2] 2490 	cpw x,(1,sp)
      002389                       2491 	_drop 2  
      002389 5B 02            [ 2]    1     addw sp,#2 
      00238B 25 01            [ 1] 2492 	jrult 11$
      00238D 4C               [ 1] 2493 	inc a 
      00238E                       2494 11$: ; scan program for this line# 	
      00238E CD 0C 4A         [ 4] 2495 	call search_lineno  
      002391 5D               [ 2] 2496 	tnzw x ; 0| line# address 
      002392 26 05            [ 1] 2497 	jrne 2$ 
      002394 A6 05            [ 1] 2498 	ld a,#ERR_NO_LINE 
      002396 CC 16 49         [ 2] 2499 	jp tb_error 
      002399 90 85            [ 2] 2500 2$:	popw y  
      00239B 81               [ 4] 2501 	ret 
                                   2502 
                                   2503 ; the GOTO|GOSUB target is a symbol.
                                   2504 ; output:
                                   2505 ;    X    line address|0 
      00239C                       2506 look_target_symbol:
      00239C 90 89            [ 2] 2507 	pushw y 
      00239E 89               [ 2] 2508 	pushw x 
      00239F 72 5F 00 0D      [ 1] 2509 	clr acc16 
      0023A3 90 CE 00 1B      [ 2] 2510 	ldw y,txtbgn 
      0023A7 90 E6 03         [ 1] 2511 1$:	ld a,(3,y) ; first TK_ID on line 
      0023AA A1 03            [ 1] 2512 	cp a,#TK_LABEL 
      0023AC 27 15            [ 1] 2513 	jreq 3$ 
      0023AE 90 E6 02         [ 1] 2514 2$:	ld a,(2,y); line length 
      0023B1 C7 00 0E         [ 1] 2515 	ld acc8,a 
      0023B4 72 B9 00 0D      [ 2] 2516 	addw y,acc16 ;point to next line 
      0023B8 90 C3 00 1D      [ 2] 2517 	cpw y,txtend 
      0023BC 25 E9            [ 1] 2518 	jrult 1$
      0023BE A6 0A            [ 1] 2519 	ld a,#ERR_BAD_VALUE
      0023C0 CC 16 49         [ 2] 2520 	jp tb_error 
      0023C3                       2521 3$: ; found a TK_LABEL 
                                   2522 	; compare with GOTO|GOSUB target 
      0023C3 90 89            [ 2] 2523 	pushw y ; line address 
      0023C5 72 A9 00 04      [ 2] 2524 	addw y,#4 ; label string 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      0023C9 1E 03            [ 2] 2525 	ldw x,(3,sp) ; target string 
      0023CB CD 13 96         [ 4] 2526 	call strcmp
      0023CE 26 04            [ 1] 2527 	jrne 4$
      0023D0 90 85            [ 2] 2528 	popw y 
      0023D2 20 DA            [ 2] 2529 	jra 2$ 
      0023D4                       2530 4$: ; target found 
      0023D4 85               [ 2] 2531 	popw x ;  address line target  
      0023D5                       2532 	_drop 2 ; target string 
      0023D5 5B 02            [ 2]    1     addw sp,#2 
      0023D7 90 85            [ 2] 2533 	popw y 
      0023D9 81               [ 4] 2534 	ret
                                   2535 
                                   2536 
                                   2537 ;--------------------------------
                                   2538 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2539 ; selective goto or gosub 
                                   2540 ;--------------------------------
      0023DA                       2541 cmd_on:
      0023DA 72 00 00 22 05   [ 2] 2542 	btjt flags,#FRUN,0$ 
      0023DF A6 06            [ 1] 2543 	ld a,#ERR_RUN_ONLY
      0023E1 CC 16 49         [ 2] 2544 	jp tb_error 
      0023E4 CD 1A 4F         [ 4] 2545 0$:	call expression 
      0023E7 A1 84            [ 1] 2546 	cp a,#TK_INTGR
      0023E9 27 03            [ 1] 2547 	jreq 1$
      0023EB CC 16 47         [ 2] 2548 	jp syntax_error
      0023EE                       2549 1$: _xpop
      0023EE 90 F6            [ 1]    1     ld a,(y)
      0023F0 93               [ 1]    2     ldw x,y 
      0023F1 EE 01            [ 2]    3     ldw x,(1,x)
      0023F3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2550 ; the selector is the element indice 
                                   2551 ; in the list of arguments. {1..#elements} 
      0023F7 9F               [ 1] 2552 	ld a,xl ; keep only bits 7..0
      0023F8 27 68            [ 1] 2553 	jreq 9$ ; element # begin at 1. 
      0023FA 88               [ 1] 2554 	push a  ; selector  
      0023FB CD 17 4E         [ 4] 2555 	call next_token
      0023FE A1 80            [ 1] 2556 	cp a,#TK_CMD 
      002400 27 03            [ 1] 2557 	jreq 2$ 
      002402 CC 16 47         [ 2] 2558 	jp syntax_error 
      002405                       2559 2$: _get_code_addr
      002405 FE               [ 2]    1         ldw x,(x)
      002406 72 5C 00 01      [ 1]    2         inc in 
      00240A 72 5C 00 01      [ 1]    3         inc in 
                                   2560 ;; must be a GOTO or GOSUB 
      00240E A3 24 6C         [ 2] 2561 	cpw x,#goto 
      002411 27 08            [ 1] 2562 	jreq 4$
      002413 A3 24 86         [ 2] 2563 	cpw x,#gosub 
      002416 27 03            [ 1] 2564 	jreq 4$ 
      002418 CC 16 47         [ 2] 2565 	jp syntax_error 
      00241B                       2566 4$: 
      00241B 84               [ 1] 2567 	pop a 
      00241C 89               [ 2] 2568 	pushw x ; save routine address 	
      00241D 88               [ 1] 2569 	push a  ; selector  
      00241E                       2570 5$: ; skip elements in list until selector==0 
      00241E 0A 01            [ 1] 2571 	dec (1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      002420 27 26            [ 1] 2572 	jreq 6$ 
                                   2573 ; can be a line# or a label 
      002422 CD 17 4E         [ 4] 2574 	call next_token 
      002425 A1 84            [ 1] 2575 	cp a,#TK_INTGR 
      002427 27 07            [ 1] 2576 	jreq 52$
      002429 A1 03            [ 1] 2577 	cp a,#TK_LABEL 
      00242B 27 0D            [ 1] 2578 	jreq 54$
      00242D CC 16 47         [ 2] 2579 	jp syntax_error 
      002430                       2580 52$: ; got a line number 
      002430 C6 00 01         [ 1] 2581 	ld a,in ; skip over int24 value 
      002433 AB 03            [ 1] 2582 	add a,#CELL_SIZE ; integer size  
      002435 C7 00 01         [ 1] 2583 	ld in,a 
      002438 20 03            [ 2] 2584 	jra 56$
      00243A CD 17 67         [ 4] 2585 54$: call skip_string ; skip over label 	
      00243D                       2586 56$: ; if another element comma present 
      00243D CD 17 4E         [ 4] 2587 	call next_token
      002440 A1 08            [ 1] 2588 	cp a,#TK_COMMA 
      002442 27 DA            [ 1] 2589 	jreq 5$ 
                                   2590 ; arg list exhausted, selector to big 
                                   2591 ; continue execution on next line 
      002444                       2592 	_drop 3 ; drop selector and GOTO|GOSUB address 
      002444 5B 03            [ 2]    1     addw sp,#3 
      002446 20 1A            [ 2] 2593 	jra 9$
      002448                       2594 6$: ;at selected position  
      002448                       2595 	_drop 1 ; discard selector
      002448 5B 01            [ 2]    1     addw sp,#1 
                                   2596 ; here only the routine address 
                                   2597 ; of GOTO|GOSUB is on stack 
      00244A CD 23 6B         [ 4] 2598     call get_target_line
      00244D CF 00 19         [ 2] 2599 	ldw ptr16,x 	
      002450 55 00 03 00 01   [ 1] 2600 	mov in,count ; move to end of line  
      002455 85               [ 2] 2601 	popw x ; cmd address, GOTO||GOSUB 
      002456 A3 24 6C         [ 2] 2602 	cpw x,#goto 
      002459 26 05            [ 1] 2603 	jrne 7$ 
      00245B CE 00 19         [ 2] 2604 	ldw x,ptr16 
      00245E 20 19            [ 2] 2605 	jra jp_to_target
      002460                       2606 7$: 
      002460 20 35            [ 2] 2607 	jra gosub_2 ; target in ptr16 
      002462                       2608 9$: ; expr out of range skip to end of line
                                   2609     ; this will force a fall to next line  
      002462 55 00 03 00 01   [ 1] 2610 	mov in,count
      002467                       2611 	_drop 2
      002467 5B 02            [ 2]    1     addw sp,#2 
      002469 CC 16 FA         [ 2] 2612 	jp next_line  
                                   2613 
                                   2614 
                                   2615 ;------------------------
                                   2616 ; BASIC: GOTO line# 
                                   2617 ; jump to line# 
                                   2618 ; here cstack is 2 call deep from interpreter 
                                   2619 ;------------------------
      00246C                       2620 goto:
      00246C 72 00 00 22 05   [ 2] 2621 	btjt flags,#FRUN,goto_1  
      002471 A6 06            [ 1] 2622 	ld a,#ERR_RUN_ONLY
      002473 CC 16 49         [ 2] 2623 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      002476                       2624 goto_1:
      002476 CD 23 6B         [ 4] 2625 	call get_target_line
      002479                       2626 jp_to_target:
      002479 CF 00 04         [ 2] 2627 	ldw basicptr,x 
      00247C E6 02            [ 1] 2628 	ld a,(2,x)
      00247E C7 00 03         [ 1] 2629 	ld count,a 
      002481 35 03 00 01      [ 1] 2630 	mov in,#3 
      002485 81               [ 4] 2631 	ret 
                                   2632 
                                   2633 
                                   2634 ;--------------------
                                   2635 ; BASIC: GOSUB line#
                                   2636 ; basic subroutine call
                                   2637 ; actual line# and basicptr 
                                   2638 ; are saved on cstack
                                   2639 ; here cstack is 2 call deep from interpreter 
                                   2640 ;--------------------
                           000001  2641 	TARGET=1   ; target address 
                           000003  2642 	RET_ADDR=3 ; subroutine return address 
                           000005  2643 	RET_BPTR=5 ; basicptr return point 
                           000007  2644 	RET_INW=7  ; in.w return point 
                           000004  2645 	VSIZE=4  
      002486                       2646 gosub:
      002486 72 00 00 22 06   [ 2] 2647 	btjt flags,#FRUN,gosub_1 
      00248B A6 06            [ 1] 2648 	ld a,#ERR_RUN_ONLY
      00248D CC 16 49         [ 2] 2649 	jp tb_error 
      002490 81               [ 4] 2650 	ret 
      002491                       2651 gosub_1:
      002491 CD 23 6B         [ 4] 2652 	call get_target_line 
      002494 CF 00 19         [ 2] 2653 	ldw ptr16,x 
      002497                       2654 gosub_2: 
      002497 85               [ 2] 2655 	popw x 
      002498                       2656 	_vars VSIZE  
      002498 52 04            [ 2]    1     sub sp,#VSIZE 
      00249A 89               [ 2] 2657 	pushw x ; RET_ADDR 
      00249B CE 00 19         [ 2] 2658 	ldw x,ptr16 
      00249E 89               [ 2] 2659 	pushw x ; TARGET
                                   2660 ; save BASIC subroutine return point.   
      00249F CE 00 04         [ 2] 2661 	ldw x,basicptr
      0024A2 1F 05            [ 2] 2662 	ldw (RET_BPTR,sp),x 
      0024A4 CE 00 00         [ 2] 2663 	ldw x,in.w 
      0024A7 1F 07            [ 2] 2664 	ldw (RET_INW,sp),x
      0024A9 85               [ 2] 2665 	popw x 
      0024AA 20 CD            [ 2] 2666 	jra jp_to_target
                                   2667 
                                   2668 ;------------------------
                                   2669 ; BASIC: RETURN 
                                   2670 ; exit from BASIC subroutine 
                                   2671 ;------------------------
                           000003  2672 	RET_BPTR=3 ; basicptr return point 
                           000005  2673 	RET_INW=5  ; in.w return point 
                           000004  2674 	VSIZE=4  
      0024AC                       2675 return:
      0024AC 72 00 00 22 05   [ 2] 2676 	btjt flags,#FRUN,0$ 
      0024B1 A6 06            [ 1] 2677 	ld a,#ERR_RUN_ONLY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      0024B3 CC 16 49         [ 2] 2678 	jp tb_error 
      0024B6                       2679 0$:	
      0024B6 1E 03            [ 2] 2680 	ldw x,(RET_ADDR,sp) 
      0024B8 CF 00 04         [ 2] 2681 	ldw basicptr,x
      0024BB E6 02            [ 1] 2682 	ld a,(2,x)
      0024BD C7 00 03         [ 1] 2683 	ld count,a  
      0024C0 1E 05            [ 2] 2684 	ldw x,(RET_INW,sp)
      0024C2 CF 00 00         [ 2] 2685 	ldw in.w,x 
      0024C5 85               [ 2] 2686 	popw x 
      0024C6                       2687 	_drop VSIZE 
      0024C6 5B 04            [ 2]    1     addw sp,#VSIZE 
      0024C8 89               [ 2] 2688 	pushw x
      0024C9 81               [ 4] 2689 	ret  
                                   2690 
                                   2691 ;----------------------------------
                                   2692 ; BASIC: RUN
                                   2693 ; run BASIC program in RAM
                                   2694 ;----------------------------------- 
      0024CA                       2695 run: 
      0024CA 72 01 00 22 02   [ 2] 2696 	btjf flags,#FRUN,0$  
      0024CF 4F               [ 1] 2697 	clr a 
      0024D0 81               [ 4] 2698 	ret
      0024D1                       2699 0$: 
      0024D1 72 09 00 22 12   [ 2] 2700 	btjf flags,#FBREAK,1$
      0024D6                       2701 	_drop 2 
      0024D6 5B 02            [ 2]    1     addw sp,#2 
      0024D8 CD 20 4F         [ 4] 2702 	call rest_context
      0024DB                       2703 	_drop CTXT_SIZE 
      0024DB 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0024DD 72 19 00 22      [ 1] 2704 	bres flags,#FBREAK 
      0024E1 72 10 00 22      [ 1] 2705 	bset flags,#FRUN 
      0024E5 CC 16 F2         [ 2] 2706 	jp interpreter 
      0024E8 CE 00 1B         [ 2] 2707 1$:	ldw x,txtbgn
      0024EB C3 00 1D         [ 2] 2708 	cpw x,txtend 
      0024EE 2B 0C            [ 1] 2709 	jrmi run_it 
      0024F0 AE 15 D6         [ 2] 2710 	ldw x,#err_no_prog
      0024F3 CD 09 6D         [ 4] 2711 	call puts 
      0024F6 55 00 03 00 01   [ 1] 2712 	mov in,count
      0024FB 81               [ 4] 2713 	ret 
      0024FC                       2714 run_it:	 
      0024FC                       2715 	_drop 2 ; drop return address 
      0024FC 5B 02            [ 2]    1     addw sp,#2 
      0024FE                       2716 run_it_02: 
      0024FE CD 1C 2F         [ 4] 2717     call ubound 
      002501 CD 13 FB         [ 4] 2718 	call clear_vars 
                                   2719 ; clear data pointer 
      002504 5F               [ 1] 2720 	clrw x 
      002505 CF 00 06         [ 2] 2721 	ldw data_ptr,x 
      002508 72 5F 00 08      [ 1] 2722 	clr data_ofs 
      00250C 72 5F 00 09      [ 1] 2723 	clr data_len 
                                   2724 ; initialize BASIC pointer 
      002510 CE 00 1B         [ 2] 2725 	ldw x,txtbgn 
      002513 CF 00 04         [ 2] 2726 	ldw basicptr,x 
      002516 E6 02            [ 1] 2727 	ld a,(2,x)
      002518 C7 00 03         [ 1] 2728 	ld count,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      00251B 35 03 00 01      [ 1] 2729 	mov in,#3	
      00251F 72 10 00 22      [ 1] 2730 	bset flags,#FRUN 
      002523 CC 16 F2         [ 2] 2731 	jp interpreter 
                                   2732 
                                   2733 
                                   2734 ;----------------------
                                   2735 ; BASIC: END
                                   2736 ; end running program
                                   2737 ;---------------------- 
      002526                       2738 cmd_end: 
                                   2739 ; clean stack 
      002526 AE 17 FF         [ 2] 2740 	ldw x,#STACK_EMPTY
      002529 94               [ 1] 2741 	ldw sp,x 
      00252A CC 16 D3         [ 2] 2742 	jp warm_start
                                   2743 
                                   2744 ;---------------------------
                                   2745 ; BASIC: GET var 
                                   2746 ; receive a key in variable 
                                   2747 ; don't wait 
                                   2748 ;---------------------------
      00252D                       2749 cmd_get:
      00252D CD 17 4E         [ 4] 2750 	call next_token 
      002530 A1 85            [ 1] 2751 	cp a,#TK_VAR 
      002532 27 03            [ 1] 2752 	jreq 0$
      002534 CC 16 47         [ 2] 2753 	jp syntax_error 
      002537 CD 17 76         [ 4] 2754 0$: call get_addr 
      00253A CF 00 19         [ 2] 2755 	ldw ptr16,x 
      00253D CD 09 19         [ 4] 2756 	call qgetc 
      002540 27 03            [ 1] 2757 	jreq 2$
      002542 CD 09 20         [ 4] 2758 	call getc  
      002545 72 3F 00 19      [ 4] 2759 2$: clr [ptr16]
      002549 72 5C 00 1A      [ 1] 2760 	inc ptr8 
      00254D 72 3F 00 19      [ 4] 2761 	clr [ptr16]
      002551 72 5C 00 1A      [ 1] 2762 	inc ptr8 
      002555 72 C7 00 19      [ 4] 2763 	ld [ptr16],a 
      002559 81               [ 4] 2764 	ret 
                                   2765 
                                   2766 
                                   2767 ;-----------------
                                   2768 ; 1 Khz beep 
                                   2769 ;-----------------
      00255A                       2770 beep_1khz:: 
      00255A 90 89            [ 2] 2771 	pushw y 
      00255C AE 00 64         [ 2] 2772 	ldw x,#100
      00255F 90 AE 03 E8      [ 2] 2773 	ldw y,#1000
      002563 20 22            [ 2] 2774 	jra beep
                                   2775 
                                   2776 ;-----------------------
                                   2777 ; BASIC: TONE expr1,expr2
                                   2778 ; used TIMER2 channel 1
                                   2779 ; to produce a tone 
                                   2780 ; arguments:
                                   2781 ;    expr1   frequency 
                                   2782 ;    expr2   duration msec.
                                   2783 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      002565                       2784 tone:
      002565 90 89            [ 2] 2785 	pushw y 
      002567 CD 19 18         [ 4] 2786 	call arg_list 
      00256A A1 02            [ 1] 2787 	cp a,#2 
      00256C 27 03            [ 1] 2788 	jreq 1$
      00256E CC 16 47         [ 2] 2789 	jp syntax_error 
      002571                       2790 1$: 
      002571                       2791 	_xpop 
      002571 90 F6            [ 1]    1     ld a,(y)
      002573 93               [ 1]    2     ldw x,y 
      002574 EE 01            [ 2]    3     ldw x,(1,x)
      002576 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00257A 89               [ 2] 2792 	pushw x ; duration 
      00257B                       2793 	_xpop ; frequency
      00257B 90 F6            [ 1]    1     ld a,(y)
      00257D 93               [ 1]    2     ldw x,y 
      00257E EE 01            [ 2]    3     ldw x,(1,x)
      002580 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002584 90 93            [ 1] 2794 	ldw y,x ; frequency 
      002586 85               [ 2] 2795 	popw x  ; duration 
      002587                       2796 beep:  
      002587 89               [ 2] 2797 	pushw x 
      002588 AE F4 24         [ 2] 2798 	ldw x,#TIM2_CLK_FREQ
      00258B 65               [ 2] 2799 	divw x,y ; cntr=Fclk/freq 
                                   2800 ; round to nearest integer 
      00258C 90 A3 7A 12      [ 2] 2801 	cpw y,#TIM2_CLK_FREQ/2
      002590 2B 01            [ 1] 2802 	jrmi 2$
      002592 5C               [ 1] 2803 	incw x 
      002593                       2804 2$:	 
      002593 9E               [ 1] 2805 	ld a,xh 
      002594 C7 53 0D         [ 1] 2806 	ld TIM2_ARRH,a 
      002597 9F               [ 1] 2807 	ld a,xl 
      002598 C7 53 0E         [ 1] 2808 	ld TIM2_ARRL,a 
                                   2809 ; 50% duty cycle 
      00259B 8C               [ 1] 2810 	ccf 
      00259C 56               [ 2] 2811 	rrcw x 
      00259D 9E               [ 1] 2812 	ld a,xh 
      00259E C7 53 0F         [ 1] 2813 	ld TIM2_CCR1H,a 
      0025A1 9F               [ 1] 2814 	ld a,xl
      0025A2 C7 53 10         [ 1] 2815 	ld TIM2_CCR1L,a
      0025A5 72 10 53 08      [ 1] 2816 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0025A9 72 10 53 00      [ 1] 2817 	bset TIM2_CR1,#TIM2_CR1_CEN
      0025AD 72 10 53 04      [ 1] 2818 	bset TIM2_EGR,#TIM2_EGR_UG
      0025B1 85               [ 2] 2819 	popw x 
      0025B2 CD 29 F3         [ 4] 2820 	call pause02
      0025B5 72 11 53 08      [ 1] 2821 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0025B9 72 11 53 00      [ 1] 2822 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0025BD 90 85            [ 2] 2823 	popw y 
      0025BF 81               [ 4] 2824 	ret 
                                   2825 
                                   2826 ;-------------------------------
                                   2827 ; BASIC: ADCON 0|1 [,divisor]  
                                   2828 ; disable/enanble ADC 
                                   2829 ;-------------------------------
                           000003  2830 	ONOFF=3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                           000001  2831 	DIVSOR=1
                           000004  2832 	VSIZE=4 
      0025C0                       2833 power_adc:
      0025C0 CD 19 18         [ 4] 2834 	call arg_list 
      0025C3 A1 02            [ 1] 2835 	cp a,#2	
      0025C5 27 12            [ 1] 2836 	jreq 1$
      0025C7 A1 01            [ 1] 2837 	cp a,#1 
      0025C9 27 03            [ 1] 2838 	jreq 0$ 
      0025CB CC 16 47         [ 2] 2839 	jp syntax_error 
      0025CE 4F               [ 1] 2840 0$:	clr a 
      0025CF 5F               [ 1] 2841 	clrw x
      0025D0                       2842 	_xpush   ; divisor  
      0025D0 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0025D4 90 F7            [ 1]    2     ld (y),a 
      0025D6 90 EF 01         [ 2]    3     ldw (1,y),x 
      0025D9                       2843 1$: _at_next 
      0025D9 90 E6 03         [ 1]    1     ld a,(3,y)
      0025DC 93               [ 1]    2     ldw x,y 
      0025DD EE 04            [ 2]    3     ldw x,(4,x)
      0025DF 5D               [ 2] 2844 	tnzw x 
      0025E0 27 25            [ 1] 2845 	jreq 2$ 
      0025E2                       2846 	_xpop
      0025E2 90 F6            [ 1]    1     ld a,(y)
      0025E4 93               [ 1]    2     ldw x,y 
      0025E5 EE 01            [ 2]    3     ldw x,(1,x)
      0025E7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025EB                       2847 	_xdrop  
      0025EB 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      0025EF 9F               [ 1] 2848 	ld a,xl
      0025F0 A4 07            [ 1] 2849 	and a,#7
      0025F2 4E               [ 1] 2850 	swap a 
      0025F3 C7 54 01         [ 1] 2851 	ld ADC_CR1,a
      0025F6 72 16 50 CA      [ 1] 2852 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0025FA 72 10 54 01      [ 1] 2853 	bset ADC_CR1,#ADC_CR1_ADON 
      0025FE                       2854 	_usec_dly 7 
      0025FE AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      002601 5A               [ 2]    2     decw x
      002602 9D               [ 1]    3     nop 
      002603 26 FA            [ 1]    4     jrne .-4
      002605 20 08            [ 2] 2855 	jra 3$
      002607 72 11 54 01      [ 1] 2856 2$: bres ADC_CR1,#ADC_CR1_ADON
      00260B 72 17 50 CA      [ 1] 2857 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00260F                       2858 3$:	
      00260F 81               [ 4] 2859 	ret
                                   2860 
                                   2861 ;-----------------------------
                                   2862 ; BASIC: ADCREAD (channel)
                                   2863 ; read adc channel {0..5}
                                   2864 ; output:
                                   2865 ;   A 		TK_INTGR 
                                   2866 ;   X 		value 
                                   2867 ;-----------------------------
      002610                       2868 analog_read:
      002610 CD 19 13         [ 4] 2869 	call func_args 
      002613 A1 01            [ 1] 2870 	cp a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      002615 27 03            [ 1] 2871 	jreq 1$
      002617 CC 16 47         [ 2] 2872 	jp syntax_error
      00261A                       2873 1$: _xpop 
      00261A 90 F6            [ 1]    1     ld a,(y)
      00261C 93               [ 1]    2     ldw x,y 
      00261D EE 01            [ 2]    3     ldw x,(1,x)
      00261F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002623 A3 00 05         [ 2] 2874 	cpw x,#5 
      002626 23 05            [ 2] 2875 	jrule 2$
      002628 A6 0A            [ 1] 2876 	ld a,#ERR_BAD_VALUE
      00262A CC 16 49         [ 2] 2877 	jp tb_error 
      00262D 9F               [ 1] 2878 2$: ld a,xl
      00262E C7 00 0E         [ 1] 2879 	ld acc8,a 
      002631 A6 05            [ 1] 2880 	ld a,#5
      002633 C0 00 0E         [ 1] 2881 	sub a,acc8 
      002636 C7 54 00         [ 1] 2882 	ld ADC_CSR,a
      002639 72 16 54 02      [ 1] 2883 	bset ADC_CR2,#ADC_CR2_ALIGN
      00263D 72 10 54 01      [ 1] 2884 	bset ADC_CR1,#ADC_CR1_ADON
      002641 72 0F 54 00 FB   [ 2] 2885 	btjf ADC_CSR,#ADC_CSR_EOC,.
      002646 CE 54 04         [ 2] 2886 	ldw x,ADC_DRH
      002649 A6 84            [ 1] 2887 	ld a,#TK_INTGR
      00264B 81               [ 4] 2888 	ret 
                                   2889 
                                   2890 ;-----------------------
                                   2891 ; BASIC: DREAD(pin)
                                   2892 ; Arduino pins 
                                   2893 ; read state of a digital pin 
                                   2894 ; pin# {0..15}
                                   2895 ; output:
                                   2896 ;    A 		TK_INTGR
                                   2897 ;    X      0|1 
                                   2898 ;-------------------------
                           000001  2899 	PINNO=1
                           000001  2900 	VSIZE=1
      00264C                       2901 digital_read:
      00264C                       2902 	_vars VSIZE 
      00264C 52 01            [ 2]    1     sub sp,#VSIZE 
      00264E CD 19 13         [ 4] 2903 	call func_args
      002651 A1 01            [ 1] 2904 	cp a,#1
      002653 27 03            [ 1] 2905 	jreq 1$
      002655 CC 16 47         [ 2] 2906 	jp syntax_error
      002658                       2907 1$: _xpop 
      002658 90 F6            [ 1]    1     ld a,(y)
      00265A 93               [ 1]    2     ldw x,y 
      00265B EE 01            [ 2]    3     ldw x,(1,x)
      00265D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002661 A3 00 0F         [ 2] 2908 	cpw x,#15 
      002664 23 05            [ 2] 2909 	jrule 2$
      002666 A6 0A            [ 1] 2910 	ld a,#ERR_BAD_VALUE
      002668 CC 16 49         [ 2] 2911 	jp tb_error 
      00266B CD 2B 38         [ 4] 2912 2$:	call select_pin 
      00266E 6B 01            [ 1] 2913 	ld (PINNO,sp),a
      002670 E6 01            [ 1] 2914 	ld a,(GPIO_IDR,x)
      002672 0D 01            [ 1] 2915 	tnz (PINNO,sp)
      002674 27 05            [ 1] 2916 	jreq 8$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      002676 44               [ 1] 2917 3$: srl a 
      002677 0A 01            [ 1] 2918 	dec (PINNO,sp)
      002679 26 FB            [ 1] 2919 	jrne 3$ 
      00267B A4 01            [ 1] 2920 8$: and a,#1 
      00267D 5F               [ 1] 2921 	clrw x 
      00267E 97               [ 1] 2922 	ld xl,a 
      00267F 4F               [ 1] 2923 	clr a 
      002680                       2924 	_drop VSIZE
      002680 5B 01            [ 2]    1     addw sp,#VSIZE 
      002682 81               [ 4] 2925 	ret
                                   2926 
                                   2927 
                                   2928 ;-----------------------
                                   2929 ; BASIC: DWRITE pin,0|1
                                   2930 ; Arduino pins 
                                   2931 ; write to a digital pin 
                                   2932 ; pin# {0..15}
                                   2933 ; output:
                                   2934 ;    A 		TK_INTGR
                                   2935 ;    X      0|1 
                                   2936 ;-------------------------
                           000001  2937 	PINNO=1
                           000002  2938 	PINVAL=2
                           000002  2939 	VSIZE=2
      002683                       2940 digital_write:
      002683                       2941 	_vars VSIZE 
      002683 52 02            [ 2]    1     sub sp,#VSIZE 
      002685 CD 19 18         [ 4] 2942 	call arg_list  
      002688 A1 02            [ 1] 2943 	cp a,#2 
      00268A 27 03            [ 1] 2944 	jreq 1$
      00268C CC 16 47         [ 2] 2945 	jp syntax_error
      00268F                       2946 1$: _xpop 
      00268F 90 F6            [ 1]    1     ld a,(y)
      002691 93               [ 1]    2     ldw x,y 
      002692 EE 01            [ 2]    3     ldw x,(1,x)
      002694 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002698 9F               [ 1] 2947 	ld a,xl 
      002699 6B 02            [ 1] 2948 	ld (PINVAL,sp),a
      00269B                       2949 	_xpop 
      00269B 90 F6            [ 1]    1     ld a,(y)
      00269D 93               [ 1]    2     ldw x,y 
      00269E EE 01            [ 2]    3     ldw x,(1,x)
      0026A0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026A4 A3 00 0F         [ 2] 2950 	cpw x,#15 
      0026A7 23 05            [ 2] 2951 	jrule 2$
      0026A9 A6 0A            [ 1] 2952 	ld a,#ERR_BAD_VALUE
      0026AB CC 16 49         [ 2] 2953 	jp tb_error 
      0026AE CD 2B 38         [ 4] 2954 2$:	call select_pin 
      0026B1 6B 01            [ 1] 2955 	ld (PINNO,sp),a 
      0026B3 A6 01            [ 1] 2956 	ld a,#1
      0026B5 0D 01            [ 1] 2957 	tnz (PINNO,sp)
      0026B7 27 05            [ 1] 2958 	jreq 4$
      0026B9 48               [ 1] 2959 3$: sll a
      0026BA 0A 01            [ 1] 2960 	dec (PINNO,sp)
      0026BC 26 FB            [ 1] 2961 	jrne 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0026BE 0D 02            [ 1] 2962 4$: tnz (PINVAL,sp)
      0026C0 26 05            [ 1] 2963 	jrne 5$
      0026C2 43               [ 1] 2964 	cpl a 
      0026C3 E4 00            [ 1] 2965 	and a,(GPIO_ODR,x)
      0026C5 20 02            [ 2] 2966 	jra 8$
      0026C7 EA 00            [ 1] 2967 5$: or a,(GPIO_ODR,x)
      0026C9 E7 00            [ 1] 2968 8$: ld (GPIO_ODR,x),a 
      0026CB                       2969 	_drop VSIZE 
      0026CB 5B 02            [ 2]    1     addw sp,#VSIZE 
      0026CD 81               [ 4] 2970 	ret
                                   2971 
                                   2972 
                                   2973 ;-----------------------
                                   2974 ; BASIC: STOP
                                   2975 ; stop progam execution  
                                   2976 ; without resetting pointers 
                                   2977 ; the program is resumed
                                   2978 ; with RUN 
                                   2979 ;-------------------------
      0026CE                       2980 stop:
      0026CE 72 00 00 22 02   [ 2] 2981 	btjt flags,#FRUN,2$
      0026D3 4F               [ 1] 2982 	clr a
      0026D4 81               [ 4] 2983 	ret 
      0026D5                       2984 2$:	 
                                   2985 ; create space on cstack to save context 
      0026D5 AE 26 FC         [ 2] 2986 	ldw x,#break_point 
      0026D8 CD 09 6D         [ 4] 2987 	call puts 
      0026DB                       2988 	_drop 2 ;drop return address 
      0026DB 5B 02            [ 2]    1     addw sp,#2 
      0026DD                       2989 	_vars CTXT_SIZE ; context size 
      0026DD 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0026DF CD 20 3F         [ 4] 2990 	call save_context 
      0026E2 AE 16 68         [ 2] 2991 	ldw x,#tib 
      0026E5 CF 00 04         [ 2] 2992 	ldw basicptr,x
      0026E8 7F               [ 1] 2993 	clr (x)
      0026E9 72 5F 00 03      [ 1] 2994 	clr count  
      0026ED 5F               [ 1] 2995 	clrw x 
      0026EE CF 00 00         [ 2] 2996 	ldw in.w,x
      0026F1 72 11 00 22      [ 1] 2997 	bres flags,#FRUN 
      0026F5 72 18 00 22      [ 1] 2998 	bset flags,#FBREAK
      0026F9 CC 16 F2         [ 2] 2999 	jp interpreter 
      0026FC 0A 62 72 65 61 6B 20  3000 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3001 
                                   3002 ;-----------------------
                                   3003 ; BASIC: NEW
                                   3004 ; from command line only 
                                   3005 ; free program memory
                                   3006 ; and clear variables 
                                   3007 ;------------------------
      00271A                       3008 new: 
      00271A 72 01 00 22 01   [ 2] 3009 	btjf flags,#FRUN,0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      00271F 81               [ 4] 3010 	ret 
      002720                       3011 0$:	
      002720 CD 14 A3         [ 4] 3012 	call clear_basic 
      002723 81               [ 4] 3013 	ret 
                                   3014 
                                   3015 ;-----------------------------------
                                   3016 ; BASIC: ERASE \E | \F 
                                   3017 ; erase all block in range from 
                                   3018 ;  'app_space' to FLASH end (0x20000)
                                   3019 ;  or all EEPROM 
                                   3020 ; that contains a non zero byte.  
                                   3021 ;-----------------------------------
                           000001  3022 	LIMIT=1 
                           000003  3023 	VSIZE = 3 
      002724                       3024 erase:
      002724 72 5F 00 18      [ 1] 3025 	clr farptr 
      002728                       3026 	_vars VSIZE 
      002728 52 03            [ 2]    1     sub sp,#VSIZE 
      00272A CD 17 4E         [ 4] 3027 	call next_token 
      00272D A1 04            [ 1] 3028 	cp a,#TK_CHAR 
      00272F 27 03            [ 1] 3029 	jreq 0$ 
      002731 CC 16 47         [ 2] 3030 	jp syntax_error
      002734 CD 17 90         [ 4] 3031 0$: call get_char 
      002737 A4 DF            [ 1] 3032 	and a,#0XDF 
      002739 A1 45            [ 1] 3033 	cp a,#'E
      00273B 26 0C            [ 1] 3034 	jrne 1$
      00273D AE 40 00         [ 2] 3035 	ldw x,#EEPROM_BASE 
      002740 CF 00 19         [ 2] 3036 	ldw farptr+1,x 
      002743 AE 47 FF         [ 2] 3037 	ldw x,#EEPROM_END
      002746 4F               [ 1] 3038 	clr a 
      002747 20 15            [ 2] 3039 	jra 3$ 
      002749 A1 46            [ 1] 3040 1$: cp a,#'F 
      00274B 27 06            [ 1] 3041 	jreq 2$
      00274D AE 15 87         [ 2] 3042 	ldw x,#err_bad_value
      002750 CC 16 49         [ 2] 3043 	jp tb_error
      002753                       3044 2$:
      002753 AE 34 80         [ 2] 3045 	ldw x,#app_space  
      002756 CF 00 19         [ 2] 3046 	ldw farptr+1,x 
      002759 A6 02            [ 1] 3047 	ld a,#(FLASH_END>>16)&0XFF 
      00275B AE 7F FF         [ 2] 3048 	ldw x,#FLASH_END&0xffff
      00275E                       3049 3$:
      00275E 6B 01            [ 1] 3050 	ld (LIMIT,sp),a 
      002760 1F 02            [ 2] 3051 	ldw (LIMIT+1,sp),x 
                                   3052  ; operation done from RAM
                                   3053  ; copy code to RAM in tib   
      002762 CD 07 0E         [ 4] 3054 	call move_erase_to_ram
      002765                       3055 4$:	 
      002765 CD 08 90         [ 4] 3056     call scan_block 
      002768 27 08            [ 1] 3057 	jreq 5$  ; block already erased 
      00276A A6 45            [ 1] 3058     ld a,#'E 
      00276C CD 09 10         [ 4] 3059     call putc 
      00276F CD 07 8C         [ 4] 3060 	call block_erase   
                                   3061 ; this block is clean, next  
      002772 AE 00 80         [ 2] 3062 5$:	ldw x,#BLOCK_SIZE
      002775 CD 08 82         [ 4] 3063 	call incr_farptr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                                   3064 ; check limit, 24 bit substraction  	
      002778 7B 01            [ 1] 3065 	ld a,(LIMIT,sp)
      00277A 1E 02            [ 2] 3066 	ldw x,(LIMIT+1,sp)
      00277C 72 B0 00 19      [ 2] 3067 	subw x,farptr+1
      002780 C2 00 18         [ 1] 3068 	sbc a,farptr 
      002783 22 E0            [ 1] 3069 	jrugt 4$ 
      002785 CD 14 A3         [ 4] 3070 9$: call clear_basic
      002788 1E 02            [ 2] 3071 	ldw x,(LIMIT+1,sp)
      00278A A3 47 FF         [ 2] 3072 	cpw x,#EEPROM_END
      00278D 26 03            [ 1] 3073 	jrne 10$
      00278F CD 1C F8         [ 4] 3074 	call func_eefree 
      002792                       3075 10$:
      002792                       3076 	_drop VSIZE 
      002792 5B 03            [ 2]    1     addw sp,#VSIZE 
      002794 81               [ 4] 3077 	ret 
                                   3078 	
                                   3079 
                                   3080 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3081 ;  check for application signature 
                                   3082 ; output:
                                   3083 ;   Carry    0 app present 
                                   3084 ;            1 no app installed  
                                   3085 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002795                       3086 qsign: 
      002795 CE 34 80         [ 2] 3087 	ldw x,app_sign 
      002798 C3 28 55         [ 2] 3088 	cpw x,SIGNATURE ; "BC" 
      00279B 81               [ 4] 3089 	ret 
                                   3090 
                                   3091 ;--------------------------------------
                                   3092 ;  fill write buffer 
                                   3093 ;  input:
                                   3094 ;    y  point to output buffer 
                                   3095 ;    x  point to source 
                                   3096 ;    a  bytes to write in buffer 
                                   3097 ;  output:
                                   3098 ;    y   += A 
                                   3099 ;    X   += A 
                                   3100 ;    A   0 
                                   3101 ;---------------------------------------
      00279C                       3102 fill_write_buffer:
      00279C 88               [ 1] 3103 	push a 
      00279D 4D               [ 1] 3104 	tnz a 
      00279E 27 0A            [ 1] 3105 	jreq 9$ 
      0027A0 F6               [ 1] 3106 1$: ld a,(x)
      0027A1 5C               [ 1] 3107 	incw x 
      0027A2 90 F7            [ 1] 3108 	ld (y),a 
      0027A4 90 5C            [ 1] 3109 	incw y 
      0027A6 0A 01            [ 1] 3110 	dec (1,sp) 
      0027A8 26 F6            [ 1] 3111 	jrne 1$ 
      0027AA 84               [ 1] 3112 9$:	pop a 
      0027AB 81               [ 4] 3113     ret 	
                                   3114 
                                   3115 ;--------------------------------------
                                   3116 ;  fill pad buffer with zero 
                                   3117 ;  input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



                                   3118 ;	none 
                                   3119 ;  output:
                                   3120 ;    y     buffer address  
                                   3121 ;--------------------------------------
      0027AC                       3122 clear_block_buffer:
      0027AC 88               [ 1] 3123 	push a 
      0027AD 90 AE 16 B8      [ 2] 3124 	ldw y,#block_buffer 
      0027B1 90 89            [ 2] 3125 	pushw y
      0027B3 A6 80            [ 1] 3126 	ld a,#BLOCK_SIZE   
      0027B5 90 7F            [ 1] 3127 1$:	clr (y)
      0027B7 90 5C            [ 1] 3128 	incw y
      0027B9 4A               [ 1] 3129 	dec a  
      0027BA 26 F9            [ 1] 3130 	jrne 1$ 	
      0027BC 90 85            [ 2] 3131 9$: popw y 
      0027BE 84               [ 1] 3132 	pop a 			
      0027BF 81               [ 4] 3133 	ret 
                                   3134 
                                   3135 
                                   3136 ;---------------------------------------
                                   3137 ; BASIC: SAVE
                                   3138 ; write application from RAM to FLASH
                                   3139 ;--------------------------------------
                           000001  3140 	XTEMP=1
                           000003  3141 	COUNT=3  ; last count bytes written 
                           000004  3142 	CNT_LO=4 ; count low byte 
                           000005  3143 	TOWRITE=5 ; how bytes left to write  
                           000006  3144 	VSIZE=6 
      0027C0                       3145 save_app:
      0027C0 89               [ 2] 3146 	pushw x 
      0027C1 90 89            [ 2] 3147 	pushw y 
      0027C3                       3148 	_vars VSIZE
      0027C3 52 06            [ 2]    1     sub sp,#VSIZE 
      0027C5 CD 27 95         [ 4] 3149 	call qsign 
      0027C8 26 09            [ 1] 3150 	jrne 1$
      0027CA AE 28 57         [ 2] 3151 	ldw x,#CANT_DO 
      0027CD CD 09 6D         [ 4] 3152 	call puts 
      0027D0 CC 28 4F         [ 2] 3153 	jp 9$
      0027D3                       3154 1$: 
      0027D3 CE 00 1B         [ 2] 3155 	ldw x,txtbgn
      0027D6 C3 00 1D         [ 2] 3156 	cpw x,txtend 
      0027D9 25 09            [ 1] 3157 	jrult 2$ 
      0027DB AE 28 99         [ 2] 3158 	ldw x,#NO_APP
      0027DE CD 09 6D         [ 4] 3159 	call puts 
      0027E1 CC 28 4F         [ 2] 3160 	jp 9$
      0027E4                       3161 2$: 
                                   3162 ; block programming flash
                                   3163 ; must be done from RAM
                                   3164 ; moved in tib  
      0027E4 CD 07 4E         [ 4] 3165 	call move_prg_to_ram
                                   3166 ; initialize farptr 
                                   3167 ; to app_sign address 
      0027E7 72 5F 00 18      [ 1] 3168 	clr farptr 
      0027EB AE 34 80         [ 2] 3169 	ldw x,#app_sign 
      0027EE CF 00 19         [ 2] 3170 	ldw farptr+1,x
                                   3171 ; initialize local variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      0027F1 CD 1E 18         [ 4] 3172 	call prog_size
      0027F4 1F 05            [ 2] 3173 	ldw (TOWRITE,sp),x
      0027F6 0F 03            [ 1] 3174 	clr (COUNT,sp)
                                   3175 ; first bock 
                                   3176 ; containt signature 2 bytes 
                                   3177 ; and size 	2 bytes 
                                   3178 ; use Y as pointer to block_buffer
      0027F8 CD 27 AC         [ 4] 3179 	call clear_block_buffer ; -- y=*block_buffer	
                                   3180 ; write signature
      0027FB CE 28 55         [ 2] 3181 	ldw x,SIGNATURE ; "BC" 
      0027FE 90 FF            [ 2] 3182 	ldw (y),x 
      002800 72 A9 00 02      [ 2] 3183 	addw y,#2
      002804 1E 05            [ 2] 3184 	ldw x,(TOWRITE,sp)
      002806 90 FF            [ 2] 3185 	ldw (y),x
      002808 72 A9 00 02      [ 2] 3186 	addw y,#2   
      00280C A6 7C            [ 1] 3187 	ld a,#(BLOCK_SIZE-4)
      00280E 6B 04            [ 1] 3188 	ld (CNT_LO,sp),a 
      002810 A3 00 7C         [ 2] 3189 	cpw x,#(BLOCK_SIZE-4) 
      002813 22 01            [ 1] 3190 	jrugt 3$
      002815 9F               [ 1] 3191 	ld a,xl 
      002816 6B 04            [ 1] 3192 3$:	ld (CNT_LO,sp),a   
      002818 CE 00 1B         [ 2] 3193 	ldw x,txtbgn 
      00281B 1F 01            [ 2] 3194 	ldw (XTEMP,sp),x 
      00281D                       3195 32$: 
      00281D 1E 01            [ 2] 3196 	ldw x,(XTEMP,sp)
      00281F 7B 04            [ 1] 3197 	ld a,(CNT_LO,sp)
      002821 CD 27 9C         [ 4] 3198 	call fill_write_buffer 
      002824 1F 01            [ 2] 3199 	ldw (XTEMP,sp),x 
      002826 AE 16 B8         [ 2] 3200 	ldw x,#block_buffer
      002829 CD 07 68         [ 4] 3201 	call write_buffer
      00282C AE 00 80         [ 2] 3202 	ldw x,#BLOCK_SIZE 
      00282F CD 08 82         [ 4] 3203 	call incr_farptr  
                                   3204 ; following blocks 
      002832 1E 01            [ 2] 3205 	ldw x,(XTEMP,sp)
      002834 C3 00 1D         [ 2] 3206 	cpw x,txtend 
      002837 24 16            [ 1] 3207 	jruge 9$ 
      002839 1E 05            [ 2] 3208 	ldw x,(TOWRITE,sp)
      00283B 72 F0 03         [ 2] 3209 	subw x,(COUNT,sp)
      00283E 1F 05            [ 2] 3210 	ldw (TOWRITE,sp),x 
      002840 A6 80            [ 1] 3211 	ld a,#BLOCK_SIZE 
      002842 A3 00 80         [ 2] 3212 	cpw x,#BLOCK_SIZE 
      002845 24 01            [ 1] 3213 	jruge 4$ 
      002847 9F               [ 1] 3214 	ld a,xl 
      002848 6B 04            [ 1] 3215 4$:	ld (CNT_LO,sp),a 
      00284A CD 27 AC         [ 4] 3216 	call clear_block_buffer 
      00284D 20 CE            [ 2] 3217 	jra 32$ 
      00284F                       3218 9$:	_drop VSIZE 
      00284F 5B 06            [ 2]    1     addw sp,#VSIZE 
      002851 90 85            [ 2] 3219     popw y 
      002853 85               [ 2] 3220 	popw x 
      002854 81               [ 4] 3221 	ret 
                                   3222 
                                   3223 
      002855 42 43                 3224 SIGNATURE: .ascii "BC"
      002857 43 61 6E 27 74 20 66  3225 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      002899 4E 6F 20 61 70 70 6C  3226 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3227 
                                   3228 ;---------------------
                                   3229 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3230 ; write 1 or more byte to FLASH or EEPROM
                                   3231 ; starting at address  
                                   3232 ; input:
                                   3233 ;   expr1  	is address 
                                   3234 ;   expr2,...,exprn   are bytes to write
                                   3235 ; output:
                                   3236 ;   none 
                                   3237 ;---------------------
      0028AF                       3238 write:
      0028AF CD 1A 4F         [ 4] 3239 	call expression
      0028B2 A1 84            [ 1] 3240 	cp a,#TK_INTGR 
      0028B4 27 03            [ 1] 3241 	jreq 0$
      0028B6 CC 16 47         [ 2] 3242 	jp syntax_error
      0028B9                       3243 0$: _xpop 
      0028B9 90 F6            [ 1]    1     ld a,(y)
      0028BB 93               [ 1]    2     ldw x,y 
      0028BC EE 01            [ 2]    3     ldw x,(1,x)
      0028BE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028C2 C7 00 18         [ 1] 3244 	ld farptr,a 
      0028C5 CF 00 19         [ 2] 3245 	ldw ptr16,x 
      0028C8                       3246 1$:	
      0028C8 CD 17 4E         [ 4] 3247 	call next_token 
      0028CB A1 08            [ 1] 3248 	cp a,#TK_COMMA 
      0028CD 27 02            [ 1] 3249 	jreq 2$ 
      0028CF 20 20            [ 2] 3250 	jra 9$ ; no more data 
      0028D1 CD 1A 4F         [ 4] 3251 2$:	call expression
      0028D4 A1 84            [ 1] 3252 	cp a,#TK_INTGR
      0028D6 27 03            [ 1] 3253 	jreq 3$
      0028D8 CC 16 47         [ 2] 3254 	jp syntax_error
      0028DB                       3255 3$:	_xpop 
      0028DB 90 F6            [ 1]    1     ld a,(y)
      0028DD 93               [ 1]    2     ldw x,y 
      0028DE EE 01            [ 2]    3     ldw x,(1,x)
      0028E0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028E4 9F               [ 1] 3256 	ld a,xl 
      0028E5 5F               [ 1] 3257 	clrw x 
      0028E6 CD 07 B2         [ 4] 3258 	call write_byte
      0028E9 AE 00 01         [ 2] 3259 	ldw x,#1 
      0028EC CD 08 82         [ 4] 3260 	call incr_farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      0028EF 20 D7            [ 2] 3261 	jra 1$ 
      0028F1                       3262 9$:
      0028F1 81               [ 4] 3263 	ret 
                                   3264 
                                   3265 
                                   3266 ;---------------------
                                   3267 ;BASIC: CHAR(expr)
                                   3268 ; évaluate expression 
                                   3269 ; and take the 7 least 
                                   3270 ; bits as ASCII character
                                   3271 ; output: 
                                   3272 ; 	A char 
                                   3273 ;---------------------
      0028F2                       3274 func_char:
      0028F2 CD 19 13         [ 4] 3275 	call func_args 
      0028F5 A1 01            [ 1] 3276 	cp a,#1
      0028F7 27 03            [ 1] 3277 	jreq 1$
      0028F9 CC 16 47         [ 2] 3278 	jp syntax_error
      0028FC                       3279 1$:	_xpop
      0028FC 90 F6            [ 1]    1     ld a,(y)
      0028FE 93               [ 1]    2     ldw x,y 
      0028FF EE 01            [ 2]    3     ldw x,(1,x)
      002901 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002905 9F               [ 1] 3280 	ld a,xl
      002906 A4 7F            [ 1] 3281 	and a,#0x7f 
      002908 81               [ 4] 3282 	ret
                                   3283 
                                   3284 ;---------------------
                                   3285 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3286 ; extract first character 
                                   3287 ; of string argument 
                                   3288 ; output:
                                   3289 ;    A:X    int24 
                                   3290 ;---------------------
      002909                       3291 ascii:
      002909 A6 06            [ 1] 3292 	ld a,#TK_LPAREN
      00290B CD 19 06         [ 4] 3293 	call expect 
      00290E CD 17 4E         [ 4] 3294 	call next_token 
      002911 A1 02            [ 1] 3295 	cp a,#TK_QSTR 
      002913 27 0E            [ 1] 3296 	jreq 1$
      002915 A1 04            [ 1] 3297 	cp a,#TK_CHAR 
      002917 27 12            [ 1] 3298 	jreq 2$ 
      002919 A1 82            [ 1] 3299 	cp a,#TK_CFUNC 
      00291B 27 03            [ 1] 3300 	jreq 0$
      00291D CC 16 47         [ 2] 3301 	jp syntax_error
      002920                       3302 0$: ; cfunc 
      002920 FD               [ 4] 3303 	call (x)
      002921 20 0B            [ 2] 3304 	jra 3$
      002923                       3305 1$: ; quoted string 
      002923 F6               [ 1] 3306 	ld a,(x)
      002924 88               [ 1] 3307 	push a  
      002925 CD 17 67         [ 4] 3308 	call skip_string
      002928 84               [ 1] 3309 	pop a  	
      002929 20 03            [ 2] 3310 	jra 3$ 
      00292B                       3311 2$: ; character 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      00292B CD 17 90         [ 4] 3312 	call get_char 
      00292E 5F               [ 1] 3313 3$:	clrw x 
      00292F 02               [ 1] 3314 	rlwa x   
      002930                       3315 4$:	_xpush  
      002930 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002934 90 F7            [ 1]    2     ld (y),a 
      002936 90 EF 01         [ 2]    3     ldw (1,y),x 
      002939 A6 07            [ 1] 3316 	ld a,#TK_RPAREN 
      00293B CD 19 06         [ 4] 3317 	call expect
      00293E                       3318 9$:	
      00293E                       3319 	_xpop  
      00293E 90 F6            [ 1]    1     ld a,(y)
      002940 93               [ 1]    2     ldw x,y 
      002941 EE 01            [ 2]    3     ldw x,(1,x)
      002943 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002947 81               [ 4] 3320 	ret 
                                   3321 
                                   3322 ;---------------------
                                   3323 ;BASIC: KEY
                                   3324 ; wait for a character 
                                   3325 ; received from STDIN 
                                   3326 ; input:
                                   3327 ;	none 
                                   3328 ; output:
                                   3329 ;	a	 character 
                                   3330 ;---------------------
      002948                       3331 key:
      002948 CD 09 20         [ 4] 3332 	call getc 
      00294B 81               [ 4] 3333 	ret
                                   3334 
                                   3335 ;----------------------
                                   3336 ; BASIC: QKEY
                                   3337 ; Return true if there 
                                   3338 ; is a character in 
                                   3339 ; waiting in STDIN 
                                   3340 ; input:
                                   3341 ;  none 
                                   3342 ; output:
                                   3343 ;   A     0|-1
                                   3344 ;-----------------------
      00294C                       3345 qkey:: 
      00294C 5F               [ 1] 3346 	clrw x 
      00294D C6 00 2E         [ 1] 3347 	ld a,rx1_head
      002950 C0 00 2F         [ 1] 3348 	sub a,rx1_tail 
      002953 27 03            [ 1] 3349 	jreq 9$ 
      002955 53               [ 2] 3350 	cplw x
      002956 A6 FF            [ 1] 3351 	ld a,#255    
      002958                       3352 9$: 
      002958 81               [ 4] 3353 	ret 
                                   3354 
                                   3355 ;---------------------
                                   3356 ; BASIC: GPIO(port,reg)
                                   3357 ; return gpio register address 
                                   3358 ; expr {PORTA..PORTI}
                                   3359 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



                                   3360 ;   none 
                                   3361 ; output:
                                   3362 ;   A:X 	gpio register address
                                   3363 ;----------------------------
                                   3364 ;	N=PORT
                                   3365 ;	T=REG 
      002959                       3366 gpio:
      002959 CD 19 13         [ 4] 3367 	call func_args 
      00295C A1 02            [ 1] 3368 	cp a,#2
      00295E 27 03            [ 1] 3369 	jreq 1$
      002960 CC 16 47         [ 2] 3370 	jp syntax_error  
      002963                       3371 1$:	_at_next 
      002963 90 E6 03         [ 1]    1     ld a,(3,y)
      002966 93               [ 1]    2     ldw x,y 
      002967 EE 04            [ 2]    3     ldw x,(4,x)
      002969 A3 50 00         [ 2] 3372 	cpw x,#PA_BASE 
      00296C 2B 16            [ 1] 3373 	jrmi bad_port
      00296E A3 50 29         [ 2] 3374 	cpw x,#PI_BASE+1 
      002971 2A 11            [ 1] 3375 	jrpl bad_port
      002973 89               [ 2] 3376 	pushw x 
      002974                       3377 	_xpop
      002974 90 F6            [ 1]    1     ld a,(y)
      002976 93               [ 1]    2     ldw x,y 
      002977 EE 01            [ 2]    3     ldw x,(1,x)
      002979 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00297D 72 FB 01         [ 2] 3378 	addw x,(1,sp)
      002980                       3379 	_drop 2 
      002980 5B 02            [ 2]    1     addw sp,#2 
      002982 4F               [ 1] 3380 	clr a 
      002983 81               [ 4] 3381 	ret
      002984                       3382 bad_port:
      002984 A6 0A            [ 1] 3383 	ld a,#ERR_BAD_VALUE
      002986 CC 16 49         [ 2] 3384 	jp tb_error
                                   3385 
                                   3386 
                                   3387 ;-------------------------
                                   3388 ; BASIC: UFLASH 
                                   3389 ; return free flash address
                                   3390 ; input:
                                   3391 ;  none 
                                   3392 ; output:
                                   3393 ;	A		TK_INTGR
                                   3394 ;   xstack	free address 
                                   3395 ;---------------------------
      002989                       3396 uflash:
      002989 CD 27 95         [ 4] 3397 	call qsign 
      00298C 26 13            [ 1] 3398 	jrne 1$
      00298E AE 34 80         [ 2] 3399 	ldw x,#app_space 
      002991 72 BB 34 82      [ 2] 3400 	addw x,app_size 
      002995 1C 00 04         [ 2] 3401 	addw x,#4
                                   3402 ; align on 128 bytes block 
      002998 1C 00 80         [ 2] 3403 	addw x,#BLOCK_SIZE 
      00299B 9F               [ 1] 3404 	ld a,xl 
      00299C A4 80            [ 1] 3405 	and a,#0x80 
      00299E 97               [ 1] 3406 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      00299F 20 03            [ 2] 3407 	jra 2$
      0029A1 AE 34 80         [ 2] 3408 1$:	ldw x,#app_space 
      0029A4                       3409 2$:
      0029A4 4F               [ 1] 3410 	clr a 
      0029A5 81               [ 4] 3411 	ret 
                                   3412 
                                   3413 
                                   3414 ;---------------------
                                   3415 ; BASIC: USR(addr,arg)
                                   3416 ; execute a function written 
                                   3417 ; in binary code.
                                   3418 ; input:
                                   3419 ;   addr	routine address 
                                   3420 ;   arg 	is an argument
                                   3421 ;           it can be ignore 
                                   3422 ;           by cally. 
                                   3423 ; output:
                                   3424 ;   xstack 	value returned by cally  
                                   3425 ;---------------------
      0029A6                       3426 usr:
      0029A6 CD 19 13         [ 4] 3427 	call func_args 
      0029A9 A1 02            [ 1] 3428 	cp a,#2
      0029AB 27 03            [ 1] 3429 	jreq 1$  
      0029AD CC 16 47         [ 2] 3430 	jp syntax_error 
      0029B0                       3431 1$: 
      0029B0                       3432 	_at_next ; A:X addr 
      0029B0 90 E6 03         [ 1]    1     ld a,(3,y)
      0029B3 93               [ 1]    2     ldw x,y 
      0029B4 EE 04            [ 2]    3     ldw x,(4,x)
      0029B6 CF 00 19         [ 2] 3433 	ldw ptr16,X 
      0029B9                       3434 	_xpop  ; arg 
      0029B9 90 F6            [ 1]    1     ld a,(y)
      0029BB 93               [ 1]    2     ldw x,y 
      0029BC EE 01            [ 2]    3     ldw x,(1,x)
      0029BE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029C2                       3435 	_store_top ; overwrite addr 
      0029C2 90 F7            [ 1]    1     ld (y),a 
      0029C4 90 EF 01         [ 2]    2     ldw (1,y),x     
      0029C7 72 CD 00 19      [ 6] 3436     call [ptr16]
      0029CB 81               [ 4] 3437 	ret 
                                   3438 
                                   3439 
                                   3440 ;------------------------------
                                   3441 ; BASIC: BYE 
                                   3442 ; halt mcu in its lowest power mode 
                                   3443 ; wait for reset or external interrupt
                                   3444 ; do a cold start on wakeup.
                                   3445 ;------------------------------
      0029CC                       3446 bye:
      0029CC 72 0D 52 30 FB   [ 2] 3447 	btjf UART1_SR,#UART_SR_TC,.
      0029D1 8E               [10] 3448 	halt
      0029D2 CC 00 C3         [ 2] 3449 	jp cold_start  
                                   3450 
                                   3451 ;----------------------------------
                                   3452 ; BASIC: SLEEP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



                                   3453 ; halt mcu until reset or external
                                   3454 ; interrupt.
                                   3455 ; Resume progam after SLEEP command
                                   3456 ;----------------------------------
      0029D5                       3457 sleep:
      0029D5 72 0D 52 30 FB   [ 2] 3458 	btjf UART1_SR,#UART_SR_TC,.
      0029DA 72 16 00 22      [ 1] 3459 	bset flags,#FSLEEP
      0029DE 8E               [10] 3460 	halt 
      0029DF 81               [ 4] 3461 	ret 
                                   3462 
                                   3463 ;-------------------------------
                                   3464 ; BASIC: PAUSE expr 
                                   3465 ; suspend execution for n msec.
                                   3466 ; input:
                                   3467 ;	none
                                   3468 ; output:
                                   3469 ;	none 
                                   3470 ;------------------------------
      0029E0                       3471 pause:
      0029E0 CD 1A 4F         [ 4] 3472 	call expression
      0029E3 A1 84            [ 1] 3473 	cp a,#TK_INTGR
      0029E5 27 03            [ 1] 3474 	jreq 1$ 
      0029E7 CC 16 47         [ 2] 3475 	jp syntax_error
      0029EA                       3476 1$: _xpop 
      0029EA 90 F6            [ 1]    1     ld a,(y)
      0029EC 93               [ 1]    2     ldw x,y 
      0029ED EE 01            [ 2]    3     ldw x,(1,x)
      0029EF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029F3                       3477 pause02:
      0029F3 CF 00 12         [ 2] 3478 	ldw timer,x 
      0029F6 CE 00 12         [ 2] 3479 1$: ldw x,timer 
      0029F9 5D               [ 2] 3480 	tnzw x 
      0029FA 27 03            [ 1] 3481 	jreq 2$
      0029FC 8F               [10] 3482 	wfi 
      0029FD 26 F7            [ 1] 3483 	jrne 1$
      0029FF                       3484 2$:	
      0029FF 81               [ 4] 3485 	ret 
                                   3486 
                                   3487 ;------------------------------
                                   3488 ; BASIC: AWU expr
                                   3489 ; halt mcu for 'expr' milliseconds
                                   3490 ; use Auto wakeup peripheral
                                   3491 ; all oscillators stopped except LSI
                                   3492 ; range: 1ms - 511ms
                                   3493 ; input:
                                   3494 ;  none
                                   3495 ; output:
                                   3496 ;  none:
                                   3497 ;------------------------------
      002A00                       3498 awu:
      002A00 CD 1A 4F         [ 4] 3499   call expression
      002A03 A1 84            [ 1] 3500   cp a,#TK_INTGR
      002A05 27 03            [ 1] 3501   jreq 1$
      002A07 CC 16 47         [ 2] 3502   jp syntax_error
      002A0A                       3503 1$: _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002A0A 90 F6            [ 1]    1     ld a,(y)
      002A0C 93               [ 1]    2     ldw x,y 
      002A0D EE 01            [ 2]    3     ldw x,(1,x)
      002A0F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A13                       3504 awu02:
      002A13 A3 14 00         [ 2] 3505   cpw x,#5120
      002A16 2B 0C            [ 1] 3506   jrmi 1$ 
      002A18 35 0F 50 F2      [ 1] 3507   mov AWU_TBR,#15 
      002A1C A6 1E            [ 1] 3508   ld a,#30
      002A1E 62               [ 2] 3509   div x,a
      002A1F A6 10            [ 1] 3510   ld a,#16
      002A21 62               [ 2] 3511   div x,a 
      002A22 20 1E            [ 2] 3512   jra 4$
      002A24                       3513 1$: 
      002A24 A3 08 00         [ 2] 3514   cpw x,#2048
      002A27 2B 09            [ 1] 3515   jrmi 2$ 
      002A29 35 0E 50 F2      [ 1] 3516   mov AWU_TBR,#14
      002A2D A6 50            [ 1] 3517   ld a,#80
      002A2F 62               [ 2] 3518   div x,a 
      002A30 20 10            [ 2] 3519   jra 4$   
      002A32                       3520 2$:
      002A32 35 07 50 F2      [ 1] 3521   mov AWU_TBR,#7
      002A36                       3522 3$:  
                                   3523 ; while X > 64  divide by 2 and increment AWU_TBR 
      002A36 A3 00 40         [ 2] 3524   cpw x,#64 
      002A39 23 07            [ 2] 3525   jrule 4$ 
      002A3B 72 5C 50 F2      [ 1] 3526   inc AWU_TBR 
      002A3F 54               [ 2] 3527   srlw x 
      002A40 20 F4            [ 2] 3528   jra 3$ 
      002A42                       3529 4$:
      002A42 9F               [ 1] 3530   ld a, xl
      002A43 4A               [ 1] 3531   dec a 
      002A44 27 01            [ 1] 3532   jreq 5$
      002A46 4A               [ 1] 3533   dec a 	
      002A47                       3534 5$: 
      002A47 A4 3E            [ 1] 3535   and a,#0x3e 
      002A49 C7 50 F1         [ 1] 3536   ld AWU_APR,a 
      002A4C 72 18 50 F0      [ 1] 3537   bset AWU_CSR,#AWU_CSR_AWUEN
      002A50 8E               [10] 3538   halt 
                                   3539 
      002A51 81               [ 4] 3540   ret 
                                   3541 
                                   3542 ;------------------------------
                                   3543 ; BASIC: TICKS
                                   3544 ; return msec ticks counter value 
                                   3545 ; input:
                                   3546 ; 	none 
                                   3547 ; output:
                                   3548 ;	X 		TK_INTGR
                                   3549 ;-------------------------------
      002A52                       3550 get_ticks:
      002A52 C6 00 0F         [ 1] 3551 	ld a,ticks 
      002A55 CE 00 10         [ 2] 3552 	ldw x,ticks+1 
      002A58 81               [ 4] 3553 	ret 
                                   3554 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



                                   3555 ;------------------------------
                                   3556 ; BASIC: ABS(expr)
                                   3557 ; return absolute value of expr.
                                   3558 ; input:
                                   3559 ;   none
                                   3560 ; output:
                                   3561 ;   xstack    positive int24 
                                   3562 ;-------------------------------
      002A59                       3563 abs:
      002A59 CD 19 13         [ 4] 3564 	call func_args 
      002A5C A1 01            [ 1] 3565 	cp a,#1 
      002A5E 27 03            [ 1] 3566 	jreq 0$ 
      002A60 CC 16 47         [ 2] 3567 	jp syntax_error
      002A63                       3568 0$:  
      002A63 CD 01 DF         [ 4] 3569 	call abs24 
      002A66                       3570 	_xpop 
      002A66 90 F6            [ 1]    1     ld a,(y)
      002A68 93               [ 1]    2     ldw x,y 
      002A69 EE 01            [ 2]    3     ldw x,(1,x)
      002A6B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A6F 81               [ 4] 3571 	ret 
                                   3572 
                                   3573 ;------------------------------
                                   3574 ; BASIC: LSHIFT(expr1,expr2)
                                   3575 ; logical shift left expr1 by 
                                   3576 ; expr2 bits 
                                   3577 ; output:
                                   3578 ; 	A 		TK_INTGR
                                   3579 ;   X 		result 
                                   3580 ;------------------------------
      002A70                       3581 lshift:
      002A70 CD 19 13         [ 4] 3582 	call func_args
      002A73 A1 02            [ 1] 3583 	cp a,#2 
      002A75 27 03            [ 1] 3584 	jreq 1$
      002A77 CC 16 47         [ 2] 3585 	jp syntax_error
      002A7A                       3586 1$: _xpop 
      002A7A 90 F6            [ 1]    1     ld a,(y)
      002A7C 93               [ 1]    2     ldw x,y 
      002A7D EE 01            [ 2]    3     ldw x,(1,x)
      002A7F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A83 90 93            [ 1] 3587     ldw y,x    
      002A85                       3588 	_at_top  ; T@ 
      002A85 90 F6            [ 1]    1     ld a,(y)
      002A87 93               [ 1]    2     ldw x,y 
      002A88 EE 01            [ 2]    3     ldw x,(1,x)
      002A8A 90 5D            [ 2] 3589 	tnzw y 
      002A8C 27 07            [ 1] 3590 	jreq 4$
      002A8E 98               [ 1] 3591 2$:	rcf 
      002A8F 59               [ 2] 3592 	rlcw x 
      002A90 49               [ 1] 3593 	rlc a 
      002A91 90 5A            [ 2] 3594 	decw y 
      002A93 26 F9            [ 1] 3595 	jrne 2$
      002A95                       3596 4$: _store_top  ; T! 
      002A95 90 F7            [ 1]    1     ld (y),a 
      002A97 90 EF 01         [ 2]    2     ldw (1,y),x     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002A9A A6 84            [ 1] 3597 	ld a,#TK_INTGR
      002A9C 81               [ 4] 3598 	ret
                                   3599 
                                   3600 ;------------------------------
                                   3601 ; BASIC: RSHIFT(expr1,expr2)
                                   3602 ; logical shift right expr1 by 
                                   3603 ; expr2 bits.
                                   3604 ; output:
                                   3605 ; 	A 		TK_INTGR
                                   3606 ;   X 		result 
                                   3607 ;------------------------------
      002A9D                       3608 rshift:
      002A9D CD 19 13         [ 4] 3609 	call func_args
      002AA0 A1 02            [ 1] 3610 	cp a,#2 
      002AA2 27 03            [ 1] 3611 	jreq 1$
      002AA4 CC 16 47         [ 2] 3612 	jp syntax_error
      002AA7                       3613 1$: _xpop 
      002AA7 90 F6            [ 1]    1     ld a,(y)
      002AA9 93               [ 1]    2     ldw x,y 
      002AAA EE 01            [ 2]    3     ldw x,(1,x)
      002AAC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AB0 90 93            [ 1] 3614     ldw y,x   
      002AB2                       3615 	_at_top  ; T@  
      002AB2 90 F6            [ 1]    1     ld a,(y)
      002AB4 93               [ 1]    2     ldw x,y 
      002AB5 EE 01            [ 2]    3     ldw x,(1,x)
      002AB7 90 5D            [ 2] 3616 	tnzw y 
      002AB9 27 07            [ 1] 3617 	jreq 4$
      002ABB 98               [ 1] 3618 2$:	rcf 
      002ABC 56               [ 2] 3619 	rrcw x
      002ABD 46               [ 1] 3620 	rrc a  
      002ABE 90 5A            [ 2] 3621 	decw y 
      002AC0 26 F9            [ 1] 3622 	jrne 2$
      002AC2                       3623 4$: _store_top  ; T! 
      002AC2 90 F7            [ 1]    1     ld (y),a 
      002AC4 90 EF 01         [ 2]    2     ldw (1,y),x     
      002AC7 A6 84            [ 1] 3624 	ld a,#TK_INTGR
      002AC9 81               [ 4] 3625 	ret
                                   3626 
                                   3627 ;--------------------------
                                   3628 ; BASIC: FCPU integer
                                   3629 ; set CPU frequency 
                                   3630 ;-------------------------- 
                                   3631 
      002ACA                       3632 fcpu:
      002ACA A6 84            [ 1] 3633 	ld a,#TK_INTGR
      002ACC CD 19 06         [ 4] 3634 	call expect 
      002ACF CD 17 80         [ 4] 3635 	call get_int24 
      002AD2 9F               [ 1] 3636 	ld a,xl 
      002AD3 A4 07            [ 1] 3637 	and a,#7 
      002AD5 C7 50 C6         [ 1] 3638 	ld CLK_CKDIVR,a 
      002AD8 81               [ 4] 3639 	ret 
                                   3640 
                                   3641 ;------------------------------
                                   3642 ; BASIC: PMODE pin#, mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



                                   3643 ; Arduino pin. 
                                   3644 ; define pin as input or output
                                   3645 ; pin#: {0..15}
                                   3646 ; mode: INPUT|OUTPUT  
                                   3647 ;------------------------------
                           000001  3648 	PINNO=1
                           000001  3649 	VSIZE=1
      002AD9                       3650 pin_mode:
      002AD9                       3651 	_vars VSIZE 
      002AD9 52 01            [ 2]    1     sub sp,#VSIZE 
      002ADB CD 19 18         [ 4] 3652 	call arg_list 
      002ADE A1 02            [ 1] 3653 	cp a,#2 
      002AE0 27 03            [ 1] 3654 	jreq 1$
      002AE2 CC 16 47         [ 2] 3655 	jp syntax_error 
      002AE5                       3656 1$: _xpop 
      002AE5 90 F6            [ 1]    1     ld a,(y)
      002AE7 93               [ 1]    2     ldw x,y 
      002AE8 EE 01            [ 2]    3     ldw x,(1,x)
      002AEA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AEE CF 00 19         [ 2] 3657 	ldw ptr16,x ; mode 
      002AF1                       3658 	_xpop ; Dx pin 
      002AF1 90 F6            [ 1]    1     ld a,(y)
      002AF3 93               [ 1]    2     ldw x,y 
      002AF4 EE 01            [ 2]    3     ldw x,(1,x)
      002AF6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AFA CD 2B 38         [ 4] 3659 	call select_pin 
      002AFD 6B 01            [ 1] 3660 	ld (PINNO,sp),a  
      002AFF A6 01            [ 1] 3661 	ld a,#1 
      002B01 0D 01            [ 1] 3662 	tnz (PINNO,sp)
      002B03 27 0D            [ 1] 3663 	jreq 4$
      002B05 48               [ 1] 3664 2$:	sll a 
      002B06 0A 01            [ 1] 3665 	dec (PINNO,sp)
      002B08 26 FB            [ 1] 3666 	jrne 2$ 
      002B0A 6B 01            [ 1] 3667 	ld (PINNO,sp),a
      002B0C 7B 01            [ 1] 3668 	ld a,(PINNO,sp)
      002B0E EA 03            [ 1] 3669 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002B10 E7 03            [ 1] 3670 	ld (GPIO_CR1,x),a 
      002B12 A6 01            [ 1] 3671 4$:	ld a,#OUTP
      002B14 C1 00 0E         [ 1] 3672 	cp a,acc8 
      002B17 27 10            [ 1] 3673 	jreq 6$
                                   3674 ; input mode
                                   3675 ; disable external interrupt 
      002B19 7B 01            [ 1] 3676 	ld a,(PINNO,sp)
      002B1B 43               [ 1] 3677 	cpl a 
      002B1C E4 04            [ 1] 3678 	and a,(GPIO_CR2,x)
      002B1E E7 04            [ 1] 3679 	ld (GPIO_CR2,x),a 
                                   3680 ;clear bit in DDR for input mode 
      002B20 7B 01            [ 1] 3681 	ld a,(PINNO,sp)
      002B22 43               [ 1] 3682 	cpl a 
      002B23 E4 02            [ 1] 3683 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002B25 E7 02            [ 1] 3684 	ld (GPIO_DDR,x),a 
      002B27 20 0C            [ 2] 3685 	jra 9$
      002B29                       3686 6$: ;output mode  
      002B29 7B 01            [ 1] 3687 	ld a,(PINNO,sp)
      002B2B EA 02            [ 1] 3688 	or a,(GPIO_DDR,x) ; bit==1 for output 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002B2D E7 02            [ 1] 3689 	ld (GPIO_DDR,x),a 
      002B2F 7B 01            [ 1] 3690 	ld a,(PINNO,sp)
      002B31 EA 04            [ 1] 3691 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002B33 E7 04            [ 1] 3692 	ld (GPIO_CR2,x),a 
      002B35                       3693 9$:	
      002B35                       3694 	_drop VSIZE 
      002B35 5B 01            [ 2]    1     addw sp,#VSIZE 
      002B37 81               [ 4] 3695 	ret
                                   3696 
                                   3697 ;------------------------
                                   3698 ; select Arduino pin 
                                   3699 ; input:
                                   3700 ;   X 	 {0..15} Arduino Dx 
                                   3701 ; output:
                                   3702 ;   A     stm8s208 pin 
                                   3703 ;   X     base address s208 GPIO port 
                                   3704 ;---------------------------
      002B38                       3705 select_pin:
      002B38 58               [ 2] 3706 	sllw x 
      002B39 1C 2B 48         [ 2] 3707 	addw x,#arduino_to_8s208 
      002B3C FE               [ 2] 3708 	ldw x,(x)
      002B3D 9F               [ 1] 3709 	ld a,xl 
      002B3E 88               [ 1] 3710 	push a 
      002B3F 5E               [ 1] 3711 	swapw x 
      002B40 A6 05            [ 1] 3712 	ld a,#5 
      002B42 42               [ 4] 3713 	mul x,a 
      002B43 1C 50 00         [ 2] 3714 	addw x,#GPIO_BASE 
      002B46 84               [ 1] 3715 	pop a 
      002B47 81               [ 4] 3716 	ret 
                                   3717 ; translation from Arduino D0..D15 to stm8s208rb 
      002B48                       3718 arduino_to_8s208:
      002B48 03 06                 3719 .byte 3,6 ; D0 
      002B4A 03 05                 3720 .byte 3,5 ; D1 
      002B4C 04 00                 3721 .byte 4,0 ; D2 
      002B4E 02 01                 3722 .byte 2,1 ; D3
      002B50 06 00                 3723 .byte 6,0 ; D4
      002B52 02 02                 3724 .byte 2,2 ; D5
      002B54 02 03                 3725 .byte 2,3 ; D6
      002B56 03 01                 3726 .byte 3,1 ; D7
      002B58 03 03                 3727 .byte 3,3 ; D8
      002B5A 02 04                 3728 .byte 2,4 ; D9
      002B5C 04 05                 3729 .byte 4,5 ; D10
      002B5E 02 06                 3730 .byte 2,6 ; D11
      002B60 02 07                 3731 .byte 2,7 ; D12
      002B62 02 05                 3732 .byte 2,5 ; D13
      002B64 04 02                 3733 .byte 4,2 ; D14
      002B66 04 01                 3734 .byte 4,1 ; D15
                                   3735 
                                   3736 
                                   3737 ;------------------------------
                                   3738 ; BASIC: RND(expr)
                                   3739 ; return random number 
                                   3740 ; between 1 and expr inclusive
                                   3741 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3742 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



                                   3743 ; 	none 
                                   3744 ; output:
                                   3745 ;	xstack 	random positive integer 
                                   3746 ;------------------------------
      002B68                       3747 random:
      002B68 CD 19 13         [ 4] 3748 	call func_args 
      002B6B A1 01            [ 1] 3749 	cp a,#1
      002B6D 27 03            [ 1] 3750 	jreq 1$
      002B6F CC 16 47         [ 2] 3751 	jp syntax_error
      002B72                       3752 1$:  
      002B72                       3753 	_xpop   
      002B72 90 F6            [ 1]    1     ld a,(y)
      002B74 93               [ 1]    2     ldw x,y 
      002B75 EE 01            [ 2]    3     ldw x,(1,x)
      002B77 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B7B 89               [ 2] 3754 	pushw x 
      002B7C 88               [ 1] 3755 	push a  
      002B7D A6 80            [ 1] 3756 	ld a,#0x80 
      002B7F 15 01            [ 1] 3757 	bcp a,(1,sp)
      002B81 27 05            [ 1] 3758 	jreq 2$
      002B83 A6 0A            [ 1] 3759 	ld a,#ERR_BAD_VALUE
      002B85 CC 16 49         [ 2] 3760 	jp tb_error
      002B88                       3761 2$: 
                                   3762 ; acc16=(x<<5)^x 
      002B88 CE 00 14         [ 2] 3763 	ldw x,seedx 
      002B8B 58               [ 2] 3764 	sllw x 
      002B8C 58               [ 2] 3765 	sllw x 
      002B8D 58               [ 2] 3766 	sllw x 
      002B8E 58               [ 2] 3767 	sllw x 
      002B8F 58               [ 2] 3768 	sllw x 
      002B90 9E               [ 1] 3769 	ld a,xh 
      002B91 C8 00 14         [ 1] 3770 	xor a,seedx 
      002B94 C7 00 0D         [ 1] 3771 	ld acc16,a 
      002B97 9F               [ 1] 3772 	ld a,xl 
      002B98 C8 00 15         [ 1] 3773 	xor a,seedx+1 
      002B9B C7 00 0E         [ 1] 3774 	ld acc8,a 
                                   3775 ; seedx=seedy 
      002B9E CE 00 16         [ 2] 3776 	ldw x,seedy 
      002BA1 CF 00 14         [ 2] 3777 	ldw seedx,x  
                                   3778 ; seedy=seedy^(seedy>>1)
      002BA4 CE 00 16         [ 2] 3779 	ldw x,seedy 
      002BA7 54               [ 2] 3780 	srlw x 
      002BA8 9E               [ 1] 3781 	ld a,xh 
      002BA9 C8 00 16         [ 1] 3782 	xor a,seedy 
      002BAC C7 00 16         [ 1] 3783 	ld seedy,a  
      002BAF 9F               [ 1] 3784 	ld a,xl 
      002BB0 C8 00 17         [ 1] 3785 	xor a,seedy+1 
      002BB3 C7 00 17         [ 1] 3786 	ld seedy+1,a 
                                   3787 ; acc16>>3 
      002BB6 CE 00 0D         [ 2] 3788 	ldw x,acc16 
      002BB9 54               [ 2] 3789 	srlw x 
      002BBA 54               [ 2] 3790 	srlw x 
      002BBB 54               [ 2] 3791 	srlw x 
                                   3792 ; x=acc16^x 
      002BBC 9E               [ 1] 3793 	ld a,xh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002BBD C8 00 0D         [ 1] 3794 	xor a,acc16 
      002BC0 C7 00 0D         [ 1] 3795 	ld acc16,a 
      002BC3 9F               [ 1] 3796 	ld a,xl 
      002BC4 C8 00 0E         [ 1] 3797 	xor a,acc8 
      002BC7 C7 00 0E         [ 1] 3798 	ld acc8,a 
                                   3799 ; seedy=acc16^seedy 
      002BCA C8 00 17         [ 1] 3800 	xor a,seedy+1
      002BCD 97               [ 1] 3801 	ld xl,a 
      002BCE C6 00 0D         [ 1] 3802 	ld a,acc16 
      002BD1 C8 00 16         [ 1] 3803 	xor a,seedy
      002BD4 95               [ 1] 3804 	ld xh,a 
      002BD5 CF 00 16         [ 2] 3805 	ldw seedy,x 
                                   3806 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002BD8 C6 00 15         [ 1] 3807 	ld a,seedx+1
      002BDB A4 7F            [ 1] 3808 	and a,#127
      002BDD                       3809 	_xpush 
      002BDD 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002BE1 90 F7            [ 1]    2     ld (y),a 
      002BE3 90 EF 01         [ 2]    3     ldw (1,y),x 
      002BE6 84               [ 1] 3810 	pop a 
      002BE7 85               [ 2] 3811 	popw x 
      002BE8                       3812 	_xpush 
      002BE8 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002BEC 90 F7            [ 1]    2     ld (y),a 
      002BEE 90 EF 01         [ 2]    3     ldw (1,y),x 
      002BF1 CD 03 A1         [ 4] 3813 	call mod24 
      002BF4                       3814 	_xpop
      002BF4 90 F6            [ 1]    1     ld a,(y)
      002BF6 93               [ 1]    2     ldw x,y 
      002BF7 EE 01            [ 2]    3     ldw x,(1,x)
      002BF9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BFD 1C 00 01         [ 2] 3815 	addw x,#1 
      002C00 A9 00            [ 1] 3816 	adc a,#0  
      002C02 81               [ 4] 3817 	ret 
                                   3818 
                                   3819 ;---------------------------------
                                   3820 ; BASIC: WORDS 
                                   3821 ; affiche la listes des mots du
                                   3822 ; dictionnaire ainsi que le nombre
                                   3823 ; de mots.
                                   3824 ;---------------------------------
                           000001  3825 	WLEN=1 ; word length
                           000002  3826 	LLEN=2 ; character sent to console
                           000003  3827 	WCNT=3 ; count words printed 
                           000003  3828 	VSIZE=3 
      002C03                       3829 words:
      002C03 90 89            [ 2] 3830 	pushw y
      002C05                       3831 	_vars VSIZE
      002C05 52 03            [ 2]    1     sub sp,#VSIZE 
      002C07 0F 02            [ 1] 3832 	clr (LLEN,sp)
      002C09 0F 03            [ 1] 3833 	clr (WCNT,sp)
      002C0B 90 AE 32 CE      [ 2] 3834 	ldw y,#kword_dict+2
      002C0F 93               [ 1] 3835 0$:	ldw x,y
      002C10 F6               [ 1] 3836 	ld a,(x)
      002C11 A4 0F            [ 1] 3837 	and a,#15 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002C13 6B 01            [ 1] 3838 	ld (WLEN,sp),a 
      002C15 0C 03            [ 1] 3839 	inc (WCNT,sp)
      002C17 5C               [ 1] 3840 1$:	incw x 
      002C18 F6               [ 1] 3841 	ld a,(x)
      002C19 CD 09 10         [ 4] 3842 	call putc 
      002C1C 0C 02            [ 1] 3843 	inc (LLEN,sp)
      002C1E 0A 01            [ 1] 3844 	dec (WLEN,sp)
      002C20 26 F5            [ 1] 3845 	jrne 1$
      002C22 A6 46            [ 1] 3846 	ld a,#70
      002C24 11 02            [ 1] 3847 	cp a,(LLEN,sp)
      002C26 2B 09            [ 1] 3848 	jrmi 2$   
      002C28 A6 20            [ 1] 3849 	ld a,#SPACE 
      002C2A CD 09 10         [ 4] 3850 	call putc 
      002C2D 0C 02            [ 1] 3851 	inc (LLEN,sp) 
      002C2F 20 07            [ 2] 3852 	jra 3$
      002C31 A6 0D            [ 1] 3853 2$: ld a,#CR 
      002C33 CD 09 10         [ 4] 3854 	call putc 
      002C36 0F 02            [ 1] 3855 	clr (LLEN,sp)
      002C38 72 A2 00 02      [ 2] 3856 3$:	subw y,#2 
      002C3C 90 FE            [ 2] 3857 	ldw y,(y)
      002C3E 26 CF            [ 1] 3858 	jrne 0$ 
      002C40 A6 0D            [ 1] 3859 	ld a,#CR 
      002C42 CD 09 10         [ 4] 3860 	call putc  
      002C45 5F               [ 1] 3861 	clrw x 
      002C46 7B 03            [ 1] 3862 	ld a,(WCNT,sp)
      002C48 97               [ 1] 3863 	ld xl,a 
      002C49 CD 17 96         [ 4] 3864 	call prt_i16 
      002C4C AE 2C 57         [ 2] 3865 	ldw x,#words_count_msg
      002C4F CD 09 6D         [ 4] 3866 	call puts 
      002C52                       3867 	_drop VSIZE 
      002C52 5B 03            [ 2]    1     addw sp,#VSIZE 
      002C54 90 85            [ 2] 3868 	popw y 
      002C56 81               [ 4] 3869 	ret 
      002C57 20 77 6F 72 64 73 20  3870 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3871 
                                   3872 
                                   3873 ;-----------------------------
                                   3874 ; BASIC: TIMER expr 
                                   3875 ; initialize count down timer 
                                   3876 ;-----------------------------
      002C6D                       3877 set_timer:
      002C6D CD 19 18         [ 4] 3878 	call arg_list
      002C70 A1 01            [ 1] 3879 	cp a,#1 
      002C72 27 03            [ 1] 3880 	jreq 1$
      002C74 CC 16 47         [ 2] 3881 	jp syntax_error
      002C77                       3882 1$: 
      002C77                       3883 	_xpop  
      002C77 90 F6            [ 1]    1     ld a,(y)
      002C79 93               [ 1]    2     ldw x,y 
      002C7A EE 01            [ 2]    3     ldw x,(1,x)
      002C7C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C80 CF 00 12         [ 2] 3884 	ldw timer,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002C83 81               [ 4] 3885 	ret 
                                   3886 
                                   3887 ;------------------------------
                                   3888 ; BASIC: TIMEOUT 
                                   3889 ; return state of timer 
                                   3890 ; output:
                                   3891 ;   A:X     0 not timeout 
                                   3892 ;   A:X     -1 timeout 
                                   3893 ;------------------------------
      002C84                       3894 timeout:
      002C84 4F               [ 1] 3895 	clr a 
      002C85 CE 00 12         [ 2] 3896 	ldw x,timer 
      002C88 27 02            [ 1] 3897 	jreq 1$
      002C8A 5F               [ 1] 3898 	clrw x
      002C8B 81               [ 4] 3899 	ret  
      002C8C 43               [ 1] 3900 1$:	cpl a
      002C8D 53               [ 2] 3901 	cplw x 
      002C8E 81               [ 4] 3902 	ret 
                                   3903  	
                                   3904 
                                   3905 
                                   3906 
                                   3907 ;-----------------------------------
                                   3908 ; BASIC: IWDGEN expr1 
                                   3909 ; enable independant watchdog timer
                                   3910 ; expr1 is delay in multiple of 62.5µsec
                                   3911 ; expr1 -> {1..16383}
                                   3912 ;-----------------------------------
      002C8F                       3913 enable_iwdg:
      002C8F CD 19 18         [ 4] 3914 	call arg_list
      002C92 A1 01            [ 1] 3915 	cp a,#1 
      002C94 27 03            [ 1] 3916 	jreq 1$
      002C96 CC 16 47         [ 2] 3917 	jp syntax_error 
      002C99                       3918 1$: _xpop  
      002C99 90 F6            [ 1]    1     ld a,(y)
      002C9B 93               [ 1]    2     ldw x,y 
      002C9C EE 01            [ 2]    3     ldw x,(1,x)
      002C9E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CA2 4B 00            [ 1] 3919 	push #0
      002CA4 35 CC 50 E0      [ 1] 3920 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002CA8 9E               [ 1] 3921 	ld a,xh 
      002CA9 A4 3F            [ 1] 3922 	and a,#0x3f
      002CAB 95               [ 1] 3923 	ld xh,a  
      002CAC A3 00 FF         [ 2] 3924 2$:	cpw x,#255
      002CAF 23 06            [ 2] 3925 	jrule 3$
      002CB1 0C 01            [ 1] 3926 	inc (1,sp)
      002CB3 98               [ 1] 3927 	rcf 
      002CB4 56               [ 2] 3928 	rrcw x 
      002CB5 20 F5            [ 2] 3929 	jra 2$
      002CB7 35 55 50 E0      [ 1] 3930 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CBB 84               [ 1] 3931 	pop a  
      002CBC C7 50 E1         [ 1] 3932 	ld IWDG_PR,a 
      002CBF 9F               [ 1] 3933 	ld a,xl
      002CC0 4A               [ 1] 3934 	dec a 
      002CC1 35 55 50 E0      [ 1] 3935 	mov IWDG_KR,#IWDG_KEY_ACCESS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002CC5 C7 50 E2         [ 1] 3936 	ld IWDG_RLR,a 
      002CC8 35 AA 50 E0      [ 1] 3937 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002CCC 81               [ 4] 3938 	ret 
                                   3939 
                                   3940 
                                   3941 ;-----------------------------------
                                   3942 ; BASIC: IWDGREF  
                                   3943 ; refresh independant watchdog count down 
                                   3944 ; timer before it reset MCU. 
                                   3945 ;-----------------------------------
      002CCD                       3946 refresh_iwdg:
      002CCD 35 AA 50 E0      [ 1] 3947 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002CD1 81               [ 4] 3948 	ret 
                                   3949 
                                   3950 
                                   3951 ;-------------------------------------
                                   3952 ; BASIC: LOG2(expr)
                                   3953 ; return logarithm base 2 of expr 
                                   3954 ; this is the position of most significant
                                   3955 ; bit set. 
                                   3956 ; input: 
                                   3957 ; output:
                                   3958 ;   A     TK_INTGR 
                                   3959 ;   xstack log2 
                                   3960 ;*********************************
      002CD2                       3961 log2:
      002CD2 CD 19 13         [ 4] 3962 	call func_args 
      002CD5 A1 01            [ 1] 3963 	cp a,#1 
      002CD7 27 03            [ 1] 3964 	jreq 1$
      002CD9 CC 16 47         [ 2] 3965 	jp syntax_error 
      002CDC                       3966 1$: 
      002CDC                       3967 	_xpop    
      002CDC 90 F6            [ 1]    1     ld a,(y)
      002CDE 93               [ 1]    2     ldw x,y 
      002CDF EE 01            [ 2]    3     ldw x,(1,x)
      002CE1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CE5 4D               [ 1] 3968 	tnz a
      002CE6 26 08            [ 1] 3969 	jrne 2$ 
      002CE8 5D               [ 2] 3970 	tnzw x 
      002CE9 26 05            [ 1] 3971 	jrne 2$
      002CEB A6 0A            [ 1] 3972 	ld a,#ERR_BAD_VALUE
      002CED CC 16 49         [ 2] 3973 	jp tb_error 
      002CF0 4B 18            [ 1] 3974 2$: push #24 
      002CF2 59               [ 2] 3975 3$: rlcw x 
      002CF3 49               [ 1] 3976     rlc a 
      002CF4 25 04            [ 1] 3977 	jrc 4$
      002CF6 0A 01            [ 1] 3978 	dec (1,sp) 
      002CF8 26 F8            [ 1] 3979 	jrne 3$
      002CFA 5F               [ 1] 3980 4$: clrw x 
      002CFB 84               [ 1] 3981     pop a 
      002CFC 4A               [ 1] 3982 	dec a
      002CFD 02               [ 1] 3983 	rlwa x  
      002CFE                       3984 9$:	
      002CFE 81               [ 4] 3985 	ret 
                                   3986 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



                                   3987 ;-----------------------------------
                                   3988 ; BASIC: BIT(expr) 
                                   3989 ; expr ->{0..23}
                                   3990 ; return 2^expr 
                                   3991 ; output:
                                   3992 ;    A:X    2^expr 
                                   3993 ;-----------------------------------
      002CFF                       3994 bitmask:
      002CFF CD 19 13         [ 4] 3995     call func_args 
      002D02 A1 01            [ 1] 3996 	cp a,#1
      002D04 27 03            [ 1] 3997 	jreq 1$
      002D06 CC 16 47         [ 2] 3998 	jp syntax_error 
      002D09                       3999 1$: _xpop 
      002D09 90 F6            [ 1]    1     ld a,(y)
      002D0B 93               [ 1]    2     ldw x,y 
      002D0C EE 01            [ 2]    3     ldw x,(1,x)
      002D0E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D12 9F               [ 1] 4000 	ld a,xl 
      002D13 AE 00 01         [ 2] 4001 	ldw x,#1 
      002D16 A4 17            [ 1] 4002 	and a,#23
      002D18 27 0A            [ 1] 4003 	jreq 9$
      002D1A 88               [ 1] 4004 	push a 
      002D1B 4F               [ 1] 4005 	clr a 
      002D1C                       4006 2$: 
      002D1C 58               [ 2] 4007 	slaw x 
      002D1D 49               [ 1] 4008 	rlc a 	
      002D1E 0A 01            [ 1] 4009 	dec (1,sp)
      002D20 26 FA            [ 1] 4010 	jrne 2$ 
      002D22                       4011 4$:
      002D22                       4012     _drop 1 
      002D22 5B 01            [ 2]    1     addw sp,#1 
      002D24 81               [ 4] 4013 9$:	ret 
                                   4014 
                                   4015 ;------------------------------
                                   4016 ; BASIC: DO 
                                   4017 ; initiate a DO ... UNTIL loop 
                                   4018 ;------------------------------
                           000003  4019 	DOLP_ADR=3 
                           000005  4020 	DOLP_INW=5
                           000004  4021 	VSIZE=4 
      002D25                       4022 do_loop:
      002D25 85               [ 2] 4023 	popw x 
      002D26                       4024 	_vars VSIZE 
      002D26 52 04            [ 2]    1     sub sp,#VSIZE 
      002D28 89               [ 2] 4025 	pushw x 
      002D29 CE 00 04         [ 2] 4026 	ldw x,basicptr 
      002D2C 1F 03            [ 2] 4027 	ldw (DOLP_ADR,sp),x
      002D2E CE 00 00         [ 2] 4028 	ldw x,in.w 
      002D31 1F 05            [ 2] 4029 	ldw (DOLP_INW,sp),x
      002D33 72 5C 00 1F      [ 1] 4030 	inc loop_depth 
      002D37 81               [ 4] 4031 	ret 
                                   4032 
                                   4033 ;--------------------------------
                                   4034 ; BASIC: UNTIL expr 
                                   4035 ; loop if exprssion is false 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



                                   4036 ; else terminate loop
                                   4037 ;--------------------------------
      002D38                       4038 until: 
      002D38 72 5D 00 1F      [ 1] 4039 	tnz loop_depth 
      002D3C 26 03            [ 1] 4040 	jrne 1$ 
      002D3E CC 16 47         [ 2] 4041 	jp syntax_error 
      002D41                       4042 1$: 
      002D41 CD 1B 68         [ 4] 4043 	call condition  
      002D44                       4044 	_xpop 
      002D44 90 F6            [ 1]    1     ld a,(y)
      002D46 93               [ 1]    2     ldw x,y 
      002D47 EE 01            [ 2]    3     ldw x,(1,x)
      002D49 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D4D 4D               [ 1] 4045 	tnz a 
      002D4E 26 13            [ 1] 4046 	jrne 9$ 
      002D50 5D               [ 2] 4047 	tnzw x 
      002D51 26 10            [ 1] 4048 	jrne 9$ 
      002D53 1E 03            [ 2] 4049 	ldw x,(DOLP_ADR,sp)
      002D55 CF 00 04         [ 2] 4050 	ldw basicptr,x 
      002D58 E6 02            [ 1] 4051 	ld a,(2,x)
      002D5A C7 00 03         [ 1] 4052 	ld count,a 
      002D5D 1E 05            [ 2] 4053 	ldw x,(DOLP_INW,sp)
      002D5F CF 00 00         [ 2] 4054 	ldw in.w,x 
      002D62 81               [ 4] 4055 	ret 
      002D63                       4056 9$:	; remove loop data from stack  
      002D63 85               [ 2] 4057 	popw x
      002D64                       4058 	_drop VSIZE
      002D64 5B 04            [ 2]    1     addw sp,#VSIZE 
      002D66 72 5A 00 1F      [ 1] 4059 	dec loop_depth 
      002D6A FC               [ 2] 4060 	jp (x)
                                   4061 
                                   4062 ;--------------------------
                                   4063 ; BASIC: PORTA...PORTI  
                                   4064 ;  return constant value 
                                   4065 ;  PORT  base address 
                                   4066 ;---------------------------
      002D6B                       4067 const_porta:
      002D6B AE 50 00         [ 2] 4068 	ldw x,#PA_BASE 
      002D6E 4F               [ 1] 4069 	clr a 
      002D6F 81               [ 4] 4070 	ret 
      002D70                       4071 const_portb:
      002D70 AE 50 05         [ 2] 4072 	ldw x,#PB_BASE 
      002D73 4F               [ 1] 4073 	clr a 
      002D74 81               [ 4] 4074 	ret 
      002D75                       4075 const_portc:
      002D75 AE 50 0A         [ 2] 4076 	ldw x,#PC_BASE 
      002D78 4F               [ 1] 4077 	clr a 
      002D79 81               [ 4] 4078 	ret 
      002D7A                       4079 const_portd:
      002D7A AE 50 0F         [ 2] 4080 	ldw x,#PD_BASE 
      002D7D 4F               [ 1] 4081 	clr a 
      002D7E 81               [ 4] 4082 	ret 
      002D7F                       4083 const_porte:
      002D7F AE 50 14         [ 2] 4084 	ldw x,#PE_BASE 
      002D82 4F               [ 1] 4085 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002D83 81               [ 4] 4086 	ret 
      002D84                       4087 const_portf:
      002D84 AE 50 19         [ 2] 4088 	ldw x,#PF_BASE 
      002D87 4F               [ 1] 4089 	clr a 
      002D88 81               [ 4] 4090 	ret 
      002D89                       4091 const_portg:
      002D89 AE 50 1E         [ 2] 4092 	ldw x,#PG_BASE 
      002D8C 4F               [ 1] 4093 	clr a 
      002D8D 81               [ 4] 4094 	ret 
      002D8E                       4095 const_porth:
      002D8E AE 50 23         [ 2] 4096 	ldw x,#PH_BASE 
      002D91 4F               [ 1] 4097 	clr a 
      002D92 81               [ 4] 4098 	ret 
      002D93                       4099 const_porti:
      002D93 AE 50 28         [ 2] 4100 	ldw x,#PI_BASE 
      002D96 4F               [ 1] 4101 	clr a 
      002D97 81               [ 4] 4102 	ret 
                                   4103 
                                   4104 ;-------------------------------
                                   4105 ; following return constant 
                                   4106 ; related to GPIO register offset 
                                   4107 ;---------------------------------
      002D98                       4108 const_odr:
      002D98 4F               [ 1] 4109 	clr a 
      002D99 AE 00 00         [ 2] 4110 	ldw x,#GPIO_ODR
      002D9C 81               [ 4] 4111 	ret 
      002D9D                       4112 const_idr:
      002D9D 4F               [ 1] 4113 	clr a 
      002D9E AE 00 01         [ 2] 4114 	ldw x,#GPIO_IDR
      002DA1 81               [ 4] 4115 	ret 
      002DA2                       4116 const_ddr:
      002DA2 4F               [ 1] 4117 	clr a
      002DA3 AE 00 02         [ 2] 4118 	ldw x,#GPIO_DDR
      002DA6 81               [ 4] 4119 	ret 
      002DA7                       4120 const_cr1:
      002DA7 4F               [ 1] 4121 	clr a 
      002DA8 AE 00 03         [ 2] 4122 	ldw x,#GPIO_CR1
      002DAB 81               [ 4] 4123 	ret 
      002DAC                       4124 const_cr2:
      002DAC 4F               [ 1] 4125 	clr a
      002DAD AE 00 04         [ 2] 4126 	ldw x,#GPIO_CR2
      002DB0 81               [ 4] 4127 	ret 
                                   4128 ;-------------------------
                                   4129 ; BASIC: POUT 
                                   4130 ;  constant for port mode
                                   4131 ;  used by PMODE 
                                   4132 ;  to set pin as output
                                   4133 ;------------------------
      002DB1                       4134 const_output:
      002DB1 4F               [ 1] 4135 	clr a 
      002DB2 AE 00 01         [ 2] 4136 	ldw x,#OUTP
      002DB5 81               [ 4] 4137 	ret 
                                   4138 
                                   4139 ;-------------------------
                                   4140 ; BASIC: PINP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



                                   4141 ;  constant for port mode
                                   4142 ;  used by PMODE 
                                   4143 ;  to set pin as input
                                   4144 ;------------------------
      002DB6                       4145 const_input:
      002DB6 4F               [ 1] 4146 	clr a  
      002DB7 AE 00 00         [ 2] 4147 	ldw x,#INP 
      002DBA 81               [ 4] 4148 	ret 
                                   4149 	
                                   4150 ;-----------------------
                                   4151 ; memory area constants
                                   4152 ;-----------------------
      002DBB                       4153 const_eeprom_base:
      002DBB 4F               [ 1] 4154 	clr a  
      002DBC AE 40 00         [ 2] 4155 	ldw x,#EEPROM_BASE 
      002DBF 81               [ 4] 4156 	ret 
                                   4157 
                                   4158 ;---------------------------
                                   4159 ; BASIC: DATA 
                                   4160 ; when the interpreter find 
                                   4161 ; a DATA line it skip it.
                                   4162 ;---------------------------
      002DC0                       4163 data:
      002DC0 55 00 03 00 01   [ 1] 4164 	mov in,count 
      002DC5 81               [ 4] 4165 	ret 
                                   4166 
                                   4167 ;------------------------------
                                   4168 ; check if it is a DATA line 
                                   4169 ; input: 
                                   4170 ;    X    line address 
                                   4171 ; output:
                                   4172 ;    Z    set if DATA line 
                                   4173 ;----------------------------
      002DC6                       4174 is_data_line:
      002DC6 89               [ 2] 4175 	pushw x 
      002DC7 E6 03            [ 1] 4176 	ld a,(3,x)
      002DC9 A1 80            [ 1] 4177 	cp a,#TK_CMD 
      002DCB 26 05            [ 1] 4178 	jrne 9$
      002DCD EE 04            [ 2] 4179 	ldw x,(4,x)
      002DCF A3 2D C0         [ 2] 4180 	cpw x,#data  
      002DD2 85               [ 2] 4181 9$: popw x 
      002DD3 81               [ 4] 4182 	ret 
                                   4183 
                                   4184 ;---------------------------------
                                   4185 ; BASIC: RESTORE [line#]
                                   4186 ; set data_ptr to first data line
                                   4187 ; if no DATA found pointer set to
                                   4188 ; zero.
                                   4189 ; if a line# is given as argument 
                                   4190 ; a data line with that number 
                                   4191 ; is searched and the data pointer 
                                   4192 ; is set to it. If there is no 
                                   4193 ; data line with that number 
                                   4194 ; the program is interrupted. 
                                   4195 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002DD4                       4196 restore:
      002DD4 5F               [ 1] 4197 	clrw x 
      002DD5 CF 00 06         [ 2] 4198 	ldw data_ptr,x 
      002DD8 CF 00 08         [ 2] 4199 	ldw data_ofs,x 
      002DDB CE 00 1B         [ 2] 4200 	ldw x,txtbgn 
      002DDE CD 17 4E         [ 4] 4201 	call next_token 
      002DE1 A1 84            [ 1] 4202 	cp a,#TK_INTGR
      002DE3 26 10            [ 1] 4203 	jrne 0$
      002DE5 CD 17 80         [ 4] 4204 	call get_int24
      002DE8 90 89            [ 2] 4205 	pushw y 
      002DEA 4F               [ 1] 4206 	clr a 
      002DEB CD 0C 4A         [ 4] 4207 	call search_lineno  
      002DEE 90 85            [ 2] 4208 	popw y 
      002DF0 5D               [ 2] 4209 	tnzw x 
      002DF1 26 17            [ 1] 4210 	jrne set_data_pointer 
      002DF3 20 44            [ 2] 4211 	jra data_error 
      002DF5                       4212 0$:
      002DF5                       4213 	_unget_token  
      002DF5 55 00 02 00 01   [ 1]    1      mov in,in.saved  
                                   4214 ; search first DATA line 	
      002DFA C3 00 1D         [ 2] 4215 1$:	cpw x,txtend
      002DFD 24 3A            [ 1] 4216 	jruge data_error 
      002DFF                       4217 2$:	
      002DFF CD 2D C6         [ 4] 4218 	call is_data_line 
      002E02 26 00            [ 1] 4219 	jrne 4$
      002E04 CD 2E 17         [ 4] 4220 4$:	call try_next_line 
      002E07 26 FB            [ 1] 4221 	jrne 4$ 
      002E09 81               [ 4] 4222 	ret 
                                   4223 
                                   4224 ;---------------------
                                   4225 ; set data pointer 
                                   4226 ; variables at new line 
                                   4227 ; input:
                                   4228 ;    X    line address 
                                   4229 ;----------------------
      002E0A                       4230 set_data_pointer:
      002E0A CF 00 06         [ 2] 4231 	ldw data_ptr,x
      002E0D E6 02            [ 1] 4232 	ld a,(2,x)
      002E0F C7 00 09         [ 1] 4233 	ld data_len,a 
      002E12 35 06 00 08      [ 1] 4234 	mov data_ofs,#FIRST_DATA_ITEM
      002E16 81               [ 4] 4235 	ret 
                                   4236 
                                   4237 
                                   4238 ;--------------------
                                   4239 ; at end of data line 
                                   4240 ; check if next line 
                                   4241 ; is a data line 
                                   4242 ; input:
                                   4243 ;    X   actual line address 
                                   4244 ;  
                                   4245 ;-------------------
      002E17                       4246 try_next_line: 
      002E17 E6 02            [ 1] 4247 	ld a,(2,x)
      002E19 C7 00 0E         [ 1] 4248 	ld acc8,a 
      002E1C 72 5F 00 0D      [ 1] 4249 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002E20 72 BB 00 0D      [ 2] 4250 	addw x,acc16 
      002E24 C3 00 1D         [ 2] 4251 	cpw x,txtend 
      002E27 25 02            [ 1] 4252 	jrult 1$
      002E29 20 0E            [ 2] 4253 	jra data_error 
      002E2B                       4254 1$:	
      002E2B CD 2D C6         [ 4] 4255 	call is_data_line 
      002E2E 27 04            [ 1] 4256 	jreq 2$
      002E30 A6 01            [ 1] 4257 	ld a,#1  
      002E32 20 04            [ 2] 4258 	jra 9$
      002E34 CD 2E 0A         [ 4] 4259 2$:	call set_data_pointer
      002E37 4F               [ 1] 4260 	clr a  
      002E38 81               [ 4] 4261 9$:	ret 
      002E39                       4262 data_error:	
      002E39 A6 0C            [ 1] 4263     ld a,#ERR_NO_DATA 
      002E3B CC 16 49         [ 2] 4264 	jp tb_error 
                                   4265 
                                   4266 
                                   4267 ;---------------------------------
                                   4268 ; BASIC: READ 
                                   4269 ; return next data item | 0 
                                   4270 ;---------------------------------
                           000001  4271 	CTX_BPTR=1 
                           000003  4272 	CTX_IN=3 
                           000004  4273 	CTX_COUNT=4 
                           000005  4274 	INT24=5
                           000007  4275 	VSIZE=7 
      002E3E                       4276 read:
      002E3E                       4277 	_vars  VSIZE 
      002E3E 52 07            [ 2]    1     sub sp,#VSIZE 
      002E40 CD 20 3F         [ 4] 4278 	call save_context
      002E43                       4279 read01:	
      002E43 C6 00 08         [ 1] 4280 	ld a,data_ofs
      002E46 C1 00 09         [ 1] 4281 	cp a,data_len 
      002E49 27 37            [ 1] 4282 	jreq 2$ ; end of line  
      002E4B                       4283 0$:
      002E4B CE 00 06         [ 2] 4284 	ldw x,data_ptr 
      002E4E CF 00 04         [ 2] 4285 	ldw basicptr,x 
      002E51 55 00 08 00 01   [ 1] 4286 	mov in,data_ofs 
      002E56 55 00 09 00 03   [ 1] 4287 	mov count,data_len  
      002E5B CD 1A 4F         [ 4] 4288 	call expression 
      002E5E A1 84            [ 1] 4289 	cp a,#TK_INTGR 
      002E60 27 03            [ 1] 4290 	jreq 1$ 
      002E62 CC 16 47         [ 2] 4291 	jp syntax_error 
      002E65                       4292 1$:
      002E65 CD 17 4E         [ 4] 4293 	call next_token ; skip comma
      002E68 CE 00 04         [ 2] 4294 	ldw x,basicptr 
      002E6B CF 00 06         [ 2] 4295 	ldw data_ptr,x 
      002E6E 55 00 01 00 08   [ 1] 4296 	mov data_ofs,in 
      002E73 CD 20 4F         [ 4] 4297 	call rest_context
      002E76                       4298 	_xpop 
      002E76 90 F6            [ 1]    1     ld a,(y)
      002E78 93               [ 1]    2     ldw x,y 
      002E79 EE 01            [ 2]    3     ldw x,(1,x)
      002E7B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E7F                       4299 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002E7F 5B 07            [ 2]    1     addw sp,#VSIZE 
      002E81 81               [ 4] 4300 	ret 
      002E82                       4301 2$: ; end of line reached 
                                   4302 	; try next line 
      002E82 CE 00 06         [ 2] 4303 	ldw x,data_ptr  
      002E85 CD 2E 17         [ 4] 4304 	call try_next_line
      002E88 27 C1            [ 1] 4305 	jreq 0$ 
      002E8A 20 AD            [ 2] 4306 	jra data_error 
                                   4307 
                                   4308 ;---------------------------------
                                   4309 ; BASIC: SPIEN clkdiv, 0|1  
                                   4310 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4311 ; if clkdiv==-1 disable SPI
                                   4312 ; 0|1 -> disable|enable  
                                   4313 ;--------------------------------- 
                           000005  4314 SPI_CS_BIT=5
      002E8C                       4315 spi_enable:
      002E8C CD 19 18         [ 4] 4316 	call arg_list 
      002E8F A1 02            [ 1] 4317 	cp a,#2
      002E91 27 03            [ 1] 4318 	jreq 1$
      002E93 CC 16 47         [ 2] 4319 	jp syntax_error 
      002E96                       4320 1$: 
      002E96 72 12 50 C7      [ 1] 4321 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002E9A 85               [ 2] 4322 	popw x  
      002E9B 5D               [ 2] 4323 	tnzw x 
      002E9C 27 21            [ 1] 4324 	jreq spi_disable 
      002E9E 85               [ 2] 4325 	popw x 
      002E9F A6 08            [ 1] 4326 	ld a,#(1<<SPI_CR1_BR)
      002EA1 42               [ 4] 4327 	mul x,a 
      002EA2 9F               [ 1] 4328 	ld a,xl 
      002EA3 C7 52 00         [ 1] 4329 	ld SPI_CR1,a 
                                   4330 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002EA6 72 1A 50 14      [ 1] 4331 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002EAA 72 1A 50 16      [ 1] 4332 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4333 ; configure SPI as master mode 0.	
      002EAE 72 14 52 00      [ 1] 4334 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4335 ; ~CS line controlled by sofware 	
      002EB2 72 12 52 01      [ 1] 4336 	bset SPI_CR2,#SPI_CR2_SSM 
      002EB6 72 10 52 01      [ 1] 4337     bset SPI_CR2,#SPI_CR2_SSI 
                                   4338 ; enable SPI
      002EBA 72 1C 52 00      [ 1] 4339 	bset SPI_CR1,#SPI_CR1_SPE 	
      002EBE 81               [ 4] 4340 	ret 
      002EBF                       4341 spi_disable:
      002EBF                       4342 	_drop #2; throw first argument.
      002EBF 5B 02            [ 2]    1     addw sp,##2 
                                   4343 ; wait spi idle 
      002EC1 A6 82            [ 1] 4344 1$:	ld a,#0x82 
      002EC3 C4 52 03         [ 1] 4345 	and a,SPI_SR
      002EC6 A1 02            [ 1] 4346 	cp a,#2 
      002EC8 26 F7            [ 1] 4347 	jrne 1$
      002ECA 72 1D 52 00      [ 1] 4348 	bres SPI_CR1,#SPI_CR1_SPE
      002ECE 72 13 50 C7      [ 1] 4349 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002ED2 72 1B 50 16      [ 1] 4350 	bres PE_DDR,#SPI_CS_BIT 
      002ED6 81               [ 4] 4351 	ret 
                                   4352 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      002ED7                       4353 spi_clear_error:
      002ED7 A6 78            [ 1] 4354 	ld a,#0x78 
      002ED9 C5 52 03         [ 1] 4355 	bcp a,SPI_SR 
      002EDC 27 04            [ 1] 4356 	jreq 1$
      002EDE 72 5F 52 03      [ 1] 4357 	clr SPI_SR 
      002EE2 81               [ 4] 4358 1$: ret 
                                   4359 
      002EE3                       4360 spi_send_byte:
      002EE3 88               [ 1] 4361 	push a 
      002EE4 CD 2E D7         [ 4] 4362 	call spi_clear_error
      002EE7 84               [ 1] 4363 	pop a 
      002EE8 72 03 52 03 FB   [ 2] 4364 	btjf SPI_SR,#SPI_SR_TXE,.
      002EED C7 52 04         [ 1] 4365 	ld SPI_DR,a
      002EF0 72 01 52 03 FB   [ 2] 4366 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002EF5 C6 52 04         [ 1] 4367 	ld a,SPI_DR 
      002EF8 81               [ 4] 4368 	ret 
                                   4369 
      002EF9                       4370 spi_rcv_byte:
      002EF9 A6 FF            [ 1] 4371 	ld a,#255
      002EFB 72 01 52 03 E3   [ 2] 4372 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002F00 C6 52 04         [ 1] 4373 	ld a,SPI_DR 
      002F03 81               [ 4] 4374 	ret
                                   4375 
                                   4376 ;------------------------------
                                   4377 ; BASIC: SPIWR byte [,byte]
                                   4378 ; write 1 or more byte
                                   4379 ;------------------------------
      002F04                       4380 spi_write:
      002F04 CD 1A 4F         [ 4] 4381 	call expression
      002F07 A1 84            [ 1] 4382 	cp a,#TK_INTGR 
      002F09 27 03            [ 1] 4383 	jreq 1$
      002F0B CC 16 47         [ 2] 4384 	jp syntax_error 
      002F0E                       4385 1$:	
      002F0E 9F               [ 1] 4386 	ld a,xl 
      002F0F CD 2E E3         [ 4] 4387 	call spi_send_byte 
      002F12 CD 17 4E         [ 4] 4388 	call next_token 
      002F15 A1 08            [ 1] 4389 	cp a,#TK_COMMA 
      002F17 26 02            [ 1] 4390 	jrne 2$ 
      002F19 20 E9            [ 2] 4391 	jra spi_write 
      002F1B 4D               [ 1] 4392 2$:	tnz a 
      002F1C 27 05            [ 1] 4393 	jreq 3$
      002F1E                       4394 	_unget_token  
      002F1E 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F23 81               [ 4] 4395 3$:	ret 
                                   4396 
                                   4397 
                                   4398 ;-------------------------------
                                   4399 ; BASIC: SPIRD 	
                                   4400 ; read one byte from SPI 
                                   4401 ;-------------------------------
      002F24                       4402 spi_read:
      002F24 CD 2E F9         [ 4] 4403 	call spi_rcv_byte 
      002F27 5F               [ 1] 4404 	clrw x 
      002F28 97               [ 1] 4405 	ld xl,a 
      002F29 4F               [ 1] 4406 	clr a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      002F2A 81               [ 4] 4407 	ret 
                                   4408 
                                   4409 ;------------------------------
                                   4410 ; BASIC: SPISEL 0|1 
                                   4411 ; set state of ~CS line
                                   4412 ; 0|1 deselect|select  
                                   4413 ;------------------------------
      002F2B                       4414 spi_select:
      002F2B CD 17 4E         [ 4] 4415 	call next_token 
      002F2E A1 84            [ 1] 4416 	cp a,#TK_INTGR 
      002F30 27 03            [ 1] 4417 	jreq 1$
      002F32 CC 16 47         [ 2] 4418 	jp syntax_error 
      002F35 5D               [ 2] 4419 1$: tnzw x  
      002F36 27 05            [ 1] 4420 	jreq cs_high 
      002F38 72 1B 50 14      [ 1] 4421 	bres PE_ODR,#SPI_CS_BIT
      002F3C 81               [ 4] 4422 	ret 
      002F3D                       4423 cs_high: 
      002F3D 72 1A 50 14      [ 1] 4424 	bset PE_ODR,#SPI_CS_BIT
      002F41 81               [ 4] 4425 	ret 
                                   4426 
                                   4427 ;-------------------------------
                                   4428 ; BASIC: PAD 
                                   4429 ; Return pad buffer address.
                                   4430 ;------------------------------
      002F42                       4431 pad_ref:
      002F42 AE 16 B8         [ 2] 4432 	ldw x,#pad 
      002F45 4F               [ 1] 4433 	clr a
      002F46 81               [ 4] 4434 	ret 
                                   4435 
                                   4436 
                                   4437 ;------------------------------
                                   4438 ;      dictionary 
                                   4439 ; format:
                                   4440 ;   link:   2 bytes 
                                   4441 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   4442 ;   cmd_name: 16 byte max 
                                   4443 ;   code_addr: 2 bytes 
                                   4444 ;------------------------------
                                   4445 	.macro _dict_entry len,name,code_addr 
                                   4446 	.word LINK 
                                   4447 	LINK=.
                                   4448 name:
                                   4449 	.byte len   	
                                   4450 	.ascii "name"
                                   4451 	.word code_addr  
                                   4452 	.endm 
                                   4453 
                           000000  4454 	LINK=0
                                   4455 ; respect alphabetic order for BASIC names from Z-A
                                   4456 ; this sort order is for a cleaner WORDS cmd output. 	
      002F47                       4457 kword_end:
      002F47                       4458 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      002F47 00 00                    1 	.word LINK 
                           002F49     2 	LINK=.
      002F49                          3 XOR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      002F49 A3                       4 	.byte 3+F_XOR   	
      002F4A 58 4F 52                 5 	.ascii "XOR"
      002F4D 00 8A                    6 	.word TK_XOR  
      002F4F                       4459 	_dict_entry,5,WRITE,write  
      002F4F 2F 49                    1 	.word LINK 
                           002F51     2 	LINK=.
      002F51                          3 WRITE:
      002F51 05                       4 	.byte 5   	
      002F52 57 52 49 54 45           5 	.ascii "WRITE"
      002F57 28 AF                    6 	.word write  
      002F59                       4460 	_dict_entry,5,WORDS,words 
      002F59 2F 51                    1 	.word LINK 
                           002F5B     2 	LINK=.
      002F5B                          3 WORDS:
      002F5B 05                       4 	.byte 5   	
      002F5C 57 4F 52 44 53           5 	.ascii "WORDS"
      002F61 2C 03                    6 	.word words  
      002F63                       4461 	_dict_entry 4,WAIT,wait 
      002F63 2F 5B                    1 	.word LINK 
                           002F65     2 	LINK=.
      002F65                          3 WAIT:
      002F65 04                       4 	.byte 4   	
      002F66 57 41 49 54              5 	.ascii "WAIT"
      002F6A 21 04                    6 	.word wait  
      002F6C                       4462 	_dict_entry,3+F_IFUNC,USR,usr
      002F6C 2F 65                    1 	.word LINK 
                           002F6E     2 	LINK=.
      002F6E                          3 USR:
      002F6E 13                       4 	.byte 3+F_IFUNC   	
      002F6F 55 53 52                 5 	.ascii "USR"
      002F72 29 A6                    6 	.word usr  
      002F74                       4463 	_dict_entry,5,UNTIL,until 
      002F74 2F 6E                    1 	.word LINK 
                           002F76     2 	LINK=.
      002F76                          3 UNTIL:
      002F76 05                       4 	.byte 5   	
      002F77 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002F7C 2D 38                    6 	.word until  
      002F7E                       4464 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      002F7E 2F 76                    1 	.word LINK 
                           002F80     2 	LINK=.
      002F80                          3 UFLASH:
      002F80 16                       4 	.byte 6+F_IFUNC   	
      002F81 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002F87 29 89                    6 	.word uflash  
      002F89                       4465 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      002F89 2F 80                    1 	.word LINK 
                           002F8B     2 	LINK=.
      002F8B                          3 UBOUND:
      002F8B 16                       4 	.byte 6+F_IFUNC   	
      002F8C 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002F92 1C 2F                    6 	.word ubound  
      002F94                       4466 	_dict_entry,4,TONE,tone  
      002F94 2F 8B                    1 	.word LINK 
                           002F96     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      002F96                          3 TONE:
      002F96 04                       4 	.byte 4   	
      002F97 54 4F 4E 45              5 	.ascii "TONE"
      002F9B 25 65                    6 	.word tone  
      002F9D                       4467 	_dict_entry,2,TO,to
      002F9D 2F 96                    1 	.word LINK 
                           002F9F     2 	LINK=.
      002F9F                          3 TO:
      002F9F 02                       4 	.byte 2   	
      002FA0 54 4F                    5 	.ascii "TO"
      002FA2 22 6E                    6 	.word to  
      002FA4                       4468 	_dict_entry,5,TIMER,set_timer
      002FA4 2F 9F                    1 	.word LINK 
                           002FA6     2 	LINK=.
      002FA6                          3 TIMER:
      002FA6 05                       4 	.byte 5   	
      002FA7 54 49 4D 45 52           5 	.ascii "TIMER"
      002FAC 2C 6D                    6 	.word set_timer  
      002FAE                       4469 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      002FAE 2F A6                    1 	.word LINK 
                           002FB0     2 	LINK=.
      002FB0                          3 TIMEOUT:
      002FB0 17                       4 	.byte 7+F_IFUNC   	
      002FB1 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002FB8 2C 84                    6 	.word timeout  
      002FBA                       4470 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      002FBA 2F B0                    1 	.word LINK 
                           002FBC     2 	LINK=.
      002FBC                          3 TICKS:
      002FBC 15                       4 	.byte 5+F_IFUNC   	
      002FBD 54 49 43 4B 53           5 	.ascii "TICKS"
      002FC2 2A 52                    6 	.word get_ticks  
      002FC4                       4471 	_dict_entry,4,STOP,stop 
      002FC4 2F BC                    1 	.word LINK 
                           002FC6     2 	LINK=.
      002FC6                          3 STOP:
      002FC6 04                       4 	.byte 4   	
      002FC7 53 54 4F 50              5 	.ascii "STOP"
      002FCB 26 CE                    6 	.word stop  
      002FCD                       4472 	_dict_entry,4,STEP,step 
      002FCD 2F C6                    1 	.word LINK 
                           002FCF     2 	LINK=.
      002FCF                          3 STEP:
      002FCF 04                       4 	.byte 4   	
      002FD0 53 54 45 50              5 	.ascii "STEP"
      002FD4 22 B4                    6 	.word step  
      002FD6                       4473 	_dict_entry,5,SPIWR,spi_write
      002FD6 2F CF                    1 	.word LINK 
                           002FD8     2 	LINK=.
      002FD8                          3 SPIWR:
      002FD8 05                       4 	.byte 5   	
      002FD9 53 50 49 57 52           5 	.ascii "SPIWR"
      002FDE 2F 04                    6 	.word spi_write  
      002FE0                       4474 	_dict_entry,6,SPISEL,spi_select
      002FE0 2F D8                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



                           002FE2     2 	LINK=.
      002FE2                          3 SPISEL:
      002FE2 06                       4 	.byte 6   	
      002FE3 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      002FE9 2F 2B                    6 	.word spi_select  
      002FEB                       4475 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      002FEB 2F E2                    1 	.word LINK 
                           002FED     2 	LINK=.
      002FED                          3 SPIRD:
      002FED 15                       4 	.byte 5+F_IFUNC   	
      002FEE 53 50 49 52 44           5 	.ascii "SPIRD"
      002FF3 2F 24                    6 	.word spi_read  
      002FF5                       4476 	_dict_entry,5,SPIEN,spi_enable 
      002FF5 2F ED                    1 	.word LINK 
                           002FF7     2 	LINK=.
      002FF7                          3 SPIEN:
      002FF7 05                       4 	.byte 5   	
      002FF8 53 50 49 45 4E           5 	.ascii "SPIEN"
      002FFD 2E 8C                    6 	.word spi_enable  
      002FFF                       4477 	_dict_entry,5,SLEEP,sleep 
      002FFF 2F F7                    1 	.word LINK 
                           003001     2 	LINK=.
      003001                          3 SLEEP:
      003001 05                       4 	.byte 5   	
      003002 53 4C 45 45 50           5 	.ascii "SLEEP"
      003007 29 D5                    6 	.word sleep  
      003009                       4478     _dict_entry,4,SIZE,cmd_size 
      003009 30 01                    1 	.word LINK 
                           00300B     2 	LINK=.
      00300B                          3 SIZE:
      00300B 04                       4 	.byte 4   	
      00300C 53 49 5A 45              5 	.ascii "SIZE"
      003010 1C 02                    6 	.word cmd_size  
      003012                       4479 	_dict_entry,4,SAVE,save_app 
      003012 30 0B                    1 	.word LINK 
                           003014     2 	LINK=.
      003014                          3 SAVE:
      003014 04                       4 	.byte 4   	
      003015 53 41 56 45              5 	.ascii "SAVE"
      003019 27 C0                    6 	.word save_app  
      00301B                       4480 	_dict_entry 3,RUN,run
      00301B 30 14                    1 	.word LINK 
                           00301D     2 	LINK=.
      00301D                          3 RUN:
      00301D 03                       4 	.byte 3   	
      00301E 52 55 4E                 5 	.ascii "RUN"
      003021 24 CA                    6 	.word run  
      003023                       4481 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      003023 30 1D                    1 	.word LINK 
                           003025     2 	LINK=.
      003025                          3 RSHIFT:
      003025 16                       4 	.byte 6+F_IFUNC   	
      003026 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00302C 2A 9D                    6 	.word rshift  
      00302E                       4482 	_dict_entry,3+F_IFUNC,RND,random 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      00302E 30 25                    1 	.word LINK 
                           003030     2 	LINK=.
      003030                          3 RND:
      003030 13                       4 	.byte 3+F_IFUNC   	
      003031 52 4E 44                 5 	.ascii "RND"
      003034 2B 68                    6 	.word random  
      003036                       4483 	_dict_entry,6,RETURN,return 
      003036 30 30                    1 	.word LINK 
                           003038     2 	LINK=.
      003038                          3 RETURN:
      003038 06                       4 	.byte 6   	
      003039 52 45 54 55 52 4E        5 	.ascii "RETURN"
      00303F 24 AC                    6 	.word return  
      003041                       4484 	_dict_entry,7,RESTORE,restore 
      003041 30 38                    1 	.word LINK 
                           003043     2 	LINK=.
      003043                          3 RESTORE:
      003043 07                       4 	.byte 7   	
      003044 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      00304B 2D D4                    6 	.word restore  
      00304D                       4485 	_dict_entry 3,REM,remark 
      00304D 30 43                    1 	.word LINK 
                           00304F     2 	LINK=.
      00304F                          3 REM:
      00304F 03                       4 	.byte 3   	
      003050 52 45 4D                 5 	.ascii "REM"
      003053 20 FE                    6 	.word remark  
      003055                       4486 	_dict_entry,6,REBOOT,cold_start
      003055 30 4F                    1 	.word LINK 
                           003057     2 	LINK=.
      003057                          3 REBOOT:
      003057 06                       4 	.byte 6   	
      003058 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      00305E 00 C3                    6 	.word cold_start  
      003060                       4487 	_dict_entry,4+F_IFUNC,READ,read  
      003060 30 57                    1 	.word LINK 
                           003062     2 	LINK=.
      003062                          3 READ:
      003062 14                       4 	.byte 4+F_IFUNC   	
      003063 52 45 41 44              5 	.ascii "READ"
      003067 2E 3E                    6 	.word read  
      003069                       4488 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      003069 30 62                    1 	.word LINK 
                           00306B     2 	LINK=.
      00306B                          3 QKEY:
      00306B 14                       4 	.byte 4+F_IFUNC   	
      00306C 51 4B 45 59              5 	.ascii "QKEY"
      003070 29 4C                    6 	.word qkey  
      003072                       4489 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      003072 30 6B                    1 	.word LINK 
                           003074     2 	LINK=.
      003074                          3 PORTI:
      003074 15                       4 	.byte 5+F_IFUNC   	
      003075 50 4F 52 54 49           5 	.ascii "PORTI"
      00307A 2D 93                    6 	.word const_porti  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      00307C                       4490 	_dict_entry,5+F_IFUNC,PORTH,const_porth 
      00307C 30 74                    1 	.word LINK 
                           00307E     2 	LINK=.
      00307E                          3 PORTH:
      00307E 15                       4 	.byte 5+F_IFUNC   	
      00307F 50 4F 52 54 48           5 	.ascii "PORTH"
      003084 2D 8E                    6 	.word const_porth  
      003086                       4491 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      003086 30 7E                    1 	.word LINK 
                           003088     2 	LINK=.
      003088                          3 PORTG:
      003088 15                       4 	.byte 5+F_IFUNC   	
      003089 50 4F 52 54 47           5 	.ascii "PORTG"
      00308E 2D 89                    6 	.word const_portg  
      003090                       4492 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      003090 30 88                    1 	.word LINK 
                           003092     2 	LINK=.
      003092                          3 PORTF:
      003092 15                       4 	.byte 5+F_IFUNC   	
      003093 50 4F 52 54 46           5 	.ascii "PORTF"
      003098 2D 84                    6 	.word const_portf  
      00309A                       4493 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      00309A 30 92                    1 	.word LINK 
                           00309C     2 	LINK=.
      00309C                          3 PORTE:
      00309C 15                       4 	.byte 5+F_IFUNC   	
      00309D 50 4F 52 54 45           5 	.ascii "PORTE"
      0030A2 2D 7F                    6 	.word const_porte  
      0030A4                       4494 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      0030A4 30 9C                    1 	.word LINK 
                           0030A6     2 	LINK=.
      0030A6                          3 PORTD:
      0030A6 15                       4 	.byte 5+F_IFUNC   	
      0030A7 50 4F 52 54 44           5 	.ascii "PORTD"
      0030AC 2D 7A                    6 	.word const_portd  
      0030AE                       4495 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      0030AE 30 A6                    1 	.word LINK 
                           0030B0     2 	LINK=.
      0030B0                          3 PORTC:
      0030B0 15                       4 	.byte 5+F_IFUNC   	
      0030B1 50 4F 52 54 43           5 	.ascii "PORTC"
      0030B6 2D 75                    6 	.word const_portc  
      0030B8                       4496 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      0030B8 30 B0                    1 	.word LINK 
                           0030BA     2 	LINK=.
      0030BA                          3 PORTB:
      0030BA 15                       4 	.byte 5+F_IFUNC   	
      0030BB 50 4F 52 54 42           5 	.ascii "PORTB"
      0030C0 2D 70                    6 	.word const_portb  
      0030C2                       4497 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      0030C2 30 BA                    1 	.word LINK 
                           0030C4     2 	LINK=.
      0030C4                          3 PORTA:
      0030C4 15                       4 	.byte 5+F_IFUNC   	
      0030C5 50 4F 52 54 41           5 	.ascii "PORTA"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      0030CA 2D 6B                    6 	.word const_porta  
      0030CC                       4498 	_dict_entry 5,PRINT,print 
      0030CC 30 C4                    1 	.word LINK 
                           0030CE     2 	LINK=.
      0030CE                          3 PRINT:
      0030CE 05                       4 	.byte 5   	
      0030CF 50 52 49 4E 54           5 	.ascii "PRINT"
      0030D4 1F B6                    6 	.word print  
      0030D6                       4499 	_dict_entry,4+F_IFUNC,POUT,const_output
      0030D6 30 CE                    1 	.word LINK 
                           0030D8     2 	LINK=.
      0030D8                          3 POUT:
      0030D8 14                       4 	.byte 4+F_IFUNC   	
      0030D9 50 4F 55 54              5 	.ascii "POUT"
      0030DD 2D B1                    6 	.word const_output  
      0030DF                       4500 	_dict_entry,4,POKE,poke 
      0030DF 30 D8                    1 	.word LINK 
                           0030E1     2 	LINK=.
      0030E1                          3 POKE:
      0030E1 04                       4 	.byte 4   	
      0030E2 50 4F 4B 45              5 	.ascii "POKE"
      0030E6 21 DF                    6 	.word poke  
      0030E8                       4501 	_dict_entry,5,PMODE,pin_mode 
      0030E8 30 E1                    1 	.word LINK 
                           0030EA     2 	LINK=.
      0030EA                          3 PMODE:
      0030EA 05                       4 	.byte 5   	
      0030EB 50 4D 4F 44 45           5 	.ascii "PMODE"
      0030F0 2A D9                    6 	.word pin_mode  
      0030F2                       4502 	_dict_entry,4+F_IFUNC,PINP,const_input
      0030F2 30 EA                    1 	.word LINK 
                           0030F4     2 	LINK=.
      0030F4                          3 PINP:
      0030F4 14                       4 	.byte 4+F_IFUNC   	
      0030F5 50 49 4E 50              5 	.ascii "PINP"
      0030F9 2D B6                    6 	.word const_input  
      0030FB                       4503 	_dict_entry,4+F_IFUNC,PEEK,peek 
      0030FB 30 F4                    1 	.word LINK 
                           0030FD     2 	LINK=.
      0030FD                          3 PEEK:
      0030FD 14                       4 	.byte 4+F_IFUNC   	
      0030FE 50 45 45 4B              5 	.ascii "PEEK"
      003102 22 00                    6 	.word peek  
      003104                       4504 	_dict_entry,5,PAUSE,pause 
      003104 30 FD                    1 	.word LINK 
                           003106     2 	LINK=.
      003106                          3 PAUSE:
      003106 05                       4 	.byte 5   	
      003107 50 41 55 53 45           5 	.ascii "PAUSE"
      00310C 29 E0                    6 	.word pause  
      00310E                       4505 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      00310E 31 06                    1 	.word LINK 
                           003110     2 	LINK=.
      003110                          3 PAD:
      003110 13                       4 	.byte 3+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      003111 50 41 44                 5 	.ascii "PAD"
      003114 2F 42                    6 	.word pad_ref  
      003116                       4506 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      003116 31 10                    1 	.word LINK 
                           003118     2 	LINK=.
      003118                          3 OR:
      003118 92                       4 	.byte 2+F_OR   	
      003119 4F 52                    5 	.ascii "OR"
      00311B 00 89                    6 	.word TK_OR  
      00311D                       4507 	_dict_entry,2,ON,cmd_on 
      00311D 31 18                    1 	.word LINK 
                           00311F     2 	LINK=.
      00311F                          3 ON:
      00311F 02                       4 	.byte 2   	
      003120 4F 4E                    5 	.ascii "ON"
      003122 23 DA                    6 	.word cmd_on  
      003124                       4508 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      003124 31 1F                    1 	.word LINK 
                           003126     2 	LINK=.
      003126                          3 ODR:
      003126 13                       4 	.byte 3+F_IFUNC   	
      003127 4F 44 52                 5 	.ascii "ODR"
      00312A 2D 98                    6 	.word const_odr  
      00312C                       4509 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      00312C 31 26                    1 	.word LINK 
                           00312E     2 	LINK=.
      00312E                          3 NOT:
      00312E 73                       4 	.byte 3+F_NOT   	
      00312F 4E 4F 54                 5 	.ascii "NOT"
      003132 00 87                    6 	.word TK_NOT  
      003134                       4510 	_dict_entry,4,NEXT,next 
      003134 31 2E                    1 	.word LINK 
                           003136     2 	LINK=.
      003136                          3 NEXT:
      003136 04                       4 	.byte 4   	
      003137 4E 45 58 54              5 	.ascii "NEXT"
      00313B 22 F6                    6 	.word next  
      00313D                       4511 	_dict_entry,3,NEW,new
      00313D 31 36                    1 	.word LINK 
                           00313F     2 	LINK=.
      00313F                          3 NEW:
      00313F 03                       4 	.byte 3   	
      003140 4E 45 57                 5 	.ascii "NEW"
      003143 27 1A                    6 	.word new  
      003145                       4512 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      003145 31 3F                    1 	.word LINK 
                           003147     2 	LINK=.
      003147                          3 LSHIFT:
      003147 16                       4 	.byte 6+F_IFUNC   	
      003148 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      00314E 2A 70                    6 	.word lshift  
      003150                       4513 	_dict_entry,4+F_IFUNC,LOG2,log2 
      003150 31 47                    1 	.word LINK 
                           003152     2 	LINK=.
      003152                          3 LOG2:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      003152 14                       4 	.byte 4+F_IFUNC   	
      003153 4C 4F 47 32              5 	.ascii "LOG2"
      003157 2C D2                    6 	.word log2  
      003159                       4514 	_dict_entry 4,LIST,list
      003159 31 52                    1 	.word LINK 
                           00315B     2 	LINK=.
      00315B                          3 LIST:
      00315B 04                       4 	.byte 4   	
      00315C 4C 49 53 54              5 	.ascii "LIST"
      003160 1E A9                    6 	.word list  
      003162                       4515 	_dict_entry 3,LET,let 
      003162 31 5B                    1 	.word LINK 
                           003164     2 	LINK=.
      003164                          3 LET:
      003164 03                       4 	.byte 3   	
      003165 4C 45 54                 5 	.ascii "LET"
      003168 1C 3A                    6 	.word let  
      00316A                       4516 	_dict_entry,3+F_CFUNC,KEY,key 
      00316A 31 64                    1 	.word LINK 
                           00316C     2 	LINK=.
      00316C                          3 KEY:
      00316C 23                       4 	.byte 3+F_CFUNC   	
      00316D 4B 45 59                 5 	.ascii "KEY"
      003170 29 48                    6 	.word key  
      003172                       4517 	_dict_entry,7,IWDGREF,refresh_iwdg
      003172 31 6C                    1 	.word LINK 
                           003174     2 	LINK=.
      003174                          3 IWDGREF:
      003174 07                       4 	.byte 7   	
      003175 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      00317C 2C CD                    6 	.word refresh_iwdg  
      00317E                       4518 	_dict_entry,6,IWDGEN,enable_iwdg
      00317E 31 74                    1 	.word LINK 
                           003180     2 	LINK=.
      003180                          3 IWDGEN:
      003180 06                       4 	.byte 6   	
      003181 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      003187 2C 8F                    6 	.word enable_iwdg  
      003189                       4519 	_dict_entry,5,INPUT,input_var  
      003189 31 80                    1 	.word LINK 
                           00318B     2 	LINK=.
      00318B                          3 INPUT:
      00318B 05                       4 	.byte 5   	
      00318C 49 4E 50 55 54           5 	.ascii "INPUT"
      003191 20 5F                    6 	.word input_var  
      003193                       4520 	_dict_entry,2,IF,if 
      003193 31 8B                    1 	.word LINK 
                           003195     2 	LINK=.
      003195                          3 IF:
      003195 02                       4 	.byte 2   	
      003196 49 46                    5 	.ascii "IF"
      003198 22 21                    6 	.word if  
      00319A                       4521 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      00319A 31 95                    1 	.word LINK 
                           00319C     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      00319C                          3 IDR:
      00319C 13                       4 	.byte 3+F_IFUNC   	
      00319D 49 44 52                 5 	.ascii "IDR"
      0031A0 2D 9D                    6 	.word const_idr  
      0031A2                       4522 	_dict_entry,3,HEX,hex_base
      0031A2 31 9C                    1 	.word LINK 
                           0031A4     2 	LINK=.
      0031A4                          3 HEX:
      0031A4 03                       4 	.byte 3   	
      0031A5 48 45 58                 5 	.ascii "HEX"
      0031A8 1B DC                    6 	.word hex_base  
      0031AA                       4523 	_dict_entry,4,GOTO,goto 
      0031AA 31 A4                    1 	.word LINK 
                           0031AC     2 	LINK=.
      0031AC                          3 GOTO:
      0031AC 04                       4 	.byte 4   	
      0031AD 47 4F 54 4F              5 	.ascii "GOTO"
      0031B1 24 6C                    6 	.word goto  
      0031B3                       4524 	_dict_entry,5,GOSUB,gosub 
      0031B3 31 AC                    1 	.word LINK 
                           0031B5     2 	LINK=.
      0031B5                          3 GOSUB:
      0031B5 05                       4 	.byte 5   	
      0031B6 47 4F 53 55 42           5 	.ascii "GOSUB"
      0031BB 24 86                    6 	.word gosub  
      0031BD                       4525 	_dict_entry,3,GET,cmd_get 
      0031BD 31 B5                    1 	.word LINK 
                           0031BF     2 	LINK=.
      0031BF                          3 GET:
      0031BF 03                       4 	.byte 3   	
      0031C0 47 45 54                 5 	.ascii "GET"
      0031C3 25 2D                    6 	.word cmd_get  
      0031C5                       4526 	_dict_entry,4+F_IFUNC,FREE,free
      0031C5 31 BF                    1 	.word LINK 
                           0031C7     2 	LINK=.
      0031C7                          3 FREE:
      0031C7 14                       4 	.byte 4+F_IFUNC   	
      0031C8 46 52 45 45              5 	.ascii "FREE"
      0031CC 1B E6                    6 	.word free  
      0031CE                       4527 	_dict_entry,3,FOR,for 
      0031CE 31 C7                    1 	.word LINK 
                           0031D0     2 	LINK=.
      0031D0                          3 FOR:
      0031D0 03                       4 	.byte 3   	
      0031D1 46 4F 52                 5 	.ascii "FOR"
      0031D4 22 3E                    6 	.word for  
      0031D6                       4528 	_dict_entry,4,FCPU,fcpu 
      0031D6 31 D0                    1 	.word LINK 
                           0031D8     2 	LINK=.
      0031D8                          3 FCPU:
      0031D8 04                       4 	.byte 4   	
      0031D9 46 43 50 55              5 	.ascii "FCPU"
      0031DD 2A CA                    6 	.word fcpu  
      0031DF                       4529 	_dict_entry,5,ERASE,erase 
      0031DF 31 D8                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



                           0031E1     2 	LINK=.
      0031E1                          3 ERASE:
      0031E1 05                       4 	.byte 5   	
      0031E2 45 52 41 53 45           5 	.ascii "ERASE"
      0031E7 27 24                    6 	.word erase  
      0031E9                       4530 	_dict_entry,3,END,cmd_end  
      0031E9 31 E1                    1 	.word LINK 
                           0031EB     2 	LINK=.
      0031EB                          3 END:
      0031EB 03                       4 	.byte 3   	
      0031EC 45 4E 44                 5 	.ascii "END"
      0031EF 25 26                    6 	.word cmd_end  
      0031F1                       4531 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      0031F1 31 EB                    1 	.word LINK 
                           0031F3     2 	LINK=.
      0031F3                          3 EEPROM:
      0031F3 16                       4 	.byte 6+F_IFUNC   	
      0031F4 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0031FA 2D BB                    6 	.word const_eeprom_base  
      0031FC                       4532 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      0031FC 31 F3                    1 	.word LINK 
                           0031FE     2 	LINK=.
      0031FE                          3 EEFREE:
      0031FE 16                       4 	.byte 6+F_IFUNC   	
      0031FF 45 45 46 52 45 45        5 	.ascii "EEFREE"
      003205 1C F8                    6 	.word func_eefree  
      003207                       4533 	_dict_entry,4,EDIT,edit 
      003207 31 FE                    1 	.word LINK 
                           003209     2 	LINK=.
      003209                          3 EDIT:
      003209 04                       4 	.byte 4   	
      00320A 45 44 49 54              5 	.ascii "EDIT"
      00320E 1F 4E                    6 	.word edit  
      003210                       4534 	_dict_entry,6+F_CMD,DWRITE,digital_write
      003210 32 09                    1 	.word LINK 
                           003212     2 	LINK=.
      003212                          3 DWRITE:
      003212 06                       4 	.byte 6+F_CMD   	
      003213 44 57 52 49 54 45        5 	.ascii "DWRITE"
      003219 26 83                    6 	.word digital_write  
      00321B                       4535 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      00321B 32 12                    1 	.word LINK 
                           00321D     2 	LINK=.
      00321D                          3 DREAD:
      00321D 15                       4 	.byte 5+F_IFUNC   	
      00321E 44 52 45 41 44           5 	.ascii "DREAD"
      003223 26 4C                    6 	.word digital_read  
      003225                       4536 	_dict_entry,2,DO,do_loop
      003225 32 1D                    1 	.word LINK 
                           003227     2 	LINK=.
      003227                          3 DO:
      003227 02                       4 	.byte 2   	
      003228 44 4F                    5 	.ascii "DO"
      00322A 2D 25                    6 	.word do_loop  
      00322C                       4537 	_dict_entry,3,DEC,dec_base
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      00322C 32 27                    1 	.word LINK 
                           00322E     2 	LINK=.
      00322E                          3 DEC:
      00322E 03                       4 	.byte 3   	
      00322F 44 45 43                 5 	.ascii "DEC"
      003232 1B E1                    6 	.word dec_base  
      003234                       4538 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      003234 32 2E                    1 	.word LINK 
                           003236     2 	LINK=.
      003236                          3 DDR:
      003236 13                       4 	.byte 3+F_IFUNC   	
      003237 44 44 52                 5 	.ascii "DDR"
      00323A 2D A2                    6 	.word const_ddr  
      00323C                       4539 	_dict_entry,4,DATA,data  
      00323C 32 36                    1 	.word LINK 
                           00323E     2 	LINK=.
      00323E                          3 DATA:
      00323E 04                       4 	.byte 4   	
      00323F 44 41 54 41              5 	.ascii "DATA"
      003243 2D C0                    6 	.word data  
      003245                       4540 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      003245 32 3E                    1 	.word LINK 
                           003247     2 	LINK=.
      003247                          3 CR2:
      003247 13                       4 	.byte 3+F_IFUNC   	
      003248 43 52 32                 5 	.ascii "CR2"
      00324B 2D AC                    6 	.word const_cr2  
      00324D                       4541 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      00324D 32 47                    1 	.word LINK 
                           00324F     2 	LINK=.
      00324F                          3 CR1:
      00324F 13                       4 	.byte 3+F_IFUNC   	
      003250 43 52 31                 5 	.ascii "CR1"
      003253 2D A7                    6 	.word const_cr1  
      003255                       4542 	_dict_entry,5,CONST,cmd_const 
      003255 32 4F                    1 	.word LINK 
                           003257     2 	LINK=.
      003257                          3 CONST:
      003257 05                       4 	.byte 5   	
      003258 43 4F 4E 53 54           5 	.ascii "CONST"
      00325D 1D 65                    6 	.word cmd_const  
      00325F                       4543 	_dict_entry,4+F_CFUNC,CHAR,func_char
      00325F 32 57                    1 	.word LINK 
                           003261     2 	LINK=.
      003261                          3 CHAR:
      003261 24                       4 	.byte 4+F_CFUNC   	
      003262 43 48 41 52              5 	.ascii "CHAR"
      003266 28 F2                    6 	.word func_char  
      003268                       4544 	_dict_entry,3,BYE,bye 
      003268 32 61                    1 	.word LINK 
                           00326A     2 	LINK=.
      00326A                          3 BYE:
      00326A 03                       4 	.byte 3   	
      00326B 42 59 45                 5 	.ascii "BYE"
      00326E 29 CC                    6 	.word bye  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      003270                       4545 	_dict_entry,5,BTOGL,bit_toggle
      003270 32 6A                    1 	.word LINK 
                           003272     2 	LINK=.
      003272                          3 BTOGL:
      003272 05                       4 	.byte 5   	
      003273 42 54 4F 47 4C           5 	.ascii "BTOGL"
      003278 21 86                    6 	.word bit_toggle  
      00327A                       4546 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      00327A 32 72                    1 	.word LINK 
                           00327C     2 	LINK=.
      00327C                          3 BTEST:
      00327C 15                       4 	.byte 5+F_IFUNC   	
      00327D 42 54 45 53 54           5 	.ascii "BTEST"
      003282 21 A8                    6 	.word bit_test  
      003284                       4547 	_dict_entry,4,BSET,bit_set 
      003284 32 7C                    1 	.word LINK 
                           003286     2 	LINK=.
      003286                          3 BSET:
      003286 04                       4 	.byte 4   	
      003287 42 53 45 54              5 	.ascii "BSET"
      00328B 21 41                    6 	.word bit_set  
      00328D                       4548 	_dict_entry,4,BRES,bit_reset
      00328D 32 86                    1 	.word LINK 
                           00328F     2 	LINK=.
      00328F                          3 BRES:
      00328F 04                       4 	.byte 4   	
      003290 42 52 45 53              5 	.ascii "BRES"
      003294 21 63                    6 	.word bit_reset  
      003296                       4549 	_dict_entry,3+F_IFUNC,BIT,bitmask
      003296 32 8F                    1 	.word LINK 
                           003298     2 	LINK=.
      003298                          3 BIT:
      003298 13                       4 	.byte 3+F_IFUNC   	
      003299 42 49 54                 5 	.ascii "BIT"
      00329C 2C FF                    6 	.word bitmask  
      00329E                       4550 	_dict_entry,3,AWU,awu 
      00329E 32 98                    1 	.word LINK 
                           0032A0     2 	LINK=.
      0032A0                          3 AWU:
      0032A0 03                       4 	.byte 3   	
      0032A1 41 57 55                 5 	.ascii "AWU"
      0032A4 2A 00                    6 	.word awu  
      0032A6                       4551 	_dict_entry,3+F_IFUNC,ASC,ascii
      0032A6 32 A0                    1 	.word LINK 
                           0032A8     2 	LINK=.
      0032A8                          3 ASC:
      0032A8 13                       4 	.byte 3+F_IFUNC   	
      0032A9 41 53 43                 5 	.ascii "ASC"
      0032AC 29 09                    6 	.word ascii  
      0032AE                       4552 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      0032AE 32 A8                    1 	.word LINK 
                           0032B0     2 	LINK=.
      0032B0                          3 AND:
      0032B0 83                       4 	.byte 3+F_AND   	
      0032B1 41 4E 44                 5 	.ascii "AND"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      0032B4 00 88                    6 	.word TK_AND  
      0032B6                       4553 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      0032B6 32 B0                    1 	.word LINK 
                           0032B8     2 	LINK=.
      0032B8                          3 ADCREAD:
      0032B8 17                       4 	.byte 7+F_IFUNC   	
      0032B9 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0032C0 26 10                    6 	.word analog_read  
      0032C2                       4554 	_dict_entry,5,ADCON,power_adc 
      0032C2 32 B8                    1 	.word LINK 
                           0032C4     2 	LINK=.
      0032C4                          3 ADCON:
      0032C4 05                       4 	.byte 5   	
      0032C5 41 44 43 4F 4E           5 	.ascii "ADCON"
      0032CA 25 C0                    6 	.word power_adc  
      0032CC                       4555 kword_dict::
      0032CC                       4556 	_dict_entry,3+F_IFUNC,ABS,abs
      0032CC 32 C4                    1 	.word LINK 
                           0032CE     2 	LINK=.
      0032CE                          3 ABS:
      0032CE 13                       4 	.byte 3+F_IFUNC   	
      0032CF 41 42 53                 5 	.ascii "ABS"
      0032D2 2A 59                    6 	.word abs  
                                   4557 
                           000000  4558 INDIRECT=0 
                           000000  4559 .if INDIRECT 
                                   4560 ;comands and fonctions address table 	
                                   4561 code_addr::
                                   4562 	.word abs,power_adc,analog_read,ascii,awu,bitmask ; 0..7
                                   4563 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,func_char,const_cr2  ; 8..15
                                   4564 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
                                   4565 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto ; 24..31 
                                   4566 	.word hex_base,const_idr,if,input_var,enable_iwdg,refresh_iwdg,key ; 32..39 
                                   4567 	.word let,list,log2,lshift,next,new ; 40..47
                                   4568 	.word const_odr,pad_ref,pause,pin_mode,peek,const_input ; 48..55
                                   4569 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
                                   4570 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
                                   4571 	.word restore,return, random,rshift,run,free ; 72..79
                                   4572 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
                                   4573 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
                                   4574 	.word wait,words,write,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
                                   4575 	.word func_eefree,0 
                                   4576 .endif 
                                   4577 
                                   4578 
                                   4579 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      0032D4                         30 test:
      0032D4                         31     _vars VSIZE 
      0032D4 52 08            [ 2]    1     sub sp,#VSIZE 
      0032D6 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      0032D9 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      0032DB CE 00 0F         [ 2]   34     ldw x,ticks 
      0032DE 1F 01            [ 2]   35     ldw (T,sp),x
      0032E0                         36 1$: ; test add24 
      0032E0 A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      0032E2 AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      0032E5 C7 00 0C         [ 1]   39     ld acc24,a 
      0032E8 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      0032EB A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      0032ED AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      0032F0 CD 01 6A         [ 4]   43     call add24 
      0032F3 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      0032F5 1D 00 01         [ 2]   45     subw x,#1
      0032F8 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      0032FA 26 E4            [ 1]   47     jrne 1$
      0032FC CD 17 AD         [ 4]   48     call prt_acc24
      0032FF A6 20            [ 1]   49     ld a,#SPACE 
      003301 CD 09 10         [ 4]   50     call putc 
      003304 CE 00 0F         [ 2]   51     ldw x,ticks 
      003307 72 F0 01         [ 2]   52     subw x,(T,sp)
      00330A CD 17 96         [ 4]   53     call prt_i16  
      00330D A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      00330F CD 09 10         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      003312 CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      003315 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      003317 CE 00 0F         [ 2]   60     ldw x,ticks 
      00331A 1F 01            [ 2]   61     ldw (T,sp),x 
      00331C                         62 2$: 
      00331C A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      00331E AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      003321 C7 00 0C         [ 1]   65     ld acc24,a 
      003324 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      003327 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      003329 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      00332C CD 02 65         [ 4]   69     call mul24 
      00332F 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      003331 1D 00 01         [ 2]   71     subw x,#1
      003334 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003336 26 E4            [ 1]   73     jrne 2$ 
      003338 CD 17 AD         [ 4]   74    call prt_acc24 
      00333B A6 20            [ 1]   75    ld a,#SPACE 
      00333D CD 09 10         [ 4]   76    call putc 
      003340 CE 00 0F         [ 2]   77     ldw x,ticks 
      003343 72 F0 01         [ 2]   78     subw x,(T,sp)
      003346 CD 17 96         [ 4]   79     call prt_i16 
      003349 A6 0D            [ 1]   80     ld a,#CR 
      00334B CD 09 10         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      00334E CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      003351 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      003353 CE 00 0F         [ 2]   85     ldw x,ticks 
      003356 1F 01            [ 2]   86     ldw (T,sp),x 
      003358                         87 3$: 
      003358 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      00335A AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      00335D C7 00 0C         [ 1]   90     ld acc24,a 
      003360 CF 00 0D         [ 2]   91     ldw acc24+1,x  
      003363 A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      003365 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      003368 CD 02 65         [ 4]   94     call mul24 
      00336B 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      00336D 1D 00 01         [ 2]   96     subw x,#1
      003370 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      003372 26 E4            [ 1]   98     jrne 3$ 
      003374 CD 17 AD         [ 4]   99     call prt_acc24    
      003377 A6 20            [ 1]  100     ld a,#SPACE 
      003379 CD 09 10         [ 4]  101     call putc 
      00337C CE 00 0F         [ 2]  102     ldw x,ticks 
      00337F 72 F0 01         [ 2]  103     subw x,(T,sp)
      003382 CD 17 96         [ 4]  104     call prt_i16 
      003385 A6 0D            [ 1]  105     ld a,#CR 
      003387 CD 09 10         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      00338A CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      00338D 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      00338F CE 00 0F         [ 2]  110     ldw x,ticks 
      003392 1F 01            [ 2]  111     ldw (T,sp),x 
      003394                        112 4$:
      003394 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      003396 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      003399 C7 00 0C         [ 1]  115     ld acc24,a 
      00339C CF 00 0D         [ 2]  116     ldw acc24+1,x  
      00339F A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      0033A1 AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      0033A4 CD 02 65         [ 4]  119     call mul24 
      0033A7 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      0033A9 1D 00 01         [ 2]  121     subw x,#1
      0033AC 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      0033AE 26 E4            [ 1]  123     jrne 4$ 
      0033B0 CD 17 AD         [ 4]  124     call prt_acc24 
      0033B3 A6 20            [ 1]  125     ld a,#SPACE 
      0033B5 CD 09 10         [ 4]  126     call putc 
      0033B8 CE 00 0F         [ 2]  127     ldw x,ticks 
      0033BB 72 F0 01         [ 2]  128     subw x,(T,sp)
      0033BE CD 17 96         [ 4]  129     call prt_i16 
      0033C1 A6 0D            [ 1]  130     ld a,#CR 
      0033C3 CD 09 10         [ 4]  131     call putc 
                                    132 ; test abs24 
      0033C6 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      0033C9 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      0033CB CE 00 0F         [ 2]  135     ldw x,ticks 
      0033CE 1F 01            [ 2]  136     ldw (T,sp),x 
      0033D0                        137 5$: 
      0033D0 A6 FF            [ 1]  138     ld a,#0xff
      0033D2 AE FF FF         [ 2]  139     ldw x,#0xffff
      0033D5 CD 01 DF         [ 4]  140     call abs24 
      0033D8 C7 00 0C         [ 1]  141     ld acc24,a 
      0033DB CF 00 0D         [ 2]  142     ldw acc24+1,x
      0033DE 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      0033E0 1D 00 01         [ 2]  144     subw x,#1
      0033E3 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      0033E5 26 E9            [ 1]  146     jrne 5$ 
      0033E7 CD 17 AD         [ 4]  147     call prt_acc24 
      0033EA A6 20            [ 1]  148     ld a,#SPACE 
      0033EC CD 09 10         [ 4]  149     call putc 
      0033EF CE 00 0F         [ 2]  150     ldw x,ticks 
      0033F2 72 F0 01         [ 2]  151     subw x,(T,sp)
      0033F5 CD 17 96         [ 4]  152     call prt_i16 
      0033F8                        153 6$:
      0033F8 A6 0D            [ 1]  154     ld a,#CR 
      0033FA CD 09 10         [ 4]  155     call putc 
      0033FD CD 34 43         [ 4]  156     call read_integer 
      003400 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      003405 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      00340A 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      00340F CD 34 43         [ 4]  160     call read_integer 
      003412 C6 00 0C         [ 1]  161     ld a,acc24 
      003415 CE 00 0D         [ 2]  162     ldw x,acc16 
      003418 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      00341D 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      003422 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      003427 CD 02 F3         [ 4]  166     call div24 
      00342A 88               [ 1]  167     push a 
      00342B 89               [ 2]  168     pushw x 
      00342C CD 17 AD         [ 4]  169     call prt_acc24 
      00342F A6 20            [ 1]  170     ld a,#SPACE 
      003431 CD 09 10         [ 4]  171     call putc 
      003434 85               [ 2]  172     popw x
      003435 CF 00 0D         [ 2]  173     ldw acc16,x  
      003438 32 00 0C         [ 1]  174     pop acc24 
      00343B CD 17 AD         [ 4]  175     call prt_acc24
      00343E 20 B8            [ 2]  176     jra 6$
      003440                        177     _drop VSIZE 
      003440 5B 08            [ 2]    1     addw sp,#VSIZE 
      003442 81               [ 4]  178     ret 
                                    179 
                                    180 
      003443                        181 read_integer:
      003443 A6 3F            [ 1]  182     ld a,#'? 
      003445 CD 09 10         [ 4]  183     call putc  
      003448 72 5F 00 03      [ 1]  184 	clr count  
      00344C CD 0A 72         [ 4]  185 	call readln 
      00344F AE 16 68         [ 2]  186 	ldw x,#tib 
      003452 3B 00 03         [ 1]  187 	push count
      003455 4B 00            [ 1]  188 	push #0 
      003457 72 FB 01         [ 2]  189 	addw x,(1,sp)
      00345A 5C               [ 1]  190 	incw x 
      00345B                        191 	_drop 2 
      00345B 5B 02            [ 2]    1     addw sp,#2 
      00345D 72 5F 00 01      [ 1]  192 	clr in 
      003461 CD 0E E7         [ 4]  193 	call get_token
      003464 A1 84            [ 1]  194 	cp a,#TK_INTGR
      003466 27 0F            [ 1]  195 	jreq 3$ 
      003468 A1 11            [ 1]  196 	cp a,#TK_MINUS
      00346A CD 0E E7         [ 4]  197 	call get_token 
      00346D A1 84            [ 1]  198 	cp a,#TK_INTGR 
      00346F 27 03            [ 1]  199 	jreq 2$
      003471 CC 16 47         [ 2]  200 	jp syntax_error
      003474                        201 2$:
      003474 CD 02 09         [ 4]  202 	call neg_acc24  	
      003477                        203 3$: 
      003477 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003480                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003480                         30 app_space::
      003480 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003482 00 00                   32 app_size: .word 0 
      003484                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        0032CE R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      0032C4 R
    ADCON_ID=  000002     |   4 ADCREAD    0032B8 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 AND        0032B0 R   |     AND_IDX =  0000FA     |     ARG_OFS =  000002 
    ARROW_LE=  000080     |     ARROW_RI=  000081     |   4 ASC        0032A8 R
    ASC_IDX =  000006     |     ATMP    =  000001     |     ATTRIB  =  000002 
  4 AUTO_RUN   000157 R   |   4 AWU        0032A0 R   |   4 AWUHandl   000004 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  000008     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   4 BIT        003298 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000A 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000D     |   4 BRES       00328F R   |     BRES_IDX=  00000C 
    BS      =  000008     |   4 BSET       003286 R   |     BSET_IDX=  00000E 
    BSIZE   =  000006     |   4 BTEST      00327C R   |     BTEST_ID=  000010 
  4 BTOGL      003272 R   |     BTOGL_ID=  000012     |     BTW     =  000001 
    BUFPTR  =  000003     |   4 BYE        00326A R   |     BYE_IDX =  000014 
    C       =  000001     |     CAN     =  000018     |   4 CANT_DO    002857 R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000003 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  4 CHAR       003261 R   |     CHAR_IDX=  000016     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNAME   =  000001     |     CNT     =  000006     |     CNTR    =  000003 
    CNT_LO  =  000004     |     CODE_ADD=  000001     |     COMMA   =  00002C 
  4 CONST      003257 R   |   4 CONST_CO   001CE2 R   |     CONST_ID=  0000B8 
    CONST_RE=  000005     |     COUNT   =  000003     |     CPOS    =  000003 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  4 CR1        00324F R   |     CR1_IDX =  00001A     |   4 CR2        003247 R
    CR2_IDX =  000018     |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000009 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  4 DATA       00323E R   |     DATA_IDX=  00001C     |     DBG_A   =  000008 
    DBG_CC  =  000009     |     DBG_X   =  000006     |     DBG_Y   =  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   4 DDR        003236 R   |     DDR_IDX =  00001E 
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  4 DEC        00322E R   |     DEC_IDX =  000020     |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |     DIVISOR =  000001 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   4 DO         003227 R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     DO_IDX  =  000022     |   4 DREAD      00321D R
    DREAD_ID=  000024     |   4 DWRITE     003212 R   |     DWRITE_I=  000026 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]

Symbol Table

  4 EDIT       003209 R   |     EDIT_IDX=  000028     |   4 EEFREE     0031FE R
    EEFREE_I=  0000BA     |   4 EEPROM     0031F3 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_I=  00002A     |     EEPROM_S=  000800 
    EEPTR   =  000003     |     EM      =  000019     |   4 END        0031EB R
    END_IDX =  00002C     |     ENQ     =  000005     |     EOF     =  0000FF 
    EOT     =  000004     |   4 ERASE      0031E1 R   |     ERASE_ID=  00002E 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_OVER=  000010 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
  4 FCPU       0031D8 R   |     FCPU_IDX=  000030     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
  4 FLASH_ME   001E89 R   |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   4 FOR        0031D0 R   |     FOR_IDX =  000034 
  4 FREE       0031C7 R   |     FREE_IDX=  00008A     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_AND   =  000080     |     F_CFUNC =  000020 
    F_CMD   =  000000     |     F_CONST =  000030     |     F_IFUNC =  000010 
    F_NOT   =  000070     |     F_OR    =  000090     |     F_XOR   =  0000A0 
  4 GET        0031BF R   |     GET_IDX =  0000B6     |   4 GOSUB      0031B5 R
    GOSUB_ID=  000036     |   4 GOTO       0031AC R   |     GOTO_IDX=  000038 
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     GS      =  00001D     |   4 HEX        0031A4 R
    HEX_IDX =  00003A     |     HOME    =  000082     |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  4 IDR        00319C R   |     IDR_IDX =  00003C     |   4 IF         003195 R
    IF_IDX  =  00003E     |     IN      =  000005     |     INCR    =  000001 
    INDIRECT=  000000     |     INP     =  000000     |   4 INPUT      00318B R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000040     |     INPUT_PU=  000001     |     INT24   =  000005 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     INW     =  00000B     |     IPOS    =  000001 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   4 IWDGEN     003180 R
    IWDGEN_I=  000042     |   4 IWDGREF    003174 R   |     IWDGREF_=  000044 
    IWDG_KEY=  000055     |     IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
    KCHAR   =  000002     |   4 KEY        00316C R   |     KEY_END =  000083 
    KEY_IDX =  000046     |     KW_TYPE_=  0000F0     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |   4 LET        003164 R
    LET_IDX =  000048     |     LF      =  00000A     |     LIMIT   =  000001 
    LINENO  =  000005     |   4 LINK    =  0032CE R   |   4 LIST       00315B R
    LIST_IDX=  00004A     |     LL      =  000001     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   4 LOG2       003152 R
    LOG_IDX =  00004C     |     LOOP_CNT=  002710     |   4 LSHIFT     003147 R
    LSHIFT_I=  00004E     |     MAJOR   =  000002     |     MASK    =  000002 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |     MULOP   =  000001 
    N1      =  000005     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000001     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        00313F R   |     NEW_IDX =  000052     |   4 NEXT       003136 R
    NEXT_IDX=  000050     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

    NLEN    =  000001     |     NLEN_MAS=  00000F     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   4 NOT        00312E R   |     NOT_IDX =  0000F8 
    NOT_OP  =  000001     |   4 NOT_SAVE   001F7B R   |   4 NO_APP     002899 R
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  4 NonHandl   000000 R   |   4 ODR        003126 R   |     ODR_IDX =  000054 
  4 ON         00311F R   |     ONOFF   =  000003     |     ON_IDX  =  0000B4 
    OP      =  000002     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   4 OR         003118 R
    OR_IDX  =  0000FC     |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVRWR   =  000004     |     PA      =  000000     |   4 PAD        003110 R
    PAD_IDX =  000056     |     PAD_SIZE=  000080     |   4 PAUSE      003106 R
    PAUSE_ID=  000058     |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   4 PEEK       0030FD R
    PEEK_IDX=  00005C     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  4 PINP       0030F4 R   |     PINP_IDX=  00005E     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  4 PMODE      0030EA R   |     PMODE_ID=  00005A     |   4 POKE       0030E1 R
    POKE_IDX=  000060     |   4 PORTA      0030C4 R   |   4 PORTB      0030BA R
  4 PORTC      0030B0 R   |   4 PORTD      0030A6 R   |   4 PORTE      00309C R
  4 PORTF      003092 R   |   4 PORTG      003088 R   |   4 PORTH      00307E R
  4 PORTI      003074 R   |   4 POUT       0030D8 R   |     POUT_IDX=  000062 
    PREV    =  000001     |   4 PRINT      0030CE R   |     PROD    =  000001 
    PROD_SIG=  000004     |   4 PROG_ADD   001E5F R   |   4 PROG_SIZ   001E71 R
    PRTA_IDX=  000066     |     PRTB_IDX=  000068     |     PRTC_IDX=  00006A 
    PRTD_IDX=  00006C     |     PRTE_IDX=  00006E     |     PRTF_IDX=  000070 
    PRTG_IDX=  000072     |     PRTH_IDX=  000074     |     PRTI_IDX=  000076 
    PRT_IDX =  000064     |     PSIZE   =  000001     |     PSTR    =  000003 
  4 QKEY       00306B R   |     QKEY_IDX=  000078     |     QSIGN   =  000005 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |   4 RAM_MEM    001E9A R
    RAM_SIZE=  001800     |     RBT_IDX =  00007C     |   4 READ       003062 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

    READ_IDX=  00007A     |   4 REBOOT     003057 R   |     RECLEN  =  000005 
  4 REG_A      00052E R   |   4 REG_CC     000532 R   |   4 REG_EPC    000521 R
  4 REG_SP     000537 R   |   4 REG_X      00052A R   |   4 REG_Y      000526 R
    RELOP   =  000001     |   4 REM        00304F R   |     REM_IDX =  00007E 
  4 RESTORE    003043 R   |     REST_IDX=  000080     |     RETL1   =  000001 
  4 RETURN     003038 R   |     RET_ADDR=  000003     |     RET_BPTR=  000003 
    RET_IDX =  000082     |     RET_INW =  000005     |   4 RND        003030 R
    RND_IDX =  000084     |     ROP     =  004800     |     RS      =  00001E 
  4 RSHIFT     003025 R   |     RSHIFT_I=  000086     |     RSIGN   =  000006 
    RST_SR  =  0050B3     |   4 RUN        00301D R   |     RUN_IDX =  000088 
    RXCHAR  =  000001     |     RX_QUEUE=  000008     |     R_A     =  000007 
    R_CC    =  000008     |     R_X     =  000005     |     R_Y     =  000003 
  4 SAVE       003014 R   |     SAVE_IDX=  000032     |     SEPARATE=  000000 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
    SI      =  00000F     |     SIGN    =  000001     |   4 SIGNATUR   002855 R
  4 SIZE       00300B R   |     SIZE_IDX=  0000B2     |     SKIP    =  000005 
  4 SLEEP      003001 R   |     SLEEP_ID=  00008C     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   4 SPIEN      002FF7 R
    SPIEN_ID=  000090     |   4 SPIRD      002FED R   |     SPIRD_ID=  00008E 
  4 SPISEL     002FE2 R   |     SPISEL_I=  000092     |   4 SPIWR      002FD8 R
    SPIWR_ID=  000094     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  00008C 
  4 STATES     0004E4 R   |   4 STEP       002FCF R   |     STEP_IDX=  000096 
  4 STOP       002FC6 R   |     STOP_IDX=  000098     |     STR     =  000003 
  4 STR_BYTE   001E82 R   |     STX     =  000002     |     SUB     =  00001A 
    SUP     =  000084     |     SWIM_CSR=  007F80     |     SYN     =  000016 
    T       =  000001     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TARGET  =  000001     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  4 TICKS      002FBC R   |     TICKS_ID=  00009A     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  4 TIMEOUT    002FB0 R   |   4 TIMER      002FA6 R   |     TIMER_ID=  00009C 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_AND  =  000088 
    TK_ARRAY=  000005     |     TK_CFUNC=  000082     |     TK_CHAR =  000004 
    TK_CMD  =  000080     |     TK_COLON=  00000A     |     TK_COMMA=  000008 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_FLOAT=  000086     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LABEL=  000003     |     TK_LE   =  000036 
    TK_LPARE=  000006     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_NOT  =  000087     |     TK_OR   =  000089 
    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000007 
    TK_SHARP=  000009     |     TK_VAR  =  000085     |     TK_XOR  =  00008A 
    TMROUT_I=  00009E     |   4 TO         002F9F R   |   4 TONE       002F96 R
    TONE_IDX=  0000A2     |     TOWRITE =  000005     |     TO_IDX  =  0000A0 
  4 Timer4Up   000021 R   |   4 TrapHand   000012 R   |     U8      =  000001 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART2   =  000001     |     UART3   =  000002 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  4 UBOUND     002F8B R   |     UBOUND_I=  0000A4     |   4 UBTN_Han   000068 R
  4 UFLASH     002F80 R   |     UFLASH_I=  0000A6     |   4 UNTIL      002F76 R
    UNTIL_ID=  0000A8     |     UPDATE  =  000006     |     US      =  00001F 
  4 USER_ABO   000070 R   |   4 USR        002F6E R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     USR_IDX =  0000AA 
  4 Uart1RxH   00089E R   |   4 UserButt   000044 R   |     VAL1    =  02FFFF 
    VAL2    =  00002A     |     VAL3    =  000003     |     VAL4    =  0005FF 
    VAL5    =  FFFFFFFD     |     VSIZE   =  000008     |     VT      =  00000B 
  4 WAIT       002F65 R   |     WAIT_IDX=  0000AC     |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |   4 WORDS      002F5B R   |     WORDS_ID=  0000AE 
  4 WRITE      002F51 R   |     WRITE_ID=  0000B0     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XFIRST  =  000001     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   4 XOR        002F49 R
    XOR_IDX =  0000FE     |     XSAVE   =  000002     |     XSTACK_E=  001773 
    XSTACK_S=  00003C     |     XTEMP   =  000001     |     YSAVE   =  000007 
    YTEMP   =  000003     |   4 abs        002A59 R   |   4 abs24      0001DF R
  5 acc16      00000D GR  |   5 acc24      00000C GR  |   5 acc32      00000B GR
  5 acc8       00000E GR  |   4 accept_c   000BCC R   |   4 add24      00016A R
  4 add_char   001337 R   |   4 add_spac   00112F R   |   4 analog_r   002610 R
  4 and_cond   001B16 R   |   4 and_fact   001AE6 R   |   4 app        003484 R
  4 app_sign   003480 R   |   4 app_size   003482 R   |   4 app_spac   003480 GR
  4 arduino_   002B48 R   |   4 arg_list   001918 R   |   5 array_si   000020 R
  4 ascii      002909 R   |   4 at_tst     000FA1 R   |   4 atoi24     001838 GR
  4 atoi_exi   0018A9 R   |   4 awu        002A00 R   |   4 awu02      002A13 R
  4 bad_port   002984 R   |   5 base       00000A GR  |   5 basicptr   000004 GR
  4 beep       002587 R   |   4 beep_1kh   00255A GR  |   4 bin_exit   000E08 R
  4 bit_rese   002163 R   |   4 bit_set    002141 R   |   4 bit_test   0021A8 R
  4 bit_togg   002186 R   |   4 bitmask    002CFF R   |   4 bkslsh_t   000F4E R
  4 bksp       000977 R   |   2 block_bu   0016B8 GR  |   4 block_er   00078C R
  4 break_po   0026FC R   |   4 bye        0029CC R   |   4 clear_ba   0014A3 R
  4 clear_bl   0027AC R   |   4 clear_va   0013FB R   |   4 clock_in   00008B R
  4 cloop_1    001D8B R   |   4 cmd_cons   001D65 R   |   4 cmd_end    002526 R
  4 cmd_get    00252D R   |   4 cmd_itf    00053C R   |   4 cmd_line   0016D6 R
  4 cmd_name   001357 R   |   4 cmd_on     0023DA R   |   4 cmd_size   001C02 R
  4 cold_sta   0000C3 R   |   4 colon_ts   000F75 R   |   4 comma_ts   000F80 R
  4 comp_msg   001626 R   |   4 compile    00109B GR  |   4 conditio   001B68 R
  4 const_cr   002DA7 R   |   4 const_cr   002DAC R   |   4 const_dd   002DA2 R
  4 const_ee   002DBB R   |   4 const_id   002D9D R   |   4 const_in   002DB6 R
  4 const_lo   001D86 R   |   4 const_od   002D98 R   |   4 const_ou   002DB1 R
  4 const_po   002D6B R   |   4 const_po   002D70 R   |   4 const_po   002D75 R
  4 const_po   002D7A R   |   4 const_po   002D7F R   |   4 const_po   002D84 R
  4 const_po   002D89 R   |   4 const_po   002D8E R   |   4 const_po   002D93 R
  4 convert_   000D78 R   |   4 convert_   00093B R   |   4 copy_com   000FD6 R
  5 count      000003 GR  |   4 cp24       0001A4 R   |   4 cp24_ax    0001D6 R
  4 cp_loop    0018C9 R   |   4 cpl24      0001E6 R   |   4 cpy_cmd_   001117 R
  4 cpy_quot   001157 R   |   4 create_g   000CA2 R   |   4 cs_high    002F3D R
  4 dash_tst   000F96 R   |   4 data       002DC0 R   |   4 data_err   002E39 R
  5 data_len   000009 R   |   5 data_ofs   000008 R   |   5 data_ptr   000006 R
  4 dec_base   001BE1 R   |   4 decomp_l   0011EF R   |   4 decompil   0011A7 GR
  4 del_line   000C75 R   |   4 delete_l   000A64 R   |   4 delete_n   000987 R
  4 delete_u   000A29 R   |   4 digital_   00264C R   |   4 digital_   002683 R
  4 div24      0002F3 R   |   4 divu24_8   0002D5 R   |   4 do_loop    002D25 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

  4 do_progr   00077F R   |   4 edit       001F4E R   |   4 enable_i   002C8F R
  4 eql_tst    001021 R   |   4 equal      00134A R   |   4 erase      002724 R
  4 erase_ex   0007B0 R   |   4 erase_fl   0007A6 R   |   4 err_bad_   001587 R
  4 err_buf_   0015FD R   |   4 err_cmd_   00154B R   |   4 err_div0   001510 R
  4 err_dupl   001565 R   |   4 err_math   0014F7 R   |   4 err_mem_   0014DC R
  4 err_msg    0014BA R   |   4 err_no_a   001593 R   |   4 err_no_d   0015C6 R
  4 err_no_f   0015EA R   |   4 err_no_l   00151F R   |   4 err_no_p   0015D6 R
  4 err_not_   001576 R   |   4 err_over   00160A R   |   4 err_run_   001535 R
  4 err_synt   0014E9 R   |   4 escaped    000D8D GR  |   4 expect     001906 R
  4 expressi   001A4F R   |   4 factor     001964 R   |   5 farptr     000018 R
  4 fcpu       002ACA R   |   4 fetchc     00062C R   |   4 fill_wri   00279C R
  4 final_te   000BC5 R   |   4 first_li   001EF8 R   |   5 flags      000022 GR
  4 for        00223E R   |   4 free       001BE6 R   |   5 free_eep   000024 R
  7 free_ram   000080 R   |   4 func_arg   001913 R   |   4 func_cha   0028F2 R
  4 func_eef   001CF8 R   |   4 ge         00134C R   |   4 get_addr   001776 R
  4 get_arra   001934 R   |   4 get_char   001790 R   |   4 get_cons   001C7D R
  4 get_esca   000947 R   |   4 get_int2   001780 R   |   4 get_targ   00236B R
  4 get_targ   002379 R   |   4 get_tick   002A52 R   |   4 get_toke   000EE7 GR
  4 getc       000920 GR  |   4 gosub      002486 R   |   4 gosub_1    002491 R
  4 gosub_2    002497 R   |   4 goto       00246C R   |   4 goto_1     002476 R
  4 gpio       002959 R   |   4 gt         001348 R   |   4 gt_tst     00102C R
  4 hex_base   001BDC R   |   4 hex_dump   00066C R   |   4 if         002221 R
  5 in         000001 GR  |   5 in.saved   000002 GR  |   5 in.w       000000 GR
  4 incr_far   000882 R   |   4 input_ex   0020F9 R   |   4 input_lo   002063 R
  4 input_va   00205F R   |   4 insert_c   0009E6 R   |   4 insert_l   000CCE R
  4 insert_l   000D3D R   |   4 interp_l   001717 R   |   4 interpre   0016F2 R
  4 invalid    000581 R   |   4 invalid_   000602 R   |   4 is_alnum   000E3B GR
  4 is_alpha   000E21 GR  |   4 is_data_   002DC6 R   |   4 is_digit   000E32 GR
  4 is_symbo   000E44 R   |   4 itoa       0017D3 GR  |   4 itoa_loo   0017F5 R
  4 jp_to_ta   002479 R   |   4 key        002948 R   |   4 kword_di   0032CC GR
  4 kword_en   002F47 R   |   4 le         001351 R   |   4 ledoff     000437 R
  4 ledon      000432 R   |   4 ledtoggl   00043C R   |   4 left_par   000445 R
  4 let        001C3A GR  |   4 let_arra   001C48 R   |   4 let_eval   001C50 R
  4 let_var    001C4D R   |   4 lines_sk   001EFB R   |   4 list       001EA9 R
  4 list_con   001C8C R   |   4 list_exi   001F3D R   |   4 list_loo   001F1B R
  4 log2       002CD2 R   |   4 look_tar   00239C R   |   4 loop_bac   00234E R
  5 loop_dep   00001F R   |   4 loop_don   002363 R   |   4 lshift     002A70 R
  4 lt         00134F R   |   4 lt_tst     001055 R   |   4 mem_peek   00059E R
  4 mod24      0003A1 R   |   4 move       0013B7 GR  |   4 move_dow   0013D6 R
  4 move_era   00070E R   |   4 move_exi   0013F7 R   |   4 move_lef   0009BE R
  4 move_loo   0013DB R   |   4 move_prg   00074E R   |   4 move_rig   0009CC R
  4 move_up    0013C8 R   |   4 mul24      000265 R   |   4 mul_char   001339 R
  4 mulu24_8   000226 R   |   4 nbr_tst    000F1A R   |   4 ne         001354 R
  4 neg24      0001EF R   |   4 neg_acc2   000209 R   |   4 neg_ax     000201 R
  4 new        00271A R   |   4 next       0022F6 R   |   4 next_lin   0016FA R
  4 next_tok   00174E GR  |   4 no_match   0018DB R   |   4 number     000632 R
  4 other      00107E R   |   4 overwrit   000BF1 R   |   2 pad        0016B8 GR
  4 pad_ref    002F42 R   |   4 parse_bi   000DE6 R   |   4 parse_in   000D95 R
  4 parse_ke   000E67 R   |   4 parse_qu   000D40 R   |   4 parse_sy   000E4F R
  4 pause      0029E0 R   |   4 pause02    0029F3 R   |   4 peek       002200 R
  4 peek_byt   0005CC R   |   4 pin_mode   002AD9 R   |   4 plus_tst   000FF5 R
  4 poke       0021DF R   |   4 power_ad   0025C0 R   |   4 prcnt_ts   001016 R
  4 print      001FB6 R   |   4 print_fa   000611 R   |   4 print_he   000C28 GR
  4 print_re   000491 R   |   4 print_st   000591 R   |   4 print_to   0017BB R
  4 prog_siz   001E18 R   |   4 program_   001E20 R   |   4 program_   000728 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

  4 program_   00074E R   |   4 prt_acc2   0017AD R   |   4 prt_basi   001F92 R
  4 prt_i16    001796 R   |   4 prt_loop   001FBA R   |   4 prt_peek   000414 GR
  4 prt_reg1   000472 R   |   4 prt_reg8   000450 R   |   4 prt_regs   0003AA GR
  5 ptr16      000019 GR  |   5 ptr8       00001A R   |   4 putc       000910 GR
  4 puts       00096D GR  |   4 qgetc      000919 GR  |   4 qkey       00294C GR
  4 qmark_ts   000FAC R   |   4 qsign      002795 R   |   4 random     002B68 R
  4 read       002E3E R   |   4 read01     002E43 R   |   4 read_int   003443 R
  4 readln     000A72 GR  |   4 readln_l   000A81 R   |   4 readln_q   000C0E R
  4 refresh_   002CCD R   |   4 regs_sta   0003ED R   |   4 relation   001A87 R
  4 relop_st   00133C R   |   4 remark     0020FE GR  |   4 repl       00054A R
  4 repl_exi   000572 R   |   4 reset_co   001FB8 R   |   4 rest_con   00204F R
  4 restore    002DD4 R   |   4 return     0024AC R   |   4 right_al   001145 GR
  4 row_alig   000867 R   |   4 row_eras   0006E1 R   |   4 row_eras   00070E R
  4 row_loop   00064F R   |   4 rparnt_t   000F6A R   |   4 rshift     002A9D R
  7 rsign      00007C R   |   7 rsize      00007E R   |   4 rt_msg     001614 R
  4 run        0024CA R   |   4 run_app    000135 R   |   4 run_it     0024FC R
  4 run_it_0   0024FE R   |   5 rx1_head   00002E R   |   5 rx1_queu   000026 R
  5 rx1_tail   00002F R   |   4 save_app   0027C0 R   |   4 save_con   00203F R
  4 scan_blo   000890 R   |   4 search_c   001D21 R   |   4 search_d   0018BB GR
  4 search_e   001903 R   |   4 search_l   000C4A GR  |   4 search_l   000C59 R
  4 search_n   0018BF R   |   5 seedx      000014 R   |   5 seedy      000016 R
  4 select_p   002B38 R   |   4 send_esc   000995 R   |   4 send_par   0009A0 R
  4 set_data   002E0A R   |   4 set_time   002C6D R   |   4 sharp_ts   000F8B R
  4 show_row   00063D R   |   4 single_c   001332 R   |   4 skip       000ED4 R
  4 skip_str   001767 R   |   4 slash_ts   00100B R   |   4 sleep      0029D5 R
  4 software   00140A R   |   4 spaces     0009DA GR  |   4 spi_clea   002ED7 R
  4 spi_disa   002EBF R   |   4 spi_enab   002E8C R   |   4 spi_rcv_   002EF9 R
  4 spi_read   002F24 R   |   4 spi_sele   002F2B R   |   4 spi_send   002EE3 R
  4 spi_writ   002F04 R   |   2 stack_fu   001774 GR  |   2 stack_un   001800 R
  4 star_tst   001000 R   |   4 step       0022B4 R   |   4 stop       0026CE R
  4 store_lo   0022E3 R   |   4 str_matc   0018E8 R   |   4 str_tst    000F0A R
  4 strcmp     001396 R   |   4 strcpy     0013A7 GR  |   4 strlen     00138B GR
  4 sub24      000187 R   |   4 symb_loo   000E50 R   |   4 syntax_e   001647 GR
  4 system_i   001450 R   |   5 tab_widt   000023 GR  |   4 tb_error   001649 GR
  4 term       001A0C R   |   4 term01     001A14 R   |   4 term_exi   001A4C R
  4 test       0032D4 R   |   4 test_p     000589 R   |   2 tib        001668 GR
  4 tick_tst   000FC4 R   |   5 ticks      00000F R   |   4 timeout    002C84 R
  5 timer      000012 GR  |   4 timer2_i   0000A1 R   |   4 timer4_i   0000AE R
  4 tk_id      001637 R   |   4 to         00226E R   |   4 to_eepro   000777 R
  4 to_flash   00077C R   |   4 to_hex_c   000C3F GR  |   4 to_upper   00182C GR
  4 token_ch   001094 R   |   4 token_ex   001098 R   |   4 tone       002565 R
  4 try_next   002E17 R   |   5 txtbgn     00001B GR  |   5 txtend     00001D GR
  4 uart1_ge   000920 GR  |   4 uart1_in   0008CB R   |   4 uart1_pu   000910 GR
  4 uart1_qg   000919 GR  |   4 uart1_se   0008DB R   |   4 ubound     001C2F R
  4 uflash     002989 R   |   4 unlock_e   0006AB R   |   4 unlock_f   0006C6 R
  4 until      002D38 R   |   4 user_int   000057 R   |   4 usr        0029A6 R
  4 var_name   00119D GR  |   5 vars       000030 GR  |   4 wait       002104 R
  4 warm_ini   001481 R   |   4 warm_sta   0016D3 R   |   4 words      002C03 R
  4 words_co   002C57 R   |   4 write      0028AF R   |   4 write_bl   00082C GR
  4 write_bu   000768 R   |   4 write_by   0007B2 R   |   4 write_ee   0007EE R
  4 write_ex   000827 R   |   4 write_fl   0007D8 R   |   4 write_nb   000851 R
  2 xstack_f   001738 GR  |   2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3484   flags    0
   5 DATA       size     7E   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

