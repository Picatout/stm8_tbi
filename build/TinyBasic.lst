ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module STM8_TBI
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; parsed 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                     34     .list 
                                     35 
                                     36 ;_dbg 
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000028    43     PAD_SIZE=40
                           0000A0    44 	STACK_SIZE=160
                           0017FF    45 	STACK_EMPTY=RAM_SIZE-1  
                           000000    46 	FRUN=0 ; flags run code in variable flags
                           000001    47 	FTRAP=1 ; inside trap handler 
                           000002    48 	FLOOP=2 ; FOR loop in preparation 
                           000003    49 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    50 	FBREAK=4 ; break point flag 
                           000005    51 	FCOMP=5  ; compiling flags 
                           000006    52 	FAUTORUN=6; auto start program running 
                                     53 
                           004000    54 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     55 
                           000006    56     FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     57 
                           007FFF    58 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     59 
      000000                         60 in.w:  .blkb 1 ; parser position in text line high-byte 
      000001                         61 in:    .blkb 1 ; low byte of in.w 
      000002                         62 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         63 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         64 basicptr:  .blkb 2  ; point to current BASIC line address.
      000006                         65 data_ptr:  .blkw 1  ; point to DATA address
      000008                         66 data_ofs:  .blkb 1  ; index to next data item 
      000009                         67 data_len:  .blkb 1  ; length of data line 
      00000A                         68 base:  .blkb 1 ; nemeric base used to print integer 
      00000B                         69 acc24: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         70 acc16: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         71 acc8:  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         72 tmp16: .blkb 1 ; 16 bit temporary storage high-byte 
      00000F                         73 tmp8:  .blkb 1 ; 8 bit temporary storage, tmp16 low-byte 
      000010                         74 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         75 timer: .blkw 1 ;  milliseconds count down timer 
      000014                         76 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         77 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         78 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         79 ptr16:  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         80 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         81 ffree: .blkb 3 ; flash free address ; file system free space pointer
      00001E                         82 txtbgn: .blkw 1 ; tokenized BASIC text beginning address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000020                         83 txtend: .blkw 1 ; tokenized BASIC text end address 
      000022                         84 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000023                         85 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000025                         86 flags: .blkb 1 ; various boolean flags
      000026                         87 tab_width: .blkb 1 ; print colon width (default 4)
      000027                         88 rx_char: .blkb 1 ; last received character from UART1 
      000028                         89 vars: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     90 ; keep 'free_ram' as last variable 
      00005C                         91 free_ram: ; from here RAM free for BASIC text 
                                     92 
                                     93 ;;-----------------------------------
                                     94     .area SSEG (ABS)
                                     95 ;; working buffers and stack at end of RAM. 	
                                     96 ;;-----------------------------------
      0016E8                         97     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      0016E8                         98 tib: .ds TIB_SIZE             ; transaction input buffer
      001738                         99 pad: .ds PAD_SIZE             ; working buffer
      001760                        100 stack_full: .ds STACK_SIZE   ; control stack 
      001800                        101 stack_unf: ; stack underflow ; control_stack bottom 
                                    102 
                                    103 ;;--------------------------------------
                                    104     .area HOME 
                                    105 ;; interrupt vector table at 0x8000
                                    106 ;;--------------------------------------
      000000 82 00 04 ED            107     int cold_start			; RESET vector 
                           000000   108 .if DEBUG
                                    109 	int TrapHandler 		;TRAP  software interrupt
                           000001   110 .else
      000004 82 00 00 00            111 	int NonHandledInterrupt ;TRAP  software interrupt
                                    112 .endif
      000008 82 00 00 00            113 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            114 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            115 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            116 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            117 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            118 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            119 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 4D            120 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            121 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            122 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            123 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            124 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            125 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            126 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            127 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            128 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            129 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            130 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            131 	int Uart1RxHandler		;int18 UART1 RX full ; user communication channel.
      000054 82 00 00 00            132 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            133 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 00            134 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 00            135 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 37            136 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            137 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      00006C 82 00 00 00            138 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            139 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            140 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            141 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            142 	int NonHandledInterrupt ;int29  not used
                                    143 
                                    144 ;---------------------------------------
                                    145     .area CODE
                                    146 ;---------------------------------------
                           000000   147 .if DEBUG
                                    148 .asciz "STM8_TBI" ; I like to put module name here.
                                    149 .endif 
                                    150 
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    152 ; non handled interrupt 
                                    153 ; reset MCU
                                    154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        155 NonHandledInterrupt:
      000000 71                     156     .byte 0x71  ; invalid opcode reinitialize MCU
                                    157 
                                    158 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    159 ; auto wakeup from halt
                                    160 ; at iret, program continue 
                                    161 ; after hatl instruction
                                    162 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        163 AWUHandler:
      000001 72 19 50 F0      [ 1]  164 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  165 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  166 	clr AWU_TBR 
      00000E 80               [11]  167 	iret
                                    168 
                                    169 ;--------------------------
                                    170 ; UART1 receive character
                                    171 ; CTRL-C (ASCII 3)
                                    172 ; cancel program execution
                                    173 ; and fall back to command line
                                    174 ;--------------------------
      00000F                        175 Uart1RxHandler:
      00000F 72 0B 52 30 FB   [ 2]  176 	btjf UART1_SR,#UART_SR_RXNE,.
      000014 C6 52 31         [ 1]  177 	ld a,UART1_DR 
      000017 A1 03            [ 1]  178 	cp a,#CTRL_C 
      000019 26 07            [ 1]  179 	jrne 1$
      00001B 72 5F 00 27      [ 1]  180 	clr rx_char 
      00001F CC 00 60         [ 2]  181 	jp user_interrupted
      000022                        182 1$:
      000022 A1 18            [ 1]  183 	cp a,#CAN 
      000024 26 03            [ 1]  184 	jrne 2$
      000026 CC 04 ED         [ 2]  185 	jp cold_start 	
      000029                        186 2$: 
      000029 A1 1A            [ 1]  187 	cp a,#CTRL_Z
      00002B 26 06            [ 1]  188 	jrne 3$
      00002D CD 05 B2         [ 4]  189 	call cancel_autorun 
      000030 CC 04 ED         [ 2]  190 	jp cold_start 
      000033 C7 00 27         [ 1]  191 3$:	ld rx_char,a 	
      000036 80               [11]  192 	iret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    193 
                                    194 ;------------------------------------
                                    195 ; software interrupt handler  
                                    196 ;------------------------------------
                           000000   197 .if DEBUG 
                                    198 TrapHandler:
                                    199 	bset flags,#FTRAP 
                                    200 	call print_registers
                                    201 	call cmd_itf
                                    202 	bres flags,#FTRAP 	
                                    203 	iret
                                    204 .endif 
                                    205 
                                    206 ;------------------------------
                                    207 ; TIMER 4 is used to maintain 
                                    208 ; a milliseconds 'ticks' counter
                                    209 ; and decrement 'timer' varaiable
                                    210 ;--------------------------------
      000037                        211 Timer4UpdateHandler:
      000037 72 5F 53 42      [ 1]  212 	clr TIM4_SR 
      00003B CE 00 10         [ 2]  213 	ldw x,ticks
      00003E 5C               [ 2]  214 	incw x
      00003F CF 00 10         [ 2]  215 	ldw ticks,x 
      000042 CE 00 12         [ 2]  216 	ldw x,timer
      000045 5D               [ 2]  217 	tnzw x 
      000046 27 04            [ 1]  218 	jreq 1$
      000048 5A               [ 2]  219 	decw x 
      000049 CF 00 12         [ 2]  220 	ldw timer,x 
      00004C                        221 1$:	
      00004C 80               [11]  222 	iret 
                                    223 
                                    224 
                                    225 ;------------------------------------
                                    226 ; Triggered by pressing USER UserButton 
                                    227 ; on NUCLEO card.
                                    228 ; This is used to abort a progam lock 
                                    229 ; in infinite loop. 
                                    230 ;------------------------------------
      00004D                        231 UserButtonHandler:
                                    232 ; wait button release
      00004D 5F               [ 1]  233 	clrw x
      00004E 5A               [ 2]  234 1$: decw x 
      00004F 26 FD            [ 1]  235 	jrne 1$
      000051 72 09 50 15 F8   [ 2]  236 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    237 ; if MCU suspended by SLEEP resume program
      000056 72 07 00 25 05   [ 2]  238     btjf flags,#FSLEEP,2$
      00005B 72 17 00 25      [ 1]  239 	bres flags,#FSLEEP 
      00005F 80               [11]  240 	iret
      000060                        241 2$:	
      000060                        242 user_interrupted:
      000060 72 00 00 25 02   [ 2]  243     btjt flags,#FRUN,4$
      000065 20 13            [ 2]  244 	jra UBTN_Handler_exit 
      000067                        245 4$:	; program interrupted by user 
      000067 72 11 00 25      [ 1]  246 	bres flags,#FRUN 
      00006B AE 00 82         [ 2]  247 	ldw x,#USER_ABORT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      00006E CD 01 D7         [ 4]  248 	call puts 
      000071 CE 00 04         [ 2]  249 	ldw x,basicptr 
      000074 C6 00 01         [ 1]  250 	ld a,in 
      000077 CD 12 5A         [ 4]  251 	call prt_basic_line
      00007A                        252 UBTN_Handler_exit:
      00007A AE 17 FF         [ 2]  253     ldw x,#STACK_EMPTY 
      00007D 94               [ 1]  254     ldw sp,x
      00007E 9A               [ 1]  255 	rim 
      00007F CC 07 AD         [ 2]  256 	jp warm_start
                                    257 
      000082 0A 50 72 6F 67 72 61   258 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    259 
                                    260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    261 ;    peripherals initialization
                                    262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    263 
                                    264 ;----------------------------------------
                                    265 ; inialize MCU clock 
                                    266 ; input:
                                    267 ;   A 		source  HSI | 1 HSE 
                                    268 ;   XL      CLK_CKDIVR , clock divisor 
                                    269 ; output:
                                    270 ;   none 
                                    271 ;----------------------------------------
      00009D                        272 clock_init:	
      00009D C1 50 C3         [ 1]  273 	cp a,CLK_CMSR 
      0000A0 27 0C            [ 1]  274 	jreq 2$ ; no switching required 
                                    275 ; select clock source 
      0000A2 72 12 50 C5      [ 1]  276 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A6 C7 50 C4         [ 1]  277 	ld CLK_SWR,a
      0000A9 C1 50 C3         [ 1]  278 1$:	cp a,CLK_CMSR
      0000AC 26 FB            [ 1]  279 	jrne 1$
      0000AE                        280 2$: 	
                                    281 ; HSI and cpu clock divisor 
      0000AE 9F               [ 1]  282 	ld a,xl 
      0000AF C7 50 C6         [ 1]  283 	ld CLK_CKDIVR,a  
      0000B2 81               [ 4]  284 	ret
                                    285 
                                    286 ;----------------------------------
                                    287 ; TIMER2 used as audio tone output 
                                    288 ; on port D:5.
                                    289 ; channel 1 configured as PWM mode 1 
                                    290 ;-----------------------------------  
                           00F424   291 TIM2_CLK_FREQ=62500
      0000B3                        292 timer2_init:
      0000B3 72 1A 50 C7      [ 1]  293 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000B7 35 60 53 05      [ 1]  294  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000BB 35 08 53 0C      [ 1]  295 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000BF 81               [ 4]  296 	ret 
                                    297 
                                    298 ;---------------------------------
                                    299 ; TIM4 is configured to generate an 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    300 ; interrupt every millisecond 
                                    301 ;----------------------------------
      0000C0                        302 timer4_init:
      0000C0 72 18 50 C7      [ 1]  303 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000C4 35 07 53 45      [ 1]  304 	mov TIM4_PSCR,#7 ; prescale 128  
      0000C8 35 7D 53 46      [ 1]  305 	mov TIM4_ARR,#125 ; set for 1msec.
      0000CC 35 05 53 40      [ 1]  306 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000D0 72 10 53 41      [ 1]  307 	bset TIM4_IER,#TIM4_IER_UIE
      0000D4 81               [ 4]  308 	ret
                                    309 
                                    310 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    311 ;  routines to write to FLASH, EEPROM 
                                    312 ;  and OPTION 
                                    313 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    314 
                                    315 ;----------------------------------
                                    316 ; unlock EEPROM/OPT for writing/erasing
                                    317 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    318 ; input:
                                    319 ;  none
                                    320 ; output:
                                    321 ;  none 
                                    322 ;----------------------------------
      0000D5                        323 unlock_eeprom:
      0000D5 35 AE 50 64      [ 1]  324 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000D9 35 56 50 64      [ 1]  325     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000DD 72 07 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000E2 81               [ 4]  327 	ret
                                    328 
                                    329 ;----------------------------------
                                    330 ; unlock FLASH for writing/erasing
                                    331 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    332 ; input:
                                    333 ;  none
                                    334 ; output:
                                    335 ;  none
                                    336 ;----------------------------------
      0000E3                        337 unlock_flash:
      0000E3 35 56 50 62      [ 1]  338 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000E7 35 AE 50 62      [ 1]  339 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000EB 72 03 50 5F FB   [ 2]  340 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000F0 81               [ 4]  341 	ret
                                    342 
                           000000   343 USE_BLOCK_ERASE=0 
                           000000   344 .if USE_BLOCK_ERASE 
                                    345 ; this code is copied to RAM 
                                    346 
                                    347 ;----------------------------
                                    348 ; erase block code must be 
                                    349 ; executed from RAM
                                    350 ;-----------------------------
                                    351 erase_start:
                                    352 	clr a 
                                    353     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    354     bres FLASH_NCR2,#FLASH_CR2_ERASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    355 	ldf [farptr],a
                                    356     inc farptr+2 
                                    357     ldf [farptr],a
                                    358     inc farptr+2 
                                    359     ldf [farptr],a
                                    360     inc farptr+2 
                                    361     ldf [farptr],a
                                    362 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    363 	ret
                                    364 erase_end:
                                    365 
                                    366 ; copy erase_start in RAM 
                                    367 move_code_in_ram:
                                    368 	ldw x,#erase_end 
                                    369 	subw x,#erase_start
                                    370 	ldw acc16,x 
                                    371 	ldw x,#pad 
                                    372 	ldw y,#erase_start 
                                    373 	call move 
                                    374 	ret 
                                    375 
                                    376 ;-----------------------------------
                                    377 ; erase flash or EEPROM block 
                                    378 ; a block is 128 bytes 
                                    379 ; input:
                                    380 ;   farptr  address block begin
                                    381 ; output:
                                    382 ;   none
                                    383 ;--------------------------------------
                                    384 erase_block:
                                    385 	ldw x,farptr+1 
                                    386 	pushw x 
                                    387 	call move_code_in_ram 
                                    388 	popw x 
                                    389 	ldw farptr+1,x 
                                    390 	tnz farptr
                                    391 	jrne erase_flash 
                                    392 	ldw x,#FLASH_BASE 
                                    393 	cpw x,farptr+1 
                                    394 	jrpl erase_flash 
                                    395 ; erase eeprom block
                                    396 	call unlock_eeprom 
                                    397 	sim 
                                    398 	call pad   
                                    399 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    400 	rim 
                                    401 	ret 
                                    402 ; erase flash block:
                                    403 erase_flash:
                                    404 	call unlock_flash 
                                    405 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    406 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    407 	clr a 
                                    408 	sim 
                                    409 	call pad 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    410     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    411 	rim 
                                    412 	ret 
                                    413 .endif ;;;; USE_BLOCK_ERASE ;;;;
                                    414 
                                    415 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    416 ; write a byte to FLASH or EEPROM/OPTION  
                                    417 ; input:
                                    418 ;    a  		byte to write
                                    419 ;    farptr  	address
                                    420 ;    x          farptr[x]
                                    421 ; output:
                                    422 ;    none
                                    423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    424 	; variables locales
                           000001   425 	BTW = 1   ; byte to write offset on stack
                           000002   426 	OPT = 2   ; OPTION flag offset on stack
                           000002   427 	VSIZE = 2
      0000F1                        428 write_byte:
      0000F1 90 89            [ 2]  429 	pushw y
      0000F3                        430 	_vars VSIZE
      0000F3 52 02            [ 2]    1     sub sp,#VSIZE 
      0000F5 6B 01            [ 1]  431 	ld (BTW,sp),a ; byte to write 
      0000F7 0F 02            [ 1]  432 	clr (OPT,sp)  ; OPTION flag
                                    433 ; put addr[15:0] in Y, for bounds check.
      0000F9 90 CE 00 19      [ 2]  434 	ldw y,farptr+1   ; Y=addr15:0
                                    435 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000FD 72 5D 00 18      [ 1]  436 	tnz farptr 
      000101 26 14            [ 1]  437 	jrne write_flash
      000103 90 A3 26 00      [ 2]  438     cpw y,#user_space
      000107 24 0E            [ 1]  439     jruge write_flash
      000109 90 A3 40 00      [ 2]  440 	cpw y,#EEPROM_BASE  
      00010D 25 52            [ 1]  441     jrult write_exit
      00010F 90 A3 48 7F      [ 2]  442 	cpw y,#OPTION_END 
      000113 22 4C            [ 1]  443 	jrugt write_exit
      000115 20 16            [ 2]  444 	jra write_eeprom 
                                    445 ; write program memory
      000117                        446 write_flash:
      000117 CD 00 E3         [ 4]  447 	call unlock_flash 
      00011A 9B               [ 1]  448 1$:	sim 
      00011B 7B 01            [ 1]  449 	ld a,(BTW,sp)
      00011D 92 A7 00 18      [ 4]  450 	ldf ([farptr],x),a ; farptr[x]=A
      000121 72 05 50 5F FB   [ 2]  451 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000126 9A               [ 1]  452     rim 
      000127 72 13 50 5F      [ 1]  453     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00012B 20 34            [ 2]  454     jra write_exit
                                    455 ; write eeprom and option
      00012D                        456 write_eeprom:
      00012D CD 00 D5         [ 4]  457 	call unlock_eeprom
                                    458 	; check for data eeprom or option eeprom
      000130 90 A3 48 00      [ 2]  459 	cpw y,#OPTION_BASE
      000134 2B 08            [ 1]  460 	jrmi 1$
      000136 90 A3 48 80      [ 2]  461 	cpw y,#OPTION_END+1
      00013A 2A 02            [ 1]  462 	jrpl 1$
      00013C 03 02            [ 1]  463 	cpl (OPT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      00013E                        464 1$: 
      00013E 0D 02            [ 1]  465     tnz (OPT,sp)
      000140 27 08            [ 1]  466     jreq 2$
                                    467 	; pour modifier une option il faut modifier ces 2 bits
      000142 72 1E 50 5B      [ 1]  468     bset FLASH_CR2,#FLASH_CR2_OPT
      000146 72 1F 50 5C      [ 1]  469     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00014A                        470 2$: 
      00014A 7B 01            [ 1]  471     ld a,(BTW,sp)
      00014C 92 A7 00 18      [ 4]  472     ldf ([farptr],x),a
      000150 0D 02            [ 1]  473     tnz (OPT,sp)
      000152 27 08            [ 1]  474     jreq 3$
      000154 5C               [ 2]  475     incw x
      000155 7B 01            [ 1]  476     ld a,(BTW,sp)
      000157 43               [ 1]  477     cpl a
      000158 92 A7 00 18      [ 4]  478     ldf ([farptr],x),a
      00015C 72 05 50 5F FB   [ 2]  479 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000161                        480 write_exit:
      000161                        481 	_drop VSIZE 
      000161 5B 02            [ 2]    1     addw sp,#VSIZE 
      000163 90 85            [ 2]  482 	popw y
      000165 81               [ 4]  483     ret
                                    484 
                                    485 ;--------------------------------------------
                                    486 ; write a data block to eeprom or flash 
                                    487 ; input:
                                    488 ;   Y        source address   
                                    489 ;   X        array index  destination  farptr[x]
                                    490 ;   BSIZE    block size bytes 
                                    491 ;   farptr   write address , byte* 
                                    492 ; output:
                                    493 ;	X 		after last byte written 
                                    494 ;   Y 		after last byte read 
                                    495 ;  farptr   point after block
                                    496 ;---------------------------------------------
      000166                        497 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000166                        498 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    499 	; local var 
                           000001   500 	XSAVE=1 
                           000002   501 	VSIZE=2 
      000166                        502 write_block:
      000166                        503 	_vars VSIZE
      000166 52 02            [ 2]    1     sub sp,#VSIZE 
      000168 1F 01            [ 2]  504 	ldw (XSAVE,sp),x 
      00016A 1E 05            [ 2]  505 	ldw x,(BSIZE,sp) 
      00016C 27 13            [ 1]  506 	jreq 9$
      00016E 1E 01            [ 2]  507 1$:	ldw x,(XSAVE,sp)
      000170 90 F6            [ 1]  508 	ld a,(y)
      000172 CD 00 F1         [ 4]  509 	call write_byte 
      000175 5C               [ 2]  510 	incw x 
      000176 90 5C            [ 2]  511 	incw y 
      000178 1F 01            [ 2]  512 	ldw (XSAVE,sp),x
      00017A 1E 05            [ 2]  513 	ldw x,(BSIZE,sp)
      00017C 5A               [ 2]  514 	decw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00017D 1F 05            [ 2]  515 	ldw (BSIZE,sp),x 
      00017F 26 ED            [ 1]  516 	jrne 1$
      000181                        517 9$:
      000181 1E 01            [ 2]  518 	ldw x,(XSAVE,sp)
      000183 CD 18 A1         [ 4]  519 	call incr_farptr
      000186                        520 	_drop VSIZE
      000186 5B 02            [ 2]    1     addw sp,#VSIZE 
      000188 81               [ 4]  521 	ret 
                                    522 
                                    523 
                                    524 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    525 ;;   UART1 subroutines
                                    526 ;;   used for user interface 
                                    527 ;;   communication channel.
                                    528 ;;   settings: 
                                    529 ;;		115200 8N1 no flow control
                                    530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    531 
                                    532 ;---------------------------------------------
                                    533 ; initialize UART1, 115200 8N1
                                    534 ; input:
                                    535 ;	none
                                    536 ; output:
                                    537 ;   none
                                    538 ;---------------------------------------------
      000189                        539 uart1_init:
      000189 72 1A 50 02      [ 1]  540     bset PA_DDR,#UART1_TX_PIN
      00018D 72 1A 50 03      [ 1]  541     bset PA_CR1,#UART1_TX_PIN 
      000191 72 1A 50 04      [ 1]  542     bset PA_CR2,#UART1_TX_PIN 
                                    543 ; enable UART1 clock
      000195 72 14 50 C7      [ 1]  544 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      000199                        545 uart1_set_baud: 
                                    546 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    547 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000199 A6 E1            [ 1]  548 	ld a,#CLK_SWR_HSI
      00019B C1 50 C3         [ 1]  549 	cp a,CLK_CMSR 
      00019E 27 0A            [ 1]  550 	jreq 2$ 
      0001A0                        551 1$: ; 8 Mhz 	
      0001A0 35 05 52 33      [ 1]  552 	mov UART1_BRR2,#0x05 ; must be loaded first
      0001A4 35 04 52 32      [ 1]  553 	mov UART1_BRR1,#0x4
      0001A8 20 08            [ 2]  554 	jra 3$
      0001AA                        555 2$: ; 16 Mhz 	
      0001AA 35 0B 52 33      [ 1]  556 	mov UART1_BRR2,#0x0b ; must be loaded first
      0001AE 35 08 52 32      [ 1]  557 	mov UART1_BRR1,#0x08
      0001B2                        558 3$:
      0001B2 72 5F 52 31      [ 1]  559     clr UART1_DR
      0001B6 35 2C 52 35      [ 1]  560 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0001BA 72 10 52 35      [ 1]  561 	bset UART1_CR2,#UART_CR2_SBK
      0001BE 72 0D 52 30 FB   [ 2]  562     btjf UART1_SR,#UART_SR_TC,.
      0001C3 81               [ 4]  563     ret
                                    564 
                                    565 ;---------------------------------
                                    566 ; send character to UART1 
                                    567 ; input:
                                    568 ;   A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    569 ; output:
                                    570 ;   none 
                                    571 ;--------------------------------	
      0001C4                        572 putc:
      0001C4 72 0F 52 30 FB   [ 2]  573 	btjf UART1_SR,#UART_SR_TXE,.
      0001C9 C7 52 31         [ 1]  574 	ld UART1_DR,a 
      0001CC 81               [ 4]  575 	ret 
                                    576 
                                    577 ;---------------------------------
                                    578 ; wait character from UART1 
                                    579 ; input:
                                    580 ;   none
                                    581 ; output:
                                    582 ;   A 			char  
                                    583 ;--------------------------------	
      0001CD                        584 getc:
      0001CD C6 00 27         [ 1]  585 	ld a,rx_char 
      0001D0 27 FB            [ 1]  586 	jreq getc 
      0001D2 72 5F 00 27      [ 1]  587 	clr rx_char 
      0001D6 81               [ 4]  588 	ret 
                                    589 
                                    590 ;-----------------------------
                                    591 ; send an ASCIZ string to UART1 
                                    592 ; input: 
                                    593 ;   x 		char * 
                                    594 ; output:
                                    595 ;   none 
                                    596 ;-------------------------------
      0001D7                        597 puts:
      0001D7 F6               [ 1]  598     ld a,(x)
      0001D8 27 06            [ 1]  599 	jreq 1$
      0001DA CD 01 C4         [ 4]  600 	call putc 
      0001DD 5C               [ 2]  601 	incw x 
      0001DE 20 F7            [ 2]  602 	jra puts 
      0001E0 81               [ 4]  603 1$:	ret 
                                    604 
                                    605 
                                    606 ;---------------------------
                                    607 ; delete character at left 
                                    608 ; of cursor on terminal 
                                    609 ; input:
                                    610 ;   none 
                                    611 ; output:
                                    612 ;	none 
                                    613 ;---------------------------
      0001E1                        614 bksp:
      0001E1 A6 08            [ 1]  615 	ld a,#BS 
      0001E3 CD 01 C4         [ 4]  616 	call putc 
      0001E6 A6 20            [ 1]  617 	ld a,#SPACE 
      0001E8 CD 01 C4         [ 4]  618 	call putc 
      0001EB A6 08            [ 1]  619 	ld a,#BS 
      0001ED CD 01 C4         [ 4]  620 	call putc 
      0001F0 81               [ 4]  621 	ret 
                                    622 ;---------------------------
                                    623 ; delete n character left of cursor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    624 ; at terminal.
                                    625 ; input: 
                                    626 ;   A   number of characters to delete.
                                    627 ; output:
                                    628 ;    none 
                                    629 ;--------------------------	
      0001F1                        630 delete:
      0001F1 88               [ 1]  631 	push a 
      0001F2 0D 01            [ 1]  632 0$:	tnz (1,sp)
      0001F4 27 07            [ 1]  633 	jreq 1$
      0001F6 CD 01 E1         [ 4]  634 	call bksp 
      0001F9 0A 01            [ 1]  635 	dec (1,sp)
      0001FB 20 F5            [ 2]  636 	jra 0$
      0001FD 84               [ 1]  637 1$:	pop a 
      0001FE 81               [ 4]  638 	ret
                                    639 
                                    640 ;--------------------------
                                    641 ; print n spaces on terminal
                                    642 ; input:
                                    643 ;  X 		number of spaces 
                                    644 ; output:
                                    645 ;	none 
                                    646 ;---------------------------
      0001FF                        647 spaces:
      0001FF A6 20            [ 1]  648 	ld a,#SPACE 
      000201 5D               [ 2]  649 1$:	tnzw x
      000202 27 06            [ 1]  650 	jreq 9$
      000204 CD 01 C4         [ 4]  651 	call putc 
      000207 5A               [ 2]  652 	decw x
      000208 20 F7            [ 2]  653 	jra 1$
      00020A                        654 9$: 
      00020A 81               [ 4]  655 	ret 
                                    656 
                                    657 ;;;;;;;;;;;;;
                           000000   658 .if DEBUG 
                                    659 ;---------------------------------
                                    660 ;; print actual registers states 
                                    661 ;; as pushed on stack 
                                    662 ;; {Y,X,CC,A}
                                    663 ;---------------------------------
                                    664 	_argofs 0  
                                    665 	_arg R_Y 1 
                                    666 	_arg R_X 3
                                    667 	_arg R_A 5
                                    668 	_arg R_CC 6
                                    669 prt_regs:
                                    670 	ldw x,#regs_state 
                                    671 	call puts
                                    672 ; register PC
                                    673 	ldw y,(1,sp)
                                    674 	ldw x,#REG_EPC 
                                    675 	call prt_reg16 
                                    676 ; register CC 
                                    677 	ld a,(R_CC,sp)
                                    678 	ldw x,#REG_CC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    679 	call prt_reg8 
                                    680 ; register A 
                                    681 	ld a,(R_A,sp)
                                    682 	ldw x,#REG_A 
                                    683 	call prt_reg8 
                                    684 ; register X 
                                    685 	ldw y,(R_X,sp)
                                    686 	ldw x,#REG_X 
                                    687 	call prt_reg16 
                                    688 ; register Y 
                                    689 	ldw y,(R_Y,sp)
                                    690 	ldw x,#REG_Y 
                                    691 	call prt_reg16 
                                    692 ; register SP 
                                    693 	ldw y,sp
                                    694 	addw y,#6+ARG_OFS  
                                    695 	ldw x,#REG_SP
                                    696 	call prt_reg16
                                    697 	ld a,#CR 
                                    698 	call putc
                                    699 	call putc   
                                    700 	ret 
                                    701 
                                    702 regs_state: .asciz "\nregisters state\n--------------------\n"
                                    703 
                                    704 
                                    705 ;--------------------
                                    706 ; print content at address in hex.
                                    707 ; input:
                                    708 ;   X 	address to peek 
                                    709 ; output:
                                    710 ;	none 
                                    711 ;--------------------	
                                    712 prt_peek:
                                    713 	pushw x 
                                    714 	ldw acc16,x 
                                    715 	clr acc24 
                                    716 	clrw x 
                                    717 	ld a,#16 
                                    718 	call prti24 
                                    719 	ld a,#': 
                                    720 	call putc 
                                    721 	ld a,#SPACE 
                                    722 	call putc 
                                    723 	popw x 
                                    724 	ld a,(x)
                                    725 	ld acc8,a 
                                    726 	clrw x 
                                    727 	ld a,#16 
                                    728 	call prti24
                                    729 	ret 
                                    730 .endif ; DEBUG  
                                    731 ;;;;;;;;;;;;;;;;;;;;	
                                    732 
                                    733 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    734 ; retrun string length
                                    735 ; input:
                                    736 ;   X         .asciz  pointer 
                                    737 ; output:
                                    738 ;   X         length 
                                    739 ;-------------------------------------
      00020B                        740 strlen:
      00020B 90 93            [ 1]  741 	ldw y,x 
      00020D 5F               [ 1]  742 	clrw x 
      00020E 90 7D            [ 1]  743 1$:	tnz (y) 
      000210 27 05            [ 1]  744 	jreq 9$ 
      000212 5C               [ 2]  745 	incw x
      000213 90 5C            [ 2]  746 	incw y 
      000215 20 F7            [ 2]  747 	jra 1$ 
      000217 81               [ 4]  748 9$: ret 
                                    749 
                                    750 ;------------------------------------
                                    751 ; compare 2 strings
                                    752 ; input:
                                    753 ;   X 		char* first string 
                                    754 ;   Y       char* second string 
                                    755 ; output:
                                    756 ;   A 		0|1 
                                    757 ;-------------------------------------
      000218                        758 strcmp:
      000218 F6               [ 1]  759 	ld a,(x)
      000219 27 0B            [ 1]  760 	jreq 5$ 
      00021B 90 F1            [ 1]  761 	cp a,(y) 
      00021D 26 05            [ 1]  762 	jrne 4$ 
      00021F 5C               [ 2]  763 	incw x 
      000220 90 5C            [ 2]  764 	incw y 
      000222 20 F4            [ 2]  765 	jra strcmp 
      000224                        766 4$: ; not same  
      000224 4F               [ 1]  767 	clr a 
      000225 81               [ 4]  768 	ret 
      000226                        769 5$: ; same 
      000226 A6 01            [ 1]  770 	ld a,#1 
      000228 81               [ 4]  771 	ret 
                                    772 
                                    773 
                                    774 ;---------------------------------------
                                    775 ;  copy src to dest 
                                    776 ; input:
                                    777 ;   X 		dest 
                                    778 ;   Y 		src 
                                    779 ; output: 
                                    780 ;   X 		dest 
                                    781 ;----------------------------------
      000229                        782 strcpy:
      000229 89               [ 2]  783 	pushw x 
      00022A 90 F6            [ 1]  784 1$: ld a,(y)
      00022C 27 06            [ 1]  785 	jreq 9$ 
      00022E F7               [ 1]  786 	ld (x),a 
      00022F 5C               [ 2]  787 	incw x 
      000230 90 5C            [ 2]  788 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000232 20 F6            [ 2]  789 	jra 1$ 
      000234 7F               [ 1]  790 9$:	clr (x)
      000235 85               [ 2]  791 	popw x 
      000236 81               [ 4]  792 	ret 
                                    793 
                                    794 ;---------------------------------------
                                    795 ; move memory block 
                                    796 ; input:
                                    797 ;   X 		destination 
                                    798 ;   Y 	    source 
                                    799 ;   acc16	bytes count 
                                    800 ; output:
                                    801 ;   none 
                                    802 ;--------------------------------------
                           000001   803 	INCR=1 ; increament high byte 
                           000002   804 	LB=2 ; increament low byte 
                           000002   805 	VSIZE=2
      000237                        806 move:
      000237                        807 	_vars VSIZE 
      000237 52 02            [ 2]    1     sub sp,#VSIZE 
      000239 0F 01            [ 1]  808 	clr (INCR,sp)
      00023B 0F 02            [ 1]  809 	clr (LB,sp)
      00023D 90 89            [ 2]  810 	pushw y 
      00023F 13 01            [ 2]  811 	cpw x,(1,sp) ; compare DEST to SRC 
      000241 90 85            [ 2]  812 	popw y 
      000243 27 31            [ 1]  813 	jreq move_exit ; x==y 
      000245 2B 0E            [ 1]  814 	jrmi move_down
      000247                        815 move_up: ; start from top address with incr=-1
      000247 72 BB 00 0C      [ 2]  816 	addw x,acc16
      00024B 72 B9 00 0C      [ 2]  817 	addw y,acc16
      00024F 03 01            [ 1]  818 	cpl (INCR,sp)
      000251 03 02            [ 1]  819 	cpl (LB,sp)   ; increment = -1 
      000253 20 05            [ 2]  820 	jra move_loop  
      000255                        821 move_down: ; start from bottom address with incr=1 
      000255 5A               [ 2]  822     decw x 
      000256 90 5A            [ 2]  823 	decw y
      000258 0C 02            [ 1]  824 	inc (LB,sp) ; incr=1 
      00025A                        825 move_loop:	
      00025A C6 00 0C         [ 1]  826     ld a, acc16 
      00025D CA 00 0D         [ 1]  827 	or a, acc8
      000260 27 14            [ 1]  828 	jreq move_exit 
      000262 72 FB 01         [ 2]  829 	addw x,(INCR,sp)
      000265 72 F9 01         [ 2]  830 	addw y,(INCR,sp) 
      000268 90 F6            [ 1]  831 	ld a,(y)
      00026A F7               [ 1]  832 	ld (x),a 
      00026B 89               [ 2]  833 	pushw x 
      00026C CE 00 0C         [ 2]  834 	ldw x,acc16 
      00026F 5A               [ 2]  835 	decw x 
      000270 CF 00 0C         [ 2]  836 	ldw acc16,x 
      000273 85               [ 2]  837 	popw x 
      000274 20 E4            [ 2]  838 	jra move_loop
      000276                        839 move_exit:
      000276                        840 	_drop VSIZE
      000276 5B 02            [ 2]    1     addw sp,#VSIZE 
      000278 81               [ 4]  841 	ret 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    842 
                                    843 ;-------------------------------------
                                    844 ; search text area for a line#
                                    845 ; input:
                                    846 ;	X 			line# 
                                    847 ; output:
                                    848 ;   X 			addr of line | 0 
                                    849 ;   Y           line#|insert address if not found  
                                    850 ;-------------------------------------
                           000001   851 	LL=1 ; line length 
                           000002   852 	LB=2 ; line length low byte 
                           000002   853 	VSIZE=2 
      000279                        854 search_lineno:
      000279                        855 	_vars VSIZE
      000279 52 02            [ 2]    1     sub sp,#VSIZE 
      00027B 0F 01            [ 1]  856 	clr (LL,sp)
      00027D 90 CE 00 1E      [ 2]  857 	ldw y,txtbgn
      000281                        858 search_ln_loop:
      000281 90 C3 00 20      [ 2]  859 	cpw y,txtend 
      000285 2A 10            [ 1]  860 	jrpl 8$
      000287 90 F3            [ 1]  861 	cpw x,(y)
      000289 27 0E            [ 1]  862 	jreq 9$
      00028B 2B 0A            [ 1]  863 	jrmi 8$ 
      00028D 90 E6 02         [ 1]  864 	ld a,(2,y)
      000290 6B 02            [ 1]  865 	ld (LB,sp),a 
      000292 72 F9 01         [ 2]  866 	addw y,(LL,sp)
      000295 20 EA            [ 2]  867 	jra search_ln_loop 
      000297                        868 8$: 
      000297 5F               [ 1]  869 	clrw x 	
      000298 51               [ 1]  870 	exgw x,y 
      000299                        871 9$: _drop VSIZE
      000299 5B 02            [ 2]    1     addw sp,#VSIZE 
      00029B 51               [ 1]  872 	exgw x,y   
      00029C 81               [ 4]  873 	ret 
                                    874 
                                    875 ;-------------------------------------
                                    876 ; delete line at addr
                                    877 ; move new line to insert with end of text 
                                    878 ; otherwise it would be overwritten.
                                    879 ; input:
                                    880 ;   X 		addr of line i.e DEST for move 
                                    881 ;-------------------------------------
                           000001   882 	LLEN=1
                           000003   883 	SRC=3
                           000004   884 	VSIZE=4
      00029D                        885 del_line: 
      00029D                        886 	_vars VSIZE 
      00029D 52 04            [ 2]    1     sub sp,#VSIZE 
      00029F E6 02            [ 1]  887 	ld a,(2,x) ; line length
      0002A1 6B 02            [ 1]  888 	ld (LLEN+1,sp),a 
      0002A3 0F 01            [ 1]  889 	clr (LLEN,sp)
      0002A5 90 93            [ 1]  890 	ldw y,x  
      0002A7 72 F9 01         [ 2]  891 	addw y,(LLEN,sp) ;SRC  
      0002AA 17 03            [ 2]  892 	ldw (SRC,sp),y  ;save source 
      0002AC 90 CE 00 20      [ 2]  893 	ldw y,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0002B0 90 E6 02         [ 1]  894 	ld a,(2,y)
      0002B3 90 5F            [ 1]  895 	clrw y 
      0002B5 90 97            [ 1]  896 	ld yl,a  
      0002B7 72 B9 00 20      [ 2]  897 	addw y,txtend
      0002BB 72 F2 03         [ 2]  898 	subw y,(SRC,sp) ; y=count 
      0002BE 90 CF 00 0C      [ 2]  899 	ldw acc16,y 
      0002C2 16 03            [ 2]  900 	ldw y,(SRC,sp)    ; source
      0002C4 CD 02 37         [ 4]  901 	call move
      0002C7 90 CE 00 20      [ 2]  902 	ldw y,txtend 
      0002CB 72 F2 01         [ 2]  903 	subw y,(LLEN,sp)
      0002CE 90 CF 00 20      [ 2]  904 	ldw txtend,y  
      0002D2                        905 	_drop VSIZE     
      0002D2 5B 04            [ 2]    1     addw sp,#VSIZE 
      0002D4 81               [ 4]  906 	ret 
                                    907 
                                    908 ;---------------------------------------------
                                    909 ; create a gap in text area 
                                    910 ; move new line to insert in gap with end of text
                                    911 ; otherwise it would be overwritten.
                                    912 ; input:
                                    913 ;    X 			addr gap start 
                                    914 ;    Y 			gap length 
                                    915 ; output:
                                    916 ;    X 			addr gap start 
                                    917 ;--------------------------------------------
                           000001   918 	DEST=1
                           000003   919 	SRC=3
                           000005   920 	LEN=5
                           000006   921 	VSIZE=6 
      0002D5                        922 create_gap:
      0002D5                        923 	_vars VSIZE
      0002D5 52 06            [ 2]    1     sub sp,#VSIZE 
      0002D7 1F 03            [ 2]  924 	ldw (SRC,sp),x 
      0002D9 17 05            [ 2]  925 	ldw (LEN,sp),y 
      0002DB 90 CF 00 0C      [ 2]  926 	ldw acc16,y 
      0002DF 90 93            [ 1]  927 	ldw y,x ; SRC
      0002E1 72 BB 00 0C      [ 2]  928 	addw x,acc16  
      0002E5 1F 01            [ 2]  929 	ldw (DEST,sp),x 
                                    930 ;compute size to move 	
      0002E7 CE 00 20         [ 2]  931 	ldw x,txtend 
      0002EA E6 02            [ 1]  932 	ld a,(2,x) ; pending line length 
      0002EC C7 00 0D         [ 1]  933 	ld acc8,a 
      0002EF 72 5F 00 0C      [ 1]  934 	clr acc16 
      0002F3 72 BB 00 0C      [ 2]  935 	addw x,acc16 
      0002F7 72 F0 03         [ 2]  936 	subw x,(SRC,sp)
      0002FA CF 00 0C         [ 2]  937 	ldw acc16,x ; size to move
      0002FD 1E 01            [ 2]  938 	ldw x,(DEST,sp) 
      0002FF CD 02 37         [ 4]  939 	call move
      000302 CE 00 20         [ 2]  940 	ldw x,txtend
      000305 72 FB 05         [ 2]  941 	addw x,(LEN,sp)
      000308 CF 00 20         [ 2]  942 	ldw txtend,x
      00030B                        943 9$:	_drop VSIZE 
      00030B 5B 06            [ 2]    1     addw sp,#VSIZE 
      00030D 81               [ 4]  944 	ret 
                                    945 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    946 
                                    947 ;--------------------------------------------
                                    948 ; insert line in tib into text area 
                                    949 ; first search for already existing 
                                    950 ; replace existing 
                                    951 ; if strlen(tib)==0 delete existing line
                                    952 ; input:
                                    953 ;   ptr16 				pointer to tokenized line  
                                    954 ; output:
                                    955 ;   none
                                    956 ;---------------------------------------------
                           000001   957 	DEST=1  ; text area insertion address 
                           000003   958 	SRC=3   ; str to insert address 
                           000005   959 	LINENO=5 ; line number 
                           000007   960 	LLEN=7 ; line length 
                           000008   961 	VSIZE=8  
      00030E                        962 insert_line:
      00030E                        963 	_vars VSIZE 
      00030E 52 08            [ 2]    1     sub sp,#VSIZE 
      000310 CE 00 19         [ 2]  964 	ldw x,ptr16  
      000313 C3 00 1E         [ 2]  965 	cpw x,txtbgn 
      000316 26 0D            [ 1]  966 	jrne 0$
                                    967 ;first text line 
      000318 AE 00 02         [ 2]  968 	ldw x,#2 
      00031B 72 D6 00 19      [ 4]  969 	ld a,([ptr16],x)
      00031F 5F               [ 1]  970 	clrw x 
      000320 97               [ 1]  971 	ld xl,a
      000321 1F 07            [ 2]  972 	ldw (LLEN,sp),x  
      000323 20 45            [ 2]  973 	jra 5$
      000325 72 CE 00 19      [ 5]  974 0$:	ldw x,[ptr16]
                                    975 ; new line number
      000329 1F 05            [ 2]  976 	ldw (LINENO,sp),x 
      00032B AE 00 02         [ 2]  977 	ldw x,#2 
      00032E 72 D6 00 19      [ 4]  978 	ld a,([ptr16],x)
      000332 97               [ 1]  979 	ld xl,a
                                    980 ; new line length
      000333 1F 07            [ 2]  981 	ldw (LLEN,sp),x
                                    982 ; check if that line number already exit 	
      000335 1E 05            [ 2]  983 	ldw x,(LINENO,sp)
      000337 CD 02 79         [ 4]  984 	call search_lineno 
      00033A 5D               [ 2]  985 	tnzw x 
      00033B 26 04            [ 1]  986 	jrne 2$
                                    987 ; line doesn't exit
                                    988 ; it will be inserted at this point.  	
      00033D 17 01            [ 2]  989 	ldw (DEST,sp),y 
      00033F 20 05            [ 2]  990 	jra 3$
                                    991 ; line exit delete it.
                                    992 ; it will be replaced by new one 	
      000341 1F 01            [ 2]  993 2$: ldw (DEST,sp),x 
      000343 CD 02 9D         [ 4]  994 	call del_line
      000346                        995 3$: 
                                    996 ; insert new line or leave if LLEN==3
                                    997 ; LLEN==3 means empty line 
      000346 A6 03            [ 1]  998 	ld a,#3
      000348 11 08            [ 1]  999 	cp a,(LLEN+1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00034A 27 27            [ 1] 1000 	jreq insert_ln_exit ; empty line exit.
                                   1001 ; if insertion point at txtend 
                                   1002 ; no move required 
      00034C 1E 01            [ 2] 1003 	ldw x,(DEST,sp)
      00034E C3 00 20         [ 2] 1004 	cpw x,txtend 
      000351 2A 17            [ 1] 1005 	jrpl 5$ 
                                   1006 ; must create a gap
                                   1007 ; at insertion point  
      000353 1E 01            [ 2] 1008 	ldw x,(DEST,sp)
      000355 16 07            [ 2] 1009 	ldw y,(LLEN,sp)
      000357 CD 02 D5         [ 4] 1010 	call create_gap 
                                   1011 ; move new line in gap 
      00035A 1E 07            [ 2] 1012 	ldw x,(LLEN,sp)
      00035C CF 00 0C         [ 2] 1013 	ldw acc16,x 
      00035F 90 CE 00 20      [ 2] 1014 	ldw y,txtend ;SRC 
      000363 1E 01            [ 2] 1015 	ldw x,(DEST,sp) ; dest address 
      000365 CD 02 37         [ 4] 1016 	call move 
      000368 20 09            [ 2] 1017 	jra insert_ln_exit  
      00036A                       1018 5$: ; no move required 
      00036A 1E 07            [ 2] 1019 	ldw x,(LLEN,sp) 
      00036C 72 BB 00 20      [ 2] 1020 	addw x,txtend 
      000370 CF 00 20         [ 2] 1021 	ldw txtend,x 
      000373                       1022 insert_ln_exit:	
      000373                       1023 	_drop VSIZE
      000373 5B 08            [ 2]    1     addw sp,#VSIZE 
      000375 81               [ 4] 1024 	ret
                                   1025 
                                   1026 
                                   1027 ;-----------------------------
                                   1028 ; check if text buffer full
                                   1029 ; input:
                                   1030 ;   ptr16     addr start tokenize line 
                                   1031 ;   X         buffer index 
                                   1032 ; output:
                                   1033 ;   none 
                                   1034 ;-----------------------------------
      000376                       1035 check_full:
      000376 72 BB 00 19      [ 2] 1036 	addw x,ptr16 
      00037A A3 16 E8         [ 2] 1037 	cpw x,#tib 
      00037D 25 05            [ 1] 1038 	jrult 1$
      00037F A6 01            [ 1] 1039 	ld a,#ERR_MEM_FULL
      000381 CC 07 64         [ 2] 1040 	jp tb_error 
      000384 81               [ 4] 1041 1$: ret 
                                   1042 
                                   1043 ;-----------------------------------
                                   1044 ; create token list fromm text line 
                                   1045 ; save this list in text area
                                   1046 ;  compiled line format: 
                                   1047 ;    line_no  2 bytes {0...32767}
                                   1048 ;    count    1 byte  
                                   1049 ;    tokens   variable length 
                                   1050 ;   
                                   1051 ; input:
                                   1052 ;   none
                                   1053 ; modified variables:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1054 ;   basicptr     token list buffer address 
                                   1055 ;   in.w  		 3|count, i.e. index in buffer
                                   1056 ;   count        length of line | 0  
                                   1057 ;-----------------------------------
                           000001  1058 	XSAVE=1
                           000003  1059 	BUFIDX=3
                           000004  1060 	VSIZE=4
      000385                       1061 compile:
      000385                       1062 	_vars VSIZE 
      000385 52 04            [ 2]    1     sub sp,#VSIZE 
      000387 72 1A 00 25      [ 1] 1063 	bset flags,#FCOMP 
      00038B CE 00 20         [ 2] 1064 	ldw x,txtend
      00038E CF 00 19         [ 2] 1065 	ldw ptr16,x ; code buffer start address 
      000391 AE 00 03         [ 2] 1066 	ldw x,#3
      000394 1F 03            [ 2] 1067 	ldw (BUFIDX,sp),X  
      000396 CD 03 76         [ 4] 1068 	call check_full
      000399 5F               [ 1] 1069 	clrw x 
      00039A 72 CF 00 19      [ 5] 1070 	ldw [ptr16],x ; initialize line# to zero 
      00039E CD 0B 63         [ 4] 1071 	call get_token
      0003A1 1F 01            [ 2] 1072 	ldw (XSAVE,sp),x 
      0003A3 A1 04            [ 1] 1073 	cp a,#TK_INTGR 
      0003A5 26 13            [ 1] 1074 	jrne 3$
      0003A7 A3 00 00         [ 2] 1075 	cpw x,#0 
      0003AA 2C 05            [ 1] 1076 	jrsgt 1$
      0003AC A6 0A            [ 1] 1077 	ld a,#ERR_BAD_VALUE 
      0003AE CC 07 64         [ 2] 1078 	jp tb_error ; line number must be in range {1..32767}
      0003B1 72 CF 00 19      [ 5] 1079 1$:	ldw [ptr16],x; line number
      0003B5 CD 0B 63         [ 4] 1080 2$:	call get_token
      0003B8 1F 01            [ 2] 1081 	ldw (XSAVE,sp),x 
      0003BA A1 00            [ 1] 1082 3$:	cp a,#TK_NONE 
      0003BC 26 03            [ 1] 1083 	jrne 30$
      0003BE CC 04 4F         [ 2] 1084 	jp 9$ ; end of line. 
      0003C1                       1085 30$: 	 
      0003C1 1E 03            [ 2] 1086 	ldw x,(BUFIDX,sp)
      0003C3 CD 03 76         [ 4] 1087 	call check_full 
      0003C6 16 03            [ 2] 1088 	ldw y,(BUFIDX,sp) 
      0003C8 91 D7 19         [ 4] 1089 	ld ([ptr16],y),a ; token attribute 
      0003CB 90 5C            [ 2] 1090 	incw y
      0003CD 17 03            [ 2] 1091 	ldw (BUFIDX,sp),y
      0003CF A1 01            [ 1] 1092 	cp a,#TK_COLON 
      0003D1 26 02            [ 1] 1093 	jrne 31$
      0003D3 20 E0            [ 2] 1094 	jra 2$ ; loop for next token 
      0003D5                       1095 31$: ; check for token type 
                                   1096 ; character token have 1 byte attribute, i.e. ASCII character 
      0003D5 A1 03            [ 1] 1097 	cp a,#TK_CHAR
      0003D7 26 0C            [ 1] 1098 	jrne 32$ 
      0003D9 1E 01            [ 2] 1099 	ldw x,(XSAVE,sp)
      0003DB 9F               [ 1] 1100 	ld a,xl 
      0003DC 91 D7 19         [ 4] 1101 	ld ([ptr16],y),a
      0003DF 90 5C            [ 2] 1102 	incw y 
      0003E1 17 03            [ 2] 1103 	ldw (BUFIDX,sp),y 
      0003E3 20 D0            [ 2] 1104 	jra 2$ 
      0003E5                       1105 32$:
      0003E5 A1 0A            [ 1] 1106 	cp a,#TK_ARRAY 
                                   1107 ; this token have no attribute. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0003E7 27 CC            [ 1] 1108 	jreq 2$ 
      0003E9 A1 02            [ 1] 1109 	cp a,#TK_QSTR 
      0003EB 26 25            [ 1] 1110 	jrne 4$
                                   1111 ; copy string as .asciz 	
      0003ED AE 17 38         [ 2] 1112 	ldw x,#pad 
      0003F0 CD 02 0B         [ 4] 1113 	call strlen
      0003F3 5C               [ 2] 1114 	incw x  
      0003F4 CD 03 76         [ 4] 1115 	call check_full 
      0003F7 90 AE 17 38      [ 2] 1116 	ldw y,#pad 
      0003FB CE 00 19         [ 2] 1117 	ldw x,ptr16
      0003FE 72 FB 03         [ 2] 1118 	addw x,(BUFIDX,sp)	
      000401 CD 02 29         [ 4] 1119 	call strcpy 
      000404 AE 17 38         [ 2] 1120 	ldw x,#pad 
      000407 CD 02 0B         [ 4] 1121 	call strlen 
      00040A 5C               [ 2] 1122 	incw x
      00040B 72 FB 03         [ 2] 1123 	addw x,(BUFIDX,sp) 
      00040E 1F 03            [ 2] 1124 	ldw (BUFIDX,sp),x
      000410 20 A3            [ 2] 1125 	jra 2$  
      000412 A1 04            [ 1] 1126 4$: cp a,#TK_INTGR
      000414 25 9F            [ 1] 1127 	jrult 2$ ; 
      000416 A1 08            [ 1] 1128 	cp a,#TK_CFUNC 
      000418 22 9B            [ 1] 1129 	Jrugt 2$ ; those tokens have no attributes 
      00041A 1E 01            [ 2] 1130 	ldw x,(XSAVE,sp) 
      00041C 16 03            [ 2] 1131 	ldw y,(BUFIDX,sp)
      00041E 91 DF 19         [ 5] 1132 	ldw ([ptr16],y),x ; the attribute is an address or integer. 
      000421 A3 14 C5         [ 2] 1133 	cpw x,#remark ; is this a comment? 
      000424 27 09            [ 1] 1134 	jreq 5$	
      000426 72 A9 00 02      [ 2] 1135 	addw y,#2 
      00042A 17 03            [ 2] 1136 	ldw (BUFIDX,sp),y 
      00042C CC 03 B5         [ 2] 1137 	jp 2$
      00042F                       1138 5$:
                                   1139 ; copy commment in code buffer and
                                   1140 ; skip to end of line.  
      00042F 72 A9 00 02      [ 2] 1141 	addw y,#2 ; skip exec address 
      000433 17 03            [ 2] 1142 	ldw (BUFIDX,sp),y 
      000435 CE 00 19         [ 2] 1143 	ldw x,ptr16 
      000438 72 FB 03         [ 2] 1144 	addw x,(BUFIDX,sp)
      00043B 90 CE 00 00      [ 2] 1145 	ldw y,in.w 
      00043F 72 A9 16 E8      [ 2] 1146 	addw y,#tib 
      000443 CD 02 29         [ 4] 1147 	call strcpy 	
      000446 CD 02 0B         [ 4] 1148 	call strlen 
      000449 5C               [ 2] 1149 	incw x ; skip string 0. 
      00044A 72 FB 03         [ 2] 1150 	addw x,(BUFIDX,sp)
      00044D 1F 03            [ 2] 1151 	ldw (BUFIDX,sp),x 
      00044F                       1152 9$: 
      00044F AE 00 02         [ 2] 1153 	ldw x,#2
      000452 16 03            [ 2] 1154 	ldw y,(BUFIDX,sp)
      000454 90 9F            [ 1] 1155 	ld a,yl 
      000456 72 D7 00 19      [ 4] 1156 	ld ([ptr16],x),a ; bytes count   	
      00045A 72 CE 00 19      [ 5] 1157 	ldw x,[ptr16]
      00045E 27 09            [ 1] 1158 	jreq 10$
      000460 CD 03 0E         [ 4] 1159 	call insert_line
      000463 72 5F 00 03      [ 1] 1160 	clr  count 
      000467 20 0F            [ 2] 1161 	jra  11$ 
      000469                       1162 10$: ; line# is zero 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000469 CE 00 19         [ 2] 1163 	ldw x,ptr16 
      00046C CF 00 04         [ 2] 1164 	ldw basicptr,x 
      00046F E6 02            [ 1] 1165 	ld a,(2,x)
      000471 C7 00 03         [ 1] 1166 	ld count,a 
      000474 35 03 00 01      [ 1] 1167 	mov in,#3 
      000478                       1168 11$:
      000478                       1169 	_drop VSIZE 
      000478 5B 04            [ 2]    1     addw sp,#VSIZE 
      00047A 72 1B 00 25      [ 1] 1170 	bres flags,#FCOMP 
      00047E 81               [ 4] 1171 	ret 
                                   1172 
                                   1173 ;------------------------------------
                                   1174 ;  set all variables to zero 
                                   1175 ; input:
                                   1176 ;   none 
                                   1177 ; output:
                                   1178 ;	none
                                   1179 ;------------------------------------
      00047F                       1180 clear_vars:
      00047F AE 00 28         [ 2] 1181 	ldw x,#vars 
      000482 90 AE 00 34      [ 2] 1182 	ldw y,#2*26 
      000486 7F               [ 1] 1183 1$:	clr (x)
      000487 5C               [ 2] 1184 	incw x 
      000488 90 5A            [ 2] 1185 	decw y 
      00048A 26 FA            [ 1] 1186 	jrne 1$
      00048C 81               [ 4] 1187 	ret 
                                   1188 
                                   1189 ;-------------------------------------
                                   1190 ; check if A is a letter 
                                   1191 ; input:
                                   1192 ;   A 			character to test 
                                   1193 ; output:
                                   1194 ;   C flag      1 true, 0 false 
                                   1195 ;-------------------------------------
      00048D                       1196 is_alpha:
      00048D A1 41            [ 1] 1197 	cp a,#'A 
      00048F 8C               [ 1] 1198 	ccf
      000490 24 0B            [ 1] 1199 	jrnc 9$ 
      000492 A1 5B            [ 1] 1200 	cp a,#'Z+1 
      000494 25 07            [ 1] 1201 	jrc 9$ 
      000496 A1 61            [ 1] 1202 	cp a,#'a 
      000498 8C               [ 1] 1203 	ccf 
      000499 24 02            [ 1] 1204 	jrnc 9$
      00049B A1 7B            [ 1] 1205 	cp a,#'z+1   
      00049D 81               [ 4] 1206 9$: ret 	
                                   1207 
                                   1208 ;------------------------------------
                                   1209 ; check if character in {'0'..'9'}
                                   1210 ; input:
                                   1211 ;    A  character to test
                                   1212 ; output:
                                   1213 ;    Carry  0 not digit | 1 digit
                                   1214 ;------------------------------------
      00049E                       1215 is_digit:
      00049E A1 30            [ 1] 1216 	cp a,#'0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004A0 25 03            [ 1] 1217 	jrc 1$
      0004A2 A1 3A            [ 1] 1218     cp a,#'9+1
      0004A4 8C               [ 1] 1219 	ccf 
      0004A5 8C               [ 1] 1220 1$:	ccf 
      0004A6 81               [ 4] 1221     ret
                                   1222 
                                   1223 ;-------------------------------------
                                   1224 ;  program initialization entry point 
                                   1225 ;-------------------------------------
                           000001  1226 	MAJOR=1
                           000000  1227 	MINOR=0
      0004A7 0A 0A 54 69 6E 79 20  1228 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      0004ED                       1229 cold_start:
                                   1230 ;set stack 
      0004ED AE 17 FF         [ 2] 1231 	ldw x,#STACK_EMPTY
      0004F0 94               [ 1] 1232 	ldw sp,x   
                                   1233 ; clear all ram 
      0004F1 7F               [ 1] 1234 0$: clr (x)
      0004F2 5A               [ 2] 1235 	decw x 
      0004F3 26 FC            [ 1] 1236 	jrne 0$
                                   1237 ; activate pull up on all inputs 
      0004F5 A6 FF            [ 1] 1238 	ld a,#255 
      0004F7 C7 50 03         [ 1] 1239 	ld PA_CR1,a 
      0004FA C7 50 08         [ 1] 1240 	ld PB_CR1,a 
      0004FD C7 50 0D         [ 1] 1241 	ld PC_CR1,a 
      000500 C7 50 12         [ 1] 1242 	ld PD_CR1,a 
      000503 C7 50 17         [ 1] 1243 	ld PE_CR1,a 
      000506 C7 50 1C         [ 1] 1244 	ld PF_CR1,a 
      000509 C7 50 21         [ 1] 1245 	ld PG_CR1,a 
      00050C C7 50 2B         [ 1] 1246 	ld PI_CR1,a
                                   1247 ; set LD2 pin as output and turn it on
      00050F 72 1A 50 0D      [ 1] 1248     bset PC_CR1,#LED2_BIT
      000513 72 1A 50 0E      [ 1] 1249     bset PC_CR2,#LED2_BIT
      000517 72 1A 50 0C      [ 1] 1250     bset PC_DDR,#LED2_BIT
      00051B 72 1A 50 0A      [ 1] 1251 	bset PC_ODR,#LED2_BIT 
                                   1252 ; disable schmitt triggers on Arduino CN4 analog inputs
      00051F 55 00 3F 54 07   [ 1] 1253 	mov ADC_TDRL,0x3f
                                   1254 ; disable peripherals clocks
                                   1255 ;	clr CLK_PCKENR1 
                                   1256 ;	clr CLK_PCKENR2
      000524 72 5F 50 F2      [ 1] 1257 	clr AWU_TBR 
      000528 72 14 50 CA      [ 1] 1258 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1259 ; select internal clock no divisor: 16 Mhz 	
      00052C A6 E1            [ 1] 1260 	ld a,#CLK_SWR_HSI 
      00052E 5F               [ 1] 1261 	clrw x  
      00052F CD 00 9D         [ 4] 1262     call clock_init 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000532 CD 00 C0         [ 4] 1263 	call timer4_init
      000535 CD 00 B3         [ 4] 1264 	call timer2_init
                                   1265 ; UART1 at 115200 BAUD
      000538 CD 01 89         [ 4] 1266 	call uart1_init
                                   1267 ; activate PE_4 (user button interrupt)
      00053B 72 18 50 18      [ 1] 1268     bset PE_CR2,#USR_BTN_BIT 
                                   1269 ; display system information
      00053F AE 04 A7         [ 2] 1270 	ldw x,#software 
      000542 CD 01 D7         [ 4] 1271 	call puts 
      000545 A6 01            [ 1] 1272 	ld a,#MAJOR 
      000547 C7 00 0D         [ 1] 1273 	ld acc8,a 
      00054A 5F               [ 1] 1274 	clrw x 
      00054B CF 00 0B         [ 2] 1275 	ldw acc24,x 
      00054E A6 0A            [ 1] 1276 	ld a,#10 
      000550 CD 08 72         [ 4] 1277 	call prti24 
      000553 A6 2E            [ 1] 1278 	ld a,#'.
      000555 CD 01 C4         [ 4] 1279 	call putc 
      000558 A6 00            [ 1] 1280 	ld a,#MINOR 
      00055A C7 00 0D         [ 1] 1281 	ld acc8,a 
      00055D 5F               [ 1] 1282 	clrw x 
      00055E CF 00 0B         [ 2] 1283 	ldw acc24,x 
      000561 A6 0A            [ 1] 1284 	ld a,#10 
      000563 CD 08 72         [ 4] 1285 	call prti24 
      000566 A6 0D            [ 1] 1286 	ld a,#CR 
      000568 CD 01 C4         [ 4] 1287 	call putc 
      00056B CD 18 AF         [ 4] 1288 	call seek_fdrive 
      00056E 9A               [ 1] 1289 	rim 
      00056F 72 5C 00 17      [ 1] 1290 	inc seedy+1 
      000573 72 5C 00 15      [ 1] 1291 	inc seedx+1 
      000577 CD 05 FF         [ 4] 1292 	call clear_basic
      00057A CD 11 48         [ 4] 1293 	call ubound 
                                   1294 ;	jra 2$	
                                   1295 ; 150 msec beep 
      00057D AE 00 96         [ 2] 1296 	ldw x,#150 
      000580 90 AE 03 E6      [ 2] 1297 	ldw y,#998 
      000584 CD 17 33         [ 4] 1298 	call beep  
      000587 72 1B 50 0A      [ 1] 1299 2$:	bres PC_ODR,#LED2_BIT	
      00058B CD 05 94         [ 4] 1300 	call warm_init
      00058E CD 05 C1         [ 4] 1301 	call load_autorun
      000591 CC 07 B0         [ 2] 1302     jp cmd_line  
                                   1303 
      000594                       1304 warm_init:
      000594 72 5F 00 25      [ 1] 1305 	clr flags 
      000598 72 5F 00 22      [ 1] 1306 	clr loop_depth 
      00059C 35 04 00 26      [ 1] 1307 	mov tab_width,#TAB_WIDTH 
      0005A0 35 0A 00 0A      [ 1] 1308 	mov base,#10 
      0005A4 AE 00 00         [ 2] 1309 	ldw x,#0 
      0005A7 CF 00 04         [ 2] 1310 	ldw basicptr,x 
      0005AA CF 00 00         [ 2] 1311 	ldw in.w,x 
      0005AD 72 5F 00 03      [ 1] 1312 	clr count 
      0005B1 81               [ 4] 1313 	ret 
                                   1314 
                                   1315 ;--------------------------
                                   1316 ; called by tb_error when
                                   1317 ; flag FAUTORUN is set.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1318 ; There is a bug in autorun 
                                   1319 ; program so cancel it.
                                   1320 ;---------------------------
      0005B2                       1321 cancel_autorun:
      0005B2 AE 40 00         [ 2] 1322 	ldw x,#AUTORUN_NAME 
      0005B5 CF 00 19         [ 2] 1323 	ldw farptr+1,x 
      0005B8 4F               [ 1] 1324 	clr a
      0005B9 5F               [ 1] 1325 	clrw x  
      0005BA C7 00 18         [ 1] 1326 	ld farptr,a 
      0005BD CD 00 F1         [ 4] 1327 	call write_byte 
      0005C0 81               [ 4] 1328 	ret 
                                   1329 
                                   1330 
                                   1331 ;--------------------------
                                   1332 ; if autorun file defined 
                                   1333 ; in eeprom address AUTORUN_NAME 
                                   1334 ; load and run it.
                                   1335 ;-------------------------
      0005C1                       1336 load_autorun:
      0005C1 90 AE 40 00      [ 2] 1337 	ldw y,#AUTORUN_NAME
      0005C5 90 F6            [ 1] 1338 	ld a,(y)
      0005C7 27 20            [ 1] 1339 	jreq 9$
      0005C9 CD 19 0D         [ 4] 1340 	call search_file
      0005CC 25 05            [ 1] 1341 	jrc 2$ 
                                   1342 ; if file doesn't exit
      0005CE CD 05 B2         [ 4] 1343 	call cancel_autorun
      0005D1 20 16            [ 2] 1344 	jra 9$ 
      0005D3 CD 1A 17         [ 4] 1345 2$:	call load_file
      0005D6 AE 40 00         [ 2] 1346 	ldw x,#AUTORUN_NAME 
      0005D9 CD 01 D7         [ 4] 1347 	call puts
      0005DC AE 05 EA         [ 2] 1348 	ldw x,#autorun_msg 
      0005DF CD 01 D7         [ 4] 1349 	call puts 
      0005E2 72 1C 00 25      [ 1] 1350 	bset flags,#FAUTORUN 
      0005E6 CC 16 FC         [ 2] 1351 	jp run_it    
      0005E9 81               [ 4] 1352 9$: ret 	
                                   1353 
      0005EA 20 6C 6F 61 64 65 64  1354 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1355 ;---------------------------
                                   1356 ; reset BASIC text variables 
                                   1357 ; and clear variables 
                                   1358 ;---------------------------
      0005FF                       1359 clear_basic:
      0005FF 72 5F 00 03      [ 1] 1360 	clr count 
      000603 AE 00 5C         [ 2] 1361 	ldw x,#free_ram 
      000606 CF 00 1E         [ 2] 1362 	ldw txtbgn,x 
      000609 CF 00 20         [ 2] 1363 	ldw txtend,x 
      00060C CD 04 7F         [ 4] 1364 	call clear_vars 
      00060F 81               [ 4] 1365 	ret 
                                   1366 
                                   1367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1368 ;;   Tiny BASIC error messages     ;;
                                   1369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000610                       1370 err_msg:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000610 00 00 06 2E 06 3C 06  1371 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             4B 06 65 06 75
      00061C 06 8C 06 A3 06 BE 06  1372 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             D0 06 E2
      000626 06 EF 07 23 07 39 07  1373 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace    
             4E
                                   1374 
      00062E 0A 4D 65 6D 6F 72 79  1375 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      00063C 0A 73 79 6E 74 61 78  1376 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      00064B 0A 6D 61 74 68 20 6F  1377 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      000665 0A 64 69 76 69 73 69  1378 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      000675 0A 69 6E 76 61 6C 69  1379 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      00068C 0A 72 75 6E 20 74 69  1380 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      0006A3 0A 63 6F 6D 6D 61 6E  1381 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      0006BE 0A 64 75 70 6C 69 63  1382 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      0006D0 0A 46 69 6C 65 20 6E  1383 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      0006E2 0A 62 61 64 20 76 61  1384 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      0006EF 0A 46 69 6C 65 20 69  1385 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
      000723 0A 4E 6F 20 64 61 74  1386 err_no_data: .asciz "\nNo data line found.\n"
             61 20 6C 69 6E 65 20
             66 6F 75 6E 64 2E 0A
             00
      000739 0A 4E 6F 20 70 72 6F  1387 err_no_prog: .asciz "\nNo program in RAM!\n"
             67 72 61 6D 20 69 6E
             20 52 41 4D 21 0A 00
      00074E 0A 46 69 6C 65 20 73  1388 err_no_fspace: .asciz "\nFile system full.\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



             79 73 74 65 6D 20 66
             75 6C 6C 2E 0A 00
                                   1389 
                                   1390 ;rt_msg: .asciz "last token id: "
                                   1391 
      000762                       1392 syntax_error:
      000762 A6 02            [ 1] 1393 	ld a,#ERR_SYNTAX 
                                   1394 
      000764                       1395 tb_error:
      000764 AE 06 10         [ 2] 1396 	ldw x, #err_msg 
      000767 72 5F 00 0C      [ 1] 1397 	clr acc16 
      00076B 48               [ 1] 1398 	sll a
      00076C 72 59 00 0C      [ 1] 1399 	rlc acc16  
      000770 C7 00 0D         [ 1] 1400 	ld acc8, a 
      000773 72 BB 00 0C      [ 2] 1401 	addw x,acc16 
      000777 FE               [ 2] 1402 	ldw x,(x)
      000778 CD 01 D7         [ 4] 1403 	call puts
      00077B 72 0B 00 25 18   [ 2] 1404 	btjf flags,#FCOMP, 1$
      000780 AE 16 E8         [ 2] 1405 	ldw x,#tib
      000783 CD 01 D7         [ 4] 1406 	call puts 
      000786 A6 0D            [ 1] 1407 	ld a,#CR 
      000788 CD 01 C4         [ 4] 1408 	call putc
      00078B CE 00 00         [ 2] 1409 	ldw x,in.w
      00078E CD 01 FF         [ 4] 1410 	call spaces
      000791 A6 5E            [ 1] 1411 	ld a,#'^
      000793 CD 01 C4         [ 4] 1412 	call putc 
      000796 20 11            [ 2] 1413 	jra 6$
      000798 CE 00 04         [ 2] 1414 1$:	ldw x,basicptr
      00079B C6 00 01         [ 1] 1415 	ld a,in 
      00079E CD 12 5A         [ 4] 1416 	call prt_basic_line
      0007A1 72 0D 00 25 03   [ 2] 1417 	btjf flags,#FAUTORUN ,2$
      0007A6 CD 05 B2         [ 4] 1418 	call cancel_autorun  
      0007A9                       1419 2$:
                                   1420 ;	ldw x,#rt_msg 
                                   1421 ;	call puts 
                                   1422 ;	clrw x 
                                   1423 ;	ld a,in.saved 
                                   1424 ;	ld xl,a 
                                   1425 ;	ld a,([basicptr],x)
                                   1426 ;	clrw x 
                                   1427 ;	ld xl,a 
                                   1428 ;	call print_int 
      0007A9 AE 17 FF         [ 2] 1429 6$: ldw x,#STACK_EMPTY 
      0007AC 94               [ 1] 1430     ldw sp,x
      0007AD                       1431 warm_start:
      0007AD CD 05 94         [ 4] 1432 	call warm_init
                                   1433 ;----------------------------
                                   1434 ;   BASIC interpreter
                                   1435 ;----------------------------
      0007B0                       1436 cmd_line: ; user interface 
      0007B0 72 5F 00 01      [ 1] 1437 	clr in 
      0007B4 A6 0D            [ 1] 1438 	ld a,#CR 
      0007B6 CD 01 C4         [ 4] 1439 	call putc 
      0007B9 A6 3E            [ 1] 1440 	ld a,#'> 
      0007BB CD 01 C4         [ 4] 1441 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0007BE CD 09 E4         [ 4] 1442 	call readln
      0007C1 CD 03 85         [ 4] 1443 	call compile
                                   1444 ; if text begin with a line number
                                   1445 ; the compiler set count to zero    
                                   1446 ; so code is not interpreted
      0007C4 72 5D 00 03      [ 1] 1447 	tnz count 
      0007C8 27 E6            [ 1] 1448 	jreq cmd_line
                                   1449 ; if direct command 
                                   1450 ; it's ready to interpret 
                                   1451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1452 ;; This is the interpreter loop
                                   1453 ;; for each BASIC code line. 
                                   1454 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0007CA                       1455 interpreter: 
      0007CA C6 00 01         [ 1] 1456 	ld a,in 
      0007CD C1 00 03         [ 1] 1457 	cp a,count 
      0007D0 2B 26            [ 1] 1458 	jrmi 0$
      0007D2 72 01 00 25 D9   [ 2] 1459 	btjf flags, #FRUN, cmd_line
                                   1460 ;next BASIC line
      0007D7 CE 00 04         [ 2] 1461 	ldw x,basicptr
      0007DA E6 02            [ 1] 1462 	ld a,(2,x) ; line length 
      0007DC C7 00 0D         [ 1] 1463 	ld acc8,a 
      0007DF 72 5F 00 0C      [ 1] 1464 	clr acc16 
      0007E3 72 BB 00 0C      [ 2] 1465 	addw x,acc16
      0007E7 C3 00 20         [ 2] 1466 	cpw x,txtend 
      0007EA 2A C1            [ 1] 1467 	jrpl warm_start
      0007EC CF 00 04         [ 2] 1468 	ldw basicptr,x ; start of next line  
      0007EF E6 02            [ 1] 1469 	ld a,(2,x)
      0007F1 C7 00 03         [ 1] 1470 	ld count,a 
      0007F4 35 03 00 01      [ 1] 1471 	mov in,#3 ; skip first 3 bytes of line 
      0007F8                       1472 0$: 
      0007F8 CD 08 21         [ 4] 1473 	call next_token
      0007FB 5D               [ 2] 1474 	tnzw x 
      0007FC 2B 1C            [ 1] 1475 	jrmi 4$ 
      0007FE A1 01            [ 1] 1476 	cp a,#TK_COLON 
      000800 27 C8            [ 1] 1477 	jreq interpreter 
      000802 A1 05            [ 1] 1478 	cp a,#TK_VAR
      000804 26 05            [ 1] 1479 	jrne 2$
      000806 CD 11 74         [ 4] 1480 	call let02  
      000809 20 BF            [ 2] 1481 	jra interpreter 
      00080B                       1482 2$:	
      00080B A1 0A            [ 1] 1483 	cp a,#TK_ARRAY 
      00080D 26 08            [ 1] 1484 	jrne 3$
      00080F CD 0F 29         [ 4] 1485 	call get_array_element
      000812 CD 11 74         [ 4] 1486 	call let02 
      000815 20 B3            [ 2] 1487 	jra interpreter 
      000817                       1488 3$:	
      000817 CC 07 62         [ 2] 1489 	jp syntax_error 
      00081A                       1490 4$:
      00081A A1 06            [ 1] 1491 	cp a,#TK_CMD
      00081C 26 F9            [ 1] 1492 	jrne 3$
      00081E FD               [ 4] 1493 	call (x) 
      00081F 20 A9            [ 2] 1494 	jra interpreter 
                                   1495 
                                   1496 		
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1497 ;--------------------------
                                   1498 ; extract next token from
                                   1499 ; token list 
                                   1500 ; basicptr -> base address 
                                   1501 ; in  -> offset in list array 
                                   1502 ; output:
                                   1503 ;   A 		token attribute
                                   1504 ;   X 		token value if there is one
                                   1505 ;----------------------------------------
      000821                       1506 next_token:
      000821 5F               [ 1] 1507 	clrw x 
      000822 C6 00 01         [ 1] 1508 	ld a,in 
      000825 C0 00 03         [ 1] 1509 	sub a,count ; don't replace sub by cp.  
      000828 2B 01            [ 1] 1510 	jrmi 0$
      00082A 81               [ 4] 1511 	ret  ; end of BASIC line 
      00082B                       1512 0$: 
      00082B 55 00 01 00 02   [ 1] 1513 	mov in.saved,in 
      000830 90 CE 00 04      [ 2] 1514 	ldw y,basicptr 
      000834 72 B9 00 00      [ 2] 1515 	addw y,in.w 
      000838 90 F6            [ 1] 1516 	ld a,(y)
      00083A 90 5C            [ 2] 1517 	incw y  
      00083C A1 0A            [ 1] 1518 	cp a,#TK_ARRAY
      00083E 2A 29            [ 1] 1519 	jrpl 9$  ; no attribute for these
      000840 A1 04            [ 1] 1520 	cp a,#TK_INTGR
      000842 2B 08            [ 1] 1521 	jrmi 1$
                                   1522 ; attribute type WORD 	
      000844 93               [ 1] 1523 	ldw x,y 
      000845 FE               [ 2] 1524 	ldw x,(x)
      000846 72 A9 00 02      [ 2] 1525 	addw y,#2  
      00084A 20 1D            [ 2] 1526 	jra 9$
      00084C                       1527 1$: ; 
      00084C A1 03            [ 1] 1528 	cp a,#TK_CHAR
      00084E 26 0A            [ 1] 1529 	jrne 2$
      000850 90 F6            [ 1] 1530 	ld a,(y)
      000852 90 5C            [ 2] 1531 	incw y
      000854 5F               [ 1] 1532 	clrw x 
      000855 97               [ 1] 1533 	ld xl,a 
      000856 A6 03            [ 1] 1534 	ld a,#TK_CHAR
      000858 20 0F            [ 2] 1535 	jra 9$ 
      00085A A1 02            [ 1] 1536 2$:	cp a,#TK_QSTR 
      00085C 26 0B            [ 1] 1537 	jrne 9$
      00085E 93               [ 1] 1538 	ldw x,y 
                                   1539 ; move pointer after string 
      00085F 90 7D            [ 1] 1540 3$:	tnz (y)
      000861 27 04            [ 1] 1541 	jreq 4$
      000863 90 5C            [ 2] 1542 	incw y
      000865 20 F8            [ 2] 1543 	jra 3$ 
      000867 90 5C            [ 2] 1544 4$:	incw y 
      000869 72 B2 00 04      [ 2] 1545 9$: subw y,basicptr 
      00086D 90 CF 00 00      [ 2] 1546     ldw in.w,y 
      000871 81               [ 4] 1547 	ret	
                                   1548 
                                   1549 
                                   1550 ;----------------------------------------
                                   1551 ;   DEBUG support functions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1552 ;----------------------------------------
                           000000  1553 .if DEBUG 
                                   1554 
                                   1555 ; turn LED on 
                                   1556 ledon:
                                   1557     bset PC_ODR,#LED2_BIT
                                   1558     ret 
                                   1559 
                                   1560 ; turn LED off 
                                   1561 ledoff:
                                   1562     bres PC_ODR,#LED2_BIT 
                                   1563     ret 
                                   1564 
                                   1565 ; invert LED status 
                                   1566 ledtoggle:
                                   1567     ld a,#LED2_MASK
                                   1568     xor a,PC_ODR
                                   1569     ld PC_ODR,a
                                   1570     ret 
                                   1571 
                                   1572 left_paren:
                                   1573 	ld a,#SPACE 
                                   1574 	call putc
                                   1575 	ld a,#'( 
                                   1576 	call putc 	
                                   1577 	ret 
                                   1578 
                                   1579 ;------------------------------
                                   1580 ; print 8 bit register 
                                   1581 ; input:
                                   1582 ;   X  point to register name 
                                   1583 ;   A  register value to print 
                                   1584 ; output:
                                   1585 ;   none
                                   1586 ;------------------------------- 
                                   1587 prt_reg8:
                                   1588 	push a 
                                   1589 	call puts 
                                   1590 	ld a,(1,sp) 
                                   1591 	ld acc8,a 
                                   1592 	clrw x 
                                   1593 	ld xl,a 
                                   1594 	mov base,#16
                                   1595 	call print_int 
                                   1596 	call left_paren 
                                   1597 	pop a 
                                   1598 	clrw x 
                                   1599 	ld xl,a 
                                   1600 	mov base,#10 
                                   1601 	call print_int  
                                   1602 	ld a,#') 
                                   1603 	call putc
                                   1604 	ret
                                   1605 
                                   1606 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1607 ; print 16 bits register 
                                   1608 ; input:
                                   1609 ;   X   point register name 
                                   1610 ;   Y   register value to print 
                                   1611 ; output:
                                   1612 ;  none
                                   1613 ;--------------------------------
                                   1614 prt_reg16: 
                                   1615 	pushw y 
                                   1616 	call puts 
                                   1617 	ldw x,(1,sp) 
                                   1618 	mov base,#16 
                                   1619 	call print_int  
                                   1620 	call left_paren 
                                   1621 	popw x 
                                   1622 	mov base,#10 
                                   1623 	call print_int  
                                   1624 	ld a,#') 
                                   1625 	call putc
                                   1626 	ret 
                                   1627 
                                   1628 ;------------------------------------
                                   1629 ; print registers contents saved on
                                   1630 ; stack by trap interrupt.
                                   1631 ;------------------------------------
                                   1632 print_registers:
                                   1633 	ldw x,#STATES
                                   1634 	call puts
                                   1635 ; print EPC 
                                   1636 	ldw x, #REG_EPC
                                   1637 	call puts 
                                   1638 	ld a, (11,sp)
                                   1639 	ld acc8,a 
                                   1640 	ld a, (10,sp) 
                                   1641 	ld acc16,a 
                                   1642 	ld a,(9,sp) 
                                   1643 	ld acc24,a
                                   1644 	clrw x  
                                   1645 	ld a,#16
                                   1646 	call prti24  
                                   1647 ; print X
                                   1648 	ldw x,#REG_X
                                   1649 	ldw y,(5,sp)
                                   1650 	call prt_reg16  
                                   1651 ; print Y 
                                   1652 	ldw x,#REG_Y
                                   1653 	ldw y, (7,sp)
                                   1654 	call prt_reg16  
                                   1655 ; print A 
                                   1656 	ldw x,#REG_A
                                   1657 	ld a, (4,sp) 
                                   1658 	call prt_reg8
                                   1659 ; print CC 
                                   1660 	ldw x,#REG_CC 
                                   1661 	ld a, (3,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1662 	call prt_reg8 
                                   1663 ; print SP 
                                   1664 	ldw x,#REG_SP
                                   1665 	ldw y,sp 
                                   1666 	addw y,#12
                                   1667 	call prt_reg16  
                                   1668 	ld a,#'\n' 
                                   1669 	call putc
                                   1670 	ret
                                   1671 
                                   1672 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
                                   1673 REG_EPC: .asciz "EPC:"
                                   1674 REG_Y:   .asciz "\nY:" 
                                   1675 REG_X:   .asciz "\nX:"
                                   1676 REG_A:   .asciz "\nA:" 
                                   1677 REG_CC:  .asciz "\nCC:"
                                   1678 REG_SP:  .asciz "\nSP:"
                                   1679 
                                   1680 .endif ; DEBUG 
                                   1681 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1682 
                                   1683 
                                   1684 ;------------------------------------
                                   1685 ; print integer in acc24 
                                   1686 ; input:
                                   1687 ;	acc24 		integer to print 
                                   1688 ;	A 			numerical base for conversion 
                                   1689 ;               if bit 7 is set add a space at print end.
                                   1690 ;   XL 			field width, 0 -> no fill.
                                   1691 ;  output:
                                   1692 ;    none 
                                   1693 ;------------------------------------
                           000001  1694 	WIDTH = 1
                           000002  1695 	BASE = 2
                           000003  1696 	ADD_SPACE=3 ; add a space after number 
                           000003  1697 	VSIZE = 3
      000872                       1698 prti24:
      000872                       1699 	_vars VSIZE 
      000872 52 03            [ 2]    1     sub sp,#VSIZE 
      000874 0F 03            [ 1] 1700 	clr (ADD_SPACE,sp)
      000876 A5 80            [ 1] 1701 	bcp a,#0x80 
      000878 27 02            [ 1] 1702 	jreq 0$ 
      00087A 03 03            [ 1] 1703 	cpl (ADD_SPACE,sp)
      00087C A4 1F            [ 1] 1704 0$:	and a,#31 
      00087E 6B 02            [ 1] 1705 	ld (BASE,sp),a
      000880 9F               [ 1] 1706 	ld a,xl
      000881 6B 01            [ 1] 1707 	ld (WIDTH,sp),a 
      000883 7B 02            [ 1] 1708 	ld a, (BASE,sp)  
      000885 CD 09 18         [ 4] 1709     call itoa  ; conversion entier en  .asciz
      000888 7B 01            [ 1] 1710 1$: ld a,(WIDTH,sp)
      00088A 27 1F            [ 1] 1711 	jreq 4$
      00088C C7 00 0D         [ 1] 1712 	ld acc8,a 
      00088F 89               [ 2] 1713 	pushw x 
      000890 CD 02 0B         [ 4] 1714 	call strlen 
      000893 9F               [ 1] 1715 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000894 85               [ 2] 1716 	popw x 
      000895 31 00 0D         [ 3] 1717 	exg a,acc8 
      000898 C0 00 0D         [ 1] 1718 	sub a,acc8 
      00089B 2B 0E            [ 1] 1719 	jrmi 4$
      00089D 6B 01            [ 1] 1720 	ld (WIDTH,sp),a 
      00089F A6 20            [ 1] 1721 	ld  a,#SPACE
      0008A1 0D 01            [ 1] 1722 3$: tnz (WIDTH,sp)
      0008A3 27 06            [ 1] 1723 	jreq 4$
      0008A5 5A               [ 2] 1724 	decw x 
      0008A6 F7               [ 1] 1725 	ld (x),a 
      0008A7 0A 01            [ 1] 1726 	dec (WIDTH,sp) 
      0008A9 20 F6            [ 2] 1727 	jra 3$
      0008AB                       1728 4$: 
      0008AB CD 01 D7         [ 4] 1729 	call puts 
      0008AE 0D 03            [ 1] 1730 	tnz (ADD_SPACE,sp)
      0008B0 27 05            [ 1] 1731 	jreq 5$
      0008B2 A6 20            [ 1] 1732     ld a,#SPACE 
      0008B4 CD 01 C4         [ 4] 1733 	call putc 
      0008B7                       1734 5$: _drop VSIZE 
      0008B7 5B 03            [ 2]    1     addw sp,#VSIZE 
      0008B9 81               [ 4] 1735     ret	
                                   1736 
                                   1737 ;-----------------------------------
                                   1738 ; print a 16 bit integer 
                                   1739 ; using variable 'base' as conversion
                                   1740 ; format.
                                   1741 ; input:
                                   1742 ;   X       integer to print 
                                   1743 ;   base    conversion base 
                                   1744 ; output:
                                   1745 ;   none 
                                   1746 ;-----------------------------------
                           000001  1747 	SIGN=1
                           000001  1748 	VSIZE=1
      0008BA                       1749 print_int: 
      0008BA                       1750 	_vars VSIZE 
      0008BA 52 01            [ 2]    1     sub sp,#VSIZE 
      0008BC 0F 01            [ 1] 1751 	clr (SIGN,sp)
      0008BE 90 AE 17 5F      [ 2] 1752 	ldw y,#pad+PAD_SIZE-1 
      0008C2 90 7F            [ 1] 1753 	clr (y)
      0008C4 C6 00 0A         [ 1] 1754 	ld a,base  
      0008C7 A1 0A            [ 1] 1755 	cp a,#10 
      0008C9 26 06            [ 1] 1756 	jrne 1$ 
      0008CB 5D               [ 2] 1757 	tnzw x 
      0008CC 2A 03            [ 1] 1758 	jrpl 1$ 
      0008CE 03 01            [ 1] 1759 	cpl (SIGN,sp)
      0008D0 50               [ 2] 1760 	negw x 	 
      0008D1                       1761 1$:	
      0008D1 C6 00 0A         [ 1] 1762 	ld a,base 
      0008D4 62               [ 2] 1763 	div x,a 
      0008D5 AB 30            [ 1] 1764 	add a,#'0 
      0008D7 A1 3A            [ 1] 1765 	cp a,#'9+1 
      0008D9 2B 02            [ 1] 1766 	jrmi 2$ 
      0008DB AB 07            [ 1] 1767 	add a,#7 
      0008DD 90 5A            [ 2] 1768 2$: decw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0008DF 90 F7            [ 1] 1769 	ld (y),a 
      0008E1 5D               [ 2] 1770 	tnzw x 
      0008E2 26 ED            [ 1] 1771 	jrne 1$ 
      0008E4 A6 10            [ 1] 1772 	ld a,#16 
      0008E6 C1 00 0A         [ 1] 1773 	cp a,base 
      0008E9 26 08            [ 1] 1774 	jrne 3$
      0008EB A6 24            [ 1] 1775 	ld a,#'$
      0008ED 90 5A            [ 2] 1776 	decw y  
      0008EF 90 F7            [ 1] 1777 	ld (y),a
      0008F1 20 0A            [ 2] 1778 	jra 9$ 
      0008F3 0D 01            [ 1] 1779 3$: tnz (SIGN,sp)
      0008F5 27 06            [ 1] 1780 	jreq 9$ 
      0008F7 A6 2D            [ 1] 1781 	ld a,#'-
      0008F9 90 5A            [ 2] 1782 	decw y  
      0008FB 90 F7            [ 1] 1783 	ld (y),a
      0008FD                       1784 9$:	
      0008FD 93               [ 1] 1785 	ldw x,y 
      0008FE 1D 17 5F         [ 2] 1786 	subw x,#pad+PAD_SIZE-1 
      000901 50               [ 2] 1787 	negw x  
      000902                       1788 10$:
      000902 9F               [ 1] 1789 	ld a,xl 
      000903 C1 00 26         [ 1] 1790 	cp a,tab_width
      000906 24 09            [ 1] 1791 	jruge 12$
      000908 90 5A            [ 2] 1792 	decw y 
      00090A A6 20            [ 1] 1793 	ld a,#SPACE 
      00090C 90 F7            [ 1] 1794 	ld (y),a
      00090E 5C               [ 2] 1795 	incw x 
      00090F 20 F1            [ 2] 1796 	jra 10$ 
      000911                       1797 12$:
      000911 93               [ 1] 1798     ldw x,y 
      000912 CD 01 D7         [ 4] 1799 	call puts  
      000915                       1800 	_drop VSIZE 
      000915 5B 01            [ 2]    1     addw sp,#VSIZE 
      000917 81               [ 4] 1801 	ret 
                                   1802 
                                   1803 ;------------------------------------
                                   1804 ; convert integer in acc24 to string
                                   1805 ; input:
                                   1806 ;   A	  	base
                                   1807 ;	acc24	integer to convert
                                   1808 ; output:
                                   1809 ;   X  		pointer to string
                                   1810 ;------------------------------------
                           000001  1811 	SIGN=1  ; integer sign 
                           000002  1812 	BASE=2  ; numeric base 
                           000002  1813 	VSIZE=2  ;locals size
      000918                       1814 itoa:
      000918 52 02            [ 2] 1815 	sub sp,#VSIZE
      00091A 6B 02            [ 1] 1816 	ld (BASE,sp), a  ; base
      00091C 0F 01            [ 1] 1817 	clr (SIGN,sp)    ; sign
      00091E A1 0A            [ 1] 1818 	cp a,#10
      000920 26 0A            [ 1] 1819 	jrne 1$
                                   1820 	; base 10 string display with negative sign if bit 23==1
      000922 72 0F 00 0B 05   [ 2] 1821 	btjf acc24,#7,1$
      000927 03 01            [ 1] 1822 	cpl (SIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000929 CD 09 C1         [ 4] 1823 	call neg_acc24
      00092C                       1824 1$:
                                   1825 ; initialize string pointer 
      00092C AE 17 5F         [ 2] 1826 	ldw x,#pad+PAD_SIZE-1
      00092F 7F               [ 1] 1827 	clr (x)
      000930                       1828 itoa_loop:
      000930 7B 02            [ 1] 1829     ld a,(BASE,sp)
      000932 CD 09 5F         [ 4] 1830     call divu24_8 ; acc24/A 
      000935 AB 30            [ 1] 1831     add a,#'0  ; remainder of division
      000937 A1 3A            [ 1] 1832     cp a,#'9+1
      000939 2B 02            [ 1] 1833     jrmi 2$
      00093B AB 07            [ 1] 1834     add a,#7 
      00093D 5A               [ 2] 1835 2$: decw x
      00093E F7               [ 1] 1836     ld (x),a
                                   1837 	; if acc24==0 conversion done
      00093F C6 00 0B         [ 1] 1838 	ld a,acc24
      000942 CA 00 0C         [ 1] 1839 	or a,acc16
      000945 CA 00 0D         [ 1] 1840 	or a,acc8
      000948 26 E6            [ 1] 1841     jrne itoa_loop
                                   1842 	;conversion done, next add '$' or '-' as required
      00094A 7B 02            [ 1] 1843 	ld a,(BASE,sp)
      00094C A1 10            [ 1] 1844 	cp a,#16
      00094E 27 08            [ 1] 1845 	jreq 8$
      000950 7B 01            [ 1] 1846 	ld a,(SIGN,sp)
      000952 27 08            [ 1] 1847     jreq 10$
      000954 A6 2D            [ 1] 1848     ld a,#'-
      000956 20 02            [ 2] 1849 	jra 9$ 
      000958 A6 24            [ 1] 1850 8$: ld a,#'$ 
      00095A 5A               [ 2] 1851 9$: decw x
      00095B F7               [ 1] 1852     ld (x),a
      00095C                       1853 10$:
      00095C 5B 02            [ 2] 1854 	addw sp,#VSIZE
      00095E 81               [ 4] 1855 	ret
                                   1856 
                                   1857 ;-------------------------------------
                                   1858 ; divide uint24_t by uint8_t
                                   1859 ; used to convert uint24_t to string
                                   1860 ; input:
                                   1861 ;	acc24	dividend
                                   1862 ;   A 		divisor
                                   1863 ; output:
                                   1864 ;   acc24	quotient
                                   1865 ;   A		remainder
                                   1866 ;------------------------------------- 
                                   1867 ; offset  on sp of arguments and locals
                           000001  1868 	U8   = 1   ; divisor on stack
                           000001  1869 	VSIZE =1
      00095F                       1870 divu24_8:
      00095F 89               [ 2] 1871 	pushw x ; save x
      000960 88               [ 1] 1872 	push a 
                                   1873 	; ld dividend UU:MM bytes in X
      000961 C6 00 0B         [ 1] 1874 	ld a, acc24
      000964 95               [ 1] 1875 	ld xh,a
      000965 C6 00 0C         [ 1] 1876 	ld a,acc24+1
      000968 97               [ 1] 1877 	ld xl,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000969 7B 01            [ 1] 1878 	ld a,(U8,SP) ; divisor
      00096B 62               [ 2] 1879 	div x,a ; UU:MM/U8
      00096C 88               [ 1] 1880 	push a  ;save remainder
      00096D 9E               [ 1] 1881 	ld a,xh
      00096E C7 00 0B         [ 1] 1882 	ld acc24,a
      000971 9F               [ 1] 1883 	ld a,xl
      000972 C7 00 0C         [ 1] 1884 	ld acc24+1,a
      000975 84               [ 1] 1885 	pop a
      000976 95               [ 1] 1886 	ld xh,a
      000977 C6 00 0D         [ 1] 1887 	ld a,acc24+2
      00097A 97               [ 1] 1888 	ld xl,a
      00097B 7B 01            [ 1] 1889 	ld a,(U8,sp) ; divisor
      00097D 62               [ 2] 1890 	div x,a  ; R:LL/U8
      00097E 6B 01            [ 1] 1891 	ld (U8,sp),a ; save remainder
      000980 9F               [ 1] 1892 	ld a,xl
      000981 C7 00 0D         [ 1] 1893 	ld acc24+2,a
      000984 84               [ 1] 1894 	pop a
      000985 85               [ 2] 1895 	popw x
      000986 81               [ 4] 1896 	ret
                                   1897 
                                   1898 ;--------------------------------------
                                   1899 ; unsigned multiply uint24_t by uint8_t
                                   1900 ; use to convert numerical string to uint24_t
                                   1901 ; input:
                                   1902 ;	acc24	uint24_t 
                                   1903 ;   A		uint8_t
                                   1904 ; output:
                                   1905 ;   acc24   A*acc24
                                   1906 ;-------------------------------------
                                   1907 ; local variables offset  on sp
                           000003  1908 	U8   = 3   ; A pushed on stack
                           000002  1909 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1910 	OVFH = 1  ; multiplication overflow high byte
                           000003  1911 	VSIZE = 3
      000987                       1912 mulu24_8:
      000987 89               [ 2] 1913 	pushw x    ; save X
                                   1914 	; local variables
      000988 88               [ 1] 1915 	push a     ; U8
      000989 5F               [ 1] 1916 	clrw x     ; initialize overflow to 0
      00098A 89               [ 2] 1917 	pushw x    ; multiplication overflow
                                   1918 ; multiply low byte.
      00098B C6 00 0D         [ 1] 1919 	ld a,acc24+2
      00098E 97               [ 1] 1920 	ld xl,a
      00098F 7B 03            [ 1] 1921 	ld a,(U8,sp)
      000991 42               [ 4] 1922 	mul x,a
      000992 9F               [ 1] 1923 	ld a,xl
      000993 C7 00 0D         [ 1] 1924 	ld acc24+2,a
      000996 9E               [ 1] 1925 	ld a, xh
      000997 6B 02            [ 1] 1926 	ld (OVFL,sp),a
                                   1927 ; multipy middle byte
      000999 C6 00 0C         [ 1] 1928 	ld a,acc24+1
      00099C 97               [ 1] 1929 	ld xl,a
      00099D 7B 03            [ 1] 1930 	ld a, (U8,sp)
      00099F 42               [ 4] 1931 	mul x,a
                                   1932 ; add overflow to this partial product
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009A0 72 FB 01         [ 2] 1933 	addw x,(OVFH,sp)
      0009A3 9F               [ 1] 1934 	ld a,xl
      0009A4 C7 00 0C         [ 1] 1935 	ld acc24+1,a
      0009A7 4F               [ 1] 1936 	clr a
      0009A8 A9 00            [ 1] 1937 	adc a,#0
      0009AA 6B 01            [ 1] 1938 	ld (OVFH,sp),a
      0009AC 9E               [ 1] 1939 	ld a,xh
      0009AD 6B 02            [ 1] 1940 	ld (OVFL,sp),a
                                   1941 ; multiply most signficant byte	
      0009AF C6 00 0B         [ 1] 1942 	ld a, acc24
      0009B2 97               [ 1] 1943 	ld xl, a
      0009B3 7B 03            [ 1] 1944 	ld a, (U8,sp)
      0009B5 42               [ 4] 1945 	mul x,a
      0009B6 72 FB 01         [ 2] 1946 	addw x, (OVFH,sp)
      0009B9 9F               [ 1] 1947 	ld a, xl
      0009BA C7 00 0B         [ 1] 1948 	ld acc24,a
      0009BD 5B 03            [ 2] 1949     addw sp,#VSIZE
      0009BF 85               [ 2] 1950 	popw x
      0009C0 81               [ 4] 1951 	ret
                                   1952 
                                   1953 ;------------------------------------
                                   1954 ;  two's complement acc24
                                   1955 ;  input:
                                   1956 ;		acc24 variable
                                   1957 ;  output:
                                   1958 ;		acc24 variable
                                   1959 ;-------------------------------------
      0009C1                       1960 neg_acc24:
      0009C1 72 53 00 0D      [ 1] 1961 	cpl acc24+2
      0009C5 72 53 00 0C      [ 1] 1962 	cpl acc24+1
      0009C9 72 53 00 0B      [ 1] 1963 	cpl acc24
      0009CD A6 01            [ 1] 1964 	ld a,#1
      0009CF CB 00 0D         [ 1] 1965 	add a,acc24+2
      0009D2 C7 00 0D         [ 1] 1966 	ld acc24+2,a
      0009D5 4F               [ 1] 1967 	clr a
      0009D6 C9 00 0C         [ 1] 1968 	adc a,acc24+1
      0009D9 C7 00 0C         [ 1] 1969 	ld acc24+1,a 
      0009DC 4F               [ 1] 1970 	clr a 
      0009DD C9 00 0B         [ 1] 1971 	adc a,acc24 
      0009E0 C7 00 0B         [ 1] 1972 	ld acc24,a 
      0009E3 81               [ 4] 1973 	ret
                                   1974 
                                   1975 
                                   1976 ;------------------------------------
                                   1977 ; read a line of text from terminal
                                   1978 ; input:
                                   1979 ;	none
                                   1980 ; local variable on stack:
                                   1981 ;	LL  line length
                                   1982 ;   RXCHAR last received chaaracte 
                                   1983 ; output:
                                   1984 ;   text in tib  buffer
                                   1985 ;------------------------------------
                                   1986 	; local variables
                           000001  1987 	LL_HB=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           000001  1988 	RXCHAR = 1 ; last char received
                           000002  1989 	LL = 2  ; accepted line length
                           000002  1990 	VSIZE=2 
      0009E4                       1991 readln:
      0009E4 5F               [ 1] 1992 	clrw x 
      0009E5 89               [ 2] 1993 	pushw x 
      0009E6 90 AE 16 E8      [ 2] 1994  	ldw y,#tib ; input buffer
      0009EA                       1995 readln_loop:
      0009EA CD 01 CD         [ 4] 1996 	call getc
      0009ED 6B 01            [ 1] 1997 	ld (RXCHAR,sp),a
      0009EF A1 0D            [ 1] 1998 	cp a,#CR
      0009F1 26 03            [ 1] 1999 	jrne 1$
      0009F3 CC 0A 5F         [ 2] 2000 	jp readln_quit
      0009F6 A1 0A            [ 1] 2001 1$:	cp a,#LF 
      0009F8 27 65            [ 1] 2002 	jreq readln_quit
      0009FA A1 08            [ 1] 2003 	cp a,#BS
      0009FC 27 3D            [ 1] 2004 	jreq del_back
      0009FE A1 04            [ 1] 2005 	cp a,#CTRL_D
      000A00 27 2A            [ 1] 2006 	jreq del_ln
      000A02 A1 12            [ 1] 2007 	cp a,#CTRL_R 
      000A04 27 06            [ 1] 2008 	jreq reprint 
                                   2009 ;	cp a,#'[
                                   2010 ;	jreq ansi_seq
      000A06                       2011 final_test:
      000A06 A1 20            [ 1] 2012 	cp a,#SPACE
      000A08 2A 40            [ 1] 2013 	jrpl accept_char
      000A0A 20 DE            [ 2] 2014 	jra readln_loop
      000A0C                       2015 ansi_seq:
                                   2016 ;	call getc
                                   2017 ;	cp a,#'C 
                                   2018 ;	jreq rigth_arrow
                                   2019 ;	cp a,#'D 
                                   2020 ;	jreq left_arrow 
                                   2021 ;	jra final_test
      000A0C                       2022 right_arrow:
                                   2023 ;	ld a,#BSP 
                                   2024 ;	call putc 
                                   2025 ;	jra realn_loop 
      000A0C                       2026 left_arrow:
                                   2027 ;	jra readln_loop
      000A0C                       2028 reprint: 
      000A0C 0D 02            [ 1] 2029 	tnz (LL,sp)
      000A0E 26 DA            [ 1] 2030 	jrne readln_loop
      000A10 AE 16 E8         [ 2] 2031 	ldw x,#tib 
      000A13 CD 02 0B         [ 4] 2032 	call strlen 
      000A16 90 AE 16 E8      [ 2] 2033 	ldw y,#tib 
      000A1A 9F               [ 1] 2034 	ld a,xl
      000A1B 27 CD            [ 1] 2035 	jreq readln_loop
      000A1D 6B 02            [ 1] 2036 	ld (LL,sp),a 
      000A1F AE 16 E8         [ 2] 2037 	ldw x,#tib 
      000A22 CD 01 D7         [ 4] 2038 	call puts
      000A25 0F 01            [ 1] 2039 	clr (LL_HB,sp)
      000A27 72 F9 01         [ 2] 2040 	addw y,(LL_HB,sp)
      000A2A 20 BE            [ 2] 2041 	jra readln_loop 
      000A2C                       2042 del_ln:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A2C 7B 02            [ 1] 2043 	ld a,(LL,sp)
      000A2E CD 01 F1         [ 4] 2044 	call delete
      000A31 90 AE 16 E8      [ 2] 2045 	ldw y,#tib
      000A35 90 7F            [ 1] 2046 	clr (y)
      000A37 0F 02            [ 1] 2047 	clr (LL,sp)
      000A39 20 AF            [ 2] 2048 	jra readln_loop
      000A3B                       2049 del_back:
      000A3B 0D 02            [ 1] 2050     tnz (LL,sp)
      000A3D 27 AB            [ 1] 2051     jreq readln_loop
      000A3F 0A 02            [ 1] 2052     dec (LL,sp)
      000A41 90 5A            [ 2] 2053     decw y
      000A43 90 7F            [ 1] 2054     clr  (y)
      000A45 CD 01 E1         [ 4] 2055     call bksp 
      000A48 20 A0            [ 2] 2056     jra readln_loop	
      000A4A                       2057 accept_char:
      000A4A A6 4F            [ 1] 2058 	ld a,#TIB_SIZE-1
      000A4C 11 02            [ 1] 2059 	cp a, (LL,sp)
      000A4E 27 9A            [ 1] 2060 	jreq readln_loop
      000A50 7B 01            [ 1] 2061 	ld a,(RXCHAR,sp)
      000A52 90 F7            [ 1] 2062 	ld (y),a
      000A54 0C 02            [ 1] 2063 	inc (LL,sp)
      000A56 90 5C            [ 2] 2064 	incw y
      000A58 90 7F            [ 1] 2065 	clr (y)
      000A5A CD 01 C4         [ 4] 2066 	call putc 
      000A5D 20 8B            [ 2] 2067 	jra readln_loop
      000A5F                       2068 readln_quit:
      000A5F 90 7F            [ 1] 2069 	clr (y)
      000A61 7B 02            [ 1] 2070 	ld a,(LL,sp)
      000A63 C7 00 03         [ 1] 2071 	ld count,a 
      000A66                       2072 	_drop VSIZE 
      000A66 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A68 A6 0D            [ 1] 2073 	ld a,#CR
      000A6A CD 01 C4         [ 4] 2074 	call putc
      000A6D 81               [ 4] 2075 	ret
                                   2076 
                                   2077 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           000000  2078 .if DEBUG 	
                                   2079 ;----------------------------
                                   2080 ; command interface
                                   2081 ; only 3 commands:
                                   2082 ;  'q' to resume application
                                   2083 ;  'p [addr]' to print memory values 
                                   2084 ;  's addr' to print string 
                                   2085 ;----------------------------
                                   2086 ;local variable 
                                   2087 	PSIZE=1
                                   2088 	VSIZE=1 
                                   2089 cmd_itf:
                                   2090 	sub sp,#VSIZE 
                                   2091 	clr farptr 
                                   2092 	clr farptr+1 
                                   2093 	clr farptr+2  
                                   2094 repl:
                                   2095 	ld a,#CR 
                                   2096 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2097 	ld a,#'? 
                                   2098 	call putc
                                   2099 	clr in.w 
                                   2100 	clr in 
                                   2101 	call readln
                                   2102 	ldw y,#tib  
                                   2103 	ld a,(y)
                                   2104 	jreq repl  
                                   2105 	inc in 
                                   2106 	call to_upper 
                                   2107 	cp a,#'Q 
                                   2108 	jrne test_p
                                   2109 repl_exit:
                                   2110 	clr tib 
                                   2111 	clr count 
                                   2112 	clr in 
                                   2113 	_drop #VSIZE 	
                                   2114 	ret  
                                   2115 invalid:
                                   2116 	ldw x,#invalid_cmd 
                                   2117 	call puts 
                                   2118 	jra repl 
                                   2119 test_p:	
                                   2120     cp a,#'P 
                                   2121 	jreq mem_peek
                                   2122     cp a,#'S 
                                   2123 	jrne invalid 
                                   2124 print_string:	
                                   2125 	call get_token
                                   2126 	cp a,#TK_INTGR 
                                   2127 	jrne invalid 
                                   2128 	call puts
                                   2129 	jp repl 	
                                   2130 mem_peek:
                                   2131 	ld a,#SPACE 
                                   2132 	call skip  	 
                                   2133 	addw y,in.w 
                                   2134 	ldw x,#pad 
                                   2135 	call strcpy
                                   2136 	call atoi24 	
                                   2137 	ld a, acc24 
                                   2138 	or a,acc16 
                                   2139 	or a,acc8 
                                   2140 	jrne 1$ 
                                   2141 	jra peek_byte  
                                   2142 1$:	ldw x,acc24 
                                   2143 	ldw farptr,x 
                                   2144 	ld a,acc8 
                                   2145 	ld farptr+2,a 
                                   2146 peek_byte:
                                   2147 	call print_farptr 
                                   2148 	ld a,#8 
                                   2149 	ld (PSIZE,sp),a 
                                   2150 	clrw x 
                                   2151 1$:	call fetchc  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2152 	pushw x 
                                   2153 	ld acc8,a 
                                   2154 	clrw x 
                                   2155 	ldw acc24,x 
                                   2156 	ld a,#16+128
                                   2157 	call prti24
                                   2158 	popw x 
                                   2159 	dec (PSIZE,sp)
                                   2160 	jrne 1$ 
                                   2161 	ld a,#8 
                                   2162 	add a,farptr+2 
                                   2163 	ld farptr+2,a
                                   2164 	clr a 
                                   2165 	adc a,farptr+1 
                                   2166 	ld farptr+1,a 
                                   2167 	clr a 
                                   2168 	adc a,farptr 
                                   2169 	ld farptr,a 
                                   2170 	jp repl  
                                   2171 
                                   2172 invalid_cmd: .asciz "not a command\n" 
                                   2173 
                                   2174 ;----------------------------
                                   2175 ; display farptr address
                                   2176 ;----------------------------
                                   2177 print_farptr:
                                   2178 	ld a ,farptr+2 
                                   2179 	ld acc8,a 
                                   2180 	ldw x,farptr 
                                   2181 	ldw acc24,x 
                                   2182 	clrw x 
                                   2183 	ld a,#16 
                                   2184 	call prti24
                                   2185 	ld a,#SPACE 
                                   2186 	call putc 
                                   2187 	call putc 
                                   2188 	ret
                                   2189 
                                   2190 ;------------------------------------
                                   2191 ; get byte at address farptr[X]
                                   2192 ; input:
                                   2193 ;	 farptr   address to peek
                                   2194 ;    X		  farptr index 	
                                   2195 ; output:
                                   2196 ;	 A 		  byte from memory  
                                   2197 ;    x		  incremented by 1
                                   2198 ;------------------------------------
                                   2199 fetchc: ; @C
                                   2200 	ldf a,([farptr],x)
                                   2201 	incw x
                                   2202 	ret
                                   2203 
                                   2204 
                                   2205 ;------------------------------------
                                   2206 ; expect a number from command line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2207 ; next argument
                                   2208 ;  input:
                                   2209 ;	  none
                                   2210 ;  output:
                                   2211 ;    acc24   int24_t 
                                   2212 ;------------------------------------
                                   2213 number::
                                   2214 	call get_token
                                   2215 	call atoi24
                                   2216 	ret
                                   2217 .endif ; DEBUG 
                                   2218 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2219 
                                   2220 
                                   2221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2222 ;; compiler routines        ;;
                                   2223 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2224 ;------------------------------------
                                   2225 ; parse quoted string 
                                   2226 ; input:
                                   2227 ;   Y 	pointer to tib 
                                   2228 ;   X   pointer to pad
                                   2229 ; output:
                                   2230 ;	pad   parsed string
                                   2231 ;   TOS  char* to pad  
                                   2232 ;------------------------------------
                           000001  2233 	PREV = 1
                           000002  2234 	CURR =2 
                           000002  2235 	VSIZE=2 
      000A6E                       2236 parse_quote: ; { -- addr }
      000A6E                       2237 	_vars VSIZE 
      000A6E 52 02            [ 2]    1     sub sp,#VSIZE 
      000A70 4F               [ 1] 2238 	clr a
      000A71 6B 01            [ 1] 2239 1$:	ld (PREV,sp),a 
      000A73 72 5C 00 01      [ 1] 2240 2$:	inc in
      000A77 91 D6 00         [ 4] 2241 	ld a,([in.w],y)
      000A7A 27 24            [ 1] 2242 	jreq 6$
      000A7C 6B 02            [ 1] 2243 	ld (CURR,sp),a 
      000A7E A6 5C            [ 1] 2244 	ld a,#'\
      000A80 11 01            [ 1] 2245 	cp a, (PREV,sp)
      000A82 26 0A            [ 1] 2246 	jrne 3$
      000A84 0F 01            [ 1] 2247 	clr (PREV,sp)
      000A86 7B 02            [ 1] 2248 	ld a,(CURR,sp)
      000A88 AD 1F            [ 4] 2249 	callr convert_escape
      000A8A F7               [ 1] 2250 	ld (x),a 
      000A8B 5C               [ 2] 2251 	incw x 
      000A8C 20 E5            [ 2] 2252 	jra 2$
      000A8E                       2253 3$:
      000A8E 7B 02            [ 1] 2254 	ld a,(CURR,sp)
      000A90 A1 5C            [ 1] 2255 	cp a,#'\'
      000A92 27 DD            [ 1] 2256 	jreq 1$
      000A94 A1 22            [ 1] 2257 	cp a,#'"
      000A96 27 04            [ 1] 2258 	jreq 5$ 
      000A98 F7               [ 1] 2259 	ld (x),a 
      000A99 5C               [ 2] 2260 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000A9A 20 D7            [ 2] 2261 	jra 2$
      000A9C 72 5C 00 01      [ 1] 2262 5$:	inc in 
      000AA0 7F               [ 1] 2263 6$: clr (x)
      000AA1 AE 17 38         [ 2] 2264 	ldw x,#pad 
      000AA4                       2265 	_drop VSIZE
      000AA4 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AA6 A6 02            [ 1] 2266 	ld a,#TK_QSTR  
      000AA8 81               [ 4] 2267 	ret 
                                   2268 
                                   2269 ;---------------------------------------
                                   2270 ; called by parse_quote
                                   2271 ; subtitute escaped character 
                                   2272 ; by their ASCII value .
                                   2273 ; input:
                                   2274 ;   A  character following '\'
                                   2275 ; output:
                                   2276 ;   A  substitued char or same if not valid.
                                   2277 ;---------------------------------------
      000AA9                       2278 convert_escape:
      000AA9 89               [ 2] 2279 	pushw x 
      000AAA AE 0A BE         [ 2] 2280 	ldw x,#escaped 
      000AAD F1               [ 1] 2281 1$:	cp a,(x)
      000AAE 27 06            [ 1] 2282 	jreq 2$
      000AB0 7D               [ 1] 2283 	tnz (x)
      000AB1 27 09            [ 1] 2284 	jreq 3$
      000AB3 5C               [ 2] 2285 	incw x 
      000AB4 20 F7            [ 2] 2286 	jra 1$
      000AB6 1D 0A BE         [ 2] 2287 2$: subw x,#escaped 
      000AB9 9F               [ 1] 2288 	ld a,xl 
      000ABA AB 07            [ 1] 2289 	add a,#7
      000ABC 85               [ 2] 2290 3$:	popw x 
      000ABD 81               [ 4] 2291 	ret 
                                   2292 
      000ABE 61 62 74 6E 76 66 72  2293 escaped: .asciz "abtnvfr"
             00
                                   2294 
                                   2295 ;-------------------------
                                   2296 ; integer parser 
                                   2297 ; input:
                                   2298 ;   X 		point to pad 
                                   2299 ;   Y 		point to tib 
                                   2300 ;   A 	    first digit|'$' 
                                   2301 ; output:  
                                   2302 ;   pad     number string 
                                   2303 ;   X 		integer 
                                   2304 ;   A 		TK_INTGR
                                   2305 ;-------------------------
                           000001  2306 	BASE=1
                           000002  2307 	TCHAR=2 
                           000002  2308 	VSIZE=2 
      000AC6                       2309 parse_integer: ; { -- n }
      000AC6 4B 00            [ 1] 2310 	push #0 ; TCHAR 
      000AC8 A1 24            [ 1] 2311 	cp a,#'$
      000ACA 27 04            [ 1] 2312 	jreq 1$ 
      000ACC 4B 0A            [ 1] 2313 	push #10 ; BASE=10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000ACE 20 02            [ 2] 2314 	jra 2$ 
      000AD0 4B 10            [ 1] 2315 1$: push #16  ; BASE=16
      000AD2 F7               [ 1] 2316 2$:	ld (x),a 
      000AD3 5C               [ 2] 2317 	incw x 
      000AD4 72 5C 00 01      [ 1] 2318 	inc in 
      000AD8 91 D6 00         [ 4] 2319 	ld a,([in.w],y)
      000ADB CD 0D 1B         [ 4] 2320 	call to_upper 
      000ADE 6B 02            [ 1] 2321 	ld (TCHAR,sp),a 
      000AE0 CD 04 9E         [ 4] 2322 	call is_digit 
      000AE3 25 ED            [ 1] 2323 	jrc 2$
      000AE5 A6 10            [ 1] 2324 	ld a,#16 
      000AE7 11 01            [ 1] 2325 	cp a,(BASE,sp)
      000AE9 26 0A            [ 1] 2326 	jrne 3$ 
      000AEB 7B 02            [ 1] 2327 	ld a,(TCHAR,sp)
      000AED A1 41            [ 1] 2328 	cp a,#'A 
      000AEF 2B 04            [ 1] 2329 	jrmi 3$ 
      000AF1 A1 47            [ 1] 2330 	cp a,#'G 
      000AF3 2B DD            [ 1] 2331 	jrmi 2$ 
      000AF5 7F               [ 1] 2332 3$:	clr (x)
      000AF6 CD 0D 27         [ 4] 2333 	call atoi24
      000AF9 CE 00 0C         [ 2] 2334 	ldw x,acc16 
      000AFC A6 04            [ 1] 2335 	ld a,#TK_INTGR
      000AFE                       2336 	_drop VSIZE  
      000AFE 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B00 81               [ 4] 2337 	ret 	
                                   2338 
                                   2339 ;-------------------------
                                   2340 ; binary integer parser 
                                   2341 ; input:
                                   2342 ;   X 		point to pad 
                                   2343 ;   Y 		point to tib 
                                   2344 ;   A 	    '%' 
                                   2345 ; output:  
                                   2346 ;   pad     number string 
                                   2347 ;   X 		integer 
                                   2348 ;   A 		TK_INTGR
                                   2349 ;   TOS     integer 
                                   2350 ;-------------------------
                           000001  2351 	BINARY=1
                           000002  2352 	VSIZE=2
      000B01                       2353 parse_binary: ; { -- n }
      000B01 4B 00            [ 1] 2354 	push #0
      000B03 4B 00            [ 1] 2355 	push #0
      000B05 F7               [ 1] 2356 1$: ld (x),a 
      000B06 5C               [ 2] 2357 	incw x 
      000B07 72 5C 00 01      [ 1] 2358 	inc in 
      000B0B 91 D6 00         [ 4] 2359 	ld a,([in.w],y)
      000B0E A1 30            [ 1] 2360 	cp a,#'0 
      000B10 27 06            [ 1] 2361 	jreq 2$
      000B12 A1 31            [ 1] 2362 	cp a,#'1 
      000B14 27 02            [ 1] 2363 	jreq 2$ 
      000B16 20 09            [ 2] 2364 	jra bin_exit 
      000B18 A0 30            [ 1] 2365 2$: sub a,#'0	
      000B1A 46               [ 1] 2366 	rrc a 
      000B1B 09 02            [ 1] 2367 	rlc (BINARY+1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000B1D 09 01            [ 1] 2368 	rlc (BINARY,sp)
      000B1F 20 E4            [ 2] 2369 	jra 1$  
      000B21                       2370 bin_exit:
      000B21 7F               [ 1] 2371 	clr (x)
      000B22 1E 01            [ 2] 2372 	ldw x,(BINARY,sp)
      000B24 A6 04            [ 1] 2373 	ld a,#TK_INTGR 	
      000B26                       2374 	_drop VSIZE 
      000B26 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B28 81               [ 4] 2375 	ret
                                   2376 
                                   2377 ;---------------------------
                                   2378 ;  token begin with a letter,
                                   2379 ;  is keyword or variable. 	
                                   2380 ; input:
                                   2381 ;   X 		point to pad 
                                   2382 ;   Y 		point to text
                                   2383 ;   A 	    first letter  
                                   2384 ; output:
                                   2385 ;   X		exec_addr|var_addr 
                                   2386 ;   A 		TK_CMD 
                                   2387 ;   pad 	keyword|var_name  
                                   2388 ;   TOS     exec_addr|var_addr 
                                   2389 ;--------------------------  
      000B29                       2390 parse_keyword: ; { -- exec_addr|var_addr}
      000B29 CD 0D 1B         [ 4] 2391 	call to_upper 
      000B2C F7               [ 1] 2392 	ld (x),a 
      000B2D 5C               [ 2] 2393 	incw x 
      000B2E 72 5C 00 01      [ 1] 2394 	inc in 
      000B32 91 D6 00         [ 4] 2395 	ld a,([in.w],y)
      000B35 CD 04 8D         [ 4] 2396 	call is_alpha 
      000B38 25 EF            [ 1] 2397 	jrc parse_keyword 
      000B3A 7F               [ 1] 2398 1$: clr (x)
      000B3B 72 5D 17 39      [ 1] 2399 	tnz pad+1 
      000B3F 26 15            [ 1] 2400 	jrne 2$
                                   2401 ; one letter variable name 
      000B41 C6 17 38         [ 1] 2402 	ld a,pad 
      000B44 A0 41            [ 1] 2403 	sub a,#'A 
      000B46 48               [ 1] 2404 	sll a 
      000B47 88               [ 1] 2405 	push a 
      000B48 4B 00            [ 1] 2406 	push #0
      000B4A AE 00 28         [ 2] 2407 	ldw x,#vars 
      000B4D 72 FB 01         [ 2] 2408 	addw x,(1,sp) ; X=var address 
      000B50                       2409 	_drop 2 
      000B50 5B 02            [ 2]    1     addw sp,#2 
      000B52 A6 05            [ 1] 2410 	ld a,#TK_VAR 
      000B54 20 0C            [ 2] 2411 	jra 4$ 
      000B56                       2412 2$: ; check for keyword, otherwise syntax error.
      000B56                       2413 	_ldx_dict kword_dict
      000B56 AE 25 83         [ 2]    1     ldw x,#kword_dict+2
      000B59 CD 0E 89         [ 4] 2414 	call search_dict
      000B5C 4D               [ 1] 2415 	tnz a
      000B5D 26 03            [ 1] 2416 	jrne 4$ 
      000B5F CC 07 62         [ 2] 2417 	jp syntax_error
      000B62 81               [ 4] 2418 4$:	ret  	
                                   2419 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2420 
                                   2421 ;------------------------------------
                                   2422 ; scan text for next token
                                   2423 ; move token in 'pad'
                                   2424 ; input: 
      000B63                       2425 	none: 
                                   2426 ; use:
                                   2427 ;	Y   pointer to text
                                   2428 ;   X	pointer to pad 
                                   2429 ;   in.w   index in text buffer
                                   2430 ; output:
                                   2431 ;   A       token attribute 
                                   2432 ;   pad 	token as .asciz
                                   2433 ;   X 		token value   
                                   2434 ;------------------------------------
                                   2435 	; use to check special character 
                                   2436 	.macro _case c t  
                                   2437 	ld a,#c 
                                   2438 	cp a,(TCHAR,sp) 
                                   2439 	jrne t
                                   2440 	.endm 
                                   2441 
                           000001  2442 	TCHAR=1
                           000002  2443 	ATTRIB=2 
                           000002  2444 	VSIZE=2
      000B63                       2445 get_token: 
      000B63 90 AE 16 E8      [ 2] 2446 	ldw y,#tib    	
      000B67 C6 00 01         [ 1] 2447 	ld a,in 
      000B6A C1 00 03         [ 1] 2448 	cp a,count 
      000B6D 2B 03            [ 1] 2449 	jrmi 1$
      000B6F A6 00            [ 1] 2450 	ld a,#TK_NONE 
      000B71 81               [ 4] 2451 	ret 
      000B72                       2452 1$:	
      000B72                       2453 	_vars VSIZE
      000B72 52 02            [ 2]    1     sub sp,#VSIZE 
      000B74 AE 17 38         [ 2] 2454 	ldw x, #pad
      000B77 A6 20            [ 1] 2455 	ld a,#SPACE
      000B79 CD 0D 99         [ 4] 2456 	call skip
      000B7C 55 00 01 00 02   [ 1] 2457 	mov in.saved,in 
      000B81 91 D6 00         [ 4] 2458 	ld a,([in.w],y)
      000B84 26 07            [ 1] 2459 	jrne str_tst
      000B86 72 5F 17 38      [ 1] 2460 	clr pad 
      000B8A CC 0D 18         [ 2] 2461 	jp token_exit ; end of line 
                                   2462 
      000B8D                       2463 str_tst: ; check for quoted string  	
      000B8D CD 0D 1B         [ 4] 2464 	call to_upper 
      000B90 6B 01            [ 1] 2465 	ld (TCHAR,sp),a 
      000B92                       2466 	_case '"' nbr_tst
      000B92 A6 22            [ 1]    1 	ld a,#'"' 
      000B94 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000B96 26 06            [ 1]    3 	jrne nbr_tst
      000B98 CD 0A 6E         [ 4] 2467 	call parse_quote
      000B9B CC 0D 18         [ 2] 2468 	jp token_exit
      000B9E                       2469 nbr_tst: ; check for number 
      000B9E A6 24            [ 1] 2470 	ld a,#'$'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000BA0 11 01            [ 1] 2471 	cp a,(TCHAR,sp) 
      000BA2 27 13            [ 1] 2472 	jreq 1$
      000BA4 A6 26            [ 1] 2473 	ld a,#'&
      000BA6 11 01            [ 1] 2474 	cp a,(TCHAR,sp)
      000BA8 26 06            [ 1] 2475 	jrne 0$
      000BAA CD 0B 01         [ 4] 2476 	call parse_binary ; expect binary integer 
      000BAD CC 0D 18         [ 2] 2477 	jp token_exit 
      000BB0 7B 01            [ 1] 2478 0$:	ld a,(TCHAR,sp)
      000BB2 CD 04 9E         [ 4] 2479 	call is_digit
      000BB5 24 06            [ 1] 2480 	jrnc 3$
      000BB7 CD 0A C6         [ 4] 2481 1$:	call parse_integer 
      000BBA CC 0D 18         [ 2] 2482 	jp token_exit 
      000BBD                       2483 3$: 
      000BBD                       2484 	_case '(' bkslsh_tst 
      000BBD A6 28            [ 1]    1 	ld a,#'(' 
      000BBF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000BC1 26 05            [ 1]    3 	jrne bkslsh_tst
      000BC3 A6 0B            [ 1] 2485 	ld a,#TK_LPAREN
      000BC5 CC 0D 08         [ 2] 2486 	jp token_char   	
      000BC8                       2487 bkslsh_tst: ; character token 
      000BC8                       2488 	_case '\',rparnt_tst
      000BC8 A6 5C            [ 1]    1 	ld a,#'\' 
      000BCA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000BCC 26 18            [ 1]    3 	jrne rparnt_tst
      000BCE 7B 01            [ 1] 2489 	ld a,(TCHAR,sp)
      000BD0 F7               [ 1] 2490 	ld (x),a 
      000BD1 5C               [ 2] 2491 	incw x 
      000BD2 72 5C 00 01      [ 1] 2492 	inc in 
      000BD6 91 D6 00         [ 4] 2493 	ld a,([in.w],y)
      000BD9 F7               [ 1] 2494 	ld (x),a 
      000BDA 5C               [ 2] 2495 	incw x 
      000BDB 72 5C 00 01      [ 1] 2496 	inc in  
      000BDF 7F               [ 1] 2497 	clr (x) 
      000BE0 97               [ 1] 2498 	ld xl,a 
      000BE1 A6 03            [ 1] 2499 	ld a,#TK_CHAR 
      000BE3 CC 0D 18         [ 2] 2500 	jp token_exit 
      000BE6                       2501 rparnt_tst:		
      000BE6                       2502 	_case ')' colon_tst 
      000BE6 A6 29            [ 1]    1 	ld a,#')' 
      000BE8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000BEA 26 05            [ 1]    3 	jrne colon_tst
      000BEC A6 0C            [ 1] 2503 	ld a,#TK_RPAREN 
      000BEE CC 0D 08         [ 2] 2504 	jp token_char 
      000BF1                       2505 colon_tst:
      000BF1                       2506 	_case ':' comma_tst 
      000BF1 A6 3A            [ 1]    1 	ld a,#':' 
      000BF3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000BF5 26 05            [ 1]    3 	jrne comma_tst
      000BF7 A6 01            [ 1] 2507 	ld a,#TK_COLON 
      000BF9 CC 0D 08         [ 2] 2508 	jp token_char 
      000BFC                       2509 comma_tst:
      000BFC                       2510 	_case COMMA sharp_tst 
      000BFC A6 2C            [ 1]    1 	ld a,#COMMA 
      000BFE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C00 26 05            [ 1]    3 	jrne sharp_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000C02 A6 0D            [ 1] 2511 	ld a,#TK_COMMA
      000C04 CC 0D 08         [ 2] 2512 	jp token_char
      000C07                       2513 sharp_tst:
      000C07                       2514 	_case SHARP dash_tst 
      000C07 A6 23            [ 1]    1 	ld a,#SHARP 
      000C09 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C0B 26 05            [ 1]    3 	jrne dash_tst
      000C0D A6 0E            [ 1] 2515 	ld a,#TK_SHARP
      000C0F CC 0D 08         [ 2] 2516 	jp token_char  	 	 
      000C12                       2517 dash_tst: 	
      000C12                       2518 	_case '-' at_tst 
      000C12 A6 2D            [ 1]    1 	ld a,#'-' 
      000C14 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C16 26 05            [ 1]    3 	jrne at_tst
      000C18 A6 11            [ 1] 2519 	ld a,#TK_MINUS  
      000C1A CC 0D 08         [ 2] 2520 	jp token_char 
      000C1D                       2521 at_tst:
      000C1D                       2522 	_case '@' qmark_tst 
      000C1D A6 40            [ 1]    1 	ld a,#'@' 
      000C1F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C21 26 05            [ 1]    3 	jrne qmark_tst
      000C23 A6 0A            [ 1] 2523 	ld a,#TK_ARRAY 
      000C25 CC 0D 08         [ 2] 2524 	jp token_char
      000C28                       2525 qmark_tst:
      000C28                       2526 	_case '?' tick_tst 
      000C28 A6 3F            [ 1]    1 	ld a,#'?' 
      000C2A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C2C 26 11            [ 1]    3 	jrne tick_tst
      000C2E 7B 01            [ 1] 2527 	ld a,(TCHAR,sp)
      000C30 F7               [ 1] 2528 	ld (x),a 
      000C31 5C               [ 2] 2529 	incw x 
      000C32 7F               [ 1] 2530 	clr (x)
      000C33 72 5C 00 01      [ 1] 2531 	inc in 
      000C37 A6 06            [ 1] 2532 	ld a,#TK_CMD 
      000C39 AE 13 D5         [ 2] 2533 	ldw x,#print 
      000C3C CC 0D 18         [ 2] 2534 	jp token_exit
      000C3F                       2535 tick_tst: ; ignore comment 
      000C3F                       2536 	_case TICK plus_tst 
      000C3F A6 27            [ 1]    1 	ld a,#TICK 
      000C41 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C43 26 0C            [ 1]    3 	jrne plus_tst
      000C45 72 5C 00 01      [ 1] 2537 	inc in 
      000C49 A6 06            [ 1] 2538 	ld a,#TK_CMD 
      000C4B AE 14 C5         [ 2] 2539 	ldw x,#remark  
      000C4E CC 0D 18         [ 2] 2540 	jp token_exit 
      000C51                       2541 plus_tst:
      000C51                       2542 	_case '+' star_tst 
      000C51 A6 2B            [ 1]    1 	ld a,#'+' 
      000C53 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C55 26 05            [ 1]    3 	jrne star_tst
      000C57 A6 10            [ 1] 2543 	ld a,#TK_PLUS  
      000C59 CC 0D 08         [ 2] 2544 	jp token_char 
      000C5C                       2545 star_tst:
      000C5C                       2546 	_case '*' slash_tst 
      000C5C A6 2A            [ 1]    1 	ld a,#'*' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000C5E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C60 26 05            [ 1]    3 	jrne slash_tst
      000C62 A6 20            [ 1] 2547 	ld a,#TK_MULT 
      000C64 CC 0D 08         [ 2] 2548 	jp token_char 
      000C67                       2549 slash_tst: 
      000C67                       2550 	_case '/' prcnt_tst 
      000C67 A6 2F            [ 1]    1 	ld a,#'/' 
      000C69 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C6B 26 05            [ 1]    3 	jrne prcnt_tst
      000C6D A6 21            [ 1] 2551 	ld a,#TK_DIV 
      000C6F CC 0D 08         [ 2] 2552 	jp token_char 
      000C72                       2553 prcnt_tst:
      000C72                       2554 	_case '%' eql_tst 
      000C72 A6 25            [ 1]    1 	ld a,#'%' 
      000C74 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C76 26 05            [ 1]    3 	jrne eql_tst
      000C78 A6 22            [ 1] 2555 	ld a,#TK_MOD
      000C7A CC 0D 08         [ 2] 2556 	jp token_char  
                                   2557 ; 1 or 2 character tokens 	
      000C7D                       2558 eql_tst:
      000C7D                       2559 	_case '=' gt_tst 		
      000C7D A6 3D            [ 1]    1 	ld a,#'=' 
      000C7F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C81 26 05            [ 1]    3 	jrne gt_tst
      000C83 A6 32            [ 1] 2560 	ld a,#TK_EQUAL
      000C85 CC 0D 08         [ 2] 2561 	jp token_char 
      000C88                       2562 gt_tst:
      000C88                       2563 	_case '>' lt_tst 
      000C88 A6 3E            [ 1]    1 	ld a,#'>' 
      000C8A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C8C 26 33            [ 1]    3 	jrne lt_tst
      000C8E A6 31            [ 1] 2564 	ld a,#TK_GT 
      000C90 6B 02            [ 1] 2565 	ld (ATTRIB,sp),a 
      000C92 72 5C 00 01      [ 1] 2566 	inc in 
      000C96 91 D6 00         [ 4] 2567 	ld a,([in.w],y)
      000C99 A1 3D            [ 1] 2568 	cp a,#'=
      000C9B 26 0C            [ 1] 2569 	jrne 1$
      000C9D 7B 01            [ 1] 2570 	ld a,(TCHAR,sp)
      000C9F F7               [ 1] 2571 	ld (x),a
      000CA0 5C               [ 2] 2572 	incw x 
      000CA1 A6 3D            [ 1] 2573 	ld a,#'=
      000CA3 6B 01            [ 1] 2574 	ld (TCHAR,sp),a 
      000CA5 A6 33            [ 1] 2575 	ld a,#TK_GE 
      000CA7 20 5F            [ 2] 2576 	jra token_char  
      000CA9 A1 3C            [ 1] 2577 1$: cp a,#'<
      000CAB 26 0C            [ 1] 2578 	jrne 2$
      000CAD 7B 01            [ 1] 2579 	ld a,(TCHAR,sp)
      000CAF F7               [ 1] 2580 	ld (x),a
      000CB0 5C               [ 2] 2581 	incw x 
      000CB1 A6 3C            [ 1] 2582 	ld a,#'<	
      000CB3 6B 01            [ 1] 2583 	ld (TCHAR,sp),a 
      000CB5 A6 35            [ 1] 2584 	ld a,#TK_NE 
      000CB7 20 4F            [ 2] 2585 	jra token_char 
      000CB9 72 5A 00 01      [ 1] 2586 2$: dec in
      000CBD 7B 02            [ 1] 2587 	ld a,(ATTRIB,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000CBF 20 47            [ 2] 2588 	jra token_char 
      000CC1                       2589 lt_tst:
      000CC1                       2590 	_case '<' other
      000CC1 A6 3C            [ 1]    1 	ld a,#'<' 
      000CC3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CC5 26 32            [ 1]    3 	jrne other
      000CC7 A6 34            [ 1] 2591 	ld a,#TK_LT 
      000CC9 6B 02            [ 1] 2592 	ld (ATTRIB,sp),a 
      000CCB 72 5C 00 01      [ 1] 2593 	inc in 
      000CCF 91 D6 00         [ 4] 2594 	ld a,([in.w],y)
      000CD2 A1 3D            [ 1] 2595 	cp a,#'=
      000CD4 26 0B            [ 1] 2596 	jrne 1$
      000CD6 7B 01            [ 1] 2597 	ld a,(TCHAR,sp)
      000CD8 F7               [ 1] 2598 	ld (x),a 
      000CD9 A6 3D            [ 1] 2599 	ld a,#'=
      000CDB 6B 01            [ 1] 2600 	ld (TCHAR,sp),a 
      000CDD A6 36            [ 1] 2601 	ld a,#TK_LE 
      000CDF 20 27            [ 2] 2602 	jra token_char 
      000CE1 A1 3E            [ 1] 2603 1$: cp a,#'>
      000CE3 26 0C            [ 1] 2604 	jrne 2$
      000CE5 7B 01            [ 1] 2605 	ld a,(TCHAR,sp)
      000CE7 F7               [ 1] 2606 	ld (x),a 
      000CE8 5C               [ 2] 2607 	incw x 
      000CE9 A6 3E            [ 1] 2608 	ld a,#'>
      000CEB 6B 01            [ 1] 2609 	ld (TCHAR,sp),a 
      000CED A6 35            [ 1] 2610 	ld a,#TK_NE 
      000CEF 20 17            [ 2] 2611 	jra token_char 
      000CF1 72 5A 00 01      [ 1] 2612 2$: dec in 
      000CF5 7B 02            [ 1] 2613 	ld a,(ATTRIB,sp)
      000CF7 20 0F            [ 2] 2614 	jra token_char 	
      000CF9                       2615 other: ; not a special character 	 
      000CF9 7B 01            [ 1] 2616 	ld a,(TCHAR,sp)
      000CFB CD 04 8D         [ 4] 2617 	call is_alpha 
      000CFE 25 03            [ 1] 2618 	jrc 30$ 
      000D00 CC 07 62         [ 2] 2619 	jp syntax_error 
      000D03                       2620 30$: 
      000D03 CD 0B 29         [ 4] 2621 	call parse_keyword
      000D06 20 10            [ 2] 2622 	jra token_exit 
      000D08                       2623 token_char:
      000D08 6B 02            [ 1] 2624 	ld (ATTRIB,sp),a 
      000D0A 7B 01            [ 1] 2625 	ld a,(TCHAR,sp)
      000D0C F7               [ 1] 2626 	ld (x),a 
      000D0D 5C               [ 2] 2627 	incw x 
      000D0E 7F               [ 1] 2628 	clr(x)
      000D0F 72 5C 00 01      [ 1] 2629 	inc in 
      000D13 7B 02            [ 1] 2630 	ld a,(ATTRIB,sp)
      000D15 AE 17 38         [ 2] 2631 	ldw x,#pad 
      000D18                       2632 token_exit:
      000D18                       2633 	_drop VSIZE 
      000D18 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D1A 81               [ 4] 2634 	ret
                                   2635 
                                   2636 
                                   2637 ;------------------------------------
                                   2638 ; convert alpha to uppercase
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2639 ; input:
                                   2640 ;    a  character to convert
                                   2641 ; output:
                                   2642 ;    a  uppercase character
                                   2643 ;------------------------------------
      000D1B                       2644 to_upper::
      000D1B A1 61            [ 1] 2645 	cp a,#'a
      000D1D 2A 01            [ 1] 2646 	jrpl 1$
      000D1F 81               [ 4] 2647 0$:	ret
      000D20 A1 7A            [ 1] 2648 1$: cp a,#'z	
      000D22 22 FB            [ 1] 2649 	jrugt 0$
      000D24 A0 20            [ 1] 2650 	sub a,#32
      000D26 81               [ 4] 2651 	ret
                                   2652 	
                                   2653 ;------------------------------------
                                   2654 ; convert pad content in integer
                                   2655 ; input:
                                   2656 ;    pad		.asciz to convert
                                   2657 ; output:
                                   2658 ;    acc24      int24_t
                                   2659 ;------------------------------------
                                   2660 	; local variables
                           000001  2661 	SIGN=1 ; 1 byte, 
                           000002  2662 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2663 	TEMP=3 ; 1 byte, temporary storage
                           000003  2664 	VSIZE=3 ; 3 bytes reserved for local storage
      000D27                       2665 atoi24:
      000D27 89               [ 2] 2666 	pushw x ;save x
      000D28 52 03            [ 2] 2667 	sub sp,#VSIZE
                                   2668 	; acc24=0 
      000D2A 72 5F 00 0B      [ 1] 2669 	clr acc24    
      000D2E 72 5F 00 0C      [ 1] 2670 	clr acc16
      000D32 72 5F 00 0D      [ 1] 2671 	clr acc8 
      000D36 C6 17 38         [ 1] 2672 	ld a, pad 
      000D39 27 5A            [ 1] 2673 	jreq atoi_exit
      000D3B 0F 01            [ 1] 2674 	clr (SIGN,sp)
      000D3D A6 0A            [ 1] 2675 	ld a,#10
      000D3F 6B 02            [ 1] 2676 	ld (BASE,sp),a ; default base decimal
      000D41 AE 17 38         [ 2] 2677 	ldw x,#pad ; pointer to string to convert
      000D44 F6               [ 1] 2678 	ld a,(x)
      000D45 27 47            [ 1] 2679 	jreq 9$  ; completed if 0
      000D47 A1 2D            [ 1] 2680 	cp a,#'-
      000D49 26 04            [ 1] 2681 	jrne 1$
      000D4B 03 01            [ 1] 2682 	cpl (SIGN,sp)
      000D4D 20 08            [ 2] 2683 	jra 2$
      000D4F A1 24            [ 1] 2684 1$: cp a,#'$
      000D51 26 06            [ 1] 2685 	jrne 3$
      000D53 A6 10            [ 1] 2686 	ld a,#16
      000D55 6B 02            [ 1] 2687 	ld (BASE,sp),a
      000D57 5C               [ 2] 2688 2$:	incw x
      000D58 F6               [ 1] 2689 	ld a,(x)
      000D59                       2690 3$:	
      000D59 A1 61            [ 1] 2691 	cp a,#'a
      000D5B 2B 02            [ 1] 2692 	jrmi 4$
      000D5D A0 20            [ 1] 2693 	sub a,#32
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000D5F A1 30            [ 1] 2694 4$:	cp a,#'0
      000D61 2B 2B            [ 1] 2695 	jrmi 9$
      000D63 A0 30            [ 1] 2696 	sub a,#'0
      000D65 A1 0A            [ 1] 2697 	cp a,#10
      000D67 2B 06            [ 1] 2698 	jrmi 5$
      000D69 A0 07            [ 1] 2699 	sub a,#7
      000D6B 11 02            [ 1] 2700 	cp a,(BASE,sp)
      000D6D 2A 1F            [ 1] 2701 	jrpl 9$
      000D6F 6B 03            [ 1] 2702 5$:	ld (TEMP,sp),a
      000D71 7B 02            [ 1] 2703 	ld a,(BASE,sp)
      000D73 CD 09 87         [ 4] 2704 	call mulu24_8
      000D76 7B 03            [ 1] 2705 	ld a,(TEMP,sp)
      000D78 CB 00 0D         [ 1] 2706 	add a,acc24+2
      000D7B C7 00 0D         [ 1] 2707 	ld acc24+2,a
      000D7E 4F               [ 1] 2708 	clr a
      000D7F C9 00 0C         [ 1] 2709 	adc a,acc24+1
      000D82 C7 00 0C         [ 1] 2710 	ld acc24+1,a
      000D85 4F               [ 1] 2711 	clr a
      000D86 C9 00 0B         [ 1] 2712 	adc a,acc24
      000D89 C7 00 0B         [ 1] 2713 	ld acc24,a
      000D8C 20 C9            [ 2] 2714 	jra 2$
      000D8E 0D 01            [ 1] 2715 9$:	tnz (SIGN,sp)
      000D90 27 03            [ 1] 2716     jreq atoi_exit
      000D92 CD 09 C1         [ 4] 2717     call neg_acc24
      000D95                       2718 atoi_exit: 
      000D95 5B 03            [ 2] 2719 	addw sp,#VSIZE
      000D97 85               [ 2] 2720 	popw x ; restore x
      000D98 81               [ 4] 2721 	ret
                                   2722 
                                   2723 
                                   2724 ;------------------------------------
                                   2725 ; skip character c in text starting from 'in'
                                   2726 ; input:
                                   2727 ;	 y 		point to text buffer
                                   2728 ;    a 		character to skip
                                   2729 ; output:  
                                   2730 ;	'in' ajusted to new position
                                   2731 ;------------------------------------
                           000001  2732 	C = 1 ; local var
      000D99                       2733 skip:
      000D99 88               [ 1] 2734 	push a
      000D9A 91 D6 00         [ 4] 2735 1$:	ld a,([in.w],y)
      000D9D 27 0A            [ 1] 2736 	jreq 2$
      000D9F 11 01            [ 1] 2737 	cp a,(C,sp)
      000DA1 26 06            [ 1] 2738 	jrne 2$
      000DA3 72 5C 00 01      [ 1] 2739 	inc in
      000DA7 20 F1            [ 2] 2740 	jra 1$
      000DA9                       2741 2$: _drop 1 
      000DA9 5B 01            [ 2]    1     addw sp,#1 
      000DAB 81               [ 4] 2742 	ret
                                   2743 	
                                   2744 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2745 ;;   TINY BASIC  operators,
                                   2746 ;;   commands and functions 
                                   2747 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2748 
                                   2749 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2750 ;;  Arithmetic operators
                                   2751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2752 
                                   2753 ;--------------------------------
                                   2754 ;  add 2 integers
                                   2755 ;  input:
                                   2756 ;    N1     on cstack 
                                   2757 ;    N2     on cstack 
                                   2758 ;  output:
                                   2759 ;    X 		n2+n1 
                                   2760 ;--------------------------------
                                   2761 	;arugments on cstack 
      000DAC                       2762 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000DAC                       2763 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000DAC                       2764 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      000DAC                       2765 add:
      000DAC 1E 05            [ 2] 2766 	ldw x ,(N2,sp)
      000DAE 72 FB 03         [ 2] 2767 	addw x,(N1,sp)
      000DB1 1F 03            [ 2] 2768 	ldw (N1,sp),x 
      000DB3 81               [ 4] 2769 	ret 
                                   2770 
                                   2771 ;--------------------------------
                                   2772 ;  substract 2 ntegers
                                   2773 ;  input:
                                   2774 ;    N1     on cstack 
                                   2775 ;    N2     on cstack 
                                   2776 ;  output:
                                   2777 ;    X 		n2+n1 
                                   2778 ;--------------------------------
      000DB4                       2779 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000DB4                       2780 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000DB4                       2781 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      000DB4                       2782 substract:
      000DB4 1E 05            [ 2] 2783 	ldw x,(N2,sp)
      000DB6 72 F0 03         [ 2] 2784 	subw x,(N1,sp)
      000DB9 81               [ 4] 2785 	ret 
                                   2786 
                                   2787 ;-------------------------------------
                                   2788 ; multiply 2 integers
                                   2789 ; product overflow is ignored unless
                                   2790 ; MATH_OVF assembler flag is set to 1
                                   2791 ; input:
                                   2792 ;  	N1      on cstack
                                   2793 ;   N2 		on cstack 
                                   2794 ; output:
                                   2795 ;	X        N1*N2 
                                   2796 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2797 	;arguments 
      000DBA                       2798 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      000DBA                       2799 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      000DBA                       2800 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      000DBA                       2801 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      000DBA                       2802 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2803    ; local variables 
                           000001  2804 	SIGN=1
                           000002  2805 	PROD=2
                           000003  2806 	VSIZE=3
      000DBA                       2807 multiply:
      000DBA                       2808 	_vars VSIZE 
      000DBA 52 03            [ 2]    1     sub sp,#VSIZE 
      000DBC 0F 01            [ 1] 2809 	clr (SIGN,sp)
      000DBE 1E 06            [ 2] 2810 	ldw x,(N1_HB,sp)
      000DC0 9E               [ 1] 2811 	ld a,xh  
      000DC1 A5 80            [ 1] 2812 	bcp a,#0x80 
      000DC3 27 05            [ 1] 2813 	jreq 2$
      000DC5 03 01            [ 1] 2814 	cpl (SIGN,sp)
      000DC7 50               [ 2] 2815 	negw x 
      000DC8 1F 06            [ 2] 2816 	ldw (N1_HB,sp),x 
      000DCA 1E 08            [ 2] 2817 2$: ldw x,(N2_HB,sp)
      000DCC 9E               [ 1] 2818 	ld a,xh  
      000DCD A5 80            [ 1] 2819 	bcp a,#0x80 
      000DCF 27 05            [ 1] 2820 	jreq 3$
      000DD1 03 01            [ 1] 2821 	cpl (SIGN,sp)
      000DD3 50               [ 2] 2822 	negw x 
      000DD4 1F 08            [ 2] 2823 	ldw (N2_HB,sp),x 
                                   2824 ; N1_LB * N2_LB 	
      000DD6 7B 07            [ 1] 2825 3$:	ld a,(N1_LB,sp)
      000DD8 97               [ 1] 2826 	ld xl,a 
      000DD9 7B 09            [ 1] 2827 	ld a,(N2_LB,sp) 
      000DDB 42               [ 4] 2828 	mul x,a 
                           000000  2829 .if MATH_OVF 	
                                   2830 	ld a,xh 
                                   2831 	bcp a,#0x80 
                                   2832 	jreq 4$ 
                                   2833 	ld a,#ERR_MATH_OVF 
                                   2834 	jp tb_error
                                   2835 .endif 	 
      000DDC 1F 02            [ 2] 2836 4$:	ldw (PROD,sp),x
                                   2837 ; N1_LB * N2_HB	 
      000DDE 7B 07            [ 1] 2838 	ld a,(N1_LB,sp) 
      000DE0 97               [ 1] 2839 	ld xl,a 
      000DE1 7B 08            [ 1] 2840 	ld a,(N2_HB,sp)
      000DE3 42               [ 4] 2841 	mul x,a
      000DE4 9F               [ 1] 2842 	ld a,xl 
      000DE5 1B 02            [ 1] 2843 	add a,(PROD,sp)
                           000000  2844 .if MATH_OVF 	
                                   2845 	bcp a,#0x80 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2846 	jreq 5$ 
                                   2847 	ld a,#ERR_MATH_OVF 
                                   2848 	jp tb_error
                                   2849 .endif 	 
      000DE7 6B 02            [ 1] 2850 5$:	ld (PROD,sp),a 
                                   2851 ; N1_HB * N2_LB 
      000DE9 7B 06            [ 1] 2852 	ld a,(N1_HB,sp)
      000DEB 97               [ 1] 2853 	ld xl,a 
      000DEC 7B 09            [ 1] 2854 	ld a,(N2_LB,sp)
      000DEE 42               [ 4] 2855 	mul x,a 
      000DEF 9F               [ 1] 2856 	ld a,xl 
      000DF0 1B 02            [ 1] 2857 	add a,(PROD,sp)
                           000000  2858 .if MATH_OVF 	
                                   2859 	bcp a,#0x80 
                                   2860 	jreq 6$ 
                                   2861 	ld a,#ERR_MATH_OVF 
                                   2862 	jp tb_error
                                   2863 .endif 	 
      000DF2 6B 02            [ 1] 2864 6$:	ld (PROD,sp),a 
                                   2865 ; N1_HB * N2_HB 	
                                   2866 ; it is pointless to multiply N1_HB*N2_HB 
                                   2867 ; as this product is over 65535 or 0 
                                   2868 ;
                                   2869 ; sign adjust product
      000DF4 0D 01            [ 1] 2870 	tnz (SIGN,sp)
      000DF6 27 05            [ 1] 2871 	jreq 7$
      000DF8 1E 02            [ 2] 2872 	ldw x, (PROD,sp)
      000DFA 50               [ 2] 2873 	negw x
      000DFB 1F 02            [ 2] 2874 	ldw (PROD,sp),x  
      000DFD                       2875 7$: 
      000DFD 1E 02            [ 2] 2876 	ldw x,(PROD,sp) 
      000DFF                       2877 	_drop VSIZE 
      000DFF 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E01 81               [ 4] 2878 	ret
                                   2879 
                                   2880 ;----------------------------------
                                   2881 ;  euclidian divide n2/n1 
                                   2882 ; input:
                                   2883 ;    N2 	on cstack
                                   2884 ;    N1 	on cstack
                                   2885 ; output:
                                   2886 ;    X      n2/n1 
                                   2887 ;    Y      remainder 
                                   2888 ;----------------------------------
      000E02                       2889 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      000E02                       2890 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      000E02                       2891 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2892 	; local variables
                           000001  2893 	SQUOT=1 ; sign quotient
                           000002  2894 	SDIVD=2 ; sign dividend  
                           000002  2895 	VSIZE=2
      000E02                       2896 divide:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000E02                       2897 	_vars VSIZE 
      000E02 52 02            [ 2]    1     sub sp,#VSIZE 
      000E04 0F 01            [ 1] 2898 	clr (SQUOT,sp)
      000E06 0F 02            [ 1] 2899 	clr (SDIVD,sp)
                                   2900 ; check for 0 divisor
      000E08 1E 05            [ 2] 2901 	ldw x,(DIVISR,sp)
      000E0A 5D               [ 2] 2902 	tnzw x 
      000E0B 26 05            [ 1] 2903     jrne 0$
      000E0D A6 04            [ 1] 2904 	ld a,#ERR_DIV0 
      000E0F CC 07 64         [ 2] 2905 	jp tb_error 
                                   2906 ; check divisor sign 	
      000E12 9E               [ 1] 2907 0$:	ld a,xh 
      000E13 A5 80            [ 1] 2908 	bcp a,#0x80 
      000E15 27 03            [ 1] 2909 	jreq 1$
      000E17 03 01            [ 1] 2910 	cpl (SQUOT,sp)
      000E19 50               [ 2] 2911 	negw x 
      000E1A 1F 05            [ 2] 2912 1$:	ldw (DIVISR,sp),x
                                   2913 ; check dividend sign 	 
      000E1C 1E 07            [ 2] 2914     ldw x,(DIVIDND,sp)
      000E1E 9E               [ 1] 2915 	ld a,xh 
      000E1F A5 80            [ 1] 2916 	bcp a,#0x80 
      000E21 27 05            [ 1] 2917 	jreq 2$ 
      000E23 03 01            [ 1] 2918 	cpl (SQUOT,sp)
      000E25 03 02            [ 1] 2919 	cpl (SDIVD,sp)
      000E27 50               [ 2] 2920 	negw x 
      000E28 16 05            [ 2] 2921 2$:	ldw y,(DIVISR,sp)
      000E2A 65               [ 2] 2922 	divw x,y
      000E2B 90 CF 00 0C      [ 2] 2923 	ldw acc16,y 
                                   2924 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      000E2F 0D 02            [ 1] 2925 	tnz (SDIVD,sp)
      000E31 27 0B            [ 1] 2926 	jreq 7$
      000E33 90 5D            [ 2] 2927 	tnzw y 
      000E35 27 07            [ 1] 2928 	jreq 7$
      000E37 5C               [ 2] 2929 	incw x
      000E38 16 05            [ 2] 2930 	ldw y,(DIVISR,sp)
      000E3A 72 B2 00 0C      [ 2] 2931 	subw y,acc16
      000E3E 0D 01            [ 1] 2932 7$: tnz (SQUOT,sp)
      000E40 27 01            [ 1] 2933 	jreq 9$ 	 
      000E42 50               [ 2] 2934 8$:	negw x 
      000E43                       2935 9$: 
      000E43                       2936 	_drop VSIZE 
      000E43 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E45 81               [ 4] 2937 	ret 
                                   2938 
                                   2939 
                                   2940 ;----------------------------------
                                   2941 ;  remainder resulting from euclidian 
                                   2942 ;  division of n2/n1 
                                   2943 ; input:
                                   2944 ;   N1 		cstack 
                                   2945 ;   N2      cstack
                                   2946 ; output:
                                   2947 ;   X       N2%N1 
                                   2948 ;----------------------------------
                           000003  2949 	N1=3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                           000005  2950 	N2=5
                           000004  2951 	VSIZE=4
      000E46                       2952 modulo:
      000E46 1E 03            [ 2] 2953 	Ldw x,(N1,sp)
      000E48 16 05            [ 2] 2954 	ldw y,(N2,sp)
      000E4A                       2955 	_vars VSIZE 
      000E4A 52 04            [ 2]    1     sub sp,#VSIZE 
      000E4C 1F 01            [ 2] 2956 	ldw (1,sp),x 
      000E4E 17 03            [ 2] 2957 	ldw (3,sp),y 
      000E50 CD 0E 02         [ 4] 2958 	call divide 
      000E53 93               [ 1] 2959 	ldw x,y
      000E54                       2960 	_drop VSIZE 
      000E54 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E56 81               [ 4] 2961 	ret 
                                   2962 
                                   2963 
                                   2964 ;----------------------------------
                                   2965 ; search in kword_dict name
                                   2966 ; from its execution address 
                                   2967 ; input:
                                   2968 ;   X       	execution address 
                                   2969 ; output:
                                   2970 ;   X 			cstr*  | 0 
                                   2971 ;--------------------------------
                           000001  2972 	XADR=1 
                           000003  2973 	LINK=3 
                           000004  2974 	VSIZE=4
      000E57                       2975 cmd_name:
      000E57                       2976 	_vars VSIZE 
      000E57 52 04            [ 2]    1     sub sp,#VSIZE 
      000E59 72 5F 00 0C      [ 1] 2977 	clr acc16 
      000E5D 1F 01            [ 2] 2978 	ldw (XADR,sp),x  
      000E5F AE 25 81         [ 2] 2979 	ldw x,#kword_dict	
      000E62 1F 03            [ 2] 2980 1$:	ldw (LINK,sp),x
      000E64 E6 02            [ 1] 2981 	ld a,(2,x)
      000E66 A4 0F            [ 1] 2982 	and a,#15 
      000E68 C7 00 0D         [ 1] 2983 	ld acc8,a 
      000E6B 1C 00 03         [ 2] 2984 	addw x,#3
      000E6E 72 BB 00 0C      [ 2] 2985 	addw x,acc16
      000E72 FE               [ 2] 2986 	ldw x,(x) ; execution address 
      000E73 13 01            [ 2] 2987 	cpw x,(XADR,sp)
      000E75 27 0A            [ 1] 2988 	jreq 2$
      000E77 1E 03            [ 2] 2989 	ldw x,(LINK,sp)
      000E79 FE               [ 2] 2990 	ldw x,(x) 
      000E7A 1D 00 02         [ 2] 2991 	subw x,#2  
      000E7D 26 E3            [ 1] 2992 	jrne 1$
      000E7F 20 05            [ 2] 2993 	jra 9$
      000E81 1E 03            [ 2] 2994 2$: ldw x,(LINK,sp)
      000E83 1C 00 02         [ 2] 2995 	addw x,#2 	
      000E86                       2996 9$:	_drop VSIZE
      000E86 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E88 81               [ 4] 2997 	ret
                                   2998 
                                   2999 
                                   3000 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   3001 ; dictionary search 
                                   3002 ; input:
                                   3003 ;	X 		dictionary entry point 
                                   3004 ;  pad		.asciz name to search 
                                   3005 ; output:
                                   3006 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   3007 ;  X		execution address | 0 
                                   3008 ;---------------------------------
                           000001  3009 	NLEN=1 ; cmd length 
                           000002  3010 	YSAVE=2
                           000003  3011 	VSIZE=3 
      000E89                       3012 search_dict:
      000E89                       3013 	_vars VSIZE 
      000E89 52 03            [ 2]    1     sub sp,#VSIZE 
      000E8B 90 93            [ 1] 3014 	ldw y,x 
      000E8D                       3015 search_next:	
      000E8D 90 F6            [ 1] 3016 	ld a,(y)
      000E8F A4 0F            [ 1] 3017 	and a,#0xf 
      000E91 6B 01            [ 1] 3018 	ld (NLEN,sp),a  
      000E93 AE 17 38         [ 2] 3019 	ldw x,#pad 
      000E96 17 02            [ 2] 3020 	ldw (YSAVE,sp),y
      000E98 90 5C            [ 2] 3021 	incw y  
      000E9A                       3022 cp_loop:
      000E9A F6               [ 1] 3023 	ld a,(x)
      000E9B 27 1E            [ 1] 3024 	jreq str_match 
      000E9D 0D 01            [ 1] 3025 	tnz (NLEN,sp)
      000E9F 27 0B            [ 1] 3026 	jreq no_match  
      000EA1 90 F1            [ 1] 3027 	cp a,(y)
      000EA3 26 07            [ 1] 3028 	jrne no_match 
      000EA5 90 5C            [ 2] 3029 	incw y 
      000EA7 5C               [ 2] 3030 	incw x
      000EA8 0A 01            [ 1] 3031 	dec (NLEN,sp)
      000EAA 20 EE            [ 2] 3032 	jra cp_loop 
      000EAC                       3033 no_match:
      000EAC 16 02            [ 2] 3034 	ldw y,(YSAVE,sp) 
      000EAE 72 A2 00 02      [ 2] 3035 	subw y,#2 ; move Y to link field
      000EB2 4B 00            [ 1] 3036 	push #TK_NONE 
      000EB4 90 FE            [ 2] 3037 	ldw y,(y) ; next word link 
      000EB6 84               [ 1] 3038 	pop a ; TK_NONE 
      000EB7 27 21            [ 1] 3039 	jreq search_exit  ; not found  
                                   3040 ;try next 
      000EB9 20 D2            [ 2] 3041 	jra search_next
      000EBB                       3042 str_match:
      000EBB 16 02            [ 2] 3043 	ldw y,(YSAVE,sp)
      000EBD 90 F6            [ 1] 3044 	ld a,(y)
      000EBF 6B 01            [ 1] 3045 	ld (NLEN,sp),a ; needed to test keyword type  
      000EC1 A4 0F            [ 1] 3046 	and a,#0xf 
                                   3047 ; move y to procedure address field 	
      000EC3 4C               [ 1] 3048 	inc a 
      000EC4 C7 00 0D         [ 1] 3049 	ld acc8,a 
      000EC7 72 5F 00 0C      [ 1] 3050 	clr acc16 
      000ECB 72 B9 00 0C      [ 2] 3051 	addw y,acc16 
      000ECF 90 FE            [ 2] 3052 	ldw y,(y) ; routine entry point 
                                   3053 ;determine keyword type bits 7:6 
      000ED1 7B 01            [ 1] 3054 	ld a,(NLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000ED3 4E               [ 1] 3055 	swap a 
      000ED4 A4 0C            [ 1] 3056 	and a,#0xc
      000ED6 44               [ 1] 3057 	srl a
      000ED7 44               [ 1] 3058 	srl a 
      000ED8 AB 06            [ 1] 3059 	add a,#6
      000EDA                       3060 search_exit: 
      000EDA 93               [ 1] 3061 	ldw x,y ; x=routine address 
      000EDB                       3062 	_drop VSIZE 	 
      000EDB 5B 03            [ 2]    1     addw sp,#VSIZE 
      000EDD 81               [ 4] 3063 	ret 
                                   3064 
                                   3065 ;---------------------
                                   3066 ; check if next token
                                   3067 ;  is of expected type 
                                   3068 ; input:
                                   3069 ;   A 		 expected token attribute
                                   3070 ;  ouput:
                                   3071 ;   none     if fail call syntax_error 
                                   3072 ;--------------------
      000EDE                       3073 expect:
      000EDE 88               [ 1] 3074 	push a 
      000EDF CD 08 21         [ 4] 3075 	call next_token 
      000EE2 11 01            [ 1] 3076 	cp a,(1,sp)
      000EE4 27 03            [ 1] 3077 	jreq 1$
      000EE6 CC 07 62         [ 2] 3078 	jp syntax_error
      000EE9 84               [ 1] 3079 1$: pop a 
      000EEA 81               [ 4] 3080 	ret 
                                   3081 
                                   3082 
                                   3083 ;-------------------------------
                                   3084 ; parse embedded BASIC routines 
                                   3085 ; arguments list.
                                   3086 ; arg_list::=  rel[','rel]*
                                   3087 ; all arguments are of integer type
                                   3088 ; and pushed on stack 
                                   3089 ; input:
                                   3090 ;   none
                                   3091 ; output:
                                   3092 ;   stack{n}   arguments pushed on stack
                                   3093 ;   A 	number of arguments pushed on stack  
                                   3094 ;--------------------------------
      000EEB                       3095 arg_list:
      000EEB 4B 00            [ 1] 3096 	push #0  
      000EED CD 10 3B         [ 4] 3097 1$: call relation
      000EF0 A1 00            [ 1] 3098 	cp a,#TK_NONE 
      000EF2 27 1C            [ 1] 3099 	jreq 5$
      000EF4 A1 04            [ 1] 3100 	cp a,#TK_INTGR
      000EF6 26 13            [ 1] 3101 	jrne 4$
      000EF8                       3102 3$: 
                                   3103 ; swap return address with argument
      000EF8 84               [ 1] 3104 	pop a 
      000EF9 90 85            [ 2] 3105 	popw y 
      000EFB 89               [ 2] 3106 	pushw x 
      000EFC 90 89            [ 2] 3107 	pushw y 
      000EFE 4C               [ 1] 3108     inc a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000EFF 88               [ 1] 3109 	push a 
      000F00 CD 08 21         [ 4] 3110 	call next_token 
      000F03 A1 0D            [ 1] 3111 	cp a,#TK_COMMA 
      000F05 27 E6            [ 1] 3112 	jreq 1$ 
      000F07 A1 00            [ 1] 3113 	cp a,#TK_NONE 
      000F09 27 05            [ 1] 3114 	jreq 5$ 
      000F0B                       3115 4$:	_unget_token 
      000F0B 55 00 02 00 01   [ 1]    1     mov in,in.saved
      000F10 84               [ 1] 3116 5$:	pop a  
      000F11 81               [ 4] 3117 	ret 
                                   3118 
                                   3119 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3120 ; parse arguments list 
                                   3121 ; between ()
                                   3122 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F12                       3123 func_args:
      000F12 85               [ 2] 3124 	popw x
      000F13 CF 00 0E         [ 2] 3125 	ldw tmp16,x  
      000F16 A6 0B            [ 1] 3126 	ld a,#TK_LPAREN 
      000F18 CD 0E DE         [ 4] 3127 	call expect 
      000F1B CD 0E EB         [ 4] 3128 	call arg_list 
      000F1E 88               [ 1] 3129 	push a 
      000F1F A6 0C            [ 1] 3130 	ld a,#TK_RPAREN 
      000F21 CD 0E DE         [ 4] 3131 	call expect 
      000F24 84               [ 1] 3132 	pop a 
      000F25 72 CC 00 0E      [ 5] 3133 	jp [tmp16]
                                   3134 
                                   3135 ;--------------------------------
                                   3136 ;   BASIC commnands 
                                   3137 ;--------------------------------
                                   3138 
                                   3139 ;--------------------------------
                                   3140 ;  arithmetic and relational 
                                   3141 ;  routines
                                   3142 ;  operators precedence
                                   3143 ;  highest to lowest
                                   3144 ;  operators on same row have 
                                   3145 ;  same precedence and are executed
                                   3146 ;  from left to right.
                                   3147 ;	'*','/','%'
                                   3148 ;   '-','+'
                                   3149 ;   '=','>','<','>=','<=','<>','><'
                                   3150 ;   '<>' and '><' are equivalent for not equal.
                                   3151 ;--------------------------------
                                   3152 
                                   3153 ;---------------------
                                   3154 ; return array element
                                   3155 ; address from @(expr)
                                   3156 ; input:
                                   3157 ;   A 		TK_ARRAY
                                   3158 ; output:
                                   3159 ;   A 		TK_INTGR
                                   3160 ;	X 		element address 
                                   3161 ;----------------------
      000F29                       3162 get_array_element:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      000F29 CD 0F 12         [ 4] 3163 	call func_args 
      000F2C A1 01            [ 1] 3164 	cp a,#1
      000F2E 27 03            [ 1] 3165 	jreq 1$
      000F30 CC 07 62         [ 2] 3166 	jp syntax_error
      000F33 85               [ 2] 3167 1$: popw x 
                                   3168 	; check for bounds 
      000F34 C3 00 23         [ 2] 3169 	cpw x,array_size 
      000F37 23 05            [ 2] 3170 	jrule 3$
                                   3171 ; bounds {1..array_size}	
      000F39 A6 0A            [ 1] 3172 2$: ld a,#ERR_BAD_VALUE 
      000F3B CC 07 64         [ 2] 3173 	jp tb_error 
      000F3E 5D               [ 2] 3174 3$: tnzw  x
      000F3F 27 F8            [ 1] 3175 	jreq 2$ 
      000F41 58               [ 2] 3176 	sllw x 
      000F42 89               [ 2] 3177 	pushw x 
      000F43 AE 16 E8         [ 2] 3178 	ldw x,#tib
      000F46 72 F0 01         [ 2] 3179 	subw x,(1,sp)
      000F49                       3180 	_drop 2   
      000F49 5B 02            [ 2]    1     addw sp,#2 
      000F4B A6 04            [ 1] 3181 	ld a,#TK_INTGR
      000F4D 81               [ 4] 3182 	ret 
                                   3183 
                                   3184 ;***********************************
                                   3185 ;   expression parse,execute 
                                   3186 ;***********************************
                                   3187 ;-----------------------------------
                                   3188 ; factor ::= ['+'|'-'|e]  var | @ |
                                   3189 ;			 integer | function |
                                   3190 ;			 '('relation')' 
                                   3191 ; output:
                                   3192 ;   A    token attribute 
                                   3193 ;   X 	 integer
                                   3194 ; ---------------------------------
                           000001  3195 	NEG=1
                           000001  3196 	VSIZE=1
      000F4E                       3197 factor:
      000F4E                       3198 	_vars VSIZE 
      000F4E 52 01            [ 2]    1     sub sp,#VSIZE 
      000F50 CD 08 21         [ 4] 3199 	call next_token
      000F53 A1 02            [ 1] 3200 	cp a,#CMD_END 
      000F55 2B 4E            [ 1] 3201 	jrmi 20$
      000F57 6B 01            [ 1] 3202 1$:	ld (NEG,sp),a 
      000F59 A4 30            [ 1] 3203 	and a,#TK_GRP_MASK
      000F5B A1 10            [ 1] 3204 	cp a,#TK_GRP_ADD 
      000F5D 27 04            [ 1] 3205 	jreq 2$
      000F5F 7B 01            [ 1] 3206 	ld a,(NEG,sp)
      000F61 20 03            [ 2] 3207 	jra 4$  
      000F63                       3208 2$:	
      000F63 CD 08 21         [ 4] 3209 	call next_token 
      000F66                       3210 4$:	
      000F66 A1 07            [ 1] 3211 	cp a,#TK_IFUNC 
      000F68 26 03            [ 1] 3212 	jrne 5$ 
      000F6A FD               [ 4] 3213 	call (x) 
      000F6B 20 2F            [ 2] 3214 	jra 18$ 
      000F6D                       3215 5$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000F6D A1 04            [ 1] 3216 	cp a,#TK_INTGR
      000F6F 26 02            [ 1] 3217 	jrne 6$
      000F71 20 29            [ 2] 3218 	jra 18$
      000F73                       3219 6$:
      000F73 A1 0A            [ 1] 3220 	cp a,#TK_ARRAY
      000F75 26 06            [ 1] 3221 	jrne 10$
      000F77 CD 0F 29         [ 4] 3222 	call get_array_element
      000F7A FE               [ 2] 3223 	ldw x,(x)
      000F7B 20 1F            [ 2] 3224 	jra 18$ 
      000F7D                       3225 10$:
      000F7D A1 05            [ 1] 3226 	cp a,#TK_VAR 
      000F7F 26 03            [ 1] 3227 	jrne 12$
      000F81 FE               [ 2] 3228 	ldw x,(x)
      000F82 20 18            [ 2] 3229 	jra 18$
      000F84                       3230 12$:			
      000F84 A1 0B            [ 1] 3231 	cp a,#TK_LPAREN
      000F86 26 0C            [ 1] 3232 	jrne 16$
      000F88 CD 10 3B         [ 4] 3233 	call relation
      000F8B 89               [ 2] 3234 	pushw x 
      000F8C A6 0C            [ 1] 3235 	ld a,#TK_RPAREN 
      000F8E CD 0E DE         [ 4] 3236 	call expect
      000F91 85               [ 2] 3237 	popw x 
      000F92 20 08            [ 2] 3238 	jra 18$	
      000F94                       3239 16$:
      000F94                       3240 	_unget_token
      000F94 55 00 02 00 01   [ 1]    1     mov in,in.saved
      000F99 4F               [ 1] 3241 	clr a 
      000F9A 20 09            [ 2] 3242 	jra 20$ 
      000F9C                       3243 18$: 
      000F9C A6 11            [ 1] 3244 	ld a,#TK_MINUS 
      000F9E 11 01            [ 1] 3245 	cp a,(NEG,sp)
      000FA0 26 01            [ 1] 3246 	jrne 19$
      000FA2 50               [ 2] 3247 	negw x
      000FA3                       3248 19$:
      000FA3 A6 04            [ 1] 3249 	ld a,#TK_INTGR
      000FA5                       3250 20$:
      000FA5                       3251 	_drop VSIZE
      000FA5 5B 01            [ 2]    1     addw sp,#VSIZE 
      000FA7 81               [ 4] 3252 	ret
                                   3253 
                                   3254 ;-----------------------------------
                                   3255 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3256 ; output:
                                   3257 ;   A    	token attribute 
                                   3258 ;	X		integer
                                   3259 ;-----------------------------------
                           000001  3260 	N1=1
                           000003  3261 	N2=3
                           000005  3262 	MULOP=5
                           000005  3263 	VSIZE=5
      000FA8                       3264 term:
      000FA8                       3265 	_vars VSIZE
      000FA8 52 05            [ 2]    1     sub sp,#VSIZE 
      000FAA CD 0F 4E         [ 4] 3266 	call factor
      000FAD A1 02            [ 1] 3267 	cp a,#CMD_END
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000FAF 2B 43            [ 1] 3268 	jrmi term_exit
      000FB1                       3269 term01:	 ; check for  operator 
      000FB1 1F 03            [ 2] 3270 	ldw (N2,sp),x  ; save first factor 
      000FB3 CD 08 21         [ 4] 3271 	call next_token
      000FB6 A1 02            [ 1] 3272 	cp a,#CMD_END
      000FB8 2B 36            [ 1] 3273 	jrmi 9$
      000FBA 6B 05            [ 1] 3274 0$:	ld (MULOP,sp),a
      000FBC A4 30            [ 1] 3275 	and a,#TK_GRP_MASK
      000FBE A1 20            [ 1] 3276 	cp a,#TK_GRP_MULT
      000FC0 27 09            [ 1] 3277 	jreq 1$
      000FC2 7B 05            [ 1] 3278 	ld a,(MULOP,sp) 
      000FC4                       3279 	_unget_token 
      000FC4 55 00 02 00 01   [ 1]    1     mov in,in.saved
      000FC9 20 25            [ 2] 3280 	jra 9$
      000FCB                       3281 1$:	; got *|/|%
      000FCB CD 0F 4E         [ 4] 3282 	call factor
      000FCE A1 04            [ 1] 3283 	cp a,#TK_INTGR
      000FD0 27 03            [ 1] 3284 	jreq 2$ 
      000FD2 CC 07 62         [ 2] 3285 	jp syntax_error
      000FD5 1F 01            [ 2] 3286 2$:	ldw (N1,sp),x  
      000FD7 7B 05            [ 1] 3287 	ld a,(MULOP,sp) 
      000FD9 A1 20            [ 1] 3288 	cp a,#TK_MULT 
      000FDB 26 05            [ 1] 3289 	jrne 3$
      000FDD CD 0D BA         [ 4] 3290 	call multiply 
      000FE0 20 CF            [ 2] 3291 	jra term01
      000FE2 A1 21            [ 1] 3292 3$: cp a,#TK_DIV 
      000FE4 26 05            [ 1] 3293 	jrne 4$ 
      000FE6 CD 0E 02         [ 4] 3294 	call divide 
      000FE9 20 C6            [ 2] 3295 	jra term01 
      000FEB CD 0E 46         [ 4] 3296 4$: call modulo
      000FEE 20 C1            [ 2] 3297 	jra term01 
      000FF0 1E 03            [ 2] 3298 9$: ldw x,(N2,sp)  
      000FF2 A6 04            [ 1] 3299 	ld a,#TK_INTGR 	
      000FF4                       3300 term_exit:
      000FF4                       3301 	_drop VSIZE 
      000FF4 5B 05            [ 2]    1     addw sp,#VSIZE 
      000FF6 81               [ 4] 3302 	ret 
                                   3303 
                                   3304 ;-------------------------------
                                   3305 ;  expr ::= term [['+'|'-'] term]*
                                   3306 ;  result range {-32768..32767}
                                   3307 ;  output:
                                   3308 ;   A    token attribute 
                                   3309 ;   X	 integer   
                                   3310 ;-------------------------------
                           000001  3311 	N1=1 
                           000003  3312 	N2=3
                           000005  3313 	OP=5 
                           000005  3314 	VSIZE=5 
      000FF7                       3315 expression:
      000FF7                       3316 	_vars VSIZE 
      000FF7 52 05            [ 2]    1     sub sp,#VSIZE 
      000FF9 CD 0F A8         [ 4] 3317 	call term
      000FFC A1 02            [ 1] 3318 	cp a,#CMD_END 
      000FFE 2B 38            [ 1] 3319 	jrmi expr_exit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001000 1F 03            [ 2] 3320 0$:	ldw (N2,sp),x 
      001002 CD 08 21         [ 4] 3321 	call next_token
      001005 A1 02            [ 1] 3322 	cp a,#CMD_END 
      001007 2B 2B            [ 1] 3323 	jrmi 9$ 
      001009 6B 05            [ 1] 3324 1$:	ld (OP,sp),a  
      00100B A4 30            [ 1] 3325 	and a,#TK_GRP_MASK
      00100D A1 10            [ 1] 3326 	cp a,#TK_GRP_ADD 
      00100F 27 07            [ 1] 3327 	jreq 2$ 
      001011                       3328 	_unget_token
      001011 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001016 20 1C            [ 2] 3329 	jra 9$
      001018                       3330 2$: 
      001018 CD 0F A8         [ 4] 3331 	call term
      00101B A1 04            [ 1] 3332 	cp a,#TK_INTGR 
      00101D 27 03            [ 1] 3333 	jreq 3$
      00101F CC 07 62         [ 2] 3334 	jp syntax_error
      001022 1F 01            [ 2] 3335 3$:	ldw (N1,sp),x 
      001024 7B 05            [ 1] 3336 	ld a,(OP,sp)
      001026 A1 10            [ 1] 3337 	cp a,#TK_PLUS 
      001028 26 05            [ 1] 3338 	jrne 4$
      00102A CD 0D AC         [ 4] 3339 	call add 
      00102D 20 D1            [ 2] 3340 	jra 0$ 
      00102F CD 0D B4         [ 4] 3341 4$:	call substract
      001032 20 CC            [ 2] 3342 	jra 0$
      001034 1E 03            [ 2] 3343 9$: ldw x,(N2,sp)
      001036 A6 04            [ 1] 3344 	ld a,#TK_INTGR	
      001038                       3345 expr_exit:
      001038                       3346 	_drop VSIZE 
      001038 5B 05            [ 2]    1     addw sp,#VSIZE 
      00103A 81               [ 4] 3347 	ret 
                                   3348 
                                   3349 ;---------------------------------------------
                                   3350 ; rel ::= expr rel_op expr
                                   3351 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3352 ;  relation return 1 | 0  for true | false 
                                   3353 ;  output:
                                   3354 ;    A 		token attribute  
                                   3355 ;	 X		1|0
                                   3356 ;---------------------------------------------
                           000001  3357 	N1=1
                           000003  3358 	N2=3
                           000005  3359 	RELOP=5
                           000005  3360 	VSIZE=5 
      00103B                       3361 relation: 
      00103B                       3362 	_vars VSIZE
      00103B 52 05            [ 2]    1     sub sp,#VSIZE 
      00103D CD 0F F7         [ 4] 3363 	call expression
      001040 A1 02            [ 1] 3364 	cp a,#CMD_END  
      001042 2B 4B            [ 1] 3365 	jrmi rel_exit 
                                   3366 	; expect rel_op or leave 
      001044 1F 03            [ 2] 3367 	ldw (N2,sp),x 
      001046 CD 08 21         [ 4] 3368 	call next_token 
      001049 A1 02            [ 1] 3369 	cp a,#CMD_END 
      00104B 2B 3E            [ 1] 3370 	jrmi 9$
      00104D                       3371 1$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00104D 6B 05            [ 1] 3372 	ld (RELOP,sp),a 
      00104F A4 30            [ 1] 3373 	and a,#TK_GRP_MASK
      001051 A1 30            [ 1] 3374 	cp a,#TK_GRP_RELOP 
      001053 27 07            [ 1] 3375 	jreq 2$
      001055                       3376 	_unget_token  
      001055 55 00 02 00 01   [ 1]    1     mov in,in.saved
      00105A 20 2F            [ 2] 3377 	jra 9$
      00105C                       3378 2$:	; expect another expression or error 
      00105C CD 0F F7         [ 4] 3379 	call expression
      00105F A1 04            [ 1] 3380 	cp a,#TK_INTGR 
      001061 27 03            [ 1] 3381 	jreq 3$
      001063 CC 07 62         [ 2] 3382 	jp syntax_error 
      001066 1F 01            [ 2] 3383 3$:	ldw (N1,sp),x 
      001068 CD 0D B4         [ 4] 3384 	call substract
      00106B 26 06            [ 1] 3385 	jrne 4$
      00106D 35 02 00 0D      [ 1] 3386 	mov acc8,#2 ; n1==n2
      001071 20 0C            [ 2] 3387 	jra 6$ 
      001073                       3388 4$: 
      001073 2C 06            [ 1] 3389 	jrsgt 5$  
      001075 35 04 00 0D      [ 1] 3390 	mov acc8,#4 ; n1<2 
      001079 20 04            [ 2] 3391 	jra 6$
      00107B                       3392 5$:
      00107B 35 01 00 0D      [ 1] 3393 	mov acc8,#1 ; n1>n2 
      00107F                       3394 6$:
      00107F 5F               [ 1] 3395 	clrw x 
      001080 C6 00 0D         [ 1] 3396 	ld a, acc8  
      001083 14 05            [ 1] 3397 	and a,(RELOP,sp)
      001085 4D               [ 1] 3398 	tnz a 
      001086 27 05            [ 1] 3399 	jreq 10$
      001088 5C               [ 2] 3400 	incw x 
      001089                       3401 7$:	 
      001089 20 02            [ 2] 3402 	jra 10$  	
      00108B 1E 03            [ 2] 3403 9$: ldw x,(N2,sp)
      00108D                       3404 10$:
      00108D A6 04            [ 1] 3405 	ld a,#TK_INTGR
      00108F                       3406 rel_exit: 	 
      00108F                       3407 	_drop VSIZE
      00108F 5B 05            [ 2]    1     addw sp,#VSIZE 
      001091 81               [ 4] 3408 	ret 
                                   3409 
                                   3410 ;--------------------------------
                                   3411 ; BASIC: SHOW 
                                   3412 ; print stack content in hexadecimal bytes 
                                   3413 ; 16 bytes per row 
                                   3414 ;--------------------------------
                           000001  3415 	TWSAVE=1
                           000002  3416 	BSAVE=2
                           000003  3417 	ADDR=3
                           000004  3418 	VSIZE=4 
      001092                       3419 show:
      001092                       3420 	_vars VSIZE
      001092 52 04            [ 2]    1     sub sp,#VSIZE 
      001094 C6 00 0A         [ 1] 3421 	ld a,base 
      001097 6B 02            [ 1] 3422 	ld (BSAVE,sp),a
      001099 C6 00 26         [ 1] 3423 	ld a,tab_width
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00109C 6B 01            [ 1] 3424 	ld (TWSAVE,sp),a
      00109E 35 10 00 0A      [ 1] 3425 	mov base,#16   
      0010A2 AE 10 DE         [ 2] 3426 	ldw x,#cstk_prompt
      0010A5 CD 01 D7         [ 4] 3427 	call puts 
      0010A8 96               [ 1] 3428 	ldw x,sp 
      0010A9 1C 00 05         [ 2] 3429 	addw x,#VSIZE+1 ; ignore local vars and return address
      0010AC 1F 03            [ 2] 3430 	ldw (ADDR,sp),x 
      0010AE                       3431 dotr_loop:
      0010AE A3 18 00         [ 2] 3432 	cpw x,#RAM_SIZE 
      0010B1 24 18            [ 1] 3433 	jruge 9$
      0010B3 A6 10            [ 1] 3434 	ld a,#16 
      0010B5 90 AE 18 00      [ 2] 3435 	ldw y,#RAM_SIZE  
      0010B9 72 F2 03         [ 2] 3436 	subw y,(ADDR,sp)
      0010BC 90 A3 00 10      [ 2] 3437 	cpw y,#16 
      0010C0 24 02            [ 1] 3438 	jruge 2$
      0010C2 90 9F            [ 1] 3439 	ld a,yl  
      0010C4                       3440 2$:  
      0010C4 CD 11 05         [ 4] 3441 	call show_row 
      0010C7 1F 03            [ 2] 3442 	ldw (ADDR,sp),x 
      0010C9 20 E3            [ 2] 3443 	jra dotr_loop 
      0010CB A6 0D            [ 1] 3444 9$:	ld a,#CR 
      0010CD CD 01 C4         [ 4] 3445 	call putc 
      0010D0 7B 02            [ 1] 3446 	ld a,(BSAVE,sp)
      0010D2 C7 00 0A         [ 1] 3447 	ld base,a 
      0010D5 7B 01            [ 1] 3448 	ld a,(TWSAVE,sp)
      0010D7 C7 00 26         [ 1] 3449 	ld tab_width,a 
      0010DA                       3450 	_drop VSIZE 
      0010DA 5B 04            [ 2]    1     addw sp,#VSIZE 
      0010DC 4F               [ 1] 3451 	clr a 
      0010DD 81               [ 4] 3452 	ret
                                   3453 
      0010DE 0A 63 6F 6E 74 65 6E  3454 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   3455 
                                   3456 ;---------------------
                                   3457 ; display n bytes row 
                                   3458 ; from memory.
                                   3459 ; input:
                                   3460 ;   A   bytes to print 
                                   3461 ;	X   start address 
                                   3462 ; output:
                                   3463 ;   X   address after last shown  
                                   3464 ;---------------------
                           000001  3465 	CNT=1 
                           000002  3466 	ADR=2 
                           000003  3467 	VSIZE=3 
      001105                       3468 show_row:
      001105 4D               [ 1] 3469 	tnz a 
      001106 26 01            [ 1] 3470 	jrne 1$
      001108 81               [ 4] 3471 	ret 
      001109                       3472 1$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001109 89               [ 2] 3473 	pushw x  
      00110A 88               [ 1] 3474 	push a 
      00110B 35 04 00 26      [ 1] 3475 	mov tab_width,#4 
      00110F CD 08 BA         [ 4] 3476 	call print_int 
      001112 A6 20            [ 1] 3477 	ld a,#SPACE  
      001114 CD 01 C4         [ 4] 3478 	call putc
      001117                       3479 row_loop:
      001117 1E 02            [ 2] 3480 	ldw x,(ADR,sp)
      001119 F6               [ 1] 3481 	ld a,(x)
      00111A 5F               [ 1] 3482 	clrw x 
      00111B 97               [ 1] 3483 	ld xl,a 
      00111C CD 08 BA         [ 4] 3484 	call print_int 
      00111F 1E 02            [ 2] 3485 	ldw x,(ADR,sp)
      001121 5C               [ 2] 3486 	incw x 
      001122 1F 02            [ 2] 3487 	ldw (ADR,sp),x 
      001124 0A 01            [ 1] 3488 	dec (CNT,sp)
      001126 26 EF            [ 1] 3489 	jrne row_loop
      001128                       3490 	_drop VSIZE  		
      001128 5B 03            [ 2]    1     addw sp,#VSIZE 
      00112A 35 04 00 26      [ 1] 3491 	mov tab_width,#4
      00112E A6 0D            [ 1] 3492 	ld a,#CR 
      001130 CD 01 C4         [ 4] 3493 	call putc 
      001133 81               [ 4] 3494 	ret 
                                   3495 
                                   3496 ;--------------------------------------------
                                   3497 ; BASIC: HEX 
                                   3498 ; select hexadecimal base for integer print
                                   3499 ;---------------------------------------------
      001134                       3500 hex_base:
      001134 35 10 00 0A      [ 1] 3501 	mov base,#16 
      001138 81               [ 4] 3502 	ret 
                                   3503 
                                   3504 ;--------------------------------------------
                                   3505 ; BASIC: DEC 
                                   3506 ; select decimal base for integer print
                                   3507 ;---------------------------------------------
      001139                       3508 dec_base:
      001139 35 0A 00 0A      [ 1] 3509 	mov base,#10
      00113D 81               [ 4] 3510 	ret 
                                   3511 
                                   3512 ;------------------------
                                   3513 ; BASIC: SIZE 
                                   3514 ; return free size in text area
                                   3515 ; output:
                                   3516 ;   A 		TK_INTGR
                                   3517 ;   X 	    size integer
                                   3518 ;--------------------------
      00113E                       3519 size:
      00113E AE 16 E8         [ 2] 3520 	ldw x,#tib 
      001141 72 B0 00 20      [ 2] 3521 	subw x,txtend 
      001145 A6 04            [ 1] 3522 	ld a,#TK_INTGR
      001147 81               [ 4] 3523 	ret 
                                   3524 
                                   3525 
                                   3526 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3527 ; BASIC: UBOUND  
                                   3528 ; return array variable size 
                                   3529 ; output:
                                   3530 ;   A 		TK_INTGR
                                   3531 ;   X 	    array size 
                                   3532 ;--------------------------
      001148                       3533 ubound:
      001148 AE 16 E8         [ 2] 3534 	ldw x,#tib
      00114B 72 B0 00 20      [ 2] 3535 	subw x,txtend 
      00114F 90 CE 00 04      [ 2] 3536 	ldw y,basicptr 
      001153 90 C3 00 20      [ 2] 3537 	cpw y,txtend 
      001157 25 0A            [ 1] 3538 	jrult 1$
      001159 3B 00 03         [ 1] 3539 	push count 
      00115C 4B 00            [ 1] 3540 	push #0 
      00115E 72 F0 01         [ 2] 3541 	subw x,(1,sp)
      001161                       3542 	_drop 2 
      001161 5B 02            [ 2]    1     addw sp,#2 
      001163 54               [ 2] 3543 1$:	srlw x 
      001164 CF 00 23         [ 2] 3544 	ldw array_size,x
      001167 A6 04            [ 1] 3545 	ld a,#TK_INTGR
      001169 81               [ 4] 3546 	ret 
                                   3547 
                                   3548 ;-----------------------------
                                   3549 ; BASIC: LET var=expr 
                                   3550 ; variable assignement 
                                   3551 ; output:
                                   3552 ;   A 		TK_NONE 
                                   3553 ;-----------------------------
      00116A                       3554 let:
      00116A CD 08 21         [ 4] 3555 	call next_token 
      00116D A1 05            [ 1] 3556 	cp a,#TK_VAR 
      00116F 27 03            [ 1] 3557 	jreq let02
      001171 CC 07 62         [ 2] 3558 	jp syntax_error
      001174                       3559 let02:
      001174 89               [ 2] 3560 	pushw x  
      001175 CD 08 21         [ 4] 3561 	call next_token 
      001178 A1 32            [ 1] 3562 	cp a,#TK_EQUAL
      00117A 27 03            [ 1] 3563 	jreq 1$
      00117C CC 07 62         [ 2] 3564 	jp syntax_error
      00117F                       3565 1$:	
      00117F CD 10 3B         [ 4] 3566 	call relation   
      001182 A1 04            [ 1] 3567 	cp a,#TK_INTGR 
      001184 27 03            [ 1] 3568 	jreq 2$
      001186 CC 07 62         [ 2] 3569 	jp syntax_error
      001189                       3570 2$:	
      001189 90 93            [ 1] 3571 	ldw y,x 
      00118B 85               [ 2] 3572 	popw x   
      00118C FF               [ 2] 3573 	ldw (x),y   
      00118D 81               [ 4] 3574 	ret 
                                   3575 
                                   3576 ;----------------------------
                                   3577 ; BASIC: LIST [[start][,end]]
                                   3578 ; list program lines 
                                   3579 ; form start to end 
                                   3580 ; if empty argument list then 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3581 ; list all.
                                   3582 ;----------------------------
                           000001  3583 	FIRST=1
                           000003  3584 	LAST=3 
                           000005  3585 	LN_PTR=5
                           000006  3586 	VSIZE=6 
      00118E                       3587 list:
      00118E                       3588 	_vars VSIZE
      00118E 52 06            [ 2]    1     sub sp,#VSIZE 
      001190 CE 00 1E         [ 2] 3589 	ldw x,txtbgn 
      001193 C3 00 20         [ 2] 3590 	cpw x,txtend 
      001196 2B 05            [ 1] 3591 	jrmi 1$
      001198 A6 0D            [ 1] 3592 	ld a,#ERR_NO_PROG 
      00119A CC 07 64         [ 2] 3593 	jp tb_error ; nothing to list 
      00119D 1F 05            [ 2] 3594 1$:	ldw (LN_PTR,sp),x 
      00119F FE               [ 2] 3595 	ldw x,(x) 
      0011A0 1F 01            [ 2] 3596 	ldw (FIRST,sp),x ; list from first line 
      0011A2 AE 7F FF         [ 2] 3597 	ldw x,#MAX_LINENO ; biggest line number 
      0011A5 1F 03            [ 2] 3598 	ldw (LAST,sp),x 
      0011A7 CD 0E EB         [ 4] 3599 	call arg_list
      0011AA 4D               [ 1] 3600 	tnz a
      0011AB 27 34            [ 1] 3601 	jreq list_start 
      0011AD A1 02            [ 1] 3602 	cp a,#2 
      0011AF 27 07            [ 1] 3603 	jreq 4$
      0011B1 A1 01            [ 1] 3604 	cp a,#1 
      0011B3 27 06            [ 1] 3605 	jreq first_line 
      0011B5 CC 07 62         [ 2] 3606 	jp syntax_error 
      0011B8 85               [ 2] 3607 4$:	popw x 
      0011B9 1F 03            [ 2] 3608 	ldw (LAST,sp),x 
      0011BB                       3609 first_line:
      0011BB 85               [ 2] 3610 	popw x 
      0011BC 1F 01            [ 2] 3611 	ldw (FIRST,sp),x 
      0011BE                       3612 lines_skip:
      0011BE CE 00 1E         [ 2] 3613 	ldw x,txtbgn
      0011C1 1F 05            [ 2] 3614 2$:	ldw (LN_PTR,sp),x 
      0011C3 C3 00 20         [ 2] 3615 	cpw x,txtend 
      0011C6 2A 3F            [ 1] 3616 	jrpl list_exit 
      0011C8 FE               [ 2] 3617 	ldw x,(x) ;line# 
      0011C9 13 01            [ 2] 3618 	cpw x,(FIRST,sp)
      0011CB 2A 14            [ 1] 3619 	jrpl list_start 
      0011CD 1E 05            [ 2] 3620 	ldw x,(LN_PTR,sp) 
      0011CF 1C 00 02         [ 2] 3621 	addw x,#2 
      0011D2 F6               [ 1] 3622 	ld a,(x)
      0011D3 5C               [ 2] 3623 	incw x 
      0011D4 C7 00 0D         [ 1] 3624 	ld acc8,a 
      0011D7 72 5F 00 0C      [ 1] 3625 	clr acc16 
      0011DB 72 BB 00 0C      [ 2] 3626 	addw x,acc16
      0011DF 20 E0            [ 2] 3627 	jra 2$ 
                                   3628 ; print loop
      0011E1                       3629 list_start:
      0011E1 1E 05            [ 2] 3630 	ldw x,(LN_PTR,sp)
      0011E3 E6 02            [ 1] 3631 3$:	ld a,(2,x) 
      0011E5 CD 12 5A         [ 4] 3632 	call prt_basic_line
      0011E8 1E 05            [ 2] 3633 	ldw x,(LN_PTR,sp)
      0011EA E6 02            [ 1] 3634 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0011EC C7 00 0D         [ 1] 3635 	ld acc8,a 
      0011EF 72 5F 00 0C      [ 1] 3636 	clr acc16 
      0011F3 72 BB 00 0C      [ 2] 3637 	addw x,acc16
      0011F7 C3 00 20         [ 2] 3638 	cpw x,txtend 
      0011FA 2A 0B            [ 1] 3639 	jrpl list_exit
      0011FC 1F 05            [ 2] 3640 	ldw (LN_PTR,sp),x
      0011FE FE               [ 2] 3641 	ldw x,(x)
      0011FF 13 03            [ 2] 3642 	cpw x,(LAST,sp)  
      001201 2C 04            [ 1] 3643 	jrsgt list_exit 
      001203 1E 05            [ 2] 3644 	ldw x,(LN_PTR,sp)
      001205 20 DC            [ 2] 3645 	jra 3$
      001207                       3646 list_exit:
      001207                       3647 	_drop VSIZE 
      001207 5B 06            [ 2]    1     addw sp,#VSIZE 
      001209 81               [ 4] 3648 	ret
                                   3649 
                                   3650 ;-------------------------
                                   3651 ; print counted string 
                                   3652 ; input:
                                   3653 ;   X 	address of string
                                   3654 ;--------------------------
      00120A                       3655 prt_cmd_name:
      00120A F6               [ 1] 3656 	ld a,(x)
      00120B 5C               [ 2] 3657 	incw x
      00120C A4 0F            [ 1] 3658 	and a,#15  
      00120E 88               [ 1] 3659 	push a 
      00120F 0D 01            [ 1] 3660 1$: tnz (1,sp) 
      001211 27 09            [ 1] 3661 	jreq 9$
      001213 F6               [ 1] 3662 	ld a,(x)
      001214 CD 01 C4         [ 4] 3663 	call putc 
      001217 5C               [ 2] 3664 	incw x
      001218 0A 01            [ 1] 3665 	dec (1,sp)	 
      00121A 20 F3            [ 2] 3666 	jra 1$
      00121C 84               [ 1] 3667 9$: pop a 
      00121D 81               [ 4] 3668 	ret	
                                   3669 
                                   3670 ;--------------------------
                                   3671 ; print TK_QSTR
                                   3672 ; converting control character
                                   3673 ; to backslash sequence
                                   3674 ; input:
                                   3675 ;   X        char *
                                   3676 ;-----------------------------
      00121E                       3677 prt_quote:
      00121E A6 22            [ 1] 3678 	ld a,#'"
      001220 CD 01 C4         [ 4] 3679 	call putc 
      001223 F6               [ 1] 3680 1$:	ld a,(x)
      001224 27 2D            [ 1] 3681 	jreq 9$
      001226 5C               [ 2] 3682 	incw x 
      001227 A1 20            [ 1] 3683 	cp a,#SPACE 
      001229 25 0C            [ 1] 3684 	jrult 3$
      00122B CD 01 C4         [ 4] 3685 	call putc
      00122E A1 5C            [ 1] 3686 	cp a,#'\ 
      001230 26 F1            [ 1] 3687 	jrne 1$ 
      001232                       3688 2$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001232 CD 01 C4         [ 4] 3689 	call putc 
      001235 20 EC            [ 2] 3690 	jra 1$
      001237 88               [ 1] 3691 3$: push a 
      001238 A6 5C            [ 1] 3692 	ld a,#'\
      00123A CD 01 C4         [ 4] 3693 	call putc 
      00123D 84               [ 1] 3694 	pop a 
      00123E A0 07            [ 1] 3695 	sub a,#7
      001240 C7 00 0D         [ 1] 3696 	ld acc8,a 
      001243 72 5F 00 0C      [ 1] 3697 	clr acc16
      001247 90 AE 0A BE      [ 2] 3698 	ldw y,#escaped 
      00124B 72 B9 00 0C      [ 2] 3699 	addw y,acc16 
      00124F 90 F6            [ 1] 3700 	ld a,(y)
      001251 20 DF            [ 2] 3701 	jra 2$
      001253 A6 22            [ 1] 3702 9$: ld a,#'"
      001255 CD 01 C4         [ 4] 3703 	call putc 
      001258 5C               [ 2] 3704 	incw x 
      001259 81               [ 4] 3705 	ret
                                   3706 
                                   3707 
                                   3708 ;--------------------------
                                   3709 ; decompile line from token list 
                                   3710 ; input:
                                   3711 ;   A       stop at this position 
                                   3712 ;   X 		pointer at line
                                   3713 ; output:
                                   3714 ;   none 
                                   3715 ;--------------------------	
                           000001  3716 	BASE_SAV=1
                           000002  3717 	WIDTH_SAV=2
                           000003  3718 	XSAVE=3
                           000005  3719 	LLEN=5
                           000005  3720 	VSIZE=5 
      00125A                       3721 prt_basic_line:
      00125A                       3722 	_vars VSIZE
      00125A 52 05            [ 2]    1     sub sp,#VSIZE 
      00125C 6B 05            [ 1] 3723 	ld (LLEN,sp),a  
      00125E C6 00 0A         [ 1] 3724 	ld a,base
      001261 6B 01            [ 1] 3725 	ld (BASE_SAV,sp),a  
      001263 C6 00 26         [ 1] 3726 	ld a,tab_width 
      001266 6B 02            [ 1] 3727 	ld (WIDTH_SAV,sp),a 
      001268 CF 00 19         [ 2] 3728 	ldw ptr16,x
      00126B FE               [ 2] 3729 	ldw x,(x)
      00126C 35 0A 00 0A      [ 1] 3730 	mov base,#10
      001270 35 05 00 26      [ 1] 3731 	mov tab_width,#5
      001274 CD 08 BA         [ 4] 3732 	call print_int ; print line number 
      001277 A6 20            [ 1] 3733 	ld a,#SPACE 
      001279 CD 01 C4         [ 4] 3734 	call putc 
      00127C 72 5F 00 26      [ 1] 3735 	clr tab_width
      001280 AE 00 03         [ 2] 3736 	ldw x,#3
      001283 9F               [ 1] 3737 1$:	ld a,xl 
      001284 11 05            [ 1] 3738 	cp a,(LLEN,sp)
      001286 2B 03            [ 1] 3739 	jrmi 20$
      001288 CC 13 A1         [ 2] 3740 	jp 90$
      00128B                       3741 20$:	 
      00128B 72 D6 00 19      [ 4] 3742 	ld a,([ptr16],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00128F 5C               [ 2] 3743 	incw x 
      001290 1F 03            [ 2] 3744 	ldw (XSAVE,sp),x 
      001292 A1 06            [ 1] 3745 	cp a,#TK_CMD 
      001294 2B 33            [ 1] 3746 	jrmi 4$
      001296 A1 08            [ 1] 3747 	cp a,#TK_CFUNC 
      001298 22 2F            [ 1] 3748 	jrugt 4$
      00129A                       3749 2$:	
      00129A 72 DE 00 19      [ 5] 3750 	ldw x,([ptr16],x)
      00129E A3 14 C5         [ 2] 3751 	cpw x,#remark 
      0012A1 26 14            [ 1] 3752 	jrne 3$
      0012A3 A6 27            [ 1] 3753 	ld a,#''
      0012A5 CD 01 C4         [ 4] 3754 	call putc 
      0012A8 1E 03            [ 2] 3755 	ldw x,(XSAVE,sp)
      0012AA 1C 00 02         [ 2] 3756 	addw x,#2
      0012AD 72 BB 00 19      [ 2] 3757 	addw x,ptr16  
      0012B1 CD 01 D7         [ 4] 3758 	call puts 
      0012B4 CC 13 A1         [ 2] 3759 	jp 90$ 
      0012B7                       3760 3$:	
      0012B7 CD 0E 57         [ 4] 3761 	call cmd_name
      0012BA CD 12 0A         [ 4] 3762 	call prt_cmd_name
      0012BD A6 20            [ 1] 3763 	ld a,#SPACE 
      0012BF CD 01 C4         [ 4] 3764 	call putc 
      0012C2 1E 03            [ 2] 3765 	ldw x,(XSAVE,sp)
      0012C4 1C 00 02         [ 2] 3766 	addw x,#2
      0012C7 20 BA            [ 2] 3767 	jra 1$
      0012C9 A1 02            [ 1] 3768 4$: cp a,#TK_QSTR 
      0012CB 26 0D            [ 1] 3769 	jrne 5$
      0012CD 72 BB 00 19      [ 2] 3770 	addw x,ptr16
      0012D1 CD 12 1E         [ 4] 3771 	call prt_quote  
      0012D4 72 B0 00 19      [ 2] 3772 	subw x,ptr16  
      0012D8 20 A9            [ 2] 3773 	jra 1$
      0012DA A1 03            [ 1] 3774 5$:	cp a,#TK_CHAR 
      0012DC 26 0F            [ 1] 3775 	jrne 51$
      0012DE A6 5C            [ 1] 3776 	ld a,#'\ 
      0012E0 CD 01 C4         [ 4] 3777 	call putc 
      0012E3 72 D6 00 19      [ 4] 3778 	ld a,([ptr16],x)
      0012E7 5C               [ 2] 3779 	incw x 
      0012E8 CD 01 C4         [ 4] 3780 	call putc 
      0012EB 20 96            [ 2] 3781 	jra 1$ 
      0012ED                       3782 51$:	
      0012ED A1 05            [ 1] 3783 	cp a,#TK_VAR
      0012EF 26 1B            [ 1] 3784 	jrne 6$ 
      0012F1 72 DE 00 19      [ 5] 3785 	ldw x,([ptr16],x)
      0012F5 1D 00 28         [ 2] 3786 	subw x,#vars 
      0012F8 9F               [ 1] 3787 	ld a,xl
      0012F9 44               [ 1] 3788 	srl a 
      0012FA AB 41            [ 1] 3789 	add a,#'A 
      0012FC CD 01 C4         [ 4] 3790 	call putc 
      0012FF A6 20            [ 1] 3791 	ld a,#SPACE 
      001301 CD 01 C4         [ 4] 3792 	call putc 
      001304 1E 03            [ 2] 3793 	ldw x,(XSAVE,sp)
      001306 1C 00 02         [ 2] 3794 	addw x,#2 
      001309 CC 12 83         [ 2] 3795 	jp  1$ 
      00130C A1 0A            [ 1] 3796 6$: cp a,#TK_ARRAY 
      00130E 26 0A            [ 1] 3797 	jrne 7$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001310 A6 40            [ 1] 3798 	ld a,#'@ 
      001312 CD 01 C4         [ 4] 3799 	call putc 
      001315 1E 03            [ 2] 3800 	ldw x,(XSAVE,sp)
      001317 CC 12 83         [ 2] 3801 	jp 1$ 
      00131A A1 04            [ 1] 3802 7$: cp a,#TK_INTGR 
      00131C 26 0F            [ 1] 3803 	jrne 8$
      00131E 72 DE 00 19      [ 5] 3804 	ldw x,([ptr16],x)
      001322 CD 08 BA         [ 4] 3805 	call print_int
                                   3806 ;	ld a,#SPACE 
                                   3807 ;	call putc 
      001325 1E 03            [ 2] 3808 	ldw x,(XSAVE,sp)
      001327 1C 00 02         [ 2] 3809 	addw x,#2 
      00132A CC 12 83         [ 2] 3810 	jp 1$
      00132D A1 31            [ 1] 3811 8$: cp a,#TK_GT 
      00132F 2B 1A            [ 1] 3812 	jrmi 9$
      001331 A1 35            [ 1] 3813 	cp a,#TK_NE 
      001333 22 16            [ 1] 3814 	jrugt 9$
      001335 A0 31            [ 1] 3815 	sub a,#TK_GT  
      001337 48               [ 1] 3816 	sll a 
      001338 90 5F            [ 1] 3817 	clrw y 
      00133A 90 97            [ 1] 3818 	ld yl,a 
      00133C 72 A9 13 BA      [ 2] 3819 	addw y,#relop_str 
      001340 90 FE            [ 2] 3820 	ldw y,(y)
      001342 93               [ 1] 3821 	ldw x,y 
      001343 CD 01 D7         [ 4] 3822 	call puts 
      001346 1E 03            [ 2] 3823 	ldw x,(XSAVE,sp)
      001348 CC 12 83         [ 2] 3824 	jp 1$
      00134B A1 10            [ 1] 3825 9$: cp a,#TK_PLUS 
      00134D 26 04            [ 1] 3826 	jrne 10$
      00134F A6 2B            [ 1] 3827 	ld a,#'+
      001351 20 46            [ 2] 3828 	jra 80$ 
      001353 A1 11            [ 1] 3829 10$: cp a,#TK_MINUS
      001355 26 04            [ 1] 3830 	jrne 11$
      001357 A6 2D            [ 1] 3831 	ld a,#'-
      001359 20 3E            [ 2] 3832 	jra 80$
      00135B A1 20            [ 1] 3833 11$: cp a,#TK_MULT 
      00135D 2B 0E            [ 1] 3834 	jrmi 12$
      00135F A1 22            [ 1] 3835 	cp a,#TK_MOD 
      001361 22 0A            [ 1] 3836 	jrugt 12$
      001363 A0 20            [ 1] 3837 	sub a,#0x20
      001365 5F               [ 1] 3838 	clrw x 
      001366 97               [ 1] 3839 	ld xl,a 
      001367 1C 13 B7         [ 2] 3840 	addw x,#mul_char 
      00136A F6               [ 1] 3841 	ld a,(x)
      00136B 20 2C            [ 2] 3842 	jra 80$ 
      00136D A1 0B            [ 1] 3843 12$: cp a,#TK_LPAREN 
      00136F 2B 0E            [ 1] 3844 	jrmi 13$
      001371 A1 0E            [ 1] 3845 	cp a,#TK_SHARP 
      001373 22 0A            [ 1] 3846 	jrugt 13$
      001375 A0 0B            [ 1] 3847 	sub a,#TK_LPAREN
      001377 5F               [ 1] 3848 	clrw x 
      001378 97               [ 1] 3849 	ld xl,a 
      001379 1C 13 B3         [ 2] 3850 	addw x,#single_char 
      00137C F6               [ 1] 3851 	ld a,(x)
      00137D 20 1A            [ 2] 3852 	jra 80$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      00137F A1 03            [ 1] 3853 13$: cp a,#TK_CHAR 
      001381 26 14            [ 1] 3854 	jrne 14$
      001383 A6 5C            [ 1] 3855 	ld a,#'\
      001385 CD 01 C4         [ 4] 3856 	call putc 
      001388 1E 03            [ 2] 3857 	ldw x,(XSAVE,sp)
      00138A 72 D6 00 19      [ 4] 3858 	ld a,([ptr16],x)
      00138E 5C               [ 2] 3859 	incw x 
      00138F 1F 03            [ 2] 3860 	ldw (XSAVE,sp),x 
      001391 CD 01 C4         [ 4] 3861 	call putc 
      001394 CC 12 83         [ 2] 3862 	jp 1$ 
      001397 A6 3A            [ 1] 3863 14$: ld a,#':
      001399 CD 01 C4         [ 4] 3864 80$: call putc 
      00139C 1E 03            [ 2] 3865 	ldw x,(XSAVE,sp)
      00139E CC 12 83         [ 2] 3866 	jp 1$ 
      0013A1                       3867 90$: 
      0013A1 A6 0D            [ 1] 3868 	ld a,#CR 
      0013A3 CD 01 C4         [ 4] 3869 	call putc
      0013A6 7B 02            [ 1] 3870 	ld a,(WIDTH_SAV,sp) 
      0013A8 C7 00 26         [ 1] 3871 	ld tab_width,a 
      0013AB 7B 01            [ 1] 3872 	ld a,(BASE_SAV,sp) 
      0013AD C7 00 0A         [ 1] 3873 	ld base,a
      0013B0                       3874 	_drop VSIZE 
      0013B0 5B 05            [ 2]    1     addw sp,#VSIZE 
      0013B2 81               [ 4] 3875 	ret 	
      0013B3 28 29 2C 23           3876 single_char: .byte '(',')',',','#'
      0013B7 2A 2F 25              3877 mul_char: .byte '*','/','%'
      0013BA 13 C6 13 C8 13 CA 13  3878 relop_str: .word gt,equal,ge,lt,le,ne 
             CD 13 CF 13 D2
      0013C6 3E 00                 3879 gt: .asciz ">"
      0013C8 3D 00                 3880 equal: .asciz "="
      0013CA 3E 3D 00              3881 ge: .asciz ">="
      0013CD 3C 00                 3882 lt: .asciz "<"
      0013CF 3C 3D 00              3883 le: .asciz "<="
      0013D2 3C 3E 00              3884 ne:  .asciz "<>"
                                   3885 
                                   3886 
                                   3887 ;---------------------------------
                                   3888 ; BASIC: PRINT|? arg_list 
                                   3889 ; print values from argument list
                                   3890 ;----------------------------------
                           000001  3891 	COMMA=1
                           000001  3892 	VSIZE=1
      0013D5                       3893 print:
      0013D5 4B 00            [ 1] 3894 push #0 ; local variable COMMA 
      0013D7                       3895 reset_comma:
      0013D7 0F 01            [ 1] 3896 	clr (COMMA,sp)
      0013D9                       3897 prt_loop:
      0013D9 CD 08 21         [ 4] 3898 	call next_token
      0013DC A1 02            [ 1] 3899 	cp a,#CMD_END 
      0013DE 2B 55            [ 1] 3900 	jrmi print_exit ; colon or end of line 
      0013E0 A1 02            [ 1] 3901 	cp a,#TK_QSTR
      0013E2 27 12            [ 1] 3902 	jreq 1$
      0013E4 A1 03            [ 1] 3903 	cp a,#TK_CHAR 
      0013E6 27 13            [ 1] 3904 	jreq 2$ 
      0013E8 A1 08            [ 1] 3905 	cp a,#TK_CFUNC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0013EA 27 15            [ 1] 3906 	jreq 3$
      0013EC A1 0D            [ 1] 3907 	cp a,#TK_COMMA 
      0013EE 27 18            [ 1] 3908 	jreq 4$
      0013F0 A1 0E            [ 1] 3909 	cp a,#TK_SHARP 
      0013F2 27 1B            [ 1] 3910 	jreq 5$
      0013F4 20 2B            [ 2] 3911 	jra 7$ 
      0013F6                       3912 1$:	; print string 
      0013F6 CD 01 D7         [ 4] 3913 	call puts
      0013F9 20 DC            [ 2] 3914 	jra reset_comma
      0013FB                       3915 2$:	; print character 
      0013FB 9F               [ 1] 3916 	ld a,xl 
      0013FC CD 01 C4         [ 4] 3917 	call putc 
      0013FF 20 D6            [ 2] 3918 	jra reset_comma 
      001401                       3919 3$: ; print character function value  	
      001401 FD               [ 4] 3920 	call (x)
      001402 9F               [ 1] 3921 	ld a,xl 
      001403 CD 01 C4         [ 4] 3922 	call putc
      001406 20 CF            [ 2] 3923 	jra reset_comma 
      001408                       3924 4$: ; set comma state 
      001408 A6 FF            [ 1] 3925 	ld a,#255 
      00140A 6B 01            [ 1] 3926 	ld (COMMA,sp),a  
      00140C CC 13 D9         [ 2] 3927 	jp prt_loop   
      00140F                       3928 5$: ; # character must be followed by an integer   
      00140F CD 08 21         [ 4] 3929 	call next_token
      001412 A1 04            [ 1] 3930 	cp a,#TK_INTGR 
      001414 27 03            [ 1] 3931 	jreq 6$
      001416 CC 07 62         [ 2] 3932 	jp syntax_error 
      001419                       3933 6$: ; set tab width
      001419 9F               [ 1] 3934 	ld a,xl 
      00141A A4 0F            [ 1] 3935 	and a,#15 
      00141C C7 00 26         [ 1] 3936 	ld tab_width,a 
      00141F 20 B6            [ 2] 3937 	jra reset_comma 
      001421                       3938 7$:	
      001421                       3939 	_unget_token
      001421 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001426 CD 10 3B         [ 4] 3940 	call relation 
      001429 A1 04            [ 1] 3941 	cp a,#TK_INTGR
      00142B 27 03            [ 1] 3942 	jreq 8$
      00142D CC 14 35         [ 2] 3943 	jp print_exit 
      001430 CD 08 BA         [ 4] 3944 8$: call print_int 
      001433 20 A2            [ 2] 3945 	jra reset_comma 
      001435                       3946 print_exit:
      001435 0D 01            [ 1] 3947 	tnz (COMMA,sp)
      001437 26 05            [ 1] 3948 	jrne 9$
      001439 A6 0D            [ 1] 3949 	ld a,#CR 
      00143B CD 01 C4         [ 4] 3950     call putc 
      00143E                       3951 9$:	_drop VSIZE 
      00143E 5B 01            [ 2]    1     addw sp,#VSIZE 
      001440 81               [ 4] 3952 	ret 
                                   3953 
      001441                       3954 print_type: 
                                   3955 
                                   3956 ;----------------------
                                   3957 ; 'save_context' and
                                   3958 ; 'rest_context' must be 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3959 ; called at the same 
                                   3960 ; call stack depth 
                                   3961 ; i.e. SP must have the 
                                   3962 ; save value at  
                                   3963 ; entry point of both 
                                   3964 ; routine. 
                                   3965 ;---------------------
                           000004  3966 	CTXT_SIZE=4 ; size of saved data 
                                   3967 ;--------------------
                                   3968 ; save current BASIC
                                   3969 ; interpreter context 
                                   3970 ; on stack 
                                   3971 ;--------------------
      001441                       3972 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001441                       3973 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001441                       3974 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001441                       3975 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001441                       3976 save_context:
      001441 CE 00 04         [ 2] 3977 	ldw x,basicptr 
      001444 1F 03            [ 2] 3978 	ldw (BPTR,sp),x
      001446 C6 00 01         [ 1] 3979 	ld a,in 
      001449 6B 05            [ 1] 3980 	ld (IN,sp),a
      00144B C6 00 03         [ 1] 3981 	ld a,count 
      00144E 6B 06            [ 1] 3982 	ld (CNT,sp),a  
      001450 81               [ 4] 3983 	ret
                                   3984 
                                   3985 ;-----------------------
                                   3986 ; restore previously saved 
                                   3987 ; BASIC interpreter context 
                                   3988 ; from stack 
                                   3989 ;-------------------------
      001451                       3990 rest_context:
      001451 1E 03            [ 2] 3991 	ldw x,(BPTR,sp)
      001453 CF 00 04         [ 2] 3992 	ldw basicptr,x 
      001456 7B 05            [ 1] 3993 	ld a,(IN,sp)
      001458 C7 00 01         [ 1] 3994 	ld in,a
      00145B 7B 06            [ 1] 3995 	ld a,(CNT,sp)
      00145D C7 00 03         [ 1] 3996 	ld count,a  
      001460 81               [ 4] 3997 	ret
                                   3998 
                                   3999 ;------------------------------------------
                                   4000 ; BASIC: INPUT [string],var[,[string],var]
                                   4001 ; input value in variables 
                                   4002 ; [string] optionally can be used as prompt 
                                   4003 ;-----------------------------------------
                           000001  4004 	CX_BPTR=1
                           000003  4005 	CX_IN=3
                           000004  4006 	CX_CNT=4
                           000005  4007 	SKIP=5
                           000006  4008 	VAR_ADDR=6 
                           000007  4009 	VSIZE=7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001461                       4010 input_var:
      001461                       4011 	_vars VSIZE 
      001461 52 07            [ 2]    1     sub sp,#VSIZE 
      001463                       4012 input_loop:
      001463 0F 05            [ 1] 4013 	clr (SKIP,sp)
      001465 CD 08 21         [ 4] 4014 	call next_token 
      001468 A1 02            [ 1] 4015 	cp a,#TK_QSTR 
      00146A 26 08            [ 1] 4016 	jrne 1$ 
      00146C CD 12 1E         [ 4] 4017 	call prt_quote 
      00146F 03 05            [ 1] 4018 	cpl (SKIP,sp)
      001471 CD 08 21         [ 4] 4019 	call next_token 
      001474 A1 05            [ 1] 4020 1$: cp a,#TK_VAR  
      001476 27 03            [ 1] 4021 	jreq 2$ 
      001478 CC 07 62         [ 2] 4022 	jp syntax_error
      00147B 1F 06            [ 2] 4023 2$:	ldw (VAR_ADDR,sp),x 
      00147D 0D 05            [ 1] 4024 	tnz (SKIP,sp)
      00147F 26 06            [ 1] 4025 	jrne 21$ 
                                   4026 ;	clr pad+2
      001481 AE 17 38         [ 2] 4027 	ldw x,#pad 
      001484 CD 01 D7         [ 4] 4028 	call puts   
      001487                       4029 21$:
      001487 A6 3A            [ 1] 4030 	ld a,#':
      001489 CD 01 C4         [ 4] 4031 	call putc 
      00148C CD 14 41         [ 4] 4032 	call save_context 
      00148F 72 5F 00 03      [ 1] 4033 	clr count  
      001493 CD 09 E4         [ 4] 4034 	call readln 
      001496 AE 16 E8         [ 2] 4035 	ldw x,#tib 
      001499 CF 00 04         [ 2] 4036 	ldw basicptr,x  
      00149C 72 5F 00 01      [ 1] 4037 	clr in 
      0014A0 CD 0B 63         [ 4] 4038 	call get_token
      0014A3 A1 04            [ 1] 4039 	cp a,#TK_INTGR
      0014A5 27 06            [ 1] 4040 	jreq 3$ 
      0014A7 CD 14 51         [ 4] 4041 	call rest_context 
      0014AA CC 07 62         [ 2] 4042 	jp syntax_error
      0014AD 90 85            [ 2] 4043 3$: popw y 
      0014AF 90 FF            [ 2] 4044 	ldw (y),x 
      0014B1 CD 14 51         [ 4] 4045 	call rest_context
      0014B4 CD 08 21         [ 4] 4046 	call next_token 
      0014B7 A1 0D            [ 1] 4047 	cp a,#TK_COMMA 
      0014B9 27 A8            [ 1] 4048 	jreq input_loop 
      0014BB A1 01            [ 1] 4049 	cp a,#TK_COLON 
      0014BD 23 03            [ 2] 4050     jrule input_exit 
      0014BF CC 07 62         [ 2] 4051 	jp syntax_error 
      0014C2                       4052 input_exit:
      0014C2                       4053 	_drop VSIZE 
      0014C2 5B 07            [ 2]    1     addw sp,#VSIZE 
      0014C4 81               [ 4] 4054 	ret 
                                   4055 
                                   4056 
                                   4057 ;---------------------
                                   4058 ; BASIC: REMARK | ' 
                                   4059 ; skip comment to end of line 
                                   4060 ;---------------------- 
      0014C5                       4061 remark:
      0014C5 55 00 03 00 01   [ 1] 4062 	mov in,count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0014CA 81               [ 4] 4063  	ret 
                                   4064 
                                   4065 
                                   4066 ;---------------------
                                   4067 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   4068 ; read in loop 'addr'  
                                   4069 ; apply & 'mask' to value 
                                   4070 ; loop while result==0.  
                                   4071 ; if 'xor_mask' given 
                                   4072 ; apply ^ in second  
                                   4073 ; loop while result==0 
                                   4074 ;---------------------
                           000001  4075 	XMASK=1 
                           000002  4076 	MASK=2
                           000003  4077 	ADDR=3
                           000004  4078 	VSIZE=4
      0014CB                       4079 wait: 
      0014CB                       4080 	_vars VSIZE
      0014CB 52 04            [ 2]    1     sub sp,#VSIZE 
      0014CD 0F 01            [ 1] 4081 	clr (XMASK,sp) 
      0014CF CD 0E EB         [ 4] 4082 	call arg_list 
      0014D2 A1 02            [ 1] 4083 	cp a,#2
      0014D4 24 03            [ 1] 4084 	jruge 0$
      0014D6 CC 07 62         [ 2] 4085 	jp syntax_error 
      0014D9 A1 03            [ 1] 4086 0$:	cp a,#3
      0014DB 25 04            [ 1] 4087 	jrult 1$
      0014DD 85               [ 2] 4088 	popw x 
      0014DE 9F               [ 1] 4089 	ld a,xl
      0014DF 6B 01            [ 1] 4090 	ld (XMASK,sp),a 
      0014E1 85               [ 2] 4091 1$: popw x ; mask 
      0014E2 9F               [ 1] 4092 	ld a,xl 
      0014E3 6B 02            [ 1] 4093 	ld (MASK,sp),a 
      0014E5 85               [ 2] 4094 	popw x ; address 
      0014E6 F6               [ 1] 4095 2$:	ld a,(x)
      0014E7 14 02            [ 1] 4096 	and a,(MASK,sp)
      0014E9 18 01            [ 1] 4097 	xor a,(XMASK,sp)
      0014EB 27 F9            [ 1] 4098 	jreq 2$ 
      0014ED                       4099 	_drop VSIZE 
      0014ED 5B 04            [ 2]    1     addw sp,#VSIZE 
      0014EF 81               [ 4] 4100 	ret 
                                   4101 
                                   4102 ;---------------------
                                   4103 ; BASIC: BSET addr,mask
                                   4104 ; set bits at 'addr' corresponding 
                                   4105 ; to those of 'mask' that are at 1.
                                   4106 ; arguments:
                                   4107 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4108 ;   mask        mask|addr
                                   4109 ; output:
                                   4110 ;	none 
                                   4111 ;--------------------------
      0014F0                       4112 bit_set:
      0014F0 CD 0E EB         [ 4] 4113 	call arg_list 
      0014F3 A1 02            [ 1] 4114 	cp a,#2	 
      0014F5 27 03            [ 1] 4115 	jreq 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0014F7 CC 07 62         [ 2] 4116 	jp syntax_error
      0014FA                       4117 1$: 
      0014FA 85               [ 2] 4118 	popw x ; mask 
      0014FB 9F               [ 1] 4119 	ld a,xl 
      0014FC 85               [ 2] 4120 	popw x ; addr  
      0014FD FA               [ 1] 4121 	or a,(x)
      0014FE F7               [ 1] 4122 	ld (x),a
      0014FF 81               [ 4] 4123 	ret 
                                   4124 
                                   4125 ;---------------------
                                   4126 ; BASIC: BRES addr,mask
                                   4127 ; reset bits at 'addr' corresponding 
                                   4128 ; to those of 'mask' that are at 1.
                                   4129 ; arguments:
                                   4130 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4131 ;   mask	    ~mask&*addr  
                                   4132 ; output:
                                   4133 ;	none 
                                   4134 ;--------------------------
      001500                       4135 bit_reset:
      001500 CD 0E EB         [ 4] 4136 	call arg_list 
      001503 A1 02            [ 1] 4137 	cp a,#2  
      001505 27 03            [ 1] 4138 	jreq 1$ 
      001507 CC 07 62         [ 2] 4139 	jp syntax_error
      00150A                       4140 1$: 
      00150A 85               [ 2] 4141 	popw x ; mask 
      00150B 9F               [ 1] 4142 	ld a,xl 
      00150C 43               [ 1] 4143 	cpl a 
      00150D 85               [ 2] 4144 	popw x ; addr  
      00150E F4               [ 1] 4145 	and a,(x)
      00150F F7               [ 1] 4146 	ld (x),a 
      001510 81               [ 4] 4147 	ret 
                                   4148 
                                   4149 ;---------------------
                                   4150 ; BASIC: BTOGL addr,mask
                                   4151 ; toggle bits at 'addr' corresponding 
                                   4152 ; to those of 'mask' that are at 1.
                                   4153 ; arguments:
                                   4154 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4155 ;   mask	    mask^*addr  
                                   4156 ; output:
                                   4157 ;	none 
                                   4158 ;--------------------------
      001511                       4159 bit_toggle:
      001511 CD 0E EB         [ 4] 4160 	call arg_list 
      001514 A1 02            [ 1] 4161 	cp a,#2 
      001516 27 03            [ 1] 4162 	jreq 1$ 
      001518 CC 07 62         [ 2] 4163 	jp syntax_error
      00151B 85               [ 2] 4164 1$: popw x ; mask 
      00151C 9F               [ 1] 4165 	ld a,xl 
      00151D 85               [ 2] 4166 	popw x ; addr  
      00151E F8               [ 1] 4167 	xor a,(x)
      00151F F7               [ 1] 4168 	ld (x),a 
      001520 81               [ 4] 4169 	ret 
                                   4170 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4171 
                                   4172 ;---------------------
                                   4173 ; BASIC: BTEST(addr,bit)
                                   4174 ; return bit value at 'addr' 
                                   4175 ; bit is in range {0..7}.
                                   4176 ; arguments:
                                   4177 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4178 ;   bit 	    bit position {0..7}  
                                   4179 ; output:
                                   4180 ;	none 
                                   4181 ;--------------------------
      001521                       4182 bit_test:
      001521 CD 0F 12         [ 4] 4183 	call func_args 
      001524 A1 02            [ 1] 4184 	cp a,#2
      001526 27 03            [ 1] 4185 	jreq 0$
      001528 CC 07 62         [ 2] 4186 	jp syntax_error
      00152B                       4187 0$:	
      00152B 85               [ 2] 4188 	popw x 
      00152C 9F               [ 1] 4189 	ld a,xl 
      00152D A4 07            [ 1] 4190 	and a,#7
      00152F 88               [ 1] 4191 	push a   
      001530 A6 01            [ 1] 4192 	ld a,#1 
      001532 0D 01            [ 1] 4193 1$: tnz (1,sp)
      001534 27 05            [ 1] 4194 	jreq 2$
      001536 48               [ 1] 4195 	sll a 
      001537 0A 01            [ 1] 4196 	dec (1,sp)
      001539 20 F7            [ 2] 4197 	jra 1$
      00153B                       4198 2$: _drop 1 
      00153B 5B 01            [ 2]    1     addw sp,#1 
      00153D 85               [ 2] 4199 	popw x 
      00153E F4               [ 1] 4200 	and a,(x)
      00153F 27 02            [ 1] 4201 	jreq 3$
      001541 A6 01            [ 1] 4202 	ld a,#1 
      001543 5F               [ 1] 4203 3$:	clrw x 
      001544 97               [ 1] 4204 	ld xl,a 
      001545 A6 04            [ 1] 4205 	ld a,#TK_INTGR
      001547 81               [ 4] 4206 	ret
                                   4207 
                                   4208 
                                   4209 ;--------------------
                                   4210 ; BASIC: POKE addr,byte
                                   4211 ; put a byte at addr 
                                   4212 ;--------------------
      001548                       4213 poke:
      001548 CD 0E EB         [ 4] 4214 	call arg_list 
      00154B A1 02            [ 1] 4215 	cp a,#2
      00154D 27 03            [ 1] 4216 	jreq 1$
      00154F CC 07 62         [ 2] 4217 	jp syntax_error
      001552                       4218 1$:	
      001552 85               [ 2] 4219 	popw x  
      001553 9F               [ 1] 4220     ld a,xl 
      001554 85               [ 2] 4221 	popw x 
      001555 F7               [ 1] 4222 	ld (x),a 
      001556 81               [ 4] 4223 	ret 
                                   4224 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4225 ;-----------------------
                                   4226 ; BASIC: PEEK(addr)
                                   4227 ; get the byte at addr 
                                   4228 ; input:
                                   4229 ;	none 
                                   4230 ; output:
                                   4231 ;	X 		value 
                                   4232 ;-----------------------
      001557                       4233 peek:
      001557 CD 0F 12         [ 4] 4234 	call func_args
      00155A A1 01            [ 1] 4235 	cp a,#1
      00155C 27 03            [ 1] 4236 	jreq 1$
      00155E CC 07 62         [ 2] 4237 	jp syntax_error
      001561 85               [ 2] 4238 1$:	popw x 
      001562 F6               [ 1] 4239 	ld a,(x)
      001563 5F               [ 1] 4240 	clrw x 
      001564 97               [ 1] 4241 	ld xl,a 
      001565 A6 04            [ 1] 4242 	ld a,#TK_INTGR
      001567 81               [ 4] 4243 	ret 
                                   4244 
                                   4245 ;----------------------------
                                   4246 ; BASIC: XPEEK(page,addr)
                                   4247 ; read extended memory byte
                                   4248 ; page in range {0,1,2}
                                   4249 ;----------------------------
      001568                       4250 xpeek:
      001568 CD 0F 12         [ 4] 4251 	call func_args 
      00156B A1 02            [ 1] 4252 	cp a,#2 
      00156D 27 03            [ 1] 4253 	jreq 1$
      00156F CC 07 62         [ 2] 4254 	jp syntax_error
      001572                       4255 1$: 
      001572 85               [ 2] 4256 	popw x  
      001573 CF 00 19         [ 2] 4257 	ldw farptr+1,x 
      001576 85               [ 2] 4258 	popw x 
      001577 9F               [ 1] 4259 	ld a,xl 
      001578 C7 00 18         [ 1] 4260 	ld farptr,a 
      00157B 5F               [ 1] 4261 	clrw x
      00157C 92 BC 00 18      [ 5] 4262 	ldf a,[farptr]
      001580 97               [ 1] 4263 	ld xl,a 
      001581 A6 04            [ 1] 4264 	ld a,#TK_INTGR 
      001583 81               [ 4] 4265 	ret 
                                   4266 
                                   4267 ;---------------------------
                                   4268 ; BASIC IF expr : instructions
                                   4269 ; evaluate expr and if true 
                                   4270 ; execute instructions on same line. 
                                   4271 ;----------------------------
      001584                       4272 if: 
      001584 CD 10 3B         [ 4] 4273 	call relation 
      001587 A1 04            [ 1] 4274 	cp a,#TK_INTGR
      001589 27 03            [ 1] 4275 	jreq 1$ 
      00158B CC 07 62         [ 2] 4276 	jp syntax_error
      00158E 4F               [ 1] 4277 1$:	clr a 
      00158F 5D               [ 2] 4278 	tnzw x 
      001590 26 05            [ 1] 4279 	jrne 9$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4280 ;skip to next line
      001592 55 00 03 00 01   [ 1] 4281 	mov in,count
      001597 81               [ 4] 4282 9$:	ret 
                                   4283 
                                   4284 ;------------------------
                                   4285 ; BASIC: FOR var=expr 
                                   4286 ; set variable to expression 
                                   4287 ; leave variable address 
                                   4288 ; on stack and set
                                   4289 ; FLOOP bit in 'flags'
                                   4290 ;-----------------
                           000001  4291 	RETL1=1 ; return address  
                           000003  4292 	FSTEP=3  ; variable increment
                           000005  4293 	LIMIT=5 ; loop limit 
                           000007  4294 	CVAR=7   ; control variable 
                           000009  4295 	INW=9   ;  in.w saved
                           00000B  4296 	BPTR=11 ; baseptr saved
                           00000A  4297 	VSIZE=10  
      001598                       4298 for: ; { -- var_addr }
      001598 85               [ 2] 4299 	popw x ; call return address 
      001599                       4300 	_vars VSIZE 
      001599 52 0A            [ 2]    1     sub sp,#VSIZE 
      00159B 89               [ 2] 4301 	pushw x  ; RETL1 
      00159C A6 05            [ 1] 4302 	ld a,#TK_VAR 
      00159E CD 0E DE         [ 4] 4303 	call expect
      0015A1 1F 07            [ 2] 4304 	ldw (CVAR,sp),x  ; control variable 
      0015A3 CD 11 74         [ 4] 4305 	call let02 
      0015A6 72 14 00 25      [ 1] 4306 	bset flags,#FLOOP 
                                   4307 ; open space on stack for loop data 
      0015AA 5F               [ 1] 4308 	clrw x 
      0015AB 1F 0B            [ 2] 4309 	ldw (BPTR,sp),x 
      0015AD 1F 09            [ 2] 4310 	ldw (INW,sp),x 
      0015AF CD 08 21         [ 4] 4311 	call next_token 
      0015B2 A1 06            [ 1] 4312 	cp a,#TK_CMD 
      0015B4 27 03            [ 1] 4313 	jreq 1$
      0015B6 CC 07 62         [ 2] 4314 	jp syntax_error
      0015B9                       4315 1$:  
      0015B9 A3 15 C1         [ 2] 4316 	cpw x,#to 
      0015BC 27 03            [ 1] 4317 	jreq to
      0015BE CC 07 62         [ 2] 4318 	jp syntax_error 
                                   4319 
                                   4320 ;-----------------------------------
                                   4321 ; BASIC: TO expr 
                                   4322 ; second part of FOR loop initilization
                                   4323 ; leave limit on stack and set 
                                   4324 ; FTO bit in 'flags'
                                   4325 ;-----------------------------------
      0015C1                       4326 to: ; { var_addr -- var_addr limit step }
      0015C1 72 04 00 25 03   [ 2] 4327 	btjt flags,#FLOOP,1$
      0015C6 CC 07 62         [ 2] 4328 	jp syntax_error
      0015C9 CD 10 3B         [ 4] 4329 1$: call relation  
      0015CC A1 04            [ 1] 4330 	cp a,#TK_INTGR 
      0015CE 27 03            [ 1] 4331 	jreq 2$ 
      0015D0 CC 07 62         [ 2] 4332 	jp syntax_error
      0015D3 1F 05            [ 2] 4333 2$: ldw (LIMIT,sp),x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4334 ;	ldw x,in.w 
      0015D5 CD 08 21         [ 4] 4335 	call next_token
      0015D8 A1 00            [ 1] 4336 	cp a,#TK_NONE  
      0015DA 27 0E            [ 1] 4337 	jreq 4$ 
      0015DC A1 06            [ 1] 4338 	cp a,#TK_CMD
      0015DE 26 05            [ 1] 4339 	jrne 3$
      0015E0 A3 15 F1         [ 2] 4340 	cpw x,#step 
      0015E3 27 0C            [ 1] 4341 	jreq step
      0015E5                       4342 3$:	
      0015E5                       4343 	_unget_token   	 
      0015E5 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0015EA                       4344 4$:	
      0015EA AE 00 01         [ 2] 4345 	ldw x,#1   ; default step  
      0015ED 1F 03            [ 2] 4346 	ldw (FSTEP,sp),x 
      0015EF 20 14            [ 2] 4347 	jra store_loop_addr 
                                   4348 
                                   4349 
                                   4350 ;----------------------------------
                                   4351 ; BASIC: STEP expr 
                                   4352 ; optional third par of FOR loop
                                   4353 ; initialization. 	
                                   4354 ;------------------------------------
      0015F1                       4355 step: ; {var limit -- var limit step}
      0015F1 72 04 00 25 03   [ 2] 4356 	btjt flags,#FLOOP,1$
      0015F6 CC 07 62         [ 2] 4357 	jp syntax_error
      0015F9 CD 10 3B         [ 4] 4358 1$: call relation
      0015FC A1 04            [ 1] 4359 	cp a,#TK_INTGR
      0015FE 27 03            [ 1] 4360 	jreq 2$
      001600 CC 07 62         [ 2] 4361 	jp syntax_error
      001603 1F 03            [ 2] 4362 2$:	ldw (FSTEP,sp),x ; step
                                   4363 ; leave loop back entry point on cstack 
                                   4364 ; cstack is 1 call deep from interpreter
      001605                       4365 store_loop_addr:
      001605 CE 00 04         [ 2] 4366 	ldw x,basicptr  
      001608 1F 0B            [ 2] 4367 	ldw (BPTR,sp),x 
      00160A CE 00 00         [ 2] 4368 	ldw x,in.w 
      00160D 1F 09            [ 2] 4369 	ldw (INW,sp),x   
      00160F 72 15 00 25      [ 1] 4370 	bres flags,#FLOOP 
      001613 72 5C 00 22      [ 1] 4371 	inc loop_depth  
      001617 81               [ 4] 4372 	ret 
                                   4373 
                                   4374 ;--------------------------------
                                   4375 ; BASIC: NEXT var 
                                   4376 ; FOR loop control 
                                   4377 ; increment variable with step 
                                   4378 ; and compare with limit 
                                   4379 ; loop if threshold not crossed.
                                   4380 ; else stack. 
                                   4381 ; and decrement 'loop_depth' 
                                   4382 ;--------------------------------
      001618                       4383 next: ; {var limit step retl1 -- [var limit step ] }
      001618 72 5D 00 22      [ 1] 4384 	tnz loop_depth 
      00161C 26 03            [ 1] 4385 	jrne 1$ 
      00161E CC 07 62         [ 2] 4386 	jp syntax_error 
      001621                       4387 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001621 A6 05            [ 1] 4388 	ld a,#TK_VAR 
      001623 CD 0E DE         [ 4] 4389 	call expect
                                   4390 ; check for good variable after NEXT 	 
      001626 13 07            [ 2] 4391 	cpw x,(CVAR,sp)
      001628 27 03            [ 1] 4392 	jreq 2$  
      00162A CC 07 62         [ 2] 4393 	jp syntax_error ; not the good one 
      00162D                       4394 2$: ; increment variable 
      00162D FE               [ 2] 4395 	ldw x,(x)  ; get var value 
      00162E 72 FB 03         [ 2] 4396 	addw x,(FSTEP,sp) ; var+step 
      001631 16 07            [ 2] 4397 	ldw y,(CVAR,sp)
      001633 90 FF            [ 2] 4398 	ldw (y),x ; save var new value 
                                   4399 ; check sign of STEP  
      001635 A6 80            [ 1] 4400 	ld a,#0x80
      001637 15 03            [ 1] 4401 	bcp a,(FSTEP,sp)
      001639 2A 06            [ 1] 4402 	jrpl 4$
                                   4403 ;negative step 
      00163B 13 05            [ 2] 4404 	cpw x,(LIMIT,sp)
      00163D 2F 1B            [ 1] 4405 	jrslt loop_done
      00163F 20 04            [ 2] 4406 	jra loop_back 
      001641                       4407 4$: ; positive step
      001641 13 05            [ 2] 4408 	cpw x,(LIMIT,sp)
      001643 2C 15            [ 1] 4409 	jrsgt loop_done
      001645                       4410 loop_back:
      001645 1E 0B            [ 2] 4411 	ldw x,(BPTR,sp)
      001647 CF 00 04         [ 2] 4412 	ldw basicptr,x 
      00164A 72 01 00 25 05   [ 2] 4413 	btjf flags,#FRUN,1$ 
      00164F E6 02            [ 1] 4414 	ld a,(2,x)
      001651 C7 00 03         [ 1] 4415 	ld count,a
      001654 1E 09            [ 2] 4416 1$:	ldw x,(INW,sp)
      001656 CF 00 00         [ 2] 4417 	ldw in.w,x 
      001659 81               [ 4] 4418 	ret 
      00165A                       4419 loop_done:
                                   4420 	; remove loop data from stack  
      00165A 85               [ 2] 4421 	popw x
      00165B                       4422 	_drop VSIZE 
      00165B 5B 0A            [ 2]    1     addw sp,#VSIZE 
      00165D 72 5A 00 22      [ 1] 4423 	dec loop_depth 
                                   4424 ;	pushw x 
                                   4425 ;	ret 
      001661 FC               [ 2] 4426 	jp (x)
                                   4427 
                                   4428 ;----------------------------
                                   4429 ; called by goto/gosub
                                   4430 ; to get target line number 
                                   4431 ;---------------------------
      001662                       4432 get_target_line:
      001662 CD 10 3B         [ 4] 4433 	call relation 
      001665 A1 04            [ 1] 4434 	cp a,#TK_INTGR
      001667 27 03            [ 1] 4435 	jreq 1$
      001669 CC 07 62         [ 2] 4436 	jp syntax_error
      00166C CD 02 79         [ 4] 4437 1$:	call search_lineno  
      00166F 5D               [ 2] 4438 	tnzw x 
      001670 26 05            [ 1] 4439 	jrne 2$ 
      001672 A6 05            [ 1] 4440 	ld a,#ERR_NO_LINE 
      001674 CC 07 64         [ 2] 4441 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001677 81               [ 4] 4442 2$:	ret 
                                   4443 
                                   4444 ;------------------------
                                   4445 ; BASIC: GOTO line# 
                                   4446 ; jump to line# 
                                   4447 ; here cstack is 2 call deep from interpreter 
                                   4448 ;------------------------
      001678                       4449 goto:
      001678 72 00 00 25 06   [ 2] 4450 	btjt flags,#FRUN,0$ 
      00167D A6 06            [ 1] 4451 	ld a,#ERR_RUN_ONLY
      00167F CC 07 64         [ 2] 4452 	jp tb_error 
      001682 81               [ 4] 4453 	ret 
      001683 CD 16 62         [ 4] 4454 0$:	call get_target_line
      001686                       4455 jp_to_target:
      001686 CF 00 04         [ 2] 4456 	ldw basicptr,x 
      001689 E6 02            [ 1] 4457 	ld a,(2,x)
      00168B C7 00 03         [ 1] 4458 	ld count,a 
      00168E 35 03 00 01      [ 1] 4459 	mov in,#3 
      001692 81               [ 4] 4460 	ret 
                                   4461 
                                   4462 
                                   4463 ;--------------------
                                   4464 ; BASIC: GOSUB line#
                                   4465 ; basic subroutine call
                                   4466 ; actual line# and basicptr 
                                   4467 ; are saved on cstack
                                   4468 ; here cstack is 2 call deep from interpreter 
                                   4469 ;--------------------
                           000003  4470 	RET_ADDR=3
                           000005  4471 	RET_INW=5
                           000004  4472 	VSIZE=4  
      001693                       4473 gosub:
      001693 72 00 00 25 06   [ 2] 4474 	btjt flags,#FRUN,0$ 
      001698 A6 06            [ 1] 4475 	ld a,#ERR_RUN_ONLY
      00169A CC 07 64         [ 2] 4476 	jp tb_error 
      00169D 81               [ 4] 4477 	ret 
      00169E 85               [ 2] 4478 0$:	popw x 
      00169F                       4479 	_vars VSIZE  
      00169F 52 04            [ 2]    1     sub sp,#VSIZE 
      0016A1 89               [ 2] 4480 	pushw x 
      0016A2 CE 00 04         [ 2] 4481 	ldw x,basicptr
      0016A5 1F 03            [ 2] 4482 	ldw (RET_ADDR,sp),x 
      0016A7 CD 16 62         [ 4] 4483 	call get_target_line  
      0016AA 89               [ 2] 4484 	pushw x 
      0016AB CE 00 00         [ 2] 4485 	ldw x,in.w 
      0016AE 1F 07            [ 2] 4486 	ldw (RET_INW+2,sp),x
      0016B0 85               [ 2] 4487 	popw x 
      0016B1 20 D3            [ 2] 4488 	jra jp_to_target
                                   4489 
                                   4490 ;------------------------
                                   4491 ; BASIC: RETURN 
                                   4492 ; exit from a subroutine 
                                   4493 ; 
                                   4494 ;------------------------
      0016B3                       4495 return:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0016B3 72 00 00 25 05   [ 2] 4496 	btjt flags,#FRUN,0$ 
      0016B8 A6 06            [ 1] 4497 	ld a,#ERR_RUN_ONLY
      0016BA CC 07 64         [ 2] 4498 	jp tb_error 
      0016BD                       4499 0$:	
      0016BD 1E 03            [ 2] 4500 	ldw x,(RET_ADDR,sp) 
      0016BF CF 00 04         [ 2] 4501 	ldw basicptr,x
      0016C2 E6 02            [ 1] 4502 	ld a,(2,x)
      0016C4 C7 00 03         [ 1] 4503 	ld count,a  
      0016C7 1E 05            [ 2] 4504 	ldw x,(RET_INW,sp)
      0016C9 CF 00 00         [ 2] 4505 	ldw in.w,x 
      0016CC 85               [ 2] 4506 	popw x 
      0016CD                       4507 	_drop VSIZE 
      0016CD 5B 04            [ 2]    1     addw sp,#VSIZE 
      0016CF 89               [ 2] 4508 	pushw x
      0016D0 81               [ 4] 4509 	ret  
                                   4510 
                                   4511 
                                   4512 ;----------------------------------
                                   4513 ; BASIC: RUN
                                   4514 ; run BASIC program in RAM
                                   4515 ;----------------------------------- 
      0016D1                       4516 run: 
      0016D1 72 01 00 25 02   [ 2] 4517 	btjf flags,#FRUN,0$  
      0016D6 4F               [ 1] 4518 	clr a 
      0016D7 81               [ 4] 4519 	ret
      0016D8                       4520 0$: 
      0016D8 72 09 00 25 12   [ 2] 4521 	btjf flags,#FBREAK,1$
      0016DD                       4522 	_drop 2 
      0016DD 5B 02            [ 2]    1     addw sp,#2 
      0016DF CD 14 51         [ 4] 4523 	call rest_context
      0016E2                       4524 	_drop CTXT_SIZE 
      0016E2 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0016E4 72 19 00 25      [ 1] 4525 	bres flags,#FBREAK 
      0016E8 72 10 00 25      [ 1] 4526 	bset flags,#FRUN 
      0016EC CC 07 CA         [ 2] 4527 	jp interpreter 
      0016EF CE 00 1E         [ 2] 4528 1$:	ldw x,txtbgn
      0016F2 C3 00 20         [ 2] 4529 	cpw x,txtend 
      0016F5 2B 05            [ 1] 4530 	jrmi run_it 
      0016F7 A6 0D            [ 1] 4531 	ld a,#ERR_NO_PROG
      0016F9 CC 07 64         [ 2] 4532 	jp tb_error
                                   4533 
      0016FC                       4534 run_it:	 
      0016FC CD 11 48         [ 4] 4535     call ubound 
      0016FF                       4536 	_drop 2 ; drop return address 
      0016FF 5B 02            [ 2]    1     addw sp,#2 
                                   4537 ; clear data pointer 
      001701 5F               [ 1] 4538 	clrw x 
      001702 CF 00 06         [ 2] 4539 	ldw data_ptr,x 
      001705 72 5F 00 08      [ 1] 4540 	clr data_ofs 
      001709 72 5F 00 09      [ 1] 4541 	clr data_len 
                                   4542 ; initialize BASIC pointer 
      00170D CE 00 1E         [ 2] 4543 	ldw x,txtbgn 
      001710 CF 00 04         [ 2] 4544 	ldw basicptr,x 
      001713 E6 02            [ 1] 4545 	ld a,(2,x)
      001715 C7 00 03         [ 1] 4546 	ld count,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001718 35 03 00 01      [ 1] 4547 	mov in,#3	
      00171C 72 10 00 25      [ 1] 4548 	bset flags,#FRUN 
      001720 CC 07 CA         [ 2] 4549 	jp interpreter 
                                   4550 
                                   4551 
                                   4552 ;----------------------
                                   4553 ; BASIC: END
                                   4554 ; end running program
                                   4555 ;---------------------- 
      001723                       4556 cmd_end: 
                                   4557 ; clean stack 
      001723 CC 07 AD         [ 2] 4558 	jp warm_start
                                   4559 
                                   4560 
                                   4561 ;-----------------------
                                   4562 ; BASIC: TONE expr1,expr2
                                   4563 ; used TIMER2 channel 1
                                   4564 ; to produce a tone 
                                   4565 ; arguments:
                                   4566 ;    expr1   frequency 
                                   4567 ;    expr2   duration msec.
                                   4568 ;---------------------------
      001726                       4569 tone:
      001726 CD 0E EB         [ 4] 4570 	call arg_list 
      001729 A1 02            [ 1] 4571 	cp a,#2 
      00172B 27 03            [ 1] 4572 	jreq 1$
      00172D CC 07 62         [ 2] 4573 	jp syntax_error 
      001730                       4574 1$: 
      001730 85               [ 2] 4575 	popw x ; duration
      001731 90 85            [ 2] 4576 	popw y ; frequency 
      001733                       4577 beep:  
      001733 89               [ 2] 4578 	pushw x 
      001734 AE F4 24         [ 2] 4579 	ldw x,#TIM2_CLK_FREQ
      001737 65               [ 2] 4580 	divw x,y 
                                   4581 ; round to nearest integer 
      001738 90 A3 7A 12      [ 2] 4582 	cpw y,#TIM2_CLK_FREQ/2
      00173C 2B 01            [ 1] 4583 	jrmi 2$
      00173E 5C               [ 2] 4584 	incw x 
      00173F                       4585 2$:	 
      00173F 9E               [ 1] 4586 	ld a,xh 
      001740 C7 53 0D         [ 1] 4587 	ld TIM2_ARRH,a 
      001743 9F               [ 1] 4588 	ld a,xl 
      001744 C7 53 0E         [ 1] 4589 	ld TIM2_ARRL,a 
                                   4590 ; 50% duty cycle 
      001747 8C               [ 1] 4591 	ccf 
      001748 56               [ 2] 4592 	rrcw x 
      001749 9E               [ 1] 4593 	ld a,xh 
      00174A C7 53 0F         [ 1] 4594 	ld TIM2_CCR1H,a 
      00174D 9F               [ 1] 4595 	ld a,xl
      00174E C7 53 10         [ 1] 4596 	ld TIM2_CCR1L,a
      001751 72 10 53 08      [ 1] 4597 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001755 72 10 53 00      [ 1] 4598 	bset TIM2_CR1,#TIM2_CR1_CEN
      001759 72 10 53 04      [ 1] 4599 	bset TIM2_EGR,#TIM2_EGR_UG
      00175D 85               [ 2] 4600 	popw x 
      00175E CF 00 12         [ 2] 4601 	ldw timer,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001761 CE 00 12         [ 2] 4602 3$: ldw x,timer 	
      001764 26 FB            [ 1] 4603 	jrne 3$ 
      001766 72 11 53 08      [ 1] 4604 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      00176A 72 11 53 00      [ 1] 4605 	bres TIM2_CR1,#TIM2_CR1_CEN 
      00176E 81               [ 4] 4606 	ret 
                                   4607 
                                   4608 ;-------------------------------
                                   4609 ; BASIC: ADCON 0|1 [,divisor]  
                                   4610 ; disable/enanble ADC 
                                   4611 ;-------------------------------
                           000003  4612 	ONOFF=3 
                           000001  4613 	DIVSOR=1
                           000004  4614 	VSIZE=4 
      00176F                       4615 power_adc:
      00176F CD 0E EB         [ 4] 4616 	call arg_list 
      001772 A1 02            [ 1] 4617 	cp a,#2	
      001774 27 0B            [ 1] 4618 	jreq 1$
      001776 A1 01            [ 1] 4619 	cp a,#1 
      001778 27 03            [ 1] 4620 	jreq 0$ 
      00177A CC 07 62         [ 2] 4621 	jp syntax_error 
      00177D AE 00 00         [ 2] 4622 0$: ldw x,#0
      001780 89               [ 2] 4623 	pushw x  ; divisor 
      001781 1E 03            [ 2] 4624 1$: ldw x,(ONOFF,sp)
      001783 5D               [ 2] 4625 	tnzw x 
      001784 27 1A            [ 1] 4626 	jreq 2$ 
      001786 1E 01            [ 2] 4627 	ldw x,(DIVSOR,sp) ; divisor 
      001788 9F               [ 1] 4628 	ld a,xl
      001789 A4 07            [ 1] 4629 	and a,#7
      00178B 4E               [ 1] 4630 	swap a 
      00178C C7 54 01         [ 1] 4631 	ld ADC_CR1,a
      00178F 72 16 50 CA      [ 1] 4632 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001793 72 10 54 01      [ 1] 4633 	bset ADC_CR1,#ADC_CR1_ADON 
      001797                       4634 	_usec_dly 7 
      001797 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00179A 5A               [ 2]    2     decw x
      00179B 9D               [ 1]    3     nop 
      00179C 26 FA            [ 1]    4     jrne .-4
      00179E 20 08            [ 2] 4635 	jra 3$
      0017A0 72 11 54 01      [ 1] 4636 2$: bres ADC_CR1,#ADC_CR1_ADON
      0017A4 72 17 50 CA      [ 1] 4637 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0017A8                       4638 3$:	_drop VSIZE 
      0017A8 5B 04            [ 2]    1     addw sp,#VSIZE 
      0017AA 81               [ 4] 4639 	ret
                                   4640 
                                   4641 ;-----------------------------
                                   4642 ; BASIC: ADCREAD (channel)
                                   4643 ; read adc channel {0..5}
                                   4644 ; output:
                                   4645 ;   A 		TK_INTGR 
                                   4646 ;   X 		value 
                                   4647 ;-----------------------------
      0017AB                       4648 analog_read:
      0017AB CD 0F 12         [ 4] 4649 	call func_args 
      0017AE A1 01            [ 1] 4650 	cp a,#1 
      0017B0 27 03            [ 1] 4651 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0017B2 CC 07 62         [ 2] 4652 	jp syntax_error
      0017B5 85               [ 2] 4653 1$: popw x 
      0017B6 A3 00 05         [ 2] 4654 	cpw x,#5 
      0017B9 23 05            [ 2] 4655 	jrule 2$
      0017BB A6 0A            [ 1] 4656 	ld a,#ERR_BAD_VALUE
      0017BD CC 07 64         [ 2] 4657 	jp tb_error 
      0017C0 9F               [ 1] 4658 2$: ld a,xl
      0017C1 C7 00 0D         [ 1] 4659 	ld acc8,a 
      0017C4 A6 05            [ 1] 4660 	ld a,#5
      0017C6 C0 00 0D         [ 1] 4661 	sub a,acc8 
      0017C9 C7 54 00         [ 1] 4662 	ld ADC_CSR,a
      0017CC 72 16 54 02      [ 1] 4663 	bset ADC_CR2,#ADC_CR2_ALIGN
      0017D0 72 10 54 01      [ 1] 4664 	bset ADC_CR1,#ADC_CR1_ADON
      0017D4 72 0F 54 00 FB   [ 2] 4665 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0017D9 CE 54 04         [ 2] 4666 	ldw x,ADC_DRH
      0017DC A6 04            [ 1] 4667 	ld a,#TK_INTGR
      0017DE 81               [ 4] 4668 	ret 
                                   4669 
                                   4670 ;-----------------------
                                   4671 ; BASIC: DREAD(pin)
                                   4672 ; Arduino pins 
                                   4673 ; read state of a digital pin 
                                   4674 ; pin# {0..15}
                                   4675 ; output:
                                   4676 ;    A 		TK_INTGR
                                   4677 ;    X      0|1 
                                   4678 ;-------------------------
                           000001  4679 	PINNO=1
                           000001  4680 	VSIZE=1
      0017DF                       4681 digital_read:
      0017DF                       4682 	_vars VSIZE 
      0017DF 52 01            [ 2]    1     sub sp,#VSIZE 
      0017E1 CD 0F 12         [ 4] 4683 	call func_args
      0017E4 A1 01            [ 1] 4684 	cp a,#1
      0017E6 27 03            [ 1] 4685 	jreq 1$
      0017E8 CC 07 62         [ 2] 4686 	jp syntax_error
      0017EB 85               [ 2] 4687 1$: popw x 
      0017EC A3 00 0F         [ 2] 4688 	cpw x,#15 
      0017EF 23 05            [ 2] 4689 	jrule 2$
      0017F1 A6 0A            [ 1] 4690 	ld a,#ERR_BAD_VALUE
      0017F3 CC 07 64         [ 2] 4691 	jp tb_error 
      0017F6 CD 1D C9         [ 4] 4692 2$:	call select_pin 
      0017F9 6B 01            [ 1] 4693 	ld (PINNO,sp),a
      0017FB E6 01            [ 1] 4694 	ld a,(GPIO_IDR,x)
      0017FD 0D 01            [ 1] 4695 	tnz (PINNO,sp)
      0017FF 27 05            [ 1] 4696 	jreq 8$
      001801 44               [ 1] 4697 3$: srl a 
      001802 0A 01            [ 1] 4698 	dec (PINNO,sp)
      001804 26 FB            [ 1] 4699 	jrne 3$ 
      001806 A4 01            [ 1] 4700 8$: and a,#1 
      001808 5F               [ 1] 4701 	clrw x 
      001809 97               [ 1] 4702 	ld xl,a 
      00180A A6 04            [ 1] 4703 	ld a,#TK_INTGR
      00180C                       4704 	_drop VSIZE
      00180C 5B 01            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      00180E 81               [ 4] 4705 	ret
                                   4706 
                                   4707 ;-----------------------
                                   4708 ; BASIC: DWRITE pin,0|1
                                   4709 ; Arduino pins 
                                   4710 ; write to a digital pin 
                                   4711 ; pin# {0..15}
                                   4712 ; output:
                                   4713 ;    A 		TK_INTGR
                                   4714 ;    X      0|1 
                                   4715 ;-------------------------
                           000001  4716 	PINNO=1
                           000002  4717 	PINVAL=2
                           000002  4718 	VSIZE=2
      00180F                       4719 digital_write:
      00180F                       4720 	_vars VSIZE 
      00180F 52 02            [ 2]    1     sub sp,#VSIZE 
      001811 CD 0E EB         [ 4] 4721 	call arg_list  
      001814 A1 02            [ 1] 4722 	cp a,#2 
      001816 27 03            [ 1] 4723 	jreq 1$
      001818 CC 07 62         [ 2] 4724 	jp syntax_error
      00181B 85               [ 2] 4725 1$: popw x 
      00181C 9F               [ 1] 4726 	ld a,xl 
      00181D 6B 02            [ 1] 4727 	ld (PINVAL,sp),a
      00181F 85               [ 2] 4728 	popw x 
      001820 A3 00 0F         [ 2] 4729 	cpw x,#15 
      001823 23 05            [ 2] 4730 	jrule 2$
      001825 A6 0A            [ 1] 4731 	ld a,#ERR_BAD_VALUE
      001827 CC 07 64         [ 2] 4732 	jp tb_error 
      00182A CD 1D C9         [ 4] 4733 2$:	call select_pin 
      00182D 6B 01            [ 1] 4734 	ld (PINNO,sp),a 
      00182F A6 01            [ 1] 4735 	ld a,#1
      001831 0D 01            [ 1] 4736 	tnz (PINNO,sp)
      001833 27 05            [ 1] 4737 	jreq 4$
      001835 48               [ 1] 4738 3$: sll a
      001836 0A 01            [ 1] 4739 	dec (PINNO,sp)
      001838 26 FB            [ 1] 4740 	jrne 3$
      00183A 0D 02            [ 1] 4741 4$: tnz (PINVAL,sp)
      00183C 26 05            [ 1] 4742 	jrne 5$
      00183E 43               [ 1] 4743 	cpl a 
      00183F E4 00            [ 1] 4744 	and a,(GPIO_ODR,x)
      001841 20 02            [ 2] 4745 	jra 8$
      001843 EA 00            [ 1] 4746 5$: or a,(GPIO_ODR,x)
      001845 E7 00            [ 1] 4747 8$: ld (GPIO_ODR,x),a 
      001847                       4748 	_drop VSIZE 
      001847 5B 02            [ 2]    1     addw sp,#VSIZE 
      001849 81               [ 4] 4749 	ret
                                   4750 
                                   4751 
                                   4752 ;-----------------------
                                   4753 ; BASIC: STOP
                                   4754 ; stop progam execution  
                                   4755 ; without resetting pointers 
                                   4756 ; the program is resumed
                                   4757 ; with RUN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4758 ;-------------------------
      00184A                       4759 stop:
      00184A 72 00 00 25 02   [ 2] 4760 	btjt flags,#FRUN,2$
      00184F 4F               [ 1] 4761 	clr a
      001850 81               [ 4] 4762 	ret 
      001851                       4763 2$:	 
                                   4764 ; create space on cstack to save context 
      001851 AE 18 78         [ 2] 4765 	ldw x,#break_point 
      001854 CD 01 D7         [ 4] 4766 	call puts 
      001857                       4767 	_drop 2 ;drop return address 
      001857 5B 02            [ 2]    1     addw sp,#2 
      001859                       4768 	_vars CTXT_SIZE ; context size 
      001859 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      00185B CD 14 41         [ 4] 4769 	call save_context 
      00185E AE 16 E8         [ 2] 4770 	ldw x,#tib 
      001861 CF 00 04         [ 2] 4771 	ldw basicptr,x
      001864 7F               [ 1] 4772 	clr (x)
      001865 72 5F 00 03      [ 1] 4773 	clr count  
      001869 5F               [ 1] 4774 	clrw x 
      00186A CF 00 00         [ 2] 4775 	ldw in.w,x
      00186D 72 11 00 25      [ 1] 4776 	bres flags,#FRUN 
      001871 72 18 00 25      [ 1] 4777 	bset flags,#FBREAK
      001875 CC 07 CA         [ 2] 4778 	jp interpreter 
      001878 0A 62 72 65 61 6B 20  4779 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4780 
                                   4781 ;-----------------------
                                   4782 ; BASIC: NEW
                                   4783 ; from command line only 
                                   4784 ; free program memory
                                   4785 ; and clear variables 
                                   4786 ;------------------------
      001896                       4787 new: 
      001896 72 01 00 25 02   [ 2] 4788 	btjf flags,#FRUN,0$ 
      00189B 4F               [ 1] 4789 	clr a 
      00189C 81               [ 4] 4790 	ret 
      00189D                       4791 0$:	
      00189D CD 05 FF         [ 4] 4792 	call clear_basic 
      0018A0 81               [ 4] 4793 	ret 
                                   4794 	 
                                   4795 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4796 ;  file system routines
                                   4797 ;  MCU flash memory from
                                   4798 ;  0x10000-0x27fff is 
                                   4799 ;  used to store BASIC 
                                   4800 ;  program files. 
                                   4801 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4802 
                                   4803 ;--------------------
                                   4804 ; input:
                                   4805 ;   X     increment 
                                   4806 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4807 ;   farptr  incremented 
                                   4808 ;---------------------
      0018A1                       4809 incr_farptr:
      0018A1 72 BB 00 19      [ 2] 4810 	addw x,farptr+1 
      0018A5 24 04            [ 1] 4811 	jrnc 1$
      0018A7 72 5C 00 18      [ 1] 4812 	inc farptr 
      0018AB CF 00 19         [ 2] 4813 1$:	ldw farptr+1,x  
      0018AE 81               [ 4] 4814 	ret 
                                   4815 
                                   4816 ;------------------------------
                                   4817 ; extended flash memory used as FLASH_DRIVE 
                                   4818 ; seek end of used flash drive   
                                   4819 ; starting at 0x10000 address.
                                   4820 ; 4 consecutives 0 bytes signal free space. 
                                   4821 ; input:
                                   4822 ;	none
                                   4823 ; output:
                                   4824 ;   ffree     free_addr| 0 if memory full.
                                   4825 ;------------------------------
      0018AF                       4826 seek_fdrive:
                                   4827 ; start scan at 0x10000 address 
      0018AF A6 01            [ 1] 4828 	ld a,#1
      0018B1 C7 00 18         [ 1] 4829 	ld farptr,a 
      0018B4 5F               [ 1] 4830 	clrw x 
      0018B5 CF 00 19         [ 2] 4831 	ldw farptr+1,x 
      0018B8                       4832 1$:
      0018B8 AE 00 03         [ 2] 4833 	ldw x,#3  
      0018BB 92 AF 00 18      [ 5] 4834 2$:	ldf a,([farptr],x) 
      0018BF 26 05            [ 1] 4835 	jrne 3$
      0018C1 5A               [ 2] 4836 	decw x
      0018C2 2A F7            [ 1] 4837 	jrpl 2$
      0018C4 20 19            [ 2] 4838 	jra 4$ 
      0018C6 5C               [ 2] 4839 3$:	incw x 
      0018C7 CD 18 A1         [ 4] 4840 	call incr_farptr
      0018CA AE 02 7F         [ 2] 4841 	ldw x,#0x27f 
      0018CD C3 00 18         [ 2] 4842 	cpw x,farptr
      0018D0 2A E6            [ 1] 4843 	jrpl 1$
                                   4844 ; drive full 
      0018D2 72 5F 00 1B      [ 1] 4845 	clr ffree 
      0018D6 72 5F 00 1C      [ 1] 4846 	clr ffree+1 
      0018DA 72 5F 00 1D      [ 1] 4847 	clr ffree+2 
      0018DE 81               [ 4] 4848 	ret
      0018DF                       4849 4$: ; copy farptr to ffree	 
      0018DF CE 00 18         [ 2] 4850 	ldw x,farptr 
      0018E2 C6 00 1A         [ 1] 4851 	ld a,farptr+2 
      0018E5 CF 00 1B         [ 2] 4852 	ldw ffree,x 
      0018E8 C7 00 1D         [ 1] 4853 	ld ffree+2,a  
      0018EB 81               [ 4] 4854 	ret 
                                   4855 
                                   4856 ;-----------------------
                                   4857 ; compare file name 
                                   4858 ; with name pointed by Y  
                                   4859 ; input:
                                   4860 ;   farptr   file name 
                                   4861 ;   Y        target name 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   4862 ; output:
                                   4863 ;   farptr 	 at file_name
                                   4864 ;   X 		 farptr[x] point at size field  
                                   4865 ;   Carry    0|1 no match|match  
                                   4866 ;----------------------
      0018EC                       4867 cmp_name:
      0018EC 5F               [ 1] 4868 	clrw x
      0018ED 92 AF 00 18      [ 5] 4869 1$:	ldf a,([farptr],x)
      0018F1 90 F1            [ 1] 4870 	cp a,(y)
      0018F3 26 08            [ 1] 4871 	jrne 4$
      0018F5 4D               [ 1] 4872 	tnz a 
      0018F6 27 12            [ 1] 4873 	jreq 9$ 
      0018F8 5C               [ 2] 4874     incw x 
      0018F9 90 5C            [ 2] 4875 	incw y 
      0018FB 20 F0            [ 2] 4876 	jra 1$
      0018FD                       4877 4$: ;no match 
      0018FD 4D               [ 1] 4878 	tnz a 
      0018FE 27 07            [ 1] 4879 	jreq 5$
      001900 5C               [ 2] 4880 	incw x 
      001901 92 AF 00 18      [ 5] 4881 	ldf a,([farptr],x)
      001905 20 F6            [ 2] 4882 	jra 4$  
      001907 5C               [ 2] 4883 5$:	incw x ; farptr[x] point at 'size' field 
      001908 98               [ 1] 4884 	rcf 
      001909 81               [ 4] 4885 	ret
      00190A                       4886 9$: ; match  
      00190A 5C               [ 2] 4887 	incw x  ; farptr[x] at 'size' field 
      00190B 99               [ 1] 4888 	scf 
      00190C 81               [ 4] 4889 	ret 
                                   4890 
                                   4891 ;-----------------------
                                   4892 ; search file in 
                                   4893 ; flash memory 
                                   4894 ; input:
                                   4895 ;   Y       file name  
                                   4896 ; output:
                                   4897 ;   farptr  addr at name|0
                                   4898 ;-----------------------
                           000001  4899 	FSIZE=1
                           000003  4900 	YSAVE=3
                           000004  4901 	VSIZE=4 
      00190D                       4902 search_file: 
      00190D                       4903 	_vars VSIZE
      00190D 52 04            [ 2]    1     sub sp,#VSIZE 
      00190F 17 03            [ 2] 4904 	ldw (YSAVE,sp),y  
      001911 5F               [ 1] 4905 	clrw x 
      001912 CF 00 19         [ 2] 4906 	ldw farptr+1,x 
      001915 35 01 00 18      [ 1] 4907 	mov farptr,#1
      001919                       4908 1$:	
                                   4909 ; check if farptr is after any file 
                                   4910 ; if  0 then so.
      001919 92 BC 00 18      [ 5] 4911 	ldf a,[farptr]
      00191D 27 25            [ 1] 4912 	jreq 6$
      00191F 5F               [ 1] 4913 2$: clrw x 	
      001920 16 03            [ 2] 4914 	ldw y,(YSAVE,sp) 
      001922 CD 18 EC         [ 4] 4915 	call cmp_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001925 25 2D            [ 1] 4916 	jrc 9$
      001927 92 AF 00 18      [ 5] 4917 	ldf a,([farptr],x)
      00192B 6B 01            [ 1] 4918 	ld (FSIZE,sp),a 
      00192D 5C               [ 2] 4919 	incw x 
      00192E 92 AF 00 18      [ 5] 4920 	ldf a,([farptr],x)
      001932 6B 02            [ 1] 4921 	ld (FSIZE+1,sp),a 
      001934 5C               [ 2] 4922 	incw x 
      001935 72 FB 01         [ 2] 4923 	addw x,(FSIZE,sp) ; count to skip 
      001938 5C               [ 2] 4924 	incw x ; skip over EOF marker 
      001939 CD 18 A1         [ 4] 4925 	call incr_farptr ; now at next file 'name_field'
      00193C AE 02 80         [ 2] 4926 	ldw x,#0x280
      00193F C3 00 18         [ 2] 4927 	cpw x,farptr 
      001942 2A D5            [ 1] 4928 	jrpl 1$
      001944                       4929 6$: ; file not found 
      001944 72 5F 00 18      [ 1] 4930 	clr farptr
      001948 72 5F 00 19      [ 1] 4931 	clr farptr+1 
      00194C 72 5F 00 1A      [ 1] 4932 	clr farptr+2 
      001950                       4933 	_drop VSIZE 
      001950 5B 04            [ 2]    1     addw sp,#VSIZE 
      001952 98               [ 1] 4934 	rcf
      001953 81               [ 4] 4935 	ret
      001954                       4936 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001954                       4937 	_drop VSIZE 
      001954 5B 04            [ 2]    1     addw sp,#VSIZE 
      001956 99               [ 1] 4938 	scf 	
      001957 81               [ 4] 4939 	ret
                                   4940 
                                   4941 
                                   4942 ;--------------------------------
                                   4943 ; BASIC: SAVE "name" 
                                   4944 ; save text program in 
                                   4945 ; flash memory used as 
                                   4946 ;--------------------------------
                           000001  4947 	BSIZE=1
                           000003  4948 	NAMEPTR=3
                           000004  4949 	VSIZE=4
      001958                       4950 save:
      001958 72 01 00 25 05   [ 2] 4951 	btjf flags,#FRUN,0$ 
      00195D A6 07            [ 1] 4952 	ld a,#ERR_CMD_ONLY 
      00195F CC 07 64         [ 2] 4953 	jp tb_error
      001962                       4954 0$:	 
      001962 CE 00 20         [ 2] 4955 	ldw x,txtend 
      001965 72 B0 00 1E      [ 2] 4956 	subw x,txtbgn
      001969 26 05            [ 1] 4957 	jrne 1$
                                   4958 ; nothing to save 
      00196B A6 0D            [ 1] 4959 	ld a,#ERR_NO_PROG
      00196D CC 07 64         [ 2] 4960 	jp tb_error 	
      001970                       4961 1$:	
      001970                       4962 	_vars VSIZE 
      001970 52 04            [ 2]    1     sub sp,#VSIZE 
      001972 1F 01            [ 2] 4963 	ldw (BSIZE,sp),x 
      001974 CD 08 21         [ 4] 4964 	call next_token	
      001977 A1 02            [ 1] 4965 	cp a,#TK_QSTR
      001979 27 03            [ 1] 4966 	jreq 2$
      00197B CC 07 62         [ 2] 4967 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      00197E                       4968 2$: 
      00197E 1F 03            [ 2] 4969 	ldw (NAMEPTR,sp),x  
      001980 55 00 03 00 01   [ 1] 4970 	mov in,count 
                                   4971 ; check if enough free space 
      001985 CD 02 0B         [ 4] 4972 	call strlen 
      001988 1C 00 03         [ 2] 4973 	addw x,#3 
      00198B 72 FB 01         [ 2] 4974 	addw x,(BSIZE,sp)
      00198E 72 5D 00 1B      [ 1] 4975 	tnz ffree 
      001992 26 0B            [ 1] 4976 	jrne 21$
      001994 72 B0 00 1C      [ 2] 4977 	subw x,ffree+1 
      001998 23 05            [ 2] 4978 	jrule 21$
      00199A A6 0E            [ 1] 4979 	ld a,#ERR_NO_FSPACE  
      00199C CC 07 64         [ 2] 4980 	jp tb_error
      00199F                       4981 21$: 
                                   4982 ; check for existing file of that name 
      00199F 16 03            [ 2] 4983 	ldw y,(NAMEPTR,sp)	
      0019A1 CD 19 0D         [ 4] 4984 	call search_file 
      0019A4 24 05            [ 1] 4985 	jrnc 3$ 
      0019A6 A6 08            [ 1] 4986 	ld a,#ERR_DUPLICATE 
      0019A8 CC 07 64         [ 2] 4987 	jp tb_error 
      0019AB                       4988 3$:	;** write file name to flash **
      0019AB CE 00 1B         [ 2] 4989 	ldw x,ffree 
      0019AE C6 00 1D         [ 1] 4990 	ld a,ffree+2 
      0019B1 CF 00 18         [ 2] 4991 	ldw farptr,x 
      0019B4 C7 00 1A         [ 1] 4992 	ld farptr+2,a 
      0019B7 1E 03            [ 2] 4993 	ldw x,(NAMEPTR,sp)  
      0019B9 CD 02 0B         [ 4] 4994 	call strlen 
      0019BC 5C               [ 2] 4995 	incw  x
      0019BD 1F 01            [ 2] 4996 	ldw (BSIZE,sp),x  
      0019BF 5F               [ 1] 4997 	clrw x   
      0019C0 16 03            [ 2] 4998 	ldw y,(NAMEPTR,sp)
      0019C2 CD 01 66         [ 4] 4999 	call write_block  
                                   5000 ;** write file length after name **
      0019C5 CE 00 20         [ 2] 5001 	ldw x,txtend 
      0019C8 72 B0 00 1E      [ 2] 5002 	subw x,txtbgn
      0019CC 1F 01            [ 2] 5003 	ldw (BSIZE,sp),x 
      0019CE 5F               [ 1] 5004 	clrw x 
      0019CF 7B 01            [ 1] 5005 	ld a,(BSIZE,sp)
      0019D1 CD 00 F1         [ 4] 5006 	call write_byte 
      0019D4 5C               [ 2] 5007 	incw x 
      0019D5 7B 02            [ 1] 5008 	ld a,(BSIZE+1,sp)
      0019D7 CD 00 F1         [ 4] 5009 	call write_byte
      0019DA 5C               [ 2] 5010 	incw x  
      0019DB CD 18 A1         [ 4] 5011 	call incr_farptr ; move farptr after SIZE field 
                                   5012 ;** write BASIC text **
                                   5013 ; copy BSIZE, stack:{... bsize -- ... bsize bsize }	
      0019DE 1E 01            [ 2] 5014 	ldw x,(BSIZE,sp)
      0019E0 89               [ 2] 5015 	pushw x ; write_block argument 
      0019E1 5F               [ 1] 5016 	clrw x 
      0019E2 90 CE 00 1E      [ 2] 5017 	ldw y,txtbgn  ; BASIC text to save 
      0019E6 CD 01 66         [ 4] 5018 	call write_block 
      0019E9                       5019 	_drop 2 ;  drop write_block argument  
      0019E9 5B 02            [ 2]    1     addw sp,#2 
                                   5020 ; write end of file marker 
      0019EB AE 00 01         [ 2] 5021 	ldw x,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      0019EE A6 FF            [ 1] 5022 	ld a,#EOF  
      0019F0 CD 00 F1         [ 4] 5023 	call write_byte 
      0019F3 CD 18 A1         [ 4] 5024 	call incr_farptr
                                   5025 ; save farptr in ffree
      0019F6 CE 00 18         [ 2] 5026 	ldw x,farptr 
      0019F9 C6 00 1A         [ 1] 5027 	ld a,farptr+2 
      0019FC CF 00 1B         [ 2] 5028 	ldw ffree,x 
      0019FF C7 00 1D         [ 1] 5029 	ld ffree+2,a
                                   5030 ;write 4 zero bytes as an end of all files marker 
      001A02 5F               [ 1] 5031     clrw x 
      001A03 4B 04            [ 1] 5032 	push #4 
      001A05                       5033 4$:
      001A05 4F               [ 1] 5034 	clr a 
      001A06 CD 00 F1         [ 4] 5035 	call write_byte 
      001A09 5C               [ 2] 5036 	incw x 
      001A0A 0A 01            [ 1] 5037 	dec (1,sp)
      001A0C 26 F7            [ 1] 5038 	jrne 4$
      001A0E 84               [ 1] 5039 5$: pop a 
                                   5040 ; display saved size  
      001A0F 1E 01            [ 2] 5041 	ldw x,(BSIZE,sp) 
      001A11 CD 08 BA         [ 4] 5042 	call print_int 
      001A14                       5043 	_drop VSIZE 
      001A14 5B 04            [ 2]    1     addw sp,#VSIZE 
      001A16 81               [ 4] 5044 	ret 
                                   5045 
                                   5046 ;----------------------
                                   5047 ; load file in RAM memory
                                   5048 ; input:
                                   5049 ;    farptr point at file size 
                                   5050 ; output:
                                   5051 ;   y point after BASIC program in RAM.
                                   5052 ;------------------------
      001A17                       5053 load_file:
      001A17 CD 18 A1         [ 4] 5054 	call incr_farptr  
      001A1A CD 05 FF         [ 4] 5055 	call clear_basic  
      001A1D 5F               [ 1] 5056 	clrw x
      001A1E 92 AF 00 18      [ 5] 5057 	ldf a,([farptr],x)
      001A22 90 95            [ 1] 5058 	ld yh,a 
      001A24 5C               [ 2] 5059 	incw x  
      001A25 92 AF 00 18      [ 5] 5060 	ldf a,([farptr],x)
      001A29 5C               [ 2] 5061 	incw x 
      001A2A 90 97            [ 1] 5062 	ld yl,a 
      001A2C 72 B9 00 1E      [ 2] 5063 	addw y,txtbgn
      001A30 90 CF 00 20      [ 2] 5064 	ldw txtend,y
      001A34 90 CE 00 1E      [ 2] 5065 	ldw y,txtbgn
      001A38                       5066 3$:	; load BASIC text 	
      001A38 92 AF 00 18      [ 5] 5067 	ldf a,([farptr],x)
      001A3C 90 F7            [ 1] 5068 	ld (y),a 
      001A3E 5C               [ 2] 5069 	incw x 
      001A3F 90 5C            [ 2] 5070 	incw y 
      001A41 90 C3 00 20      [ 2] 5071 	cpw y,txtend 
      001A45 2B F1            [ 1] 5072 	jrmi 3$
      001A47 81               [ 4] 5073 	ret 
                                   5074 
                                   5075 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                   5076 ; BASIC: LOAD "file" 
                                   5077 ; load file to RAM 
                                   5078 ; for execution 
                                   5079 ;------------------------
      001A48                       5080 load:
      001A48 72 01 00 25 07   [ 2] 5081 	btjf flags,#FRUN,0$ 
      001A4D 27 05            [ 1] 5082 	jreq 0$ 
      001A4F A6 07            [ 1] 5083 	ld a,#ERR_CMD_ONLY 
      001A51 CC 07 64         [ 2] 5084 	jp tb_error 
      001A54                       5085 0$:	
      001A54 CD 08 21         [ 4] 5086 	call next_token 
      001A57 A1 02            [ 1] 5087 	cp a,#TK_QSTR
      001A59 27 03            [ 1] 5088 	jreq 1$
      001A5B CC 07 62         [ 2] 5089 	jp syntax_error 
      001A5E 90 93            [ 1] 5090 1$:	ldw y,x 
      001A60 55 00 03 00 01   [ 1] 5091 	mov in,count 
      001A65 CD 19 0D         [ 4] 5092 	call search_file 
      001A68 25 05            [ 1] 5093 	jrc 2$ 
      001A6A A6 09            [ 1] 5094 	ld a,#ERR_NOT_FILE
      001A6C CC 07 64         [ 2] 5095 	jp tb_error  
      001A6F                       5096 2$:
      001A6F CD 1A 17         [ 4] 5097 	call load_file
                                   5098 ; print loaded size 	 
      001A72 CE 00 20         [ 2] 5099 	ldw x,txtend 
      001A75 72 B0 00 1E      [ 2] 5100 	subw x,txtbgn
      001A79 CD 08 BA         [ 4] 5101 	call print_int 
      001A7C 81               [ 4] 5102 	ret 
                                   5103 
                                   5104 ;-----------------------------------
                                   5105 ; BASIC: FORGET ["file_name"] 
                                   5106 ; erase file_name and all others 
                                   5107 ; after it. 
                                   5108 ; without argument erase all files 
                                   5109 ;-----------------------------------
      001A7D                       5110 forget:
      001A7D CD 08 21         [ 4] 5111 	call next_token 
      001A80 A1 00            [ 1] 5112 	cp a,#TK_NONE 
      001A82 27 20            [ 1] 5113 	jreq 3$ 
      001A84 A1 02            [ 1] 5114 	cp a,#TK_QSTR
      001A86 27 03            [ 1] 5115 	jreq 1$
      001A88 CC 07 62         [ 2] 5116 	jp syntax_error
      001A8B 90 93            [ 1] 5117 1$: ldw y,x 
      001A8D 55 00 03 00 01   [ 1] 5118 	mov in,count 
      001A92 CD 19 0D         [ 4] 5119 	call search_file
      001A95 25 05            [ 1] 5120 	jrc 2$
      001A97 A6 09            [ 1] 5121 	ld a,#ERR_NOT_FILE 
      001A99 CC 07 64         [ 2] 5122 	jp tb_error 
      001A9C                       5123 2$: 
      001A9C CE 00 18         [ 2] 5124 	ldw x,farptr
      001A9F C6 00 1A         [ 1] 5125 	ld a,farptr+2
      001AA2 20 0A            [ 2] 5126 	jra 4$ 
      001AA4                       5127 3$: ; forget all files 
      001AA4 AE 01 00         [ 2] 5128 	ldw x,#0x100
      001AA7 4F               [ 1] 5129 	clr a 
      001AA8 CF 00 18         [ 2] 5130 	ldw farptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001AAB C7 00 1A         [ 1] 5131 	ld farptr+2,a 
      001AAE                       5132 4$:
      001AAE CF 00 1B         [ 2] 5133 	ldw ffree,x 
      001AB1 C7 00 1D         [ 1] 5134 	ld ffree+2,a 
      001AB4 4B 04            [ 1] 5135 	push #4
      001AB6 5F               [ 1] 5136 	clrw x 
      001AB7                       5137 5$: 
      001AB7 4F               [ 1] 5138 	clr a  
      001AB8 CD 00 F1         [ 4] 5139 	call write_byte 
      001ABB 5C               [ 2] 5140 	incw x 
      001ABC 0A 01            [ 1] 5141 	dec (1,sp)
      001ABE 26 F7            [ 1] 5142 	jrne 5$	
      001AC0 84               [ 1] 5143 6$: pop a 
      001AC1 81               [ 4] 5144 	ret 
                                   5145 
                                   5146 ;----------------------
                                   5147 ; BASIC: DIR 
                                   5148 ; list saved files 
                                   5149 ;----------------------
                           000001  5150 	COUNT=1 ; files counter 
                           000002  5151 	VSIZE=2 
      001AC2                       5152 directory:
      001AC2                       5153 	_vars VSIZE 
      001AC2 52 02            [ 2]    1     sub sp,#VSIZE 
      001AC4 5F               [ 1] 5154 	clrw x 
      001AC5 1F 01            [ 2] 5155 	ldw (COUNT,sp),x 
      001AC7 CF 00 19         [ 2] 5156 	ldw farptr+1,x 
      001ACA 35 01 00 18      [ 1] 5157 	mov farptr,#1 
      001ACE                       5158 dir_loop:
      001ACE 5F               [ 1] 5159 	clrw x 
      001ACF 92 AF 00 18      [ 5] 5160 	ldf a,([farptr],x)
      001AD3 27 39            [ 1] 5161 	jreq 8$ 
      001AD5                       5162 1$: ;name loop 	
      001AD5 92 AF 00 18      [ 5] 5163 	ldf a,([farptr],x)
      001AD9 27 06            [ 1] 5164 	jreq 2$ 
      001ADB CD 01 C4         [ 4] 5165 	call putc 
      001ADE 5C               [ 2] 5166 	incw x 
      001ADF 20 F4            [ 2] 5167 	jra 1$
      001AE1 5C               [ 2] 5168 2$: incw x ; skip ending 0. 
      001AE2 A6 20            [ 1] 5169 	ld a,#SPACE 
      001AE4 CD 01 C4         [ 4] 5170 	call putc 
                                   5171 ; get file size 	
      001AE7 92 AF 00 18      [ 5] 5172 	ldf a,([farptr],x)
      001AEB 90 95            [ 1] 5173 	ld yh,a 
      001AED 5C               [ 2] 5174 	incw x 
      001AEE 92 AF 00 18      [ 5] 5175 	ldf a,([farptr],x)
      001AF2 5C               [ 2] 5176 	incw x 
      001AF3 90 97            [ 1] 5177 	ld yl,a 
      001AF5 90 89            [ 2] 5178 	pushw y 
      001AF7 72 FB 01         [ 2] 5179 	addw x,(1,sp)
      001AFA 5C               [ 2] 5180 	incw x ; skip EOF marker 
                                   5181 ; skip to next file 
      001AFB CD 18 A1         [ 4] 5182 	call incr_farptr 
                                   5183 ; print file size 
      001AFE 85               [ 2] 5184 	popw x ; file size 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001AFF CD 08 BA         [ 4] 5185 	call print_int 
      001B02 A6 0D            [ 1] 5186 	ld a,#CR 
      001B04 CD 01 C4         [ 4] 5187 	call putc
      001B07 1E 01            [ 2] 5188 	ldw x,(COUNT,sp)
      001B09 5C               [ 2] 5189 	incw x
      001B0A 1F 01            [ 2] 5190 	ldw (COUNT,sp),x  
      001B0C 20 C0            [ 2] 5191 	jra dir_loop 
      001B0E                       5192 8$: ; print number of files 
      001B0E 1E 01            [ 2] 5193 	ldw x,(COUNT,sp)
      001B10 CD 08 BA         [ 4] 5194 	call print_int 
      001B13 AE 1B 43         [ 2] 5195 	ldw x,#file_count 
      001B16 CD 01 D7         [ 4] 5196 	call puts  
                                   5197 ; print drive free space 	
      001B19 A6 FF            [ 1] 5198 	ld a,#0xff 
      001B1B C0 00 1D         [ 1] 5199 	sub a,ffree+2 
      001B1E C7 00 0D         [ 1] 5200 	ld acc8,a 
      001B21 A6 7F            [ 1] 5201 	ld a,#0x7f 
      001B23 C2 00 1C         [ 1] 5202 	sbc a,ffree+1 
      001B26 C7 00 0C         [ 1] 5203 	ld acc16,a 
      001B29 A6 02            [ 1] 5204 	ld a,#2 
      001B2B C2 00 1B         [ 1] 5205 	sbc a,ffree 
      001B2E C7 00 0B         [ 1] 5206 	ld acc24,a 
      001B31 5F               [ 1] 5207 	clrw x  
      001B32 A6 06            [ 1] 5208 	ld a,#6 
      001B34 97               [ 1] 5209 	ld xl,a 
      001B35 A6 0A            [ 1] 5210 	ld a,#10 
      001B37 CD 08 72         [ 4] 5211 	call prti24 
      001B3A AE 1B 4B         [ 2] 5212 	ldw x,#drive_free
      001B3D CD 01 D7         [ 4] 5213 	call puts 
      001B40                       5214 	_drop VSIZE 
      001B40 5B 02            [ 2]    1     addw sp,#VSIZE 
      001B42 81               [ 4] 5215 	ret
      001B43 20 66 69 6C 65 73 0A  5216 file_count: .asciz " files\n"
             00
      001B4B 20 62 79 74 65 73 20  5217 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5218 
                                   5219 ;---------------------
                                   5220 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5221 ; write 1 or more byte to FLASH or EEPROM
                                   5222 ; starting at address  
                                   5223 ; input:
                                   5224 ;   expr1  	is address 
                                   5225 ;   expr2,...,exprn   are bytes to write
                                   5226 ; output:
                                   5227 ;   none 
                                   5228 ;---------------------
                           000001  5229 	ADDR=1
                           000002  5230 	VSIZ=2 
      001B58                       5231 write:
      001B58                       5232 	_vars VSIZE 
      001B58 52 02            [ 2]    1     sub sp,#VSIZE 
      001B5A 72 5F 00 18      [ 1] 5233 	clr farptr ; expect 16 bits address 
      001B5E CD 0F F7         [ 4] 5234 	call expression
      001B61 A1 04            [ 1] 5235 	cp a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001B63 27 03            [ 1] 5236 	jreq 0$
      001B65 CC 07 62         [ 2] 5237 	jp syntax_error
      001B68 1F 01            [ 2] 5238 0$: ldw (ADDR,sp),x 
      001B6A CD 08 21         [ 4] 5239 	call next_token 
      001B6D A1 0D            [ 1] 5240 	cp a,#TK_COMMA 
      001B6F 27 02            [ 1] 5241 	jreq 1$ 
      001B71 20 19            [ 2] 5242 	jra 9$ 
      001B73 CD 0F F7         [ 4] 5243 1$:	call expression
      001B76 A1 04            [ 1] 5244 	cp a,#TK_INTGR
      001B78 27 03            [ 1] 5245 	jreq 2$
      001B7A CC 07 62         [ 2] 5246 	jp syntax_error
      001B7D 9F               [ 1] 5247 2$:	ld a,xl 
      001B7E 1E 01            [ 2] 5248 	ldw x,(ADDR,sp) 
      001B80 CF 00 19         [ 2] 5249 	ldw farptr+1,x 
      001B83 5F               [ 1] 5250 	clrw x 
      001B84 CD 00 F1         [ 4] 5251 	call write_byte
      001B87 1E 01            [ 2] 5252 	ldw x,(ADDR,sp)
      001B89 5C               [ 2] 5253 	incw x 
      001B8A 20 DC            [ 2] 5254 	jra 0$ 
      001B8C                       5255 9$:
      001B8C                       5256 	_drop VSIZE
      001B8C 5B 02            [ 2]    1     addw sp,#VSIZE 
      001B8E 81               [ 4] 5257 	ret 
                                   5258 
                                   5259 
                                   5260 ;---------------------
                                   5261 ;BASIC: CHAR(expr)
                                   5262 ; évaluate expression 
                                   5263 ; and take the 7 least 
                                   5264 ; bits as ASCII character
                                   5265 ;---------------------
      001B8F                       5266 char:
      001B8F CD 0F 12         [ 4] 5267 	call func_args 
      001B92 A1 01            [ 1] 5268 	cp a,#1
      001B94 27 03            [ 1] 5269 	jreq 1$
      001B96 CC 07 62         [ 2] 5270 	jp syntax_error
      001B99 85               [ 2] 5271 1$:	popw x 
      001B9A 9F               [ 1] 5272 	ld a,xl 
      001B9B A4 7F            [ 1] 5273 	and a,#0x7f 
      001B9D 97               [ 1] 5274 	ld xl,a
      001B9E A6 03            [ 1] 5275 	ld a,#TK_CHAR
      001BA0 81               [ 4] 5276 	ret
                                   5277 
                                   5278 ;---------------------
                                   5279 ; BASIC: ASC(string|char)
                                   5280 ; extract first character 
                                   5281 ; of string argument 
                                   5282 ; return it as TK_INTGR 
                                   5283 ;---------------------
      001BA1                       5284 ascii:
      001BA1 A6 0B            [ 1] 5285 	ld a,#TK_LPAREN
      001BA3 CD 0E DE         [ 4] 5286 	call expect 
      001BA6 CD 08 21         [ 4] 5287 	call next_token 
      001BA9 A1 02            [ 1] 5288 	cp a,#TK_QSTR 
      001BAB 27 07            [ 1] 5289 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001BAD A1 03            [ 1] 5290 	cp a,#TK_CHAR 
      001BAF 27 06            [ 1] 5291 	jreq 2$ 
      001BB1 CC 07 62         [ 2] 5292 	jp syntax_error
      001BB4                       5293 1$: 
      001BB4 F6               [ 1] 5294 	ld a,(x) 
      001BB5 5F               [ 1] 5295 	clrw x
      001BB6 97               [ 1] 5296 	ld xl,a 
      001BB7                       5297 2$: 
      001BB7 89               [ 2] 5298 	pushw x 
      001BB8 A6 0C            [ 1] 5299 	ld a,#TK_RPAREN 
      001BBA CD 0E DE         [ 4] 5300 	call expect
      001BBD 85               [ 2] 5301 	popw x 
      001BBE A6 04            [ 1] 5302 	ld a,#TK_INTGR 
      001BC0 81               [ 4] 5303 	ret 
                                   5304 
                                   5305 ;---------------------
                                   5306 ;BASIC: KEY
                                   5307 ; wait for a character 
                                   5308 ; received from STDIN 
                                   5309 ; input:
                                   5310 ;	none 
                                   5311 ; output:
                                   5312 ;	X 		ASCII character 
                                   5313 ;---------------------
      001BC1                       5314 key:
      001BC1 CD 01 CD         [ 4] 5315 	call getc 
      001BC4 5F               [ 1] 5316 	clrw x 
      001BC5 97               [ 1] 5317 	ld xl,a 
      001BC6 A6 04            [ 1] 5318 	ld a,#TK_INTGR
      001BC8 81               [ 4] 5319 	ret
                                   5320 
                                   5321 ;----------------------
                                   5322 ; BASIC: QKEY
                                   5323 ; Return true if there 
                                   5324 ; is a character in 
                                   5325 ; waiting in STDIN 
                                   5326 ; input:
                                   5327 ;  none 
                                   5328 ; output:
                                   5329 ;   X 		0|-1 
                                   5330 ;-----------------------
      001BC9                       5331 qkey:: 
      001BC9 5F               [ 1] 5332 	clrw x 
      001BCA 72 5D 00 27      [ 1] 5333 	tnz rx_char
      001BCE 27 01            [ 1] 5334 	jreq 9$ 
      001BD0 53               [ 2] 5335 	cplw x 
      001BD1 A6 04            [ 1] 5336 9$: ld a,#TK_INTGR
      001BD3 81               [ 4] 5337 	ret 
                                   5338 
                                   5339 ;---------------------
                                   5340 ; BASIC: GPIO(expr,reg)
                                   5341 ; return gpio address 
                                   5342 ; expr {0..8}
                                   5343 ; input:
                                   5344 ;   none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                   5345 ; output:
                                   5346 ;   X 		gpio register address
                                   5347 ;----------------------------
                           000003  5348 	PORT=3
                           000001  5349 	REG=1 
                           000004  5350 	VSIZE=4 
      001BD4                       5351 gpio:
      001BD4 CD 0F 12         [ 4] 5352 	call func_args 
      001BD7 A1 02            [ 1] 5353 	cp a,#2
      001BD9 27 03            [ 1] 5354 	jreq 1$
      001BDB CC 07 62         [ 2] 5355 	jp syntax_error  
      001BDE                       5356 1$:	
      001BDE 1E 03            [ 2] 5357 	ldw x,(PORT,sp)
      001BE0 2B 17            [ 1] 5358 	jrmi bad_port
      001BE2 A3 00 09         [ 2] 5359 	cpw x,#9
      001BE5 2A 12            [ 1] 5360 	jrpl bad_port
      001BE7 A6 05            [ 1] 5361 	ld a,#5
      001BE9 42               [ 4] 5362 	mul x,a
      001BEA 1C 50 00         [ 2] 5363 	addw x,#GPIO_BASE 
      001BED 1F 03            [ 2] 5364 	ldw (PORT,sp),x  
      001BEF 1E 01            [ 2] 5365 	ldw x,(REG,sp) 
      001BF1 72 FB 03         [ 2] 5366 	addw x,(PORT,sp)
      001BF4 A6 04            [ 1] 5367 	ld a,#TK_INTGR
      001BF6                       5368 	_drop VSIZE 
      001BF6 5B 04            [ 2]    1     addw sp,#VSIZE 
      001BF8 81               [ 4] 5369 	ret
      001BF9                       5370 bad_port:
      001BF9 A6 0A            [ 1] 5371 	ld a,#ERR_BAD_VALUE
      001BFB CC 07 64         [ 2] 5372 	jp tb_error
                                   5373 
                                   5374 
                                   5375 ;-------------------------
                                   5376 ; BASIC: UFLASH 
                                   5377 ; return user flash address
                                   5378 ; input:
                                   5379 ;  none 
                                   5380 ; output:
                                   5381 ;	A		TK_INTGR
                                   5382 ;   X 		user address 
                                   5383 ;---------------------------
      001BFE                       5384 uflash:
      001BFE AE 26 00         [ 2] 5385 	ldw x,#user_space 
      001C01 A6 04            [ 1] 5386 	ld a,#TK_INTGR 
      001C03 81               [ 4] 5387 	ret 
                                   5388 
                                   5389 
                                   5390 ;---------------------
                                   5391 ; BASIC: USR(addr[,arg])
                                   5392 ; execute a function written 
                                   5393 ; in binary code.
                                   5394 ; binary fonction should 
                                   5395 ; return token attribute in A 
                                   5396 ; and value in X. 
                                   5397 ; input:
                                   5398 ;   addr	routine address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   5399 ;   arg 	is an optional argument 
                                   5400 ; output:
                                   5401 ;   A 		token attribute 
                                   5402 ;   X       returned value 
                                   5403 ;---------------------
      001C04                       5404 usr:
      001C04 90 89            [ 2] 5405 	pushw y 	
      001C06 CD 0F 12         [ 4] 5406 	call func_args 
      001C09 A1 01            [ 1] 5407 	cp a,#1 
      001C0B 27 07            [ 1] 5408 	jreq 2$
      001C0D A1 02            [ 1] 5409 	cp a,#2
      001C0F 27 03            [ 1] 5410 	jreq 2$  
      001C11 CC 07 62         [ 2] 5411 	jp syntax_error 
      001C14 90 85            [ 2] 5412 2$: popw y  ; arg|addr 
      001C16 A1 01            [ 1] 5413 	cp a,#1
      001C18 27 02            [ 1] 5414 	jreq 3$
      001C1A 85               [ 2] 5415 	popw x ; addr
      001C1B 51               [ 1] 5416 	exgw x,y 
      001C1C 90 FD            [ 4] 5417 3$: call (y)
      001C1E 90 85            [ 2] 5418 	popw y 
      001C20 81               [ 4] 5419 	ret 
                                   5420 
                                   5421 ;------------------------------
                                   5422 ; BASIC: BYE 
                                   5423 ; halt mcu in its lowest power mode 
                                   5424 ; wait for reset or external interrupt
                                   5425 ; do a cold start on wakeup.
                                   5426 ;------------------------------
      001C21                       5427 bye:
      001C21 72 0D 52 30 FB   [ 2] 5428 	btjf UART1_SR,#UART_SR_TC,.
      001C26 8E               [10] 5429 	halt
      001C27 CC 04 ED         [ 2] 5430 	jp cold_start  
                                   5431 
                                   5432 ;----------------------------------
                                   5433 ; BASIC: AUTORUN ["file_name"] 
                                   5434 ; record in eeprom at adrress AUTORUN_NAME
                                   5435 ; the name of file to load and execute
                                   5436 ; at startup. 
                                   5437 ; empty string delete autorun name 
                                   5438 ; no argument display autorun name  
                                   5439 ; input:
                                   5440 ;   file_name   file to execute 
                                   5441 ; output:
                                   5442 ;   none
                                   5443 ;-----------------------------------
      001C2A                       5444 autorun: 
      001C2A 72 01 00 25 07   [ 2] 5445 	btjf flags,#FRUN,0$ 
      001C2F 27 05            [ 1] 5446 	jreq 0$ 
      001C31 A6 07            [ 1] 5447 	ld a,#ERR_CMD_ONLY 
      001C33 CC 07 64         [ 2] 5448 	jp tb_error 
      001C36                       5449 0$:	
      001C36 CD 08 21         [ 4] 5450 	call next_token
      001C39 26 08            [ 1] 5451 	jrne 1$
      001C3B AE 40 00         [ 2] 5452 	ldw x,#AUTORUN_NAME
      001C3E CD 01 D7         [ 4] 5453 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001C41 4F               [ 1] 5454 	clr a 
      001C42 81               [ 4] 5455 	ret 
      001C43                       5456 1$:
      001C43 A1 02            [ 1] 5457 	cp a,#TK_QSTR
      001C45 27 03            [ 1] 5458 	jreq 2$
      001C47 CC 07 62         [ 2] 5459 	jp syntax_error 
      001C4A                       5460 2$:	
      001C4A 7D               [ 1] 5461 	tnz (x) 
      001C4B 26 08            [ 1] 5462 	jrne 3$
                                   5463 ; empty string, delete autorun 	
      001C4D CD 05 B2         [ 4] 5464 	call cancel_autorun
      001C50 72 5F 00 03      [ 1] 5465 	clr count 
      001C54 81               [ 4] 5466 	ret 
      001C55 89               [ 2] 5467 3$:	pushw x 
      001C56 90 93            [ 1] 5468 	ldw y,x  
      001C58 CD 19 0D         [ 4] 5469 	call search_file 
      001C5B 25 05            [ 1] 5470 	jrc 4$ 
      001C5D A6 09            [ 1] 5471 	ld a,#ERR_NOT_FILE
      001C5F CC 07 64         [ 2] 5472 	jp tb_error  
      001C62                       5473 4$: 
      001C62 55 00 03 00 01   [ 1] 5474 	mov in,count 
      001C67 72 5F 00 18      [ 1] 5475 	clr farptr 
      001C6B AE 40 00         [ 2] 5476 	ldw x,#AUTORUN_NAME
      001C6E CF 00 19         [ 2] 5477 	ldw farptr+1,x 
      001C71 1E 01            [ 2] 5478 	ldw x,(1,sp)  
      001C73 CD 02 0B         [ 4] 5479 	call strlen  ; return length in X 
      001C76 5C               [ 2] 5480 	incw x 
      001C77 90 85            [ 2] 5481 	popw y 
      001C79 89               [ 2] 5482 	pushw x 
      001C7A 5F               [ 1] 5483 	clrw x 
      001C7B CD 01 66         [ 4] 5484 	call write_block 
      001C7E                       5485 	_drop 2 
      001C7E 5B 02            [ 2]    1     addw sp,#2 
      001C80 81               [ 4] 5486 	ret 
                                   5487 
                                   5488 ;----------------------------------
                                   5489 ; BASIC: SLEEP 
                                   5490 ; halt mcu until reset or external
                                   5491 ; interrupt.
                                   5492 ; Resume progam after SLEEP command
                                   5493 ;----------------------------------
      001C81                       5494 sleep:
      001C81 72 0D 52 30 FB   [ 2] 5495 	btjf UART1_SR,#UART_SR_TC,.
      001C86 72 16 00 25      [ 1] 5496 	bset flags,#FSLEEP
      001C8A 8E               [10] 5497 	halt 
      001C8B 81               [ 4] 5498 	ret 
                                   5499 
                                   5500 ;-------------------------------
                                   5501 ; BASIC: PAUSE expr 
                                   5502 ; suspend execution for n msec.
                                   5503 ; input:
                                   5504 ;	none
                                   5505 ; output:
                                   5506 ;	none 
                                   5507 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001C8C                       5508 pause:
      001C8C CD 0F F7         [ 4] 5509 	call expression
      001C8F A1 04            [ 1] 5510 	cp a,#TK_INTGR
      001C91 27 03            [ 1] 5511 	jreq pause02 
      001C93 CC 07 62         [ 2] 5512 	jp syntax_error
      001C96                       5513 pause02: 
      001C96 5D               [ 2] 5514 1$: tnzw x 
      001C97 27 04            [ 1] 5515 	jreq 2$
      001C99 8F               [10] 5516 	wfi 
      001C9A 5A               [ 2] 5517 	decw x 
      001C9B 26 F9            [ 1] 5518 	jrne 1$
      001C9D 4F               [ 1] 5519 2$:	clr a 
      001C9E 81               [ 4] 5520 	ret 
                                   5521 
                                   5522 ;------------------------------
                                   5523 ; BASIC: AWU expr
                                   5524 ; halt mcu for 'expr' milliseconds
                                   5525 ; use Auto wakeup peripheral
                                   5526 ; all oscillators stopped except LSI
                                   5527 ; range: 1ms - 511ms
                                   5528 ; input:
                                   5529 ;  none
                                   5530 ; output:
                                   5531 ;  none:
                                   5532 ;------------------------------
      001C9F                       5533 awu:
      001C9F CD 0F F7         [ 4] 5534   call expression
      001CA2 A1 04            [ 1] 5535   cp a,#TK_INTGR
      001CA4 27 03            [ 1] 5536   jreq awu02
      001CA6 CC 07 62         [ 2] 5537   jp syntax_error
      001CA9                       5538 awu02:
      001CA9 A3 14 00         [ 2] 5539   cpw x,#5120
      001CAC 2B 0C            [ 1] 5540   jrmi 1$ 
      001CAE 35 0F 50 F2      [ 1] 5541   mov AWU_TBR,#15 
      001CB2 A6 1E            [ 1] 5542   ld a,#30
      001CB4 62               [ 2] 5543   div x,a
      001CB5 A6 10            [ 1] 5544   ld a,#16
      001CB7 62               [ 2] 5545   div x,a 
      001CB8 20 1E            [ 2] 5546   jra 4$
      001CBA                       5547 1$: 
      001CBA A3 08 00         [ 2] 5548   cpw x,#2048
      001CBD 2B 09            [ 1] 5549   jrmi 2$ 
      001CBF 35 0E 50 F2      [ 1] 5550   mov AWU_TBR,#14
      001CC3 A6 50            [ 1] 5551   ld a,#80
      001CC5 62               [ 2] 5552   div x,a 
      001CC6 20 10            [ 2] 5553   jra 4$   
      001CC8                       5554 2$:
      001CC8 35 07 50 F2      [ 1] 5555   mov AWU_TBR,#7
      001CCC                       5556 3$:  
                                   5557 ; while X > 64  divide by 2 and increment AWU_TBR 
      001CCC A3 00 40         [ 2] 5558   cpw x,#64 
      001CCF 23 07            [ 2] 5559   jrule 4$ 
      001CD1 72 5C 50 F2      [ 1] 5560   inc AWU_TBR 
      001CD5 54               [ 2] 5561   srlw x 
      001CD6 20 F4            [ 2] 5562   jra 3$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001CD8                       5563 4$:
      001CD8 9F               [ 1] 5564   ld a, xl
      001CD9 4A               [ 1] 5565   dec a 
      001CDA 27 01            [ 1] 5566   jreq 5$
      001CDC 4A               [ 1] 5567   dec a 	
      001CDD                       5568 5$: 
      001CDD A4 3E            [ 1] 5569   and a,#0x3e 
      001CDF C7 50 F1         [ 1] 5570   ld AWU_APR,a 
      001CE2 72 18 50 F0      [ 1] 5571   bset AWU_CSR,#AWU_CSR_AWUEN
      001CE6 8E               [10] 5572   halt 
                                   5573 
      001CE7 81               [ 4] 5574   ret 
                                   5575 
                                   5576 ;------------------------------
                                   5577 ; BASIC: TICKS
                                   5578 ; return msec ticks counter value 
                                   5579 ; input:
                                   5580 ; 	none 
                                   5581 ; output:
                                   5582 ;	X 		TK_INTGR
                                   5583 ;-------------------------------
      001CE8                       5584 get_ticks:
      001CE8 CE 00 10         [ 2] 5585 	ldw x,ticks 
      001CEB A6 04            [ 1] 5586 	ld a,#TK_INTGR
      001CED 81               [ 4] 5587 	ret 
                                   5588 
                                   5589 
                                   5590 
                                   5591 ;------------------------------
                                   5592 ; BASIC: ABS(expr)
                                   5593 ; return absolute value of expr.
                                   5594 ; input:
                                   5595 ;   none
                                   5596 ; output:
                                   5597 ;   X     	positive integer
                                   5598 ;-------------------------------
      001CEE                       5599 abs:
      001CEE CD 0F 12         [ 4] 5600 	call func_args 
      001CF1 A1 01            [ 1] 5601 	cp a,#1 
      001CF3 27 03            [ 1] 5602 	jreq 0$ 
      001CF5 CC 07 62         [ 2] 5603 	jp syntax_error
      001CF8                       5604 0$:  
      001CF8 85               [ 2] 5605     popw x   
      001CF9 9E               [ 1] 5606 	ld a,xh 
      001CFA A5 80            [ 1] 5607 	bcp a,#0x80 
      001CFC 27 01            [ 1] 5608 	jreq 2$ 
      001CFE 50               [ 2] 5609 	negw x 
      001CFF A6 04            [ 1] 5610 2$: ld a,#TK_INTGR 
      001D01 81               [ 4] 5611 	ret 
                                   5612 
                                   5613 ;------------------------------
                                   5614 ; BASIC: AND(expr1,expr2)
                                   5615 ; Apply bit AND relation between
                                   5616 ; the 2 arguments, i.e expr1 & expr2 
                                   5617 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   5618 ; 	A 		TK_INTGR
                                   5619 ;   X 		result 
                                   5620 ;------------------------------
      001D02                       5621 bit_and:
      001D02 CD 0F 12         [ 4] 5622 	call func_args 
      001D05 A1 02            [ 1] 5623 	cp a,#2
      001D07 27 03            [ 1] 5624 	jreq 1$
      001D09 CC 07 62         [ 2] 5625 	jp syntax_error 
      001D0C 85               [ 2] 5626 1$:	popw x 
      001D0D 9E               [ 1] 5627 	ld a,xh 
      001D0E 14 01            [ 1] 5628 	and a,(1,sp)
      001D10 95               [ 1] 5629 	ld xh,a 
      001D11 9F               [ 1] 5630 	ld a,xl
      001D12 14 02            [ 1] 5631 	and a,(2,sp)
      001D14 97               [ 1] 5632 	ld xl,a 
      001D15                       5633 	_drop 2 
      001D15 5B 02            [ 2]    1     addw sp,#2 
      001D17 A6 04            [ 1] 5634 	ld a,#TK_INTGR
      001D19 81               [ 4] 5635 	ret
                                   5636 
                                   5637 ;------------------------------
                                   5638 ; BASIC: OR(expr1,expr2)
                                   5639 ; Apply bit OR relation between
                                   5640 ; the 2 arguments, i.e expr1 | expr2 
                                   5641 ; output:
                                   5642 ; 	A 		TK_INTGR
                                   5643 ;   X 		result 
                                   5644 ;------------------------------
      001D1A                       5645 bit_or:
      001D1A CD 0F 12         [ 4] 5646 	call func_args 
      001D1D A1 02            [ 1] 5647 	cp a,#2
      001D1F 27 03            [ 1] 5648 	jreq 1$
      001D21 CC 07 62         [ 2] 5649 	jp syntax_error 
      001D24                       5650 1$: 
      001D24 85               [ 2] 5651 	popw x 
      001D25 9E               [ 1] 5652 	ld a,xh 
      001D26 1A 01            [ 1] 5653 	or a,(1,sp)
      001D28 95               [ 1] 5654 	ld xh,a 
      001D29 9F               [ 1] 5655 	ld a,xl 
      001D2A 1A 02            [ 1] 5656 	or a,(2,sp)
      001D2C 97               [ 1] 5657 	ld xl,a 
      001D2D                       5658 	_drop 2 
      001D2D 5B 02            [ 2]    1     addw sp,#2 
      001D2F A6 04            [ 1] 5659 	ld a,#TK_INTGR 
      001D31 81               [ 4] 5660 	ret
                                   5661 
                                   5662 ;------------------------------
                                   5663 ; BASIC: XOR(expr1,expr2)
                                   5664 ; Apply bit XOR relation between
                                   5665 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5666 ; output:
                                   5667 ; 	A 		TK_INTGR
                                   5668 ;   X 		result 
                                   5669 ;------------------------------
      001D32                       5670 bit_xor:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001D32 CD 0F 12         [ 4] 5671 	call func_args 
      001D35 A1 02            [ 1] 5672 	cp a,#2
      001D37 27 03            [ 1] 5673 	jreq 1$
      001D39 CC 07 62         [ 2] 5674 	jp syntax_error 
      001D3C                       5675 1$: 
      001D3C 85               [ 2] 5676 	popw x 
      001D3D 9E               [ 1] 5677 	ld a,xh 
      001D3E 18 01            [ 1] 5678 	xor a,(1,sp)
      001D40 95               [ 1] 5679 	ld xh,a 
      001D41 9F               [ 1] 5680 	ld a,xl 
      001D42 18 02            [ 1] 5681 	xor a,(2,sp)
      001D44 97               [ 1] 5682 	ld xl,a 
      001D45                       5683 	_drop 2 
      001D45 5B 02            [ 2]    1     addw sp,#2 
      001D47 A6 04            [ 1] 5684 	ld a,#TK_INTGR 
      001D49 81               [ 4] 5685 	ret 
                                   5686 
                                   5687 ;------------------------------
                                   5688 ; BASIC: LSHIFT(expr1,expr2)
                                   5689 ; logical shift left expr1 by 
                                   5690 ; expr2 bits 
                                   5691 ; output:
                                   5692 ; 	A 		TK_INTGR
                                   5693 ;   X 		result 
                                   5694 ;------------------------------
      001D4A                       5695 lshift:
      001D4A CD 0F 12         [ 4] 5696 	call func_args
      001D4D A1 02            [ 1] 5697 	cp a,#2 
      001D4F 27 03            [ 1] 5698 	jreq 1$
      001D51 CC 07 62         [ 2] 5699 	jp syntax_error
      001D54 90 85            [ 2] 5700 1$: popw y   
      001D56 85               [ 2] 5701 	popw x 
      001D57 90 5D            [ 2] 5702 	tnzw y 
      001D59 27 05            [ 1] 5703 	jreq 4$
      001D5B 58               [ 2] 5704 2$:	sllw x 
      001D5C 90 5A            [ 2] 5705 	decw y 
      001D5E 26 FB            [ 1] 5706 	jrne 2$
      001D60                       5707 4$:  
      001D60 A6 04            [ 1] 5708 	ld a,#TK_INTGR
      001D62 81               [ 4] 5709 	ret
                                   5710 
                                   5711 ;------------------------------
                                   5712 ; BASIC: RSHIFT(expr1,expr2)
                                   5713 ; logical shift right expr1 by 
                                   5714 ; expr2 bits.
                                   5715 ; output:
                                   5716 ; 	A 		TK_INTGR
                                   5717 ;   X 		result 
                                   5718 ;------------------------------
      001D63                       5719 rshift:
      001D63 CD 0F 12         [ 4] 5720 	call func_args
      001D66 A1 02            [ 1] 5721 	cp a,#2 
      001D68 27 03            [ 1] 5722 	jreq 1$
      001D6A CC 07 62         [ 2] 5723 	jp syntax_error
      001D6D 90 85            [ 2] 5724 1$: popw y  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001D6F 85               [ 2] 5725 	popw x
      001D70 90 5D            [ 2] 5726 	tnzw y 
      001D72 27 05            [ 1] 5727 	jreq 4$
      001D74 54               [ 2] 5728 2$:	srlw x 
      001D75 90 5A            [ 2] 5729 	decw y 
      001D77 26 FB            [ 1] 5730 	jrne 2$
      001D79                       5731 4$:  
      001D79 A6 04            [ 1] 5732 	ld a,#TK_INTGR
      001D7B 81               [ 4] 5733 	ret
                                   5734 
                                   5735 ;--------------------------
                                   5736 ; BASIC: FCPU integer
                                   5737 ; set CPU frequency 
                                   5738 ;-------------------------- 
                                   5739 
      001D7C                       5740 fcpu:
      001D7C A6 04            [ 1] 5741 	ld a,#TK_INTGR
      001D7E CD 0E DE         [ 4] 5742 	call expect 
      001D81 9F               [ 1] 5743 	ld a,xl 
      001D82 A4 07            [ 1] 5744 	and a,#7 
      001D84 C7 50 C6         [ 1] 5745 	ld CLK_CKDIVR,a 
      001D87 81               [ 4] 5746 	ret 
                                   5747 
                                   5748 ;------------------------------
                                   5749 ; BASIC: PMODE pin#, mode 
                                   5750 ; Arduino pin. 
                                   5751 ; define pin as input or output
                                   5752 ; pin#: {0..15}
                                   5753 ; mode: INPUT|OUTPUT  
                                   5754 ;------------------------------
                           000001  5755 	PINNO=1
                           000001  5756 	VSIZE=1
      001D88                       5757 pin_mode:
      001D88                       5758 	_vars VSIZE 
      001D88 52 01            [ 2]    1     sub sp,#VSIZE 
      001D8A CD 0E EB         [ 4] 5759 	call arg_list 
      001D8D A1 02            [ 1] 5760 	cp a,#2 
      001D8F 27 03            [ 1] 5761 	jreq 1$
      001D91 CC 07 62         [ 2] 5762 	jp syntax_error 
      001D94 90 85            [ 2] 5763 1$: popw y ; mode 
      001D96 85               [ 2] 5764 	popw x ; Dx pin 
      001D97 CD 1D C9         [ 4] 5765 	call select_pin 
      001D9A 6B 01            [ 1] 5766 	ld (PINNO,sp),a  
      001D9C A6 01            [ 1] 5767 	ld a,#1 
      001D9E 0D 01            [ 1] 5768 	tnz (PINNO,sp)
      001DA0 27 0B            [ 1] 5769 	jreq 4$
      001DA2 48               [ 1] 5770 2$:	sll a 
      001DA3 0A 01            [ 1] 5771 	dec (PINNO,sp)
      001DA5 26 FB            [ 1] 5772 	jrne 2$ 
      001DA7 6B 01            [ 1] 5773 	ld (PINNO,sp),a
      001DA9 EA 03            [ 1] 5774 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      001DAB E7 03            [ 1] 5775 	ld (GPIO_CR1,x),a 
      001DAD 90 A3 00 01      [ 2] 5776 4$:	cpw y,#OUTP 
      001DB1 27 07            [ 1] 5777 	jreq 6$
                                   5778 ; input mode
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001DB3 7B 01            [ 1] 5779 	ld a,(PINNO,sp)
      001DB5 43               [ 1] 5780 	cpl a 
      001DB6 E4 02            [ 1] 5781 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001DB8 20 0A            [ 2] 5782 	jra 9$
      001DBA                       5783 6$: ;output mode  
      001DBA 7B 01            [ 1] 5784 	ld a,(PINNO,sp)
      001DBC EA 04            [ 1] 5785 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      001DBE E7 04            [ 1] 5786 	ld (GPIO_CR2,x),a 
      001DC0 7B 01            [ 1] 5787 	ld a,(PINNO,sp)
      001DC2 EA 02            [ 1] 5788 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001DC4 E7 02            [ 1] 5789 9$:	ld (GPIO_DDR,x),a 
      001DC6                       5790 	_drop VSIZE 
      001DC6 5B 01            [ 2]    1     addw sp,#VSIZE 
      001DC8 81               [ 4] 5791 	ret
                                   5792 
                                   5793 ;------------------------
                                   5794 ; select Arduino pin 
                                   5795 ; input:
                                   5796 ;   X 	 {0..15} Arduino Dx 
                                   5797 ; output:
                                   5798 ;   A     stm8s208 pin 
                                   5799 ;   X     base address s208 GPIO port 
                                   5800 ;---------------------------
      001DC9                       5801 select_pin:
      001DC9 58               [ 2] 5802 	sllw x 
      001DCA 1C 1D D9         [ 2] 5803 	addw x,#arduino_to_8s208 
      001DCD FE               [ 2] 5804 	ldw x,(x)
      001DCE 9F               [ 1] 5805 	ld a,xl 
      001DCF 88               [ 1] 5806 	push a 
      001DD0 5E               [ 1] 5807 	swapw x 
      001DD1 A6 05            [ 1] 5808 	ld a,#5 
      001DD3 42               [ 4] 5809 	mul x,a 
      001DD4 1C 50 00         [ 2] 5810 	addw x,#GPIO_BASE 
      001DD7 84               [ 1] 5811 	pop a 
      001DD8 81               [ 4] 5812 	ret 
                                   5813 ; translation from Arduino D0..D15 to stm8s208rb 
      001DD9                       5814 arduino_to_8s208:
      001DD9 03 06                 5815 .byte 3,6 ; D0 
      001DDB 03 05                 5816 .byte 3,5 ; D1 
      001DDD 04 00                 5817 .byte 4,0 ; D2 
      001DDF 02 01                 5818 .byte 2,1 ; D3
      001DE1 06 00                 5819 .byte 6,0 ; D4
      001DE3 02 02                 5820 .byte 2,2 ; D5
      001DE5 02 03                 5821 .byte 2,3 ; D6
      001DE7 03 01                 5822 .byte 3,1 ; D7
      001DE9 03 03                 5823 .byte 3,3 ; D8
      001DEB 02 04                 5824 .byte 2,4 ; D9
      001DED 04 05                 5825 .byte 4,5 ; D10
      001DEF 02 06                 5826 .byte 2,6 ; D11
      001DF1 02 07                 5827 .byte 2,7 ; D12
      001DF3 02 05                 5828 .byte 2,5 ; D13
      001DF5 04 02                 5829 .byte 4,2 ; D14
      001DF7 04 01                 5830 .byte 4,1 ; D15
                                   5831 
                                   5832 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   5833 ;------------------------------
                                   5834 ; BASIC: RND(expr)
                                   5835 ; return random number 
                                   5836 ; between 1 and expr inclusive
                                   5837 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5838 ; input:
                                   5839 ; 	none 
                                   5840 ; output:
                                   5841 ;	X 		random positive integer 
                                   5842 ;------------------------------
      001DF9                       5843 random:
      001DF9 CD 0F 12         [ 4] 5844 	call func_args 
      001DFC A1 01            [ 1] 5845 	cp a,#1
      001DFE 27 03            [ 1] 5846 	jreq 1$
      001E00 CC 07 62         [ 2] 5847 	jp syntax_error
      001E03                       5848 1$:  
      001E03 A6 80            [ 1] 5849 	ld a,#0x80 
      001E05 15 01            [ 1] 5850 	bcp a,(1,sp)
      001E07 27 05            [ 1] 5851 	jreq 2$
      001E09 A6 0A            [ 1] 5852 	ld a,#ERR_BAD_VALUE
      001E0B CC 07 64         [ 2] 5853 	jp tb_error
      001E0E                       5854 2$: 
                                   5855 ; acc16=(x<<5)^x 
      001E0E CE 00 14         [ 2] 5856 	ldw x,seedx 
      001E11 58               [ 2] 5857 	sllw x 
      001E12 58               [ 2] 5858 	sllw x 
      001E13 58               [ 2] 5859 	sllw x 
      001E14 58               [ 2] 5860 	sllw x 
      001E15 58               [ 2] 5861 	sllw x 
      001E16 9E               [ 1] 5862 	ld a,xh 
      001E17 C8 00 14         [ 1] 5863 	xor a,seedx 
      001E1A C7 00 0C         [ 1] 5864 	ld acc16,a 
      001E1D 9F               [ 1] 5865 	ld a,xl 
      001E1E C8 00 15         [ 1] 5866 	xor a,seedx+1 
      001E21 C7 00 0D         [ 1] 5867 	ld acc8,a 
                                   5868 ; seedx=seedy 
      001E24 CE 00 16         [ 2] 5869 	ldw x,seedy 
      001E27 CF 00 14         [ 2] 5870 	ldw seedx,x  
                                   5871 ; seedy=seedy^(seedy>>1)
      001E2A 90 54            [ 2] 5872 	srlw y 
      001E2C 90 9E            [ 1] 5873 	ld a,yh 
      001E2E C8 00 16         [ 1] 5874 	xor a,seedy 
      001E31 C7 00 16         [ 1] 5875 	ld seedy,a  
      001E34 90 9F            [ 1] 5876 	ld a,yl 
      001E36 C8 00 17         [ 1] 5877 	xor a,seedy+1 
      001E39 C7 00 17         [ 1] 5878 	ld seedy+1,a 
                                   5879 ; acc16>>3 
      001E3C CE 00 0C         [ 2] 5880 	ldw x,acc16 
      001E3F 54               [ 2] 5881 	srlw x 
      001E40 54               [ 2] 5882 	srlw x 
      001E41 54               [ 2] 5883 	srlw x 
                                   5884 ; x=acc16^x 
      001E42 9E               [ 1] 5885 	ld a,xh 
      001E43 C8 00 0C         [ 1] 5886 	xor a,acc16 
      001E46 95               [ 1] 5887 	ld xh,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001E47 9F               [ 1] 5888 	ld a,xl 
      001E48 C8 00 0D         [ 1] 5889 	xor a,acc8 
      001E4B 97               [ 1] 5890 	ld xl,a 
                                   5891 ; seedy=x^seedy 
      001E4C C8 00 17         [ 1] 5892 	xor a,seedy+1
      001E4F 97               [ 1] 5893 	ld xl,a 
      001E50 9E               [ 1] 5894 	ld a,xh 
      001E51 C8 00 16         [ 1] 5895 	xor a,seedy
      001E54 95               [ 1] 5896 	ld xh,a 
      001E55 CF 00 16         [ 2] 5897 	ldw seedy,x 
                                   5898 ; return seedy modulo expr + 1 
      001E58 90 85            [ 2] 5899 	popw y 
      001E5A 65               [ 2] 5900 	divw x,y 
      001E5B 93               [ 1] 5901 	ldw x,y 
      001E5C 5C               [ 2] 5902 	incw x 
      001E5D                       5903 10$:
      001E5D A6 04            [ 1] 5904 	ld a,#TK_INTGR
      001E5F 81               [ 4] 5905 	ret 
                                   5906 
                                   5907 ;---------------------------------
                                   5908 ; BASIC: WORDS 
                                   5909 ; affiche la listes des mots du
                                   5910 ; dictionnaire ainsi que le nombre
                                   5911 ; de mots.
                                   5912 ;---------------------------------
                           000001  5913 	WLEN=1 ; word length
                           000002  5914 	LLEN=2 ; character sent to console
                           000003  5915 	WCNT=3 ; count words printed 
                           000003  5916 	VSIZE=3 
      001E60                       5917 words:
      001E60                       5918 	_vars VSIZE
      001E60 52 03            [ 2]    1     sub sp,#VSIZE 
      001E62 0F 02            [ 1] 5919 	clr (LLEN,sp)
      001E64 0F 03            [ 1] 5920 	clr (WCNT,sp)
      001E66 90 AE 25 83      [ 2] 5921 	ldw y,#kword_dict+2
      001E6A 93               [ 1] 5922 0$:	ldw x,y
      001E6B F6               [ 1] 5923 	ld a,(x)
      001E6C A4 0F            [ 1] 5924 	and a,#15 
      001E6E 6B 01            [ 1] 5925 	ld (WLEN,sp),a 
      001E70 0C 03            [ 1] 5926 	inc (WCNT,sp)
      001E72 5C               [ 2] 5927 1$:	incw x 
      001E73 F6               [ 1] 5928 	ld a,(x)
      001E74 CD 01 C4         [ 4] 5929 	call putc 
      001E77 0C 02            [ 1] 5930 	inc (LLEN,sp)
      001E79 0A 01            [ 1] 5931 	dec (WLEN,sp)
      001E7B 26 F5            [ 1] 5932 	jrne 1$
      001E7D A6 46            [ 1] 5933 	ld a,#70
      001E7F 11 02            [ 1] 5934 	cp a,(LLEN,sp)
      001E81 2B 09            [ 1] 5935 	jrmi 2$   
      001E83 A6 20            [ 1] 5936 	ld a,#SPACE 
      001E85 CD 01 C4         [ 4] 5937 	call putc 
      001E88 0C 02            [ 1] 5938 	inc (LLEN,sp) 
      001E8A 20 07            [ 2] 5939 	jra 3$
      001E8C A6 0D            [ 1] 5940 2$: ld a,#CR 
      001E8E CD 01 C4         [ 4] 5941 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      001E91 0F 02            [ 1] 5942 	clr (LLEN,sp)
      001E93 72 A2 00 02      [ 2] 5943 3$:	subw y,#2 
      001E97 90 FE            [ 2] 5944 	ldw y,(y)
      001E99 26 CF            [ 1] 5945 	jrne 0$ 
      001E9B A6 0D            [ 1] 5946 	ld a,#CR 
      001E9D CD 01 C4         [ 4] 5947 	call putc  
      001EA0 5F               [ 1] 5948 	clrw x 
      001EA1 7B 03            [ 1] 5949 	ld a,(WCNT,sp)
      001EA3 97               [ 1] 5950 	ld xl,a 
      001EA4 CD 08 BA         [ 4] 5951 	call print_int 
      001EA7 AE 1E B0         [ 2] 5952 	ldw x,#words_count_msg
      001EAA CD 01 D7         [ 4] 5953 	call puts 
      001EAD                       5954 	_drop VSIZE 
      001EAD 5B 03            [ 2]    1     addw sp,#VSIZE 
      001EAF 81               [ 4] 5955 	ret 
      001EB0 20 77 6F 72 64 73 20  5956 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   5957 
                                   5958 
                                   5959 ;-----------------------------
                                   5960 ; BASIC: TIMER expr 
                                   5961 ; initialize count down timer 
                                   5962 ;-----------------------------
      001EC6                       5963 set_timer:
      001EC6 CD 0E EB         [ 4] 5964 	call arg_list
      001EC9 A1 01            [ 1] 5965 	cp a,#1 
      001ECB 27 03            [ 1] 5966 	jreq 1$
      001ECD CC 07 62         [ 2] 5967 	jp syntax_error
      001ED0                       5968 1$: 
      001ED0 85               [ 2] 5969 	popw x 
      001ED1 CF 00 12         [ 2] 5970 	ldw timer,x 
      001ED4 81               [ 4] 5971 	ret 
                                   5972 
                                   5973 ;------------------------------
                                   5974 ; BASIC: TIMEOUT 
                                   5975 ; return state of timer 
                                   5976 ;------------------------------
      001ED5                       5977 timeout:
      001ED5 CE 00 12         [ 2] 5978 	ldw x,timer 
      001ED8                       5979 logical_complement:
      001ED8 53               [ 2] 5980 	cplw x 
      001ED9 A3 FF FF         [ 2] 5981 	cpw x,#-1
      001EDC 27 01            [ 1] 5982 	jreq 2$
      001EDE 5F               [ 1] 5983 	clrw x 
      001EDF A6 04            [ 1] 5984 2$:	ld a,#TK_INTGR
      001EE1 81               [ 4] 5985 	ret 
                                   5986 
                                   5987 ;--------------------------------
                                   5988 ; BASIC NOT(expr) 
                                   5989 ; return logical complement of expr
                                   5990 ;--------------------------------
      001EE2                       5991 func_not:
      001EE2 CD 0F 12         [ 4] 5992 	call func_args  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      001EE5 A1 01            [ 1] 5993 	cp a,#1
      001EE7 27 03            [ 1] 5994 	jreq 1$
      001EE9 CC 07 62         [ 2] 5995 	jp syntax_error
      001EEC 85               [ 2] 5996 1$:	popw x 
      001EED 20 E9            [ 2] 5997 	jra logical_complement
                                   5998 
                                   5999 
                                   6000 
                                   6001 ;-----------------------------------
                                   6002 ; BASIC: IWDGEN expr1 
                                   6003 ; enable independant watchdog timer
                                   6004 ; expr1 is delay in multiple of 62.5µsec
                                   6005 ; expr1 -> {1..16383}
                                   6006 ;-----------------------------------
      001EEF                       6007 enable_iwdg:
      001EEF CD 0E EB         [ 4] 6008 	call arg_list
      001EF2 A1 01            [ 1] 6009 	cp a,#1 
      001EF4 27 03            [ 1] 6010 	jreq 1$
      001EF6 CC 07 62         [ 2] 6011 	jp syntax_error 
      001EF9 85               [ 2] 6012 1$: popw x 
      001EFA 4B 00            [ 1] 6013 	push #0
      001EFC 35 CC 50 E0      [ 1] 6014 	mov IWDG_KR,#IWDG_KEY_ENABLE
      001F00 9E               [ 1] 6015 	ld a,xh 
      001F01 A4 3F            [ 1] 6016 	and a,#0x3f
      001F03 95               [ 1] 6017 	ld xh,a  
      001F04 A3 00 FF         [ 2] 6018 2$:	cpw x,#255
      001F07 23 06            [ 2] 6019 	jrule 3$
      001F09 0C 01            [ 1] 6020 	inc (1,sp)
      001F0B 98               [ 1] 6021 	rcf 
      001F0C 56               [ 2] 6022 	rrcw x 
      001F0D 20 F5            [ 2] 6023 	jra 2$
      001F0F 35 55 50 E0      [ 1] 6024 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001F13 84               [ 1] 6025 	pop a  
      001F14 C7 50 E1         [ 1] 6026 	ld IWDG_PR,a 
      001F17 9F               [ 1] 6027 	ld a,xl
      001F18 4A               [ 1] 6028 	dec a 
      001F19 35 55 50 E0      [ 1] 6029 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001F1D C7 50 E2         [ 1] 6030 	ld IWDG_RLR,a 
      001F20 35 AA 50 E0      [ 1] 6031 	mov IWDG_KR,#IWDG_KEY_REFRESH
      001F24 81               [ 4] 6032 	ret 
                                   6033 
                                   6034 
                                   6035 ;-----------------------------------
                                   6036 ; BASIC: IWDGREF  
                                   6037 ; refresh independant watchdog count down 
                                   6038 ; timer before it reset MCU. 
                                   6039 ;-----------------------------------
      001F25                       6040 refresh_iwdg:
      001F25 35 AA 50 E0      [ 1] 6041 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      001F29 81               [ 4] 6042 	ret 
                                   6043 
                                   6044 
                                   6045 ;-------------------------------------
                                   6046 ; BASIC: LOG(expr)
                                   6047 ; return logarithm base 2 of expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   6048 ; this is the position of most significant
                                   6049 ; bit set. 
                                   6050 ; input: 
                                   6051 ; output:
                                   6052 ;   X     log2 
                                   6053 ;   A     TK_INTGR 
                                   6054 ;*********************************
      001F2A                       6055 log2:
      001F2A CD 0F 12         [ 4] 6056 	call func_args 
      001F2D A1 01            [ 1] 6057 	cp a,#1 
      001F2F 27 03            [ 1] 6058 	jreq 1$
      001F31 CC 07 62         [ 2] 6059 	jp syntax_error 
      001F34 85               [ 2] 6060 1$: popw x 
      001F35                       6061 leading_one:
      001F35 5D               [ 2] 6062 	tnzw x 
      001F36 27 0A            [ 1] 6063 	jreq 4$
      001F38 A6 0F            [ 1] 6064 	ld a,#15 
      001F3A 59               [ 2] 6065 2$: rlcw x 
      001F3B 25 03            [ 1] 6066     jrc 3$
      001F3D 4A               [ 1] 6067 	dec a 
      001F3E 20 FA            [ 2] 6068 	jra 2$
      001F40 5F               [ 1] 6069 3$: clrw x 
      001F41 97               [ 1] 6070     ld xl,a
      001F42 A6 04            [ 1] 6071 4$:	ld a,#TK_INTGR
      001F44 81               [ 4] 6072 	ret 
                                   6073 
                                   6074 ;-----------------------------------
                                   6075 ; BASIC: BIT(expr) 
                                   6076 ; expr ->{0..15}
                                   6077 ; return 2^expr 
                                   6078 ; output:
                                   6079 ;    x    2^expr 
                                   6080 ;-----------------------------------
      001F45                       6081 bitmask:
      001F45 CD 0F 12         [ 4] 6082     call func_args 
      001F48 A1 01            [ 1] 6083 	cp a,#1
      001F4A 27 03            [ 1] 6084 	jreq 1$
      001F4C CC 07 62         [ 2] 6085 	jp syntax_error 
      001F4F 85               [ 2] 6086 1$: popw x 
      001F50 9F               [ 1] 6087 	ld a,xl 
      001F51 A4 0F            [ 1] 6088 	and a,#15
      001F53 5F               [ 1] 6089 	clrw x 
      001F54 5C               [ 2] 6090 	incw x 
      001F55 4D               [ 1] 6091 2$: tnz a 
      001F56 27 04            [ 1] 6092 	jreq 3$
      001F58 58               [ 2] 6093 	slaw x 
      001F59 4A               [ 1] 6094 	dec a 
      001F5A 20 F9            [ 2] 6095 	jra 2$ 
      001F5C A6 04            [ 1] 6096 3$: ld a,#TK_INTGR
      001F5E 81               [ 4] 6097 	ret 
                                   6098 
                                   6099 ;------------------------------
                                   6100 ; BASIC: INVERT(expr)
                                   6101 ; 1's complement 
                                   6102 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001F5F                       6103 invert:
      001F5F CD 0F 12         [ 4] 6104 	call func_args
      001F62 A1 01            [ 1] 6105 	cp a,#1 
      001F64 27 03            [ 1] 6106 	jreq 1$
      001F66 CC 07 62         [ 2] 6107 	jp syntax_error
      001F69 85               [ 2] 6108 1$: popw x  
      001F6A 53               [ 2] 6109 	cplw x 
      001F6B A6 04            [ 1] 6110 	ld a,#TK_INTGR 
      001F6D 81               [ 4] 6111 	ret 
                                   6112 
                                   6113 ;------------------------------
                                   6114 ; BASIC: DO 
                                   6115 ; initiate a DO ... UNTIL loop 
                                   6116 ;------------------------------
                           000003  6117 	DOLP_ADR=3 
                           000005  6118 	DOLP_INW=5
                           000004  6119 	VSIZE=4 
      001F6E                       6120 do_loop:
      001F6E 85               [ 2] 6121 	popw x 
      001F6F                       6122 	_vars VSIZE 
      001F6F 52 04            [ 2]    1     sub sp,#VSIZE 
      001F71 89               [ 2] 6123 	pushw x 
      001F72 90 CE 00 04      [ 2] 6124 	ldw y,basicptr 
      001F76 17 03            [ 2] 6125 	ldw (DOLP_ADR,sp),y
      001F78 90 CE 00 00      [ 2] 6126 	ldw y,in.w 
      001F7C 17 05            [ 2] 6127 	ldw (DOLP_INW,sp),y
      001F7E 72 5C 00 22      [ 1] 6128 	inc loop_depth 
      001F82 81               [ 4] 6129 	ret 
                                   6130 
                                   6131 ;--------------------------------
                                   6132 ; BASIC: UNTIL expr 
                                   6133 ; loop if exprssion is false 
                                   6134 ; else terminate loop
                                   6135 ;--------------------------------
      001F83                       6136 until: 
      001F83 72 5D 00 22      [ 1] 6137 	tnz loop_depth 
      001F87 26 03            [ 1] 6138 	jrne 1$ 
      001F89 CC 07 62         [ 2] 6139 	jp syntax_error 
      001F8C                       6140 1$: 
      001F8C CD 10 3B         [ 4] 6141 	call relation 
      001F8F A1 04            [ 1] 6142 	cp a,#TK_INTGR
      001F91 27 03            [ 1] 6143 	jreq 2$
      001F93 CC 07 62         [ 2] 6144 	jp syntax_error
      001F96                       6145 2$: 
      001F96 5D               [ 2] 6146 	tnzw x 
      001F97 26 10            [ 1] 6147 	jrne 9$
      001F99 1E 03            [ 2] 6148 	ldw x,(DOLP_ADR,sp)
      001F9B CF 00 04         [ 2] 6149 	ldw basicptr,x 
      001F9E E6 02            [ 1] 6150 	ld a,(2,x)
      001FA0 C7 00 03         [ 1] 6151 	ld count,a 
      001FA3 1E 05            [ 2] 6152 	ldw x,(DOLP_INW,sp)
      001FA5 CF 00 00         [ 2] 6153 	ldw in.w,x 
      001FA8 81               [ 4] 6154 	ret 
      001FA9                       6155 9$:	; remove loop data from stack  
      001FA9 85               [ 2] 6156 	popw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001FAA                       6157 	_drop VSIZE
      001FAA 5B 04            [ 2]    1     addw sp,#VSIZE 
      001FAC 72 5A 00 22      [ 1] 6158 	dec loop_depth 
      001FB0 FC               [ 2] 6159 	jp (x)
                                   6160 
                                   6161 ;--------------------------
                                   6162 ; BASIC: PRTA...PRTI  
                                   6163 ;  return constant value 
                                   6164 ;  PORT  offset in GPIO
                                   6165 ;  array
                                   6166 ;---------------------------
      001FB1                       6167 const_porta:
      001FB1 AE 00 00         [ 2] 6168 	ldw x,#0
      001FB4 A6 04            [ 1] 6169 	ld a,#TK_INTGR 
      001FB6 81               [ 4] 6170 	ret 
      001FB7                       6171 const_portb:
      001FB7 AE 00 01         [ 2] 6172 	ldw x,#1
      001FBA A6 04            [ 1] 6173 	ld a,#TK_INTGR 
      001FBC 81               [ 4] 6174 	ret 
      001FBD                       6175 const_portc:
      001FBD AE 00 02         [ 2] 6176 	ldw x,#2
      001FC0 A6 04            [ 1] 6177 	ld a,#TK_INTGR 
      001FC2 81               [ 4] 6178 	ret 
      001FC3                       6179 const_portd:
      001FC3 AE 00 03         [ 2] 6180 	ldw x,#3
      001FC6 A6 04            [ 1] 6181 	ld a,#TK_INTGR 
      001FC8 81               [ 4] 6182 	ret 
      001FC9                       6183 const_porte:
      001FC9 AE 00 04         [ 2] 6184 	ldw x,#4
      001FCC A6 04            [ 1] 6185 	ld a,#TK_INTGR 
      001FCE 81               [ 4] 6186 	ret 
      001FCF                       6187 const_portf:
      001FCF AE 00 05         [ 2] 6188 	ldw x,#5
      001FD2 A6 04            [ 1] 6189 	ld a,#TK_INTGR 
      001FD4 81               [ 4] 6190 	ret 
      001FD5                       6191 const_portg:
      001FD5 AE 00 06         [ 2] 6192 	ldw x,#6
      001FD8 A6 04            [ 1] 6193 	ld a,#TK_INTGR 
      001FDA 81               [ 4] 6194 	ret 
      001FDB                       6195 const_porth:
      001FDB AE 00 07         [ 2] 6196 	ldw x,#7
      001FDE A6 04            [ 1] 6197 	ld a,#TK_INTGR 
      001FE0 81               [ 4] 6198 	ret 
      001FE1                       6199 const_porti:
      001FE1 AE 00 08         [ 2] 6200 	ldw x,#8
      001FE4 A6 04            [ 1] 6201 	ld a,#TK_INTGR 
      001FE6 81               [ 4] 6202 	ret 
                                   6203 
                                   6204 ;-------------------------------
                                   6205 ; following return constant 
                                   6206 ; related to GPIO register offset 
                                   6207 ;---------------------------------
      001FE7                       6208 const_odr:
      001FE7 A6 04            [ 1] 6209 	ld a,#TK_INTGR 
      001FE9 AE 00 00         [ 2] 6210 	ldw x,#GPIO_ODR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001FEC 81               [ 4] 6211 	ret 
      001FED                       6212 const_idr:
      001FED A6 04            [ 1] 6213 	ld a,#TK_INTGR 
      001FEF AE 00 01         [ 2] 6214 	ldw x,#GPIO_IDR
      001FF2 81               [ 4] 6215 	ret 
      001FF3                       6216 const_ddr:
      001FF3 A6 04            [ 1] 6217 	ld a,#TK_INTGR 
      001FF5 AE 00 02         [ 2] 6218 	ldw x,#GPIO_DDR
      001FF8 81               [ 4] 6219 	ret 
      001FF9                       6220 const_cr1:
      001FF9 A6 04            [ 1] 6221 	ld a,#TK_INTGR 
      001FFB AE 00 03         [ 2] 6222 	ldw x,#GPIO_CR1
      001FFE 81               [ 4] 6223 	ret 
      001FFF                       6224 const_cr2:
      001FFF A6 04            [ 1] 6225 	ld a,#TK_INTGR 
      002001 AE 00 04         [ 2] 6226 	ldw x,#GPIO_CR2
      002004 81               [ 4] 6227 	ret 
                                   6228 ;-------------------------
                                   6229 ;  constant for port mode
                                   6230 ;  used by PMODE 
                                   6231 ;  input or output
                                   6232 ;------------------------
      002005                       6233 const_output:
      002005 A6 04            [ 1] 6234 	ld a,#TK_INTGR 
      002007 AE 00 01         [ 2] 6235 	ldw x,#OUTP
      00200A 81               [ 4] 6236 	ret 
      00200B                       6237 const_input:
      00200B A6 04            [ 1] 6238 	ld a,#TK_INTGR 
      00200D AE 00 00         [ 2] 6239 	ldw x,#INP 
      002010 81               [ 4] 6240 	ret 
                                   6241 ;-----------------------
                                   6242 ; memory area constants
                                   6243 ;-----------------------
      002011                       6244 const_eeprom_base:
      002011 A6 04            [ 1] 6245 	ld a,#TK_INTGR 
      002013 AE 40 00         [ 2] 6246 	ldw x,#EEPROM_BASE 
      002016 81               [ 4] 6247 	ret 
                                   6248 
                                   6249 ;---------------------------
                                   6250 ; BASIC: DATA 
                                   6251 ; when the interpreter find 
                                   6252 ; a DATA line it skip it.
                                   6253 ;---------------------------
      002017                       6254 data:
      002017 55 00 03 00 01   [ 1] 6255 	mov in,count 
      00201C 81               [ 4] 6256 	ret 
                                   6257 
                                   6258 ;---------------------------
                                   6259 ; BASIC: DATLN  *expr*
                                   6260 ; set DATA pointer at line# 
                                   6261 ; specified by *expr* 
                                   6262 ;---------------------------
      00201D                       6263 data_line:
      00201D CD 0F F7         [ 4] 6264 	call expression
      002020 A1 04            [ 1] 6265 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      002022 27 03            [ 1] 6266 	jreq 1$
      002024 CC 07 62         [ 2] 6267 	jp syntax_error 
      002027 CD 02 79         [ 4] 6268 1$: call search_lineno
      00202A 5D               [ 2] 6269 	tnzw x 
      00202B 26 05            [ 1] 6270 	jrne 3$
      00202D A6 05            [ 1] 6271 2$:	ld a,#ERR_NO_LINE 
      00202F CC 07 64         [ 2] 6272 	jp tb_error
      002032                       6273 3$: ; check if valid data line 
      002032 90 93            [ 1] 6274     ldw y,x 
      002034 EE 04            [ 2] 6275 	ldw x,(4,x)
      002036 A3 20 17         [ 2] 6276 	cpw x,#data 
      002039 26 F2            [ 1] 6277 	jrne 2$ 
      00203B 90 CF 00 06      [ 2] 6278 	ldw data_ptr,y
      00203F 90 E6 02         [ 1] 6279 	ld a,(2,y)
      002042 C7 00 09         [ 1] 6280 	ld data_len,a 
      002045 35 06 00 08      [ 1] 6281 	mov data_ofs,#FIRST_DATA_ITEM 
      002049 81               [ 4] 6282 	ret
                                   6283 
                                   6284 ;---------------------------------
                                   6285 ; BASIC: RESTORE 
                                   6286 ; set data_ptr to first data line
                                   6287 ; if not DATA found pointer set to
                                   6288 ; zero 
                                   6289 ;---------------------------------
      00204A                       6290 restore:
      00204A 72 5F 00 06      [ 1] 6291 	clr data_ptr 
      00204E 72 5F 00 07      [ 1] 6292 	clr data_ptr+1
      002052 72 5F 00 08      [ 1] 6293 	clr data_ofs 
      002056 72 5F 00 09      [ 1] 6294 	clr data_len
      00205A CE 00 1E         [ 2] 6295 	ldw x,txtbgn
      00205D                       6296 data_search_loop: 	
      00205D C3 00 20         [ 2] 6297 	cpw x,txtend
      002060 24 17            [ 1] 6298 	jruge 9$
      002062 90 93            [ 1] 6299 	ldw y,x 
      002064 EE 04            [ 2] 6300 	ldw x,(4,x)
      002066 A3 20 17         [ 2] 6301 	cpw x,#data 
      002069 26 1A            [ 1] 6302 	jrne try_next_line 
      00206B 90 CF 00 06      [ 2] 6303 	ldw data_ptr,y 
      00206F 90 E6 02         [ 1] 6304 	ld a,(2,y)
      002072 C7 00 09         [ 1] 6305 	ld data_len,a 
      002075 35 06 00 08      [ 1] 6306 	mov data_ofs,#FIRST_DATA_ITEM
      002079 72 5D 00 09      [ 1] 6307 9$:	tnz data_len 
      00207D 26 05            [ 1] 6308     jrne 10$
      00207F A6 0C            [ 1] 6309 	ld a,#ERR_NO_DATA 
      002081 CC 07 64         [ 2] 6310 	jp tb_error 
      002084 81               [ 4] 6311 10$:ret
      002085                       6312 try_next_line:
      002085 93               [ 1] 6313 	ldw x,y 
      002086 E6 02            [ 1] 6314 	ld a,(2,x)
      002088 C7 00 0D         [ 1] 6315 	ld acc8,a 
      00208B 72 5F 00 0C      [ 1] 6316 	clr acc16 
      00208F 72 BB 00 0C      [ 2] 6317 	addw x,acc16 
      002093 20 C8            [ 2] 6318 	jra data_search_loop
                                   6319 
                                   6320 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                   6321 ;---------------------------------
                                   6322 ; BASIC: READ 
                                   6323 ; return next data item | 0 
                                   6324 ;---------------------------------
                           000001  6325 	CTX_BPTR=1 
                           000003  6326 	CTX_IN=3 
                           000004  6327 	CTX_COUNT=4 
                           000005  6328 	XSAVE=5
                           000006  6329 	VSIZE=6
      002095                       6330 read:
      002095                       6331 	_vars  VSIZE 
      002095 52 06            [ 2]    1     sub sp,#VSIZE 
      002097                       6332 read01:	
      002097 C6 00 08         [ 1] 6333 	ld a,data_ofs
      00209A C1 00 09         [ 1] 6334 	cp a,data_len 
      00209D 27 37            [ 1] 6335 	jreq 2$ ; end of line  
      00209F CD 14 41         [ 4] 6336 	call save_context
      0020A2 CE 00 06         [ 2] 6337 	ldw x,data_ptr 
      0020A5 CF 00 04         [ 2] 6338 	ldw basicptr,x 
      0020A8 55 00 08 00 01   [ 1] 6339 	mov in,data_ofs 
      0020AD 55 00 09 00 03   [ 1] 6340 	mov count,data_len  
      0020B2 CD 0F F7         [ 4] 6341 	call expression 
      0020B5 A1 04            [ 1] 6342 	cp a,#TK_INTGR 
      0020B7 27 03            [ 1] 6343 	jreq 1$ 
      0020B9 CC 07 62         [ 2] 6344 	jp syntax_error 
      0020BC                       6345 1$:
      0020BC 1F 05            [ 2] 6346 	ldw (XSAVE,SP),x
      0020BE CD 08 21         [ 4] 6347 	call next_token ; skip comma
      0020C1 CE 00 04         [ 2] 6348 	ldw x,basicptr 
      0020C4 CF 00 06         [ 2] 6349 	ldw data_ptr,x 
      0020C7 55 00 01 00 08   [ 1] 6350 	mov data_ofs,in 
      0020CC CD 14 51         [ 4] 6351 	call rest_context
      0020CF 1E 05            [ 2] 6352 	ldw x,(XSAVE,sp)
      0020D1 A6 04            [ 1] 6353 	ld a,#TK_INTGR
      0020D3                       6354 	_drop VSIZE 
      0020D3 5B 06            [ 2]    1     addw sp,#VSIZE 
      0020D5 81               [ 4] 6355 	ret 
      0020D6                       6356 2$: ; end of line reached 
      0020D6 90 CE 00 06      [ 2] 6357 	ldw y, data_ptr 
      0020DA 72 5F 00 06      [ 1] 6358 	clr data_ptr
      0020DE 72 5F 00 07      [ 1] 6359 	clr data_ptr+1   
      0020E2 72 5F 00 08      [ 1] 6360 	clr data_ofs 
      0020E6 72 5F 00 09      [ 1] 6361 	clr data_len 
      0020EA CD 20 85         [ 4] 6362 	call try_next_line 
      0020ED 20 A8            [ 2] 6363 	jra read01
                                   6364 
                                   6365 
                                   6366 ;---------------------------------
                                   6367 ; BASIC: SPIEN clkdiv, 0|1  
                                   6368 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   6369 ; if clkdiv==-1 disable SPI
                                   6370 ; 0|1 -> disable|enable  
                                   6371 ;--------------------------------- 
                           000005  6372 SPI_CS_BIT=5
      0020EF                       6373 spi_enable:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0020EF CD 0E EB         [ 4] 6374 	call arg_list 
      0020F2 A1 02            [ 1] 6375 	cp a,#2
      0020F4 27 03            [ 1] 6376 	jreq 1$
      0020F6 CC 07 62         [ 2] 6377 	jp syntax_error 
      0020F9                       6378 1$: 
      0020F9 72 12 50 C7      [ 1] 6379 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      0020FD 85               [ 2] 6380 	popw x  
      0020FE 27 21            [ 1] 6381 	jreq spi_disable 
      002100 85               [ 2] 6382 	popw x 
      002101 A6 08            [ 1] 6383 	ld a,#(1<<SPI_CR1_BR)
      002103 42               [ 4] 6384 	mul x,a 
      002104 9F               [ 1] 6385 	ld a,xl 
      002105 C7 52 00         [ 1] 6386 	ld SPI_CR1,a 
                                   6387 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002108 72 1A 50 14      [ 1] 6388 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      00210C 72 1A 50 16      [ 1] 6389 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   6390 ; configure SPI as master mode 0.	
      002110 72 14 52 00      [ 1] 6391 	bset SPI_CR1,#SPI_CR1_MSTR
                                   6392 ; ~CS line controlled by sofware 	
      002114 72 12 52 01      [ 1] 6393 	bset SPI_CR2,#SPI_CR2_SSM 
      002118 72 10 52 01      [ 1] 6394     bset SPI_CR2,#SPI_CR2_SSI 
                                   6395 ; enable SPI
      00211C 72 1C 52 00      [ 1] 6396 	bset SPI_CR1,#SPI_CR1_SPE 	
      002120 81               [ 4] 6397 	ret 
      002121                       6398 spi_disable:
      002121                       6399 	_drop #2; throw first argument.
      002121 5B 02            [ 2]    1     addw sp,##2 
                                   6400 ; wait spi idle 
      002123 A6 82            [ 1] 6401 1$:	ld a,#0x82 
      002125 C4 52 03         [ 1] 6402 	and a,SPI_SR
      002128 A1 02            [ 1] 6403 	cp a,#2 
      00212A 26 F7            [ 1] 6404 	jrne 1$
      00212C 72 1D 52 00      [ 1] 6405 	bres SPI_CR1,#SPI_CR1_SPE
      002130 72 13 50 C7      [ 1] 6406 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002134 72 1B 50 16      [ 1] 6407 	bres PE_DDR,#SPI_CS_BIT 
      002138 81               [ 4] 6408 	ret 
                                   6409 
      002139                       6410 spi_clear_error:
      002139 A6 78            [ 1] 6411 	ld a,#0x78 
      00213B C5 52 03         [ 1] 6412 	bcp a,SPI_SR 
      00213E 27 04            [ 1] 6413 	jreq 1$
      002140 72 5F 52 03      [ 1] 6414 	clr SPI_SR 
      002144 81               [ 4] 6415 1$: ret 
                                   6416 
      002145                       6417 spi_send_byte:
      002145 88               [ 1] 6418 	push a 
      002146 CD 21 39         [ 4] 6419 	call spi_clear_error
      002149 84               [ 1] 6420 	pop a 
      00214A 72 03 52 03 FB   [ 2] 6421 	btjf SPI_SR,#SPI_SR_TXE,.
      00214F C7 52 04         [ 1] 6422 	ld SPI_DR,a
      002152 72 01 52 03 FB   [ 2] 6423 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002157 C6 52 04         [ 1] 6424 	ld a,SPI_DR 
      00215A 81               [ 4] 6425 	ret 
                                   6426 
      00215B                       6427 spi_rcv_byte:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      00215B A6 FF            [ 1] 6428 	ld a,#255
      00215D 72 01 52 03 E3   [ 2] 6429 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002162 C6 52 04         [ 1] 6430 	ld a,SPI_DR 
      002165 81               [ 4] 6431 	ret
                                   6432 
                                   6433 ;------------------------------
                                   6434 ; BASIC: SPIWR byte [,byte]
                                   6435 ; write 1 or more byte
                                   6436 ;------------------------------
      002166                       6437 spi_write:
      002166 CD 0F F7         [ 4] 6438 	call expression
      002169 A1 04            [ 1] 6439 	cp a,#TK_INTGR 
      00216B 27 03            [ 1] 6440 	jreq 1$
      00216D CC 07 62         [ 2] 6441 	jp syntax_error 
      002170                       6442 1$:	
      002170 9F               [ 1] 6443 	ld a,xl 
      002171 CD 21 45         [ 4] 6444 	call spi_send_byte 
      002174 CD 08 21         [ 4] 6445 	call next_token 
      002177 A1 0D            [ 1] 6446 	cp a,#TK_COMMA 
      002179 26 02            [ 1] 6447 	jrne 2$ 
      00217B 20 E9            [ 2] 6448 	jra spi_write 
      00217D 4D               [ 1] 6449 2$:	tnz a 
      00217E 27 05            [ 1] 6450 	jreq 3$
      002180                       6451 	_unget_token  
      002180 55 00 02 00 01   [ 1]    1     mov in,in.saved
      002185 81               [ 4] 6452 3$:	ret 
                                   6453 
                                   6454 
                                   6455 ;-------------------------------
                                   6456 ; BASIC: SPIRD 	
                                   6457 ; read one byte from SPI 
                                   6458 ;-------------------------------
      002186                       6459 spi_read:
      002186 CD 21 5B         [ 4] 6460 	call spi_rcv_byte 
      002189 5F               [ 1] 6461 	clrw x 
      00218A 97               [ 1] 6462 	ld xl,a 
      00218B A6 04            [ 1] 6463 	ld a,#TK_INTGR 
      00218D 81               [ 4] 6464 	ret 
                                   6465 
                                   6466 ;------------------------------
                                   6467 ; BASIC: SPISEL 0|1 
                                   6468 ; set state of ~CS line
                                   6469 ; 0|1 deselect|select  
                                   6470 ;------------------------------
      00218E                       6471 spi_select:
      00218E CD 08 21         [ 4] 6472 	call next_token 
      002191 A1 04            [ 1] 6473 	cp a,#TK_INTGR 
      002193 27 03            [ 1] 6474 	jreq 1$
      002195 CC 07 62         [ 2] 6475 	jp syntax_error 
      002198 5D               [ 2] 6476 1$: tnzw x  
      002199 27 05            [ 1] 6477 	jreq cs_high 
      00219B 72 1B 50 14      [ 1] 6478 	bres PE_ODR,#SPI_CS_BIT
      00219F 81               [ 4] 6479 	ret 
      0021A0                       6480 cs_high: 
      0021A0 72 1A 50 14      [ 1] 6481 	bset PE_ODR,#SPI_CS_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0021A4 81               [ 4] 6482 	ret 
                                   6483 
                                   6484 
                                   6485 ;------------------------------
                                   6486 ; BASIC: FILERX
                                   6487 ; Use to receive a BASIC program
                                   6488 ; from the PC using XMODEM 
                                   6489 ; protocol. The file is store in
                                   6490 ; Each line received is compiled
                                   6491 ; then stored in RAM. When reception 
                                   6492 ; is completed with success  the 
                                   6493 ; program is ready to be executed 
                                   6494 ; or save as local file.
                                   6495 ;--------------------------------
      0021A5                       6496 file_receive:
      0021A5 72 01 00 25 05   [ 2] 6497 	btjf flags,#FRUN,1$
      0021AA A6 07            [ 1] 6498 	ld a,#ERR_CMD_ONLY
      0021AC CC 07 64         [ 2] 6499 	jp tb_error 
      0021AF                       6500 1$:	
      0021AF CD 05 FF         [ 4] 6501 	call clear_basic
      0021B2 CE 00 1E         [ 2] 6502 	ldw x, txtbgn
      0021B5 CD 00 00         [ 4] 6503 	call xreceive 
      0021B8 72 BB 00 1E      [ 2] 6504 	addw x,txtbgn 
      0021BC CF 00 20         [ 2] 6505 	ldw txtend,x 
      0021BF CD 08 BA         [ 4] 6506 	call print_int 
      0021C2 AE 21 C9         [ 2] 6507 	ldw x,#fsize_msg 
      0021C5 CD 01 D7         [ 4] 6508 	call puts 
      0021C8 81               [ 4] 6509 	ret 
      0021C9 20 62 79 74 65 73 20  6510 fsize_msg: .asciz " bytes received\n"
             72 65 63 65 69 76 65
             64 0A 00
                                   6511 
                                   6512 ;------------------------------
                                   6513 ; BASIC: FILETX "file_name" 
                                   6514 ; Transmit the program in RAM 
                                   6515 ; To the PC using XMODEM protocol.
                                   6516 ; The file transmitted as source 
                                   6517 ; file not tokenized. 
                                   6518 ;-------------------------------
      0021DA                       6519 file_transmit:
                                   6520 
      0021DA 81               [ 4] 6521 	ret 
                                   6522 
                                   6523 
                                   6524 ;------------------------------
                                   6525 ;      dictionary 
                                   6526 ; format:
                                   6527 ;   link:   2 bytes 
                                   6528 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6529 ;   cmd_name: 16 byte max 
                                   6530 ;   code_address: 2 bytes 
                                   6531 ;------------------------------
                                   6532 	.macro _dict_entry len,name,cmd 
                                   6533 	.word LINK 
                                   6534 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                   6535 name:
                                   6536 	.byte len 	
                                   6537 	.ascii "name"
                                   6538 	.word cmd 
                                   6539 	.endm 
                                   6540 
                           000000  6541 	LINK=0
                                   6542 ; respect alphabetic order for BASIC names from Z-A
                                   6543 ; this sort order is for a cleaner WORDS cmd output. 	
      0021DB                       6544 kword_end:
      0021DB                       6545 	_dict_entry,5+F_IFUNC,XPEEK,xpeek 
      0021DB 00 00                    1 	.word LINK 
                           0021DD     2 	LINK=.
      0021DD                          3 XPEEK:
      0021DD 45                       4 	.byte 5+F_IFUNC 	
      0021DE 58 50 45 45 4B           5 	.ascii "XPEEK"
      0021E3 15 68                    6 	.word xpeek 
      0021E5                       6546 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      0021E5 21 DD                    1 	.word LINK 
                           0021E7     2 	LINK=.
      0021E7                          3 XOR:
      0021E7 43                       4 	.byte 3+F_IFUNC 	
      0021E8 58 4F 52                 5 	.ascii "XOR"
      0021EB 1D 32                    6 	.word bit_xor 
      0021ED                       6547 	_dict_entry,5,WRITE,write  
      0021ED 21 E7                    1 	.word LINK 
                           0021EF     2 	LINK=.
      0021EF                          3 WRITE:
      0021EF 05                       4 	.byte 5 	
      0021F0 57 52 49 54 45           5 	.ascii "WRITE"
      0021F5 1B 58                    6 	.word write 
      0021F7                       6548 	_dict_entry,5,WORDS,words 
      0021F7 21 EF                    1 	.word LINK 
                           0021F9     2 	LINK=.
      0021F9                          3 WORDS:
      0021F9 05                       4 	.byte 5 	
      0021FA 57 4F 52 44 53           5 	.ascii "WORDS"
      0021FF 1E 60                    6 	.word words 
      002201                       6549 	_dict_entry 4,WAIT,wait 
      002201 21 F9                    1 	.word LINK 
                           002203     2 	LINK=.
      002203                          3 WAIT:
      002203 04                       4 	.byte 4 	
      002204 57 41 49 54              5 	.ascii "WAIT"
      002208 14 CB                    6 	.word wait 
      00220A                       6550 	_dict_entry,3+F_IFUNC,USR,usr
      00220A 22 03                    1 	.word LINK 
                           00220C     2 	LINK=.
      00220C                          3 USR:
      00220C 43                       4 	.byte 3+F_IFUNC 	
      00220D 55 53 52                 5 	.ascii "USR"
      002210 1C 04                    6 	.word usr 
      002212                       6551 	_dict_entry,5,UNTIL,until 
      002212 22 0C                    1 	.word LINK 
                           002214     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002214                          3 UNTIL:
      002214 05                       4 	.byte 5 	
      002215 55 4E 54 49 4C           5 	.ascii "UNTIL"
      00221A 1F 83                    6 	.word until 
      00221C                       6552 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      00221C 22 14                    1 	.word LINK 
                           00221E     2 	LINK=.
      00221E                          3 UFLASH:
      00221E 46                       4 	.byte 6+F_IFUNC 	
      00221F 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002225 1B FE                    6 	.word uflash 
      002227                       6553 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      002227 22 1E                    1 	.word LINK 
                           002229     2 	LINK=.
      002229                          3 UBOUND:
      002229 46                       4 	.byte 6+F_IFUNC 	
      00222A 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002230 11 48                    6 	.word ubound 
      002232                       6554 	_dict_entry,4,TONE,tone  
      002232 22 29                    1 	.word LINK 
                           002234     2 	LINK=.
      002234                          3 TONE:
      002234 04                       4 	.byte 4 	
      002235 54 4F 4E 45              5 	.ascii "TONE"
      002239 17 26                    6 	.word tone 
      00223B                       6555 	_dict_entry,2,TO,to
      00223B 22 34                    1 	.word LINK 
                           00223D     2 	LINK=.
      00223D                          3 TO:
      00223D 02                       4 	.byte 2 	
      00223E 54 4F                    5 	.ascii "TO"
      002240 15 C1                    6 	.word to 
      002242                       6556 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      002242 22 3D                    1 	.word LINK 
                           002244     2 	LINK=.
      002244                          3 TIMEOUT:
      002244 47                       4 	.byte 7+F_IFUNC 	
      002245 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      00224C 1E D5                    6 	.word timeout 
      00224E                       6557 	_dict_entry,5,TIMER,set_timer
      00224E 22 44                    1 	.word LINK 
                           002250     2 	LINK=.
      002250                          3 TIMER:
      002250 05                       4 	.byte 5 	
      002251 54 49 4D 45 52           5 	.ascii "TIMER"
      002256 1E C6                    6 	.word set_timer 
      002258                       6558 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      002258 22 50                    1 	.word LINK 
                           00225A     2 	LINK=.
      00225A                          3 TICKS:
      00225A 45                       4 	.byte 5+F_IFUNC 	
      00225B 54 49 43 4B 53           5 	.ascii "TICKS"
      002260 1C E8                    6 	.word get_ticks 
      002262                       6559 	_dict_entry,4,STOP,stop 
      002262 22 5A                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                           002264     2 	LINK=.
      002264                          3 STOP:
      002264 04                       4 	.byte 4 	
      002265 53 54 4F 50              5 	.ascii "STOP"
      002269 18 4A                    6 	.word stop 
      00226B                       6560 	_dict_entry,4,STEP,step 
      00226B 22 64                    1 	.word LINK 
                           00226D     2 	LINK=.
      00226D                          3 STEP:
      00226D 04                       4 	.byte 4 	
      00226E 53 54 45 50              5 	.ascii "STEP"
      002272 15 F1                    6 	.word step 
      002274                       6561 	_dict_entry,5,SPIWR,spi_write
      002274 22 6D                    1 	.word LINK 
                           002276     2 	LINK=.
      002276                          3 SPIWR:
      002276 05                       4 	.byte 5 	
      002277 53 50 49 57 52           5 	.ascii "SPIWR"
      00227C 21 66                    6 	.word spi_write 
      00227E                       6562 	_dict_entry,6,SPISEL,spi_select
      00227E 22 76                    1 	.word LINK 
                           002280     2 	LINK=.
      002280                          3 SPISEL:
      002280 06                       4 	.byte 6 	
      002281 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      002287 21 8E                    6 	.word spi_select 
      002289                       6563 	_dict_entry,5,SPIEN,spi_enable 
      002289 22 80                    1 	.word LINK 
                           00228B     2 	LINK=.
      00228B                          3 SPIEN:
      00228B 05                       4 	.byte 5 	
      00228C 53 50 49 45 4E           5 	.ascii "SPIEN"
      002291 20 EF                    6 	.word spi_enable 
      002293                       6564 	_dict_entry,5+F_IFUNC,SPIRD, spi_read 
      002293 22 8B                    1 	.word LINK 
                           002295     2 	LINK=.
      002295                          3 SPIRD:
      002295 45                       4 	.byte 5+F_IFUNC 	
      002296 53 50 49 52 44           5 	.ascii "SPIRD"
      00229B 21 86                    6 	.word spi_read 
      00229D                       6565 	_dict_entry,5,SLEEP,sleep 
      00229D 22 95                    1 	.word LINK 
                           00229F     2 	LINK=.
      00229F                          3 SLEEP:
      00229F 05                       4 	.byte 5 	
      0022A0 53 4C 45 45 50           5 	.ascii "SLEEP"
      0022A5 1C 81                    6 	.word sleep 
      0022A7                       6566 	_dict_entry,4+F_IFUNC,SIZE,size
      0022A7 22 9F                    1 	.word LINK 
                           0022A9     2 	LINK=.
      0022A9                          3 SIZE:
      0022A9 44                       4 	.byte 4+F_IFUNC 	
      0022AA 53 49 5A 45              5 	.ascii "SIZE"
      0022AE 11 3E                    6 	.word size 
      0022B0                       6567     _dict_entry,4,SHOW,show 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0022B0 22 A9                    1 	.word LINK 
                           0022B2     2 	LINK=.
      0022B2                          3 SHOW:
      0022B2 04                       4 	.byte 4 	
      0022B3 53 48 4F 57              5 	.ascii "SHOW"
      0022B7 10 92                    6 	.word show 
      0022B9                       6568 	_dict_entry,4,SAVE,save
      0022B9 22 B2                    1 	.word LINK 
                           0022BB     2 	LINK=.
      0022BB                          3 SAVE:
      0022BB 04                       4 	.byte 4 	
      0022BC 53 41 56 45              5 	.ascii "SAVE"
      0022C0 19 58                    6 	.word save 
      0022C2                       6569 	_dict_entry 3,RUN,run
      0022C2 22 BB                    1 	.word LINK 
                           0022C4     2 	LINK=.
      0022C4                          3 RUN:
      0022C4 03                       4 	.byte 3 	
      0022C5 52 55 4E                 5 	.ascii "RUN"
      0022C8 16 D1                    6 	.word run 
      0022CA                       6570 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0022CA 22 C4                    1 	.word LINK 
                           0022CC     2 	LINK=.
      0022CC                          3 RSHIFT:
      0022CC 46                       4 	.byte 6+F_IFUNC 	
      0022CD 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0022D3 1D 63                    6 	.word rshift 
      0022D5                       6571 	_dict_entry,3+F_IFUNC,RND,random 
      0022D5 22 CC                    1 	.word LINK 
                           0022D7     2 	LINK=.
      0022D7                          3 RND:
      0022D7 43                       4 	.byte 3+F_IFUNC 	
      0022D8 52 4E 44                 5 	.ascii "RND"
      0022DB 1D F9                    6 	.word random 
      0022DD                       6572 	_dict_entry,6,RETURN,return 
      0022DD 22 D7                    1 	.word LINK 
                           0022DF     2 	LINK=.
      0022DF                          3 RETURN:
      0022DF 06                       4 	.byte 6 	
      0022E0 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0022E6 16 B3                    6 	.word return 
      0022E8                       6573 	_dict_entry,7,RESTORE,restore 
      0022E8 22 DF                    1 	.word LINK 
                           0022EA     2 	LINK=.
      0022EA                          3 RESTORE:
      0022EA 07                       4 	.byte 7 	
      0022EB 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0022F2 20 4A                    6 	.word restore 
      0022F4                       6574 	_dict_entry 6,REMARK,remark 
      0022F4 22 EA                    1 	.word LINK 
                           0022F6     2 	LINK=.
      0022F6                          3 REMARK:
      0022F6 06                       4 	.byte 6 	
      0022F7 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      0022FD 14 C5                    6 	.word remark 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0022FF                       6575 	_dict_entry,6,REBOOT,cold_start
      0022FF 22 F6                    1 	.word LINK 
                           002301     2 	LINK=.
      002301                          3 REBOOT:
      002301 06                       4 	.byte 6 	
      002302 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      002308 04 ED                    6 	.word cold_start 
      00230A                       6576 	_dict_entry,4+F_IFUNC,READ,read  
      00230A 23 01                    1 	.word LINK 
                           00230C     2 	LINK=.
      00230C                          3 READ:
      00230C 44                       4 	.byte 4+F_IFUNC 	
      00230D 52 45 41 44              5 	.ascii "READ"
      002311 20 95                    6 	.word read 
      002313                       6577 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      002313 23 0C                    1 	.word LINK 
                           002315     2 	LINK=.
      002315                          3 QKEY:
      002315 44                       4 	.byte 4+F_IFUNC 	
      002316 51 4B 45 59              5 	.ascii "QKEY"
      00231A 1B C9                    6 	.word qkey 
      00231C                       6578 	_dict_entry,4+F_IFUNC,PRTI,const_porti 
      00231C 23 15                    1 	.word LINK 
                           00231E     2 	LINK=.
      00231E                          3 PRTI:
      00231E 44                       4 	.byte 4+F_IFUNC 	
      00231F 50 52 54 49              5 	.ascii "PRTI"
      002323 1F E1                    6 	.word const_porti 
      002325                       6579 	_dict_entry,4+F_IFUNC,PRTH,const_porth 
      002325 23 1E                    1 	.word LINK 
                           002327     2 	LINK=.
      002327                          3 PRTH:
      002327 44                       4 	.byte 4+F_IFUNC 	
      002328 50 52 54 48              5 	.ascii "PRTH"
      00232C 1F DB                    6 	.word const_porth 
      00232E                       6580 	_dict_entry,4+F_IFUNC,PRTG,const_portg 
      00232E 23 27                    1 	.word LINK 
                           002330     2 	LINK=.
      002330                          3 PRTG:
      002330 44                       4 	.byte 4+F_IFUNC 	
      002331 50 52 54 47              5 	.ascii "PRTG"
      002335 1F D5                    6 	.word const_portg 
      002337                       6581 	_dict_entry,4+F_IFUNC,PRTF,const_portf
      002337 23 30                    1 	.word LINK 
                           002339     2 	LINK=.
      002339                          3 PRTF:
      002339 44                       4 	.byte 4+F_IFUNC 	
      00233A 50 52 54 46              5 	.ascii "PRTF"
      00233E 1F CF                    6 	.word const_portf 
      002340                       6582 	_dict_entry,4+F_IFUNC,PRTE,const_porte
      002340 23 39                    1 	.word LINK 
                           002342     2 	LINK=.
      002342                          3 PRTE:
      002342 44                       4 	.byte 4+F_IFUNC 	
      002343 50 52 54 45              5 	.ascii "PRTE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      002347 1F C9                    6 	.word const_porte 
      002349                       6583 	_dict_entry,4+F_IFUNC,PRTD,const_portd
      002349 23 42                    1 	.word LINK 
                           00234B     2 	LINK=.
      00234B                          3 PRTD:
      00234B 44                       4 	.byte 4+F_IFUNC 	
      00234C 50 52 54 44              5 	.ascii "PRTD"
      002350 1F C3                    6 	.word const_portd 
      002352                       6584 	_dict_entry,4+F_IFUNC,PRTC,const_portc
      002352 23 4B                    1 	.word LINK 
                           002354     2 	LINK=.
      002354                          3 PRTC:
      002354 44                       4 	.byte 4+F_IFUNC 	
      002355 50 52 54 43              5 	.ascii "PRTC"
      002359 1F BD                    6 	.word const_portc 
      00235B                       6585 	_dict_entry,4+F_IFUNC,PRTB,const_portb
      00235B 23 54                    1 	.word LINK 
                           00235D     2 	LINK=.
      00235D                          3 PRTB:
      00235D 44                       4 	.byte 4+F_IFUNC 	
      00235E 50 52 54 42              5 	.ascii "PRTB"
      002362 1F B7                    6 	.word const_portb 
      002364                       6586 	_dict_entry,4+F_IFUNC,PRTA,const_porta 
      002364 23 5D                    1 	.word LINK 
                           002366     2 	LINK=.
      002366                          3 PRTA:
      002366 44                       4 	.byte 4+F_IFUNC 	
      002367 50 52 54 41              5 	.ascii "PRTA"
      00236B 1F B1                    6 	.word const_porta 
      00236D                       6587 	_dict_entry 5,PRINT,print 
      00236D 23 66                    1 	.word LINK 
                           00236F     2 	LINK=.
      00236F                          3 PRINT:
      00236F 05                       4 	.byte 5 	
      002370 50 52 49 4E 54           5 	.ascii "PRINT"
      002375 13 D5                    6 	.word print 
      002377                       6588 	_dict_entry,4+F_IFUNC,POUT,const_output
      002377 23 6F                    1 	.word LINK 
                           002379     2 	LINK=.
      002379                          3 POUT:
      002379 44                       4 	.byte 4+F_IFUNC 	
      00237A 50 4F 55 54              5 	.ascii "POUT"
      00237E 20 05                    6 	.word const_output 
      002380                       6589 	_dict_entry,4,POKE,poke 
      002380 23 79                    1 	.word LINK 
                           002382     2 	LINK=.
      002382                          3 POKE:
      002382 04                       4 	.byte 4 	
      002383 50 4F 4B 45              5 	.ascii "POKE"
      002387 15 48                    6 	.word poke 
      002389                       6590 	_dict_entry,4+F_IFUNC,PINP,const_input
      002389 23 82                    1 	.word LINK 
                           00238B     2 	LINK=.
      00238B                          3 PINP:
      00238B 44                       4 	.byte 4+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      00238C 50 49 4E 50              5 	.ascii "PINP"
      002390 20 0B                    6 	.word const_input 
      002392                       6591 	_dict_entry,4+F_IFUNC,PEEK,peek 
      002392 23 8B                    1 	.word LINK 
                           002394     2 	LINK=.
      002394                          3 PEEK:
      002394 44                       4 	.byte 4+F_IFUNC 	
      002395 50 45 45 4B              5 	.ascii "PEEK"
      002399 15 57                    6 	.word peek 
      00239B                       6592 	_dict_entry,5,PMODE,pin_mode 
      00239B 23 94                    1 	.word LINK 
                           00239D     2 	LINK=.
      00239D                          3 PMODE:
      00239D 05                       4 	.byte 5 	
      00239E 50 4D 4F 44 45           5 	.ascii "PMODE"
      0023A3 1D 88                    6 	.word pin_mode 
      0023A5                       6593 	_dict_entry,5,PAUSE,pause 
      0023A5 23 9D                    1 	.word LINK 
                           0023A7     2 	LINK=.
      0023A7                          3 PAUSE:
      0023A7 05                       4 	.byte 5 	
      0023A8 50 41 55 53 45           5 	.ascii "PAUSE"
      0023AD 1C 8C                    6 	.word pause 
      0023AF                       6594 	_dict_entry,2+F_IFUNC,OR,bit_or
      0023AF 23 A7                    1 	.word LINK 
                           0023B1     2 	LINK=.
      0023B1                          3 OR:
      0023B1 42                       4 	.byte 2+F_IFUNC 	
      0023B2 4F 52                    5 	.ascii "OR"
      0023B4 1D 1A                    6 	.word bit_or 
      0023B6                       6595 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0023B6 23 B1                    1 	.word LINK 
                           0023B8     2 	LINK=.
      0023B8                          3 ODR:
      0023B8 43                       4 	.byte 3+F_IFUNC 	
      0023B9 4F 44 52                 5 	.ascii "ODR"
      0023BC 1F E7                    6 	.word const_odr 
      0023BE                       6596 	_dict_entry,3+F_IFUNC,NOT,func_not 
      0023BE 23 B8                    1 	.word LINK 
                           0023C0     2 	LINK=.
      0023C0                          3 NOT:
      0023C0 43                       4 	.byte 3+F_IFUNC 	
      0023C1 4E 4F 54                 5 	.ascii "NOT"
      0023C4 1E E2                    6 	.word func_not 
      0023C6                       6597 	_dict_entry,3,NEW,new
      0023C6 23 C0                    1 	.word LINK 
                           0023C8     2 	LINK=.
      0023C8                          3 NEW:
      0023C8 03                       4 	.byte 3 	
      0023C9 4E 45 57                 5 	.ascii "NEW"
      0023CC 18 96                    6 	.word new 
      0023CE                       6598 	_dict_entry,4,NEXT,next 
      0023CE 23 C8                    1 	.word LINK 
                           0023D0     2 	LINK=.
      0023D0                          3 NEXT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0023D0 04                       4 	.byte 4 	
      0023D1 4E 45 58 54              5 	.ascii "NEXT"
      0023D5 16 18                    6 	.word next 
      0023D7                       6599 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0023D7 23 D0                    1 	.word LINK 
                           0023D9     2 	LINK=.
      0023D9                          3 LSHIFT:
      0023D9 46                       4 	.byte 6+F_IFUNC 	
      0023DA 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0023E0 1D 4A                    6 	.word lshift 
      0023E2                       6600 	_dict_entry,3+F_IFUNC,LOG,log2 
      0023E2 23 D9                    1 	.word LINK 
                           0023E4     2 	LINK=.
      0023E4                          3 LOG:
      0023E4 43                       4 	.byte 3+F_IFUNC 	
      0023E5 4C 4F 47                 5 	.ascii "LOG"
      0023E8 1F 2A                    6 	.word log2 
      0023EA                       6601 	_dict_entry,4,LOAD,load 
      0023EA 23 E4                    1 	.word LINK 
                           0023EC     2 	LINK=.
      0023EC                          3 LOAD:
      0023EC 04                       4 	.byte 4 	
      0023ED 4C 4F 41 44              5 	.ascii "LOAD"
      0023F1 1A 48                    6 	.word load 
      0023F3                       6602 	_dict_entry 4,LIST,list
      0023F3 23 EC                    1 	.word LINK 
                           0023F5     2 	LINK=.
      0023F5                          3 LIST:
      0023F5 04                       4 	.byte 4 	
      0023F6 4C 49 53 54              5 	.ascii "LIST"
      0023FA 11 8E                    6 	.word list 
      0023FC                       6603 	_dict_entry 3,LET,let 
      0023FC 23 F5                    1 	.word LINK 
                           0023FE     2 	LINK=.
      0023FE                          3 LET:
      0023FE 03                       4 	.byte 3 	
      0023FF 4C 45 54                 5 	.ascii "LET"
      002402 11 6A                    6 	.word let 
      002404                       6604 	_dict_entry,3+F_IFUNC,KEY,key 
      002404 23 FE                    1 	.word LINK 
                           002406     2 	LINK=.
      002406                          3 KEY:
      002406 43                       4 	.byte 3+F_IFUNC 	
      002407 4B 45 59                 5 	.ascii "KEY"
      00240A 1B C1                    6 	.word key 
      00240C                       6605 	_dict_entry,7,IWDGREF,refresh_iwdg
      00240C 24 06                    1 	.word LINK 
                           00240E     2 	LINK=.
      00240E                          3 IWDGREF:
      00240E 07                       4 	.byte 7 	
      00240F 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      002416 1F 25                    6 	.word refresh_iwdg 
      002418                       6606 	_dict_entry,6,IWDGEN,enable_iwdg
      002418 24 0E                    1 	.word LINK 
                           00241A     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      00241A                          3 IWDGEN:
      00241A 06                       4 	.byte 6 	
      00241B 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      002421 1E EF                    6 	.word enable_iwdg 
      002423                       6607 	_dict_entry,6+F_IFUNC,INVERT,invert 
      002423 24 1A                    1 	.word LINK 
                           002425     2 	LINK=.
      002425                          3 INVERT:
      002425 46                       4 	.byte 6+F_IFUNC 	
      002426 49 4E 56 45 52 54        5 	.ascii "INVERT"
      00242C 1F 5F                    6 	.word invert 
      00242E                       6608 	_dict_entry,5,INPUT,input_var  
      00242E 24 25                    1 	.word LINK 
                           002430     2 	LINK=.
      002430                          3 INPUT:
      002430 05                       4 	.byte 5 	
      002431 49 4E 50 55 54           5 	.ascii "INPUT"
      002436 14 61                    6 	.word input_var 
      002438                       6609 	_dict_entry,2,IF,if 
      002438 24 30                    1 	.word LINK 
                           00243A     2 	LINK=.
      00243A                          3 IF:
      00243A 02                       4 	.byte 2 	
      00243B 49 46                    5 	.ascii "IF"
      00243D 15 84                    6 	.word if 
      00243F                       6610 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      00243F 24 3A                    1 	.word LINK 
                           002441     2 	LINK=.
      002441                          3 IDR:
      002441 43                       4 	.byte 3+F_IFUNC 	
      002442 49 44 52                 5 	.ascii "IDR"
      002445 1F ED                    6 	.word const_idr 
      002447                       6611 	_dict_entry,3,HEX,hex_base
      002447 24 41                    1 	.word LINK 
                           002449     2 	LINK=.
      002449                          3 HEX:
      002449 03                       4 	.byte 3 	
      00244A 48 45 58                 5 	.ascii "HEX"
      00244D 11 34                    6 	.word hex_base 
      00244F                       6612 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      00244F 24 49                    1 	.word LINK 
                           002451     2 	LINK=.
      002451                          3 GPIO:
      002451 44                       4 	.byte 4+F_IFUNC 	
      002452 47 50 49 4F              5 	.ascii "GPIO"
      002456 1B D4                    6 	.word gpio 
      002458                       6613 	_dict_entry,4,GOTO,goto 
      002458 24 51                    1 	.word LINK 
                           00245A     2 	LINK=.
      00245A                          3 GOTO:
      00245A 04                       4 	.byte 4 	
      00245B 47 4F 54 4F              5 	.ascii "GOTO"
      00245F 16 78                    6 	.word goto 
      002461                       6614 	_dict_entry,5,GOSUB,gosub 
      002461 24 5A                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                           002463     2 	LINK=.
      002463                          3 GOSUB:
      002463 05                       4 	.byte 5 	
      002464 47 4F 53 55 42           5 	.ascii "GOSUB"
      002469 16 93                    6 	.word gosub 
      00246B                       6615 	_dict_entry,6,FORGET,forget 
      00246B 24 63                    1 	.word LINK 
                           00246D     2 	LINK=.
      00246D                          3 FORGET:
      00246D 06                       4 	.byte 6 	
      00246E 46 4F 52 47 45 54        5 	.ascii "FORGET"
      002474 1A 7D                    6 	.word forget 
      002476                       6616 	_dict_entry,3,FOR,for 
      002476 24 6D                    1 	.word LINK 
                           002478     2 	LINK=.
      002478                          3 FOR:
      002478 03                       4 	.byte 3 	
      002479 46 4F 52                 5 	.ascii "FOR"
      00247C 15 98                    6 	.word for 
      00247E                       6617 	_dict_entry,6,FILETX,file_transmit
      00247E 24 78                    1 	.word LINK 
                           002480     2 	LINK=.
      002480                          3 FILETX:
      002480 06                       4 	.byte 6 	
      002481 46 49 4C 45 54 58        5 	.ascii "FILETX"
      002487 21 DA                    6 	.word file_transmit 
      002489                       6618 	_dict_entry,6,FILERX,file_receive 
      002489 24 80                    1 	.word LINK 
                           00248B     2 	LINK=.
      00248B                          3 FILERX:
      00248B 06                       4 	.byte 6 	
      00248C 46 49 4C 45 52 58        5 	.ascii "FILERX"
      002492 21 A5                    6 	.word file_receive 
      002494                       6619 	_dict_entry,4,FCPU,fcpu 
      002494 24 8B                    1 	.word LINK 
                           002496     2 	LINK=.
      002496                          3 FCPU:
      002496 04                       4 	.byte 4 	
      002497 46 43 50 55              5 	.ascii "FCPU"
      00249B 1D 7C                    6 	.word fcpu 
      00249D                       6620 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      00249D 24 96                    1 	.word LINK 
                           00249F     2 	LINK=.
      00249F                          3 EEPROM:
      00249F 46                       4 	.byte 6+F_IFUNC 	
      0024A0 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0024A6 20 11                    6 	.word const_eeprom_base 
      0024A8                       6621 	_dict_entry,3,END,cmd_end  
      0024A8 24 9F                    1 	.word LINK 
                           0024AA     2 	LINK=.
      0024AA                          3 END:
      0024AA 03                       4 	.byte 3 	
      0024AB 45 4E 44                 5 	.ascii "END"
      0024AE 17 23                    6 	.word cmd_end 
      0024B0                       6622 	_dict_entry,6+F_CMD,DWRITE,digital_write
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      0024B0 24 AA                    1 	.word LINK 
                           0024B2     2 	LINK=.
      0024B2                          3 DWRITE:
      0024B2 06                       4 	.byte 6+F_CMD 	
      0024B3 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0024B9 18 0F                    6 	.word digital_write 
      0024BB                       6623 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0024BB 24 B2                    1 	.word LINK 
                           0024BD     2 	LINK=.
      0024BD                          3 DREAD:
      0024BD 45                       4 	.byte 5+F_IFUNC 	
      0024BE 44 52 45 41 44           5 	.ascii "DREAD"
      0024C3 17 DF                    6 	.word digital_read 
      0024C5                       6624 	_dict_entry,2,DO,do_loop
      0024C5 24 BD                    1 	.word LINK 
                           0024C7     2 	LINK=.
      0024C7                          3 DO:
      0024C7 02                       4 	.byte 2 	
      0024C8 44 4F                    5 	.ascii "DO"
      0024CA 1F 6E                    6 	.word do_loop 
      0024CC                       6625 	_dict_entry,3,DIR,directory 
      0024CC 24 C7                    1 	.word LINK 
                           0024CE     2 	LINK=.
      0024CE                          3 DIR:
      0024CE 03                       4 	.byte 3 	
      0024CF 44 49 52                 5 	.ascii "DIR"
      0024D2 1A C2                    6 	.word directory 
      0024D4                       6626 	_dict_entry,3,DEC,dec_base
      0024D4 24 CE                    1 	.word LINK 
                           0024D6     2 	LINK=.
      0024D6                          3 DEC:
      0024D6 03                       4 	.byte 3 	
      0024D7 44 45 43                 5 	.ascii "DEC"
      0024DA 11 39                    6 	.word dec_base 
      0024DC                       6627 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      0024DC 24 D6                    1 	.word LINK 
                           0024DE     2 	LINK=.
      0024DE                          3 DDR:
      0024DE 43                       4 	.byte 3+F_IFUNC 	
      0024DF 44 44 52                 5 	.ascii "DDR"
      0024E2 1F F3                    6 	.word const_ddr 
      0024E4                       6628 	_dict_entry,6,DATALN,data_line  
      0024E4 24 DE                    1 	.word LINK 
                           0024E6     2 	LINK=.
      0024E6                          3 DATALN:
      0024E6 06                       4 	.byte 6 	
      0024E7 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      0024ED 20 1D                    6 	.word data_line 
      0024EF                       6629 	_dict_entry,4,DATA,data  
      0024EF 24 E6                    1 	.word LINK 
                           0024F1     2 	LINK=.
      0024F1                          3 DATA:
      0024F1 04                       4 	.byte 4 	
      0024F2 44 41 54 41              5 	.ascii "DATA"
      0024F6 20 17                    6 	.word data 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0024F8                       6630 	_dict_entry,3+F_IFUNC,CRL,const_cr1 
      0024F8 24 F1                    1 	.word LINK 
                           0024FA     2 	LINK=.
      0024FA                          3 CRL:
      0024FA 43                       4 	.byte 3+F_IFUNC 	
      0024FB 43 52 4C                 5 	.ascii "CRL"
      0024FE 1F F9                    6 	.word const_cr1 
      002500                       6631 	_dict_entry,3+F_IFUNC,CRH,const_cr2 
      002500 24 FA                    1 	.word LINK 
                           002502     2 	LINK=.
      002502                          3 CRH:
      002502 43                       4 	.byte 3+F_IFUNC 	
      002503 43 52 48                 5 	.ascii "CRH"
      002506 1F FF                    6 	.word const_cr2 
      002508                       6632 	_dict_entry,4+F_CFUNC,CHAR,char
      002508 25 02                    1 	.word LINK 
                           00250A     2 	LINK=.
      00250A                          3 CHAR:
      00250A 84                       4 	.byte 4+F_CFUNC 	
      00250B 43 48 41 52              5 	.ascii "CHAR"
      00250F 1B 8F                    6 	.word char 
      002511                       6633 	_dict_entry,3,BYE,bye 
      002511 25 0A                    1 	.word LINK 
                           002513     2 	LINK=.
      002513                          3 BYE:
      002513 03                       4 	.byte 3 	
      002514 42 59 45                 5 	.ascii "BYE"
      002517 1C 21                    6 	.word bye 
      002519                       6634 	_dict_entry,5,BTOGL,bit_toggle
      002519 25 13                    1 	.word LINK 
                           00251B     2 	LINK=.
      00251B                          3 BTOGL:
      00251B 05                       4 	.byte 5 	
      00251C 42 54 4F 47 4C           5 	.ascii "BTOGL"
      002521 15 11                    6 	.word bit_toggle 
      002523                       6635 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      002523 25 1B                    1 	.word LINK 
                           002525     2 	LINK=.
      002525                          3 BTEST:
      002525 45                       4 	.byte 5+F_IFUNC 	
      002526 42 54 45 53 54           5 	.ascii "BTEST"
      00252B 15 21                    6 	.word bit_test 
      00252D                       6636 	_dict_entry,4,BSET,bit_set 
      00252D 25 25                    1 	.word LINK 
                           00252F     2 	LINK=.
      00252F                          3 BSET:
      00252F 04                       4 	.byte 4 	
      002530 42 53 45 54              5 	.ascii "BSET"
      002534 14 F0                    6 	.word bit_set 
      002536                       6637 	_dict_entry,4,BRES,bit_reset
      002536 25 2F                    1 	.word LINK 
                           002538     2 	LINK=.
      002538                          3 BRES:
      002538 04                       4 	.byte 4 	
      002539 42 52 45 53              5 	.ascii "BRES"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      00253D 15 00                    6 	.word bit_reset 
      00253F                       6638 	_dict_entry,3+F_IFUNC,BIT,bitmask
      00253F 25 38                    1 	.word LINK 
                           002541     2 	LINK=.
      002541                          3 BIT:
      002541 43                       4 	.byte 3+F_IFUNC 	
      002542 42 49 54                 5 	.ascii "BIT"
      002545 1F 45                    6 	.word bitmask 
      002547                       6639 	_dict_entry,3,AWU,awu 
      002547 25 41                    1 	.word LINK 
                           002549     2 	LINK=.
      002549                          3 AWU:
      002549 03                       4 	.byte 3 	
      00254A 41 57 55                 5 	.ascii "AWU"
      00254D 1C 9F                    6 	.word awu 
      00254F                       6640 	_dict_entry,7,AUTORUN,autorun
      00254F 25 49                    1 	.word LINK 
                           002551     2 	LINK=.
      002551                          3 AUTORUN:
      002551 07                       4 	.byte 7 	
      002552 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      002559 1C 2A                    6 	.word autorun 
      00255B                       6641 	_dict_entry,3+F_IFUNC,ASC,ascii
      00255B 25 51                    1 	.word LINK 
                           00255D     2 	LINK=.
      00255D                          3 ASC:
      00255D 43                       4 	.byte 3+F_IFUNC 	
      00255E 41 53 43                 5 	.ascii "ASC"
      002561 1B A1                    6 	.word ascii 
      002563                       6642 	_dict_entry,3+F_IFUNC,AND,bit_and
      002563 25 5D                    1 	.word LINK 
                           002565     2 	LINK=.
      002565                          3 AND:
      002565 43                       4 	.byte 3+F_IFUNC 	
      002566 41 4E 44                 5 	.ascii "AND"
      002569 1D 02                    6 	.word bit_and 
      00256B                       6643 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      00256B 25 65                    1 	.word LINK 
                           00256D     2 	LINK=.
      00256D                          3 ADCREAD:
      00256D 47                       4 	.byte 7+F_IFUNC 	
      00256E 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      002575 17 AB                    6 	.word analog_read 
      002577                       6644 	_dict_entry,5,ADCON,power_adc 
      002577 25 6D                    1 	.word LINK 
                           002579     2 	LINK=.
      002579                          3 ADCON:
      002579 05                       4 	.byte 5 	
      00257A 41 44 43 4F 4E           5 	.ascii "ADCON"
      00257F 17 6F                    6 	.word power_adc 
      002581                       6645 kword_dict:
      002581                       6646 	_dict_entry,3+F_IFUNC,ABS,abs
      002581 25 79                    1 	.word LINK 
                           002583     2 	LINK=.
      002583                          3 ABS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      002583 43                       4 	.byte 3+F_IFUNC 	
      002584 41 42 53                 5 	.ascii "ABS"
      002587 1C EE                    6 	.word abs 
                                   6647 	
                                   6648 
      002600                       6649 	.bndry 128 ; align on FLASH block.
                                   6650 ; free space for user application  
      002600                       6651 user_space:
                                   6652 ; USR() function test
      002600 89               [ 2] 6653 	pushw x 
      002601 72 1A 50 0A      [ 1] 6654 	bset PC_ODR,#5 
      002605 85               [ 2] 6655 	popw x 
      002606 CD 1C 96         [ 4] 6656 	call pause02 
      002609 72 1B 50 0A      [ 1] 6657 	bres PC_ODR,#5 
      00260D 81               [ 4] 6658 	ret
                                   6659 
                                   6660 	.area FLASH_DRIVE (ABS)
      010000                       6661 	.org 0x10000
      010000                       6662 fdrive:
                                   6663 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        002583 R   |     ACK     =  000006 
  5 ADCON      002579 R   |   5 ADCREAD    00256D R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  5 AND        002565 R   |     ARG_OFS =  000002     |   5 ASC        00255D R
    ATTRIB  =  000002     |   5 AUTORUN    002551 R   |     AUTORUN_=  004000 
  5 AWU        002549 R   |   5 AWUHandl   000001 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   5 BIT        002541 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  00000B 
  5 BRES       002538 R   |     BS      =  000008     |     BSAVE   =  000002 
  5 BSET       00252F R   |     BSIZE   =  000001     |   5 BTEST      002525 R
  5 BTOGL      00251B R   |     BTW     =  000001     |     BUFIDX  =  000003 
  5 BYE        002513 R   |     C       =  000001     |     CAN     =  000018 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000002     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   5 CHAR       00250A R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMD_END =  000002     |     CNT     =  000006     |     COMMA   =  000001 
    COUNT   =  000001     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    CR      =  00000D     |   5 CRH        002502 R   |   5 CRL        0024FA R
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000007     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   5 DATA       0024F1 R
  5 DATALN     0024E6 R   |     DBG_A   =  000005     |     DBG_CC  =  000006 
    DBG_X   =  000003     |     DBG_Y   =  000001     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  5 DDR        0024DE R   |     DEBUG   =  000000     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   5 DEC        0024D6 R   |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   5 DIR        0024CE R
    DIVIDND =  000007     |     DIVISR  =  000005     |     DIVSOR  =  000001 
    DLE     =  000010     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  5 DO         0024C7 R   |     DOLP_ADR=  000003     |     DOLP_INW=  000005 
  5 DREAD      0024BD R   |   5 DWRITE     0024B2 R   |   5 EEPROM     00249F R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
    EM      =  000019     |   5 END        0024AA R   |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |     ERR_BAD_=  00000A 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FAUTORUN=  000006     |     FBREAK  =  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

    FCOMP   =  000005     |   5 FCPU       002496 R   |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |   5 FILERX     00248B R
  5 FILETX     002480 R   |     FIRST   =  000001     |     FIRST_DA=  000006 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLOOP   =  000002     |     FLSI    =  01F400     |   5 FOR        002478 R
  5 FORGET     00246D R   |     FRUN    =  000000     |     FS      =  00001C 
    FSIZE   =  000001     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   5 GOSUB      002463 R
  5 GOTO       00245A R   |   5 GPIO       002451 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   5 HEX        002449 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  5 IDR        002441 R   |   5 IF         00243A R   |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   5 INPUT      002430 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   5 INVERT     002425 R
    INW     =  000009     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  5 IWDGEN     00241A R   |   5 IWDGREF    00240E R   |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   5 KEY        002406 R
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000005 
  5 LET        0023FE R   |     LF      =  00000A     |     LIMIT   =  000005 
    LINENO  =  000005     |   5 LINK    =  002583 R   |   5 LIST       0023F5 R
    LL      =  000002     |     LLEN    =  000002     |     LL_HB   =  000001 
    LN_PTR  =  000005     |   5 LOAD       0023EC R   |   5 LOG        0023E4 R
  5 LSHIFT     0023D9 R   |     MAJOR   =  000001     |     MASK    =  000002 
    MATH_OVF=  000000     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
    MULOP   =  000005     |     N1      =  000001     |     N1_HB   =  000006 
    N1_LB   =  000007     |     N2      =  000003     |     N2_HB   =  000008 
    N2_LB   =  000009     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000003     |     NCLKOPT =  004808     |     NEG     =  000001 
  5 NEW        0023C8 R   |   5 NEXT       0023D0 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   5 NOT        0023C0 R   |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000000 R
  5 ODR        0023B8 R   |     ONOFF   =  000003     |     OP      =  000005 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   5 OR         0023B1 R   |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    PA      =  000000     |     PAD_SIZE=  000028     |   5 PAUSE      0023A7 R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   5 PEEK       002394 R   |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PINNO   =  000001     |   5 PINP       00238B R   |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  5 PMODE      00239D R   |   5 POKE       002382 R   |     PORT    =  000003 
  5 POUT       002379 R   |     PREV    =  000001     |   5 PRINT      00236F R
    PROD    =  000002     |   5 PRTA       002366 R   |   5 PRTB       00235D R
  5 PRTC       002354 R   |   5 PRTD       00234B R   |   5 PRTE       002342 R
  5 PRTF       002339 R   |   5 PRTG       002330 R   |   5 PRTH       002327 R
  5 PRTI       00231E R   |   5 QKEY       002315 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   5 READ       00230C R
  5 REBOOT     002301 R   |     REG     =  000001     |     RELOP   =  000005 
  5 REMARK     0022F6 R   |   5 RESTORE    0022EA R   |     RETL1   =  000001 
  5 RETURN     0022DF R   |     RET_ADDR=  000003     |     RET_INW =  000005 
  5 RND        0022D7 R   |     ROP     =  004800     |     RS      =  00001E 
  5 RSHIFT     0022CC R   |     RST_SR  =  0050B3     |   5 RUN        0022C4 R
    RXCHAR  =  000001     |   5 SAVE       0022BB R   |     SDIVD   =  000002 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
  5 SHOW       0022B2 R   |     SI      =  00000F     |     SIGN    =  000001 
  5 SIZE       0022A9 R   |     SKIP    =  000005     |   5 SLEEP      00229F R
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  5 SPIEN      00228B R   |   5 SPIRD      002295 R   |   5 SPISEL     002280 R
  5 SPIWR      002276 R   |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SQUOT   =  000001     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  0000A0     |   5 STEP       00226D R   |   5 STOP       002264 R
    STX     =  000002     |     SUB     =  00001A     |     SWIM_CSR=  007F80 
    SYN     =  000016     |     TAB     =  000009     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   5 TICKS      00225A R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  5 TIMEOUT    002244 R   |   5 TIMER      002250 R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  00000A     |     TK_CFUNC=  000008 
    TK_CHAR =  000003     |     TK_CMD  =  000006     |     TK_COLON=  000001 
    TK_COMMA=  00000D     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000007     |     TK_INTGR=  000004 
    TK_LE   =  000036     |     TK_LPARE=  00000B     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  00000C     |     TK_SHARP=  00000E 
    TK_VAR  =  000005     |   5 TO         00223D R   |   5 TONE       002234 R
    TWSAVE  =  000001     |   5 Timer4Up   000037 R   |     U8      =  000003 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   5 UBOUND     002229 R
  5 UBTN_Han   00007A R   |   5 UFLASH     00221E R   |   5 UNTIL      002214 R
    US      =  00001F     |   5 USER_ABO   000082 R   |     USE_BLOC=  000000 
  5 USR        00220C R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |   5 Uart1RxH   00000F R   |   5 UserButt   00004D R
    VAR_ADDR=  000006     |     VSIZ    =  000002     |     VSIZE   =  000006 
    VT      =  00000B     |   5 WAIT       002203 R   |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH   =  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   5 WORDS      0021F9 R
  5 WRITE      0021EF R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XADR    =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   5 XOR        0021E7 R   |   5 XPEEK      0021DD R
    XSAVE   =  000005     |     YSAVE   =  000003     |   5 abs        001CEE R
  1 acc16      00000C R   |   1 acc24      00000B R   |   1 acc8       00000D R
  5 accept_c   000A4A R   |   5 add        000DAC R   |   5 analog_r   0017AB R
  5 ansi_seq   000A0C R   |   5 arduino_   001DD9 R   |   5 arg_list   000EEB R
  1 array_si   000023 R   |   5 ascii      001BA1 R   |   5 at_tst     000C1D R
  5 atoi24     000D27 R   |   5 atoi_exi   000D95 R   |   5 autorun    001C2A R
  5 autorun_   0005EA R   |   5 awu        001C9F R   |   5 awu02      001CA9 R
  5 bad_port   001BF9 R   |   1 base       00000A R   |   1 basicptr   000004 R
  5 beep       001733 R   |   5 bin_exit   000B21 R   |   5 bit_and    001D02 R
  5 bit_or     001D1A R   |   5 bit_rese   001500 R   |   5 bit_set    0014F0 R
  5 bit_test   001521 R   |   5 bit_togg   001511 R   |   5 bit_xor    001D32 R
  5 bitmask    001F45 R   |   5 bkslsh_t   000BC8 R   |   5 bksp       0001E1 R
  5 break_po   001878 R   |   5 bye        001C21 R   |   5 cancel_a   0005B2 R
  5 char       001B8F R   |   5 check_fu   000376 R   |   5 clear_ba   0005FF R
  5 clear_va   00047F R   |   5 clock_in   00009D R   |   5 cmd_end    001723 R
  5 cmd_line   0007B0 R   |   5 cmd_name   000E57 R   |   5 cmp_name   0018EC R
  5 cold_sta   0004ED R   |   5 colon_ts   000BF1 R   |   5 comma_ts   000BFC R
  5 compile    000385 R   |   5 const_cr   001FF9 R   |   5 const_cr   001FFF R
  5 const_dd   001FF3 R   |   5 const_ee   002011 R   |   5 const_id   001FED R
  5 const_in   00200B R   |   5 const_od   001FE7 R   |   5 const_ou   002005 R
  5 const_po   001FB1 R   |   5 const_po   001FB7 R   |   5 const_po   001FBD R
  5 const_po   001FC3 R   |   5 const_po   001FC9 R   |   5 const_po   001FCF R
  5 const_po   001FD5 R   |   5 const_po   001FDB R   |   5 const_po   001FE1 R
  5 convert_   000AA9 R   |   1 count      000003 R   |   5 cp_loop    000E9A R
  5 create_g   0002D5 R   |   5 cs_high    0021A0 R   |   5 cstk_pro   0010DE R
  5 dash_tst   000C12 R   |   5 data       002017 R   |   1 data_len   000009 R
  5 data_lin   00201D R   |   1 data_ofs   000008 R   |   1 data_ptr   000006 R
  5 data_sea   00205D R   |   5 dec_base   001139 R   |   5 del_back   000A3B R
  5 del_line   00029D R   |   5 del_ln     000A2C R   |   5 delete     0001F1 R
  5 digital_   0017DF R   |   5 digital_   00180F R   |   5 dir_loop   001ACE R
  5 director   001AC2 R   |   5 divide     000E02 R   |   5 divu24_8   00095F R
  5 do_loop    001F6E R   |   5 dotr_loo   0010AE R   |   5 drive_fr   001B4B R
  5 enable_i   001EEF R   |   5 eql_tst    000C7D R   |   5 equal      0013C8 R
  5 err_bad_   0006E2 R   |   5 err_cmd_   0006A3 R   |   5 err_div0   000665 R
  5 err_dupl   0006BE R   |   5 err_math   00064B R   |   5 err_mem_   00062E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]

Symbol Table

  5 err_msg    000610 R   |   5 err_no_a   0006EF R   |   5 err_no_d   000723 R
  5 err_no_f   00074E R   |   5 err_no_l   000675 R   |   5 err_no_p   000739 R
  5 err_not_   0006D0 R   |   5 err_run_   00068C R   |   5 err_synt   00063C R
  5 escaped    000ABE R   |   5 expect     000EDE R   |   5 expr_exi   001038 R
  5 expressi   000FF7 R   |   5 factor     000F4E R   |   1 farptr     000018 R
  5 fcpu       001D7C R   |   7 fdrive     010000 R   |   1 ffree      00001B R
  5 file_cou   001B43 R   |   5 file_rec   0021A5 R   |   5 file_tra   0021DA R
  5 final_te   000A06 R   |   5 first_li   0011BB R   |   1 flags      000025 R
  5 for        001598 R   |   5 forget     001A7D R   |   1 free_ram   00005C R
  5 fsize_ms   0021C9 R   |   5 func_arg   000F12 R   |   5 func_not   001EE2 R
  5 ge         0013CA R   |   5 get_arra   000F29 R   |   5 get_targ   001662 R
  5 get_tick   001CE8 R   |   5 get_toke   000B63 R   |   5 getc       0001CD R
  5 gosub      001693 R   |   5 goto       001678 R   |   5 gpio       001BD4 R
  5 gt         0013C6 R   |   5 gt_tst     000C88 R   |   5 hex_base   001134 R
  5 if         001584 R   |   1 in         000001 R   |   1 in.saved   000002 R
  1 in.w       000000 R   |   5 incr_far   0018A1 R   |   5 input_ex   0014C2 R
  5 input_lo   001463 R   |   5 input_va   001461 R   |   5 insert_l   00030E R
  5 insert_l   000373 R   |   5 interpre   0007CA R   |   5 invert     001F5F R
  5 is_alpha   00048D R   |   5 is_digit   00049E R   |   5 itoa       000918 R
  5 itoa_loo   000930 R   |   5 jp_to_ta   001686 R   |   5 key        001BC1 R
  5 kword_di   002581 R   |   5 kword_en   0021DB R   |   5 le         0013CF R
  5 leading_   001F35 R   |   5 left_arr   000A0C R   |   5 let        00116A R
  5 let02      001174 R   |   5 lines_sk   0011BE R   |   5 list       00118E R
  5 list_exi   001207 R   |   5 list_sta   0011E1 R   |   5 load       001A48 R
  5 load_aut   0005C1 R   |   5 load_fil   001A17 R   |   5 log2       001F2A R
  5 logical_   001ED8 R   |   5 loop_bac   001645 R   |   1 loop_dep   000022 R
  5 loop_don   00165A R   |   5 lshift     001D4A R   |   5 lt         0013CD R
  5 lt_tst     000CC1 R   |   5 modulo     000E46 R   |   5 move       000237 R
  5 move_dow   000255 R   |   5 move_exi   000276 R   |   5 move_loo   00025A R
  5 move_up    000247 R   |   5 mul_char   0013B7 R   |   5 multiply   000DBA R
  5 mulu24_8   000987 R   |   5 nbr_tst    000B9E R   |   5 ne         0013D2 R
  5 neg_acc2   0009C1 R   |   5 new        001896 R   |   5 next       001618 R
  5 next_tok   000821 R   |   5 no_match   000EAC R   |   5 none       000B63 R
  5 other      000CF9 R   |   3 pad        001738 R   |   5 parse_bi   000B01 R
  5 parse_in   000AC6 R   |   5 parse_ke   000B29 R   |   5 parse_qu   000A6E R
  5 pause      001C8C R   |   5 pause02    001C96 R   |   5 peek       001557 R
  5 pin_mode   001D88 R   |   5 plus_tst   000C51 R   |   5 poke       001548 R
  5 power_ad   00176F R   |   5 prcnt_ts   000C72 R   |   5 print      0013D5 R
  5 print_ex   001435 R   |   5 print_in   0008BA R   |   5 print_ty   001441 R
  5 prt_basi   00125A R   |   5 prt_cmd_   00120A R   |   5 prt_loop   0013D9 R
  5 prt_quot   00121E R   |   5 prti24     000872 R   |   1 ptr16      000019 R
  1 ptr8       00001A R   |   5 putc       0001C4 R   |   5 puts       0001D7 R
  5 qkey       001BC9 GR  |   5 qmark_ts   000C28 R   |   5 random     001DF9 R
  5 read       002095 R   |   5 read01     002097 R   |   5 readln     0009E4 R
  5 readln_l   0009EA R   |   5 readln_q   000A5F R   |   5 refresh_   001F25 R
  5 rel_exit   00108F R   |   5 relation   00103B R   |   5 relop_st   0013BA R
  5 remark     0014C5 R   |   5 reprint    000A0C R   |   5 reset_co   0013D7 R
  5 rest_con   001451 R   |   5 restore    00204A R   |   5 return     0016B3 R
  5 right_ar   000A0C R   |   5 row_loop   001117 R   |   5 rparnt_t   000BE6 R
  5 rshift     001D63 R   |   5 run        0016D1 R   |   5 run_it     0016FC R
  1 rx_char    000027 R   |   5 save       001958 R   |   5 save_con   001441 R
  5 search_d   000E89 R   |   5 search_e   000EDA R   |   5 search_f   00190D R
  5 search_l   000279 R   |   5 search_l   000281 R   |   5 search_n   000E8D R
  1 seedx      000014 R   |   1 seedy      000016 R   |   5 seek_fdr   0018AF R
  5 select_p   001DC9 R   |   5 set_time   001EC6 R   |   5 sharp_ts   000C07 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]

Symbol Table

  5 show       001092 R   |   5 show_row   001105 R   |   5 single_c   0013B3 R
  5 size       00113E R   |   5 skip       000D99 R   |   5 slash_ts   000C67 R
  5 sleep      001C81 R   |   5 software   0004A7 R   |   5 spaces     0001FF R
  5 spi_clea   002139 R   |   5 spi_disa   002121 R   |   5 spi_enab   0020EF R
  5 spi_rcv_   00215B R   |   5 spi_read   002186 R   |   5 spi_sele   00218E R
  5 spi_send   002145 R   |   5 spi_writ   002166 R   |   3 stack_fu   001760 R
  3 stack_un   001800 R   |   5 star_tst   000C5C R   |   5 step       0015F1 R
  5 stop       00184A R   |   5 store_lo   001605 R   |   5 str_matc   000EBB R
  5 str_tst    000B8D R   |   5 strcmp     000218 R   |   5 strcpy     000229 R
  5 strlen     00020B R   |   5 substrac   000DB4 R   |   5 syntax_e   000762 R
  1 tab_widt   000026 R   |   5 tb_error   000764 R   |   5 term       000FA8 R
  5 term01     000FB1 R   |   5 term_exi   000FF4 R   |   3 tib        0016E8 R
  5 tick_tst   000C3F R   |   1 ticks      000010 R   |   5 timeout    001ED5 R
  1 timer      000012 R   |   5 timer2_i   0000B3 R   |   5 timer4_i   0000C0 R
  1 tmp16      00000E R   |   1 tmp8       00000F R   |   5 to         0015C1 R
  5 to_upper   000D1B GR  |   5 token_ch   000D08 R   |   5 token_ex   000D18 R
  5 tone       001726 R   |   5 try_next   002085 R   |   1 txtbgn     00001E R
  1 txtend     000020 R   |   5 uart1_in   000189 R   |   5 uart1_se   000199 R
  5 ubound     001148 R   |   5 uflash     001BFE R   |   5 unlock_e   0000D5 R
  5 unlock_f   0000E3 R   |   5 until      001F83 R   |   5 user_int   000060 R
  5 user_spa   002600 R   |   5 usr        001C04 R   |   1 vars       000028 R
  5 wait       0014CB R   |   5 warm_ini   000594 R   |   5 warm_sta   0007AD R
  5 words      001E60 R   |   5 words_co   001EB0 R   |   5 write      001B58 R
  5 write_bl   000166 R   |   5 write_by   0000F1 R   |   5 write_ee   00012D R
  5 write_ex   000161 R   |   5 write_fl   000117 R   |   5 xpeek      001568 R
    xreceive   ****** GX

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5C   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    118   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   260E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

