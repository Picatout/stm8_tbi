ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 
                                     27     .module STM8_TBI
                                     28 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                            .macro _led2_on 
                                        
                                            .macro _led2_off 
                                        
                                            .macro _led2_toggle 
                                             
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                 
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                        
                                        
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                                
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; extracted except if it was end of line 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                        	.include "cmd_index.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of PABasic 
                                        ;
                                        ;     PABasic is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     PABasic is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        
                                        ;---------------------------------------
                                        ; BASIC command and functions indexes
                                        ; for addressing 'code_addr' table
                                        ;--------------------------------------
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                     36     .list 
                                     37 
                                     38 ;_dbg 
                                     39 
                                     40 ;--------------------------------------
                                     41     .area DATA 
                                     42 ;--------------------------------------	
                                     43 
                                     44 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000000                         45 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         46 in::    .blkb 1 ; low byte of in.w 
      000002                         47 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         48 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         49 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         50 data_ptr:  .blkw 1  ; point to DATA address
      000008                         51 data_ofs:  .blkb 1  ; index to next data item 
      000009                         52 data_len:  .blkb 1  ; length of data line 
      00000A                         53 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         54 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         55 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         56 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         57 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         58 timer:: .blkw 1 ;  milliseconds count down timer 
      000012                         59 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         60 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         61 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         62 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         63 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      000019                         64 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001B                         65 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001D                         66 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      00001E                         67 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000020                         68 flags:: .blkb 1 ; various boolean flags
      000021                         69 tab_width:: .blkb 1 ; print colon width (default 6)
      000022                         70 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002A                         71 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002B                         72 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     73 
      00002C                         74 vars:: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     75 	.area BTXT (ABS)
      00007C                         76 	.org 0x7C  
                                     77 ; keep 'free_ram' as last variable 
                                     78 ; basic code compiled here. 
      00007C                         79 rsign: .blkw 1 ; "BC" 
      00007E                         80 rsize: .blkw 1 ; code size 	 
      000080                         81 free_ram: ; from here RAM free for BASIC text 
                                     82 
                                     83 ;;-----------------------------------
                                     84     .area SSEG (ABS)
                                     85 ;; working buffers and stack at end of RAM. 	
                                     86 ;;-----------------------------------
      001690                         87     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         88 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         89 pad:: .ds PAD_SIZE             ; working buffer
      001760                         90 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         91 stack_unf: ; stack underflow ; control_stack bottom 
                                     92 
                                     93 ;;--------------------------------------
                                     94     .area HOME 
                                     95 ;; interrupt vector table at 0x8000
                                     96 ;;--------------------------------------
      000000 82 00 04 6F             97     int cold_start			; RESET vector 
                           000000    98 .if DEBUG
                                     99 	int TrapHandler 		;TRAP  software interrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                           000001   100 .else
      000004 82 00 00 00            101 	int NonHandledInterrupt ;TRAP  software interrupt
                                    102 .endif
      000008 82 00 00 00            103 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            104 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            105 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            106 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            107 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            108 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            109 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 55            110 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            111 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            112 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            113 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            114 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            115 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            116 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            117 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            118 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            119 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            120 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            121 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00            122 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            123 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00            124 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00            125 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 40            126 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            127 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            128 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            129 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            130 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            131 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            132 	int NonHandledInterrupt ;int29  not used
                                    133 
                                    134 ;---------------------------------------
                                    135     .area CODE
                                    136 ;---------------------------------------
                           000000   137 .if DEBUG
                                    138 .asciz "STM8_TBI" ; I like to put module name here.
                                    139 .endif 
                                    140 
                                    141 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    142 ; non handled interrupt 
                                    143 ; reset MCU
                                    144 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        145 NonHandledInterrupt:
      000000 71                     146     .byte 0x71  ; invalid opcode reinitialize MCU
                                    147 
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    149 ; auto wakeup from halt
                                    150 ; at iret, program continue 
                                    151 ; after hatl instruction
                                    152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        153 AWUHandler:
      000001 72 19 50 F0      [ 1]  154 	bres AWU_CSR,#AWU_CSR_AWUEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000005 55 00 3F 50 F1   [ 1]  155 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  156 	clr AWU_TBR 
      00000E 80               [11]  157 	iret
                                    158 
                                    159 ;--------------------------
                                    160 ; UART1 receive character
                                    161 ; CTRL-C (ASCII 3)
                                    162 ; cancel program execution
                                    163 ; and fall back to command line
                                    164 ;--------------------------
      00000F                        165 Uart1RxHandler: ; console receive char 
      00000F 72 0B 52 30 2B   [ 2]  166 	btjf UART1_SR,#UART_SR_RXNE,5$
      000014 C6 52 31         [ 1]  167 	ld a,UART1_DR 
      000017 A1 03            [ 1]  168 	cp a,#CTRL_C 
      000019 26 06            [ 1]  169 	jrne 2$
      00001B CD 02 B2         [ 4]  170 	call putc 
      00001E CC 00 68         [ 2]  171 	jp user_interrupted
      000021                        172 2$:
      000021 A1 18            [ 1]  173 	cp a,#CAN ; CTRL_X 
      000023 26 03            [ 1]  174 	jrne 3$
      000025 CC 04 6F         [ 2]  175 	jp cold_start 	
      000028 AE 00 22         [ 2]  176 3$:	ldw x,#rx1_queue  
      00002B 88               [ 1]  177 	push a 
      00002C 9F               [ 1]  178 	ld a,xl 
      00002D CB 00 2B         [ 1]  179 	add a,rx1_tail 
      000030 97               [ 1]  180 	ld xl,a
      000031 84               [ 1]  181 	pop a  
      000032 F7               [ 1]  182 	ld (x),a
      000033 72 5C 00 2B      [ 1]  183 	inc rx1_tail 
      000037 A6 07            [ 1]  184 	ld a,#RX_QUEUE_SIZE-1
      000039 C4 00 2B         [ 1]  185 	and a,rx1_tail 
      00003C C7 00 2B         [ 1]  186 	ld rx1_tail,a  
      00003F                        187 5$:
      00003F 80               [11]  188 	iret 
                                    189 
                                    190 ;------------------------------------
                                    191 ; software interrupt handler  
                                    192 ;------------------------------------
                           000000   193 .if DEBUG 
                                    194 TrapHandler:
                                    195 	bset flags,#FTRAP 
                                    196 	call print_registers
                                    197 	call cmd_itf
                                    198 	bres flags,#FTRAP 	
                                    199 	iret
                                    200 .endif 
                                    201 
                                    202 ;------------------------------
                                    203 ; TIMER 4 is used to maintain 
                                    204 ; a milliseconds 'ticks' counter
                                    205 ; and decrement 'timer' varaiable
                                    206 ;--------------------------------
      000040                        207 Timer4UpdateHandler:
      000040 72 5F 53 42      [ 1]  208 	clr TIM4_SR 
      000044 CE 00 0E         [ 2]  209 	ldw x,ticks
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000047 5C               [ 1]  210 	incw x
      000048 CF 00 0E         [ 2]  211 	ldw ticks,x 
      00004B CE 00 10         [ 2]  212 	ldw x,timer
                                    213 ;	tnzw x 
      00004E 27 04            [ 1]  214 	jreq 1$
      000050 5A               [ 2]  215 	decw x 
      000051 CF 00 10         [ 2]  216 	ldw timer,x 
      000054                        217 1$:	
      000054 80               [11]  218 	iret 
                                    219 
                                    220 
                                    221 ;------------------------------------
                                    222 ; Triggered by pressing USER UserButton 
                                    223 ; on NUCLEO card.
                                    224 ; This is used to abort a progam lock 
                                    225 ; in infinite loop. 
                                    226 ;------------------------------------
      000055                        227 UserButtonHandler:
                                    228 ; wait button release
      000055 5F               [ 1]  229 	clrw x
      000056 5A               [ 2]  230 1$: decw x 
      000057 26 FD            [ 1]  231 	jrne 1$
      000059 72 09 50 15 F8   [ 2]  232 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    233 ; if MCU suspended by SLEEP resume program
      00005E 72 07 00 20 05   [ 2]  234     btjf flags,#FSLEEP,2$
      000063 72 17 00 20      [ 1]  235 	bres flags,#FSLEEP 
      000067 80               [11]  236 	iret
      000068                        237 2$:	
      000068                        238 user_interrupted:
      000068 72 00 00 20 02   [ 2]  239     btjt flags,#FRUN,4$
      00006D 20 0A            [ 2]  240 	jra UBTN_Handler_exit 
      00006F                        241 4$:	; program interrupted by user 
      00006F 72 11 00 20      [ 1]  242 	bres flags,#FRUN 
      000073 AE 00 8C         [ 2]  243 	ldw x,#USER_ABORT
      000076 CD 20 43         [ 4]  244 	call puts 
      000079                        245 UBTN_Handler_exit:
      000079 AE 17 FF         [ 2]  246     ldw x,#STACK_EMPTY 
      00007C 94               [ 1]  247     ldw sp,x
      00007D 9A               [ 1]  248 	rim 
      00007E CE 00 19         [ 2]  249 	ldw x,txtbgn 
      000081 A3 2A 00         [ 2]  250 	cpw x,#app_space 
      000084 22 03            [ 1]  251 	jrugt 5$
      000086 CD 05 92         [ 4]  252 	call clear_basic 
      000089 CC 07 AC         [ 2]  253 5$:	jp warm_start
                                    254 
      00008C 0A 50 72 6F 67 72 61   255 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    256 
                                    257 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    258 ;    peripherals initialization
                                    259 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    260 
                                    261 ;----------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    262 ; inialize MCU clock 
                                    263 ; input:
                                    264 ;   A 		source  HSI | 1 HSE 
                                    265 ;   XL      CLK_CKDIVR , clock divisor 
                                    266 ; output:
                                    267 ;   none 
                                    268 ;----------------------------------------
      0000A7                        269 clock_init:	
      0000A7 C1 50 C3         [ 1]  270 	cp a,CLK_CMSR 
      0000AA 27 0C            [ 1]  271 	jreq 2$ ; no switching required 
                                    272 ; select clock source 
      0000AC 72 12 50 C5      [ 1]  273 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000B0 C7 50 C4         [ 1]  274 	ld CLK_SWR,a
      0000B3 C1 50 C3         [ 1]  275 1$:	cp a,CLK_CMSR
      0000B6 26 FB            [ 1]  276 	jrne 1$
      0000B8                        277 2$: 	
                                    278 ; HSI and cpu clock divisor 
      0000B8 9F               [ 1]  279 	ld a,xl 
      0000B9 C7 50 C6         [ 1]  280 	ld CLK_CKDIVR,a  
      0000BC 81               [ 4]  281 	ret
                                    282 
                                    283 ;----------------------------------
                                    284 ; TIMER2 used as audio tone output 
                                    285 ; on port D:5.
                                    286 ; channel 1 configured as PWM mode 1 
                                    287 ;-----------------------------------  
                           00F424   288 TIM2_CLK_FREQ=62500
      0000BD                        289 timer2_init:
      0000BD 72 1A 50 C7      [ 1]  290 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000C1 35 60 53 05      [ 1]  291  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000C5 35 08 53 0C      [ 1]  292 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000C9 81               [ 4]  293 	ret 
                                    294 
                                    295 ;---------------------------------
                                    296 ; TIM4 is configured to generate an 
                                    297 ; interrupt every millisecond 
                                    298 ;----------------------------------
      0000CA                        299 timer4_init:
      0000CA 72 18 50 C7      [ 1]  300 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000CE 35 07 53 45      [ 1]  301 	mov TIM4_PSCR,#7 ; prescale 128  
      0000D2 35 7D 53 46      [ 1]  302 	mov TIM4_ARR,#125 ; set for 1msec.
      0000D6 35 05 53 40      [ 1]  303 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000DA 72 10 53 41      [ 1]  304 	bset TIM4_IER,#TIM4_IER_UIE
      0000DE 81               [ 4]  305 	ret
                                    306 
                                    307 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    308 ;  routines to write to FLASH, EEPROM 
                                    309 ;  and OPTION 
                                    310 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    311 
                                    312 ;----------------------------------
                                    313 ; unlock EEPROM/OPT for writing/erasing
                                    314 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    315 ; input:
                                    316 ;  none
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    317 ; output:
                                    318 ;  none 
                                    319 ;----------------------------------
      0000DF                        320 unlock_eeprom:
      0000DF 72 06 50 5F 15   [ 2]  321 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0000E4 35 00 50 5B      [ 1]  322 	mov FLASH_CR2,#0 
      0000E8 35 FF 50 5C      [ 1]  323 	mov FLASH_NCR2,#0xFF 
      0000EC 35 AE 50 64      [ 1]  324 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000F0 35 56 50 64      [ 1]  325     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000F4 72 07 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000F9 81               [ 4]  327 9$:	ret
                                    328 
                                    329 ;----------------------------------
                                    330 ; unlock FLASH for writing/erasing
                                    331 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    332 ; input:
                                    333 ;  none
                                    334 ; output:
                                    335 ;  none
                                    336 ;----------------------------------
      0000FA                        337 unlock_flash:
      0000FA 72 02 50 5F 15   [ 2]  338 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0000FF 35 00 50 5B      [ 1]  339 	mov FLASH_CR2,#0 
      000103 35 FF 50 5C      [ 1]  340 	mov FLASH_NCR2,#0xFF 
      000107 35 56 50 62      [ 1]  341 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      00010B 35 AE 50 62      [ 1]  342 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      00010F 72 03 50 5F FB   [ 2]  343 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000114 81               [ 4]  344 9$:	ret
                                    345 
                                    346 ;----------------------------
                                    347 ; erase block code must be 
                                    348 ; executed from RAM
                                    349 ; input:
                                    350 ;-----------------------------
      000115                        351 row_erase:
      000115 35 20 50 5B      [ 1]  352 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      000119 35 DF 50 5C      [ 1]  353 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      00011D 4F               [ 1]  354 	clr a 
      00011E 90 5F            [ 1]  355 	clrw y 
      000120 91 A7 00 16      [ 1]  356 	ldf ([farptr],y),a
      000124 90 5C            [ 1]  357     incw y
      000126 91 A7 00 16      [ 1]  358 	ldf ([farptr],y),a
      00012A 90 5C            [ 1]  359     incw y
      00012C 91 A7 00 16      [ 1]  360 	ldf ([farptr],y),a
      000130 90 5C            [ 1]  361     incw y
      000132 91 A7 00 16      [ 1]  362 	ldf ([farptr],y),a
      000136 72 05 50 5F FB   [ 2]  363 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00013B 81               [ 4]  364 	ret
      00013C                        365 row_erase_end:
                                    366 
                                    367 ; copy erase_start in RAM 
      00013C                        368 move_erase_to_ram:
      00013C AE 01 3C         [ 2]  369 	ldw x,#row_erase_end 
      00013F 1D 01 15         [ 2]  370 	subw x,#row_erase
      000142 CF 00 0C         [ 2]  371 	ldw acc16,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000145 AE 16 90         [ 2]  372 	ldw x,#tib 
      000148 90 AE 01 15      [ 2]  373 	ldw y,#row_erase 
      00014C CD 03 B6         [ 4]  374 	call move 
      00014F 81               [ 4]  375 	ret 
                                    376 
                                    377 ;-----------------------------------
                                    378 ; block programming must be 
                                    379 ; executed from RAM 
                                    380 ; initial contidions: 
                                    381 ; 	memory unlocked
                                    382 ;   bit PRG set in 
                                    383 ; input:
                                    384 ;   x        data source 
                                    385 ;   farptr   row address destination 
                                    386 ; output:
                                    387 ;   none 
                                    388 ;----------------------------------
                           000001   389 	BCNT=1 
      000150                        390 program_row:
      000150 4B 80            [ 1]  391 	push #BLOCK_SIZE  
                                    392 ;enable block programming 
      000152 72 10 50 5B      [ 1]  393 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000156 72 11 50 5C      [ 1]  394 	bres FLASH_NCR2,#FLASH_CR2_PRG
                                    395 ;	mov FLASH_CR2,#(1<<FLASH_CR2_PRG) 
                                    396 ;	mov FLASH_NCR2,#~(1<<FLASH_CR2_PRG)
      00015A 90 5F            [ 1]  397 	clrw y 
      00015C F6               [ 1]  398 1$:	ld a,(x)
      00015D 91 A7 00 16      [ 1]  399 	ldf ([farptr],y),a
      000161 5C               [ 1]  400 	incw x 
      000162 90 5C            [ 1]  401 	incw y 
      000164 0A 01            [ 1]  402 	dec (BCNT,sp)
      000166 26 F4            [ 1]  403 	jrne 1$
                                    404 ; wait EOP bit 
      000168 72 05 50 5F FB   [ 2]  405 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00016D                        406 	_drop 1 
      00016D 5B 01            [ 2]    1     addw sp,#1 
      00016F 81               [ 4]  407 	ret 
      000170                        408 program_row_end:
                                    409 
                                    410 ;-------------------------
                                    411 ; move program_row to RAM 
                                    412 ; at txtubound address 
                                    413 ;------------------------
      000170                        414 move_prg_to_ram:
      000170 AE 01 70         [ 2]  415 	ldw x,#program_row_end 
      000173 1D 01 50         [ 2]  416 	subw x,#program_row 
      000176 CF 00 0C         [ 2]  417 	ldw acc16,x ; bytes to move 
      000179 AE 16 90         [ 2]  418 	ldw x,#tib ; destination address 
      00017C 90 AE 01 50      [ 2]  419 	ldw y,#program_row ; source address 
      000180 CD 03 B6         [ 4]  420 	call move 
      000183 81               [ 4]  421 	ret 
                                    422 
                                    423 
                                    424 ;-----------------------------
                                    425 ; write a row in FLASH/EEPROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    426 ; input:
                                    427 ;    farptr   destination address 
                                    428 ;    x        source address 
                                    429 ;-----------------------------
      000184                        430 write_row:
      000184 89               [ 2]  431 	pushw x 
      000185 72 5D 00 16      [ 1]  432 	tnz farptr 
      000189 26 0D            [ 1]  433 	jrne to_flash 
      00018B CE 00 17         [ 2]  434 	ldw x,farptr+1 
      00018E A3 2A 00         [ 2]  435 	cpw x,#app_space  
      000191 24 05            [ 1]  436 	jruge to_flash 
      000193                        437 to_eeprom:
      000193 CD 00 DF         [ 4]  438 	call unlock_eeprom
      000196 20 03            [ 2]  439 	jra do_programming
      000198                        440 to_flash:
      000198 CD 00 FA         [ 4]  441 	call unlock_flash
      00019B                        442 do_programming:
      00019B 85               [ 2]  443 	popw x 
      00019C CD 16 90         [ 4]  444 	call tib
      00019F 72 13 50 5F      [ 1]  445 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0001A3 72 17 50 5F      [ 1]  446 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001A7 81               [ 4]  447 	ret 
                                    448 
                                    449 
                                    450 ;-----------------------------------
                                    451 ; erase flash or EEPROM block
                                    452 ; a block is 128 bytes 
                                    453 ; input:
                                    454 ;   farptr  address row begin
                                    455 ; output:
                                    456 ;   none
                                    457 ;--------------------------------------
      0001A8                        458 block_erase:
      0001A8 CE 00 17         [ 2]  459 	ldw x,farptr+1
      0001AB A3 2A 00         [ 2]  460 	cpw x,#app_space 
      0001AE 24 17            [ 1]  461 	jruge erase_flash 
                                    462 ; erase eeprom block
      0001B0 A3 40 00         [ 2]  463 	cpw x,#EEPROM_BASE 
      0001B3 24 01            [ 1]  464 	jruge 1$
      0001B5 81               [ 4]  465 	ret ; bad address 
      0001B6 A3 47 FF         [ 2]  466 1$: cpw x,#EEPROM_END 
      0001B9 25 01            [ 1]  467 	jrult 2$ 
      0001BB 81               [ 4]  468 	ret ; bad address 
      0001BC CD 00 DF         [ 4]  469 2$:	call unlock_eeprom 
      0001BF CD 16 90         [ 4]  470 	call tib 
      0001C2 72 17 50 5F      [ 1]  471 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001C6 81               [ 4]  472 	ret 
                                    473 ; erase flash block:
      0001C7                        474 erase_flash:
      0001C7 CD 00 FA         [ 4]  475 	call unlock_flash 
      0001CA CD 16 90         [ 4]  476 	call tib 
      0001CD 72 13 50 5F      [ 1]  477     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001D1 81               [ 4]  478 	ret 
                                    479 
                                    480 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    482 ; write a byte to FLASH or EEPROM/OPTION  
                                    483 ; input:
                                    484 ;    a  		byte to write
                                    485 ;    farptr  	address
                                    486 ;    x          farptr[x]
                                    487 ; output:
                                    488 ;    none
                                    489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    490 	; variables locales
                           000001   491 	BTW = 1   ; byte to write offset on stack
                           000002   492 	OPT = 2   ; OPTION flag offset on stack
                           000002   493 	VSIZE = 2
      0001D2                        494 write_byte:
      0001D2 90 89            [ 2]  495 	pushw y
      0001D4                        496 	_vars VSIZE
      0001D4 52 02            [ 2]    1     sub sp,#VSIZE 
      0001D6 6B 01            [ 1]  497 	ld (BTW,sp),a ; byte to write 
      0001D8 0F 02            [ 1]  498 	clr (OPT,sp)  ; OPTION flag
                                    499 ; put addr[15:0] in Y, for bounds check.
      0001DA 90 CE 00 17      [ 2]  500 	ldw y,farptr+1   ; Y=addr15:0
                                    501 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001DE 72 5D 00 16      [ 1]  502 	tnz farptr 
      0001E2 26 14            [ 1]  503 	jrne write_flash
      0001E4 90 A3 2A 00      [ 2]  504     cpw y,#app_space 	 
      0001E8 24 0E            [ 1]  505     jruge write_flash
      0001EA 90 A3 40 00      [ 2]  506 	cpw y,#EEPROM_BASE  
      0001EE 25 57            [ 1]  507     jrult write_exit
      0001F0 90 A3 48 7F      [ 2]  508 	cpw y,#OPTION_END 
      0001F4 22 51            [ 1]  509 	jrugt write_exit
      0001F6 20 16            [ 2]  510 	jra write_eeprom 
                                    511 ; write program memory
      0001F8                        512 write_flash:
      0001F8 CD 00 FA         [ 4]  513 	call unlock_flash 
      0001FB 9B               [ 1]  514 1$:	sim 
      0001FC 7B 01            [ 1]  515 	ld a,(BTW,sp)
      0001FE 92 A7 00 16      [ 4]  516 	ldf ([farptr],x),a ; farptr[x]=A
      000202 72 05 50 5F FB   [ 2]  517 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000207 9A               [ 1]  518     rim 
      000208 72 13 50 5F      [ 1]  519     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00020C 20 39            [ 2]  520     jra write_exit
                                    521 ; write eeprom and option
      00020E                        522 write_eeprom:
      00020E CD 00 DF         [ 4]  523 	call unlock_eeprom
                                    524 	; check for data eeprom or option eeprom
      000211 90 A3 48 00      [ 2]  525 	cpw y,#OPTION_BASE
      000215 2B 08            [ 1]  526 	jrmi 1$
      000217 90 A3 48 80      [ 2]  527 	cpw y,#OPTION_END+1
      00021B 2A 02            [ 1]  528 	jrpl 1$
      00021D 03 02            [ 1]  529 	cpl (OPT,sp)
      00021F                        530 1$: 
      00021F 0D 02            [ 1]  531     tnz (OPT,sp)
      000221 27 08            [ 1]  532     jreq 2$
                                    533 	; pour modifier une option il faut modifier ces 2 bits
      000223 72 1E 50 5B      [ 1]  534     bset FLASH_CR2,#FLASH_CR2_OPT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000227 72 1F 50 5C      [ 1]  535     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00022B                        536 2$: 
      00022B 7B 01            [ 1]  537     ld a,(BTW,sp)
      00022D 92 A7 00 16      [ 4]  538     ldf ([farptr],x),a
      000231 0D 02            [ 1]  539     tnz (OPT,sp)
      000233 27 08            [ 1]  540     jreq 3$
      000235 5C               [ 1]  541     incw x
      000236 7B 01            [ 1]  542     ld a,(BTW,sp)
      000238 43               [ 1]  543     cpl a
      000239 92 A7 00 16      [ 4]  544     ldf ([farptr],x),a
      00023D 72 05 50 5F FB   [ 2]  545 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000242 72 0D 50 5F FB   [ 2]  546 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000247                        547 write_exit:
      000247                        548 	_drop VSIZE 
      000247 5B 02            [ 2]    1     addw sp,#VSIZE 
      000249 90 85            [ 2]  549 	popw y
      00024B 81               [ 4]  550     ret
                                    551 
                                    552 ;--------------------------------------------
                                    553 ; write a data block to eeprom or flash 
                                    554 ; input:
                                    555 ;   Y        source address   
                                    556 ;   X        array index  destination  farptr[x]
                                    557 ;   BSIZE    block size bytes 
                                    558 ;   farptr   write address , byte* 
                                    559 ; output:
                                    560 ;	X 		after last byte written 
                                    561 ;   Y 		after last byte read 
                                    562 ;  farptr   point after block
                                    563 ;---------------------------------------------
      00024C                        564 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      00024C                        565 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    566 	; local var 
                           000001   567 	XSAVE=1 
                           000002   568 	VSIZE=2 
      00024C                        569 write_block:
      00024C                        570 	_vars VSIZE
      00024C 52 02            [ 2]    1     sub sp,#VSIZE 
      00024E 1F 01            [ 2]  571 	ldw (XSAVE,sp),x 
      000250 1E 05            [ 2]  572 	ldw x,(BSIZE,sp) 
      000252 27 13            [ 1]  573 	jreq 9$
      000254 1E 01            [ 2]  574 1$:	ldw x,(XSAVE,sp)
      000256 90 F6            [ 1]  575 	ld a,(y)
      000258 CD 01 D2         [ 4]  576 	call write_byte 
      00025B 5C               [ 1]  577 	incw x 
      00025C 90 5C            [ 1]  578 	incw y 
      00025E 1F 01            [ 2]  579 	ldw (XSAVE,sp),x
      000260 1E 05            [ 2]  580 	ldw x,(BSIZE,sp)
      000262 5A               [ 2]  581 	decw x
      000263 1F 05            [ 2]  582 	ldw (BSIZE,sp),x 
      000265 26 ED            [ 1]  583 	jrne 1$
      000267                        584 9$:
      000267 1E 01            [ 2]  585 	ldw x,(XSAVE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000269 CD 14 4E         [ 4]  586 	call incr_farptr
      00026C                        587 	_drop VSIZE
      00026C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00026E 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    592 ;;   UART1 subroutines
                                    593 ;;   used for user interface 
                                    594 ;;   communication channel.
                                    595 ;;   settings: 
                                    596 ;;		115200 8N1 no flow control
                                    597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    598 
                                    599 ;---------------------------------------------
                                    600 ; initialize UART1, 115200 8N1
                                    601 ; input:
                                    602 ;	none
                                    603 ; output:
                                    604 ;   none
                                    605 ;---------------------------------------------
      00026F                        606 uart1_init:
      00026F 72 1A 50 02      [ 1]  607     bset PA_DDR,#UART1_TX_PIN
      000273 72 1A 50 03      [ 1]  608     bset PA_CR1,#UART1_TX_PIN 
      000277 72 1A 50 04      [ 1]  609     bset PA_CR2,#UART1_TX_PIN 
                                    610 ; enable UART1 clock
      00027B 72 14 50 C7      [ 1]  611 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      00027F                        612 uart1_set_baud: 
                                    613 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    614 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      00027F A6 E1            [ 1]  615 	ld a,#CLK_SWR_HSI
      000281 C1 50 C3         [ 1]  616 	cp a,CLK_CMSR 
      000284 27 0A            [ 1]  617 	jreq 2$ 
      000286                        618 1$: ; 8 Mhz 	
      000286 35 05 52 33      [ 1]  619 	mov UART1_BRR2,#0x05 ; must be loaded first
      00028A 35 04 52 32      [ 1]  620 	mov UART1_BRR1,#0x4
      00028E 20 08            [ 2]  621 	jra 3$
      000290                        622 2$: ; 16 Mhz 	
      000290 35 0B 52 33      [ 1]  623 	mov UART1_BRR2,#0x0b ; must be loaded first
      000294 35 08 52 32      [ 1]  624 	mov UART1_BRR1,#0x08
      000298                        625 3$:
      000298 72 5F 52 31      [ 1]  626     clr UART1_DR
      00029C 35 2C 52 35      [ 1]  627 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002A0 72 10 52 35      [ 1]  628 	bset UART1_CR2,#UART_CR2_SBK
      0002A4 72 0D 52 30 FB   [ 2]  629     btjf UART1_SR,#UART_SR_TC,.
      0002A9 72 5F 00 2A      [ 1]  630     clr rx1_head 
      0002AD 72 5F 00 2B      [ 1]  631 	clr rx1_tail 
      0002B1 81               [ 4]  632 	ret
                                    633 
                                    634 ;---------------------------------
                                    635 ; uart1_putc
                                    636 ; send a character via UART1
                                    637 ; input:
                                    638 ;    A  	character to send
                                    639 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      0002B2                        640 putc:: ; console output always on UART1
      0002B2                        641 uart1_putc:: 
      0002B2 72 0F 52 30 FB   [ 2]  642 	btjf UART1_SR,#UART_SR_TXE,.
      0002B7 C7 52 31         [ 1]  643 	ld UART1_DR,a 
      0002BA 81               [ 4]  644 	ret 
                                    645 
                                    646 
                                    647 ;---------------------------------
                                    648 ; Query for character in rx1_queue
                                    649 ; input:
                                    650 ;   none 
                                    651 ; output:
                                    652 ;   A     0 no charcter available
                                    653 ;   Z     1 no character available
                                    654 ;---------------------------------
      0002BB                        655 qgetc::
      0002BB                        656 uart1_qgetc::
      0002BB C6 00 2A         [ 1]  657 	ld a,rx1_head 
      0002BE C0 00 2B         [ 1]  658 	sub a,rx1_tail 
      0002C1 81               [ 4]  659 	ret 
                                    660 
                                    661 ;---------------------------------
                                    662 ; wait character from UART1 
                                    663 ; input:
                                    664 ;   none
                                    665 ; output:
                                    666 ;   A 			char  
                                    667 ;--------------------------------	
      0002C2                        668 getc:: ;console input
      0002C2                        669 uart1_getc::
      0002C2 CD 02 BB         [ 4]  670 	call uart1_qgetc
      0002C5 27 FB            [ 1]  671 	jreq uart1_getc 
      0002C7 89               [ 2]  672 	pushw x 
      0002C8 AE 00 22         [ 2]  673 	ldw x,#rx1_queue
      0002CB 9F               [ 1]  674 	ld a,xl 
      0002CC CB 00 2A         [ 1]  675 	add a,rx1_head 
      0002CF 97               [ 1]  676 	ld xl,a 
      0002D0 F6               [ 1]  677 	ld a,(x)
      0002D1 85               [ 2]  678 	popw x
      0002D2 88               [ 1]  679 	push a
      0002D3 72 5C 00 2A      [ 1]  680 	inc rx1_head 
      0002D7 A6 07            [ 1]  681 	ld a,#RX_QUEUE_SIZE-1 
      0002D9 C4 00 2A         [ 1]  682 	and a,rx1_head 
      0002DC C7 00 2A         [ 1]  683 	ld rx1_head,a 
      0002DF 84               [ 1]  684 	pop a  
      0002E0 81               [ 4]  685 	ret 
                                    686 
                                    687 ;----------------------
                                    688 ; print token id && value
                                    689 ; input:
                                    690 ;   A     token id 
                                    691 ;   X     token value 
                                    692 ;---------------------
                           000001   693 	BSAVE=1
                           000002   694 	AREG=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           000003   695 	XREG=3
                           000004   696 	VSIZE=4
      0002E1                        697 prt_tok:
      0002E1                        698 	_vars VSIZE 
      0002E1 52 04            [ 2]    1     sub sp,#VSIZE 
      0002E3 6B 02            [ 1]  699 	ld (AREG,sp),a 
      0002E5 1F 03            [ 2]  700 	ldw (XREG,sp),x 
      0002E7 C6 00 0A         [ 1]  701 	ld a, base
      0002EA 6B 01            [ 1]  702 	ld (BSAVE,sp),a 
      0002EC 35 10 00 0A      [ 1]  703 	mov base,#16  
      0002F0 AE 03 18         [ 2]  704 	ldw x,#token_msg
      0002F3 CD 20 43         [ 4]  705 	call puts 
      0002F6 5F               [ 1]  706 	clrw x 
      0002F7 7B 02            [ 1]  707 	ld a,(AREG,sp)
      0002F9 97               [ 1]  708 	ld xl,a 
      0002FA CD 08 72         [ 4]  709 	call print_int 
      0002FD A6 20            [ 1]  710 	ld a,#SPACE
      0002FF CD 02 B2         [ 4]  711 	call putc 
      000302 1E 03            [ 2]  712 	ldw x,(XREG,sp)
      000304 CD 08 72         [ 4]  713 	call print_int 
      000307 A6 0D            [ 1]  714 	ld a,#CR 
      000309 CD 02 B2         [ 4]  715 	call putc 
      00030C 7B 01            [ 1]  716 	ld a,(BSAVE,sp)
      00030E C7 00 0A         [ 1]  717 	ld base,a 
      000311 7B 02            [ 1]  718 	ld a,(AREG,sp)
      000313 1E 03            [ 2]  719 	ldw x,(XREG,sp)
      000315                        720 	_drop VSIZE 
      000315 5B 04            [ 2]    1     addw sp,#VSIZE 
      000317 81               [ 4]  721 	ret 
      000318 74 6F 6B 65 6E 3A 20   722 token_msg: .asciz "token: "
             00
                                    723 
                                    724 
                                    725 ;---------------------
                                    726 ; display n bytes row 
                                    727 ; from memory.
                                    728 ; input:
                                    729 ;   A   bytes to print 
                                    730 ;	X   start address 
                                    731 ; output:
                                    732 ;   X   address after last shown  
                                    733 ;---------------------
                           000001   734 	CNT=1 
                           000002   735 	ADR=2 
                           000003   736 	VSIZE=3 
      000320                        737 show_row:
      000320 4D               [ 1]  738 	tnz a 
      000321 26 01            [ 1]  739 	jrne 1$
      000323 81               [ 4]  740 	ret 
      000324                        741 1$:	
      000324 89               [ 2]  742 	pushw x  
      000325 88               [ 1]  743 	push a 
      000326 35 04 00 21      [ 1]  744 	mov tab_width,#4 
      00032A CD 08 72         [ 4]  745 	call print_int 
      00032D A6 20            [ 1]  746 	ld a,#SPACE  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00032F CD 02 B2         [ 4]  747 	call putc
      000332                        748 row_loop:
      000332 1E 02            [ 2]  749 	ldw x,(ADR,sp)
      000334 F6               [ 1]  750 	ld a,(x)
      000335 5F               [ 1]  751 	clrw x 
      000336 97               [ 1]  752 	ld xl,a 
      000337 CD 08 72         [ 4]  753 	call print_int 
      00033A 1E 02            [ 2]  754 	ldw x,(ADR,sp)
      00033C 5C               [ 1]  755 	incw x 
      00033D 1F 02            [ 2]  756 	ldw (ADR,sp),x 
      00033F 0A 01            [ 1]  757 	dec (CNT,sp)
      000341 26 EF            [ 1]  758 	jrne row_loop
      000343                        759 	_drop VSIZE  		
      000343 5B 03            [ 2]    1     addw sp,#VSIZE 
      000345 35 04 00 21      [ 1]  760 	mov tab_width,#4
      000349 A6 0D            [ 1]  761 	ld a,#CR 
      00034B CD 02 B2         [ 4]  762 	call putc 
      00034E 81               [ 4]  763 	ret 
                                    764 
                                    765 ;--------------------------
                                    766 ; print memory content 
                                    767 ; in hexadecimal format
                                    768 ;  input:
                                    769 ;    X    start address 
                                    770 ;    Y    count 
                                    771 ;--------------------------
                           000001   772 	BCNT=1
                           000003   773 	BASE=3
                           000004   774 	TABW=4
                           000004   775 	VSIZE=4   
      00034F                        776 hex_dump:
      00034F                        777 	_vars VSIZE
      00034F 52 04            [ 2]    1     sub sp,#VSIZE 
      000351 C6 00 0A         [ 1]  778 	ld a,base
      000354 6B 03            [ 1]  779 	ld (BASE,sp),a 
      000356 35 10 00 0A      [ 1]  780 	mov base,#16
      00035A C6 00 21         [ 1]  781 	ld a,tab_width 
      00035D 6B 04            [ 1]  782 	ld (TABW,sp),a
      00035F A6 0D            [ 1]  783 	ld a,#CR 
      000361 CD 02 B2         [ 4]  784 	call putc 
      000364 17 01            [ 2]  785 1$: ldw (BCNT,sp),y
      000366 A6 10            [ 1]  786 	ld a,#16
      000368 90 A3 00 10      [ 2]  787 	cpw y,#16
      00036C 2A 02            [ 1]  788 	jrpl 2$
      00036E 90 9F            [ 1]  789 	ld a,yl
      000370                        790 2$: 	
      000370 CD 03 20         [ 4]  791 	call show_row 
      000373 16 01            [ 2]  792 	ldw y,(BCNT,sp) 
      000375 72 A2 00 10      [ 2]  793 	subw y,#16 
      000379 90 A3 00 01      [ 2]  794 	cpw y,#1
      00037D 2A E5            [ 1]  795 	jrpl 1$
      00037F 7B 03            [ 1]  796 	ld a,(BASE,sp)
      000381 C7 00 0A         [ 1]  797 	ld base,a
      000384 7B 04            [ 1]  798 	ld a,(TABW,sp)
      000386 C7 00 21         [ 1]  799 	ld tab_width,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000389                        800 	_drop VSIZE
      000389 5B 04            [ 2]    1     addw sp,#VSIZE 
      00038B 81               [ 4]  801 	ret 
                                    802 
                                    803 ;-------------------------------------
                                    804 ; retrun string length
                                    805 ; input:
                                    806 ;   X         .asciz  pointer 
                                    807 ; output:
                                    808 ;   X         not affected 
                                    809 ;   A         length 
                                    810 ;-------------------------------------
      00038C                        811 strlen::
      00038C 89               [ 2]  812 	pushw x 
      00038D 4F               [ 1]  813 	clr a
      00038E 7D               [ 1]  814 1$:	tnz (x) 
      00038F 27 04            [ 1]  815 	jreq 9$ 
      000391 4C               [ 1]  816 	inc a 
      000392 5C               [ 1]  817 	incw x 
      000393 20 F9            [ 2]  818 	jra 1$ 
      000395 85               [ 2]  819 9$:	popw x 
      000396 81               [ 4]  820 	ret 
                                    821 
                                    822 ;------------------------------------
                                    823 ; compare 2 strings
                                    824 ; input:
                                    825 ;   X 		char* first string 
                                    826 ;   Y       char* second string 
                                    827 ; output:
                                    828 ;   A 		0|1 
                                    829 ;-------------------------------------
      000397                        830 strcmp:
      000397 F6               [ 1]  831 	ld a,(x)
      000398 27 0B            [ 1]  832 	jreq 5$ 
      00039A 90 F1            [ 1]  833 	cp a,(y) 
      00039C 26 05            [ 1]  834 	jrne 4$ 
      00039E 5C               [ 1]  835 	incw x 
      00039F 90 5C            [ 1]  836 	incw y 
      0003A1 20 F4            [ 2]  837 	jra strcmp 
      0003A3                        838 4$: ; not same  
      0003A3 4F               [ 1]  839 	clr a 
      0003A4 81               [ 4]  840 	ret 
      0003A5                        841 5$: ; same 
      0003A5 A6 01            [ 1]  842 	ld a,#1 
      0003A7 81               [ 4]  843 	ret 
                                    844 
                                    845 
                                    846 ;---------------------------------------
                                    847 ;  copy src to dest 
                                    848 ; input:
                                    849 ;   X 		dest 
                                    850 ;   Y 		src 
                                    851 ; output: 
                                    852 ;   X 		dest 
                                    853 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003A8                        854 strcpy::
      0003A8 89               [ 2]  855 	pushw x 
      0003A9 90 F6            [ 1]  856 1$: ld a,(y)
      0003AB 27 06            [ 1]  857 	jreq 9$ 
      0003AD F7               [ 1]  858 	ld (x),a 
      0003AE 5C               [ 1]  859 	incw x 
      0003AF 90 5C            [ 1]  860 	incw y 
      0003B1 20 F6            [ 2]  861 	jra 1$ 
      0003B3 7F               [ 1]  862 9$:	clr (x)
      0003B4 85               [ 2]  863 	popw x 
      0003B5 81               [ 4]  864 	ret 
                                    865 
                                    866 ;---------------------------------------
                                    867 ; move memory block 
                                    868 ; input:
                                    869 ;   X 		destination 
                                    870 ;   Y 	    source 
                                    871 ;   acc16	bytes count 
                                    872 ; output:
                                    873 ;   none 
                                    874 ;--------------------------------------
                           000001   875 	INCR=1 ; increament high byte 
                           000002   876 	LB=2 ; increament low byte 
                           000002   877 	VSIZE=2
      0003B6                        878 move::
      0003B6                        879 	_vars VSIZE 
      0003B6 52 02            [ 2]    1     sub sp,#VSIZE 
      0003B8 0F 01            [ 1]  880 	clr (INCR,sp)
      0003BA 0F 02            [ 1]  881 	clr (LB,sp)
      0003BC 90 89            [ 2]  882 	pushw y 
      0003BE 13 01            [ 2]  883 	cpw x,(1,sp) ; compare DEST to SRC 
      0003C0 90 85            [ 2]  884 	popw y 
      0003C2 27 31            [ 1]  885 	jreq move_exit ; x==y 
      0003C4 2B 0E            [ 1]  886 	jrmi move_down
      0003C6                        887 move_up: ; start from top address with incr=-1
      0003C6 72 BB 00 0C      [ 2]  888 	addw x,acc16
      0003CA 72 B9 00 0C      [ 2]  889 	addw y,acc16
      0003CE 03 01            [ 1]  890 	cpl (INCR,sp)
      0003D0 03 02            [ 1]  891 	cpl (LB,sp)   ; increment = -1 
      0003D2 20 05            [ 2]  892 	jra move_loop  
      0003D4                        893 move_down: ; start from bottom address with incr=1 
      0003D4 5A               [ 2]  894     decw x 
      0003D5 90 5A            [ 2]  895 	decw y
      0003D7 0C 02            [ 1]  896 	inc (LB,sp) ; incr=1 
      0003D9                        897 move_loop:	
      0003D9 C6 00 0C         [ 1]  898     ld a, acc16 
      0003DC CA 00 0D         [ 1]  899 	or a, acc8
      0003DF 27 14            [ 1]  900 	jreq move_exit 
      0003E1 72 FB 01         [ 2]  901 	addw x,(INCR,sp)
      0003E4 72 F9 01         [ 2]  902 	addw y,(INCR,sp) 
      0003E7 90 F6            [ 1]  903 	ld a,(y)
      0003E9 F7               [ 1]  904 	ld (x),a 
      0003EA 89               [ 2]  905 	pushw x 
      0003EB CE 00 0C         [ 2]  906 	ldw x,acc16 
      0003EE 5A               [ 2]  907 	decw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003EF CF 00 0C         [ 2]  908 	ldw acc16,x 
      0003F2 85               [ 2]  909 	popw x 
      0003F3 20 E4            [ 2]  910 	jra move_loop
      0003F5                        911 move_exit:
      0003F5                        912 	_drop VSIZE
      0003F5 5B 02            [ 2]    1     addw sp,#VSIZE 
      0003F7 81               [ 4]  913 	ret 	
                                    914 
                                    915 ;------------------------------------
                                    916 ;  set all variables to zero 
                                    917 ; input:
                                    918 ;   none 
                                    919 ; output:
                                    920 ;	none
                                    921 ;------------------------------------
      0003F8                        922 clear_vars:
      0003F8 AE 00 2C         [ 2]  923 	ldw x,#vars 
      0003FB 90 AE 00 34      [ 2]  924 	ldw y,#2*26 
      0003FF 7F               [ 1]  925 1$:	clr (x)
      000400 5C               [ 1]  926 	incw x 
      000401 90 5A            [ 2]  927 	decw y 
      000403 26 FA            [ 1]  928 	jrne 1$
      000405 81               [ 4]  929 	ret 
                                    930 
                                    931 ;-------------------------------------
                                    932 ; check if A is a letter 
                                    933 ; input:
                                    934 ;   A 			character to test 
                                    935 ; output:
                                    936 ;   C flag      1 true, 0 false 
                                    937 ;-------------------------------------
      000406                        938 is_alpha::
      000406 A1 41            [ 1]  939 	cp a,#'A 
      000408 8C               [ 1]  940 	ccf 
      000409 24 0B            [ 1]  941 	jrnc 9$ 
      00040B A1 5B            [ 1]  942 	cp a,#'Z+1 
      00040D 25 07            [ 1]  943 	jrc 9$ 
      00040F A1 61            [ 1]  944 	cp a,#'a 
      000411 8C               [ 1]  945 	ccf 
      000412 24 02            [ 1]  946 	jrnc 9$
      000414 A1 7B            [ 1]  947 	cp a,#'z+1
      000416 81               [ 4]  948 9$: ret 	
                                    949 
                                    950 ;------------------------------------
                                    951 ; check if character in {'0'..'9'}
                                    952 ; input:
                                    953 ;    A  character to test
                                    954 ; output:
                                    955 ;    Carry  0 not digit | 1 digit
                                    956 ;------------------------------------
      000417                        957 is_digit::
      000417 A1 30            [ 1]  958 	cp a,#'0
      000419 25 03            [ 1]  959 	jrc 1$
      00041B A1 3A            [ 1]  960     cp a,#'9+1
      00041D 8C               [ 1]  961 	ccf 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00041E 8C               [ 1]  962 1$:	ccf 
      00041F 81               [ 4]  963     ret
                                    964 
                                    965 ;-------------------------------------
                                    966 ; return true if character in  A 
                                    967 ; is letter or digit.
                                    968 ; input:
                                    969 ;   A     ASCII character 
                                    970 ; output:
                                    971 ;   A     no change 
                                    972 ;   Carry    0 false| 1 true 
                                    973 ;--------------------------------------
      000420                        974 is_alnum::
      000420 CD 04 17         [ 4]  975 	call is_digit
      000423 25 03            [ 1]  976 	jrc 1$ 
      000425 CD 04 06         [ 4]  977 	call is_alpha
      000428 81               [ 4]  978 1$:	ret 
                                    979 
                                    980 
                                    981 ;-------------------------------------
                                    982 ;  program initialization entry point 
                                    983 ;-------------------------------------
                           000002   984 	MAJOR=2
                           000000   985 	MINOR=0 
      000429 0A 0A 54 69 6E 79 20   986 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
      00046F                        987 cold_start:
                                    988 ;set stack 
      00046F AE 17 FF         [ 2]  989 	ldw x,#STACK_EMPTY
      000472 94               [ 1]  990 	ldw sp,x   
                                    991 ; clear all ram 
      000473 7F               [ 1]  992 0$: clr (x)
      000474 5A               [ 2]  993 	decw x 
      000475 26 FC            [ 1]  994 	jrne 0$
                                    995 ; activate pull up on all inputs 
      000477 A6 FF            [ 1]  996 	ld a,#255 
      000479 C7 50 03         [ 1]  997 	ld PA_CR1,a 
      00047C C7 50 08         [ 1]  998 	ld PB_CR1,a 
      00047F C7 50 0D         [ 1]  999 	ld PC_CR1,a 
      000482 C7 50 12         [ 1] 1000 	ld PD_CR1,a 
      000485 C7 50 17         [ 1] 1001 	ld PE_CR1,a 
      000488 C7 50 1C         [ 1] 1002 	ld PF_CR1,a 
      00048B C7 50 21         [ 1] 1003 	ld PG_CR1,a 
      00048E C7 50 2B         [ 1] 1004 	ld PI_CR1,a
                                   1005 ; set LD2 pin as output 
      000491 72 1A 50 0D      [ 1] 1006     bset PC_CR1,#LED2_BIT
      000495 72 1A 50 0E      [ 1] 1007     bset PC_CR2,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000499 72 1A 50 0C      [ 1] 1008     bset PC_DDR,#LED2_BIT
      00049D 72 1B 50 0A      [ 1] 1009 	bres PC_ODR,#LED2_BIT 
                                   1010 ; disable schmitt triggers on Arduino CN4 analog inputs
      0004A1 55 00 3F 54 07   [ 1] 1011 	mov ADC_TDRL,0x3f
                                   1012 ; disable peripherals clocks
                                   1013 ;	clr CLK_PCKENR1 
                                   1014 ;	clr CLK_PCKENR2
      0004A6 72 5F 50 F2      [ 1] 1015 	clr AWU_TBR 
      0004AA 72 14 50 CA      [ 1] 1016 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1017 ; select internal clock no divisor: 16 Mhz 	
      0004AE A6 E1            [ 1] 1018 	ld a,#CLK_SWR_HSI 
      0004B0 5F               [ 1] 1019 	clrw x  
      0004B1 CD 00 A7         [ 4] 1020     call clock_init 
      0004B4 CD 00 CA         [ 4] 1021 	call timer4_init
      0004B7 CD 00 BD         [ 4] 1022 	call timer2_init
                                   1023 ; UART1 at 115200 BAUD
      0004BA CD 02 6F         [ 4] 1024 	call uart1_init
                                   1025 ; activate PE_4 (user button interrupt)
      0004BD 72 18 50 18      [ 1] 1026     bset PE_CR2,#USR_BTN_BIT 
                                   1027 ; display system information
      0004C1 AE 04 29         [ 2] 1028 	ldw x,#software 
      0004C4 CD 20 43         [ 4] 1029 	call puts 
      0004C7 A6 02            [ 1] 1030 	ld a,#MAJOR 
      0004C9 C7 00 0D         [ 1] 1031 	ld acc8,a 
      0004CC 5F               [ 1] 1032 	clrw x 
      0004CD CF 00 0B         [ 2] 1033 	ldw acc24,x
      0004D0 72 5F 00 21      [ 1] 1034 	clr tab_width  
      0004D4 35 0A 00 0A      [ 1] 1035 	mov base, #10 
      0004D8 CD 08 82         [ 4] 1036 	call prti24 
      0004DB A6 2E            [ 1] 1037 	ld a,#'.
      0004DD CD 02 B2         [ 4] 1038 	call putc 
      0004E0 A6 00            [ 1] 1039 	ld a,#MINOR 
      0004E2 C7 00 0D         [ 1] 1040 	ld acc8,a 
      0004E5 5F               [ 1] 1041 	clrw x 
      0004E6 CF 00 0B         [ 2] 1042 	ldw acc24,x 
      0004E9 CD 08 82         [ 4] 1043 	call prti24
      0004EC A6 0D            [ 1] 1044 	ld a,#CR 
      0004EE CD 02 B2         [ 4] 1045 	call putc
      0004F1 9A               [ 1] 1046 	rim 
      0004F2 72 5C 00 15      [ 1] 1047 	inc seedy+1 
      0004F6 72 5C 00 13      [ 1] 1048 	inc seedx+1 
      0004FA CD 05 92         [ 4] 1049 	call clear_basic
      0004FD CD 0E 29         [ 4] 1050 	call ubound 
      000500 CD 12 B5         [ 4] 1051 	call beep_1khz  
      000503                       1052 2$:	
      000503 CD 05 74         [ 4] 1053 	call warm_init
                                   1054 ; check for application in flash memory 
      000506 CE 2A 00         [ 2] 1055 	ldw x,app_sign 
      000509 C3 15 37         [ 2] 1056 	cpw x,SIGNATURE 
      00050C 27 03            [ 1] 1057 	jreq run_app
      00050E CC 07 AF         [ 2] 1058 	jp cmd_line
      000511                       1059 run_app:
                                   1060 ; run application in FLASH|EEPROM 
      000511 CE 2A 02         [ 2] 1061 	ldw x,app_size  
      000514 89               [ 2] 1062 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000515 AE 2A 04         [ 2] 1063 	ldw x,#app 
      000518 CF 00 19         [ 2] 1064 	ldw txtbgn,x
      00051B CF 00 04         [ 2] 1065 	ldw basicptr,x 
      00051E 72 FB 01         [ 2] 1066 	addw x,(1,sp) ; x+size 
      000521                       1067 	_drop 2 
      000521 5B 02            [ 2]    1     addw sp,#2 
      000523 CF 00 1B         [ 2] 1068 	ldw txtend,x 
      000526 AE 05 52         [ 2] 1069 	ldw x,#RUNNING 
      000529 CD 20 43         [ 4] 1070 	call puts
      00052C CE 00 04         [ 2] 1071 	ldw x,basicptr    
      00052F 35 10 00 0A      [ 1] 1072 	mov base,#16 
      000533 CD 08 72         [ 4] 1073 	call print_int
      000536 35 0A 00 0A      [ 1] 1074 	mov base,#10  
      00053A CE 00 04         [ 2] 1075 	ldw x, basicptr 
      00053D E6 02            [ 1] 1076 	ld a,(2,x)
      00053F C7 00 03         [ 1] 1077 	ld count,a 
      000542 35 03 00 01      [ 1] 1078 	mov in,#3 
      000546 72 10 00 20      [ 1] 1079 	bset flags,#FRUN
      00054A CD 0E 29         [ 4] 1080 	call ubound   
      00054D CC 07 CB         [ 2] 1081 	jp interpreter  
      000550 20 FE            [ 2] 1082     jra .  
                                   1083 
      000552 0A 72 75 6E 6E 69 6E  1084 RUNNING: .asciz "\nrunning application at address: " 
             67 20 61 70 70 6C 69
             63 61 74 69 6F 6E 20
             61 74 20 61 64 64 72
             65 73 73 3A 20 00
                                   1085 
      000574                       1086 warm_init:
      000574 72 5F 00 20      [ 1] 1087 	clr flags 
      000578 72 5F 00 1D      [ 1] 1088 	clr loop_depth 
      00057C 35 04 00 21      [ 1] 1089 	mov tab_width,#TAB_WIDTH 
      000580 35 0A 00 0A      [ 1] 1090 	mov base,#10 
      000584 AE 00 00         [ 2] 1091 	ldw x,#0 
      000587 CF 00 04         [ 2] 1092 	ldw basicptr,x 
      00058A CF 00 00         [ 2] 1093 	ldw in.w,x 
      00058D 72 5F 00 03      [ 1] 1094 	clr count
      000591 81               [ 4] 1095 	ret 
                                   1096 
                                   1097 
                                   1098 ;---------------------------
                                   1099 ; reset BASIC text variables 
                                   1100 ; and clear variables 
                                   1101 ;---------------------------
      000592                       1102 clear_basic:
      000592 72 5F 00 03      [ 1] 1103 	clr count
      000596 72 5F 00 01      [ 1] 1104 	clr in  
      00059A AE 00 80         [ 2] 1105 	ldw x,#free_ram 
      00059D CF 00 19         [ 2] 1106 	ldw txtbgn,x 
      0005A0 CF 00 1B         [ 2] 1107 	ldw txtend,x 
      0005A3 CD 03 F8         [ 4] 1108 	call clear_vars 
      0005A6 81               [ 4] 1109 	ret 
                                   1110 
                                   1111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1112 ;;   Tiny BASIC error messages     ;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1113 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005A7                       1114 err_msg:
      0005A7 00 00 05 C7 05 D4 05  1115 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             E2 05 FB 06 0A
      0005B3 06 20 06 36 06 50 06  1116 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             61 06 72
      0005BD 06 7E 06 B1 06 C1 06  1117 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             D5 06 E8
                                   1118 
      0005C7 4D 65 6D 6F 72 79 20  1119 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0005D4 73 79 6E 74 61 78 20  1120 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0005E2 6D 61 74 68 20 6F 70  1121 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      0005FB 64 69 76 69 73 69 6F  1122 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      00060A 69 6E 76 61 6C 69 64  1123 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      000620 72 75 6E 20 74 69 6D  1124 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      000636 63 6F 6D 6D 61 6E 64  1125 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      000650 64 75 70 6C 69 63 61  1126 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      000661 46 69 6C 65 20 6E 6F  1127 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      000672 62 61 64 20 76 61 6C  1128 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      00067E 46 69 6C 65 20 69 6E  1129 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0006B1 4E 6F 20 64 61 74 61  1130 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0006C1 4E 6F 20 70 72 6F 67  1131 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0006D5 46 69 6C 65 20 73 79  1132 err_no_fspace: .asciz "File system full.\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0006E8 42 75 66 66 65 72 20  1133 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1134 
      0006F5 0A 72 75 6E 20 74 69  1135 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      000707 0A 63 6F 6D 70 69 6C  1136 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      000718 6C 61 73 74 20 74 6F  1137 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1138 
      000728                       1139 syntax_error::
      000728 A6 02            [ 1] 1140 	ld a,#ERR_SYNTAX 
                                   1141 
      00072A                       1142 tb_error::
      00072A 72 0A 00 20 44   [ 2] 1143 	btjt flags,#FCOMP,1$
      00072F 88               [ 1] 1144 	push a 
      000730 AE 06 F5         [ 2] 1145 	ldw x, #rt_msg 
      000733 CD 20 43         [ 4] 1146 	call puts 
      000736 84               [ 1] 1147 	pop a 
      000737 AE 05 A7         [ 2] 1148 	ldw x, #err_msg 
      00073A 72 5F 00 0C      [ 1] 1149 	clr acc16 
      00073E 48               [ 1] 1150 	sll a
      00073F 72 59 00 0C      [ 1] 1151 	rlc acc16  
      000743 C7 00 0D         [ 1] 1152 	ld acc8, a 
      000746 72 BB 00 0C      [ 2] 1153 	addw x,acc16 
      00074A FE               [ 2] 1154 	ldw x,(x)
      00074B CD 20 43         [ 4] 1155 	call puts
      00074E CE 00 04         [ 2] 1156 	ldw x,basicptr
      000751 C6 00 01         [ 1] 1157 	ld a,in 
      000754 CD 0F 3F         [ 4] 1158 	call prt_basic_line
      000757 AE 07 18         [ 2] 1159 	ldw x,#tk_id 
      00075A CD 20 43         [ 4] 1160 	call puts 
      00075D C6 00 02         [ 1] 1161 	ld a,in.saved 
      000760 5F               [ 1] 1162 	clrw x 
      000761 97               [ 1] 1163 	ld xl,a 
      000762 72 BB 00 04      [ 2] 1164 	addw x,basicptr 
      000766 F6               [ 1] 1165 	ld a,(x)
      000767 5F               [ 1] 1166 	clrw x 
      000768 97               [ 1] 1167 	ld xl,a 
      000769 CD 08 72         [ 4] 1168 	call print_int
      00076C 72 0D 00 20 37   [ 2] 1169 	btjf flags,#FAUTORUN ,6$
      000771 20 35            [ 2] 1170 	jra 6$
      000773                       1171 1$:	
      000773 88               [ 1] 1172 	push a 
      000774 AE 07 07         [ 2] 1173 	ldw x,#comp_msg
      000777 CD 20 43         [ 4] 1174 	call puts 
      00077A 84               [ 1] 1175 	pop a 
      00077B AE 05 A7         [ 2] 1176 	ldw x, #err_msg 
      00077E 72 5F 00 0C      [ 1] 1177 	clr acc16 
      000782 48               [ 1] 1178 	sll a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000783 72 59 00 0C      [ 1] 1179 	rlc acc16  
      000787 C7 00 0D         [ 1] 1180 	ld acc8, a 
      00078A 72 BB 00 0C      [ 2] 1181 	addw x,acc16 
      00078E FE               [ 2] 1182 	ldw x,(x)
      00078F CD 20 43         [ 4] 1183 	call puts
      000792 AE 16 90         [ 2] 1184 	ldw x,#tib
      000795 CD 20 43         [ 4] 1185 	call puts 
      000798 A6 0D            [ 1] 1186 	ld a,#CR 
      00079A CD 02 B2         [ 4] 1187 	call putc
      00079D CE 00 00         [ 2] 1188 	ldw x,in.w
      0007A0 CD 20 B0         [ 4] 1189 	call spaces
      0007A3 A6 5E            [ 1] 1190 	ld a,#'^
      0007A5 CD 02 B2         [ 4] 1191 	call putc 
      0007A8 AE 17 FF         [ 2] 1192 6$: ldw x,#STACK_EMPTY 
      0007AB 94               [ 1] 1193     ldw sp,x
      0007AC                       1194 warm_start:
      0007AC CD 05 74         [ 4] 1195 	call warm_init
                                   1196 ;----------------------------
                                   1197 ;   BASIC interpreter
                                   1198 ;----------------------------
      0007AF                       1199 cmd_line: ; user interface 
      0007AF A6 0D            [ 1] 1200 	ld a,#CR 
      0007B1 CD 02 B2         [ 4] 1201 	call putc 
      0007B4 A6 3E            [ 1] 1202 	ld a,#'> 
      0007B6 CD 02 B2         [ 4] 1203 	call putc
      0007B9 CD 21 48         [ 4] 1204 	call readln
      0007BC 72 5D 00 03      [ 1] 1205 	tnz count 
      0007C0 27 ED            [ 1] 1206 	jreq cmd_line
      0007C2 CD 27 21         [ 4] 1207 	call compile
                                   1208 ; if text begin with a line number
                                   1209 ; the compiler set count to zero    
                                   1210 ; so code is not interpreted
      0007C5 72 5D 00 03      [ 1] 1211 	tnz count 
      0007C9 27 E4            [ 1] 1212 	jreq cmd_line
                                   1213 
                                   1214 ; if direct command 
                                   1215 ; it's ready to interpret 
                                   1216 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1217 ;; This is the interpreter loop
                                   1218 ;; for each BASIC code line. 
                                   1219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0007CB                       1220 interpreter: 
      0007CB C6 00 01         [ 1] 1221 	ld a,in 
      0007CE C1 00 03         [ 1] 1222 	cp a,count 
      0007D1 2B 1D            [ 1] 1223 	jrmi interp_loop
      0007D3                       1224 next_line:
      0007D3 72 01 00 20 D7   [ 2] 1225 	btjf flags, #FRUN, cmd_line
      0007D8 CE 00 04         [ 2] 1226 	ldw x,basicptr
      0007DB 72 BB 00 00      [ 2] 1227 	addw x,in.w 
      0007DF C3 00 1B         [ 2] 1228 	cpw x,txtend 
      0007E2 2A C8            [ 1] 1229 	jrpl warm_start
      0007E4 CF 00 04         [ 2] 1230 	ldw basicptr,x ; start of next line  
      0007E7 E6 02            [ 1] 1231 	ld a,(2,x)
      0007E9 C7 00 03         [ 1] 1232 	ld count,a 
      0007EC 35 03 00 01      [ 1] 1233 	mov in,#3 ; skip first 3 bytes of line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0007F0                       1234 interp_loop: 
      0007F0 CD 08 17         [ 4] 1235 	call next_token
      0007F3 A1 00            [ 1] 1236 	cp a,#TK_NONE 
      0007F5 27 DC            [ 1] 1237 	jreq next_line 
      0007F7 A1 80            [ 1] 1238 	cp a,#TK_CMD
      0007F9 26 03            [ 1] 1239 	jrne 1$
      0007FB FD               [ 4] 1240 	call (x) 
      0007FC 20 F2            [ 2] 1241 	jra interp_loop 
      0007FE                       1242 1$:	 
      0007FE A1 85            [ 1] 1243 	cp a,#TK_VAR
      000800 26 05            [ 1] 1244 	jrne 2$
      000802 CD 0E 44         [ 4] 1245 	call let_var  
      000805 20 E9            [ 2] 1246 	jra interp_loop 
      000807                       1247 2$:	
      000807 A1 06            [ 1] 1248 	cp a,#TK_ARRAY 
      000809 26 05            [ 1] 1249 	jrne 3$
      00080B CD 0E 41         [ 4] 1250 	call let_array 
      00080E 20 E0            [ 2] 1251 	jra interp_loop
      000810                       1252 3$:	
      000810 A1 0B            [ 1] 1253 	cp a,#TK_COLON 
      000812 27 DC            [ 1] 1254 	jreq interp_loop 
      000814 CC 07 28         [ 2] 1255 	jp syntax_error 
                                   1256 
                                   1257 		
                                   1258 ;--------------------------
                                   1259 ; extract next token from
                                   1260 ; token list 
                                   1261 ; basicptr -> base address 
                                   1262 ; in  -> offset in list array 
                                   1263 ; output:
                                   1264 ;   A 		token attribute
                                   1265 ;   X 		token value if there is one
                                   1266 ;----------------------------------------
      000817                       1267 next_token::
      000817 5F               [ 1] 1268 	clrw x 
      000818 C6 00 01         [ 1] 1269 	ld a,in 
                                   1270 ; don't replace sub by "cp a,count" 
                                   1271 ; if end of line must return with A=0   	
      00081B C0 00 03         [ 1] 1272 	sub a,count 
      00081E 27 51            [ 1] 1273 	jreq 9$ ; end of line 
      000820                       1274 0$: 
      000820 55 00 01 00 02   [ 1] 1275 	mov in.saved,in ; in case "_unget_token" needed 
      000825 90 CE 00 04      [ 2] 1276 	ldw y,basicptr 
      000829 91 D6 00         [ 4] 1277 	ld a,([in.w],y)
      00082C 72 5C 00 01      [ 1] 1278 	inc in  
      000830 4D               [ 1] 1279 	tnz a 
      000831 2B 27            [ 1] 1280 	jrmi 6$
      000833 A1 06            [ 1] 1281 	cp a,#TK_ARRAY
      000835 2A 3A            [ 1] 1282 	jrpl 9$  ; no attribute for these
      000837                       1283 1$: ; 
      000837 A1 03            [ 1] 1284 	cp a,#TK_CHAR
      000839 26 0B            [ 1] 1285 	jrne 2$
      00083B 41               [ 1] 1286 	exg a,xl
      00083C 91 D6 00         [ 4] 1287 	ld a,([in.w],y)
      00083F 72 5C 00 01      [ 1] 1288 	inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000843 41               [ 1] 1289 	exg a,xl  
      000844 20 2B            [ 2] 1290 	jra 9$ 
      000846 A1 02            [ 1] 1291 2$:	cp a,#TK_QSTR 
      000848 26 27            [ 1] 1292 	jrne 9$
      00084A 93               [ 1] 1293 	ldw x,y 
      00084B 72 BB 00 00      [ 2] 1294 	addw x,in.w ; pointer to string 
                                   1295 ; move pointer after string 
      00084F 91 6D 00         [ 4] 1296 3$:	tnz ([in.w],y)
      000852 27 19            [ 1] 1297 	jreq 8$
      000854 72 5C 00 01      [ 1] 1298 	inc in 
      000858 20 F5            [ 2] 1299 	jra 3$
      00085A                       1300 6$: 
      00085A 72 B9 00 00      [ 2] 1301 	addw y,in.w 
      00085E 90 FE            [ 2] 1302 	ldw y,(y)
      000860 A1 84            [ 1] 1303 	cp a,#TK_INTGR
      000862 2A 04            [ 1] 1304 	jrpl 7$
      000864 90 DE 1F 49      [ 2] 1305 	ldw y,(code_addr,y) 
      000868 51               [ 1] 1306 7$:	exgw x,y 
      000869 72 5C 00 01      [ 1] 1307 	inc in
      00086D 72 5C 00 01      [ 1] 1308 8$:	inc in 
      000871                       1309 9$: 
      000871 81               [ 4] 1310 	ret	
                                   1311 
                                   1312 ;-----------------------------------
                                   1313 ; print a 16 bit integer 
                                   1314 ; using variable 'base' as conversion
                                   1315 ; format.
                                   1316 ; input:
                                   1317 ;   X       integer to print 
                                   1318 ;   'base'    conversion base 
                                   1319 ; output:
                                   1320 ;   none 
                                   1321 ;-----------------------------------
      000872                       1322 print_int:
      000872 72 5F 00 0B      [ 1] 1323 	clr acc24 
      000876 CF 00 0C         [ 2] 1324 	ldw acc16,x 
      000879 72 0F 00 0C 04   [ 2] 1325 	btjf acc16,#7,prti24
      00087E 72 53 00 0B      [ 1] 1326 	cpl acc24 
                                   1327 	
                                   1328 ;------------------------------------
                                   1329 ; print integer in acc24 
                                   1330 ; input:
                                   1331 ;	acc24 		integer to print 
                                   1332 ;	'base' 		numerical base for conversion 
                                   1333 ;   'tab_width' field width 
                                   1334 ;  output:
                                   1335 ;    A          string length
                                   1336 ;------------------------------------
      000882                       1337 prti24:
      000882 CD 08 8E         [ 4] 1338     call itoa  ; conversion entier en  .asciz
      000885 CD 27 C0         [ 4] 1339 	call right_align  
      000888 88               [ 1] 1340 	push a 
      000889 CD 20 43         [ 4] 1341 	call puts
      00088C 84               [ 1] 1342 	pop a 
      00088D 81               [ 4] 1343     ret	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1344 
                                   1345 ;------------------------------------
                                   1346 ; convert integer in acc24 to string
                                   1347 ; input:
                                   1348 ;   'base'	conversion base 
                                   1349 ;	acc24	integer to convert
                                   1350 ; output:
                                   1351 ;   X  		pointer to first char of string
                                   1352 ;   A       string length
                                   1353 ;------------------------------------
                           000001  1354 	SIGN=1  ; integer sign 
                           000002  1355 	LEN=2 
                           000003  1356 	PSTR=3
                           000004  1357 	VSIZE=4 ;locals size
      00088E                       1358 itoa::
      00088E                       1359 	_vars VSIZE
      00088E 52 04            [ 2]    1     sub sp,#VSIZE 
      000890 0F 02            [ 1] 1360 	clr (LEN,sp) ; string length  
      000892 0F 01            [ 1] 1361 	clr (SIGN,sp)    ; sign
      000894 C6 00 0A         [ 1] 1362 	ld a,base 
      000897 A1 0A            [ 1] 1363 	cp a,#10
      000899 26 0A            [ 1] 1364 	jrne 1$
                                   1365 	; base 10 string display with negative sign if bit 23==1
      00089B 72 0F 00 0B 05   [ 2] 1366 	btjf acc24,#7,1$
      0008A0 03 01            [ 1] 1367 	cpl (SIGN,sp)
      0008A2 CD 09 5B         [ 4] 1368 	call neg_acc24
      0008A5                       1369 1$:
                                   1370 ; initialize string pointer 
      0008A5 AE 16 90         [ 2] 1371 	ldw x,#tib 
      0008A8 1C 00 50         [ 2] 1372 	addw x,#TIB_SIZE
      0008AB 5A               [ 2] 1373 	decw x 
      0008AC 7F               [ 1] 1374 	clr (x)
      0008AD 5A               [ 2] 1375 	decw x 
      0008AE A6 20            [ 1] 1376 	ld a,#32
      0008B0 F7               [ 1] 1377 	ld (x),a
      0008B1 0C 02            [ 1] 1378 	inc (LEN,sp)
      0008B3                       1379 itoa_loop:
      0008B3 C6 00 0A         [ 1] 1380     ld a,base
      0008B6 1F 03            [ 2] 1381 	ldw (PSTR,sp),x 
      0008B8 CD 08 F9         [ 4] 1382     call divu24_8 ; acc24/A 
      0008BB 1E 03            [ 2] 1383 	ldw x,(PSTR,sp)
      0008BD AB 30            [ 1] 1384     add a,#'0  ; remainder of division
      0008BF A1 3A            [ 1] 1385     cp a,#'9+1
      0008C1 2B 02            [ 1] 1386     jrmi 2$
      0008C3 AB 07            [ 1] 1387     add a,#7 
      0008C5                       1388 2$:	
      0008C5 5A               [ 2] 1389 	decw x
      0008C6 F7               [ 1] 1390     ld (x),a
      0008C7 0C 02            [ 1] 1391 	inc (LEN,sp)
                                   1392 	; if acc24==0 conversion done
      0008C9 C6 00 0B         [ 1] 1393 	ld a,acc24
      0008CC CA 00 0C         [ 1] 1394 	or a,acc16
      0008CF CA 00 0D         [ 1] 1395 	or a,acc8
      0008D2 26 DF            [ 1] 1396     jrne itoa_loop
                                   1397 	;conversion done, next add '$' or '-' as required
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0008D4 C6 00 0A         [ 1] 1398 	ld a,base 
      0008D7 A1 10            [ 1] 1399 	cp a,#16
      0008D9 27 08            [ 1] 1400 	jreq 8$
      0008DB 7B 01            [ 1] 1401 	ld a,(SIGN,sp)
      0008DD 27 15            [ 1] 1402     jreq 10$
      0008DF A6 2D            [ 1] 1403     ld a,#'-
      0008E1 20 0D            [ 2] 1404 	jra 9$ 
                                   1405 ; don't print more than 4 digits
                                   1406 ; in hexadecimal to avoid '-' sign 
                                   1407 ; extend display 	
      0008E3 7B 02            [ 1] 1408 8$: ld a,(LEN,sp) 
      0008E5 A1 06            [ 1] 1409 	cp a,#6 
      0008E7 2B 05            [ 1] 1410 	jrmi 81$
      0008E9 5C               [ 1] 1411 	incw x
      0008EA 0A 02            [ 1] 1412 	dec (LEN,sp)
      0008EC 20 F5            [ 2] 1413 	jra 8$
      0008EE                       1414 81$:	
      0008EE A6 24            [ 1] 1415 	ld a,#'$ 
      0008F0 5A               [ 2] 1416 9$: decw x
      0008F1 F7               [ 1] 1417     ld (x),a
      0008F2 0C 02            [ 1] 1418 	inc (LEN,sp)
      0008F4                       1419 10$:
      0008F4 7B 02            [ 1] 1420 	ld a,(LEN,sp)
      0008F6                       1421 	_drop VSIZE
      0008F6 5B 04            [ 2]    1     addw sp,#VSIZE 
      0008F8 81               [ 4] 1422 	ret
                                   1423 
                                   1424 ;-------------------------------------
                                   1425 ; divide uint24_t by uint8_t
                                   1426 ; used to convert uint24_t to string
                                   1427 ; input:
                                   1428 ;	acc24	dividend
                                   1429 ;   A 		divisor
                                   1430 ; output:
                                   1431 ;   acc24	quotient
                                   1432 ;   A		remainder
                                   1433 ;------------------------------------- 
                                   1434 ; offset  on sp of arguments and locals
                           000001  1435 	U8   = 1   ; divisor on stack
                           000001  1436 	VSIZE =1
      0008F9                       1437 divu24_8:
      0008F9 89               [ 2] 1438 	pushw x ; save x
      0008FA 88               [ 1] 1439 	push a 
                                   1440 	; ld dividend UU:MM bytes in X
      0008FB C6 00 0B         [ 1] 1441 	ld a, acc24
      0008FE 95               [ 1] 1442 	ld xh,a
      0008FF C6 00 0C         [ 1] 1443 	ld a,acc24+1
      000902 97               [ 1] 1444 	ld xl,a
      000903 7B 01            [ 1] 1445 	ld a,(U8,SP) ; divisor
      000905 62               [ 2] 1446 	div x,a ; UU:MM/U8
      000906 88               [ 1] 1447 	push a  ;save remainder
      000907 9E               [ 1] 1448 	ld a,xh
      000908 C7 00 0B         [ 1] 1449 	ld acc24,a
      00090B 9F               [ 1] 1450 	ld a,xl
      00090C C7 00 0C         [ 1] 1451 	ld acc24+1,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00090F 84               [ 1] 1452 	pop a
      000910 95               [ 1] 1453 	ld xh,a
      000911 C6 00 0D         [ 1] 1454 	ld a,acc24+2
      000914 97               [ 1] 1455 	ld xl,a
      000915 7B 01            [ 1] 1456 	ld a,(U8,sp) ; divisor
      000917 62               [ 2] 1457 	div x,a  ; R:LL/U8
      000918 6B 01            [ 1] 1458 	ld (U8,sp),a ; save remainder
      00091A 9F               [ 1] 1459 	ld a,xl
      00091B C7 00 0D         [ 1] 1460 	ld acc24+2,a
      00091E 84               [ 1] 1461 	pop a
      00091F 85               [ 2] 1462 	popw x
      000920 81               [ 4] 1463 	ret
                                   1464 
                                   1465 ;--------------------------------------
                                   1466 ; unsigned multiply uint24_t by uint8_t
                                   1467 ; use to convert numerical string to uint24_t
                                   1468 ; input:
                                   1469 ;	acc24	uint24_t 
                                   1470 ;   A		uint8_t
                                   1471 ; output:
                                   1472 ;   acc24   A*acc24
                                   1473 ;-------------------------------------
                                   1474 ; local variables offset  on sp
                           000003  1475 	U8   = 3   ; A pushed on stack
                           000002  1476 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1477 	OVFH = 1  ; multiplication overflow high byte
                           000003  1478 	VSIZE = 3
      000921                       1479 mulu24_8:
      000921 89               [ 2] 1480 	pushw x    ; save X
                                   1481 	; local variables
      000922 88               [ 1] 1482 	push a     ; U8
      000923 5F               [ 1] 1483 	clrw x     ; initialize overflow to 0
      000924 89               [ 2] 1484 	pushw x    ; multiplication overflow
                                   1485 ; multiply low byte.
      000925 C6 00 0D         [ 1] 1486 	ld a,acc24+2
      000928 97               [ 1] 1487 	ld xl,a
      000929 7B 03            [ 1] 1488 	ld a,(U8,sp)
      00092B 42               [ 4] 1489 	mul x,a
      00092C 9F               [ 1] 1490 	ld a,xl
      00092D C7 00 0D         [ 1] 1491 	ld acc24+2,a
      000930 9E               [ 1] 1492 	ld a, xh
      000931 6B 02            [ 1] 1493 	ld (OVFL,sp),a
                                   1494 ; multipy middle byte
      000933 C6 00 0C         [ 1] 1495 	ld a,acc24+1
      000936 97               [ 1] 1496 	ld xl,a
      000937 7B 03            [ 1] 1497 	ld a, (U8,sp)
      000939 42               [ 4] 1498 	mul x,a
                                   1499 ; add overflow to this partial product
      00093A 72 FB 01         [ 2] 1500 	addw x,(OVFH,sp)
      00093D 9F               [ 1] 1501 	ld a,xl
      00093E C7 00 0C         [ 1] 1502 	ld acc24+1,a
      000941 4F               [ 1] 1503 	clr a
      000942 A9 00            [ 1] 1504 	adc a,#0
      000944 6B 01            [ 1] 1505 	ld (OVFH,sp),a
      000946 9E               [ 1] 1506 	ld a,xh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000947 6B 02            [ 1] 1507 	ld (OVFL,sp),a
                                   1508 ; multiply most signficant byte	
      000949 C6 00 0B         [ 1] 1509 	ld a, acc24
      00094C 97               [ 1] 1510 	ld xl, a
      00094D 7B 03            [ 1] 1511 	ld a, (U8,sp)
      00094F 42               [ 4] 1512 	mul x,a
      000950 72 FB 01         [ 2] 1513 	addw x, (OVFH,sp)
      000953 9F               [ 1] 1514 	ld a, xl
      000954 C7 00 0B         [ 1] 1515 	ld acc24,a
      000957 5B 03            [ 2] 1516     addw sp,#VSIZE
      000959 85               [ 2] 1517 	popw x
      00095A 81               [ 4] 1518 	ret
                                   1519 
                                   1520 ;------------------------------------
                                   1521 ;  two's complement acc24
                                   1522 ;  input:
                                   1523 ;		acc24 variable
                                   1524 ;  output:
                                   1525 ;		acc24 variable
                                   1526 ;-------------------------------------
      00095B                       1527 neg_acc24:
      00095B 72 53 00 0D      [ 1] 1528 	cpl acc24+2
      00095F 72 53 00 0C      [ 1] 1529 	cpl acc24+1
      000963 72 53 00 0B      [ 1] 1530 	cpl acc24
      000967 A6 01            [ 1] 1531 	ld a,#1
      000969 CB 00 0D         [ 1] 1532 	add a,acc24+2
      00096C C7 00 0D         [ 1] 1533 	ld acc24+2,a
      00096F 4F               [ 1] 1534 	clr a
      000970 C9 00 0C         [ 1] 1535 	adc a,acc24+1
      000973 C7 00 0C         [ 1] 1536 	ld acc24+1,a 
      000976 4F               [ 1] 1537 	clr a 
      000977 C9 00 0B         [ 1] 1538 	adc a,acc24 
      00097A C7 00 0B         [ 1] 1539 	ld acc24,a 
      00097D 81               [ 4] 1540 	ret
                                   1541 
                                   1542 
                                   1543 
                                   1544 
                                   1545 ;------------------------------------
                                   1546 ; convert alpha to uppercase
                                   1547 ; input:
                                   1548 ;    a  character to convert
                                   1549 ; output:
                                   1550 ;    a  uppercase character
                                   1551 ;------------------------------------
      00097E                       1552 to_upper::
      00097E A1 61            [ 1] 1553 	cp a,#'a
      000980 2A 01            [ 1] 1554 	jrpl 1$
      000982 81               [ 4] 1555 0$:	ret
      000983 A1 7A            [ 1] 1556 1$: cp a,#'z	
      000985 22 FB            [ 1] 1557 	jrugt 0$
      000987 A0 20            [ 1] 1558 	sub a,#32
      000989 81               [ 4] 1559 	ret
                                   1560 	
                                   1561 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1562 ; convert pad content in integer
                                   1563 ; input:
                                   1564 ;    x		.asciz to convert
                                   1565 ; output:
                                   1566 ;    acc24      int24_t
                                   1567 ;------------------------------------
                                   1568 	; local variables
                           000001  1569 	SIGN=1 ; 1 byte, 
                           000002  1570 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  1571 	TEMP=3 ; 1 byte, temporary storage
                           000003  1572 	VSIZE=3 ; 3 bytes reserved for local storage
      00098A                       1573 atoi24::
      00098A 89               [ 2] 1574 	pushw x 
      00098B                       1575 	_vars VSIZE
      00098B 52 03            [ 2]    1     sub sp,#VSIZE 
                                   1576 	; acc24=0 
      00098D 72 5F 00 0B      [ 1] 1577 	clr acc24    
      000991 72 5F 00 0C      [ 1] 1578 	clr acc16
      000995 72 5F 00 0D      [ 1] 1579 	clr acc8 
      000999 0F 01            [ 1] 1580 	clr (SIGN,sp)
      00099B A6 0A            [ 1] 1581 	ld a,#10
      00099D 6B 02            [ 1] 1582 	ld (BASE,sp),a ; default base decimal
      00099F F6               [ 1] 1583 	ld a,(x)
      0009A0 27 47            [ 1] 1584 	jreq 9$  ; completed if 0
      0009A2 A1 2D            [ 1] 1585 	cp a,#'-
      0009A4 26 04            [ 1] 1586 	jrne 1$
      0009A6 03 01            [ 1] 1587 	cpl (SIGN,sp)
      0009A8 20 08            [ 2] 1588 	jra 2$
      0009AA A1 24            [ 1] 1589 1$: cp a,#'$
      0009AC 26 06            [ 1] 1590 	jrne 3$
      0009AE A6 10            [ 1] 1591 	ld a,#16
      0009B0 6B 02            [ 1] 1592 	ld (BASE,sp),a
      0009B2 5C               [ 1] 1593 2$:	incw x
      0009B3 F6               [ 1] 1594 	ld a,(x)
      0009B4                       1595 3$:	
      0009B4 A1 61            [ 1] 1596 	cp a,#'a
      0009B6 2B 02            [ 1] 1597 	jrmi 4$
      0009B8 A0 20            [ 1] 1598 	sub a,#32
      0009BA A1 30            [ 1] 1599 4$:	cp a,#'0
      0009BC 2B 2B            [ 1] 1600 	jrmi 9$
      0009BE A0 30            [ 1] 1601 	sub a,#'0
      0009C0 A1 0A            [ 1] 1602 	cp a,#10
      0009C2 2B 06            [ 1] 1603 	jrmi 5$
      0009C4 A0 07            [ 1] 1604 	sub a,#7
      0009C6 11 02            [ 1] 1605 	cp a,(BASE,sp)
      0009C8 2A 1F            [ 1] 1606 	jrpl 9$
      0009CA 6B 03            [ 1] 1607 5$:	ld (TEMP,sp),a
      0009CC 7B 02            [ 1] 1608 	ld a,(BASE,sp)
      0009CE CD 09 21         [ 4] 1609 	call mulu24_8
      0009D1 7B 03            [ 1] 1610 	ld a,(TEMP,sp)
      0009D3 CB 00 0D         [ 1] 1611 	add a,acc24+2
      0009D6 C7 00 0D         [ 1] 1612 	ld acc24+2,a
      0009D9 4F               [ 1] 1613 	clr a
      0009DA C9 00 0C         [ 1] 1614 	adc a,acc24+1
      0009DD C7 00 0C         [ 1] 1615 	ld acc24+1,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009E0 4F               [ 1] 1616 	clr a
      0009E1 C9 00 0B         [ 1] 1617 	adc a,acc24
      0009E4 C7 00 0B         [ 1] 1618 	ld acc24,a
      0009E7 20 C9            [ 2] 1619 	jra 2$
      0009E9 0D 01            [ 1] 1620 9$:	tnz (SIGN,sp)
      0009EB 27 03            [ 1] 1621     jreq atoi_exit
      0009ED CD 09 5B         [ 4] 1622     call neg_acc24
      0009F0                       1623 atoi_exit: 
      0009F0                       1624 	_drop VSIZE
      0009F0 5B 03            [ 2]    1     addw sp,#VSIZE 
      0009F2 85               [ 2] 1625 	popw x ; restore x
      0009F3 81               [ 4] 1626 	ret
                                   1627 
                                   1628 
                                   1629 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1630 ;;   TINY BASIC  operators,
                                   1631 ;;   commands and functions 
                                   1632 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1633 
                                   1634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1635 ;;  Arithmetic operators
                                   1636 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1637 
                                   1638 ;debug support
                           000001  1639 DEBUG_PRT=1
                           000001  1640 .if DEBUG_PRT 
                           000001  1641 	REGA=1
                           000002  1642 	SAVEB=2
                           000003  1643 	REGX=3
                           000005  1644 	REGY=5
                           000007  1645 	ACC24=7
                           000009  1646 	VSIZE=9 
      0009F4                       1647 printxy:
      0009F4                       1648 	_vars VSIZE 
      0009F4 52 09            [ 2]    1     sub sp,#VSIZE 
      0009F6 6B 01            [ 1] 1649 	ld (REGA,sp),a 
      0009F8 C6 00 0A         [ 1] 1650 	ld a,base 
      0009FB 6B 02            [ 1] 1651 	ld (SAVEB,sp),a
      0009FD 1F 03            [ 2] 1652 	ldw (REGX,sp),x
      0009FF 17 05            [ 2] 1653 	ldw (REGY,sp),y
      000A01 CE 00 0B         [ 2] 1654 	ldw x,acc24 
      000A04 C6 00 0D         [ 1] 1655 	ld a,acc8 
      000A07 1F 07            [ 2] 1656 	ldw (ACC24,sp),x 
      000A09 6B 09            [ 1] 1657 	ld (ACC24+2,sp),a 
      000A0B 35 10 00 0A      [ 1] 1658 	mov base,#16 
      000A0F 5F               [ 1] 1659 	clrw x 
      000A10 7B 01            [ 1] 1660 	ld a,(REGA,sp)
      000A12 97               [ 1] 1661 	ld xl,a 
      000A13 CD 08 72         [ 4] 1662 	call print_int
      000A16 A6 20            [ 1] 1663 	ld a,#SPACE 
      000A18 CD 02 B2         [ 4] 1664 	call putc  
      000A1B 1E 03            [ 2] 1665 	ldw x,(REGX,sp)
      000A1D CD 08 72         [ 4] 1666 	call print_int 
      000A20 A6 20            [ 1] 1667 	ld a,#SPACE 
      000A22 CD 02 B2         [ 4] 1668 	call putc  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A25 1E 05            [ 2] 1669 	ldw x,(REGY,sp)
      000A27 CD 08 72         [ 4] 1670 	call print_int 
      000A2A A6 0D            [ 1] 1671 	ld a,#CR 
      000A2C CD 02 B2         [ 4] 1672 	call putc 
      000A2F 7B 09            [ 1] 1673 	ld a,(ACC24+2,sp)
      000A31 1E 07            [ 2] 1674 	ldw x,(ACC24,sp)
      000A33 CF 00 0B         [ 2] 1675 	ldw acc24,x 
      000A36 C7 00 0D         [ 1] 1676 	ld acc8,a
      000A39 7B 02            [ 1] 1677 	ld a,(SAVEB,sp)
      000A3B C7 00 0A         [ 1] 1678 	ld base,a 
      000A3E 7B 01            [ 1] 1679 	ld a,(REGA,sp)
      000A40 1E 03            [ 2] 1680 	ldw x,(REGX,sp)
      000A42 16 05            [ 2] 1681 	ldw y,(REGY,sp)
      000A44                       1682 	_drop VSIZE 
      000A44 5B 09            [ 2]    1     addw sp,#VSIZE 
      000A46 81               [ 4] 1683 	ret 
                                   1684 .endif 
                                   1685 
                                   1686 
                                   1687 ;--------------------------------------
                                   1688 ;  multiply 2 uint16_t return uint32_t
                                   1689 ;  input:
                                   1690 ;     x       uint16_t 
                                   1691 ;     y       uint16_t 
                                   1692 ;  output:
                                   1693 ;     x       product bits 15..0
                                   1694 ;     y       product bits 31..16 
                                   1695 ;---------------------------------------
                           000001  1696 		U1=1  ; uint16_t 
                           000003  1697 		DBL=3 ; uint32_t
                           000006  1698 		VSIZE=6
      000A47                       1699 umstar:
      000A47                       1700 	_vars VSIZE 
      000A47 52 06            [ 2]    1     sub sp,#VSIZE 
      000A49 1F 01            [ 2] 1701 	ldw (U1,sp),x 
                                   1702 ;initialize bits 31..16 of 
                                   1703 ;product to zero 
      000A4B 0F 03            [ 1] 1704 	clr (DBL,sp)
      000A4D 0F 04            [ 1] 1705 	clr (DBL+1,sp)
                                   1706 ; produc U1L*U2L 
      000A4F 90 9F            [ 1] 1707 	ld a,yl 
      000A51 42               [ 4] 1708 	mul x,a 
      000A52 1F 05            [ 2] 1709 	ldw (DBL+2,sp),x
                                   1710 ; product U1H*U2L 
      000A54 7B 01            [ 1] 1711 	ld a,(U1,sp) ; xh 
      000A56 93               [ 1] 1712 	ldw x,y
      000A57 42               [ 4] 1713 	mul x,a 
      000A58 4F               [ 1] 1714 	clr a 
      000A59 72 FB 04         [ 2] 1715 	addw x,(DBL+1,sp) 
      000A5C 4F               [ 1] 1716 	clr a 
      000A5D 19 03            [ 1] 1717 	adc a,(DBL,sp) 
      000A5F 6B 03            [ 1] 1718 	ld (DBL,sp),a ; bits 23..17 
      000A61 1F 04            [ 2] 1719 	ldw (DBL+1,sp),x ; bits 15..0 
                                   1720 ; product U1L*U2H
      000A63 90 5E            [ 1] 1721 	swapw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A65 93               [ 1] 1722 	ldw x,y
      000A66 7B 02            [ 1] 1723 	ld a,(U1+1,sp)
      000A68 42               [ 4] 1724 	mul x,a
      000A69 72 FB 04         [ 2] 1725 	addw x,(DBL+1,sp)
      000A6C 4F               [ 1] 1726 	clr a 
      000A6D 19 03            [ 1] 1727 	adc a,(DBL,sp)
      000A6F 6B 03            [ 1] 1728 	ld (DBL,sp),a 
      000A71 1F 04            [ 2] 1729 	ldw (DBL+1,sp),x 
                                   1730 ; product U1H*U2H 	
      000A73 7B 01            [ 1] 1731 	ld a,(U1,sp)
      000A75 93               [ 1] 1732 	ldw x,y  
      000A76 42               [ 4] 1733 	mul x,a 
      000A77 72 FB 03         [ 2] 1734 	addw x,(DBL,sp)
      000A7A 90 93            [ 1] 1735 	ldw y,x 
      000A7C 1E 05            [ 2] 1736 	ldw x,(DBL+2,sp)
      000A7E                       1737 	_drop VSIZE 
      000A7E 5B 06            [ 2]    1     addw sp,#VSIZE 
      000A80 81               [ 4] 1738 	ret
                                   1739 
                                   1740 
                                   1741 ;-------------------------------------
                                   1742 ; multiply 2 integers
                                   1743 ; input:
                                   1744 ;  	x       n1 
                                   1745 ;   y 		n2 
                                   1746 ; output:
                                   1747 ;	X        N1*N2 bits 15..0
                                   1748 ;   Y        N1*N2 bits 31..16 
                                   1749 ;-------------------------------------
                           000001  1750 	SIGN=1
                           000001  1751 	VSIZE=1
      000A81                       1752 multiply:
      000A81                       1753 	_vars VSIZE 
      000A81 52 01            [ 2]    1     sub sp,#VSIZE 
      000A83 0F 01            [ 1] 1754 	clr (SIGN,sp)
      000A85 9E               [ 1] 1755 	ld a,xh 
      000A86 A4 80            [ 1] 1756 	and a,#0x80
      000A88 2A 03            [ 1] 1757 	jrpl 1$
      000A8A 03 01            [ 1] 1758 	cpl (SIGN,sp)
      000A8C 50               [ 2] 1759 	negw x 
      000A8D                       1760 1$:	
      000A8D 90 9E            [ 1] 1761 	ld a,yh
      000A8F A4 80            [ 1] 1762 	and a,#0x80  
      000A91 2A 04            [ 1] 1763 	jrpl 2$ 
      000A93 03 01            [ 1] 1764 	cpl (SIGN,sp)
      000A95 90 50            [ 2] 1765 	negw y 
      000A97                       1766 2$:	
      000A97 CD 0A 47         [ 4] 1767 	call umstar
      000A9A 7B 01            [ 1] 1768 	ld a,(SIGN,sp)
      000A9C 27 03            [ 1] 1769 	jreq 3$
      000A9E CD 0A CE         [ 4] 1770 	call dneg 
      000AA1                       1771 3$:	
      000AA1                       1772 	_drop VSIZE 
      000AA1 5B 01            [ 2]    1     addw sp,#VSIZE 
      000AA3 81               [ 4] 1773 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1774 
                                   1775 ;--------------------------------------
                                   1776 ; divide uint32_t/uint16_t
                                   1777 ; return:  quotient and remainder 
                                   1778 ; quotient expected to be uint16_t 
                                   1779 ; input:
                                   1780 ;   DBLDIVDND    on stack 
                                   1781 ;   X            divisor 
                                   1782 ; output:
                                   1783 ;   X            quotient 
                                   1784 ;   Y            remainder 
                                   1785 ;---------------------------------------
                           000003  1786 	VSIZE=3
      000AA4                       1787 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      000AA4                       1788 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   1789 	; local variables 
                           000001  1790 	DIVISOR=1 
                           000003  1791 	CNTR=3 
      000AA4                       1792 udiv32_16:
      000AA4                       1793 	_vars VSIZE 
      000AA4 52 03            [ 2]    1     sub sp,#VSIZE 
      000AA6 1F 01            [ 2] 1794 	ldw (DIVISOR,sp),x	; save divisor 
      000AA8 1E 08            [ 2] 1795 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      000AAA 16 06            [ 2] 1796 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      000AAC 90 5D            [ 2] 1797 	tnzw y
      000AAE 26 06            [ 1] 1798 	jrne long_division 
      000AB0 16 01            [ 2] 1799 	ldw y,(DIVISOR,sp)
      000AB2 65               [ 2] 1800 	divw x,y
      000AB3                       1801 	_drop VSIZE 
      000AB3 5B 03            [ 2]    1     addw sp,#VSIZE 
      000AB5 81               [ 4] 1802 	ret
      000AB6                       1803 long_division:
      000AB6 51               [ 1] 1804 	exgw x,y ; hi in x, lo in y 
      000AB7 A6 11            [ 1] 1805 	ld a,#17 
      000AB9 6B 03            [ 1] 1806 	ld (CNTR,sp),a
      000ABB                       1807 1$:
      000ABB 13 01            [ 2] 1808 	cpw x,(DIVISOR,sp)
      000ABD 2B 03            [ 1] 1809 	jrmi 2$
      000ABF 72 F0 01         [ 2] 1810 	subw x,(DIVISOR,sp)
      000AC2 8C               [ 1] 1811 2$:	ccf 
      000AC3 90 59            [ 2] 1812 	rlcw y 
      000AC5 59               [ 2] 1813 	rlcw x 
      000AC6 0A 03            [ 1] 1814 	dec (CNTR,sp)
      000AC8 26 F1            [ 1] 1815 	jrne 1$
      000ACA 51               [ 1] 1816 	exgw x,y 
      000ACB                       1817 	_drop VSIZE 
      000ACB 5B 03            [ 2]    1     addw sp,#VSIZE 
      000ACD 81               [ 4] 1818 	ret
                                   1819 
                                   1820 ;-----------------------------
                                   1821 ; negate double int.
                                   1822 ; input:
                                   1823 ;   x     bits 15..0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1824 ;   y     bits 31..16
                                   1825 ; output: 
                                   1826 ;   x     bits 15..0
                                   1827 ;   y     bits 31..16
                                   1828 ;-----------------------------
      000ACE                       1829 dneg:
      000ACE 53               [ 2] 1830 	cplw x 
      000ACF 90 53            [ 2] 1831 	cplw y 
      000AD1 1C 00 01         [ 2] 1832 	addw x,#1 
      000AD4 24 02            [ 1] 1833 	jrnc 1$
      000AD6 90 5C            [ 1] 1834 	incw y 
      000AD8 81               [ 4] 1835 1$: ret 
                                   1836 
                                   1837 
                                   1838 ;--------------------------------
                                   1839 ; sign extend single to double
                                   1840 ; input:
                                   1841 ;   x    int16_t
                                   1842 ; output:
                                   1843 ;   x    int32_t bits 15..0
                                   1844 ;   y    int32_t bits 31..16
                                   1845 ;--------------------------------
      000AD9                       1846 dbl_sign_extend:
      000AD9 90 5F            [ 1] 1847 	clrw y
      000ADB 9E               [ 1] 1848 	ld a,xh 
      000ADC A4 80            [ 1] 1849 	and a,#0x80 
      000ADE 27 02            [ 1] 1850 	jreq 1$
      000AE0 90 53            [ 2] 1851 	cplw y
      000AE2 81               [ 4] 1852 1$: ret 	
                                   1853 
                                   1854 
                                   1855 ;----------------------------------
                                   1856 ;  euclidian divide dbl/n1 
                                   1857 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   1858 ; input:
                                   1859 ;    dbl    int32_t on stack 
                                   1860 ;    x 		n1   int16_t  disivor  
                                   1861 ; output:
                                   1862 ;    X      dbl/x  int16_t 
                                   1863 ;    Y      remainder int16_t 
                                   1864 ;----------------------------------
                           000008  1865 	VSIZE=8
      000AE3                       1866 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      000AE3                       1867 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      000AE3                       1868 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   1869 	; local variables
                           000001  1870 	DBLHI=1
                           000003  1871 	DBLLO=3 
                           000005  1872 	SDIVSR=5 ; sign divisor
                           000006  1873 	SQUOT=6 ; sign dividend 
                           000007  1874 	DIVISR=7 ; divisor 
      000AE3                       1875 div32_16:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000AE3                       1876 	_vars VSIZE 
      000AE3 52 08            [ 2]    1     sub sp,#VSIZE 
      000AE5 0F 05            [ 1] 1877 	clr (SDIVSR,sp)
      000AE7 0F 06            [ 1] 1878 	clr (SQUOT,sp)
                                   1879 ; copy arguments 
      000AE9 16 0B            [ 2] 1880 	ldw y,(DIVDNDHI,sp)
      000AEB 17 01            [ 2] 1881 	ldw (DBLHI,sp),y
      000AED 16 0D            [ 2] 1882 	ldw y,(DIVDNDLO,sp)
      000AEF 17 03            [ 2] 1883 	ldw (DBLLO,sp),y 
                                   1884 ; check for 0 divisor
      000AF1 5D               [ 2] 1885 	tnzw x 
      000AF2 26 05            [ 1] 1886     jrne 0$
      000AF4 A6 04            [ 1] 1887 	ld a,#ERR_DIV0 
      000AF6 CC 07 2A         [ 2] 1888 	jp tb_error 
                                   1889 ; check divisor sign 	
      000AF9 9E               [ 1] 1890 0$:	ld a,xh 
      000AFA A4 80            [ 1] 1891 	and a,#0x80 
      000AFC 27 05            [ 1] 1892 	jreq 1$
      000AFE 03 05            [ 1] 1893 	cpl (SDIVSR,sp)
      000B00 03 06            [ 1] 1894 	cpl (SQUOT,sp)
      000B02 50               [ 2] 1895 	negw x
      000B03 1F 07            [ 2] 1896 1$:	ldw (DIVISR,sp),x
                                   1897 ; check dividend sign 	 
      000B05 7B 01            [ 1] 1898  	ld a,(DBLHI,sp) 
      000B07 A4 80            [ 1] 1899 	and a,#0x80 
      000B09 27 0D            [ 1] 1900 	jreq 2$ 
      000B0B 03 06            [ 1] 1901 	cpl (SQUOT,sp)
      000B0D 1E 03            [ 2] 1902 	ldw x,(DBLLO,sp)
      000B0F 16 01            [ 2] 1903 	ldw y,(DBLHI,sp)
      000B11 CD 0A CE         [ 4] 1904 	call dneg 
      000B14 1F 03            [ 2] 1905 	ldw (DBLLO,sp),x 
      000B16 17 01            [ 2] 1906 	ldw (DBLHI,sp),y 
      000B18 1E 07            [ 2] 1907 2$:	ldw x,(DIVISR,sp)
      000B1A CD 0A A4         [ 4] 1908 	call udiv32_16
      000B1D 90 5D            [ 2] 1909 	tnzw y 
      000B1F 27 11            [ 1] 1910 	jreq 3$ 
                                   1911 ; x=quotient 
                                   1912 ; y=remainder 
                                   1913 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      000B21 7B 06            [ 1] 1914 	ld a,(SQUOT,sp)
      000B23 18 05            [ 1] 1915 	xor a,(SDIVSR,sp)
      000B25 27 0B            [ 1] 1916 	jreq 3$
      000B27 5C               [ 1] 1917 	incw x 
      000B28 90 CF 00 0C      [ 2] 1918 	ldw acc16,y 
      000B2C 16 07            [ 2] 1919 	ldw y,(DIVISR,sp)
      000B2E 72 B2 00 0C      [ 2] 1920 	subw y,acc16
                                   1921 ; sign quotient
      000B32 7B 06            [ 1] 1922 3$:	ld a,(SQUOT,sp)
      000B34 27 01            [ 1] 1923 	jreq 4$
      000B36 50               [ 2] 1924 	negw x 
      000B37                       1925 4$:	
      000B37                       1926 	_drop VSIZE 
      000B37 5B 08            [ 2]    1     addw sp,#VSIZE 
      000B39 81               [ 4] 1927 	ret 
                                   1928 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1929 
                                   1930 
                                   1931 ;----------------------------------
                                   1932 ; division x/y 
                                   1933 ; input:
                                   1934 ;    X       dividend
                                   1935 ;    Y       divisor 
                                   1936 ; output:
                                   1937 ;    X       quotient
                                   1938 ;    Y       remainder 
                                   1939 ;-----------------------------------
                           000004  1940 	VSIZE=4 
                                   1941 	; local variables 
                           000001  1942 	DBLHI=1
                           000003  1943 	DBLLO=3
      000B3A                       1944 divide: 
      000B3A                       1945 	_vars VSIZE 
      000B3A 52 04            [ 2]    1     sub sp,#VSIZE 
      000B3C 90 CF 00 0C      [ 2] 1946 	ldw acc16,y
      000B40 CD 0A D9         [ 4] 1947 	call dbl_sign_extend
      000B43 1F 03            [ 2] 1948 	ldw (DBLLO,sp),x 
      000B45 17 01            [ 2] 1949 	ldw (DBLHI,sp),y 
      000B47 CE 00 0C         [ 2] 1950 	ldw x,acc16 
      000B4A CD 0A E3         [ 4] 1951 	call div32_16 
      000B4D                       1952 	_drop VSIZE 
      000B4D 5B 04            [ 2]    1     addw sp,#VSIZE 
      000B4F 81               [ 4] 1953 	ret
                                   1954 
                                   1955 
                                   1956 ;----------------------------------
                                   1957 ;  remainder resulting from euclidian 
                                   1958 ;  division of x/y 
                                   1959 ; input:
                                   1960 ;   x   	dividend int16_t 
                                   1961 ;   y 		divisor int16_t
                                   1962 ; output:
                                   1963 ;   X       n1%n2 
                                   1964 ;----------------------------------
      000B50                       1965 modulo:
      000B50 CD 0B 3A         [ 4] 1966 	call divide
      000B53 93               [ 1] 1967 	ldw x,y 
      000B54 81               [ 4] 1968 	ret 
                                   1969 
                                   1970 ;----------------------------------
                                   1971 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   1972 ; return expr1*expr2/expr3 
                                   1973 ; product result is int32_t and 
                                   1974 ; divisiont is int32_t/int16_t
                                   1975 ;----------------------------------
                           000004  1976 	DBL_SIZE=4 
      000B55                       1977 muldiv:
      000B55 CD 0B CB         [ 4] 1978 	call func_args 
      000B58 A1 03            [ 1] 1979 	cp a,#3 
      000B5A 27 03            [ 1] 1980 	jreq 1$
      000B5C CC 07 28         [ 2] 1981 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000B5F                       1982 1$: 
      000B5F 1E 05            [ 2] 1983 	ldw x,(5,sp) ; expr1
      000B61 16 03            [ 2] 1984 	ldw y,(3,sp) ; expr2
      000B63 CD 0A 81         [ 4] 1985 	call multiply 
      000B66 1F 05            [ 2] 1986 	ldw (5,sp),x  ;int32_t 15..0
      000B68 17 03            [ 2] 1987 	ldw (3,sp),y  ;int32_t 31..16
      000B6A 85               [ 2] 1988 	popw x        ; expr3 
      000B6B CD 0A E3         [ 4] 1989 	call div32_16 ; int32_t/expr3 
      000B6E                       1990 	_drop DBL_SIZE
      000B6E 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      000B70 81               [ 4] 1991 	ret 
                                   1992 
                                   1993 
                                   1994 ;---------------------------------
                                   1995 ; dictionary search 
                                   1996 ; input:
                                   1997 ;	X 		dictionary entry point, name field  
                                   1998 ;   y		.asciz name to search 
                                   1999 ; output:
                                   2000 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2001 ;  X		cmd_index
                                   2002 ;---------------------------------
                           000001  2003 	NLEN=1 ; cmd length 
                           000002  2004 	XSAVE=2
                           000004  2005 	YSAVE=4
                           000005  2006 	VSIZE=5 
      000B71                       2007 search_dict::
      000B71                       2008 	_vars VSIZE 
      000B71 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2009 
      000B73 17 04            [ 2] 2010 	ldw (YSAVE,sp),y 
      000B75                       2011 search_next:
      000B75 1F 02            [ 2] 2012 	ldw (XSAVE,sp),x 
                                   2013 ; get name length in dictionary	
      000B77 F6               [ 1] 2014 	ld a,(x)
      000B78 A4 0F            [ 1] 2015 	and a,#0xf 
      000B7A 6B 01            [ 1] 2016 	ld (NLEN,sp),a  
      000B7C 16 04            [ 2] 2017 	ldw y,(YSAVE,sp) ; name pointer 
      000B7E 5C               [ 1] 2018 	incw x 
      000B7F                       2019 cp_loop:
      000B7F 90 F6            [ 1] 2020 	ld a,(y)
      000B81 27 1B            [ 1] 2021 	jreq str_match 
      000B83 0D 01            [ 1] 2022 	tnz (NLEN,sp)
      000B85 27 0A            [ 1] 2023 	jreq no_match  
      000B87 F1               [ 1] 2024 	cp a,(x)
      000B88 26 07            [ 1] 2025 	jrne no_match 
      000B8A 90 5C            [ 1] 2026 	incw y 
      000B8C 5C               [ 1] 2027 	incw x
      000B8D 0A 01            [ 1] 2028 	dec (NLEN,sp)
      000B8F 20 EE            [ 2] 2029 	jra cp_loop 
      000B91                       2030 no_match:
      000B91 1E 02            [ 2] 2031 	ldw x,(XSAVE,sp) 
      000B93 1D 00 02         [ 2] 2032 	subw x,#2 ; move X to link field
      000B96 4B 00            [ 1] 2033 	push #TK_NONE 
      000B98 FE               [ 2] 2034 	ldw x,(x) ; next word link 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000B99 84               [ 1] 2035 	pop a ; TK_NONE 
      000B9A 27 1F            [ 1] 2036 	jreq search_exit  ; not found  
                                   2037 ;try next 
      000B9C 20 D7            [ 2] 2038 	jra search_next
      000B9E                       2039 str_match:
      000B9E 1E 02            [ 2] 2040 	ldw x,(XSAVE,sp)
      000BA0 F6               [ 1] 2041 	ld a,(X)
      000BA1 6B 01            [ 1] 2042 	ld (NLEN,sp),a ; needed to test keyword type  
      000BA3 A4 0F            [ 1] 2043 	and a,#0xf 
                                   2044 ; move x to procedure address field 	
      000BA5 4C               [ 1] 2045 	inc a 
      000BA6 C7 00 0D         [ 1] 2046 	ld acc8,a 
      000BA9 72 5F 00 0C      [ 1] 2047 	clr acc16 
      000BAD 72 BB 00 0C      [ 2] 2048 	addw x,acc16 
      000BB1 FE               [ 2] 2049 	ldw x,(x) ; routine index  
                                   2050 ;determine keyword type bits 7:6 
      000BB2 7B 01            [ 1] 2051 	ld a,(NLEN,sp)
      000BB4 4E               [ 1] 2052 	swap a 
      000BB5 A4 0C            [ 1] 2053 	and a,#0xc
      000BB7 44               [ 1] 2054 	srl a
      000BB8 44               [ 1] 2055 	srl a 
      000BB9 AB 80            [ 1] 2056 	add a,#128
      000BBB                       2057 search_exit: 
      000BBB                       2058 	_drop VSIZE 	 
      000BBB 5B 05            [ 2]    1     addw sp,#VSIZE 
      000BBD 81               [ 4] 2059 	ret 
                                   2060 
                                   2061 ;---------------------
                                   2062 ; check if next token
                                   2063 ;  is of expected type 
                                   2064 ; input:
                                   2065 ;   A 		 expected token attribute
                                   2066 ;  ouput:
                                   2067 ;   none     if fail call syntax_error 
                                   2068 ;--------------------
      000BBE                       2069 expect:
      000BBE 88               [ 1] 2070 	push a 
      000BBF CD 08 17         [ 4] 2071 	call next_token 
      000BC2 11 01            [ 1] 2072 	cp a,(1,sp)
      000BC4 27 03            [ 1] 2073 	jreq 1$
      000BC6 CC 07 28         [ 2] 2074 	jp syntax_error
      000BC9 84               [ 1] 2075 1$: pop a 
      000BCA 81               [ 4] 2076 	ret 
                                   2077 
                                   2078 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2079 ; parse arguments list 
                                   2080 ; between ()
                                   2081 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BCB                       2082 func_args:
      000BCB A6 07            [ 1] 2083 	ld a,#TK_LPAREN 
      000BCD CD 0B BE         [ 4] 2084 	call expect 
                                   2085 ; expected to continue in arg_list 
                                   2086 ; caller must check for TK_RPAREN 
                                   2087 
                                   2088 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2089 ; parse embedded BASIC routines 
                                   2090 ; arguments list.
                                   2091 ; arg_list::=  rel[','rel]*
                                   2092 ; all arguments are of integer type
                                   2093 ; and pushed on stack 
                                   2094 ; input:
                                   2095 ;   none
                                   2096 ; output:
                                   2097 ;   stack{n}   arguments pushed on stack
                                   2098 ;   A 	number of arguments pushed on stack  
                                   2099 ;--------------------------------
      000BD0                       2100 arg_list:
      000BD0 4B 00            [ 1] 2101 	push #0  
      000BD2 CD 0D 18         [ 4] 2102 1$: call relation
      000BD5 A1 00            [ 1] 2103 	cp a,#TK_NONE 
      000BD7 27 20            [ 1] 2104 	jreq 5$
      000BD9 A1 84            [ 1] 2105 	cp a,#TK_INTGR
      000BDB 26 13            [ 1] 2106 	jrne 4$
      000BDD                       2107 3$: 
                                   2108 ; swap return address with argument
      000BDD 84               [ 1] 2109 	pop a ; arg_count
      000BDE 90 85            [ 2] 2110 	popw y ; return address 
      000BE0 89               [ 2] 2111 	pushw x ; new argument 
      000BE1 90 89            [ 2] 2112 	pushw y 
      000BE3 4C               [ 1] 2113     inc a
      000BE4 88               [ 1] 2114 	push a 
      000BE5 CD 08 17         [ 4] 2115 	call next_token 
      000BE8 A1 09            [ 1] 2116 	cp a,#TK_COMMA 
      000BEA 27 E6            [ 1] 2117 	jreq 1$ 
      000BEC A1 00            [ 1] 2118 	cp a,#TK_NONE 
      000BEE 27 09            [ 1] 2119 	jreq 5$ 
      000BF0 A1 08            [ 1] 2120 4$:	cp a,#TK_RPAREN 
      000BF2 27 05            [ 1] 2121 	jreq 5$
      000BF4                       2122 	_unget_token 
      000BF4 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000BF9 84               [ 1] 2123 5$:	pop a  
      000BFA 81               [ 4] 2124 	ret 
                                   2125 
                                   2126 ;--------------------------------
                                   2127 ;   BASIC commnands 
                                   2128 ;--------------------------------
                                   2129 
                                   2130 ;--------------------------------
                                   2131 ;  arithmetic and relational 
                                   2132 ;  routines
                                   2133 ;  operators precedence
                                   2134 ;  highest to lowest
                                   2135 ;  operators on same row have 
                                   2136 ;  same precedence and are executed
                                   2137 ;  from left to right.
                                   2138 ;	'*','/','%'
                                   2139 ;   '-','+'
                                   2140 ;   '=','>','<','>=','<=','<>','><'
                                   2141 ;   '<>' and '><' are equivalent for not equal.
                                   2142 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2143 
                                   2144 ;---------------------
                                   2145 ; return array element
                                   2146 ; address from @(expr)
                                   2147 ; input:
                                   2148 ;   A 		TK_ARRAY
                                   2149 ; output:
                                   2150 ;   A 		TK_INTGR
                                   2151 ;	X 		element address 
                                   2152 ;----------------------
      000BFB                       2153 get_array_element:
      000BFB CD 0B CB         [ 4] 2154 	call func_args 
      000BFE A1 01            [ 1] 2155 	cp a,#1
      000C00 27 03            [ 1] 2156 	jreq 1$
      000C02 CC 07 28         [ 2] 2157 	jp syntax_error
      000C05 85               [ 2] 2158 1$: popw x 
                                   2159 	; check for bounds 
      000C06 C3 00 1E         [ 2] 2160 	cpw x,array_size 
      000C09 23 05            [ 2] 2161 	jrule 3$
                                   2162 ; bounds {1..array_size}	
      000C0B A6 0A            [ 1] 2163 2$: ld a,#ERR_BAD_VALUE 
      000C0D CC 07 2A         [ 2] 2164 	jp tb_error 
      000C10 5D               [ 2] 2165 3$: tnzw  x
      000C11 27 F8            [ 1] 2166 	jreq 2$ 
      000C13 58               [ 2] 2167 	sllw x 
      000C14 89               [ 2] 2168 	pushw x 
      000C15 AE 16 90         [ 2] 2169 	ldw x,#tib
      000C18 72 F0 01         [ 2] 2170 	subw x,(1,sp)
      000C1B                       2171 	_drop 2   
      000C1B 5B 02            [ 2]    1     addw sp,#2 
      000C1D A6 84            [ 1] 2172 	ld a,#TK_INTGR
      000C1F 81               [ 4] 2173 	ret 
                                   2174 
                                   2175 
                                   2176 ;***********************************
                                   2177 ;   expression parse,execute 
                                   2178 ;***********************************
                                   2179 ;-----------------------------------
                                   2180 ; factor ::= ['+'|'-'|e]  var | @ |
                                   2181 ;			 integer | function |
                                   2182 ;			 '('relation')' 
                                   2183 ; output:
                                   2184 ;   A    token attribute 
                                   2185 ;   X 	 integer
                                   2186 ; ---------------------------------
                           000001  2187 	NEG=1
                           000001  2188 	VSIZE=1
      000C20                       2189 factor:
      000C20                       2190 	_vars VSIZE 
      000C20 52 01            [ 2]    1     sub sp,#VSIZE 
      000C22 CD 08 17         [ 4] 2191 	call next_token
      000C25 A1 02            [ 1] 2192 	cp a,#CMD_END  
      000C27 25 3D            [ 1] 2193 	jrult 16$
      000C29 6B 01            [ 1] 2194 1$:	ld (NEG,sp),a 
      000C2B A4 30            [ 1] 2195 	and a,#TK_GRP_MASK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000C2D A1 10            [ 1] 2196 	cp a,#TK_GRP_ADD 
      000C2F 27 04            [ 1] 2197 	jreq 2$
      000C31 7B 01            [ 1] 2198 	ld a,(NEG,sp)
      000C33 20 03            [ 2] 2199 	jra 4$  
      000C35                       2200 2$:	
      000C35 CD 08 17         [ 4] 2201 	call next_token 
      000C38                       2202 4$:	
      000C38 A1 81            [ 1] 2203 	cp a,#TK_IFUNC 
      000C3A 26 03            [ 1] 2204 	jrne 5$ 
      000C3C FD               [ 4] 2205 	call (x) 
      000C3D 20 32            [ 2] 2206 	jra 18$ 
      000C3F                       2207 5$:
      000C3F A1 84            [ 1] 2208 	cp a,#TK_INTGR
      000C41 26 02            [ 1] 2209 	jrne 6$
      000C43 20 2C            [ 2] 2210 	jra 18$
      000C45                       2211 6$:
      000C45 A1 06            [ 1] 2212 	cp a,#TK_ARRAY
      000C47 26 06            [ 1] 2213 	jrne 10$
      000C49 CD 0B FB         [ 4] 2214 	call get_array_element
      000C4C FE               [ 2] 2215 	ldw x,(x)
      000C4D 20 22            [ 2] 2216 	jra 18$ 
      000C4F                       2217 10$:
      000C4F A1 85            [ 1] 2218 	cp a,#TK_VAR 
      000C51 26 03            [ 1] 2219 	jrne 12$
      000C53 FE               [ 2] 2220 	ldw x,(x)
      000C54 20 1B            [ 2] 2221 	jra 18$
      000C56                       2222 12$:			
      000C56 A1 07            [ 1] 2223 	cp a,#TK_LPAREN
      000C58 26 0C            [ 1] 2224 	jrne 16$
      000C5A CD 0D 18         [ 4] 2225 	call relation
      000C5D 89               [ 2] 2226 	pushw x 
      000C5E A6 08            [ 1] 2227 	ld a,#TK_RPAREN 
      000C60 CD 0B BE         [ 4] 2228 	call expect
      000C63 85               [ 2] 2229 	popw x 
      000C64 20 0B            [ 2] 2230 	jra 18$	
      000C66                       2231 16$:
      000C66 4D               [ 1] 2232 	tnz a 
      000C67 27 11            [ 1] 2233 	jreq 20$ 
      000C69                       2234 	_unget_token
      000C69 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000C6E 4F               [ 1] 2235 	clr a 
      000C6F 20 09            [ 2] 2236 	jra 20$ 
      000C71                       2237 18$: 
      000C71 A6 11            [ 1] 2238 	ld a,#TK_MINUS 
      000C73 11 01            [ 1] 2239 	cp a,(NEG,sp)
      000C75 26 01            [ 1] 2240 	jrne 19$
      000C77 50               [ 2] 2241 	negw x
      000C78                       2242 19$:
      000C78 A6 84            [ 1] 2243 	ld a,#TK_INTGR
      000C7A                       2244 20$:
      000C7A                       2245 	_drop VSIZE
      000C7A 5B 01            [ 2]    1     addw sp,#VSIZE 
      000C7C 81               [ 4] 2246 	ret
                                   2247 
                                   2248 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2249 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   2250 ; output:
                                   2251 ;   A    	token attribute 
                                   2252 ;	X		integer
                                   2253 ;-----------------------------------
                           000001  2254 	N1=1   ; int16_t
                           000003  2255 	MULOP=3
                           000003  2256 	VSIZE=3
      000C7D                       2257 term:
      000C7D                       2258 	_vars VSIZE
      000C7D 52 03            [ 2]    1     sub sp,#VSIZE 
      000C7F CD 0C 20         [ 4] 2259 	call factor
      000C82 4D               [ 1] 2260 	tnz a 
      000C83 27 47            [ 1] 2261 	jreq term_exit 
      000C85                       2262 term01:	 ; check for  operator 
      000C85 1F 01            [ 2] 2263 	ldw (N1,sp),x  ; save first factor 
      000C87 CD 08 17         [ 4] 2264 	call next_token
      000C8A 6B 03            [ 1] 2265 	ld (MULOP,sp),a
      000C8C A1 02            [ 1] 2266 	cp a,#CMD_END
      000C8E 25 2F            [ 1] 2267 	jrult 8$
      000C90 A4 30            [ 1] 2268 	and a,#TK_GRP_MASK
      000C92 A1 20            [ 1] 2269 	cp a,#TK_GRP_MULT
      000C94 27 02            [ 1] 2270 	jreq 1$
      000C96 20 27            [ 2] 2271 	jra 8$
      000C98                       2272 1$:	; got *|/|%
      000C98 CD 0C 20         [ 4] 2273 	call factor
      000C9B A1 84            [ 1] 2274 	cp a,#TK_INTGR
      000C9D 27 03            [ 1] 2275 	jreq 2$
      000C9F CC 07 28         [ 2] 2276 	jp syntax_error
      000CA2 90 93            [ 1] 2277 2$:	ldw y,x 
      000CA4 1E 01            [ 2] 2278 	ldw x,(N1,sp)
      000CA6 7B 03            [ 1] 2279 	ld a,(MULOP,sp) 
      000CA8 A1 20            [ 1] 2280 	cp a,#TK_MULT 
      000CAA 26 05            [ 1] 2281 	jrne 3$
      000CAC CD 0A 81         [ 4] 2282 	call multiply 
      000CAF 20 D4            [ 2] 2283 	jra term01
      000CB1 A1 21            [ 1] 2284 3$: cp a,#TK_DIV 
      000CB3 26 05            [ 1] 2285 	jrne 4$ 
      000CB5 CD 0B 3A         [ 4] 2286 	call divide 
      000CB8 20 CB            [ 2] 2287 	jra term01 
      000CBA CD 0B 50         [ 4] 2288 4$: call modulo
      000CBD 20 C6            [ 2] 2289 	jra term01 
      000CBF 7B 03            [ 1] 2290 8$: ld a,(MULOP,sp)
      000CC1 27 05            [ 1] 2291 	jreq 9$ 
      000CC3                       2292 	_unget_token
      000CC3 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000CC8 1E 01            [ 2] 2293 9$: ldw x,(N1,sp)
      000CCA A6 84            [ 1] 2294 	ld a,#TK_INTGR 	
      000CCC                       2295 term_exit:
      000CCC                       2296 	_drop VSIZE 
      000CCC 5B 03            [ 2]    1     addw sp,#VSIZE 
      000CCE 81               [ 4] 2297 	ret 
                                   2298 
                                   2299 ;-------------------------------
                                   2300 ;  expr ::= term [['+'|'-'] term]*
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2301 ;  result range {-32768..32767}
                                   2302 ;  output:
                                   2303 ;   A    token attribute 
                                   2304 ;   X	 integer   
                                   2305 ;-------------------------------
                           000001  2306 	N1=1
                           000003  2307 	N2=3 
                           000005  2308 	OP=5 
                           000005  2309 	VSIZE=5 
      000CCF                       2310 expression:
      000CCF                       2311 	_vars VSIZE 
      000CCF 52 05            [ 2]    1     sub sp,#VSIZE 
      000CD1 CD 0C 7D         [ 4] 2312 	call term
      000CD4 4D               [ 1] 2313 	tnz a 
      000CD5 27 3E            [ 1] 2314 	jreq expr_exit 
      000CD7 1F 01            [ 2] 2315 1$:	ldw (N1,sp),x 
      000CD9 CD 08 17         [ 4] 2316 	call next_token
      000CDC 6B 05            [ 1] 2317 	ld (OP,sp),a 
      000CDE A1 02            [ 1] 2318 	cp a,#CMD_END 
      000CE0 25 26            [ 1] 2319 	jrult 8$ 
      000CE2 A4 30            [ 1] 2320 	and a,#TK_GRP_MASK
      000CE4 A1 10            [ 1] 2321 	cp a,#TK_GRP_ADD 
      000CE6 27 02            [ 1] 2322 	jreq 2$ 
      000CE8 20 1E            [ 2] 2323 	jra 8$
      000CEA                       2324 2$: 
      000CEA CD 0C 7D         [ 4] 2325 	call term
      000CED A1 84            [ 1] 2326 	cp a,#TK_INTGR
      000CEF 27 03            [ 1] 2327 	jreq 3$
      000CF1 CC 07 28         [ 2] 2328 	jp syntax_error
      000CF4 1F 03            [ 2] 2329 3$:	ldw (N2,sp),x 
      000CF6 1E 01            [ 2] 2330 	ldw x,(N1,sp)
      000CF8 7B 05            [ 1] 2331 	ld a,(OP,sp)
      000CFA A1 10            [ 1] 2332 	cp a,#TK_PLUS 
      000CFC 26 05            [ 1] 2333 	jrne 4$
      000CFE 72 FB 03         [ 2] 2334 	addw x,(N2,sp)
      000D01 20 D4            [ 2] 2335 	jra 1$ 
      000D03 72 F0 03         [ 2] 2336 4$:	subw x,(N2,sp)
      000D06 20 CF            [ 2] 2337 	jra 1$
      000D08 7B 05            [ 1] 2338 8$: ld a,(OP,sp)
      000D0A 27 05            [ 1] 2339 	jreq 9$ 
      000D0C                       2340 	_unget_token	
      000D0C 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D11 1E 01            [ 2] 2341 9$: ldw x,(N1,sp)
      000D13 A6 84            [ 1] 2342 	ld a,#TK_INTGR	
      000D15                       2343 expr_exit:
      000D15                       2344 	_drop VSIZE 
      000D15 5B 05            [ 2]    1     addw sp,#VSIZE 
      000D17 81               [ 4] 2345 	ret 
                                   2346 
                                   2347 ;---------------------------------------------
                                   2348 ; rel ::= expr rel_op expr
                                   2349 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   2350 ;  relation return  integer , zero is false 
                                   2351 ;  output:
                                   2352 ;    A 		token attribute  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2353 ;	 X		integer 
                                   2354 ;---------------------------------------------
                           000001  2355 	N1=1
                           000003  2356 	RELOP=3
                           000003  2357 	VSIZE=3 
      000D18                       2358 relation: 
      000D18                       2359 	_vars VSIZE
      000D18 52 03            [ 2]    1     sub sp,#VSIZE 
      000D1A CD 0C CF         [ 4] 2360 	call expression
      000D1D 4D               [ 1] 2361 	tnz a 
      000D1E 27 4D            [ 1] 2362 	jreq rel_exit
      000D20 1F 01            [ 2] 2363 	ldw (N1,sp),x 
                                   2364 ; expect rel_op or leave 
      000D22 CD 08 17         [ 4] 2365 	call next_token 
      000D25 6B 03            [ 1] 2366 	ld (RELOP,sp),a 
      000D27 A4 30            [ 1] 2367 	and a,#TK_GRP_MASK
      000D29 A1 30            [ 1] 2368 	cp a,#TK_GRP_RELOP 
      000D2B 26 33            [ 1] 2369 	jrne 8$
      000D2D                       2370 2$:	; expect another expression
      000D2D CD 0C CF         [ 4] 2371 	call expression
      000D30 A1 84            [ 1] 2372 	cp a,#TK_INTGR
      000D32 27 03            [ 1] 2373 	jreq 3$
      000D34 CC 07 28         [ 2] 2374 	jp syntax_error 
      000D37 CF 00 0C         [ 2] 2375 3$:	ldw acc16,x 
      000D3A 1E 01            [ 2] 2376 	ldw x,(N1,sp) 
      000D3C 72 B0 00 0C      [ 2] 2377 	subw x,acc16
      000D40 26 06            [ 1] 2378 	jrne 4$
      000D42 35 02 00 0D      [ 1] 2379 	mov acc8,#2 ; n1==n2
      000D46 20 0C            [ 2] 2380 	jra 6$ 
      000D48                       2381 4$: 
      000D48 2C 06            [ 1] 2382 	jrsgt 5$  
      000D4A 35 04 00 0D      [ 1] 2383 	mov acc8,#4 ; n1<2 
      000D4E 20 04            [ 2] 2384 	jra 6$
      000D50                       2385 5$:
      000D50 35 01 00 0D      [ 1] 2386 	mov acc8,#1 ; n1>n2 
      000D54                       2387 6$:
      000D54 5F               [ 1] 2388 	clrw x 
      000D55 C6 00 0D         [ 1] 2389 	ld a, acc8  
      000D58 14 03            [ 1] 2390 	and a,(RELOP,sp)
      000D5A 4D               [ 1] 2391 	tnz a 
      000D5B 27 0E            [ 1] 2392 	jreq 10$
      000D5D 5C               [ 1] 2393 	incw x 
      000D5E 20 0B            [ 2] 2394 	jra 10$  	
      000D60 7B 03            [ 1] 2395 8$: ld a,(RELOP,sp)
      000D62 27 05            [ 1] 2396 	jreq 9$
      000D64                       2397 	_unget_token
      000D64 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D69                       2398 9$: 
      000D69 1E 01            [ 2] 2399 	ldw x,(N1,sp)
      000D6B                       2400 10$:
      000D6B A6 84            [ 1] 2401 	ld a,#TK_INTGR
      000D6D                       2402 rel_exit:
      000D6D                       2403 	_drop VSIZE
      000D6D 5B 03            [ 2]    1     addw sp,#VSIZE 
      000D6F 81               [ 4] 2404 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2405 
                                   2406 ;--------------------------------
                                   2407 ; BASIC: SHOW 
                                   2408 ; print stack content in hexadecimal bytes 
                                   2409 ; 16 bytes per row 
                                   2410 ;--------------------------------
      000D70                       2411 show:
      000D70 AE 0D 8A         [ 2] 2412 	ldw x,#cstk_prompt
      000D73 CD 20 43         [ 4] 2413 	call puts 
      000D76 96               [ 1] 2414 	ldw x,sp 
      000D77 1C 00 03         [ 2] 2415 	addw x,#3 ; ignore return address
      000D7A 90 AE 18 00      [ 2] 2416 	ldw y,#RAM_SIZE  
      000D7E CF 00 0C         [ 2] 2417 	ldw acc16,x 
      000D81 72 B2 00 0C      [ 2] 2418 	subw y,acc16
      000D85 CD 03 4F         [ 4] 2419 	call hex_dump
      000D88 4F               [ 1] 2420 	clr a 
      000D89 81               [ 4] 2421 	ret
                                   2422 
      000D8A 0A 63 6F 6E 74 65 6E  2423 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   2424 
                                   2425 
                                   2426 ;--------------------------------------------
                                   2427 ; BASIC: HEX 
                                   2428 ; select hexadecimal base for integer print
                                   2429 ;---------------------------------------------
      000DB1                       2430 hex_base:
      000DB1 35 10 00 0A      [ 1] 2431 	mov base,#16 
      000DB5 81               [ 4] 2432 	ret 
                                   2433 
                                   2434 ;--------------------------------------------
                                   2435 ; BASIC: DEC 
                                   2436 ; select decimal base for integer print
                                   2437 ;---------------------------------------------
      000DB6                       2438 dec_base:
      000DB6 35 0A 00 0A      [ 1] 2439 	mov base,#10
      000DBA 81               [ 4] 2440 	ret 
                                   2441 
                                   2442 ;------------------------
                                   2443 ; BASIC: FREE 
                                   2444 ; return free size in RAM 
                                   2445 ; output:
                                   2446 ;   A 		TK_INTGR
                                   2447 ;   X 	    size integer
                                   2448 ;--------------------------
      000DBB                       2449 free:
      000DBB AE 16 90         [ 2] 2450 	ldw x,#tib 
      000DBE 90 CE 00 19      [ 2] 2451 	ldw y,txtbgn 
      000DC2 90 A3 2A 00      [ 2] 2452 	cpw y,#app_space
      000DC6 25 05            [ 1] 2453 	jrult 1$
      000DC8 1D 00 80         [ 2] 2454 	subw x,#free_ram 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000DCB 20 04            [ 2] 2455 	jra 2$ 
      000DCD                       2456 1$:	
      000DCD 72 B0 00 1B      [ 2] 2457 	subw x,txtend 
      000DD1 A6 84            [ 1] 2458 2$:	ld a,#TK_INTGR
      000DD3 81               [ 4] 2459 	ret 
                                   2460 
                                   2461 ;------------------------------
                                   2462 ; BASIC: SIZE 
                                   2463 ; command that print 
                                   2464 ; program start addres and size 
                                   2465 ;------------------------------
      000DD4                       2466 cmd_size:
      000DD4 3B 00 0A         [ 1] 2467 	push base 
      000DD7 AE 0E 01         [ 2] 2468 	ldw x,#PROG_ADDR 
      000DDA CD 20 43         [ 4] 2469 	call puts 
      000DDD CE 00 19         [ 2] 2470 	ldw x,txtbgn     
      000DE0 35 10 00 0A      [ 1] 2471 	mov base,#16 
      000DE4 CD 08 72         [ 4] 2472 	call print_int
      000DE7 32 00 0A         [ 1] 2473 	pop base 
      000DEA AE 0E 13         [ 2] 2474 	ldw x,#PROG_SIZE 
      000DED CD 20 43         [ 4] 2475 	call puts 
      000DF0 CE 00 1B         [ 2] 2476 	ldw x,txtend 
      000DF3 72 B0 00 19      [ 2] 2477 	subw x,txtbgn 
      000DF7 CD 08 72         [ 4] 2478 	call print_int
      000DFA AE 0E 22         [ 2] 2479 	ldw x,#STR_BYTES 
      000DFD CD 20 43         [ 4] 2480 	call puts  
      000E00 81               [ 4] 2481 	ret 
                                   2482 
      000E01 70 72 6F 67 72 61 6D  2483 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      000E13 70 72 6F 67 72 61 6D  2484 PROG_SIZE: .asciz "program size: "
             20 73 69 7A 65 3A 20
             00
      000E22 62 79 74 65 73 0A 00  2485 STR_BYTES: .asciz "bytes\n" 
                                   2486 
                                   2487 ;------------------------
                                   2488 ; BASIC: UBOUND  
                                   2489 ; return array variable size 
                                   2490 ; output:
                                   2491 ;   A 		TK_INTGR
                                   2492 ;   X 	    array size 
                                   2493 ;--------------------------
      000E29                       2494 ubound:
      000E29 CD 0D BB         [ 4] 2495 	call free 
      000E2C 54               [ 2] 2496 	srlw x 
      000E2D CF 00 1E         [ 2] 2497 	ldw array_size,x
      000E30 A6 84            [ 1] 2498 	ld a,#TK_INTGR
      000E32 81               [ 4] 2499 	ret 
                                   2500 
                                   2501 ;-----------------------------
                                   2502 ; BASIC: LET var=expr 
                                   2503 ; variable assignement 
                                   2504 ; output:
                                   2505 ;   A 		TK_NONE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2506 ;-----------------------------
      000E33                       2507 let::
      000E33 CD 08 17         [ 4] 2508 	call next_token 
      000E36 A1 85            [ 1] 2509 	cp a,#TK_VAR 
      000E38 27 0A            [ 1] 2510 	jreq let_var
      000E3A A1 06            [ 1] 2511 	cp a,#TK_ARRAY 
      000E3C 27 03            [ 1] 2512 	jreq  let_array
      000E3E CC 07 28         [ 2] 2513 	jp syntax_error
      000E41                       2514 let_array:
      000E41 CD 0B FB         [ 4] 2515 	call get_array_element
      000E44                       2516 let_var:
      000E44 89               [ 2] 2517 	pushw x  
      000E45 CD 08 17         [ 4] 2518 	call next_token 
      000E48 A1 32            [ 1] 2519 	cp a,#TK_EQUAL
      000E4A 27 03            [ 1] 2520 	jreq 1$
      000E4C CC 07 28         [ 2] 2521 	jp syntax_error
      000E4F                       2522 1$:	
      000E4F CD 0D 18         [ 4] 2523 	call relation   
      000E52 A1 84            [ 1] 2524 	cp a,#TK_INTGR 
      000E54 27 03            [ 1] 2525 	jreq 2$
      000E56 CC 07 28         [ 2] 2526 	jp syntax_error
      000E59                       2527 2$:	
      000E59 90 93            [ 1] 2528 	ldw y,x 
      000E5B 85               [ 2] 2529 	popw x   
      000E5C FF               [ 2] 2530 	ldw (x),y   
      000E5D 81               [ 4] 2531 	ret 
                                   2532 
                                   2533 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2534 ; return program size 
                                   2535 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E5E                       2536 prog_size:
      000E5E CE 00 1B         [ 2] 2537 	ldw x,txtend 
      000E61 72 B0 00 19      [ 2] 2538 	subw x,txtbgn 
      000E65 81               [ 4] 2539 	ret 
                                   2540 
                                   2541 ;----------------------------
                                   2542 ; BASIC: LIST [[start][,end]]
                                   2543 ; list program lines 
                                   2544 ; form start to end 
                                   2545 ; if empty argument list then 
                                   2546 ; list all.
                                   2547 ;----------------------------
                           000001  2548 	FIRST=1
                           000003  2549 	LAST=3 
                           000005  2550 	LN_PTR=5
                           000006  2551 	VSIZE=6 
      000E66                       2552 list:
      000E66 CE 00 19         [ 2] 2553 	ldw x,txtbgn 
      000E69 C3 00 1B         [ 2] 2554 	cpw x,txtend 
      000E6C 2B 01            [ 1] 2555 	jrmi 1$
      000E6E 81               [ 4] 2556 	ret 
      000E6F                       2557 1$:	
      000E6F AE 0E 13         [ 2] 2558 	ldw x,#PROG_SIZE
      000E72 CD 20 43         [ 4] 2559 	call puts 
      000E75 CE 00 1B         [ 2] 2560 	ldw x,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000E78 72 B0 00 19      [ 2] 2561 	subw x,txtbgn 
      000E7C CD 08 72         [ 4] 2562 	call print_int 
      000E7F AE 0E 22         [ 2] 2563 	ldw x,#STR_BYTES 
      000E82 CD 20 43         [ 4] 2564 	call puts 
      000E85                       2565 	_vars VSIZE
      000E85 52 06            [ 2]    1     sub sp,#VSIZE 
      000E87 CE 00 19         [ 2] 2566 	ldw x,txtbgn 
      000E8A 1F 05            [ 2] 2567 	ldw (LN_PTR,sp),x 
      000E8C FE               [ 2] 2568 	ldw x,(x) 
      000E8D 1F 01            [ 2] 2569 	ldw (FIRST,sp),x ; list from first line 
      000E8F AE 7F FF         [ 2] 2570 	ldw x,#MAX_LINENO ; biggest line number 
      000E92 1F 03            [ 2] 2571 	ldw (LAST,sp),x 
      000E94 CD 0B D0         [ 4] 2572 	call arg_list
      000E97 4D               [ 1] 2573 	tnz a
      000E98 27 31            [ 1] 2574 	jreq list_loop 
      000E9A A1 02            [ 1] 2575 	cp a,#2 
      000E9C 27 07            [ 1] 2576 	jreq 4$
      000E9E A1 01            [ 1] 2577 	cp a,#1 
      000EA0 27 06            [ 1] 2578 	jreq first_line 
      000EA2 CC 07 28         [ 2] 2579 	jp syntax_error 
      000EA5 85               [ 2] 2580 4$:	popw x 
      000EA6 1F 05            [ 2] 2581 	ldw (LAST+2,sp),x 
      000EA8                       2582 first_line:
      000EA8 85               [ 2] 2583 	popw x
      000EA9 1F 01            [ 2] 2584 	ldw (FIRST,sp),x 
      000EAB                       2585 lines_skip:
      000EAB CE 00 19         [ 2] 2586 	ldw x,txtbgn
      000EAE 1F 05            [ 2] 2587 2$:	ldw (LN_PTR,sp),x 
      000EB0 C3 00 1B         [ 2] 2588 	cpw x,txtend 
      000EB3 2A 38            [ 1] 2589 	jrpl list_exit 
      000EB5 FE               [ 2] 2590 	ldw x,(x) ;line# 
      000EB6 13 01            [ 2] 2591 	cpw x,(FIRST,sp)
      000EB8 2A 11            [ 1] 2592 	jrpl list_loop 
      000EBA 1E 05            [ 2] 2593 	ldw x,(LN_PTR,sp) 
      000EBC E6 02            [ 1] 2594 	ld a,(2,x)
      000EBE C7 00 0D         [ 1] 2595 	ld acc8,a 
      000EC1 72 5F 00 0C      [ 1] 2596 	clr acc16 
      000EC5 72 BB 00 0C      [ 2] 2597 	addw x,acc16
      000EC9 20 E3            [ 2] 2598 	jra 2$ 
                                   2599 ; print loop
      000ECB                       2600 list_loop:
      000ECB 1E 05            [ 2] 2601 	ldw x,(LN_PTR,sp)
      000ECD E6 02            [ 1] 2602 	ld a,(2,x) 
      000ECF CD 0F 3F         [ 4] 2603 	call prt_basic_line
      000ED2 1E 05            [ 2] 2604 	ldw x,(LN_PTR,sp)
      000ED4 E6 02            [ 1] 2605 	ld a,(2,x)
      000ED6 C7 00 0D         [ 1] 2606 	ld acc8,a 
      000ED9 72 5F 00 0C      [ 1] 2607 	clr acc16 
      000EDD 72 BB 00 0C      [ 2] 2608 	addw x,acc16
      000EE1 C3 00 1B         [ 2] 2609 	cpw x,txtend 
      000EE4 2A 07            [ 1] 2610 	jrpl list_exit
      000EE6 1F 05            [ 2] 2611 	ldw (LN_PTR,sp),x
      000EE8 FE               [ 2] 2612 	ldw x,(x)
      000EE9 13 03            [ 2] 2613 	cpw x,(LAST,sp)  
      000EEB 2F DE            [ 1] 2614 	jrslt list_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000EED                       2615 list_exit:
      000EED 55 00 03 00 01   [ 1] 2616 	mov in,count 
      000EF2 AE 16 E0         [ 2] 2617 	ldw x,#pad 
      000EF5 CF 00 04         [ 2] 2618 	ldw basicptr,x 
      000EF8                       2619 	_drop VSIZE 
      000EF8 5B 06            [ 2]    1     addw sp,#VSIZE 
      000EFA 81               [ 4] 2620 	ret
                                   2621 
                                   2622 
                                   2623 ;--------------------------
                                   2624 ; BASIC: EDIT \E | \F
                                   2625 ;  copy program in FLASH 
                                   2626 ;  to RAM for edition 
                                   2627 ;-------------------------
      000EFB                       2628 edit:
      000EFB CD 14 CF         [ 4] 2629 	call qsign 
      000EFE 27 07            [ 1] 2630 	jreq 1$ 
      000F00 AE 0F 28         [ 2] 2631 	ldw x,#NOT_SAVED 
      000F03 CD 20 43         [ 4] 2632 	call puts 
      000F06 81               [ 4] 2633 	ret 
      000F07                       2634 1$: 
      000F07 90 AE 2A 00      [ 2] 2635 	ldw y,#app_sign ; source address 
      000F0B CE 2A 02         [ 2] 2636     ldw x,app_size  
      000F0E 1C 00 04         [ 2] 2637 	addw x,#4 
      000F11 CF 00 0C         [ 2] 2638 	ldw acc16,x  ; bytes to copy 
      000F14 AE 00 7C         [ 2] 2639 	ldw x,#rsign ; destination address 
      000F17 CD 03 B6         [ 4] 2640 	call move  
      000F1A AE 00 80         [ 2] 2641 	ldw x,#free_ram 
      000F1D CF 00 19         [ 2] 2642 	ldw txtbgn,x 
      000F20 72 BB 00 7E      [ 2] 2643 	addw x,rsize  
      000F24 CF 00 1B         [ 2] 2644 	ldw txtend,x 
      000F27 81               [ 4] 2645 	ret 
                                   2646 
      000F28 4E 6F 20 61 70 70 6C  2647 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   2648 
                                   2649 ;--------------------------
                                   2650 ; decompile line from token list
                                   2651 ; and print it. 
                                   2652 ; input:
                                   2653 ;   A       stop at this position 
                                   2654 ;   X 		pointer at line
                                   2655 ; output:
                                   2656 ;   none 
                                   2657 ;--------------------------	
      000F3F                       2658 prt_basic_line:
      000F3F C7 00 03         [ 1] 2659 	ld count,a 
      000F42 E6 02            [ 1] 2660 	ld a,(2,x)
      000F44 C1 00 03         [ 1] 2661 	cp a,count 
      000F47 2A 03            [ 1] 2662 	jrpl 1$ 
      000F49 C7 00 03         [ 1] 2663 	ld count,a 
      000F4C CF 00 04         [ 2] 2664 1$:	ldw basicptr,x 
      000F4F 90 AE 16 90      [ 2] 2665 	ldw y,#tib  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000F53 CD 28 3C         [ 4] 2666 	call decompile 
      000F56 CD 20 43         [ 4] 2667 	call puts 
      000F59 A6 0D            [ 1] 2668 	ld a,#CR 
      000F5B CD 02 B2         [ 4] 2669 	call putc 
      000F5E 81               [ 4] 2670 	ret 
                                   2671 
                                   2672 
                                   2673 
                                   2674 ;---------------------------------
                                   2675 ; BASIC: PRINT|? arg_list 
                                   2676 ; print values from argument list
                                   2677 ;----------------------------------
                           000001  2678 	CCOMMA=1
                           000001  2679 	VSIZE=1
      000F5F                       2680 print:
      000F5F                       2681 	_vars VSIZE 
      000F5F 52 01            [ 2]    1     sub sp,#VSIZE 
      000F61                       2682 reset_comma:
      000F61 0F 01            [ 1] 2683 	clr (CCOMMA,sp)
      000F63                       2684 prt_loop:
      000F63 CD 08 17         [ 4] 2685 	call next_token
      000F66 A1 02            [ 1] 2686 	cp a,#CMD_END 
      000F68 25 4F            [ 1] 2687 	jrult print_exit ; colon or end of line 
      000F6A A1 02            [ 1] 2688 	cp a,#TK_QSTR
      000F6C 27 12            [ 1] 2689 	jreq 1$
      000F6E A1 03            [ 1] 2690 	cp a,#TK_CHAR 
      000F70 27 13            [ 1] 2691 	jreq 2$ 
      000F72 A1 82            [ 1] 2692 	cp a,#TK_CFUNC 
      000F74 27 15            [ 1] 2693 	jreq 3$
      000F76 A1 09            [ 1] 2694 	cp a,#TK_COMMA 
      000F78 27 18            [ 1] 2695 	jreq 4$
      000F7A A1 0A            [ 1] 2696 	cp a,#TK_SHARP 
      000F7C 27 18            [ 1] 2697 	jreq 5$
      000F7E 20 28            [ 2] 2698 	jra 7$ 
      000F80                       2699 1$:	; print string 
      000F80 CD 20 43         [ 4] 2700 	call puts
      000F83 20 DC            [ 2] 2701 	jra reset_comma
      000F85                       2702 2$:	; print character 
      000F85 9F               [ 1] 2703 	ld a,xl 
      000F86 CD 02 B2         [ 4] 2704 	call putc 
      000F89 20 D6            [ 2] 2705 	jra reset_comma 
      000F8B                       2706 3$: ; print character function value  	
      000F8B FD               [ 4] 2707 	call (x)
      000F8C 9F               [ 1] 2708 	ld a,xl 
      000F8D CD 02 B2         [ 4] 2709 	call putc
      000F90 20 CF            [ 2] 2710 	jra reset_comma 
      000F92                       2711 4$: ; set comma state 
      000F92 03 01            [ 1] 2712 	cpl (CCOMMA,sp)
      000F94 20 CD            [ 2] 2713 	jra prt_loop   
      000F96                       2714 5$: ; # character must be followed by an integer   
      000F96 CD 08 17         [ 4] 2715 	call next_token
      000F99 A1 84            [ 1] 2716 	cp a,#TK_INTGR 
      000F9B 27 03            [ 1] 2717 	jreq 6$
      000F9D CC 07 28         [ 2] 2718 	jp syntax_error 
      000FA0                       2719 6$: ; set tab width
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000FA0 9F               [ 1] 2720 	ld a,xl 
      000FA1 A4 0F            [ 1] 2721 	and a,#15 
      000FA3 C7 00 21         [ 1] 2722 	ld tab_width,a 
      000FA6 20 B9            [ 2] 2723 	jra reset_comma 
      000FA8                       2724 7$:	
      000FA8                       2725 	_unget_token 
      000FA8 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000FAD CD 0D 18         [ 4] 2726 	call relation 
      000FB0 A1 84            [ 1] 2727 	cp a,#TK_INTGR 
      000FB2 26 05            [ 1] 2728 	jrne print_exit 
      000FB4 CD 08 72         [ 4] 2729     call print_int 
      000FB7 20 A8            [ 2] 2730 	jra reset_comma 
      000FB9                       2731 print_exit:
      000FB9 0D 01            [ 1] 2732 	tnz (CCOMMA,sp)
      000FBB 26 05            [ 1] 2733 	jrne 9$
      000FBD A6 0D            [ 1] 2734 	ld a,#CR 
      000FBF CD 02 B2         [ 4] 2735     call putc 
      000FC2                       2736 9$:	_drop VSIZE 
      000FC2 5B 01            [ 2]    1     addw sp,#VSIZE 
      000FC4 81               [ 4] 2737 	ret 
                                   2738 
                                   2739 ;----------------------
                                   2740 ; 'save_context' and
                                   2741 ; 'rest_context' must be 
                                   2742 ; called at the same 
                                   2743 ; call stack depth 
                                   2744 ; i.e. SP must have the 
                                   2745 ; save value at  
                                   2746 ; entry point of both 
                                   2747 ; routine. 
                                   2748 ;---------------------
                           000004  2749 	CTXT_SIZE=4 ; size of saved data 
                                   2750 ;--------------------
                                   2751 ; save current BASIC
                                   2752 ; interpreter context 
                                   2753 ; on stack 
                                   2754 ;--------------------
      000FC5                       2755 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000FC5                       2756 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      000FC5                       2757 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      000FC5                       2758 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      000FC5                       2759 save_context:
      000FC5 CE 00 04         [ 2] 2760 	ldw x,basicptr 
      000FC8 1F 03            [ 2] 2761 	ldw (BPTR,sp),x
      000FCA C6 00 01         [ 1] 2762 	ld a,in 
      000FCD 6B 05            [ 1] 2763 	ld (IN,sp),a
      000FCF C6 00 03         [ 1] 2764 	ld a,count 
      000FD2 6B 06            [ 1] 2765 	ld (CNT,sp),a  
      000FD4 81               [ 4] 2766 	ret
                                   2767 
                                   2768 ;-----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2769 ; restore previously saved 
                                   2770 ; BASIC interpreter context 
                                   2771 ; from stack 
                                   2772 ;-------------------------
      000FD5                       2773 rest_context:
      000FD5 1E 03            [ 2] 2774 	ldw x,(BPTR,sp)
      000FD7 CF 00 04         [ 2] 2775 	ldw basicptr,x 
      000FDA 7B 05            [ 1] 2776 	ld a,(IN,sp)
      000FDC C7 00 01         [ 1] 2777 	ld in,a
      000FDF 7B 06            [ 1] 2778 	ld a,(CNT,sp)
      000FE1 C7 00 03         [ 1] 2779 	ld count,a  
      000FE4 81               [ 4] 2780 	ret
                                   2781 
                                   2782 
                                   2783 
                                   2784 ;------------------------------------------
                                   2785 ; BASIC: INPUT [string]var[,[string]var]
                                   2786 ; input value in variables 
                                   2787 ; [string] optionally can be used as prompt 
                                   2788 ;-----------------------------------------
                           000001  2789 	CX_BPTR=1
                           000003  2790 	CX_IN=3
                           000004  2791 	CX_CNT=4
                           000005  2792 	SKIP=5
                           000006  2793 	VAR_ADDR=6
                           000007  2794 	VSIZE=7
      000FE5                       2795 input_var:
      000FE5                       2796 	_vars VSIZE 
      000FE5 52 07            [ 2]    1     sub sp,#VSIZE 
      000FE7                       2797 input_loop:
      000FE7 0F 05            [ 1] 2798 	clr (SKIP,sp)
      000FE9 CD 08 17         [ 4] 2799 	call next_token 
      000FEC A1 02            [ 1] 2800 	cp a,#TK_QSTR 
      000FEE 26 08            [ 1] 2801 	jrne 1$ 
      000FF0 CD 20 43         [ 4] 2802 	call puts 
      000FF3 03 05            [ 1] 2803 	cpl (SKIP,sp)
      000FF5 CD 08 17         [ 4] 2804 	call next_token 
      000FF8 A1 85            [ 1] 2805 1$: cp a,#TK_VAR  
      000FFA 27 03            [ 1] 2806 	jreq 2$ 
      000FFC CC 07 28         [ 2] 2807 	jp syntax_error
      000FFF 1F 06            [ 2] 2808 2$:	ldw (VAR_ADDR,sp),x 
      001001 0D 05            [ 1] 2809 	tnz (SKIP,sp)
      001003 26 06            [ 1] 2810 	jrne 21$ 
      001005 CD 28 13         [ 4] 2811 	call var_name 
      001008 CD 02 B2         [ 4] 2812 	call putc   
      00100B                       2813 21$:
      00100B A6 3A            [ 1] 2814 	ld a,#':
      00100D CD 02 B2         [ 4] 2815 	call putc 
      001010 CD 0F C5         [ 4] 2816 	call save_context 
      001013 72 5F 00 03      [ 1] 2817 	clr count  
      001017 CD 21 48         [ 4] 2818 	call readln 
      00101A AE 16 90         [ 2] 2819 	ldw x,#tib 
      00101D 3B 00 03         [ 1] 2820 	push count
      001020 4B 00            [ 1] 2821 	push #0 
      001022 72 FB 01         [ 2] 2822 	addw x,(1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      001025 5C               [ 1] 2823 	incw x 
      001026                       2824 	_drop 2 
      001026 5B 02            [ 2]    1     addw sp,#2 
      001028 72 5F 00 01      [ 1] 2825 	clr in 
      00102C CD 25 62         [ 4] 2826 	call get_token
      00102F A1 84            [ 1] 2827 	cp a,#TK_INTGR
      001031 27 06            [ 1] 2828 	jreq 3$ 
      001033 CD 0F D5         [ 4] 2829 	call rest_context 
      001036 CC 07 28         [ 2] 2830 	jp syntax_error
      001039 16 06            [ 2] 2831 3$: ldw y,(VAR_ADDR,sp) 
      00103B 90 FF            [ 2] 2832 	ldw (y),x 
      00103D CD 0F D5         [ 4] 2833 	call rest_context
      001040 CD 08 17         [ 4] 2834 	call next_token 
      001043 A1 09            [ 1] 2835 	cp a,#TK_COMMA 
      001045 27 A0            [ 1] 2836 	jreq input_loop
      001047 A1 00            [ 1] 2837 	cp a,#TK_NONE 
      001049 27 07            [ 1] 2838 	jreq input_exit  
      00104B A1 0B            [ 1] 2839 	cp a,#TK_COLON 
      00104D 27 03            [ 1] 2840     jreq input_exit 
      00104F CC 07 28         [ 2] 2841 	jp syntax_error 
      001052                       2842 input_exit:
      001052                       2843 	_drop VSIZE 
      001052 5B 07            [ 2]    1     addw sp,#VSIZE 
      001054 81               [ 4] 2844 	ret 
                                   2845 
                                   2846 
                                   2847 ;---------------------
                                   2848 ; BASIC: REMARK | ' 
                                   2849 ; skip comment to end of line 
                                   2850 ;---------------------- 
      001055                       2851 remark::
      001055 55 00 03 00 01   [ 1] 2852 	mov in,count 
      00105A 81               [ 4] 2853  	ret 
                                   2854 
                                   2855 
                                   2856 ;---------------------
                                   2857 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2858 ; read in loop 'addr'  
                                   2859 ; apply & 'mask' to value 
                                   2860 ; loop while result==0.  
                                   2861 ; 'xor_mask' is used to 
                                   2862 ; invert the wait logic.
                                   2863 ; i.e. loop while not 0.
                                   2864 ;---------------------
                           000001  2865 	XMASK=1 
                           000002  2866 	MASK=2
                           000003  2867 	ADDR=3
                           000004  2868 	VSIZE=4
      00105B                       2869 wait: 
      00105B                       2870 	_vars VSIZE
      00105B 52 04            [ 2]    1     sub sp,#VSIZE 
      00105D 0F 01            [ 1] 2871 	clr (XMASK,sp) 
      00105F CD 0B D0         [ 4] 2872 	call arg_list 
      001062 A1 02            [ 1] 2873 	cp a,#2
      001064 24 03            [ 1] 2874 	jruge 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001066 CC 07 28         [ 2] 2875 	jp syntax_error 
      001069 A1 03            [ 1] 2876 0$:	cp a,#3
      00106B 25 04            [ 1] 2877 	jrult 1$
      00106D 85               [ 2] 2878 	popw x 
      00106E 9F               [ 1] 2879 	ld a,xl
      00106F 6B 01            [ 1] 2880 	ld (XMASK,sp),a 
      001071 85               [ 2] 2881 1$: popw x ; mask 
      001072 9F               [ 1] 2882 	ld a,xl 
      001073 6B 02            [ 1] 2883 	ld (MASK,sp),a 
      001075 85               [ 2] 2884 	popw x ; address 
      001076 F6               [ 1] 2885 2$:	ld a,(x)
      001077 14 02            [ 1] 2886 	and a,(MASK,sp)
      001079 18 01            [ 1] 2887 	xor a,(XMASK,sp)
      00107B 27 F9            [ 1] 2888 	jreq 2$ 
      00107D                       2889 	_drop VSIZE 
      00107D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00107F 81               [ 4] 2890 	ret 
                                   2891 
                                   2892 ;---------------------
                                   2893 ; BASIC: BSET addr,mask
                                   2894 ; set bits at 'addr' corresponding 
                                   2895 ; to those of 'mask' that are at 1.
                                   2896 ; arguments:
                                   2897 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2898 ;   mask        mask|addr
                                   2899 ; output:
                                   2900 ;	none 
                                   2901 ;--------------------------
      001080                       2902 bit_set:
      001080 CD 0B D0         [ 4] 2903 	call arg_list 
      001083 A1 02            [ 1] 2904 	cp a,#2	 
      001085 27 03            [ 1] 2905 	jreq 1$ 
      001087 CC 07 28         [ 2] 2906 	jp syntax_error
      00108A                       2907 1$: 
      00108A 85               [ 2] 2908 	popw x ; mask 
      00108B 9F               [ 1] 2909 	ld a,xl 
      00108C 85               [ 2] 2910 	popw x ; addr  
      00108D FA               [ 1] 2911 	or a,(x)
      00108E F7               [ 1] 2912 	ld (x),a
      00108F 81               [ 4] 2913 	ret 
                                   2914 
                                   2915 ;---------------------
                                   2916 ; BASIC: BRES addr,mask
                                   2917 ; reset bits at 'addr' corresponding 
                                   2918 ; to those of 'mask' that are at 1.
                                   2919 ; arguments:
                                   2920 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2921 ;   mask	    ~mask&*addr  
                                   2922 ; output:
                                   2923 ;	none 
                                   2924 ;--------------------------
      001090                       2925 bit_reset:
      001090 CD 0B D0         [ 4] 2926 	call arg_list 
      001093 A1 02            [ 1] 2927 	cp a,#2  
      001095 27 03            [ 1] 2928 	jreq 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001097 CC 07 28         [ 2] 2929 	jp syntax_error
      00109A                       2930 1$: 
      00109A 85               [ 2] 2931 	popw x ; mask 
      00109B 9F               [ 1] 2932 	ld a,xl 
      00109C 43               [ 1] 2933 	cpl a 
      00109D 85               [ 2] 2934 	popw x ; addr  
      00109E F4               [ 1] 2935 	and a,(x)
      00109F F7               [ 1] 2936 	ld (x),a 
      0010A0 81               [ 4] 2937 	ret 
                                   2938 
                                   2939 ;---------------------
                                   2940 ; BASIC: BTOGL addr,mask
                                   2941 ; toggle bits at 'addr' corresponding 
                                   2942 ; to those of 'mask' that are at 1.
                                   2943 ; arguments:
                                   2944 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2945 ;   mask	    mask^*addr  
                                   2946 ; output:
                                   2947 ;	none 
                                   2948 ;--------------------------
      0010A1                       2949 bit_toggle:
      0010A1 CD 0B D0         [ 4] 2950 	call arg_list 
      0010A4 A1 02            [ 1] 2951 	cp a,#2 
      0010A6 27 03            [ 1] 2952 	jreq 1$ 
      0010A8 CC 07 28         [ 2] 2953 	jp syntax_error
      0010AB 85               [ 2] 2954 1$: popw x ; mask 
      0010AC 9F               [ 1] 2955 	ld a,xl 
      0010AD 85               [ 2] 2956 	popw x ; addr  
      0010AE F8               [ 1] 2957 	xor a,(x)
      0010AF F7               [ 1] 2958 	ld (x),a 
      0010B0 81               [ 4] 2959 	ret 
                                   2960 
                                   2961 
                                   2962 ;---------------------
                                   2963 ; BASIC: BTEST(addr,bit)
                                   2964 ; return bit value at 'addr' 
                                   2965 ; bit is in range {0..7}.
                                   2966 ; arguments:
                                   2967 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2968 ;   bit 	    bit position {0..7}  
                                   2969 ; output:
                                   2970 ;	none 
                                   2971 ;--------------------------
      0010B1                       2972 bit_test:
      0010B1 CD 0B CB         [ 4] 2973 	call func_args 
      0010B4 A1 02            [ 1] 2974 	cp a,#2
      0010B6 27 03            [ 1] 2975 	jreq 0$
      0010B8 CC 07 28         [ 2] 2976 	jp syntax_error
      0010BB                       2977 0$:	
      0010BB 85               [ 2] 2978 	popw x 
      0010BC 9F               [ 1] 2979 	ld a,xl 
      0010BD A4 07            [ 1] 2980 	and a,#7
      0010BF 88               [ 1] 2981 	push a   
      0010C0 A6 01            [ 1] 2982 	ld a,#1 
      0010C2 0D 01            [ 1] 2983 1$: tnz (1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0010C4 27 05            [ 1] 2984 	jreq 2$
      0010C6 48               [ 1] 2985 	sll a 
      0010C7 0A 01            [ 1] 2986 	dec (1,sp)
      0010C9 20 F7            [ 2] 2987 	jra 1$
      0010CB                       2988 2$: _drop 1 
      0010CB 5B 01            [ 2]    1     addw sp,#1 
      0010CD 85               [ 2] 2989 	popw x 
      0010CE F4               [ 1] 2990 	and a,(x)
      0010CF 27 02            [ 1] 2991 	jreq 3$
      0010D1 A6 01            [ 1] 2992 	ld a,#1 
      0010D3 5F               [ 1] 2993 3$:	clrw x 
      0010D4 97               [ 1] 2994 	ld xl,a 
      0010D5 A6 84            [ 1] 2995 	ld a,#TK_INTGR
      0010D7 81               [ 4] 2996 	ret
                                   2997 
                                   2998 
                                   2999 ;--------------------
                                   3000 ; BASIC: POKE addr,byte
                                   3001 ; put a byte at addr 
                                   3002 ;--------------------
      0010D8                       3003 poke:
      0010D8 CD 0B D0         [ 4] 3004 	call arg_list 
      0010DB A1 02            [ 1] 3005 	cp a,#2
      0010DD 27 03            [ 1] 3006 	jreq 1$
      0010DF CC 07 28         [ 2] 3007 	jp syntax_error
      0010E2                       3008 1$:	
      0010E2 85               [ 2] 3009 	popw x  
      0010E3 9F               [ 1] 3010     ld a,xl 
      0010E4 85               [ 2] 3011 	popw x 
      0010E5 F7               [ 1] 3012 	ld (x),a 
      0010E6 81               [ 4] 3013 	ret 
                                   3014 
                                   3015 ;-----------------------
                                   3016 ; BASIC: PEEK(addr)
                                   3017 ; get the byte at addr 
                                   3018 ; input:
                                   3019 ;	none 
                                   3020 ; output:
                                   3021 ;	X 		value 
                                   3022 ;-----------------------
      0010E7                       3023 peek:
      0010E7 CD 0B CB         [ 4] 3024 	call func_args
      0010EA A1 01            [ 1] 3025 	cp a,#1 
      0010EC 27 03            [ 1] 3026 	jreq 1$
      0010EE CC 07 28         [ 2] 3027 	jp syntax_error
      0010F1 85               [ 2] 3028 1$: popw x 
      0010F2 F6               [ 1] 3029 	ld a,(x)
      0010F3 5F               [ 1] 3030 	clrw x 
      0010F4 97               [ 1] 3031 	ld xl,a 
      0010F5 A6 84            [ 1] 3032 	ld a,#TK_INTGR
      0010F7 81               [ 4] 3033 	ret 
                                   3034 
                                   3035 ;---------------------------
                                   3036 ; BASIC IF expr : instructions
                                   3037 ; evaluate expr and if true 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3038 ; execute instructions on same line. 
                                   3039 ;----------------------------
      0010F8                       3040 if: 
      0010F8 CD 0D 18         [ 4] 3041 	call relation 
      0010FB A1 84            [ 1] 3042 	cp a,#TK_INTGR
      0010FD 27 03            [ 1] 3043 	jreq 1$ 
      0010FF CC 07 28         [ 2] 3044 	jp syntax_error
      001102 4F               [ 1] 3045 1$:	clr a 
      001103 5D               [ 2] 3046 	tnzw x 
      001104 26 05            [ 1] 3047 	jrne 9$  
                                   3048 ;skip to next line
      001106 55 00 03 00 01   [ 1] 3049 	mov in,count
      00110B 81               [ 4] 3050 9$:	ret 
                                   3051 
                                   3052 ;------------------------
                                   3053 ; BASIC: FOR var=expr 
                                   3054 ; set variable to expression 
                                   3055 ; leave variable address 
                                   3056 ; on stack and set
                                   3057 ; FLOOP bit in 'flags'
                                   3058 ;-----------------
                           000001  3059 	RETL1=1 ; return address  
                           000003  3060 	FSTEP=3  ; variable increment
                           000005  3061 	LIMIT=5 ; loop limit 
                           000007  3062 	CVAR=7   ; control variable 
                           000009  3063 	INW=9   ;  in.w saved
                           00000B  3064 	BPTR=11 ; baseptr saved
                           00000A  3065 	VSIZE=10  
      00110C                       3066 for: ; { -- var_addr }
      00110C 85               [ 2] 3067 	popw x ; call return address 
      00110D                       3068 	_vars VSIZE 
      00110D 52 0A            [ 2]    1     sub sp,#VSIZE 
      00110F 89               [ 2] 3069 	pushw x  ; RETL1 
      001110 A6 85            [ 1] 3070 	ld a,#TK_VAR 
      001112 CD 0B BE         [ 4] 3071 	call expect
      001115 1F 07            [ 2] 3072 	ldw (CVAR,sp),x  ; control variable 
      001117 CD 0E 44         [ 4] 3073 	call let_var 
      00111A 72 14 00 20      [ 1] 3074 	bset flags,#FLOOP 
                                   3075 ; open space on stack for loop data 
      00111E 5F               [ 1] 3076 	clrw x 
      00111F 1F 0B            [ 2] 3077 	ldw (BPTR,sp),x 
      001121 1F 09            [ 2] 3078 	ldw (INW,sp),x 
      001123 CD 08 17         [ 4] 3079 	call next_token 
      001126 A1 80            [ 1] 3080 	cp a,#TK_CMD 
      001128 27 03            [ 1] 3081 	jreq 1$
      00112A CC 07 28         [ 2] 3082 	jp syntax_error
      00112D                       3083 1$:  
      00112D A3 11 35         [ 2] 3084 	cpw x,#to 
      001130 27 03            [ 1] 3085 	jreq to
      001132 CC 07 28         [ 2] 3086 	jp syntax_error 
                                   3087 
                                   3088 ;-----------------------------------
                                   3089 ; BASIC: TO expr 
                                   3090 ; second part of FOR loop initilization
                                   3091 ; leave limit on stack and set 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3092 ; FTO bit in 'flags'
                                   3093 ;-----------------------------------
      001135                       3094 to: ; { var_addr -- var_addr limit step }
      001135 72 04 00 20 03   [ 2] 3095 	btjt flags,#FLOOP,1$
      00113A CC 07 28         [ 2] 3096 	jp syntax_error
      00113D CD 0D 18         [ 4] 3097 1$: call relation  
      001140 A1 84            [ 1] 3098 	cp a,#TK_INTGR 
      001142 27 03            [ 1] 3099 	jreq 2$ 
      001144 CC 07 28         [ 2] 3100 	jp syntax_error
      001147 1F 05            [ 2] 3101 2$: ldw (LIMIT,sp),x
                                   3102 ;	ldw x,in.w 
      001149 CD 08 17         [ 4] 3103 	call next_token
      00114C A1 00            [ 1] 3104 	cp a,#TK_NONE  
      00114E 27 0E            [ 1] 3105 	jreq 4$ 
      001150 A1 80            [ 1] 3106 	cp a,#TK_CMD
      001152 26 05            [ 1] 3107 	jrne 3$
      001154 A3 11 65         [ 2] 3108 	cpw x,#step 
      001157 27 0C            [ 1] 3109 	jreq step
      001159                       3110 3$:	
      001159                       3111 	_unget_token   	 
      001159 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00115E                       3112 4$:	
      00115E AE 00 01         [ 2] 3113 	ldw x,#1   ; default step  
      001161 1F 03            [ 2] 3114 	ldw (FSTEP,sp),x 
      001163 20 14            [ 2] 3115 	jra store_loop_addr 
                                   3116 
                                   3117 
                                   3118 ;----------------------------------
                                   3119 ; BASIC: STEP expr 
                                   3120 ; optional third par of FOR loop
                                   3121 ; initialization. 	
                                   3122 ;------------------------------------
      001165                       3123 step: ; {var limit -- var limit step}
      001165 72 04 00 20 03   [ 2] 3124 	btjt flags,#FLOOP,1$
      00116A CC 07 28         [ 2] 3125 	jp syntax_error
      00116D CD 0D 18         [ 4] 3126 1$: call relation
      001170 A1 84            [ 1] 3127 	cp a,#TK_INTGR
      001172 27 03            [ 1] 3128 	jreq 2$
      001174 CC 07 28         [ 2] 3129 	jp syntax_error
      001177 1F 03            [ 2] 3130 2$:	ldw (FSTEP,sp),x ; step
                                   3131 ; leave loop back entry point on cstack 
                                   3132 ; cstack is 1 call deep from interpreter
      001179                       3133 store_loop_addr:
      001179 CE 00 04         [ 2] 3134 	ldw x,basicptr  
      00117C 1F 0B            [ 2] 3135 	ldw (BPTR,sp),x 
      00117E CE 00 00         [ 2] 3136 	ldw x,in.w 
      001181 1F 09            [ 2] 3137 	ldw (INW,sp),x   
      001183 72 15 00 20      [ 1] 3138 	bres flags,#FLOOP 
      001187 72 5C 00 1D      [ 1] 3139 	inc loop_depth  
      00118B 81               [ 4] 3140 	ret 
                                   3141 
                                   3142 ;--------------------------------
                                   3143 ; BASIC: NEXT var 
                                   3144 ; FOR loop control 
                                   3145 ; increment variable with step 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3146 ; and compare with limit 
                                   3147 ; loop if threshold not crossed.
                                   3148 ; else stack. 
                                   3149 ; and decrement 'loop_depth' 
                                   3150 ;--------------------------------
      00118C                       3151 next: ; {var limit step retl1 -- [var limit step ] }
      00118C 72 5D 00 1D      [ 1] 3152 	tnz loop_depth 
      001190 26 03            [ 1] 3153 	jrne 1$ 
      001192 CC 07 28         [ 2] 3154 	jp syntax_error 
      001195                       3155 1$: 
      001195 A6 85            [ 1] 3156 	ld a,#TK_VAR 
      001197 CD 0B BE         [ 4] 3157 	call expect
                                   3158 ; check for good variable after NEXT 	 
      00119A 13 07            [ 2] 3159 	cpw x,(CVAR,sp)
      00119C 27 03            [ 1] 3160 	jreq 2$  
      00119E CC 07 28         [ 2] 3161 	jp syntax_error ; not the good one 
      0011A1                       3162 2$: ; increment variable 
      0011A1 FE               [ 2] 3163 	ldw x,(x)  ; get var value 
      0011A2 72 FB 03         [ 2] 3164 	addw x,(FSTEP,sp) ; var+step 
      0011A5 16 07            [ 2] 3165 	ldw y,(CVAR,sp)
      0011A7 90 FF            [ 2] 3166 	ldw (y),x ; save var new value 
                                   3167 ; check sign of STEP  
      0011A9 A6 80            [ 1] 3168 	ld a,#0x80
      0011AB 15 03            [ 1] 3169 	bcp a,(FSTEP,sp)
      0011AD 2A 06            [ 1] 3170 	jrpl 4$
                                   3171 ;negative step 
      0011AF 13 05            [ 2] 3172 	cpw x,(LIMIT,sp)
      0011B1 2F 1B            [ 1] 3173 	jrslt loop_done
      0011B3 20 04            [ 2] 3174 	jra loop_back 
      0011B5                       3175 4$: ; positive step
      0011B5 13 05            [ 2] 3176 	cpw x,(LIMIT,sp)
      0011B7 2C 15            [ 1] 3177 	jrsgt loop_done
      0011B9                       3178 loop_back:
      0011B9 1E 0B            [ 2] 3179 	ldw x,(BPTR,sp)
      0011BB CF 00 04         [ 2] 3180 	ldw basicptr,x 
      0011BE 72 01 00 20 05   [ 2] 3181 	btjf flags,#FRUN,1$ 
      0011C3 E6 02            [ 1] 3182 	ld a,(2,x)
      0011C5 C7 00 03         [ 1] 3183 	ld count,a
      0011C8 1E 09            [ 2] 3184 1$:	ldw x,(INW,sp)
      0011CA CF 00 00         [ 2] 3185 	ldw in.w,x 
      0011CD 81               [ 4] 3186 	ret 
      0011CE                       3187 loop_done:
                                   3188 	; remove loop data from stack  
      0011CE 85               [ 2] 3189 	popw x
      0011CF                       3190 	_drop VSIZE 
      0011CF 5B 0A            [ 2]    1     addw sp,#VSIZE 
      0011D1 72 5A 00 1D      [ 1] 3191 	dec loop_depth 
                                   3192 ;	pushw x 
                                   3193 ;	ret 
      0011D5 FC               [ 2] 3194 	jp (x)
                                   3195 
                                   3196 ;----------------------------
                                   3197 ; called by goto/gosub
                                   3198 ; to get target line number 
                                   3199 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011D6                       3200 get_target_line:
      0011D6 CD 0D 18         [ 4] 3201 	call relation 
      0011D9 A1 84            [ 1] 3202 	cp a,#TK_INTGR
      0011DB 27 03            [ 1] 3203 	jreq 1$
      0011DD CC 07 28         [ 2] 3204 	jp syntax_error
      0011E0 4F               [ 1] 3205 1$:	clr a
      0011E1 90 CE 00 04      [ 2] 3206 	ldw y,basicptr 
      0011E5 90 FE            [ 2] 3207 	ldw y,(y)
      0011E7 90 89            [ 2] 3208 	pushw y 
      0011E9 13 01            [ 2] 3209 	cpw x,(1,sp)
      0011EB 5B 02            [ 2] 3210 	addw sp,#2 
      0011ED 25 01            [ 1] 3211 	jrult 11$
      0011EF 4C               [ 1] 3212 	inc a 
      0011F0                       3213 11$:	
      0011F0 CD 23 2B         [ 4] 3214 	call search_lineno  
      0011F3 5D               [ 2] 3215 	tnzw x 
      0011F4 26 05            [ 1] 3216 	jrne 2$ 
      0011F6 A6 05            [ 1] 3217 	ld a,#ERR_NO_LINE 
      0011F8 CC 07 2A         [ 2] 3218 	jp tb_error 
      0011FB 81               [ 4] 3219 2$:	ret 
                                   3220 
                                   3221 ;------------------------
                                   3222 ; BASIC: GOTO line# 
                                   3223 ; jump to line# 
                                   3224 ; here cstack is 2 call deep from interpreter 
                                   3225 ;------------------------
      0011FC                       3226 goto:
      0011FC 72 00 00 20 06   [ 2] 3227 	btjt flags,#FRUN,0$ 
      001201 A6 06            [ 1] 3228 	ld a,#ERR_RUN_ONLY
      001203 CC 07 2A         [ 2] 3229 	jp tb_error 
      001206 81               [ 4] 3230 	ret 
      001207 CD 11 D6         [ 4] 3231 0$:	call get_target_line
      00120A                       3232 jp_to_target:
      00120A CF 00 04         [ 2] 3233 	ldw basicptr,x 
      00120D E6 02            [ 1] 3234 	ld a,(2,x)
      00120F C7 00 03         [ 1] 3235 	ld count,a 
      001212 35 03 00 01      [ 1] 3236 	mov in,#3 
      001216 81               [ 4] 3237 	ret 
                                   3238 
                                   3239 
                                   3240 ;--------------------
                                   3241 ; BASIC: GOSUB line#
                                   3242 ; basic subroutine call
                                   3243 ; actual line# and basicptr 
                                   3244 ; are saved on cstack
                                   3245 ; here cstack is 2 call deep from interpreter 
                                   3246 ;--------------------
                           000003  3247 	RET_ADDR=3
                           000005  3248 	RET_INW=5
                           000004  3249 	VSIZE=4  
      001217                       3250 gosub:
      001217 72 00 00 20 06   [ 2] 3251 	btjt flags,#FRUN,0$ 
      00121C A6 06            [ 1] 3252 	ld a,#ERR_RUN_ONLY
      00121E CC 07 2A         [ 2] 3253 	jp tb_error 
      001221 81               [ 4] 3254 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001222 85               [ 2] 3255 0$:	popw x 
      001223                       3256 	_vars VSIZE  
      001223 52 04            [ 2]    1     sub sp,#VSIZE 
      001225 89               [ 2] 3257 	pushw x 
      001226 CE 00 04         [ 2] 3258 	ldw x,basicptr
      001229 1F 03            [ 2] 3259 	ldw (RET_ADDR,sp),x 
      00122B CD 11 D6         [ 4] 3260 	call get_target_line  
      00122E 89               [ 2] 3261 	pushw x 
      00122F CE 00 00         [ 2] 3262 	ldw x,in.w 
      001232 1F 07            [ 2] 3263 	ldw (RET_INW+2,sp),x
      001234 85               [ 2] 3264 	popw x 
      001235 20 D3            [ 2] 3265 	jra jp_to_target
                                   3266 
                                   3267 ;------------------------
                                   3268 ; BASIC: RETURN 
                                   3269 ; exit from a subroutine 
                                   3270 ; 
                                   3271 ;------------------------
      001237                       3272 return:
      001237 72 00 00 20 05   [ 2] 3273 	btjt flags,#FRUN,0$ 
      00123C A6 06            [ 1] 3274 	ld a,#ERR_RUN_ONLY
      00123E CC 07 2A         [ 2] 3275 	jp tb_error 
      001241                       3276 0$:	
      001241 1E 03            [ 2] 3277 	ldw x,(RET_ADDR,sp) 
      001243 CF 00 04         [ 2] 3278 	ldw basicptr,x
      001246 E6 02            [ 1] 3279 	ld a,(2,x)
      001248 C7 00 03         [ 1] 3280 	ld count,a  
      00124B 1E 05            [ 2] 3281 	ldw x,(RET_INW,sp)
      00124D CF 00 00         [ 2] 3282 	ldw in.w,x 
      001250 85               [ 2] 3283 	popw x 
      001251                       3284 	_drop VSIZE 
      001251 5B 04            [ 2]    1     addw sp,#VSIZE 
      001253 89               [ 2] 3285 	pushw x
      001254 81               [ 4] 3286 	ret  
                                   3287 
                                   3288 
                                   3289 ;----------------------------------
                                   3290 ; BASIC: RUN
                                   3291 ; run BASIC program in RAM
                                   3292 ;----------------------------------- 
      001255                       3293 run: 
      001255 72 01 00 20 02   [ 2] 3294 	btjf flags,#FRUN,0$  
      00125A 4F               [ 1] 3295 	clr a 
      00125B 81               [ 4] 3296 	ret
      00125C                       3297 0$: 
      00125C 72 09 00 20 12   [ 2] 3298 	btjf flags,#FBREAK,1$
      001261                       3299 	_drop 2 
      001261 5B 02            [ 2]    1     addw sp,#2 
      001263 CD 0F D5         [ 4] 3300 	call rest_context
      001266                       3301 	_drop CTXT_SIZE 
      001266 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      001268 72 19 00 20      [ 1] 3302 	bres flags,#FBREAK 
      00126C 72 10 00 20      [ 1] 3303 	bset flags,#FRUN 
      001270 CC 07 CB         [ 2] 3304 	jp interpreter 
      001273 CE 00 19         [ 2] 3305 1$:	ldw x,txtbgn
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001276 C3 00 1B         [ 2] 3306 	cpw x,txtend 
      001279 2B 0C            [ 1] 3307 	jrmi run_it 
      00127B AE 06 C1         [ 2] 3308 	ldw x,#err_no_prog
      00127E CD 20 43         [ 4] 3309 	call puts 
      001281 55 00 03 00 01   [ 1] 3310 	mov in,count
      001286 81               [ 4] 3311 	ret 
      001287                       3312 run_it:	 
      001287 CD 0E 29         [ 4] 3313     call ubound 
      00128A                       3314 	_drop 2 ; drop return address 
      00128A 5B 02            [ 2]    1     addw sp,#2 
                                   3315 ; clear data pointer 
      00128C 5F               [ 1] 3316 	clrw x 
      00128D CF 00 06         [ 2] 3317 	ldw data_ptr,x 
      001290 72 5F 00 08      [ 1] 3318 	clr data_ofs 
      001294 72 5F 00 09      [ 1] 3319 	clr data_len 
                                   3320 ; initialize BASIC pointer 
      001298 CE 00 19         [ 2] 3321 	ldw x,txtbgn 
      00129B CF 00 04         [ 2] 3322 	ldw basicptr,x 
      00129E E6 02            [ 1] 3323 	ld a,(2,x)
      0012A0 C7 00 03         [ 1] 3324 	ld count,a
      0012A3 35 03 00 01      [ 1] 3325 	mov in,#3	
      0012A7 72 10 00 20      [ 1] 3326 	bset flags,#FRUN 
      0012AB CC 07 CB         [ 2] 3327 	jp interpreter 
                                   3328 
                                   3329 
                                   3330 ;----------------------
                                   3331 ; BASIC: END
                                   3332 ; end running program
                                   3333 ;---------------------- 
      0012AE                       3334 cmd_end: 
                                   3335 ; clean stack 
      0012AE AE 17 FF         [ 2] 3336 	ldw x,#STACK_EMPTY
      0012B1 94               [ 1] 3337 	ldw sp,x 
      0012B2 CC 07 AC         [ 2] 3338 	jp warm_start
                                   3339 
                                   3340 ;-----------------
                                   3341 ; 1 Khz beep 
                                   3342 ;-----------------
      0012B5                       3343 beep_1khz:: 
      0012B5 AE 00 64         [ 2] 3344 	ldw x,#100
      0012B8 90 AE 03 E8      [ 2] 3345 	ldw y,#1000
      0012BC 20 0D            [ 2] 3346 	jra beep
                                   3347 
                                   3348 ;-----------------------
                                   3349 ; BASIC: TONE expr1,expr2
                                   3350 ; used TIMER2 channel 1
                                   3351 ; to produce a tone 
                                   3352 ; arguments:
                                   3353 ;    expr1   frequency 
                                   3354 ;    expr2   duration msec.
                                   3355 ;---------------------------
      0012BE                       3356 tone:
      0012BE CD 0B D0         [ 4] 3357 	call arg_list 
      0012C1 A1 02            [ 1] 3358 	cp a,#2 
      0012C3 27 03            [ 1] 3359 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012C5 CC 07 28         [ 2] 3360 	jp syntax_error 
      0012C8                       3361 1$: 
      0012C8 85               [ 2] 3362 	popw x ; duration
      0012C9 90 85            [ 2] 3363 	popw y ; frequency 
      0012CB                       3364 beep:  
      0012CB 89               [ 2] 3365 	pushw x 
      0012CC AE F4 24         [ 2] 3366 	ldw x,#TIM2_CLK_FREQ
      0012CF 65               [ 2] 3367 	divw x,y 
                                   3368 ; round to nearest integer 
      0012D0 90 A3 7A 12      [ 2] 3369 	cpw y,#TIM2_CLK_FREQ/2
      0012D4 2B 01            [ 1] 3370 	jrmi 2$
      0012D6 5C               [ 1] 3371 	incw x 
      0012D7                       3372 2$:	 
      0012D7 9E               [ 1] 3373 	ld a,xh 
      0012D8 C7 53 0D         [ 1] 3374 	ld TIM2_ARRH,a 
      0012DB 9F               [ 1] 3375 	ld a,xl 
      0012DC C7 53 0E         [ 1] 3376 	ld TIM2_ARRL,a 
                                   3377 ; 50% duty cycle 
      0012DF 8C               [ 1] 3378 	ccf 
      0012E0 56               [ 2] 3379 	rrcw x 
      0012E1 9E               [ 1] 3380 	ld a,xh 
      0012E2 C7 53 0F         [ 1] 3381 	ld TIM2_CCR1H,a 
      0012E5 9F               [ 1] 3382 	ld a,xl
      0012E6 C7 53 10         [ 1] 3383 	ld TIM2_CCR1L,a
      0012E9 72 10 53 08      [ 1] 3384 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0012ED 72 10 53 00      [ 1] 3385 	bset TIM2_CR1,#TIM2_CR1_CEN
      0012F1 72 10 53 04      [ 1] 3386 	bset TIM2_EGR,#TIM2_EGR_UG
      0012F5 85               [ 2] 3387 	popw x 
      0012F6 CD 16 8E         [ 4] 3388 	call pause02
      0012F9 72 11 53 08      [ 1] 3389 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0012FD 72 11 53 00      [ 1] 3390 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001301 81               [ 4] 3391 	ret 
                                   3392 
                                   3393 ;-------------------------------
                                   3394 ; BASIC: ADCON 0|1 [,divisor]  
                                   3395 ; disable/enanble ADC 
                                   3396 ;-------------------------------
                           000003  3397 	ONOFF=3 
                           000001  3398 	DIVSOR=1
                           000004  3399 	VSIZE=4 
      001302                       3400 power_adc:
      001302 CD 0B D0         [ 4] 3401 	call arg_list 
      001305 A1 02            [ 1] 3402 	cp a,#2	
      001307 27 0B            [ 1] 3403 	jreq 1$
      001309 A1 01            [ 1] 3404 	cp a,#1 
      00130B 27 03            [ 1] 3405 	jreq 0$ 
      00130D CC 07 28         [ 2] 3406 	jp syntax_error 
      001310 AE 00 00         [ 2] 3407 0$: ldw x,#0
      001313 89               [ 2] 3408 	pushw x  ; divisor 
      001314 1E 03            [ 2] 3409 1$: ldw x,(ONOFF,sp)
      001316 5D               [ 2] 3410 	tnzw x 
      001317 27 1A            [ 1] 3411 	jreq 2$ 
      001319 1E 01            [ 2] 3412 	ldw x,(DIVSOR,sp) ; divisor 
      00131B 9F               [ 1] 3413 	ld a,xl
      00131C A4 07            [ 1] 3414 	and a,#7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00131E 4E               [ 1] 3415 	swap a 
      00131F C7 54 01         [ 1] 3416 	ld ADC_CR1,a
      001322 72 16 50 CA      [ 1] 3417 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001326 72 10 54 01      [ 1] 3418 	bset ADC_CR1,#ADC_CR1_ADON 
      00132A                       3419 	_usec_dly 7 
      00132A AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00132D 5A               [ 2]    2     decw x
      00132E 9D               [ 1]    3     nop 
      00132F 26 FA            [ 1]    4     jrne .-4
      001331 20 08            [ 2] 3420 	jra 3$
      001333 72 11 54 01      [ 1] 3421 2$: bres ADC_CR1,#ADC_CR1_ADON
      001337 72 17 50 CA      [ 1] 3422 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00133B                       3423 3$:	_drop VSIZE 
      00133B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00133D 81               [ 4] 3424 	ret
                                   3425 
                                   3426 ;-----------------------------
                                   3427 ; BASIC: ADCREAD (channel)
                                   3428 ; read adc channel {0..5}
                                   3429 ; output:
                                   3430 ;   A 		TK_INTGR 
                                   3431 ;   X 		value 
                                   3432 ;-----------------------------
      00133E                       3433 analog_read:
      00133E CD 0B CB         [ 4] 3434 	call func_args 
      001341 A1 01            [ 1] 3435 	cp a,#1 
      001343 27 03            [ 1] 3436 	jreq 1$
      001345 CC 07 28         [ 2] 3437 	jp syntax_error
      001348 85               [ 2] 3438 1$: popw x 
      001349 A3 00 05         [ 2] 3439 	cpw x,#5 
      00134C 23 05            [ 2] 3440 	jrule 2$
      00134E A6 0A            [ 1] 3441 	ld a,#ERR_BAD_VALUE
      001350 CC 07 2A         [ 2] 3442 	jp tb_error 
      001353 9F               [ 1] 3443 2$: ld a,xl
      001354 C7 00 0D         [ 1] 3444 	ld acc8,a 
      001357 A6 05            [ 1] 3445 	ld a,#5
      001359 C0 00 0D         [ 1] 3446 	sub a,acc8 
      00135C C7 54 00         [ 1] 3447 	ld ADC_CSR,a
      00135F 72 16 54 02      [ 1] 3448 	bset ADC_CR2,#ADC_CR2_ALIGN
      001363 72 10 54 01      [ 1] 3449 	bset ADC_CR1,#ADC_CR1_ADON
      001367 72 0F 54 00 FB   [ 2] 3450 	btjf ADC_CSR,#ADC_CSR_EOC,.
      00136C CE 54 04         [ 2] 3451 	ldw x,ADC_DRH
      00136F A6 84            [ 1] 3452 	ld a,#TK_INTGR
      001371 81               [ 4] 3453 	ret 
                                   3454 
                                   3455 ;-----------------------
                                   3456 ; BASIC: DREAD(pin)
                                   3457 ; Arduino pins 
                                   3458 ; read state of a digital pin 
                                   3459 ; pin# {0..15}
                                   3460 ; output:
                                   3461 ;    A 		TK_INTGR
                                   3462 ;    X      0|1 
                                   3463 ;-------------------------
                           000001  3464 	PINNO=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                           000001  3465 	VSIZE=1
      001372                       3466 digital_read:
      001372                       3467 	_vars VSIZE 
      001372 52 01            [ 2]    1     sub sp,#VSIZE 
      001374 CD 0B CB         [ 4] 3468 	call func_args
      001377 A1 01            [ 1] 3469 	cp a,#1
      001379 27 03            [ 1] 3470 	jreq 1$
      00137B CC 07 28         [ 2] 3471 	jp syntax_error
      00137E 85               [ 2] 3472 1$: popw x 
      00137F A3 00 0F         [ 2] 3473 	cpw x,#15 
      001382 23 05            [ 2] 3474 	jrule 2$
      001384 A6 0A            [ 1] 3475 	ld a,#ERR_BAD_VALUE
      001386 CC 07 2A         [ 2] 3476 	jp tb_error 
      001389 CD 17 CC         [ 4] 3477 2$:	call select_pin 
      00138C 6B 01            [ 1] 3478 	ld (PINNO,sp),a
      00138E E6 01            [ 1] 3479 	ld a,(GPIO_IDR,x)
      001390 0D 01            [ 1] 3480 	tnz (PINNO,sp)
      001392 27 05            [ 1] 3481 	jreq 8$
      001394 44               [ 1] 3482 3$: srl a 
      001395 0A 01            [ 1] 3483 	dec (PINNO,sp)
      001397 26 FB            [ 1] 3484 	jrne 3$ 
      001399 A4 01            [ 1] 3485 8$: and a,#1 
      00139B 5F               [ 1] 3486 	clrw x 
      00139C 97               [ 1] 3487 	ld xl,a 
      00139D A6 84            [ 1] 3488 	ld a,#TK_INTGR
      00139F                       3489 	_drop VSIZE
      00139F 5B 01            [ 2]    1     addw sp,#VSIZE 
      0013A1 81               [ 4] 3490 	ret
                                   3491 
                                   3492 
                                   3493 ;-----------------------
                                   3494 ; BASIC: DWRITE pin,0|1
                                   3495 ; Arduino pins 
                                   3496 ; write to a digital pin 
                                   3497 ; pin# {0..15}
                                   3498 ; output:
                                   3499 ;    A 		TK_INTGR
                                   3500 ;    X      0|1 
                                   3501 ;-------------------------
                           000001  3502 	PINNO=1
                           000002  3503 	PINVAL=2
                           000002  3504 	VSIZE=2
      0013A2                       3505 digital_write:
      0013A2                       3506 	_vars VSIZE 
      0013A2 52 02            [ 2]    1     sub sp,#VSIZE 
      0013A4 CD 0B D0         [ 4] 3507 	call arg_list  
      0013A7 A1 02            [ 1] 3508 	cp a,#2 
      0013A9 27 03            [ 1] 3509 	jreq 1$
      0013AB CC 07 28         [ 2] 3510 	jp syntax_error
      0013AE 85               [ 2] 3511 1$: popw x 
      0013AF 9F               [ 1] 3512 	ld a,xl 
      0013B0 6B 02            [ 1] 3513 	ld (PINVAL,sp),a
      0013B2 85               [ 2] 3514 	popw x 
      0013B3 A3 00 0F         [ 2] 3515 	cpw x,#15 
      0013B6 23 05            [ 2] 3516 	jrule 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013B8 A6 0A            [ 1] 3517 	ld a,#ERR_BAD_VALUE
      0013BA CC 07 2A         [ 2] 3518 	jp tb_error 
      0013BD CD 17 CC         [ 4] 3519 2$:	call select_pin 
      0013C0 6B 01            [ 1] 3520 	ld (PINNO,sp),a 
      0013C2 A6 01            [ 1] 3521 	ld a,#1
      0013C4 0D 01            [ 1] 3522 	tnz (PINNO,sp)
      0013C6 27 05            [ 1] 3523 	jreq 4$
      0013C8 48               [ 1] 3524 3$: sll a
      0013C9 0A 01            [ 1] 3525 	dec (PINNO,sp)
      0013CB 26 FB            [ 1] 3526 	jrne 3$
      0013CD 0D 02            [ 1] 3527 4$: tnz (PINVAL,sp)
      0013CF 26 05            [ 1] 3528 	jrne 5$
      0013D1 43               [ 1] 3529 	cpl a 
      0013D2 E4 00            [ 1] 3530 	and a,(GPIO_ODR,x)
      0013D4 20 02            [ 2] 3531 	jra 8$
      0013D6 EA 00            [ 1] 3532 5$: or a,(GPIO_ODR,x)
      0013D8 E7 00            [ 1] 3533 8$: ld (GPIO_ODR,x),a 
      0013DA                       3534 	_drop VSIZE 
      0013DA 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013DC 81               [ 4] 3535 	ret
                                   3536 
                                   3537 
                                   3538 ;-----------------------
                                   3539 ; BASIC: STOP
                                   3540 ; stop progam execution  
                                   3541 ; without resetting pointers 
                                   3542 ; the program is resumed
                                   3543 ; with RUN 
                                   3544 ;-------------------------
      0013DD                       3545 stop:
      0013DD 72 00 00 20 02   [ 2] 3546 	btjt flags,#FRUN,2$
      0013E2 4F               [ 1] 3547 	clr a
      0013E3 81               [ 4] 3548 	ret 
      0013E4                       3549 2$:	 
                                   3550 ; create space on cstack to save context 
      0013E4 AE 14 0B         [ 2] 3551 	ldw x,#break_point 
      0013E7 CD 20 43         [ 4] 3552 	call puts 
      0013EA                       3553 	_drop 2 ;drop return address 
      0013EA 5B 02            [ 2]    1     addw sp,#2 
      0013EC                       3554 	_vars CTXT_SIZE ; context size 
      0013EC 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0013EE CD 0F C5         [ 4] 3555 	call save_context 
      0013F1 AE 16 90         [ 2] 3556 	ldw x,#tib 
      0013F4 CF 00 04         [ 2] 3557 	ldw basicptr,x
      0013F7 7F               [ 1] 3558 	clr (x)
      0013F8 72 5F 00 03      [ 1] 3559 	clr count  
      0013FC 5F               [ 1] 3560 	clrw x 
      0013FD CF 00 00         [ 2] 3561 	ldw in.w,x
      001400 72 11 00 20      [ 1] 3562 	bres flags,#FRUN 
      001404 72 18 00 20      [ 1] 3563 	bset flags,#FBREAK
      001408 CC 07 CB         [ 2] 3564 	jp interpreter 
      00140B 0A 62 72 65 61 6B 20  3565 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



             0A 00
                                   3566 
                                   3567 ;-----------------------
                                   3568 ; BASIC: NEW
                                   3569 ; from command line only 
                                   3570 ; free program memory
                                   3571 ; and clear variables 
                                   3572 ;------------------------
      001429                       3573 new: 
      001429 72 01 00 20 01   [ 2] 3574 	btjf flags,#FRUN,0$ 
      00142E 81               [ 4] 3575 	ret 
      00142F                       3576 0$:	
      00142F CD 05 92         [ 4] 3577 	call clear_basic 
      001432 81               [ 4] 3578 	ret 
                                   3579 
                                   3580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3581 ;;;  flash memory operations
                                   3582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3583 
                                   3584 ;--------------------------
                                   3585 ; align farptr to BLOCK_SIZE 
                                   3586 ;---------------------------
      001433                       3587 row_align:
      001433 A6 7F            [ 1] 3588 	ld a,#0x7f 
      001435 C4 00 18         [ 1] 3589 	and a,farptr+2 
      001438 27 13            [ 1] 3590 	jreq 1$ 
      00143A CE 00 17         [ 2] 3591 	ldw x,farptr+1 
      00143D 1C 00 80         [ 2] 3592 	addw x,#BLOCK_SIZE 
      001440 24 04            [ 1] 3593 	jrnc 0$
      001442 72 5C 00 16      [ 1] 3594 	inc farptr 
      001446 9F               [ 1] 3595 0$: ld a,xl 
      001447 A4 80            [ 1] 3596 	and a,#0x80
      001449 97               [ 1] 3597 	ld xl,a
      00144A CF 00 17         [ 2] 3598 	ldw farptr+1,x  	
      00144D 81               [ 4] 3599 1$:	ret
                                   3600 
                                   3601 ;--------------------
                                   3602 ; input:
                                   3603 ;   X     increment 
                                   3604 ; output:
                                   3605 ;   farptr  incremented 
                                   3606 ;---------------------
      00144E                       3607 incr_farptr:
      00144E 72 BB 00 17      [ 2] 3608 	addw x,farptr+1 
      001452 24 04            [ 1] 3609 	jrnc 1$
      001454 72 5C 00 16      [ 1] 3610 	inc farptr 
      001458 CF 00 17         [ 2] 3611 1$:	ldw farptr+1,x  
      00145B 81               [ 4] 3612 	ret 
                                   3613 
                                   3614 ;-----------------------------------
                                   3615 ; scan block for non zero byte 
                                   3616 ; block are 128 bytes 
                                   3617 ; input:
                                   3618 ;    farptr     address block  
                                   3619 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3620 ;     A     0 cleared, other not cleared  
                                   3621 ;-----------------------------------
      00145C                       3622 scan_block:
      00145C 5F               [ 1] 3623 	clrw x 
      00145D 92 AF 00 16      [ 5] 3624 1$: ldf a,([farptr],x) 
      001461 26 06            [ 1] 3625 	jrne 2$
      001463 5C               [ 1] 3626 	incw x 
      001464 A3 00 80         [ 2] 3627 	cpw x,#BLOCK_SIZE 
      001467 25 F4            [ 1] 3628 	jrult 1$ 
      001469 81               [ 4] 3629 2$:	ret 
                                   3630 
                                   3631 
                                   3632 
                                   3633 ;-----------------------------------
                                   3634 ; BASIC: ERASE \E | \F 
                                   3635 ; erase all block in range from 
                                   3636 ;  'app_space' to FLASH end (0x20000)
                                   3637 ;  or all EEPROM 
                                   3638 ; that contains a non zero byte.  
                                   3639 ;-----------------------------------
                           000001  3640 	LIMIT=1 
                           000003  3641 	VSIZE = 3 
      00146A                       3642 erase:
      00146A 72 5F 00 16      [ 1] 3643 	clr farptr 
      00146E                       3644 	_vars VSIZE 
      00146E 52 03            [ 2]    1     sub sp,#VSIZE 
      001470 CD 08 17         [ 4] 3645 	call next_token 
      001473 A1 03            [ 1] 3646 	cp a,#TK_CHAR 
      001475 27 03            [ 1] 3647 	jreq 0$ 
      001477 CC 07 28         [ 2] 3648 	jp syntax_error
      00147A 9F               [ 1] 3649 0$: ld a,xl 
      00147B A4 DF            [ 1] 3650 	and a,#0XDF 
      00147D A1 45            [ 1] 3651 	cp a,#'E
      00147F 26 0C            [ 1] 3652 	jrne 1$
      001481 AE 40 00         [ 2] 3653 	ldw x,#EEPROM_BASE 
      001484 CF 00 17         [ 2] 3654 	ldw farptr+1,x 
      001487 AE 47 FF         [ 2] 3655 	ldw x,#EEPROM_END
      00148A 4F               [ 1] 3656 	clr a 
      00148B 20 15            [ 2] 3657 	jra 3$ 
      00148D A1 46            [ 1] 3658 1$: cp a,#'F 
      00148F 27 06            [ 1] 3659 	jreq 2$
      001491 AE 06 72         [ 2] 3660 	ldw x,#err_bad_value
      001494 CC 07 2A         [ 2] 3661 	jp tb_error
      001497                       3662 2$:
      001497 AE 2A 00         [ 2] 3663 	ldw x,#app_sign 
      00149A CF 00 17         [ 2] 3664 	ldw farptr+1,x 
      00149D A6 02            [ 1] 3665 	ld a,#(FLASH_END>>16)&0XFF 
      00149F AE 7F FF         [ 2] 3666 	ldw x,#FLASH_END&0xffff
      0014A2                       3667 3$:
      0014A2 6B 01            [ 1] 3668 	ld (LIMIT,sp),a 
      0014A4 1F 02            [ 2] 3669 	ldw (LIMIT+1,sp),x 
                                   3670  ; operation done from RAM
                                   3671  ; copy code to RAM in tib   
      0014A6 CD 01 3C         [ 4] 3672 	call move_erase_to_ram
      0014A9                       3673 4$:	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014A9 CD 14 5C         [ 4] 3674     call scan_block 
      0014AC 27 08            [ 1] 3675 	jreq 5$  ; block already erased 
      0014AE A6 45            [ 1] 3676     ld a,#'E 
      0014B0 CD 02 B2         [ 4] 3677     call putc 
      0014B3 CD 01 A8         [ 4] 3678 	call block_erase   
                                   3679 ; this block is clean, next  
      0014B6 AE 00 80         [ 2] 3680 5$:	ldw x,#BLOCK_SIZE
      0014B9 CD 14 4E         [ 4] 3681 	call incr_farptr
                                   3682 ; check limit, 24 bit substraction  	
      0014BC 7B 01            [ 1] 3683 	ld a,(LIMIT,sp)
      0014BE 1E 02            [ 2] 3684 	ldw x,(LIMIT+1,sp)
      0014C0 72 B0 00 17      [ 2] 3685 	subw x,farptr+1
      0014C4 C2 00 16         [ 1] 3686 	sbc a,farptr 
      0014C7 22 E0            [ 1] 3687 	jrugt 4$ 
      0014C9 CD 05 92         [ 4] 3688 9$: call clear_basic
      0014CC                       3689 	_drop VSIZE 
      0014CC 5B 03            [ 2]    1     addw sp,#VSIZE 
      0014CE 81               [ 4] 3690 	ret 
                                   3691 	
                                   3692 
                                   3693 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3694 ;  check for application signature 
                                   3695 ; output:
                                   3696 ;   Carry    0 app present 
                                   3697 ;            1 no app installed  
                                   3698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014CF                       3699 qsign: 
      0014CF CE 2A 00         [ 2] 3700 	ldw x,app_sign 
      0014D2 C3 15 37         [ 2] 3701 	cpw x,SIGNATURE ; "BC" 
      0014D5 81               [ 4] 3702 	ret 
                                   3703 
                                   3704 ;---------------------------------------
                                   3705 ; BASIC: SAVE
                                   3706 ; write application in RAM to FLASH
                                   3707 ;--------------------------------------
      0014D6                       3708 save_app:
      0014D6 CD 14 CF         [ 4] 3709 	call qsign 
      0014D9 26 09            [ 1] 3710 	jrne 1$
      0014DB AE 15 39         [ 2] 3711 	ldw x,#CANT_DO 
      0014DE CD 20 43         [ 4] 3712 	call puts 
      0014E1 CC 15 36         [ 2] 3713 	jp 9$
      0014E4                       3714 1$: 
      0014E4 CE 00 19         [ 2] 3715 	ldw x,txtbgn
      0014E7 C3 00 1B         [ 2] 3716 	cpw x,txtend 
      0014EA 25 08            [ 1] 3717 	jrult 2$ 
      0014EC AE 15 78         [ 2] 3718 	ldw x,#NO_APP
      0014EF CD 20 43         [ 4] 3719 	call puts 
      0014F2 20 42            [ 2] 3720 	jra 9$
      0014F4                       3721 2$: 
                                   3722 ; block programming flash
                                   3723 ; must be done from RAM 
      0014F4 CD 01 70         [ 4] 3724 	call move_prg_to_ram
                                   3725 ; initialize farptr 
      0014F7 72 5F 00 16      [ 1] 3726 	clr farptr 
      0014FB AE 2A 00         [ 2] 3727 	ldw x,#app_sign 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0014FE CF 00 17         [ 2] 3728 	ldw farptr+1,x 
                                   3729 ; write signature
      001501 CE 15 37         [ 2] 3730 	ldw x,SIGNATURE ; "BC" 
      001504 CF 00 7C         [ 2] 3731 	ldw rsign,x 
      001507 CE 00 1B         [ 2] 3732 	ldw x,txtend 
      00150A 72 B0 00 19      [ 2] 3733 	subw x,txtbgn 
      00150E CF 00 7E         [ 2] 3734 	ldw rsize,x   
                                   3735 ;copy block to flash
      001511 AE 00 7C         [ 2] 3736 	ldw x,#rsign  
      001514 1F 01            [ 2] 3737 	ldw (1,sp),x   
      001516 1E 01            [ 2] 3738 3$:	ldw x,(1,sp)
      001518 CD 01 84         [ 4] 3739 	call write_row 
      00151B A6 2E            [ 1] 3740     ld a,#'. 
      00151D CD 02 B2         [ 4] 3741     call putc 
      001520 1E 01            [ 2] 3742 	ldw x,(1,sp)
      001522 1C 00 80         [ 2] 3743 	addw x,#BLOCK_SIZE
      001525 1F 01            [ 2] 3744 	ldw (1,sp),x  
      001527 C3 00 1B         [ 2] 3745 	cpw x,txtend 
      00152A 24 08            [ 1] 3746 	jruge 8$
      00152C AE 00 80         [ 2] 3747 	ldw x,#BLOCK_SIZE 
      00152F CD 14 4E         [ 4] 3748 	call incr_farptr
      001532 20 E2            [ 2] 3749 	jra 3$ 
      001534                       3750 8$:	
      001534                       3751 	_drop 2   
      001534 5B 02            [ 2]    1     addw sp,#2 
      001536 81               [ 4] 3752 9$: ret 
                                   3753 
      001537 42 43                 3754 SIGNATURE: .ascii "BC"
      001539 43 61 6E 27 74 20 66  3755 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             62 65 66 6F 72 65 00
      001578 4E 6F 20 61 70 70 6C  3756 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3757 
                                   3758 ;---------------------
                                   3759 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3760 ; write 1 or more byte to FLASH or EEPROM
                                   3761 ; starting at address  
                                   3762 ; input:
                                   3763 ;   expr1  	is address 
                                   3764 ;   expr2,...,exprn   are bytes to write
                                   3765 ; output:
                                   3766 ;   none 
                                   3767 ;---------------------
                           000001  3768 	ADDR=1
                           000002  3769 	VSIZ=2 
      00158E                       3770 write:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00158E                       3771 	_vars VSIZE 
      00158E 52 03            [ 2]    1     sub sp,#VSIZE 
      001590 72 5F 00 16      [ 1] 3772 	clr farptr ; expect 16 bits address 
      001594 CD 0C CF         [ 4] 3773 	call expression
      001597 A1 84            [ 1] 3774 	cp a,#TK_INTGR 
      001599 27 03            [ 1] 3775 	jreq 0$
      00159B CC 07 28         [ 2] 3776 	jp syntax_error
      00159E 1F 01            [ 2] 3777 0$: ldw (ADDR,sp),x 
      0015A0 CD 08 17         [ 4] 3778 	call next_token 
      0015A3 A1 09            [ 1] 3779 	cp a,#TK_COMMA 
      0015A5 27 02            [ 1] 3780 	jreq 1$ 
      0015A7 20 19            [ 2] 3781 	jra 9$ 
      0015A9 CD 0C CF         [ 4] 3782 1$:	call expression
      0015AC A1 84            [ 1] 3783 	cp a,#TK_INTGR
      0015AE 27 03            [ 1] 3784 	jreq 2$
      0015B0 CC 07 28         [ 2] 3785 	jp syntax_error
      0015B3 9F               [ 1] 3786 2$:	ld a,xl 
      0015B4 1E 01            [ 2] 3787 	ldw x,(ADDR,sp) 
      0015B6 CF 00 17         [ 2] 3788 	ldw farptr+1,x 
      0015B9 5F               [ 1] 3789 	clrw x 
      0015BA CD 01 D2         [ 4] 3790 	call write_byte
      0015BD 1E 01            [ 2] 3791 	ldw x,(ADDR,sp)
      0015BF 5C               [ 1] 3792 	incw x 
      0015C0 20 DC            [ 2] 3793 	jra 0$ 
      0015C2                       3794 9$:
      0015C2                       3795 	_drop VSIZE
      0015C2 5B 03            [ 2]    1     addw sp,#VSIZE 
      0015C4 81               [ 4] 3796 	ret 
                                   3797 
                                   3798 
                                   3799 ;---------------------
                                   3800 ;BASIC: CHAR(expr)
                                   3801 ; évaluate expression 
                                   3802 ; and take the 7 least 
                                   3803 ; bits as ASCII character
                                   3804 ; return a TK_CHAR 
                                   3805 ;---------------------
      0015C5                       3806 char:
      0015C5 CD 0B CB         [ 4] 3807 	call func_args 
      0015C8 A1 01            [ 1] 3808 	cp a,#1
      0015CA 27 03            [ 1] 3809 	jreq 1$
      0015CC CC 07 28         [ 2] 3810 	jp syntax_error
      0015CF 85               [ 2] 3811 1$:	popw x 
      0015D0 9F               [ 1] 3812 	ld a,xl 
      0015D1 A4 7F            [ 1] 3813 	and a,#0x7f 
      0015D3 97               [ 1] 3814 	ld xl,a
      0015D4 A6 03            [ 1] 3815 	ld a,#TK_CHAR
      0015D6 81               [ 4] 3816 	ret
                                   3817 
                                   3818 ;---------------------
                                   3819 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3820 ; extract first character 
                                   3821 ; of string argument 
                                   3822 ; return it as TK_INTGR 
                                   3823 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015D7                       3824 ascii:
      0015D7 A6 07            [ 1] 3825 	ld a,#TK_LPAREN
      0015D9 CD 0B BE         [ 4] 3826 	call expect 
      0015DC CD 08 17         [ 4] 3827 	call next_token 
      0015DF A1 02            [ 1] 3828 	cp a,#TK_QSTR 
      0015E1 27 0E            [ 1] 3829 	jreq 1$
      0015E3 A1 03            [ 1] 3830 	cp a,#TK_CHAR 
      0015E5 27 0D            [ 1] 3831 	jreq 2$ 
      0015E7 A1 82            [ 1] 3832 	cp a,#TK_CFUNC 
      0015E9 27 03            [ 1] 3833 	jreq 0$
      0015EB CC 07 28         [ 2] 3834 	jp syntax_error
      0015EE FD               [ 4] 3835 0$: call (x)
      0015EF 20 03            [ 2] 3836 	jra 2$
      0015F1                       3837 1$: 
      0015F1 F6               [ 1] 3838 	ld a,(x) 
      0015F2 5F               [ 1] 3839 	clrw x
      0015F3 97               [ 1] 3840 	ld xl,a 
      0015F4                       3841 2$: 
      0015F4 89               [ 2] 3842 	pushw x 
      0015F5 A6 08            [ 1] 3843 	ld a,#TK_RPAREN 
      0015F7 CD 0B BE         [ 4] 3844 	call expect
      0015FA 85               [ 2] 3845 	popw x 
      0015FB A6 84            [ 1] 3846 	ld a,#TK_INTGR 
      0015FD 81               [ 4] 3847 	ret 
                                   3848 
                                   3849 ;---------------------
                                   3850 ;BASIC: KEY
                                   3851 ; wait for a character 
                                   3852 ; received from STDIN 
                                   3853 ; input:
                                   3854 ;	none 
                                   3855 ; output:
                                   3856 ;	X 		ASCII character 
                                   3857 ;---------------------
      0015FE                       3858 key:
      0015FE CD 02 C2         [ 4] 3859 	call getc 
      001601 5F               [ 1] 3860 	clrw x 
      001602 97               [ 1] 3861 	ld xl,a 
      001603 A6 84            [ 1] 3862 	ld a,#TK_INTGR
      001605 81               [ 4] 3863 	ret
                                   3864 
                                   3865 ;----------------------
                                   3866 ; BASIC: QKEY
                                   3867 ; Return true if there 
                                   3868 ; is a character in 
                                   3869 ; waiting in STDIN 
                                   3870 ; input:
                                   3871 ;  none 
                                   3872 ; output:
                                   3873 ;   X 		0|-1 
                                   3874 ;-----------------------
      001606                       3875 qkey:: 
      001606 5F               [ 1] 3876 	clrw x 
      001607 C6 00 2A         [ 1] 3877 	ld a,rx1_head
      00160A C1 00 2B         [ 1] 3878 	cp a,rx1_tail 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00160D 27 01            [ 1] 3879 	jreq 9$ 
      00160F 53               [ 2] 3880 	cplw x 
      001610 A6 84            [ 1] 3881 9$: ld a,#TK_INTGR
      001612 81               [ 4] 3882 	ret 
                                   3883 
                                   3884 ;---------------------
                                   3885 ; BASIC: GPIO(expr,reg)
                                   3886 ; return gpio address 
                                   3887 ; expr {0..8}
                                   3888 ; input:
                                   3889 ;   none 
                                   3890 ; output:
                                   3891 ;   X 		gpio register address
                                   3892 ;----------------------------
                           000003  3893 	PORT=3
                           000001  3894 	REG=1 
                           000004  3895 	VSIZE=4 
      001613                       3896 gpio:
      001613 CD 0B CB         [ 4] 3897 	call func_args 
      001616 A1 02            [ 1] 3898 	cp a,#2
      001618 27 03            [ 1] 3899 	jreq 1$
      00161A CC 07 28         [ 2] 3900 	jp syntax_error  
      00161D                       3901 1$:	
      00161D 1E 03            [ 2] 3902 	ldw x,(PORT,sp)
      00161F 2B 17            [ 1] 3903 	jrmi bad_port
      001621 A3 00 09         [ 2] 3904 	cpw x,#9
      001624 2A 12            [ 1] 3905 	jrpl bad_port
      001626 A6 05            [ 1] 3906 	ld a,#5
      001628 42               [ 4] 3907 	mul x,a
      001629 1C 50 00         [ 2] 3908 	addw x,#GPIO_BASE 
      00162C 1F 03            [ 2] 3909 	ldw (PORT,sp),x  
      00162E 1E 01            [ 2] 3910 	ldw x,(REG,sp) 
      001630 72 FB 03         [ 2] 3911 	addw x,(PORT,sp)
      001633 A6 84            [ 1] 3912 	ld a,#TK_INTGR
      001635                       3913 	_drop VSIZE 
      001635 5B 04            [ 2]    1     addw sp,#VSIZE 
      001637 81               [ 4] 3914 	ret
      001638                       3915 bad_port:
      001638 A6 0A            [ 1] 3916 	ld a,#ERR_BAD_VALUE
      00163A CC 07 2A         [ 2] 3917 	jp tb_error
                                   3918 
                                   3919 
                                   3920 ;-------------------------
                                   3921 ; BASIC: UFLASH 
                                   3922 ; return free flash address
                                   3923 ; input:
                                   3924 ;  none 
                                   3925 ; output:
                                   3926 ;	A		TK_INTGR
                                   3927 ;   X 		free address 
                                   3928 ;---------------------------
      00163D                       3929 uflash:
      00163D CE 2A 00         [ 2] 3930 	ldw x,app_sign
      001640 A3 10 93         [ 2] 3931 	cpw x,#4243 ; signature "BC" 
      001643 27 08            [ 1] 3932 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001645 CE 2A 02         [ 2] 3933 	ldw x,app_size 
      001648 1C 2A 04         [ 2] 3934 	addw x,#app
      00164B 20 03            [ 2] 3935 	jra 2$
      00164D AE 2A 00         [ 2] 3936 1$:	ldw x,#app_space 
      001650 A6 84            [ 1] 3937 2$:	ld a,#TK_INTGR 
      001652 81               [ 4] 3938 	ret 
                                   3939 
                                   3940 
                                   3941 ;---------------------
                                   3942 ; BASIC: USR(addr[,arg])
                                   3943 ; execute a function written 
                                   3944 ; in binary code.
                                   3945 ; binary fonction should 
                                   3946 ; return token attribute in A 
                                   3947 ; and value in X. 
                                   3948 ; input:
                                   3949 ;   addr	routine address 
                                   3950 ;   arg 	is an optional argument 
                                   3951 ; output:
                                   3952 ;   A 		token attribute 
                                   3953 ;   X       returned value 
                                   3954 ;---------------------
      001653                       3955 usr:
      001653 90 89            [ 2] 3956 	pushw y 	
      001655 CD 0B CB         [ 4] 3957 	call func_args 
      001658 A1 01            [ 1] 3958 	cp a,#1 
      00165A 27 07            [ 1] 3959 	jreq 2$
      00165C A1 02            [ 1] 3960 	cp a,#2
      00165E 27 03            [ 1] 3961 	jreq 2$  
      001660 CC 07 28         [ 2] 3962 	jp syntax_error 
      001663 90 85            [ 2] 3963 2$: popw y  ; arg|addr 
      001665 A1 01            [ 1] 3964 	cp a,#1
      001667 27 02            [ 1] 3965 	jreq 3$
      001669 85               [ 2] 3966 	popw x ; addr
      00166A 51               [ 1] 3967 	exgw x,y 
      00166B 90 FD            [ 4] 3968 3$: call (y)
      00166D 90 85            [ 2] 3969 	popw y 
      00166F 81               [ 4] 3970 	ret 
                                   3971 
                                   3972 ;------------------------------
                                   3973 ; BASIC: BYE 
                                   3974 ; halt mcu in its lowest power mode 
                                   3975 ; wait for reset or external interrupt
                                   3976 ; do a cold start on wakeup.
                                   3977 ;------------------------------
      001670                       3978 bye:
      001670 72 0D 52 30 FB   [ 2] 3979 	btjf UART1_SR,#UART_SR_TC,.
      001675 8E               [10] 3980 	halt
      001676 CC 04 6F         [ 2] 3981 	jp cold_start  
                                   3982 
                                   3983 ;----------------------------------
                                   3984 ; BASIC: SLEEP 
                                   3985 ; halt mcu until reset or external
                                   3986 ; interrupt.
                                   3987 ; Resume progam after SLEEP command
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   3988 ;----------------------------------
      001679                       3989 sleep:
      001679 72 0D 52 30 FB   [ 2] 3990 	btjf UART1_SR,#UART_SR_TC,.
      00167E 72 16 00 20      [ 1] 3991 	bset flags,#FSLEEP
      001682 8E               [10] 3992 	halt 
      001683 81               [ 4] 3993 	ret 
                                   3994 
                                   3995 ;-------------------------------
                                   3996 ; BASIC: PAUSE expr 
                                   3997 ; suspend execution for n msec.
                                   3998 ; input:
                                   3999 ;	none
                                   4000 ; output:
                                   4001 ;	none 
                                   4002 ;------------------------------
      001684                       4003 pause:
      001684 CD 0C CF         [ 4] 4004 	call expression
      001687 A1 84            [ 1] 4005 	cp a,#TK_INTGR
      001689 27 03            [ 1] 4006 	jreq pause02 
      00168B CC 07 28         [ 2] 4007 	jp syntax_error
      00168E                       4008 pause02: 
      00168E 5D               [ 2] 4009 1$: tnzw x 
      00168F 27 04            [ 1] 4010 	jreq 2$
      001691 8F               [10] 4011 	wfi 
      001692 5A               [ 2] 4012 	decw x 
      001693 26 F9            [ 1] 4013 	jrne 1$
      001695 4F               [ 1] 4014 2$:	clr a 
      001696 81               [ 4] 4015 	ret 
                                   4016 
                                   4017 ;------------------------------
                                   4018 ; BASIC: AWU expr
                                   4019 ; halt mcu for 'expr' milliseconds
                                   4020 ; use Auto wakeup peripheral
                                   4021 ; all oscillators stopped except LSI
                                   4022 ; range: 1ms - 511ms
                                   4023 ; input:
                                   4024 ;  none
                                   4025 ; output:
                                   4026 ;  none:
                                   4027 ;------------------------------
      001697                       4028 awu:
      001697 CD 0C CF         [ 4] 4029   call expression
      00169A A1 84            [ 1] 4030   cp a,#TK_INTGR
      00169C 27 03            [ 1] 4031   jreq awu02
      00169E CC 07 28         [ 2] 4032   jp syntax_error
      0016A1                       4033 awu02:
      0016A1 A3 14 00         [ 2] 4034   cpw x,#5120
      0016A4 2B 0C            [ 1] 4035   jrmi 1$ 
      0016A6 35 0F 50 F2      [ 1] 4036   mov AWU_TBR,#15 
      0016AA A6 1E            [ 1] 4037   ld a,#30
      0016AC 62               [ 2] 4038   div x,a
      0016AD A6 10            [ 1] 4039   ld a,#16
      0016AF 62               [ 2] 4040   div x,a 
      0016B0 20 1E            [ 2] 4041   jra 4$
      0016B2                       4042 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0016B2 A3 08 00         [ 2] 4043   cpw x,#2048
      0016B5 2B 09            [ 1] 4044   jrmi 2$ 
      0016B7 35 0E 50 F2      [ 1] 4045   mov AWU_TBR,#14
      0016BB A6 50            [ 1] 4046   ld a,#80
      0016BD 62               [ 2] 4047   div x,a 
      0016BE 20 10            [ 2] 4048   jra 4$   
      0016C0                       4049 2$:
      0016C0 35 07 50 F2      [ 1] 4050   mov AWU_TBR,#7
      0016C4                       4051 3$:  
                                   4052 ; while X > 64  divide by 2 and increment AWU_TBR 
      0016C4 A3 00 40         [ 2] 4053   cpw x,#64 
      0016C7 23 07            [ 2] 4054   jrule 4$ 
      0016C9 72 5C 50 F2      [ 1] 4055   inc AWU_TBR 
      0016CD 54               [ 2] 4056   srlw x 
      0016CE 20 F4            [ 2] 4057   jra 3$ 
      0016D0                       4058 4$:
      0016D0 9F               [ 1] 4059   ld a, xl
      0016D1 4A               [ 1] 4060   dec a 
      0016D2 27 01            [ 1] 4061   jreq 5$
      0016D4 4A               [ 1] 4062   dec a 	
      0016D5                       4063 5$: 
      0016D5 A4 3E            [ 1] 4064   and a,#0x3e 
      0016D7 C7 50 F1         [ 1] 4065   ld AWU_APR,a 
      0016DA 72 18 50 F0      [ 1] 4066   bset AWU_CSR,#AWU_CSR_AWUEN
      0016DE 8E               [10] 4067   halt 
                                   4068 
      0016DF 81               [ 4] 4069   ret 
                                   4070 
                                   4071 ;------------------------------
                                   4072 ; BASIC: TICKS
                                   4073 ; return msec ticks counter value 
                                   4074 ; input:
                                   4075 ; 	none 
                                   4076 ; output:
                                   4077 ;	X 		TK_INTGR
                                   4078 ;-------------------------------
      0016E0                       4079 get_ticks:
      0016E0 CE 00 0E         [ 2] 4080 	ldw x,ticks 
      0016E3 A6 84            [ 1] 4081 	ld a,#TK_INTGR
      0016E5 81               [ 4] 4082 	ret 
                                   4083 
                                   4084 
                                   4085 
                                   4086 ;------------------------------
                                   4087 ; BASIC: ABS(expr)
                                   4088 ; return absolute value of expr.
                                   4089 ; input:
                                   4090 ;   none
                                   4091 ; output:
                                   4092 ;   X     	positive integer
                                   4093 ;-------------------------------
      0016E6                       4094 abs:
      0016E6 CD 0B CB         [ 4] 4095 	call func_args 
      0016E9 A1 01            [ 1] 4096 	cp a,#1 
      0016EB 27 03            [ 1] 4097 	jreq 0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0016ED CC 07 28         [ 2] 4098 	jp syntax_error
      0016F0                       4099 0$:  
      0016F0 85               [ 2] 4100     popw x   
      0016F1 9E               [ 1] 4101 	ld a,xh 
      0016F2 A5 80            [ 1] 4102 	bcp a,#0x80 
      0016F4 27 01            [ 1] 4103 	jreq 2$ 
      0016F6 50               [ 2] 4104 	negw x 
      0016F7 A6 84            [ 1] 4105 2$: ld a,#TK_INTGR 
      0016F9 81               [ 4] 4106 	ret 
                                   4107 
                                   4108 ;------------------------------
                                   4109 ; BASIC: AND(expr1,expr2)
                                   4110 ; Apply bit AND relation between
                                   4111 ; the 2 arguments, i.e expr1 & expr2 
                                   4112 ; output:
                                   4113 ; 	A 		TK_INTGR
                                   4114 ;   X 		result 
                                   4115 ;------------------------------
      0016FA                       4116 bit_and:
      0016FA CD 0B CB         [ 4] 4117 	call func_args 
      0016FD A1 02            [ 1] 4118 	cp a,#2
      0016FF 27 03            [ 1] 4119 	jreq 1$
      001701 CC 07 28         [ 2] 4120 	jp syntax_error 
      001704 85               [ 2] 4121 1$:	popw x 
      001705 9E               [ 1] 4122 	ld a,xh 
      001706 14 01            [ 1] 4123 	and a,(1,sp)
      001708 95               [ 1] 4124 	ld xh,a 
      001709 9F               [ 1] 4125 	ld a,xl
      00170A 14 02            [ 1] 4126 	and a,(2,sp)
      00170C 97               [ 1] 4127 	ld xl,a 
      00170D                       4128 	_drop 2 
      00170D 5B 02            [ 2]    1     addw sp,#2 
      00170F A6 84            [ 1] 4129 	ld a,#TK_INTGR
      001711 81               [ 4] 4130 	ret
                                   4131 
                                   4132 ;------------------------------
                                   4133 ; BASIC: OR(expr1,expr2)
                                   4134 ; Apply bit OR relation between
                                   4135 ; the 2 arguments, i.e expr1 | expr2 
                                   4136 ; output:
                                   4137 ; 	A 		TK_INTGR
                                   4138 ;   X 		result 
                                   4139 ;------------------------------
      001712                       4140 bit_or:
      001712 CD 0B CB         [ 4] 4141 	call func_args 
      001715 A1 02            [ 1] 4142 	cp a,#2
      001717 27 03            [ 1] 4143 	jreq 1$
      001719 CC 07 28         [ 2] 4144 	jp syntax_error 
      00171C                       4145 1$: 
      00171C 85               [ 2] 4146 	popw x 
      00171D 9E               [ 1] 4147 	ld a,xh 
      00171E 1A 01            [ 1] 4148 	or a,(1,sp)
      001720 95               [ 1] 4149 	ld xh,a 
      001721 9F               [ 1] 4150 	ld a,xl 
      001722 1A 02            [ 1] 4151 	or a,(2,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001724 97               [ 1] 4152 	ld xl,a 
      001725                       4153 	_drop 2 
      001725 5B 02            [ 2]    1     addw sp,#2 
      001727 A6 84            [ 1] 4154 	ld a,#TK_INTGR 
      001729 81               [ 4] 4155 	ret
                                   4156 
                                   4157 ;------------------------------
                                   4158 ; BASIC: XOR(expr1,expr2)
                                   4159 ; Apply bit XOR relation between
                                   4160 ; the 2 arguments, i.e expr1 ^ expr2 
                                   4161 ; output:
                                   4162 ; 	A 		TK_INTGR
                                   4163 ;   X 		result 
                                   4164 ;------------------------------
      00172A                       4165 bit_xor:
      00172A CD 0B CB         [ 4] 4166 	call func_args 
      00172D A1 02            [ 1] 4167 	cp a,#2
      00172F 27 03            [ 1] 4168 	jreq 1$
      001731 CC 07 28         [ 2] 4169 	jp syntax_error 
      001734                       4170 1$: 
      001734 85               [ 2] 4171 	popw x 
      001735 9E               [ 1] 4172 	ld a,xh 
      001736 18 01            [ 1] 4173 	xor a,(1,sp)
      001738 95               [ 1] 4174 	ld xh,a 
      001739 9F               [ 1] 4175 	ld a,xl 
      00173A 18 02            [ 1] 4176 	xor a,(2,sp)
      00173C 97               [ 1] 4177 	ld xl,a 
      00173D                       4178 	_drop 2 
      00173D 5B 02            [ 2]    1     addw sp,#2 
      00173F A6 84            [ 1] 4179 	ld a,#TK_INTGR 
      001741 81               [ 4] 4180 	ret 
                                   4181 
                                   4182 ;------------------------------
                                   4183 ; BASIC: LSHIFT(expr1,expr2)
                                   4184 ; logical shift left expr1 by 
                                   4185 ; expr2 bits 
                                   4186 ; output:
                                   4187 ; 	A 		TK_INTGR
                                   4188 ;   X 		result 
                                   4189 ;------------------------------
      001742                       4190 lshift:
      001742 CD 0B CB         [ 4] 4191 	call func_args
      001745 A1 02            [ 1] 4192 	cp a,#2 
      001747 27 03            [ 1] 4193 	jreq 1$
      001749 CC 07 28         [ 2] 4194 	jp syntax_error
      00174C 90 85            [ 2] 4195 1$: popw y   
      00174E 85               [ 2] 4196 	popw x 
      00174F 90 5D            [ 2] 4197 	tnzw y 
      001751 27 05            [ 1] 4198 	jreq 4$
      001753 58               [ 2] 4199 2$:	sllw x 
      001754 90 5A            [ 2] 4200 	decw y 
      001756 26 FB            [ 1] 4201 	jrne 2$
      001758                       4202 4$:  
      001758 A6 84            [ 1] 4203 	ld a,#TK_INTGR
      00175A 81               [ 4] 4204 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4205 
                                   4206 ;------------------------------
                                   4207 ; BASIC: RSHIFT(expr1,expr2)
                                   4208 ; logical shift right expr1 by 
                                   4209 ; expr2 bits.
                                   4210 ; output:
                                   4211 ; 	A 		TK_INTGR
                                   4212 ;   X 		result 
                                   4213 ;------------------------------
      00175B                       4214 rshift:
      00175B CD 0B CB         [ 4] 4215 	call func_args
      00175E A1 02            [ 1] 4216 	cp a,#2 
      001760 27 03            [ 1] 4217 	jreq 1$
      001762 CC 07 28         [ 2] 4218 	jp syntax_error
      001765 90 85            [ 2] 4219 1$: popw y  
      001767 85               [ 2] 4220 	popw x
      001768 90 5D            [ 2] 4221 	tnzw y 
      00176A 27 05            [ 1] 4222 	jreq 4$
      00176C 54               [ 2] 4223 2$:	srlw x 
      00176D 90 5A            [ 2] 4224 	decw y 
      00176F 26 FB            [ 1] 4225 	jrne 2$
      001771                       4226 4$:  
      001771 A6 84            [ 1] 4227 	ld a,#TK_INTGR
      001773 81               [ 4] 4228 	ret
                                   4229 
                                   4230 ;--------------------------
                                   4231 ; BASIC: FCPU integer
                                   4232 ; set CPU frequency 
                                   4233 ;-------------------------- 
                                   4234 
      001774                       4235 fcpu:
      001774 A6 84            [ 1] 4236 	ld a,#TK_INTGR
      001776 CD 0B BE         [ 4] 4237 	call expect 
      001779 9F               [ 1] 4238 	ld a,xl 
      00177A A4 07            [ 1] 4239 	and a,#7 
      00177C C7 50 C6         [ 1] 4240 	ld CLK_CKDIVR,a 
      00177F 81               [ 4] 4241 	ret 
                                   4242 
                                   4243 ;------------------------------
                                   4244 ; BASIC: PMODE pin#, mode 
                                   4245 ; Arduino pin. 
                                   4246 ; define pin as input or output
                                   4247 ; pin#: {0..15}
                                   4248 ; mode: INPUT|OUTPUT  
                                   4249 ;------------------------------
                           000001  4250 	PINNO=1
                           000001  4251 	VSIZE=1
      001780                       4252 pin_mode:
      001780                       4253 	_vars VSIZE 
      001780 52 01            [ 2]    1     sub sp,#VSIZE 
      001782 CD 0B D0         [ 4] 4254 	call arg_list 
      001785 A1 02            [ 1] 4255 	cp a,#2 
      001787 27 03            [ 1] 4256 	jreq 1$
      001789 CC 07 28         [ 2] 4257 	jp syntax_error 
      00178C 90 85            [ 2] 4258 1$: popw y ; mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00178E 85               [ 2] 4259 	popw x ; Dx pin 
      00178F CD 17 CC         [ 4] 4260 	call select_pin 
      001792 6B 01            [ 1] 4261 	ld (PINNO,sp),a  
      001794 A6 01            [ 1] 4262 	ld a,#1 
      001796 0D 01            [ 1] 4263 	tnz (PINNO,sp)
      001798 27 0D            [ 1] 4264 	jreq 4$
      00179A 48               [ 1] 4265 2$:	sll a 
      00179B 0A 01            [ 1] 4266 	dec (PINNO,sp)
      00179D 26 FB            [ 1] 4267 	jrne 2$ 
      00179F 6B 01            [ 1] 4268 	ld (PINNO,sp),a
      0017A1 7B 01            [ 1] 4269 	ld a,(PINNO,sp)
      0017A3 EA 03            [ 1] 4270 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      0017A5 E7 03            [ 1] 4271 	ld (GPIO_CR1,x),a 
      0017A7 90 A3 00 01      [ 2] 4272 4$:	cpw y,#OUTP 
      0017AB 27 10            [ 1] 4273 	jreq 6$
                                   4274 ; input mode
                                   4275 ; disable external interrupt 
      0017AD 7B 01            [ 1] 4276 	ld a,(PINNO,sp)
      0017AF 43               [ 1] 4277 	cpl a 
      0017B0 E4 04            [ 1] 4278 	and a,(GPIO_CR2,x)
      0017B2 E7 04            [ 1] 4279 	ld (GPIO_CR2,x),a 
                                   4280 ;clear bit in DDR for input mode 
      0017B4 7B 01            [ 1] 4281 	ld a,(PINNO,sp)
      0017B6 43               [ 1] 4282 	cpl a 
      0017B7 E4 02            [ 1] 4283 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      0017B9 E7 02            [ 1] 4284 	ld (GPIO_DDR,x),a 
      0017BB 20 0C            [ 2] 4285 	jra 9$
      0017BD                       4286 6$: ;output mode  
      0017BD 7B 01            [ 1] 4287 	ld a,(PINNO,sp)
      0017BF EA 02            [ 1] 4288 	or a,(GPIO_DDR,x) ; bit==1 for output 
      0017C1 E7 02            [ 1] 4289 	ld (GPIO_DDR,x),a 
      0017C3 7B 01            [ 1] 4290 	ld a,(PINNO,sp)
      0017C5 EA 04            [ 1] 4291 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      0017C7 E7 04            [ 1] 4292 	ld (GPIO_CR2,x),a 
      0017C9                       4293 9$:	
      0017C9                       4294 	_drop VSIZE 
      0017C9 5B 01            [ 2]    1     addw sp,#VSIZE 
      0017CB 81               [ 4] 4295 	ret
                                   4296 
                                   4297 ;------------------------
                                   4298 ; select Arduino pin 
                                   4299 ; input:
                                   4300 ;   X 	 {0..15} Arduino Dx 
                                   4301 ; output:
                                   4302 ;   A     stm8s208 pin 
                                   4303 ;   X     base address s208 GPIO port 
                                   4304 ;---------------------------
      0017CC                       4305 select_pin:
      0017CC 58               [ 2] 4306 	sllw x 
      0017CD 1C 17 DC         [ 2] 4307 	addw x,#arduino_to_8s208 
      0017D0 FE               [ 2] 4308 	ldw x,(x)
      0017D1 9F               [ 1] 4309 	ld a,xl 
      0017D2 88               [ 1] 4310 	push a 
      0017D3 5E               [ 1] 4311 	swapw x 
      0017D4 A6 05            [ 1] 4312 	ld a,#5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0017D6 42               [ 4] 4313 	mul x,a 
      0017D7 1C 50 00         [ 2] 4314 	addw x,#GPIO_BASE 
      0017DA 84               [ 1] 4315 	pop a 
      0017DB 81               [ 4] 4316 	ret 
                                   4317 ; translation from Arduino D0..D15 to stm8s208rb 
      0017DC                       4318 arduino_to_8s208:
      0017DC 03 06                 4319 .byte 3,6 ; D0 
      0017DE 03 05                 4320 .byte 3,5 ; D1 
      0017E0 04 00                 4321 .byte 4,0 ; D2 
      0017E2 02 01                 4322 .byte 2,1 ; D3
      0017E4 06 00                 4323 .byte 6,0 ; D4
      0017E6 02 02                 4324 .byte 2,2 ; D5
      0017E8 02 03                 4325 .byte 2,3 ; D6
      0017EA 03 01                 4326 .byte 3,1 ; D7
      0017EC 03 03                 4327 .byte 3,3 ; D8
      0017EE 02 04                 4328 .byte 2,4 ; D9
      0017F0 04 05                 4329 .byte 4,5 ; D10
      0017F2 02 06                 4330 .byte 2,6 ; D11
      0017F4 02 07                 4331 .byte 2,7 ; D12
      0017F6 02 05                 4332 .byte 2,5 ; D13
      0017F8 04 02                 4333 .byte 4,2 ; D14
      0017FA 04 01                 4334 .byte 4,1 ; D15
                                   4335 
                                   4336 
                                   4337 ;------------------------------
                                   4338 ; BASIC: RND(expr)
                                   4339 ; return random number 
                                   4340 ; between 1 and expr inclusive
                                   4341 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4342 ; input:
                                   4343 ; 	none 
                                   4344 ; output:
                                   4345 ;	X 		random positive integer 
                                   4346 ;------------------------------
      0017FC                       4347 random:
      0017FC CD 0B CB         [ 4] 4348 	call func_args 
      0017FF A1 01            [ 1] 4349 	cp a,#1
      001801 27 03            [ 1] 4350 	jreq 1$
      001803 CC 07 28         [ 2] 4351 	jp syntax_error
      001806                       4352 1$:  
      001806 A6 80            [ 1] 4353 	ld a,#0x80 
      001808 15 01            [ 1] 4354 	bcp a,(1,sp)
      00180A 27 05            [ 1] 4355 	jreq 2$
      00180C A6 0A            [ 1] 4356 	ld a,#ERR_BAD_VALUE
      00180E CC 07 2A         [ 2] 4357 	jp tb_error
      001811                       4358 2$: 
                                   4359 ; acc16=(x<<5)^x 
      001811 CE 00 12         [ 2] 4360 	ldw x,seedx 
      001814 58               [ 2] 4361 	sllw x 
      001815 58               [ 2] 4362 	sllw x 
      001816 58               [ 2] 4363 	sllw x 
      001817 58               [ 2] 4364 	sllw x 
      001818 58               [ 2] 4365 	sllw x 
      001819 9E               [ 1] 4366 	ld a,xh 
      00181A C8 00 12         [ 1] 4367 	xor a,seedx 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      00181D C7 00 0C         [ 1] 4368 	ld acc16,a 
      001820 9F               [ 1] 4369 	ld a,xl 
      001821 C8 00 13         [ 1] 4370 	xor a,seedx+1 
      001824 C7 00 0D         [ 1] 4371 	ld acc8,a 
                                   4372 ; seedx=seedy 
      001827 CE 00 14         [ 2] 4373 	ldw x,seedy 
      00182A CF 00 12         [ 2] 4374 	ldw seedx,x  
                                   4375 ; seedy=seedy^(seedy>>1)
      00182D 90 54            [ 2] 4376 	srlw y 
      00182F 90 9E            [ 1] 4377 	ld a,yh 
      001831 C8 00 14         [ 1] 4378 	xor a,seedy 
      001834 C7 00 14         [ 1] 4379 	ld seedy,a  
      001837 90 9F            [ 1] 4380 	ld a,yl 
      001839 C8 00 15         [ 1] 4381 	xor a,seedy+1 
      00183C C7 00 15         [ 1] 4382 	ld seedy+1,a 
                                   4383 ; acc16>>3 
      00183F CE 00 0C         [ 2] 4384 	ldw x,acc16 
      001842 54               [ 2] 4385 	srlw x 
      001843 54               [ 2] 4386 	srlw x 
      001844 54               [ 2] 4387 	srlw x 
                                   4388 ; x=acc16^x 
      001845 9E               [ 1] 4389 	ld a,xh 
      001846 C8 00 0C         [ 1] 4390 	xor a,acc16 
      001849 95               [ 1] 4391 	ld xh,a 
      00184A 9F               [ 1] 4392 	ld a,xl 
      00184B C8 00 0D         [ 1] 4393 	xor a,acc8 
      00184E 97               [ 1] 4394 	ld xl,a 
                                   4395 ; seedy=x^seedy 
      00184F C8 00 15         [ 1] 4396 	xor a,seedy+1
      001852 97               [ 1] 4397 	ld xl,a 
      001853 9E               [ 1] 4398 	ld a,xh 
      001854 C8 00 14         [ 1] 4399 	xor a,seedy
      001857 95               [ 1] 4400 	ld xh,a 
      001858 CF 00 14         [ 2] 4401 	ldw seedy,x 
                                   4402 ; return seedy modulo expr + 1 
      00185B 90 85            [ 2] 4403 	popw y 
      00185D 65               [ 2] 4404 	divw x,y 
      00185E 93               [ 1] 4405 	ldw x,y 
      00185F 5C               [ 1] 4406 	incw x 
      001860                       4407 10$:
      001860 A6 84            [ 1] 4408 	ld a,#TK_INTGR
      001862 81               [ 4] 4409 	ret 
                                   4410 
                                   4411 ;---------------------------------
                                   4412 ; BASIC: WORDS 
                                   4413 ; affiche la listes des mots du
                                   4414 ; dictionnaire ainsi que le nombre
                                   4415 ; de mots.
                                   4416 ;---------------------------------
                           000001  4417 	WLEN=1 ; word length
                           000002  4418 	LLEN=2 ; character sent to console
                           000003  4419 	WCNT=3 ; count words printed 
                           000003  4420 	VSIZE=3 
      001863                       4421 words:
      001863                       4422 	_vars VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001863 52 03            [ 2]    1     sub sp,#VSIZE 
      001865 0F 02            [ 1] 4423 	clr (LLEN,sp)
      001867 0F 03            [ 1] 4424 	clr (WCNT,sp)
      001869 90 AE 1F 43      [ 2] 4425 	ldw y,#kword_dict+2
      00186D 93               [ 1] 4426 0$:	ldw x,y
      00186E F6               [ 1] 4427 	ld a,(x)
      00186F A4 0F            [ 1] 4428 	and a,#15 
      001871 6B 01            [ 1] 4429 	ld (WLEN,sp),a 
      001873 0C 03            [ 1] 4430 	inc (WCNT,sp)
      001875 5C               [ 1] 4431 1$:	incw x 
      001876 F6               [ 1] 4432 	ld a,(x)
      001877 CD 02 B2         [ 4] 4433 	call putc 
      00187A 0C 02            [ 1] 4434 	inc (LLEN,sp)
      00187C 0A 01            [ 1] 4435 	dec (WLEN,sp)
      00187E 26 F5            [ 1] 4436 	jrne 1$
      001880 A6 46            [ 1] 4437 	ld a,#70
      001882 11 02            [ 1] 4438 	cp a,(LLEN,sp)
      001884 2B 09            [ 1] 4439 	jrmi 2$   
      001886 A6 20            [ 1] 4440 	ld a,#SPACE 
      001888 CD 02 B2         [ 4] 4441 	call putc 
      00188B 0C 02            [ 1] 4442 	inc (LLEN,sp) 
      00188D 20 07            [ 2] 4443 	jra 3$
      00188F A6 0D            [ 1] 4444 2$: ld a,#CR 
      001891 CD 02 B2         [ 4] 4445 	call putc 
      001894 0F 02            [ 1] 4446 	clr (LLEN,sp)
      001896 72 A2 00 02      [ 2] 4447 3$:	subw y,#2 
      00189A 90 FE            [ 2] 4448 	ldw y,(y)
      00189C 26 CF            [ 1] 4449 	jrne 0$ 
      00189E A6 0D            [ 1] 4450 	ld a,#CR 
      0018A0 CD 02 B2         [ 4] 4451 	call putc  
      0018A3 5F               [ 1] 4452 	clrw x 
      0018A4 7B 03            [ 1] 4453 	ld a,(WCNT,sp)
      0018A6 97               [ 1] 4454 	ld xl,a 
      0018A7 CD 08 72         [ 4] 4455 	call print_int 
      0018AA AE 18 B3         [ 2] 4456 	ldw x,#words_count_msg
      0018AD CD 20 43         [ 4] 4457 	call puts 
      0018B0                       4458 	_drop VSIZE 
      0018B0 5B 03            [ 2]    1     addw sp,#VSIZE 
      0018B2 81               [ 4] 4459 	ret 
      0018B3 20 77 6F 72 64 73 20  4460 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4461 
                                   4462 
                                   4463 ;-----------------------------
                                   4464 ; BASIC: TIMER expr 
                                   4465 ; initialize count down timer 
                                   4466 ;-----------------------------
      0018C9                       4467 set_timer:
      0018C9 CD 0B D0         [ 4] 4468 	call arg_list
      0018CC A1 01            [ 1] 4469 	cp a,#1 
      0018CE 27 03            [ 1] 4470 	jreq 1$
      0018D0 CC 07 28         [ 2] 4471 	jp syntax_error
      0018D3                       4472 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0018D3 85               [ 2] 4473 	popw x 
      0018D4 CF 00 10         [ 2] 4474 	ldw timer,x 
      0018D7 81               [ 4] 4475 	ret 
                                   4476 
                                   4477 ;------------------------------
                                   4478 ; BASIC: TIMEOUT 
                                   4479 ; return state of timer 
                                   4480 ;------------------------------
      0018D8                       4481 timeout:
      0018D8 CE 00 10         [ 2] 4482 	ldw x,timer 
      0018DB                       4483 logical_complement:
      0018DB 53               [ 2] 4484 	cplw x 
      0018DC A3 FF FF         [ 2] 4485 	cpw x,#-1
      0018DF 27 01            [ 1] 4486 	jreq 2$
      0018E1 5F               [ 1] 4487 	clrw x 
      0018E2 A6 84            [ 1] 4488 2$:	ld a,#TK_INTGR
      0018E4 81               [ 4] 4489 	ret 
                                   4490 
                                   4491 ;--------------------------------
                                   4492 ; BASIC NOT(expr) 
                                   4493 ; return logical complement of expr
                                   4494 ;--------------------------------
      0018E5                       4495 func_not:
      0018E5 CD 0B CB         [ 4] 4496 	call func_args  
      0018E8 A1 01            [ 1] 4497 	cp a,#1
      0018EA 27 03            [ 1] 4498 	jreq 1$
      0018EC CC 07 28         [ 2] 4499 	jp syntax_error
      0018EF 85               [ 2] 4500 1$:	popw x 
      0018F0 20 E9            [ 2] 4501 	jra logical_complement
                                   4502 
                                   4503 
                                   4504 
                                   4505 ;-----------------------------------
                                   4506 ; BASIC: IWDGEN expr1 
                                   4507 ; enable independant watchdog timer
                                   4508 ; expr1 is delay in multiple of 62.5µsec
                                   4509 ; expr1 -> {1..16383}
                                   4510 ;-----------------------------------
      0018F2                       4511 enable_iwdg:
      0018F2 CD 0B D0         [ 4] 4512 	call arg_list
      0018F5 A1 01            [ 1] 4513 	cp a,#1 
      0018F7 27 03            [ 1] 4514 	jreq 1$
      0018F9 CC 07 28         [ 2] 4515 	jp syntax_error 
      0018FC 85               [ 2] 4516 1$: popw x 
      0018FD 4B 00            [ 1] 4517 	push #0
      0018FF 35 CC 50 E0      [ 1] 4518 	mov IWDG_KR,#IWDG_KEY_ENABLE
      001903 9E               [ 1] 4519 	ld a,xh 
      001904 A4 3F            [ 1] 4520 	and a,#0x3f
      001906 95               [ 1] 4521 	ld xh,a  
      001907 A3 00 FF         [ 2] 4522 2$:	cpw x,#255
      00190A 23 06            [ 2] 4523 	jrule 3$
      00190C 0C 01            [ 1] 4524 	inc (1,sp)
      00190E 98               [ 1] 4525 	rcf 
      00190F 56               [ 2] 4526 	rrcw x 
      001910 20 F5            [ 2] 4527 	jra 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001912 35 55 50 E0      [ 1] 4528 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001916 84               [ 1] 4529 	pop a  
      001917 C7 50 E1         [ 1] 4530 	ld IWDG_PR,a 
      00191A 9F               [ 1] 4531 	ld a,xl
      00191B 4A               [ 1] 4532 	dec a 
      00191C 35 55 50 E0      [ 1] 4533 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001920 C7 50 E2         [ 1] 4534 	ld IWDG_RLR,a 
      001923 35 AA 50 E0      [ 1] 4535 	mov IWDG_KR,#IWDG_KEY_REFRESH
      001927 81               [ 4] 4536 	ret 
                                   4537 
                                   4538 
                                   4539 ;-----------------------------------
                                   4540 ; BASIC: IWDGREF  
                                   4541 ; refresh independant watchdog count down 
                                   4542 ; timer before it reset MCU. 
                                   4543 ;-----------------------------------
      001928                       4544 refresh_iwdg:
      001928 35 AA 50 E0      [ 1] 4545 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      00192C 81               [ 4] 4546 	ret 
                                   4547 
                                   4548 
                                   4549 ;-------------------------------------
                                   4550 ; BASIC: LOG(expr)
                                   4551 ; return logarithm base 2 of expr 
                                   4552 ; this is the position of most significant
                                   4553 ; bit set. 
                                   4554 ; input: 
                                   4555 ; output:
                                   4556 ;   X     log2 
                                   4557 ;   A     TK_INTGR 
                                   4558 ;*********************************
      00192D                       4559 log2:
      00192D CD 0B CB         [ 4] 4560 	call func_args 
      001930 A1 01            [ 1] 4561 	cp a,#1 
      001932 27 03            [ 1] 4562 	jreq 1$
      001934 CC 07 28         [ 2] 4563 	jp syntax_error 
      001937 85               [ 2] 4564 1$: popw x 
      001938                       4565 leading_one:
      001938 5D               [ 2] 4566 	tnzw x 
      001939 27 0A            [ 1] 4567 	jreq 4$
      00193B A6 0F            [ 1] 4568 	ld a,#15 
      00193D 59               [ 2] 4569 2$: rlcw x 
      00193E 25 03            [ 1] 4570     jrc 3$
      001940 4A               [ 1] 4571 	dec a 
      001941 20 FA            [ 2] 4572 	jra 2$
      001943 5F               [ 1] 4573 3$: clrw x 
      001944 97               [ 1] 4574     ld xl,a
      001945 A6 84            [ 1] 4575 4$:	ld a,#TK_INTGR
      001947 81               [ 4] 4576 	ret 
                                   4577 
                                   4578 ;-----------------------------------
                                   4579 ; BASIC: BIT(expr) 
                                   4580 ; expr ->{0..15}
                                   4581 ; return 2^expr 
                                   4582 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4583 ;    x    2^expr 
                                   4584 ;-----------------------------------
      001948                       4585 bitmask:
      001948 CD 0B CB         [ 4] 4586     call func_args 
      00194B A1 01            [ 1] 4587 	cp a,#1
      00194D 27 03            [ 1] 4588 	jreq 1$
      00194F CC 07 28         [ 2] 4589 	jp syntax_error 
      001952 85               [ 2] 4590 1$: popw x 
      001953 9F               [ 1] 4591 	ld a,xl 
      001954 A4 0F            [ 1] 4592 	and a,#15
      001956 5F               [ 1] 4593 	clrw x 
      001957 5C               [ 1] 4594 	incw x 
      001958 4D               [ 1] 4595 2$: tnz a 
      001959 27 04            [ 1] 4596 	jreq 3$
      00195B 58               [ 2] 4597 	slaw x 
      00195C 4A               [ 1] 4598 	dec a 
      00195D 20 F9            [ 2] 4599 	jra 2$ 
      00195F A6 84            [ 1] 4600 3$: ld a,#TK_INTGR
      001961 81               [ 4] 4601 	ret 
                                   4602 
                                   4603 ;------------------------------
                                   4604 ; BASIC: INVERT(expr)
                                   4605 ; 1's complement 
                                   4606 ;--------------------------------
      001962                       4607 invert:
      001962 CD 0B CB         [ 4] 4608 	call func_args
      001965 A1 01            [ 1] 4609 	cp a,#1 
      001967 27 03            [ 1] 4610 	jreq 1$
      001969 CC 07 28         [ 2] 4611 	jp syntax_error
      00196C 85               [ 2] 4612 1$: popw x  
      00196D 53               [ 2] 4613 	cplw x 
      00196E A6 84            [ 1] 4614 	ld a,#TK_INTGR 
      001970 81               [ 4] 4615 	ret 
                                   4616 
                                   4617 ;------------------------------
                                   4618 ; BASIC: DO 
                                   4619 ; initiate a DO ... UNTIL loop 
                                   4620 ;------------------------------
                           000003  4621 	DOLP_ADR=3 
                           000005  4622 	DOLP_INW=5
                           000004  4623 	VSIZE=4 
      001971                       4624 do_loop:
      001971 85               [ 2] 4625 	popw x 
      001972                       4626 	_vars VSIZE 
      001972 52 04            [ 2]    1     sub sp,#VSIZE 
      001974 89               [ 2] 4627 	pushw x 
      001975 90 CE 00 04      [ 2] 4628 	ldw y,basicptr 
      001979 17 03            [ 2] 4629 	ldw (DOLP_ADR,sp),y
      00197B 90 CE 00 00      [ 2] 4630 	ldw y,in.w 
      00197F 17 05            [ 2] 4631 	ldw (DOLP_INW,sp),y
      001981 72 5C 00 1D      [ 1] 4632 	inc loop_depth 
      001985 81               [ 4] 4633 	ret 
                                   4634 
                                   4635 ;--------------------------------
                                   4636 ; BASIC: UNTIL expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4637 ; loop if exprssion is false 
                                   4638 ; else terminate loop
                                   4639 ;--------------------------------
      001986                       4640 until: 
      001986 72 5D 00 1D      [ 1] 4641 	tnz loop_depth 
      00198A 26 03            [ 1] 4642 	jrne 1$ 
      00198C CC 07 28         [ 2] 4643 	jp syntax_error 
      00198F                       4644 1$: 
      00198F CD 0D 18         [ 4] 4645 	call relation 
      001992 A1 84            [ 1] 4646 	cp a,#TK_INTGR
      001994 27 03            [ 1] 4647 	jreq 2$
      001996 CC 07 28         [ 2] 4648 	jp syntax_error
      001999                       4649 2$: 
      001999 5D               [ 2] 4650 	tnzw x 
      00199A 26 10            [ 1] 4651 	jrne 9$
      00199C 1E 03            [ 2] 4652 	ldw x,(DOLP_ADR,sp)
      00199E CF 00 04         [ 2] 4653 	ldw basicptr,x 
      0019A1 E6 02            [ 1] 4654 	ld a,(2,x)
      0019A3 C7 00 03         [ 1] 4655 	ld count,a 
      0019A6 1E 05            [ 2] 4656 	ldw x,(DOLP_INW,sp)
      0019A8 CF 00 00         [ 2] 4657 	ldw in.w,x 
      0019AB 81               [ 4] 4658 	ret 
      0019AC                       4659 9$:	; remove loop data from stack  
      0019AC 85               [ 2] 4660 	popw x
      0019AD                       4661 	_drop VSIZE
      0019AD 5B 04            [ 2]    1     addw sp,#VSIZE 
      0019AF 72 5A 00 1D      [ 1] 4662 	dec loop_depth 
      0019B3 FC               [ 2] 4663 	jp (x)
                                   4664 
                                   4665 ;--------------------------
                                   4666 ; BASIC: PRTA...PRTI  
                                   4667 ;  return constant value 
                                   4668 ;  PORT  offset in GPIO
                                   4669 ;  array
                                   4670 ;---------------------------
      0019B4                       4671 const_porta:
      0019B4 AE 00 00         [ 2] 4672 	ldw x,#0
      0019B7 A6 84            [ 1] 4673 	ld a,#TK_INTGR 
      0019B9 81               [ 4] 4674 	ret 
      0019BA                       4675 const_portb:
      0019BA AE 00 01         [ 2] 4676 	ldw x,#1
      0019BD A6 84            [ 1] 4677 	ld a,#TK_INTGR 
      0019BF 81               [ 4] 4678 	ret 
      0019C0                       4679 const_portc:
      0019C0 AE 00 02         [ 2] 4680 	ldw x,#2
      0019C3 A6 84            [ 1] 4681 	ld a,#TK_INTGR 
      0019C5 81               [ 4] 4682 	ret 
      0019C6                       4683 const_portd:
      0019C6 AE 00 03         [ 2] 4684 	ldw x,#3
      0019C9 A6 84            [ 1] 4685 	ld a,#TK_INTGR 
      0019CB 81               [ 4] 4686 	ret 
      0019CC                       4687 const_porte:
      0019CC AE 00 04         [ 2] 4688 	ldw x,#4
      0019CF A6 84            [ 1] 4689 	ld a,#TK_INTGR 
      0019D1 81               [ 4] 4690 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      0019D2                       4691 const_portf:
      0019D2 AE 00 05         [ 2] 4692 	ldw x,#5
      0019D5 A6 84            [ 1] 4693 	ld a,#TK_INTGR 
      0019D7 81               [ 4] 4694 	ret 
      0019D8                       4695 const_portg:
      0019D8 AE 00 06         [ 2] 4696 	ldw x,#6
      0019DB A6 84            [ 1] 4697 	ld a,#TK_INTGR 
      0019DD 81               [ 4] 4698 	ret 
      0019DE                       4699 const_porth:
      0019DE AE 00 07         [ 2] 4700 	ldw x,#7
      0019E1 A6 84            [ 1] 4701 	ld a,#TK_INTGR 
      0019E3 81               [ 4] 4702 	ret 
      0019E4                       4703 const_porti:
      0019E4 AE 00 08         [ 2] 4704 	ldw x,#8
      0019E7 A6 84            [ 1] 4705 	ld a,#TK_INTGR 
      0019E9 81               [ 4] 4706 	ret 
                                   4707 
                                   4708 ;-------------------------------
                                   4709 ; following return constant 
                                   4710 ; related to GPIO register offset 
                                   4711 ;---------------------------------
      0019EA                       4712 const_odr:
      0019EA A6 84            [ 1] 4713 	ld a,#TK_INTGR 
      0019EC AE 00 00         [ 2] 4714 	ldw x,#GPIO_ODR
      0019EF 81               [ 4] 4715 	ret 
      0019F0                       4716 const_idr:
      0019F0 A6 84            [ 1] 4717 	ld a,#TK_INTGR 
      0019F2 AE 00 01         [ 2] 4718 	ldw x,#GPIO_IDR
      0019F5 81               [ 4] 4719 	ret 
      0019F6                       4720 const_ddr:
      0019F6 A6 84            [ 1] 4721 	ld a,#TK_INTGR 
      0019F8 AE 00 02         [ 2] 4722 	ldw x,#GPIO_DDR
      0019FB 81               [ 4] 4723 	ret 
      0019FC                       4724 const_cr1:
      0019FC A6 84            [ 1] 4725 	ld a,#TK_INTGR 
      0019FE AE 00 03         [ 2] 4726 	ldw x,#GPIO_CR1
      001A01 81               [ 4] 4727 	ret 
      001A02                       4728 const_cr2:
      001A02 A6 84            [ 1] 4729 	ld a,#TK_INTGR 
      001A04 AE 00 04         [ 2] 4730 	ldw x,#GPIO_CR2
      001A07 81               [ 4] 4731 	ret 
                                   4732 ;-------------------------
                                   4733 ; BASIC: POUT 
                                   4734 ;  constant for port mode
                                   4735 ;  used by PMODE 
                                   4736 ;  to set pin as output
                                   4737 ;------------------------
      001A08                       4738 const_output:
      001A08 A6 84            [ 1] 4739 	ld a,#TK_INTGR 
      001A0A AE 00 01         [ 2] 4740 	ldw x,#OUTP
      001A0D 81               [ 4] 4741 	ret 
                                   4742 
                                   4743 ;-------------------------
                                   4744 ; BASIC: PINP 
                                   4745 ;  constant for port mode
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4746 ;  used by PMODE 
                                   4747 ;  to set pin as input
                                   4748 ;------------------------
      001A0E                       4749 const_input:
      001A0E A6 84            [ 1] 4750 	ld a,#TK_INTGR 
      001A10 AE 00 00         [ 2] 4751 	ldw x,#INP 
      001A13 81               [ 4] 4752 	ret 
                                   4753 	
                                   4754 ;-----------------------
                                   4755 ; memory area constants
                                   4756 ;-----------------------
      001A14                       4757 const_eeprom_base:
      001A14 A6 84            [ 1] 4758 	ld a,#TK_INTGR 
      001A16 AE 40 00         [ 2] 4759 	ldw x,#EEPROM_BASE 
      001A19 81               [ 4] 4760 	ret 
                                   4761 
                                   4762 ;---------------------------
                                   4763 ; BASIC: DATA 
                                   4764 ; when the interpreter find 
                                   4765 ; a DATA line it skip it.
                                   4766 ;---------------------------
      001A1A                       4767 data:
      001A1A 55 00 03 00 01   [ 1] 4768 	mov in,count 
      001A1F 81               [ 4] 4769 	ret 
                                   4770 
                                   4771 ;---------------------------
                                   4772 ; BASIC: DATLN  *expr*
                                   4773 ; set DATA pointer at line# 
                                   4774 ; specified by *expr* 
                                   4775 ;---------------------------
      001A20                       4776 data_line:
      001A20 CD 0C CF         [ 4] 4777 	call expression
      001A23 A1 84            [ 1] 4778 	cp a,#TK_INTGR
      001A25 27 03            [ 1] 4779 	jreq 1$
      001A27 CC 07 28         [ 2] 4780 	jp syntax_error  
      001A2A 4F               [ 1] 4781 1$: clr a 
      001A2B CD 23 2B         [ 4] 4782 	call search_lineno
      001A2E 5D               [ 2] 4783 	tnzw x 
      001A2F 26 05            [ 1] 4784 	jrne 3$
      001A31 A6 05            [ 1] 4785 2$:	ld a,#ERR_NO_LINE 
      001A33 CC 07 2A         [ 2] 4786 	jp tb_error
      001A36                       4787 3$: ; check if valid data line 
      001A36 90 93            [ 1] 4788     ldw y,x 
      001A38 EE 04            [ 2] 4789 	ldw x,(4,x)
      001A3A A3 1A 1A         [ 2] 4790 	cpw x,#data 
      001A3D 26 F2            [ 1] 4791 	jrne 2$ 
      001A3F 90 CF 00 06      [ 2] 4792 	ldw data_ptr,y
      001A43 90 E6 02         [ 1] 4793 	ld a,(2,y)
      001A46 C7 00 09         [ 1] 4794 	ld data_len,a 
      001A49 35 06 00 08      [ 1] 4795 	mov data_ofs,#FIRST_DATA_ITEM 
      001A4D 81               [ 4] 4796 	ret
                                   4797 
                                   4798 ;---------------------------------
                                   4799 ; BASIC: RESTORE 
                                   4800 ; set data_ptr to first data line
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4801 ; if not DATA found pointer set to
                                   4802 ; zero 
                                   4803 ;---------------------------------
      001A4E                       4804 restore:
      001A4E 72 5F 00 06      [ 1] 4805 	clr data_ptr 
      001A52 72 5F 00 07      [ 1] 4806 	clr data_ptr+1
      001A56 72 5F 00 08      [ 1] 4807 	clr data_ofs 
      001A5A 72 5F 00 09      [ 1] 4808 	clr data_len
      001A5E CE 00 19         [ 2] 4809 	ldw x,txtbgn
      001A61                       4810 data_search_loop: 	
      001A61 C3 00 1B         [ 2] 4811 	cpw x,txtend
      001A64 24 1B            [ 1] 4812 	jruge 9$
      001A66 90 93            [ 1] 4813 	ldw y,x 
      001A68 EE 04            [ 2] 4814 	ldw x,(4,x)
      001A6A 1C 1F 49         [ 2] 4815 	addw x,#code_addr
      001A6D FE               [ 2] 4816 	ldw x,(x)
      001A6E A3 1A 1A         [ 2] 4817 	cpw x,#data 
      001A71 26 1A            [ 1] 4818 	jrne try_next_line 
      001A73 90 CF 00 06      [ 2] 4819 	ldw data_ptr,y 
      001A77 90 E6 02         [ 1] 4820 	ld a,(2,y)
      001A7A C7 00 09         [ 1] 4821 	ld data_len,a 
      001A7D 35 06 00 08      [ 1] 4822 	mov data_ofs,#FIRST_DATA_ITEM
      001A81 72 5D 00 09      [ 1] 4823 9$:	tnz data_len 
      001A85 26 05            [ 1] 4824     jrne 10$
      001A87 A6 0C            [ 1] 4825 	ld a,#ERR_NO_DATA 
      001A89 CC 07 2A         [ 2] 4826 	jp tb_error 
      001A8C 81               [ 4] 4827 10$:ret
      001A8D                       4828 try_next_line:
      001A8D 93               [ 1] 4829 	ldw x,y 
      001A8E E6 02            [ 1] 4830 	ld a,(2,x)
      001A90 C7 00 0D         [ 1] 4831 	ld acc8,a 
      001A93 72 5F 00 0C      [ 1] 4832 	clr acc16 
      001A97 72 BB 00 0C      [ 2] 4833 	addw x,acc16 
      001A9B 20 C4            [ 2] 4834 	jra data_search_loop
                                   4835 
                                   4836 
                                   4837 ;---------------------------------
                                   4838 ; BASIC: READ 
                                   4839 ; return next data item | 0 
                                   4840 ;---------------------------------
                           000001  4841 	CTX_BPTR=1 
                           000003  4842 	CTX_IN=3 
                           000004  4843 	CTX_COUNT=4 
                           000005  4844 	XSAVE=5
                           000006  4845 	VSIZE=6
      001A9D                       4846 read:
      001A9D                       4847 	_vars  VSIZE 
      001A9D 52 06            [ 2]    1     sub sp,#VSIZE 
      001A9F                       4848 read01:	
      001A9F C6 00 08         [ 1] 4849 	ld a,data_ofs
      001AA2 C1 00 09         [ 1] 4850 	cp a,data_len 
      001AA5 27 37            [ 1] 4851 	jreq 2$ ; end of line  
      001AA7 CD 0F C5         [ 4] 4852 	call save_context
      001AAA CE 00 06         [ 2] 4853 	ldw x,data_ptr 
      001AAD CF 00 04         [ 2] 4854 	ldw basicptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001AB0 55 00 08 00 01   [ 1] 4855 	mov in,data_ofs 
      001AB5 55 00 09 00 03   [ 1] 4856 	mov count,data_len  
      001ABA CD 0C CF         [ 4] 4857 	call expression 
      001ABD A1 84            [ 1] 4858 	cp a,#TK_INTGR 
      001ABF 27 03            [ 1] 4859 	jreq 1$ 
      001AC1 CC 07 28         [ 2] 4860 	jp syntax_error 
      001AC4                       4861 1$:
      001AC4 1F 05            [ 2] 4862 	ldw (XSAVE,SP),x
      001AC6 CD 08 17         [ 4] 4863 	call next_token ; skip comma
      001AC9 CE 00 04         [ 2] 4864 	ldw x,basicptr 
      001ACC CF 00 06         [ 2] 4865 	ldw data_ptr,x 
      001ACF 55 00 01 00 08   [ 1] 4866 	mov data_ofs,in 
      001AD4 CD 0F D5         [ 4] 4867 	call rest_context
      001AD7 1E 05            [ 2] 4868 	ldw x,(XSAVE,sp)
      001AD9 A6 84            [ 1] 4869 	ld a,#TK_INTGR
      001ADB                       4870 	_drop VSIZE 
      001ADB 5B 06            [ 2]    1     addw sp,#VSIZE 
      001ADD 81               [ 4] 4871 	ret 
      001ADE                       4872 2$: ; end of line reached 
      001ADE 90 CE 00 06      [ 2] 4873 	ldw y, data_ptr 
      001AE2 72 5F 00 06      [ 1] 4874 	clr data_ptr
      001AE6 72 5F 00 07      [ 1] 4875 	clr data_ptr+1   
      001AEA 72 5F 00 08      [ 1] 4876 	clr data_ofs 
      001AEE 72 5F 00 09      [ 1] 4877 	clr data_len 
      001AF2 CD 1A 8D         [ 4] 4878 	call try_next_line 
      001AF5 20 A8            [ 2] 4879 	jra read01
                                   4880 
                                   4881 
                                   4882 ;---------------------------------
                                   4883 ; BASIC: SPIEN clkdiv, 0|1  
                                   4884 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4885 ; if clkdiv==-1 disable SPI
                                   4886 ; 0|1 -> disable|enable  
                                   4887 ;--------------------------------- 
                           000005  4888 SPI_CS_BIT=5
      001AF7                       4889 spi_enable:
      001AF7 CD 0B D0         [ 4] 4890 	call arg_list 
      001AFA A1 02            [ 1] 4891 	cp a,#2
      001AFC 27 03            [ 1] 4892 	jreq 1$
      001AFE CC 07 28         [ 2] 4893 	jp syntax_error 
      001B01                       4894 1$: 
      001B01 72 12 50 C7      [ 1] 4895 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      001B05 85               [ 2] 4896 	popw x  
      001B06 5D               [ 2] 4897 	tnzw x 
      001B07 27 21            [ 1] 4898 	jreq spi_disable 
      001B09 85               [ 2] 4899 	popw x 
      001B0A A6 08            [ 1] 4900 	ld a,#(1<<SPI_CR1_BR)
      001B0C 42               [ 4] 4901 	mul x,a 
      001B0D 9F               [ 1] 4902 	ld a,xl 
      001B0E C7 52 00         [ 1] 4903 	ld SPI_CR1,a 
                                   4904 ; configure ~CS on PE5 (D10 on CN8) as output. 
      001B11 72 1A 50 14      [ 1] 4905 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      001B15 72 1A 50 16      [ 1] 4906 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4907 ; configure SPI as master mode 0.	
      001B19 72 14 52 00      [ 1] 4908 	bset SPI_CR1,#SPI_CR1_MSTR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                   4909 ; ~CS line controlled by sofware 	
      001B1D 72 12 52 01      [ 1] 4910 	bset SPI_CR2,#SPI_CR2_SSM 
      001B21 72 10 52 01      [ 1] 4911     bset SPI_CR2,#SPI_CR2_SSI 
                                   4912 ; enable SPI
      001B25 72 1C 52 00      [ 1] 4913 	bset SPI_CR1,#SPI_CR1_SPE 	
      001B29 81               [ 4] 4914 	ret 
      001B2A                       4915 spi_disable:
      001B2A                       4916 	_drop #2; throw first argument.
      001B2A 5B 02            [ 2]    1     addw sp,##2 
                                   4917 ; wait spi idle 
      001B2C A6 82            [ 1] 4918 1$:	ld a,#0x82 
      001B2E C4 52 03         [ 1] 4919 	and a,SPI_SR
      001B31 A1 02            [ 1] 4920 	cp a,#2 
      001B33 26 F7            [ 1] 4921 	jrne 1$
      001B35 72 1D 52 00      [ 1] 4922 	bres SPI_CR1,#SPI_CR1_SPE
      001B39 72 13 50 C7      [ 1] 4923 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      001B3D 72 1B 50 16      [ 1] 4924 	bres PE_DDR,#SPI_CS_BIT 
      001B41 81               [ 4] 4925 	ret 
                                   4926 
      001B42                       4927 spi_clear_error:
      001B42 A6 78            [ 1] 4928 	ld a,#0x78 
      001B44 C5 52 03         [ 1] 4929 	bcp a,SPI_SR 
      001B47 27 04            [ 1] 4930 	jreq 1$
      001B49 72 5F 52 03      [ 1] 4931 	clr SPI_SR 
      001B4D 81               [ 4] 4932 1$: ret 
                                   4933 
      001B4E                       4934 spi_send_byte:
      001B4E 88               [ 1] 4935 	push a 
      001B4F CD 1B 42         [ 4] 4936 	call spi_clear_error
      001B52 84               [ 1] 4937 	pop a 
      001B53 72 03 52 03 FB   [ 2] 4938 	btjf SPI_SR,#SPI_SR_TXE,.
      001B58 C7 52 04         [ 1] 4939 	ld SPI_DR,a
      001B5B 72 01 52 03 FB   [ 2] 4940 	btjf SPI_SR,#SPI_SR_RXNE,.  
      001B60 C6 52 04         [ 1] 4941 	ld a,SPI_DR 
      001B63 81               [ 4] 4942 	ret 
                                   4943 
      001B64                       4944 spi_rcv_byte:
      001B64 A6 FF            [ 1] 4945 	ld a,#255
      001B66 72 01 52 03 E3   [ 2] 4946 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      001B6B C6 52 04         [ 1] 4947 	ld a,SPI_DR 
      001B6E 81               [ 4] 4948 	ret
                                   4949 
                                   4950 ;------------------------------
                                   4951 ; BASIC: SPIWR byte [,byte]
                                   4952 ; write 1 or more byte
                                   4953 ;------------------------------
      001B6F                       4954 spi_write:
      001B6F CD 0C CF         [ 4] 4955 	call expression
      001B72 A1 84            [ 1] 4956 	cp a,#TK_INTGR 
      001B74 27 03            [ 1] 4957 	jreq 1$
      001B76 CC 07 28         [ 2] 4958 	jp syntax_error 
      001B79                       4959 1$:	
      001B79 9F               [ 1] 4960 	ld a,xl 
      001B7A CD 1B 4E         [ 4] 4961 	call spi_send_byte 
      001B7D CD 08 17         [ 4] 4962 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001B80 A1 09            [ 1] 4963 	cp a,#TK_COMMA 
      001B82 26 02            [ 1] 4964 	jrne 2$ 
      001B84 20 E9            [ 2] 4965 	jra spi_write 
      001B86 4D               [ 1] 4966 2$:	tnz a 
      001B87 27 05            [ 1] 4967 	jreq 3$
      001B89                       4968 	_unget_token  
      001B89 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B8E 81               [ 4] 4969 3$:	ret 
                                   4970 
                                   4971 
                                   4972 ;-------------------------------
                                   4973 ; BASIC: SPIRD 	
                                   4974 ; read one byte from SPI 
                                   4975 ;-------------------------------
      001B8F                       4976 spi_read:
      001B8F CD 1B 64         [ 4] 4977 	call spi_rcv_byte 
      001B92 5F               [ 1] 4978 	clrw x 
      001B93 97               [ 1] 4979 	ld xl,a 
      001B94 A6 84            [ 1] 4980 	ld a,#TK_INTGR 
      001B96 81               [ 4] 4981 	ret 
                                   4982 
                                   4983 ;------------------------------
                                   4984 ; BASIC: SPISEL 0|1 
                                   4985 ; set state of ~CS line
                                   4986 ; 0|1 deselect|select  
                                   4987 ;------------------------------
      001B97                       4988 spi_select:
      001B97 CD 08 17         [ 4] 4989 	call next_token 
      001B9A A1 84            [ 1] 4990 	cp a,#TK_INTGR 
      001B9C 27 03            [ 1] 4991 	jreq 1$
      001B9E CC 07 28         [ 2] 4992 	jp syntax_error 
      001BA1 5D               [ 2] 4993 1$: tnzw x  
      001BA2 27 05            [ 1] 4994 	jreq cs_high 
      001BA4 72 1B 50 14      [ 1] 4995 	bres PE_ODR,#SPI_CS_BIT
      001BA8 81               [ 4] 4996 	ret 
      001BA9                       4997 cs_high: 
      001BA9 72 1A 50 14      [ 1] 4998 	bset PE_ODR,#SPI_CS_BIT
      001BAD 81               [ 4] 4999 	ret 
                                   5000 
                                   5001 ;-------------------------------
                                   5002 ; BASIC: PAD 
                                   5003 ; Return pad buffer address.
                                   5004 ;------------------------------
      001BAE                       5005 pad_ref:
      001BAE AE 16 E0         [ 2] 5006 	ldw x,#pad 
      001BB1 B6 84            [ 1] 5007 	ld a,TK_INTGR
      001BB3 81               [ 4] 5008 	ret 
                                   5009 
                                   5010 
                                   5011 ;------------------------------
                                   5012 ;      dictionary 
                                   5013 ; format:
                                   5014 ;   link:   2 bytes 
                                   5015 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5016 ;   cmd_name: 16 byte max 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                   5017 ;   cmd_index: 2 bytes 
                                   5018 ;------------------------------
                                   5019 	.macro _dict_entry len,name,cmd_idx 
                                   5020 	.word LINK 
                                   5021 	LINK=.
                                   5022 name:
                                   5023 	.byte len 	
                                   5024 	.ascii "name"
                                   5025 	.word cmd_idx 
                                   5026 	.endm 
                                   5027 
                           000000  5028 	LINK=0
                                   5029 ; respect alphabetic order for BASIC names from Z-A
                                   5030 ; this sort order is for a cleaner WORDS cmd output. 	
      001BB4                       5031 kword_end:
      001BB4                       5032 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      001BB4 00 00                    1 	.word LINK 
                           001BB6     2 	LINK=.
      001BB6                          3 XOR:
      001BB6 43                       4 	.byte 3+F_IFUNC 	
      001BB7 58 4F 52                 5 	.ascii "XOR"
      001BBA 00 C2                    6 	.word XOR_IDX 
      001BBC                       5033 	_dict_entry,5,WRITE,WRITE_IDX;write  
      001BBC 1B B6                    1 	.word LINK 
                           001BBE     2 	LINK=.
      001BBE                          3 WRITE:
      001BBE 05                       4 	.byte 5 	
      001BBF 57 52 49 54 45           5 	.ascii "WRITE"
      001BC4 00 C0                    6 	.word WRITE_IDX 
      001BC6                       5034 	_dict_entry,5,WORDS,WORDS_IDX;words 
      001BC6 1B BE                    1 	.word LINK 
                           001BC8     2 	LINK=.
      001BC8                          3 WORDS:
      001BC8 05                       4 	.byte 5 	
      001BC9 57 4F 52 44 53           5 	.ascii "WORDS"
      001BCE 00 BE                    6 	.word WORDS_IDX 
      001BD0                       5035 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      001BD0 1B C8                    1 	.word LINK 
                           001BD2     2 	LINK=.
      001BD2                          3 WAIT:
      001BD2 04                       4 	.byte 4 	
      001BD3 57 41 49 54              5 	.ascii "WAIT"
      001BD7 00 BC                    6 	.word WAIT_IDX 
      001BD9                       5036 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      001BD9 1B D2                    1 	.word LINK 
                           001BDB     2 	LINK=.
      001BDB                          3 USR:
      001BDB 43                       4 	.byte 3+F_IFUNC 	
      001BDC 55 53 52                 5 	.ascii "USR"
      001BDF 00 BA                    6 	.word USR_IDX 
      001BE1                       5037 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      001BE1 1B DB                    1 	.word LINK 
                           001BE3     2 	LINK=.
      001BE3                          3 UNTIL:
      001BE3 05                       4 	.byte 5 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001BE4 55 4E 54 49 4C           5 	.ascii "UNTIL"
      001BE9 00 B8                    6 	.word UNTIL_IDX 
      001BEB                       5038 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      001BEB 1B E3                    1 	.word LINK 
                           001BED     2 	LINK=.
      001BED                          3 UFLASH:
      001BED 46                       4 	.byte 6+F_IFUNC 	
      001BEE 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001BF4 00 B6                    6 	.word UFLASH_IDX 
      001BF6                       5039 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      001BF6 1B ED                    1 	.word LINK 
                           001BF8     2 	LINK=.
      001BF8                          3 UBOUND:
      001BF8 46                       4 	.byte 6+F_IFUNC 	
      001BF9 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      001BFF 00 B4                    6 	.word UBOUND_IDX 
      001C01                       5040 	_dict_entry,4,TONE,TONE_IDX;tone  
      001C01 1B F8                    1 	.word LINK 
                           001C03     2 	LINK=.
      001C03                          3 TONE:
      001C03 04                       4 	.byte 4 	
      001C04 54 4F 4E 45              5 	.ascii "TONE"
      001C08 00 B2                    6 	.word TONE_IDX 
      001C0A                       5041 	_dict_entry,2,TO,TO_IDX;to
      001C0A 1C 03                    1 	.word LINK 
                           001C0C     2 	LINK=.
      001C0C                          3 TO:
      001C0C 02                       4 	.byte 2 	
      001C0D 54 4F                    5 	.ascii "TO"
      001C0F 00 B0                    6 	.word TO_IDX 
      001C11                       5042 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      001C11 1C 0C                    1 	.word LINK 
                           001C13     2 	LINK=.
      001C13                          3 TIMER:
      001C13 05                       4 	.byte 5 	
      001C14 54 49 4D 45 52           5 	.ascii "TIMER"
      001C19 00 AC                    6 	.word TIMER_IDX 
      001C1B                       5043 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      001C1B 1C 13                    1 	.word LINK 
                           001C1D     2 	LINK=.
      001C1D                          3 TIMEOUT:
      001C1D 47                       4 	.byte 7+F_IFUNC 	
      001C1E 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      001C25 00 AE                    6 	.word TMROUT_IDX 
      001C27                       5044 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      001C27 1C 1D                    1 	.word LINK 
                           001C29     2 	LINK=.
      001C29                          3 TICKS:
      001C29 45                       4 	.byte 5+F_IFUNC 	
      001C2A 54 49 43 4B 53           5 	.ascii "TICKS"
      001C2F 00 AA                    6 	.word TICKS_IDX 
      001C31                       5045 	_dict_entry,4,STOP,STOP_IDX;stop 
      001C31 1C 29                    1 	.word LINK 
                           001C33     2 	LINK=.
      001C33                          3 STOP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001C33 04                       4 	.byte 4 	
      001C34 53 54 4F 50              5 	.ascii "STOP"
      001C38 00 A8                    6 	.word STOP_IDX 
      001C3A                       5046 	_dict_entry,4,STEP,STEP_IDX;step 
      001C3A 1C 33                    1 	.word LINK 
                           001C3C     2 	LINK=.
      001C3C                          3 STEP:
      001C3C 04                       4 	.byte 4 	
      001C3D 53 54 45 50              5 	.ascii "STEP"
      001C41 00 A6                    6 	.word STEP_IDX 
      001C43                       5047 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      001C43 1C 3C                    1 	.word LINK 
                           001C45     2 	LINK=.
      001C45                          3 SPIWR:
      001C45 05                       4 	.byte 5 	
      001C46 53 50 49 57 52           5 	.ascii "SPIWR"
      001C4B 00 A4                    6 	.word SPIWR_IDX 
      001C4D                       5048 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      001C4D 1C 45                    1 	.word LINK 
                           001C4F     2 	LINK=.
      001C4F                          3 SPISEL:
      001C4F 06                       4 	.byte 6 	
      001C50 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      001C56 00 A2                    6 	.word SPISEL_IDX 
      001C58                       5049 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      001C58 1C 4F                    1 	.word LINK 
                           001C5A     2 	LINK=.
      001C5A                          3 SPIRD:
      001C5A 45                       4 	.byte 5+F_IFUNC 	
      001C5B 53 50 49 52 44           5 	.ascii "SPIRD"
      001C60 00 9E                    6 	.word SPIRD_IDX 
      001C62                       5050 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      001C62 1C 5A                    1 	.word LINK 
                           001C64     2 	LINK=.
      001C64                          3 SPIEN:
      001C64 05                       4 	.byte 5 	
      001C65 53 50 49 45 4E           5 	.ascii "SPIEN"
      001C6A 00 A0                    6 	.word SPIEN_IDX 
      001C6C                       5051 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      001C6C 1C 64                    1 	.word LINK 
                           001C6E     2 	LINK=.
      001C6E                          3 SLEEP:
      001C6E 05                       4 	.byte 5 	
      001C6F 53 4C 45 45 50           5 	.ascii "SLEEP"
      001C74 00 9C                    6 	.word SLEEP_IDX 
      001C76                       5052     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      001C76 1C 6E                    1 	.word LINK 
                           001C78     2 	LINK=.
      001C78                          3 SIZE:
      001C78 04                       4 	.byte 4 	
      001C79 53 49 5A 45              5 	.ascii "SIZE"
      001C7D 00 C4                    6 	.word SIZE_IDX 
      001C7F                       5053 	_dict_entry,4,SHOW,SHOW_IDX;show 
      001C7F 1C 78                    1 	.word LINK 
                           001C81     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001C81                          3 SHOW:
      001C81 04                       4 	.byte 4 	
      001C82 53 48 4F 57              5 	.ascii "SHOW"
      001C86 00 98                    6 	.word SHOW_IDX 
      001C88                       5054 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      001C88 1C 81                    1 	.word LINK 
                           001C8A     2 	LINK=.
      001C8A                          3 SAVE:
      001C8A 04                       4 	.byte 4 	
      001C8B 53 41 56 45              5 	.ascii "SAVE"
      001C8F 00 36                    6 	.word SAVE_IDX 
      001C91                       5055 	_dict_entry 3,RUN,RUN_IDX;run
      001C91 1C 8A                    1 	.word LINK 
                           001C93     2 	LINK=.
      001C93                          3 RUN:
      001C93 03                       4 	.byte 3 	
      001C94 52 55 4E                 5 	.ascii "RUN"
      001C97 00 96                    6 	.word RUN_IDX 
      001C99                       5056 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      001C99 1C 93                    1 	.word LINK 
                           001C9B     2 	LINK=.
      001C9B                          3 RSHIFT:
      001C9B 46                       4 	.byte 6+F_IFUNC 	
      001C9C 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      001CA2 00 94                    6 	.word RSHIFT_IDX 
      001CA4                       5057 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      001CA4 1C 9B                    1 	.word LINK 
                           001CA6     2 	LINK=.
      001CA6                          3 RND:
      001CA6 43                       4 	.byte 3+F_IFUNC 	
      001CA7 52 4E 44                 5 	.ascii "RND"
      001CAA 00 92                    6 	.word RND_IDX 
      001CAC                       5058 	_dict_entry,6,RETURN,RET_IDX;return 
      001CAC 1C A6                    1 	.word LINK 
                           001CAE     2 	LINK=.
      001CAE                          3 RETURN:
      001CAE 06                       4 	.byte 6 	
      001CAF 52 45 54 55 52 4E        5 	.ascii "RETURN"
      001CB5 00 90                    6 	.word RET_IDX 
      001CB7                       5059 	_dict_entry,7,RESTORE,REST_IDX;restore 
      001CB7 1C AE                    1 	.word LINK 
                           001CB9     2 	LINK=.
      001CB9                          3 RESTORE:
      001CB9 07                       4 	.byte 7 	
      001CBA 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      001CC1 00 8E                    6 	.word REST_IDX 
      001CC3                       5060 	_dict_entry 6,REMARK,REM_IDX;remark 
      001CC3 1C B9                    1 	.word LINK 
                           001CC5     2 	LINK=.
      001CC5                          3 REMARK:
      001CC5 06                       4 	.byte 6 	
      001CC6 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      001CCC 00 8C                    6 	.word REM_IDX 
      001CCE                       5061 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      001CCE 1C C5                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                           001CD0     2 	LINK=.
      001CD0                          3 REBOOT:
      001CD0 06                       4 	.byte 6 	
      001CD1 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      001CD7 00 8A                    6 	.word RBT_IDX 
      001CD9                       5062 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      001CD9 1C D0                    1 	.word LINK 
                           001CDB     2 	LINK=.
      001CDB                          3 READ:
      001CDB 44                       4 	.byte 4+F_IFUNC 	
      001CDC 52 45 41 44              5 	.ascii "READ"
      001CE0 00 88                    6 	.word READ_IDX 
      001CE2                       5063 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      001CE2 1C DB                    1 	.word LINK 
                           001CE4     2 	LINK=.
      001CE4                          3 QKEY:
      001CE4 44                       4 	.byte 4+F_IFUNC 	
      001CE5 51 4B 45 59              5 	.ascii "QKEY"
      001CE9 00 86                    6 	.word QKEY_IDX 
      001CEB                       5064 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      001CEB 1C E4                    1 	.word LINK 
                           001CED     2 	LINK=.
      001CED                          3 PRTI:
      001CED 44                       4 	.byte 4+F_IFUNC 	
      001CEE 50 52 54 49              5 	.ascii "PRTI"
      001CF2 00 84                    6 	.word PRTI_IDX 
      001CF4                       5065 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      001CF4 1C ED                    1 	.word LINK 
                           001CF6     2 	LINK=.
      001CF6                          3 PRTH:
      001CF6 44                       4 	.byte 4+F_IFUNC 	
      001CF7 50 52 54 48              5 	.ascii "PRTH"
      001CFB 00 82                    6 	.word PRTH_IDX 
      001CFD                       5066 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      001CFD 1C F6                    1 	.word LINK 
                           001CFF     2 	LINK=.
      001CFF                          3 PRTG:
      001CFF 44                       4 	.byte 4+F_IFUNC 	
      001D00 50 52 54 47              5 	.ascii "PRTG"
      001D04 00 80                    6 	.word PRTG_IDX 
      001D06                       5067 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      001D06 1C FF                    1 	.word LINK 
                           001D08     2 	LINK=.
      001D08                          3 PRTF:
      001D08 44                       4 	.byte 4+F_IFUNC 	
      001D09 50 52 54 46              5 	.ascii "PRTF"
      001D0D 00 7E                    6 	.word PRTF_IDX 
      001D0F                       5068 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      001D0F 1D 08                    1 	.word LINK 
                           001D11     2 	LINK=.
      001D11                          3 PRTE:
      001D11 44                       4 	.byte 4+F_IFUNC 	
      001D12 50 52 54 45              5 	.ascii "PRTE"
      001D16 00 7C                    6 	.word PRTE_IDX 
      001D18                       5069 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001D18 1D 11                    1 	.word LINK 
                           001D1A     2 	LINK=.
      001D1A                          3 PRTD:
      001D1A 44                       4 	.byte 4+F_IFUNC 	
      001D1B 50 52 54 44              5 	.ascii "PRTD"
      001D1F 00 7A                    6 	.word PRTD_IDX 
      001D21                       5070 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      001D21 1D 1A                    1 	.word LINK 
                           001D23     2 	LINK=.
      001D23                          3 PRTC:
      001D23 44                       4 	.byte 4+F_IFUNC 	
      001D24 50 52 54 43              5 	.ascii "PRTC"
      001D28 00 78                    6 	.word PRTC_IDX 
      001D2A                       5071 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      001D2A 1D 23                    1 	.word LINK 
                           001D2C     2 	LINK=.
      001D2C                          3 PRTB:
      001D2C 44                       4 	.byte 4+F_IFUNC 	
      001D2D 50 52 54 42              5 	.ascii "PRTB"
      001D31 00 76                    6 	.word PRTB_IDX 
      001D33                       5072 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      001D33 1D 2C                    1 	.word LINK 
                           001D35     2 	LINK=.
      001D35                          3 PRTA:
      001D35 44                       4 	.byte 4+F_IFUNC 	
      001D36 50 52 54 41              5 	.ascii "PRTA"
      001D3A 00 74                    6 	.word PRTA_IDX 
      001D3C                       5073 	_dict_entry 5,PRINT,PRT_IDX;print 
      001D3C 1D 35                    1 	.word LINK 
                           001D3E     2 	LINK=.
      001D3E                          3 PRINT:
      001D3E 05                       4 	.byte 5 	
      001D3F 50 52 49 4E 54           5 	.ascii "PRINT"
      001D44 00 72                    6 	.word PRT_IDX 
      001D46                       5074 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      001D46 1D 3E                    1 	.word LINK 
                           001D48     2 	LINK=.
      001D48                          3 POUT:
      001D48 44                       4 	.byte 4+F_IFUNC 	
      001D49 50 4F 55 54              5 	.ascii "POUT"
      001D4D 00 70                    6 	.word POUT_IDX 
      001D4F                       5075 	_dict_entry,4,POKE,POKE_IDX;poke 
      001D4F 1D 48                    1 	.word LINK 
                           001D51     2 	LINK=.
      001D51                          3 POKE:
      001D51 04                       4 	.byte 4 	
      001D52 50 4F 4B 45              5 	.ascii "POKE"
      001D56 00 6E                    6 	.word POKE_IDX 
      001D58                       5076 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      001D58 1D 51                    1 	.word LINK 
                           001D5A     2 	LINK=.
      001D5A                          3 PMODE:
      001D5A 05                       4 	.byte 5 	
      001D5B 50 4D 4F 44 45           5 	.ascii "PMODE"
      001D60 00 68                    6 	.word PMODE_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001D62                       5077 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      001D62 1D 5A                    1 	.word LINK 
                           001D64     2 	LINK=.
      001D64                          3 PINP:
      001D64 44                       4 	.byte 4+F_IFUNC 	
      001D65 50 49 4E 50              5 	.ascii "PINP"
      001D69 00 6C                    6 	.word PINP_IDX 
      001D6B                       5078 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      001D6B 1D 64                    1 	.word LINK 
                           001D6D     2 	LINK=.
      001D6D                          3 PEEK:
      001D6D 44                       4 	.byte 4+F_IFUNC 	
      001D6E 50 45 45 4B              5 	.ascii "PEEK"
      001D72 00 6A                    6 	.word PEEK_IDX 
      001D74                       5079 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      001D74 1D 6D                    1 	.word LINK 
                           001D76     2 	LINK=.
      001D76                          3 PAUSE:
      001D76 05                       4 	.byte 5 	
      001D77 50 41 55 53 45           5 	.ascii "PAUSE"
      001D7C 00 66                    6 	.word PAUSE_IDX 
      001D7E                       5080 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      001D7E 1D 76                    1 	.word LINK 
                           001D80     2 	LINK=.
      001D80                          3 PAD:
      001D80 43                       4 	.byte 3+F_IFUNC 	
      001D81 50 41 44                 5 	.ascii "PAD"
      001D84 00 64                    6 	.word PAD_IDX 
      001D86                       5081 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      001D86 1D 80                    1 	.word LINK 
                           001D88     2 	LINK=.
      001D88                          3 OR:
      001D88 42                       4 	.byte 2+F_IFUNC 	
      001D89 4F 52                    5 	.ascii "OR"
      001D8B 00 62                    6 	.word OR_IDX 
      001D8D                       5082 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      001D8D 1D 88                    1 	.word LINK 
                           001D8F     2 	LINK=.
      001D8F                          3 ODR:
      001D8F 43                       4 	.byte 3+F_IFUNC 	
      001D90 4F 44 52                 5 	.ascii "ODR"
      001D93 00 60                    6 	.word ODR_IDX 
      001D95                       5083 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      001D95 1D 8F                    1 	.word LINK 
                           001D97     2 	LINK=.
      001D97                          3 NOT:
      001D97 43                       4 	.byte 3+F_IFUNC 	
      001D98 4E 4F 54                 5 	.ascii "NOT"
      001D9B 00 5E                    6 	.word NOT_IDX 
      001D9D                       5084 	_dict_entry,4,NEXT,NEXT_IDX;next 
      001D9D 1D 97                    1 	.word LINK 
                           001D9F     2 	LINK=.
      001D9F                          3 NEXT:
      001D9F 04                       4 	.byte 4 	
      001DA0 4E 45 58 54              5 	.ascii "NEXT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001DA4 00 5A                    6 	.word NEXT_IDX 
      001DA6                       5085 	_dict_entry,3,NEW,NEW_IDX;new
      001DA6 1D 9F                    1 	.word LINK 
                           001DA8     2 	LINK=.
      001DA8                          3 NEW:
      001DA8 03                       4 	.byte 3 	
      001DA9 4E 45 57                 5 	.ascii "NEW"
      001DAC 00 5C                    6 	.word NEW_IDX 
      001DAE                       5086 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      001DAE 1D A8                    1 	.word LINK 
                           001DB0     2 	LINK=.
      001DB0                          3 MULDIV:
      001DB0 46                       4 	.byte 6+F_IFUNC 	
      001DB1 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      001DB7 00 58                    6 	.word MULDIV_IDX 
      001DB9                       5087 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      001DB9 1D B0                    1 	.word LINK 
                           001DBB     2 	LINK=.
      001DBB                          3 LSHIFT:
      001DBB 46                       4 	.byte 6+F_IFUNC 	
      001DBC 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      001DC2 00 56                    6 	.word LSHIFT_IDX 
      001DC4                       5088 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      001DC4 1D BB                    1 	.word LINK 
                           001DC6     2 	LINK=.
      001DC6                          3 LOG:
      001DC6 43                       4 	.byte 3+F_IFUNC 	
      001DC7 4C 4F 47                 5 	.ascii "LOG"
      001DCA 00 54                    6 	.word LOG_IDX 
      001DCC                       5089 	_dict_entry 4,LIST,LIST_IDX;list
      001DCC 1D C6                    1 	.word LINK 
                           001DCE     2 	LINK=.
      001DCE                          3 LIST:
      001DCE 04                       4 	.byte 4 	
      001DCF 4C 49 53 54              5 	.ascii "LIST"
      001DD3 00 52                    6 	.word LIST_IDX 
      001DD5                       5090 	_dict_entry 3,LET,LET_IDX;let 
      001DD5 1D CE                    1 	.word LINK 
                           001DD7     2 	LINK=.
      001DD7                          3 LET:
      001DD7 03                       4 	.byte 3 	
      001DD8 4C 45 54                 5 	.ascii "LET"
      001DDB 00 50                    6 	.word LET_IDX 
      001DDD                       5091 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      001DDD 1D D7                    1 	.word LINK 
                           001DDF     2 	LINK=.
      001DDF                          3 KEY:
      001DDF 43                       4 	.byte 3+F_IFUNC 	
      001DE0 4B 45 59                 5 	.ascii "KEY"
      001DE3 00 4E                    6 	.word KEY_IDX 
      001DE5                       5092 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      001DE5 1D DF                    1 	.word LINK 
                           001DE7     2 	LINK=.
      001DE7                          3 IWDGREF:
      001DE7 07                       4 	.byte 7 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001DE8 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      001DEF 00 4C                    6 	.word IWDGREF_IDX 
      001DF1                       5093 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      001DF1 1D E7                    1 	.word LINK 
                           001DF3     2 	LINK=.
      001DF3                          3 IWDGEN:
      001DF3 06                       4 	.byte 6 	
      001DF4 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      001DFA 00 4A                    6 	.word IWDGEN_IDX 
      001DFC                       5094 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      001DFC 1D F3                    1 	.word LINK 
                           001DFE     2 	LINK=.
      001DFE                          3 INVERT:
      001DFE 46                       4 	.byte 6+F_IFUNC 	
      001DFF 49 4E 56 45 52 54        5 	.ascii "INVERT"
      001E05 00 48                    6 	.word INVERT_IDX 
      001E07                       5095 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      001E07 1D FE                    1 	.word LINK 
                           001E09     2 	LINK=.
      001E09                          3 INPUT:
      001E09 05                       4 	.byte 5 	
      001E0A 49 4E 50 55 54           5 	.ascii "INPUT"
      001E0F 00 46                    6 	.word INPUT_IDX 
      001E11                       5096 	_dict_entry,2,IF,IF_IDX;if 
      001E11 1E 09                    1 	.word LINK 
                           001E13     2 	LINK=.
      001E13                          3 IF:
      001E13 02                       4 	.byte 2 	
      001E14 49 46                    5 	.ascii "IF"
      001E16 00 44                    6 	.word IF_IDX 
      001E18                       5097 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      001E18 1E 13                    1 	.word LINK 
                           001E1A     2 	LINK=.
      001E1A                          3 IDR:
      001E1A 43                       4 	.byte 3+F_IFUNC 	
      001E1B 49 44 52                 5 	.ascii "IDR"
      001E1E 00 42                    6 	.word IDR_IDX 
      001E20                       5098 	_dict_entry,3,HEX,HEX_IDX;hex_base
      001E20 1E 1A                    1 	.word LINK 
                           001E22     2 	LINK=.
      001E22                          3 HEX:
      001E22 03                       4 	.byte 3 	
      001E23 48 45 58                 5 	.ascii "HEX"
      001E26 00 40                    6 	.word HEX_IDX 
      001E28                       5099 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      001E28 1E 22                    1 	.word LINK 
                           001E2A     2 	LINK=.
      001E2A                          3 GPIO:
      001E2A 44                       4 	.byte 4+F_IFUNC 	
      001E2B 47 50 49 4F              5 	.ascii "GPIO"
      001E2F 00 3E                    6 	.word GPIO_IDX 
      001E31                       5100 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      001E31 1E 2A                    1 	.word LINK 
                           001E33     2 	LINK=.
      001E33                          3 GOTO:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001E33 04                       4 	.byte 4 	
      001E34 47 4F 54 4F              5 	.ascii "GOTO"
      001E38 00 3C                    6 	.word GOTO_IDX 
      001E3A                       5101 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      001E3A 1E 33                    1 	.word LINK 
                           001E3C     2 	LINK=.
      001E3C                          3 GOSUB:
      001E3C 05                       4 	.byte 5 	
      001E3D 47 4F 53 55 42           5 	.ascii "GOSUB"
      001E42 00 3A                    6 	.word GOSUB_IDX 
      001E44                       5102 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      001E44 1E 3C                    1 	.word LINK 
                           001E46     2 	LINK=.
      001E46                          3 FREE:
      001E46 44                       4 	.byte 4+F_IFUNC 	
      001E47 46 52 45 45              5 	.ascii "FREE"
      001E4B 00 9A                    6 	.word FREE_IDX 
      001E4D                       5103 	_dict_entry,3,FOR,FOR_IDX;for 
      001E4D 1E 46                    1 	.word LINK 
                           001E4F     2 	LINK=.
      001E4F                          3 FOR:
      001E4F 03                       4 	.byte 3 	
      001E50 46 4F 52                 5 	.ascii "FOR"
      001E53 00 38                    6 	.word FOR_IDX 
      001E55                       5104 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      001E55 1E 4F                    1 	.word LINK 
                           001E57     2 	LINK=.
      001E57                          3 FCPU:
      001E57 04                       4 	.byte 4 	
      001E58 46 43 50 55              5 	.ascii "FCPU"
      001E5C 00 34                    6 	.word FCPU_IDX 
      001E5E                       5105 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      001E5E 1E 57                    1 	.word LINK 
                           001E60     2 	LINK=.
      001E60                          3 ERASE:
      001E60 05                       4 	.byte 5 	
      001E61 45 52 41 53 45           5 	.ascii "ERASE"
      001E66 00 32                    6 	.word ERASE_IDX 
      001E68                       5106 	_dict_entry,3,END,END_IDX;cmd_end  
      001E68 1E 60                    1 	.word LINK 
                           001E6A     2 	LINK=.
      001E6A                          3 END:
      001E6A 03                       4 	.byte 3 	
      001E6B 45 4E 44                 5 	.ascii "END"
      001E6E 00 30                    6 	.word END_IDX 
      001E70                       5107 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      001E70 1E 6A                    1 	.word LINK 
                           001E72     2 	LINK=.
      001E72                          3 EEPROM:
      001E72 46                       4 	.byte 6+F_IFUNC 	
      001E73 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      001E79 00 2E                    6 	.word EEPROM_IDX 
      001E7B                       5108 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      001E7B 1E 72                    1 	.word LINK 
                           001E7D     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001E7D                          3 EDIT:
      001E7D 04                       4 	.byte 4 	
      001E7E 45 44 49 54              5 	.ascii "EDIT"
      001E82 00 2C                    6 	.word EDIT_IDX 
      001E84                       5109 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      001E84 1E 7D                    1 	.word LINK 
                           001E86     2 	LINK=.
      001E86                          3 DWRITE:
      001E86 06                       4 	.byte 6+F_CMD 	
      001E87 44 57 52 49 54 45        5 	.ascii "DWRITE"
      001E8D 00 2A                    6 	.word DWRITE_IDX 
      001E8F                       5110 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      001E8F 1E 86                    1 	.word LINK 
                           001E91     2 	LINK=.
      001E91                          3 DREAD:
      001E91 45                       4 	.byte 5+F_IFUNC 	
      001E92 44 52 45 41 44           5 	.ascii "DREAD"
      001E97 00 28                    6 	.word DREAD_IDX 
      001E99                       5111 	_dict_entry,2,DO,DO_IDX;do_loop
      001E99 1E 91                    1 	.word LINK 
                           001E9B     2 	LINK=.
      001E9B                          3 DO:
      001E9B 02                       4 	.byte 2 	
      001E9C 44 4F                    5 	.ascii "DO"
      001E9E 00 26                    6 	.word DO_IDX 
      001EA0                       5112 	_dict_entry,3,DEC,DEC_IDX;dec_base
      001EA0 1E 9B                    1 	.word LINK 
                           001EA2     2 	LINK=.
      001EA2                          3 DEC:
      001EA2 03                       4 	.byte 3 	
      001EA3 44 45 43                 5 	.ascii "DEC"
      001EA6 00 24                    6 	.word DEC_IDX 
      001EA8                       5113 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      001EA8 1E A2                    1 	.word LINK 
                           001EAA     2 	LINK=.
      001EAA                          3 DDR:
      001EAA 43                       4 	.byte 3+F_IFUNC 	
      001EAB 44 44 52                 5 	.ascii "DDR"
      001EAE 00 22                    6 	.word DDR_IDX 
      001EB0                       5114 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      001EB0 1E AA                    1 	.word LINK 
                           001EB2     2 	LINK=.
      001EB2                          3 DATALN:
      001EB2 06                       4 	.byte 6 	
      001EB3 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      001EB9 00 20                    6 	.word DATALN_IDX 
      001EBB                       5115 	_dict_entry,4,DATA,DATA_IDX;data  
      001EBB 1E B2                    1 	.word LINK 
                           001EBD     2 	LINK=.
      001EBD                          3 DATA:
      001EBD 04                       4 	.byte 4 	
      001EBE 44 41 54 41              5 	.ascii "DATA"
      001EC2 00 1E                    6 	.word DATA_IDX 
      001EC4                       5116 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      001EC4 1E BD                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                           001EC6     2 	LINK=.
      001EC6                          3 CRL:
      001EC6 43                       4 	.byte 3+F_IFUNC 	
      001EC7 43 52 4C                 5 	.ascii "CRL"
      001ECA 00 1C                    6 	.word CRL_IDX 
      001ECC                       5117 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      001ECC 1E C6                    1 	.word LINK 
                           001ECE     2 	LINK=.
      001ECE                          3 CRH:
      001ECE 43                       4 	.byte 3+F_IFUNC 	
      001ECF 43 52 48                 5 	.ascii "CRH"
      001ED2 00 1A                    6 	.word CRH_IDX 
      001ED4                       5118 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      001ED4 1E CE                    1 	.word LINK 
                           001ED6     2 	LINK=.
      001ED6                          3 CHAR:
      001ED6 84                       4 	.byte 4+F_CFUNC 	
      001ED7 43 48 41 52              5 	.ascii "CHAR"
      001EDB 00 18                    6 	.word CHAR_IDX 
      001EDD                       5119 	_dict_entry,3,BYE,BYE_IDX;bye 
      001EDD 1E D6                    1 	.word LINK 
                           001EDF     2 	LINK=.
      001EDF                          3 BYE:
      001EDF 03                       4 	.byte 3 	
      001EE0 42 59 45                 5 	.ascii "BYE"
      001EE3 00 16                    6 	.word BYE_IDX 
      001EE5                       5120 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      001EE5 1E DF                    1 	.word LINK 
                           001EE7     2 	LINK=.
      001EE7                          3 BTOGL:
      001EE7 05                       4 	.byte 5 	
      001EE8 42 54 4F 47 4C           5 	.ascii "BTOGL"
      001EED 00 14                    6 	.word BTOGL_IDX 
      001EEF                       5121 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      001EEF 1E E7                    1 	.word LINK 
                           001EF1     2 	LINK=.
      001EF1                          3 BTEST:
      001EF1 45                       4 	.byte 5+F_IFUNC 	
      001EF2 42 54 45 53 54           5 	.ascii "BTEST"
      001EF7 00 12                    6 	.word BTEST_IDX 
      001EF9                       5122 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      001EF9 1E F1                    1 	.word LINK 
                           001EFB     2 	LINK=.
      001EFB                          3 BSET:
      001EFB 04                       4 	.byte 4 	
      001EFC 42 53 45 54              5 	.ascii "BSET"
      001F00 00 10                    6 	.word BSET_IDX 
      001F02                       5123 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      001F02 1E FB                    1 	.word LINK 
                           001F04     2 	LINK=.
      001F04                          3 BRES:
      001F04 04                       4 	.byte 4 	
      001F05 42 52 45 53              5 	.ascii "BRES"
      001F09 00 0E                    6 	.word BRES_IDX 
      001F0B                       5124 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001F0B 1F 04                    1 	.word LINK 
                           001F0D     2 	LINK=.
      001F0D                          3 BIT:
      001F0D 43                       4 	.byte 3+F_IFUNC 	
      001F0E 42 49 54                 5 	.ascii "BIT"
      001F11 00 0C                    6 	.word BIT_IDX 
      001F13                       5125 	_dict_entry,3,AWU,AWU_IDX;awu 
      001F13 1F 0D                    1 	.word LINK 
                           001F15     2 	LINK=.
      001F15                          3 AWU:
      001F15 03                       4 	.byte 3 	
      001F16 41 57 55                 5 	.ascii "AWU"
      001F19 00 0A                    6 	.word AWU_IDX 
      001F1B                       5126 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      001F1B 1F 15                    1 	.word LINK 
                           001F1D     2 	LINK=.
      001F1D                          3 ASC:
      001F1D 43                       4 	.byte 3+F_IFUNC 	
      001F1E 41 53 43                 5 	.ascii "ASC"
      001F21 00 08                    6 	.word ASC_IDX 
      001F23                       5127 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      001F23 1F 1D                    1 	.word LINK 
                           001F25     2 	LINK=.
      001F25                          3 AND:
      001F25 43                       4 	.byte 3+F_IFUNC 	
      001F26 41 4E 44                 5 	.ascii "AND"
      001F29 00 06                    6 	.word AND_IDX 
      001F2B                       5128 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      001F2B 1F 25                    1 	.word LINK 
                           001F2D     2 	LINK=.
      001F2D                          3 ADCREAD:
      001F2D 47                       4 	.byte 7+F_IFUNC 	
      001F2E 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      001F35 00 04                    6 	.word ADCREAD_IDX 
      001F37                       5129 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      001F37 1F 2D                    1 	.word LINK 
                           001F39     2 	LINK=.
      001F39                          3 ADCON:
      001F39 05                       4 	.byte 5 	
      001F3A 41 44 43 4F 4E           5 	.ascii "ADCON"
      001F3F 00 02                    6 	.word ADCON_IDX 
      001F41                       5130 kword_dict::
      001F41                       5131 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      001F41 1F 39                    1 	.word LINK 
                           001F43     2 	LINK=.
      001F43                          3 ABS:
      001F43 43                       4 	.byte 3+F_IFUNC 	
      001F44 41 42 53                 5 	.ascii "ABS"
      001F47 00 00                    6 	.word ABS_IDX 
                                   5132 
                                   5133 ;comands and fonctions address table 	
      001F49                       5134 code_addr::
      001F49 16 E6 13 02 13 3E 16  5135 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             FA 15 D7 16 97 19 48
      001F57 10 90 10 80 10 B1 10  5136 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



             A1 16 70 15 C5 1A 02
      001F65 19 FC 1A 1A 1A 20 19  5137 	.word const_cr1,data,data_line,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             F6 0D B6 19 71 13 72
             13 A2
      001F75 0E FB 1A 14 12 AE 14  5138 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto,gpio ; 24..31 
             6A 17 74 14 D6 11 0C
             12 17 11 FC 16 13
      001F89 0D B1 19 F0 10 F8 0F  5139 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             E5 19 62 18 F2 19 28
             15 FE
      001F99 0E 33 0E 66 19 2D 17  5140 	.word let,list,log2,lshift,muldiv,next,new ; 40..47
             42 0B 55 11 8C 14 29
      001FA7 18 E5 19 EA 17 12 1B  5141 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             AE 16 84 17 80 10 E7
             1A 0E
      001FB7 10 D8 1A 08 0F 5F 19  5142 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             B4 19 BA 19 C0 19 C6
             19 CC
      001FC7 19 D2 19 D8 19 DE 19  5143 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             E4 16 06 1A 9D 04 6F
             10 55
      001FD7 1A 4E 12 37 17 FC 17  5144 	.word restore,return, random,rshift,run,show,free ; 72..79
             5B 12 55 0D 70 0D BB
      001FE5 16 79 1B 8F 1A F7 1B  5145 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             97 1B 6F 11 65 13 DD
             16 E0
      001FF5 18 C9 18 D8 11 35 12  5146 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             BE 0E 29 16 3D 19 86
             16 53
      002005 10 5B 18 63 15 8E 17  5147 	.word wait,words,write,bit_xor,cmd_size ; 96..99
             2A 0D D4
      00200F 00 00                 5148 	.word 0 
                                   5149 
                                   5150 
                                   5151 
                                   5152 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
                                     32 ;    .nlist
                                     33 ;	.include "inc/nucleo_8s208.inc"
                                     34 ;	.include "inc/stm8s208.inc"
                                     35 ;	.include "inc/ascii.inc"
                                     36 ;	.include "inc/gen_macros.inc" 
                                     37 ;	.include "tbi_macros.inc" 
                                     38     .list 
                                     39 
                                     40 
                                     41     .area CODE 
                                     42 
                                     43 
                                     44 ;-----------------------------
                                     45 ;  constants replacing 
                                     46 ;  ANSI sequence received 
                                     47 ;  from terminal.
                                     48 ;  These are the ANSI sequences
                                     49 ;  accepted by function readln
                                     50 ;------------------------------
                           000080    51     ARROW_LEFT=128
                           000081    52     ARROW_RIGHT=129
                           000082    53     HOME=130
                           000083    54     KEY_END=131
                           000084    55     SUP=132 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                     56 
      002011 43 81 44 80 48 82 46    57 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                     58 
                                     59 ;--------------------------------
                                     60 ; receive ANSI ESC 
                                     61 ; sequence and convert it
                                     62 ; to a single character code 
                                     63 ; in range {128..255}
                                     64 ; This is called after receiving 
                                     65 ; ESC character. 
                                     66 ; ignored sequence return 0 
                                     67 ; output:
                                     68 ;   A    converted character 
                                     69 ;-------------------------------
      00201D                         70 get_escape:
      00201D CD 02 C2         [ 4]   71     call getc 
      002020 A1 5B            [ 1]   72     cp a,#'[ ; this character is expected after ESC 
      002022 27 02            [ 1]   73     jreq 1$
      002024 4F               [ 1]   74     clr a
      002025 81               [ 4]   75     ret
      002026 CD 02 C2         [ 4]   76 1$: call getc 
      002029 AE 20 11         [ 2]   77     ldw x,#convert_table
      00202C                         78 2$:
      00202C F1               [ 1]   79     cp a,(x)
      00202D 27 08            [ 1]   80     jreq 4$
      00202F 1C 00 02         [ 2]   81     addw x,#2
      002032 7D               [ 1]   82     tnz (x)
      002033 26 F7            [ 1]   83     jrne 2$
      002035 4F               [ 1]   84     clr a
      002036 81               [ 4]   85     ret 
      002037 5C               [ 1]   86 4$: incw x 
      002038 F6               [ 1]   87     ld a,(x)
      002039 A1 84            [ 1]   88     cp a,#SUP
      00203B 26 05            [ 1]   89     jrne 5$
      00203D 88               [ 1]   90     push a 
      00203E CD 02 C2         [ 4]   91     call getc
      002041 84               [ 1]   92     pop a 
      002042                         93 5$:
      002042 81               [ 4]   94     ret 
                                     95 
                                     96 
                                     97 ;-----------------------------
                                     98 ; send an ASCIZ string to UART1 
                                     99 ; input: 
                                    100 ;   x 		char * 
                                    101 ; output:
                                    102 ;   none 
                                    103 ;-------------------------------
      002043                        104 puts::
      002043 F6               [ 1]  105     ld a,(x)
      002044 27 06            [ 1]  106 	jreq 1$
      002046 CD 02 B2         [ 4]  107 	call putc 
      002049 5C               [ 1]  108 	incw x 
      00204A 20 F7            [ 2]  109 	jra puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00204C 81               [ 4]  110 1$:	ret 
                                    111 
                                    112 
                                    113 ;---------------------------
                                    114 ; delete character at left 
                                    115 ; of cursor on terminal 
                                    116 ; input:
                                    117 ;   none 
                                    118 ; output:
                                    119 ;	none 
                                    120 ;---------------------------
      00204D                        121 bksp:
      00204D A6 08            [ 1]  122 	ld a,#BS 
      00204F CD 02 B2         [ 4]  123 	call putc 
      002052 A6 20            [ 1]  124 	ld a,#SPACE 
      002054 CD 02 B2         [ 4]  125 	call putc 
      002057 A6 08            [ 1]  126 	ld a,#BS 
      002059 CD 02 B2         [ 4]  127 	call putc 
      00205C 81               [ 4]  128 	ret 
                                    129 ;---------------------------
                                    130 ; delete n character left of cursor 
                                    131 ; at terminal.
                                    132 ; input: 
                                    133 ;   A   number of characters to delete.
                                    134 ; output:
                                    135 ;    none 
                                    136 ;--------------------------	
      00205D                        137 delete_nchar:
      00205D 88               [ 1]  138 	push a 
      00205E 0D 01            [ 1]  139 0$:	tnz (1,sp)
      002060 27 07            [ 1]  140 	jreq 1$
      002062 CD 20 4D         [ 4]  141 	call bksp 
      002065 0A 01            [ 1]  142 	dec (1,sp)
      002067 20 F5            [ 2]  143 	jra 0$
      002069 84               [ 1]  144 1$:	pop a 
      00206A 81               [ 4]  145 	ret
                                    146 
                                    147 ;--------------------------
                                    148 ; send ANSI escape sequence
                                    149 ; ANSI: ESC[
                                    150 ; note: ESC is ASCII 27
                                    151 ;       [   is ASCII 91  
                                    152 ;-------------------------- 
      00206B                        153 send_escape:
      00206B A6 1B            [ 1]  154 	ld a,#ESC 
      00206D CD 02 B2         [ 4]  155 	call putc 
      002070 A6 5B            [ 1]  156 	ld a,#'[
      002072 CD 02 B2         [ 4]  157 	call putc 
      002075 81               [ 4]  158 	ret 
                                    159 
                                    160 ;---------------------
                                    161 ;send ANSI parameter value
                                    162 ; ANSI parameter values are 
                                    163 ; sent as ASCII charater 
                                    164 ; not as binary number.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                    165 ; this routine 
                                    166 ; convert binary number to 
                                    167 ; ASCII string and send it.
                                    168 ; expected range {0..99}
                                    169 ; input: 
                                    170 ; 	A {0..99} 
                                    171 ; output:
                                    172 ;   none 
                                    173 ;---------------------
      002076                        174 send_parameter:
      002076 89               [ 2]  175 	pushw x 
      002077 5F               [ 1]  176 	clrw x 
      002078 97               [ 1]  177 	ld xl,a 
      002079 A6 0A            [ 1]  178 	ld a,#10 
      00207B 62               [ 2]  179 	div x,a 
      00207C 95               [ 1]  180 	ld xh,a 
      00207D 9F               [ 1]  181 	ld a,xl
      00207E 4D               [ 1]  182     tnz a 
      00207F 27 0B            [ 1]  183     jreq 2$
      002081 A1 09            [ 1]  184 	cp a,#9 
      002083 23 02            [ 2]  185 	jrule 1$
      002085 A6 39            [ 1]  186 	ld a,#'9
      002087                        187 1$:
      002087 AB 30            [ 1]  188 	add a,#'0 
      002089 CD 02 B2         [ 4]  189 	call putc
      00208C 9E               [ 1]  190 2$:	ld a,xh 
      00208D AB 30            [ 1]  191 	add a,#'0
      00208F CD 02 B2         [ 4]  192 	call putc 
      002092 85               [ 2]  193 	popw x 
      002093 81               [ 4]  194 	ret 
                                    195 
                                    196 ;--------------------------
                                    197 ; move cursor left n character
                                    198 ; ANSI: ESC[PnD 
                                    199 ; 'Pn' est a numerical parameter
                                    200 ; specifying number of characters 
                                    201 ; displacement.
                                    202 ; input:
                                    203 ;   A     character count
                                    204 ; output:
                                    205 ;   none
                                    206 ;--------------------------
      002094                        207 move_left:
      002094 88               [ 1]  208 	push a 
      002095 CD 20 6B         [ 4]  209 	call send_escape
      002098 84               [ 1]  210     pop a
      002099 CD 20 76         [ 4]  211 	call send_parameter 
      00209C A6 44            [ 1]  212 	ld a,#'D 
      00209E CD 02 B2         [ 4]  213 	call putc 
      0020A1 81               [ 4]  214 	ret	
                                    215 
                                    216 
                                    217 ;--------------------------
                                    218 ; move cursor right n character 
                                    219 ; ANSI: ESC[PnC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                    220 ; input:
                                    221 ;   A     character count
                                    222 ; output:
                                    223 ;   none
                                    224 ;--------------------------
      0020A2                        225 move_right:
      0020A2 88               [ 1]  226 	push a 
      0020A3 CD 20 6B         [ 4]  227 	call send_escape
      0020A6 84               [ 1]  228     pop a
      0020A7 CD 20 76         [ 4]  229 	call send_parameter 
      0020AA A6 43            [ 1]  230 	ld a,#'C 
      0020AC CD 02 B2         [ 4]  231 	call putc 
      0020AF 81               [ 4]  232 	ret 
                                    233 
                                    234 
                                    235 ;--------------------------
                                    236 ; print n spaces on terminal
                                    237 ; input:
                                    238 ;  X 		number of spaces 
                                    239 ; output:
                                    240 ;	none 
                                    241 ;---------------------------
      0020B0                        242 spaces::
      0020B0 A6 20            [ 1]  243 	ld a,#SPACE 
      0020B2 5D               [ 2]  244 1$:	tnzw x
      0020B3 27 06            [ 1]  245 	jreq 9$
      0020B5 CD 02 B2         [ 4]  246 	call putc 
      0020B8 5A               [ 2]  247 	decw x
      0020B9 20 F7            [ 2]  248 	jra 1$
      0020BB                        249 9$: 
      0020BB 81               [ 4]  250 	ret 
                                    251 
                                    252 ;--------------------------
                                    253 ; insert character in text 
                                    254 ; line 
                                    255 ; input:
                                    256 ;   A       character to insert 
                                    257 ;   xl      line length
                                    258 ;   xh      insert position 
                                    259 ;   Y       line pointer 
                                    260 ; output:
                                    261 ;   Y       updated Y 
                                    262 ;-------------------------
                           000001   263 	IPOS=1
                           000002   264 	KCHAR=2 
                           000003   265     LLEN=3 
                           000003   266 	VSISE=3 
      0020BC                        267 insert_char: 
      0020BC                        268 	_vars VSIZE 
      0020BC 52 06            [ 2]    1     sub sp,#VSIZE 
      0020BE 6B 02            [ 1]  269     ld (KCHAR,sp),a 
      0020C0 9E               [ 1]  270     ld a,xh 
      0020C1 6B 01            [ 1]  271 	ld (IPOS,sp),a
      0020C3 9F               [ 1]  272     ld a,xl 
      0020C4 6B 03            [ 1]  273     ld (LLEN,sp),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      0020C6 93               [ 1]  274     ldw x,y
      0020C7 5C               [ 1]  275     incw x 
      0020C8 7B 03            [ 1]  276     ld a,(LLEN,sp)
      0020CA 10 01            [ 1]  277     sub a,(IPOS,sp)
      0020CC 4C               [ 1]  278     inc a 
      0020CD C7 00 0D         [ 1]  279     ld acc8,a 
      0020D0 72 5F 00 0C      [ 1]  280     clr acc16
      0020D4 CD 03 B6         [ 4]  281     call move
      0020D7 90 AE 16 90      [ 2]  282     ldw y,#tib 
      0020DB 7B 01            [ 1]  283     ld a,(IPOS,sp)
      0020DD C7 00 0D         [ 1]  284     ld acc8,a 
      0020E0 72 B9 00 0C      [ 2]  285     addw y,acc16 
      0020E4 7B 02            [ 1]  286     ld a,(KCHAR,sp)
      0020E6 90 F7            [ 1]  287     ld (y),a
      0020E8 90 5C            [ 1]  288     incw y  
      0020EA 7B 01            [ 1]  289     ld a,(IPOS,sp)
      0020EC CD 20 94         [ 4]  290     call move_left
      0020EF AE 16 90         [ 2]  291     ldw x,#tib 
      0020F2 CD 20 43         [ 4]  292     call puts 
      0020F5 7B 03            [ 1]  293     ld a,(LLEN,sp)
      0020F7 10 01            [ 1]  294     sub a,(IPOS,sp) 
      0020F9 CD 20 94         [ 4]  295     call move_left 
      0020FC                        296 	_drop VSIZE 
      0020FC 5B 06            [ 2]    1     addw sp,#VSIZE 
      0020FE 81               [ 4]  297 	ret 
                                    298 
                                    299 
                                    300 ;--------------------------
                                    301 ; delete character under cursor
                                    302 ; input:
                                    303 ;   A       line length   
                                    304 ;   xl      delete position
                                    305 ;   Y       line pointer 
                                    306 ;-------------------------
                           000001   307 	CPOS=1
                           000002   308 	LLEN=2
                           000002   309 	VSIZE=2
      0020FF                        310 delete_under:
      0020FF                        311 	_vars VSIZE 
      0020FF 52 02            [ 2]    1     sub sp,#VSIZE 
      002101 6B 02            [ 1]  312     ld (LLEN,sp),a 
      002103 9F               [ 1]  313     ld a,xl 
      002104 6B 01            [ 1]  314     ld (CPOS,sp),a 
      002106 93               [ 1]  315     ldw x,y ; move destination
      002107 90 5C            [ 1]  316     incw y  ; move source 
      002109 7B 02            [ 1]  317     ld a,(LLEN,sp)
      00210B 10 01            [ 1]  318     sub a,(CPOS,sp)
      00210D 4C               [ 1]  319     inc a ; move including zero at end.
      00210E C7 00 0D         [ 1]  320     ld acc8,a 
      002111 72 5F 00 0C      [ 1]  321     clr acc16 
      002115 CD 03 B6         [ 4]  322 	call move 
      002118 90 AE 16 90      [ 2]  323     ldw y,#tib 
      00211C 7B 01            [ 1]  324     ld a,(CPOS,sp)
      00211E C7 00 0D         [ 1]  325     ld acc8,a 
      002121 72 B9 00 0C      [ 2]  326     addw y,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      002125 93               [ 1]  327     ldw x,y 
      002126 CD 20 43         [ 4]  328     call puts 
      002129 A6 20            [ 1]  329     ld a,#SPACE  
      00212B CD 02 B2         [ 4]  330     call putc
      00212E 7B 02            [ 1]  331     ld a,(LLEN,sp)
      002130 10 01            [ 1]  332     sub a,(CPOS,sp)
      002132 CD 20 94         [ 4]  333     call move_left 
      002135 0A 02            [ 1]  334     dec (LLEN,sp)
      002137                        335 	_drop VSIZE 
      002137 5B 02            [ 2]    1     addw sp,#VSIZE 
      002139 81               [ 4]  336 	ret 
                                    337 
                                    338 ;-----------------------------
                                    339 ; send ANSI sequence to delete
                                    340 ; whole line. Cursor position
                                    341 ; is not updated.
                                    342 ; ANSI: ESC[2K
                                    343 ; input:
                                    344 ;   none
                                    345 ; output:
                                    346 ;   none 
                                    347 ;-----------------------------
      00213A                        348 delete_line:
      00213A CD 20 6B         [ 4]  349     call send_escape
      00213D A6 32            [ 1]  350 	ld a,#'2
      00213F CD 02 B2         [ 4]  351 	call putc 
      002142 A6 4B            [ 1]  352 	ld a,#'K 
      002144 CD 02 B2         [ 4]  353 	call putc 
      002147 81               [ 4]  354 	ret 
                                    355 
                                    356 
                                    357 
                                    358 ;------------------------------------
                                    359 ; read a line of text from terminal
                                    360 ;  touches de contrôle
                                    361 ;    BS   efface caractère à gauche 
                                    362 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    363 ;    CTRL_R  répète dernière ligne saisie
                                    364 ;    CTRL_D  supprime ligne 
                                    365 ;    HOME  va au début de la ligne 
                                    366 ;    KEY_END  va à la fin de la ligne 
                                    367 ;    ARROW_LEFT  un caractère vers la gauche 
                                    368 ;    ARROW_RIGHT  un caractère vers la droite 
                                    369 ;    CTRL_O  commute entre insert/overwrite
                                    370 ; input:
                                    371 ;	none
                                    372 ; local variable on stack:
                                    373 ;	LL  line length
                                    374 ;   RXCHAR last received character 
                                    375 ; output:
                                    376 ;   text in tib  buffer
                                    377 ;   count  line length 
                                    378 ;------------------------------------
                                    379 	; local variables
                           000001   380 	LL_HB=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                           000001   381 	RXCHAR = 1 ; last char received
                           000002   382 	LL = 2  ; accepted line length
                           000003   383 	CPOS=3  ; cursor position 
                           000004   384 	OVRWR=4 ; overwrite flag 
                           000004   385 	VSIZE=4 
      002148                        386 readln::
      002148                        387 	_vars VSIZE 
      002148 52 04            [ 2]    1     sub sp,#VSIZE 
      00214A 5F               [ 1]  388 	clrw x 
      00214B 1F 02            [ 2]  389 	ldw (LL,sp),x 
      00214D 1F 03            [ 2]  390 	ldw (CPOS,sp),x 
      00214F 03 04            [ 1]  391 	cpl (OVRWR,sp) ; default to overwrite mode 
      002151 90 AE 16 90      [ 2]  392  	ldw y,#tib ; input buffer
      002155                        393 readln_loop:
      002155 CD 02 C2         [ 4]  394 	call getc
      002158 6B 01            [ 1]  395 	ld (RXCHAR,sp),a
      00215A A1 1B            [ 1]  396     cp a,#ESC 
      00215C 26 05            [ 1]  397     jrne 0$
      00215E CD 20 1D         [ 4]  398     call get_escape 
      002161 6B 01            [ 1]  399     ld (RXCHAR,sp),a 
      002163 A1 0D            [ 1]  400 0$:	cp a,#CR
      002165 26 03            [ 1]  401 	jrne 1$
      002167 CC 22 F1         [ 2]  402 	jp readln_quit
      00216A A1 0A            [ 1]  403 1$:	cp a,#LF 
      00216C 26 03            [ 1]  404 	jrne 2$ 
      00216E CC 22 F1         [ 2]  405 	jp readln_quit
      002171                        406 2$:
      002171 A1 08            [ 1]  407 	cp a,#BS
      002173 26 12            [ 1]  408 	jrne 3$
                                    409 ; delete left 
      002175 0D 03            [ 1]  410     tnz (CPOS,sp)
      002177 27 DC            [ 1]  411     jreq readln_loop 
      002179 A6 01            [ 1]  412     ld a,#1 
      00217B CD 20 94         [ 4]  413     call move_left
      00217E 0A 03            [ 1]  414     dec (CPOS,sp)
      002180 90 5A            [ 2]  415     decw y 
      002182 7B 03            [ 1]  416     ld a,(CPOS,sp) 
      002184 CC 22 9D         [ 2]  417     jp 12$
      002187                        418 3$:
      002187 A1 04            [ 1]  419 	cp a,#CTRL_D
      002189 26 1A            [ 1]  420 	jrne 4$
                                    421 ;delete line 
      00218B CD 21 3A         [ 4]  422 	call delete_line 
      00218E 7B 03            [ 1]  423     ld a,(CPOS,sp)
      002190 4C               [ 1]  424     inc a 
      002191 CD 20 94         [ 4]  425     call move_left 
      002194 A6 3E            [ 1]  426 	ld a,#'> 
      002196 CD 02 B2         [ 4]  427 	call putc 
      002199 90 AE 16 90      [ 2]  428 	ldw y,#tib
      00219D 90 7F            [ 1]  429 	clr (y)
      00219F 0F 02            [ 1]  430 	clr (LL,sp)
      0021A1 0F 03            [ 1]  431 	clr (CPOS,sp)
      0021A3 20 B0            [ 2]  432 	jra readln_loop
      0021A5                        433 4$:
      0021A5 A1 12            [ 1]  434 	cp a,#CTRL_R 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      0021A7 26 21            [ 1]  435 	jrne 5$
                                    436 ;reprint 
      0021A9 0D 02            [ 1]  437 	tnz (LL,sp)
      0021AB 26 A8            [ 1]  438 	jrne readln_loop
      0021AD AE 16 90         [ 2]  439 	ldw x,#tib 
      0021B0 CD 03 8C         [ 4]  440 	call strlen 
      0021B3 90 AE 16 90      [ 2]  441 	ldw y,#tib 
      0021B7 27 9C            [ 1]  442 	jreq readln_loop
      0021B9 6B 02            [ 1]  443 	ld (LL,sp),a 
      0021BB 6B 03            [ 1]  444     ld (CPOS,sp),a
      0021BD AE 16 90         [ 2]  445 	ldw x,#tib 
      0021C0 CD 20 43         [ 4]  446 	call puts
      0021C3 0F 01            [ 1]  447 	clr (LL_HB,sp)
      0021C5 72 F9 01         [ 2]  448 	addw y,(LL_HB,sp)
      0021C8 20 8B            [ 2]  449 	jra readln_loop 
      0021CA                        450 5$:
      0021CA A1 05            [ 1]  451 	cp a,#CTRL_E 
      0021CC 26 49            [ 1]  452 	jrne 6$
                                    453 ;edit line number 
      0021CE AE 16 90         [ 2]  454 	ldw x,#tib 
      0021D1 CD 09 8A         [ 4]  455 	call atoi24
      0021D4 CE 00 0C         [ 2]  456 	ldw x,acc16
      0021D7 CD 23 2B         [ 4]  457 	call search_lineno
      0021DA 5D               [ 2]  458 	tnzw x 
      0021DB 26 0B            [ 1]  459 	jrne 51$
      0021DD 0F 02            [ 1]  460 	clr (LL,sp)
      0021DF 90 AE 16 90      [ 2]  461 	ldw y,#tib
      0021E3 90 7F            [ 1]  462     clr (y) 	
      0021E5 CC 22 F1         [ 2]  463 	jp readln_quit  
      0021E8                        464 51$:
      0021E8 CF 00 04         [ 2]  465 	ldw basicptr,x
      0021EB E6 02            [ 1]  466 	ld a,(2,x)
      0021ED C7 00 03         [ 1]  467 	ld count,a 
      0021F0 90 AE 16 90      [ 2]  468 	ldw y,#tib 
      0021F4 CD 28 3C         [ 4]  469 	call decompile 
      0021F7 0F 01            [ 1]  470 	clr (LL_HB,sp)
      0021F9 A6 0D            [ 1]  471 	ld a,#CR 
      0021FB CD 02 B2         [ 4]  472 	call putc 
      0021FE A6 3E            [ 1]  473 	ld a,#'>
      002200 CD 02 B2         [ 4]  474 	call putc
      002203 AE 16 90         [ 2]  475     ldw x,#tib  
      002206 CD 03 8C         [ 4]  476 	call strlen 
      002209 6B 02            [ 1]  477 	ld (LL,sp),a 
      00220B CD 20 43         [ 4]  478 	call puts 
      00220E 90 93            [ 1]  479 	ldw y,x
      002210 7B 02            [ 1]  480     ld a,(LL,sp)
      002212 6B 03            [ 1]  481     ld (CPOS,sp),a  
      002214 CC 21 55         [ 2]  482 	jp readln_loop
      002217                        483 6$:
      002217 A1 81            [ 1]  484 	cp a,#ARROW_RIGHT
      002219 26 15            [ 1]  485    	jrne 7$ 
                                    486 ; right arrow
      00221B 7B 03            [ 1]  487 	ld a,(CPOS,sp)
      00221D 11 02            [ 1]  488     cp a,(LL,sp)
      00221F 2B 03            [ 1]  489     jrmi 61$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      002221 CC 21 55         [ 2]  490     jp readln_loop 
      002224                        491 61$:
      002224 A6 01            [ 1]  492     ld a,#1 
      002226 CD 20 A2         [ 4]  493 	call move_right 
      002229 0C 03            [ 1]  494 	inc (CPOS,sp)
      00222B 90 5C            [ 1]  495     incw y 
      00222D CC 21 55         [ 2]  496     jp readln_loop 
      002230 A1 80            [ 1]  497 7$: cp a,#ARROW_LEFT  
      002232 26 13            [ 1]  498 	jrne 8$
                                    499 ; left arrow 
      002234 0D 03            [ 1]  500 	tnz (CPOS,sp)
      002236 26 03            [ 1]  501 	jrne 71$
      002238 CC 21 55         [ 2]  502 	jp readln_loop
      00223B                        503 71$:
      00223B A6 01            [ 1]  504     ld a,#1 
      00223D CD 20 94         [ 4]  505 	call move_left 
      002240 0A 03            [ 1]  506 	dec (CPOS,sp)
      002242 90 5A            [ 2]  507     decw y 
      002244 CC 21 55         [ 2]  508 	jp readln_loop 
      002247 A1 82            [ 1]  509 8$: cp a,#HOME  
      002249 26 0E            [ 1]  510 	jrne 9$
                                    511 ; HOME 
      00224B 7B 03            [ 1]  512     ld a,(CPOS,sp)
      00224D CD 20 94         [ 4]  513     call move_left 
      002250 0F 03            [ 1]  514 	clr (CPOS,sp)
      002252 90 AE 16 90      [ 2]  515     ldw y,#tib 
      002256 CC 21 55         [ 2]  516 	jp readln_loop  
      002259 A1 83            [ 1]  517 9$: cp a,#KEY_END  
      00225B 26 26            [ 1]  518 	jrne 10$
                                    519 ; KEY_END 
      00225D 7B 03            [ 1]  520 	ld a,(CPOS,sp)
      00225F 11 02            [ 1]  521 	cp a,(LL,sp)
      002261 26 03            [ 1]  522 	jrne 91$
      002263 CC 21 55         [ 2]  523 	jp readln_loop 
      002266                        524 91$:
      002266 7B 02            [ 1]  525 	ld a,(LL,sp)
      002268 10 03            [ 1]  526 	sub a,(CPOS,sp)
      00226A CD 20 A2         [ 4]  527 	call move_right 
      00226D 7B 02            [ 1]  528 	ld a,(LL,sp)
      00226F 6B 03            [ 1]  529 	ld (CPOS,sp),a
      002271 90 AE 16 90      [ 2]  530     ldw y,#tib
      002275 72 5F 00 0C      [ 1]  531     clr acc16 
      002279 C7 00 0D         [ 1]  532     ld acc8,a 
      00227C 72 B9 00 0C      [ 2]  533     addw y,acc16  
      002280 CC 21 55         [ 2]  534 	jp readln_loop 
      002283 A1 0F            [ 1]  535 10$: cp a,#CTRL_O
      002285 26 0C            [ 1]  536 	jrne 11$ 
                                    537 ; toggle between insert/overwrite
      002287 03 04            [ 1]  538 	cpl (OVRWR,sp)
      002289 90 89            [ 2]  539 	pushw y 
      00228B CD 12 B5         [ 4]  540 	call beep_1khz
      00228E 90 85            [ 2]  541 	popw y 
      002290 CC 21 55         [ 2]  542 	jp readln_loop 
      002293 A1 84            [ 1]  543 11$: cp a,#SUP 
      002295 26 11            [ 1]  544     jrne final_test 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                    545 ; del character under cursor 
      002297 7B 03            [ 1]  546     ld a,(CPOS,sp)
      002299 11 02            [ 1]  547     cp a,(LL,sp)
      00229B 2A 08            [ 1]  548     jrpl 13$
      00229D                        549 12$:
      00229D 97               [ 1]  550     ld xl,a    ; cursor position 
      00229E 7B 02            [ 1]  551     ld a,(LL,sp)  ; line length
      0022A0 CD 20 FF         [ 4]  552     call delete_under
      0022A3 0A 02            [ 1]  553     dec (LLEN,sp)
      0022A5                        554 13$:
      0022A5 CC 21 55         [ 2]  555     jp readln_loop 
      0022A8                        556 final_test:
      0022A8 A1 20            [ 1]  557 	cp a,#SPACE
      0022AA 2A 03            [ 1]  558 	jrpl accept_char
      0022AC CC 21 55         [ 2]  559 	jp readln_loop
      0022AF                        560 accept_char:
      0022AF A6 4F            [ 1]  561 	ld a,#TIB_SIZE-1
      0022B1 11 02            [ 1]  562 	cp a, (LL,sp)
      0022B3 2A 03            [ 1]  563 	jrpl 1$
      0022B5 CC 21 55         [ 2]  564 	jp readln_loop
      0022B8 0D 04            [ 1]  565 1$:	tnz (OVRWR,sp)
      0022BA 26 18            [ 1]  566 	jrne overwrite
                                    567 ; insert mode 
      0022BC 7B 03            [ 1]  568     ld a,(CPOS,sp)
      0022BE 11 02            [ 1]  569     cp a,(LL,sp)
      0022C0 27 12            [ 1]  570     jreq overwrite
      0022C2 7B 02            [ 1]  571     ld a,(LL,sp)
      0022C4 97               [ 1]  572     ld xl,a 
      0022C5 7B 03            [ 1]  573     ld a,(CPOS,sp)
      0022C7 95               [ 1]  574     ld xh,a
      0022C8 7B 01            [ 1]  575     ld a,(RXCHAR,sp)
      0022CA CD 20 BC         [ 4]  576     call insert_char
      0022CD 0C 02            [ 1]  577     inc (LLEN,sp)
      0022CF 0C 03            [ 1]  578     inc (CPOS,sp)
      0022D1 CC 21 55         [ 2]  579     jp readln_loop 
      0022D4                        580 overwrite:
      0022D4 7B 01            [ 1]  581 	ld a,(RXCHAR,sp)
      0022D6 90 F7            [ 1]  582 	ld (y),a
      0022D8 90 5C            [ 1]  583     incw y
      0022DA CD 02 B2         [ 4]  584     call putc 
      0022DD 7B 03            [ 1]  585 	ld a,(CPOS,sp)
      0022DF 11 02            [ 1]  586 	cp a,(LL,sp)
      0022E1 2B 09            [ 1]  587 	jrmi 1$
      0022E3 90 7F            [ 1]  588 	clr (y)
      0022E5 0C 02            [ 1]  589 	inc (LL,sp)
      0022E7 0C 03            [ 1]  590     inc (CPOS,sp)
      0022E9 CC 21 55         [ 2]  591 	jp readln_loop 
      0022EC                        592 1$:	
      0022EC 0C 03            [ 1]  593 	inc (CPOS,sp)
      0022EE CC 21 55         [ 2]  594 	jp readln_loop 
      0022F1                        595 readln_quit:
      0022F1 90 AE 16 90      [ 2]  596 	ldw y,#tib
      0022F5 0F 01            [ 1]  597     clr (LL_HB,sp) 
      0022F7 72 F9 01         [ 2]  598     addw y,(LL_HB,sp)
      0022FA 90 7F            [ 1]  599     clr (y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0022FC 7B 02            [ 1]  600 	ld a,(LL,sp)
      0022FE C7 00 03         [ 1]  601 	ld count,a 
      002301 A6 0D            [ 1]  602 	ld a,#CR
      002303 CD 02 B2         [ 4]  603 	call putc
      002306                        604 	_drop VSIZE 
      002306 5B 04            [ 2]    1     addw sp,#VSIZE 
      002308 81               [ 4]  605 	ret
                                    606 
                                    607 ;------------------------------
                                    608 ; print byte  in hexadecimal 
                                    609 ; on console
                                    610 ; input:
                                    611 ;    A		byte to print
                                    612 ;------------------------------
      002309                        613 print_hex::
      002309 88               [ 1]  614 	push a 
      00230A 4E               [ 1]  615 	swap a 
      00230B CD 23 20         [ 4]  616 	call to_hex_char 
      00230E CD 02 B2         [ 4]  617 	call putc 
      002311 7B 01            [ 1]  618     ld a,(1,sp) 
      002313 CD 23 20         [ 4]  619 	call to_hex_char
      002316 CD 02 B2         [ 4]  620 	call putc
      002319 A6 20            [ 1]  621 	ld a,#SPACE 
      00231B CD 02 B2         [ 4]  622 	call putc 
      00231E 84               [ 1]  623 	pop a 
      00231F 81               [ 4]  624 	ret 
                                    625 
                                    626 ;----------------------------------
                                    627 ; convert to hexadecimal digit 
                                    628 ; input:
                                    629 ;   A       digit to convert 
                                    630 ; output:
                                    631 ;   A       hexdecimal character 
                                    632 ;----------------------------------
      002320                        633 to_hex_char::
      002320 A4 0F            [ 1]  634 	and a,#15 
      002322 A1 09            [ 1]  635 	cp a,#9 
      002324 23 02            [ 2]  636 	jrule 1$ 
      002326 AB 07            [ 1]  637 	add a,#7
      002328 AB 30            [ 1]  638 1$: add a,#'0 
      00232A 81               [ 4]  639 	ret 
                                    640 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
                                     26 ;    .nlist
                                     27 ;	.include "inc/nucleo_8s208.inc"
                                     28 ;	.include "inc/stm8s208.inc"
                                     29 ;	.include "inc/ascii.inc"
                                     30 ;	.include "inc/gen_macros.inc" 
                                     31 ;	.include "tbi_macros.inc" 
                                     32 ;	.include "cmd_index.inc"
                                     33     .list 
                                     34 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      00232B                         51 search_lineno::
      00232B                         52 	_vars VSIZE
      00232B 52 02            [ 2]    1     sub sp,#VSIZE 
      00232D 0F 01            [ 1]   53 	clr (LL,sp)
      00232F 90 CE 00 19      [ 2]   54 	ldw y,txtbgn
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      002333 4D               [ 1]   55 	tnz a 
      002334 27 04            [ 1]   56 	jreq search_ln_loop
      002336 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      00233A                         58 search_ln_loop:
      00233A 90 C3 00 1B      [ 2]   59 	cpw y,txtend 
      00233E 2A 10            [ 1]   60 	jrpl 8$
      002340 90 F3            [ 1]   61 	cpw x,(y)
      002342 27 0E            [ 1]   62 	jreq 9$
      002344 2B 0A            [ 1]   63 	jrmi 8$ 
      002346 90 E6 02         [ 1]   64 	ld a,(2,y)
      002349 6B 02            [ 1]   65 	ld (LB,sp),a 
      00234B 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      00234E 20 EA            [ 2]   67 	jra search_ln_loop 
      002350                         68 8$: 
      002350 5F               [ 1]   69 	clrw x 	
      002351 51               [ 1]   70 	exgw x,y 
      002352                         71 9$: _drop VSIZE
      002352 5B 02            [ 2]    1     addw sp,#VSIZE 
      002354 51               [ 1]   72 	exgw x,y   
      002355 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      002356                         83 del_line: 
      002356                         84 	_vars VSIZE 
      002356 52 04            [ 2]    1     sub sp,#VSIZE 
      002358 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      00235A 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      00235C 0F 01            [ 1]   87 	clr (LLEN,sp)
      00235E 90 93            [ 1]   88 	ldw y,x  
      002360 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      002363 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      002365 90 CE 00 1B      [ 2]   91 	ldw y,txtend 
      002369 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      00236C 90 CF 00 0C      [ 2]   93 	ldw acc16,y 
      002370 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      002372 CD 03 B6         [ 4]   95 	call move
      002375 90 CE 00 1B      [ 2]   96 	ldw y,txtend 
      002379 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      00237C 90 CF 00 1B      [ 2]   98 	ldw txtend,y  
      002380                         99 	_drop VSIZE     
      002380 5B 04            [ 2]    1     addw sp,#VSIZE 
      002382 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      002383                        115 create_gap:
      002383                        116 	_vars VSIZE
      002383 52 06            [ 2]    1     sub sp,#VSIZE 
      002385 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      002387 17 05            [ 2]  118 	ldw (LEN,sp),y 
      002389 90 CF 00 0C      [ 2]  119 	ldw acc16,y 
      00238D 90 93            [ 1]  120 	ldw y,x ; SRC
      00238F 72 BB 00 0C      [ 2]  121 	addw x,acc16  
      002393 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      002395 CE 00 1B         [ 2]  124 	ldw x,txtend 
      002398 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      00239B CF 00 0C         [ 2]  126 	ldw acc16,x ; size to move
      00239E 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      0023A0 CD 03 B6         [ 4]  128 	call move
      0023A3 CE 00 1B         [ 2]  129 	ldw x,txtend
      0023A6 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      0023A9 CF 00 1B         [ 2]  131 	ldw txtend,x
      0023AC                        132 9$:	_drop VSIZE 
      0023AC 5B 06            [ 2]    1     addw sp,#VSIZE 
      0023AE 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      0023AF                        150 insert_line:
      0023AF                        151 	_vars VSIZE 
      0023AF 52 08            [ 2]    1     sub sp,#VSIZE 
      0023B1 CE 00 1B         [ 2]  152 	ldw x,txtend  
      0023B4 C3 00 19         [ 2]  153 	cpw x,txtbgn 
      0023B7 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      0023B9 AE 00 02         [ 2]  156 	ldw x,#2 
      0023BC 72 D6 00 17      [ 4]  157 	ld a,([ptr16],x)
      0023C0 A1 03            [ 1]  158 	cp a,#3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      0023C2 27 5A            [ 1]  159 	jreq insert_ln_exit
      0023C4 5F               [ 1]  160 	clrw x 
      0023C5 97               [ 1]  161 	ld xl,a
      0023C6 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      0023C8 CE 00 19         [ 2]  163 	ldw x,txtbgn
      0023CB 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      0023CD CE 00 1B         [ 2]  165 	ldw x,txtend 
      0023D0 20 38            [ 2]  166 	jra 4$
      0023D2 72 CE 00 17      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      0023D6 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      0023D8 AE 00 02         [ 2]  170 	ldw x,#2 
      0023DB 72 D6 00 17      [ 4]  171 	ld a,([ptr16],x)
      0023DF 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      0023E0 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      0023E2 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      0023E4 4F               [ 1]  177 	clr a 
      0023E5 CD 23 2B         [ 4]  178 	call search_lineno 
      0023E8 5D               [ 2]  179 	tnzw x 
      0023E9 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      0023EB 17 01            [ 2]  183 	ldw (DEST,sp),y 
      0023ED 20 05            [ 2]  184 	jra 3$
                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      0023EF 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      0023F1 CD 23 56         [ 4]  188 	call del_line
      0023F4                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      0023F4 A6 03            [ 1]  192 	ld a,#3
      0023F6 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      0023F8 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      0023FA 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      0023FC C3 00 1B         [ 2]  198 	cpw x,txtend 
      0023FF 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      002401 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      002403 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      002405 CD 23 83         [ 4]  204 	call create_gap
      002408 20 06            [ 2]  205 	jra 5$
      00240A                        206 4$: 
      00240A 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      00240D CF 00 1B         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      002410 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      002412 CF 00 0C         [ 2]  211 	ldw acc16,x 
      002415 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      002419 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      00241B CD 03 B6         [ 4]  214 	call move 
      00241E                        215 insert_ln_exit:	
      00241E                        216 	_drop VSIZE
      00241E 5B 08            [ 2]    1     addw sp,#VSIZE 
      002420 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      002421                        233 parse_quote: 
      002421                        234 	_vars VSIZE 
      002421 52 02            [ 2]    1     sub sp,#VSIZE 
      002423 4F               [ 1]  235 	clr a
      002424 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      002426                        237 2$:	
      002426 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      002429 27 24            [ 1]  239 	jreq 6$
      00242B 72 5C 00 01      [ 1]  240 	inc in 
      00242F 6B 02            [ 1]  241 	ld (CURR,sp),a 
      002431 A6 5C            [ 1]  242 	ld a,#'\
      002433 11 01            [ 1]  243 	cp a, (PREV,sp)
      002435 26 0A            [ 1]  244 	jrne 3$
      002437 0F 01            [ 1]  245 	clr (PREV,sp)
      002439 7B 02            [ 1]  246 	ld a,(CURR,sp)
      00243B AD 1C            [ 4]  247 	callr convert_escape
      00243D F7               [ 1]  248 	ld (x),a 
      00243E 5C               [ 1]  249 	incw x 
      00243F 20 E5            [ 2]  250 	jra 2$
      002441                        251 3$:
      002441 7B 02            [ 1]  252 	ld a,(CURR,sp)
      002443 A1 5C            [ 1]  253 	cp a,#'\'
      002445 27 DD            [ 1]  254 	jreq 1$
      002447 A1 22            [ 1]  255 	cp a,#'"
      002449 27 04            [ 1]  256 	jreq 6$ 
      00244B F7               [ 1]  257 	ld (x),a 
      00244C 5C               [ 1]  258 	incw x 
      00244D 20 D7            [ 2]  259 	jra 2$
      00244F                        260 6$:
      00244F 7F               [ 1]  261 	clr (x)
      002450 5C               [ 1]  262 	incw x 
      002451 90 93            [ 1]  263 	ldw y,x 
      002453 5F               [ 1]  264 	clrw x 
      002454 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      002456                        266 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      002456 5B 02            [ 2]    1     addw sp,#VSIZE 
      002458 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      002459                        278 convert_escape:
      002459 89               [ 2]  279 	pushw x 
      00245A AE 24 6E         [ 2]  280 	ldw x,#escaped 
      00245D F1               [ 1]  281 1$:	cp a,(x)
      00245E 27 06            [ 1]  282 	jreq 2$
      002460 7D               [ 1]  283 	tnz (x)
      002461 27 09            [ 1]  284 	jreq 3$
      002463 5C               [ 1]  285 	incw x 
      002464 20 F7            [ 2]  286 	jra 1$
      002466 1D 24 6E         [ 2]  287 2$: subw x,#escaped 
      002469 9F               [ 1]  288 	ld a,xl 
      00246A AB 07            [ 1]  289 	add a,#7
      00246C 85               [ 2]  290 3$:	popw x 
      00246D 81               [ 4]  291 	ret 
                                    292 
      00246E 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      002476                        310 parse_integer: ; { -- n }
      002476 89               [ 2]  311 	pushw x 	
      002477 4B 00            [ 1]  312 	push #0 ; TCHAR
      002479 4B 0A            [ 1]  313 	push #10 ; BASE=10
      00247B A1 24            [ 1]  314 	cp a,#'$
      00247D 26 04            [ 1]  315 	jrne 2$ 
      00247F                        316     _drop #1
      00247F 5B 01            [ 2]    1     addw sp,##1 
      002481 4B 10            [ 1]  317 	push #16  ; BASE=16
      002483 F7               [ 1]  318 2$:	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002484 5C               [ 1]  319 	incw x 
      002485 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      002488 72 5C 00 01      [ 1]  321 	inc in 
      00248C CD 09 7E         [ 4]  322 	call to_upper 
      00248F 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      002491 CD 04 17         [ 4]  324 	call is_digit 
      002494 25 ED            [ 1]  325 	jrc 2$
      002496 A6 10            [ 1]  326 	ld a,#16 
      002498 11 01            [ 1]  327 	cp a,(BASE,sp)
      00249A 26 0A            [ 1]  328 	jrne 3$ 
      00249C 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      00249E A1 41            [ 1]  330 	cp a,#'A 
      0024A0 2B 04            [ 1]  331 	jrmi 3$ 
      0024A2 A1 47            [ 1]  332 	cp a,#'G 
      0024A4 2B DD            [ 1]  333 	jrmi 2$ 
      0024A6 72 5A 00 01      [ 1]  334 3$: dec in 	
      0024AA 7F               [ 1]  335     clr (x)
      0024AB 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      0024AD CD 09 8A         [ 4]  337 	call atoi24
      0024B0 90 93            [ 1]  338 	ldw y,x 
      0024B2 CE 00 0C         [ 2]  339 	ldw x,acc16 
      0024B5 A6 84            [ 1]  340 	ld a,#TK_INTGR
      0024B7 90 FF            [ 2]  341 	ldw (y),x 
      0024B9 72 A9 00 02      [ 2]  342 	addw y,#2
      0024BD                        343 	_drop VSIZE  
      0024BD 5B 04            [ 2]    1     addw sp,#VSIZE 
      0024BF 81               [ 4]  344 	ret 	
                                    345 
                                    346 ;-------------------------
                                    347 ; binary integer parser
                                    348 ; build integer in acc24  
                                    349 ; input:
                                    350 ;   X 		point to output buffer  
                                    351 ;   Y 		point to tib 
                                    352 ;   A 	    '&' 
                                    353 ; output:  
                                    354 ;   buffer  TK_INTGR integer  
                                    355 ;   X 		int16 
                                    356 ;   A 		TK_INTGR
                                    357 ;   acc24    int24 
                                    358 ;-------------------------
                           000001   359 	BINARY=1 ; 24 bits integer 
                           000003   360 	VSIZE=3
      0024C0                        361 parse_binary: ; { -- n }
      0024C0 4B 00            [ 1]  362 	push #0
      0024C2 4B 00            [ 1]  363 	push #0
      0024C4 4B 00            [ 1]  364 	push #0
      0024C6                        365 2$:	
      0024C6 91 D6 00         [ 4]  366 	ld a,([in.w],y)
      0024C9 72 5C 00 01      [ 1]  367 	inc in 
      0024CD A1 30            [ 1]  368 	cp a,#'0 
      0024CF 27 06            [ 1]  369 	jreq 3$
      0024D1 A1 31            [ 1]  370 	cp a,#'1 
      0024D3 27 02            [ 1]  371 	jreq 3$ 
      0024D5 20 0B            [ 2]  372 	jra bin_exit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0024D7 A0 30            [ 1]  373 3$: sub a,#'0 
      0024D9 46               [ 1]  374 	rrc a
      0024DA 09 03            [ 1]  375 	rlc (BINARY+2,sp) 
      0024DC 09 02            [ 1]  376 	rlc (BINARY+1,sp)
      0024DE 09 01            [ 1]  377 	rlc (BINARY,sp) 
      0024E0 20 E4            [ 2]  378 	jra 2$  
      0024E2                        379 bin_exit:
      0024E2 72 5A 00 01      [ 1]  380 	dec in 
      0024E6 90 93            [ 1]  381 	ldw y,x
      0024E8 7B 01            [ 1]  382 	ld a,(BINARY,sp)
      0024EA C7 00 0B         [ 1]  383 	ld acc24,a 
      0024ED 1E 02            [ 2]  384 	ldw x,(BINARY+1,sp)
      0024EF CF 00 0C         [ 2]  385 	ldw acc16,x
      0024F2 90 FF            [ 2]  386 	ldw (y),x 
      0024F4 72 A9 00 02      [ 2]  387 	addw y,#2  
      0024F8 A6 84            [ 1]  388 	ld a,#TK_INTGR 	
      0024FA                        389 	_drop VSIZE 
      0024FA 5B 03            [ 2]    1     addw sp,#VSIZE 
      0024FC 81               [ 4]  390 	ret
                                    391 
                                    392 ;---------------------------
                                    393 ;  token begin with a letter,
                                    394 ;  is keyword or variable. 	
                                    395 ; input:
                                    396 ;   X 		point to pad 
                                    397 ;   Y 		point to text
                                    398 ;   A 	    first letter  
                                    399 ; output:
                                    400 ;   X		exec_addr|var_addr 
                                    401 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    402 ;   pad 	keyword|var_name  
                                    403 ;--------------------------  
                           000001   404 	XFIRST=1
                           000002   405 	VSIZE=2
      0024FD                        406 parse_keyword: 
      0024FD 89               [ 2]  407 	pushw x 
      0024FE                        408 kw_loop:	
      0024FE CD 09 7E         [ 4]  409 	call to_upper 
      002501 F7               [ 1]  410 	ld (x),a 
      002502 5C               [ 1]  411 	incw x 
      002503 91 D6 00         [ 4]  412 	ld a,([in.w],y)
      002506 72 5C 00 01      [ 1]  413 	inc in 
      00250A CD 04 06         [ 4]  414 	call is_alpha 
      00250D 25 EF            [ 1]  415 	jrc kw_loop
      00250F 72 5A 00 01      [ 1]  416 	dec in   
      002513 7F               [ 1]  417 1$: clr (x)
      002514 1E 01            [ 2]  418 	ldw x,(XFIRST,sp) 
      002516 E6 01            [ 1]  419 	ld a,(1,x)
      002518 26 13            [ 1]  420 	jrne 2$
                                    421 ; one letter variable name 
      00251A F6               [ 1]  422 	ld a,(x) 
      00251B A0 41            [ 1]  423 	sub a,#'A 
      00251D 48               [ 1]  424 	sll a 
      00251E 88               [ 1]  425 	push a 
      00251F 4B 00            [ 1]  426 	push #0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      002521 AE 00 2C         [ 2]  427 	ldw x,#vars 
      002524 72 FB 01         [ 2]  428 	addw x,(1,sp) ; X=var address 
      002527                        429 	_drop 2 
      002527 5B 02            [ 2]    1     addw sp,#2 
      002529 A6 85            [ 1]  430 	ld a,#TK_VAR 
      00252B 20 0E            [ 2]  431 	jra 4$ 
      00252D                        432 2$: ; check for keyword, otherwise syntax error.
      00252D                        433 	_ldx_dict kword_dict ; dictionary entry point
      00252D AE 1F 43         [ 2]    1     ldw x,#kword_dict+2
      002530 16 01            [ 2]  434 	ldw y,(XFIRST,sp) ; name to search for
      002532 CD 0B 71         [ 4]  435 	call search_dict
      002535 4D               [ 1]  436 	tnz a
      002536 26 03            [ 1]  437 	jrne 4$ 
      002538 CC 07 28         [ 2]  438 	jp syntax_error
      00253B                        439 4$:	
      00253B 16 01            [ 2]  440 	ldw y,(XFIRST,sp)
      00253D A3 00 50         [ 2]  441 	cpw x,#LET_IDX 
      002540 27 0A            [ 1]  442 	jreq 5$  ; don't compile LET command 
      002542 90 F7            [ 1]  443 	ld (y),a 
      002544 90 5C            [ 1]  444 	incw y 
      002546 90 FF            [ 2]  445 	ldw (y),x
      002548 72 A9 00 02      [ 2]  446 	addw y,#2  
      00254C                        447 5$:	_drop VSIZE 
      00254C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00254E 81               [ 4]  448 	ret  	
                                    449 
                                    450 ;------------------------------------
                                    451 ; skip character c in text starting from 'in'
                                    452 ; input:
                                    453 ;	 y 		point to text buffer
                                    454 ;    a 		character to skip
                                    455 ; output:  
                                    456 ;	'in' ajusted to new position
                                    457 ;------------------------------------
                           000001   458 	C = 1 ; local var
      00254F                        459 skip:
      00254F 88               [ 1]  460 	push a
      002550 91 D6 00         [ 4]  461 1$:	ld a,([in.w],y)
      002553 27 0A            [ 1]  462 	jreq 2$
      002555 11 01            [ 1]  463 	cp a,(C,sp)
      002557 26 06            [ 1]  464 	jrne 2$
      002559 72 5C 00 01      [ 1]  465 	inc in
      00255D 20 F1            [ 2]  466 	jra 1$
      00255F                        467 2$: _drop 1 
      00255F 5B 01            [ 2]    1     addw sp,#1 
      002561 81               [ 4]  468 	ret
                                    469 	
                                    470 
                                    471 ;------------------------------------
                                    472 ; scan text for next token
                                    473 ; input: 
                                    474 ;	X 		pointer to buffer where 
                                    475 ;	        token id and value are copied 
                                    476 ; use:
                                    477 ;	Y   pointer to text in tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                    478 ; output:
                                    479 ;   A       token attribute 
                                    480 ;   X 		token value
                                    481 ;   Y       updated position in output buffer   
                                    482 ;------------------------------------
                                    483 	; use to check special character 
                                    484 	.macro _case c t  
                                    485 	ld a,#c 
                                    486 	cp a,(TCHAR,sp) 
                                    487 	jrne t
                                    488 	.endm 
                                    489 
                           000001   490 	TCHAR=1
                           000002   491 	ATTRIB=2
                           000002   492 	VSIZE=2
      002562                        493 get_token:: 
      002562                        494 	_vars VSIZE
      002562 52 02            [ 2]    1     sub sp,#VSIZE 
                                    495 ;	ld a,in 
                                    496 ;	sub a,count
                                    497 ;   jrmi 0$
                                    498 ;	clr a 
                                    499 ;	ret 
      002564                        500 0$: 
      002564 90 AE 16 90      [ 2]  501 	ldw y,#tib    	
      002568 A6 20            [ 1]  502 	ld a,#SPACE
      00256A CD 25 4F         [ 4]  503 	call skip
      00256D 55 00 01 00 02   [ 1]  504 	mov in.saved,in 
      002572 91 D6 00         [ 4]  505 	ld a,([in.w],y)
      002575 26 05            [ 1]  506 	jrne 1$
      002577 90 93            [ 1]  507 	ldw y,x 
      002579 CC 27 1E         [ 2]  508 	jp token_exit ; end of line 
      00257C 72 5C 00 01      [ 1]  509 1$:	inc in 
      002580 CD 09 7E         [ 4]  510 	call to_upper 
      002583 6B 01            [ 1]  511 	ld (TCHAR,sp),a 
                                    512 ; check for quoted string
      002585                        513 str_tst:  	
      002585                        514 	_case '"' nbr_tst
      002585 A6 22            [ 1]    1 	ld a,#'"' 
      002587 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002589 26 0A            [ 1]    3 	jrne nbr_tst
      00258B A6 02            [ 1]  515 	ld a,#TK_QSTR
      00258D F7               [ 1]  516 	ld (x),a 
      00258E 5C               [ 1]  517 	incw x 
      00258F CD 24 21         [ 4]  518 	call parse_quote
      002592 CC 27 1E         [ 2]  519 	jp token_exit
      002595                        520 nbr_tst:
                                    521 ; check for hexadecimal number 
      002595 A6 24            [ 1]  522 	ld a,#'$'
      002597 11 01            [ 1]  523 	cp a,(TCHAR,sp) 
      002599 27 17            [ 1]  524 	jreq 1$
                                    525 ;check for binary number 
      00259B A6 26            [ 1]  526 	ld a,#'&
      00259D 11 01            [ 1]  527 	cp a,(TCHAR,sp)
      00259F 26 0A            [ 1]  528 	jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0025A1 A6 84            [ 1]  529 	ld a,#TK_INTGR
      0025A3 F7               [ 1]  530 	ld (x),a 
      0025A4 5C               [ 1]  531 	incw x 
      0025A5 CD 24 C0         [ 4]  532 	call parse_binary ; expect binary integer 
      0025A8 CC 27 1E         [ 2]  533 	jp token_exit 
                                    534 ; check for decimal number 	
      0025AB 7B 01            [ 1]  535 0$:	ld a,(TCHAR,sp)
      0025AD CD 04 17         [ 4]  536 	call is_digit
      0025B0 24 0C            [ 1]  537 	jrnc 3$
      0025B2 A6 84            [ 1]  538 1$:	ld a,#TK_INTGR 
      0025B4 F7               [ 1]  539 	ld (x),a 
      0025B5 5C               [ 1]  540 	incw x 
      0025B6 7B 01            [ 1]  541 	ld a,(TCHAR,sp)
      0025B8 CD 24 76         [ 4]  542 	call parse_integer 
      0025BB CC 27 1E         [ 2]  543 	jp token_exit 
      0025BE                        544 3$: 
      0025BE                        545 	_case '(' bkslsh_tst 
      0025BE A6 28            [ 1]    1 	ld a,#'(' 
      0025C0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025C2 26 05            [ 1]    3 	jrne bkslsh_tst
      0025C4 A6 07            [ 1]  546 	ld a,#TK_LPAREN
      0025C6 CC 27 1A         [ 2]  547 	jp token_char   	
      0025C9                        548 bkslsh_tst: ; character token 
      0025C9                        549 	_case '\',rparnt_tst
      0025C9 A6 5C            [ 1]    1 	ld a,#'\' 
      0025CB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025CD 26 16            [ 1]    3 	jrne rparnt_tst
      0025CF A6 03            [ 1]  550 	ld a,#TK_CHAR 
      0025D1 F7               [ 1]  551 	ld (x),a 
      0025D2 5C               [ 1]  552 	incw x 
      0025D3 91 D6 00         [ 4]  553 	ld a,([in.w],y)
      0025D6 F7               [ 1]  554 	ld (x),a 
      0025D7 5C               [ 1]  555 	incw x
      0025D8 90 93            [ 1]  556 	ldw y,x 	 
      0025DA 72 5C 00 01      [ 1]  557 	inc in  
      0025DE 5F               [ 1]  558 	clrw x 
      0025DF 97               [ 1]  559 	ld xl,a 
      0025E0 A6 03            [ 1]  560 	ld a,#TK_CHAR 
      0025E2 CC 27 1E         [ 2]  561 	jp token_exit 
      0025E5                        562 rparnt_tst:		
      0025E5                        563 	_case ')' colon_tst 
      0025E5 A6 29            [ 1]    1 	ld a,#')' 
      0025E7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025E9 26 05            [ 1]    3 	jrne colon_tst
      0025EB A6 08            [ 1]  564 	ld a,#TK_RPAREN 
      0025ED CC 27 1A         [ 2]  565 	jp token_char
      0025F0                        566 colon_tst:
      0025F0                        567 	_case ':' comma_tst 
      0025F0 A6 3A            [ 1]    1 	ld a,#':' 
      0025F2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025F4 26 05            [ 1]    3 	jrne comma_tst
      0025F6 A6 0B            [ 1]  568 	ld a,#TK_COLON 
      0025F8 CC 27 1A         [ 2]  569 	jp token_char  
      0025FB                        570 comma_tst:
      0025FB                        571 	_case COMMA sharp_tst 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      0025FB A6 2C            [ 1]    1 	ld a,#COMMA 
      0025FD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025FF 26 05            [ 1]    3 	jrne sharp_tst
      002601 A6 09            [ 1]  572 	ld a,#TK_COMMA
      002603 CC 27 1A         [ 2]  573 	jp token_char
      002606                        574 sharp_tst:
      002606                        575 	_case SHARP dash_tst 
      002606 A6 23            [ 1]    1 	ld a,#SHARP 
      002608 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00260A 26 05            [ 1]    3 	jrne dash_tst
      00260C A6 0A            [ 1]  576 	ld a,#TK_SHARP
      00260E CC 27 1A         [ 2]  577 	jp token_char  	 	 
      002611                        578 dash_tst: 	
      002611                        579 	_case '-' at_tst 
      002611 A6 2D            [ 1]    1 	ld a,#'-' 
      002613 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002615 26 05            [ 1]    3 	jrne at_tst
      002617 A6 11            [ 1]  580 	ld a,#TK_MINUS  
      002619 CC 27 1A         [ 2]  581 	jp token_char 
      00261C                        582 at_tst:
      00261C                        583 	_case '@' qmark_tst 
      00261C A6 40            [ 1]    1 	ld a,#'@' 
      00261E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002620 26 05            [ 1]    3 	jrne qmark_tst
      002622 A6 06            [ 1]  584 	ld a,#TK_ARRAY 
      002624 CC 27 1A         [ 2]  585 	jp token_char
      002627                        586 qmark_tst:
      002627                        587 	_case '?' tick_tst 
      002627 A6 3F            [ 1]    1 	ld a,#'?' 
      002629 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00262B 26 12            [ 1]    3 	jrne tick_tst
      00262D A6 80            [ 1]  588 	ld a,#TK_CMD  
      00262F F7               [ 1]  589 	ld (x),a 
      002630 5C               [ 1]  590 	incw x 
      002631 90 93            [ 1]  591 	ldw y,x 
      002633 AE 00 72         [ 2]  592 	ldw x,#PRT_IDX 
      002636 90 FF            [ 2]  593 	ldw (y),x 
      002638 72 A9 00 02      [ 2]  594 	addw y,#2
      00263C CC 27 1E         [ 2]  595 	jp token_exit
      00263F                        596 tick_tst: ; comment 
      00263F                        597 	_case TICK plus_tst 
      00263F A6 27            [ 1]    1 	ld a,#TICK 
      002641 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002643 26 35            [ 1]    3 	jrne plus_tst
      002645 A6 80            [ 1]  598 	ld a,#TK_CMD
      002647 F7               [ 1]  599 	ld (x),a 
      002648 5C               [ 1]  600 	incw x
      002649 90 AE 00 8C      [ 2]  601 	ldw y,#REM_IDX
      00264D FF               [ 2]  602 	ldw (x),y 
      00264E 1C 00 02         [ 2]  603 	addw x,#2  
      002651                        604 copy_comment:
      002651 90 AE 16 90      [ 2]  605 	ldw y,#tib 
      002655 72 B9 00 00      [ 2]  606 	addw y,in.w
      002659 90 89            [ 2]  607 	pushw y
      00265B CD 03 A8         [ 4]  608 	call strcpy
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      00265E 72 F2 01         [ 2]  609     subw y,(1,sp)
      002661 90 9F            [ 1]  610 	ld a,yl 
      002663 CB 00 01         [ 1]  611 	add a,in
      002666 C7 00 01         [ 1]  612 	ld in,a 
      002669 1F 01            [ 2]  613 	ldw (1,sp),x
      00266B 72 F9 01         [ 2]  614 	addw y,(1,sp)
      00266E 90 5C            [ 1]  615 	incw y 
      002670                        616 	_drop 2 
      002670 5B 02            [ 2]    1     addw sp,#2 
      002672 AE 00 8C         [ 2]  617 	ldw x,#REM_IDX 
      002675 A6 80            [ 1]  618 	ld a,#TK_CMD 
      002677 CC 27 1E         [ 2]  619 	jp token_exit 
      00267A                        620 plus_tst:
      00267A                        621 	_case '+' star_tst 
      00267A A6 2B            [ 1]    1 	ld a,#'+' 
      00267C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00267E 26 05            [ 1]    3 	jrne star_tst
      002680 A6 10            [ 1]  622 	ld a,#TK_PLUS  
      002682 CC 27 1A         [ 2]  623 	jp token_char 
      002685                        624 star_tst:
      002685                        625 	_case '*' slash_tst 
      002685 A6 2A            [ 1]    1 	ld a,#'*' 
      002687 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002689 26 05            [ 1]    3 	jrne slash_tst
      00268B A6 20            [ 1]  626 	ld a,#TK_MULT 
      00268D CC 27 1A         [ 2]  627 	jp token_char 
      002690                        628 slash_tst: 
      002690                        629 	_case '/' prcnt_tst 
      002690 A6 2F            [ 1]    1 	ld a,#'/' 
      002692 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002694 26 05            [ 1]    3 	jrne prcnt_tst
      002696 A6 21            [ 1]  630 	ld a,#TK_DIV 
      002698 CC 27 1A         [ 2]  631 	jp token_char 
      00269B                        632 prcnt_tst:
      00269B                        633 	_case '%' eql_tst 
      00269B A6 25            [ 1]    1 	ld a,#'%' 
      00269D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00269F 26 05            [ 1]    3 	jrne eql_tst
      0026A1 A6 22            [ 1]  634 	ld a,#TK_MOD
      0026A3 CC 27 1A         [ 2]  635 	jp token_char  
                                    636 ; 1 or 2 character tokens 	
      0026A6                        637 eql_tst:
      0026A6                        638 	_case '=' gt_tst 		
      0026A6 A6 3D            [ 1]    1 	ld a,#'=' 
      0026A8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0026AA 26 05            [ 1]    3 	jrne gt_tst
      0026AC A6 32            [ 1]  639 	ld a,#TK_EQUAL
      0026AE CC 27 1A         [ 2]  640 	jp token_char 
      0026B1                        641 gt_tst:
      0026B1                        642 	_case '>' lt_tst 
      0026B1 A6 3E            [ 1]    1 	ld a,#'>' 
      0026B3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0026B5 26 23            [ 1]    3 	jrne lt_tst
      0026B7 A6 31            [ 1]  643 	ld a,#TK_GT 
      0026B9 6B 02            [ 1]  644 	ld (ATTRIB,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0026BB 91 D6 00         [ 4]  645 	ld a,([in.w],y)
      0026BE 72 5C 00 01      [ 1]  646 	inc in 
      0026C2 A1 3D            [ 1]  647 	cp a,#'=
      0026C4 26 04            [ 1]  648 	jrne 1$
      0026C6 A6 33            [ 1]  649 	ld a,#TK_GE 
      0026C8 20 50            [ 2]  650 	jra token_char  
      0026CA A1 3C            [ 1]  651 1$: cp a,#'<
      0026CC 26 04            [ 1]  652 	jrne 2$
      0026CE A6 35            [ 1]  653 	ld a,#TK_NE 
      0026D0 20 48            [ 2]  654 	jra token_char 
      0026D2 72 5A 00 01      [ 1]  655 2$: dec in
      0026D6 7B 02            [ 1]  656 	ld a,(ATTRIB,sp)
      0026D8 20 40            [ 2]  657 	jra token_char 	 
      0026DA                        658 lt_tst:
      0026DA                        659 	_case '<' other
      0026DA A6 3C            [ 1]    1 	ld a,#'<' 
      0026DC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0026DE 26 23            [ 1]    3 	jrne other
      0026E0 A6 34            [ 1]  660 	ld a,#TK_LT 
      0026E2 6B 02            [ 1]  661 	ld (ATTRIB,sp),a 
      0026E4 91 D6 00         [ 4]  662 	ld a,([in.w],y)
      0026E7 72 5C 00 01      [ 1]  663 	inc in 
      0026EB A1 3D            [ 1]  664 	cp a,#'=
      0026ED 26 04            [ 1]  665 	jrne 1$
      0026EF A6 36            [ 1]  666 	ld a,#TK_LE 
      0026F1 20 27            [ 2]  667 	jra token_char 
      0026F3 A1 3E            [ 1]  668 1$: cp a,#'>
      0026F5 26 04            [ 1]  669 	jrne 2$
      0026F7 A6 35            [ 1]  670 	ld a,#TK_NE 
      0026F9 20 1F            [ 2]  671 	jra token_char 
      0026FB 72 5A 00 01      [ 1]  672 2$: dec in 
      0026FF 7B 02            [ 1]  673 	ld a,(ATTRIB,sp)
      002701 20 17            [ 2]  674 	jra token_char 	
      002703                        675 other: ; not a special character 	 
      002703 7B 01            [ 1]  676 	ld a,(TCHAR,sp)
      002705 CD 04 06         [ 4]  677 	call is_alpha 
      002708 25 03            [ 1]  678 	jrc 30$ 
      00270A CC 07 28         [ 2]  679 	jp syntax_error 
      00270D                        680 30$: 
      00270D CD 24 FD         [ 4]  681 	call parse_keyword
      002710 A3 10 55         [ 2]  682 	cpw x,#remark 
      002713 26 09            [ 1]  683 	jrne token_exit 
      002715 90 93            [ 1]  684 	ldw y,x 
      002717 CC 26 51         [ 2]  685 	jp copy_comment 
      00271A                        686 token_char:
      00271A F7               [ 1]  687 	ld (x),a 
      00271B 5C               [ 1]  688 	incw x
      00271C 90 93            [ 1]  689 	ldw y,x 
      00271E                        690 token_exit:
      00271E                        691 	_drop VSIZE 
      00271E 5B 02            [ 2]    1     addw sp,#VSIZE 
      002720 81               [ 4]  692 	ret
                                    693 
                                    694 
                                    695 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    696 ; create token list fromm text line 
                                    697 ; save this list in pad buffer 
                                    698 ;  compiled line format: 
                                    699 ;    line_no  2 bytes {0...32767}
                                    700 ;    count    1 byte  
                                    701 ;    tokens   variable length 
                                    702 ;   
                                    703 ; input:
                                    704 ;   none
                                    705 ; modified variables:
                                    706 ;   basicptr     token list buffer address 
                                    707 ;   in.w  		 3|count, i.e. index in buffer
                                    708 ;   count        length of line | 0  
                                    709 ;-----------------------------------
                           000001   710 	XSAVE=1
                           000002   711 	VSIZE=2
      002721                        712 compile::
      002721                        713 	_vars VSIZE 
      002721 52 02            [ 2]    1     sub sp,#VSIZE 
      002723 55 00 19 00 04   [ 1]  714 	mov basicptr,txtbgn
      002728 72 1A 00 20      [ 1]  715 	bset flags,#FCOMP 
      00272C A6 00            [ 1]  716 	ld a,#0
      00272E AE 00 00         [ 2]  717 	ldw x,#0
      002731 CF 16 E0         [ 2]  718 	ldw pad,x ; destination buffer 
      002734 C7 16 E2         [ 1]  719 	ld pad+2,a ; count 
      002737 AE 16 E3         [ 2]  720 	ldw x,#pad+3
      00273A 72 5F 00 01      [ 1]  721 	clr in 
      00273E CD 25 62         [ 4]  722 	call get_token
      002741 A1 84            [ 1]  723 	cp a,#TK_INTGR
      002743 26 11            [ 1]  724 	jrne 2$
      002745 A3 00 01         [ 2]  725 	cpw x,#1 
      002748 2A 05            [ 1]  726 	jrpl 1$
      00274A A6 0A            [ 1]  727 	ld a,#ERR_BAD_VALUE
      00274C CC 07 2A         [ 2]  728 	jp tb_error
      00274F CF 16 E0         [ 2]  729 1$:	ldw pad,x 
      002752 90 AE 16 E3      [ 2]  730 	ldw y,#pad+3 
      002756 90 A3 17 60      [ 2]  731 2$:	cpw y,#stack_full 
      00275A 25 05            [ 1]  732 	jrult 3$
      00275C A6 0F            [ 1]  733 	ld a,#ERR_BUF_FULL 
      00275E CC 07 2A         [ 2]  734 	jp tb_error 
      002761                        735 3$:	
      002761 93               [ 1]  736 	ldw x,y 
      002762 CD 25 62         [ 4]  737 	call get_token 
      002765 A1 00            [ 1]  738 	cp a,#TK_NONE 
      002767 26 ED            [ 1]  739 	jrne 2$ 
                                    740 ; compilation completed  
      002769 72 A2 16 E0      [ 2]  741 	subw y,#pad
      00276D 90 9F            [ 1]  742     ld a,yl
      00276F AE 16 E0         [ 2]  743 	ldw x,#pad 
      002772 CF 00 17         [ 2]  744 	ldw ptr16,x 
      002775 E7 02            [ 1]  745 	ld (2,x),a 
      002777 FE               [ 2]  746 	ldw x,(x)
      002778 27 09            [ 1]  747 	jreq 10$
      00277A CD 23 AF         [ 4]  748 	call insert_line
      00277D 72 5F 00 03      [ 1]  749 	clr  count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      002781 20 0F            [ 2]  750 	jra  11$ 
      002783                        751 10$: ; line# is zero 
      002783 CE 00 17         [ 2]  752 	ldw x,ptr16  
      002786 CF 00 04         [ 2]  753 	ldw basicptr,x 
      002789 E6 02            [ 1]  754 	ld a,(2,x)
      00278B C7 00 03         [ 1]  755 	ld count,a 
      00278E 35 03 00 01      [ 1]  756 	mov in,#3 
      002792                        757 11$:
      002792                        758 	_drop VSIZE 
      002792 5B 02            [ 2]    1     addw sp,#VSIZE 
      002794 72 1B 00 20      [ 1]  759 	bres flags,#FCOMP 
      002798 81               [ 4]  760 	ret 
                                    761 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
                                     27 ;    .nlist
                                     28 ;	.include "inc/nucleo_8s208.inc"
                                     29 ;	.include "inc/stm8s208.inc"
                                     30 ;	.include "inc/ascii.inc"
                                     31 ;	.include "inc/gen_macros.inc" 
                                     32 ;	.include "tbi_macros.inc" 
                                     33 ;	.include "cmd_index.inc"
                                     34     .list 
                                     35 
                                     36 
                                     37     .area  CODE 
                                     38 
                                     39 ;-------------------------
                                     40 ; copy command name to buffer  
                                     41 ; input:
                                     42 ;   X 	name address 
                                     43 ;   Y   destination buffer 
                                     44 ; output:
                                     45 ;   Y   point after name  
                                     46 ;--------------------------
      002799                         47 cpy_cmd_name:
      002799 F6               [ 1]   48 	ld a,(x)
      00279A 5C               [ 1]   49 	incw x
      00279B A4 0F            [ 1]   50 	and a,#15  
      00279D 88               [ 1]   51 	push a 
      00279E 0D 01            [ 1]   52     tnz (1,sp) 
      0027A0 27 0A            [ 1]   53 	jreq 9$
      0027A2 F6               [ 1]   54 1$:	ld a,(x)
      0027A3 90 F7            [ 1]   55 	ld (y),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0027A5 5C               [ 1]   56 	incw x
      0027A6 90 5C            [ 1]   57 	incw y 
      0027A8 0A 01            [ 1]   58 	dec (1,sp)	 
      0027AA 26 F6            [ 1]   59 	jrne 1$
      0027AC 84               [ 1]   60 9$: pop a 
      0027AD 81               [ 4]   61 	ret	
                                     62 
                                     63 ;--------------------------
                                     64 ; add a space after letter or 
                                     65 ; digit.
                                     66 ; input:
                                     67 ;   Y     pointer to buffer 
                                     68 ; output:
                                     69 ;   Y    moved to end 
                                     70 ;--------------------------
      0027AE                         71 add_space:
      0027AE 90 5A            [ 2]   72 	decw y 
      0027B0 90 F6            [ 1]   73 	ld a,(y)
      0027B2 90 5C            [ 1]   74 	incw y
      0027B4 CD 04 20         [ 4]   75 	call is_alnum 
      0027B7 24 06            [ 1]   76 	jrnc 1$
      0027B9 A6 20            [ 1]   77 	ld a,#SPACE 
      0027BB 90 F7            [ 1]   78 	ld (y),a 
      0027BD 90 5C            [ 1]   79 	incw y 
      0027BF 81               [ 4]   80 1$: ret 
                                     81 
                                     82 ;--------------------------
                                     83 ;  align text in buffer 
                                     84 ;  to tab_width padding 
                                     85 ;  left with  SPACE 
                                     86 ; input:
                                     87 ;   X      str*
                                     88 ;   A      str_length 
                                     89 ; output:
                                     90 ;   X      ajusted
                                     91 ;--------------------------
      0027C0                         92 right_align::
      0027C0 88               [ 1]   93 	push a 
      0027C1 7B 01            [ 1]   94 0$: ld a,(1,sp)
      0027C3 C1 00 21         [ 1]   95 	cp a,tab_width 
      0027C6 2A 08            [ 1]   96 	jrpl 1$
      0027C8 A6 20            [ 1]   97 	ld a,#SPACE 
      0027CA 5A               [ 2]   98 	decw x
      0027CB F7               [ 1]   99 	ld (x),a  
      0027CC 0C 01            [ 1]  100 	inc (1,sp)
      0027CE 20 F1            [ 2]  101 	jra 0$ 
      0027D0 84               [ 1]  102 1$: pop a 	
      0027D1 81               [ 4]  103 	ret 
                                    104 
                                    105 ;--------------------------
                                    106 ; print TK_QSTR
                                    107 ; converting control character
                                    108 ; to backslash sequence
                                    109 ; input:
                                    110 ;   X        char *
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                                    111 ;   Y        dest. buffer 
                                    112 ; output:
                                    113 ;   X        moved forward 
                                    114 ;   Y        moved forward 
                                    115 ;-----------------------------
      0027D2                        116 cpy_quote:
      0027D2 A6 22            [ 1]  117 	ld a,#'"
      0027D4 90 F7            [ 1]  118 	ld (y),a 
      0027D6 90 5C            [ 1]  119 	incw y 
      0027D8 F6               [ 1]  120 1$:	ld a,(x)
      0027D9 27 30            [ 1]  121 	jreq 9$
      0027DB 5C               [ 1]  122 	incw x 
      0027DC A1 20            [ 1]  123 	cp a,#SPACE 
      0027DE 25 0E            [ 1]  124 	jrult 3$
      0027E0 90 F7            [ 1]  125 	ld (y),a
      0027E2 90 5C            [ 1]  126 	incw y 
      0027E4 A1 5C            [ 1]  127 	cp a,#'\ 
      0027E6 26 F0            [ 1]  128 	jrne 1$ 
      0027E8                        129 2$:
      0027E8 90 F7            [ 1]  130 	ld (y),a
      0027EA 90 5C            [ 1]  131 	incw y  
      0027EC 20 EA            [ 2]  132 	jra 1$
      0027EE 88               [ 1]  133 3$: push a 
      0027EF A6 5C            [ 1]  134 	ld a,#'\
      0027F1 90 F7            [ 1]  135 	ld (y),a 
      0027F3 90 5C            [ 1]  136 	incw y  
      0027F5 84               [ 1]  137 	pop a 
      0027F6 A0 07            [ 1]  138 	sub a,#7
      0027F8 C7 00 0D         [ 1]  139 	ld acc8,a 
      0027FB 72 5F 00 0C      [ 1]  140 	clr acc16
      0027FF 89               [ 2]  141 	pushw x
      002800 AE 24 6E         [ 2]  142 	ldw x,#escaped 
      002803 72 BB 00 0C      [ 2]  143 	addw x,acc16 
      002807 F6               [ 1]  144 	ld a,(x)
      002808 85               [ 2]  145 	popw x
      002809 20 DD            [ 2]  146 	jra 2$
      00280B A6 22            [ 1]  147 9$: ld a,#'"
      00280D 90 F7            [ 1]  148 	ld (y),a 
      00280F 90 5C            [ 1]  149 	incw y  
      002811 5C               [ 1]  150 	incw x 
      002812 81               [ 4]  151 	ret
                                    152 
                                    153 ;--------------------------
                                    154 ; return variable name 
                                    155 ; from its address.
                                    156 ; input:
                                    157 ;   X    variable address
                                    158 ; output:
                                    159 ;   A     variable letter
                                    160 ;--------------------------
      002813                        161 var_name::
      002813 1D 00 2C         [ 2]  162 		subw x,#vars 
      002816 9F               [ 1]  163 		ld a,xl 
      002817 44               [ 1]  164 		srl a 
      002818 AB 41            [ 1]  165 		add a,#'A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      00281A 81               [ 4]  166 		ret 
                                    167 
                                    168 ;-----------------------------
                                    169 ; return cmd  idx from its 
                                    170 ; code address 
                                    171 ; input:
                                    172 ;   X      code address 
                                    173 ; output:
                                    174 ;   X      cmd_idx
                                    175 ;-----------------------------
      00281B                        176 get_cmd_idx:
      00281B 90 89            [ 2]  177 	pushw y
      00281D 90 AE 1F 49      [ 2]  178 	ldw y,#code_addr 
      002821 90 CF 00 17      [ 2]  179 	ldw ptr16,y 
      002825 90 5F            [ 1]  180 	clrw y 
      002827 91 D3 17         [ 5]  181 1$:	cpw x,([ptr16],y)
      00282A 27 0C            [ 1]  182 	jreq 3$ 
      00282C 90 5C            [ 1]  183 	incw y 
      00282E 91 D6 17         [ 4]  184 	ld a,([ptr16],y)
      002831 90 5C            [ 1]  185 	incw y
      002833 91 DA 17         [ 4]  186 	or a,([ptr16],y)	
      002836 26 EF            [ 1]  187 	jrne 1$
      002838 93               [ 1]  188 3$: ldw x,y 
      002839 90 85            [ 2]  189 	popw y 
      00283B 81               [ 4]  190 	ret
                                    191 
                                    192 ;-------------------------------------
                                    193 ; decompile tokens list 
                                    194 ; to original text line 
                                    195 ; input:
                                    196 ;   [basicptr]  pointer at line 
                                    197 ;   Y           destination buffer
                                    198 ; output:
                                    199 ;   A           length 
                                    200 ;   Y           after string  
                                    201 ;------------------------------------
                           000001   202 	BASE_SAV=1
                           000002   203 	WIDTH_SAV=2
                           000003   204 	STR=3
                           000004   205 	VSIZE=4 
      00283C                        206 decompile::
      00283C                        207 	_vars VSIZE
      00283C 52 04            [ 2]    1     sub sp,#VSIZE 
      00283E C6 00 0A         [ 1]  208 	ld a,base
      002841 6B 01            [ 1]  209 	ld (BASE_SAV,sp),a  
      002843 C6 00 21         [ 1]  210 	ld a,tab_width 
      002846 6B 02            [ 1]  211 	ld (WIDTH_SAV,sp),a 
      002848 17 03            [ 2]  212 	ldw (STR,sp),y   
      00284A 72 CE 00 04      [ 5]  213 	ldw x,[basicptr] ; line number 
      00284E 35 0A 00 0A      [ 1]  214 	mov base,#10
      002852 35 05 00 21      [ 1]  215 	mov tab_width,#5
      002856 72 5F 00 0B      [ 1]  216 	clr acc24 
      00285A CF 00 0C         [ 2]  217 	ldw acc16,x
      00285D CD 08 8E         [ 4]  218 	call itoa  
      002860 CD 27 C0         [ 4]  219 	call right_align 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      002863 88               [ 1]  220 	push a 
      002864 90 93            [ 1]  221 1$:	ldw y,x ; source
      002866 1E 04            [ 2]  222 	ldw x,(STR+1,sp) ; destination
      002868 CD 03 A8         [ 4]  223 	call strcpy 
      00286B 90 5F            [ 1]  224 	clrw y 
      00286D 84               [ 1]  225 	pop a 
      00286E 90 97            [ 1]  226 	ld yl,a 
      002870 72 F9 03         [ 2]  227 	addw y,(STR,sp)
      002873 A6 20            [ 1]  228 	ld a,#SPACE 
      002875 90 F7            [ 1]  229 	ld (y),a 
      002877 90 5C            [ 1]  230 	incw y 
      002879 72 5F 00 21      [ 1]  231 	clr tab_width
      00287D AE 00 03         [ 2]  232 	ldw x,#3
      002880 CF 00 00         [ 2]  233 	ldw in.w,x 
      002883                        234 decomp_loop:
      002883 90 89            [ 2]  235 	pushw y
      002885 CD 08 17         [ 4]  236 	call next_token 
      002888 90 85            [ 2]  237 	popw y 
      00288A 4D               [ 1]  238 	tnz a  
      00288B 26 03            [ 1]  239 	jrne 1$
      00288D CC 29 6F         [ 2]  240 	jp 20$
      002890 2A 75            [ 1]  241 1$:	jrpl 6$
                                    242 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      002892 A1 85            [ 1]  243 	cp a,#TK_VAR 
      002894 26 0C            [ 1]  244 	jrne 3$
                                    245 ;; TK_VAR 
      002896 CD 27 AE         [ 4]  246 	call add_space  
      002899 CD 28 13         [ 4]  247 	call var_name
      00289C 90 F7            [ 1]  248 	ld (y),a 
      00289E 90 5C            [ 1]  249 	incw y  
      0028A0 20 E1            [ 2]  250 	jra decomp_loop
      0028A2                        251 3$:
      0028A2 A1 84            [ 1]  252 	cp a,#TK_INTGR
      0028A4 26 22            [ 1]  253 	jrne 4$
                                    254 ;; TK_INTGR
      0028A6 CD 27 AE         [ 4]  255 	call add_space
      0028A9 72 5F 00 0B      [ 1]  256 	clr acc24 
      0028AD CF 00 0C         [ 2]  257 	ldw acc16,x 
      0028B0 90 89            [ 2]  258 	pushw y 
      0028B2 CD 08 8E         [ 4]  259 	call itoa  
      0028B5 16 01            [ 2]  260 	ldw y,(1,sp) 
      0028B7 88               [ 1]  261 	push a 
      0028B8 51               [ 1]  262 	exgw x,y 
      0028B9 CD 03 A8         [ 4]  263 	call strcpy 
      0028BC 90 5F            [ 1]  264 	clrw y
      0028BE 84               [ 1]  265 	pop a  
      0028BF 90 97            [ 1]  266 	ld yl,a 
      0028C1 72 F9 01         [ 2]  267 	addw y,(1,sp)
      0028C4                        268 	_drop 2 
      0028C4 5B 02            [ 2]    1     addw sp,#2 
      0028C6 20 BB            [ 2]  269 	jra decomp_loop
                                    270 ;; dictionary keyword 
      0028C8                        271 4$:	
      0028C8 CD 28 1B         [ 4]  272 	call get_cmd_idx 
      0028CB A3 00 8C         [ 2]  273 	cpw x,#REM_IDX
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      0028CE 26 22            [ 1]  274 	jrne 5$
      0028D0 CE 00 04         [ 2]  275 	ldw x,basicptr 
                                    276 ; copy comment to buffer 
      0028D3 CD 27 AE         [ 4]  277 	call add_space
      0028D6 A6 27            [ 1]  278 	ld a,#''
      0028D8 90 F7            [ 1]  279 	ld (y),a 
      0028DA 90 5C            [ 1]  280 	incw y 
      0028DC                        281 41$:
      0028DC 72 D6 00 00      [ 4]  282 	ld a,([in.w],x)
      0028E0 72 5C 00 01      [ 1]  283 	inc in  
      0028E4 90 F7            [ 1]  284 	ld (y),a 
      0028E6 90 5C            [ 1]  285 	incw y 
      0028E8 C6 00 01         [ 1]  286 	ld a,in 
      0028EB C1 00 03         [ 1]  287 	cp a,count 
      0028EE 2B EC            [ 1]  288 	jrmi 41$
      0028F0 20 7D            [ 2]  289 	jra 20$  
      0028F2 A3 00 50         [ 2]  290 5$: cpw x,#LET_IDX 
      0028F5 27 8C            [ 1]  291 	jreq decomp_loop ; down display LET 	
                                    292 ; insert command name 
      0028F7 CD 27 AE         [ 4]  293 	call add_space  
      0028FA 90 89            [ 2]  294 	pushw y
      0028FC CD 29 AA         [ 4]  295 	call cmd_name
      0028FF 90 85            [ 2]  296 	popw y 
      002901 CD 27 99         [ 4]  297 	call cpy_cmd_name
      002904 CC 28 83         [ 2]  298 	jp decomp_loop 
      002907                        299 6$:
      002907 A1 02            [ 1]  300 	cp a,#TK_QSTR 
      002909 26 06            [ 1]  301 	jrne 7$
                                    302 ;; TK_QSTR
      00290B CD 27 D2         [ 4]  303 	call cpy_quote  
      00290E CC 28 83         [ 2]  304 	jp decomp_loop
      002911                        305 7$:
      002911 A1 03            [ 1]  306 	cp a,#TK_CHAR 
      002913 26 0E            [ 1]  307 	jrne 8$
                                    308 ;; TK_CHAR 
      002915 A6 5C            [ 1]  309 	ld a,#'\ 
      002917 90 F7            [ 1]  310 	ld (y),a 
      002919 90 5C            [ 1]  311 	incw y 
      00291B 9F               [ 1]  312 	ld a,xl 
      00291C 90 F7            [ 1]  313 	ld (y),a 
      00291E 90 5C            [ 1]  314 	incw y 
      002920 CC 28 83         [ 2]  315 	jp decomp_loop
      002923 A1 0B            [ 1]  316 8$: cp a,#TK_COLON 
      002925 26 09            [ 1]  317 	jrne 9$
      002927 A6 3A            [ 1]  318 	ld a,#':
      002929                        319 81$:
      002929 90 F7            [ 1]  320 	ld (y),a 
      00292B 90 5C            [ 1]  321 	incw y 
      00292D                        322 82$:
      00292D CC 28 83         [ 2]  323 	jp decomp_loop
      002930                        324 9$: 
      002930 A1 0A            [ 1]  325 	cp a,#TK_SHARP
      002932 22 0A            [ 1]  326 	jrugt 10$ 
      002934 A0 06            [ 1]  327 	sub a,#TK_ARRAY 
      002936 5F               [ 1]  328 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      002937 97               [ 1]  329 	ld xl,a
      002938 1C 29 85         [ 2]  330 	addw x,#single_char 
      00293B F6               [ 1]  331 	ld a,(x)
      00293C 20 EB            [ 2]  332 	jra 81$ 
      00293E                        333 10$: 
      00293E A1 11            [ 1]  334 	cp a,#TK_MINUS 
      002940 22 0A            [ 1]  335 	jrugt 11$
      002942 A0 10            [ 1]  336 	sub a,#TK_PLUS 
      002944 5F               [ 1]  337 	clrw x 
      002945 97               [ 1]  338 	ld xl,a 
      002946 1C 29 8A         [ 2]  339 	addw x,#add_char 
      002949 F6               [ 1]  340 	ld a,(x)
      00294A 20 DD            [ 2]  341 	jra 81$
      00294C                        342 11$:
      00294C A1 22            [ 1]  343     cp a,#TK_MOD 
      00294E 22 0A            [ 1]  344 	jrugt 12$
      002950 A0 20            [ 1]  345 	sub a,#TK_MULT
      002952 5F               [ 1]  346 	clrw x 
      002953 97               [ 1]  347 	ld xl,a 
      002954 1C 29 8C         [ 2]  348 	addw x,#mul_char
      002957 F6               [ 1]  349 	ld a,(x)
      002958 20 CF            [ 2]  350 	jra 81$
      00295A                        351 12$:
      00295A A0 31            [ 1]  352 	sub a,#TK_GT  
      00295C 48               [ 1]  353 	sll a 
      00295D 5F               [ 1]  354 	clrw x 
      00295E 97               [ 1]  355 	ld xl,a 
      00295F 1C 29 8F         [ 2]  356 	addw x,#relop_str 
      002962 FE               [ 2]  357 	ldw x,(x)
      002963 F6               [ 1]  358 	ld a,(x)
      002964 5C               [ 1]  359 	incw x 
      002965 90 F7            [ 1]  360 	ld (y),a
      002967 90 5C            [ 1]  361 	incw y 
      002969 F6               [ 1]  362 	ld a,(x)
      00296A 26 BD            [ 1]  363 	jrne 81$
      00296C CC 28 83         [ 2]  364 	jp decomp_loop 
      00296F                        365 20$: 
      00296F 90 7F            [ 1]  366 	clr (y)
      002971 1E 03            [ 2]  367 	ldw x,(STR,sp)
      002973 7B 01            [ 1]  368 	ld a,(BASE_SAV,sp)
      002975 C7 00 0A         [ 1]  369 	ld base,a 
      002978 7B 02            [ 1]  370 	ld a,(WIDTH_SAV,sp)
      00297A C7 00 21         [ 1]  371 	ld tab_width,a
      00297D 72 F2 03         [ 2]  372 	subw y,(STR,sp) 
      002980 90 9F            [ 1]  373 	ld a,yl 
      002982                        374 	_drop VSIZE 
      002982 5B 04            [ 2]    1     addw sp,#VSIZE 
      002984 81               [ 4]  375 	ret 
                                    376 
      002985 40 28 29 2C 23         377 single_char: .byte '@','(',')',',','#'
      00298A 2B 2D                  378 add_char: .byte '+','-'
      00298C 2A 2F 25               379 mul_char: .byte '*','/','%'
      00298F 29 9B 29 9D 29 9F 29   380 relop_str: .word gt,equal,ge,lt,le,ne 
             A2 29 A4 29 A7
      00299B 3E 00                  381 gt: .asciz ">"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      00299D 3D 00                  382 equal: .asciz "="
      00299F 3E 3D 00               383 ge: .asciz ">="
      0029A2 3C 00                  384 lt: .asciz "<"
      0029A4 3C 3D 00               385 le: .asciz "<="
      0029A7 3C 3E 00               386 ne:  .asciz "<>"
                                    387 
                                    388 ;----------------------------------
                                    389 ; search in kword_dict name
                                    390 ; from its execution address 
                                    391 ; input:
                                    392 ;   X       	cmd_index 
                                    393 ; output:
                                    394 ;   X 			cstr*  | 0 
                                    395 ;--------------------------------
                           000001   396 	CMDX=1 
                           000003   397 	LINK=3 
                           000004   398 	VSIZE=4
      0029AA                        399 cmd_name:
      0029AA                        400 	_vars VSIZE 
      0029AA 52 04            [ 2]    1     sub sp,#VSIZE 
      0029AC 72 5F 00 0C      [ 1]  401 	clr acc16 
      0029B0 1F 01            [ 2]  402 	ldw (CMDX,sp),x  
      0029B2 AE 1F 41         [ 2]  403 	ldw x,#kword_dict	
      0029B5 1F 03            [ 2]  404 1$:	ldw (LINK,sp),x
      0029B7 E6 02            [ 1]  405 	ld a,(2,x)
      0029B9 A4 0F            [ 1]  406 	and a,#15 
      0029BB C7 00 0D         [ 1]  407 	ld acc8,a 
      0029BE 1C 00 03         [ 2]  408 	addw x,#3
      0029C1 72 BB 00 0C      [ 2]  409 	addw x,acc16
      0029C5 FE               [ 2]  410 	ldw x,(x) ; command index  
      0029C6 13 01            [ 2]  411 	cpw x,(CMDX,sp)
      0029C8 27 0A            [ 1]  412 	jreq 2$
      0029CA 1E 03            [ 2]  413 	ldw x,(LINK,sp)
      0029CC FE               [ 2]  414 	ldw x,(x) 
      0029CD 1D 00 02         [ 2]  415 	subw x,#2  
      0029D0 26 E3            [ 1]  416 	jrne 1$
      0029D2 20 05            [ 2]  417 	jra 9$
      0029D4 1E 03            [ 2]  418 2$: ldw x,(LINK,sp)
      0029D6 1C 00 02         [ 2]  419 	addw x,#2 	
      0029D9                        420 9$:	_drop VSIZE
      0029D9 5B 04            [ 2]    1     addw sp,#VSIZE 
      0029DB 81               [ 4]  421 	ret
                                    422 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26     .area CODE 
      002A00                         27 	.bndry 128 ; align on FLASH block.
                                     28 ; space for user application  
      002A00                         29 app_space::
      002A00 00 00                   30 app_sign: .word 0 ; .ascii "BC"  ; signature 
      002A02 00 00                   31 app_size: .word 0 ; 31 
      002A04                         32 app: 
                                     33 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     34 ;;  BASIC code demo 'BLINK.BAS' 
                                     35 ;; 10 do btogl $500a,32 pause 250 until qkey bres $500a,32 end 
                                     36 ;; byte code generated by compiler.
                                     37 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     38 ;.byte 0,10,31,128,0,38,128,0,20,132,80,10,9,132,0,32,128
                                     39 ;.byte 0,100,132,0,250,128,0,182,129,0,132,128,0,46
                                     40 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   7 ABS        001F43 R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   7 ADCON      001F39 R
    ADCON_ID=  000002     |   7 ADCREAD    001F2D R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  7 AND        001F25 R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  7 ASC        001F1D R   |     ASC_IDX =  000008     |     ATTRIB  =  000002 
    AUTORUN_=  004000     |   7 AWU        001F15 R   |   7 AWUHandl   000001 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  00000A     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000001 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   7 BIT        001F0D R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000C 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000B     |   7 BRES       001F04 R   |     BRES_IDX=  00000E 
    BS      =  000008     |     BSAVE   =  000001     |   7 BSET       001EFB R
    BSET_IDX=  000010     |     BSIZE   =  000005     |   7 BTEST      001EF1 R
    BTEST_ID=  000012     |   7 BTOGL      001EE7 R   |     BTOGL_ID=  000014 
    BTW     =  000001     |   7 BYE        001EDF R   |     BYE_IDX =  000016 
    C       =  000001     |     CAN     =  000018     |   7 CANT_DO    001539 R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  7 CHAR       001ED6 R   |     CHAR_IDX=  000018     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMDX    =  000001 
    CMD_END =  000002     |     CNT     =  000006     |     CNTR    =  000003 
    COMMA   =  00002C     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   7 CRH        001ECE R
    CRH_IDX =  00001A     |   7 CRL        001EC6 R   |     CRL_IDX =  00001C 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000007     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   7 DATA       001EBD R
  7 DATALN     001EB2 R   |     DATALN_I=  000020     |     DATA_IDX=  00001E 
    DBG_A   =  000005     |     DBG_CC  =  000006     |     DBG_X   =  000003 
    DBG_Y   =  000001     |     DBL     =  000003     |     DBLDIVDN=  000006 
    DBLHI   =  000001     |     DBLLO   =  000003     |     DBL_SIZE=  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   7 DDR        001EAA R   |     DDR_IDX =  000022 
    DEBUG   =  000000     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
    DEBUG_PR=  000001     |   7 DEC        001EA2 R   |     DEC_IDX =  000024 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
    DIVDNDHI=  00000B     |     DIVDNDLO=  00000D     |     DIVISOR =  000001 
    DIVISR  =  000007     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   7 DO         001E9B R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000026 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]

Symbol Table

  7 DREAD      001E91 R   |     DREAD_ID=  000028     |   7 DWRITE     001E86 R
    DWRITE_I=  00002A     |   7 EDIT       001E7D R   |     EDIT_IDX=  00002C 
  7 EEPROM     001E72 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002E     |     EEPROM_S=  000800     |     EM      =  000019 
  7 END        001E6A R   |     END_IDX =  000030     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   7 ERASE      001E60 R
    ERASE_ID=  000032     |     ERR_BAD_=  00000A     |     ERR_BUF_=  00000F 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FAUTORUN=  000006     |     FBREAK  =  000004 
    FCOMP   =  000005     |   7 FCPU       001E57 R   |     FCPU_IDX=  000034 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   7 FOR        001E4F R   |     FOR_IDX =  000038 
  7 FREE       001E46 R   |     FREE_IDX=  00009A     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   7 GOSUB      001E3C R
    GOSUB_ID=  00003A     |   7 GOTO       001E33 R   |     GOTO_IDX=  00003C 
  7 GPIO       001E2A R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_IDX=  00003E     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   7 HEX        001E22 R   |     HEX_IDX =  000040 
    HOME    =  000082     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]

Symbol Table

    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   7 IDR        001E1A R
    IDR_IDX =  000042     |   7 IF         001E13 R   |     IF_IDX  =  000044 
    IN      =  000005     |     INCR    =  000001     |     INP     =  000000 
  7 INPUT      001E09 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_ID=  000046     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   7 INVERT     001DFE R   |     INVERT_I=  000048 
    INW     =  000009     |     IPOS    =  000001     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   7 IWDGEN     001DF3 R   |     IWDGEN_I=  00004A 
  7 IWDGREF    001DE7 R   |     IWDGREF_=  00004C     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  7 KEY        001DDF R   |     KEY_END =  000083     |     KEY_IDX =  00004E 
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000005 
  7 LET        001DD7 R   |     LET_IDX =  000050     |     LF      =  00000A 
    LIMIT   =  000001     |     LINENO  =  000005     |     LINK    =  000003 
  7 LIST       001DCE R   |     LIST_IDX=  000052     |     LL      =  000001 
    LLEN    =  000007     |     LL_HB   =  000001     |     LN_PTR  =  000005 
  7 LOG        001DC6 R   |     LOG_IDX =  000054     |   7 LSHIFT     001DBB R
    LSHIFT_I=  000056     |     MAJOR   =  000002     |     MASK    =  000002 
    MATH_OVF=  000000     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
  7 MULDIV     001DB0 R   |     MULDIV_I=  000058     |     MULOP   =  000003 
    N1      =  000001     |     N2      =  000003     |     NAFR    =  004804 
    NAK     =  000015     |     NCLKOPT =  004808     |     NEG     =  000001 
  7 NEW        001DA8 R   |     NEW_IDX =  00005C     |   7 NEXT       001D9F R
    NEXT_IDX=  00005A     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]

Symbol Table

    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  7 NOT        001D97 R   |     NOT_IDX =  00005E     |   7 NOT_SAVE   000F28 R
  7 NO_APP     001578 R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   7 NonHandl   000000 R   |   7 ODR        001D8F R
    ODR_IDX =  000060     |     ONOFF   =  000003     |     OP      =  000005 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   7 OR         001D88 R   |     OR_IDX  =  000062 
    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVFH    =  000001 
    OVFL    =  000002     |     OVRWR   =  000004     |     PA      =  000000 
  7 PAD        001D80 R   |     PAD_IDX =  000064     |     PAD_SIZE=  000080 
  7 PAUSE      001D76 R   |     PAUSE_ID=  000066     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  7 PEEK       001D6D R   |     PEEK_IDX=  00006A     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PINNO   =  000001     |   7 PINP       001D64 R   |     PINP_IDX=  00006C 
    PINVAL  =  000002     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   7 PMODE      001D5A R   |     PMODE_ID=  000068 
  7 POKE       001D51 R   |     POKE_IDX=  00006E     |     PORT    =  000003 
  7 POUT       001D48 R   |     POUT_IDX=  000070     |     PREV    =  000001 
  7 PRINT      001D3E R   |   7 PROG_ADD   000E01 R   |   7 PROG_SIZ   000E13 R
  7 PRTA       001D35 R   |     PRTA_IDX=  000074     |   7 PRTB       001D2C R
    PRTB_IDX=  000076     |   7 PRTC       001D23 R   |     PRTC_IDX=  000078 
  7 PRTD       001D1A R   |     PRTD_IDX=  00007A     |   7 PRTE       001D11 R
    PRTE_IDX=  00007C     |   7 PRTF       001D08 R   |     PRTF_IDX=  00007E 
  7 PRTG       001CFF R   |     PRTG_IDX=  000080     |   7 PRTH       001CF6 R
    PRTH_IDX=  000082     |   7 PRTI       001CED R   |     PRTI_IDX=  000084 
    PRT_IDX =  000072     |     PSTR    =  000003     |   7 QKEY       001CE4 R
    QKEY_IDX=  000086     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |     RBT_IDX =  00008A     |   7 READ       001CDB R
    READ_IDX=  000088     |   7 REBOOT     001CD0 R   |     REG     =  000001 
    REGA    =  000001     |     REGX    =  000003     |     REGY    =  000005 
    RELOP   =  000003     |   7 REMARK     001CC5 R   |     REM_IDX =  00008C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]

Symbol Table

  7 RESTORE    001CB9 R   |     REST_IDX=  00008E     |     RETL1   =  000001 
  7 RETURN     001CAE R   |     RET_ADDR=  000003     |     RET_IDX =  000090 
    RET_INW =  000005     |   7 RND        001CA6 R   |     RND_IDX =  000092 
    ROP     =  004800     |     RS      =  00001E     |   7 RSHIFT     001C9B R
    RSHIFT_I=  000094     |     RST_SR  =  0050B3     |   7 RUN        001C93 R
  7 RUNNING    000552 R   |     RUN_IDX =  000096     |     RXCHAR  =  000001 
    RX_QUEUE=  000008     |   7 SAVE       001C8A R   |     SAVEB   =  000002 
    SAVE_IDX=  000036     |     SDIVSR  =  000005     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |   7 SHOW       001C81 R
    SHOW_IDX=  000098     |     SI      =  00000F     |     SIGN    =  000001 
  7 SIGNATUR   001537 R   |   7 SIZE       001C78 R   |     SIZE_IDX=  0000C4 
    SKIP    =  000005     |   7 SLEEP      001C6E R   |     SLEEP_ID=  00009C 
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  7 SPIEN      001C64 R   |     SPIEN_ID=  0000A0     |   7 SPIRD      001C5A R
    SPIRD_ID=  00009E     |   7 SPISEL     001C4F R   |     SPISEL_I=  0000A2 
  7 SPIWR      001C45 R   |     SPIWR_ID=  0000A4     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_CS_B=  000005     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SQUOT   =  000006     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  0000A0     |   7 STEP       001C3C R
    STEP_IDX=  0000A6     |   7 STOP       001C33 R   |     STOP_IDX=  0000A8 
    STR     =  000003     |   7 STR_BYTE   000E22 R   |     STX     =  000002 
    SUB     =  00001A     |     SUP     =  000084     |     SWIM_CSR=  007F80 
    SYN     =  000016     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   7 TICKS      001C29 R
    TICKS_ID=  0000AA     |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   7 TIMEOUT    001C1D R
  7 TIMER      001C13 R   |     TIMER_ID=  0000AC     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  000006     |     TK_CFUNC=  000082 
    TK_CHAR =  000003     |     TK_CMD  =  000080     |     TK_COLON=  00000B 
    TK_COMMA=  000009     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LE   =  000036     |     TK_LPARE=  000007 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000008 
    TK_SHARP=  00000A     |     TK_VAR  =  000085     |     TMROUT_I=  0000AE 
  7 TO         001C0C R   |   7 TONE       001C03 R   |     TONE_IDX=  0000B2 
    TO_IDX  =  0000B0     |   7 Timer4Up   000040 R   |     U1      =  000001 
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART2   =  000001 
    UART3   =  000002     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   7 UBOUND     001BF8 R   |     UBOUND_I=  0000B4 
  7 UBTN_Han   000079 R   |   7 UFLASH     001BED R   |     UFLASH_I=  0000B6 
  7 UNTIL      001BE3 R   |     UNTIL_ID=  0000B8     |     US      =  00001F 
  7 USER_ABO   00008C R   |   7 USR        001BDB R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     USR_IDX =  0000BA 
  7 Uart1RxH   00000F R   |   7 UserButt   000055 R   |     VAR_ADDR=  000006 
    VSISE   =  000003     |     VSIZ    =  000002     |     VSIZE   =  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]

Symbol Table

    VT      =  00000B     |   7 WAIT       001BD2 R   |     WAIT_IDX=  0000BC 
    WCNT    =  000003     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   7 WORDS      001BC8 R
    WORDS_ID=  0000BE     |   7 WRITE      001BBE R   |     WRITE_ID=  0000C0 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XFIRST  =  000001 
    XMASK   =  000001     |     XOFF    =  000013     |     XON     =  000011 
  7 XOR        001BB6 R   |     XOR_IDX =  0000C2     |     XREG    =  000003 
    XSAVE   =  000001     |     YSAVE   =  000004     |   7 abs        0016E6 R
  1 acc16      00000C GR  |   1 acc24      00000B GR  |   1 acc8       00000D GR
  7 accept_c   0022AF R   |   7 add_char   00298A R   |   7 add_spac   0027AE R
  7 analog_r   00133E R   |   7 app        002A04 R   |   7 app_sign   002A00 R
  7 app_size   002A02 R   |   7 app_spac   002A00 GR  |   7 arduino_   0017DC R
  7 arg_list   000BD0 R   |   1 array_si   00001E R   |   7 ascii      0015D7 R
  7 at_tst     00261C R   |   7 atoi24     00098A GR  |   7 atoi_exi   0009F0 R
  7 awu        001697 R   |   7 awu02      0016A1 R   |   7 bad_port   001638 R
  1 base       00000A GR  |   1 basicptr   000004 GR  |   7 beep       0012CB R
  7 beep_1kh   0012B5 GR  |   7 bin_exit   0024E2 R   |   7 bit_and    0016FA R
  7 bit_or     001712 R   |   7 bit_rese   001090 R   |   7 bit_set    001080 R
  7 bit_test   0010B1 R   |   7 bit_togg   0010A1 R   |   7 bit_xor    00172A R
  7 bitmask    001948 R   |   7 bkslsh_t   0025C9 R   |   7 bksp       00204D R
  7 block_er   0001A8 R   |   7 break_po   00140B R   |   7 bye        001670 R
  7 char       0015C5 R   |   7 clear_ba   000592 R   |   7 clear_va   0003F8 R
  7 clock_in   0000A7 R   |   7 cmd_end    0012AE R   |   7 cmd_line   0007AF R
  7 cmd_name   0029AA R   |   7 cmd_size   000DD4 R   |   7 code_add   001F49 GR
  7 cold_sta   00046F R   |   7 colon_ts   0025F0 R   |   7 comma_ts   0025FB R
  7 comp_msg   000707 R   |   7 compile    002721 GR  |   7 const_cr   0019FC R
  7 const_cr   001A02 R   |   7 const_dd   0019F6 R   |   7 const_ee   001A14 R
  7 const_id   0019F0 R   |   7 const_in   001A0E R   |   7 const_od   0019EA R
  7 const_ou   001A08 R   |   7 const_po   0019B4 R   |   7 const_po   0019BA R
  7 const_po   0019C0 R   |   7 const_po   0019C6 R   |   7 const_po   0019CC R
  7 const_po   0019D2 R   |   7 const_po   0019D8 R   |   7 const_po   0019DE R
  7 const_po   0019E4 R   |   7 convert_   002459 R   |   7 convert_   002011 R
  7 copy_com   002651 R   |   1 count      000003 GR  |   7 cp_loop    000B7F R
  7 cpy_cmd_   002799 R   |   7 cpy_quot   0027D2 R   |   7 create_g   002383 R
  7 cs_high    001BA9 R   |   7 cstk_pro   000D8A R   |   7 dash_tst   002611 R
  7 data       001A1A R   |   1 data_len   000009 R   |   7 data_lin   001A20 R
  1 data_ofs   000008 R   |   1 data_ptr   000006 R   |   7 data_sea   001A61 R
  7 dbl_sign   000AD9 R   |   7 dec_base   000DB6 R   |   7 decomp_l   002883 R
  7 decompil   00283C GR  |   7 del_line   002356 R   |   7 delete_l   00213A R
  7 delete_n   00205D R   |   7 delete_u   0020FF R   |   7 digital_   001372 R
  7 digital_   0013A2 R   |   7 div32_16   000AE3 R   |   7 divide     000B3A R
  7 divu24_8   0008F9 R   |   7 dneg       000ACE R   |   7 do_loop    001971 R
  7 do_progr   00019B R   |   7 edit       000EFB R   |   7 enable_i   0018F2 R
  7 eql_tst    0026A6 R   |   7 equal      00299D R   |   7 erase      00146A R
  7 erase_fl   0001C7 R   |   7 err_bad_   000672 R   |   7 err_buf_   0006E8 R
  7 err_cmd_   000636 R   |   7 err_div0   0005FB R   |   7 err_dupl   000650 R
  7 err_math   0005E2 R   |   7 err_mem_   0005C7 R   |   7 err_msg    0005A7 R
  7 err_no_a   00067E R   |   7 err_no_d   0006B1 R   |   7 err_no_f   0006D5 R
  7 err_no_l   00060A R   |   7 err_no_p   0006C1 R   |   7 err_not_   000661 R
  7 err_run_   000620 R   |   7 err_synt   0005D4 R   |   7 escaped    00246E GR
  7 expect     000BBE R   |   7 expr_exi   000D15 R   |   7 expressi   000CCF R
  7 factor     000C20 R   |   1 farptr     000016 R   |   7 fcpu       001774 R
  7 final_te   0022A8 R   |   7 first_li   000EA8 R   |   1 flags      000020 GR
  7 for        00110C R   |   7 free       000DBB R   |   3 free_ram   000080 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]

Symbol Table

  7 func_arg   000BCB R   |   7 func_not   0018E5 R   |   7 ge         00299F R
  7 get_arra   000BFB R   |   7 get_cmd_   00281B R   |   7 get_esca   00201D R
  7 get_targ   0011D6 R   |   7 get_tick   0016E0 R   |   7 get_toke   002562 GR
  7 getc       0002C2 GR  |   7 gosub      001217 R   |   7 goto       0011FC R
  7 gpio       001613 R   |   7 gt         00299B R   |   7 gt_tst     0026B1 R
  7 hex_base   000DB1 R   |   7 hex_dump   00034F R   |   7 if         0010F8 R
  1 in         000001 GR  |   1 in.saved   000002 GR  |   1 in.w       000000 GR
  7 incr_far   00144E R   |   7 input_ex   001052 R   |   7 input_lo   000FE7 R
  7 input_va   000FE5 R   |   7 insert_c   0020BC R   |   7 insert_l   0023AF R
  7 insert_l   00241E R   |   7 interp_l   0007F0 R   |   7 interpre   0007CB R
  7 invert     001962 R   |   7 is_alnum   000420 GR  |   7 is_alpha   000406 GR
  7 is_digit   000417 GR  |   7 itoa       00088E GR  |   7 itoa_loo   0008B3 R
  7 jp_to_ta   00120A R   |   7 key        0015FE R   |   7 kw_loop    0024FE R
  7 kword_di   001F41 GR  |   7 kword_en   001BB4 R   |   7 le         0029A4 R
  7 leading_   001938 R   |   7 let        000E33 GR  |   7 let_arra   000E41 R
  7 let_var    000E44 R   |   7 lines_sk   000EAB R   |   7 list       000E66 R
  7 list_exi   000EED R   |   7 list_loo   000ECB R   |   7 log2       00192D R
  7 logical_   0018DB R   |   7 long_div   000AB6 R   |   7 loop_bac   0011B9 R
  1 loop_dep   00001D R   |   7 loop_don   0011CE R   |   7 lshift     001742 R
  7 lt         0029A2 R   |   7 lt_tst     0026DA R   |   7 modulo     000B50 R
  7 move       0003B6 GR  |   7 move_dow   0003D4 R   |   7 move_era   00013C R
  7 move_exi   0003F5 R   |   7 move_lef   002094 R   |   7 move_loo   0003D9 R
  7 move_prg   000170 R   |   7 move_rig   0020A2 R   |   7 move_up    0003C6 R
  7 mul_char   00298C R   |   7 muldiv     000B55 R   |   7 multiply   000A81 R
  7 mulu24_8   000921 R   |   7 nbr_tst    002595 R   |   7 ne         0029A7 R
  7 neg_acc2   00095B R   |   7 new        001429 R   |   7 next       00118C R
  7 next_lin   0007D3 R   |   7 next_tok   000817 GR  |   7 no_match   000B91 R
  7 other      002703 R   |   7 overwrit   0022D4 R   |   5 pad        0016E0 GR
  7 pad_ref    001BAE R   |   7 parse_bi   0024C0 R   |   7 parse_in   002476 R
  7 parse_ke   0024FD R   |   7 parse_qu   002421 R   |   7 pause      001684 R
  7 pause02    00168E R   |   7 peek       0010E7 R   |   7 pin_mode   001780 R
  7 plus_tst   00267A R   |   7 poke       0010D8 R   |   7 power_ad   001302 R
  7 prcnt_ts   00269B R   |   7 print      000F5F R   |   7 print_ex   000FB9 R
  7 print_he   002309 GR  |   7 print_in   000872 R   |   7 printxy    0009F4 R
  7 prog_siz   000E5E R   |   7 program_   000150 R   |   7 program_   000170 R
  7 prt_basi   000F3F R   |   7 prt_loop   000F63 R   |   7 prt_tok    0002E1 R
  7 prti24     000882 R   |   1 ptr16      000017 GR  |   1 ptr8       000018 R
  7 putc       0002B2 GR  |   7 puts       002043 GR  |   7 qgetc      0002BB GR
  7 qkey       001606 GR  |   7 qmark_ts   002627 R   |   7 qsign      0014CF R
  7 random     0017FC R   |   7 read       001A9D R   |   7 read01     001A9F R
  7 readln     002148 GR  |   7 readln_l   002155 R   |   7 readln_q   0022F1 R
  7 refresh_   001928 R   |   7 rel_exit   000D6D R   |   7 relation   000D18 R
  7 relop_st   00298F R   |   7 remark     001055 GR  |   7 reset_co   000F61 R
  7 rest_con   000FD5 R   |   7 restore    001A4E R   |   7 return     001237 R
  7 right_al   0027C0 GR  |   7 row_alig   001433 R   |   7 row_eras   000115 R
  7 row_eras   00013C R   |   7 row_loop   000332 R   |   7 rparnt_t   0025E5 R
  7 rshift     00175B R   |   3 rsign      00007C R   |   3 rsize      00007E R
  7 rt_msg     0006F5 R   |   7 run        001255 R   |   7 run_app    000511 R
  7 run_it     001287 R   |   1 rx1_head   00002A R   |   1 rx1_queu   000022 R
  1 rx1_tail   00002B R   |   7 save_app   0014D6 R   |   7 save_con   000FC5 R
  7 scan_blo   00145C R   |   7 search_d   000B71 GR  |   7 search_e   000BBB R
  7 search_l   00232B GR  |   7 search_l   00233A R   |   7 search_n   000B75 R
  1 seedx      000012 R   |   1 seedy      000014 R   |   7 select_p   0017CC R
  7 send_esc   00206B R   |   7 send_par   002076 R   |   7 set_time   0018C9 R
  7 sharp_ts   002606 R   |   7 show       000D70 R   |   7 show_row   000320 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]

Symbol Table

  7 single_c   002985 R   |   7 skip       00254F R   |   7 slash_ts   002690 R
  7 sleep      001679 R   |   7 software   000429 R   |   7 spaces     0020B0 GR
  7 spi_clea   001B42 R   |   7 spi_disa   001B2A R   |   7 spi_enab   001AF7 R
  7 spi_rcv_   001B64 R   |   7 spi_read   001B8F R   |   7 spi_sele   001B97 R
  7 spi_send   001B4E R   |   7 spi_writ   001B6F R   |   5 stack_fu   001760 GR
  5 stack_un   001800 R   |   7 star_tst   002685 R   |   7 step       001165 R
  7 stop       0013DD R   |   7 store_lo   001179 R   |   7 str_matc   000B9E R
  7 str_tst    002585 R   |   7 strcmp     000397 R   |   7 strcpy     0003A8 GR
  7 strlen     00038C GR  |   7 syntax_e   000728 GR  |   1 tab_widt   000021 GR
  7 tb_error   00072A GR  |   7 term       000C7D R   |   7 term01     000C85 R
  7 term_exi   000CCC R   |   5 tib        001690 GR  |   7 tick_tst   00263F R
  1 ticks      00000E R   |   7 timeout    0018D8 R   |   1 timer      000010 GR
  7 timer2_i   0000BD R   |   7 timer4_i   0000CA R   |   7 tk_id      000718 R
  7 to         001135 R   |   7 to_eepro   000193 R   |   7 to_flash   000198 R
  7 to_hex_c   002320 GR  |   7 to_upper   00097E GR  |   7 token_ch   00271A R
  7 token_ex   00271E R   |   7 token_ms   000318 R   |   7 tone       0012BE R
  7 try_next   001A8D R   |   1 txtbgn     000019 GR  |   1 txtend     00001B GR
  7 uart1_ge   0002C2 GR  |   7 uart1_in   00026F R   |   7 uart1_pu   0002B2 GR
  7 uart1_qg   0002BB GR  |   7 uart1_se   00027F R   |   7 ubound     000E29 R
  7 udiv32_1   000AA4 R   |   7 uflash     00163D R   |   7 umstar     000A47 R
  7 unlock_e   0000DF R   |   7 unlock_f   0000FA R   |   7 until      001986 R
  7 user_int   000068 R   |   7 usr        001653 R   |   7 var_name   002813 GR
  1 vars       00002C GR  |   7 wait       00105B R   |   7 warm_ini   000574 R
  7 warm_sta   0007AC R   |   7 words      001863 R   |   7 words_co   0018B3 R
  7 write      00158E R   |   7 write_bl   00024C R   |   7 write_by   0001D2 R
  7 write_ee   00020E R   |   7 write_ex   000247 R   |   7 write_fl   0001F8 R
  7 write_ro   000184 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     60   flags    0
   2 BTXT       size      0   flags    8
   3 BTXT0      size      4   flags    8
   4 SSEG       size      0   flags    8
   5 SSEG1      size    170   flags    8
   6 HOME       size     80   flags    0
   7 CODE       size   2A04   flags    0

