ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           00003C    37         XSTACK_SIZE=CELL_SIZE*20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                                     45 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                                     58 ;--------------------------------------
                                     59 ;   constantes related to Arduino 
                                     60 ;   API mapping 
                                     61 ;-------------------------------------
                           000000    62         INP=0
                           000001    63         OUTP=1 
                                     64 
                                     65 ;--------------------------------------
                                     66 ;       token attribute
                                     67 ;--------------------------------------
                                     68         ; bits 4:5 identify token group 
                                     69         ; 0x0n -> miscelinous 
                                     70         ; 0x1n -> +|- operators 
                                     71         ; 0x2n -> *|/|% operators
                                     72         ; 0x3n -> relational operators 
                           000080    73         TK_CMD=128      ; BASIC command   
                           000081    74         TK_IFUNC=129    ; BASIC integer function
                           000082    75         TK_CFUNC=130    ; BASIC character function
                           000083    76         TK_CONST=131    ; BASIC constant 
                           000084    77         TK_INTGR=132    ; 16 bits integer 
                           000085    78         TK_VAR=133
                           000086    79         TK_FLOAT=134    ; float32 
                           000087    80         TK_NOT=135
                           000088    81         TK_AND=136      ;
                           000089    82         TK_OR=137       ;
                           00008A    83         TK_XOR=138      ; 
                           000000    84         TK_NONE=0       ; not a token 
                           000002    85         TK_QSTR=2       ; quoted string  
                           000003    86         TK_LABEL=3      ; used for defined, constants, variables
                           000004    87         TK_CHAR=4       ; ASCII character 
                           000005    88         TK_ARRAY=5     ; array variable '@' 
                           000006    89         TK_LPAREN=6     ; left parenthesis '('
                           000007    90         TK_RPAREN=7     ; right parenthesis ')'
                           000008    91         TK_COMMA=8     ; item separator ',' 
                           000009    92         TK_SHARP=9     ; print colon width '#' 
                           00000A    93         TK_COLON=0xa      ; command separator ':' 
                                     94         
                           000010    95         TK_PLUS=0x10    ; addition operator '+'
                           000011    96         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    97         TK_MULT=0x20    ; multiplication operator '*'
                           000021    98         TK_DIV=0x21     ; division operator '/'
                           000022    99         TK_MOD=0x22     ; modulo operator '%'
                                    100 
                                    101         ; don't change these token values 
                                    102         ; values chosen to be used as a mask.
                                    103         ; bit 7   1 for dictionary words else 0 
                                    104         ; bits 6  always 0 
                                    105         ; bits 5:4 identify group 
                                    106         ; bits 3:0 token identifier inside group  
                           000031   107         TK_GT=0x31      ; relation operator '>'
                           000032   108         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   109         TK_GE=0x33      ; relation operator '>='
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000034   110         TK_LT=0x34      ; relation operator '<'
                           000036   111         TK_LE=0x36      ; relation operator '<='
                           000035   112         TK_NE=0x35      ; relation operator '<>' not equal 
                                    113         ; token groups 
                           000030   114         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   115         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   116         TK_GRP_ADD=0x10  ; additive operators
                           000020   117         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   118         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   119         CMD_END=2 
                                    120 
                                    121 ;--------------------------------------
                                    122 ;   error codes 
                                    123 ;--------------------------------------
                           000000   124     ERR_NONE=0
                           000001   125     ERR_MEM_FULL=1 
                           000002   126     ERR_SYNTAX=2
                           000003   127     ERR_MATH_OVF=3
                           000004   128     ERR_DIV0=4 
                           000005   129     ERR_NO_LINE=5
                           000006   130     ERR_RUN_ONLY=6
                           000007   131     ERR_CMD_ONLY=7
                           000008   132     ERR_DUPLICATE=8
                           000009   133     ERR_NOT_FILE=9
                           00000A   134     ERR_BAD_VALUE=10
                           00000B   135     ERR_NO_ACCESS=11
                           00000C   136     ERR_NO_DATA=12 
                           00000D   137     ERR_NO_PROG=13
                           00000E   138     ERR_NO_FSPACE=14
                           00000F   139     ERR_BUF_FULL=15
                           000010   140     ERR_OVERFLOW=16 
                                    141 
                                    142 ;--------------------------------------
                                    143 ;   assembler flags 
                                    144 ;-------------------------------------
                                    145 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    146 
                                    147      .macro _usec_dly n 
                                    148     ldw x,#(16*n-2)/4
                                    149     decw x
                                    150     nop 
                                    151     jrne .-4
                                    152     .endm 
                                    153     
                                    154     ; load X register with 
                                    155     ; entry point of dictionary
                                    156     ; before calling 'search_dict'
                                    157     .macro _ldx_dict dict_name
                                    158     ldw x,#dict_name+2
                                    159     .endm 
                                    160 
                                    161     ; reset BASIC pointer
                                    162     ; to beginning of last token
                                    163     ; extracted except if it was end of line 
                                    164     .macro _unget_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165      mov in,in.saved  
                                    166     .endm
                                    167 
                                    168 
                                    169 ;---------------------------------------
                                    170 ;    xtack manipulation macros 
                                    171 ;    Y is used as xstack pointer  
                                    172 ;----------------------------------------
                                    173     ; pop in A:X from XSTACK 
                                    174     .macro _xpop 
                                    175     ld a,(y)
                                    176     ldw x,y 
                                    177     ldw x,(1,x)
                                    178     addw y,#CELL_SIZE 
                                    179     .endm 
                                    180 
                                    181     ; push A:X  to XSTACK 
                                    182     .macro _xpush 
                                    183     subw y,#CELL_SIZE
                                    184     ld (y),a 
                                    185     ldw (1,y),x 
                                    186     .endm 
                                    187 
                                    188     ; drop from XSTACK 
                                    189     .macro _xdrop 
                                    190     addw y,#CELL_SIZE 
                                    191     .endm 
                                    192 
                                    193     ; @T fetch top xstack 
                                    194     .macro _at_top
                                    195     ld a,(y)
                                    196     ldw x,y 
                                    197     ldw x,(1,x)
                                    198     .endm 
                                    199 
                                    200     ; @N  fetch next on xstack 
                                    201     .macro _at_next 
                                    202     ld a,(3,y)
                                    203     ldw x,y 
                                    204     ldw x,(4,x)
                                    205     .endm 
                                    206 
                                    207     ; !T put on top of xtack 
                                    208     .macro _store_top 
                                    209     ld (y),a 
                                    210     ldw (1,y),x     
                                    211     .endm 
                                    212 
                                    213     ; !N put next on xstack 
                                    214     .macro _store_next 
                                    215     ld (3,y),a 
                                    216     ldw (4,y),x 
                                    217     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTH_IDX=PRTG_IDX+2
                           000076    84     PRTI_IDX=PRTH_IDX+2
                           000078    85     QKEY_IDX=PRTI_IDX+2
                           00007A    86     READ_IDX=QKEY_IDX+2
                           00007C    87     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007E    88 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           000080    89     REST_IDX=REM_IDX+2 ; RESTORE
                           000082    90     RET_IDX=REST_IDX+2  ; RETURN 
                           000084    91     RND_IDX=RET_IDX+2 ; RANDOM 
                           000086    92     RSHIFT_IDX=RND_IDX+2
                           000088    93     RUN_IDX=RSHIFT_IDX+2
                           00008A    94     FREE_IDX=RUN_IDX+2
                           00008C    95     SLEEP_IDX=FREE_IDX+2
                           00008E    96     SPIRD_IDX=SLEEP_IDX+2
                           000090    97     SPIEN_IDX=SPIRD_IDX+2
                           000092    98     SPISEL_IDX=SPIEN_IDX+2
                           000094    99     SPIWR_IDX=SPISEL_IDX+2
                           000096   100     STEP_IDX=SPIWR_IDX+2
                           000098   101     STOP_IDX=STEP_IDX+2
                           00009A   102     TICKS_IDX=STOP_IDX+2
                           00009C   103     TIMER_IDX=TICKS_IDX+2
                           00009E   104     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000A0   105     TO_IDX=TMROUT_IDX+2
                           0000A2   106     TONE_IDX=TO_IDX+2
                           0000A4   107     UBOUND_IDX=TONE_IDX+2
                           0000A6   108     UFLASH_IDX=UBOUND_IDX+2
                           0000A8   109     UNTIL_IDX=UFLASH_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           0000AA   110     USR_IDX=UNTIL_IDX+2
                           0000AC   111     WAIT_IDX=USR_IDX+2
                           0000AE   112     WORDS_IDX=WAIT_IDX+2
                           0000B0   113     WRITE_IDX=WORDS_IDX+2
                           0000B2   114     SIZE_IDX=WRITE_IDX+2 
                           0000B4   115     ON_IDX=SIZE_IDX+2 
                           0000B6   116     GET_IDX=ON_IDX+2
                           0000B8   117     CONST_IDX=GET_IDX+2
                           0000BA   118     EEFREE_IDX=CONST_IDX+2
                                    119      
                                    120     ; keep these 3 at end
                                    121     ; these have no entry in code_addr 
                           0000F8   122     NOT_IDX=248
                           0000FA   123     AND_IDX=250 
                           0000FC   124     OR_IDX=252 
                           0000FE   125     XOR_IDX=254    
                                    126 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                     34 	.include "dbg_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;----------------------------------
                                     21 ;  macros used for debugging
                                     22 ;---------------------------------
                                     23 ;-------------------------------
                                     24 ;  macros used to help debugging
                                     25 ;-------------------------------
                                     26     
                           000009    27     DBG_CC=9
                           000008    28     DBG_A=8 
                           000006    29     DBG_X=6 
                           000004    30     DBG_Y=4 
                                     31     .macro _dbg_save_regs 
                                     32     .if DEBUG 
                                     33     push cc ; (9,sp)
                                     34     push a   ; (8,sp)
                                     35     pushw x  ; (6,sp)
                                     36     pushw y  ; (4,sp)
                                     37     ; save acc24 
                                     38     ld a,acc24 
                                     39     ldw x,acc16 
                                     40     pushw x 
                                     41     push a 
                                     42     .endif 
                                     43     .endm 
                                     44 
                                     45     .macro _dbg_restore_regs 
                                     46     ; restore acc24 
                                     47     .if DEBUG 
                                     48     pop a 
                                     49     popw x 
                                     50     ld acc24,a 
                                     51     ldw acc16,x 
                                     52     popw y 
                                     53     popw x 
                                     54     pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     55     pop cc 
                                     56     .endif 
                                     57     .endm 
                                     58 
                                     59     .macro _dbg_getc
                                     60     .if DEBUG  
                                     61     _dbg_save_regs 
                                     62     call getc
                                     63     ld (DBG_A,sp),a 
                                     64     _dbg_restore_regs
                                     65     .endif   
                                     66     .endm 
                                     67 
                                     68     .macro _dbg_putc
                                     69     .if DEBUG  
                                     70     push cc 
                                     71     call putc 
                                     72     pop cc 
                                     73     .endif 
                                     74     .endm 
                                     75 
                                     76     .macro _dbg_puts
                                     77     .if DEBUG  
                                     78     _dbg_save_regs
                                     79     call puts 
                                     80     _dbg_restore_regs
                                     81     .endif 
                                     82     .endm 
                                     83 
                                     84     .macro _dbg_prti24 
                                     85     .if DEBUG 
                                     86     _dbg_save_regs
                                     87     call prti24 
                                     88     _dbg_restore_regs
                                     89     .endif 
                                     90     .endm 
                                     91 
                                     92     .macro _dbg_prt_regs
                                     93     .if DEBUG 
                                     94     call print_registers
                                     95     .endif  
                                     96     .endm 
                                     97 
                                     98     .macro _dbg_peek addr 
                                     99     .if DEBUG 
                                    100     _dbg_save_regs 
                                    101     ldw x,addr 
                                    102     call peek     
                                    103     _dbg_restore_regs
                                    104     .endif 
                                    105     .endm 
                                    106 
                                    107     .macro _dbg_parser_init 
                                    108     .if DEBUG 
                                    109     _dbg_save_regs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                    110     call parser_init 
                                    111     _dbg_restore_regs
                                    112     .endif 
                                    113     .endm
                                    114 
                                    115     .macro _dbg_readln
                                    116     .if DEBUG 
                                    117     _dbg_save_regs
                                    118     call readln
                                    119     _dbg_restore_regs
                                    120     .endif 
                                    121     .endm
                                    122 
                                    123     .macro _dbg_number
                                    124     .if DEBUG 
                                    125     _dbg_save_regs
                                    126     call number 
                                    127     _dbg_restore_regs
                                    128     .endif 
                                    129     .endm  
                                    130 
                                    131     .macro _dbg_nextword
                                    132     .if DEBUG 
                                    133     _dbg_save_regs
                                    134     call get_token   
                                    135     _dbg_restore_regs
                                    136     .endif 
                                    137     .endm  
                                    138 
                                    139     .macro _dbg_dots 
                                    140     .if DEBUG 
                                    141     _dbg_save_regs
                                    142     call dots 
                                    143     _dbg_restore_regs
                                    144     .endif 
                                    145     .endm 
                                    146 
                                    147     .macro _dbg_trap
                                    148     bset flags,#FTRAP 
                                    149     trap 
                                    150     .endm 
                                    151 
                                    152     .macro _dbg_mark n  
                                    153     .if DEBUG 
                                    154     push cc
                                    155     push a 
                                    156     ld a,#n 
                                    157     call putc
                                    158     btjf UART1_SR,#UART_SR_TC,. 
                                    159     pop a 
                                    160     pop cc 
                                    161     .endif 
                                    162     .endm 
                                    163     
                                    164     .macro _dbg_prt_var var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    165     .if DEBUG 
                                    166     _dbg_save_regs 
                                    167     ldw x,var 
                                    168     ldw acc16,x 
                                    169     clr acc24 
                                    170     clrw x 
                                    171     ld a,#16+128  
                                    172     call prti24
                                    173     ld a,#CR 
                                    174     call putc  
                                    175     _dbg_restore_regs
                                    176     .endif  
                                    177     .endm 
                                    178 
                                    179     .macro _dbg_show
                                    180     .if DEBUG  
                                    181     _dbg_save_regs 
                                    182     call show 
                                    183     _dbg_restore_regs
                                    184     .endif 
                                    185     .endm 
                                    186 
                                    187 
                                    188 
                                    189 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                     35   
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001668                         41     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016B8                         43 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         44 pad:: .ds PAD_SIZE             ; working buffer
      001738                         45 xstack_full:: .ds XSTACK_SIZE   ; expression stack 
      001774                         46 xstack_unf:: ; xstack underflow 
      001774                         47 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         48 stack_unf: ; stack underflow ; control_stack bottom 
                                     49 
                                     50 ;;--------------------------------------
                                     51     .area HOME 
                                     52 ;; interrupt vector table at 0x8000
                                     53 ;;--------------------------------------
                                     54 
      000000 82 00 00 C3             55     int cold_start			; RESET vector 
                           000001    56 .if DEBUG
      000004 82 00 00 12             57 	int TrapHandler 		;TRAP  software interrupt
                           000000    58 .else
                                     59 	int NonHandledInterrupt ;TRAP  software interrupt
                                     60 .endif
      000008 82 00 00 00             61 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             62 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             63 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             64 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             65 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             66 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             67 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 44             68 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             69 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             70 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             71 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             72 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             73 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             74 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             75 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             76 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             77 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             78 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 CE             79 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             80 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             81 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             82 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             83 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 21             84 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             85 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             86 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             87 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             88 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             89 	int NonHandledInterrupt ;int28  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      00007C 82 00 00 00             90 	int NonHandledInterrupt ;int29  not used
                                     91 
                                     92 ;---------------------------------------
                                     93     .area CODE
                                     94 ;---------------------------------------
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; non handled interrupt 
                                     98 ; reset MCU
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        100 NonHandledInterrupt:
      000000                        101 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ; auto wakeup from halt
                                    105 ; at iret, program continue 
                                    106 ; after hatl instruction
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        108 AWUHandler:
      000004 72 19 50 F0      [ 1]  109 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  110 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  111 	clr AWU_TBR 
      000011 80               [11]  112 	iret
                                    113 
                                    114 ;------------------------------------
                                    115 ; software interrupt handler  
                                    116 ;------------------------------------
                           000001   117 .if DEBUG 
      000012                        118 TrapHandler:
      000012 72 12 00 22      [ 1]  119 	bset flags,#FTRAP 
      000016 CD 04 C1         [ 4]  120 	call print_registers
      000019 CD 05 6C         [ 4]  121 	call cmd_itf
      00001C 72 13 00 22      [ 1]  122 	bres flags,#FTRAP 	
      000020 80               [11]  123 	iret
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ; ticks range {0..2^23-1}
                                    131 ;--------------------------------
      000021                        132 Timer4UpdateHandler:
      000021 72 5F 53 42      [ 1]  133 	clr TIM4_SR 
      000025 C6 00 0F         [ 1]  134 	ld a,ticks 
      000028 CE 00 10         [ 2]  135 	ldw x,ticks+1
      00002B 1C 00 01         [ 2]  136 	addw x,#1 
      00002E A9 00            [ 1]  137 	adc a,#0 
      000030 2A 02            [ 1]  138 	jrpl 0$
                                    139 ; reset to 0 when negatif 
      000032 4F               [ 1]  140 	clr a 
      000033 5F               [ 1]  141 	clrw x 
      000034 C7 00 0F         [ 1]  142 0$:	ld ticks,a 
      000037 CF 00 10         [ 2]  143 	ldw ticks+1,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      00003A CE 00 12         [ 2]  144 	ldw x,timer
      00003D 27 04            [ 1]  145 	jreq 1$
      00003F 5A               [ 2]  146 	decw x 
      000040 CF 00 12         [ 2]  147 	ldw timer,x 
      000043                        148 1$:	
      000043 80               [11]  149 	iret 
                                    150 
                                    151 ;------------------------------------
                                    152 ; Triggered by pressing USER UserButton 
                                    153 ; on NUCLEO card.
                                    154 ; This is used to abort a progam lock 
                                    155 ; in infinite loop. 
                                    156 ;------------------------------------
      000044                        157 UserButtonHandler:
                                    158 ; wait button release
      000044 5F               [ 1]  159 	clrw x
      000045 5A               [ 2]  160 1$: decw x 
      000046 26 FD            [ 1]  161 	jrne 1$
      000048 72 09 50 15 F8   [ 2]  162 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    163 ; if MCU suspended by SLEEP resume program
      00004D 72 07 00 22 05   [ 2]  164     btjf flags,#FSLEEP,2$
      000052 72 17 00 22      [ 1]  165 	bres flags,#FSLEEP 
      000056 80               [11]  166 	iret
      000057                        167 2$:	
      000057                        168 user_interrupted:
      000057 72 00 00 22 02   [ 2]  169     btjt flags,#FRUN,4$
      00005C 20 0A            [ 2]  170 	jra UBTN_Handler_exit 
      00005E                        171 4$:	; program interrupted by user 
      00005E 72 11 00 22      [ 1]  172 	bres flags,#FRUN 
      000062 AE 00 70         [ 2]  173 	ldw x,#USER_ABORT
      000065 CD 09 9D         [ 4]  174 	call puts 
      000068                        175 UBTN_Handler_exit:
      000068 AE 17 FF         [ 2]  176     ldw x,#STACK_EMPTY 
      00006B 94               [ 1]  177     ldw sp,x
      00006C 9A               [ 1]  178 	rim 
      00006D CC 17 2A         [ 2]  179 5$:	jp warm_start
                                    180 
      000070 0A 50 72 6F 67 72 61   181 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    182 
                                    183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    184 ;    peripherals initialization
                                    185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    186 
                                    187 ;----------------------------------------
                                    188 ; inialize MCU clock 
                                    189 ; input:
                                    190 ;   A 		source  HSI | 1 HSE 
                                    191 ;   XL      CLK_CKDIVR , clock divisor 
                                    192 ; output:
                                    193 ;   none 
                                    194 ;----------------------------------------
      00008B                        195 clock_init:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00008B C1 50 C3         [ 1]  196 	cp a,CLK_CMSR 
      00008E 27 0C            [ 1]  197 	jreq 2$ ; no switching required 
                                    198 ; select clock source 
      000090 72 12 50 C5      [ 1]  199 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000094 C7 50 C4         [ 1]  200 	ld CLK_SWR,a
      000097 C1 50 C3         [ 1]  201 1$:	cp a,CLK_CMSR
      00009A 26 FB            [ 1]  202 	jrne 1$
      00009C                        203 2$: 	
                                    204 ; HSI and cpu clock divisor 
      00009C 9F               [ 1]  205 	ld a,xl 
      00009D C7 50 C6         [ 1]  206 	ld CLK_CKDIVR,a  
      0000A0 81               [ 4]  207 	ret
                                    208 
                                    209 ;----------------------------------
                                    210 ; TIMER2 used as audio tone output 
                                    211 ; on port D:5. CN9-6
                                    212 ; channel 1 configured as PWM mode 1 
                                    213 ;-----------------------------------  
                                    214 
      0000A1                        215 timer2_init:
      0000A1 72 1A 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000A5 35 60 53 05      [ 1]  217  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000A9 35 08 53 0C      [ 1]  218 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000AD 81               [ 4]  219 	ret 
                                    220 
                                    221 ;---------------------------------
                                    222 ; TIM4 is configured to generate an 
                                    223 ; interrupt every millisecond 
                                    224 ;----------------------------------
      0000AE                        225 timer4_init:
      0000AE 72 18 50 C7      [ 1]  226 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000B2 35 07 53 45      [ 1]  227 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B6 35 7D 53 46      [ 1]  228 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BA 35 05 53 40      [ 1]  229 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BE 72 10 53 41      [ 1]  230 	bset TIM4_IER,#TIM4_IER_UIE
      0000C2 81               [ 4]  231 	ret
                                    232 
                                    233 ;-------------------------------------
                                    234 ;  initialization entry point 
                                    235 ;-------------------------------------
      0000C3                        236 cold_start:
                                    237 ;set stack 
      0000C3 AE 17 FF         [ 2]  238 	ldw x,#STACK_EMPTY
      0000C6 94               [ 1]  239 	ldw sp,x
                                    240 ; clear all ram 
      0000C7 7F               [ 1]  241 0$: clr (x)
      0000C8 5A               [ 2]  242 	decw x 
      0000C9 26 FC            [ 1]  243 	jrne 0$
                                    244 ; activate pull up on all inputs 
      0000CB A6 FF            [ 1]  245 	ld a,#255 
      0000CD C7 50 03         [ 1]  246 	ld PA_CR1,a 
      0000D0 C7 50 08         [ 1]  247 	ld PB_CR1,a 
      0000D3 C7 50 0D         [ 1]  248 	ld PC_CR1,a 
      0000D6 C7 50 12         [ 1]  249 	ld PD_CR1,a 
      0000D9 C7 50 17         [ 1]  250 	ld PE_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      0000DC C7 50 1C         [ 1]  251 	ld PF_CR1,a 
      0000DF C7 50 21         [ 1]  252 	ld PG_CR1,a 
      0000E2 C7 50 2B         [ 1]  253 	ld PI_CR1,a
                                    254 ; set LD2 pin as output 
      0000E5 72 1A 50 0D      [ 1]  255     bset PC_CR1,#LED2_BIT
      0000E9 72 1A 50 0E      [ 1]  256     bset PC_CR2,#LED2_BIT
      0000ED 72 1A 50 0C      [ 1]  257     bset PC_DDR,#LED2_BIT
      0000F1 72 1B 50 0A      [ 1]  258 	bres PC_ODR,#LED2_BIT 
                                    259 ; disable schmitt triggers on Arduino CN4 analog inputs
      0000F5 55 00 3F 54 07   [ 1]  260 	mov ADC_TDRL,0x3f
                                    261 ; disable peripherals clocks
                                    262 ;	clr CLK_PCKENR1 
                                    263 ;	clr CLK_PCKENR2
      0000FA 72 5F 50 F2      [ 1]  264 	clr AWU_TBR 
      0000FE 72 14 50 CA      [ 1]  265 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    266 ; select internal clock no divisor: 16 Mhz 	
      000102 A6 E1            [ 1]  267 	ld a,#CLK_SWR_HSI 
      000104 5F               [ 1]  268 	clrw x  
      000105 CD 00 8B         [ 4]  269     call clock_init 
      000108 CD 00 AE         [ 4]  270 	call timer4_init
      00010B CD 00 A1         [ 4]  271 	call timer2_init
                                    272 ; UART1 at 115200 BAUD
      00010E CD 08 FB         [ 4]  273 	call uart1_init
                                    274 ; activate PE_4 (user button interrupt)
      000111 72 18 50 18      [ 1]  275     bset PE_CR2,#USR_BTN_BIT 
                                    276 ; display system information
      000115 9A               [ 1]  277 	rim ; enable interrupts 
      000116 72 5C 00 17      [ 1]  278 	inc seedy+1 
      00011A 72 5C 00 15      [ 1]  279 	inc seedx+1 
      00011E CD 1D 31         [ 4]  280 	call func_eefree 
      000121 CD 1C 68         [ 4]  281 	call ubound 
      000124 CD 14 FA         [ 4]  282 	call clear_basic
      000127 CD 25 7B         [ 4]  283 	call beep_1khz  
      00012A CD 14 A7         [ 4]  284 	call system_information
      00012D                        285 2$:	
                                    286 ; check for application in flash memory 
      00012D CD 27 B6         [ 4]  287 	call qsign 
      000130 27 03            [ 1]  288 	jreq run_app
      000132 CC 17 2A         [ 2]  289 	jp warm_start 
      000135                        290 run_app:
                                    291 ; run application in FLASH|EEPROM 
      000135 90 CE 17 73      [ 2]  292 	ldw y,XSTACK_EMPTY
      000139 CD 14 D8         [ 4]  293 	call warm_init
      00013C AE 35 84         [ 2]  294 	ldw x,#app 
      00013F CF 00 1B         [ 2]  295 	ldw txtbgn,x
      000142 72 BB 35 82      [ 2]  296 	addw x,app_size 
      000146 CF 00 1D         [ 2]  297 	ldw txtend,x 
      000149 AE 01 57         [ 2]  298 	ldw x,#AUTO_RUN 
      00014C CD 09 9D         [ 4]  299 	call puts 
      00014F CD 1E 59         [ 4]  300 	call program_info 
      000152 CC 25 1F         [ 2]  301 	jp run_it_02  
      000155 20 FE            [ 2]  302     jra .  
                                    303 
      000157 20 61 75 74 6F 20 72   304 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic 
                                     21 ;;  format in registers: A:X 
                                     22 ;;      A  bits 23..16 
                                     23 ;;      X  bits 15..0 
                                     24 ;;  acc24 variable used for 
                                     25 ;;  computation 
                                     26 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     27 
                                     28 
                                     29     .area CODE 
                                     30 
                                     31 ;-------------------------------
                                     32 ; add24 A:X+acc24 
                                     33 ; add 24 bits integers 
                                     34 ;------------------------------
      00016A                         35 add24: ; ( i1 i2 -- i1 + i2 )
      00016A                         36     _xpop 
      00016A 90 F6            [ 1]    1     ld a,(y)
      00016C 93               [ 1]    2     ldw x,y 
      00016D EE 01            [ 2]    3     ldw x,(1,x)
      00016F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000173 89               [ 2]   37     pushw x  
      000174 88               [ 1]   38     push a  
      000175                         39     _at_top  
      000175 90 F6            [ 1]    1     ld a,(y)
      000177 93               [ 1]    2     ldw x,y 
      000178 EE 01            [ 2]    3     ldw x,(1,x)
      00017A 72 FB 02         [ 2]   40     addw x,(2,sp)
      00017D 19 01            [ 1]   41     adc a, (1,sp)
      00017F                         42     _store_top 
      00017F 90 F7            [ 1]    1     ld (y),a 
      000181 90 EF 01         [ 2]    2     ldw (1,y),x     
      000184                         43     _drop 3 
      000184 5B 03            [ 2]    1     addw sp,#3 
      000186 81               [ 4]   44     ret 
                                     45 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                     46 ;-------------------------------
                                     47 ; sub24 A:X-acc24 
                                     48 ; subtract 24 bits integers 
                                     49 ;------------------------------
      000187                         50 sub24: ; (i1 i2 -- i1-i2 ) 
      000187                         51     _xpop 
      000187 90 F6            [ 1]    1     ld a,(y)
      000189 93               [ 1]    2     ldw x,y 
      00018A EE 01            [ 2]    3     ldw x,(1,x)
      00018C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000190 89               [ 2]   52     pushw x 
      000191 88               [ 1]   53     push  a
      000192                         54     _at_top  
      000192 90 F6            [ 1]    1     ld a,(y)
      000194 93               [ 1]    2     ldw x,y 
      000195 EE 01            [ 2]    3     ldw x,(1,x)
      000197 72 F0 02         [ 2]   55     subw x,(2,sp) 
      00019A 12 01            [ 1]   56     sbc a, (1,sp)
      00019C                         57     _store_top  
      00019C 90 F7            [ 1]    1     ld (y),a 
      00019E 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001A1                         58     _drop 3 
      0001A1 5B 03            [ 2]    1     addw sp,#3 
      0001A3 81               [ 4]   59     ret 
                                     60 
                                     61 ;------------------------------
                                     62 ; cp24  i1 i2 -- 0x800000|0|0x010000
                                     63 ;------------------------------
      0001A4                         64 cp24:
      0001A4                         65     _xpop 
      0001A4 90 F6            [ 1]    1     ld a,(y)
      0001A6 93               [ 1]    2     ldw x,y 
      0001A7 EE 01            [ 2]    3     ldw x,(1,x)
      0001A9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001AD C7 00 0C         [ 1]   66     ld acc24,a 
      0001B0 CF 00 0D         [ 2]   67     ldw acc16,x
      0001B3                         68     _at_top 
      0001B3 90 F6            [ 1]    1     ld a,(y)
      0001B5 93               [ 1]    2     ldw x,y 
      0001B6 EE 01            [ 2]    3     ldw x,(1,x)
      0001B8 72 B0 00 0D      [ 2]   69     subw x,acc16
      0001BC C2 00 0C         [ 1]   70     sbc a,acc24
      0001BF 2F 08            [ 1]   71     jrslt 1$
      0001C1 26 0A            [ 1]   72     jrne 2$
      0001C3 5D               [ 2]   73     tnzw x 
      0001C4 26 07            [ 1]   74     jrne 2$
      0001C6 4F               [ 1]   75     clr a 
      0001C7 20 06            [ 2]   76     jra 9$ 
      0001C9                         77 1$: ; i1 < i2 
      0001C9 A6 FF            [ 1]   78     ld a,#255
      0001CB 20 02            [ 2]   79     jra 9$ 
      0001CD                         80 2$: ; i1 > i2 
      0001CD A6 01            [ 1]   81     ld a,#1 
      0001CF 5F               [ 1]   82 9$: clrw x
      0001D0                         83      _store_top 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      0001D0 90 F7            [ 1]    1     ld (y),a 
      0001D2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001D5 81               [ 4]   84     ret 
                                     85 
                                     86 ;-------------------------------
                                     87 ; cp24_ax 
                                     88 ; compare acc24 with A:X 
                                     89 ;-------------------------------
      0001D6                         90 cp24_ax:
      0001D6 88               [ 1]   91     push a 
      0001D7 C3 00 0D         [ 2]   92     cpw x,acc16 
      0001DA C2 00 0C         [ 1]   93     sbc a,acc24
      0001DD 84               [ 1]   94     pop a 
      0001DE 81               [ 4]   95     ret 
                                     96 
                                     97 
                                     98 ;-------------------------------
                                     99 ; abs24 
                                    100 ; abolute value of top  
                                    101 ;-------------------------------
      0001DF                        102 abs24: ; ( i -- u )
      0001DF 90 F6            [ 1]  103     ld a,(y)
      0001E1 A1 80            [ 1]  104     cp a,#0x80 
      0001E3 2A 0A            [ 1]  105     jrpl neg24 ; negative integer
      0001E5 81               [ 4]  106     ret  
                                    107 
                                    108 ;----------------------------
                                    109 ;  one's compleement 
                                    110 ;----------------------------
      0001E6                        111 cpl24:  ; i -- ~i 
      0001E6 90 73            [ 1]  112     cpl (y) 
      0001E8 90 63 01         [ 1]  113     cpl (1,y)
      0001EB 90 63 02         [ 1]  114     cpl (2,y)
      0001EE 81               [ 4]  115     ret 
                                    116 
                                    117 ;----------------------------    
                                    118 ; two'2 complement of top  
                                    119 ;---------------------------
      0001EF                        120 neg24: ; (i -- -i )
      0001EF                        121     _at_top
      0001EF 90 F6            [ 1]    1     ld a,(y)
      0001F1 93               [ 1]    2     ldw x,y 
      0001F2 EE 01            [ 2]    3     ldw x,(1,x)
      0001F4 43               [ 1]  122     cpl  a  
      0001F5 53               [ 2]  123     cplw x 
      0001F6 1C 00 01         [ 2]  124     addw x,#1
      0001F9 A9 00            [ 1]  125     adc a,#0
      0001FB                        126     _store_top  
      0001FB 90 F7            [ 1]    1     ld (y),a 
      0001FD 90 EF 01         [ 2]    2     ldw (1,y),x     
      000200 81               [ 4]  127 9$: ret 
                                    128 
                                    129 ;-----------------------------
                                    130 ; negate integer in A:X 
                                    131 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000201                        132 neg_ax:
      000201 43               [ 1]  133     cpl  a  
      000202 53               [ 2]  134     cplw x 
      000203 1C 00 01         [ 2]  135     addw x,#1
      000206 A9 00            [ 1]  136     adc a,#0
      000208 81               [ 4]  137     ret 
                                    138 
                                    139 ;------------------------------------
                                    140 ;  two's complement of acc24 
                                    141 ;-------------------------------------
      000209                        142 neg_acc24: ; 
      000209 72 53 00 0C      [ 1]  143     cpl acc24 
      00020D 72 53 00 0D      [ 1]  144     cpl acc16 
      000211 72 53 00 0E      [ 1]  145     cpl acc8
      000215 72 5C 00 0E      [ 1]  146     inc acc8 
      000219 26 0A            [ 1]  147     jrne 9$
      00021B 72 5C 00 0D      [ 1]  148     inc acc16 
      00021F 26 04            [ 1]  149     jrne 9$
      000221 72 5C 00 0C      [ 1]  150     inc acc24 
      000225 81               [ 4]  151 9$: ret 
                                    152 
                                    153 
                                    154 ;--------------------------------------
                                    155 ; unsigned multiply uint24_t by uint8_t
                                    156 ; input:
                                    157 ;	acc24	uint24_t 
                                    158 ;   A		uint8_t
                                    159 ; output:
                                    160 ;   acc24   A*acc24
                                    161 ;      A    overflow, bits 31..24 
                                    162 ;-------------------------------------
                                    163 ; local variables offset  on sp
                           000001   164 	U8   = 1   ; A pushed on stack
                           000001   165 	VSIZE = 1 
      000226                        166 mulu24_8:
      000226 89               [ 2]  167 	pushw x    ; save X
                                    168 	; local variable
      000227 88               [ 1]  169 	push a     ; U8
      000228 72 5F 00 0B      [ 1]  170 	clr acc32 
                                    171 ; multiply bits 7..0 * U8   	
      00022C 97               [ 1]  172 	ld xl,a 
      00022D C6 00 0E         [ 1]  173 	ld a,acc8 
      000230 42               [ 4]  174 	mul x,a 
      000231 C6 00 0D         [ 1]  175 	ld a, acc16 
      000234 CF 00 0D         [ 2]  176 	ldw acc16,x
                                    177 ; multiply middle byte, bits 15..8 * U8  	
      000237 97               [ 1]  178 	ld xl,a 
      000238 7B 01            [ 1]  179 	ld a,(U8,sp)
      00023A 42               [ 4]  180 	mul x,a 
      00023B C6 00 0C         [ 1]  181 	ld a,acc24
      00023E 72 5F 00 0C      [ 1]  182 	clr acc24  
      000242 72 BB 00 0C      [ 2]  183 	addw x,acc24
      000246 CF 00 0C         [ 2]  184 	ldw acc24,x 
                                    185 ; multiply  MSB, bits 23..16 * U8 
      000249 97               [ 1]  186 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00024A 7B 01            [ 1]  187 	ld a,(U8,sp)
      00024C 42               [ 4]  188 	mul x,a
      00024D 72 BB 00 0B      [ 2]  189 	addw x,acc32  
      000251 CF 00 0B         [ 2]  190 	ldw acc32,x 
      000254 9E               [ 1]  191 	ld a,xh 
      000255                        192 	_drop VSIZE  
      000255 5B 01            [ 2]    1     addw sp,#VSIZE 
      000257 85               [ 2]  193 	popw x 
      000258 81               [ 4]  194 	ret 
                                    195 
                                    196 
                                    197 ;-------------------------------
                                    198 ; mul24 i1 i2 -- i1*i2  
                                    199 ; multiply 24 bits integers 
                                    200 ;------------------------------
                           000001   201     PROD=1 
                           000004   202     N1=4
                           000007   203     N2=7
                           00000A   204     PROD_SIGN=10
                           00000A   205     VSIZE=10 
      000259                        206 mul24:
      000259                        207     _vars VSIZE
      000259 52 0A            [ 2]    1     sub sp,#VSIZE 
      00025B 0F 0A            [ 1]  208     clr (PROD_SIGN,sp)
      00025D 0F 01            [ 1]  209     clr (PROD,sp)
      00025F 5F               [ 1]  210     clrw x 
      000260 1F 02            [ 2]  211     ldw (PROD+1,sp),x
      000262                        212     _xpop 
      000262 90 F6            [ 1]    1     ld a,(y)
      000264 93               [ 1]    2     ldw x,y 
      000265 EE 01            [ 2]    3     ldw x,(1,x)
      000267 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00026B 4D               [ 1]  213     tnz a 
      00026C 2A 05            [ 1]  214     jrpl 0$
      00026E 03 0A            [ 1]  215     cpl (PROD_SIGN,sp)
      000270 CD 02 01         [ 4]  216     call neg_ax 
      000273                        217 0$:    
      000273 6B 04            [ 1]  218     ld (N1,sp),a 
      000275 1F 05            [ 2]  219     ldw (N1+1,sp),x
      000277                        220     _at_top 
      000277 90 F6            [ 1]    1     ld a,(y)
      000279 93               [ 1]    2     ldw x,y 
      00027A EE 01            [ 2]    3     ldw x,(1,x)
      00027C 4D               [ 1]  221     tnz a 
      00027D 2A 09            [ 1]  222     jrpl 2$ 
      00027F 03 0A            [ 1]  223     cpl (PROD_SIGN,sp) 
      000281 CD 02 01         [ 4]  224     call neg_ax
      000284 6B 07            [ 1]  225     ld (N2,sp),a 
      000286 1F 08            [ 2]  226     ldw (N2+1,sp),x   
      000288                        227 2$: 
      000288 C7 00 0C         [ 1]  228     ld acc24,a 
      00028B CF 00 0D         [ 2]  229     ldw acc16,x 
      00028E 7B 06            [ 1]  230     ld a,(N1+2,sp); least byte     
      000290 27 12            [ 1]  231     jreq 4$
      000292 CD 02 26         [ 4]  232     call mulu24_8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000295 4D               [ 1]  233     tnz a 
      000296 26 60            [ 1]  234     jrne 8$ ; overflow 
      000298 CE 00 0D         [ 2]  235     ldw x,acc16  
      00029B C6 00 0C         [ 1]  236     ld a,acc24
      00029E 2B 58            [ 1]  237     jrmi 8$ ; overflow  
      0002A0 6B 01            [ 1]  238     ld (PROD,sp),a
      0002A2 1F 02            [ 2]  239     ldw (PROD+1,sp),x 
      0002A4                        240 4$:
      0002A4 7B 07            [ 1]  241     ld a,(N2,sp) 
      0002A6 1E 08            [ 2]  242     ldw x,(N2+1,sp)
      0002A8 C7 00 0C         [ 1]  243     ld acc24,a 
      0002AB CF 00 0D         [ 2]  244     ldw acc16,x 
      0002AE 7B 05            [ 1]  245     ld a,(N1+1,sp); middle byte     
      0002B0 27 1F            [ 1]  246     jreq 5$
      0002B2 CD 02 26         [ 4]  247     call mulu24_8
      0002B5 4D               [ 1]  248     tnz a 
      0002B6 26 40            [ 1]  249     jrne 8$ ; overflow 
      0002B8 C6 00 0C         [ 1]  250     ld a,acc24 
      0002BB 26 3B            [ 1]  251     jrne 8$  ; overflow 
      0002BD CE 00 0D         [ 2]  252     ldw x,acc16  
      0002C0 72 FB 01         [ 2]  253     addw x,(PROD,sp)
      0002C3 29 33            [ 1]  254     jrv 8$ ; overflow
      0002C5 1F 01            [ 2]  255     ldw (PROD,sp),x 
      0002C7 7B 07            [ 1]  256     ld a,(N2,sp)
      0002C9 1E 08            [ 2]  257     ldw x,(N2+1,sp)
      0002CB C7 00 0C         [ 1]  258     ld acc24,a 
      0002CE CF 00 0D         [ 2]  259     ldw acc16,x 
      0002D1                        260 5$:
      0002D1 7B 04            [ 1]  261     ld a,(N1,sp) ; high byte 
      0002D3 27 16            [ 1]  262     jreq 6$
      0002D5 CD 02 26         [ 4]  263     call mulu24_8
      0002D8 4D               [ 1]  264     tnz a 
      0002D9 26 1D            [ 1]  265     jrne 8$ ; overflow 
      0002DB CE 00 0C         [ 2]  266     ldw x,acc24 
      0002DE 26 18            [ 1]  267     jrne 8$ ; overflow 
      0002E0 C6 00 0E         [ 1]  268     ld a,acc8 
      0002E3 2B 13            [ 1]  269     jrmi 8$ ; overflow 
      0002E5 1B 01            [ 1]  270     add a,(PROD,sp)
      0002E7 6B 01            [ 1]  271     ld (PROD,sp),a 
      0002E9 29 0D            [ 1]  272     jrv 8$ ; overflow 
      0002EB                        273 6$:
      0002EB 7B 01            [ 1]  274     ld a,(PROD,sp)
      0002ED 1E 02            [ 2]  275     ldw x,(PROD+1,sp)
      0002EF 0D 0A            [ 1]  276     tnz (PROD_SIGN,sp)
      0002F1 27 0A            [ 1]  277     jreq 9$
      0002F3 CD 02 01         [ 4]  278     call neg_ax 
      0002F6 20 05            [ 2]  279     jra 9$ 
      0002F8                        280 8$: ; overflow
      0002F8 A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
      0002FA CC 16 A0         [ 2]  282     jp tb_error 
      0002FD                        283 9$:    
      0002FD                        284     _store_top 
      0002FD 90 F7            [ 1]    1     ld (y),a 
      0002FF 90 EF 01         [ 2]    2     ldw (1,y),x     
      000302                        285     _drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000302 5B 0A            [ 2]    1     addw sp,#VSIZE 
      000304 81               [ 4]  286     ret 
                                    287 
                                    288 ;-------------------------------------
                                    289 ; divide uint24_t by uint8_t
                                    290 ; input:
                                    291 ;	acc24	dividend
                                    292 ;   A 		divisor
                                    293 ; output:
                                    294 ;   acc24	quotient
                                    295 ;   A		remainder
                                    296 ;------------------------------------- 
                                    297 ; offset  on sp of arguments and locals
                           000001   298 	U8   = 1   ; divisor on stack
                           000001   299 	VSIZE =1
      000305                        300 divu24_8:
      000305 89               [ 2]  301 	pushw x ; save x
      000306 88               [ 1]  302 	push a 
                                    303 	; ld dividend UU:MM bytes in X
      000307 CE 00 0C         [ 2]  304 	ldw x,acc24
      00030A 7B 01            [ 1]  305 	ld a,(U8,SP) ; divisor
      00030C 62               [ 2]  306 	div x,a ; UU:MM/U8
      00030D 88               [ 1]  307 	push a  ;save remainder
      00030E CF 00 0C         [ 2]  308     ldw acc24,x ; quotient 
      000311 84               [ 1]  309 	pop a
      000312 95               [ 1]  310 	ld xh,a
      000313 C6 00 0E         [ 1]  311 	ld a,acc8
      000316 97               [ 1]  312 	ld xl,a
      000317 7B 01            [ 1]  313 	ld a,(U8,sp) ; divisor
      000319 62               [ 2]  314 	div x,a  ; R:LL/U8
      00031A 6B 01            [ 1]  315 	ld (U8,sp),a ; save remainder
      00031C 9F               [ 1]  316 	ld a,xl
      00031D C7 00 0E         [ 1]  317 	ld acc8,a
      000320 84               [ 1]  318 	pop a
      000321 85               [ 2]  319 	popw x
      000322 81               [ 4]  320 	ret
                                    321 
                                    322 
                                    323 ;-------------------------------
                                    324 ; div24 N/T   
                                    325 ; divide 24 bits integers
                                    326 ;  i1 i2 -- i1/i2 
                                    327 ;------------------------------
                           000001   328     DIVISOR=1
                           000004   329     CNTR=4
                           000005   330     QSIGN=5
                           000006   331     RSIGN=6 
                           000006   332     VSIZE=6 
      000323                        333 div24:
      000323                        334     _vars VSIZE 
      000323 52 06            [ 2]    1     sub sp,#VSIZE 
      000325 0F 06            [ 1]  335     clr (RSIGN,sp)
      000327 0F 05            [ 1]  336     clr (QSIGN,sp)
      000329                        337     _xpop 
      000329 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      00032B 93               [ 1]    2     ldw x,y 
      00032C EE 01            [ 2]    3     ldw x,(1,x)
      00032E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000332 4D               [ 1]  338     tnz a 
      000333 2A 05            [ 1]  339     jrpl 0$ 
      000335 03 05            [ 1]  340     cpl (QSIGN,sp)
      000337 CD 02 01         [ 4]  341     call neg_ax
      00033A                        342 0$:
      00033A 6B 01            [ 1]  343     ld  (DIVISOR,sp),a
      00033C 1F 02            [ 2]  344     ldw (DIVISOR+1,sp),x
      00033E 1A 02            [ 1]  345     or a,(DIVISOR+1,sp)
      000340 1A 03            [ 1]  346     or a,(DIVISOR+2,sp)
      000342 26 05            [ 1]  347     jrne 1$ 
      000344 A6 04            [ 1]  348     ld a,#ERR_DIV0 
      000346 CC 16 A0         [ 2]  349     jp tb_error 
      000349                        350 1$: 
      000349                        351     _at_top
      000349 90 F6            [ 1]    1     ld a,(y)
      00034B 93               [ 1]    2     ldw x,y 
      00034C EE 01            [ 2]    3     ldw x,(1,x)
      00034E 4D               [ 1]  352     tnz a 
      00034F 2A 07            [ 1]  353     jrpl 2$
      000351 CD 02 01         [ 4]  354     call neg_ax
      000354 03 05            [ 1]  355     cpl (QSIGN,sp)
      000356 03 06            [ 1]  356     cpl (RSIGN,sp)
      000358                        357 2$: 
      000358 C7 00 0C         [ 1]  358     ld acc24,a 
      00035B CF 00 0D         [ 2]  359     ldw acc16,x 
      00035E A6 18            [ 1]  360     ld a,#24 
      000360 6B 04            [ 1]  361     ld (CNTR,sp),a
      000362 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000364 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
      000366 CD 01 D6         [ 4]  364     call cp24_ax ; A:X-acc24 ?
      000369 23 14            [ 2]  365     jrule 22$ 
                                    366 ; quotient=0, remainder=divisor      
      00036B C6 00 0C         [ 1]  367     ld a,acc24 
      00036E CE 00 0D         [ 2]  368     ldw x,acc16 
      000371 72 5F 00 0C      [ 1]  369     clr acc24 
      000375 72 5F 00 0D      [ 1]  370     clr acc16 
      000379 72 5F 00 0E      [ 1]  371     clr acc8 
      00037D 20 2E            [ 2]  372     jra 6$
      00037F                        373 22$:     
      00037F 4F               [ 1]  374     clr a 
      000380 5F               [ 1]  375     clrw x 
      000381 98               [ 1]  376     rcf  
      000382                        377 3$: 
      000382 72 59 00 0E      [ 1]  378     rlc acc8 
      000386 72 59 00 0D      [ 1]  379     rlc acc16
      00038A 72 59 00 0C      [ 1]  380     rlc acc24 
      00038E 59               [ 2]  381     rlcw x  
      00038F 49               [ 1]  382     rlc a
      000390 72 F0 02         [ 2]  383 4$: subw x,(DIVISOR+1,sp) 
      000393 12 01            [ 1]  384     sbc a,(DIVISOR,sp)
      000395 24 05            [ 1]  385     jrnc 5$
      000397 72 FB 02         [ 2]  386     addw x,(DIVISOR+1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00039A 19 01            [ 1]  387     adc a,(DIVISOR,sp)
      00039C                        388 5$: ; shift carry in QUOTIENT 
      00039C 8C               [ 1]  389     ccf
      00039D 0A 04            [ 1]  390     dec (CNTR,sp)
      00039F 26 E1            [ 1]  391     jrne 3$ 
      0003A1 72 59 00 0E      [ 1]  392     rlc acc8 
      0003A5 72 59 00 0D      [ 1]  393     rlc acc16 
      0003A9 72 59 00 0B      [ 1]  394     rlc acc32 
      0003AD                        395 6$:    
      0003AD 6B 01            [ 1]  396     ld (DIVISOR,sp),a 
      0003AF 1F 02            [ 2]  397     ldw (DIVISOR+1,sp),x 
      0003B1 C6 00 0C         [ 1]  398     ld a,acc24 
      0003B4 CE 00 0D         [ 2]  399     ldw x,acc16 
      0003B7 0D 05            [ 1]  400     tnz (QSIGN,sp)
      0003B9 27 03            [ 1]  401     jreq 8$
      0003BB CD 02 01         [ 4]  402     call neg_ax 
      0003BE                        403 8$: 
      0003BE                        404     _store_top 
      0003BE 90 F7            [ 1]    1     ld (y),a 
      0003C0 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003C3 7B 01            [ 1]  405     ld a,(DIVISOR,sp)
      0003C5 1E 02            [ 2]  406     ldw x,(DIVSOR+1,sp)
      0003C7                        407 81$:
      0003C7 0D 06            [ 1]  408     tnz (RSIGN,sp)
      0003C9 27 03            [ 1]  409     jreq 9$
      0003CB CD 02 01         [ 4]  410     call neg_ax       
      0003CE                        411 9$: _drop VSIZE 
      0003CE 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003D0 81               [ 4]  412     ret 
                                    413 
                                    414 
                                    415 ;-------------------------------
                                    416 ; mod24 A:X % acc24 
                                    417 ; remainder 24 bits integers 
                                    418 ; input:
                                    419 ;    acc24   dividend 
                                    420 ;    A:X     divisor 
                                    421 ; output:
                                    422 ;    acc24   acc24 % A:X 
                                    423 ;------------------------------
      0003D1                        424 mod24:
      0003D1 CD 03 23         [ 4]  425     call div24 
      0003D4                        426     _store_top  ; replace quotient by remainder 
      0003D4 90 F7            [ 1]    1     ld (y),a 
      0003D6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003D9 81               [ 4]  427     ret 
                                    428 
                                    429 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;;;;;;;;;;;;;;;;;;;
                                     22 
                           000001    23 .if DEBUG 
                                     24 
                                     25     .area CODE
                                     26 
                                     27 ;---------------------------------
                                     28 ;; print actual registers states 
                                     29 ;; as pushed on stack 
                                     30 ;; {Y,X,CC,A}
                                     31 ;---------------------------------
      0003DA                         32 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0003DA                         33 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0003DA                         34 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0003DA                         35 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0003DA                         36 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0003DA                         37 prt_regs::
      0003DA AE 04 1D         [ 2]   38 	ldw x,#regs_state 
      0003DD CD 09 9D         [ 4]   39 	call puts
                                     40 ; register PC
      0003E0 16 01            [ 2]   41 	ldw y,(1,sp)
      0003E2 AE 05 51         [ 2]   42 	ldw x,#REG_EPC 
      0003E5 CD 04 A2         [ 4]   43 	call prt_reg16 
                                     44 ; register CC 
      0003E8 7B 08            [ 1]   45 	ld a,(R_CC,sp)
      0003EA AE 05 62         [ 2]   46 	ldw x,#REG_CC 
      0003ED CD 04 80         [ 4]   47 	call prt_reg8 
                                     48 ; register A 
      0003F0 7B 07            [ 1]   49 	ld a,(R_A,sp)
      0003F2 AE 05 5E         [ 2]   50 	ldw x,#REG_A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0003F5 CD 04 80         [ 4]   51 	call prt_reg8 
                                     52 ; register X 
      0003F8 16 05            [ 2]   53 	ldw y,(R_X,sp)
      0003FA AE 05 5A         [ 2]   54 	ldw x,#REG_X 
      0003FD CD 04 A2         [ 4]   55 	call prt_reg16 
                                     56 ; register Y 
      000400 16 03            [ 2]   57 	ldw y,(R_Y,sp)
      000402 AE 05 56         [ 2]   58 	ldw x,#REG_Y 
      000405 CD 04 A2         [ 4]   59 	call prt_reg16 
                                     60 ; register SP 
      000408 90 96            [ 1]   61 	ldw y,sp
      00040A 72 A9 00 08      [ 2]   62 	addw y,#6+ARG_OFS  
      00040E AE 05 67         [ 2]   63 	ldw x,#REG_SP
      000411 CD 04 A2         [ 4]   64 	call prt_reg16
      000414 A6 0D            [ 1]   65 	ld a,#CR 
      000416 CD 09 40         [ 4]   66 	call putc
      000419 CD 09 40         [ 4]   67 	call putc   
      00041C 81               [ 4]   68 	ret 
                                     69 
                                     70 
      00041D 0A 72 65 67 69 73 74    71 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                     72 
                                     73 
                                     74 ;--------------------
                                     75 ; print content at address in hex.
                                     76 ; input:
                                     77 ;   X 	address to peek 
                                     78 ; output:
                                     79 ;	none 
                                     80 ;--------------------	
      000444                         81 prt_peek::
      000444 89               [ 2]   82 	pushw x 
      000445 35 10 00 0A      [ 1]   83 	mov base,#16 
      000449 CD 17 F4         [ 4]   84 	call prt_i16  
      00044C A6 3A            [ 1]   85 	ld a,#': 
      00044E CD 09 40         [ 4]   86 	call putc 
      000451 A6 20            [ 1]   87 	ld a,#SPACE 
      000453 CD 09 40         [ 4]   88 	call putc 
      000456 85               [ 2]   89 	popw x 
      000457 F6               [ 1]   90 	ld a,(x)
      000458 5F               [ 1]   91 	clrw x 
      000459 97               [ 1]   92 	ld xl,a 
      00045A 35 0A 00 0A      [ 1]   93 	mov base,#10 
      00045E CD 17 F4         [ 4]   94 	call prt_i16 
      000461 81               [ 4]   95 	ret 
                                     96 
                                     97 ;----------------------------------------
                                     98 ;   DEBUG support functions
                                     99 ;----------------------------------------
                                    100 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                    101 ; turn LED on 
      000462                        102 ledon:
      000462 72 1A 50 0A      [ 1]  103     bset PC_ODR,#LED2_BIT
      000466 81               [ 4]  104     ret 
                                    105 
                                    106 ; turn LED off 
      000467                        107 ledoff:
      000467 72 1B 50 0A      [ 1]  108     bres PC_ODR,#LED2_BIT 
      00046B 81               [ 4]  109     ret 
                                    110 
                                    111 ; invert LED status 
      00046C                        112 ledtoggle:
      00046C A6 20            [ 1]  113     ld a,#LED2_MASK
      00046E C8 50 0A         [ 1]  114     xor a,PC_ODR
      000471 C7 50 0A         [ 1]  115     ld PC_ODR,a
      000474 81               [ 4]  116     ret 
                                    117 
      000475                        118 left_paren:
      000475 A6 20            [ 1]  119 	ld a,#SPACE 
      000477 CD 09 40         [ 4]  120 	call putc
      00047A A6 28            [ 1]  121 	ld a,#'( 
      00047C CD 09 40         [ 4]  122 	call putc 	
      00047F 81               [ 4]  123 	ret 
                                    124 
                                    125 ;------------------------------
                                    126 ; print 8 bit register 
                                    127 ; input:
                                    128 ;   X  point to register name 
                                    129 ;   A  register value to print 
                                    130 ; output:
                                    131 ;   none
                                    132 ;------------------------------- 
      000480                        133 prt_reg8:
      000480 88               [ 1]  134 	push a 
      000481 CD 09 9D         [ 4]  135 	call puts 
      000484 7B 01            [ 1]  136 	ld a,(1,sp) 
      000486 5F               [ 1]  137 	clrw x 
      000487 97               [ 1]  138 	ld xl,a 
      000488 35 10 00 0A      [ 1]  139 	mov base,#16
      00048C CD 17 F4         [ 4]  140 	call prt_i16  
      00048F CD 04 75         [ 4]  141 	call left_paren 
      000492 84               [ 1]  142 	pop a 
      000493 5F               [ 1]  143 	clrw x 
      000494 97               [ 1]  144 	ld xl,a 
      000495 35 0A 00 0A      [ 1]  145 	mov base,#10 
      000499 CD 17 F4         [ 4]  146 	call prt_i16  
      00049C A6 29            [ 1]  147 	ld a,#') 
      00049E CD 09 40         [ 4]  148 	call putc
      0004A1 81               [ 4]  149 	ret
                                    150 
                                    151 ;--------------------------------
                                    152 ; print 16 bits register 
                                    153 ; input:
                                    154 ;   X   point register name 
                                    155 ;   Y   register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    156 ; output:
                                    157 ;  none
                                    158 ;--------------------------------
      0004A2                        159 prt_reg16: 
      0004A2 90 89            [ 2]  160 	pushw y 
      0004A4 CD 09 9D         [ 4]  161 	call puts 
      0004A7 1E 01            [ 2]  162 	ldw x,(1,sp) 
      0004A9 35 10 00 0A      [ 1]  163 	mov base,#16 
      0004AD CD 17 F4         [ 4]  164 	call prt_i16  
      0004B0 CD 04 75         [ 4]  165 	call left_paren 
      0004B3 85               [ 2]  166 	popw x 
      0004B4 35 0A 00 0A      [ 1]  167 	mov base,#10 
      0004B8 CD 17 F4         [ 4]  168 	call prt_i16  
      0004BB A6 29            [ 1]  169 	ld a,#') 
      0004BD CD 09 40         [ 4]  170 	call putc
      0004C0 81               [ 4]  171 	ret 
                                    172 
                                    173 ;------------------------------------
                                    174 ; print registers contents saved on
                                    175 ; stack by trap interrupt.
                                    176 ;------------------------------------
      0004C1                        177 print_registers:
      0004C1 AE 05 14         [ 2]  178 	ldw x,#STATES
      0004C4 CD 09 9D         [ 4]  179 	call puts
                                    180 ; print EPC 
      0004C7 AE 05 51         [ 2]  181 	ldw x, #REG_EPC
      0004CA CD 09 9D         [ 4]  182 	call puts 
      0004CD 7B 0B            [ 1]  183 	ld a, (11,sp)
      0004CF C7 00 0E         [ 1]  184 	ld acc8,a 
      0004D2 7B 0A            [ 1]  185 	ld a, (10,sp) 
      0004D4 C7 00 0D         [ 1]  186 	ld acc16,a 
      0004D7 7B 09            [ 1]  187 	ld a,(9,sp) 
      0004D9 C7 00 0C         [ 1]  188 	ld acc24,a
      0004DC 5F               [ 1]  189 	clrw x  
      0004DD A6 10            [ 1]  190 	ld a,#16
      0004DF CD 18 0B         [ 4]  191 	call prt_acc24  
                                    192 ; print X
      0004E2 AE 05 5A         [ 2]  193 	ldw x,#REG_X
      0004E5 16 05            [ 2]  194 	ldw y,(5,sp)
      0004E7 CD 04 A2         [ 4]  195 	call prt_reg16  
                                    196 ; print Y 
      0004EA AE 05 56         [ 2]  197 	ldw x,#REG_Y
      0004ED 16 07            [ 2]  198 	ldw y, (7,sp)
      0004EF CD 04 A2         [ 4]  199 	call prt_reg16  
                                    200 ; print A 
      0004F2 AE 05 5E         [ 2]  201 	ldw x,#REG_A
      0004F5 7B 04            [ 1]  202 	ld a, (4,sp) 
      0004F7 CD 04 80         [ 4]  203 	call prt_reg8
                                    204 ; print CC 
      0004FA AE 05 62         [ 2]  205 	ldw x,#REG_CC 
      0004FD 7B 03            [ 1]  206 	ld a, (3,sp) 
      0004FF CD 04 80         [ 4]  207 	call prt_reg8 
                                    208 ; print SP 
      000502 AE 05 67         [ 2]  209 	ldw x,#REG_SP
      000505 90 96            [ 1]  210 	ldw y,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000507 72 A9 00 0C      [ 2]  211 	addw y,#12
      00050B CD 04 A2         [ 4]  212 	call prt_reg16  
      00050E A6 0A            [ 1]  213 	ld a,#'\n' 
      000510 CD 09 40         [ 4]  214 	call putc
      000513 81               [ 4]  215 	ret
                                    216 
      000514 0A 52 65 67 69 73 74   217 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000551 45 50 43 3A 00         218 REG_EPC: .asciz "EPC:"
      000556 0A 59 3A 00            219 REG_Y:   .asciz "\nY:" 
      00055A 0A 58 3A 00            220 REG_X:   .asciz "\nX:"
      00055E 0A 41 3A 00            221 REG_A:   .asciz "\nA:" 
      000562 0A 43 43 3A 00         222 REG_CC:  .asciz "\nCC:"
      000567 0A 53 50 3A 00         223 REG_SP:  .asciz "\nSP:"
                                    224 
                                    225 ;----------------------------
                                    226 ; command interface
                                    227 ; only 3 commands:
                                    228 ;  'q' to resume application
                                    229 ;  'p [addr]' to print memory values 
                                    230 ;  's addr' to print string 
                                    231 ;----------------------------
                                    232 ;local variable 
                           000001   233 	PSIZE=1
                           000001   234 	VSIZE=1 
      00056C                        235 cmd_itf:
      00056C 52 01            [ 2]  236 	sub sp,#VSIZE 
      00056E 72 5F 00 18      [ 1]  237 	clr farptr 
      000572 72 5F 00 19      [ 1]  238 	clr farptr+1 
      000576 72 5F 00 1A      [ 1]  239 	clr farptr+2  
      00057A                        240 repl:
      00057A A6 0D            [ 1]  241 	ld a,#CR 
      00057C CD 09 40         [ 4]  242 	call putc 
      00057F A6 3F            [ 1]  243 	ld a,#'? 
      000581 CD 09 40         [ 4]  244 	call putc
      000584 72 5F 00 00      [ 1]  245 	clr in.w 
      000588 72 5F 00 01      [ 1]  246 	clr in 
      00058C CD 0A A2         [ 4]  247 	call readln
      00058F 90 AE 16 68      [ 2]  248 	ldw y,#tib  
      000593 90 F6            [ 1]  249 	ld a,(y)
      000595 27 E3            [ 1]  250 	jreq repl  
      000597 72 5C 00 01      [ 1]  251 	inc in 
      00059B CD 18 8A         [ 4]  252 	call to_upper 
      00059E A1 51            [ 1]  253 	cp a,#'Q 
      0005A0 26 17            [ 1]  254 	jrne test_p
      0005A2                        255 repl_exit:
      0005A2 72 5F 16 68      [ 1]  256 	clr tib 
      0005A6 72 5F 00 03      [ 1]  257 	clr count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0005AA 72 5F 00 01      [ 1]  258 	clr in 
      0005AE                        259 	_drop #VSIZE 	
      0005AE 5B 01            [ 2]    1     addw sp,##VSIZE 
      0005B0 81               [ 4]  260 	ret  
      0005B1                        261 invalid:
      0005B1 AE 06 32         [ 2]  262 	ldw x,#invalid_cmd 
      0005B4 CD 09 9D         [ 4]  263 	call puts 
      0005B7 20 C1            [ 2]  264 	jra repl 
      0005B9                        265 test_p:	
      0005B9 A1 50            [ 1]  266     cp a,#'P 
      0005BB 27 11            [ 1]  267 	jreq mem_peek
      0005BD A1 53            [ 1]  268     cp a,#'S 
      0005BF 26 F0            [ 1]  269 	jrne invalid 
      0005C1                        270 print_string:	
      0005C1 CD 0F 17         [ 4]  271 	call get_token
      0005C4 A1 84            [ 1]  272 	cp a,#TK_INTGR 
      0005C6 26 E9            [ 1]  273 	jrne invalid 
      0005C8 CD 09 9D         [ 4]  274 	call puts
      0005CB CC 05 7A         [ 2]  275 	jp repl 	
      0005CE                        276 mem_peek:
      0005CE A6 20            [ 1]  277 	ld a,#SPACE 
      0005D0 CD 0F 04         [ 4]  278 	call skip  	 
      0005D3 72 B9 00 00      [ 2]  279 	addw y,in.w 
      0005D7 AE 16 B8         [ 2]  280 	ldw x,#pad 
      0005DA CD 13 FE         [ 4]  281 	call strcpy
      0005DD AE 16 B8         [ 2]  282 	ldw x,#pad
      0005E0 CD 18 96         [ 4]  283 	call atoi24 	
      0005E3 C6 00 0C         [ 1]  284 	ld a, acc24 
      0005E6 CA 00 0D         [ 1]  285 	or a,acc16 
      0005E9 CA 00 0E         [ 1]  286 	or a,acc8 
      0005EC 26 02            [ 1]  287 	jrne 1$ 
      0005EE 20 0C            [ 2]  288 	jra peek_byte  
      0005F0 CE 00 0C         [ 2]  289 1$:	ldw x,acc24 
      0005F3 CF 00 18         [ 2]  290 	ldw farptr,x 
      0005F6 C6 00 0E         [ 1]  291 	ld a,acc8 
      0005F9 C7 00 1A         [ 1]  292 	ld farptr+2,a 
      0005FC                        293 peek_byte:
      0005FC CD 06 41         [ 4]  294 	call print_farptr 
      0005FF A6 08            [ 1]  295 	ld a,#8 
      000601 6B 01            [ 1]  296 	ld (PSIZE,sp),a 
      000603 5F               [ 1]  297 	clrw x 
      000604 CD 06 5C         [ 4]  298 1$:	call fetchc  
      000607 89               [ 2]  299 	pushw x 
      000608 C7 00 0E         [ 1]  300 	ld acc8,a 
      00060B 5F               [ 1]  301 	clrw x 
      00060C CF 00 0C         [ 2]  302 	ldw acc24,x 
      00060F A6 90            [ 1]  303 	ld a,#16+128
      000611 CD 18 0B         [ 4]  304 	call prt_acc24
      000614 85               [ 2]  305 	popw x 
      000615 0A 01            [ 1]  306 	dec (PSIZE,sp)
      000617 26 EB            [ 1]  307 	jrne 1$ 
      000619 A6 08            [ 1]  308 	ld a,#8 
      00061B CB 00 1A         [ 1]  309 	add a,farptr+2 
      00061E C7 00 1A         [ 1]  310 	ld farptr+2,a
      000621 4F               [ 1]  311 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000622 C9 00 19         [ 1]  312 	adc a,farptr+1 
      000625 C7 00 19         [ 1]  313 	ld farptr+1,a 
      000628 4F               [ 1]  314 	clr a 
      000629 C9 00 18         [ 1]  315 	adc a,farptr 
      00062C C7 00 18         [ 1]  316 	ld farptr,a 
      00062F CC 05 7A         [ 2]  317 	jp repl  
                                    318 
      000632 6E 6F 74 20 61 20 63   319 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    320 
                                    321 ;----------------------------
                                    322 ; display farptr address
                                    323 ;----------------------------
      000641                        324 print_farptr:
      000641 C6 00 1A         [ 1]  325 	ld a ,farptr+2 
      000644 C7 00 0E         [ 1]  326 	ld acc8,a 
      000647 CE 00 18         [ 2]  327 	ldw x,farptr 
      00064A CF 00 0C         [ 2]  328 	ldw acc24,x 
      00064D 5F               [ 1]  329 	clrw x 
      00064E A6 10            [ 1]  330 	ld a,#16 
      000650 CD 18 0B         [ 4]  331 	call prt_acc24
      000653 A6 20            [ 1]  332 	ld a,#SPACE 
      000655 CD 09 40         [ 4]  333 	call putc 
      000658 CD 09 40         [ 4]  334 	call putc 
      00065B 81               [ 4]  335 	ret
                                    336 
                                    337 ;------------------------------------
                                    338 ; get byte at address farptr[X]
                                    339 ; input:
                                    340 ;	 farptr   address to peek
                                    341 ;    X		  farptr index 	
                                    342 ; output:
                                    343 ;	 A 		  byte from memory  
                                    344 ;    x		  incremented by 1
                                    345 ;------------------------------------
      00065C                        346 fetchc: ; @C
      00065C 92 AF 00 18      [ 5]  347 	ldf a,([farptr],x)
      000660 5C               [ 1]  348 	incw x
      000661 81               [ 4]  349 	ret
                                    350 
                                    351 
                                    352 ;------------------------------------
                                    353 ; expect a number from command line 
                                    354 ; next argument
                                    355 ;  input:
                                    356 ;	  none
                                    357 ;  output:
                                    358 ;    acc24   int24_t 
                                    359 ;------------------------------------
      000662                        360 number:
      000662 CD 0F 17         [ 4]  361 	call get_token
      000665 A1 84            [ 1]  362 	cp a,#TK_INTGR
      000667 27 03            [ 1]  363 	jreq 1$
      000669 CC 16 9E         [ 2]  364 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00066C 81               [ 4]  365 1$:	ret
                                    366 
                                    367 
                                    368 ;---------------------
                                    369 ; display n bytes row 
                                    370 ; from memory.
                                    371 ; input:
                                    372 ;   A   bytes to print 
                                    373 ;	X   start address 
                                    374 ; output:
                                    375 ;   X   address after last shown  
                                    376 ;---------------------
                           000001   377 	CNT=1 
                           000002   378 	ADR=2 
                           000003   379 	VSIZE=3 
      00066D                        380 show_row:
      00066D 4D               [ 1]  381 	tnz a 
      00066E 26 01            [ 1]  382 	jrne 1$
      000670 81               [ 4]  383 	ret 
      000671                        384 1$:	
      000671 89               [ 2]  385 	pushw x  
      000672 88               [ 1]  386 	push a 
      000673 35 04 00 23      [ 1]  387 	mov tab_width,#4 
      000677 CD 17 F4         [ 4]  388 	call prt_i16 
      00067A A6 20            [ 1]  389 	ld a,#SPACE  
      00067C CD 09 40         [ 4]  390 	call putc
      00067F                        391 row_loop:
      00067F 1E 02            [ 2]  392 	ldw x,(ADR,sp)
      000681 F6               [ 1]  393 	ld a,(x)
      000682 5F               [ 1]  394 	clrw x 
      000683 97               [ 1]  395 	ld xl,a 
      000684 CD 17 F4         [ 4]  396 	call prt_i16 
      000687 1E 02            [ 2]  397 	ldw x,(ADR,sp)
      000689 5C               [ 1]  398 	incw x 
      00068A 1F 02            [ 2]  399 	ldw (ADR,sp),x 
      00068C 0A 01            [ 1]  400 	dec (CNT,sp)
      00068E 26 EF            [ 1]  401 	jrne row_loop
      000690                        402 	_drop VSIZE  		
      000690 5B 03            [ 2]    1     addw sp,#VSIZE 
      000692 35 04 00 23      [ 1]  403 	mov tab_width,#4
      000696 A6 0D            [ 1]  404 	ld a,#CR 
      000698 CD 09 40         [ 4]  405 	call putc 
      00069B 81               [ 4]  406 	ret 
                                    407 
                                    408 ;--------------------------
                                    409 ; print memory content 
                                    410 ; in hexadecimal format
                                    411 ;  input:
                                    412 ;    X    start address 
                                    413 ;    Y    count 
                                    414 ;--------------------------
                           000001   415 	BCNT=1
                           000003   416 	BASE=3
                           000004   417 	TABW=4
                           000004   418 	VSIZE=4   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00069C                        419 hex_dump:
      00069C 88               [ 1]  420 	push a 
      00069D                        421 	_vars VSIZE
      00069D 52 04            [ 2]    1     sub sp,#VSIZE 
      00069F C6 00 0A         [ 1]  422 	ld a,base
      0006A2 6B 03            [ 1]  423 	ld (BASE,sp),a 
      0006A4 35 10 00 0A      [ 1]  424 	mov base,#16
      0006A8 C6 00 23         [ 1]  425 	ld a,tab_width 
      0006AB 6B 04            [ 1]  426 	ld (TABW,sp),a
      0006AD A6 0D            [ 1]  427 	ld a,#CR 
      0006AF CD 09 40         [ 4]  428 	call putc 
      0006B2 17 01            [ 2]  429 1$: ldw (BCNT,sp),y
      0006B4 A6 10            [ 1]  430 	ld a,#16
      0006B6 90 A3 00 10      [ 2]  431 	cpw y,#16
      0006BA 2A 02            [ 1]  432 	jrpl 2$
      0006BC 90 9F            [ 1]  433 	ld a,yl
      0006BE                        434 2$: 	
      0006BE CD 06 6D         [ 4]  435 	call show_row 
      0006C1 16 01            [ 2]  436 	ldw y,(BCNT,sp) 
      0006C3 72 A2 00 10      [ 2]  437 	subw y,#16 
      0006C7 90 A3 00 01      [ 2]  438 	cpw y,#1
      0006CB 2A E5            [ 1]  439 	jrpl 1$
      0006CD 7B 03            [ 1]  440 	ld a,(BASE,sp)
      0006CF C7 00 0A         [ 1]  441 	ld base,a
      0006D2 7B 04            [ 1]  442 	ld a,(TABW,sp)
      0006D4 C7 00 23         [ 1]  443 	ld tab_width,a 
      0006D7                        444 	_drop VSIZE
      0006D7 5B 04            [ 2]    1     addw sp,#VSIZE 
      0006D9 84               [ 1]  445 	pop a 
      0006DA 81               [ 4]  446 	ret 
                                    447 
                                    448 .endif ; DEBUG 
                                    449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0006DB                         45 unlock_eeprom:
      0006DB 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0006E0 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0006E4 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0006E8 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0006EC 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0006F0 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006F5 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0006F6                         62 unlock_flash:
      0006F6 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006FB 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0006FF 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      000703 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      000707 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      00070B 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000710 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      000711                         76 row_erase:
      000711 88               [ 1]   77 	push a 
      000712 90 89            [ 2]   78 	pushw y 
      000714 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      000718 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      00071C 4F               [ 1]   81 	clr a 
      00071D 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00071F 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      000723 90 5C            [ 1]   84     incw y
      000725 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      000729 90 5C            [ 1]   86     incw y
      00072B 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      00072F 90 5C            [ 1]   88     incw y
      000731 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      000735 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00073A 90 85            [ 2]   91 	popw y 
      00073C 84               [ 1]   92 	pop a 
      00073D 81               [ 4]   93 	ret
      00073E                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      00073E                         97 move_erase_to_ram:
      00073E 89               [ 2]   98 	pushw x 
      00073F 90 89            [ 2]   99 	pushw y 
      000741 AE 07 3E         [ 2]  100 	ldw x,#row_erase_end 
      000744 1D 07 11         [ 2]  101 	subw x,#row_erase
      000747 CF 00 0D         [ 2]  102 	ldw acc16,x 
      00074A AE 16 68         [ 2]  103 	ldw x,#tib 
      00074D 90 AE 07 11      [ 2]  104 	ldw y,#row_erase 
      000751 CD 14 0E         [ 4]  105 	call move
      000754 90 85            [ 2]  106 	popw y
      000756 85               [ 2]  107 	popw x
      000757 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000758                        123 program_row:
      000758 88               [ 1]  124 	push a 
      000759 90 89            [ 2]  125 	pushw y 
      00075B 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      00075D 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000761 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000765 90 5F            [ 1]  130 	clrw y 
      000767 F6               [ 1]  131 1$:	ld a,(x)
      000768 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      00076C 5C               [ 1]  133 	incw x 
      00076D 90 5C            [ 1]  134 	incw y 
      00076F 0A 01            [ 1]  135 	dec (BCNT,sp)
      000771 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      000773 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000778                        139 	_drop 1 
      000778 5B 01            [ 2]    1     addw sp,#1 
      00077A 90 85            [ 2]  140 	popw y 
      00077C 84               [ 1]  141 	pop a 
      00077D 81               [ 4]  142 	ret 
      00077E                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      00077E                        149 move_prg_to_ram:
      00077E 89               [ 2]  150 	pushw x 
      00077F 90 89            [ 2]  151 	pushw y 
      000781 AE 07 7E         [ 2]  152 	ldw x,#program_row_end 
      000784 1D 07 58         [ 2]  153 	subw x,#program_row 
      000787 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      00078A AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      00078D 90 AE 07 58      [ 2]  156 	ldw y,#program_row ; source address 
      000791 CD 14 0E         [ 4]  157 	call move
      000794 90 85            [ 2]  158 	popw y 
      000796 85               [ 2]  159 	popw x  
      000797 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000798                        169 write_buffer:
      000798 89               [ 2]  170 	pushw x 
      000799 72 5D 00 18      [ 1]  171 	tnz farptr 
      00079D 26 0D            [ 1]  172 	jrne to_flash 
      00079F CE 00 19         [ 2]  173 	ldw x,farptr+1 
      0007A2 A3 35 80         [ 2]  174 	cpw x,#app_space  
      0007A5 24 05            [ 1]  175 	jruge to_flash 
      0007A7                        176 to_eeprom:
      0007A7 CD 06 DB         [ 4]  177 	call unlock_eeprom
      0007AA 20 03            [ 2]  178 	jra do_programming
      0007AC                        179 to_flash:
      0007AC CD 06 F6         [ 4]  180 	call unlock_flash
      0007AF                        181 do_programming:
      0007AF 85               [ 2]  182 	popw x 
      0007B0 CD 16 68         [ 4]  183 	call tib
      0007B3 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0007B7 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0007BB 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      0007BC                        197 block_erase:
      0007BC 89               [ 2]  198 	pushw x 
      0007BD C6 00 18         [ 1]  199 	ld a,farptr 
      0007C0 26 14            [ 1]  200 	jrne erase_flash
      0007C2 CE 00 19         [ 2]  201 	ldw x,farptr+1
      0007C5 A3 35 80         [ 2]  202 	cpw x,#app_space 
      0007C8 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      0007CA CD 06 DB         [ 4]  205 	call unlock_eeprom 
      0007CD CD 16 68         [ 4]  206 	call tib 
      0007D0 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0007D4 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0007D6                        210 erase_flash:
      0007D6 CD 06 F6         [ 4]  211 	call unlock_flash 
      0007D9 CD 16 68         [ 4]  212 	call tib 
      0007DC 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007E0                        214 erase_exit: 
      0007E0 85               [ 2]  215 	popw x 
      0007E1 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0007E2                        232 write_byte:
      0007E2 90 89            [ 2]  233 	pushw y
      0007E4                        234 	_vars VSIZE
      0007E4 52 02            [ 2]    1     sub sp,#VSIZE 
      0007E6 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0007E8 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0007EA 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0007EE 72 5D 00 18      [ 1]  240 	tnz farptr 
      0007F2 26 14            [ 1]  241 	jrne write_flash
      0007F4 90 A3 35 80      [ 2]  242     cpw y,#app_space 	 
      0007F8 24 0E            [ 1]  243     jruge write_flash
      0007FA 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0007FE 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      000800 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      000804 22 51            [ 1]  247 	jrugt write_exit
      000806 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      000808                        250 write_flash:
      000808 CD 06 F6         [ 4]  251 	call unlock_flash 
      00080B 9B               [ 1]  252 1$:	sim 
      00080C 7B 01            [ 1]  253 	ld a,(BTW,sp)
      00080E 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      000812 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000817 9A               [ 1]  256     rim 
      000818 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00081C 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      00081E                        260 write_eeprom:
      00081E CD 06 DB         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      000821 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      000825 2B 08            [ 1]  264 	jrmi 1$
      000827 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      00082B 2A 02            [ 1]  266 	jrpl 1$
      00082D 03 02            [ 1]  267 	cpl (OPT,sp)
      00082F                        268 1$: 
      00082F 0D 02            [ 1]  269     tnz (OPT,sp)
      000831 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      000833 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      000837 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00083B                        274 2$: 
      00083B 7B 01            [ 1]  275     ld a,(BTW,sp)
      00083D 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      000841 0D 02            [ 1]  277     tnz (OPT,sp)
      000843 27 08            [ 1]  278     jreq 3$
      000845 5C               [ 1]  279     incw x
      000846 7B 01            [ 1]  280     ld a,(BTW,sp)
      000848 43               [ 1]  281     cpl a
      000849 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      00084D 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000852 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000857                        285 write_exit:
      000857                        286 	_drop VSIZE 
      000857 5B 02            [ 2]    1     addw sp,#VSIZE 
      000859 90 85            [ 2]  287 	popw y
      00085B 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; the block must be erased before 
                                    293 ; using this routine.
                                    294 ; input:
                                    295 ;   Y        source address   
                                    296 ;   X        array index  destination  farptr[x]
                                    297 ;   BSIZE    block size bytes 
                                    298 ;   farptr   write address , byte* 
                                    299 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                    300 ;	X 		after last byte written 
                                    301 ;   Y 		after last byte read 
                                    302 ;  farptr   point after block
                                    303 ;---------------------------------------------
      00085C                        304 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      00085C                        305 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    306 	; local var 
                           000001   307 	XSAVE=1 
                           000002   308 	VSIZE=2 
      00085C                        309 write_block::
      00085C 88               [ 1]  310 	push a 
      00085D                        311 	_vars VSIZE
      00085D 52 02            [ 2]    1     sub sp,#VSIZE 
      00085F 1F 01            [ 2]  312 	ldw (XSAVE,sp),x 
      000861 1E 06            [ 2]  313 	ldw x,(BSIZE,sp) 
      000863 27 13            [ 1]  314 	jreq 9$
      000865 1E 01            [ 2]  315 1$:	ldw x,(XSAVE,sp)
      000867 90 F6            [ 1]  316 	ld a,(y)
      000869 CD 07 E2         [ 4]  317 	call write_byte 
      00086C 5C               [ 1]  318 	incw x 
      00086D 90 5C            [ 1]  319 	incw y 
      00086F 1F 01            [ 2]  320 	ldw (XSAVE,sp),x
      000871 1E 06            [ 2]  321 	ldw x,(BSIZE,sp)
      000873 5A               [ 2]  322 	decw x
      000874 1F 06            [ 2]  323 	ldw (BSIZE,sp),x 
      000876 26 ED            [ 1]  324 	jrne 1$
      000878                        325 9$:
      000878 1E 01            [ 2]  326 	ldw x,(XSAVE,sp)
      00087A CD 08 B2         [ 4]  327 	call incr_farptr
      00087D                        328 	_drop VSIZE
      00087D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00087F 84               [ 1]  329 	pop a 
      000880 81               [ 4]  330 	ret 
                                    331 
                                    332 
                                    333 ;------------------------------------
                                    334 ; write n bytes to flash | eeprom 
                                    335 ; if the number of bytes is 
                                    336 ; >=128 it is faster to 
                                    337 ; use write_block
                                    338 ; the bytes are written one by 
                                    339 ; one and auto erased if required. 
                                    340 ; input:
                                    341 ;    farptr    dest address 
                                    342 ;    X         src address 
                                    343 ;    A         count 
                                    344 ; output:
                                    345 ;    none   
                                    346 ;----------------------------------
      000881                        347 write_nbytes:
      000881 90 89            [ 2]  348 	pushw y
      000883 88               [ 1]  349 	push a 
      000884 90 93            [ 1]  350 	ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      000886 5F               [ 1]  351 	clrw x 
      000887                        352 1$:  
      000887 90 F6            [ 1]  353 	ld a,(y)
      000889 90 5C            [ 1]  354 	incw y
      00088B CD 07 E2         [ 4]  355 	call write_byte 
      00088E 5C               [ 1]  356 	incw x 
      00088F 0A 01            [ 1]  357 	dec (1,sp)  
      000891 26 F4            [ 1]  358 	jrne 1$ 
      000893 84               [ 1]  359 9$: pop a 
      000894 90 85            [ 2]  360 	popw y 
      000896 81               [ 4]  361 	ret 
                                    362 
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 ;;;  flash memory operations
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 
                                    367 ;--------------------------
                                    368 ; align farptr to BLOCK_SIZE 
                                    369 ;---------------------------
      000897                        370 row_align:
      000897 A6 7F            [ 1]  371 	ld a,#0x7f 
      000899 C4 00 1A         [ 1]  372 	and a,farptr+2 
      00089C 27 13            [ 1]  373 	jreq 1$ 
      00089E CE 00 19         [ 2]  374 	ldw x,farptr+1 
      0008A1 1C 00 80         [ 2]  375 	addw x,#BLOCK_SIZE 
      0008A4 24 04            [ 1]  376 	jrnc 0$
      0008A6 72 5C 00 18      [ 1]  377 	inc farptr 
      0008AA 9F               [ 1]  378 0$: ld a,xl 
      0008AB A4 80            [ 1]  379 	and a,#0x80
      0008AD 97               [ 1]  380 	ld xl,a
      0008AE CF 00 19         [ 2]  381 	ldw farptr+1,x  	
      0008B1 81               [ 4]  382 1$:	ret
                                    383 
                                    384 ;--------------------
                                    385 ; input:
                                    386 ;   X     increment 
                                    387 ; output:
                                    388 ;   farptr  incremented 
                                    389 ;---------------------
      0008B2                        390 incr_farptr:
      0008B2 72 BB 00 19      [ 2]  391 	addw x,farptr+1 
      0008B6 24 04            [ 1]  392 	jrnc 1$
      0008B8 72 5C 00 18      [ 1]  393 	inc farptr 
      0008BC CF 00 19         [ 2]  394 1$:	ldw farptr+1,x  
      0008BF 81               [ 4]  395 	ret 
                                    396 
                                    397 ;-----------------------------------
                                    398 ; scan block for non zero byte 
                                    399 ; block are 128 bytes 
                                    400 ; input:
                                    401 ;    farptr     address block  
                                    402 ; output:
                                    403 ;     A     0 cleared, other not cleared  
                                    404 ;-----------------------------------
      0008C0                        405 scan_block:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0008C0 5F               [ 1]  406 	clrw x 
      0008C1 92 AF 00 18      [ 5]  407 1$: ldf a,([farptr],x) 
      0008C5 26 06            [ 1]  408 	jrne 2$
      0008C7 5C               [ 1]  409 	incw x 
      0008C8 A3 00 80         [ 2]  410 	cpw x,#BLOCK_SIZE 
      0008CB 25 F4            [ 1]  411 	jrult 1$ 
      0008CD 81               [ 4]  412 2$:	ret 
                                    413 
                                    414 
                                    415 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      0008CE                         66 Uart1RxHandler: ; console receive char 
      0008CE 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      0008D3 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      0008D6 A1 03            [ 1]   69 	cp a,#CTRL_C 
      0008D8 26 06            [ 1]   70 	jrne 2$
      0008DA CD 09 40         [ 4]   71 	call putc 
      0008DD CC 00 57         [ 2]   72 	jp user_interrupted
      0008E0                         73 2$:
      0008E0 A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      0008E2 26 03            [ 1]   75 	jrne 3$
      0008E4 CC 00 C3         [ 2]   76 	jp cold_start 	
      0008E7 88               [ 1]   77 3$:	push a 
      0008E8 A6 26            [ 1]   78 	ld a,#rx1_queue 
      0008EA CB 00 2F         [ 1]   79 	add a,rx1_tail 
      0008ED 5F               [ 1]   80 	clrw x 
      0008EE 97               [ 1]   81 	ld xl,a 
      0008EF 84               [ 1]   82 	pop a 
      0008F0 F7               [ 1]   83 	ld (x),a 
      0008F1 C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      0008F4 4C               [ 1]   85 	inc a 
      0008F5 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0008F7 C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0008FA 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0008FB                         97 uart1_init:
      0008FB 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      0008FF 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      000903 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      000907 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      00090B                        103 uart1_set_baud: 
      00090B 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      00090C A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      00090E C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      000911 27 0A            [ 1]  109 	jreq 2$ 
      000913                        110 1$: ; 8 Mhz 	
      000913 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      000917 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      00091B 20 08            [ 2]  113 	jra 3$
      00091D                        114 2$: ; 16 Mhz 	
      00091D 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      000921 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      000925                        117 3$:
      000925 72 5F 52 31      [ 1]  118     clr UART1_DR
      000929 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      00092D 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      000931 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      000936 72 5F 00 2E      [ 1]  122     clr rx1_head 
      00093A 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      00093E 84               [ 1]  124 	pop a  
      00093F 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      000940                        133 putc:: ; console output always on UART1
      000940                        134 uart1_putc:: 
      000940 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      000945 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      000948 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      000949                        148 qgetc::
      000949                        149 uart1_qgetc::
      000949 C6 00 2E         [ 1]  150 	ld a,rx1_head 
      00094C C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      00094F 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      000950                        161 getc:: ;console input
      000950                        162 uart1_getc::
      000950 CD 09 49         [ 4]  163 	call uart1_qgetc
      000953 27 FB            [ 1]  164 	jreq uart1_getc 
      000955 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      000956 A6 26            [ 1]  167 	ld a,#rx1_queue
      000958 CB 00 2E         [ 1]  168 	add a,rx1_head 
      00095B 5F               [ 1]  169 	clrw x  
      00095C 97               [ 1]  170 	ld xl,a 
      00095D F6               [ 1]  171 	ld a,(x)
      00095E 88               [ 1]  172 	push a
      00095F C6 00 2E         [ 1]  173 	ld a,rx1_head 
      000962 4C               [ 1]  174 	inc a 
      000963 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000965 C7 00 2E         [ 1]  176 	ld rx1_head,a 
      000968 84               [ 1]  177 	pop a  
      000969 85               [ 2]  178 	popw x
      00096A 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      00096B 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000977                        207 get_escape:
      000977 CD 09 50         [ 4]  208     call getc 
      00097A A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      00097C 27 02            [ 1]  210     jreq 1$
      00097E 4F               [ 1]  211     clr a
      00097F 81               [ 4]  212     ret
      000980 CD 09 50         [ 4]  213 1$: call getc 
      000983 AE 09 6B         [ 2]  214     ldw x,#convert_table
      000986                        215 2$:
      000986 F1               [ 1]  216     cp a,(x)
      000987 27 08            [ 1]  217     jreq 4$
      000989 1C 00 02         [ 2]  218     addw x,#2
      00098C 7D               [ 1]  219     tnz (x)
      00098D 26 F7            [ 1]  220     jrne 2$
      00098F 4F               [ 1]  221     clr a
      000990 81               [ 4]  222     ret 
      000991 5C               [ 1]  223 4$: incw x 
      000992 F6               [ 1]  224     ld a,(x)
      000993 A1 84            [ 1]  225     cp a,#SUP
      000995 26 05            [ 1]  226     jrne 5$
      000997 88               [ 1]  227     push a 
      000998 CD 09 50         [ 4]  228     call getc
      00099B 84               [ 1]  229     pop a 
      00099C                        230 5$:
      00099C 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      00099D                        241 puts::
      00099D F6               [ 1]  242     ld a,(x)
      00099E 27 06            [ 1]  243 	jreq 1$
      0009A0 CD 09 40         [ 4]  244 	call putc 
      0009A3 5C               [ 1]  245 	incw x 
      0009A4 20 F7            [ 2]  246 	jra puts 
      0009A6 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      0009A7                        258 bksp:
      0009A7 A6 08            [ 1]  259 	ld a,#BS 
      0009A9 CD 09 40         [ 4]  260 	call putc 
      0009AC A6 20            [ 1]  261 	ld a,#SPACE 
      0009AE CD 09 40         [ 4]  262 	call putc 
      0009B1 A6 08            [ 1]  263 	ld a,#BS 
      0009B3 CD 09 40         [ 4]  264 	call putc 
      0009B6 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      0009B7                        274 delete_nchar:
      0009B7 88               [ 1]  275 	push a 
      0009B8 0D 01            [ 1]  276 0$:	tnz (1,sp)
      0009BA 27 07            [ 1]  277 	jreq 1$
      0009BC CD 09 A7         [ 4]  278 	call bksp 
      0009BF 0A 01            [ 1]  279 	dec (1,sp)
      0009C1 20 F5            [ 2]  280 	jra 0$
      0009C3 84               [ 1]  281 1$:	pop a 
      0009C4 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      0009C5                        290 send_escape:
      0009C5 A6 1B            [ 1]  291 	ld a,#ESC 
      0009C7 CD 09 40         [ 4]  292 	call putc 
      0009CA A6 5B            [ 1]  293 	ld a,#'[
      0009CC CD 09 40         [ 4]  294 	call putc 
      0009CF 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      0009D0                        311 send_parameter:
      0009D0 89               [ 2]  312 	pushw x 
      0009D1 5F               [ 1]  313 	clrw x 
      0009D2 97               [ 1]  314 	ld xl,a 
      0009D3 A6 0A            [ 1]  315 	ld a,#10 
      0009D5 62               [ 2]  316 	div x,a 
      0009D6 95               [ 1]  317 	ld xh,a 
      0009D7 9F               [ 1]  318 	ld a,xl
      0009D8 4D               [ 1]  319     tnz a 
      0009D9 27 0B            [ 1]  320     jreq 2$
      0009DB A1 09            [ 1]  321 	cp a,#9 
      0009DD 23 02            [ 2]  322 	jrule 1$
      0009DF A6 09            [ 1]  323 	ld a,#9
      0009E1                        324 1$:
      0009E1 AB 30            [ 1]  325 	add a,#'0 
      0009E3 CD 09 40         [ 4]  326 	call putc
      0009E6 9E               [ 1]  327 2$:	ld a,xh 
      0009E7 AB 30            [ 1]  328 	add a,#'0
      0009E9 CD 09 40         [ 4]  329 	call putc 
      0009EC 85               [ 2]  330 	popw x 
      0009ED 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      0009EE                        344 move_left:
      0009EE 88               [ 1]  345 	push a 
      0009EF CD 09 C5         [ 4]  346 	call send_escape
      0009F2 84               [ 1]  347     pop a
      0009F3 CD 09 D0         [ 4]  348 	call send_parameter 
      0009F6 A6 44            [ 1]  349 	ld a,#'D 
      0009F8 CD 09 40         [ 4]  350 	call putc 
      0009FB 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0009FC                        362 move_right:
      0009FC 88               [ 1]  363 	push a 
      0009FD CD 09 C5         [ 4]  364 	call send_escape
      000A00 84               [ 1]  365     pop a
      000A01 CD 09 D0         [ 4]  366 	call send_parameter 
      000A04 A6 43            [ 1]  367 	ld a,#'C 
      000A06 CD 09 40         [ 4]  368 	call putc 
      000A09 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      000A0A                        379 spaces::
      000A0A A6 20            [ 1]  380 	ld a,#SPACE 
      000A0C 5D               [ 2]  381 1$:	tnzw x
      000A0D 27 06            [ 1]  382 	jreq 9$
      000A0F CD 09 40         [ 4]  383 	call putc 
      000A12 5A               [ 2]  384 	decw x
      000A13 20 F7            [ 2]  385 	jra 1$
      000A15                        386 9$: 
      000A15 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   tib     updated 
                                    399 ;   Y       updated  
                                    400 ;-------------------------
                           000001   401 	IPOS=1
                           000002   402 	KCHAR=2 
                           000003   403     LLEN=3 
                           000003   404 	VSIZE=3 
      000A16                        405 insert_char: 
      000A16                        406 	_vars VSIZE 
      000A16 52 03            [ 2]    1     sub sp,#VSIZE 
      000A18 6B 02            [ 1]  407     ld (KCHAR,sp),a 
      000A1A 9E               [ 1]  408     ld a,xh 
      000A1B 6B 01            [ 1]  409 	ld (IPOS,sp),a
      000A1D 9F               [ 1]  410     ld a,xl 
      000A1E 6B 03            [ 1]  411     ld (LLEN,sp),a  
      000A20 93               [ 1]  412     ldw x,y
      000A21 5C               [ 1]  413     incw x 
      000A22 7B 03            [ 1]  414     ld a,(LLEN,sp)
      000A24 10 01            [ 1]  415     sub a,(IPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000A26 4C               [ 1]  416     inc a 
      000A27 C7 00 0E         [ 1]  417     ld acc8,a 
      000A2A 72 5F 00 0D      [ 1]  418     clr acc16
      000A2E CD 14 0E         [ 4]  419     call move
      000A31 90 AE 16 68      [ 2]  420     ldw y,#tib 
      000A35 7B 01            [ 1]  421     ld a,(IPOS,sp)
      000A37 C7 00 0E         [ 1]  422     ld acc8,a 
      000A3A 72 B9 00 0D      [ 2]  423     addw y,acc16 
      000A3E 7B 02            [ 1]  424     ld a,(KCHAR,sp)
      000A40 90 F7            [ 1]  425     ld (y),a
      000A42 90 5C            [ 1]  426     incw y  
      000A44 7B 01            [ 1]  427     ld a,(IPOS,sp)
      000A46 CD 09 EE         [ 4]  428     call move_left
      000A49 AE 16 68         [ 2]  429     ldw x,#tib 
      000A4C CD 09 9D         [ 4]  430     call puts 
      000A4F 7B 03            [ 1]  431     ld a,(LLEN,sp)
      000A51 10 01            [ 1]  432     sub a,(IPOS,sp) 
      000A53 CD 09 EE         [ 4]  433     call move_left 
      000A56                        434 	_drop VSIZE 
      000A56 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A58 81               [ 4]  435 	ret 
                                    436 
                                    437 
                                    438 ;--------------------------
                                    439 ; delete character under cursor
                                    440 ; input:
                                    441 ;   A       line length   
                                    442 ;   xl      delete position
                                    443 ;   Y       line pointer 
                                    444 ;-------------------------
                           000001   445 	CPOS=1
                           000002   446 	LLEN=2
                           000002   447 	VSIZE=2
      000A59                        448 delete_under:
      000A59                        449 	_vars VSIZE 
      000A59 52 02            [ 2]    1     sub sp,#VSIZE 
      000A5B 6B 02            [ 1]  450     ld (LLEN,sp),a 
      000A5D 9F               [ 1]  451     ld a,xl 
      000A5E 6B 01            [ 1]  452     ld (CPOS,sp),a 
      000A60 93               [ 1]  453     ldw x,y ; move destination
      000A61 90 5C            [ 1]  454     incw y  ; move source 
      000A63 7B 02            [ 1]  455     ld a,(LLEN,sp)
      000A65 10 01            [ 1]  456     sub a,(CPOS,sp)
      000A67 4C               [ 1]  457     inc a ; move including zero at end.
      000A68 C7 00 0E         [ 1]  458     ld acc8,a 
      000A6B 72 5F 00 0D      [ 1]  459     clr acc16 
      000A6F CD 14 0E         [ 4]  460 	call move 
      000A72 90 AE 16 68      [ 2]  461     ldw y,#tib 
      000A76 7B 01            [ 1]  462     ld a,(CPOS,sp)
      000A78 C7 00 0E         [ 1]  463     ld acc8,a 
      000A7B 72 B9 00 0D      [ 2]  464     addw y,acc16 
      000A7F 93               [ 1]  465     ldw x,y 
      000A80 CD 09 9D         [ 4]  466     call puts 
      000A83 A6 20            [ 1]  467     ld a,#SPACE  
      000A85 CD 09 40         [ 4]  468     call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000A88 7B 02            [ 1]  469     ld a,(LLEN,sp)
      000A8A 10 01            [ 1]  470     sub a,(CPOS,sp)
      000A8C CD 09 EE         [ 4]  471     call move_left 
      000A8F 0A 02            [ 1]  472     dec (LLEN,sp)
      000A91                        473 	_drop VSIZE 
      000A91 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A93 81               [ 4]  474 	ret 
                                    475 
                                    476 ;-----------------------------
                                    477 ; send ANSI sequence to delete
                                    478 ; whole line. Cursor position
                                    479 ; is not updated.
                                    480 ; ANSI: ESC[2K
                                    481 ; input:
                                    482 ;   none
                                    483 ; output:
                                    484 ;   none 
                                    485 ;-----------------------------
      000A94                        486 delete_line:
      000A94 CD 09 C5         [ 4]  487     call send_escape
      000A97 A6 32            [ 1]  488 	ld a,#'2
      000A99 CD 09 40         [ 4]  489 	call putc 
      000A9C A6 4B            [ 1]  490 	ld a,#'K 
      000A9E CD 09 40         [ 4]  491 	call putc 
      000AA1 81               [ 4]  492 	ret 
                                    493 
                                    494 
                                    495 
                                    496 ;------------------------------------
                                    497 ; read a line of text from terminal
                                    498 ;  control keys: 
                                    499 ;    BS   efface caractère à gauche 
                                    500 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    501 ;    CTRL_R  edit previous line.
                                    502 ;    CTRL_D  delete line  
                                    503 ;    HOME  go to start of line  
                                    504 ;    KEY_END  go to end of line 
                                    505 ;    ARROW_LEFT  move cursor left 
                                    506 ;    ARROW_RIGHT  move cursor right 
                                    507 ;    CTRL_O  toggle between insert/overwrite
                                    508 ; input:
                                    509 ;	none
                                    510 ; local variable on stack:
                                    511 ;	LL  line length
                                    512 ;   RXCHAR last received character 
                                    513 ; output:
                                    514 ;   text in tib  buffer
                                    515 ;   count  line length 
                                    516 ;------------------------------------
                                    517 	; local variables
                           000001   518 	LL_HB=1  ; line length high byte 
                           000001   519 	RXCHAR = 1 ; last char received
                           000002   520 	LL = 2  ; accepted line length
                           000003   521 	CPOS=3  ; cursor position 
                           000004   522 	OVRWR=4 ; overwrite flag 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                           000004   523 	VSIZE=4 
      000AA2                        524 readln::
      000AA2 90 89            [ 2]  525 	pushw y 
      000AA4                        526 	_vars VSIZE 
      000AA4 52 04            [ 2]    1     sub sp,#VSIZE 
      000AA6 5F               [ 1]  527 	clrw x 
      000AA7 1F 02            [ 2]  528 	ldw (LL,sp),x 
      000AA9 1F 03            [ 2]  529 	ldw (CPOS,sp),x 
      000AAB 03 04            [ 1]  530 	cpl (OVRWR,sp) ; default to overwrite mode 
      000AAD 90 AE 16 68      [ 2]  531  	ldw y,#tib ; terminal input buffer
      000AB1                        532 readln_loop:
      000AB1 CD 09 50         [ 4]  533 	call getc
      000AB4 6B 01            [ 1]  534 	ld (RXCHAR,sp),a
      000AB6 A1 1B            [ 1]  535     cp a,#ESC 
      000AB8 26 05            [ 1]  536     jrne 0$
      000ABA CD 09 77         [ 4]  537     call get_escape 
      000ABD 6B 01            [ 1]  538     ld (RXCHAR,sp),a 
      000ABF A1 0D            [ 1]  539 0$:	cp a,#CR
      000AC1 26 03            [ 1]  540 	jrne 1$
      000AC3 CC 0C 3E         [ 2]  541 	jp readln_quit
      000AC6 A1 0A            [ 1]  542 1$:	cp a,#LF 
      000AC8 26 03            [ 1]  543 	jrne 2$ 
      000ACA CC 0C 3E         [ 2]  544 	jp readln_quit
      000ACD                        545 2$:
      000ACD A1 08            [ 1]  546 	cp a,#BS
      000ACF 26 12            [ 1]  547 	jrne 3$
                                    548 ; delete left 
      000AD1 0D 03            [ 1]  549     tnz (CPOS,sp)
      000AD3 27 DC            [ 1]  550     jreq readln_loop 
      000AD5 A6 01            [ 1]  551     ld a,#1 
      000AD7 CD 09 EE         [ 4]  552     call move_left
      000ADA 0A 03            [ 1]  553     dec (CPOS,sp)
      000ADC 90 5A            [ 2]  554     decw y 
      000ADE 7B 03            [ 1]  555     ld a,(CPOS,sp) 
      000AE0 CC 0B EA         [ 2]  556     jp 12$
      000AE3                        557 3$:
      000AE3 A1 04            [ 1]  558 	cp a,#CTRL_D
      000AE5 26 1A            [ 1]  559 	jrne 4$
                                    560 ;delete line 
      000AE7 CD 0A 94         [ 4]  561 	call delete_line 
      000AEA 7B 03            [ 1]  562     ld a,(CPOS,sp)
      000AEC 4C               [ 1]  563     inc a 
      000AED CD 09 EE         [ 4]  564     call move_left 
      000AF0 A6 3E            [ 1]  565 	ld a,#'> 
      000AF2 CD 09 40         [ 4]  566 	call putc 
      000AF5 90 AE 16 68      [ 2]  567 	ldw y,#tib
      000AF9 90 7F            [ 1]  568 	clr (y)
      000AFB 0F 02            [ 1]  569 	clr (LL,sp)
      000AFD 0F 03            [ 1]  570 	clr (CPOS,sp)
      000AFF 20 B0            [ 2]  571 	jra readln_loop
      000B01                        572 4$:
      000B01 A1 12            [ 1]  573 	cp a,#CTRL_R 
      000B03 26 1E            [ 1]  574 	jrne 5$
                                    575 ;repeat line 
      000B05 0D 02            [ 1]  576 	tnz (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000B07 26 A8            [ 1]  577 	jrne readln_loop
      000B09 90 AE 16 68      [ 2]  578 	ldw y,#tib 
      000B0D 93               [ 1]  579 	ldw x,y
      000B0E CD 13 E2         [ 4]  580 	call strlen
      000B11 4D               [ 1]  581 	tnz a  
      000B12 27 9D            [ 1]  582 	jreq readln_loop
      000B14 6B 02            [ 1]  583 	ld (LL,sp),a 
      000B16 6B 03            [ 1]  584     ld (CPOS,sp),a
      000B18 93               [ 1]  585 	ldw x,y  
      000B19 CD 09 9D         [ 4]  586 	call puts
      000B1C 0F 01            [ 1]  587 	clr (LL_HB,sp)
      000B1E 72 F9 01         [ 2]  588 	addw y,(LL_HB,sp)
      000B21 20 8E            [ 2]  589 	jra readln_loop 
      000B23                        590 5$:
      000B23 A1 05            [ 1]  591 	cp a,#CTRL_E 
      000B25 26 41            [ 1]  592 	jrne 6$
                                    593 ;edit line number 
      000B27 AE 16 68         [ 2]  594 	ldw x,#tib 
      000B2A CD 18 96         [ 4]  595 	call atoi24
      000B2D CE 00 0D         [ 2]  596 	ldw x,acc16
      000B30 CD 0C 7A         [ 4]  597 	call search_lineno
      000B33 5D               [ 2]  598 	tnzw x 
      000B34 26 03            [ 1]  599 	jrne 51$
                                    600 ;	clr (LL,sp)
                                    601 ;	ldw y,#tib
                                    602 ;   clr (y) 	
      000B36 CC 0C 3E         [ 2]  603 	jp readln_quit  
      000B39                        604 51$:
      000B39 CF 00 04         [ 2]  605 	ldw basicptr,x
      000B3C E6 02            [ 1]  606 	ld a,(2,x)
      000B3E C7 00 03         [ 1]  607 	ld count,a 
      000B41 90 AE 16 68      [ 2]  608 	ldw y,#tib 
      000B45 CD 11 F8         [ 4]  609 	call decompile 
      000B48 0F 01            [ 1]  610 	clr (LL_HB,sp)
      000B4A A6 0D            [ 1]  611 	ld a,#CR 
      000B4C CD 09 40         [ 4]  612 	call putc 
      000B4F A6 3E            [ 1]  613 	ld a,#'>
      000B51 CD 09 40         [ 4]  614 	call putc
      000B54 AE 16 68         [ 2]  615     ldw x,#tib  
      000B57 CD 13 E2         [ 4]  616 	call strlen 
      000B5A 6B 02            [ 1]  617 	ld (LL,sp),a 
      000B5C CD 09 9D         [ 4]  618 	call puts 
      000B5F 90 93            [ 1]  619 	ldw y,x
      000B61 7B 02            [ 1]  620     ld a,(LL,sp)
      000B63 6B 03            [ 1]  621     ld (CPOS,sp),a  
      000B65 CC 0A B1         [ 2]  622 	jp readln_loop
      000B68                        623 6$:
      000B68 A1 81            [ 1]  624 	cp a,#ARROW_RIGHT
      000B6A 26 15            [ 1]  625    	jrne 7$ 
                                    626 ; right arrow
      000B6C 7B 03            [ 1]  627 	ld a,(CPOS,sp)
      000B6E 11 02            [ 1]  628     cp a,(LL,sp)
      000B70 2B 03            [ 1]  629     jrmi 61$
      000B72 CC 0A B1         [ 2]  630     jp readln_loop 
      000B75                        631 61$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000B75 A6 01            [ 1]  632     ld a,#1 
      000B77 CD 09 FC         [ 4]  633 	call move_right 
      000B7A 0C 03            [ 1]  634 	inc (CPOS,sp)
      000B7C 90 5C            [ 1]  635     incw y 
      000B7E CC 0A B1         [ 2]  636     jp readln_loop 
      000B81 A1 80            [ 1]  637 7$: cp a,#ARROW_LEFT  
      000B83 26 13            [ 1]  638 	jrne 8$
                                    639 ; left arrow 
      000B85 0D 03            [ 1]  640 	tnz (CPOS,sp)
      000B87 26 03            [ 1]  641 	jrne 71$
      000B89 CC 0A B1         [ 2]  642 	jp readln_loop
      000B8C                        643 71$:
      000B8C A6 01            [ 1]  644     ld a,#1 
      000B8E CD 09 EE         [ 4]  645 	call move_left 
      000B91 0A 03            [ 1]  646 	dec (CPOS,sp)
      000B93 90 5A            [ 2]  647     decw y 
      000B95 CC 0A B1         [ 2]  648 	jp readln_loop 
      000B98 A1 82            [ 1]  649 8$: cp a,#HOME  
      000B9A 26 0E            [ 1]  650 	jrne 9$
                                    651 ; HOME 
      000B9C 7B 03            [ 1]  652     ld a,(CPOS,sp)
      000B9E CD 09 EE         [ 4]  653     call move_left 
      000BA1 0F 03            [ 1]  654 	clr (CPOS,sp)
      000BA3 90 AE 16 68      [ 2]  655     ldw y,#tib 
      000BA7 CC 0A B1         [ 2]  656 	jp readln_loop  
      000BAA A1 83            [ 1]  657 9$: cp a,#KEY_END  
      000BAC 26 26            [ 1]  658 	jrne 10$
                                    659 ; KEY_END 
      000BAE 7B 03            [ 1]  660 	ld a,(CPOS,sp)
      000BB0 11 02            [ 1]  661 	cp a,(LL,sp)
      000BB2 26 03            [ 1]  662 	jrne 91$
      000BB4 CC 0A B1         [ 2]  663 	jp readln_loop 
      000BB7                        664 91$:
      000BB7 7B 02            [ 1]  665 	ld a,(LL,sp)
      000BB9 10 03            [ 1]  666 	sub a,(CPOS,sp)
      000BBB CD 09 FC         [ 4]  667 	call move_right 
      000BBE 7B 02            [ 1]  668 	ld a,(LL,sp)
      000BC0 6B 03            [ 1]  669 	ld (CPOS,sp),a
      000BC2 90 AE 16 68      [ 2]  670     ldw y,#tib
      000BC6 72 5F 00 0D      [ 1]  671     clr acc16 
      000BCA C7 00 0E         [ 1]  672     ld acc8,a 
      000BCD 72 B9 00 0D      [ 2]  673     addw y,acc16  
      000BD1 CC 0A B1         [ 2]  674 	jp readln_loop 
      000BD4 A1 0F            [ 1]  675 10$: cp a,#CTRL_O
      000BD6 26 08            [ 1]  676 	jrne 11$ 
                                    677 ; toggle between insert/overwrite
      000BD8 03 04            [ 1]  678 	cpl (OVRWR,sp)
      000BDA CD 25 7B         [ 4]  679 	call beep_1khz
      000BDD CC 0A B1         [ 2]  680 	jp readln_loop 
      000BE0 A1 84            [ 1]  681 11$: cp a,#SUP 
      000BE2 26 11            [ 1]  682     jrne final_test 
                                    683 ; del character under cursor 
      000BE4 7B 03            [ 1]  684     ld a,(CPOS,sp)
      000BE6 11 02            [ 1]  685     cp a,(LL,sp)
      000BE8 2A 08            [ 1]  686     jrpl 13$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000BEA                        687 12$:
      000BEA 97               [ 1]  688     ld xl,a    ; cursor position 
      000BEB 7B 02            [ 1]  689     ld a,(LL,sp)  ; line length
      000BED CD 0A 59         [ 4]  690     call delete_under
      000BF0 0A 02            [ 1]  691     dec (LLEN,sp)
      000BF2                        692 13$:
      000BF2 CC 0A B1         [ 2]  693     jp readln_loop 
      000BF5                        694 final_test:
      000BF5 A1 20            [ 1]  695 	cp a,#SPACE
      000BF7 2A 03            [ 1]  696 	jrpl accept_char
      000BF9 CC 0A B1         [ 2]  697 	jp readln_loop
      000BFC                        698 accept_char:
      000BFC A6 4F            [ 1]  699 	ld a,#TIB_SIZE-1
      000BFE 11 02            [ 1]  700 	cp a, (LL,sp)
      000C00 2A 03            [ 1]  701 	jrpl 1$
      000C02 CC 0A B1         [ 2]  702 	jp readln_loop
      000C05 0D 04            [ 1]  703 1$:	tnz (OVRWR,sp)
      000C07 26 18            [ 1]  704 	jrne overwrite
                                    705 ; insert mode 
      000C09 7B 03            [ 1]  706     ld a,(CPOS,sp)
      000C0B 11 02            [ 1]  707     cp a,(LL,sp)
      000C0D 27 12            [ 1]  708     jreq overwrite
      000C0F 7B 02            [ 1]  709     ld a,(LL,sp)
      000C11 97               [ 1]  710     ld xl,a 
      000C12 7B 03            [ 1]  711     ld a,(CPOS,sp)
      000C14 95               [ 1]  712     ld xh,a
      000C15 7B 01            [ 1]  713     ld a,(RXCHAR,sp)
      000C17 CD 0A 16         [ 4]  714     call insert_char
      000C1A 0C 02            [ 1]  715     inc (LLEN,sp)
      000C1C 0C 03            [ 1]  716     inc (CPOS,sp)	
      000C1E CC 0A B1         [ 2]  717     jp readln_loop 
      000C21                        718 overwrite:
      000C21 7B 01            [ 1]  719 	ld a,(RXCHAR,sp)
      000C23 90 F7            [ 1]  720 	ld (y),a
      000C25 90 5C            [ 1]  721     incw y
      000C27 CD 09 40         [ 4]  722     call putc 
      000C2A 7B 03            [ 1]  723 	ld a,(CPOS,sp)
      000C2C 11 02            [ 1]  724 	cp a,(LL,sp)
      000C2E 2B 09            [ 1]  725 	jrmi 1$
      000C30 90 7F            [ 1]  726 	clr (y)
      000C32 0C 02            [ 1]  727 	inc (LL,sp)
      000C34 0C 03            [ 1]  728     inc (CPOS,sp)
      000C36 CC 0A B1         [ 2]  729 	jp readln_loop 
      000C39                        730 1$:	
      000C39 0C 03            [ 1]  731 	inc (CPOS,sp)
      000C3B CC 0A B1         [ 2]  732 	jp readln_loop 
      000C3E                        733 readln_quit:
      000C3E 90 AE 16 68      [ 2]  734 	ldw y,#tib
      000C42 0F 01            [ 1]  735     clr (LL_HB,sp) 
      000C44 72 F9 01         [ 2]  736     addw y,(LL_HB,sp)
      000C47 90 7F            [ 1]  737     clr (y)
      000C49 7B 02            [ 1]  738 	ld a,(LL,sp)
      000C4B C7 00 03         [ 1]  739 	ld count,a 
      000C4E A6 0D            [ 1]  740 	ld a,#CR
      000C50 CD 09 40         [ 4]  741 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      000C53                        742 	_drop VSIZE 
      000C53 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C55 90 85            [ 2]  743 	popw y 
      000C57 81               [ 4]  744 	ret
                                    745 
                                    746 ;------------------------------
                                    747 ; print byte  in hexadecimal 
                                    748 ; on console
                                    749 ; input:
                                    750 ;    A		byte to print
                                    751 ;------------------------------
      000C58                        752 print_hex::
      000C58 88               [ 1]  753 	push a 
      000C59 4E               [ 1]  754 	swap a 
      000C5A CD 0C 6F         [ 4]  755 	call to_hex_char 
      000C5D CD 09 40         [ 4]  756 	call putc 
      000C60 7B 01            [ 1]  757     ld a,(1,sp) 
      000C62 CD 0C 6F         [ 4]  758 	call to_hex_char
      000C65 CD 09 40         [ 4]  759 	call putc
      000C68 A6 20            [ 1]  760 	ld a,#SPACE 
      000C6A CD 09 40         [ 4]  761 	call putc 
      000C6D 84               [ 1]  762 	pop a 
      000C6E 81               [ 4]  763 	ret 
                                    764 
                                    765 ;----------------------------------
                                    766 ; convert to hexadecimal digit 
                                    767 ; input:
                                    768 ;   A       digit to convert 
                                    769 ; output:
                                    770 ;   A       hexdecimal character 
                                    771 ;----------------------------------
      000C6F                        772 to_hex_char::
      000C6F A4 0F            [ 1]  773 	and a,#15 
      000C71 A1 09            [ 1]  774 	cp a,#9 
      000C73 23 02            [ 2]  775 	jrule 1$ 
      000C75 AB 07            [ 1]  776 	add a,#7
      000C77 AB 30            [ 1]  777 1$: add a,#'0 
      000C79 81               [ 4]  778 	ret 
                                    779 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C7A                         51 search_lineno::
      000C7A                         52 	_vars VSIZE
      000C7A 52 02            [ 2]    1     sub sp,#VSIZE 
      000C7C 0F 01            [ 1]   53 	clr (LL,sp)
      000C7E 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C82 4D               [ 1]   55 	tnz a 
      000C83 27 04            [ 1]   56 	jreq search_ln_loop
      000C85 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C89                         58 search_ln_loop:
      000C89 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C8D 2A 10            [ 1]   60 	jrpl 8$
      000C8F 90 F3            [ 1]   61 	cpw x,(y)
      000C91 27 0E            [ 1]   62 	jreq 9$
      000C93 2B 0A            [ 1]   63 	jrmi 8$ 
      000C95 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C98 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C9A 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C9D 20 EA            [ 2]   67 	jra search_ln_loop 
      000C9F                         68 8$: 
      000C9F 5F               [ 1]   69 	clrw x 	
      000CA0 51               [ 1]   70 	exgw x,y 
      000CA1                         71 9$: _drop VSIZE
      000CA1 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CA3 51               [ 1]   72 	exgw x,y   
      000CA4 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000CA5                         83 del_line: 
      000CA5                         84 	_vars VSIZE 
      000CA5 52 04            [ 2]    1     sub sp,#VSIZE 
      000CA7 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000CA9 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000CAB 0F 01            [ 1]   87 	clr (LLEN,sp)
      000CAD 90 93            [ 1]   88 	ldw y,x  
      000CAF 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000CB2 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000CB4 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000CB8 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000CBB 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000CBF 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000CC1 CD 14 0E         [ 4]   95 	call move
      000CC4 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000CC8 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000CCB 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000CCF                         99 	_drop VSIZE     
      000CCF 5B 04            [ 2]    1     addw sp,#VSIZE 
      000CD1 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000CD2                        115 create_gap:
      000CD2                        116 	_vars VSIZE
      000CD2 52 06            [ 2]    1     sub sp,#VSIZE 
      000CD4 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000CD6 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000CD8 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000CDC 90 93            [ 1]  120 	ldw y,x ; SRC
      000CDE 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000CE2 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000CE4 CE 00 1D         [ 2]  124 	ldw x,txtend 
      000CE7 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000CEA CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000CED 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000CEF CD 14 0E         [ 4]  128 	call move
      000CF2 CE 00 1D         [ 2]  129 	ldw x,txtend
      000CF5 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000CF8 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      000CFB                        132 9$:	_drop VSIZE 
      000CFB 5B 06            [ 2]    1     addw sp,#VSIZE 
      000CFD 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000CFE                        150 insert_line:
      000CFE                        151 	_vars VSIZE 
      000CFE 52 08            [ 2]    1     sub sp,#VSIZE 
      000D00 CE 00 1D         [ 2]  152 	ldw x,txtend  
      000D03 C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000D06 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000D08 AE 00 02         [ 2]  156 	ldw x,#2 
      000D0B 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000D0F A1 03            [ 1]  158 	cp a,#3
      000D11 27 5A            [ 1]  159 	jreq insert_ln_exit
      000D13 5F               [ 1]  160 	clrw x 
      000D14 97               [ 1]  161 	ld xl,a
      000D15 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000D17 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000D1A 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000D1C CE 00 1D         [ 2]  165 	ldw x,txtend 
      000D1F 20 38            [ 2]  166 	jra 4$
      000D21 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000D25 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000D27 AE 00 02         [ 2]  170 	ldw x,#2 
      000D2A 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000D2E 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000D2F 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000D31 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000D33 4F               [ 1]  177 	clr a 
      000D34 CD 0C 7A         [ 4]  178 	call search_lineno 
      000D37 5D               [ 2]  179 	tnzw x 
      000D38 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000D3A 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000D3C 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000D3E 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000D40 CD 0C A5         [ 4]  188 	call del_line
      000D43                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000D43 A6 03            [ 1]  192 	ld a,#3
      000D45 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000D47 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000D49 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000D4B C3 00 1D         [ 2]  198 	cpw x,txtend 
      000D4E 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000D50 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000D52 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000D54 CD 0C D2         [ 4]  204 	call create_gap
      000D57 20 06            [ 2]  205 	jra 5$
      000D59                        206 4$: 
      000D59 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000D5C CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000D5F 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000D61 CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D64 90 AE 16 B8      [ 2]  212 	ldw y,#pad ;SRC 
      000D68 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D6A CD 14 0E         [ 4]  214 	call move 
      000D6D                        215 insert_ln_exit:	
      000D6D                        216 	_drop VSIZE
      000D6D 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D6F 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D70                        233 parse_quote: 
      000D70                        234 	_vars VSIZE 
      000D70 52 02            [ 2]    1     sub sp,#VSIZE 
      000D72 4F               [ 1]  235 	clr a
      000D73 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D75                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000D75 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D78 27 24            [ 1]  239 	jreq 6$
      000D7A 72 5C 00 01      [ 1]  240 	inc in 
      000D7E 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D80 A6 5C            [ 1]  242 	ld a,#'\
      000D82 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D84 26 0A            [ 1]  244 	jrne 3$
      000D86 0F 01            [ 1]  245 	clr (PREV,sp)
      000D88 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D8A AD 1C            [ 4]  247 	callr convert_escape
      000D8C F7               [ 1]  248 	ld (x),a 
      000D8D 5C               [ 1]  249 	incw x 
      000D8E 20 E5            [ 2]  250 	jra 2$
      000D90                        251 3$:
      000D90 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000D92 A1 5C            [ 1]  253 	cp a,#'\'
      000D94 27 DD            [ 1]  254 	jreq 1$
      000D96 A1 22            [ 1]  255 	cp a,#'"
      000D98 27 04            [ 1]  256 	jreq 6$ 
      000D9A F7               [ 1]  257 	ld (x),a 
      000D9B 5C               [ 1]  258 	incw x 
      000D9C 20 D7            [ 2]  259 	jra 2$
      000D9E                        260 6$:
      000D9E 7F               [ 1]  261 	clr (x)
      000D9F 5C               [ 1]  262 	incw x 
      000DA0 90 93            [ 1]  263 	ldw y,x 
      000DA2 5F               [ 1]  264 	clrw x 
      000DA3 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000DA5                        266 	_drop VSIZE
      000DA5 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DA7 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000DA8                        278 convert_escape:
      000DA8 89               [ 2]  279 	pushw x 
      000DA9 AE 0D BD         [ 2]  280 	ldw x,#escaped 
      000DAC F1               [ 1]  281 1$:	cp a,(x)
      000DAD 27 06            [ 1]  282 	jreq 2$
      000DAF 7D               [ 1]  283 	tnz (x)
      000DB0 27 09            [ 1]  284 	jreq 3$
      000DB2 5C               [ 1]  285 	incw x 
      000DB3 20 F7            [ 2]  286 	jra 1$
      000DB5 1D 0D BD         [ 2]  287 2$: subw x,#escaped 
      000DB8 9F               [ 1]  288 	ld a,xl 
      000DB9 AB 07            [ 1]  289 	add a,#7
      000DBB 85               [ 2]  290 3$:	popw x 
      000DBC 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    292 
      000DBD 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000DC5                        310 parse_integer: ; { -- n }
      000DC5 89               [ 2]  311 	pushw x 	
      000DC6 4B 00            [ 1]  312 	push #0 ; TCHAR
      000DC8 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000DCA A1 24            [ 1]  314 	cp a,#'$
      000DCC 26 04            [ 1]  315 	jrne 2$ 
      000DCE                        316     _drop #1
      000DCE 5B 01            [ 2]    1     addw sp,##1 
      000DD0 4B 10            [ 1]  317 	push #16  ; BASE=16
      000DD2 F7               [ 1]  318 2$:	ld (x),a 
      000DD3 5C               [ 1]  319 	incw x 
      000DD4 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000DD7 72 5C 00 01      [ 1]  321 	inc in 
      000DDB CD 18 8A         [ 4]  322 	call to_upper 
      000DDE 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000DE0 CD 0E 62         [ 4]  324 	call is_digit 
      000DE3 25 ED            [ 1]  325 	jrc 2$
      000DE5 A6 10            [ 1]  326 	ld a,#16 
      000DE7 11 01            [ 1]  327 	cp a,(BASE,sp)
      000DE9 26 0A            [ 1]  328 	jrne 3$ 
      000DEB 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000DED A1 41            [ 1]  330 	cp a,#'A 
      000DEF 2B 04            [ 1]  331 	jrmi 3$ 
      000DF1 A1 47            [ 1]  332 	cp a,#'G 
      000DF3 2B DD            [ 1]  333 	jrmi 2$ 
      000DF5 72 5A 00 01      [ 1]  334 3$: dec in 	
      000DF9 7F               [ 1]  335     clr (x)
      000DFA 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000DFC CD 18 96         [ 4]  337 	call atoi24
      000DFF 90 93            [ 1]  338 	ldw y,x
      000E01 C6 00 0C         [ 1]  339 	ld a,acc24 
      000E04 90 F7            [ 1]  340 	ld (y),a 
      000E06 90 5C            [ 1]  341 	incw y  
      000E08 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000E0B 90 FF            [ 2]  343 	ldw (y),x 
      000E0D 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000E11 A6 84            [ 1]  345 	ld a,#TK_INTGR
      000E13                        346 	_drop VSIZE  
      000E13 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E15 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000E16                        364 parse_binary: ; { -- n }
      000E16 4B 00            [ 1]  365 	push #0
      000E18 4B 00            [ 1]  366 	push #0
      000E1A 4B 00            [ 1]  367 	push #0
      000E1C                        368 2$:	
      000E1C 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000E1F 72 5C 00 01      [ 1]  370 	inc in 
      000E23 A1 30            [ 1]  371 	cp a,#'0 
      000E25 27 06            [ 1]  372 	jreq 3$
      000E27 A1 31            [ 1]  373 	cp a,#'1 
      000E29 27 02            [ 1]  374 	jreq 3$ 
      000E2B 20 0B            [ 2]  375 	jra bin_exit 
      000E2D A0 30            [ 1]  376 3$: sub a,#'0 
      000E2F 46               [ 1]  377 	rrc a
      000E30 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000E32 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000E34 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000E36 20 E4            [ 2]  381 	jra 2$  
      000E38                        382 bin_exit:
      000E38 72 5A 00 01      [ 1]  383 	dec in 
      000E3C 90 93            [ 1]  384 	ldw y,x
      000E3E 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000E40 90 F7            [ 1]  386 	ld (y),a 
      000E42 90 5C            [ 1]  387 	incw y 
      000E44 1E 02            [ 2]  388 	ldw x,(BINARY+1,sp)
      000E46 90 FF            [ 2]  389 	ldw (y),x 
      000E48 72 A9 00 02      [ 2]  390 	addw y,#2  
      000E4C A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000E4E                        392 	_drop VSIZE 
      000E4E 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E50 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000E51                        402 is_alpha::
      000E51 A1 41            [ 1]  403 	cp a,#'A 
      000E53 8C               [ 1]  404 	ccf 
      000E54 24 0B            [ 1]  405 	jrnc 9$ 
      000E56 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000E58 25 07            [ 1]  407 	jrc 9$ 
      000E5A A1 61            [ 1]  408 	cp a,#'a 
      000E5C 8C               [ 1]  409 	ccf 
      000E5D 24 02            [ 1]  410 	jrnc 9$
      000E5F A1 7B            [ 1]  411 	cp a,#'z+1
      000E61 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E62                        421 is_digit::
      000E62 A1 30            [ 1]  422 	cp a,#'0
      000E64 25 03            [ 1]  423 	jrc 1$
      000E66 A1 3A            [ 1]  424     cp a,#'9+1
      000E68 8C               [ 1]  425 	ccf 
      000E69 8C               [ 1]  426 1$:	ccf 
      000E6A 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E6B                        438 is_alnum::
      000E6B CD 0E 62         [ 4]  439 	call is_digit
      000E6E 25 03            [ 1]  440 	jrc 1$ 
      000E70 CD 0E 51         [ 4]  441 	call is_alpha
      000E73 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000E74                        453 is_symbol_char: 
      000E74 A1 5F            [ 1]  454 	cp a,#'_ 
      000E76 26 03            [ 1]  455 	jrne 1$
      000E78 99               [ 1]  456 	scf 
      000E79 20 03            [ 2]  457 	jra 9$ 
      000E7B CD 0E 6B         [ 4]  458 1$:	call is_alnum 
      000E7E 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E7F                        473 parse_symbol:
      000E7F 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E80                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E80 CD 18 8A         [ 4]  477 	call to_upper  
      000E83 F7               [ 1]  478 	ld (x), a 
      000E84 5C               [ 1]  479 	incw x
      000E85 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E88 72 5C 00 01      [ 1]  481 	inc in 
      000E8C CD 0E 74         [ 4]  482 	call is_symbol_char 
      000E8F 25 EF            [ 1]  483 	jrc symb_loop 
      000E91 7F               [ 1]  484 	clr (x)
      000E92 72 5A 00 01      [ 1]  485 	dec in  
      000E96 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000E97                        502 parse_keyword: 
      000E97 89               [ 2]  503 	pushw x ; preserve *symbol 
      000E98 CD 0E 7F         [ 4]  504 	call parse_symbol
      000E9B 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000E9D E6 02            [ 1]  506 	ld a,(2,x)
      000E9F 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000EA1 E6 01            [ 1]  509 	ld a,(1,x) 
      000EA3 A0 41            [ 1]  510 	sub a,#'A 
      000EA5 AE 00 03         [ 2]  511 	ldw x,#3 
      000EA8 42               [ 4]  512 	mul x,a 
      000EA9 1C 00 30         [ 2]  513 	addw x,#vars 
      000EAC A6 85            [ 1]  514 	ld a,#TK_VAR 
      000EAE 20 36            [ 2]  515 	jra 4$ 
      000EB0                        516 2$: ; check for keyword, otherwise syntax error.
      000EB0                        517 	_ldx_dict kword_dict ; dictionary entry point
      000EB0 AE 32 EF         [ 2]    1     ldw x,#kword_dict+2
      000EB3 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000EB5 90 5C            [ 1]  519 	incw y 
      000EB7 CD 19 00         [ 4]  520 	call search_dict
      000EBA 4D               [ 1]  521 	tnz a
      000EBB 26 29            [ 1]  522 	jrne 4$
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000EBD 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000EBF A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000EC1 90 F7            [ 1]  527 	ld (y),a 
      000EC3 90 5C            [ 1]  528 	incw y
      000EC5 93               [ 1]  529 	ldw x,y 
      000EC6 CD 13 E2         [ 4]  530 	call strlen
      000EC9 A1 0F            [ 1]  531 	cp a,#15 
      000ECB 23 02            [ 2]  532 	jrule 22$ 
      000ECD A6 0F            [ 1]  533 	ld a,#15
      000ECF                        534 22$:	
      000ECF 88               [ 1]  535 	push a 
      000ED0                        536 24$:
      000ED0 90 F6            [ 1]  537     ld a,(y)
      000ED2 27 09            [ 1]  538 	jreq 3$
      000ED4 90 5C            [ 1]  539 	incw y
      000ED6 0A 01            [ 1]  540 	dec (1,sp) 
      000ED8 26 F6            [ 1]  541 	jrne 24$
      000EDA 4F               [ 1]  542 	clr a 
      000EDB 90 F7            [ 1]  543 	ld (y),a 
      000EDD 90 5C            [ 1]  544 3$: incw y 
      000EDF                        545 	_drop 1 
      000EDF 5B 01            [ 2]    1     addw sp,#1 
      000EE1 A6 03            [ 1]  546 	ld a,#TK_LABEL 
      000EE3 5F               [ 1]  547 	clrw x 	
      000EE4 20 1B            [ 2]  548 	jra 5$ 
      000EE6                        549 4$:	
      000EE6 16 01            [ 2]  550 	ldw y,(XFIRST,sp)
      000EE8 A1 87            [ 1]  551 	cp a,#TK_NOT 
      000EEA 2B 06            [ 1]  552 	jrmi 41$
      000EEC 90 F7            [ 1]  553 	ld (y),a 
      000EEE 90 5C            [ 1]  554 	incw y 
      000EF0 20 0F            [ 2]  555 	jra 5$ 
      000EF2                        556 41$:	
      000EF2 A3 00 48         [ 2]  557 	cpw x,#LET_IDX 
      000EF5 27 0A            [ 1]  558 	jreq 5$  ; don't compile LET command 
      000EF7 90 F7            [ 1]  559 	ld (y),a 
      000EF9 90 5C            [ 1]  560 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000EFB 90 FF            [ 2]  561 	ldw (y),x
      000EFD 72 A9 00 02      [ 2]  562 	addw y,#2  
      000F01                        563 5$:	_drop VSIZE 
      000F01 5B 02            [ 2]    1     addw sp,#VSIZE 
      000F03 81               [ 4]  564 	ret  	
                                    565 
                                    566 ;------------------------------------
                                    567 ; skip character c in text starting from 'in'
                                    568 ; input:
                                    569 ;	 y 		point to text buffer
                                    570 ;    a 		character to skip
                                    571 ; output:  
                                    572 ;	'in' ajusted to new position
                                    573 ;------------------------------------
                           000001   574 	C = 1 ; local var
      000F04                        575 skip:
      000F04 88               [ 1]  576 	push a
      000F05 91 D6 00         [ 4]  577 1$:	ld a,([in.w],y)
      000F08 27 0A            [ 1]  578 	jreq 2$
      000F0A 11 01            [ 1]  579 	cp a,(C,sp)
      000F0C 26 06            [ 1]  580 	jrne 2$
      000F0E 72 5C 00 01      [ 1]  581 	inc in
      000F12 20 F1            [ 2]  582 	jra 1$
      000F14                        583 2$: _drop 1 
      000F14 5B 01            [ 2]    1     addw sp,#1 
      000F16 81               [ 4]  584 	ret
                                    585 	
                                    586 
                                    587 ;------------------------------------
                                    588 ; scan text for next token
                                    589 ; input: 
                                    590 ;	X 		pointer to buffer where 
                                    591 ;	        token id and value are copied 
                                    592 ; use:
                                    593 ;	Y   pointer to text in tib 
                                    594 ; output:
                                    595 ;   A       token attribute 
                                    596 ;   X 		token value
                                    597 ;   Y       updated position in output buffer   
                                    598 ;------------------------------------
                                    599 	; use to check special character 
                                    600 	.macro _case c t  
                                    601 	ld a,#c 
                                    602 	cp a,(TCHAR,sp) 
                                    603 	jrne t
                                    604 	.endm 
                                    605 
                           000001   606 	TCHAR=1
                           000002   607 	ATTRIB=2
                           000002   608 	VSIZE=2
      000F17                        609 get_token:: 
      000F17                        610 	_vars VSIZE
      000F17 52 02            [ 2]    1     sub sp,#VSIZE 
                                    611 ;	ld a,in 
                                    612 ;	sub a,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                    613 ;   jrmi 0$
                                    614 ;	clr a 
                                    615 ;	ret 
      000F19                        616 0$: 
      000F19 90 AE 16 68      [ 2]  617 	ldw y,#tib    	
      000F1D A6 20            [ 1]  618 	ld a,#SPACE
      000F1F CD 0F 04         [ 4]  619 	call skip
      000F22 55 00 01 00 02   [ 1]  620 	mov in.saved,in 
      000F27 91 D6 00         [ 4]  621 	ld a,([in.w],y)
      000F2A 26 05            [ 1]  622 	jrne 1$
      000F2C 90 93            [ 1]  623 	ldw y,x 
      000F2E CC 10 C8         [ 2]  624 	jp token_exit ; end of line 
      000F31 72 5C 00 01      [ 1]  625 1$:	inc in 
      000F35 CD 18 8A         [ 4]  626 	call to_upper 
      000F38 6B 01            [ 1]  627 	ld (TCHAR,sp),a 
                                    628 ; check for quoted string
      000F3A                        629 str_tst:  	
      000F3A                        630 	_case '"' nbr_tst
      000F3A A6 22            [ 1]    1 	ld a,#'"' 
      000F3C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F3E 26 0A            [ 1]    3 	jrne nbr_tst
      000F40 A6 02            [ 1]  631 	ld a,#TK_QSTR
      000F42 F7               [ 1]  632 	ld (x),a 
      000F43 5C               [ 1]  633 	incw x 
      000F44 CD 0D 70         [ 4]  634 	call parse_quote
      000F47 CC 10 C8         [ 2]  635 	jp token_exit
      000F4A                        636 nbr_tst:
                                    637 ; check for hexadecimal number 
      000F4A A6 24            [ 1]  638 	ld a,#'$'
      000F4C 11 01            [ 1]  639 	cp a,(TCHAR,sp) 
      000F4E 27 17            [ 1]  640 	jreq 1$
                                    641 ;check for binary number 
      000F50 A6 26            [ 1]  642 	ld a,#'&
      000F52 11 01            [ 1]  643 	cp a,(TCHAR,sp)
      000F54 26 0A            [ 1]  644 	jrne 0$
      000F56 A6 84            [ 1]  645 	ld a,#TK_INTGR
      000F58 F7               [ 1]  646 	ld (x),a 
      000F59 5C               [ 1]  647 	incw x 
      000F5A CD 0E 16         [ 4]  648 	call parse_binary ; expect binary integer 
      000F5D CC 10 C8         [ 2]  649 	jp token_exit 
                                    650 ; check for decimal number 	
      000F60 7B 01            [ 1]  651 0$:	ld a,(TCHAR,sp)
      000F62 CD 0E 62         [ 4]  652 	call is_digit
      000F65 24 0C            [ 1]  653 	jrnc 3$
      000F67 A6 84            [ 1]  654 1$:	ld a,#TK_INTGR 
      000F69 F7               [ 1]  655 	ld (x),a 
      000F6A 5C               [ 1]  656 	incw x 
      000F6B 7B 01            [ 1]  657 	ld a,(TCHAR,sp)
      000F6D CD 0D C5         [ 4]  658 	call parse_integer 
      000F70 CC 10 C8         [ 2]  659 	jp token_exit 
      000F73                        660 3$: 
      000F73                        661 	_case '(' bkslsh_tst 
      000F73 A6 28            [ 1]    1 	ld a,#'(' 
      000F75 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F77 26 05            [ 1]    3 	jrne bkslsh_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      000F79 A6 06            [ 1]  662 	ld a,#TK_LPAREN
      000F7B CC 10 C4         [ 2]  663 	jp token_char   	
      000F7E                        664 bkslsh_tst: ; character token 
      000F7E                        665 	_case '\',rparnt_tst
      000F7E A6 5C            [ 1]    1 	ld a,#'\' 
      000F80 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F82 26 16            [ 1]    3 	jrne rparnt_tst
      000F84 A6 04            [ 1]  666 	ld a,#TK_CHAR 
      000F86 F7               [ 1]  667 	ld (x),a 
      000F87 5C               [ 1]  668 	incw x 
      000F88 91 D6 00         [ 4]  669 	ld a,([in.w],y)
      000F8B F7               [ 1]  670 	ld (x),a 
      000F8C 5C               [ 1]  671 	incw x
      000F8D 90 93            [ 1]  672 	ldw y,x 	 
      000F8F 72 5C 00 01      [ 1]  673 	inc in  
      000F93 5F               [ 1]  674 	clrw x 
      000F94 97               [ 1]  675 	ld xl,a 
      000F95 A6 04            [ 1]  676 	ld a,#TK_CHAR 
      000F97 CC 10 C8         [ 2]  677 	jp token_exit 
      000F9A                        678 rparnt_tst:		
      000F9A                        679 	_case ')' colon_tst 
      000F9A A6 29            [ 1]    1 	ld a,#')' 
      000F9C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F9E 26 05            [ 1]    3 	jrne colon_tst
      000FA0 A6 07            [ 1]  680 	ld a,#TK_RPAREN 
      000FA2 CC 10 C4         [ 2]  681 	jp token_char
      000FA5                        682 colon_tst:
      000FA5                        683 	_case ':' comma_tst 
      000FA5 A6 3A            [ 1]    1 	ld a,#':' 
      000FA7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA9 26 05            [ 1]    3 	jrne comma_tst
      000FAB A6 0A            [ 1]  684 	ld a,#TK_COLON 
      000FAD CC 10 C4         [ 2]  685 	jp token_char  
      000FB0                        686 comma_tst:
      000FB0                        687 	_case COMMA sharp_tst 
      000FB0 A6 2C            [ 1]    1 	ld a,#COMMA 
      000FB2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FB4 26 05            [ 1]    3 	jrne sharp_tst
      000FB6 A6 08            [ 1]  688 	ld a,#TK_COMMA
      000FB8 CC 10 C4         [ 2]  689 	jp token_char
      000FBB                        690 sharp_tst:
      000FBB                        691 	_case SHARP dash_tst 
      000FBB A6 23            [ 1]    1 	ld a,#SHARP 
      000FBD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FBF 26 05            [ 1]    3 	jrne dash_tst
      000FC1 A6 09            [ 1]  692 	ld a,#TK_SHARP
      000FC3 CC 10 C4         [ 2]  693 	jp token_char  	 	 
      000FC6                        694 dash_tst: 	
      000FC6                        695 	_case '-' at_tst 
      000FC6 A6 2D            [ 1]    1 	ld a,#'-' 
      000FC8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FCA 26 05            [ 1]    3 	jrne at_tst
      000FCC A6 11            [ 1]  696 	ld a,#TK_MINUS  
      000FCE CC 10 C4         [ 2]  697 	jp token_char 
      000FD1                        698 at_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      000FD1                        699 	_case '@' qmark_tst 
      000FD1 A6 40            [ 1]    1 	ld a,#'@' 
      000FD3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FD5 26 05            [ 1]    3 	jrne qmark_tst
      000FD7 A6 05            [ 1]  700 	ld a,#TK_ARRAY 
      000FD9 CC 10 C4         [ 2]  701 	jp token_char
      000FDC                        702 qmark_tst:
      000FDC                        703 	_case '?' tick_tst 
      000FDC A6 3F            [ 1]    1 	ld a,#'?' 
      000FDE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FE0 26 12            [ 1]    3 	jrne tick_tst
      000FE2 A6 80            [ 1]  704 	ld a,#TK_CMD  
      000FE4 F7               [ 1]  705 	ld (x),a 
      000FE5 5C               [ 1]  706 	incw x 
      000FE6 90 93            [ 1]  707 	ldw y,x 
      000FE8 AE 00 64         [ 2]  708 	ldw x,#PRT_IDX 
      000FEB 90 FF            [ 2]  709 	ldw (y),x 
      000FED 72 A9 00 02      [ 2]  710 	addw y,#2
      000FF1 CC 10 C8         [ 2]  711 	jp token_exit
      000FF4                        712 tick_tst: ; comment 
      000FF4                        713 	_case TICK plus_tst 
      000FF4 A6 27            [ 1]    1 	ld a,#TICK 
      000FF6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF8 26 2B            [ 1]    3 	jrne plus_tst
      000FFA A6 80            [ 1]  714 	ld a,#TK_CMD
      000FFC F7               [ 1]  715 	ld (x),a 
      000FFD 5C               [ 1]  716 	incw x
      000FFE 90 AE 00 7E      [ 2]  717 	ldw y,#REM_IDX
      001002 FF               [ 2]  718 	ldw (x),y 
      001003 1C 00 02         [ 2]  719 	addw x,#2  
      001006                        720 copy_comment:
      001006 90 AE 16 68      [ 2]  721 	ldw y,#tib 
      00100A 72 B9 00 00      [ 2]  722 	addw y,in.w
      00100E 90 89            [ 2]  723 	pushw y 
      001010 CD 13 FE         [ 4]  724 	call strcpy
      001013 72 F2 01         [ 2]  725 	subw y,(1,sp)
      001016 90 5C            [ 1]  726 	incw y ; strlen+1 
      001018 17 01            [ 2]  727 	ldw (1,sp),y 
      00101A 72 FB 01         [ 2]  728 	addw x,(1,sp) 
      00101D                        729 	_drop 2 
      00101D 5B 02            [ 2]    1     addw sp,#2 
      00101F 4F               [ 1]  730 	clr a 
      001020 90 93            [ 1]  731 	ldw y,x 
      001022 CC 10 C8         [ 2]  732 	jp token_exit 
      001025                        733 plus_tst:
      001025                        734 	_case '+' star_tst 
      001025 A6 2B            [ 1]    1 	ld a,#'+' 
      001027 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001029 26 05            [ 1]    3 	jrne star_tst
      00102B A6 10            [ 1]  735 	ld a,#TK_PLUS  
      00102D CC 10 C4         [ 2]  736 	jp token_char 
      001030                        737 star_tst:
      001030                        738 	_case '*' slash_tst 
      001030 A6 2A            [ 1]    1 	ld a,#'*' 
      001032 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001034 26 05            [ 1]    3 	jrne slash_tst
      001036 A6 20            [ 1]  739 	ld a,#TK_MULT 
      001038 CC 10 C4         [ 2]  740 	jp token_char 
      00103B                        741 slash_tst: 
      00103B                        742 	_case '/' prcnt_tst 
      00103B A6 2F            [ 1]    1 	ld a,#'/' 
      00103D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00103F 26 05            [ 1]    3 	jrne prcnt_tst
      001041 A6 21            [ 1]  743 	ld a,#TK_DIV 
      001043 CC 10 C4         [ 2]  744 	jp token_char 
      001046                        745 prcnt_tst:
      001046                        746 	_case '%' eql_tst 
      001046 A6 25            [ 1]    1 	ld a,#'%' 
      001048 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00104A 26 05            [ 1]    3 	jrne eql_tst
      00104C A6 22            [ 1]  747 	ld a,#TK_MOD
      00104E CC 10 C4         [ 2]  748 	jp token_char  
                                    749 ; 1 or 2 character tokens 	
      001051                        750 eql_tst:
      001051                        751 	_case '=' gt_tst 		
      001051 A6 3D            [ 1]    1 	ld a,#'=' 
      001053 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001055 26 05            [ 1]    3 	jrne gt_tst
      001057 A6 32            [ 1]  752 	ld a,#TK_EQUAL
      001059 CC 10 C4         [ 2]  753 	jp token_char 
      00105C                        754 gt_tst:
      00105C                        755 	_case '>' lt_tst 
      00105C A6 3E            [ 1]    1 	ld a,#'>' 
      00105E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001060 26 23            [ 1]    3 	jrne lt_tst
      001062 A6 31            [ 1]  756 	ld a,#TK_GT 
      001064 6B 02            [ 1]  757 	ld (ATTRIB,sp),a 
      001066 91 D6 00         [ 4]  758 	ld a,([in.w],y)
      001069 72 5C 00 01      [ 1]  759 	inc in 
      00106D A1 3D            [ 1]  760 	cp a,#'=
      00106F 26 04            [ 1]  761 	jrne 1$
      001071 A6 33            [ 1]  762 	ld a,#TK_GE 
      001073 20 4F            [ 2]  763 	jra token_char  
      001075 A1 3C            [ 1]  764 1$: cp a,#'<
      001077 26 04            [ 1]  765 	jrne 2$
      001079 A6 35            [ 1]  766 	ld a,#TK_NE 
      00107B 20 47            [ 2]  767 	jra token_char 
      00107D 72 5A 00 01      [ 1]  768 2$: dec in
      001081 7B 02            [ 1]  769 	ld a,(ATTRIB,sp)
      001083 20 3F            [ 2]  770 	jra token_char 	 
      001085                        771 lt_tst:
      001085                        772 	_case '<' other
      001085 A6 3C            [ 1]    1 	ld a,#'<' 
      001087 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001089 26 23            [ 1]    3 	jrne other
      00108B A6 34            [ 1]  773 	ld a,#TK_LT 
      00108D 6B 02            [ 1]  774 	ld (ATTRIB,sp),a 
      00108F 91 D6 00         [ 4]  775 	ld a,([in.w],y)
      001092 72 5C 00 01      [ 1]  776 	inc in 
      001096 A1 3D            [ 1]  777 	cp a,#'=
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001098 26 04            [ 1]  778 	jrne 1$
      00109A A6 36            [ 1]  779 	ld a,#TK_LE 
      00109C 20 26            [ 2]  780 	jra token_char 
      00109E A1 3E            [ 1]  781 1$: cp a,#'>
      0010A0 26 04            [ 1]  782 	jrne 2$
      0010A2 A6 35            [ 1]  783 	ld a,#TK_NE 
      0010A4 20 1E            [ 2]  784 	jra token_char 
      0010A6 72 5A 00 01      [ 1]  785 2$: dec in 
      0010AA 7B 02            [ 1]  786 	ld a,(ATTRIB,sp)
      0010AC 20 16            [ 2]  787 	jra token_char 	
      0010AE                        788 other: ; not a special character 	 
      0010AE 7B 01            [ 1]  789 	ld a,(TCHAR,sp)
      0010B0 CD 0E 51         [ 4]  790 	call is_alpha 
      0010B3 25 03            [ 1]  791 	jrc 30$ 
      0010B5 CC 16 9E         [ 2]  792 	jp syntax_error 
      0010B8                        793 30$: 
      0010B8 CD 0E 97         [ 4]  794 	call parse_keyword
      0010BB A3 00 7E         [ 2]  795 	cpw x,#REM_IDX 
      0010BE 26 08            [ 1]  796 	jrne token_exit 
      0010C0 93               [ 1]  797 	ldw x,y 
      0010C1 CC 10 06         [ 2]  798 	jp copy_comment 
      0010C4                        799 token_char:
      0010C4 F7               [ 1]  800 	ld (x),a 
      0010C5 5C               [ 1]  801 	incw x
      0010C6 90 93            [ 1]  802 	ldw y,x 
      0010C8                        803 token_exit:
      0010C8                        804 	_drop VSIZE 
      0010C8 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010CA 81               [ 4]  805 	ret
                                    806 
                                    807 
                                    808 ;-----------------------------------
                                    809 ; create token list fromm text line 
                                    810 ; save this list in pad buffer 
                                    811 ;  compiled line format: 
                                    812 ;    line_no  2 bytes {0...32767}
                                    813 ;    count    1 byte  
                                    814 ;    tokens   variable length 
                                    815 ;   
                                    816 ; input:
                                    817 ;   none
                                    818 ; modified variables:
                                    819 ;   basicptr     token list buffer address 
                                    820 ;   in.w  		 3|count, i.e. index in buffer
                                    821 ;   count        length of line | 0  
                                    822 ;-----------------------------------
                           000001   823 	XSAVE=1
                           000002   824 	VSIZE=2
      0010CB                        825 compile::
      0010CB 90 89            [ 2]  826 	pushw y 
      0010CD                        827 	_vars VSIZE 
      0010CD 52 02            [ 2]    1     sub sp,#VSIZE 
      0010CF 55 00 1B 00 04   [ 1]  828 	mov basicptr,txtbgn
      0010D4 72 1A 00 22      [ 1]  829 	bset flags,#FCOMP 
      0010D8 A6 00            [ 1]  830 	ld a,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0010DA AE 00 00         [ 2]  831 	ldw x,#0
      0010DD CF 16 B8         [ 2]  832 	ldw pad,x ; destination buffer 
      0010E0 C7 16 BA         [ 1]  833 	ld pad+2,a ; count 
      0010E3 AE 16 BB         [ 2]  834 	ldw x,#pad+3
      0010E6 72 5F 00 01      [ 1]  835 	clr in 
      0010EA CD 0F 17         [ 4]  836 	call get_token
      0010ED A1 84            [ 1]  837 	cp a,#TK_INTGR
      0010EF 26 11            [ 1]  838 	jrne 2$
      0010F1 A3 00 01         [ 2]  839 	cpw x,#1 
      0010F4 2A 05            [ 1]  840 	jrpl 1$
      0010F6 A6 0A            [ 1]  841 	ld a,#ERR_BAD_VALUE
      0010F8 CC 16 A0         [ 2]  842 	jp tb_error
      0010FB CF 16 B8         [ 2]  843 1$:	ldw pad,x 
      0010FE 90 AE 16 BB      [ 2]  844 	ldw y,#pad+3 
      001102 90 A3 17 74      [ 2]  845 2$:	cpw y,#stack_full 
      001106 25 05            [ 1]  846 	jrult 3$
      001108 A6 0F            [ 1]  847 	ld a,#ERR_BUF_FULL 
      00110A CC 16 A0         [ 2]  848 	jp tb_error 
      00110D                        849 3$:	
      00110D 93               [ 1]  850 	ldw x,y 
      00110E CD 0F 17         [ 4]  851 	call get_token 
      001111 A1 00            [ 1]  852 	cp a,#TK_NONE 
      001113 26 ED            [ 1]  853 	jrne 2$ 
                                    854 ; compilation completed  
      001115 72 A2 16 B8      [ 2]  855 	subw y,#pad
      001119 90 9F            [ 1]  856     ld a,yl
      00111B AE 16 B8         [ 2]  857 	ldw x,#pad 
      00111E CF 00 19         [ 2]  858 	ldw ptr16,x 
      001121 E7 02            [ 1]  859 	ld (2,x),a 
      001123 FE               [ 2]  860 	ldw x,(x)
      001124 27 09            [ 1]  861 	jreq 10$
      001126 CD 0C FE         [ 4]  862 	call insert_line
      001129 72 5F 00 03      [ 1]  863 	clr  count 
      00112D 20 0F            [ 2]  864 	jra  11$ 
      00112F                        865 10$: ; line# is zero 
      00112F CE 00 19         [ 2]  866 	ldw x,ptr16  
      001132 CF 00 04         [ 2]  867 	ldw basicptr,x 
      001135 E6 02            [ 1]  868 	ld a,(2,x)
      001137 C7 00 03         [ 1]  869 	ld count,a 
      00113A 35 03 00 01      [ 1]  870 	mov in,#3 
      00113E                        871 11$:
      00113E                        872 	_drop VSIZE 
      00113E 5B 02            [ 2]    1     addw sp,#VSIZE 
      001140 72 1B 00 22      [ 1]  873 	bres flags,#FCOMP 
      001144 90 85            [ 2]  874 	popw y 
      001146 81               [ 4]  875 	ret 
                                    876 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      001147                         48 cpy_cmd_name:
      001147 5D               [ 2]   49 	tnzw x 
      001148 27 14            [ 1]   50 	jreq 10$
      00114A F6               [ 1]   51 	ld a,(x)
      00114B 5C               [ 1]   52 	incw x
      00114C A4 0F            [ 1]   53 	and a,#15  
      00114E 88               [ 1]   54 	push a 
      00114F 0D 01            [ 1]   55     tnz (1,sp) 
      001151 27 0A            [ 1]   56 	jreq 9$
      001153 F6               [ 1]   57 1$:	ld a,(x)
      001154 90 F7            [ 1]   58 	ld (y),a  
      001156 5C               [ 1]   59 	incw x
      001157 90 5C            [ 1]   60 	incw y 
      001159 0A 01            [ 1]   61 	dec (1,sp)	 
      00115B 26 F6            [ 1]   62 	jrne 1$
      00115D 84               [ 1]   63 9$: pop a 
      00115E                         64 10$: 
      00115E 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      00115F                         75 add_space:
      00115F 90 5A            [ 2]   76 	decw y 
      001161 90 F6            [ 1]   77 	ld a,(y)
      001163 90 5C            [ 1]   78 	incw y
      001165 A1 29            [ 1]   79 	cp a,#') 
      001167 27 05            [ 1]   80 	jreq 0$
      001169 CD 0E 6B         [ 4]   81 	call is_alnum 
      00116C 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00116E                         83 0$: 
      00116E A6 20            [ 1]   84 	ld a,#SPACE 
      001170 90 F7            [ 1]   85 	ld (y),a 
      001172 90 5C            [ 1]   86 	incw y 
      001174 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      001175                         99 right_align::
      001175 88               [ 1]  100 	push a 
      001176 7B 01            [ 1]  101 0$: ld a,(1,sp)
      001178 C1 00 23         [ 1]  102 	cp a,tab_width 
      00117B 2A 08            [ 1]  103 	jrpl 1$
      00117D A6 20            [ 1]  104 	ld a,#SPACE 
      00117F 5A               [ 2]  105 	decw x
      001180 F7               [ 1]  106 	ld (x),a  
      001181 0C 01            [ 1]  107 	inc (1,sp)
      001183 20 F1            [ 2]  108 	jra 0$ 
      001185 84               [ 1]  109 1$: pop a 	
      001186 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      001187                        123 cpy_quote:
      001187 A6 22            [ 1]  124 	ld a,#'"
      001189 90 F7            [ 1]  125 	ld (y),a 
      00118B 90 5C            [ 1]  126 	incw y 
      00118D 89               [ 2]  127 	pushw x 
      00118E CD 17 C5         [ 4]  128 	call skip_string 
      001191 85               [ 2]  129 	popw x 
      001192 F6               [ 1]  130 1$:	ld a,(x)
      001193 27 30            [ 1]  131 	jreq 9$
      001195 5C               [ 1]  132 	incw x 
      001196 A1 20            [ 1]  133 	cp a,#SPACE 
      001198 25 0E            [ 1]  134 	jrult 3$
      00119A 90 F7            [ 1]  135 	ld (y),a
      00119C 90 5C            [ 1]  136 	incw y 
      00119E A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0011A0 26 F0            [ 1]  138 	jrne 1$ 
      0011A2                        139 2$:
      0011A2 90 F7            [ 1]  140 	ld (y),a
      0011A4 90 5C            [ 1]  141 	incw y  
      0011A6 20 EA            [ 2]  142 	jra 1$
      0011A8 88               [ 1]  143 3$: push a 
      0011A9 A6 5C            [ 1]  144 	ld a,#'\
      0011AB 90 F7            [ 1]  145 	ld (y),a 
      0011AD 90 5C            [ 1]  146 	incw y  
      0011AF 84               [ 1]  147 	pop a 
      0011B0 A0 07            [ 1]  148 	sub a,#7
      0011B2 C7 00 0E         [ 1]  149 	ld acc8,a 
      0011B5 72 5F 00 0D      [ 1]  150 	clr acc16
      0011B9 89               [ 2]  151 	pushw x
      0011BA AE 0D BD         [ 2]  152 	ldw x,#escaped 
      0011BD 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      0011C1 F6               [ 1]  154 	ld a,(x)
      0011C2 85               [ 2]  155 	popw x
      0011C3 20 DD            [ 2]  156 	jra 2$
      0011C5 A6 22            [ 1]  157 9$: ld a,#'"
      0011C7 90 F7            [ 1]  158 	ld (y),a 
      0011C9 90 5C            [ 1]  159 	incw y  
      0011CB 5C               [ 1]  160 	incw x 
      0011CC 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      0011CD                        171 var_name::
      0011CD 1D 00 30         [ 2]  172 		subw x,#vars 
      0011D0 A6 03            [ 1]  173 		ld a,#3
      0011D2 62               [ 2]  174 		div x,a 
      0011D3 9F               [ 1]  175 		ld a,xl 
      0011D4 AB 41            [ 1]  176 		add a,#'A 
      0011D6 81               [ 4]  177 		ret 
                                    178 
                                    179 ;-----------------------------
                                    180 ; return cmd  idx from its 
                                    181 ; code address 
                                    182 ; input:
                                    183 ;   X      code address 
                                    184 ; output:
                                    185 ;   X      cmd_idx
                                    186 ;-----------------------------
      0011D7                        187 get_cmd_idx:
      0011D7 90 89            [ 2]  188 	pushw y
      0011D9 90 AE 32 F5      [ 2]  189 	ldw y,#code_addr 
      0011DD 90 CF 00 19      [ 2]  190 	ldw ptr16,y 
      0011E1 90 5F            [ 1]  191 	clrw y 
      0011E3 91 D3 19         [ 5]  192 1$:	cpw x,([ptr16],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0011E6 27 0C            [ 1]  193 	jreq 3$ 
      0011E8 90 5C            [ 1]  194 	incw y 
      0011EA 91 D6 19         [ 4]  195 	ld a,([ptr16],y)
      0011ED 90 5C            [ 1]  196 	incw y
      0011EF 91 DA 19         [ 4]  197 	or a,([ptr16],y)	
      0011F2 26 EF            [ 1]  198 	jrne 1$
      0011F4 93               [ 1]  199 3$: ldw x,y 
      0011F5 90 85            [ 2]  200 	popw y 
      0011F7 81               [ 4]  201 	ret
                                    202 
                                    203 
                                    204 ;-------------------------------------
                                    205 ; decompile tokens list 
                                    206 ; to original text line 
                                    207 ; input:
                                    208 ;   [basicptr]  pointer at line 
                                    209 ;   Y           output buffer
                                    210 ; output:
                                    211 ;   A           length 
                                    212 ;   Y           after string  
                                    213 ;------------------------------------
                           000001   214 	BASE_SAV=1
                           000002   215 	WIDTH_SAV=2
                           000003   216 	STR=3
                           000004   217 	VSIZE=4 
      0011F8                        218 decompile::
      0011F8                        219 	_vars VSIZE
      0011F8 52 04            [ 2]    1     sub sp,#VSIZE 
      0011FA C6 00 0A         [ 1]  220 	ld a,base
      0011FD 6B 01            [ 1]  221 	ld (BASE_SAV,sp),a  
      0011FF C6 00 23         [ 1]  222 	ld a,tab_width 
      001202 6B 02            [ 1]  223 	ld (WIDTH_SAV,sp),a 
      001204 17 03            [ 2]  224 	ldw (STR,sp),y   
      001206 72 CE 00 04      [ 5]  225 	ldw x,[basicptr] ; line number 
      00120A 35 0A 00 0A      [ 1]  226 	mov base,#10
      00120E 35 05 00 23      [ 1]  227 	mov tab_width,#5
      001212 72 5F 00 0C      [ 1]  228 	clr acc24 
      001216 CF 00 0D         [ 2]  229 	ldw acc16,x
      001219 4F               [ 1]  230 	clr a ; unsigned conversion 
      00121A CD 18 31         [ 4]  231 	call itoa  
      00121D CD 11 75         [ 4]  232 	call right_align 
      001220 88               [ 1]  233 	push a 
      001221 90 93            [ 1]  234 1$:	ldw y,x ; source
      001223 1E 04            [ 2]  235 	ldw x,(STR+1,sp) ; destination
      001225 CD 13 FE         [ 4]  236 	call strcpy 
      001228 90 5F            [ 1]  237 	clrw y 
      00122A 84               [ 1]  238 	pop a 
      00122B 90 97            [ 1]  239 	ld yl,a 
      00122D 72 F9 03         [ 2]  240 	addw y,(STR,sp)
      001230 A6 20            [ 1]  241 	ld a,#SPACE 
      001232 90 F7            [ 1]  242 	ld (y),a 
      001234 90 5C            [ 1]  243 	incw y 
      001236 72 5F 00 23      [ 1]  244 	clr tab_width
      00123A AE 00 03         [ 2]  245 	ldw x,#3
      00123D CF 00 00         [ 2]  246 	ldw in.w,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001240                        247 decomp_loop:
      001240 90 89            [ 2]  248 	pushw y
      001242 CD 17 9F         [ 4]  249 	call next_token 
      001245 90 85            [ 2]  250 	popw y 
      001247 4D               [ 1]  251 	tnz a  
      001248 26 03            [ 1]  252 	jrne 1$
      00124A CC 13 73         [ 2]  253 	jp 20$
      00124D 2B 03            [ 1]  254 1$:	jrmi 2$
      00124F CC 12 E4         [ 2]  255 	jp 6$
      001252                        256 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      001252 A1 85            [ 1]  257 	cp a,#TK_VAR 
      001254 26 0F            [ 1]  258 	jrne 3$
                                    259 ;; TK_VAR 
      001256 CD 11 5F         [ 4]  260 	call add_space
      001259 CD 17 D4         [ 4]  261 	call get_addr   
      00125C CD 11 CD         [ 4]  262 	call var_name
      00125F 90 F7            [ 1]  263 	ld (y),a 
      001261 90 5C            [ 1]  264 	incw y  
      001263 20 DB            [ 2]  265 	jra decomp_loop
      001265                        266 3$:
      001265 A1 84            [ 1]  267 	cp a,#TK_INTGR
      001267 26 26            [ 1]  268 	jrne 4$
                                    269 ;; TK_INTGR
      001269 CD 17 DE         [ 4]  270 	call get_int24 
      00126C C7 00 0C         [ 1]  271 	ld acc24,a 
      00126F CF 00 0D         [ 2]  272 	ldw acc16,x 
      001272 CD 11 5F         [ 4]  273 	call add_space
      001275 90 89            [ 2]  274 	pushw y 
      001277 A6 FF            [ 1]  275 	ld a,#255 ; signed conversion 
      001279 CD 18 31         [ 4]  276 	call itoa  
      00127C 16 01            [ 2]  277 	ldw y,(1,sp) 
      00127E 88               [ 1]  278 	push a 
      00127F 51               [ 1]  279 	exgw x,y 
      001280 CD 13 FE         [ 4]  280 	call strcpy 
      001283 90 5F            [ 1]  281 	clrw y
      001285 84               [ 1]  282 	pop a  
      001286 90 97            [ 1]  283 	ld yl,a 
      001288 72 F9 01         [ 2]  284 	addw y,(1,sp)
      00128B                        285 	_drop 2 
      00128B 5B 02            [ 2]    1     addw sp,#2 
      00128D 20 B1            [ 2]  286 	jra decomp_loop
      00128F                        287 4$: ; dictionary keyword
      00128F A1 87            [ 1]  288 	cp a,#TK_NOT 
      001291 24 39            [ 1]  289 	jruge 50$ 
      001293 FE               [ 2]  290 	ldw x,(x)
      001294 72 5C 00 01      [ 1]  291 	inc in 
      001298 72 5C 00 01      [ 1]  292 	inc in 
      00129C A3 00 7E         [ 2]  293 	cpw x,#REM_IDX
      00129F 26 23            [ 1]  294 	jrne 5$
      0012A1 CE 00 04         [ 2]  295 	ldw x,basicptr 
                                    296 ; copy comment to buffer 
      0012A4 CD 11 5F         [ 4]  297 	call add_space
      0012A7 A6 27            [ 1]  298 	ld a,#''
      0012A9 90 F7            [ 1]  299 	ld (y),a 
      0012AB 90 5C            [ 1]  300 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      0012AD                        301 46$:
      0012AD 72 D6 00 00      [ 4]  302 	ld a,([in.w],x)
      0012B1 72 5C 00 01      [ 1]  303 	inc in  
      0012B5 90 F7            [ 1]  304 	ld (y),a 
      0012B7 90 5C            [ 1]  305 	incw y 
      0012B9 C6 00 01         [ 1]  306 	ld a,in 
      0012BC C1 00 03         [ 1]  307 	cp a,count 
      0012BF 2B EC            [ 1]  308 	jrmi 46$
      0012C1 CC 13 73         [ 2]  309 	jp 20$  
      0012C4 A3 00 48         [ 2]  310 5$: cpw x,#LET_IDX 
      0012C7 26 0B            [ 1]  311 	jrne 54$
      0012C9 CC 12 40         [ 2]  312 	jp decomp_loop ; down display LET
      0012CC                        313 50$:
      0012CC 5F               [ 1]  314 	clrw x 
      0012CD A0 87            [ 1]  315 	sub a,#TK_NOT  
      0012CF 48               [ 1]  316 	sll a 
      0012D0 97               [ 1]  317 	ld xl,a 
      0012D1 1C 00 F8         [ 2]  318 	addw x,#NOT_IDX
      0012D4                        319 54$: ; insert command name 
      0012D4 CD 11 5F         [ 4]  320 	call add_space  
      0012D7 90 89            [ 2]  321 	pushw y
      0012D9 CD 13 AE         [ 4]  322 	call cmd_name
      0012DC 90 85            [ 2]  323 	popw y 
      0012DE CD 11 47         [ 4]  324 	call cpy_cmd_name
      0012E1 CC 12 40         [ 2]  325 	jp decomp_loop 
      0012E4                        326 6$:
                                    327 ; label?
      0012E4 A1 03            [ 1]  328 	cp a,#TK_LABEL 
      0012E6 26 1E            [ 1]  329 	jrne 64$
                                    330 ; copy label string to output buffer   	
      0012E8 A6 20            [ 1]  331 	ld a,#32 
      0012EA 90 F7            [ 1]  332 	ld (y),a 
      0012EC 90 5C            [ 1]  333 	incw y 
      0012EE                        334 61$:
      0012EE 89               [ 2]  335 	pushw x 
      0012EF CD 17 C5         [ 4]  336 	call skip_string 
      0012F2 85               [ 2]  337 	popw x 
      0012F3                        338 62$:	
      0012F3 F6               [ 1]  339 	ld a,(x)
      0012F4 27 07            [ 1]  340 	jreq 63$ 
      0012F6 5C               [ 1]  341 	incw x  
      0012F7 90 F7            [ 1]  342 	ld (y),a 
      0012F9 90 5C            [ 1]  343 	incw y 
      0012FB 20 F6            [ 2]  344 	jra 62$ 
      0012FD                        345 63$: 
      0012FD A6 20            [ 1]  346 	ld a,#32 
      0012FF 90 F7            [ 1]  347 	ld (y),a 
      001301 90 5C            [ 1]  348 	incw y 
      001303 CC 12 40         [ 2]  349 	jp decomp_loop
      001306                        350 64$:
      001306 A1 02            [ 1]  351 	cp a,#TK_QSTR 
      001308 26 09            [ 1]  352 	jrne 7$
                                    353 ;; TK_QSTR
      00130A CD 11 5F         [ 4]  354 	call add_space
      00130D CD 11 87         [ 4]  355 	call cpy_quote  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      001310 CC 12 40         [ 2]  356 	jp decomp_loop
      001313                        357 7$:
      001313 A1 04            [ 1]  358 	cp a,#TK_CHAR 
      001315 26 10            [ 1]  359 	jrne 8$
                                    360 ;; TK_CHAR
      001317 CD 11 5F         [ 4]  361 	call add_space 
      00131A A6 5C            [ 1]  362 	ld a,#'\ 
      00131C 90 F7            [ 1]  363 	ld (y),a 
      00131E 90 5C            [ 1]  364 	incw y
      001320 F6               [ 1]  365 	ld a,(x)
      001321 72 5C 00 01      [ 1]  366 	inc in  
      001325 20 06            [ 2]  367 	jra 81$
      001327 A1 0A            [ 1]  368 8$: cp a,#TK_COLON 
      001329 26 09            [ 1]  369 	jrne 9$
      00132B A6 3A            [ 1]  370 	ld a,#':
      00132D                        371 81$:
      00132D 90 F7            [ 1]  372 	ld (y),a 
      00132F 90 5C            [ 1]  373 	incw y 
      001331                        374 82$:
      001331 CC 12 40         [ 2]  375 	jp decomp_loop
      001334                        376 9$: 
      001334 A1 09            [ 1]  377 	cp a,#TK_SHARP
      001336 22 0A            [ 1]  378 	jrugt 10$ 
      001338 A0 05            [ 1]  379 	sub a,#TK_ARRAY 
      00133A 5F               [ 1]  380 	clrw x 
      00133B 97               [ 1]  381 	ld xl,a
      00133C 1C 13 89         [ 2]  382 	addw x,#single_char 
      00133F F6               [ 1]  383 	ld a,(x)
      001340 20 EB            [ 2]  384 	jra 81$ 
      001342                        385 10$: 
      001342 A1 11            [ 1]  386 	cp a,#TK_MINUS 
      001344 22 0A            [ 1]  387 	jrugt 11$
      001346 A0 10            [ 1]  388 	sub a,#TK_PLUS 
      001348 5F               [ 1]  389 	clrw x 
      001349 97               [ 1]  390 	ld xl,a 
      00134A 1C 13 8E         [ 2]  391 	addw x,#add_char 
      00134D F6               [ 1]  392 	ld a,(x)
      00134E 20 DD            [ 2]  393 	jra 81$
      001350                        394 11$:
      001350 A1 22            [ 1]  395     cp a,#TK_MOD 
      001352 22 0A            [ 1]  396 	jrugt 12$
      001354 A0 20            [ 1]  397 	sub a,#TK_MULT
      001356 5F               [ 1]  398 	clrw x 
      001357 97               [ 1]  399 	ld xl,a 
      001358 1C 13 90         [ 2]  400 	addw x,#mul_char
      00135B F6               [ 1]  401 	ld a,(x)
      00135C 20 CF            [ 2]  402 	jra 81$
      00135E                        403 12$:
      00135E A0 31            [ 1]  404 	sub a,#TK_GT  
      001360 48               [ 1]  405 	sll a 
      001361 5F               [ 1]  406 	clrw x 
      001362 97               [ 1]  407 	ld xl,a 
      001363 1C 13 93         [ 2]  408 	addw x,#relop_str 
      001366 FE               [ 2]  409 	ldw x,(x)
      001367 F6               [ 1]  410 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      001368 5C               [ 1]  411 	incw x 
      001369 90 F7            [ 1]  412 	ld (y),a
      00136B 90 5C            [ 1]  413 	incw y 
      00136D F6               [ 1]  414 	ld a,(x)
      00136E 26 BD            [ 1]  415 	jrne 81$
      001370 CC 12 40         [ 2]  416 	jp decomp_loop 
      001373                        417 20$: 
      001373 90 7F            [ 1]  418 	clr (y)
      001375 1E 03            [ 2]  419 	ldw x,(STR,sp)
      001377 7B 01            [ 1]  420 	ld a,(BASE_SAV,sp)
      001379 C7 00 0A         [ 1]  421 	ld base,a 
      00137C 7B 02            [ 1]  422 	ld a,(WIDTH_SAV,sp)
      00137E C7 00 23         [ 1]  423 	ld tab_width,a
      001381 72 F2 03         [ 2]  424 	subw y,(STR,sp) 
      001384 90 9F            [ 1]  425 	ld a,yl 
      001386                        426 	_drop VSIZE 
      001386 5B 04            [ 2]    1     addw sp,#VSIZE 
      001388 81               [ 4]  427 	ret 
                                    428 
      001389 40 28 29 2C 23         429 single_char: .byte '@','(',')',',','#'
      00138E 2B 2D                  430 add_char: .byte '+','-'
      001390 2A 2F 25               431 mul_char: .byte '*','/','%'
      001393 13 9F 13 A1 13 A3 13   432 relop_str: .word gt,equal,ge,lt,ne,le 
             A6 13 AB 13 A8
      00139F 3E 00                  433 gt: .asciz ">"
      0013A1 3D 00                  434 equal: .asciz "="
      0013A3 3E 3D 00               435 ge: .asciz ">="
      0013A6 3C 00                  436 lt: .asciz "<"
      0013A8 3C 3D 00               437 le: .asciz "<="
      0013AB 3C 3E 00               438 ne:  .asciz "<>"
                                    439 
                                    440 ;----------------------------------
                                    441 ; search in kword_dict name
                                    442 ; from its execution address 
                                    443 ; input:
                                    444 ;   X       	cmd_index 
                                    445 ; output:
                                    446 ;   X 			cstr*  | 0 
                                    447 ;--------------------------------
                           000001   448 	CMDX=1 
                           000003   449 	LINK=3 
                           000004   450 	VSIZE=4
      0013AE                        451 cmd_name:
      0013AE                        452 	_vars VSIZE 
      0013AE 52 04            [ 2]    1     sub sp,#VSIZE 
      0013B0 72 5F 00 0D      [ 1]  453 	clr acc16 
      0013B4 1F 01            [ 2]  454 	ldw (CMDX,sp),x  
      0013B6 AE 32 ED         [ 2]  455 	ldw x,#kword_dict	
      0013B9 1F 03            [ 2]  456 1$:	ldw (LINK,sp),x
      0013BB E6 02            [ 1]  457 	ld a,(2,x)
      0013BD A4 0F            [ 1]  458 	and a,#15 
      0013BF C7 00 0E         [ 1]  459 	ld acc8,a 
      0013C2 1C 00 03         [ 2]  460 	addw x,#3
      0013C5 72 BB 00 0D      [ 2]  461 	addw x,acc16
      0013C9 FE               [ 2]  462 	ldw x,(x) ; command index  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0013CA 13 01            [ 2]  463 	cpw x,(CMDX,sp)
      0013CC 27 0C            [ 1]  464 	jreq 2$
      0013CE 1E 03            [ 2]  465 	ldw x,(LINK,sp)
      0013D0 FE               [ 2]  466 	ldw x,(x) 
      0013D1 1D 00 02         [ 2]  467 	subw x,#2  
      0013D4 26 E3            [ 1]  468 	jrne 1$
      0013D6 4F               [ 1]  469 	clr a 
      0013D7 5F               [ 1]  470 	clrw x 
      0013D8 20 05            [ 2]  471 	jra 9$
      0013DA 1E 03            [ 2]  472 2$: ldw x,(LINK,sp)
      0013DC 1C 00 02         [ 2]  473 	addw x,#2 	
      0013DF                        474 9$:	_drop VSIZE
      0013DF 5B 04            [ 2]    1     addw sp,#VSIZE 
      0013E1 81               [ 4]  475 	ret
                                    476 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     94 ; 24 bits integer variables 
      000030                         95 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     96 
                                     97 	.area BTXT (ABS)
      00007C                         98 	.org 0x7C  
                                     99 ; keep 'free_ram' as last variable 
                                    100 ; basic code compiled here. 
      00007C                        101 rsign: .blkw 1 ; "BC" 
      00007E                        102 rsize: .blkw 1 ; code size 	 
      000080                        103 free_ram: ; from here RAM free for BASIC text 
                                    104 
                                    105 	.area CODE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                    106 
                                    107 
                                    108 ;-------------------------------------
                                    109 ; retrun string length
                                    110 ; input:
                                    111 ;   X         .asciz  pointer 
                                    112 ; output:
                                    113 ;   X         not affected 
                                    114 ;   A         length 
                                    115 ;-------------------------------------
      0013E2                        116 strlen::
      0013E2 89               [ 2]  117 	pushw x 
      0013E3 4F               [ 1]  118 	clr a
      0013E4 7D               [ 1]  119 1$:	tnz (x) 
      0013E5 27 04            [ 1]  120 	jreq 9$ 
      0013E7 4C               [ 1]  121 	inc a 
      0013E8 5C               [ 1]  122 	incw x 
      0013E9 20 F9            [ 2]  123 	jra 1$ 
      0013EB 85               [ 2]  124 9$:	popw x 
      0013EC 81               [ 4]  125 	ret 
                                    126 
                                    127 ;------------------------------------
                                    128 ; compare 2 strings
                                    129 ; input:
                                    130 ;   X 		char* first string 
                                    131 ;   Y       char* second string 
                                    132 ; output:
                                    133 ;   A 		0 not == |1 ==  
                                    134 ;-------------------------------------
      0013ED                        135 strcmp:
      0013ED F6               [ 1]  136 	ld a,(x)
      0013EE 27 0B            [ 1]  137 	jreq 5$ 
      0013F0 90 F1            [ 1]  138 	cp a,(y) 
      0013F2 26 05            [ 1]  139 	jrne 4$ 
      0013F4 5C               [ 1]  140 	incw x 
      0013F5 90 5C            [ 1]  141 	incw y 
      0013F7 20 F4            [ 2]  142 	jra strcmp 
      0013F9                        143 4$: ; not same  
      0013F9 4F               [ 1]  144 	clr a 
      0013FA 81               [ 4]  145 	ret 
      0013FB                        146 5$: ; same 
      0013FB A6 01            [ 1]  147 	ld a,#1 
      0013FD 81               [ 4]  148 	ret 
                                    149 
                                    150 
                                    151 ;---------------------------------------
                                    152 ;  copy src to dest 
                                    153 ; input:
                                    154 ;   X 		dest 
                                    155 ;   Y 		src 
                                    156 ; output: 
                                    157 ;   X 		dest 
                                    158 ;----------------------------------
      0013FE                        159 strcpy::
      0013FE 88               [ 1]  160 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0013FF 89               [ 2]  161 	pushw x 
      001400 90 F6            [ 1]  162 1$: ld a,(y)
      001402 27 06            [ 1]  163 	jreq 9$ 
      001404 F7               [ 1]  164 	ld (x),a 
      001405 5C               [ 1]  165 	incw x 
      001406 90 5C            [ 1]  166 	incw y 
      001408 20 F6            [ 2]  167 	jra 1$ 
      00140A 7F               [ 1]  168 9$:	clr (x)
      00140B 85               [ 2]  169 	popw x 
      00140C 84               [ 1]  170 	pop a 
      00140D 81               [ 4]  171 	ret 
                                    172 
                                    173 ;---------------------------------------
                                    174 ; move memory block 
                                    175 ; input:
                                    176 ;   X 		destination 
                                    177 ;   Y 	    source 
                                    178 ;   acc16	bytes count 
                                    179 ; output:
                                    180 ;   none 
                                    181 ;--------------------------------------
                           000001   182 	INCR=1 ; incrament high byte 
                           000002   183 	LB=2 ; increment low byte 
                           000002   184 	VSIZE=2
      00140E                        185 move::
      00140E 88               [ 1]  186 	push a 
      00140F                        187 	_vars VSIZE 
      00140F 52 02            [ 2]    1     sub sp,#VSIZE 
      001411 0F 01            [ 1]  188 	clr (INCR,sp)
      001413 0F 02            [ 1]  189 	clr (LB,sp)
      001415 90 89            [ 2]  190 	pushw y 
      001417 13 01            [ 2]  191 	cpw x,(1,sp) ; compare DEST to SRC 
      001419 90 85            [ 2]  192 	popw y 
      00141B 27 31            [ 1]  193 	jreq move_exit ; x==y 
      00141D 2B 0E            [ 1]  194 	jrmi move_down
      00141F                        195 move_up: ; start from top address with incr=-1
      00141F 72 BB 00 0D      [ 2]  196 	addw x,acc16
      001423 72 B9 00 0D      [ 2]  197 	addw y,acc16
      001427 03 01            [ 1]  198 	cpl (INCR,sp)
      001429 03 02            [ 1]  199 	cpl (LB,sp)   ; increment = -1 
      00142B 20 05            [ 2]  200 	jra move_loop  
      00142D                        201 move_down: ; start from bottom address with incr=1 
      00142D 5A               [ 2]  202     decw x 
      00142E 90 5A            [ 2]  203 	decw y
      001430 0C 02            [ 1]  204 	inc (LB,sp) ; incr=1 
      001432                        205 move_loop:	
      001432 C6 00 0D         [ 1]  206     ld a, acc16 
      001435 CA 00 0E         [ 1]  207 	or a, acc8
      001438 27 14            [ 1]  208 	jreq move_exit 
      00143A 72 FB 01         [ 2]  209 	addw x,(INCR,sp)
      00143D 72 F9 01         [ 2]  210 	addw y,(INCR,sp) 
      001440 90 F6            [ 1]  211 	ld a,(y)
      001442 F7               [ 1]  212 	ld (x),a 
      001443 89               [ 2]  213 	pushw x 
      001444 CE 00 0D         [ 2]  214 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      001447 5A               [ 2]  215 	decw x 
      001448 CF 00 0D         [ 2]  216 	ldw acc16,x 
      00144B 85               [ 2]  217 	popw x 
      00144C 20 E4            [ 2]  218 	jra move_loop
      00144E                        219 move_exit:
      00144E                        220 	_drop VSIZE
      00144E 5B 02            [ 2]    1     addw sp,#VSIZE 
      001450 84               [ 1]  221 	pop a 
      001451 81               [ 4]  222 	ret 	
                                    223 
                                    224 ;------------------------------------
                                    225 ;  set all variables to zero 
                                    226 ; input:
                                    227 ;   none 
                                    228 ; output:
                                    229 ;	none
                                    230 ;------------------------------------
      001452                        231 clear_vars:
      001452 89               [ 2]  232 	pushw x 
      001453 88               [ 1]  233 	push a  
      001454 AE 00 30         [ 2]  234 	ldw x,#vars 
      001457 A6 4E            [ 1]  235 	ld a,#CELL_SIZE*26 
      001459 7F               [ 1]  236 1$:	clr (x)
      00145A 5C               [ 1]  237 	incw x 
      00145B 4A               [ 1]  238 	dec a 
      00145C 26 FB            [ 1]  239 	jrne 1$
      00145E 84               [ 1]  240 	pop a 
      00145F 85               [ 2]  241 	popw x 
      001460 81               [ 4]  242 	ret 
                                    243 
                                    244 
                                    245 ;-----------------------
                                    246 ;  display system 
                                    247 ;  information 
                                    248 ;-----------------------
                           000002   249 	MAJOR=2
                           000000   250 	MINOR=0 
      001461 0A 0A 54 69 6E 79 20   251 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    252 
      0014A7                        253 system_information:
      0014A7 AE 14 61         [ 2]  254 	ldw x,#software 
      0014AA CD 09 9D         [ 4]  255 	call puts 
      0014AD A6 02            [ 1]  256 	ld a,#MAJOR 
      0014AF C7 00 0E         [ 1]  257 	ld acc8,a 
      0014B2 5F               [ 1]  258 	clrw x 
      0014B3 CF 00 0C         [ 2]  259 	ldw acc24,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0014B6 72 5F 00 23      [ 1]  260 	clr tab_width  
      0014BA 35 0A 00 0A      [ 1]  261 	mov base, #10 
      0014BE CD 18 0B         [ 4]  262 	call prt_acc24 
      0014C1 A6 2E            [ 1]  263 	ld a,#'.
      0014C3 CD 09 40         [ 4]  264 	call putc 
      0014C6 A6 00            [ 1]  265 	ld a,#MINOR 
      0014C8 C7 00 0E         [ 1]  266 	ld acc8,a 
      0014CB 5F               [ 1]  267 	clrw x 
      0014CC CF 00 0C         [ 2]  268 	ldw acc24,x 
      0014CF CD 18 0B         [ 4]  269 	call prt_acc24
      0014D2 A6 0D            [ 1]  270 	ld a,#CR 
      0014D4 CD 09 40         [ 4]  271 	call putc
                                    272 ;call test 
      0014D7 81               [ 4]  273 	ret
                                    274 
      0014D8                        275 warm_init:
      0014D8 90 AE 17 73      [ 2]  276 	ldw y,#XSTACK_EMPTY  
      0014DC 72 5F 00 22      [ 1]  277 	clr flags 
      0014E0 72 5F 00 1F      [ 1]  278 	clr loop_depth 
      0014E4 35 04 00 23      [ 1]  279 	mov tab_width,#TAB_WIDTH 
      0014E8 35 0A 00 0A      [ 1]  280 	mov base,#10 
      0014EC AE 00 00         [ 2]  281 	ldw x,#0 
      0014EF CF 00 04         [ 2]  282 	ldw basicptr,x 
      0014F2 CF 00 00         [ 2]  283 	ldw in.w,x 
      0014F5 72 5F 00 03      [ 1]  284 	clr count
      0014F9 81               [ 4]  285 	ret 
                                    286 
                                    287 ;---------------------------
                                    288 ; reset BASIC text variables 
                                    289 ; and clear variables 
                                    290 ;---------------------------
      0014FA                        291 clear_basic:
      0014FA 89               [ 2]  292 	pushw x 
      0014FB 72 5F 00 03      [ 1]  293 	clr count
      0014FF 72 5F 00 01      [ 1]  294 	clr in  
      001503 AE 00 80         [ 2]  295 	ldw x,#free_ram 
      001506 CF 00 1B         [ 2]  296 	ldw txtbgn,x 
      001509 CF 00 1D         [ 2]  297 	ldw txtend,x 
      00150C CD 14 52         [ 4]  298 	call clear_vars 
      00150F 85               [ 2]  299 	popw x
      001510 81               [ 4]  300 	ret 
                                    301 
                                    302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    303 ;;   Tiny BASIC error messages     ;;
                                    304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001511                        305 err_msg:
      001511 00 00 15 33 15 40 15   306 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             4E 15 67 15 76
      00151D 15 8C 15 A2 15 BC 15   307 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             CD 15 DE
      001527 15 EA 16 1D 16 2D 16   308 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             41 16 54
      001531 16 61                  309 	.word err_overflow 
                                    310 
      001533 4D 65 6D 6F 72 79 20   311 err_mem_full: .asciz "Memory full\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



             66 75 6C 6C 0A 00
      001540 73 79 6E 74 61 78 20   312 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      00154E 6D 61 74 68 20 6F 70   313 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001567 64 69 76 69 73 69 6F   314 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001576 69 6E 76 61 6C 69 64   315 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00158C 72 75 6E 20 74 69 6D   316 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      0015A2 63 6F 6D 6D 61 6E 64   317 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0015BC 64 75 70 6C 69 63 61   318 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0015CD 46 69 6C 65 20 6E 6F   319 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0015DE 62 61 64 20 76 61 6C   320 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0015EA 46 69 6C 65 20 69 6E   321 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      00161D 4E 6F 20 64 61 74 61   322 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      00162D 4E 6F 20 70 72 6F 67   323 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      001641 46 69 6C 65 20 73 79   324 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001654 42 75 66 66 65 72 20   325 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      001661 6F 76 65 72 66 6C 6F   326 err_overflow: .asciz "overflow\n" 
             77 0A 00
                                    327 
      00166B 0A 72 75 6E 20 74 69   328 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      00167D 0A 63 6F 6D 70 69 6C   329 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      00168E 6C 61 73 74 20 74 6F   330 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    331 
      00169E                        332 syntax_error::
      00169E A6 02            [ 1]  333 	ld a,#ERR_SYNTAX 
                                    334 
      0016A0                        335 tb_error::
      0016A0 72 0A 00 22 4C   [ 2]  336 	btjt flags,#FCOMP,1$
      0016A5 88               [ 1]  337 	push a 
      0016A6 AE 16 6B         [ 2]  338 	ldw x, #rt_msg 
      0016A9 CD 09 9D         [ 4]  339 	call puts 
      0016AC 84               [ 1]  340 	pop a 
      0016AD AE 15 11         [ 2]  341 	ldw x, #err_msg 
      0016B0 72 5F 00 0D      [ 1]  342 	clr acc16 
      0016B4 48               [ 1]  343 	sll a
      0016B5 72 59 00 0D      [ 1]  344 	rlc acc16  
      0016B9 C7 00 0E         [ 1]  345 	ld acc8, a 
      0016BC 72 BB 00 0D      [ 2]  346 	addw x,acc16 
      0016C0 FE               [ 2]  347 	ldw x,(x)
      0016C1 CD 09 9D         [ 4]  348 	call puts
      0016C4 CE 00 04         [ 2]  349 	ldw x,basicptr 
                           000001   350 .if DEBUG 
      0016C7 C6 00 03         [ 1]  351 ld a,count 
      0016CA 90 5F            [ 1]  352 clrw y 
      0016CC 90 02            [ 1]  353 rlwa y  
      0016CE CD 06 9C         [ 4]  354 call hex_dump
      0016D1 CE 00 04         [ 2]  355 ldw x,basicptr
                                    356 .endif 
      0016D4 C6 00 01         [ 1]  357 	ld a,in 
      0016D7 CD 1F CB         [ 4]  358 	call prt_basic_line
      0016DA AE 16 8E         [ 2]  359 	ldw x,#tk_id 
      0016DD CD 09 9D         [ 4]  360 	call puts 
      0016E0 C6 00 02         [ 1]  361 	ld a,in.saved 
      0016E3 5F               [ 1]  362 	clrw x 
      0016E4 97               [ 1]  363 	ld xl,a 
      0016E5 72 BB 00 04      [ 2]  364 	addw x,basicptr 
      0016E9 F6               [ 1]  365 	ld a,(x)
      0016EA 5F               [ 1]  366 	clrw x 
      0016EB 97               [ 1]  367 	ld xl,a 
      0016EC CD 17 F4         [ 4]  368 	call prt_i16
      0016EF 20 35            [ 2]  369 	jra 6$
      0016F1                        370 1$:	
      0016F1 88               [ 1]  371 	push a 
      0016F2 AE 16 7D         [ 2]  372 	ldw x,#comp_msg
      0016F5 CD 09 9D         [ 4]  373 	call puts 
      0016F8 84               [ 1]  374 	pop a 
      0016F9 AE 15 11         [ 2]  375 	ldw x, #err_msg 
      0016FC 72 5F 00 0D      [ 1]  376 	clr acc16 
      001700 48               [ 1]  377 	sll a
      001701 72 59 00 0D      [ 1]  378 	rlc acc16  
      001705 C7 00 0E         [ 1]  379 	ld acc8, a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      001708 72 BB 00 0D      [ 2]  380 	addw x,acc16 
      00170C FE               [ 2]  381 	ldw x,(x)
      00170D CD 09 9D         [ 4]  382 	call puts
      001710 AE 16 68         [ 2]  383 	ldw x,#tib
      001713 CD 09 9D         [ 4]  384 	call puts 
      001716 A6 0D            [ 1]  385 	ld a,#CR 
      001718 CD 09 40         [ 4]  386 	call putc
      00171B CE 00 00         [ 2]  387 	ldw x,in.w
      00171E CD 0A 0A         [ 4]  388 	call spaces
      001721 A6 5E            [ 1]  389 	ld a,#'^
      001723 CD 09 40         [ 4]  390 	call putc 
      001726 AE 17 FF         [ 2]  391 6$: ldw x,#STACK_EMPTY 
      001729 94               [ 1]  392     ldw sp,x
                                    393 
      00172A                        394 warm_start:
      00172A CD 14 D8         [ 4]  395 	call warm_init
                                    396 ;----------------------------
                                    397 ;   BASIC interpreter
                                    398 ;----------------------------
      00172D                        399 cmd_line: ; user interface 
      00172D A6 0D            [ 1]  400 	ld a,#CR 
      00172F CD 09 40         [ 4]  401 	call putc 
      001732 A6 3E            [ 1]  402 	ld a,#'> 
      001734 CD 09 40         [ 4]  403 	call putc
      001737 CD 0A A2         [ 4]  404 	call readln
      00173A 72 5D 00 03      [ 1]  405 	tnz count 
      00173E 27 ED            [ 1]  406 	jreq cmd_line
      001740 CD 10 CB         [ 4]  407 	call compile
                                    408 ;;;;;;;;;;;;;;;;;;;;;;	
                                    409 ;pushw y 
                                    410 ;ldw x,txtbgn  
                                    411 ;ldw y,txtend
                                    412 ;ldw acc16,x   
                                    413 ;subw y,acc16 
                                    414 ;call hex_dump
                                    415 ;popw y 
                                    416 ;;;;;;;;;;;;;;;;;;;;;;
                                    417 
                                    418 ; if text begin with a line number
                                    419 ; the compiler set count to zero    
                                    420 ; so code is not interpreted
      001743 72 5D 00 03      [ 1]  421 	tnz count 
      001747 27 E4            [ 1]  422 	jreq cmd_line
                                    423 	
                                    424 ; if direct command 
                                    425 ; it's ready to interpret 
                                    426 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    427 ;; This is the interpreter loop
                                    428 ;; for each BASIC code line. 
                                    429 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      001749                        430 interpreter: 
      001749 C6 00 01         [ 1]  431 	ld a,in 
      00174C C1 00 03         [ 1]  432 	cp a,count 
      00174F 2B 1D            [ 1]  433 	jrmi interp_loop
      001751                        434 next_line:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      001751 72 01 00 22 D7   [ 2]  435 	btjf flags, #FRUN, cmd_line
      001756 CE 00 04         [ 2]  436 	ldw x,basicptr
      001759 72 BB 00 00      [ 2]  437 	addw x,in.w 
      00175D C3 00 1D         [ 2]  438 	cpw x,txtend 
      001760 2A C8            [ 1]  439 	jrpl warm_start
      001762 CF 00 04         [ 2]  440 	ldw basicptr,x ; start of next line  
      001765 E6 02            [ 1]  441 	ld a,(2,x)
      001767 C7 00 03         [ 1]  442 	ld count,a 
      00176A 35 03 00 01      [ 1]  443 	mov in,#3 ; skip first 3 bytes of line 
      00176E                        444 interp_loop:
      00176E CD 17 9F         [ 4]  445 	call next_token
      001771 A1 00            [ 1]  446 	cp a,#TK_NONE 
      001773 27 DC            [ 1]  447 	jreq next_line 
      001775 A1 80            [ 1]  448 	cp a,#TK_CMD
      001777 26 06            [ 1]  449 	jrne 1$
      001779 CD 17 B8         [ 4]  450 	call get_code_addr
      00177C FD               [ 4]  451 	call (x) 
      00177D 20 EF            [ 2]  452 	jra interp_loop 
      00177F                        453 1$:	 
      00177F A1 85            [ 1]  454 	cp a,#TK_VAR
      001781 26 05            [ 1]  455 	jrne 2$
      001783 CD 1C 86         [ 4]  456 	call let_var  
      001786 20 E6            [ 2]  457 	jra interp_loop 
      001788                        458 2$:	
      001788 A1 05            [ 1]  459 	cp a,#TK_ARRAY 
      00178A 26 05            [ 1]  460 	jrne 3$
      00178C CD 1C 81         [ 4]  461 	call let_array 
      00178F 20 DD            [ 2]  462 	jra interp_loop
      001791                        463 3$:	
      001791 A1 0A            [ 1]  464 	cp a,#TK_COLON 
      001793 27 D9            [ 1]  465 	jreq interp_loop
      001795 A1 03            [ 1]  466 4$: cp a,#TK_LABEL
      001797 CD 17 C5         [ 4]  467 	call skip_string 
      00179A 20 D2            [ 2]  468 	jra interp_loop 
      00179C CC 16 9E         [ 2]  469 5$:	jp syntax_error 
                                    470 
                                    471 ;--------------------------
                                    472 ; extract next token from
                                    473 ; token list 
                                    474 ; basicptr -> base address 
                                    475 ; in  -> offset in list array 
                                    476 ; output:
                                    477 ;   A 		token attribute
                                    478 ;   X 		*token_value 
                                    479 ;----------------------------------------
      00179F                        480 next_token::
                                    481 ;	clrw x 
      00179F C6 00 01         [ 1]  482 	ld a,in 
      0017A2 C7 00 02         [ 1]  483 	ld in.saved,a ; in case "_unget_token" needed 
                                    484 ; don't replace sub by "cp a,count" 
                                    485 ; if end of line must return with A=0   	
      0017A5 C0 00 03         [ 1]  486 	sub a,count 
      0017A8 27 0D            [ 1]  487 	jreq 9$ ; end of line 
      0017AA                        488 0$: 
      0017AA CE 00 04         [ 2]  489 	ldw x,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      0017AD 72 BB 00 00      [ 2]  490 	addw x,in.w 
      0017B1 F6               [ 1]  491 	ld a,(x)
      0017B2 5C               [ 1]  492 	incw x
      0017B3 72 5C 00 01      [ 1]  493 	inc in   
      0017B7 81               [ 4]  494 9$: ret 
                                    495 
                                    496 ;------------------------
                                    497 ; get cmd and function 
                                    498 ; code address 
                                    499 ; input:
                                    500 ;    X   * cmd|func index 
                                    501 ;        in code_addr table 
                                    502 ;------------------------
      0017B8                        503 get_code_addr:
      0017B8 FE               [ 2]  504 	ldw x,(x)
      0017B9 DE 32 F5         [ 2]  505 	ldw x,(code_addr,x)
      0017BC 72 5C 00 01      [ 1]  506 	inc in 
      0017C0 72 5C 00 01      [ 1]  507 	inc in 
      0017C4 81               [ 4]  508 	ret
                                    509 
                                    510 ;-------------------------
                                    511 ;  skip .asciz in BASIC line 
                                    512 ;  name 
                                    513 ;  input:
                                    514 ;     x		* string 
                                    515 ;  output:
                                    516 ;     none 
                                    517 ;-------------------------
      0017C5                        518 skip_string:
      0017C5 F6               [ 1]  519 	ld a,(x)
      0017C6 27 03            [ 1]  520 	jreq 1$
      0017C8 5C               [ 1]  521 	incw x 
      0017C9 20 FA            [ 2]  522 	jra skip_string 
      0017CB 5C               [ 1]  523 1$: incw x 	
      0017CC 72 B0 00 04      [ 2]  524 	subw x,basicptr 
      0017D0 CF 00 00         [ 2]  525 	ldw in.w,x 
      0017D3 81               [ 4]  526 	ret 
                                    527 
                                    528 ;---------------------
                                    529 ; extract 16 bits  
                                    530 ; address from BASIC
                                    531 ; code 
                                    532 ; input:
                                    533 ;    X    *address
                                    534 ; output:
                                    535 ;    X    address 
                                    536 ;-------------------- 
      0017D4                        537 get_addr:
      0017D4 FE               [ 2]  538 	ldw x,(x)
      0017D5 72 5C 00 01      [ 1]  539 	inc in 
      0017D9 72 5C 00 01      [ 1]  540 	inc in 
      0017DD 81               [ 4]  541 	ret 
                                    542 
                                    543 ;--------------------
                                    544 ; extract int24_t  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    545 ; value from BASIC 
                                    546 ; code 
                                    547 ; input:
                                    548 ;    X   *integer 
                                    549 ; output:
                                    550 ;    A:X   int24  
                                    551 ;--------------------
      0017DE                        552 get_int24:
      0017DE F6               [ 1]  553 	ld a,(x)
      0017DF EE 01            [ 2]  554 	ldw x,(1,x)
                                    555 ; skip 3 bytes 
      0017E1 72 5C 00 01      [ 1]  556 	inc in 
      0017E5 72 5C 00 01      [ 1]  557 	inc in 
      0017E9 72 5C 00 01      [ 1]  558 	inc in 
      0017ED 81               [ 4]  559 	ret 
                                    560 
                                    561 ;-------------------------
                                    562 ; get character from 
                                    563 ; BASIC code 
                                    564 ; input:
                                    565 ;    X   *char 
                                    566 ; output:
                                    567 ;    A    char 
                                    568 ;-------------------------
      0017EE                        569 get_char:
      0017EE F6               [ 1]  570 	ld a,(x)
      0017EF 72 5C 00 01      [ 1]  571 	inc in  
      0017F3 81               [ 4]  572     ret 
                                    573 
                                    574 ;-----------------------------------
                                    575 ; print a 16 bit integer 
                                    576 ; using variable 'base' as conversion
                                    577 ; format.
                                    578 ; input:
                                    579 ;    X       integer to print 
                                    580 ;   'base'    conversion base 
                                    581 ; output:
                                    582 ;   terminal  
                                    583 ;-----------------------------------
      0017F4                        584 prt_i16:
      0017F4 72 5F 00 0C      [ 1]  585 	clr acc24 
      0017F8 CF 00 0D         [ 2]  586 	ldw acc16,x 
      0017FB A6 10            [ 1]  587 	ld a,#16
      0017FD C1 00 0A         [ 1]  588 	cp a,base
      001800 27 09            [ 1]  589 	jreq prt_acc24  
      001802 72 0F 00 0D 04   [ 2]  590 	btjf acc16,#7,prt_acc24
      001807 72 53 00 0C      [ 1]  591 	cpl acc24 ; sign extend 
                                    592 	
                                    593 ;------------------------------------
                                    594 ; print integer in acc24 
                                    595 ; input:
                                    596 ;	acc24 		integer to print 
                                    597 ;	'base' 		numerical base for conversion 
                                    598 ;   'tab_width' field width 
                                    599 ;    A 			signed||unsigned conversion
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    600 ;  output:
                                    601 ;    A          string length
                                    602 ;------------------------------------
      00180B                        603 prt_acc24:
      00180B A6 FF            [ 1]  604 	ld a,#255  ; signed conversion  
      00180D CD 18 31         [ 4]  605     call itoa  ; conversion entier en  .asciz
      001810 CD 11 75         [ 4]  606 	call right_align  
      001813 88               [ 1]  607 	push a 
      001814 CD 09 9D         [ 4]  608 	call puts
      001817 84               [ 1]  609 	pop a 
      001818 81               [ 4]  610     ret	
                                    611 
                                    612 ;---------------------------------------
                                    613 ;  print value at xstack top 
                                    614 ;---------------------------------------
      001819                        615 print_top: 
      001819                        616 	_xpop 
      001819 90 F6            [ 1]    1     ld a,(y)
      00181B 93               [ 1]    2     ldw x,y 
      00181C EE 01            [ 2]    3     ldw x,(1,x)
      00181E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001822 C7 00 0C         [ 1]  617 	ld acc24,a 
      001825 CF 00 0D         [ 2]  618 	ldw acc16,x 
      001828 CD 18 0B         [ 4]  619 	call prt_acc24 
      00182B A6 20            [ 1]  620 	ld a,#SPACE
      00182D CD 09 40         [ 4]  621 	call putc 
      001830 81               [ 4]  622 	ret 
                                    623 
                                    624 ;------------------------------------
                                    625 ; convert integer in acc24 to string
                                    626 ; input:
                                    627 ;   'base'	conversion base 
                                    628 ;	acc24	integer to convert
                                    629 ;   A       0=unsigned, else signed 
                                    630 ; output:
                                    631 ;   X  		pointer to first char of string
                                    632 ;   A       string length
                                    633 ;------------------------------------
                           000001   634 	SIGN=1  ; integer sign 
                           000002   635 	LEN=2 
                           000003   636 	PSTR=3
                           000004   637 	VSIZE=4 ;locals size
      001831                        638 itoa::
      001831                        639 	_vars VSIZE
      001831 52 04            [ 2]    1     sub sp,#VSIZE 
      001833 0F 02            [ 1]  640 	clr (LEN,sp) ; string length  
      001835 0F 01            [ 1]  641 	clr (SIGN,sp)    ; sign
      001837 4D               [ 1]  642 	tnz A
      001838 27 11            [ 1]  643 	jreq 1$ ; unsigned conversion  
      00183A C6 00 0A         [ 1]  644 	ld a,base 
      00183D A1 0A            [ 1]  645 	cp a,#10
      00183F 26 0A            [ 1]  646 	jrne 1$
                                    647 	; base 10 string display with negative sign if bit 23==1
      001841 72 0F 00 0C 05   [ 2]  648 	btjf acc24,#7,1$
      001846 03 01            [ 1]  649 	cpl (SIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      001848 CD 02 09         [ 4]  650 	call neg_acc24
      00184B                        651 1$:
                                    652 ; initialize string pointer 
      00184B AE 16 68         [ 2]  653 	ldw x,#tib 
      00184E 1C 00 50         [ 2]  654 	addw x,#TIB_SIZE
      001851 5A               [ 2]  655 	decw x 
      001852 7F               [ 1]  656 	clr (x)
      001853                        657 itoa_loop:
      001853 C6 00 0A         [ 1]  658     ld a,base
                                    659 ;	ldw (PSTR,sp),x 
      001856 CD 03 05         [ 4]  660     call divu24_8 ; acc24/A 
                                    661 ;	ldw x,(PSTR,sp)
      001859 AB 30            [ 1]  662     add a,#'0  ; remainder of division
      00185B A1 3A            [ 1]  663     cp a,#'9+1
      00185D 2B 02            [ 1]  664     jrmi 2$
      00185F AB 07            [ 1]  665     add a,#7 
      001861                        666 2$:	
      001861 5A               [ 2]  667 	decw x
      001862 F7               [ 1]  668     ld (x),a
      001863 0C 02            [ 1]  669 	inc (LEN,sp)
                                    670 	; if acc24==0 conversion done
      001865 C6 00 0C         [ 1]  671 	ld a,acc24
      001868 CA 00 0D         [ 1]  672 	or a,acc16
      00186B CA 00 0E         [ 1]  673 	or a,acc8
      00186E 26 E3            [ 1]  674     jrne itoa_loop
                                    675 	;conversion done, next add '$' or '-' as required
      001870 C6 00 0A         [ 1]  676 	ld a,base 
      001873 A1 10            [ 1]  677 	cp a,#16
      001875 27 08            [ 1]  678 	jreq 8$
      001877 7B 01            [ 1]  679 	ld a,(SIGN,sp)
      001879 27 0A            [ 1]  680     jreq 10$
      00187B A6 2D            [ 1]  681     ld a,#'-
      00187D 20 02            [ 2]  682 	jra 9$ 
      00187F                        683 8$:	
      00187F A6 24            [ 1]  684 	ld a,#'$ 
      001881 5A               [ 2]  685 9$: decw x
      001882 F7               [ 1]  686     ld (x),a
      001883 0C 02            [ 1]  687 	inc (LEN,sp)
      001885                        688 10$:
      001885 7B 02            [ 1]  689 	ld a,(LEN,sp)
      001887                        690 	_drop VSIZE
      001887 5B 04            [ 2]    1     addw sp,#VSIZE 
      001889 81               [ 4]  691 	ret
                                    692 
                                    693 ;------------------------------------
                                    694 ; convert alpha to uppercase
                                    695 ; input:
                                    696 ;    a  character to convert
                                    697 ; output:
                                    698 ;    a  uppercase character
                                    699 ;------------------------------------
      00188A                        700 to_upper::
      00188A A1 61            [ 1]  701 	cp a,#'a
      00188C 2A 01            [ 1]  702 	jrpl 1$
      00188E 81               [ 4]  703 0$:	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      00188F A1 7A            [ 1]  704 1$: cp a,#'z	
      001891 22 FB            [ 1]  705 	jrugt 0$
      001893 A0 20            [ 1]  706 	sub a,#32
      001895 81               [ 4]  707 	ret
                                    708 	
                                    709 ;------------------------------------
                                    710 ; convert pad content in integer
                                    711 ; input:
                                    712 ;    x		* .asciz to convert
                                    713 ; output:
                                    714 ;    acc24      int24_t
                                    715 ;------------------------------------
                                    716 	; local variables
                           000001   717 	SIGN=1 ; 1 byte, 
                           000002   718 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   719 	TEMP=3 ; 1 byte, temporary storage
                           000003   720 	VSIZE=3 ; 3 bytes reserved for local storage
      001896                        721 atoi24::
      001896 89               [ 2]  722 	pushw x 
      001897                        723 	_vars VSIZE
      001897 52 03            [ 2]    1     sub sp,#VSIZE 
                                    724 	; acc24=0 
      001899 72 5F 00 0C      [ 1]  725 	clr acc24    
      00189D 72 5F 00 0D      [ 1]  726 	clr acc16
      0018A1 72 5F 00 0E      [ 1]  727 	clr acc8 
      0018A5 0F 01            [ 1]  728 	clr (SIGN,sp)
      0018A7 A6 0A            [ 1]  729 	ld a,#10
      0018A9 6B 02            [ 1]  730 	ld (BASE,sp),a ; default base decimal
      0018AB F6               [ 1]  731 	ld a,(x)
      0018AC 27 47            [ 1]  732 	jreq 9$  ; completed if 0
      0018AE A1 2D            [ 1]  733 	cp a,#'-
      0018B0 26 04            [ 1]  734 	jrne 1$
      0018B2 03 01            [ 1]  735 	cpl (SIGN,sp)
      0018B4 20 08            [ 2]  736 	jra 2$
      0018B6 A1 24            [ 1]  737 1$: cp a,#'$
      0018B8 26 06            [ 1]  738 	jrne 3$
      0018BA A6 10            [ 1]  739 	ld a,#16
      0018BC 6B 02            [ 1]  740 	ld (BASE,sp),a
      0018BE 5C               [ 1]  741 2$:	incw x
      0018BF F6               [ 1]  742 	ld a,(x)
      0018C0                        743 3$:	
      0018C0 A1 61            [ 1]  744 	cp a,#'a
      0018C2 2B 02            [ 1]  745 	jrmi 4$
      0018C4 A0 20            [ 1]  746 	sub a,#32
      0018C6 A1 30            [ 1]  747 4$:	cp a,#'0
      0018C8 2B 2B            [ 1]  748 	jrmi 9$
      0018CA A0 30            [ 1]  749 	sub a,#'0
      0018CC A1 0A            [ 1]  750 	cp a,#10
      0018CE 2B 06            [ 1]  751 	jrmi 5$
      0018D0 A0 07            [ 1]  752 	sub a,#7
      0018D2 11 02            [ 1]  753 	cp a,(BASE,sp)
      0018D4 2A 1F            [ 1]  754 	jrpl 9$
      0018D6 6B 03            [ 1]  755 5$:	ld (TEMP,sp),a
      0018D8 7B 02            [ 1]  756 	ld a,(BASE,sp)
      0018DA CD 02 26         [ 4]  757 	call mulu24_8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0018DD 7B 03            [ 1]  758 	ld a,(TEMP,sp)
      0018DF CB 00 0E         [ 1]  759 	add a,acc24+2
      0018E2 C7 00 0E         [ 1]  760 	ld acc24+2,a
      0018E5 4F               [ 1]  761 	clr a
      0018E6 C9 00 0D         [ 1]  762 	adc a,acc24+1
      0018E9 C7 00 0D         [ 1]  763 	ld acc24+1,a
      0018EC 4F               [ 1]  764 	clr a
      0018ED C9 00 0C         [ 1]  765 	adc a,acc24
      0018F0 C7 00 0C         [ 1]  766 	ld acc24,a
      0018F3 20 C9            [ 2]  767 	jra 2$
      0018F5 0D 01            [ 1]  768 9$:	tnz (SIGN,sp)
      0018F7 27 03            [ 1]  769     jreq atoi_exit
      0018F9 CD 02 09         [ 4]  770     call neg_acc24
      0018FC                        771 atoi_exit: 
      0018FC                        772 	_drop VSIZE
      0018FC 5B 03            [ 2]    1     addw sp,#VSIZE 
      0018FE 85               [ 2]  773 	popw x ; restore x
      0018FF 81               [ 4]  774 	ret
                                    775 
                                    776 
                                    777 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    778 ;;   TINY BASIC  operators,
                                    779 ;;   commands and functions 
                                    780 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    781 
                                    782 ;---------------------------------
                                    783 ; dictionary search 
                                    784 ; input:
                                    785 ;	X 		dictionary entry point, name field  
                                    786 ;   y		.asciz name to search 
                                    787 ; output:
                                    788 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    789 ;  X		cmd_index
                                    790 ;---------------------------------
                           000001   791 	NLEN=1 ; cmd length 
                           000002   792 	XSAVE=2
                           000004   793 	YSAVE=4
                           000005   794 	VSIZE=5 
      001900                        795 search_dict::
      001900                        796 	_vars VSIZE 
      001900 52 05            [ 2]    1     sub sp,#VSIZE 
      001902 17 04            [ 2]  797 	ldw (YSAVE,sp),y 
      001904                        798 search_next:
      001904 1F 02            [ 2]  799 	ldw (XSAVE,sp),x 
                                    800 ; get name length in dictionary	
      001906 F6               [ 1]  801 	ld a,(x)
      001907 A4 0F            [ 1]  802 	and a,#0xf 
      001909 6B 01            [ 1]  803 	ld (NLEN,sp),a  
      00190B 16 04            [ 2]  804 	ldw y,(YSAVE,sp) ; name pointer 
      00190D 5C               [ 1]  805 	incw x 
      00190E                        806 cp_loop:
      00190E 90 F6            [ 1]  807 	ld a,(y)
      001910 27 1B            [ 1]  808 	jreq str_match 
      001912 0D 01            [ 1]  809 	tnz (NLEN,sp)
      001914 27 0A            [ 1]  810 	jreq no_match  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      001916 F1               [ 1]  811 	cp a,(x)
      001917 26 07            [ 1]  812 	jrne no_match 
      001919 90 5C            [ 1]  813 	incw y 
      00191B 5C               [ 1]  814 	incw x
      00191C 0A 01            [ 1]  815 	dec (NLEN,sp)
      00191E 20 EE            [ 2]  816 	jra cp_loop 
      001920                        817 no_match:
      001920 1E 02            [ 2]  818 	ldw x,(XSAVE,sp) 
      001922 1D 00 02         [ 2]  819 	subw x,#2 ; move X to link field
      001925 4B 00            [ 1]  820 	push #TK_NONE 
      001927 FE               [ 2]  821 	ldw x,(x) ; next word link 
      001928 84               [ 1]  822 	pop a ; TK_NONE 
      001929 27 1D            [ 1]  823 	jreq search_exit  ; not found  
                                    824 ;try next 
      00192B 20 D7            [ 2]  825 	jra search_next
      00192D                        826 str_match:
      00192D 1E 02            [ 2]  827 	ldw x,(XSAVE,sp)
      00192F F6               [ 1]  828 	ld a,(X)
      001930 6B 01            [ 1]  829 	ld (NLEN,sp),a ; needed to test keyword type  
      001932 A4 0F            [ 1]  830 	and a,#NLEN_MASK 
                                    831 ; move x to procedure address field 	
      001934 4C               [ 1]  832 	inc a 
      001935 C7 00 0E         [ 1]  833 	ld acc8,a 
      001938 72 5F 00 0D      [ 1]  834 	clr acc16 
      00193C 72 BB 00 0D      [ 2]  835 	addw x,acc16 
      001940 FE               [ 2]  836 	ldw x,(x) ; routine index  
                                    837 ;determine keyword type bits 7:4 
      001941 7B 01            [ 1]  838 	ld a,(NLEN,sp)
      001943 A4 F0            [ 1]  839 	and a,#KW_TYPE_MASK 
      001945 4E               [ 1]  840 	swap a 
      001946 AB 80            [ 1]  841 	add a,#128
      001948                        842 search_exit: 
      001948                        843 	_drop VSIZE 
      001948 5B 05            [ 2]    1     addw sp,#VSIZE 
      00194A 81               [ 4]  844 	ret 
                                    845 
                                    846 ;---------------------
                                    847 ; check if next token
                                    848 ;  is of expected type 
                                    849 ; input:
                                    850 ;   A 		 expected token attribute
                                    851 ;  ouput:
                                    852 ;   none     if fail call syntax_error 
                                    853 ;--------------------
      00194B                        854 expect:
      00194B 88               [ 1]  855 	push a 
      00194C CD 17 9F         [ 4]  856 	call next_token 
      00194F 11 01            [ 1]  857 	cp a,(1,sp)
      001951 27 03            [ 1]  858 	jreq 1$
      001953 CC 16 9E         [ 2]  859 	jp syntax_error
      001956 84               [ 1]  860 1$: pop a 
      001957 81               [ 4]  861 	ret 
                                    862 
                                    863 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    864 ; parse arguments list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



                                    865 ; between ()
                                    866 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001958                        867 func_args:
      001958 A6 06            [ 1]  868 	ld a,#TK_LPAREN 
      00195A CD 19 4B         [ 4]  869 	call expect 
                                    870 ; expected to continue in arg_list 
                                    871 ; caller must check for TK_RPAREN 
                                    872 
                                    873 ;-------------------------------
                                    874 ; parse embedded BASIC routines 
                                    875 ; arguments list.
                                    876 ; arg_list::=  expr[','expr]*
                                    877 ; all arguments are of int24_t type
                                    878 ; and pushed on stack 
                                    879 ; input:
                                    880 ;   none
                                    881 ; output:
                                    882 ;   xstack{n}   arguments pushed on xstack
                                    883 ;   A 	number of arguments pushed on xstack  
                                    884 ;--------------------------------
      00195D                        885 arg_list:
      00195D 4B 00            [ 1]  886 	push #0
      00195F CD 1B A1         [ 4]  887 1$:	call condition 
      001962 4D               [ 1]  888 	tnz a 
      001963 27 12            [ 1]  889 	jreq 7$  
      001965 0C 01            [ 1]  890 	inc (1,sp)
      001967 CD 17 9F         [ 4]  891 	call next_token 
      00196A A1 08            [ 1]  892 	cp a,#TK_COMMA 
      00196C 27 F1            [ 1]  893 	jreq 1$ 
      00196E A1 07            [ 1]  894 	cp a,#TK_RPAREN
      001970 27 05            [ 1]  895 	jreq 7$
      001972                        896 	_unget_token 
      001972 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001977 84               [ 1]  897 7$:	pop a  
      001978 81               [ 4]  898 	ret 
                                    899 
                                    900 ;--------------------------------
                                    901 ;   BASIC commnands 
                                    902 ;--------------------------------
                                    903 
                                    904 ;--------------------------------
                                    905 ;  arithmetic and relational 
                                    906 ;  routines
                                    907 ;  operators precedence
                                    908 ;  highest to lowest
                                    909 ;  operators on same row have 
                                    910 ;  same precedence and are executed
                                    911 ;  from left to right.
                                    912 ;	'*','/','%'
                                    913 ;   '-','+'
                                    914 ;   '=','>','<','>=','<=','<>','><'
                                    915 ;   '<>' and '><' are equivalent for not equal.
                                    916 ;--------------------------------
                                    917 
                                    918 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



                                    919 ; return array element
                                    920 ; address from @(expr)
                                    921 ; input:
                                    922 ;   A 		TK_ARRAY
                                    923 ; output:
                                    924 ;	X 		element address 
                                    925 ;----------------------
      001979                        926 get_array_element:
      001979 CD 19 58         [ 4]  927 	call func_args 
      00197C A1 01            [ 1]  928 	cp a,#1
      00197E 27 03            [ 1]  929 	jreq 1$
      001980 CC 16 9E         [ 2]  930 	jp syntax_error
      001983                        931 1$: _xpop 
      001983 90 F6            [ 1]    1     ld a,(y)
      001985 93               [ 1]    2     ldw x,y 
      001986 EE 01            [ 2]    3     ldw x,(1,x)
      001988 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    932     ; ignore A, index < 65536 in any case 
                                    933 	; check for bounds 
      00198C C3 00 20         [ 2]  934 	cpw x,array_size 
      00198F 23 05            [ 2]  935 	jrule 3$
                                    936 ; bounds {1..array_size}	
      001991 A6 0A            [ 1]  937 2$: ld a,#ERR_BAD_VALUE 
      001993 CC 16 A0         [ 2]  938 	jp tb_error 
      001996 5D               [ 2]  939 3$: tnzw  x
      001997 27 F8            [ 1]  940 	jreq 2$ 
      001999 89               [ 2]  941 	pushw x 
      00199A 58               [ 2]  942 	sllw x 
      00199B 72 FB 01         [ 2]  943 	addw x,(1,sp) ; index*size_of(int24)
      00199E 1F 01            [ 2]  944 	ldw (1,sp),x  
      0019A0 AE 16 68         [ 2]  945 	ldw x,#tib ; array is below tib 
      0019A3 72 F0 01         [ 2]  946 	subw x,(1,sp)
      0019A6                        947 	_drop 2   
      0019A6 5B 02            [ 2]    1     addw sp,#2 
      0019A8 81               [ 4]  948 	ret 
                                    949 
                                    950 
                                    951 ;***********************************
                                    952 ;   expression parse,execute 
                                    953 ;***********************************
                                    954 ;-----------------------------------
                                    955 ; factor ::= ['+'|'-'|e]  var | @ |
                                    956 ;			 integer | function |
                                    957 ;			 '('relation')' 
                                    958 ; output:
                                    959 ;   A       token attribute 
                                    960 ;   xstack  value  
                                    961 ; ---------------------------------
                           000001   962 	NEG=1
                           000001   963 	VSIZE=1
      0019A9                        964 factor:
      0019A9                        965 	_vars VSIZE 
      0019A9 52 01            [ 2]    1     sub sp,#VSIZE 
      0019AB 0F 01            [ 1]  966 	clr (NEG,sp)
      0019AD CD 17 9F         [ 4]  967 	call next_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      0019B0 4D               [ 1]  968 	tnz a 
      0019B1 26 03            [ 1]  969 	jrne 1$ 
      0019B3 CC 1A 42         [ 2]  970 	jp 22$ 
      0019B6 A1 10            [ 1]  971 1$:	cp a,#TK_PLUS 
      0019B8 27 06            [ 1]  972 	jreq 2$
      0019BA A1 11            [ 1]  973 	cp a,#TK_MINUS 
      0019BC 26 05            [ 1]  974 	jrne 4$ 
      0019BE 03 01            [ 1]  975 	cpl (NEG,sp)
      0019C0                        976 2$:	
      0019C0 CD 17 9F         [ 4]  977 	call next_token
      0019C3                        978 4$:
      0019C3 4D               [ 1]  979 	tnz a 
      0019C4 26 03            [ 1]  980 	jrne 41$ 
      0019C6 CC 16 9E         [ 2]  981 	jp syntax_error  
      0019C9                        982 41$:	
      0019C9 A1 81            [ 1]  983 	cp a,#TK_IFUNC 
      0019CB 26 06            [ 1]  984 	jrne 5$ 
      0019CD CD 17 B8         [ 4]  985 	call get_code_addr 
      0019D0 FD               [ 4]  986 	call (x); result in A:X  
      0019D1 20 5D            [ 2]  987 	jra 18$ 
      0019D3                        988 5$:
      0019D3 A1 84            [ 1]  989 	cp a,#TK_INTGR
      0019D5 26 05            [ 1]  990 	jrne 6$
      0019D7 CD 17 DE         [ 4]  991 	call get_int24 ; A:X
      0019DA 20 54            [ 2]  992 	jra 18$
      0019DC                        993 6$:
      0019DC A1 05            [ 1]  994 	cp a,#TK_ARRAY
      0019DE 26 05            [ 1]  995 	jrne 7$
      0019E0 CD 19 79         [ 4]  996 	call get_array_element
      0019E3 20 07            [ 2]  997     jra 71$
      0019E5                        998 7$:
      0019E5 A1 85            [ 1]  999 	cp a,#TK_VAR 
      0019E7 26 08            [ 1] 1000 	jrne 8$
      0019E9 CD 17 D4         [ 4] 1001 	call get_addr 
      0019EC                       1002 71$: ; put value in A:X
      0019EC F6               [ 1] 1003 	ld a,(x)
      0019ED EE 01            [ 2] 1004 	ldw x,(1,x)
      0019EF 20 3F            [ 2] 1005 	jra 18$
      0019F1                       1006 8$:
      0019F1 A1 03            [ 1] 1007 	cp a,#TK_LABEL 
      0019F3 26 10            [ 1] 1008 	jrne 9$ 
      0019F5 89               [ 2] 1009 	pushw x 
      0019F6 CD 17 C5         [ 4] 1010 	call skip_string
      0019F9 85               [ 2] 1011 	popw x 
      0019FA CD 1D 5A         [ 4] 1012 	call search_const 
      0019FD 5D               [ 2] 1013 	tnzw x 
      0019FE 27 28            [ 1] 1014 	jreq 16$
      001A00 CD 1C B6         [ 4] 1015 	call get_const_value ; in A:X 
      001A03 20 2B            [ 2] 1016 	jra 18$
      001A05                       1017 9$: 
      001A05 A1 82            [ 1] 1018 	cp a,#TK_CFUNC 
      001A07 26 08            [ 1] 1019 	jrne 12$
      001A09 CD 17 B8         [ 4] 1020 	call get_code_addr 
      001A0C FD               [ 4] 1021 	call(x)
      001A0D 5F               [ 1] 1022 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001A0E 02               [ 1] 1023 	rlwa x  ; char>int24 in A:X 
      001A0F 20 1F            [ 2] 1024 	jra 18$ 	 
      001A11                       1025 12$:			
      001A11 A1 06            [ 1] 1026 	cp a,#TK_LPAREN
      001A13 26 13            [ 1] 1027 	jrne 16$
      001A15 CD 1A 88         [ 4] 1028 	call expression
      001A18 A6 07            [ 1] 1029 	ld a,#TK_RPAREN 
      001A1A CD 19 4B         [ 4] 1030 	call expect
      001A1D                       1031 	_xpop 
      001A1D 90 F6            [ 1]    1     ld a,(y)
      001A1F 93               [ 1]    2     ldw x,y 
      001A20 EE 01            [ 2]    3     ldw x,(1,x)
      001A22 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A26 20 08            [ 2] 1032 	jra 18$	
      001A28                       1033 16$:
      001A28                       1034 	_unget_token 
      001A28 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A2D 4F               [ 1] 1035 	clr a 
      001A2E 20 12            [ 2] 1036 	jra 22$ 
      001A30                       1037 18$: 
      001A30 0D 01            [ 1] 1038 	tnz (NEG,sp)
      001A32 27 03            [ 1] 1039 	jreq 20$
      001A34 CD 02 01         [ 4] 1040 	call neg_ax   
      001A37                       1041 20$:
      001A37                       1042 	_xpush 
      001A37 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001A3B 90 F7            [ 1]    2     ld (y),a 
      001A3D 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A40 A6 84            [ 1] 1043 	ld a,#TK_INTGR
      001A42                       1044 22$:
      001A42                       1045 	_drop VSIZE
      001A42 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A44 81               [ 4] 1046 	ret
                                   1047 
                                   1048 
                                   1049 ;-----------------------------------
                                   1050 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1051 ; output:
                                   1052 ;   A    	token attribute 
                                   1053 ;	xstack		value 
                                   1054 ;-----------------------------------
                           000001  1055 	MULOP=1
                           000001  1056 	VSIZE=1
      001A45                       1057 term:
      001A45                       1058 	_vars VSIZE
      001A45 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1059 ; first factor 	
      001A47 CD 19 A9         [ 4] 1060 	call factor
      001A4A 4D               [ 1] 1061 	tnz a 
      001A4B 27 38            [ 1] 1062 	jreq term_exit  
      001A4D                       1063 term01:	 ; check for  operator '*'|'/'|'%' 
      001A4D CD 17 9F         [ 4] 1064 	call next_token
      001A50 6B 01            [ 1] 1065 	ld (MULOP,sp),a
      001A52 A4 30            [ 1] 1066 	and a,#TK_GRP_MASK
      001A54 A1 20            [ 1] 1067 	cp a,#TK_GRP_MULT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001A56 27 09            [ 1] 1068 	jreq 1$
      001A58 A6 84            [ 1] 1069 	ld a,#TK_INTGR
      001A5A                       1070 	_unget_token 
      001A5A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A5F 20 24            [ 2] 1071 	jra term_exit 
      001A61                       1072 1$:	; got *|/|%
                                   1073 ;second factor
      001A61 CD 19 A9         [ 4] 1074 	call factor
      001A64 4D               [ 1] 1075 	tnz a 
      001A65 26 03            [ 1] 1076 	jrne 2$ 
      001A67 CC 16 9E         [ 2] 1077 	jp syntax_error 
      001A6A                       1078 2$: ; select operation 	
      001A6A 7B 01            [ 1] 1079 	ld a,(MULOP,sp) 
      001A6C A1 20            [ 1] 1080 	cp a,#TK_MULT 
      001A6E 26 05            [ 1] 1081 	jrne 3$
                                   1082 ; '*' operator
      001A70 CD 02 59         [ 4] 1083 	call mul24 
      001A73 20 D8            [ 2] 1084 	jra term01
      001A75 A1 21            [ 1] 1085 3$: cp a,#TK_DIV 
      001A77 26 05            [ 1] 1086 	jrne 4$ 
                                   1087 ; '/' operator	
      001A79 CD 03 23         [ 4] 1088 	call div24 
      001A7C 20 CF            [ 2] 1089 	jra term01 
      001A7E                       1090 4$: ; '%' operator
      001A7E CD 03 D1         [ 4] 1091 	call mod24
      001A81 20 CA            [ 2] 1092 	jra term01 
      001A83                       1093 9$: 
      001A83 A6 84            [ 1] 1094 	ld a,#TK_INTGR
      001A85                       1095 term_exit:
      001A85                       1096 	_drop VSIZE 
      001A85 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A87 81               [ 4] 1097 	ret 
                                   1098 
                                   1099 ;-------------------------------
                                   1100 ;  expr ::= term [['+'|'-'] term]*
                                   1101 ;  result range {-32768..32767}
                                   1102 ;  output:
                                   1103 ;   A    token attribute 
                                   1104 ;   xstack	 result    
                                   1105 ;-------------------------------
                           000001  1106 	OP=1 
                           000001  1107 	VSIZE=1 
      001A88                       1108 expression:
      001A88                       1109 	_vars VSIZE 
      001A88 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1110 ; first term 	
      001A8A CD 1A 45         [ 4] 1111 	call term
      001A8D 4D               [ 1] 1112 	tnz a 
      001A8E 27 2D            [ 1] 1113 	jreq 9$
      001A90                       1114 1$:	; operator '+'|'-'
      001A90 CD 17 9F         [ 4] 1115 	call next_token
      001A93 6B 01            [ 1] 1116 	ld (OP,sp),a 
      001A95 A4 30            [ 1] 1117 	and a,#TK_GRP_MASK
      001A97 A1 10            [ 1] 1118 	cp a,#TK_GRP_ADD 
      001A99 27 09            [ 1] 1119 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001A9B                       1120 	_unget_token 
      001A9B 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AA0 A6 84            [ 1] 1121 	ld a,#TK_INTGR
      001AA2 20 19            [ 2] 1122 	jra 9$ 
      001AA4                       1123 2$: ; second term 
      001AA4 CD 1A 45         [ 4] 1124 	call term
      001AA7 4D               [ 1] 1125 	tnz a 
      001AA8 26 03            [ 1] 1126 	jrne 3$
      001AAA CC 16 9E         [ 2] 1127 	jp syntax_error
      001AAD                       1128 3$:
      001AAD 7B 01            [ 1] 1129 	ld a,(OP,sp)
      001AAF A1 10            [ 1] 1130 	cp a,#TK_PLUS 
      001AB1 26 05            [ 1] 1131 	jrne 4$
                                   1132 ; '+' operator	
      001AB3 CD 01 6A         [ 4] 1133 	call add24
      001AB6 20 D8            [ 2] 1134 	jra 1$ 
      001AB8                       1135 4$:	; '-' operator 
      001AB8 CD 01 87         [ 4] 1136 	call sub24
      001ABB 20 D3            [ 2] 1137 	jra 1$
      001ABD                       1138 9$:
      001ABD                       1139 	_drop VSIZE 
      001ABD 5B 01            [ 2]    1     addw sp,#VSIZE 
      001ABF 81               [ 4] 1140 	ret 
                                   1141 
                                   1142 ;---------------------------------------------
                                   1143 ; rel ::= expr rel_op expr
                                   1144 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1145 ;  relation return  integer , zero is false 
                                   1146 ;  output:
                                   1147 ;	 xstack		value  
                                   1148 ;---------------------------------------------
                           000001  1149 	RELOP=1
                           000001  1150 	VSIZE=1 
      001AC0                       1151 relation: 
      001AC0                       1152 	_vars VSIZE
      001AC0 52 01            [ 2]    1     sub sp,#VSIZE 
      001AC2 CD 1A 88         [ 4] 1153 	call expression
      001AC5 4D               [ 1] 1154 	tnz a 
      001AC6 27 54            [ 1] 1155 	jreq 9$ 
                                   1156 ; expect rel_op or leave 
      001AC8 CD 17 9F         [ 4] 1157 	call next_token 
      001ACB 6B 01            [ 1] 1158 	ld (RELOP,sp),a 
      001ACD A4 30            [ 1] 1159 	and a,#TK_GRP_MASK
      001ACF A1 30            [ 1] 1160 	cp a,#TK_GRP_RELOP 
      001AD1 27 09            [ 1] 1161 	jreq 2$
      001AD3 A6 84            [ 1] 1162 	ld a,#TK_INTGR 
      001AD5                       1163 	_unget_token 
      001AD5 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001ADA 20 40            [ 2] 1164 	jra 9$ 
      001ADC                       1165 2$:	; expect another expression
      001ADC CD 1A 88         [ 4] 1166 	call expression
      001ADF 4D               [ 1] 1167 	tnz a 
      001AE0 26 03            [ 1] 1168 	jrne 3$
      001AE2 CC 16 9E         [ 2] 1169 	jp syntax_error 
      001AE5                       1170 3$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001AE5 CD 01 A4         [ 4] 1171 	call cp24 
      001AE8                       1172 	_xpop  
      001AE8 90 F6            [ 1]    1     ld a,(y)
      001AEA 93               [ 1]    2     ldw x,y 
      001AEB EE 01            [ 2]    3     ldw x,(1,x)
      001AED 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001AF1 4D               [ 1] 1173 	tnz a 
      001AF2 2B 08            [ 1] 1174 	jrmi 4$
      001AF4 26 0C            [ 1] 1175 	jrne 5$
      001AF6 35 02 00 0E      [ 1] 1176 	mov acc8,#2 ; i1==i2
      001AFA 20 0A            [ 2] 1177 	jra 6$ 
      001AFC                       1178 4$: ; i1<i2
      001AFC 35 04 00 0E      [ 1] 1179 	mov acc8,#4 
      001B00 20 04            [ 2] 1180 	jra 6$
      001B02                       1181 5$: ; i1>i2
      001B02 35 01 00 0E      [ 1] 1182 	mov acc8,#1  
      001B06                       1183 6$: ; 0=false, -1=true 
      001B06 5F               [ 1] 1184 	clrw x 
      001B07 C6 00 0E         [ 1] 1185 	ld a, acc8  
      001B0A 14 01            [ 1] 1186 	and a,(RELOP,sp)
      001B0C 27 03            [ 1] 1187 	jreq 7$
      001B0E 53               [ 2] 1188 	cplw x 
      001B0F A6 FF            [ 1] 1189 	ld a,#255 
      001B11                       1190 7$:	_xpush 
      001B11 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B15 90 F7            [ 1]    2     ld (y),a 
      001B17 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B1A A6 84            [ 1] 1191 	ld a,#TK_INTGR
      001B1C                       1192 9$: 
      001B1C                       1193 	_drop VSIZE
      001B1C 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B1E 81               [ 4] 1194 	ret 
                                   1195 
                                   1196 ;-------------------------------------------
                                   1197 ;  AND factor:  [NOT] relation | (condition)
                                   1198 ;  output:
                                   1199 ;     A      TK_INTGR|0
                                   1200 ;-------------------------------------------
                           000001  1201 	NOT_OP=1
      001B1F                       1202 and_factor:
      001B1F 4B 00            [ 1] 1203 	push #0 
      001B21 CD 17 9F         [ 4] 1204 0$:	call next_token  
      001B24 4D               [ 1] 1205 	tnz a 
      001B25 27 25            [ 1] 1206 	jreq 8$ 
      001B27 A1 87            [ 1] 1207 	cp a,#TK_NOT 
      001B29 26 04            [ 1] 1208 	jrne 1$ 
      001B2B 03 01            [ 1] 1209 	cpl (NOT_OP,sp)
      001B2D 20 F2            [ 2] 1210 	jra 0$ 
      001B2F                       1211 1$:	
      001B2F A1 06            [ 1] 1212 	cp a,#TK_LPAREN 
      001B31 26 0A            [ 1] 1213 	jrne 2$
      001B33 CD 1B A1         [ 4] 1214 	call condition
      001B36 A6 07            [ 1] 1215 	ld a,#TK_RPAREN 
      001B38 CD 19 4B         [ 4] 1216 	call expect
      001B3B 20 08            [ 2] 1217 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001B3D                       1218 2$: _unget_token 
      001B3D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B42 CD 1A C0         [ 4] 1219 	call relation
      001B45                       1220 3$:
      001B45 0D 01            [ 1] 1221 	tnz (NOT_OP,sp)
      001B47 27 03            [ 1] 1222 	jreq 8$ 
      001B49 CD 01 E6         [ 4] 1223 	call cpl24
      001B4C                       1224 8$:
      001B4C                       1225 	_drop 1  
      001B4C 5B 01            [ 2]    1     addw sp,#1 
      001B4E 81               [ 4] 1226     ret 
                                   1227 
                                   1228 
                                   1229 ;--------------------------------------------
                                   1230 ;  AND operator as priority over OR||XOR 
                                   1231 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1232 ;          
                                   1233 ;  output:
                                   1234 ;     A     TK_INTGR|0
                                   1235 ;    xtack   value 
                                   1236 ;--------------------------------------------
      001B4F                       1237 and_cond:
      001B4F CD 1B 1F         [ 4] 1238 	call and_factor
      001B52 4D               [ 1] 1239 	tnz a 
      001B53 27 4B            [ 1] 1240 	jreq 9$  
      001B55 CD 17 9F         [ 4] 1241 1$: call next_token 
      001B58 4D               [ 1] 1242 	tnz a 
      001B59 27 43            [ 1] 1243 	jreq 6$ 
      001B5B A1 88            [ 1] 1244 	cp a,#TK_AND 
      001B5D 27 07            [ 1] 1245 	jreq 3$
      001B5F                       1246 	_unget_token 
      001B5F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B64 20 38            [ 2] 1247 	jra 6$ 
      001B66 CD 1B 1F         [ 4] 1248 3$:	call and_factor  
      001B69 4D               [ 1] 1249 	tnz a 
      001B6A 26 03            [ 1] 1250 	jrne 4$
      001B6C CC 16 9E         [ 2] 1251 	jp syntax_error 
      001B6F                       1252 4$:	
      001B6F                       1253 	_xpop 
      001B6F 90 F6            [ 1]    1     ld a,(y)
      001B71 93               [ 1]    2     ldw x,y 
      001B72 EE 01            [ 2]    3     ldw x,(1,x)
      001B74 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B78 C7 00 0C         [ 1] 1254 	ld acc24,a 
      001B7B CF 00 0D         [ 2] 1255 	ldw acc16,x
      001B7E                       1256 	_xpop 
      001B7E 90 F6            [ 1]    1     ld a,(y)
      001B80 93               [ 1]    2     ldw x,y 
      001B81 EE 01            [ 2]    3     ldw x,(1,x)
      001B83 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B87 C4 00 0C         [ 1] 1257 	and a,acc24 
      001B8A 02               [ 1] 1258 	rlwa x 
      001B8B C4 00 0D         [ 1] 1259 	and a,acc16 
      001B8E 02               [ 1] 1260 	rlwa x 
      001B8F C4 00 0E         [ 1] 1261 	and a,acc8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001B92 02               [ 1] 1262 	rlwa x
      001B93                       1263 	_xpush
      001B93 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B97 90 F7            [ 1]    2     ld (y),a 
      001B99 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B9C 20 B7            [ 2] 1264 	jra 1$  
      001B9E A6 84            [ 1] 1265 6$: ld a,#TK_INTGR 
      001BA0 81               [ 4] 1266 9$:	ret 	 
                                   1267 
                                   1268 
                                   1269 ;--------------------------------------------
                                   1270 ; condition for IF and UNTIL 
                                   1271 ; operators: OR,XOR 
                                   1272 ; format:  and_cond [ OP and_cond ]* 
                                   1273 ; output:
                                   1274 ;    A        INTGR|0 
                                   1275 ;    xstack   value 
                                   1276 ;--------------------------------------------
                           000001  1277 	ATMP=1
                           000002  1278 	OP=2
                           000002  1279 	VSIZE=2 
      001BA1                       1280 condition:
      001BA1                       1281 	_vars VSIZE 
      001BA1 52 02            [ 2]    1     sub sp,#VSIZE 
      001BA3 CD 1B 4F         [ 4] 1282 	call and_cond
      001BA6 4D               [ 1] 1283 	tnz a 
      001BA7 27 69            [ 1] 1284 	jreq 9$ 
      001BA9 CD 17 9F         [ 4] 1285 1$:	call next_token 
      001BAC A1 89            [ 1] 1286 	cp a,#TK_OR 
      001BAE 27 0B            [ 1] 1287 	jreq 2$
      001BB0 A1 8A            [ 1] 1288 	cp a,#TK_XOR
      001BB2 27 07            [ 1] 1289 	jreq 2$ 
      001BB4                       1290 	_unget_token 
      001BB4 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BB9 20 55            [ 2] 1291 	jra 8$ 
      001BBB 6B 02            [ 1] 1292 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001BBD CD 1B 4F         [ 4] 1293 	call and_cond
      001BC0 A1 84            [ 1] 1294 	cp a,#TK_INTGR 
      001BC2 27 03            [ 1] 1295 	jreq 3$
      001BC4 CC 16 9E         [ 2] 1296 	jp syntax_error 
      001BC7                       1297 3$:	 
      001BC7                       1298 	_xpop  ; rigth arg 
      001BC7 90 F6            [ 1]    1     ld a,(y)
      001BC9 93               [ 1]    2     ldw x,y 
      001BCA EE 01            [ 2]    3     ldw x,(1,x)
      001BCC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BD0 C7 00 0C         [ 1] 1299 	ld acc24,a 
      001BD3 CF 00 0D         [ 2] 1300 	ldw acc16,x 
      001BD6                       1301 	_xpop  ; left arg  
      001BD6 90 F6            [ 1]    1     ld a,(y)
      001BD8 93               [ 1]    2     ldw x,y 
      001BD9 EE 01            [ 2]    3     ldw x,(1,x)
      001BDB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BDF 6B 01            [ 1] 1302 	ld (ATMP,sp),a 
      001BE1 7B 02            [ 1] 1303 	ld a,(OP,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001BE3 A1 8A            [ 1] 1304 	cp a,#TK_XOR 
      001BE5 27 10            [ 1] 1305 	jreq 5$ 
      001BE7                       1306 4$: ; A:X OR acc24   
      001BE7 7B 01            [ 1] 1307 	ld a,(ATMP,sp)
      001BE9 CA 00 0C         [ 1] 1308 	or a,acc24 
      001BEC 02               [ 1] 1309 	rlwa x 
      001BED CA 00 0D         [ 1] 1310 	or a,acc16 
      001BF0 02               [ 1] 1311 	rlwa x 
      001BF1 CA 00 0E         [ 1] 1312 	or a,acc8 
      001BF4 02               [ 1] 1313 	rlwa x 
      001BF5 20 0E            [ 2] 1314 	jra 6$  
      001BF7                       1315 5$: ; A:X XOR acc24 
      001BF7 7B 01            [ 1] 1316 	ld a,(ATMP,sp)
      001BF9 C8 00 0C         [ 1] 1317 	xor a,acc24 
      001BFC 02               [ 1] 1318 	rlwa x 
      001BFD C8 00 0D         [ 1] 1319 	xor a,acc16 
      001C00 02               [ 1] 1320 	rlwa x 
      001C01 C8 00 0E         [ 1] 1321 	xor a,acc8 
      001C04 02               [ 1] 1322 	rlwa x 
      001C05                       1323 6$: _xpush
      001C05 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C09 90 F7            [ 1]    2     ld (y),a 
      001C0B 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C0E 20 99            [ 2] 1324 	jra 1$ 
      001C10 A6 84            [ 1] 1325 8$:	ld a,#TK_INTGR 
      001C12                       1326 9$:	_drop VSIZE 
      001C12 5B 02            [ 2]    1     addw sp,#VSIZE 
      001C14 81               [ 4] 1327 	ret 
                                   1328 
                                   1329 
                                   1330 ;--------------------------------------------
                                   1331 ; BASIC: HEX 
                                   1332 ; select hexadecimal base for integer print
                                   1333 ;---------------------------------------------
      001C15                       1334 hex_base:
      001C15 35 10 00 0A      [ 1] 1335 	mov base,#16 
      001C19 81               [ 4] 1336 	ret 
                                   1337 
                                   1338 ;--------------------------------------------
                                   1339 ; BASIC: DEC 
                                   1340 ; select decimal base for integer print
                                   1341 ;---------------------------------------------
      001C1A                       1342 dec_base:
      001C1A 35 0A 00 0A      [ 1] 1343 	mov base,#10
      001C1E 81               [ 4] 1344 	ret 
                                   1345 
                                   1346 ;------------------------
                                   1347 ; BASIC: FREE 
                                   1348 ; return free size in RAM 
                                   1349 ; output:
                                   1350 ;   A:x		size 
                                   1351 ;--------------------------
      001C1F                       1352 free:
      001C1F 90 89            [ 2] 1353 	pushw y 
      001C21 4F               [ 1] 1354 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001C22 AE 16 68         [ 2] 1355 	ldw x,#tib 
      001C25 90 CE 00 1D      [ 2] 1356 	ldw y,txtend 
      001C29 90 A3 35 80      [ 2] 1357 	cpw y,#app_space
      001C2D 25 05            [ 1] 1358 	jrult 1$
      001C2F 1D 00 80         [ 2] 1359 	subw x,#free_ram 
      001C32 20 04            [ 2] 1360 	jra 2$ 
      001C34                       1361 1$:	
      001C34 72 B0 00 1D      [ 2] 1362 	subw x,txtend
      001C38 90 85            [ 2] 1363 2$:	popw y 
      001C3A 81               [ 4] 1364 	ret 
                                   1365 
                                   1366 ;------------------------------
                                   1367 ; BASIC: SIZE 
                                   1368 ; command that print 
                                   1369 ; program start addres and size 
                                   1370 ;------------------------------
      001C3B                       1371 cmd_size:
      001C3B 3B 00 0A         [ 1] 1372 	push base 
      001C3E AE 1E 98         [ 2] 1373 	ldw x,#PROG_ADDR 
      001C41 CD 09 9D         [ 4] 1374 	call puts 
      001C44 CE 00 1B         [ 2] 1375 	ldw x,txtbgn     
      001C47 35 10 00 0A      [ 1] 1376 	mov base,#16 
      001C4B CD 17 F4         [ 4] 1377 	call prt_i16
      001C4E 32 00 0A         [ 1] 1378 	pop base 
      001C51 AE 1E AA         [ 2] 1379 	ldw x,#PROG_SIZE 
      001C54 CD 09 9D         [ 4] 1380 	call puts 
      001C57 CE 00 1D         [ 2] 1381 	ldw x,txtend 
      001C5A 72 B0 00 1B      [ 2] 1382 	subw x,txtbgn 
      001C5E CD 17 F4         [ 4] 1383 	call prt_i16
      001C61 AE 1E BB         [ 2] 1384 	ldw x,#STR_BYTES 
      001C64 CD 09 9D         [ 4] 1385 	call puts  
      001C67 81               [ 4] 1386 	ret 
                                   1387 
                                   1388 
                                   1389 ;------------------------
                                   1390 ; BASIC: UBOUND  
                                   1391 ; return array variable size 
                                   1392 ; and set 'array_size' variable 
                                   1393 ; output:
                                   1394 ;   A:X 	array_size
                                   1395 ;--------------------------
      001C68                       1396 ubound:
      001C68 CD 1C 1F         [ 4] 1397 	call free 
      001C6B A6 03            [ 1] 1398 	ld a,#CELL_SIZE 
      001C6D 62               [ 2] 1399 	div x,a 
      001C6E CF 00 20         [ 2] 1400 	ldw array_size,x
      001C71 4F               [ 1] 1401 	clr a 
      001C72 81               [ 4] 1402 	ret 
                                   1403 
                                   1404 ;-----------------------------
                                   1405 ; BASIC: LET var=expr 
                                   1406 ; variable assignement 
                                   1407 ; output:
                                   1408 ;   A 		TK_NONE 
                                   1409 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001C73                       1410 let::
      001C73 CD 17 9F         [ 4] 1411 	call next_token 
      001C76 A1 85            [ 1] 1412 	cp a,#TK_VAR 
      001C78 27 0C            [ 1] 1413 	jreq let_var
      001C7A A1 05            [ 1] 1414 	cp a,#TK_ARRAY 
      001C7C 27 03            [ 1] 1415 	jreq  let_array
      001C7E CC 16 9E         [ 2] 1416 	jp syntax_error
      001C81                       1417 let_array:
      001C81 CD 19 79         [ 4] 1418 	call get_array_element
      001C84 20 03            [ 2] 1419 	jra let_eval 
      001C86                       1420 let_var:
      001C86 CD 17 D4         [ 4] 1421 	call get_addr
      001C89                       1422 let_eval:
      001C89 CF 00 19         [ 2] 1423 	ldw ptr16,x  ; variable address 
      001C8C CD 17 9F         [ 4] 1424 	call next_token 
      001C8F A1 32            [ 1] 1425 	cp a,#TK_EQUAL
      001C91 27 03            [ 1] 1426 	jreq 1$
      001C93 CC 16 9E         [ 2] 1427 	jp syntax_error
      001C96                       1428 1$:	
      001C96 CD 1B A1         [ 4] 1429 	call condition   
      001C99 A1 84            [ 1] 1430 	cp a,#TK_INTGR 
      001C9B 27 03            [ 1] 1431 	jreq 2$
      001C9D CC 16 9E         [ 2] 1432 	jp syntax_error
      001CA0                       1433 2$:	
      001CA0                       1434 	_xpop ; value 
      001CA0 90 F6            [ 1]    1     ld a,(y)
      001CA2 93               [ 1]    2     ldw x,y 
      001CA3 EE 01            [ 2]    3     ldw x,(1,x)
      001CA5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001CA9                       1435 3$:
      001CA9 72 C7 00 19      [ 4] 1436 	ld [ptr16],a
      001CAD 72 5C 00 1A      [ 1] 1437 	inc ptr8  
      001CB1 72 CF 00 19      [ 5] 1438 	ldw [ptr16],x 
      001CB5 81               [ 4] 1439 	ret 
                                   1440 
                                   1441 
                                   1442 ;--------------------------
                                   1443 ; return constant value 
                                   1444 ; from it's record address
                                   1445 ; input:
                                   1446 ;	X	*const record 
                                   1447 ; output:
                                   1448 ;   A:X   const  value
                                   1449 ;--------------------------
      001CB6                       1450 get_const_value: ; -- i 
      001CB6 F6               [ 1] 1451 	ld a,(x) ; record size 
      001CB7 A0 03            [ 1] 1452 	sub a,#3 ; * value 
      001CB9 88               [ 1] 1453 	push a 
      001CBA 4B 00            [ 1] 1454 	push #0 
      001CBC 72 FB 01         [ 2] 1455 	addw x,(1,sp)
      001CBF F6               [ 1] 1456 	ld a,(x)
      001CC0 EE 01            [ 2] 1457 	ldw x,(1,x)
      001CC2                       1458 	_drop 2
      001CC2 5B 02            [ 2]    1     addw sp,#2 
      001CC4 81               [ 4] 1459 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                   1460 
                                   1461 
                                   1462 ;--------------------------
                                   1463 ; list constants in EEPROM 
                                   1464 ; call when using LIST \C 
                                   1465 ;-------------------------
                           000001  1466 	COUNT=1
                           000003  1467 	YTEMP=3
                           000004  1468 	VSIZE=4 
      001CC5                       1469 list_const:
      001CC5 90 89            [ 2] 1470 	pushw y 
      001CC7                       1471 	_vars 4 
      001CC7 52 04            [ 2]    1     sub sp,#4 
      001CC9 5F               [ 1] 1472 	clrw x 
      001CCA 1F 01            [ 2] 1473 	ldw (COUNT,sp),x  
      001CCC 90 AE 40 00      [ 2] 1474 	ldw Y,#EEPROM_BASE 
      001CD0 90 C3 00 24      [ 2] 1475 1$:	cpw y,free_eeprom 
      001CD4 24 35            [ 1] 1476 	jruge 9$
      001CD6 17 03            [ 2] 1477     ldw (YTEMP,sp),y 
      001CD8 93               [ 1] 1478 	ldw x,y
      001CD9 5C               [ 1] 1479 	incw x 
      001CDA CD 09 9D         [ 4] 1480 	call puts  
      001CDD A6 3D            [ 1] 1481 	ld a,#'= 
      001CDF CD 09 40         [ 4] 1482 	call putc 
      001CE2 1E 03            [ 2] 1483 	ldw x,(YTEMP,sp)
      001CE4 CD 1C B6         [ 4] 1484 	call get_const_value 
      001CE7 C7 00 0C         [ 1] 1485 	ld acc24,a 
      001CEA CF 00 0D         [ 2] 1486 	ldw acc16,x 
      001CED CD 18 0B         [ 4] 1487 	call prt_acc24
      001CF0 A6 0D            [ 1] 1488 	ld a,#CR 
      001CF2 CD 09 40         [ 4] 1489 	call putc 
      001CF5 1E 01            [ 2] 1490 	ldw x,(COUNT,sp)
      001CF7 5C               [ 1] 1491 	incw x 
      001CF8 1F 01            [ 2] 1492 	ldw (COUNT,sp),x 
      001CFA 72 5F 00 0D      [ 1] 1493 	clr acc16 
      001CFE 16 03            [ 2] 1494 	ldw y,(YTEMP,sp)
      001D00 90 F6            [ 1] 1495 	ld a,(y)
      001D02 C7 00 0E         [ 1] 1496 	ld acc8,a
      001D05 72 B9 00 0D      [ 2] 1497 	addw y,acc16 
      001D09 20 C5            [ 2] 1498 	jra 1$ 
      001D0B                       1499 9$:	
      001D0B 1E 01            [ 2] 1500 	ldw x,(COUNT,sp)
      001D0D CD 17 F4         [ 4] 1501 	call prt_i16 
      001D10 AE 1D 1B         [ 2] 1502 	ldw x,#CONST_COUNT 
      001D13 CD 09 9D         [ 4] 1503 	call puts 
      001D16                       1504 	_drop VSIZE 
      001D16 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D18 90 85            [ 2] 1505 	popw y 
      001D1A 81               [ 4] 1506 	ret 
                                   1507 
      001D1B 20 63 6F 6E 73 74 61  1508 CONST_COUNT: .asciz " constants in EEPROM\n"
             6E 74 73 20 69 6E 20
             45 45 50 52 4F 4D 0A
             00
                                   1509 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                                   1510 
                                   1511 ;--------------------------
                                   1512 ; BASIC: EEFREE 
                                   1513 ; eeprom_free 
                                   1514 ; search end of data  
                                   1515 ; in EEPROM 
                                   1516 ; input:
                                   1517 ;    none 
                                   1518 ; output:
                                   1519 ;    A:X     address free
                                   1520 ;-------------------------
      001D31                       1521 func_eefree:
      001D31 AE 40 00         [ 2] 1522 	ldw x,#EEPROM_BASE 
      001D34 35 08 00 0E      [ 1] 1523 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001D38 A3 47 F8         [ 2] 1524     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D3B 24 17            [ 1] 1525 	jruge 8$ ; no free space 
      001D3D F6               [ 1] 1526 2$: ld a,(x)
      001D3E 26 0C            [ 1] 1527 	jrne 3$
      001D40 5C               [ 1] 1528 	incw x 
      001D41 72 5A 00 0E      [ 1] 1529 	dec acc8 
      001D45 26 F6            [ 1] 1530 	jrne 2$
      001D47 1D 00 08         [ 2] 1531 	subw x,#8 
      001D4A 20 09            [ 2] 1532 	jra 9$  
      001D4C F6               [ 1] 1533 3$: ld a,(x)
      001D4D 5C               [ 1] 1534 	incw x
      001D4E 4D               [ 1] 1535 	tnz a  
      001D4F 26 FB            [ 1] 1536 	jrne 3$
      001D51 5A               [ 2] 1537 	decw x   
      001D52 20 E0            [ 2] 1538 	jra 1$ 
      001D54 5F               [ 1] 1539 8$: clrw x ; no free space 
      001D55 4F               [ 1] 1540 9$: clr a 
      001D56 CF 00 24         [ 2] 1541 	ldw free_eeprom,x ; save in system variable 
      001D59 81               [ 4] 1542 	ret 
                                   1543 
                           000005  1544 CONST_REC_XTRA_BYTES=5 
                                   1545 ;--------------------------
                                   1546 ; search constant name 
                                   1547 ; format of constant record  
                                   1548 ;   .byte record length 
                                   1549 ;         = strlen(name)+5 
                                   1550 ;   .asciz name (variable length)
                                   1551 ;   .int24 value (3 bytes )
                                   1552 ; a constant record use 7+ bytes
                                   1553 ; constants are saved in EEPROM  
                                   1554 ; input:
                                   1555 ;    X     *name
                                   1556 ; output:
                                   1557 ;    X     address|0
                                   1558 ; use:
                                   1559 ;   A,Y, acc16 
                                   1560 ;-------------------------
                           000001  1561 	NAMEPTR=1 ; target name pointer 
                           000003  1562 	EEPTR=3   ; walking pointer in EEPROM
                           000005  1563 	RECLEN=5  ; record length of target
                           000005  1564 	VSIZE=5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001D5A                       1565 search_const:
      001D5A 90 89            [ 2] 1566 	pushw y 
      001D5C                       1567 	_vars VSIZE
      001D5C 52 05            [ 2]    1     sub sp,#VSIZE 
      001D5E 72 5F 00 0D      [ 1] 1568 	clr acc16 
      001D62 CD 13 E2         [ 4] 1569 	call strlen 
      001D65 AB 05            [ 1] 1570 	add a,#CONST_REC_XTRA_BYTES
      001D67 6B 05            [ 1] 1571 	ld (RECLEN,sp),a    
      001D69 1F 01            [ 2] 1572 	ldw (NAMEPTR,sp),x
      001D6B 90 AE 40 00      [ 2] 1573 	ldw y,#EEPROM_BASE 
      001D6F 1E 01            [ 2] 1574 1$:	ldw x,(NAMEPTR,sp)
      001D71 17 03            [ 2] 1575 	ldw (EEPTR,sp),y
      001D73 90 C3 00 24      [ 2] 1576 	cpw y, free_eeprom 
      001D77 24 1A            [ 1] 1577 	jruge 7$ ; no match found 
      001D79 90 F6            [ 1] 1578 	ld a,(y)
      001D7B 11 05            [ 1] 1579 	cp a,(RECLEN,sp)
      001D7D 26 07            [ 1] 1580 	jrne 2$ 
      001D7F 90 5C            [ 1] 1581 	incw y 
      001D81 CD 13 ED         [ 4] 1582 	call strcmp
      001D84 26 11            [ 1] 1583 	jrne 8$ ; match found 
      001D86                       1584 2$: ; skip this one 	
      001D86 16 03            [ 2] 1585 	ldW Y,(EEPTR,sp)
      001D88 90 F6            [ 1] 1586 	ld a,(y)
      001D8A C7 00 0E         [ 1] 1587 	ld acc8,a 
      001D8D 72 B9 00 0D      [ 2] 1588 	addw y,acc16 
      001D91 20 DC            [ 2] 1589 	jra 1$  
      001D93                       1590 7$: ; no match found 
      001D93 0F 03            [ 1] 1591 	clr (EEPTR,sp)
      001D95 0F 04            [ 1] 1592 	clr (EEPTR+1,sp)
      001D97                       1593 8$: ; match found 
      001D97 1E 03            [ 2] 1594 	ldw x,(EEPTR,sp) ; record address 
      001D99                       1595 9$:	_DROP VSIZE
      001D99 5B 05            [ 2]    1     addw sp,#VSIZE 
      001D9B 90 85            [ 2] 1596 	 popw y 
      001D9D 81               [ 4] 1597 	 ret 
                                   1598 
                                   1599 
                                   1600 ;--------------------------------------------
                                   1601 ; BASIC: CONST name=value [, name=value]*
                                   1602 ; define constant(s) saved in EEPROM
                                   1603 ;--------------------------------------------
                           000001  1604 	CNAME=1 
                           000003  1605 	BUFPTR=3
                           000005  1606 	RECLEN=5
                           000006  1607 	UPDATE=6
                           000007  1608 	YSAVE=7
                           000008  1609 	VSIZE=8 
      001D9E                       1610 cmd_const:
      001D9E 90 89            [ 2] 1611 	pushw y 
      001DA0                       1612 	_vars VSIZE 
      001DA0 52 08            [ 2]    1     sub sp,#VSIZE 
      001DA2 0F 06            [ 1] 1613 	clr (UPDATE,sp)
      001DA4 CD 17 9F         [ 4] 1614 	call next_token 
      001DA7 A1 04            [ 1] 1615 	cp a,#TK_CHAR 
      001DA9 26 0D            [ 1] 1616 	jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001DAB CD 17 EE         [ 4] 1617 	call get_char 
      001DAE A4 DF            [ 1] 1618 	and a,#0xDF 
      001DB0 A1 55            [ 1] 1619 	cp a,#'U 
      001DB2 26 08            [ 1] 1620 	jrne 1$
      001DB4 03 06            [ 1] 1621 	cpl (UPDATE,sp)
      001DB6 20 07            [ 2] 1622 	jra const_loop 
      001DB8 A1 03            [ 1] 1623 0$: cp a,#TK_LABEL 
      001DBA 27 08            [ 1] 1624 	jreq cloop_1
      001DBC CC 16 9E         [ 2] 1625 1$: jp syntax_error
      001DBF                       1626 const_loop: 
      001DBF A6 03            [ 1] 1627 	ld a,#TK_LABEL 
      001DC1 CD 19 4B         [ 4] 1628 	call expect  
      001DC4                       1629 cloop_1: 
      001DC4 1F 01            [ 2] 1630 	ldw (CNAME,sp),x ; *const_name
      001DC6 CD 17 C5         [ 4] 1631 	call skip_string
      001DC9 1E 01            [ 2] 1632 	ldw x,(CNAME,sp)
      001DCB CD 13 E2         [ 4] 1633 	call strlen  
      001DCE AB 05            [ 1] 1634 	add a,#CONST_REC_XTRA_BYTES 
      001DD0 6B 05            [ 1] 1635 	ld (RECLEN,sp),a 
                                   1636 ; copy name in buffer  
      001DD2 16 01            [ 2] 1637 	ldw y,(CNAME,sp) 
      001DD4 AE 16 68         [ 2] 1638 	ldw x,#tib  
      001DD7 7B 05            [ 1] 1639 	ld a,(RECLEN,sp)
      001DD9 F7               [ 1] 1640 	ld (x),a 
      001DDA 5C               [ 1] 1641 	incw x  
      001DDB CD 13 FE         [ 4] 1642 	call strcpy 
      001DDE 1F 03            [ 2] 1643 	ldw (BUFPTR,sp),x 
                                   1644 ; x not updated by strcpy 
                                   1645 ; BUFPTR must be incremented 
                                   1646 ; to point after name 
      001DE0 5F               [ 1] 1647 	clrw x 
      001DE1 7B 05            [ 1] 1648 	ld a,(RECLEN,sp)
      001DE3 A0 04            [ 1] 1649 	sub a,#CONST_REC_XTRA_BYTES-1
      001DE5 97               [ 1] 1650 	ld xl,a  
      001DE6 72 FB 03         [ 2] 1651 	addw x,(BUFPTR,sp)
      001DE9 1F 03            [ 2] 1652 	ldw (BUFPTR,sp),x 
      001DEB A6 32            [ 1] 1653 	ld a,#TK_EQUAL 
      001DED CD 19 4B         [ 4] 1654 	call expect 
      001DF0 16 07            [ 2] 1655 	ldw y,(YSAVE,sp) ; restore xstack pointer 
      001DF2 CD 1A 88         [ 4] 1656 	call expression 
      001DF5 A1 84            [ 1] 1657 	cp a,#TK_INTGR 
      001DF7 27 03            [ 1] 1658 	jreq 5$ 
      001DF9 CC 16 9E         [ 2] 1659 	jp syntax_error 
      001DFC                       1660 5$:	_xpop 
      001DFC 90 F6            [ 1]    1     ld a,(y)
      001DFE 93               [ 1]    2     ldw x,y 
      001DFF EE 01            [ 2]    3     ldw x,(1,x)
      001E01 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E05 17 07            [ 2] 1661 	ldw (YSAVE,sp),y ; save xtack pointer 
      001E07 16 03            [ 2] 1662 	ldw y,(BUFPTR,sp)
      001E09 90 F7            [ 1] 1663 	ld (y),a 
      001E0B 90 EF 01         [ 2] 1664 	ldw (1,y),x 
                                   1665 ; record completed in buffer 
                                   1666 ; check if constant already exist 
                                   1667 ; if exist and \U option then update  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001E0E 72 5F 00 18      [ 1] 1668 	clr farptr 
      001E12 1E 01            [ 2] 1669 	ldw x,(CNAME,sp)
      001E14 CD 1D 5A         [ 4] 1670 	call search_const 
      001E17 5D               [ 2] 1671 	tnzw x 
      001E18 27 06            [ 1] 1672 	jreq 6$ ; new constant  
      001E1A 0D 06            [ 1] 1673 	tnz (UPDATE,sp)
      001E1C 27 1F            [ 1] 1674 	jreq 8$ 
      001E1E 20 03            [ 2] 1675 	jra 7$	
      001E20                       1676 6$:	
      001E20 CE 00 24         [ 2] 1677 	ldw x,free_eeprom  
      001E23                       1678 7$:	
      001E23 CF 00 19         [ 2] 1679 	ldw farptr+1,x 
      001E26 AE 16 68         [ 2] 1680 	ldw x,#tib 
      001E29 7B 05            [ 1] 1681 	ld a,(RECLEN,sp)
      001E2B CD 08 81         [ 4] 1682 	call write_nbytes
      001E2E 0D 06            [ 1] 1683 	tnz (UPDATE,sp)
      001E30 26 0B            [ 1] 1684 	jrne 8$ ; not a new constant, don't update free_eeprom
                                   1685 ; update free_eeprom 
      001E32 5F               [ 1] 1686 	clrw x 
      001E33 7B 05            [ 1] 1687 	ld a,(RECLEN,sp)
      001E35 97               [ 1] 1688 	ld xl,a 
      001E36 72 BB 00 24      [ 2] 1689 	addw x,free_eeprom 
      001E3A CF 00 24         [ 2] 1690 	ldw free_eeprom,x
      001E3D                       1691 8$: ; check for next constant 
      001E3D CD 17 9F         [ 4] 1692 	call next_token 
      001E40 A1 08            [ 1] 1693 	cp a,#TK_COMMA 
      001E42 26 03            [ 1] 1694 	jrne 9$ ; no other constant 
      001E44 CC 1D BF         [ 2] 1695 	jp const_loop 
      001E47                       1696 9$: 
      001E47                       1697 	_unget_token    
      001E47 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E4C                       1698 10$: 
      001E4C                       1699 	_drop VSIZE 
      001E4C 5B 08            [ 2]    1     addw sp,#VSIZE 
      001E4E 90 85            [ 2] 1700 	popw y ; restore xstack pointer 
      001E50 81               [ 4] 1701 	ret 
                                   1702 
                                   1703 
                                   1704 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1705 ; return program size 
                                   1706 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E51                       1707 prog_size:
      001E51 CE 00 1D         [ 2] 1708 	ldw x,txtend 
      001E54 72 B0 00 1B      [ 2] 1709 	subw x,txtbgn 
      001E58 81               [ 4] 1710 	ret 
                                   1711 
                                   1712 ;----------------------------
                                   1713 ; print program information 
                                   1714 ;---------------------------
      001E59                       1715 program_info: 
      001E59 AE 1E 98         [ 2] 1716 	ldw x,#PROG_ADDR 
      001E5C CD 09 9D         [ 4] 1717 	call puts 
      001E5F CE 00 1B         [ 2] 1718 	ldw x,txtbgn 
      001E62 35 10 00 0A      [ 1] 1719 	mov base,#16 
      001E66 CD 17 F4         [ 4] 1720 	call prt_i16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001E69 35 0A 00 0A      [ 1] 1721 	mov base,#10  
      001E6D AE 1E AA         [ 2] 1722 	ldw x,#PROG_SIZE
      001E70 CD 09 9D         [ 4] 1723 	call puts 
      001E73 CD 1E 51         [ 4] 1724 	call prog_size 
      001E76 CD 17 F4         [ 4] 1725 	call prt_i16 
      001E79 AE 1E BB         [ 2] 1726 	ldw x,#STR_BYTES 
      001E7C CD 09 9D         [ 4] 1727 	call puts
      001E7F CE 00 1B         [ 2] 1728 	ldw x,txtbgn
      001E82 A3 35 84         [ 2] 1729 	cpw x,#app 
      001E85 25 05            [ 1] 1730 	jrult 2$
      001E87 AE 1E C2         [ 2] 1731 	ldw x,#FLASH_MEM 
      001E8A 20 03            [ 2] 1732 	jra 3$
      001E8C AE 1E D3         [ 2] 1733 2$: ldw x,#RAM_MEM 	 
      001E8F CD 09 9D         [ 4] 1734 3$:	call puts 
      001E92 A6 0D            [ 1] 1735 	ld a,#CR 
      001E94 CD 09 40         [ 4] 1736 	call putc
      001E97 81               [ 4] 1737 	ret 
                                   1738 
      001E98 70 72 6F 67 72 61 6D  1739 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001EAA 2C 20 70 72 6F 67 72  1740 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001EBB 20 62 79 74 65 73 00  1741 STR_BYTES: .asciz " bytes" 
      001EC2 20 69 6E 20 46 4C 41  1742 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001ED3 20 69 6E 20 52 41 4D  1743 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1744 
                                   1745 
                                   1746 ;----------------------------
                                   1747 ; BASIC: LIST [[start][,end]]
                                   1748 ; list program lines 
                                   1749 ; form start to end 
                                   1750 ; if empty argument list then 
                                   1751 ; list all.
                                   1752 ;----------------------------
                           000001  1753 	FIRST=1
                           000003  1754 	LAST=3 
                           000005  1755 	LN_PTR=5
                           000006  1756 	VSIZE=6 
      001EE2                       1757 list:
      001EE2 72 01 00 22 05   [ 2] 1758 	btjf flags,#FRUN,0$
      001EE7 A6 07            [ 1] 1759 	ld a,#ERR_CMD_ONLY
      001EE9 CC 16 A0         [ 2] 1760 	jp tb_error
      001EEC                       1761 0$:	 
      001EEC CD 17 9F         [ 4] 1762 	call next_token 
      001EEF A1 04            [ 1] 1763 	cp a,#TK_CHAR 
      001EF1 26 10            [ 1] 1764 	jrne 2$
      001EF3 CD 17 EE         [ 4] 1765 	call get_char 
      001EF6 A4 DF            [ 1] 1766 	and a,#0xDF 
      001EF8 A1 43            [ 1] 1767 	cp a,#'C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      001EFA 26 04            [ 1] 1768 	jrne 1$
      001EFC CD 1C C5         [ 4] 1769 	call list_const
      001EFF 81               [ 4] 1770 	ret 
      001F00 CC 16 9E         [ 2] 1771 1$: jp syntax_error 
      001F03                       1772 2$:	_unget_token 
      001F03 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001F08 CD 1E 51         [ 4] 1773 	call prog_size 
      001F0B 22 01            [ 1] 1774 	jrugt 3$
      001F0D 81               [ 4] 1775 	ret 
      001F0E                       1776 3$: _vars VSIZE
      001F0E 52 06            [ 2]    1     sub sp,#VSIZE 
      001F10 CE 00 1B         [ 2] 1777 	ldw x,txtbgn 
      001F13 1F 05            [ 2] 1778 	ldw (LN_PTR,sp),x 
      001F15 FE               [ 2] 1779 	ldw x,(x) 
      001F16 1F 01            [ 2] 1780 	ldw (FIRST,sp),x ; list from first line 
      001F18 AE 7F FF         [ 2] 1781 	ldw x,#MAX_LINENO ; biggest line number 
      001F1B 1F 03            [ 2] 1782 	ldw (LAST,sp),x 
      001F1D CD 19 5D         [ 4] 1783 	call arg_list
      001F20 4D               [ 1] 1784 	tnz a
      001F21 27 31            [ 1] 1785 	jreq list_loop 
      001F23 A1 02            [ 1] 1786 	cp a,#2 
      001F25 27 07            [ 1] 1787 	jreq 4$
      001F27 A1 01            [ 1] 1788 	cp a,#1 
      001F29 27 06            [ 1] 1789 	jreq first_line 
      001F2B CC 16 9E         [ 2] 1790 	jp syntax_error 
      001F2E 85               [ 2] 1791 4$:	popw x 
      001F2F 1F 05            [ 2] 1792 	ldw (LAST+2,sp),x 
      001F31                       1793 first_line:
      001F31 85               [ 2] 1794 	popw x
      001F32 1F 01            [ 2] 1795 	ldw (FIRST,sp),x 
      001F34                       1796 lines_skip:
      001F34 CE 00 1B         [ 2] 1797 	ldw x,txtbgn
      001F37 1F 05            [ 2] 1798 2$:	ldw (LN_PTR,sp),x 
      001F39 C3 00 1D         [ 2] 1799 	cpw x,txtend 
      001F3C 2A 38            [ 1] 1800 	jrpl list_exit 
      001F3E FE               [ 2] 1801 	ldw x,(x) ;line# 
      001F3F 13 01            [ 2] 1802 	cpw x,(FIRST,sp)
      001F41 2A 11            [ 1] 1803 	jrpl list_loop 
      001F43 1E 05            [ 2] 1804 	ldw x,(LN_PTR,sp) 
      001F45 E6 02            [ 1] 1805 	ld a,(2,x)
      001F47 C7 00 0E         [ 1] 1806 	ld acc8,a 
      001F4A 72 5F 00 0D      [ 1] 1807 	clr acc16 
      001F4E 72 BB 00 0D      [ 2] 1808 	addw x,acc16
      001F52 20 E3            [ 2] 1809 	jra 2$ 
                                   1810 ; print loop
      001F54                       1811 list_loop:
      001F54 1E 05            [ 2] 1812 	ldw x,(LN_PTR,sp)
      001F56 E6 02            [ 1] 1813 	ld a,(2,x) 
      001F58 CD 1F CB         [ 4] 1814 	call prt_basic_line
      001F5B 1E 05            [ 2] 1815 	ldw x,(LN_PTR,sp)
      001F5D E6 02            [ 1] 1816 	ld a,(2,x)
      001F5F C7 00 0E         [ 1] 1817 	ld acc8,a 
      001F62 72 5F 00 0D      [ 1] 1818 	clr acc16 
      001F66 72 BB 00 0D      [ 2] 1819 	addw x,acc16
      001F6A C3 00 1D         [ 2] 1820 	cpw x,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      001F6D 2A 07            [ 1] 1821 	jrpl list_exit
      001F6F 1F 05            [ 2] 1822 	ldw (LN_PTR,sp),x
      001F71 FE               [ 2] 1823 	ldw x,(x)
      001F72 13 03            [ 2] 1824 	cpw x,(LAST,sp)  
      001F74 2F DE            [ 1] 1825 	jrslt list_loop
      001F76                       1826 list_exit:
      001F76 55 00 03 00 01   [ 1] 1827 	mov in,count 
      001F7B AE 16 B8         [ 2] 1828 	ldw x,#pad 
      001F7E CF 00 04         [ 2] 1829 	ldw basicptr,x 
      001F81                       1830 	_drop VSIZE 
      001F81 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F83 CD 1E 59         [ 4] 1831 	call program_info 
      001F86 81               [ 4] 1832 	ret
                                   1833 
                                   1834 
                                   1835 ;--------------------------
                                   1836 ; BASIC: EDIT 
                                   1837 ;  copy program in FLASH 
                                   1838 ;  to RAM for edition 
                                   1839 ;-------------------------
      001F87                       1840 edit:
      001F87 CD 27 B6         [ 4] 1841 	call qsign 
      001F8A 27 07            [ 1] 1842 	jreq 1$ 
      001F8C AE 1F B4         [ 2] 1843 	ldw x,#NOT_SAVED 
      001F8F CD 09 9D         [ 4] 1844 	call puts 
      001F92 81               [ 4] 1845 	ret 
      001F93                       1846 1$: 
      001F93 90 AE 35 80      [ 2] 1847 	ldw y,#app_sign ; source address 
      001F97 CE 35 82         [ 2] 1848     ldw x,app_size  
      001F9A 1C 00 04         [ 2] 1849 	addw x,#4 
      001F9D CF 00 0D         [ 2] 1850 	ldw acc16,x  ; bytes to copy 
      001FA0 AE 00 7C         [ 2] 1851 	ldw x,#rsign ; destination address 
      001FA3 CD 14 0E         [ 4] 1852 	call move  
      001FA6 AE 00 80         [ 2] 1853 	ldw x,#free_ram 
      001FA9 CF 00 1B         [ 2] 1854 	ldw txtbgn,x 
      001FAC 72 BB 00 7E      [ 2] 1855 	addw x,rsize  
      001FB0 CF 00 1D         [ 2] 1856 	ldw txtend,x 
      001FB3 81               [ 4] 1857 	ret 
                                   1858 
      001FB4 4E 6F 20 61 70 70 6C  1859 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1860 
                                   1861 
                                   1862 ;--------------------------
                                   1863 ; decompile line from token list
                                   1864 ; and print it. 
                                   1865 ; input:
                                   1866 ;   A       stop at this position 
                                   1867 ;   X 		pointer at line
                                   1868 ; output:
                                   1869 ;   none 
                                   1870 ;--------------------------	
      001FCB                       1871 prt_basic_line:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      001FCB 90 89            [ 2] 1872 	pushw y 
      001FCD C7 00 03         [ 1] 1873 	ld count,a 
      001FD0 E6 02            [ 1] 1874 	ld a,(2,x)
      001FD2 C1 00 03         [ 1] 1875 	cp a,count 
      001FD5 2A 03            [ 1] 1876 	jrpl 1$ 
      001FD7 C7 00 03         [ 1] 1877 	ld count,a 
      001FDA CF 00 04         [ 2] 1878 1$:	ldw basicptr,x 
      001FDD 90 AE 16 68      [ 2] 1879 	ldw y,#tib  
      001FE1 CD 11 F8         [ 4] 1880 	call decompile 
      001FE4 CD 09 9D         [ 4] 1881 	call puts 
      001FE7 A6 0D            [ 1] 1882 	ld a,#CR 
      001FE9 CD 09 40         [ 4] 1883 	call putc 
      001FEC 90 85            [ 2] 1884 	popw y 
      001FEE 81               [ 4] 1885 	ret 
                                   1886 
                                   1887 
                                   1888 ;---------------------------------
                                   1889 ; BASIC: PRINT|? arg_list 
                                   1890 ; print values from argument list
                                   1891 ;----------------------------------
                           000001  1892 	CCOMMA=1
                           000001  1893 	VSIZE=1
      001FEF                       1894 print:
      001FEF                       1895 	_vars VSIZE 
      001FEF 52 01            [ 2]    1     sub sp,#VSIZE 
      001FF1                       1896 reset_comma:
      001FF1 0F 01            [ 1] 1897 	clr (CCOMMA,sp)
      001FF3                       1898 prt_loop:
      001FF3 CD 17 9F         [ 4] 1899 	call next_token
      001FF6 A1 02            [ 1] 1900 	cp a,#CMD_END 
      001FF8 25 08            [ 1] 1901 	jrult 0$
      001FFA A1 0A            [ 1] 1902 	cp a,#TK_COLON 
      001FFC 27 04            [ 1] 1903 	jreq 0$
      001FFE A1 80            [ 1] 1904 	cp a,#TK_CMD
      002000 26 07            [ 1] 1905 	jrne 10$
      002002                       1906 0$:
      002002                       1907 	_unget_token 
      002002 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002007 20 5D            [ 2] 1908 	jra 8$ 
      002009                       1909 10$:	
      002009 A1 02            [ 1] 1910 	cp a,#TK_QSTR
      00200B 27 12            [ 1] 1911 	jreq 1$
      00200D A1 04            [ 1] 1912 	cp a,#TK_CHAR 
      00200F 27 1B            [ 1] 1913 	jreq 2$ 
      002011 A1 82            [ 1] 1914 	cp a,#TK_CFUNC 
      002013 27 1F            [ 1] 1915 	jreq 3$
      002015 A1 08            [ 1] 1916 	cp a,#TK_COMMA 
      002017 27 24            [ 1] 1917 	jreq 4$
      002019 A1 09            [ 1] 1918 	cp a,#TK_SHARP 
      00201B 27 24            [ 1] 1919 	jreq 5$
      00201D 20 37            [ 2] 1920 	jra 7$ 
      00201F                       1921 1$:	; print string 
      00201F CD 09 9D         [ 4] 1922 	call puts
      002022 5C               [ 1] 1923 	incw x
      002023 72 B0 00 04      [ 2] 1924 	subw x,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002027 CF 00 00         [ 2] 1925 	ldw in.w,x  
      00202A 20 C5            [ 2] 1926 	jra reset_comma
      00202C                       1927 2$:	; print character 
      00202C CD 17 EE         [ 4] 1928 	call get_char 
      00202F CD 09 40         [ 4] 1929 	call putc 
      002032 20 BD            [ 2] 1930 	jra reset_comma 
      002034                       1931 3$: ; print character function value  	
      002034 CD 17 B8         [ 4] 1932 	call get_code_addr 
      002037 FD               [ 4] 1933 	call (x)
      002038 CD 09 40         [ 4] 1934 	call putc
      00203B 20 B4            [ 2] 1935 	jra reset_comma 
      00203D                       1936 4$: ; set comma state 
      00203D 03 01            [ 1] 1937 	cpl (CCOMMA,sp)
      00203F 20 B2            [ 2] 1938 	jra prt_loop   
      002041                       1939 5$: ; # character must be followed by an integer   
      002041 CD 17 9F         [ 4] 1940 	call next_token
      002044 A1 84            [ 1] 1941 	cp a,#TK_INTGR 
      002046 27 03            [ 1] 1942 	jreq 6$
      002048 CC 16 9E         [ 2] 1943 	jp syntax_error 
      00204B                       1944 6$: ; set tab width
      00204B CD 17 DE         [ 4] 1945 	call get_int24 
      00204E 9F               [ 1] 1946 	ld a,xl 
      00204F A4 0F            [ 1] 1947 	and a,#15 
      002051 C7 00 23         [ 1] 1948 	ld tab_width,a 
      002054 20 9B            [ 2] 1949 	jra reset_comma 
      002056                       1950 7$:	
      002056                       1951 	_unget_token 
      002056 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00205B CD 1B A1         [ 4] 1952 	call condition
      00205E 4D               [ 1] 1953 	tnz a 
      00205F 27 05            [ 1] 1954 	jreq 8$    
      002061 CD 18 19         [ 4] 1955     call print_top
      002064 20 8B            [ 2] 1956 	jra reset_comma 
      002066                       1957 8$:
      002066 0D 01            [ 1] 1958 	tnz (CCOMMA,sp)
      002068 26 05            [ 1] 1959 	jrne 9$
      00206A A6 0D            [ 1] 1960 	ld a,#CR 
      00206C CD 09 40         [ 4] 1961     call putc 
      00206F                       1962 9$:	_drop VSIZE 
      00206F 5B 01            [ 2]    1     addw sp,#VSIZE 
      002071 81               [ 4] 1963 	ret 
                                   1964 
                                   1965 ;----------------------
                                   1966 ; 'save_context' and
                                   1967 ; 'rest_context' must be 
                                   1968 ; called at the same 
                                   1969 ; call stack depth 
                                   1970 ; i.e. SP must have the 
                                   1971 ; save value at  
                                   1972 ; entry point of both 
                                   1973 ; routine. 
                                   1974 ;---------------------
                           000004  1975 	CTXT_SIZE=4 ; size of saved data 
                                   1976 ;--------------------
                                   1977 ; save current BASIC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                   1978 ; interpreter context 
                                   1979 ; on stack 
                                   1980 ;--------------------
      002072                       1981 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      002072                       1982 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      002072                       1983 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      002072                       1984 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      002072                       1985 save_context:
      002072 CE 00 04         [ 2] 1986 	ldw x,basicptr 
      002075 1F 03            [ 2] 1987 	ldw (BPTR,sp),x
      002077 C6 00 01         [ 1] 1988 	ld a,in 
      00207A 6B 05            [ 1] 1989 	ld (IN,sp),a
      00207C C6 00 03         [ 1] 1990 	ld a,count 
      00207F 6B 06            [ 1] 1991 	ld (CNT,sp),a  
      002081 81               [ 4] 1992 	ret
                                   1993 
                                   1994 ;-----------------------
                                   1995 ; restore previously saved 
                                   1996 ; BASIC interpreter context 
                                   1997 ; from stack 
                                   1998 ;-------------------------
      002082                       1999 rest_context:
      002082 1E 03            [ 2] 2000 	ldw x,(BPTR,sp)
      002084 CF 00 04         [ 2] 2001 	ldw basicptr,x 
      002087 7B 05            [ 1] 2002 	ld a,(IN,sp)
      002089 C7 00 01         [ 1] 2003 	ld in,a
      00208C 7B 06            [ 1] 2004 	ld a,(CNT,sp)
      00208E C7 00 03         [ 1] 2005 	ld count,a  
      002091 81               [ 4] 2006 	ret
                                   2007 
                                   2008 
                                   2009 
                                   2010 ;------------------------------------------
                                   2011 ; BASIC: INPUT [string]var[,[string]var]
                                   2012 ; input value in variables 
                                   2013 ; [string] optionally can be used as prompt 
                                   2014 ;-----------------------------------------
                           000001  2015 	CX_BPTR=1
                           000003  2016 	CX_IN=3
                           000004  2017 	CX_CNT=4
                           000005  2018 	SKIP=5
                           000005  2019 	VSIZE=5
      002092                       2020 input_var:
      002092 90 89            [ 2] 2021 	pushw y 
      002094                       2022 	_vars VSIZE 
      002094 52 05            [ 2]    1     sub sp,#VSIZE 
      002096                       2023 input_loop:
      002096 0F 05            [ 1] 2024 	clr (SKIP,sp)
      002098 CD 17 9F         [ 4] 2025 	call next_token 
      00209B A1 02            [ 1] 2026 	cp a,#TK_QSTR 
      00209D 26 10            [ 1] 2027 	jrne 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      00209F CD 09 9D         [ 4] 2028 	call puts 
      0020A2 5C               [ 1] 2029 	incw x 
      0020A3 72 B0 00 04      [ 2] 2030 	subw x,basicptr 
      0020A7 CF 00 00         [ 2] 2031 	ldw in.w,x 
      0020AA 03 05            [ 1] 2032 	cpl (SKIP,sp)
      0020AC CD 17 9F         [ 4] 2033 	call next_token 
      0020AF A1 85            [ 1] 2034 1$: cp a,#TK_VAR  
      0020B1 27 03            [ 1] 2035 	jreq 2$ 
      0020B3 CC 16 9E         [ 2] 2036 	jp syntax_error
      0020B6 CD 17 D4         [ 4] 2037 2$:	call get_addr
      0020B9 CF 00 19         [ 2] 2038 	ldw ptr16,x 
      0020BC 0D 05            [ 1] 2039 	tnz (SKIP,sp)
      0020BE 26 06            [ 1] 2040 	jrne 21$ 
      0020C0 CD 11 CD         [ 4] 2041 	call var_name 
      0020C3 CD 09 40         [ 4] 2042 	call putc   
      0020C6                       2043 21$:
      0020C6 A6 3A            [ 1] 2044 	ld a,#':
      0020C8 CD 09 40         [ 4] 2045 	call putc 
      0020CB CD 20 72         [ 4] 2046 	call save_context 
      0020CE 72 5F 00 03      [ 1] 2047 	clr count  
      0020D2 CD 0A A2         [ 4] 2048 	call readln 
      0020D5 AE 16 68         [ 2] 2049 	ldw x,#tib 
      0020D8 3B 00 03         [ 1] 2050 	push count
      0020DB 4B 00            [ 1] 2051 	push #0 
      0020DD 72 FB 01         [ 2] 2052 	addw x,(1,sp)
      0020E0 5C               [ 1] 2053 	incw x 
      0020E1                       2054 	_drop 2 
      0020E1 5B 02            [ 2]    1     addw sp,#2 
      0020E3 72 5F 00 01      [ 1] 2055 	clr in 
      0020E7 CD 0F 17         [ 4] 2056 	call get_token
      0020EA A1 84            [ 1] 2057 	cp a,#TK_INTGR
      0020EC 27 14            [ 1] 2058 	jreq 3$ 
      0020EE A1 11            [ 1] 2059 	cp a,#TK_MINUS
      0020F0 26 07            [ 1] 2060 	jrne 22$
      0020F2 CD 0F 17         [ 4] 2061 	call get_token 
      0020F5 A1 84            [ 1] 2062 	cp a,#TK_INTGR 
      0020F7 27 06            [ 1] 2063 	jreq 23$
      0020F9                       2064 22$:
      0020F9 CD 20 82         [ 4] 2065 	call rest_context 
      0020FC CC 16 9E         [ 2] 2066 	jp syntax_error
      0020FF                       2067 23$:
      0020FF CD 02 09         [ 4] 2068 	call neg_acc24	
      002102                       2069 3$: 
      002102 C6 00 0C         [ 1] 2070 	ld a,acc24 
      002105 CE 00 0D         [ 2] 2071 	ldw x,acc16 
      002108 72 C7 00 19      [ 4] 2072 	ld [ptr16],a
      00210C 72 5C 00 1A      [ 1] 2073 	inc ptr8  
      002110 72 CF 00 19      [ 5] 2074 	ldw [ptr16],x 
      002114 CD 20 82         [ 4] 2075 	call rest_context
      002117 CD 17 9F         [ 4] 2076 	call next_token 
      00211A A1 08            [ 1] 2077 	cp a,#TK_COMMA
      00211C 26 03            [ 1] 2078 	jrne 4$ 
      00211E CC 20 96         [ 2] 2079 	jp input_loop
      002121                       2080 4$:
      002121 A1 00            [ 1] 2081 	cp a,#TK_NONE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002123 27 07            [ 1] 2082 	jreq input_exit  
      002125 A1 0A            [ 1] 2083 	cp a,#TK_COLON 
      002127 27 03            [ 1] 2084     jreq input_exit 
      002129 CC 16 9E         [ 2] 2085 	jp syntax_error 
      00212C                       2086 input_exit:
      00212C                       2087 	_drop VSIZE 
      00212C 5B 05            [ 2]    1     addw sp,#VSIZE 
      00212E 90 85            [ 2] 2088 	popw y 
      002130 81               [ 4] 2089 	ret 
                                   2090 
                                   2091 
                                   2092 ;---------------------
                                   2093 ; BASIC: REM | ' 
                                   2094 ; skip comment to end of line 
                                   2095 ;---------------------- 
      002131                       2096 remark::
      002131 55 00 03 00 01   [ 1] 2097 	mov in,count 
      002136 81               [ 4] 2098  	ret 
                                   2099 
                                   2100 
                                   2101 ;---------------------
                                   2102 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2103 ; read in loop 'addr'  
                                   2104 ; apply & 'mask' to value 
                                   2105 ; loop while result==0.  
                                   2106 ; 'xor_mask' is used to 
                                   2107 ; invert the wait logic.
                                   2108 ; i.e. loop while not 0.
                                   2109 ;---------------------
                           000001  2110 	XMASK=1 
                           000002  2111 	MASK=2
                           000003  2112 	ADDR=3
                           000004  2113 	VSIZE=4
      002137                       2114 wait: 
      002137                       2115 	_vars VSIZE
      002137 52 04            [ 2]    1     sub sp,#VSIZE 
      002139 0F 01            [ 1] 2116 	clr (XMASK,sp) 
      00213B CD 19 5D         [ 4] 2117 	call arg_list 
      00213E A1 02            [ 1] 2118 	cp a,#2
      002140 24 03            [ 1] 2119 	jruge 0$
      002142 CC 16 9E         [ 2] 2120 	jp syntax_error 
      002145 A1 03            [ 1] 2121 0$:	cp a,#3
      002147 25 0C            [ 1] 2122 	jrult 1$
      002149                       2123 	_xpop  ; xor mask 
      002149 90 F6            [ 1]    1     ld a,(y)
      00214B 93               [ 1]    2     ldw x,y 
      00214C EE 01            [ 2]    3     ldw x,(1,x)
      00214E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002152 9F               [ 1] 2124 	ld a,xl 
      002153 6B 01            [ 1] 2125 	ld (XMASK,sp),a 
      002155                       2126 1$: _xpop ; mask
      002155 90 F6            [ 1]    1     ld a,(y)
      002157 93               [ 1]    2     ldw x,y 
      002158 EE 01            [ 2]    3     ldw x,(1,x)
      00215A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      00215E 9F               [ 1] 2127     ld a,xl  
      00215F 6B 02            [ 1] 2128 	ld (MASK,sp),a 
      002161                       2129 	_xpop ; address 
      002161 90 F6            [ 1]    1     ld a,(y)
      002163 93               [ 1]    2     ldw x,y 
      002164 EE 01            [ 2]    3     ldw x,(1,x)
      002166 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00216A F6               [ 1] 2130 2$:	ld a,(x)
      00216B 14 02            [ 1] 2131 	and a,(MASK,sp)
      00216D 18 01            [ 1] 2132 	xor a,(XMASK,sp)
      00216F 27 F9            [ 1] 2133 	jreq 2$ 
      002171                       2134 	_drop VSIZE 
      002171 5B 04            [ 2]    1     addw sp,#VSIZE 
      002173 81               [ 4] 2135 	ret 
                                   2136 
                                   2137 ;---------------------
                                   2138 ; BASIC: BSET addr,mask
                                   2139 ; set bits at 'addr' corresponding 
                                   2140 ; to those of 'mask' that are at 1.
                                   2141 ; arguments:
                                   2142 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2143 ;   mask        mask|addr
                                   2144 ; output:
                                   2145 ;	none 
                                   2146 ;--------------------------
      002174                       2147 bit_set:
      002174 CD 19 5D         [ 4] 2148 	call arg_list 
      002177 A1 02            [ 1] 2149 	cp a,#2	 
      002179 27 03            [ 1] 2150 	jreq 1$ 
      00217B CC 16 9E         [ 2] 2151 	jp syntax_error
      00217E                       2152 1$: 
      00217E                       2153 	_xpop ; mask 
      00217E 90 F6            [ 1]    1     ld a,(y)
      002180 93               [ 1]    2     ldw x,y 
      002181 EE 01            [ 2]    3     ldw x,(1,x)
      002183 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002187 9F               [ 1] 2154 	ld a,xl
      002188 88               [ 1] 2155 	push a  
      002189                       2156 	_xpop ; addr  
      002189 90 F6            [ 1]    1     ld a,(y)
      00218B 93               [ 1]    2     ldw x,y 
      00218C EE 01            [ 2]    3     ldw x,(1,x)
      00218E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002192 84               [ 1] 2157 	pop a 
      002193 FA               [ 1] 2158 	or a,(x)
      002194 F7               [ 1] 2159 	ld (x),a
      002195 81               [ 4] 2160 	ret 
                                   2161 
                                   2162 ;---------------------
                                   2163 ; BASIC: BRES addr,mask
                                   2164 ; reset bits at 'addr' corresponding 
                                   2165 ; to those of 'mask' that are at 1.
                                   2166 ; arguments:
                                   2167 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2168 ;   mask	    ~mask&*addr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



                                   2169 ; output:
                                   2170 ;	none 
                                   2171 ;--------------------------
      002196                       2172 bit_reset:
      002196 CD 19 5D         [ 4] 2173 	call arg_list 
      002199 A1 02            [ 1] 2174 	cp a,#2  
      00219B 27 03            [ 1] 2175 	jreq 1$ 
      00219D CC 16 9E         [ 2] 2176 	jp syntax_error
      0021A0                       2177 1$: 
      0021A0                       2178 	_xpop ; mask 
      0021A0 90 F6            [ 1]    1     ld a,(y)
      0021A2 93               [ 1]    2     ldw x,y 
      0021A3 EE 01            [ 2]    3     ldw x,(1,x)
      0021A5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021A9 9F               [ 1] 2179 	ld a,xl 
      0021AA 43               [ 1] 2180 	cpl a
      0021AB 88               [ 1] 2181 	push a  
      0021AC                       2182 	_xpop ; addr  
      0021AC 90 F6            [ 1]    1     ld a,(y)
      0021AE 93               [ 1]    2     ldw x,y 
      0021AF EE 01            [ 2]    3     ldw x,(1,x)
      0021B1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021B5 84               [ 1] 2183 	pop a 
      0021B6 F4               [ 1] 2184 	and a,(x)
      0021B7 F7               [ 1] 2185 	ld (x),a 
      0021B8 81               [ 4] 2186 	ret 
                                   2187 
                                   2188 ;---------------------
                                   2189 ; BASIC: BTOGL addr,mask
                                   2190 ; toggle bits at 'addr' corresponding 
                                   2191 ; to those of 'mask' that are at 1.
                                   2192 ; arguments:
                                   2193 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2194 ;   mask	    mask^*addr  
                                   2195 ; output:
                                   2196 ;	none 
                                   2197 ;--------------------------
      0021B9                       2198 bit_toggle:
      0021B9 CD 19 5D         [ 4] 2199 	call arg_list 
      0021BC A1 02            [ 1] 2200 	cp a,#2 
      0021BE 27 03            [ 1] 2201 	jreq 1$ 
      0021C0 CC 16 9E         [ 2] 2202 	jp syntax_error
      0021C3                       2203 1$: _xpop ; mask 
      0021C3 90 F6            [ 1]    1     ld a,(y)
      0021C5 93               [ 1]    2     ldw x,y 
      0021C6 EE 01            [ 2]    3     ldw x,(1,x)
      0021C8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021CC 9F               [ 1] 2204 	ld a,xl
      0021CD 88               [ 1] 2205 	push a 
      0021CE                       2206 	_xpop  ; addr  
      0021CE 90 F6            [ 1]    1     ld a,(y)
      0021D0 93               [ 1]    2     ldw x,y 
      0021D1 EE 01            [ 2]    3     ldw x,(1,x)
      0021D3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021D7 84               [ 1] 2207 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0021D8 F8               [ 1] 2208 	xor a,(x)
      0021D9 F7               [ 1] 2209 	ld (x),a 
      0021DA 81               [ 4] 2210 	ret 
                                   2211 
                                   2212 
                                   2213 ;---------------------
                                   2214 ; BASIC: BTEST(addr,bit)
                                   2215 ; return bit value at 'addr' 
                                   2216 ; bit is in range {0..7}.
                                   2217 ; arguments:
                                   2218 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2219 ;   bit 	    bit position {0..7}  
                                   2220 ; output:
                                   2221 ;	A:X       bit value  
                                   2222 ;--------------------------
      0021DB                       2223 bit_test:
      0021DB CD 19 58         [ 4] 2224 	call func_args 
      0021DE A1 02            [ 1] 2225 	cp a,#2
      0021E0 27 03            [ 1] 2226 	jreq 0$
      0021E2 CC 16 9E         [ 2] 2227 	jp syntax_error
      0021E5                       2228 0$:	
      0021E5                       2229 	_xpop 
      0021E5 90 F6            [ 1]    1     ld a,(y)
      0021E7 93               [ 1]    2     ldw x,y 
      0021E8 EE 01            [ 2]    3     ldw x,(1,x)
      0021EA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021EE 9F               [ 1] 2230 	ld a,xl 
      0021EF A4 07            [ 1] 2231 	and a,#7
      0021F1 88               [ 1] 2232 	push a   
      0021F2 A6 01            [ 1] 2233 	ld a,#1 
      0021F4 0D 01            [ 1] 2234 1$: tnz (1,sp)
      0021F6 27 05            [ 1] 2235 	jreq 2$
      0021F8 48               [ 1] 2236 	sll a 
      0021F9 0A 01            [ 1] 2237 	dec (1,sp)
      0021FB 20 F7            [ 2] 2238 	jra 1$
      0021FD 6B 01            [ 1] 2239 2$: ld (1,sp),a  
      0021FF                       2240 	_xpop ; address  
      0021FF 90 F6            [ 1]    1     ld a,(y)
      002201 93               [ 1]    2     ldw x,y 
      002202 EE 01            [ 2]    3     ldw x,(1,x)
      002204 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002208 84               [ 1] 2241 	pop a 
      002209 F4               [ 1] 2242 	and a,(x)
      00220A 27 02            [ 1] 2243 	jreq 3$
      00220C A6 01            [ 1] 2244 	ld a,#1 
      00220E 5F               [ 1] 2245 3$:	clrw x 
      00220F 97               [ 1] 2246 	ld xl,a
      002210 4F               [ 1] 2247 	clr a  
      002211 81               [ 4] 2248 	ret
                                   2249 
                                   2250 ;--------------------
                                   2251 ; BASIC: POKE addr,byte
                                   2252 ; put a byte at addr 
                                   2253 ;--------------------
      002212                       2254 poke:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002212 CD 19 5D         [ 4] 2255 	call arg_list 
      002215 A1 02            [ 1] 2256 	cp a,#2
      002217 27 03            [ 1] 2257 	jreq 1$
      002219 CC 16 9E         [ 2] 2258 	jp syntax_error
      00221C                       2259 1$:	
      00221C                       2260 	_xpop ; byte   
      00221C 90 F6            [ 1]    1     ld a,(y)
      00221E 93               [ 1]    2     ldw x,y 
      00221F EE 01            [ 2]    3     ldw x,(1,x)
      002221 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002225 9F               [ 1] 2261     ld a,xl 
      002226 88               [ 1] 2262 	push a 
      002227                       2263 	_xpop ; address 
      002227 90 F6            [ 1]    1     ld a,(y)
      002229 93               [ 1]    2     ldw x,y 
      00222A EE 01            [ 2]    3     ldw x,(1,x)
      00222C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002230 84               [ 1] 2264 	pop a 
      002231 F7               [ 1] 2265 	ld (x),a 
      002232 81               [ 4] 2266 	ret 
                                   2267 
                                   2268 ;-----------------------
                                   2269 ; BASIC: PEEK(addr)
                                   2270 ; get the byte at addr 
                                   2271 ; input:
                                   2272 ;	none 
                                   2273 ; output:
                                   2274 ;	X 		value 
                                   2275 ;-----------------------
      002233                       2276 peek:
      002233 CD 19 58         [ 4] 2277 	call func_args
      002236 A1 01            [ 1] 2278 	cp a,#1 
      002238 27 03            [ 1] 2279 	jreq 1$
      00223A CC 16 9E         [ 2] 2280 	jp syntax_error
      00223D                       2281 1$: _xpop ; address  
      00223D 90 F6            [ 1]    1     ld a,(y)
      00223F 93               [ 1]    2     ldw x,y 
      002240 EE 01            [ 2]    3     ldw x,(1,x)
      002242 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002246 C7 00 18         [ 1] 2282 	ld farptr,a 
      002249 CF 00 19         [ 2] 2283 	ldw ptr16,x 
      00224C 92 BC 00 18      [ 5] 2284 	ldf a,[farptr]
      002250 5F               [ 1] 2285 	clrw x 
      002251 97               [ 1] 2286 	ld xl,a 
      002252 4F               [ 1] 2287 	clr a 
      002253 81               [ 4] 2288 	ret 
                                   2289 
                                   2290 ;---------------------------
                                   2291 ; BASIC IF expr : instructions
                                   2292 ; evaluate expr and if true 
                                   2293 ; execute instructions on same line. 
                                   2294 ;----------------------------
      002254                       2295 if: 
      002254 CD 1B A1         [ 4] 2296 	call condition  
      002257                       2297 	_xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002257 90 F6            [ 1]    1     ld a,(y)
      002259 93               [ 1]    2     ldw x,y 
      00225A EE 01            [ 2]    3     ldw x,(1,x)
      00225C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002260 4D               [ 1] 2298 	tnz  a  
      002261 26 0D            [ 1] 2299 	jrne 9$
      002263 5D               [ 2] 2300 	tnzw x 
      002264 26 0A            [ 1] 2301 	jrne 9$  
                                   2302 ;skip to next line
      002266 55 00 03 00 01   [ 1] 2303 	mov in,count
      00226B                       2304 	_drop 2 
      00226B 5B 02            [ 2]    1     addw sp,#2 
      00226D CC 17 51         [ 2] 2305 	jp next_line
      002270 81               [ 4] 2306 9$:	ret 
                                   2307 
                                   2308 ;------------------------
                                   2309 ; BASIC: FOR var=expr 
                                   2310 ; set variable to expression 
                                   2311 ; leave variable address 
                                   2312 ; on stack and set
                                   2313 ; FLOOP bit in 'flags'
                                   2314 ;-----------------
                           000001  2315 	RETL1=1 ; return address  
                           000003  2316 	FSTEP=3  ; variable increment int24
                           000006  2317 	LIMIT=6 ; loop limit, int24  
                           000009  2318 	CVAR=9   ; control variable 
                           00000B  2319 	INW=11   ;  in.w saved
                           00000D  2320 	BPTR=13 ; baseptr saved
                           00000D  2321 	VSIZE=13  
      002271                       2322 for: ; { -- var_addr }
      002271 85               [ 2] 2323 	popw x ; call return address 
      002272                       2324 	_vars VSIZE 
      002272 52 0D            [ 2]    1     sub sp,#VSIZE 
      002274 89               [ 2] 2325 	pushw x  ; RETL1 
      002275 A6 85            [ 1] 2326 	ld a,#TK_VAR 
      002277 CD 19 4B         [ 4] 2327 	call expect
      00227A CD 17 D4         [ 4] 2328 	call get_addr
      00227D 1F 09            [ 2] 2329 	ldw (CVAR,sp),x  ; control variable 
      00227F CD 1C 89         [ 4] 2330 	call let_eval 
      002282 72 14 00 22      [ 1] 2331 	bset flags,#FLOOP 
      002286 CD 17 9F         [ 4] 2332 	call next_token 
      002289 A1 80            [ 1] 2333 	cp a,#TK_CMD 
      00228B 27 03            [ 1] 2334 	jreq 1$
      00228D CC 16 9E         [ 2] 2335 	jp syntax_error
      002290                       2336 1$:  
      002290 CD 17 B8         [ 4] 2337 	call get_code_addr
      002293 A3 22 9B         [ 2] 2338 	cpw x,#to   
      002296 27 03            [ 1] 2339 	jreq to
      002298 CC 16 9E         [ 2] 2340 	jp syntax_error 
                                   2341 
                                   2342 ;-----------------------------------
                                   2343 ; BASIC: TO expr 
                                   2344 ; second part of FOR loop initilization
                                   2345 ; leave limit on stack and set 
                                   2346 ; FTO bit in 'flags'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



                                   2347 ;-----------------------------------
      00229B                       2348 to: ; { var_addr -- var_addr limit step }
      00229B 72 04 00 22 03   [ 2] 2349 	btjt flags,#FLOOP,1$
      0022A0 CC 16 9E         [ 2] 2350 	jp syntax_error
      0022A3 CD 1A 88         [ 4] 2351 1$: call expression   
      0022A6 A1 84            [ 1] 2352 	cp a,#TK_INTGR 
      0022A8 27 03            [ 1] 2353 	jreq 2$ 
      0022AA CC 16 9E         [ 2] 2354 	jp syntax_error
      0022AD                       2355 2$: _xpop
      0022AD 90 F6            [ 1]    1     ld a,(y)
      0022AF 93               [ 1]    2     ldw x,y 
      0022B0 EE 01            [ 2]    3     ldw x,(1,x)
      0022B2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022B6 6B 06            [ 1] 2356 	ld (LIMIT,sp),a 
      0022B8 1F 07            [ 2] 2357 	ldw (LIMIT+1,sp),x
      0022BA CD 17 9F         [ 4] 2358 	call next_token
      0022BD A1 00            [ 1] 2359 	cp a,#TK_NONE  
      0022BF 27 11            [ 1] 2360 	jreq 4$ 
      0022C1 A1 80            [ 1] 2361 	cp a,#TK_CMD
      0022C3 26 08            [ 1] 2362 	jrne 3$
      0022C5 CD 17 B8         [ 4] 2363 	call get_code_addr
      0022C8 A3 22 DB         [ 2] 2364 	cpw x,#step 
      0022CB 27 0E            [ 1] 2365 	jreq step
      0022CD                       2366 3$:	
      0022CD                       2367 	_unget_token   	 
      0022CD 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0022D2                       2368 4$:	
      0022D2 0F 03            [ 1] 2369 	clr (FSTEP,sp) 
      0022D4 AE 00 01         [ 2] 2370 	ldw x,#1   ; default step  
      0022D7 1F 04            [ 2] 2371 	ldw (FSTEP+1,sp),x 
      0022D9 20 2F            [ 2] 2372 	jra store_loop_addr 
                                   2373 
                                   2374 
                                   2375 ;----------------------------------
                                   2376 ; BASIC: STEP expr 
                                   2377 ; optional third par of FOR loop
                                   2378 ; initialization. 	
                                   2379 ;------------------------------------
      0022DB                       2380 step: ; {var limit -- var limit step}
      0022DB 72 04 00 22 03   [ 2] 2381 	btjt flags,#FLOOP,1$
      0022E0 CC 16 9E         [ 2] 2382 	jp syntax_error
      0022E3 CD 1A 88         [ 4] 2383 1$: call expression 
      0022E6 A1 84            [ 1] 2384 	cp a,#TK_INTGR
      0022E8 27 03            [ 1] 2385 	jreq 2$
      0022EA CC 16 9E         [ 2] 2386 	jp syntax_error
      0022ED                       2387 2$:	
      0022ED                       2388 	_xpop 
      0022ED 90 F6            [ 1]    1     ld a,(y)
      0022EF 93               [ 1]    2     ldw x,y 
      0022F0 EE 01            [ 2]    3     ldw x,(1,x)
      0022F2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022F6 6B 03            [ 1] 2389 	ld (FSTEP,sp),a 
      0022F8 1F 04            [ 2] 2390 	ldw (FSTEP+1,sp),x ; step
                                   2391 ; if step < 0 decrement LIMIT 
      0022FA 4D               [ 1] 2392 	tnz a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      0022FB 2A 0D            [ 1] 2393 	jrpl store_loop_addr 
      0022FD 7B 06            [ 1] 2394 	ld a,(LIMIT,sp)
      0022FF 1E 07            [ 2] 2395 	ldw x,(LIMIT+1,sp)
      002301 1D 00 01         [ 2] 2396 	subw x,#1 
      002304 A2 00            [ 1] 2397 	sbc a,#0 
      002306 6B 06            [ 1] 2398 	ld (LIMIT,sp),a 
      002308 1F 07            [ 2] 2399 	ldw (LIMIT+1,sp),x 
                                   2400 ; leave loop back entry point on cstack 
                                   2401 ; cstack is 1 call deep from interpreter
      00230A                       2402 store_loop_addr:
      00230A CE 00 04         [ 2] 2403 	ldw x,basicptr
      00230D 1F 0D            [ 2] 2404 	ldw (BPTR,sp),x 
      00230F CE 00 00         [ 2] 2405 	ldw x,in.w 
      002312 1F 0B            [ 2] 2406 	ldw (INW,sp),x   
      002314 72 15 00 22      [ 1] 2407 	bres flags,#FLOOP 
      002318 72 5C 00 1F      [ 1] 2408 	inc loop_depth  
      00231C 81               [ 4] 2409 	ret 
                                   2410 
                                   2411 ;--------------------------------
                                   2412 ; BASIC: NEXT var 
                                   2413 ; FOR loop control 
                                   2414 ; increment variable with step 
                                   2415 ; and compare with limit 
                                   2416 ; loop if threshold not crossed.
                                   2417 ; else stack. 
                                   2418 ; and decrement 'loop_depth' 
                                   2419 ;--------------------------------
      00231D                       2420 next: ; {var limit step retl1 -- [var limit step ] }
      00231D 72 5D 00 1F      [ 1] 2421 	tnz loop_depth 
      002321 26 03            [ 1] 2422 	jrne 1$ 
      002323 CC 16 9E         [ 2] 2423 	jp syntax_error 
      002326                       2424 1$: 
      002326 A6 85            [ 1] 2425 	ld a,#TK_VAR 
      002328 CD 19 4B         [ 4] 2426 	call expect
      00232B CD 17 D4         [ 4] 2427 	call get_addr 
                                   2428 ; check for good variable after NEXT 	 
      00232E 13 09            [ 2] 2429 	cpw x,(CVAR,sp)
      002330 27 03            [ 1] 2430 	jreq 2$  
      002332 CC 16 9E         [ 2] 2431 	jp syntax_error ; not the good one 
      002335                       2432 2$: 
      002335 CF 00 19         [ 2] 2433 	ldw ptr16,x 
                                   2434 	; increment variable 
      002338 F6               [ 1] 2435 	ld a,(x)
      002339 EE 01            [ 2] 2436 	ldw x,(1,x)  ; get var value 
      00233B 72 FB 04         [ 2] 2437 	addw x,(FSTEP+1,sp) ; var+step 
      00233E 19 03            [ 1] 2438 	adc a,(FSTEP,sp)
      002340 72 C7 00 19      [ 4] 2439 	ld [ptr16],a
      002344 72 5C 00 1A      [ 1] 2440 	inc ptr8  
      002348 72 CF 00 19      [ 5] 2441 	ldw [ptr16],x 
      00234C C7 00 0C         [ 1] 2442 	ld acc24,a 
      00234F CF 00 0D         [ 2] 2443 	ldw acc16,x 
      002352 7B 06            [ 1] 2444 	ld a,(LIMIT,sp)
      002354 1E 07            [ 2] 2445 	ldw x,(LIMIT+1,sp)
      002356 72 B0 00 0D      [ 2] 2446 	subw x,acc16 
      00235A C2 00 0C         [ 1] 2447 	sbc a,acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      00235D 18 03            [ 1] 2448 	xor a,(FSTEP,sp)
      00235F A8 80            [ 1] 2449 	xor a,#0x80
      002361 2B 12            [ 1] 2450 	jrmi loop_back  
      002363 20 25            [ 2] 2451 	jra loop_done   
                                   2452 ; check sign of STEP  
      002365 7B 03            [ 1] 2453 	ld a,(FSTEP,sp)
      002367 2A 07            [ 1] 2454 	jrpl 4$
                                   2455 ;negative step
      002369 C6 00 0E         [ 1] 2456     ld a,acc8 
      00236C 2F 07            [ 1] 2457 	jrslt loop_back   
      00236E 20 1A            [ 2] 2458 	jra loop_done  
      002370                       2459 4$: ; positive step
      002370 72 0E 00 0E 15   [ 2] 2460 	btjt acc8,#7,loop_done 
      002375                       2461 loop_back:
      002375 1E 0D            [ 2] 2462 	ldw x,(BPTR,sp)
      002377 CF 00 04         [ 2] 2463 	ldw basicptr,x 
      00237A 72 01 00 22 05   [ 2] 2464 	btjf flags,#FRUN,1$ 
      00237F E6 02            [ 1] 2465 	ld a,(2,x)
      002381 C7 00 03         [ 1] 2466 	ld count,a
      002384 1E 0B            [ 2] 2467 1$:	ldw x,(INW,sp)
      002386 CF 00 00         [ 2] 2468 	ldw in.w,x 
      002389 81               [ 4] 2469 	ret 
      00238A                       2470 loop_done:
                                   2471 	; remove loop data from stack  
      00238A 85               [ 2] 2472 	popw x
      00238B                       2473 	_drop VSIZE 
      00238B 5B 0D            [ 2]    1     addw sp,#VSIZE 
      00238D 72 5A 00 1F      [ 1] 2474 	dec loop_depth 
      002391 FC               [ 2] 2475 	jp (x)
                                   2476 
                                   2477 ;----------------------------
                                   2478 ; called by goto/gosub
                                   2479 ; to get target line number 
                                   2480 ; output:
                                   2481 ;    x    line address 
                                   2482 ;---------------------------
      002392                       2483 get_target_line:
      002392 CD 17 9F         [ 4] 2484 	call next_token  
      002395 A1 84            [ 1] 2485 	cp a,#TK_INTGR
      002397 27 07            [ 1] 2486 	jreq get_target_line_addr 
      002399 A1 03            [ 1] 2487 	cp a,#TK_LABEL 
      00239B 27 26            [ 1] 2488 	jreq look_target_symbol 
      00239D CC 16 9E         [ 2] 2489 	jp syntax_error
                                   2490 ; the target is a line number 
                                   2491 ; search it. 
      0023A0                       2492 get_target_line_addr:
      0023A0 90 89            [ 2] 2493 	pushw y 
      0023A2 CD 17 DE         [ 4] 2494 	call get_int24 ; line # 
      0023A5 4F               [ 1] 2495 	clr a
      0023A6 90 CE 00 04      [ 2] 2496 	ldw y,basicptr 
      0023AA 90 FE            [ 2] 2497 	ldw y,(y)
      0023AC 90 89            [ 2] 2498 	pushw y 
      0023AE 13 01            [ 2] 2499 	cpw x,(1,sp)
      0023B0                       2500 	_drop 2  
      0023B0 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      0023B2 25 01            [ 1] 2501 	jrult 11$
      0023B4 4C               [ 1] 2502 	inc a 
      0023B5                       2503 11$: ; scan program for this line# 	
      0023B5 CD 0C 7A         [ 4] 2504 	call search_lineno  
      0023B8 5D               [ 2] 2505 	tnzw x ; 0| line# address 
      0023B9 26 05            [ 1] 2506 	jrne 2$ 
      0023BB A6 05            [ 1] 2507 	ld a,#ERR_NO_LINE 
      0023BD CC 16 A0         [ 2] 2508 	jp tb_error 
      0023C0 90 85            [ 2] 2509 2$:	popw y  
      0023C2 81               [ 4] 2510 	ret 
                                   2511 
                                   2512 ; the GOTO|GOSUB target is a symbol.
                                   2513 ; output:
                                   2514 ;    X    line address|0 
      0023C3                       2515 look_target_symbol:
      0023C3 90 89            [ 2] 2516 	pushw y 
      0023C5 89               [ 2] 2517 	pushw x 
      0023C6 72 5F 00 0D      [ 1] 2518 	clr acc16 
      0023CA 90 CE 00 1B      [ 2] 2519 	ldw y,txtbgn 
      0023CE 90 E6 03         [ 1] 2520 1$:	ld a,(3,y) ; first TK_ID on line 
      0023D1 A1 03            [ 1] 2521 	cp a,#TK_LABEL 
      0023D3 27 15            [ 1] 2522 	jreq 3$ 
      0023D5 90 E6 02         [ 1] 2523 2$:	ld a,(2,y); line length 
      0023D8 C7 00 0E         [ 1] 2524 	ld acc8,a 
      0023DB 72 B9 00 0D      [ 2] 2525 	addw y,acc16 ;point to next line 
      0023DF 90 C3 00 1D      [ 2] 2526 	cpw y,txtend 
      0023E3 25 E9            [ 1] 2527 	jrult 1$
      0023E5 A6 0A            [ 1] 2528 	ld a,#ERR_BAD_VALUE
      0023E7 CC 16 A0         [ 2] 2529 	jp tb_error 
      0023EA                       2530 3$: ; found a TK_LABEL 
                                   2531 	; compare with GOTO|GOSUB target 
      0023EA 90 89            [ 2] 2532 	pushw y ; line address 
      0023EC 72 A9 00 04      [ 2] 2533 	addw y,#4 ; label string 
      0023F0 1E 03            [ 2] 2534 	ldw x,(3,sp) ; target string 
      0023F2 CD 13 ED         [ 4] 2535 	call strcmp
      0023F5 26 04            [ 1] 2536 	jrne 4$
      0023F7 90 85            [ 2] 2537 	popw y 
      0023F9 20 DA            [ 2] 2538 	jra 2$ 
      0023FB                       2539 4$: ; target found 
      0023FB 85               [ 2] 2540 	popw x ;  address line target  
      0023FC                       2541 	_drop 2 ; target string 
      0023FC 5B 02            [ 2]    1     addw sp,#2 
      0023FE 90 85            [ 2] 2542 	popw y 
      002400 81               [ 4] 2543 	ret
                                   2544 
                                   2545 
                                   2546 ;--------------------------------
                                   2547 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2548 ; selective goto or gosub 
                                   2549 ;--------------------------------
      002401                       2550 cmd_on:
      002401 72 00 00 22 05   [ 2] 2551 	btjt flags,#FRUN,0$ 
      002406 A6 06            [ 1] 2552 	ld a,#ERR_RUN_ONLY
      002408 CC 16 A0         [ 2] 2553 	jp tb_error 
      00240B CD 1A 88         [ 4] 2554 0$:	call expression 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      00240E A1 84            [ 1] 2555 	cp a,#TK_INTGR
      002410 27 03            [ 1] 2556 	jreq 1$
      002412 CC 16 9E         [ 2] 2557 	jp syntax_error
      002415                       2558 1$: _xpop
      002415 90 F6            [ 1]    1     ld a,(y)
      002417 93               [ 1]    2     ldw x,y 
      002418 EE 01            [ 2]    3     ldw x,(1,x)
      00241A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2559 ; the selector is the element indice 
                                   2560 ; in the list of arguments. {1..#elements} 
      00241E 9F               [ 1] 2561 	ld a,xl ; keep only bits 7..0
      00241F 27 62            [ 1] 2562 	jreq 9$ ; element # begin at 1. 
      002421 88               [ 1] 2563 	push a  ; selector  
      002422 CD 17 9F         [ 4] 2564 	call next_token
      002425 A1 80            [ 1] 2565 	cp a,#TK_CMD 
      002427 27 03            [ 1] 2566 	jreq 2$ 
      002429 CC 16 9E         [ 2] 2567 	jp syntax_error 
      00242C CD 17 B8         [ 4] 2568 2$: call get_code_addr
                                   2569 ;; must be a GOTO or GOSUB 
      00242F A3 24 8D         [ 2] 2570 	cpw x,#goto 
      002432 27 08            [ 1] 2571 	jreq 4$
      002434 A3 24 A7         [ 2] 2572 	cpw x,#gosub 
      002437 27 03            [ 1] 2573 	jreq 4$ 
      002439 CC 16 9E         [ 2] 2574 	jp syntax_error 
      00243C                       2575 4$: 
      00243C 84               [ 1] 2576 	pop a 
      00243D 89               [ 2] 2577 	pushw x ; save routine address 	
      00243E 88               [ 1] 2578 	push a  ; selector  
      00243F                       2579 5$: ; skip elements in list until selector==0 
      00243F 0A 01            [ 1] 2580 	dec (1,sp)
      002441 27 26            [ 1] 2581 	jreq 6$ 
                                   2582 ; can be a line# or a label 
      002443 CD 17 9F         [ 4] 2583 	call next_token 
      002446 A1 84            [ 1] 2584 	cp a,#TK_INTGR 
      002448 27 07            [ 1] 2585 	jreq 52$
      00244A A1 03            [ 1] 2586 	cp a,#TK_LABEL 
      00244C 27 0D            [ 1] 2587 	jreq 54$
      00244E CC 16 9E         [ 2] 2588 	jp syntax_error 
      002451                       2589 52$: ; got a line number 
      002451 C6 00 01         [ 1] 2590 	ld a,in ; skip over int24 value 
      002454 AB 03            [ 1] 2591 	add a,#CELL_SIZE ; integer size  
      002456 C7 00 01         [ 1] 2592 	ld in,a 
      002459 20 03            [ 2] 2593 	jra 56$
      00245B CD 17 C5         [ 4] 2594 54$: call skip_string ; skip over label 	
      00245E                       2595 56$: ; if another element comma present 
      00245E CD 17 9F         [ 4] 2596 	call next_token
      002461 A1 08            [ 1] 2597 	cp a,#TK_COMMA 
      002463 27 DA            [ 1] 2598 	jreq 5$ 
                                   2599 ; arg list exhausted, selector to big 
                                   2600 ; continue execution on next line 
      002465                       2601 	_drop 3 ; drop selector and GOTO|GOSUB address 
      002465 5B 03            [ 2]    1     addw sp,#3 
      002467 20 1A            [ 2] 2602 	jra 9$
      002469                       2603 6$: ;at selected position  
      002469                       2604 	_drop 1 ; discard selector
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      002469 5B 01            [ 2]    1     addw sp,#1 
                                   2605 ; here only the routine address 
                                   2606 ; of GOTO|GOSUB is on stack 
      00246B CD 23 92         [ 4] 2607     call get_target_line
      00246E CF 00 19         [ 2] 2608 	ldw ptr16,x 	
      002471 55 00 03 00 01   [ 1] 2609 	mov in,count ; move to end of line  
      002476 85               [ 2] 2610 	popw x ; cmd address, GOTO||GOSUB 
      002477 A3 24 8D         [ 2] 2611 	cpw x,#goto 
      00247A 26 05            [ 1] 2612 	jrne 7$ 
      00247C CE 00 19         [ 2] 2613 	ldw x,ptr16 
      00247F 20 19            [ 2] 2614 	jra jp_to_target
      002481                       2615 7$: 
      002481 20 35            [ 2] 2616 	jra gosub_2 ; target in ptr16 
      002483                       2617 9$: ; expr out of range skip to end of line
                                   2618     ; this will force a fall to next line  
      002483 55 00 03 00 01   [ 1] 2619 	mov in,count
      002488                       2620 	_drop 2
      002488 5B 02            [ 2]    1     addw sp,#2 
      00248A CC 17 51         [ 2] 2621 	jp next_line  
                                   2622 
                                   2623 
                                   2624 ;------------------------
                                   2625 ; BASIC: GOTO line# 
                                   2626 ; jump to line# 
                                   2627 ; here cstack is 2 call deep from interpreter 
                                   2628 ;------------------------
      00248D                       2629 goto:
      00248D 72 00 00 22 05   [ 2] 2630 	btjt flags,#FRUN,goto_1  
      002492 A6 06            [ 1] 2631 	ld a,#ERR_RUN_ONLY
      002494 CC 16 A0         [ 2] 2632 	jp tb_error 
      002497                       2633 goto_1:
      002497 CD 23 92         [ 4] 2634 	call get_target_line
      00249A                       2635 jp_to_target:
      00249A CF 00 04         [ 2] 2636 	ldw basicptr,x 
      00249D E6 02            [ 1] 2637 	ld a,(2,x)
      00249F C7 00 03         [ 1] 2638 	ld count,a 
      0024A2 35 03 00 01      [ 1] 2639 	mov in,#3 
      0024A6 81               [ 4] 2640 	ret 
                                   2641 
                                   2642 
                                   2643 ;--------------------
                                   2644 ; BASIC: GOSUB line#
                                   2645 ; basic subroutine call
                                   2646 ; actual line# and basicptr 
                                   2647 ; are saved on cstack
                                   2648 ; here cstack is 2 call deep from interpreter 
                                   2649 ;--------------------
                           000001  2650 	TARGET=1   ; target address 
                           000003  2651 	RET_ADDR=3 ; subroutine return address 
                           000005  2652 	RET_BPTR=5 ; basicptr return point 
                           000007  2653 	RET_INW=7  ; in.w return point 
                           000004  2654 	VSIZE=4  
      0024A7                       2655 gosub:
      0024A7 72 00 00 22 06   [ 2] 2656 	btjt flags,#FRUN,gosub_1 
      0024AC A6 06            [ 1] 2657 	ld a,#ERR_RUN_ONLY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0024AE CC 16 A0         [ 2] 2658 	jp tb_error 
      0024B1 81               [ 4] 2659 	ret 
      0024B2                       2660 gosub_1:
      0024B2 CD 23 92         [ 4] 2661 	call get_target_line 
      0024B5 CF 00 19         [ 2] 2662 	ldw ptr16,x 
      0024B8                       2663 gosub_2: 
      0024B8 85               [ 2] 2664 	popw x 
      0024B9                       2665 	_vars VSIZE  
      0024B9 52 04            [ 2]    1     sub sp,#VSIZE 
      0024BB 89               [ 2] 2666 	pushw x ; RET_ADDR 
      0024BC CE 00 19         [ 2] 2667 	ldw x,ptr16 
      0024BF 89               [ 2] 2668 	pushw x ; TARGET
                                   2669 ; save BASIC subroutine return point.   
      0024C0 CE 00 04         [ 2] 2670 	ldw x,basicptr
      0024C3 1F 05            [ 2] 2671 	ldw (RET_BPTR,sp),x 
      0024C5 CE 00 00         [ 2] 2672 	ldw x,in.w 
      0024C8 1F 07            [ 2] 2673 	ldw (RET_INW,sp),x
      0024CA 85               [ 2] 2674 	popw x 
      0024CB 20 CD            [ 2] 2675 	jra jp_to_target
                                   2676 
                                   2677 ;------------------------
                                   2678 ; BASIC: RETURN 
                                   2679 ; exit from BASIC subroutine 
                                   2680 ;------------------------
                           000003  2681 	RET_BPTR=3 ; basicptr return point 
                           000005  2682 	RET_INW=5  ; in.w return point 
                           000004  2683 	VSIZE=4  
      0024CD                       2684 return:
      0024CD 72 00 00 22 05   [ 2] 2685 	btjt flags,#FRUN,0$ 
      0024D2 A6 06            [ 1] 2686 	ld a,#ERR_RUN_ONLY
      0024D4 CC 16 A0         [ 2] 2687 	jp tb_error 
      0024D7                       2688 0$:	
      0024D7 1E 03            [ 2] 2689 	ldw x,(RET_ADDR,sp) 
      0024D9 CF 00 04         [ 2] 2690 	ldw basicptr,x
      0024DC E6 02            [ 1] 2691 	ld a,(2,x)
      0024DE C7 00 03         [ 1] 2692 	ld count,a  
      0024E1 1E 05            [ 2] 2693 	ldw x,(RET_INW,sp)
      0024E3 CF 00 00         [ 2] 2694 	ldw in.w,x 
      0024E6 85               [ 2] 2695 	popw x 
      0024E7                       2696 	_drop VSIZE 
      0024E7 5B 04            [ 2]    1     addw sp,#VSIZE 
      0024E9 89               [ 2] 2697 	pushw x
      0024EA 81               [ 4] 2698 	ret  
                                   2699 
                                   2700 ;----------------------------------
                                   2701 ; BASIC: RUN
                                   2702 ; run BASIC program in RAM
                                   2703 ;----------------------------------- 
      0024EB                       2704 run: 
      0024EB 72 01 00 22 02   [ 2] 2705 	btjf flags,#FRUN,0$  
      0024F0 4F               [ 1] 2706 	clr a 
      0024F1 81               [ 4] 2707 	ret
      0024F2                       2708 0$: 
      0024F2 72 09 00 22 12   [ 2] 2709 	btjf flags,#FBREAK,1$
      0024F7                       2710 	_drop 2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      0024F7 5B 02            [ 2]    1     addw sp,#2 
      0024F9 CD 20 82         [ 4] 2711 	call rest_context
      0024FC                       2712 	_drop CTXT_SIZE 
      0024FC 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0024FE 72 19 00 22      [ 1] 2713 	bres flags,#FBREAK 
      002502 72 10 00 22      [ 1] 2714 	bset flags,#FRUN 
      002506 CC 17 49         [ 2] 2715 	jp interpreter 
      002509 CE 00 1B         [ 2] 2716 1$:	ldw x,txtbgn
      00250C C3 00 1D         [ 2] 2717 	cpw x,txtend 
      00250F 2B 0C            [ 1] 2718 	jrmi run_it 
      002511 AE 16 2D         [ 2] 2719 	ldw x,#err_no_prog
      002514 CD 09 9D         [ 4] 2720 	call puts 
      002517 55 00 03 00 01   [ 1] 2721 	mov in,count
      00251C 81               [ 4] 2722 	ret 
      00251D                       2723 run_it:	 
      00251D                       2724 	_drop 2 ; drop return address 
      00251D 5B 02            [ 2]    1     addw sp,#2 
      00251F                       2725 run_it_02: 
      00251F CD 1C 68         [ 4] 2726     call ubound 
      002522 CD 14 52         [ 4] 2727 	call clear_vars 
                                   2728 ; clear data pointer 
      002525 5F               [ 1] 2729 	clrw x 
      002526 CF 00 06         [ 2] 2730 	ldw data_ptr,x 
      002529 72 5F 00 08      [ 1] 2731 	clr data_ofs 
      00252D 72 5F 00 09      [ 1] 2732 	clr data_len 
                                   2733 ; initialize BASIC pointer 
      002531 CE 00 1B         [ 2] 2734 	ldw x,txtbgn 
      002534 CF 00 04         [ 2] 2735 	ldw basicptr,x 
      002537 E6 02            [ 1] 2736 	ld a,(2,x)
      002539 C7 00 03         [ 1] 2737 	ld count,a
      00253C 35 03 00 01      [ 1] 2738 	mov in,#3	
      002540 72 10 00 22      [ 1] 2739 	bset flags,#FRUN 
      002544 CC 17 49         [ 2] 2740 	jp interpreter 
                                   2741 
                                   2742 
                                   2743 ;----------------------
                                   2744 ; BASIC: END
                                   2745 ; end running program
                                   2746 ;---------------------- 
      002547                       2747 cmd_end: 
                                   2748 ; clean stack 
      002547 AE 17 FF         [ 2] 2749 	ldw x,#STACK_EMPTY
      00254A 94               [ 1] 2750 	ldw sp,x 
      00254B CC 17 2A         [ 2] 2751 	jp warm_start
                                   2752 
                                   2753 ;---------------------------
                                   2754 ; BASIC: GET var 
                                   2755 ; receive a key in variable 
                                   2756 ; don't wait 
                                   2757 ;---------------------------
      00254E                       2758 cmd_get:
      00254E CD 17 9F         [ 4] 2759 	call next_token 
      002551 A1 85            [ 1] 2760 	cp a,#TK_VAR 
      002553 27 03            [ 1] 2761 	jreq 0$
      002555 CC 16 9E         [ 2] 2762 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      002558 CD 17 D4         [ 4] 2763 0$: call get_addr 
      00255B CF 00 19         [ 2] 2764 	ldw ptr16,x 
      00255E CD 09 49         [ 4] 2765 	call qgetc 
      002561 27 03            [ 1] 2766 	jreq 2$
      002563 CD 09 50         [ 4] 2767 	call getc  
      002566 72 3F 00 19      [ 4] 2768 2$: clr [ptr16]
      00256A 72 5C 00 1A      [ 1] 2769 	inc ptr8 
      00256E 72 3F 00 19      [ 4] 2770 	clr [ptr16]
      002572 72 5C 00 1A      [ 1] 2771 	inc ptr8 
      002576 72 C7 00 19      [ 4] 2772 	ld [ptr16],a 
      00257A 81               [ 4] 2773 	ret 
                                   2774 
                                   2775 
                                   2776 ;-----------------
                                   2777 ; 1 Khz beep 
                                   2778 ;-----------------
      00257B                       2779 beep_1khz:: 
      00257B 90 89            [ 2] 2780 	pushw y 
      00257D AE 00 64         [ 2] 2781 	ldw x,#100
      002580 90 AE 03 E8      [ 2] 2782 	ldw y,#1000
      002584 20 22            [ 2] 2783 	jra beep
                                   2784 
                                   2785 ;-----------------------
                                   2786 ; BASIC: TONE expr1,expr2
                                   2787 ; used TIMER2 channel 1
                                   2788 ; to produce a tone 
                                   2789 ; arguments:
                                   2790 ;    expr1   frequency 
                                   2791 ;    expr2   duration msec.
                                   2792 ;---------------------------
      002586                       2793 tone:
      002586 90 89            [ 2] 2794 	pushw y 
      002588 CD 19 5D         [ 4] 2795 	call arg_list 
      00258B A1 02            [ 1] 2796 	cp a,#2 
      00258D 27 03            [ 1] 2797 	jreq 1$
      00258F CC 16 9E         [ 2] 2798 	jp syntax_error 
      002592                       2799 1$: 
      002592                       2800 	_xpop 
      002592 90 F6            [ 1]    1     ld a,(y)
      002594 93               [ 1]    2     ldw x,y 
      002595 EE 01            [ 2]    3     ldw x,(1,x)
      002597 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00259B 89               [ 2] 2801 	pushw x ; duration 
      00259C                       2802 	_xpop ; frequency
      00259C 90 F6            [ 1]    1     ld a,(y)
      00259E 93               [ 1]    2     ldw x,y 
      00259F EE 01            [ 2]    3     ldw x,(1,x)
      0025A1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025A5 90 93            [ 1] 2803 	ldw y,x ; frequency 
      0025A7 85               [ 2] 2804 	popw x  ; duration 
      0025A8                       2805 beep:  
      0025A8 89               [ 2] 2806 	pushw x 
      0025A9 AE F4 24         [ 2] 2807 	ldw x,#TIM2_CLK_FREQ
      0025AC 65               [ 2] 2808 	divw x,y ; cntr=Fclk/freq 
                                   2809 ; round to nearest integer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0025AD 90 A3 7A 12      [ 2] 2810 	cpw y,#TIM2_CLK_FREQ/2
      0025B1 2B 01            [ 1] 2811 	jrmi 2$
      0025B3 5C               [ 1] 2812 	incw x 
      0025B4                       2813 2$:	 
      0025B4 9E               [ 1] 2814 	ld a,xh 
      0025B5 C7 53 0D         [ 1] 2815 	ld TIM2_ARRH,a 
      0025B8 9F               [ 1] 2816 	ld a,xl 
      0025B9 C7 53 0E         [ 1] 2817 	ld TIM2_ARRL,a 
                                   2818 ; 50% duty cycle 
      0025BC 8C               [ 1] 2819 	ccf 
      0025BD 56               [ 2] 2820 	rrcw x 
      0025BE 9E               [ 1] 2821 	ld a,xh 
      0025BF C7 53 0F         [ 1] 2822 	ld TIM2_CCR1H,a 
      0025C2 9F               [ 1] 2823 	ld a,xl
      0025C3 C7 53 10         [ 1] 2824 	ld TIM2_CCR1L,a
      0025C6 72 10 53 08      [ 1] 2825 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0025CA 72 10 53 00      [ 1] 2826 	bset TIM2_CR1,#TIM2_CR1_CEN
      0025CE 72 10 53 04      [ 1] 2827 	bset TIM2_EGR,#TIM2_EGR_UG
      0025D2 85               [ 2] 2828 	popw x 
      0025D3 CD 2A 14         [ 4] 2829 	call pause02
      0025D6 72 11 53 08      [ 1] 2830 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0025DA 72 11 53 00      [ 1] 2831 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0025DE 90 85            [ 2] 2832 	popw y 
      0025E0 81               [ 4] 2833 	ret 
                                   2834 
                                   2835 ;-------------------------------
                                   2836 ; BASIC: ADCON 0|1 [,divisor]  
                                   2837 ; disable/enanble ADC 
                                   2838 ;-------------------------------
                           000003  2839 	ONOFF=3 
                           000001  2840 	DIVSOR=1
                           000004  2841 	VSIZE=4 
      0025E1                       2842 power_adc:
      0025E1 CD 19 5D         [ 4] 2843 	call arg_list 
      0025E4 A1 02            [ 1] 2844 	cp a,#2	
      0025E6 27 12            [ 1] 2845 	jreq 1$
      0025E8 A1 01            [ 1] 2846 	cp a,#1 
      0025EA 27 03            [ 1] 2847 	jreq 0$ 
      0025EC CC 16 9E         [ 2] 2848 	jp syntax_error 
      0025EF 4F               [ 1] 2849 0$:	clr a 
      0025F0 5F               [ 1] 2850 	clrw x
      0025F1                       2851 	_xpush   ; divisor  
      0025F1 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0025F5 90 F7            [ 1]    2     ld (y),a 
      0025F7 90 EF 01         [ 2]    3     ldw (1,y),x 
      0025FA                       2852 1$: _at_next 
      0025FA 90 E6 03         [ 1]    1     ld a,(3,y)
      0025FD 93               [ 1]    2     ldw x,y 
      0025FE EE 04            [ 2]    3     ldw x,(4,x)
      002600 5D               [ 2] 2853 	tnzw x 
      002601 27 25            [ 1] 2854 	jreq 2$ 
      002603                       2855 	_xpop
      002603 90 F6            [ 1]    1     ld a,(y)
      002605 93               [ 1]    2     ldw x,y 
      002606 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      002608 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00260C                       2856 	_xdrop  
      00260C 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      002610 9F               [ 1] 2857 	ld a,xl
      002611 A4 07            [ 1] 2858 	and a,#7
      002613 4E               [ 1] 2859 	swap a 
      002614 C7 54 01         [ 1] 2860 	ld ADC_CR1,a
      002617 72 16 50 CA      [ 1] 2861 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      00261B 72 10 54 01      [ 1] 2862 	bset ADC_CR1,#ADC_CR1_ADON 
      00261F                       2863 	_usec_dly 7 
      00261F AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      002622 5A               [ 2]    2     decw x
      002623 9D               [ 1]    3     nop 
      002624 26 FA            [ 1]    4     jrne .-4
      002626 20 08            [ 2] 2864 	jra 3$
      002628 72 11 54 01      [ 1] 2865 2$: bres ADC_CR1,#ADC_CR1_ADON
      00262C 72 17 50 CA      [ 1] 2866 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      002630                       2867 3$:	
      002630 81               [ 4] 2868 	ret
                                   2869 
                                   2870 ;-----------------------------
                                   2871 ; BASIC: ADCREAD (channel)
                                   2872 ; read adc channel {0..5}
                                   2873 ; output:
                                   2874 ;   A 		TK_INTGR 
                                   2875 ;   X 		value 
                                   2876 ;-----------------------------
      002631                       2877 analog_read:
      002631 CD 19 58         [ 4] 2878 	call func_args 
      002634 A1 01            [ 1] 2879 	cp a,#1 
      002636 27 03            [ 1] 2880 	jreq 1$
      002638 CC 16 9E         [ 2] 2881 	jp syntax_error
      00263B                       2882 1$: _xpop 
      00263B 90 F6            [ 1]    1     ld a,(y)
      00263D 93               [ 1]    2     ldw x,y 
      00263E EE 01            [ 2]    3     ldw x,(1,x)
      002640 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002644 A3 00 05         [ 2] 2883 	cpw x,#5 
      002647 23 05            [ 2] 2884 	jrule 2$
      002649 A6 0A            [ 1] 2885 	ld a,#ERR_BAD_VALUE
      00264B CC 16 A0         [ 2] 2886 	jp tb_error 
      00264E 9F               [ 1] 2887 2$: ld a,xl
      00264F C7 00 0E         [ 1] 2888 	ld acc8,a 
      002652 A6 05            [ 1] 2889 	ld a,#5
      002654 C0 00 0E         [ 1] 2890 	sub a,acc8 
      002657 C7 54 00         [ 1] 2891 	ld ADC_CSR,a
      00265A 72 16 54 02      [ 1] 2892 	bset ADC_CR2,#ADC_CR2_ALIGN
      00265E 72 10 54 01      [ 1] 2893 	bset ADC_CR1,#ADC_CR1_ADON
      002662 72 0F 54 00 FB   [ 2] 2894 	btjf ADC_CSR,#ADC_CSR_EOC,.
      002667 CE 54 04         [ 2] 2895 	ldw x,ADC_DRH
      00266A A6 84            [ 1] 2896 	ld a,#TK_INTGR
      00266C 81               [ 4] 2897 	ret 
                                   2898 
                                   2899 ;-----------------------
                                   2900 ; BASIC: DREAD(pin)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



                                   2901 ; Arduino pins 
                                   2902 ; read state of a digital pin 
                                   2903 ; pin# {0..15}
                                   2904 ; output:
                                   2905 ;    A 		TK_INTGR
                                   2906 ;    X      0|1 
                                   2907 ;-------------------------
                           000001  2908 	PINNO=1
                           000001  2909 	VSIZE=1
      00266D                       2910 digital_read:
      00266D                       2911 	_vars VSIZE 
      00266D 52 01            [ 2]    1     sub sp,#VSIZE 
      00266F CD 19 58         [ 4] 2912 	call func_args
      002672 A1 01            [ 1] 2913 	cp a,#1
      002674 27 03            [ 1] 2914 	jreq 1$
      002676 CC 16 9E         [ 2] 2915 	jp syntax_error
      002679                       2916 1$: _xpop 
      002679 90 F6            [ 1]    1     ld a,(y)
      00267B 93               [ 1]    2     ldw x,y 
      00267C EE 01            [ 2]    3     ldw x,(1,x)
      00267E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002682 A3 00 0F         [ 2] 2917 	cpw x,#15 
      002685 23 05            [ 2] 2918 	jrule 2$
      002687 A6 0A            [ 1] 2919 	ld a,#ERR_BAD_VALUE
      002689 CC 16 A0         [ 2] 2920 	jp tb_error 
      00268C CD 2B 59         [ 4] 2921 2$:	call select_pin 
      00268F 6B 01            [ 1] 2922 	ld (PINNO,sp),a
      002691 E6 01            [ 1] 2923 	ld a,(GPIO_IDR,x)
      002693 0D 01            [ 1] 2924 	tnz (PINNO,sp)
      002695 27 05            [ 1] 2925 	jreq 8$
      002697 44               [ 1] 2926 3$: srl a 
      002698 0A 01            [ 1] 2927 	dec (PINNO,sp)
      00269A 26 FB            [ 1] 2928 	jrne 3$ 
      00269C A4 01            [ 1] 2929 8$: and a,#1 
      00269E 5F               [ 1] 2930 	clrw x 
      00269F 97               [ 1] 2931 	ld xl,a 
      0026A0 4F               [ 1] 2932 	clr a 
      0026A1                       2933 	_drop VSIZE
      0026A1 5B 01            [ 2]    1     addw sp,#VSIZE 
      0026A3 81               [ 4] 2934 	ret
                                   2935 
                                   2936 
                                   2937 ;-----------------------
                                   2938 ; BASIC: DWRITE pin,0|1
                                   2939 ; Arduino pins 
                                   2940 ; write to a digital pin 
                                   2941 ; pin# {0..15}
                                   2942 ; output:
                                   2943 ;    A 		TK_INTGR
                                   2944 ;    X      0|1 
                                   2945 ;-------------------------
                           000001  2946 	PINNO=1
                           000002  2947 	PINVAL=2
                           000002  2948 	VSIZE=2
      0026A4                       2949 digital_write:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0026A4                       2950 	_vars VSIZE 
      0026A4 52 02            [ 2]    1     sub sp,#VSIZE 
      0026A6 CD 19 5D         [ 4] 2951 	call arg_list  
      0026A9 A1 02            [ 1] 2952 	cp a,#2 
      0026AB 27 03            [ 1] 2953 	jreq 1$
      0026AD CC 16 9E         [ 2] 2954 	jp syntax_error
      0026B0                       2955 1$: _xpop 
      0026B0 90 F6            [ 1]    1     ld a,(y)
      0026B2 93               [ 1]    2     ldw x,y 
      0026B3 EE 01            [ 2]    3     ldw x,(1,x)
      0026B5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026B9 9F               [ 1] 2956 	ld a,xl 
      0026BA 6B 02            [ 1] 2957 	ld (PINVAL,sp),a
      0026BC                       2958 	_xpop 
      0026BC 90 F6            [ 1]    1     ld a,(y)
      0026BE 93               [ 1]    2     ldw x,y 
      0026BF EE 01            [ 2]    3     ldw x,(1,x)
      0026C1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026C5 A3 00 0F         [ 2] 2959 	cpw x,#15 
      0026C8 23 05            [ 2] 2960 	jrule 2$
      0026CA A6 0A            [ 1] 2961 	ld a,#ERR_BAD_VALUE
      0026CC CC 16 A0         [ 2] 2962 	jp tb_error 
      0026CF CD 2B 59         [ 4] 2963 2$:	call select_pin 
      0026D2 6B 01            [ 1] 2964 	ld (PINNO,sp),a 
      0026D4 A6 01            [ 1] 2965 	ld a,#1
      0026D6 0D 01            [ 1] 2966 	tnz (PINNO,sp)
      0026D8 27 05            [ 1] 2967 	jreq 4$
      0026DA 48               [ 1] 2968 3$: sll a
      0026DB 0A 01            [ 1] 2969 	dec (PINNO,sp)
      0026DD 26 FB            [ 1] 2970 	jrne 3$
      0026DF 0D 02            [ 1] 2971 4$: tnz (PINVAL,sp)
      0026E1 26 05            [ 1] 2972 	jrne 5$
      0026E3 43               [ 1] 2973 	cpl a 
      0026E4 E4 00            [ 1] 2974 	and a,(GPIO_ODR,x)
      0026E6 20 02            [ 2] 2975 	jra 8$
      0026E8 EA 00            [ 1] 2976 5$: or a,(GPIO_ODR,x)
      0026EA E7 00            [ 1] 2977 8$: ld (GPIO_ODR,x),a 
      0026EC                       2978 	_drop VSIZE 
      0026EC 5B 02            [ 2]    1     addw sp,#VSIZE 
      0026EE 81               [ 4] 2979 	ret
                                   2980 
                                   2981 
                                   2982 ;-----------------------
                                   2983 ; BASIC: STOP
                                   2984 ; stop progam execution  
                                   2985 ; without resetting pointers 
                                   2986 ; the program is resumed
                                   2987 ; with RUN 
                                   2988 ;-------------------------
      0026EF                       2989 stop:
      0026EF 72 00 00 22 02   [ 2] 2990 	btjt flags,#FRUN,2$
      0026F4 4F               [ 1] 2991 	clr a
      0026F5 81               [ 4] 2992 	ret 
      0026F6                       2993 2$:	 
                                   2994 ; create space on cstack to save context 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0026F6 AE 27 1D         [ 2] 2995 	ldw x,#break_point 
      0026F9 CD 09 9D         [ 4] 2996 	call puts 
      0026FC                       2997 	_drop 2 ;drop return address 
      0026FC 5B 02            [ 2]    1     addw sp,#2 
      0026FE                       2998 	_vars CTXT_SIZE ; context size 
      0026FE 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      002700 CD 20 72         [ 4] 2999 	call save_context 
      002703 AE 16 68         [ 2] 3000 	ldw x,#tib 
      002706 CF 00 04         [ 2] 3001 	ldw basicptr,x
      002709 7F               [ 1] 3002 	clr (x)
      00270A 72 5F 00 03      [ 1] 3003 	clr count  
      00270E 5F               [ 1] 3004 	clrw x 
      00270F CF 00 00         [ 2] 3005 	ldw in.w,x
      002712 72 11 00 22      [ 1] 3006 	bres flags,#FRUN 
      002716 72 18 00 22      [ 1] 3007 	bset flags,#FBREAK
      00271A CC 17 49         [ 2] 3008 	jp interpreter 
      00271D 0A 62 72 65 61 6B 20  3009 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3010 
                                   3011 ;-----------------------
                                   3012 ; BASIC: NEW
                                   3013 ; from command line only 
                                   3014 ; free program memory
                                   3015 ; and clear variables 
                                   3016 ;------------------------
      00273B                       3017 new: 
      00273B 72 01 00 22 01   [ 2] 3018 	btjf flags,#FRUN,0$ 
      002740 81               [ 4] 3019 	ret 
      002741                       3020 0$:	
      002741 CD 14 FA         [ 4] 3021 	call clear_basic 
      002744 81               [ 4] 3022 	ret 
                                   3023 
                                   3024 ;-----------------------------------
                                   3025 ; BASIC: ERASE \E | \F 
                                   3026 ; erase all block in range from 
                                   3027 ;  'app_space' to FLASH end (0x20000)
                                   3028 ;  or all EEPROM 
                                   3029 ; that contains a non zero byte.  
                                   3030 ;-----------------------------------
                           000001  3031 	LIMIT=1 
                           000003  3032 	VSIZE = 3 
      002745                       3033 erase:
      002745 72 5F 00 18      [ 1] 3034 	clr farptr 
      002749                       3035 	_vars VSIZE 
      002749 52 03            [ 2]    1     sub sp,#VSIZE 
      00274B CD 17 9F         [ 4] 3036 	call next_token 
      00274E A1 04            [ 1] 3037 	cp a,#TK_CHAR 
      002750 27 03            [ 1] 3038 	jreq 0$ 
      002752 CC 16 9E         [ 2] 3039 	jp syntax_error
      002755 CD 17 EE         [ 4] 3040 0$: call get_char 
      002758 A4 DF            [ 1] 3041 	and a,#0XDF 
      00275A A1 45            [ 1] 3042 	cp a,#'E
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      00275C 26 0C            [ 1] 3043 	jrne 1$
      00275E AE 40 00         [ 2] 3044 	ldw x,#EEPROM_BASE 
      002761 CF 00 19         [ 2] 3045 	ldw farptr+1,x 
      002764 AE 47 FF         [ 2] 3046 	ldw x,#EEPROM_END
      002767 4F               [ 1] 3047 	clr a 
      002768 20 15            [ 2] 3048 	jra 3$ 
      00276A A1 46            [ 1] 3049 1$: cp a,#'F 
      00276C 27 06            [ 1] 3050 	jreq 2$
      00276E AE 15 DE         [ 2] 3051 	ldw x,#err_bad_value
      002771 CC 16 A0         [ 2] 3052 	jp tb_error
      002774                       3053 2$:
      002774 AE 35 80         [ 2] 3054 	ldw x,#app_space  
      002777 CF 00 19         [ 2] 3055 	ldw farptr+1,x 
      00277A A6 02            [ 1] 3056 	ld a,#(FLASH_END>>16)&0XFF 
      00277C AE 7F FF         [ 2] 3057 	ldw x,#FLASH_END&0xffff
      00277F                       3058 3$:
      00277F 6B 01            [ 1] 3059 	ld (LIMIT,sp),a 
      002781 1F 02            [ 2] 3060 	ldw (LIMIT+1,sp),x 
                                   3061  ; operation done from RAM
                                   3062  ; copy code to RAM in tib   
      002783 CD 07 3E         [ 4] 3063 	call move_erase_to_ram
      002786                       3064 4$:	 
      002786 CD 08 C0         [ 4] 3065     call scan_block 
      002789 27 08            [ 1] 3066 	jreq 5$  ; block already erased 
      00278B A6 45            [ 1] 3067     ld a,#'E 
      00278D CD 09 40         [ 4] 3068     call putc 
      002790 CD 07 BC         [ 4] 3069 	call block_erase   
                                   3070 ; this block is clean, next  
      002793 AE 00 80         [ 2] 3071 5$:	ldw x,#BLOCK_SIZE
      002796 CD 08 B2         [ 4] 3072 	call incr_farptr
                                   3073 ; check limit, 24 bit substraction  	
      002799 7B 01            [ 1] 3074 	ld a,(LIMIT,sp)
      00279B 1E 02            [ 2] 3075 	ldw x,(LIMIT+1,sp)
      00279D 72 B0 00 19      [ 2] 3076 	subw x,farptr+1
      0027A1 C2 00 18         [ 1] 3077 	sbc a,farptr 
      0027A4 22 E0            [ 1] 3078 	jrugt 4$ 
      0027A6 CD 14 FA         [ 4] 3079 9$: call clear_basic
      0027A9 1E 02            [ 2] 3080 	ldw x,(LIMIT+1,sp)
      0027AB A3 47 FF         [ 2] 3081 	cpw x,#EEPROM_END
      0027AE 26 03            [ 1] 3082 	jrne 10$
      0027B0 CD 1D 31         [ 4] 3083 	call func_eefree 
      0027B3                       3084 10$:
      0027B3                       3085 	_drop VSIZE 
      0027B3 5B 03            [ 2]    1     addw sp,#VSIZE 
      0027B5 81               [ 4] 3086 	ret 
                                   3087 	
                                   3088 
                                   3089 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3090 ;  check for application signature 
                                   3091 ; output:
                                   3092 ;   Carry    0 app present 
                                   3093 ;            1 no app installed  
                                   3094 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027B6                       3095 qsign: 
      0027B6 CE 35 80         [ 2] 3096 	ldw x,app_sign 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      0027B9 C3 28 76         [ 2] 3097 	cpw x,SIGNATURE ; "BC" 
      0027BC 81               [ 4] 3098 	ret 
                                   3099 
                                   3100 ;--------------------------------------
                                   3101 ;  fill write buffer 
                                   3102 ;  input:
                                   3103 ;    y  point to output buffer 
                                   3104 ;    x  point to source 
                                   3105 ;    a  bytes to write in buffer 
                                   3106 ;  output:
                                   3107 ;    y   += A 
                                   3108 ;    X   += A 
                                   3109 ;    A   0 
                                   3110 ;---------------------------------------
      0027BD                       3111 fill_write_buffer:
      0027BD 88               [ 1] 3112 	push a 
      0027BE 4D               [ 1] 3113 	tnz a 
      0027BF 27 0A            [ 1] 3114 	jreq 9$ 
      0027C1 F6               [ 1] 3115 1$: ld a,(x)
      0027C2 5C               [ 1] 3116 	incw x 
      0027C3 90 F7            [ 1] 3117 	ld (y),a 
      0027C5 90 5C            [ 1] 3118 	incw y 
      0027C7 0A 01            [ 1] 3119 	dec (1,sp) 
      0027C9 26 F6            [ 1] 3120 	jrne 1$ 
      0027CB 84               [ 1] 3121 9$:	pop a 
      0027CC 81               [ 4] 3122     ret 	
                                   3123 
                                   3124 ;--------------------------------------
                                   3125 ;  fill pad buffer with zero 
                                   3126 ;  input:
                                   3127 ;	none 
                                   3128 ;  output:
                                   3129 ;    y     buffer address  
                                   3130 ;--------------------------------------
      0027CD                       3131 clear_block_buffer:
      0027CD 88               [ 1] 3132 	push a 
      0027CE 90 AE 16 B8      [ 2] 3133 	ldw y,#block_buffer 
      0027D2 90 89            [ 2] 3134 	pushw y
      0027D4 A6 80            [ 1] 3135 	ld a,#BLOCK_SIZE   
      0027D6 90 7F            [ 1] 3136 1$:	clr (y)
      0027D8 90 5C            [ 1] 3137 	incw y
      0027DA 4A               [ 1] 3138 	dec a  
      0027DB 26 F9            [ 1] 3139 	jrne 1$ 	
      0027DD 90 85            [ 2] 3140 9$: popw y 
      0027DF 84               [ 1] 3141 	pop a 			
      0027E0 81               [ 4] 3142 	ret 
                                   3143 
                                   3144 
                                   3145 ;---------------------------------------
                                   3146 ; BASIC: SAVE
                                   3147 ; write application from RAM to FLASH
                                   3148 ;--------------------------------------
                           000001  3149 	XTEMP=1
                           000003  3150 	COUNT=3  ; last count bytes written 
                           000004  3151 	CNT_LO=4 ; count low byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



                           000005  3152 	TOWRITE=5 ; how bytes left to write  
                           000006  3153 	VSIZE=6 
      0027E1                       3154 save_app:
      0027E1 89               [ 2] 3155 	pushw x 
      0027E2 90 89            [ 2] 3156 	pushw y 
      0027E4                       3157 	_vars VSIZE
      0027E4 52 06            [ 2]    1     sub sp,#VSIZE 
      0027E6 CD 27 B6         [ 4] 3158 	call qsign 
      0027E9 26 09            [ 1] 3159 	jrne 1$
      0027EB AE 28 78         [ 2] 3160 	ldw x,#CANT_DO 
      0027EE CD 09 9D         [ 4] 3161 	call puts 
      0027F1 CC 28 70         [ 2] 3162 	jp 9$
      0027F4                       3163 1$: 
      0027F4 CE 00 1B         [ 2] 3164 	ldw x,txtbgn
      0027F7 C3 00 1D         [ 2] 3165 	cpw x,txtend 
      0027FA 25 09            [ 1] 3166 	jrult 2$ 
      0027FC AE 28 BA         [ 2] 3167 	ldw x,#NO_APP
      0027FF CD 09 9D         [ 4] 3168 	call puts 
      002802 CC 28 70         [ 2] 3169 	jp 9$
      002805                       3170 2$: 
                                   3171 ; block programming flash
                                   3172 ; must be done from RAM
                                   3173 ; moved in tib  
      002805 CD 07 7E         [ 4] 3174 	call move_prg_to_ram
                                   3175 ; initialize farptr 
                                   3176 ; to app_sign address 
      002808 72 5F 00 18      [ 1] 3177 	clr farptr 
      00280C AE 35 80         [ 2] 3178 	ldw x,#app_sign 
      00280F CF 00 19         [ 2] 3179 	ldw farptr+1,x
                                   3180 ; initialize local variables 
      002812 CD 1E 51         [ 4] 3181 	call prog_size
      002815 1F 05            [ 2] 3182 	ldw (TOWRITE,sp),x
      002817 0F 03            [ 1] 3183 	clr (COUNT,sp)
                                   3184 ; first bock 
                                   3185 ; containt signature 2 bytes 
                                   3186 ; and size 	2 bytes 
                                   3187 ; use Y as pointer to block_buffer
      002819 CD 27 CD         [ 4] 3188 	call clear_block_buffer ; -- y=*block_buffer	
                                   3189 ; write signature
      00281C CE 28 76         [ 2] 3190 	ldw x,SIGNATURE ; "BC" 
      00281F 90 FF            [ 2] 3191 	ldw (y),x 
      002821 72 A9 00 02      [ 2] 3192 	addw y,#2
      002825 1E 05            [ 2] 3193 	ldw x,(TOWRITE,sp)
      002827 90 FF            [ 2] 3194 	ldw (y),x
      002829 72 A9 00 02      [ 2] 3195 	addw y,#2   
      00282D A6 7C            [ 1] 3196 	ld a,#(BLOCK_SIZE-4)
      00282F 6B 04            [ 1] 3197 	ld (CNT_LO,sp),a 
      002831 A3 00 7C         [ 2] 3198 	cpw x,#(BLOCK_SIZE-4) 
      002834 22 01            [ 1] 3199 	jrugt 3$
      002836 9F               [ 1] 3200 	ld a,xl 
      002837 6B 04            [ 1] 3201 3$:	ld (CNT_LO,sp),a   
      002839 CE 00 1B         [ 2] 3202 	ldw x,txtbgn 
      00283C 1F 01            [ 2] 3203 	ldw (XTEMP,sp),x 
      00283E                       3204 32$: 
      00283E 1E 01            [ 2] 3205 	ldw x,(XTEMP,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      002840 7B 04            [ 1] 3206 	ld a,(CNT_LO,sp)
      002842 CD 27 BD         [ 4] 3207 	call fill_write_buffer 
      002845 1F 01            [ 2] 3208 	ldw (XTEMP,sp),x 
      002847 AE 16 B8         [ 2] 3209 	ldw x,#block_buffer
      00284A CD 07 98         [ 4] 3210 	call write_buffer
      00284D AE 00 80         [ 2] 3211 	ldw x,#BLOCK_SIZE 
      002850 CD 08 B2         [ 4] 3212 	call incr_farptr  
                                   3213 ; following blocks 
      002853 1E 01            [ 2] 3214 	ldw x,(XTEMP,sp)
      002855 C3 00 1D         [ 2] 3215 	cpw x,txtend 
      002858 24 16            [ 1] 3216 	jruge 9$ 
      00285A 1E 05            [ 2] 3217 	ldw x,(TOWRITE,sp)
      00285C 72 F0 03         [ 2] 3218 	subw x,(COUNT,sp)
      00285F 1F 05            [ 2] 3219 	ldw (TOWRITE,sp),x 
      002861 A6 80            [ 1] 3220 	ld a,#BLOCK_SIZE 
      002863 A3 00 80         [ 2] 3221 	cpw x,#BLOCK_SIZE 
      002866 24 01            [ 1] 3222 	jruge 4$ 
      002868 9F               [ 1] 3223 	ld a,xl 
      002869 6B 04            [ 1] 3224 4$:	ld (CNT_LO,sp),a 
      00286B CD 27 CD         [ 4] 3225 	call clear_block_buffer 
      00286E 20 CE            [ 2] 3226 	jra 32$ 
      002870                       3227 9$:	_drop VSIZE 
      002870 5B 06            [ 2]    1     addw sp,#VSIZE 
      002872 90 85            [ 2] 3228     popw y 
      002874 85               [ 2] 3229 	popw x 
      002875 81               [ 4] 3230 	ret 
                                   3231 
                                   3232 
      002876 42 43                 3233 SIGNATURE: .ascii "BC"
      002878 43 61 6E 27 74 20 66  3234 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      0028BA 4E 6F 20 61 70 70 6C  3235 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3236 
                                   3237 ;---------------------
                                   3238 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3239 ; write 1 or more byte to FLASH or EEPROM
                                   3240 ; starting at address  
                                   3241 ; input:
                                   3242 ;   expr1  	is address 
                                   3243 ;   expr2,...,exprn   are bytes to write
                                   3244 ; output:
                                   3245 ;   none 
                                   3246 ;---------------------
      0028D0                       3247 write:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      0028D0 CD 1A 88         [ 4] 3248 	call expression
      0028D3 A1 84            [ 1] 3249 	cp a,#TK_INTGR 
      0028D5 27 03            [ 1] 3250 	jreq 0$
      0028D7 CC 16 9E         [ 2] 3251 	jp syntax_error
      0028DA                       3252 0$: _xpop 
      0028DA 90 F6            [ 1]    1     ld a,(y)
      0028DC 93               [ 1]    2     ldw x,y 
      0028DD EE 01            [ 2]    3     ldw x,(1,x)
      0028DF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028E3 C7 00 18         [ 1] 3253 	ld farptr,a 
      0028E6 CF 00 19         [ 2] 3254 	ldw ptr16,x 
      0028E9                       3255 1$:	
      0028E9 CD 17 9F         [ 4] 3256 	call next_token 
      0028EC A1 08            [ 1] 3257 	cp a,#TK_COMMA 
      0028EE 27 02            [ 1] 3258 	jreq 2$ 
      0028F0 20 20            [ 2] 3259 	jra 9$ ; no more data 
      0028F2 CD 1A 88         [ 4] 3260 2$:	call expression
      0028F5 A1 84            [ 1] 3261 	cp a,#TK_INTGR
      0028F7 27 03            [ 1] 3262 	jreq 3$
      0028F9 CC 16 9E         [ 2] 3263 	jp syntax_error
      0028FC                       3264 3$:	_xpop 
      0028FC 90 F6            [ 1]    1     ld a,(y)
      0028FE 93               [ 1]    2     ldw x,y 
      0028FF EE 01            [ 2]    3     ldw x,(1,x)
      002901 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002905 9F               [ 1] 3265 	ld a,xl 
      002906 5F               [ 1] 3266 	clrw x 
      002907 CD 07 E2         [ 4] 3267 	call write_byte
      00290A AE 00 01         [ 2] 3268 	ldw x,#1 
      00290D CD 08 B2         [ 4] 3269 	call incr_farptr 
      002910 20 D7            [ 2] 3270 	jra 1$ 
      002912                       3271 9$:
      002912 81               [ 4] 3272 	ret 
                                   3273 
                                   3274 
                                   3275 ;---------------------
                                   3276 ;BASIC: CHAR(expr)
                                   3277 ; évaluate expression 
                                   3278 ; and take the 7 least 
                                   3279 ; bits as ASCII character
                                   3280 ; output: 
                                   3281 ; 	A char 
                                   3282 ;---------------------
      002913                       3283 char:
      002913 CD 19 58         [ 4] 3284 	call func_args 
      002916 A1 01            [ 1] 3285 	cp a,#1
      002918 27 03            [ 1] 3286 	jreq 1$
      00291A CC 16 9E         [ 2] 3287 	jp syntax_error
      00291D                       3288 1$:	_xpop
      00291D 90 F6            [ 1]    1     ld a,(y)
      00291F 93               [ 1]    2     ldw x,y 
      002920 EE 01            [ 2]    3     ldw x,(1,x)
      002922 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002926 9F               [ 1] 3289 	ld a,xl
      002927 A4 7F            [ 1] 3290 	and a,#0x7f 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      002929 81               [ 4] 3291 	ret
                                   3292 
                                   3293 ;---------------------
                                   3294 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3295 ; extract first character 
                                   3296 ; of string argument 
                                   3297 ; output:
                                   3298 ;    A:X    int24 
                                   3299 ;---------------------
      00292A                       3300 ascii:
      00292A A6 06            [ 1] 3301 	ld a,#TK_LPAREN
      00292C CD 19 4B         [ 4] 3302 	call expect 
      00292F CD 17 9F         [ 4] 3303 	call next_token 
      002932 A1 02            [ 1] 3304 	cp a,#TK_QSTR 
      002934 27 0E            [ 1] 3305 	jreq 1$
      002936 A1 04            [ 1] 3306 	cp a,#TK_CHAR 
      002938 27 12            [ 1] 3307 	jreq 2$ 
      00293A A1 82            [ 1] 3308 	cp a,#TK_CFUNC 
      00293C 27 03            [ 1] 3309 	jreq 0$
      00293E CC 16 9E         [ 2] 3310 	jp syntax_error
      002941                       3311 0$: ; cfunc 
      002941 FD               [ 4] 3312 	call (x)
      002942 20 0B            [ 2] 3313 	jra 3$
      002944                       3314 1$: ; quoted string 
      002944 F6               [ 1] 3315 	ld a,(x)
      002945 88               [ 1] 3316 	push a  
      002946 CD 17 C5         [ 4] 3317 	call skip_string
      002949 84               [ 1] 3318 	pop a  	
      00294A 20 03            [ 2] 3319 	jra 3$ 
      00294C                       3320 2$: ; character 
      00294C CD 17 EE         [ 4] 3321 	call get_char 
      00294F 5F               [ 1] 3322 3$:	clrw x 
      002950 02               [ 1] 3323 	rlwa x   
      002951                       3324 4$:	_xpush  
      002951 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002955 90 F7            [ 1]    2     ld (y),a 
      002957 90 EF 01         [ 2]    3     ldw (1,y),x 
      00295A A6 07            [ 1] 3325 	ld a,#TK_RPAREN 
      00295C CD 19 4B         [ 4] 3326 	call expect
      00295F                       3327 9$:	
      00295F                       3328 	_xpop  
      00295F 90 F6            [ 1]    1     ld a,(y)
      002961 93               [ 1]    2     ldw x,y 
      002962 EE 01            [ 2]    3     ldw x,(1,x)
      002964 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002968 81               [ 4] 3329 	ret 
                                   3330 
                                   3331 ;---------------------
                                   3332 ;BASIC: KEY
                                   3333 ; wait for a character 
                                   3334 ; received from STDIN 
                                   3335 ; input:
                                   3336 ;	none 
                                   3337 ; output:
                                   3338 ;	a	 character 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



                                   3339 ;---------------------
      002969                       3340 key:
      002969 CD 09 50         [ 4] 3341 	call getc 
      00296C 81               [ 4] 3342 	ret
                                   3343 
                                   3344 ;----------------------
                                   3345 ; BASIC: QKEY
                                   3346 ; Return true if there 
                                   3347 ; is a character in 
                                   3348 ; waiting in STDIN 
                                   3349 ; input:
                                   3350 ;  none 
                                   3351 ; output:
                                   3352 ;   A     0|-1
                                   3353 ;-----------------------
      00296D                       3354 qkey:: 
      00296D 5F               [ 1] 3355 	clrw x 
      00296E C6 00 2E         [ 1] 3356 	ld a,rx1_head
      002971 C0 00 2F         [ 1] 3357 	sub a,rx1_tail 
      002974 27 03            [ 1] 3358 	jreq 9$ 
      002976 53               [ 2] 3359 	cplw x
      002977 A6 FF            [ 1] 3360 	ld a,#255    
      002979                       3361 9$: 
      002979 81               [ 4] 3362 	ret 
                                   3363 
                                   3364 ;---------------------
                                   3365 ; BASIC: GPIO(port,reg)
                                   3366 ; return gpio register address 
                                   3367 ; expr {PORTA..PORTI}
                                   3368 ; input:
                                   3369 ;   none 
                                   3370 ; output:
                                   3371 ;   A:X 	gpio register address
                                   3372 ;----------------------------
                                   3373 ;	N=PORT
                                   3374 ;	T=REG 
      00297A                       3375 gpio:
      00297A CD 19 58         [ 4] 3376 	call func_args 
      00297D A1 02            [ 1] 3377 	cp a,#2
      00297F 27 03            [ 1] 3378 	jreq 1$
      002981 CC 16 9E         [ 2] 3379 	jp syntax_error  
      002984                       3380 1$:	_at_next 
      002984 90 E6 03         [ 1]    1     ld a,(3,y)
      002987 93               [ 1]    2     ldw x,y 
      002988 EE 04            [ 2]    3     ldw x,(4,x)
      00298A A3 50 00         [ 2] 3381 	cpw x,#PA_BASE 
      00298D 2B 16            [ 1] 3382 	jrmi bad_port
      00298F A3 50 29         [ 2] 3383 	cpw x,#PI_BASE+1 
      002992 2A 11            [ 1] 3384 	jrpl bad_port
      002994 89               [ 2] 3385 	pushw x 
      002995                       3386 	_xpop
      002995 90 F6            [ 1]    1     ld a,(y)
      002997 93               [ 1]    2     ldw x,y 
      002998 EE 01            [ 2]    3     ldw x,(1,x)
      00299A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      00299E 72 FB 01         [ 2] 3387 	addw x,(1,sp)
      0029A1                       3388 	_drop 2 
      0029A1 5B 02            [ 2]    1     addw sp,#2 
      0029A3 4F               [ 1] 3389 	clr a 
      0029A4 81               [ 4] 3390 	ret
      0029A5                       3391 bad_port:
      0029A5 A6 0A            [ 1] 3392 	ld a,#ERR_BAD_VALUE
      0029A7 CC 16 A0         [ 2] 3393 	jp tb_error
                                   3394 
                                   3395 
                                   3396 ;-------------------------
                                   3397 ; BASIC: UFLASH 
                                   3398 ; return free flash address
                                   3399 ; input:
                                   3400 ;  none 
                                   3401 ; output:
                                   3402 ;	A		TK_INTGR
                                   3403 ;   xstack	free address 
                                   3404 ;---------------------------
      0029AA                       3405 uflash:
      0029AA CD 27 B6         [ 4] 3406 	call qsign 
      0029AD 26 13            [ 1] 3407 	jrne 1$
      0029AF AE 35 80         [ 2] 3408 	ldw x,#app_space 
      0029B2 72 BB 35 82      [ 2] 3409 	addw x,app_size 
      0029B6 1C 00 04         [ 2] 3410 	addw x,#4
                                   3411 ; align on 128 bytes block 
      0029B9 1C 00 80         [ 2] 3412 	addw x,#BLOCK_SIZE 
      0029BC 9F               [ 1] 3413 	ld a,xl 
      0029BD A4 80            [ 1] 3414 	and a,#0x80 
      0029BF 97               [ 1] 3415 	ld xl,a 
      0029C0 20 03            [ 2] 3416 	jra 2$
      0029C2 AE 35 80         [ 2] 3417 1$:	ldw x,#app_space 
      0029C5                       3418 2$:
      0029C5 4F               [ 1] 3419 	clr a 
      0029C6 81               [ 4] 3420 	ret 
                                   3421 
                                   3422 
                                   3423 ;---------------------
                                   3424 ; BASIC: USR(addr,arg)
                                   3425 ; execute a function written 
                                   3426 ; in binary code.
                                   3427 ; input:
                                   3428 ;   addr	routine address 
                                   3429 ;   arg 	is an argument
                                   3430 ;           it can be ignore 
                                   3431 ;           by cally. 
                                   3432 ; output:
                                   3433 ;   xstack 	value returned by cally  
                                   3434 ;---------------------
      0029C7                       3435 usr:
      0029C7 CD 19 58         [ 4] 3436 	call func_args 
      0029CA A1 02            [ 1] 3437 	cp a,#2
      0029CC 27 03            [ 1] 3438 	jreq 1$  
      0029CE CC 16 9E         [ 2] 3439 	jp syntax_error 
      0029D1                       3440 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      0029D1                       3441 	_at_next ; A:X addr 
      0029D1 90 E6 03         [ 1]    1     ld a,(3,y)
      0029D4 93               [ 1]    2     ldw x,y 
      0029D5 EE 04            [ 2]    3     ldw x,(4,x)
      0029D7 CF 00 19         [ 2] 3442 	ldw ptr16,X 
      0029DA                       3443 	_xpop  ; arg 
      0029DA 90 F6            [ 1]    1     ld a,(y)
      0029DC 93               [ 1]    2     ldw x,y 
      0029DD EE 01            [ 2]    3     ldw x,(1,x)
      0029DF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029E3                       3444 	_store_top ; overwrite addr 
      0029E3 90 F7            [ 1]    1     ld (y),a 
      0029E5 90 EF 01         [ 2]    2     ldw (1,y),x     
      0029E8 72 CD 00 19      [ 6] 3445     call [ptr16]
      0029EC 81               [ 4] 3446 	ret 
                                   3447 
                                   3448 
                                   3449 ;------------------------------
                                   3450 ; BASIC: BYE 
                                   3451 ; halt mcu in its lowest power mode 
                                   3452 ; wait for reset or external interrupt
                                   3453 ; do a cold start on wakeup.
                                   3454 ;------------------------------
      0029ED                       3455 bye:
      0029ED 72 0D 52 30 FB   [ 2] 3456 	btjf UART1_SR,#UART_SR_TC,.
      0029F2 8E               [10] 3457 	halt
      0029F3 CC 00 C3         [ 2] 3458 	jp cold_start  
                                   3459 
                                   3460 ;----------------------------------
                                   3461 ; BASIC: SLEEP 
                                   3462 ; halt mcu until reset or external
                                   3463 ; interrupt.
                                   3464 ; Resume progam after SLEEP command
                                   3465 ;----------------------------------
      0029F6                       3466 sleep:
      0029F6 72 0D 52 30 FB   [ 2] 3467 	btjf UART1_SR,#UART_SR_TC,.
      0029FB 72 16 00 22      [ 1] 3468 	bset flags,#FSLEEP
      0029FF 8E               [10] 3469 	halt 
      002A00 81               [ 4] 3470 	ret 
                                   3471 
                                   3472 ;-------------------------------
                                   3473 ; BASIC: PAUSE expr 
                                   3474 ; suspend execution for n msec.
                                   3475 ; input:
                                   3476 ;	none
                                   3477 ; output:
                                   3478 ;	none 
                                   3479 ;------------------------------
      002A01                       3480 pause:
      002A01 CD 1A 88         [ 4] 3481 	call expression
      002A04 A1 84            [ 1] 3482 	cp a,#TK_INTGR
      002A06 27 03            [ 1] 3483 	jreq 1$ 
      002A08 CC 16 9E         [ 2] 3484 	jp syntax_error
      002A0B                       3485 1$: _xpop 
      002A0B 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      002A0D 93               [ 1]    2     ldw x,y 
      002A0E EE 01            [ 2]    3     ldw x,(1,x)
      002A10 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A14                       3486 pause02:
      002A14 CF 00 12         [ 2] 3487 	ldw timer,x 
      002A17 CE 00 12         [ 2] 3488 1$: ldw x,timer 
      002A1A 5D               [ 2] 3489 	tnzw x 
      002A1B 27 03            [ 1] 3490 	jreq 2$
      002A1D 8F               [10] 3491 	wfi 
      002A1E 26 F7            [ 1] 3492 	jrne 1$
      002A20                       3493 2$:	
      002A20 81               [ 4] 3494 	ret 
                                   3495 
                                   3496 ;------------------------------
                                   3497 ; BASIC: AWU expr
                                   3498 ; halt mcu for 'expr' milliseconds
                                   3499 ; use Auto wakeup peripheral
                                   3500 ; all oscillators stopped except LSI
                                   3501 ; range: 1ms - 511ms
                                   3502 ; input:
                                   3503 ;  none
                                   3504 ; output:
                                   3505 ;  none:
                                   3506 ;------------------------------
      002A21                       3507 awu:
      002A21 CD 1A 88         [ 4] 3508   call expression
      002A24 A1 84            [ 1] 3509   cp a,#TK_INTGR
      002A26 27 03            [ 1] 3510   jreq 1$
      002A28 CC 16 9E         [ 2] 3511   jp syntax_error
      002A2B                       3512 1$: _xpop 
      002A2B 90 F6            [ 1]    1     ld a,(y)
      002A2D 93               [ 1]    2     ldw x,y 
      002A2E EE 01            [ 2]    3     ldw x,(1,x)
      002A30 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A34                       3513 awu02:
      002A34 A3 14 00         [ 2] 3514   cpw x,#5120
      002A37 2B 0C            [ 1] 3515   jrmi 1$ 
      002A39 35 0F 50 F2      [ 1] 3516   mov AWU_TBR,#15 
      002A3D A6 1E            [ 1] 3517   ld a,#30
      002A3F 62               [ 2] 3518   div x,a
      002A40 A6 10            [ 1] 3519   ld a,#16
      002A42 62               [ 2] 3520   div x,a 
      002A43 20 1E            [ 2] 3521   jra 4$
      002A45                       3522 1$: 
      002A45 A3 08 00         [ 2] 3523   cpw x,#2048
      002A48 2B 09            [ 1] 3524   jrmi 2$ 
      002A4A 35 0E 50 F2      [ 1] 3525   mov AWU_TBR,#14
      002A4E A6 50            [ 1] 3526   ld a,#80
      002A50 62               [ 2] 3527   div x,a 
      002A51 20 10            [ 2] 3528   jra 4$   
      002A53                       3529 2$:
      002A53 35 07 50 F2      [ 1] 3530   mov AWU_TBR,#7
      002A57                       3531 3$:  
                                   3532 ; while X > 64  divide by 2 and increment AWU_TBR 
      002A57 A3 00 40         [ 2] 3533   cpw x,#64 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002A5A 23 07            [ 2] 3534   jrule 4$ 
      002A5C 72 5C 50 F2      [ 1] 3535   inc AWU_TBR 
      002A60 54               [ 2] 3536   srlw x 
      002A61 20 F4            [ 2] 3537   jra 3$ 
      002A63                       3538 4$:
      002A63 9F               [ 1] 3539   ld a, xl
      002A64 4A               [ 1] 3540   dec a 
      002A65 27 01            [ 1] 3541   jreq 5$
      002A67 4A               [ 1] 3542   dec a 	
      002A68                       3543 5$: 
      002A68 A4 3E            [ 1] 3544   and a,#0x3e 
      002A6A C7 50 F1         [ 1] 3545   ld AWU_APR,a 
      002A6D 72 18 50 F0      [ 1] 3546   bset AWU_CSR,#AWU_CSR_AWUEN
      002A71 8E               [10] 3547   halt 
                                   3548 
      002A72 81               [ 4] 3549   ret 
                                   3550 
                                   3551 ;------------------------------
                                   3552 ; BASIC: TICKS
                                   3553 ; return msec ticks counter value 
                                   3554 ; input:
                                   3555 ; 	none 
                                   3556 ; output:
                                   3557 ;	X 		TK_INTGR
                                   3558 ;-------------------------------
      002A73                       3559 get_ticks:
      002A73 C6 00 0F         [ 1] 3560 	ld a,ticks 
      002A76 CE 00 10         [ 2] 3561 	ldw x,ticks+1 
      002A79 81               [ 4] 3562 	ret 
                                   3563 
                                   3564 ;------------------------------
                                   3565 ; BASIC: ABS(expr)
                                   3566 ; return absolute value of expr.
                                   3567 ; input:
                                   3568 ;   none
                                   3569 ; output:
                                   3570 ;   xstack    positive int24 
                                   3571 ;-------------------------------
      002A7A                       3572 abs:
      002A7A CD 19 58         [ 4] 3573 	call func_args 
      002A7D A1 01            [ 1] 3574 	cp a,#1 
      002A7F 27 03            [ 1] 3575 	jreq 0$ 
      002A81 CC 16 9E         [ 2] 3576 	jp syntax_error
      002A84                       3577 0$:  
      002A84 CD 01 DF         [ 4] 3578 	call abs24 
      002A87                       3579 	_xpop 
      002A87 90 F6            [ 1]    1     ld a,(y)
      002A89 93               [ 1]    2     ldw x,y 
      002A8A EE 01            [ 2]    3     ldw x,(1,x)
      002A8C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A90 81               [ 4] 3580 	ret 
                                   3581 
                                   3582 ;------------------------------
                                   3583 ; BASIC: LSHIFT(expr1,expr2)
                                   3584 ; logical shift left expr1 by 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



                                   3585 ; expr2 bits 
                                   3586 ; output:
                                   3587 ; 	A 		TK_INTGR
                                   3588 ;   X 		result 
                                   3589 ;------------------------------
      002A91                       3590 lshift:
      002A91 CD 19 58         [ 4] 3591 	call func_args
      002A94 A1 02            [ 1] 3592 	cp a,#2 
      002A96 27 03            [ 1] 3593 	jreq 1$
      002A98 CC 16 9E         [ 2] 3594 	jp syntax_error
      002A9B                       3595 1$: _xpop 
      002A9B 90 F6            [ 1]    1     ld a,(y)
      002A9D 93               [ 1]    2     ldw x,y 
      002A9E EE 01            [ 2]    3     ldw x,(1,x)
      002AA0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AA4 90 93            [ 1] 3596     ldw y,x    
      002AA6                       3597 	_at_top  ; T@ 
      002AA6 90 F6            [ 1]    1     ld a,(y)
      002AA8 93               [ 1]    2     ldw x,y 
      002AA9 EE 01            [ 2]    3     ldw x,(1,x)
      002AAB 90 5D            [ 2] 3598 	tnzw y 
      002AAD 27 07            [ 1] 3599 	jreq 4$
      002AAF 98               [ 1] 3600 2$:	rcf 
      002AB0 59               [ 2] 3601 	rlcw x 
      002AB1 49               [ 1] 3602 	rlc a 
      002AB2 90 5A            [ 2] 3603 	decw y 
      002AB4 26 F9            [ 1] 3604 	jrne 2$
      002AB6                       3605 4$: _store_top  ; T! 
      002AB6 90 F7            [ 1]    1     ld (y),a 
      002AB8 90 EF 01         [ 2]    2     ldw (1,y),x     
      002ABB A6 84            [ 1] 3606 	ld a,#TK_INTGR
      002ABD 81               [ 4] 3607 	ret
                                   3608 
                                   3609 ;------------------------------
                                   3610 ; BASIC: RSHIFT(expr1,expr2)
                                   3611 ; logical shift right expr1 by 
                                   3612 ; expr2 bits.
                                   3613 ; output:
                                   3614 ; 	A 		TK_INTGR
                                   3615 ;   X 		result 
                                   3616 ;------------------------------
      002ABE                       3617 rshift:
      002ABE CD 19 58         [ 4] 3618 	call func_args
      002AC1 A1 02            [ 1] 3619 	cp a,#2 
      002AC3 27 03            [ 1] 3620 	jreq 1$
      002AC5 CC 16 9E         [ 2] 3621 	jp syntax_error
      002AC8                       3622 1$: _xpop 
      002AC8 90 F6            [ 1]    1     ld a,(y)
      002ACA 93               [ 1]    2     ldw x,y 
      002ACB EE 01            [ 2]    3     ldw x,(1,x)
      002ACD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AD1 90 93            [ 1] 3623     ldw y,x   
      002AD3                       3624 	_at_top  ; T@  
      002AD3 90 F6            [ 1]    1     ld a,(y)
      002AD5 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002AD6 EE 01            [ 2]    3     ldw x,(1,x)
      002AD8 90 5D            [ 2] 3625 	tnzw y 
      002ADA 27 07            [ 1] 3626 	jreq 4$
      002ADC 98               [ 1] 3627 2$:	rcf 
      002ADD 56               [ 2] 3628 	rrcw x
      002ADE 46               [ 1] 3629 	rrc a  
      002ADF 90 5A            [ 2] 3630 	decw y 
      002AE1 26 F9            [ 1] 3631 	jrne 2$
      002AE3                       3632 4$: _store_top  ; T! 
      002AE3 90 F7            [ 1]    1     ld (y),a 
      002AE5 90 EF 01         [ 2]    2     ldw (1,y),x     
      002AE8 A6 84            [ 1] 3633 	ld a,#TK_INTGR
      002AEA 81               [ 4] 3634 	ret
                                   3635 
                                   3636 ;--------------------------
                                   3637 ; BASIC: FCPU integer
                                   3638 ; set CPU frequency 
                                   3639 ;-------------------------- 
                                   3640 
      002AEB                       3641 fcpu:
      002AEB A6 84            [ 1] 3642 	ld a,#TK_INTGR
      002AED CD 19 4B         [ 4] 3643 	call expect 
      002AF0 CD 17 DE         [ 4] 3644 	call get_int24 
      002AF3 9F               [ 1] 3645 	ld a,xl 
      002AF4 A4 07            [ 1] 3646 	and a,#7 
      002AF6 C7 50 C6         [ 1] 3647 	ld CLK_CKDIVR,a 
      002AF9 81               [ 4] 3648 	ret 
                                   3649 
                                   3650 ;------------------------------
                                   3651 ; BASIC: PMODE pin#, mode 
                                   3652 ; Arduino pin. 
                                   3653 ; define pin as input or output
                                   3654 ; pin#: {0..15}
                                   3655 ; mode: INPUT|OUTPUT  
                                   3656 ;------------------------------
                           000001  3657 	PINNO=1
                           000001  3658 	VSIZE=1
      002AFA                       3659 pin_mode:
      002AFA                       3660 	_vars VSIZE 
      002AFA 52 01            [ 2]    1     sub sp,#VSIZE 
      002AFC CD 19 5D         [ 4] 3661 	call arg_list 
      002AFF A1 02            [ 1] 3662 	cp a,#2 
      002B01 27 03            [ 1] 3663 	jreq 1$
      002B03 CC 16 9E         [ 2] 3664 	jp syntax_error 
      002B06                       3665 1$: _xpop 
      002B06 90 F6            [ 1]    1     ld a,(y)
      002B08 93               [ 1]    2     ldw x,y 
      002B09 EE 01            [ 2]    3     ldw x,(1,x)
      002B0B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B0F CF 00 19         [ 2] 3666 	ldw ptr16,x ; mode 
      002B12                       3667 	_xpop ; Dx pin 
      002B12 90 F6            [ 1]    1     ld a,(y)
      002B14 93               [ 1]    2     ldw x,y 
      002B15 EE 01            [ 2]    3     ldw x,(1,x)
      002B17 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002B1B CD 2B 59         [ 4] 3668 	call select_pin 
      002B1E 6B 01            [ 1] 3669 	ld (PINNO,sp),a  
      002B20 A6 01            [ 1] 3670 	ld a,#1 
      002B22 0D 01            [ 1] 3671 	tnz (PINNO,sp)
      002B24 27 0D            [ 1] 3672 	jreq 4$
      002B26 48               [ 1] 3673 2$:	sll a 
      002B27 0A 01            [ 1] 3674 	dec (PINNO,sp)
      002B29 26 FB            [ 1] 3675 	jrne 2$ 
      002B2B 6B 01            [ 1] 3676 	ld (PINNO,sp),a
      002B2D 7B 01            [ 1] 3677 	ld a,(PINNO,sp)
      002B2F EA 03            [ 1] 3678 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002B31 E7 03            [ 1] 3679 	ld (GPIO_CR1,x),a 
      002B33 A6 01            [ 1] 3680 4$:	ld a,#OUTP
      002B35 C1 00 0E         [ 1] 3681 	cp a,acc8 
      002B38 27 10            [ 1] 3682 	jreq 6$
                                   3683 ; input mode
                                   3684 ; disable external interrupt 
      002B3A 7B 01            [ 1] 3685 	ld a,(PINNO,sp)
      002B3C 43               [ 1] 3686 	cpl a 
      002B3D E4 04            [ 1] 3687 	and a,(GPIO_CR2,x)
      002B3F E7 04            [ 1] 3688 	ld (GPIO_CR2,x),a 
                                   3689 ;clear bit in DDR for input mode 
      002B41 7B 01            [ 1] 3690 	ld a,(PINNO,sp)
      002B43 43               [ 1] 3691 	cpl a 
      002B44 E4 02            [ 1] 3692 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002B46 E7 02            [ 1] 3693 	ld (GPIO_DDR,x),a 
      002B48 20 0C            [ 2] 3694 	jra 9$
      002B4A                       3695 6$: ;output mode  
      002B4A 7B 01            [ 1] 3696 	ld a,(PINNO,sp)
      002B4C EA 02            [ 1] 3697 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002B4E E7 02            [ 1] 3698 	ld (GPIO_DDR,x),a 
      002B50 7B 01            [ 1] 3699 	ld a,(PINNO,sp)
      002B52 EA 04            [ 1] 3700 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002B54 E7 04            [ 1] 3701 	ld (GPIO_CR2,x),a 
      002B56                       3702 9$:	
      002B56                       3703 	_drop VSIZE 
      002B56 5B 01            [ 2]    1     addw sp,#VSIZE 
      002B58 81               [ 4] 3704 	ret
                                   3705 
                                   3706 ;------------------------
                                   3707 ; select Arduino pin 
                                   3708 ; input:
                                   3709 ;   X 	 {0..15} Arduino Dx 
                                   3710 ; output:
                                   3711 ;   A     stm8s208 pin 
                                   3712 ;   X     base address s208 GPIO port 
                                   3713 ;---------------------------
      002B59                       3714 select_pin:
      002B59 58               [ 2] 3715 	sllw x 
      002B5A 1C 2B 69         [ 2] 3716 	addw x,#arduino_to_8s208 
      002B5D FE               [ 2] 3717 	ldw x,(x)
      002B5E 9F               [ 1] 3718 	ld a,xl 
      002B5F 88               [ 1] 3719 	push a 
      002B60 5E               [ 1] 3720 	swapw x 
      002B61 A6 05            [ 1] 3721 	ld a,#5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002B63 42               [ 4] 3722 	mul x,a 
      002B64 1C 50 00         [ 2] 3723 	addw x,#GPIO_BASE 
      002B67 84               [ 1] 3724 	pop a 
      002B68 81               [ 4] 3725 	ret 
                                   3726 ; translation from Arduino D0..D15 to stm8s208rb 
      002B69                       3727 arduino_to_8s208:
      002B69 03 06                 3728 .byte 3,6 ; D0 
      002B6B 03 05                 3729 .byte 3,5 ; D1 
      002B6D 04 00                 3730 .byte 4,0 ; D2 
      002B6F 02 01                 3731 .byte 2,1 ; D3
      002B71 06 00                 3732 .byte 6,0 ; D4
      002B73 02 02                 3733 .byte 2,2 ; D5
      002B75 02 03                 3734 .byte 2,3 ; D6
      002B77 03 01                 3735 .byte 3,1 ; D7
      002B79 03 03                 3736 .byte 3,3 ; D8
      002B7B 02 04                 3737 .byte 2,4 ; D9
      002B7D 04 05                 3738 .byte 4,5 ; D10
      002B7F 02 06                 3739 .byte 2,6 ; D11
      002B81 02 07                 3740 .byte 2,7 ; D12
      002B83 02 05                 3741 .byte 2,5 ; D13
      002B85 04 02                 3742 .byte 4,2 ; D14
      002B87 04 01                 3743 .byte 4,1 ; D15
                                   3744 
                                   3745 
                                   3746 ;------------------------------
                                   3747 ; BASIC: RND(expr)
                                   3748 ; return random number 
                                   3749 ; between 1 and expr inclusive
                                   3750 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3751 ; input:
                                   3752 ; 	none 
                                   3753 ; output:
                                   3754 ;	xstack 	random positive integer 
                                   3755 ;------------------------------
      002B89                       3756 random:
      002B89 CD 19 58         [ 4] 3757 	call func_args 
      002B8C A1 01            [ 1] 3758 	cp a,#1
      002B8E 27 03            [ 1] 3759 	jreq 1$
      002B90 CC 16 9E         [ 2] 3760 	jp syntax_error
      002B93                       3761 1$:  
      002B93                       3762 	_xpop   
      002B93 90 F6            [ 1]    1     ld a,(y)
      002B95 93               [ 1]    2     ldw x,y 
      002B96 EE 01            [ 2]    3     ldw x,(1,x)
      002B98 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B9C 89               [ 2] 3763 	pushw x 
      002B9D 88               [ 1] 3764 	push a  
      002B9E A6 80            [ 1] 3765 	ld a,#0x80 
      002BA0 15 01            [ 1] 3766 	bcp a,(1,sp)
      002BA2 27 05            [ 1] 3767 	jreq 2$
      002BA4 A6 0A            [ 1] 3768 	ld a,#ERR_BAD_VALUE
      002BA6 CC 16 A0         [ 2] 3769 	jp tb_error
      002BA9                       3770 2$: 
                                   3771 ; acc16=(x<<5)^x 
      002BA9 CE 00 14         [ 2] 3772 	ldw x,seedx 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002BAC 58               [ 2] 3773 	sllw x 
      002BAD 58               [ 2] 3774 	sllw x 
      002BAE 58               [ 2] 3775 	sllw x 
      002BAF 58               [ 2] 3776 	sllw x 
      002BB0 58               [ 2] 3777 	sllw x 
      002BB1 9E               [ 1] 3778 	ld a,xh 
      002BB2 C8 00 14         [ 1] 3779 	xor a,seedx 
      002BB5 C7 00 0D         [ 1] 3780 	ld acc16,a 
      002BB8 9F               [ 1] 3781 	ld a,xl 
      002BB9 C8 00 15         [ 1] 3782 	xor a,seedx+1 
      002BBC C7 00 0E         [ 1] 3783 	ld acc8,a 
                                   3784 ; seedx=seedy 
      002BBF CE 00 16         [ 2] 3785 	ldw x,seedy 
      002BC2 CF 00 14         [ 2] 3786 	ldw seedx,x  
                                   3787 ; seedy=seedy^(seedy>>1)
      002BC5 CE 00 16         [ 2] 3788 	ldw x,seedy 
      002BC8 54               [ 2] 3789 	srlw x 
      002BC9 9E               [ 1] 3790 	ld a,xh 
      002BCA C8 00 16         [ 1] 3791 	xor a,seedy 
      002BCD C7 00 16         [ 1] 3792 	ld seedy,a  
      002BD0 9F               [ 1] 3793 	ld a,xl 
      002BD1 C8 00 17         [ 1] 3794 	xor a,seedy+1 
      002BD4 C7 00 17         [ 1] 3795 	ld seedy+1,a 
                                   3796 ; acc16>>3 
      002BD7 CE 00 0D         [ 2] 3797 	ldw x,acc16 
      002BDA 54               [ 2] 3798 	srlw x 
      002BDB 54               [ 2] 3799 	srlw x 
      002BDC 54               [ 2] 3800 	srlw x 
                                   3801 ; x=acc16^x 
      002BDD 9E               [ 1] 3802 	ld a,xh 
      002BDE C8 00 0D         [ 1] 3803 	xor a,acc16 
      002BE1 C7 00 0D         [ 1] 3804 	ld acc16,a 
      002BE4 9F               [ 1] 3805 	ld a,xl 
      002BE5 C8 00 0E         [ 1] 3806 	xor a,acc8 
      002BE8 C7 00 0E         [ 1] 3807 	ld acc8,a 
                                   3808 ; seedy=acc16^seedy 
      002BEB C8 00 17         [ 1] 3809 	xor a,seedy+1
      002BEE 97               [ 1] 3810 	ld xl,a 
      002BEF C6 00 0D         [ 1] 3811 	ld a,acc16 
      002BF2 C8 00 16         [ 1] 3812 	xor a,seedy
      002BF5 95               [ 1] 3813 	ld xh,a 
      002BF6 CF 00 16         [ 2] 3814 	ldw seedy,x 
                                   3815 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002BF9 C6 00 15         [ 1] 3816 	ld a,seedx+1
      002BFC A4 7F            [ 1] 3817 	and a,#127
      002BFE                       3818 	_xpush 
      002BFE 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C02 90 F7            [ 1]    2     ld (y),a 
      002C04 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C07 84               [ 1] 3819 	pop a 
      002C08 85               [ 2] 3820 	popw x 
      002C09                       3821 	_xpush 
      002C09 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C0D 90 F7            [ 1]    2     ld (y),a 
      002C0F 90 EF 01         [ 2]    3     ldw (1,y),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002C12 CD 03 D1         [ 4] 3822 	call mod24 
      002C15                       3823 	_xpop
      002C15 90 F6            [ 1]    1     ld a,(y)
      002C17 93               [ 1]    2     ldw x,y 
      002C18 EE 01            [ 2]    3     ldw x,(1,x)
      002C1A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C1E 1C 00 01         [ 2] 3824 	addw x,#1 
      002C21 A9 00            [ 1] 3825 	adc a,#0  
      002C23 81               [ 4] 3826 	ret 
                                   3827 
                                   3828 ;---------------------------------
                                   3829 ; BASIC: WORDS 
                                   3830 ; affiche la listes des mots du
                                   3831 ; dictionnaire ainsi que le nombre
                                   3832 ; de mots.
                                   3833 ;---------------------------------
                           000001  3834 	WLEN=1 ; word length
                           000002  3835 	LLEN=2 ; character sent to console
                           000003  3836 	WCNT=3 ; count words printed 
                           000003  3837 	VSIZE=3 
      002C24                       3838 words:
      002C24 90 89            [ 2] 3839 	pushw y
      002C26                       3840 	_vars VSIZE
      002C26 52 03            [ 2]    1     sub sp,#VSIZE 
      002C28 0F 02            [ 1] 3841 	clr (LLEN,sp)
      002C2A 0F 03            [ 1] 3842 	clr (WCNT,sp)
      002C2C 90 AE 32 EF      [ 2] 3843 	ldw y,#kword_dict+2
      002C30 93               [ 1] 3844 0$:	ldw x,y
      002C31 F6               [ 1] 3845 	ld a,(x)
      002C32 A4 0F            [ 1] 3846 	and a,#15 
      002C34 6B 01            [ 1] 3847 	ld (WLEN,sp),a 
      002C36 0C 03            [ 1] 3848 	inc (WCNT,sp)
      002C38 5C               [ 1] 3849 1$:	incw x 
      002C39 F6               [ 1] 3850 	ld a,(x)
      002C3A CD 09 40         [ 4] 3851 	call putc 
      002C3D 0C 02            [ 1] 3852 	inc (LLEN,sp)
      002C3F 0A 01            [ 1] 3853 	dec (WLEN,sp)
      002C41 26 F5            [ 1] 3854 	jrne 1$
      002C43 A6 46            [ 1] 3855 	ld a,#70
      002C45 11 02            [ 1] 3856 	cp a,(LLEN,sp)
      002C47 2B 09            [ 1] 3857 	jrmi 2$   
      002C49 A6 20            [ 1] 3858 	ld a,#SPACE 
      002C4B CD 09 40         [ 4] 3859 	call putc 
      002C4E 0C 02            [ 1] 3860 	inc (LLEN,sp) 
      002C50 20 07            [ 2] 3861 	jra 3$
      002C52 A6 0D            [ 1] 3862 2$: ld a,#CR 
      002C54 CD 09 40         [ 4] 3863 	call putc 
      002C57 0F 02            [ 1] 3864 	clr (LLEN,sp)
      002C59 72 A2 00 02      [ 2] 3865 3$:	subw y,#2 
      002C5D 90 FE            [ 2] 3866 	ldw y,(y)
      002C5F 26 CF            [ 1] 3867 	jrne 0$ 
      002C61 A6 0D            [ 1] 3868 	ld a,#CR 
      002C63 CD 09 40         [ 4] 3869 	call putc  
      002C66 5F               [ 1] 3870 	clrw x 
      002C67 7B 03            [ 1] 3871 	ld a,(WCNT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002C69 97               [ 1] 3872 	ld xl,a 
      002C6A CD 17 F4         [ 4] 3873 	call prt_i16 
      002C6D AE 2C 78         [ 2] 3874 	ldw x,#words_count_msg
      002C70 CD 09 9D         [ 4] 3875 	call puts 
      002C73                       3876 	_drop VSIZE 
      002C73 5B 03            [ 2]    1     addw sp,#VSIZE 
      002C75 90 85            [ 2] 3877 	popw y 
      002C77 81               [ 4] 3878 	ret 
      002C78 20 77 6F 72 64 73 20  3879 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3880 
                                   3881 
                                   3882 ;-----------------------------
                                   3883 ; BASIC: TIMER expr 
                                   3884 ; initialize count down timer 
                                   3885 ;-----------------------------
      002C8E                       3886 set_timer:
      002C8E CD 19 5D         [ 4] 3887 	call arg_list
      002C91 A1 01            [ 1] 3888 	cp a,#1 
      002C93 27 03            [ 1] 3889 	jreq 1$
      002C95 CC 16 9E         [ 2] 3890 	jp syntax_error
      002C98                       3891 1$: 
      002C98                       3892 	_xpop  
      002C98 90 F6            [ 1]    1     ld a,(y)
      002C9A 93               [ 1]    2     ldw x,y 
      002C9B EE 01            [ 2]    3     ldw x,(1,x)
      002C9D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CA1 CF 00 12         [ 2] 3893 	ldw timer,x 
      002CA4 81               [ 4] 3894 	ret 
                                   3895 
                                   3896 ;------------------------------
                                   3897 ; BASIC: TIMEOUT 
                                   3898 ; return state of timer 
                                   3899 ; output:
                                   3900 ;   A:X     0 not timeout 
                                   3901 ;   A:X     -1 timeout 
                                   3902 ;------------------------------
      002CA5                       3903 timeout:
      002CA5 4F               [ 1] 3904 	clr a 
      002CA6 CE 00 12         [ 2] 3905 	ldw x,timer 
      002CA9 27 02            [ 1] 3906 	jreq 1$
      002CAB 5F               [ 1] 3907 	clrw x
      002CAC 81               [ 4] 3908 	ret  
      002CAD 43               [ 1] 3909 1$:	cpl a
      002CAE 53               [ 2] 3910 	cplw x 
      002CAF 81               [ 4] 3911 	ret 
                                   3912  	
                                   3913 
                                   3914 
                                   3915 
                                   3916 ;-----------------------------------
                                   3917 ; BASIC: IWDGEN expr1 
                                   3918 ; enable independant watchdog timer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



                                   3919 ; expr1 is delay in multiple of 62.5µsec
                                   3920 ; expr1 -> {1..16383}
                                   3921 ;-----------------------------------
      002CB0                       3922 enable_iwdg:
      002CB0 CD 19 5D         [ 4] 3923 	call arg_list
      002CB3 A1 01            [ 1] 3924 	cp a,#1 
      002CB5 27 03            [ 1] 3925 	jreq 1$
      002CB7 CC 16 9E         [ 2] 3926 	jp syntax_error 
      002CBA                       3927 1$: _xpop  
      002CBA 90 F6            [ 1]    1     ld a,(y)
      002CBC 93               [ 1]    2     ldw x,y 
      002CBD EE 01            [ 2]    3     ldw x,(1,x)
      002CBF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CC3 4B 00            [ 1] 3928 	push #0
      002CC5 35 CC 50 E0      [ 1] 3929 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002CC9 9E               [ 1] 3930 	ld a,xh 
      002CCA A4 3F            [ 1] 3931 	and a,#0x3f
      002CCC 95               [ 1] 3932 	ld xh,a  
      002CCD A3 00 FF         [ 2] 3933 2$:	cpw x,#255
      002CD0 23 06            [ 2] 3934 	jrule 3$
      002CD2 0C 01            [ 1] 3935 	inc (1,sp)
      002CD4 98               [ 1] 3936 	rcf 
      002CD5 56               [ 2] 3937 	rrcw x 
      002CD6 20 F5            [ 2] 3938 	jra 2$
      002CD8 35 55 50 E0      [ 1] 3939 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CDC 84               [ 1] 3940 	pop a  
      002CDD C7 50 E1         [ 1] 3941 	ld IWDG_PR,a 
      002CE0 9F               [ 1] 3942 	ld a,xl
      002CE1 4A               [ 1] 3943 	dec a 
      002CE2 35 55 50 E0      [ 1] 3944 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CE6 C7 50 E2         [ 1] 3945 	ld IWDG_RLR,a 
      002CE9 35 AA 50 E0      [ 1] 3946 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002CED 81               [ 4] 3947 	ret 
                                   3948 
                                   3949 
                                   3950 ;-----------------------------------
                                   3951 ; BASIC: IWDGREF  
                                   3952 ; refresh independant watchdog count down 
                                   3953 ; timer before it reset MCU. 
                                   3954 ;-----------------------------------
      002CEE                       3955 refresh_iwdg:
      002CEE 35 AA 50 E0      [ 1] 3956 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002CF2 81               [ 4] 3957 	ret 
                                   3958 
                                   3959 
                                   3960 ;-------------------------------------
                                   3961 ; BASIC: LOG2(expr)
                                   3962 ; return logarithm base 2 of expr 
                                   3963 ; this is the position of most significant
                                   3964 ; bit set. 
                                   3965 ; input: 
                                   3966 ; output:
                                   3967 ;   A     TK_INTGR 
                                   3968 ;   xstack log2 
                                   3969 ;*********************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002CF3                       3970 log2:
      002CF3 CD 19 58         [ 4] 3971 	call func_args 
      002CF6 A1 01            [ 1] 3972 	cp a,#1 
      002CF8 27 03            [ 1] 3973 	jreq 1$
      002CFA CC 16 9E         [ 2] 3974 	jp syntax_error 
      002CFD                       3975 1$: 
      002CFD                       3976 	_xpop    
      002CFD 90 F6            [ 1]    1     ld a,(y)
      002CFF 93               [ 1]    2     ldw x,y 
      002D00 EE 01            [ 2]    3     ldw x,(1,x)
      002D02 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D06 4D               [ 1] 3977 	tnz a
      002D07 26 08            [ 1] 3978 	jrne 2$ 
      002D09 5D               [ 2] 3979 	tnzw x 
      002D0A 26 05            [ 1] 3980 	jrne 2$
      002D0C A6 0A            [ 1] 3981 	ld a,#ERR_BAD_VALUE
      002D0E CC 16 A0         [ 2] 3982 	jp tb_error 
      002D11 4B 18            [ 1] 3983 2$: push #24 
      002D13 59               [ 2] 3984 3$: rlcw x 
      002D14 49               [ 1] 3985     rlc a 
      002D15 25 04            [ 1] 3986 	jrc 4$
      002D17 0A 01            [ 1] 3987 	dec (1,sp) 
      002D19 26 F8            [ 1] 3988 	jrne 3$
      002D1B 5F               [ 1] 3989 4$: clrw x 
      002D1C 84               [ 1] 3990     pop a 
      002D1D 4A               [ 1] 3991 	dec a
      002D1E 02               [ 1] 3992 	rlwa x  
      002D1F                       3993 9$:	
      002D1F 81               [ 4] 3994 	ret 
                                   3995 
                                   3996 ;-----------------------------------
                                   3997 ; BASIC: BIT(expr) 
                                   3998 ; expr ->{0..23}
                                   3999 ; return 2^expr 
                                   4000 ; output:
                                   4001 ;    A:X    2^expr 
                                   4002 ;-----------------------------------
      002D20                       4003 bitmask:
      002D20 CD 19 58         [ 4] 4004     call func_args 
      002D23 A1 01            [ 1] 4005 	cp a,#1
      002D25 27 03            [ 1] 4006 	jreq 1$
      002D27 CC 16 9E         [ 2] 4007 	jp syntax_error 
      002D2A                       4008 1$: _xpop 
      002D2A 90 F6            [ 1]    1     ld a,(y)
      002D2C 93               [ 1]    2     ldw x,y 
      002D2D EE 01            [ 2]    3     ldw x,(1,x)
      002D2F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D33 9F               [ 1] 4009 	ld a,xl 
      002D34 AE 00 01         [ 2] 4010 	ldw x,#1 
      002D37 A4 17            [ 1] 4011 	and a,#23
      002D39 27 0A            [ 1] 4012 	jreq 9$
      002D3B 88               [ 1] 4013 	push a 
      002D3C 4F               [ 1] 4014 	clr a 
      002D3D                       4015 2$: 
      002D3D 58               [ 2] 4016 	slaw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002D3E 49               [ 1] 4017 	rlc a 	
      002D3F 0A 01            [ 1] 4018 	dec (1,sp)
      002D41 26 FA            [ 1] 4019 	jrne 2$ 
      002D43                       4020 4$:
      002D43                       4021     _drop 1 
      002D43 5B 01            [ 2]    1     addw sp,#1 
      002D45 81               [ 4] 4022 9$:	ret 
                                   4023 
                                   4024 ;------------------------------
                                   4025 ; BASIC: DO 
                                   4026 ; initiate a DO ... UNTIL loop 
                                   4027 ;------------------------------
                           000003  4028 	DOLP_ADR=3 
                           000005  4029 	DOLP_INW=5
                           000004  4030 	VSIZE=4 
      002D46                       4031 do_loop:
      002D46 85               [ 2] 4032 	popw x 
      002D47                       4033 	_vars VSIZE 
      002D47 52 04            [ 2]    1     sub sp,#VSIZE 
      002D49 89               [ 2] 4034 	pushw x 
      002D4A CE 00 04         [ 2] 4035 	ldw x,basicptr 
      002D4D 1F 03            [ 2] 4036 	ldw (DOLP_ADR,sp),x
      002D4F CE 00 00         [ 2] 4037 	ldw x,in.w 
      002D52 1F 05            [ 2] 4038 	ldw (DOLP_INW,sp),x
      002D54 72 5C 00 1F      [ 1] 4039 	inc loop_depth 
      002D58 81               [ 4] 4040 	ret 
                                   4041 
                                   4042 ;--------------------------------
                                   4043 ; BASIC: UNTIL expr 
                                   4044 ; loop if exprssion is false 
                                   4045 ; else terminate loop
                                   4046 ;--------------------------------
      002D59                       4047 until: 
      002D59 72 5D 00 1F      [ 1] 4048 	tnz loop_depth 
      002D5D 26 03            [ 1] 4049 	jrne 1$ 
      002D5F CC 16 9E         [ 2] 4050 	jp syntax_error 
      002D62                       4051 1$: 
      002D62 CD 1B A1         [ 4] 4052 	call condition  
      002D65                       4053 	_xpop 
      002D65 90 F6            [ 1]    1     ld a,(y)
      002D67 93               [ 1]    2     ldw x,y 
      002D68 EE 01            [ 2]    3     ldw x,(1,x)
      002D6A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D6E 4D               [ 1] 4054 	tnz a 
      002D6F 26 13            [ 1] 4055 	jrne 9$ 
      002D71 5D               [ 2] 4056 	tnzw x 
      002D72 26 10            [ 1] 4057 	jrne 9$ 
      002D74 1E 03            [ 2] 4058 	ldw x,(DOLP_ADR,sp)
      002D76 CF 00 04         [ 2] 4059 	ldw basicptr,x 
      002D79 E6 02            [ 1] 4060 	ld a,(2,x)
      002D7B C7 00 03         [ 1] 4061 	ld count,a 
      002D7E 1E 05            [ 2] 4062 	ldw x,(DOLP_INW,sp)
      002D80 CF 00 00         [ 2] 4063 	ldw in.w,x 
      002D83 81               [ 4] 4064 	ret 
      002D84                       4065 9$:	; remove loop data from stack  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002D84 85               [ 2] 4066 	popw x
      002D85                       4067 	_drop VSIZE
      002D85 5B 04            [ 2]    1     addw sp,#VSIZE 
      002D87 72 5A 00 1F      [ 1] 4068 	dec loop_depth 
      002D8B FC               [ 2] 4069 	jp (x)
                                   4070 
                                   4071 ;--------------------------
                                   4072 ; BASIC: PORTA...PORTI  
                                   4073 ;  return constant value 
                                   4074 ;  PORT  base address 
                                   4075 ;---------------------------
      002D8C                       4076 const_porta:
      002D8C AE 50 00         [ 2] 4077 	ldw x,#PA_BASE 
      002D8F 4F               [ 1] 4078 	clr a 
      002D90 81               [ 4] 4079 	ret 
      002D91                       4080 const_portb:
      002D91 AE 50 05         [ 2] 4081 	ldw x,#PB_BASE 
      002D94 4F               [ 1] 4082 	clr a 
      002D95 81               [ 4] 4083 	ret 
      002D96                       4084 const_portc:
      002D96 AE 50 0A         [ 2] 4085 	ldw x,#PC_BASE 
      002D99 4F               [ 1] 4086 	clr a 
      002D9A 81               [ 4] 4087 	ret 
      002D9B                       4088 const_portd:
      002D9B AE 50 0F         [ 2] 4089 	ldw x,#PD_BASE 
      002D9E 4F               [ 1] 4090 	clr a 
      002D9F 81               [ 4] 4091 	ret 
      002DA0                       4092 const_porte:
      002DA0 AE 50 14         [ 2] 4093 	ldw x,#PE_BASE 
      002DA3 4F               [ 1] 4094 	clr a 
      002DA4 81               [ 4] 4095 	ret 
      002DA5                       4096 const_portf:
      002DA5 AE 50 19         [ 2] 4097 	ldw x,#PF_BASE 
      002DA8 4F               [ 1] 4098 	clr a 
      002DA9 81               [ 4] 4099 	ret 
      002DAA                       4100 const_portg:
      002DAA AE 50 1E         [ 2] 4101 	ldw x,#PG_BASE 
      002DAD 4F               [ 1] 4102 	clr a 
      002DAE 81               [ 4] 4103 	ret 
      002DAF                       4104 const_porth:
      002DAF AE 50 23         [ 2] 4105 	ldw x,#PH_BASE 
      002DB2 4F               [ 1] 4106 	clr a 
      002DB3 81               [ 4] 4107 	ret 
      002DB4                       4108 const_porti:
      002DB4 AE 50 28         [ 2] 4109 	ldw x,#PI_BASE 
      002DB7 4F               [ 1] 4110 	clr a 
      002DB8 81               [ 4] 4111 	ret 
                                   4112 
                                   4113 ;-------------------------------
                                   4114 ; following return constant 
                                   4115 ; related to GPIO register offset 
                                   4116 ;---------------------------------
      002DB9                       4117 const_odr:
      002DB9 4F               [ 1] 4118 	clr a 
      002DBA AE 00 00         [ 2] 4119 	ldw x,#GPIO_ODR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002DBD 81               [ 4] 4120 	ret 
      002DBE                       4121 const_idr:
      002DBE 4F               [ 1] 4122 	clr a 
      002DBF AE 00 01         [ 2] 4123 	ldw x,#GPIO_IDR
      002DC2 81               [ 4] 4124 	ret 
      002DC3                       4125 const_ddr:
      002DC3 4F               [ 1] 4126 	clr a
      002DC4 AE 00 02         [ 2] 4127 	ldw x,#GPIO_DDR
      002DC7 81               [ 4] 4128 	ret 
      002DC8                       4129 const_cr1:
      002DC8 4F               [ 1] 4130 	clr a 
      002DC9 AE 00 03         [ 2] 4131 	ldw x,#GPIO_CR1
      002DCC 81               [ 4] 4132 	ret 
      002DCD                       4133 const_cr2:
      002DCD 4F               [ 1] 4134 	clr a
      002DCE AE 00 04         [ 2] 4135 	ldw x,#GPIO_CR2
      002DD1 81               [ 4] 4136 	ret 
                                   4137 ;-------------------------
                                   4138 ; BASIC: POUT 
                                   4139 ;  constant for port mode
                                   4140 ;  used by PMODE 
                                   4141 ;  to set pin as output
                                   4142 ;------------------------
      002DD2                       4143 const_output:
      002DD2 4F               [ 1] 4144 	clr a 
      002DD3 AE 00 01         [ 2] 4145 	ldw x,#OUTP
      002DD6 81               [ 4] 4146 	ret 
                                   4147 
                                   4148 ;-------------------------
                                   4149 ; BASIC: PINP 
                                   4150 ;  constant for port mode
                                   4151 ;  used by PMODE 
                                   4152 ;  to set pin as input
                                   4153 ;------------------------
      002DD7                       4154 const_input:
      002DD7 4F               [ 1] 4155 	clr a  
      002DD8 AE 00 00         [ 2] 4156 	ldw x,#INP 
      002DDB 81               [ 4] 4157 	ret 
                                   4158 	
                                   4159 ;-----------------------
                                   4160 ; memory area constants
                                   4161 ;-----------------------
      002DDC                       4162 const_eeprom_base:
      002DDC 4F               [ 1] 4163 	clr a  
      002DDD AE 40 00         [ 2] 4164 	ldw x,#EEPROM_BASE 
      002DE0 81               [ 4] 4165 	ret 
                                   4166 
                                   4167 ;---------------------------
                                   4168 ; BASIC: DATA 
                                   4169 ; when the interpreter find 
                                   4170 ; a DATA line it skip it.
                                   4171 ;---------------------------
      002DE1                       4172 data:
      002DE1 55 00 03 00 01   [ 1] 4173 	mov in,count 
      002DE6 81               [ 4] 4174 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



                                   4175 
                                   4176 ;------------------------------
                                   4177 ; check if it is a DATA line 
                                   4178 ; input: 
                                   4179 ;    X    line address 
                                   4180 ; output:
                                   4181 ;    Z    set if DATA line 
                                   4182 ;----------------------------
      002DE7                       4183 is_data_line:
      002DE7 89               [ 2] 4184 	pushw x 
      002DE8 E6 03            [ 1] 4185 	ld a,(3,x)
      002DEA A1 80            [ 1] 4186 	cp a,#TK_CMD 
      002DEC 26 05            [ 1] 4187 	jrne 9$
      002DEE EE 04            [ 2] 4188 	ldw x,(4,x)
      002DF0 A3 00 1C         [ 2] 4189 	cpw x,#DATA_IDX  
      002DF3 85               [ 2] 4190 9$: popw x 
      002DF4 81               [ 4] 4191 	ret 
                                   4192 
                                   4193 ;---------------------------------
                                   4194 ; BASIC: RESTORE [line#]
                                   4195 ; set data_ptr to first data line
                                   4196 ; if no DATA found pointer set to
                                   4197 ; zero.
                                   4198 ; if a line# is given as argument 
                                   4199 ; a data line with that number 
                                   4200 ; is searched and the data pointer 
                                   4201 ; is set to it. If there is no 
                                   4202 ; data line with that number 
                                   4203 ; the program is interrupted. 
                                   4204 ;---------------------------------
      002DF5                       4205 restore:
      002DF5 5F               [ 1] 4206 	clrw x 
      002DF6 CF 00 06         [ 2] 4207 	ldw data_ptr,x 
      002DF9 CF 00 08         [ 2] 4208 	ldw data_ofs,x 
      002DFC CE 00 1B         [ 2] 4209 	ldw x,txtbgn 
      002DFF CD 17 9F         [ 4] 4210 	call next_token 
      002E02 A1 84            [ 1] 4211 	cp a,#TK_INTGR
      002E04 26 10            [ 1] 4212 	jrne 0$
      002E06 CD 17 DE         [ 4] 4213 	call get_int24
      002E09 90 89            [ 2] 4214 	pushw y 
      002E0B 4F               [ 1] 4215 	clr a 
      002E0C CD 0C 7A         [ 4] 4216 	call search_lineno  
      002E0F 90 85            [ 2] 4217 	popw y 
      002E11 5D               [ 2] 4218 	tnzw x 
      002E12 26 17            [ 1] 4219 	jrne set_data_pointer 
      002E14 20 44            [ 2] 4220 	jra data_error 
      002E16                       4221 0$:
      002E16                       4222 	_unget_token  
      002E16 55 00 02 00 01   [ 1]    1      mov in,in.saved  
                                   4223 ; search first DATA line 	
      002E1B C3 00 1D         [ 2] 4224 1$:	cpw x,txtend
      002E1E 24 3A            [ 1] 4225 	jruge data_error 
      002E20                       4226 2$:	
      002E20 CD 2D E7         [ 4] 4227 	call is_data_line 
      002E23 26 00            [ 1] 4228 	jrne 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002E25 CD 2E 38         [ 4] 4229 4$:	call try_next_line 
      002E28 26 FB            [ 1] 4230 	jrne 4$ 
      002E2A 81               [ 4] 4231 	ret 
                                   4232 
                                   4233 ;---------------------
                                   4234 ; set data pointer 
                                   4235 ; variables at new line 
                                   4236 ; input:
                                   4237 ;    X    line address 
                                   4238 ;----------------------
      002E2B                       4239 set_data_pointer:
      002E2B CF 00 06         [ 2] 4240 	ldw data_ptr,x
      002E2E E6 02            [ 1] 4241 	ld a,(2,x)
      002E30 C7 00 09         [ 1] 4242 	ld data_len,a 
      002E33 35 06 00 08      [ 1] 4243 	mov data_ofs,#FIRST_DATA_ITEM
      002E37 81               [ 4] 4244 	ret 
                                   4245 
                                   4246 
                                   4247 ;--------------------
                                   4248 ; at end of data line 
                                   4249 ; check if next line 
                                   4250 ; is a data line 
                                   4251 ; input:
                                   4252 ;    X   actual line address 
                                   4253 ;  
                                   4254 ;-------------------
      002E38                       4255 try_next_line: 
      002E38 E6 02            [ 1] 4256 	ld a,(2,x)
      002E3A C7 00 0E         [ 1] 4257 	ld acc8,a 
      002E3D 72 5F 00 0D      [ 1] 4258 	clr acc16 
      002E41 72 BB 00 0D      [ 2] 4259 	addw x,acc16 
      002E45 C3 00 1D         [ 2] 4260 	cpw x,txtend 
      002E48 25 02            [ 1] 4261 	jrult 1$
      002E4A 20 0E            [ 2] 4262 	jra data_error 
      002E4C                       4263 1$:	
      002E4C CD 2D E7         [ 4] 4264 	call is_data_line 
      002E4F 27 04            [ 1] 4265 	jreq 2$
      002E51 A6 01            [ 1] 4266 	ld a,#1  
      002E53 20 04            [ 2] 4267 	jra 9$
      002E55 CD 2E 2B         [ 4] 4268 2$:	call set_data_pointer
      002E58 4F               [ 1] 4269 	clr a  
      002E59 81               [ 4] 4270 9$:	ret 
      002E5A                       4271 data_error:	
      002E5A A6 0C            [ 1] 4272     ld a,#ERR_NO_DATA 
      002E5C CC 16 A0         [ 2] 4273 	jp tb_error 
                                   4274 
                                   4275 
                                   4276 ;---------------------------------
                                   4277 ; BASIC: READ 
                                   4278 ; return next data item | 0 
                                   4279 ;---------------------------------
                           000001  4280 	CTX_BPTR=1 
                           000003  4281 	CTX_IN=3 
                           000004  4282 	CTX_COUNT=4 
                           000005  4283 	INT24=5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



                           000007  4284 	VSIZE=7 
      002E5F                       4285 read:
      002E5F                       4286 	_vars  VSIZE 
      002E5F 52 07            [ 2]    1     sub sp,#VSIZE 
      002E61 CD 20 72         [ 4] 4287 	call save_context
      002E64                       4288 read01:	
      002E64 C6 00 08         [ 1] 4289 	ld a,data_ofs
      002E67 C1 00 09         [ 1] 4290 	cp a,data_len 
      002E6A 27 37            [ 1] 4291 	jreq 2$ ; end of line  
      002E6C                       4292 0$:
      002E6C CE 00 06         [ 2] 4293 	ldw x,data_ptr 
      002E6F CF 00 04         [ 2] 4294 	ldw basicptr,x 
      002E72 55 00 08 00 01   [ 1] 4295 	mov in,data_ofs 
      002E77 55 00 09 00 03   [ 1] 4296 	mov count,data_len  
      002E7C CD 1A 88         [ 4] 4297 	call expression 
      002E7F A1 84            [ 1] 4298 	cp a,#TK_INTGR 
      002E81 27 03            [ 1] 4299 	jreq 1$ 
      002E83 CC 16 9E         [ 2] 4300 	jp syntax_error 
      002E86                       4301 1$:
      002E86 CD 17 9F         [ 4] 4302 	call next_token ; skip comma
      002E89 CE 00 04         [ 2] 4303 	ldw x,basicptr 
      002E8C CF 00 06         [ 2] 4304 	ldw data_ptr,x 
      002E8F 55 00 01 00 08   [ 1] 4305 	mov data_ofs,in 
      002E94 CD 20 82         [ 4] 4306 	call rest_context
      002E97                       4307 	_xpop 
      002E97 90 F6            [ 1]    1     ld a,(y)
      002E99 93               [ 1]    2     ldw x,y 
      002E9A EE 01            [ 2]    3     ldw x,(1,x)
      002E9C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EA0                       4308 	_drop VSIZE 
      002EA0 5B 07            [ 2]    1     addw sp,#VSIZE 
      002EA2 81               [ 4] 4309 	ret 
      002EA3                       4310 2$: ; end of line reached 
                                   4311 	; try next line 
      002EA3 CE 00 06         [ 2] 4312 	ldw x,data_ptr  
      002EA6 CD 2E 38         [ 4] 4313 	call try_next_line
      002EA9 27 C1            [ 1] 4314 	jreq 0$ 
      002EAB 20 AD            [ 2] 4315 	jra data_error 
                                   4316 
                                   4317 ;---------------------------------
                                   4318 ; BASIC: SPIEN clkdiv, 0|1  
                                   4319 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4320 ; if clkdiv==-1 disable SPI
                                   4321 ; 0|1 -> disable|enable  
                                   4322 ;--------------------------------- 
                           000005  4323 SPI_CS_BIT=5
      002EAD                       4324 spi_enable:
      002EAD CD 19 5D         [ 4] 4325 	call arg_list 
      002EB0 A1 02            [ 1] 4326 	cp a,#2
      002EB2 27 03            [ 1] 4327 	jreq 1$
      002EB4 CC 16 9E         [ 2] 4328 	jp syntax_error 
      002EB7                       4329 1$: 
      002EB7 72 12 50 C7      [ 1] 4330 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002EBB 85               [ 2] 4331 	popw x  
      002EBC 5D               [ 2] 4332 	tnzw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002EBD 27 21            [ 1] 4333 	jreq spi_disable 
      002EBF 85               [ 2] 4334 	popw x 
      002EC0 A6 08            [ 1] 4335 	ld a,#(1<<SPI_CR1_BR)
      002EC2 42               [ 4] 4336 	mul x,a 
      002EC3 9F               [ 1] 4337 	ld a,xl 
      002EC4 C7 52 00         [ 1] 4338 	ld SPI_CR1,a 
                                   4339 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002EC7 72 1A 50 14      [ 1] 4340 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002ECB 72 1A 50 16      [ 1] 4341 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4342 ; configure SPI as master mode 0.	
      002ECF 72 14 52 00      [ 1] 4343 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4344 ; ~CS line controlled by sofware 	
      002ED3 72 12 52 01      [ 1] 4345 	bset SPI_CR2,#SPI_CR2_SSM 
      002ED7 72 10 52 01      [ 1] 4346     bset SPI_CR2,#SPI_CR2_SSI 
                                   4347 ; enable SPI
      002EDB 72 1C 52 00      [ 1] 4348 	bset SPI_CR1,#SPI_CR1_SPE 	
      002EDF 81               [ 4] 4349 	ret 
      002EE0                       4350 spi_disable:
      002EE0                       4351 	_drop #2; throw first argument.
      002EE0 5B 02            [ 2]    1     addw sp,##2 
                                   4352 ; wait spi idle 
      002EE2 A6 82            [ 1] 4353 1$:	ld a,#0x82 
      002EE4 C4 52 03         [ 1] 4354 	and a,SPI_SR
      002EE7 A1 02            [ 1] 4355 	cp a,#2 
      002EE9 26 F7            [ 1] 4356 	jrne 1$
      002EEB 72 1D 52 00      [ 1] 4357 	bres SPI_CR1,#SPI_CR1_SPE
      002EEF 72 13 50 C7      [ 1] 4358 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002EF3 72 1B 50 16      [ 1] 4359 	bres PE_DDR,#SPI_CS_BIT 
      002EF7 81               [ 4] 4360 	ret 
                                   4361 
      002EF8                       4362 spi_clear_error:
      002EF8 A6 78            [ 1] 4363 	ld a,#0x78 
      002EFA C5 52 03         [ 1] 4364 	bcp a,SPI_SR 
      002EFD 27 04            [ 1] 4365 	jreq 1$
      002EFF 72 5F 52 03      [ 1] 4366 	clr SPI_SR 
      002F03 81               [ 4] 4367 1$: ret 
                                   4368 
      002F04                       4369 spi_send_byte:
      002F04 88               [ 1] 4370 	push a 
      002F05 CD 2E F8         [ 4] 4371 	call spi_clear_error
      002F08 84               [ 1] 4372 	pop a 
      002F09 72 03 52 03 FB   [ 2] 4373 	btjf SPI_SR,#SPI_SR_TXE,.
      002F0E C7 52 04         [ 1] 4374 	ld SPI_DR,a
      002F11 72 01 52 03 FB   [ 2] 4375 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002F16 C6 52 04         [ 1] 4376 	ld a,SPI_DR 
      002F19 81               [ 4] 4377 	ret 
                                   4378 
      002F1A                       4379 spi_rcv_byte:
      002F1A A6 FF            [ 1] 4380 	ld a,#255
      002F1C 72 01 52 03 E3   [ 2] 4381 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002F21 C6 52 04         [ 1] 4382 	ld a,SPI_DR 
      002F24 81               [ 4] 4383 	ret
                                   4384 
                                   4385 ;------------------------------
                                   4386 ; BASIC: SPIWR byte [,byte]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



                                   4387 ; write 1 or more byte
                                   4388 ;------------------------------
      002F25                       4389 spi_write:
      002F25 CD 1A 88         [ 4] 4390 	call expression
      002F28 A1 84            [ 1] 4391 	cp a,#TK_INTGR 
      002F2A 27 03            [ 1] 4392 	jreq 1$
      002F2C CC 16 9E         [ 2] 4393 	jp syntax_error 
      002F2F                       4394 1$:	
      002F2F 9F               [ 1] 4395 	ld a,xl 
      002F30 CD 2F 04         [ 4] 4396 	call spi_send_byte 
      002F33 CD 17 9F         [ 4] 4397 	call next_token 
      002F36 A1 08            [ 1] 4398 	cp a,#TK_COMMA 
      002F38 26 02            [ 1] 4399 	jrne 2$ 
      002F3A 20 E9            [ 2] 4400 	jra spi_write 
      002F3C 4D               [ 1] 4401 2$:	tnz a 
      002F3D 27 05            [ 1] 4402 	jreq 3$
      002F3F                       4403 	_unget_token  
      002F3F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F44 81               [ 4] 4404 3$:	ret 
                                   4405 
                                   4406 
                                   4407 ;-------------------------------
                                   4408 ; BASIC: SPIRD 	
                                   4409 ; read one byte from SPI 
                                   4410 ;-------------------------------
      002F45                       4411 spi_read:
      002F45 CD 2F 1A         [ 4] 4412 	call spi_rcv_byte 
      002F48 5F               [ 1] 4413 	clrw x 
      002F49 97               [ 1] 4414 	ld xl,a 
      002F4A 4F               [ 1] 4415 	clr a  
      002F4B 81               [ 4] 4416 	ret 
                                   4417 
                                   4418 ;------------------------------
                                   4419 ; BASIC: SPISEL 0|1 
                                   4420 ; set state of ~CS line
                                   4421 ; 0|1 deselect|select  
                                   4422 ;------------------------------
      002F4C                       4423 spi_select:
      002F4C CD 17 9F         [ 4] 4424 	call next_token 
      002F4F A1 84            [ 1] 4425 	cp a,#TK_INTGR 
      002F51 27 03            [ 1] 4426 	jreq 1$
      002F53 CC 16 9E         [ 2] 4427 	jp syntax_error 
      002F56 5D               [ 2] 4428 1$: tnzw x  
      002F57 27 05            [ 1] 4429 	jreq cs_high 
      002F59 72 1B 50 14      [ 1] 4430 	bres PE_ODR,#SPI_CS_BIT
      002F5D 81               [ 4] 4431 	ret 
      002F5E                       4432 cs_high: 
      002F5E 72 1A 50 14      [ 1] 4433 	bset PE_ODR,#SPI_CS_BIT
      002F62 81               [ 4] 4434 	ret 
                                   4435 
                                   4436 ;-------------------------------
                                   4437 ; BASIC: PAD 
                                   4438 ; Return pad buffer address.
                                   4439 ;------------------------------
      002F63                       4440 pad_ref:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      002F63 AE 16 B8         [ 2] 4441 	ldw x,#pad 
      002F66 4F               [ 1] 4442 	clr a
      002F67 81               [ 4] 4443 	ret 
                                   4444 
                                   4445 
                                   4446 ;------------------------------
                                   4447 ;      dictionary 
                                   4448 ; format:
                                   4449 ;   link:   2 bytes 
                                   4450 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   4451 ;   cmd_name: 16 byte max 
                                   4452 ;   cmd_index: 2 bytes 
                                   4453 ;------------------------------
                                   4454 	.macro _dict_entry len,name,cmd_idx 
                                   4455 	.word LINK 
                                   4456 	LINK=.
                                   4457 name:
                                   4458 	.byte len   	
                                   4459 	.ascii "name"
                                   4460 	.word cmd_idx 
                                   4461 	.endm 
                                   4462 
                           000000  4463 	LINK=0
                                   4464 ; respect alphabetic order for BASIC names from Z-A
                                   4465 ; this sort order is for a cleaner WORDS cmd output. 	
      002F68                       4466 kword_end:
      002F68                       4467 	_dict_entry,3+F_XOR,XOR,XOR_IDX ; xor operator
      002F68 00 00                    1 	.word LINK 
                           002F6A     2 	LINK=.
      002F6A                          3 XOR:
      002F6A A3                       4 	.byte 3+F_XOR   	
      002F6B 58 4F 52                 5 	.ascii "XOR"
      002F6E 00 FE                    6 	.word XOR_IDX 
      002F70                       4468 	_dict_entry,5,WRITE,WRITE_IDX;write  
      002F70 2F 6A                    1 	.word LINK 
                           002F72     2 	LINK=.
      002F72                          3 WRITE:
      002F72 05                       4 	.byte 5   	
      002F73 57 52 49 54 45           5 	.ascii "WRITE"
      002F78 00 B0                    6 	.word WRITE_IDX 
      002F7A                       4469 	_dict_entry,5,WORDS,WORDS_IDX;words 
      002F7A 2F 72                    1 	.word LINK 
                           002F7C     2 	LINK=.
      002F7C                          3 WORDS:
      002F7C 05                       4 	.byte 5   	
      002F7D 57 4F 52 44 53           5 	.ascii "WORDS"
      002F82 00 AE                    6 	.word WORDS_IDX 
      002F84                       4470 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      002F84 2F 7C                    1 	.word LINK 
                           002F86     2 	LINK=.
      002F86                          3 WAIT:
      002F86 04                       4 	.byte 4   	
      002F87 57 41 49 54              5 	.ascii "WAIT"
      002F8B 00 AC                    6 	.word WAIT_IDX 
      002F8D                       4471 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      002F8D 2F 86                    1 	.word LINK 
                           002F8F     2 	LINK=.
      002F8F                          3 USR:
      002F8F 13                       4 	.byte 3+F_IFUNC   	
      002F90 55 53 52                 5 	.ascii "USR"
      002F93 00 AA                    6 	.word USR_IDX 
      002F95                       4472 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      002F95 2F 8F                    1 	.word LINK 
                           002F97     2 	LINK=.
      002F97                          3 UNTIL:
      002F97 05                       4 	.byte 5   	
      002F98 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002F9D 00 A8                    6 	.word UNTIL_IDX 
      002F9F                       4473 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      002F9F 2F 97                    1 	.word LINK 
                           002FA1     2 	LINK=.
      002FA1                          3 UFLASH:
      002FA1 16                       4 	.byte 6+F_IFUNC   	
      002FA2 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002FA8 00 A6                    6 	.word UFLASH_IDX 
      002FAA                       4474 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      002FAA 2F A1                    1 	.word LINK 
                           002FAC     2 	LINK=.
      002FAC                          3 UBOUND:
      002FAC 16                       4 	.byte 6+F_IFUNC   	
      002FAD 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002FB3 00 A4                    6 	.word UBOUND_IDX 
      002FB5                       4475 	_dict_entry,4,TONE,TONE_IDX;tone  
      002FB5 2F AC                    1 	.word LINK 
                           002FB7     2 	LINK=.
      002FB7                          3 TONE:
      002FB7 04                       4 	.byte 4   	
      002FB8 54 4F 4E 45              5 	.ascii "TONE"
      002FBC 00 A2                    6 	.word TONE_IDX 
      002FBE                       4476 	_dict_entry,2,TO,TO_IDX;to
      002FBE 2F B7                    1 	.word LINK 
                           002FC0     2 	LINK=.
      002FC0                          3 TO:
      002FC0 02                       4 	.byte 2   	
      002FC1 54 4F                    5 	.ascii "TO"
      002FC3 00 A0                    6 	.word TO_IDX 
      002FC5                       4477 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      002FC5 2F C0                    1 	.word LINK 
                           002FC7     2 	LINK=.
      002FC7                          3 TIMER:
      002FC7 05                       4 	.byte 5   	
      002FC8 54 49 4D 45 52           5 	.ascii "TIMER"
      002FCD 00 9C                    6 	.word TIMER_IDX 
      002FCF                       4478 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      002FCF 2F C7                    1 	.word LINK 
                           002FD1     2 	LINK=.
      002FD1                          3 TIMEOUT:
      002FD1 17                       4 	.byte 7+F_IFUNC   	
      002FD2 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002FD9 00 9E                    6 	.word TMROUT_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      002FDB                       4479 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      002FDB 2F D1                    1 	.word LINK 
                           002FDD     2 	LINK=.
      002FDD                          3 TICKS:
      002FDD 15                       4 	.byte 5+F_IFUNC   	
      002FDE 54 49 43 4B 53           5 	.ascii "TICKS"
      002FE3 00 9A                    6 	.word TICKS_IDX 
      002FE5                       4480 	_dict_entry,4,STOP,STOP_IDX;stop 
      002FE5 2F DD                    1 	.word LINK 
                           002FE7     2 	LINK=.
      002FE7                          3 STOP:
      002FE7 04                       4 	.byte 4   	
      002FE8 53 54 4F 50              5 	.ascii "STOP"
      002FEC 00 98                    6 	.word STOP_IDX 
      002FEE                       4481 	_dict_entry,4,STEP,STEP_IDX;step 
      002FEE 2F E7                    1 	.word LINK 
                           002FF0     2 	LINK=.
      002FF0                          3 STEP:
      002FF0 04                       4 	.byte 4   	
      002FF1 53 54 45 50              5 	.ascii "STEP"
      002FF5 00 96                    6 	.word STEP_IDX 
      002FF7                       4482 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      002FF7 2F F0                    1 	.word LINK 
                           002FF9     2 	LINK=.
      002FF9                          3 SPIWR:
      002FF9 05                       4 	.byte 5   	
      002FFA 53 50 49 57 52           5 	.ascii "SPIWR"
      002FFF 00 94                    6 	.word SPIWR_IDX 
      003001                       4483 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      003001 2F F9                    1 	.word LINK 
                           003003     2 	LINK=.
      003003                          3 SPISEL:
      003003 06                       4 	.byte 6   	
      003004 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      00300A 00 92                    6 	.word SPISEL_IDX 
      00300C                       4484 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      00300C 30 03                    1 	.word LINK 
                           00300E     2 	LINK=.
      00300E                          3 SPIRD:
      00300E 15                       4 	.byte 5+F_IFUNC   	
      00300F 53 50 49 52 44           5 	.ascii "SPIRD"
      003014 00 8E                    6 	.word SPIRD_IDX 
      003016                       4485 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      003016 30 0E                    1 	.word LINK 
                           003018     2 	LINK=.
      003018                          3 SPIEN:
      003018 05                       4 	.byte 5   	
      003019 53 50 49 45 4E           5 	.ascii "SPIEN"
      00301E 00 90                    6 	.word SPIEN_IDX 
      003020                       4486 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      003020 30 18                    1 	.word LINK 
                           003022     2 	LINK=.
      003022                          3 SLEEP:
      003022 05                       4 	.byte 5   	
      003023 53 4C 45 45 50           5 	.ascii "SLEEP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      003028 00 8C                    6 	.word SLEEP_IDX 
      00302A                       4487     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      00302A 30 22                    1 	.word LINK 
                           00302C     2 	LINK=.
      00302C                          3 SIZE:
      00302C 04                       4 	.byte 4   	
      00302D 53 49 5A 45              5 	.ascii "SIZE"
      003031 00 B2                    6 	.word SIZE_IDX 
      003033                       4488 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      003033 30 2C                    1 	.word LINK 
                           003035     2 	LINK=.
      003035                          3 SAVE:
      003035 04                       4 	.byte 4   	
      003036 53 41 56 45              5 	.ascii "SAVE"
      00303A 00 32                    6 	.word SAVE_IDX 
      00303C                       4489 	_dict_entry 3,RUN,RUN_IDX;run
      00303C 30 35                    1 	.word LINK 
                           00303E     2 	LINK=.
      00303E                          3 RUN:
      00303E 03                       4 	.byte 3   	
      00303F 52 55 4E                 5 	.ascii "RUN"
      003042 00 88                    6 	.word RUN_IDX 
      003044                       4490 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      003044 30 3E                    1 	.word LINK 
                           003046     2 	LINK=.
      003046                          3 RSHIFT:
      003046 16                       4 	.byte 6+F_IFUNC   	
      003047 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00304D 00 86                    6 	.word RSHIFT_IDX 
      00304F                       4491 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      00304F 30 46                    1 	.word LINK 
                           003051     2 	LINK=.
      003051                          3 RND:
      003051 13                       4 	.byte 3+F_IFUNC   	
      003052 52 4E 44                 5 	.ascii "RND"
      003055 00 84                    6 	.word RND_IDX 
      003057                       4492 	_dict_entry,6,RETURN,RET_IDX;return 
      003057 30 51                    1 	.word LINK 
                           003059     2 	LINK=.
      003059                          3 RETURN:
      003059 06                       4 	.byte 6   	
      00305A 52 45 54 55 52 4E        5 	.ascii "RETURN"
      003060 00 82                    6 	.word RET_IDX 
      003062                       4493 	_dict_entry,7,RESTORE,REST_IDX;restore 
      003062 30 59                    1 	.word LINK 
                           003064     2 	LINK=.
      003064                          3 RESTORE:
      003064 07                       4 	.byte 7   	
      003065 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      00306C 00 80                    6 	.word REST_IDX 
      00306E                       4494 	_dict_entry 3,REM,REM_IDX;remark 
      00306E 30 64                    1 	.word LINK 
                           003070     2 	LINK=.
      003070                          3 REM:
      003070 03                       4 	.byte 3   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      003071 52 45 4D                 5 	.ascii "REM"
      003074 00 7E                    6 	.word REM_IDX 
      003076                       4495 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      003076 30 70                    1 	.word LINK 
                           003078     2 	LINK=.
      003078                          3 REBOOT:
      003078 06                       4 	.byte 6   	
      003079 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      00307F 00 7C                    6 	.word RBT_IDX 
      003081                       4496 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      003081 30 78                    1 	.word LINK 
                           003083     2 	LINK=.
      003083                          3 READ:
      003083 14                       4 	.byte 4+F_IFUNC   	
      003084 52 45 41 44              5 	.ascii "READ"
      003088 00 7A                    6 	.word READ_IDX 
      00308A                       4497 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      00308A 30 83                    1 	.word LINK 
                           00308C     2 	LINK=.
      00308C                          3 QKEY:
      00308C 14                       4 	.byte 4+F_IFUNC   	
      00308D 51 4B 45 59              5 	.ascii "QKEY"
      003091 00 78                    6 	.word QKEY_IDX 
      003093                       4498 	_dict_entry,5+F_IFUNC,PORTI,PRTI_IDX;const_porti 
      003093 30 8C                    1 	.word LINK 
                           003095     2 	LINK=.
      003095                          3 PORTI:
      003095 15                       4 	.byte 5+F_IFUNC   	
      003096 50 4F 52 54 49           5 	.ascii "PORTI"
      00309B 00 76                    6 	.word PRTI_IDX 
      00309D                       4499 	_dict_entry,5+F_IFUNC,PORTH,PRTH_IDX;const_porth 
      00309D 30 95                    1 	.word LINK 
                           00309F     2 	LINK=.
      00309F                          3 PORTH:
      00309F 15                       4 	.byte 5+F_IFUNC   	
      0030A0 50 4F 52 54 48           5 	.ascii "PORTH"
      0030A5 00 74                    6 	.word PRTH_IDX 
      0030A7                       4500 	_dict_entry,5+F_IFUNC,PORTG,PRTG_IDX;const_portg 
      0030A7 30 9F                    1 	.word LINK 
                           0030A9     2 	LINK=.
      0030A9                          3 PORTG:
      0030A9 15                       4 	.byte 5+F_IFUNC   	
      0030AA 50 4F 52 54 47           5 	.ascii "PORTG"
      0030AF 00 72                    6 	.word PRTG_IDX 
      0030B1                       4501 	_dict_entry,5+F_IFUNC,PORTF,PRTF_IDX;const_portf
      0030B1 30 A9                    1 	.word LINK 
                           0030B3     2 	LINK=.
      0030B3                          3 PORTF:
      0030B3 15                       4 	.byte 5+F_IFUNC   	
      0030B4 50 4F 52 54 46           5 	.ascii "PORTF"
      0030B9 00 70                    6 	.word PRTF_IDX 
      0030BB                       4502 	_dict_entry,5+F_IFUNC,PORTE,PRTE_IDX;const_porte
      0030BB 30 B3                    1 	.word LINK 
                           0030BD     2 	LINK=.
      0030BD                          3 PORTE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      0030BD 15                       4 	.byte 5+F_IFUNC   	
      0030BE 50 4F 52 54 45           5 	.ascii "PORTE"
      0030C3 00 6E                    6 	.word PRTE_IDX 
      0030C5                       4503 	_dict_entry,5+F_IFUNC,PORTD,PRTD_IDX;const_portd
      0030C5 30 BD                    1 	.word LINK 
                           0030C7     2 	LINK=.
      0030C7                          3 PORTD:
      0030C7 15                       4 	.byte 5+F_IFUNC   	
      0030C8 50 4F 52 54 44           5 	.ascii "PORTD"
      0030CD 00 6C                    6 	.word PRTD_IDX 
      0030CF                       4504 	_dict_entry,5+F_IFUNC,PORTC,PRTC_IDX;const_portc
      0030CF 30 C7                    1 	.word LINK 
                           0030D1     2 	LINK=.
      0030D1                          3 PORTC:
      0030D1 15                       4 	.byte 5+F_IFUNC   	
      0030D2 50 4F 52 54 43           5 	.ascii "PORTC"
      0030D7 00 6A                    6 	.word PRTC_IDX 
      0030D9                       4505 	_dict_entry,5+F_IFUNC,PORTB,PRTB_IDX;const_portb
      0030D9 30 D1                    1 	.word LINK 
                           0030DB     2 	LINK=.
      0030DB                          3 PORTB:
      0030DB 15                       4 	.byte 5+F_IFUNC   	
      0030DC 50 4F 52 54 42           5 	.ascii "PORTB"
      0030E1 00 68                    6 	.word PRTB_IDX 
      0030E3                       4506 	_dict_entry,5+F_IFUNC,PORTA,PRTA_IDX;const_porta 
      0030E3 30 DB                    1 	.word LINK 
                           0030E5     2 	LINK=.
      0030E5                          3 PORTA:
      0030E5 15                       4 	.byte 5+F_IFUNC   	
      0030E6 50 4F 52 54 41           5 	.ascii "PORTA"
      0030EB 00 66                    6 	.word PRTA_IDX 
      0030ED                       4507 	_dict_entry 5,PRINT,PRT_IDX;print 
      0030ED 30 E5                    1 	.word LINK 
                           0030EF     2 	LINK=.
      0030EF                          3 PRINT:
      0030EF 05                       4 	.byte 5   	
      0030F0 50 52 49 4E 54           5 	.ascii "PRINT"
      0030F5 00 64                    6 	.word PRT_IDX 
      0030F7                       4508 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      0030F7 30 EF                    1 	.word LINK 
                           0030F9     2 	LINK=.
      0030F9                          3 POUT:
      0030F9 14                       4 	.byte 4+F_IFUNC   	
      0030FA 50 4F 55 54              5 	.ascii "POUT"
      0030FE 00 62                    6 	.word POUT_IDX 
      003100                       4509 	_dict_entry,4,POKE,POKE_IDX;poke 
      003100 30 F9                    1 	.word LINK 
                           003102     2 	LINK=.
      003102                          3 POKE:
      003102 04                       4 	.byte 4   	
      003103 50 4F 4B 45              5 	.ascii "POKE"
      003107 00 60                    6 	.word POKE_IDX 
      003109                       4510 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      003109 31 02                    1 	.word LINK 
                           00310B     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      00310B                          3 PMODE:
      00310B 05                       4 	.byte 5   	
      00310C 50 4D 4F 44 45           5 	.ascii "PMODE"
      003111 00 5A                    6 	.word PMODE_IDX 
      003113                       4511 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      003113 31 0B                    1 	.word LINK 
                           003115     2 	LINK=.
      003115                          3 PINP:
      003115 14                       4 	.byte 4+F_IFUNC   	
      003116 50 49 4E 50              5 	.ascii "PINP"
      00311A 00 5E                    6 	.word PINP_IDX 
      00311C                       4512 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      00311C 31 15                    1 	.word LINK 
                           00311E     2 	LINK=.
      00311E                          3 PEEK:
      00311E 14                       4 	.byte 4+F_IFUNC   	
      00311F 50 45 45 4B              5 	.ascii "PEEK"
      003123 00 5C                    6 	.word PEEK_IDX 
      003125                       4513 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      003125 31 1E                    1 	.word LINK 
                           003127     2 	LINK=.
      003127                          3 PAUSE:
      003127 05                       4 	.byte 5   	
      003128 50 41 55 53 45           5 	.ascii "PAUSE"
      00312D 00 58                    6 	.word PAUSE_IDX 
      00312F                       4514 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      00312F 31 27                    1 	.word LINK 
                           003131     2 	LINK=.
      003131                          3 PAD:
      003131 13                       4 	.byte 3+F_IFUNC   	
      003132 50 41 44                 5 	.ascii "PAD"
      003135 00 56                    6 	.word PAD_IDX 
      003137                       4515 	_dict_entry,2+F_OR,OR,OR_IDX; OR operator 
      003137 31 31                    1 	.word LINK 
                           003139     2 	LINK=.
      003139                          3 OR:
      003139 92                       4 	.byte 2+F_OR   	
      00313A 4F 52                    5 	.ascii "OR"
      00313C 00 FC                    6 	.word OR_IDX 
      00313E                       4516 	_dict_entry,2,ON,ON_IDX; cmd_on 
      00313E 31 39                    1 	.word LINK 
                           003140     2 	LINK=.
      003140                          3 ON:
      003140 02                       4 	.byte 2   	
      003141 4F 4E                    5 	.ascii "ON"
      003143 00 B4                    6 	.word ON_IDX 
      003145                       4517 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      003145 31 40                    1 	.word LINK 
                           003147     2 	LINK=.
      003147                          3 ODR:
      003147 13                       4 	.byte 3+F_IFUNC   	
      003148 4F 44 52                 5 	.ascii "ODR"
      00314B 00 54                    6 	.word ODR_IDX 
      00314D                       4518 	_dict_entry,3+F_NOT,NOT,NOT_IDX;NOT operator
      00314D 31 47                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



                           00314F     2 	LINK=.
      00314F                          3 NOT:
      00314F 73                       4 	.byte 3+F_NOT   	
      003150 4E 4F 54                 5 	.ascii "NOT"
      003153 00 F8                    6 	.word NOT_IDX 
      003155                       4519 	_dict_entry,4,NEXT,NEXT_IDX;next 
      003155 31 4F                    1 	.word LINK 
                           003157     2 	LINK=.
      003157                          3 NEXT:
      003157 04                       4 	.byte 4   	
      003158 4E 45 58 54              5 	.ascii "NEXT"
      00315C 00 50                    6 	.word NEXT_IDX 
      00315E                       4520 	_dict_entry,3,NEW,NEW_IDX;new
      00315E 31 57                    1 	.word LINK 
                           003160     2 	LINK=.
      003160                          3 NEW:
      003160 03                       4 	.byte 3   	
      003161 4E 45 57                 5 	.ascii "NEW"
      003164 00 52                    6 	.word NEW_IDX 
      003166                       4521 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      003166 31 60                    1 	.word LINK 
                           003168     2 	LINK=.
      003168                          3 LSHIFT:
      003168 16                       4 	.byte 6+F_IFUNC   	
      003169 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      00316F 00 4E                    6 	.word LSHIFT_IDX 
      003171                       4522 	_dict_entry,4+F_IFUNC,LOG2,LOG_IDX;log2 
      003171 31 68                    1 	.word LINK 
                           003173     2 	LINK=.
      003173                          3 LOG2:
      003173 14                       4 	.byte 4+F_IFUNC   	
      003174 4C 4F 47 32              5 	.ascii "LOG2"
      003178 00 4C                    6 	.word LOG_IDX 
      00317A                       4523 	_dict_entry 4,LIST,LIST_IDX;list
      00317A 31 73                    1 	.word LINK 
                           00317C     2 	LINK=.
      00317C                          3 LIST:
      00317C 04                       4 	.byte 4   	
      00317D 4C 49 53 54              5 	.ascii "LIST"
      003181 00 4A                    6 	.word LIST_IDX 
      003183                       4524 	_dict_entry 3,LET,LET_IDX;let 
      003183 31 7C                    1 	.word LINK 
                           003185     2 	LINK=.
      003185                          3 LET:
      003185 03                       4 	.byte 3   	
      003186 4C 45 54                 5 	.ascii "LET"
      003189 00 48                    6 	.word LET_IDX 
      00318B                       4525 	_dict_entry,3+F_CFUNC,KEY,KEY_IDX;key 
      00318B 31 85                    1 	.word LINK 
                           00318D     2 	LINK=.
      00318D                          3 KEY:
      00318D 23                       4 	.byte 3+F_CFUNC   	
      00318E 4B 45 59                 5 	.ascii "KEY"
      003191 00 46                    6 	.word KEY_IDX 
      003193                       4526 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      003193 31 8D                    1 	.word LINK 
                           003195     2 	LINK=.
      003195                          3 IWDGREF:
      003195 07                       4 	.byte 7   	
      003196 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      00319D 00 44                    6 	.word IWDGREF_IDX 
      00319F                       4527 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      00319F 31 95                    1 	.word LINK 
                           0031A1     2 	LINK=.
      0031A1                          3 IWDGEN:
      0031A1 06                       4 	.byte 6   	
      0031A2 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      0031A8 00 42                    6 	.word IWDGEN_IDX 
      0031AA                       4528 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      0031AA 31 A1                    1 	.word LINK 
                           0031AC     2 	LINK=.
      0031AC                          3 INPUT:
      0031AC 05                       4 	.byte 5   	
      0031AD 49 4E 50 55 54           5 	.ascii "INPUT"
      0031B2 00 40                    6 	.word INPUT_IDX 
      0031B4                       4529 	_dict_entry,2,IF,IF_IDX;if 
      0031B4 31 AC                    1 	.word LINK 
                           0031B6     2 	LINK=.
      0031B6                          3 IF:
      0031B6 02                       4 	.byte 2   	
      0031B7 49 46                    5 	.ascii "IF"
      0031B9 00 3E                    6 	.word IF_IDX 
      0031BB                       4530 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      0031BB 31 B6                    1 	.word LINK 
                           0031BD     2 	LINK=.
      0031BD                          3 IDR:
      0031BD 13                       4 	.byte 3+F_IFUNC   	
      0031BE 49 44 52                 5 	.ascii "IDR"
      0031C1 00 3C                    6 	.word IDR_IDX 
      0031C3                       4531 	_dict_entry,3,HEX,HEX_IDX;hex_base
      0031C3 31 BD                    1 	.word LINK 
                           0031C5     2 	LINK=.
      0031C5                          3 HEX:
      0031C5 03                       4 	.byte 3   	
      0031C6 48 45 58                 5 	.ascii "HEX"
      0031C9 00 3A                    6 	.word HEX_IDX 
      0031CB                       4532 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      0031CB 31 C5                    1 	.word LINK 
                           0031CD     2 	LINK=.
      0031CD                          3 GOTO:
      0031CD 04                       4 	.byte 4   	
      0031CE 47 4F 54 4F              5 	.ascii "GOTO"
      0031D2 00 38                    6 	.word GOTO_IDX 
      0031D4                       4533 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      0031D4 31 CD                    1 	.word LINK 
                           0031D6     2 	LINK=.
      0031D6                          3 GOSUB:
      0031D6 05                       4 	.byte 5   	
      0031D7 47 4F 53 55 42           5 	.ascii "GOSUB"
      0031DC 00 36                    6 	.word GOSUB_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      0031DE                       4534 	_dict_entry,3,GET,GET_IDX; cmd_get 
      0031DE 31 D6                    1 	.word LINK 
                           0031E0     2 	LINK=.
      0031E0                          3 GET:
      0031E0 03                       4 	.byte 3   	
      0031E1 47 45 54                 5 	.ascii "GET"
      0031E4 00 B6                    6 	.word GET_IDX 
      0031E6                       4535 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      0031E6 31 E0                    1 	.word LINK 
                           0031E8     2 	LINK=.
      0031E8                          3 FREE:
      0031E8 14                       4 	.byte 4+F_IFUNC   	
      0031E9 46 52 45 45              5 	.ascii "FREE"
      0031ED 00 8A                    6 	.word FREE_IDX 
      0031EF                       4536 	_dict_entry,3,FOR,FOR_IDX;for 
      0031EF 31 E8                    1 	.word LINK 
                           0031F1     2 	LINK=.
      0031F1                          3 FOR:
      0031F1 03                       4 	.byte 3   	
      0031F2 46 4F 52                 5 	.ascii "FOR"
      0031F5 00 34                    6 	.word FOR_IDX 
      0031F7                       4537 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      0031F7 31 F1                    1 	.word LINK 
                           0031F9     2 	LINK=.
      0031F9                          3 FCPU:
      0031F9 04                       4 	.byte 4   	
      0031FA 46 43 50 55              5 	.ascii "FCPU"
      0031FE 00 30                    6 	.word FCPU_IDX 
      003200                       4538 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      003200 31 F9                    1 	.word LINK 
                           003202     2 	LINK=.
      003202                          3 ERASE:
      003202 05                       4 	.byte 5   	
      003203 45 52 41 53 45           5 	.ascii "ERASE"
      003208 00 2E                    6 	.word ERASE_IDX 
      00320A                       4539 	_dict_entry,3,END,END_IDX;cmd_end  
      00320A 32 02                    1 	.word LINK 
                           00320C     2 	LINK=.
      00320C                          3 END:
      00320C 03                       4 	.byte 3   	
      00320D 45 4E 44                 5 	.ascii "END"
      003210 00 2C                    6 	.word END_IDX 
      003212                       4540 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      003212 32 0C                    1 	.word LINK 
                           003214     2 	LINK=.
      003214                          3 EEPROM:
      003214 16                       4 	.byte 6+F_IFUNC   	
      003215 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      00321B 00 2A                    6 	.word EEPROM_IDX 
      00321D                       4541 	_dict_entry,6+F_IFUNC,EEFREE,EEFREE_IDX; func_eefree 
      00321D 32 14                    1 	.word LINK 
                           00321F     2 	LINK=.
      00321F                          3 EEFREE:
      00321F 16                       4 	.byte 6+F_IFUNC   	
      003220 45 45 46 52 45 45        5 	.ascii "EEFREE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      003226 00 BA                    6 	.word EEFREE_IDX 
      003228                       4542 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      003228 32 1F                    1 	.word LINK 
                           00322A     2 	LINK=.
      00322A                          3 EDIT:
      00322A 04                       4 	.byte 4   	
      00322B 45 44 49 54              5 	.ascii "EDIT"
      00322F 00 28                    6 	.word EDIT_IDX 
      003231                       4543 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      003231 32 2A                    1 	.word LINK 
                           003233     2 	LINK=.
      003233                          3 DWRITE:
      003233 06                       4 	.byte 6+F_CMD   	
      003234 44 57 52 49 54 45        5 	.ascii "DWRITE"
      00323A 00 26                    6 	.word DWRITE_IDX 
      00323C                       4544 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      00323C 32 33                    1 	.word LINK 
                           00323E     2 	LINK=.
      00323E                          3 DREAD:
      00323E 15                       4 	.byte 5+F_IFUNC   	
      00323F 44 52 45 41 44           5 	.ascii "DREAD"
      003244 00 24                    6 	.word DREAD_IDX 
      003246                       4545 	_dict_entry,2,DO,DO_IDX;do_loop
      003246 32 3E                    1 	.word LINK 
                           003248     2 	LINK=.
      003248                          3 DO:
      003248 02                       4 	.byte 2   	
      003249 44 4F                    5 	.ascii "DO"
      00324B 00 22                    6 	.word DO_IDX 
      00324D                       4546 	_dict_entry,3,DEC,DEC_IDX;dec_base
      00324D 32 48                    1 	.word LINK 
                           00324F     2 	LINK=.
      00324F                          3 DEC:
      00324F 03                       4 	.byte 3   	
      003250 44 45 43                 5 	.ascii "DEC"
      003253 00 20                    6 	.word DEC_IDX 
      003255                       4547 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      003255 32 4F                    1 	.word LINK 
                           003257     2 	LINK=.
      003257                          3 DDR:
      003257 13                       4 	.byte 3+F_IFUNC   	
      003258 44 44 52                 5 	.ascii "DDR"
      00325B 00 1E                    6 	.word DDR_IDX 
      00325D                       4548 	_dict_entry,4,DATA,DATA_IDX;data  
      00325D 32 57                    1 	.word LINK 
                           00325F     2 	LINK=.
      00325F                          3 DATA:
      00325F 04                       4 	.byte 4   	
      003260 44 41 54 41              5 	.ascii "DATA"
      003264 00 1C                    6 	.word DATA_IDX 
      003266                       4549 	_dict_entry,3+F_IFUNC,CR2,CR2_IDX;const_cr2 
      003266 32 5F                    1 	.word LINK 
                           003268     2 	LINK=.
      003268                          3 CR2:
      003268 13                       4 	.byte 3+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      003269 43 52 32                 5 	.ascii "CR2"
      00326C 00 18                    6 	.word CR2_IDX 
      00326E                       4550 	_dict_entry,3+F_IFUNC,CR1,CR1_IDX;const_cr1 
      00326E 32 68                    1 	.word LINK 
                           003270     2 	LINK=.
      003270                          3 CR1:
      003270 13                       4 	.byte 3+F_IFUNC   	
      003271 43 52 31                 5 	.ascii "CR1"
      003274 00 1A                    6 	.word CR1_IDX 
      003276                       4551 	_dict_entry,5,CONST,CONST_IDX; cmd_const 
      003276 32 70                    1 	.word LINK 
                           003278     2 	LINK=.
      003278                          3 CONST:
      003278 05                       4 	.byte 5   	
      003279 43 4F 4E 53 54           5 	.ascii "CONST"
      00327E 00 B8                    6 	.word CONST_IDX 
      003280                       4552 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      003280 32 78                    1 	.word LINK 
                           003282     2 	LINK=.
      003282                          3 CHAR:
      003282 24                       4 	.byte 4+F_CFUNC   	
      003283 43 48 41 52              5 	.ascii "CHAR"
      003287 00 16                    6 	.word CHAR_IDX 
      003289                       4553 	_dict_entry,3,BYE,BYE_IDX;bye 
      003289 32 82                    1 	.word LINK 
                           00328B     2 	LINK=.
      00328B                          3 BYE:
      00328B 03                       4 	.byte 3   	
      00328C 42 59 45                 5 	.ascii "BYE"
      00328F 00 14                    6 	.word BYE_IDX 
      003291                       4554 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      003291 32 8B                    1 	.word LINK 
                           003293     2 	LINK=.
      003293                          3 BTOGL:
      003293 05                       4 	.byte 5   	
      003294 42 54 4F 47 4C           5 	.ascii "BTOGL"
      003299 00 12                    6 	.word BTOGL_IDX 
      00329B                       4555 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      00329B 32 93                    1 	.word LINK 
                           00329D     2 	LINK=.
      00329D                          3 BTEST:
      00329D 15                       4 	.byte 5+F_IFUNC   	
      00329E 42 54 45 53 54           5 	.ascii "BTEST"
      0032A3 00 10                    6 	.word BTEST_IDX 
      0032A5                       4556 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      0032A5 32 9D                    1 	.word LINK 
                           0032A7     2 	LINK=.
      0032A7                          3 BSET:
      0032A7 04                       4 	.byte 4   	
      0032A8 42 53 45 54              5 	.ascii "BSET"
      0032AC 00 0E                    6 	.word BSET_IDX 
      0032AE                       4557 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      0032AE 32 A7                    1 	.word LINK 
                           0032B0     2 	LINK=.
      0032B0                          3 BRES:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      0032B0 04                       4 	.byte 4   	
      0032B1 42 52 45 53              5 	.ascii "BRES"
      0032B5 00 0C                    6 	.word BRES_IDX 
      0032B7                       4558 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      0032B7 32 B0                    1 	.word LINK 
                           0032B9     2 	LINK=.
      0032B9                          3 BIT:
      0032B9 13                       4 	.byte 3+F_IFUNC   	
      0032BA 42 49 54                 5 	.ascii "BIT"
      0032BD 00 0A                    6 	.word BIT_IDX 
      0032BF                       4559 	_dict_entry,3,AWU,AWU_IDX;awu 
      0032BF 32 B9                    1 	.word LINK 
                           0032C1     2 	LINK=.
      0032C1                          3 AWU:
      0032C1 03                       4 	.byte 3   	
      0032C2 41 57 55                 5 	.ascii "AWU"
      0032C5 00 08                    6 	.word AWU_IDX 
      0032C7                       4560 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      0032C7 32 C1                    1 	.word LINK 
                           0032C9     2 	LINK=.
      0032C9                          3 ASC:
      0032C9 13                       4 	.byte 3+F_IFUNC   	
      0032CA 41 53 43                 5 	.ascii "ASC"
      0032CD 00 06                    6 	.word ASC_IDX 
      0032CF                       4561 	_dict_entry,3+F_AND,AND,AND_IDX ; AND operator 
      0032CF 32 C9                    1 	.word LINK 
                           0032D1     2 	LINK=.
      0032D1                          3 AND:
      0032D1 83                       4 	.byte 3+F_AND   	
      0032D2 41 4E 44                 5 	.ascii "AND"
      0032D5 00 FA                    6 	.word AND_IDX 
      0032D7                       4562 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      0032D7 32 D1                    1 	.word LINK 
                           0032D9     2 	LINK=.
      0032D9                          3 ADCREAD:
      0032D9 17                       4 	.byte 7+F_IFUNC   	
      0032DA 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0032E1 00 04                    6 	.word ADCREAD_IDX 
      0032E3                       4563 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      0032E3 32 D9                    1 	.word LINK 
                           0032E5     2 	LINK=.
      0032E5                          3 ADCON:
      0032E5 05                       4 	.byte 5   	
      0032E6 41 44 43 4F 4E           5 	.ascii "ADCON"
      0032EB 00 02                    6 	.word ADCON_IDX 
      0032ED                       4564 kword_dict::
      0032ED                       4565 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      0032ED 32 E5                    1 	.word LINK 
                           0032EF     2 	LINK=.
      0032EF                          3 ABS:
      0032EF 13                       4 	.byte 3+F_IFUNC   	
      0032F0 41 42 53                 5 	.ascii "ABS"
      0032F3 00 00                    6 	.word ABS_IDX 
                                   4566 
                                   4567 ;comands and fonctions address table 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      0032F5                       4568 code_addr::
      0032F5 2A 7A 25 E1 26 31 29  4569 	.word abs,power_adc,analog_read,ascii,awu,bitmask ; 0..7
             2A 2A 21 2D 20
      003301 21 96 21 74 21 DB 21  4570 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             B9 29 ED 29 13 2D CD
      00330F 2D C8 2D E1 2D C3 1C  4571 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             1A 2D 46 26 6D 26 A4
      00331D 1F 87 2D DC 25 47 27  4572 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto ; 24..31 
             45 2A EB 27 E1 22 71
             24 A7 24 8D
      00332F 1C 15 2D BE 22 54 20  4573 	.word hex_base,const_idr,if,input_var,enable_iwdg,refresh_iwdg,key ; 32..39 
             92 2C B0 2C EE 29 69
      00333D 1C 73 1E E2 2C F3 2A  4574 	.word let,list,log2,lshift,next,new ; 40..47
             91 23 1D 27 3B
      003349 2D B9 2F 63 2A 01 2A  4575 	.word const_odr,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             FA 22 33 2D D7
      003355 22 12 2D D2 1F EF 2D  4576 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             8C 2D 91 2D 96 2D 9B
             2D A0
      003365 2D A5 2D AA 2D AF 2D  4577 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             B4 29 6D 2E 5F 00 C3
             21 31
      003375 2D F5 24 CD 2B 89 2A  4578 	.word restore,return, random,rshift,run,free ; 72..79
             BE 24 EB 1C 1F
      003381 29 F6 2F 45 2E AD 2F  4579 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             4C 2F 25 22 DB 26 EF
             2A 73
      003391 2C 8E 2C A5 22 9B 25  4580 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             86 1C 68 29 AA 2D 59
             29 C7
      0033A1 21 37 2C 24 28 D0 1C  4581 	.word wait,words,write,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
             3B 24 01 25 4E 1D 9E
      0033AF 1D 31 00 00           4582 	.word func_eefree,0 
                                   4583 
                                   4584 
                                   4585 
                                   4586 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      0033B3                         30 test:
      0033B3                         31     _vars VSIZE 
      0033B3 52 08            [ 2]    1     sub sp,#VSIZE 
      0033B5 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      0033B8 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      0033BA CE 00 0F         [ 2]   34     ldw x,ticks 
      0033BD 1F 01            [ 2]   35     ldw (T,sp),x
      0033BF                         36 1$: ; test add24 
      0033BF A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      0033C1 AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      0033C4 C7 00 0C         [ 1]   39     ld acc24,a 
      0033C7 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      0033CA A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      0033CC AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      0033CF CD 01 6A         [ 4]   43     call add24 
      0033D2 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      0033D4 1D 00 01         [ 2]   45     subw x,#1
      0033D7 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      0033D9 26 E4            [ 1]   47     jrne 1$
      0033DB CD 18 0B         [ 4]   48     call prt_acc24
      0033DE A6 20            [ 1]   49     ld a,#SPACE 
      0033E0 CD 09 40         [ 4]   50     call putc 
      0033E3 CE 00 0F         [ 2]   51     ldw x,ticks 
      0033E6 72 F0 01         [ 2]   52     subw x,(T,sp)
      0033E9 CD 17 F4         [ 4]   53     call prt_i16  
      0033EC A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      0033EE CD 09 40         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      0033F1 CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      0033F4 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      0033F6 CE 00 0F         [ 2]   60     ldw x,ticks 
      0033F9 1F 01            [ 2]   61     ldw (T,sp),x 
      0033FB                         62 2$: 
      0033FB A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      0033FD AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      003400 C7 00 0C         [ 1]   65     ld acc24,a 
      003403 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      003406 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      003408 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      00340B CD 02 59         [ 4]   69     call mul24 
      00340E 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      003410 1D 00 01         [ 2]   71     subw x,#1
      003413 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003415 26 E4            [ 1]   73     jrne 2$ 
      003417 CD 18 0B         [ 4]   74    call prt_acc24 
      00341A A6 20            [ 1]   75    ld a,#SPACE 
      00341C CD 09 40         [ 4]   76    call putc 
      00341F CE 00 0F         [ 2]   77     ldw x,ticks 
      003422 72 F0 01         [ 2]   78     subw x,(T,sp)
      003425 CD 17 F4         [ 4]   79     call prt_i16 
      003428 A6 0D            [ 1]   80     ld a,#CR 
      00342A CD 09 40         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      00342D CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      003430 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      003432 CE 00 0F         [ 2]   85     ldw x,ticks 
      003435 1F 01            [ 2]   86     ldw (T,sp),x 
      003437                         87 3$: 
      003437 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003439 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      00343C C7 00 0C         [ 1]   90     ld acc24,a 
      00343F CF 00 0D         [ 2]   91     ldw acc24+1,x  
      003442 A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      003444 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      003447 CD 02 59         [ 4]   94     call mul24 
      00344A 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      00344C 1D 00 01         [ 2]   96     subw x,#1
      00344F 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      003451 26 E4            [ 1]   98     jrne 3$ 
      003453 CD 18 0B         [ 4]   99     call prt_acc24    
      003456 A6 20            [ 1]  100     ld a,#SPACE 
      003458 CD 09 40         [ 4]  101     call putc 
      00345B CE 00 0F         [ 2]  102     ldw x,ticks 
      00345E 72 F0 01         [ 2]  103     subw x,(T,sp)
      003461 CD 17 F4         [ 4]  104     call prt_i16 
      003464 A6 0D            [ 1]  105     ld a,#CR 
      003466 CD 09 40         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      003469 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      00346C 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      00346E CE 00 0F         [ 2]  110     ldw x,ticks 
      003471 1F 01            [ 2]  111     ldw (T,sp),x 
      003473                        112 4$:
      003473 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      003475 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      003478 C7 00 0C         [ 1]  115     ld acc24,a 
      00347B CF 00 0D         [ 2]  116     ldw acc24+1,x  
      00347E A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      003480 AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      003483 CD 02 59         [ 4]  119     call mul24 
      003486 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      003488 1D 00 01         [ 2]  121     subw x,#1
      00348B 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      00348D 26 E4            [ 1]  123     jrne 4$ 
      00348F CD 18 0B         [ 4]  124     call prt_acc24 
      003492 A6 20            [ 1]  125     ld a,#SPACE 
      003494 CD 09 40         [ 4]  126     call putc 
      003497 CE 00 0F         [ 2]  127     ldw x,ticks 
      00349A 72 F0 01         [ 2]  128     subw x,(T,sp)
      00349D CD 17 F4         [ 4]  129     call prt_i16 
      0034A0 A6 0D            [ 1]  130     ld a,#CR 
      0034A2 CD 09 40         [ 4]  131     call putc 
                                    132 ; test abs24 
      0034A5 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      0034A8 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      0034AA CE 00 0F         [ 2]  135     ldw x,ticks 
      0034AD 1F 01            [ 2]  136     ldw (T,sp),x 
      0034AF                        137 5$: 
      0034AF A6 FF            [ 1]  138     ld a,#0xff
      0034B1 AE FF FF         [ 2]  139     ldw x,#0xffff
      0034B4 CD 01 DF         [ 4]  140     call abs24 
      0034B7 C7 00 0C         [ 1]  141     ld acc24,a 
      0034BA CF 00 0D         [ 2]  142     ldw acc24+1,x
      0034BD 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      0034BF 1D 00 01         [ 2]  144     subw x,#1
      0034C2 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      0034C4 26 E9            [ 1]  146     jrne 5$ 
      0034C6 CD 18 0B         [ 4]  147     call prt_acc24 
      0034C9 A6 20            [ 1]  148     ld a,#SPACE 
      0034CB CD 09 40         [ 4]  149     call putc 
      0034CE CE 00 0F         [ 2]  150     ldw x,ticks 
      0034D1 72 F0 01         [ 2]  151     subw x,(T,sp)
      0034D4 CD 17 F4         [ 4]  152     call prt_i16 
      0034D7                        153 6$:
      0034D7 A6 0D            [ 1]  154     ld a,#CR 
      0034D9 CD 09 40         [ 4]  155     call putc 
      0034DC CD 35 22         [ 4]  156     call read_integer 
      0034DF 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      0034E4 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      0034E9 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      0034EE CD 35 22         [ 4]  160     call read_integer 
      0034F1 C6 00 0C         [ 1]  161     ld a,acc24 
      0034F4 CE 00 0D         [ 2]  162     ldw x,acc16 
      0034F7 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      0034FC 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      003501 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      003506 CD 03 23         [ 4]  166     call div24 
      003509 88               [ 1]  167     push a 
      00350A 89               [ 2]  168     pushw x 
      00350B CD 18 0B         [ 4]  169     call prt_acc24 
      00350E A6 20            [ 1]  170     ld a,#SPACE 
      003510 CD 09 40         [ 4]  171     call putc 
      003513 85               [ 2]  172     popw x
      003514 CF 00 0D         [ 2]  173     ldw acc16,x  
      003517 32 00 0C         [ 1]  174     pop acc24 
      00351A CD 18 0B         [ 4]  175     call prt_acc24
      00351D 20 B8            [ 2]  176     jra 6$
      00351F                        177     _drop VSIZE 
      00351F 5B 08            [ 2]    1     addw sp,#VSIZE 
      003521 81               [ 4]  178     ret 
                                    179 
                                    180 
      003522                        181 read_integer:
      003522 A6 3F            [ 1]  182     ld a,#'? 
      003524 CD 09 40         [ 4]  183     call putc  
      003527 72 5F 00 03      [ 1]  184 	clr count  
      00352B CD 0A A2         [ 4]  185 	call readln 
      00352E AE 16 68         [ 2]  186 	ldw x,#tib 
      003531 3B 00 03         [ 1]  187 	push count
      003534 4B 00            [ 1]  188 	push #0 
      003536 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003539 5C               [ 1]  190 	incw x 
      00353A                        191 	_drop 2 
      00353A 5B 02            [ 2]    1     addw sp,#2 
      00353C 72 5F 00 01      [ 1]  192 	clr in 
      003540 CD 0F 17         [ 4]  193 	call get_token
      003543 A1 84            [ 1]  194 	cp a,#TK_INTGR
      003545 27 0F            [ 1]  195 	jreq 3$ 
      003547 A1 11            [ 1]  196 	cp a,#TK_MINUS
      003549 CD 0F 17         [ 4]  197 	call get_token 
      00354C A1 84            [ 1]  198 	cp a,#TK_INTGR 
      00354E 27 03            [ 1]  199 	jreq 2$
      003550 CC 16 9E         [ 2]  200 	jp syntax_error
      003553                        201 2$:
      003553 CD 02 09         [ 4]  202 	call neg_acc24  	
      003556                        203 3$: 
      003556 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003580                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003580                         30 app_space::
      003580 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003582 00 00                   32 app_size: .word 0 
      003584                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        0032EF R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      0032E5 R
    ADCON_ID=  000002     |   4 ADCREAD    0032D9 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 AND        0032D1 R   |     AND_IDX =  0000FA     |     ARG_OFS =  000002 
    ARROW_LE=  000080     |     ARROW_RI=  000081     |   4 ASC        0032C9 R
    ASC_IDX =  000006     |     ATMP    =  000001     |     ATTRIB  =  000002 
  4 AUTO_RUN   000157 R   |   4 AWU        0032C1 R   |   4 AWUHandl   000004 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  000008     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   4 BIT        0032B9 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000A 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000D     |   4 BRES       0032B0 R   |     BRES_IDX=  00000C 
    BS      =  000008     |   4 BSET       0032A7 R   |     BSET_IDX=  00000E 
    BSIZE   =  000006     |   4 BTEST      00329D R   |     BTEST_ID=  000010 
  4 BTOGL      003293 R   |     BTOGL_ID=  000012     |     BTW     =  000001 
    BUFPTR  =  000003     |   4 BYE        00328B R   |     BYE_IDX =  000014 
    C       =  000001     |     CAN     =  000018     |   4 CANT_DO    002878 R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000003 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  4 CHAR       003282 R   |     CHAR_IDX=  000016     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMDX    =  000001 
    CMD_END =  000002     |     CNAME   =  000001     |     CNT     =  000006 
    CNTR    =  000003     |     CNT_LO  =  000004     |     COMMA   =  00002C 
  4 CONST      003278 R   |   4 CONST_CO   001D1B R   |     CONST_ID=  0000B8 
    CONST_RE=  000005     |     COUNT   =  000003     |     CPOS    =  000003 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  4 CR1        003270 R   |     CR1_IDX =  00001A     |   4 CR2        003268 R
    CR2_IDX =  000018     |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000009 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  4 DATA       00325F R   |     DATA_IDX=  00001C     |     DBG_A   =  000008 
    DBG_CC  =  000009     |     DBG_X   =  000006     |     DBG_Y   =  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   4 DDR        003257 R   |     DDR_IDX =  00001E 
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  4 DEC        00324F R   |     DEC_IDX =  000020     |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |     DIVISOR =  000001 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   4 DO         003248 R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     DO_IDX  =  000022     |   4 DREAD      00323E R
    DREAD_ID=  000024     |   4 DWRITE     003233 R   |     DWRITE_I=  000026 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]

Symbol Table

  4 EDIT       00322A R   |     EDIT_IDX=  000028     |   4 EEFREE     00321F R
    EEFREE_I=  0000BA     |   4 EEPROM     003214 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_I=  00002A     |     EEPROM_S=  000800 
    EEPTR   =  000003     |     EM      =  000019     |   4 END        00320C R
    END_IDX =  00002C     |     ENQ     =  000005     |     EOF     =  0000FF 
    EOT     =  000004     |   4 ERASE      003202 R   |     ERASE_ID=  00002E 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_OVER=  000010 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
  4 FCPU       0031F9 R   |     FCPU_IDX=  000030     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
  4 FLASH_ME   001EC2 R   |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   4 FOR        0031F1 R   |     FOR_IDX =  000034 
  4 FREE       0031E8 R   |     FREE_IDX=  00008A     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_AND   =  000080     |     F_CFUNC =  000020 
    F_CMD   =  000000     |     F_CONST =  000030     |     F_IFUNC =  000010 
    F_NOT   =  000070     |     F_OR    =  000090     |     F_XOR   =  0000A0 
  4 GET        0031E0 R   |     GET_IDX =  0000B6     |   4 GOSUB      0031D6 R
    GOSUB_ID=  000036     |   4 GOTO       0031CD R   |     GOTO_IDX=  000038 
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     GS      =  00001D     |   4 HEX        0031C5 R
    HEX_IDX =  00003A     |     HOME    =  000082     |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  4 IDR        0031BD R   |     IDR_IDX =  00003C     |   4 IF         0031B6 R
    IF_IDX  =  00003E     |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   4 INPUT      0031AC R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_ID=  000040 
    INPUT_PU=  000001     |     INT24   =  000005     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
    INW     =  00000B     |     IPOS    =  000001     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   4 IWDGEN     0031A1 R   |     IWDGEN_I=  000042 
  4 IWDGREF    003195 R   |     IWDGREF_=  000044     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  4 KEY        00318D R   |     KEY_END =  000083     |     KEY_IDX =  000046 
    KW_TYPE_=  0000F0     |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000002     |   4 LET        003185 R   |     LET_IDX =  000048 
    LF      =  00000A     |     LIMIT   =  000001     |     LINENO  =  000005 
  4 LINK    =  0032EF R   |   4 LIST       00317C R   |     LIST_IDX=  00004A 
    LL      =  000001     |     LLEN    =  000002     |     LL_HB   =  000001 
    LN_PTR  =  000005     |   4 LOG2       003173 R   |     LOG_IDX =  00004C 
    LOOP_CNT=  002710     |   4 LSHIFT     003168 R   |     LSHIFT_I=  00004E 
    MAJOR   =  000002     |     MASK    =  000002     |     MAX_LINE=  007FFF 
    MINOR   =  000000     |     MULOP   =  000001     |     N1      =  000004 
    N2      =  000007     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000001     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        003160 R   |     NEW_IDX =  000052     |   4 NEXT       003157 R
    NEXT_IDX=  000050     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

    NLEN    =  000001     |     NLEN_MAS=  00000F     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   4 NOT        00314F R   |     NOT_IDX =  0000F8 
    NOT_OP  =  000001     |   4 NOT_SAVE   001FB4 R   |   4 NO_APP     0028BA R
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  4 NonHandl   000000 R   |   4 ODR        003147 R   |     ODR_IDX =  000054 
  4 ON         003140 R   |     ONOFF   =  000003     |     ON_IDX  =  0000B4 
    OP      =  000002     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   4 OR         003139 R
    OR_IDX  =  0000FC     |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVRWR   =  000004     |     PA      =  000000     |   4 PAD        003131 R
    PAD_IDX =  000056     |     PAD_SIZE=  000080     |   4 PAUSE      003127 R
    PAUSE_ID=  000058     |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   4 PEEK       00311E R
    PEEK_IDX=  00005C     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  4 PINP       003115 R   |     PINP_IDX=  00005E     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  4 PMODE      00310B R   |     PMODE_ID=  00005A     |   4 POKE       003102 R
    POKE_IDX=  000060     |   4 PORTA      0030E5 R   |   4 PORTB      0030DB R
  4 PORTC      0030D1 R   |   4 PORTD      0030C7 R   |   4 PORTE      0030BD R
  4 PORTF      0030B3 R   |   4 PORTG      0030A9 R   |   4 PORTH      00309F R
  4 PORTI      003095 R   |   4 POUT       0030F9 R   |     POUT_IDX=  000062 
    PREV    =  000001     |   4 PRINT      0030EF R   |     PROD    =  000001 
    PROD_SIG=  00000A     |   4 PROG_ADD   001E98 R   |   4 PROG_SIZ   001EAA R
    PRTA_IDX=  000066     |     PRTB_IDX=  000068     |     PRTC_IDX=  00006A 
    PRTD_IDX=  00006C     |     PRTE_IDX=  00006E     |     PRTF_IDX=  000070 
    PRTG_IDX=  000072     |     PRTH_IDX=  000074     |     PRTI_IDX=  000076 
    PRT_IDX =  000064     |     PSIZE   =  000001     |     PSTR    =  000003 
  4 QKEY       00308C R   |     QKEY_IDX=  000078     |     QSIGN   =  000005 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |   4 RAM_MEM    001ED3 R
    RAM_SIZE=  001800     |     RBT_IDX =  00007C     |   4 READ       003083 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

    READ_IDX=  00007A     |   4 REBOOT     003078 R   |     RECLEN  =  000005 
  4 REG_A      00055E R   |   4 REG_CC     000562 R   |   4 REG_EPC    000551 R
  4 REG_SP     000567 R   |   4 REG_X      00055A R   |   4 REG_Y      000556 R
    RELOP   =  000001     |   4 REM        003070 R   |     REM_IDX =  00007E 
  4 RESTORE    003064 R   |     REST_IDX=  000080     |     RETL1   =  000001 
  4 RETURN     003059 R   |     RET_ADDR=  000003     |     RET_BPTR=  000003 
    RET_IDX =  000082     |     RET_INW =  000005     |   4 RND        003051 R
    RND_IDX =  000084     |     ROP     =  004800     |     RS      =  00001E 
  4 RSHIFT     003046 R   |     RSHIFT_I=  000086     |     RSIGN   =  000006 
    RST_SR  =  0050B3     |   4 RUN        00303E R   |     RUN_IDX =  000088 
    RXCHAR  =  000001     |     RX_QUEUE=  000008     |     R_A     =  000007 
    R_CC    =  000008     |     R_X     =  000005     |     R_Y     =  000003 
  4 SAVE       003035 R   |     SAVE_IDX=  000032     |     SEPARATE=  000000 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
    SI      =  00000F     |     SIGN    =  000001     |   4 SIGNATUR   002876 R
  4 SIZE       00302C R   |     SIZE_IDX=  0000B2     |     SKIP    =  000005 
  4 SLEEP      003022 R   |     SLEEP_ID=  00008C     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   4 SPIEN      003018 R
    SPIEN_ID=  000090     |   4 SPIRD      00300E R   |     SPIRD_ID=  00008E 
  4 SPISEL     003003 R   |     SPISEL_I=  000092     |   4 SPIWR      002FF9 R
    SPIWR_ID=  000094     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  00008C 
  4 STATES     000514 R   |   4 STEP       002FF0 R   |     STEP_IDX=  000096 
  4 STOP       002FE7 R   |     STOP_IDX=  000098     |     STR     =  000003 
  4 STR_BYTE   001EBB R   |     STX     =  000002     |     SUB     =  00001A 
    SUP     =  000084     |     SWIM_CSR=  007F80     |     SYN     =  000016 
    T       =  000001     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TARGET  =  000001     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  4 TICKS      002FDD R   |     TICKS_ID=  00009A     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  4 TIMEOUT    002FD1 R   |   4 TIMER      002FC7 R   |     TIMER_ID=  00009C 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_AND  =  000088 
    TK_ARRAY=  000005     |     TK_CFUNC=  000082     |     TK_CHAR =  000004 
    TK_CMD  =  000080     |     TK_COLON=  00000A     |     TK_COMMA=  000008 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_FLOAT=  000086     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LABEL=  000003     |     TK_LE   =  000036 
    TK_LPARE=  000006     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_NOT  =  000087     |     TK_OR   =  000089 
    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000007 
    TK_SHARP=  000009     |     TK_VAR  =  000085     |     TK_XOR  =  00008A 
    TMROUT_I=  00009E     |   4 TO         002FC0 R   |   4 TONE       002FB7 R
    TONE_IDX=  0000A2     |     TOWRITE =  000005     |     TO_IDX  =  0000A0 
  4 Timer4Up   000021 R   |   4 TrapHand   000012 R   |     U8      =  000001 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART2   =  000001     |     UART3   =  000002 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  4 UBOUND     002FAC R   |     UBOUND_I=  0000A4     |   4 UBTN_Han   000068 R
  4 UFLASH     002FA1 R   |     UFLASH_I=  0000A6     |   4 UNTIL      002F97 R
    UNTIL_ID=  0000A8     |     UPDATE  =  000006     |     US      =  00001F 
  4 USER_ABO   000070 R   |   4 USR        002F8F R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     USR_IDX =  0000AA 
  4 Uart1RxH   0008CE R   |   4 UserButt   000044 R   |     VAL1    =  02FFFF 
    VAL2    =  00002A     |     VAL3    =  000003     |     VAL4    =  0005FF 
    VAL5    =  FFFFFFFD     |     VSIZE   =  000008     |     VT      =  00000B 
  4 WAIT       002F86 R   |     WAIT_IDX=  0000AC     |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |   4 WORDS      002F7C R   |     WORDS_ID=  0000AE 
  4 WRITE      002F72 R   |     WRITE_ID=  0000B0     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XFIRST  =  000001     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   4 XOR        002F6A R
    XOR_IDX =  0000FE     |     XSAVE   =  000002     |     XSTACK_E=  001773 
    XSTACK_S=  00003C     |     XTEMP   =  000001     |     YSAVE   =  000007 
    YTEMP   =  000003     |   4 abs        002A7A R   |   4 abs24      0001DF R
  5 acc16      00000D GR  |   5 acc24      00000C GR  |   5 acc32      00000B GR
  5 acc8       00000E GR  |   4 accept_c   000BFC R   |   4 add24      00016A R
  4 add_char   00138E R   |   4 add_spac   00115F R   |   4 analog_r   002631 R
  4 and_cond   001B4F R   |   4 and_fact   001B1F R   |   4 app        003584 R
  4 app_sign   003580 R   |   4 app_size   003582 R   |   4 app_spac   003580 GR
  4 arduino_   002B69 R   |   4 arg_list   00195D R   |   5 array_si   000020 R
  4 ascii      00292A R   |   4 at_tst     000FD1 R   |   4 atoi24     001896 GR
  4 atoi_exi   0018FC R   |   4 awu        002A21 R   |   4 awu02      002A34 R
  4 bad_port   0029A5 R   |   5 base       00000A GR  |   5 basicptr   000004 GR
  4 beep       0025A8 R   |   4 beep_1kh   00257B GR  |   4 bin_exit   000E38 R
  4 bit_rese   002196 R   |   4 bit_set    002174 R   |   4 bit_test   0021DB R
  4 bit_togg   0021B9 R   |   4 bitmask    002D20 R   |   4 bkslsh_t   000F7E R
  4 bksp       0009A7 R   |   2 block_bu   0016B8 GR  |   4 block_er   0007BC R
  4 break_po   00271D R   |   4 bye        0029ED R   |   4 char       002913 R
  4 clear_ba   0014FA R   |   4 clear_bl   0027CD R   |   4 clear_va   001452 R
  4 clock_in   00008B R   |   4 cloop_1    001DC4 R   |   4 cmd_cons   001D9E R
  4 cmd_end    002547 R   |   4 cmd_get    00254E R   |   4 cmd_itf    00056C R
  4 cmd_line   00172D R   |   4 cmd_name   0013AE R   |   4 cmd_on     002401 R
  4 cmd_size   001C3B R   |   4 code_add   0032F5 GR  |   4 cold_sta   0000C3 R
  4 colon_ts   000FA5 R   |   4 comma_ts   000FB0 R   |   4 comp_msg   00167D R
  4 compile    0010CB GR  |   4 conditio   001BA1 R   |   4 const_cr   002DC8 R
  4 const_cr   002DCD R   |   4 const_dd   002DC3 R   |   4 const_ee   002DDC R
  4 const_id   002DBE R   |   4 const_in   002DD7 R   |   4 const_lo   001DBF R
  4 const_od   002DB9 R   |   4 const_ou   002DD2 R   |   4 const_po   002D8C R
  4 const_po   002D91 R   |   4 const_po   002D96 R   |   4 const_po   002D9B R
  4 const_po   002DA0 R   |   4 const_po   002DA5 R   |   4 const_po   002DAA R
  4 const_po   002DAF R   |   4 const_po   002DB4 R   |   4 convert_   000DA8 R
  4 convert_   00096B R   |   4 copy_com   001006 R   |   5 count      000003 GR
  4 cp24       0001A4 R   |   4 cp24_ax    0001D6 R   |   4 cp_loop    00190E R
  4 cpl24      0001E6 R   |   4 cpy_cmd_   001147 R   |   4 cpy_quot   001187 R
  4 create_g   000CD2 R   |   4 cs_high    002F5E R   |   4 dash_tst   000FC6 R
  4 data       002DE1 R   |   4 data_err   002E5A R   |   5 data_len   000009 R
  5 data_ofs   000008 R   |   5 data_ptr   000006 R   |   4 dec_base   001C1A R
  4 decomp_l   001240 R   |   4 decompil   0011F8 GR  |   4 del_line   000CA5 R
  4 delete_l   000A94 R   |   4 delete_n   0009B7 R   |   4 delete_u   000A59 R
  4 digital_   00266D R   |   4 digital_   0026A4 R   |   4 div24      000323 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

  4 divu24_8   000305 R   |   4 do_loop    002D46 R   |   4 do_progr   0007AF R
  4 edit       001F87 R   |   4 enable_i   002CB0 R   |   4 eql_tst    001051 R
  4 equal      0013A1 R   |   4 erase      002745 R   |   4 erase_ex   0007E0 R
  4 erase_fl   0007D6 R   |   4 err_bad_   0015DE R   |   4 err_buf_   001654 R
  4 err_cmd_   0015A2 R   |   4 err_div0   001567 R   |   4 err_dupl   0015BC R
  4 err_math   00154E R   |   4 err_mem_   001533 R   |   4 err_msg    001511 R
  4 err_no_a   0015EA R   |   4 err_no_d   00161D R   |   4 err_no_f   001641 R
  4 err_no_l   001576 R   |   4 err_no_p   00162D R   |   4 err_not_   0015CD R
  4 err_over   001661 R   |   4 err_run_   00158C R   |   4 err_synt   001540 R
  4 escaped    000DBD GR  |   4 expect     00194B R   |   4 expressi   001A88 R
  4 factor     0019A9 R   |   5 farptr     000018 R   |   4 fcpu       002AEB R
  4 fetchc     00065C R   |   4 fill_wri   0027BD R   |   4 final_te   000BF5 R
  4 first_li   001F31 R   |   5 flags      000022 GR  |   4 for        002271 R
  4 free       001C1F R   |   5 free_eep   000024 R   |   7 free_ram   000080 R
  4 func_arg   001958 R   |   4 func_eef   001D31 R   |   4 ge         0013A3 R
  4 get_addr   0017D4 R   |   4 get_arra   001979 R   |   4 get_char   0017EE R
  4 get_cmd_   0011D7 R   |   4 get_code   0017B8 R   |   4 get_cons   001CB6 R
  4 get_esca   000977 R   |   4 get_int2   0017DE R   |   4 get_targ   002392 R
  4 get_targ   0023A0 R   |   4 get_tick   002A73 R   |   4 get_toke   000F17 GR
  4 getc       000950 GR  |   4 gosub      0024A7 R   |   4 gosub_1    0024B2 R
  4 gosub_2    0024B8 R   |   4 goto       00248D R   |   4 goto_1     002497 R
  4 gpio       00297A R   |   4 gt         00139F R   |   4 gt_tst     00105C R
  4 hex_base   001C15 R   |   4 hex_dump   00069C R   |   4 if         002254 R
  5 in         000001 GR  |   5 in.saved   000002 GR  |   5 in.w       000000 GR
  4 incr_far   0008B2 R   |   4 input_ex   00212C R   |   4 input_lo   002096 R
  4 input_va   002092 R   |   4 insert_c   000A16 R   |   4 insert_l   000CFE R
  4 insert_l   000D6D R   |   4 interp_l   00176E R   |   4 interpre   001749 R
  4 invalid    0005B1 R   |   4 invalid_   000632 R   |   4 is_alnum   000E6B GR
  4 is_alpha   000E51 GR  |   4 is_data_   002DE7 R   |   4 is_digit   000E62 GR
  4 is_symbo   000E74 R   |   4 itoa       001831 GR  |   4 itoa_loo   001853 R
  4 jp_to_ta   00249A R   |   4 key        002969 R   |   4 kword_di   0032ED GR
  4 kword_en   002F68 R   |   4 le         0013A8 R   |   4 ledoff     000467 R
  4 ledon      000462 R   |   4 ledtoggl   00046C R   |   4 left_par   000475 R
  4 let        001C73 GR  |   4 let_arra   001C81 R   |   4 let_eval   001C89 R
  4 let_var    001C86 R   |   4 lines_sk   001F34 R   |   4 list       001EE2 R
  4 list_con   001CC5 R   |   4 list_exi   001F76 R   |   4 list_loo   001F54 R
  4 log2       002CF3 R   |   4 look_tar   0023C3 R   |   4 loop_bac   002375 R
  5 loop_dep   00001F R   |   4 loop_don   00238A R   |   4 lshift     002A91 R
  4 lt         0013A6 R   |   4 lt_tst     001085 R   |   4 mem_peek   0005CE R
  4 mod24      0003D1 R   |   4 move       00140E GR  |   4 move_dow   00142D R
  4 move_era   00073E R   |   4 move_exi   00144E R   |   4 move_lef   0009EE R
  4 move_loo   001432 R   |   4 move_prg   00077E R   |   4 move_rig   0009FC R
  4 move_up    00141F R   |   4 mul24      000259 R   |   4 mul_char   001390 R
  4 mulu24_8   000226 R   |   4 nbr_tst    000F4A R   |   4 ne         0013AB R
  4 neg24      0001EF R   |   4 neg_acc2   000209 R   |   4 neg_ax     000201 R
  4 new        00273B R   |   4 next       00231D R   |   4 next_lin   001751 R
  4 next_tok   00179F GR  |   4 no_match   001920 R   |   4 number     000662 R
  4 other      0010AE R   |   4 overwrit   000C21 R   |   2 pad        0016B8 GR
  4 pad_ref    002F63 R   |   4 parse_bi   000E16 R   |   4 parse_in   000DC5 R
  4 parse_ke   000E97 R   |   4 parse_qu   000D70 R   |   4 parse_sy   000E7F R
  4 pause      002A01 R   |   4 pause02    002A14 R   |   4 peek       002233 R
  4 peek_byt   0005FC R   |   4 pin_mode   002AFA R   |   4 plus_tst   001025 R
  4 poke       002212 R   |   4 power_ad   0025E1 R   |   4 prcnt_ts   001046 R
  4 print      001FEF R   |   4 print_fa   000641 R   |   4 print_he   000C58 GR
  4 print_re   0004C1 R   |   4 print_st   0005C1 R   |   4 print_to   001819 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

  4 prog_siz   001E51 R   |   4 program_   001E59 R   |   4 program_   000758 R
  4 program_   00077E R   |   4 prt_acc2   00180B R   |   4 prt_basi   001FCB R
  4 prt_i16    0017F4 R   |   4 prt_loop   001FF3 R   |   4 prt_peek   000444 GR
  4 prt_reg1   0004A2 R   |   4 prt_reg8   000480 R   |   4 prt_regs   0003DA GR
  5 ptr16      000019 GR  |   5 ptr8       00001A R   |   4 putc       000940 GR
  4 puts       00099D GR  |   4 qgetc      000949 GR  |   4 qkey       00296D GR
  4 qmark_ts   000FDC R   |   4 qsign      0027B6 R   |   4 random     002B89 R
  4 read       002E5F R   |   4 read01     002E64 R   |   4 read_int   003522 R
  4 readln     000AA2 GR  |   4 readln_l   000AB1 R   |   4 readln_q   000C3E R
  4 refresh_   002CEE R   |   4 regs_sta   00041D R   |   4 relation   001AC0 R
  4 relop_st   001393 R   |   4 remark     002131 GR  |   4 repl       00057A R
  4 repl_exi   0005A2 R   |   4 reset_co   001FF1 R   |   4 rest_con   002082 R
  4 restore    002DF5 R   |   4 return     0024CD R   |   4 right_al   001175 GR
  4 row_alig   000897 R   |   4 row_eras   000711 R   |   4 row_eras   00073E R
  4 row_loop   00067F R   |   4 rparnt_t   000F9A R   |   4 rshift     002ABE R
  7 rsign      00007C R   |   7 rsize      00007E R   |   4 rt_msg     00166B R
  4 run        0024EB R   |   4 run_app    000135 R   |   4 run_it     00251D R
  4 run_it_0   00251F R   |   5 rx1_head   00002E R   |   5 rx1_queu   000026 R
  5 rx1_tail   00002F R   |   4 save_app   0027E1 R   |   4 save_con   002072 R
  4 scan_blo   0008C0 R   |   4 search_c   001D5A R   |   4 search_d   001900 GR
  4 search_e   001948 R   |   4 search_l   000C7A GR  |   4 search_l   000C89 R
  4 search_n   001904 R   |   5 seedx      000014 R   |   5 seedy      000016 R
  4 select_p   002B59 R   |   4 send_esc   0009C5 R   |   4 send_par   0009D0 R
  4 set_data   002E2B R   |   4 set_time   002C8E R   |   4 sharp_ts   000FBB R
  4 show_row   00066D R   |   4 single_c   001389 R   |   4 skip       000F04 R
  4 skip_str   0017C5 R   |   4 slash_ts   00103B R   |   4 sleep      0029F6 R
  4 software   001461 R   |   4 spaces     000A0A GR  |   4 spi_clea   002EF8 R
  4 spi_disa   002EE0 R   |   4 spi_enab   002EAD R   |   4 spi_rcv_   002F1A R
  4 spi_read   002F45 R   |   4 spi_sele   002F4C R   |   4 spi_send   002F04 R
  4 spi_writ   002F25 R   |   2 stack_fu   001774 GR  |   2 stack_un   001800 R
  4 star_tst   001030 R   |   4 step       0022DB R   |   4 stop       0026EF R
  4 store_lo   00230A R   |   4 str_matc   00192D R   |   4 str_tst    000F3A R
  4 strcmp     0013ED R   |   4 strcpy     0013FE GR  |   4 strlen     0013E2 GR
  4 sub24      000187 R   |   4 symb_loo   000E80 R   |   4 syntax_e   00169E GR
  4 system_i   0014A7 R   |   5 tab_widt   000023 GR  |   4 tb_error   0016A0 GR
  4 term       001A45 R   |   4 term01     001A4D R   |   4 term_exi   001A85 R
  4 test       0033B3 R   |   4 test_p     0005B9 R   |   2 tib        001668 GR
  4 tick_tst   000FF4 R   |   5 ticks      00000F R   |   4 timeout    002CA5 R
  5 timer      000012 GR  |   4 timer2_i   0000A1 R   |   4 timer4_i   0000AE R
  4 tk_id      00168E R   |   4 to         00229B R   |   4 to_eepro   0007A7 R
  4 to_flash   0007AC R   |   4 to_hex_c   000C6F GR  |   4 to_upper   00188A GR
  4 token_ch   0010C4 R   |   4 token_ex   0010C8 R   |   4 tone       002586 R
  4 try_next   002E38 R   |   5 txtbgn     00001B GR  |   5 txtend     00001D GR
  4 uart1_ge   000950 GR  |   4 uart1_in   0008FB R   |   4 uart1_pu   000940 GR
  4 uart1_qg   000949 GR  |   4 uart1_se   00090B R   |   4 ubound     001C68 R
  4 uflash     0029AA R   |   4 unlock_e   0006DB R   |   4 unlock_f   0006F6 R
  4 until      002D59 R   |   4 user_int   000057 R   |   4 usr        0029C7 R
  4 var_name   0011CD GR  |   5 vars       000030 GR  |   4 wait       002137 R
  4 warm_ini   0014D8 R   |   4 warm_sta   00172A R   |   4 words      002C24 R
  4 words_co   002C78 R   |   4 write      0028D0 R   |   4 write_bl   00085C GR
  4 write_bu   000798 R   |   4 write_by   0007E2 R   |   4 write_ee   00081E R
  4 write_ex   000857 R   |   4 write_fl   000808 R   |   4 write_nb   000881 R
  2 xstack_f   001738 GR  |   2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3584   flags    0
   5 DATA       size     7E   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

