ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000040    23         F_IFUNC=0x40 ; integer function keyword
                           000080    24         F_CFUNC=0x80 ; character function keyword
                           0000C0    25         F_CONST=0xC0 ; function keyword that return a constant
                                     26 
                           0000A0    27 	STACK_SIZE=160
                           0017FF    28 	STACK_EMPTY=RAM_SIZE-1  
                           000000    29 	FRUN=0 ; flags run code in variable flags
                           000001    30 	FTRAP=1 ; inside trap handler 
                           000002    31 	FLOOP=2 ; FOR loop in preparation 
                           000003    32 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    33 	FBREAK=4 ; break point flag 
                           000005    34 	FCOMP=5  ; compiling flags 
                           000006    35 	FAUTORUN=6; auto start program running 
                                     36 
                           004000    37 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     38 
                           000006    39         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     40 
                           007FFF    41 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     42 
                           000008    43 	RX_QUEUE_SIZE=8 
                                     44 
                           00F424    45         TIM2_CLK_FREQ=62500
                                     46 
                           000050    47 	TIB_SIZE=80
                           000080    48         PAD_SIZE=BLOCK_SIZE 
                                     49 
                                     50 ;--------------------------------------
                                     51 ;   constantes related to Arduino 
                                     52 ;   API mapping 
                                     53 ;-------------------------------------
                           000000    54         INP=0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                           000001    55         OUTP=1 
                                     56 
                                     57 ;--------------------------------------
                                     58 ;       token attribute
                                     59 ;--------------------------------------
                                     60         ; bits 4:5 identify token group 
                                     61         ; 0x0n -> miscelinous 
                                     62         ; 0x1n -> +|- operators 
                                     63         ; 0x2n -> *|/|% operators
                                     64         ; 0x3n -> relational operators 
                           000080    65         TK_CMD=128      ; BASIC command   
                           000081    66         TK_IFUNC=129    ; BASIC integer function
                           000082    67         TK_CFUNC=130    ; BASIC character function
                           000083    68         TK_CONST=131    ; BASIC constant 
                           000084    69         TK_INTGR=132
                           000085    70         TK_VAR=133
                           000000    71         TK_NONE=0       ; not a token 
                           000002    72         TK_QSTR=2       ; quoted string  
                           000003    73         TK_LABEL=3      ; used for defined, constants, variables
                           000004    74         TK_CHAR=4       ; ASCII character 
                           000005    75         TK_ARRAY=5     ; array variable '@' 
                           000007    76         TK_LPAREN=7     ; left parenthesis '('
                           000008    77         TK_RPAREN=8     ; right parenthesis ')'
                           000009    78         TK_COMMA=9     ; item separator ',' 
                           00000A    79         TK_SHARP=0xa     ; print colon width '#' 
                           00000B    80         TK_COLON=0xb      ; command separator ':' 
                                     81         
                           000010    82         TK_PLUS=0x10    ; addition operator '+'
                           000011    83         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    84         TK_MULT=0x20    ; multiplication operator '*'
                           000021    85         TK_DIV=0x21     ; division operator '/'
                           000022    86         TK_MOD=0x22     ; modulo operator '%'
                                     87 
                                     88         ; don't change these token values 
                                     89         ; values chosen to be used as a mask.
                                     90         ; bit 7   1 for dictionary words else 0 
                                     91         ; bits 6  always 0 
                                     92         ; bits 5:4 identify group 
                                     93         ; bits 3:0 token identifier inside group  
                           000031    94         TK_GT=0x31      ; relation operator '>'
                           000032    95         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033    96         TK_GE=0x33      ; relation operator '>='
                           000034    97         TK_LT=0x34      ; relation operator '<'
                           000036    98         TK_LE=0x36      ; relation operator '<='
                           000035    99         TK_NE=0x35      ; relation operator '<>' not equal 
                                    100         ; token groups 
                           000030   101         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   102         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   103         TK_GRP_ADD=0x10  ; additive operators
                           000020   104         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   105         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   106         CMD_END=2 
                                    107 
                                    108 ;--------------------------------------
                                    109 ;   error codes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                    110 ;--------------------------------------
                           000000   111     ERR_NONE=0
                           000001   112     ERR_MEM_FULL=1 
                           000002   113     ERR_SYNTAX=2
                           000003   114     ERR_MATH_OVF=3
                           000004   115     ERR_DIV0=4 
                           000005   116     ERR_NO_LINE=5
                           000006   117     ERR_RUN_ONLY=6
                           000007   118     ERR_CMD_ONLY=7
                           000008   119     ERR_DUPLICATE=8
                           000009   120     ERR_NOT_FILE=9
                           00000A   121     ERR_BAD_VALUE=10
                           00000B   122     ERR_NO_ACCESS=11
                           00000C   123     ERR_NO_DATA=12 
                           00000D   124     ERR_NO_PROG=13
                           00000E   125     ERR_NO_FSPACE=14
                           00000F   126     ERR_BUF_FULL=15
                                    127 
                                    128 ;--------------------------------------
                                    129 ;   assembler flags 
                                    130 ;-------------------------------------
                           000000   131     MATH_OVF=0 ; if 1 the stop on math overflow 
                                    132 
                           000002   133     CELL_SIZE=2 
                                    134 
                                    135     .macro _usec_dly n 
                                    136     ldw x,#(16*n-2)/4
                                    137     decw x
                                    138     nop 
                                    139     jrne .-4
                                    140     .endm 
                                    141     
                                    142     ; load X register with 
                                    143     ; entry point of dictionary
                                    144     ; before calling 'search_dict'
                                    145     .macro _ldx_dict dict_name
                                    146     ldw x,#dict_name+2
                                    147     .endm 
                                    148 
                                    149     ; reset BASIC pointer
                                    150     ; to beginning of last token
                                    151     ; extracted except if it was end of line 
                                    152     .macro _unget_token 
                                    153      mov in,in.saved  
                                    154     .endm
                                    155 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                     32 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     AND_IDX=ADCREAD_IDX+2     ;
                           000008    29     ASC_IDX=AND_IDX+2     ;
                           00000A    30     AWU_IDX=ASC_IDX+2 
                           00000C    31     BIT_IDX=AWU_IDX+2
                           00000E    32     BRES_IDX=BIT_IDX+2
                           000010    33     BSET_IDX=BRES_IDX+2
                           000012    34     BTEST_IDX=BSET_IDX+2
                           000014    35     BTOGL_IDX=BTEST_IDX+2
                           000016    36     BYE_IDX=BTOGL_IDX+2
                           000018    37     CHAR_IDX=BYE_IDX+2
                           00001A    38     CRH_IDX=CHAR_IDX+2
                           00001C    39     CRL_IDX=CRH_IDX+2
                           00001E    40     DATA_IDX=CRL_IDX+2
                           000020    41     DDR_IDX=DATA_IDX+2
                           000022    42     DEC_IDX=DDR_IDX+2
                           000024    43     DO_IDX=DEC_IDX+2
                           000026    44     DREAD_IDX=DO_IDX+2
                           000028    45     DWRITE_IDX=DREAD_IDX+2
                           00002A    46     EDIT_IDX=DWRITE_IDX+2
                           00002C    47     EEPROM_IDX=EDIT_IDX+2
                           00002E    48     END_IDX=EEPROM_IDX+2
                           000030    49     ERASE_IDX=END_IDX+2
                           000032    50     FCPU_IDX=ERASE_IDX+2
                           000034    51     SAVE_IDX=FCPU_IDX+2
                           000036    52     FOR_IDX=SAVE_IDX+2
                           000038    53     GOSUB_IDX=FOR_IDX+2
                           00003A    54     GOTO_IDX=GOSUB_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                           00003C    55     GPIO_IDX=GOTO_IDX+2
                           00003E    56     HEX_IDX=GPIO_IDX+2
                           000040    57     IDR_IDX=HEX_IDX+2
                           000042    58     IF_IDX=IDR_IDX+2
                           000044    59     INPUT_IDX=IF_IDX+2
                           000046    60     INVERT_IDX=INPUT_IDX+2
                           000048    61     IWDGEN_IDX=INVERT_IDX+2
                           00004A    62     IWDGREF_IDX=IWDGEN_IDX+2
                           00004C    63     KEY_IDX=IWDGREF_IDX+2
                           00004E    64     LET_IDX=KEY_IDX+2
                           000050    65     LIST_IDX=LET_IDX+2
                           000052    66     LOG_IDX=LIST_IDX+2
                           000054    67     LSHIFT_IDX=LOG_IDX+2
                           000056    68     MULDIV_IDX=LSHIFT_IDX+2
                           000058    69     NEXT_IDX=MULDIV_IDX+2
                           00005A    70     NEW_IDX=NEXT_IDX+2
                           00005C    71     NOT_IDX=NEW_IDX+2
                           00005E    72     ODR_IDX=NOT_IDX+2
                           000060    73     OR_IDX=ODR_IDX+2
                           000062    74     PAD_IDX=OR_IDX+2
                           000064    75     PAUSE_IDX=PAD_IDX+2
                           000066    76     PMODE_IDX=PAUSE_IDX+2
                           000068    77     PEEK_IDX=PMODE_IDX+2
                           00006A    78     PINP_IDX=PEEK_IDX+2
                           00006C    79     POKE_IDX=PINP_IDX+2
                           00006E    80     POUT_IDX=POKE_IDX+2
                           000070    81    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000072    82     PRTA_IDX=PRT_IDX+2
                           000074    83     PRTB_IDX=PRTA_IDX+2
                           000076    84     PRTC_IDX=PRTB_IDX+2
                           000078    85     PRTD_IDX=PRTC_IDX+2
                           00007A    86     PRTE_IDX=PRTD_IDX+2
                           00007C    87     PRTF_IDX=PRTE_IDX+2
                           00007E    88     PRTG_IDX=PRTF_IDX+2
                           000080    89     PRTH_IDX=PRTG_IDX+2
                           000082    90     PRTI_IDX=PRTH_IDX+2
                           000084    91     QKEY_IDX=PRTI_IDX+2
                           000086    92     READ_IDX=QKEY_IDX+2
                           000088    93     RBT_IDX=READ_IDX+2  ; REBOOT
                           00008A    94 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00008C    95     REST_IDX=REM_IDX+2 ; RESTORE
                           00008E    96     RET_IDX=REST_IDX+2  ; RETURN 
                           000090    97     RND_IDX=RET_IDX+2 ; RANDOM 
                           000092    98     RSHIFT_IDX=RND_IDX+2
                           000094    99     RUN_IDX=RSHIFT_IDX+2
                           000096   100     SHOW_IDX=RUN_IDX+2
                           000098   101     FREE_IDX=SHOW_IDX+2
                           00009A   102     SLEEP_IDX=FREE_IDX+2
                           00009C   103     SPIRD_IDX=SLEEP_IDX+2
                           00009E   104     SPIEN_IDX=SPIRD_IDX+2
                           0000A0   105     SPISEL_IDX=SPIEN_IDX+2
                           0000A2   106     SPIWR_IDX=SPISEL_IDX+2
                           0000A4   107     STEP_IDX=SPIWR_IDX+2
                           0000A6   108     STOP_IDX=STEP_IDX+2
                           0000A8   109     TICKS_IDX=STOP_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                           0000AA   110     TIMER_IDX=TICKS_IDX+2
                           0000AC   111     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000AE   112     TO_IDX=TMROUT_IDX+2
                           0000B0   113     TONE_IDX=TO_IDX+2
                           0000B2   114     UBOUND_IDX=TONE_IDX+2
                           0000B4   115     UFLASH_IDX=UBOUND_IDX+2
                           0000B6   116     UNTIL_IDX=UFLASH_IDX+2
                           0000B8   117     USR_IDX=UNTIL_IDX+2
                           0000BA   118     WAIT_IDX=USR_IDX+2
                           0000BC   119     WORDS_IDX=WAIT_IDX+2
                           0000BE   120     WRITE_IDX=WORDS_IDX+2
                           0000C0   121     XOR_IDX=WRITE_IDX+2
                           0000C2   122     SIZE_IDX=XOR_IDX+2 
                           0000C4   123     ON_IDX=SIZE_IDX+2 
                           0000C6   124     GET_IDX=ON_IDX+2
                           0000C8   125     CONST_IDX=GET_IDX+2
                           0000CA   126     EEFREE_IDX=CONST_IDX+2 
                                    127      
                                    128         
                                    129 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "dbg_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;----------------------------------
                                     21 ;  macros used for debugging
                                     22 ;---------------------------------
                                     23 ;-------------------------------
                                     24 ;  macros used to help debugging
                                     25 ;-------------------------------
                           000000    26     DEBUG=0
                                     27     
                                     28     .macro _dbg 
                                     29     DEBUG=1
                                     30     .endm
                                     31 
                                     32     .macro _nodbg
                                     33     DEBUG=0
                                     34     .endm 
                                     35 
                           000006    36     DBG_CC=6
                           000005    37     DBG_A=5 
                           000003    38     DBG_X=3 
                           000001    39     DBG_Y=1 
                                     40     .macro _dbg_save_regs 
                                     41     .if DEBUG
                                     42     push cc ; (6,sp)
                                     43     push a   ; (5,sp)
                                     44     pushw x  ; (3,sp)
                                     45     pushw y  ; (1,sp)
                                     46     .endif 
                                     47     .endm 
                                     48 
                                     49     .macro _dbg_restore_regs 
                                     50     .if DEBUG 
                                     51     popw y 
                                     52     popw x 
                                     53     pop a 
                                     54     pop cc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                     55     .endif 
                                     56     .endm 
                                     57 
                                     58     .macro _dbg_getc 
                                     59     .if DEBUG 
                                     60     _dbg_save_regs 
                                     61     call getc
                                     62     ld (DBG_A,sp),a 
                                     63     _dbg_restore_regs  
                                     64     .endif
                                     65     .endm 
                                     66 
                                     67     .macro _dbg_putc 
                                     68     .if DEBUG
                                     69     push cc 
                                     70     call putc 
                                     71     pop cc 
                                     72     .endif 
                                     73     .endm 
                                     74 
                                     75     .macro _dbg_puts 
                                     76     .if DEBUG 
                                     77     _dbg_save_regs
                                     78     call puts 
                                     79     _dbg_restore_regs
                                     80     .endif 
                                     81     .endm 
                                     82 
                                     83     .macro _dbg_prti24 
                                     84     .if DEBUG 
                                     85     _dbg_save_regs
                                     86     call prti24 
                                     87     _dbg_restore_regs
                                     88     .endif
                                     89     .endm 
                                     90 
                                     91     .macro _dbg_prt_regs
                                     92     .if DEBUG
                                     93     call prt_regs 
                                     94     .endif 
                                     95     .endm 
                                     96 
                                     97     .macro _dbg_peek addr 
                                     98     .if DEBUG
                                     99     _dbg_save_regs 
                                    100     ldw x,addr 
                                    101     call peek     
                                    102     _dbg_restore_regs
                                    103     .endif 
                                    104     .endm 
                                    105 
                                    106     .macro _dbg_parser_init 
                                    107     .if DEBUG 
                                    108     _dbg_save_regs
                                    109     call parser_init 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                    110     _dbg_restore_regs
                                    111     .endif
                                    112     .endm
                                    113 
                                    114     .macro _dbg_readln
                                    115     .if DEBUG 
                                    116     _dbg_save_regs
                                    117     call readln
                                    118     _dbg_restore_regs
                                    119     .endif
                                    120     .endm
                                    121 
                                    122     .macro _dbg_number
                                    123     .if DEBUG 
                                    124     _dbg_save_regs
                                    125     call number 
                                    126     _dbg_restore_regs
                                    127     .endif
                                    128     .endm  
                                    129 
                                    130     .macro _dbg_nextword
                                    131     .if DEBUG 
                                    132     _dbg_save_regs
                                    133     call get_token   
                                    134     _dbg_restore_regs
                                    135     .endif
                                    136     .endm  
                                    137 
                                    138     .macro _dbg_dots 
                                    139     .if DEBUG 
                                    140     _dbg_save_regs
                                    141     call dots 
                                    142     _dbg_restore_regs
                                    143     .endif 
                                    144     .endm 
                                    145 
                                    146     .macro _dbg_trap
                                    147     .if DEBUG 
                                    148     bset flags,#FTRAP 
                                    149     trap 
                                    150     .endif 
                                    151     .endm 
                                    152 
                                    153     .macro _dbg_mark n  
                                    154     .if DEBUG 
                                    155     push cc
                                    156     push a 
                                    157     ld a,#n 
                                    158     call putc
                                    159     btjf UART1_SR,#UART_SR_TC,. 
                                    160     pop a 
                                    161     pop cc 
                                    162     .endif 
                                    163     .endm 
                                    164     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                    165     .macro _dbg_prt_var var 
                                    166     .if DEBUG
                                    167     _dbg_save_regs 
                                    168     ldw x,var 
                                    169     ldw acc16,x 
                                    170     clr acc24 
                                    171     clrw x 
                                    172     ld a,#16+128  
                                    173     call prti24
                                    174     ld a,#CR 
                                    175     call putc  
                                    176     _dbg_restore_regs 
                                    177     .endif 
                                    178     .endm 
                                    179 
                                    180     .macro _dbg_show 
                                    181     .if DEBUG 
                                    182     _dbg_save_regs 
                                    183     call show 
                                    184     _dbg_restore_regs
                                    185     .endif
                                    186     .endm 
                                    187 
                                    188 
                                    189 
                                    190 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                     34   
                                     35 
                                     36 ;;-----------------------------------
                                     37     .area SSEG (ABS)
                                     38 ;; working buffers and stack at end of RAM. 	
                                     39 ;;-----------------------------------
      001690                         40     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         41 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         42 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016E0                         43 pad:: .ds PAD_SIZE             ; working buffer
      001760                         44 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         45 stack_unf: ; stack underflow ; control_stack bottom 
                                     46 
                                     47 ;;--------------------------------------
                                     48     .area HOME 
                                     49 ;; interrupt vector table at 0x8000
                                     50 ;;--------------------------------------
      000000 82 00 0F 08             51     int cold_start			; RESET vector 
                           000000    52 .if DEBUG
                                     53 	int TrapHandler 		;TRAP  software interrupt
                           000001    54 .else
      000004 82 00 00 00             55 	int NonHandledInterrupt ;TRAP  software interrupt
                                     56 .endif
      000008 82 00 00 00             57 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             58 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             59 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             60 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             61 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             62 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             63 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 27             64 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             65 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             66 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             67 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             68 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             69 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             70 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             71 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             72 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             73 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             74 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 02 C0             75 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             76 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             77 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             78 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             79 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 12             80 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             81 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             82 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             83 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             84 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             85 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             86 	int NonHandledInterrupt ;int29  not used
                                     87 
                                     88 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                     89     .area CODE
                                     90 ;---------------------------------------
                                     91 
                                     92 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     93 ; non handled interrupt 
                                     94 ; reset MCU
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         96 NonHandledInterrupt:
      000000                         97 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                     98 
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    100 ; auto wakeup from halt
                                    101 ; at iret, program continue 
                                    102 ; after hatl instruction
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        104 AWUHandler:
      000004 72 19 50 F0      [ 1]  105 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  106 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  107 	clr AWU_TBR 
      000011 80               [11]  108 	iret
                                    109 
                                    110 ;------------------------------------
                                    111 ; software interrupt handler  
                                    112 ;------------------------------------
                           000000   113 .if DEBUG 
                                    114 TrapHandler:
                                    115 	bset flags,#FTRAP 
                                    116 	call print_registers
                                    117 	call cmd_itf
                                    118 	bres flags,#FTRAP 	
                                    119 	iret
                                    120 .endif 
                                    121 
                                    122 ;------------------------------
                                    123 ; TIMER 4 is used to maintain 
                                    124 ; a milliseconds 'ticks' counter
                                    125 ; and decrement 'timer' varaiable
                                    126 ;--------------------------------
      000012                        127 Timer4UpdateHandler:
      000012 72 5F 53 42      [ 1]  128 	clr TIM4_SR 
      000016 CE 00 0F         [ 2]  129 	ldw x,ticks
      000019 5C               [ 1]  130 	incw x
      00001A CF 00 0F         [ 2]  131 	ldw ticks,x 
      00001D CE 00 11         [ 2]  132 	ldw x,timer
                                    133 ;	tnzw x 
      000020 27 04            [ 1]  134 	jreq 1$
      000022 5A               [ 2]  135 	decw x 
      000023 CF 00 11         [ 2]  136 	ldw timer,x 
      000026                        137 1$:	
      000026 80               [11]  138 	iret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; Triggered by pressing USER UserButton 
                                    142 ; on NUCLEO card.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                    143 ; This is used to abort a progam lock 
                                    144 ; in infinite loop. 
                                    145 ;------------------------------------
      000027                        146 UserButtonHandler:
                                    147 ; wait button release
      000027 5F               [ 1]  148 	clrw x
      000028 5A               [ 2]  149 1$: decw x 
      000029 26 FD            [ 1]  150 	jrne 1$
      00002B 72 09 50 15 F8   [ 2]  151 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    152 ; if MCU suspended by SLEEP resume program
      000030 72 07 00 21 05   [ 2]  153     btjf flags,#FSLEEP,2$
      000035 72 17 00 21      [ 1]  154 	bres flags,#FSLEEP 
      000039 80               [11]  155 	iret
      00003A                        156 2$:	
      00003A                        157 user_interrupted:
      00003A 72 00 00 21 02   [ 2]  158     btjt flags,#FRUN,4$
      00003F 20 0A            [ 2]  159 	jra UBTN_Handler_exit 
      000041                        160 4$:	; program interrupted by user 
      000041 72 11 00 21      [ 1]  161 	bres flags,#FRUN 
      000045 AE 00 5E         [ 2]  162 	ldw x,#USER_ABORT
      000048 CD 03 8F         [ 4]  163 	call puts 
      00004B                        164 UBTN_Handler_exit:
      00004B AE 17 FF         [ 2]  165     ldw x,#STACK_EMPTY 
      00004E 94               [ 1]  166     ldw sp,x
      00004F 9A               [ 1]  167 	rim 
      000050 CE 00 1A         [ 2]  168 	ldw x,txtbgn 
      000053 A3 2D 80         [ 2]  169 	cpw x,#app_space 
      000056 22 03            [ 1]  170 	jrugt 5$
      000058 CD 0F FD         [ 4]  171 	call clear_basic 
      00005B CC 12 19         [ 2]  172 5$:	jp warm_start
                                    173 
      00005E 0A 50 72 6F 67 72 61   174 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    175 
                                    176 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    177 ;    peripherals initialization
                                    178 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    179 
                                    180 ;----------------------------------------
                                    181 ; inialize MCU clock 
                                    182 ; input:
                                    183 ;   A 		source  HSI | 1 HSE 
                                    184 ;   XL      CLK_CKDIVR , clock divisor 
                                    185 ; output:
                                    186 ;   none 
                                    187 ;----------------------------------------
      000079                        188 clock_init:	
      000079 C1 50 C3         [ 1]  189 	cp a,CLK_CMSR 
      00007C 27 0C            [ 1]  190 	jreq 2$ ; no switching required 
                                    191 ; select clock source 
      00007E 72 12 50 C5      [ 1]  192 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000082 C7 50 C4         [ 1]  193 	ld CLK_SWR,a
      000085 C1 50 C3         [ 1]  194 1$:	cp a,CLK_CMSR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000088 26 FB            [ 1]  195 	jrne 1$
      00008A                        196 2$: 	
                                    197 ; HSI and cpu clock divisor 
      00008A 9F               [ 1]  198 	ld a,xl 
      00008B C7 50 C6         [ 1]  199 	ld CLK_CKDIVR,a  
      00008E 81               [ 4]  200 	ret
                                    201 
                                    202 ;----------------------------------
                                    203 ; TIMER2 used as audio tone output 
                                    204 ; on port D:5.
                                    205 ; channel 1 configured as PWM mode 1 
                                    206 ;-----------------------------------  
                                    207 
      00008F                        208 timer2_init:
      00008F 72 1A 50 C7      [ 1]  209 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000093 35 60 53 05      [ 1]  210  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      000097 35 08 53 0C      [ 1]  211 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009B 81               [ 4]  212 	ret 
                                    213 
                                    214 ;---------------------------------
                                    215 ; TIM4 is configured to generate an 
                                    216 ; interrupt every millisecond 
                                    217 ;----------------------------------
      00009C                        218 timer4_init:
      00009C 72 18 50 C7      [ 1]  219 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A0 35 07 53 45      [ 1]  220 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A4 35 7D 53 46      [ 1]  221 	mov TIM4_ARR,#125 ; set for 1msec.
      0000A8 35 05 53 40      [ 1]  222 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000AC 72 10 53 41      [ 1]  223 	bset TIM4_IER,#TIM4_IER_UIE
      0000B0 81               [ 4]  224 	ret
                                    225 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debugging support code 
                                     21 ;;  assembled only when DEBUG=1
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24 
                           000001    25     DEBUG=1 
                                     26 
                           000001    27     .if DEBUG 
                                     28 
                                     29     .macro _reg_name name  
                                     30     ld a,#name 
                                     31     call putc 
                                     32     ld a,#'=
                                     33     call putc 
                                     34     .endm 
                                     35 
                                     36     .area CODE 
                                     37 
      0000B1                         38     prt_regs:
      0000B1                         39     _dbg_save_regs 
                           000001     1     .if DEBUG
      0000B1 8A               [ 1]    2     push cc ; (6,sp)
      0000B2 88               [ 1]    3     push a   ; (5,sp)
      0000B3 89               [ 2]    4     pushw x  ; (3,sp)
      0000B4 90 89            [ 2]    5     pushw y  ; (1,sp)
                                      6     .endif 
      0000B6 35 10 00 0A      [ 1]   40     mov base,#16
      0000BA A6 0D            [ 1]   41     ld a,#CR 
      0000BC CD 03 32         [ 4]   42     call putc 
                                     43 ; print CC 
      0000BF                         44     _reg_name 'C 
      0000BF A6 43            [ 1]    1     ld a,#'C 
      0000C1 CD 03 32         [ 4]    2     call putc 
      0000C4 A6 3D            [ 1]    3     ld a,#'=
      0000C6 CD 03 32         [ 4]    4     call putc 
      0000C9 7B 06            [ 1]   45     ld a,(DBG_CC,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      0000CB 5F               [ 1]   46     clrw x 
      0000CC 97               [ 1]   47     ld xl,a 
      0000CD CD 12 D8         [ 4]   48     call print_int  
                                     49 ; print A 
      0000D0                         50     _reg_name 'A 
      0000D0 A6 41            [ 1]    1     ld a,#'A 
      0000D2 CD 03 32         [ 4]    2     call putc 
      0000D5 A6 3D            [ 1]    3     ld a,#'=
      0000D7 CD 03 32         [ 4]    4     call putc 
      0000DA 7B 05            [ 1]   51     ld a,(DBG_A,SP)
      0000DC 5F               [ 1]   52     clrw x 
      0000DD 97               [ 1]   53     ld xl,a  
      0000DE CD 12 D8         [ 4]   54     call print_int
                                     55 ; print Y 
      0000E1                         56     _reg_name 'Y 
      0000E1 A6 59            [ 1]    1     ld a,#'Y 
      0000E3 CD 03 32         [ 4]    2     call putc 
      0000E6 A6 3D            [ 1]    3     ld a,#'=
      0000E8 CD 03 32         [ 4]    4     call putc 
      0000EB 1E 01            [ 2]   57     ldw x,(DBG_Y,sp)
      0000ED CD 12 D8         [ 4]   58     call print_int     
                                     59 ; print X 
      0000F0                         60     _reg_name 'X 
      0000F0 A6 58            [ 1]    1     ld a,#'X 
      0000F2 CD 03 32         [ 4]    2     call putc 
      0000F5 A6 3D            [ 1]    3     ld a,#'=
      0000F7 CD 03 32         [ 4]    4     call putc 
      0000FA 1E 03            [ 2]   61     ldw x,(DBG_X,sp)
      0000FC CD 12 D8         [ 4]   62     call print_int 
      0000FF 35 0A 00 0A      [ 1]   63     mov base,#10
      000103                         64     _dbg_restore_regs      
                           000001     1     .if DEBUG 
      000103 90 85            [ 2]    2     popw y 
      000105 85               [ 2]    3     popw x 
      000106 84               [ 1]    4     pop a 
      000107 86               [ 1]    5     pop cc 
                                      6     .endif 
      000108 81               [ 4]   65     ret 
                                     66 
                                     67    .endif ; DEBUG 
                                     68 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      000109                         45 unlock_eeprom:
      000109 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      00010E 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      000112 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      000116 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      00011A 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      00011E 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      000123 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      000124                         62 unlock_flash:
      000124 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      000129 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      00012D 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      000131 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      000135 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      000139 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      00013E 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      00013F                         76 row_erase:
      00013F 88               [ 1]   77 	push a 
      000140 90 89            [ 2]   78 	pushw y 
      000142 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      000146 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      00014A 4F               [ 1]   81 	clr a 
      00014B 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      00014D 91 A7 00 17      [ 1]   83 	ldf ([farptr],y),a
      000151 90 5C            [ 1]   84     incw y
      000153 91 A7 00 17      [ 1]   85 	ldf ([farptr],y),a
      000157 90 5C            [ 1]   86     incw y
      000159 91 A7 00 17      [ 1]   87 	ldf ([farptr],y),a
      00015D 90 5C            [ 1]   88     incw y
      00015F 91 A7 00 17      [ 1]   89 	ldf ([farptr],y),a
      000163 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000168 90 85            [ 2]   91 	popw y 
      00016A 84               [ 1]   92 	pop a 
      00016B 81               [ 4]   93 	ret
      00016C                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      00016C                         97 move_erase_to_ram:
      00016C 89               [ 2]   98 	pushw x 
      00016D 90 89            [ 2]   99 	pushw y 
      00016F AE 01 6C         [ 2]  100 	ldw x,#row_erase_end 
      000172 1D 01 3F         [ 2]  101 	subw x,#row_erase
      000175 CF 00 0D         [ 2]  102 	ldw acc16,x 
      000178 AE 16 90         [ 2]  103 	ldw x,#tib 
      00017B 90 AE 01 3F      [ 2]  104 	ldw y,#row_erase 
      00017F CD 0E 6F         [ 4]  105 	call move
      000182 90 85            [ 2]  106 	popw y
      000184 85               [ 2]  107 	popw x
      000185 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000186                        123 program_row:
      000186 88               [ 1]  124 	push a 
      000187 90 89            [ 2]  125 	pushw y 
      000189 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      00018B 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00018F 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000193 90 5F            [ 1]  130 	clrw y 
      000195 F6               [ 1]  131 1$:	ld a,(x)
      000196 91 A7 00 17      [ 1]  132 	ldf ([farptr],y),a
      00019A 5C               [ 1]  133 	incw x 
      00019B 90 5C            [ 1]  134 	incw y 
      00019D 0A 01            [ 1]  135 	dec (BCNT,sp)
      00019F 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      0001A1 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      0001A6                        139 	_drop 1 
      0001A6 5B 01            [ 2]    1     addw sp,#1 
      0001A8 90 85            [ 2]  140 	popw y 
      0001AA 84               [ 1]  141 	pop a 
      0001AB 81               [ 4]  142 	ret 
      0001AC                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      0001AC                        149 move_prg_to_ram:
      0001AC 89               [ 2]  150 	pushw x 
      0001AD 90 89            [ 2]  151 	pushw y 
      0001AF AE 01 AC         [ 2]  152 	ldw x,#program_row_end 
      0001B2 1D 01 86         [ 2]  153 	subw x,#program_row 
      0001B5 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      0001B8 AE 16 90         [ 2]  155 	ldw x,#tib ; destination address 
      0001BB 90 AE 01 86      [ 2]  156 	ldw y,#program_row ; source address 
      0001BF CD 0E 6F         [ 4]  157 	call move
      0001C2 90 85            [ 2]  158 	popw y 
      0001C4 85               [ 2]  159 	popw x  
      0001C5 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      0001C6                        169 write_buffer:
      0001C6 89               [ 2]  170 	pushw x 
      0001C7 72 5D 00 17      [ 1]  171 	tnz farptr 
      0001CB 26 0D            [ 1]  172 	jrne to_flash 
      0001CD CE 00 18         [ 2]  173 	ldw x,farptr+1 
      0001D0 A3 2D 80         [ 2]  174 	cpw x,#app_space  
      0001D3 24 05            [ 1]  175 	jruge to_flash 
      0001D5                        176 to_eeprom:
      0001D5 CD 01 09         [ 4]  177 	call unlock_eeprom
      0001D8 20 03            [ 2]  178 	jra do_programming
      0001DA                        179 to_flash:
      0001DA CD 01 24         [ 4]  180 	call unlock_flash
      0001DD                        181 do_programming:
      0001DD 85               [ 2]  182 	popw x 
      0001DE CD 16 90         [ 4]  183 	call tib
      0001E1 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0001E5 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001E9 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      0001EA                        197 block_erase:
      0001EA 89               [ 2]  198 	pushw x 
      0001EB CE 00 18         [ 2]  199 	ldw x,farptr+1
      0001EE A3 2D 80         [ 2]  200 	cpw x,#app_space 
      0001F1 24 0C            [ 1]  201 	jruge erase_flash 
                                    202 ; erase eeprom block
      0001F3 CD 01 09         [ 4]  203 	call unlock_eeprom 
      0001F6 CD 16 90         [ 4]  204 	call tib 
      0001F9 72 17 50 5F      [ 1]  205 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001FD 20 0A            [ 2]  206 	jra erase_exit  
                                    207 ; erase flash block:
      0001FF                        208 erase_flash:
      0001FF CD 01 24         [ 4]  209 	call unlock_flash 
      000202 CD 16 90         [ 4]  210 	call tib 
      000205 72 13 50 5F      [ 1]  211     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000209                        212 erase_exit: 
      000209 85               [ 2]  213 	popw x 
      00020A 81               [ 4]  214 	ret 
                                    215 
                                    216 
                                    217 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    218 ; write a byte to FLASH or EEPROM/OPTION  
                                    219 ; input:
                                    220 ;    a  		byte to write
                                    221 ;    farptr  	address
                                    222 ;    x          farptr[x]
                                    223 ; output:
                                    224 ;    none
                                    225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    226 	; variables locales
                           000001   227 	BTW = 1   ; byte to write offset on stack
                           000002   228 	OPT = 2   ; OPTION flag offset on stack
                           000002   229 	VSIZE = 2
      00020B                        230 write_byte:
      00020B 90 89            [ 2]  231 	pushw y
      00020D                        232 	_vars VSIZE
      00020D 52 02            [ 2]    1     sub sp,#VSIZE 
      00020F 6B 01            [ 1]  233 	ld (BTW,sp),a ; byte to write 
      000211 0F 02            [ 1]  234 	clr (OPT,sp)  ; OPTION flag
                                    235 ; put addr[15:0] in Y, for bounds check.
      000213 90 CE 00 18      [ 2]  236 	ldw y,farptr+1   ; Y=addr15:0
                                    237 ; check addr[23:16], if <> 0 then it is extened flash memory
      000217 72 5D 00 17      [ 1]  238 	tnz farptr 
      00021B 26 14            [ 1]  239 	jrne write_flash
      00021D 90 A3 2D 80      [ 2]  240     cpw y,#app_space 	 
      000221 24 0E            [ 1]  241     jruge write_flash
      000223 90 A3 40 00      [ 2]  242 	cpw y,#EEPROM_BASE  
      000227 25 57            [ 1]  243     jrult write_exit
      000229 90 A3 48 7F      [ 2]  244 	cpw y,#OPTION_END 
      00022D 22 51            [ 1]  245 	jrugt write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00022F 20 16            [ 2]  246 	jra write_eeprom 
                                    247 ; write program memory
      000231                        248 write_flash:
      000231 CD 01 24         [ 4]  249 	call unlock_flash 
      000234 9B               [ 1]  250 1$:	sim 
      000235 7B 01            [ 1]  251 	ld a,(BTW,sp)
      000237 92 A7 00 17      [ 4]  252 	ldf ([farptr],x),a ; farptr[x]=A
      00023B 72 05 50 5F FB   [ 2]  253 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000240 9A               [ 1]  254     rim 
      000241 72 13 50 5F      [ 1]  255     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000245 20 39            [ 2]  256     jra write_exit
                                    257 ; write eeprom and option
      000247                        258 write_eeprom:
      000247 CD 01 09         [ 4]  259 	call unlock_eeprom
                                    260 	; check for data eeprom or option eeprom
      00024A 90 A3 48 00      [ 2]  261 	cpw y,#OPTION_BASE
      00024E 2B 08            [ 1]  262 	jrmi 1$
      000250 90 A3 48 80      [ 2]  263 	cpw y,#OPTION_END+1
      000254 2A 02            [ 1]  264 	jrpl 1$
      000256 03 02            [ 1]  265 	cpl (OPT,sp)
      000258                        266 1$: 
      000258 0D 02            [ 1]  267     tnz (OPT,sp)
      00025A 27 08            [ 1]  268     jreq 2$
                                    269 	; pour modifier une option il faut modifier ces 2 bits
      00025C 72 1E 50 5B      [ 1]  270     bset FLASH_CR2,#FLASH_CR2_OPT
      000260 72 1F 50 5C      [ 1]  271     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000264                        272 2$: 
      000264 7B 01            [ 1]  273     ld a,(BTW,sp)
      000266 92 A7 00 17      [ 4]  274     ldf ([farptr],x),a
      00026A 0D 02            [ 1]  275     tnz (OPT,sp)
      00026C 27 08            [ 1]  276     jreq 3$
      00026E 5C               [ 1]  277     incw x
      00026F 7B 01            [ 1]  278     ld a,(BTW,sp)
      000271 43               [ 1]  279     cpl a
      000272 92 A7 00 17      [ 4]  280     ldf ([farptr],x),a
      000276 72 05 50 5F FB   [ 2]  281 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00027B 72 0D 50 5F FB   [ 2]  282 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000280                        283 write_exit:
      000280                        284 	_drop VSIZE 
      000280 5B 02            [ 2]    1     addw sp,#VSIZE 
      000282 90 85            [ 2]  285 	popw y
      000284 81               [ 4]  286     ret
                                    287 
                                    288 ;--------------------------------------------
                                    289 ; write a data block to eeprom or flash 
                                    290 ; the block must be erased before 
                                    291 ; using this routine.
                                    292 ; input:
                                    293 ;   Y        source address   
                                    294 ;   X        array index  destination  farptr[x]
                                    295 ;   BSIZE    block size bytes 
                                    296 ;   farptr   write address , byte* 
                                    297 ; output:
                                    298 ;	X 		after last byte written 
                                    299 ;   Y 		after last byte read 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                    300 ;  farptr   point after block
                                    301 ;---------------------------------------------
      000285                        302 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000285                        303 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    304 	; local var 
                           000001   305 	XSAVE=1 
                           000002   306 	VSIZE=2 
      000285                        307 write_block::
      000285 88               [ 1]  308 	push a 
      000286                        309 	_vars VSIZE
      000286 52 02            [ 2]    1     sub sp,#VSIZE 
      000288 1F 01            [ 2]  310 	ldw (XSAVE,sp),x 
      00028A 1E 06            [ 2]  311 	ldw x,(BSIZE,sp) 
      00028C 27 13            [ 1]  312 	jreq 9$
      00028E 1E 01            [ 2]  313 1$:	ldw x,(XSAVE,sp)
      000290 90 F6            [ 1]  314 	ld a,(y)
      000292 CD 02 0B         [ 4]  315 	call write_byte 
      000295 5C               [ 1]  316 	incw x 
      000296 90 5C            [ 1]  317 	incw y 
      000298 1F 01            [ 2]  318 	ldw (XSAVE,sp),x
      00029A 1E 06            [ 2]  319 	ldw x,(BSIZE,sp)
      00029C 5A               [ 2]  320 	decw x
      00029D 1F 06            [ 2]  321 	ldw (BSIZE,sp),x 
      00029F 26 ED            [ 1]  322 	jrne 1$
      0002A1                        323 9$:
      0002A1 1E 01            [ 2]  324 	ldw x,(XSAVE,sp)
      0002A3 CD 20 EA         [ 4]  325 	call incr_farptr
      0002A6                        326 	_drop VSIZE
      0002A6 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002A8 84               [ 1]  327 	pop a 
      0002A9 81               [ 4]  328 	ret 
                                    329 
                                    330 
                                    331 ;------------------------------------
                                    332 ; write n bytes to flash | eeprom 
                                    333 ; if the number of bytes is 
                                    334 ; >=128 it is faster to 
                                    335 ; use write_block
                                    336 ; the bytes are written one by 
                                    337 ; one and auto erased if required. 
                                    338 ; input:
                                    339 ;    farptr    dest address 
                                    340 ;    X         src address 
                                    341 ;    A         count 
                                    342 ; output:
                                    343 ;    none   
                                    344 ;----------------------------------
      0002AA                        345 write_nbytes:
      0002AA 90 89            [ 2]  346 	pushw y
      0002AC 88               [ 1]  347 	push a 
      0002AD 90 93            [ 1]  348 	ldw y,x
      0002AF 5F               [ 1]  349 	clrw x 
      0002B0                        350 1$:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0002B0 90 F6            [ 1]  351 	ld a,(y)
      0002B2 90 5C            [ 1]  352 	incw y
      0002B4 CD 02 0B         [ 4]  353 	call write_byte 
      0002B7 5C               [ 1]  354 	incw x 
      0002B8 0A 01            [ 1]  355 	dec (1,sp)  
      0002BA 26 F4            [ 1]  356 	jrne 1$ 
      0002BC 84               [ 1]  357 9$: pop a 
      0002BD 90 85            [ 2]  358 	popw y 
      0002BF 81               [ 4]  359 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      0002C0                         66 Uart1RxHandler: ; console receive char 
      0002C0 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      0002C5 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      0002C8 A1 03            [ 1]   69 	cp a,#CTRL_C 
      0002CA 26 06            [ 1]   70 	jrne 2$
      0002CC CD 03 32         [ 4]   71 	call putc 
      0002CF CC 00 3A         [ 2]   72 	jp user_interrupted
      0002D2                         73 2$:
      0002D2 A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      0002D4 26 03            [ 1]   75 	jrne 3$
      0002D6 CC 0F 08         [ 2]   76 	jp cold_start 	
      0002D9 88               [ 1]   77 3$:	push a 
      0002DA A6 25            [ 1]   78 	ld a,#rx1_queue 
      0002DC CB 00 2E         [ 1]   79 	add a,rx1_tail 
      0002DF 5F               [ 1]   80 	clrw x 
      0002E0 97               [ 1]   81 	ld xl,a 
      0002E1 84               [ 1]   82 	pop a 
      0002E2 F7               [ 1]   83 	ld (x),a 
      0002E3 C6 00 2E         [ 1]   84 	ld a,rx1_tail 
      0002E6 4C               [ 1]   85 	inc a 
      0002E7 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0002E9 C7 00 2E         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0002EC 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0002ED                         97 uart1_init:
      0002ED 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      0002F1 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      0002F5 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      0002F9 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0002FD                        103 uart1_set_baud: 
      0002FD 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0002FE A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      000300 C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      000303 27 0A            [ 1]  109 	jreq 2$ 
      000305                        110 1$: ; 8 Mhz 	
      000305 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      000309 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      00030D 20 08            [ 2]  113 	jra 3$
      00030F                        114 2$: ; 16 Mhz 	
      00030F 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      000313 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      000317                        117 3$:
      000317 72 5F 52 31      [ 1]  118     clr UART1_DR
      00031B 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      00031F 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      000323 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      000328 72 5F 00 2D      [ 1]  122     clr rx1_head 
      00032C 72 5F 00 2E      [ 1]  123 	clr rx1_tail
      000330 84               [ 1]  124 	pop a  
      000331 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      000332                        133 putc:: ; console output always on UART1
      000332                        134 uart1_putc:: 
      000332 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      000337 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      00033A 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      00033B                        148 qgetc::
      00033B                        149 uart1_qgetc::
      00033B C6 00 2D         [ 1]  150 	ld a,rx1_head 
      00033E C0 00 2E         [ 1]  151 	sub a,rx1_tail 
      000341 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      000342                        161 getc:: ;console input
      000342                        162 uart1_getc::
      000342 CD 03 3B         [ 4]  163 	call uart1_qgetc
      000345 27 FB            [ 1]  164 	jreq uart1_getc 
      000347 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      000348 A6 25            [ 1]  167 	ld a,#rx1_queue
      00034A CB 00 2D         [ 1]  168 	add a,rx1_head 
      00034D 5F               [ 1]  169 	clrw x  
      00034E 97               [ 1]  170 	ld xl,a 
      00034F F6               [ 1]  171 	ld a,(x)
      000350 88               [ 1]  172 	push a
      000351 C6 00 2D         [ 1]  173 	ld a,rx1_head 
      000354 4C               [ 1]  174 	inc a 
      000355 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000357 C7 00 2D         [ 1]  176 	ld rx1_head,a 
      00035A 84               [ 1]  177 	pop a  
      00035B 85               [ 2]  178 	popw x
      00035C 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      00035D 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000369                        207 get_escape:
      000369 CD 03 42         [ 4]  208     call getc 
      00036C A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      00036E 27 02            [ 1]  210     jreq 1$
      000370 4F               [ 1]  211     clr a
      000371 81               [ 4]  212     ret
      000372 CD 03 42         [ 4]  213 1$: call getc 
      000375 AE 03 5D         [ 2]  214     ldw x,#convert_table
      000378                        215 2$:
      000378 F1               [ 1]  216     cp a,(x)
      000379 27 08            [ 1]  217     jreq 4$
      00037B 1C 00 02         [ 2]  218     addw x,#2
      00037E 7D               [ 1]  219     tnz (x)
      00037F 26 F7            [ 1]  220     jrne 2$
      000381 4F               [ 1]  221     clr a
      000382 81               [ 4]  222     ret 
      000383 5C               [ 1]  223 4$: incw x 
      000384 F6               [ 1]  224     ld a,(x)
      000385 A1 84            [ 1]  225     cp a,#SUP
      000387 26 05            [ 1]  226     jrne 5$
      000389 88               [ 1]  227     push a 
      00038A CD 03 42         [ 4]  228     call getc
      00038D 84               [ 1]  229     pop a 
      00038E                        230 5$:
      00038E 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      00038F                        241 puts::
      00038F F6               [ 1]  242     ld a,(x)
      000390 27 06            [ 1]  243 	jreq 1$
      000392 CD 03 32         [ 4]  244 	call putc 
      000395 5C               [ 1]  245 	incw x 
      000396 20 F7            [ 2]  246 	jra puts 
      000398 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000399                        258 bksp:
      000399 A6 08            [ 1]  259 	ld a,#BS 
      00039B CD 03 32         [ 4]  260 	call putc 
      00039E A6 20            [ 1]  261 	ld a,#SPACE 
      0003A0 CD 03 32         [ 4]  262 	call putc 
      0003A3 A6 08            [ 1]  263 	ld a,#BS 
      0003A5 CD 03 32         [ 4]  264 	call putc 
      0003A8 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      0003A9                        274 delete_nchar:
      0003A9 88               [ 1]  275 	push a 
      0003AA 0D 01            [ 1]  276 0$:	tnz (1,sp)
      0003AC 27 07            [ 1]  277 	jreq 1$
      0003AE CD 03 99         [ 4]  278 	call bksp 
      0003B1 0A 01            [ 1]  279 	dec (1,sp)
      0003B3 20 F5            [ 2]  280 	jra 0$
      0003B5 84               [ 1]  281 1$:	pop a 
      0003B6 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      0003B7                        290 send_escape:
      0003B7 A6 1B            [ 1]  291 	ld a,#ESC 
      0003B9 CD 03 32         [ 4]  292 	call putc 
      0003BC A6 5B            [ 1]  293 	ld a,#'[
      0003BE CD 03 32         [ 4]  294 	call putc 
      0003C1 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      0003C2                        311 send_parameter:
      0003C2 89               [ 2]  312 	pushw x 
      0003C3 5F               [ 1]  313 	clrw x 
      0003C4 97               [ 1]  314 	ld xl,a 
      0003C5 A6 0A            [ 1]  315 	ld a,#10 
      0003C7 62               [ 2]  316 	div x,a 
      0003C8 95               [ 1]  317 	ld xh,a 
      0003C9 9F               [ 1]  318 	ld a,xl
      0003CA 4D               [ 1]  319     tnz a 
      0003CB 27 0B            [ 1]  320     jreq 2$
      0003CD A1 09            [ 1]  321 	cp a,#9 
      0003CF 23 02            [ 2]  322 	jrule 1$
      0003D1 A6 39            [ 1]  323 	ld a,#'9
      0003D3                        324 1$:
      0003D3 AB 30            [ 1]  325 	add a,#'0 
      0003D5 CD 03 32         [ 4]  326 	call putc
      0003D8 9E               [ 1]  327 2$:	ld a,xh 
      0003D9 AB 30            [ 1]  328 	add a,#'0
      0003DB CD 03 32         [ 4]  329 	call putc 
      0003DE 85               [ 2]  330 	popw x 
      0003DF 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      0003E0                        344 move_left:
      0003E0 88               [ 1]  345 	push a 
      0003E1 CD 03 B7         [ 4]  346 	call send_escape
      0003E4 84               [ 1]  347     pop a
      0003E5 CD 03 C2         [ 4]  348 	call send_parameter 
      0003E8 A6 44            [ 1]  349 	ld a,#'D 
      0003EA CD 03 32         [ 4]  350 	call putc 
      0003ED 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0003EE                        362 move_right:
      0003EE 88               [ 1]  363 	push a 
      0003EF CD 03 B7         [ 4]  364 	call send_escape
      0003F2 84               [ 1]  365     pop a
      0003F3 CD 03 C2         [ 4]  366 	call send_parameter 
      0003F6 A6 43            [ 1]  367 	ld a,#'C 
      0003F8 CD 03 32         [ 4]  368 	call putc 
      0003FB 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      0003FC                        379 spaces::
      0003FC A6 20            [ 1]  380 	ld a,#SPACE 
      0003FE 5D               [ 2]  381 1$:	tnzw x
      0003FF 27 06            [ 1]  382 	jreq 9$
      000401 CD 03 32         [ 4]  383 	call putc 
      000404 5A               [ 2]  384 	decw x
      000405 20 F7            [ 2]  385 	jra 1$
      000407                        386 9$: 
      000407 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   Y       updated Y 
                                    399 ;-------------------------
                           000001   400 	IPOS=1
                           000002   401 	KCHAR=2 
                           000003   402     LLEN=3 
                           000003   403 	VSISE=3 
      000408                        404 insert_char: 
      000408                        405 	_vars VSIZE 
      000408 52 02            [ 2]    1     sub sp,#VSIZE 
      00040A 6B 02            [ 1]  406     ld (KCHAR,sp),a 
      00040C 9E               [ 1]  407     ld a,xh 
      00040D 6B 01            [ 1]  408 	ld (IPOS,sp),a
      00040F 9F               [ 1]  409     ld a,xl 
      000410 6B 03            [ 1]  410     ld (LLEN,sp),a  
      000412 93               [ 1]  411     ldw x,y
      000413 5C               [ 1]  412     incw x 
      000414 7B 03            [ 1]  413     ld a,(LLEN,sp)
      000416 10 01            [ 1]  414     sub a,(IPOS,sp)
      000418 4C               [ 1]  415     inc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000419 C7 00 0E         [ 1]  416     ld acc8,a 
      00041C 72 5F 00 0D      [ 1]  417     clr acc16
      000420 CD 0E 6F         [ 4]  418     call move
      000423 90 AE 16 90      [ 2]  419     ldw y,#tib 
      000427 7B 01            [ 1]  420     ld a,(IPOS,sp)
      000429 C7 00 0E         [ 1]  421     ld acc8,a 
      00042C 72 B9 00 0D      [ 2]  422     addw y,acc16 
      000430 7B 02            [ 1]  423     ld a,(KCHAR,sp)
      000432 90 F7            [ 1]  424     ld (y),a
      000434 90 5C            [ 1]  425     incw y  
      000436 7B 01            [ 1]  426     ld a,(IPOS,sp)
      000438 CD 03 E0         [ 4]  427     call move_left
      00043B AE 16 90         [ 2]  428     ldw x,#tib 
      00043E CD 03 8F         [ 4]  429     call puts 
      000441 7B 03            [ 1]  430     ld a,(LLEN,sp)
      000443 10 01            [ 1]  431     sub a,(IPOS,sp) 
      000445 CD 03 E0         [ 4]  432     call move_left 
      000448                        433 	_drop VSIZE 
      000448 5B 02            [ 2]    1     addw sp,#VSIZE 
      00044A 81               [ 4]  434 	ret 
                                    435 
                                    436 
                                    437 ;--------------------------
                                    438 ; delete character under cursor
                                    439 ; input:
                                    440 ;   A       line length   
                                    441 ;   xl      delete position
                                    442 ;   Y       line pointer 
                                    443 ;-------------------------
                           000001   444 	CPOS=1
                           000002   445 	LLEN=2
                           000002   446 	VSIZE=2
      00044B                        447 delete_under:
      00044B                        448 	_vars VSIZE 
      00044B 52 02            [ 2]    1     sub sp,#VSIZE 
      00044D 6B 02            [ 1]  449     ld (LLEN,sp),a 
      00044F 9F               [ 1]  450     ld a,xl 
      000450 6B 01            [ 1]  451     ld (CPOS,sp),a 
      000452 93               [ 1]  452     ldw x,y ; move destination
      000453 90 5C            [ 1]  453     incw y  ; move source 
      000455 7B 02            [ 1]  454     ld a,(LLEN,sp)
      000457 10 01            [ 1]  455     sub a,(CPOS,sp)
      000459 4C               [ 1]  456     inc a ; move including zero at end.
      00045A C7 00 0E         [ 1]  457     ld acc8,a 
      00045D 72 5F 00 0D      [ 1]  458     clr acc16 
      000461 CD 0E 6F         [ 4]  459 	call move 
      000464 90 AE 16 90      [ 2]  460     ldw y,#tib 
      000468 7B 01            [ 1]  461     ld a,(CPOS,sp)
      00046A C7 00 0E         [ 1]  462     ld acc8,a 
      00046D 72 B9 00 0D      [ 2]  463     addw y,acc16 
      000471 93               [ 1]  464     ldw x,y 
      000472 CD 03 8F         [ 4]  465     call puts 
      000475 A6 20            [ 1]  466     ld a,#SPACE  
      000477 CD 03 32         [ 4]  467     call putc
      00047A 7B 02            [ 1]  468     ld a,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00047C 10 01            [ 1]  469     sub a,(CPOS,sp)
      00047E CD 03 E0         [ 4]  470     call move_left 
      000481 0A 02            [ 1]  471     dec (LLEN,sp)
      000483                        472 	_drop VSIZE 
      000483 5B 02            [ 2]    1     addw sp,#VSIZE 
      000485 81               [ 4]  473 	ret 
                                    474 
                                    475 ;-----------------------------
                                    476 ; send ANSI sequence to delete
                                    477 ; whole line. Cursor position
                                    478 ; is not updated.
                                    479 ; ANSI: ESC[2K
                                    480 ; input:
                                    481 ;   none
                                    482 ; output:
                                    483 ;   none 
                                    484 ;-----------------------------
      000486                        485 delete_line:
      000486 CD 03 B7         [ 4]  486     call send_escape
      000489 A6 32            [ 1]  487 	ld a,#'2
      00048B CD 03 32         [ 4]  488 	call putc 
      00048E A6 4B            [ 1]  489 	ld a,#'K 
      000490 CD 03 32         [ 4]  490 	call putc 
      000493 81               [ 4]  491 	ret 
                                    492 
                                    493 
                                    494 
                                    495 ;------------------------------------
                                    496 ; read a line of text from terminal
                                    497 ;  touches de contrôle
                                    498 ;    BS   efface caractère à gauche 
                                    499 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    500 ;    CTRL_R  répète dernière ligne saisie
                                    501 ;    CTRL_D  supprime ligne 
                                    502 ;    HOME  va au début de la ligne 
                                    503 ;    KEY_END  va à la fin de la ligne 
                                    504 ;    ARROW_LEFT  un caractère vers la gauche 
                                    505 ;    ARROW_RIGHT  un caractère vers la droite 
                                    506 ;    CTRL_O  commute entre insert/overwrite
                                    507 ; input:
                                    508 ;	none
                                    509 ; local variable on stack:
                                    510 ;	LL  line length
                                    511 ;   RXCHAR last received character 
                                    512 ; output:
                                    513 ;   text in tib  buffer
                                    514 ;   count  line length 
                                    515 ;------------------------------------
                                    516 	; local variables
                           000001   517 	LL_HB=1
                           000001   518 	RXCHAR = 1 ; last char received
                           000002   519 	LL = 2  ; accepted line length
                           000003   520 	CPOS=3  ; cursor position 
                           000004   521 	OVRWR=4 ; overwrite flag 
                           000004   522 	VSIZE=4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000494                        523 readln::
      000494                        524 	_vars VSIZE 
      000494 52 04            [ 2]    1     sub sp,#VSIZE 
      000496 5F               [ 1]  525 	clrw x 
      000497 1F 02            [ 2]  526 	ldw (LL,sp),x 
      000499 1F 03            [ 2]  527 	ldw (CPOS,sp),x 
      00049B 03 04            [ 1]  528 	cpl (OVRWR,sp) ; default to overwrite mode 
      00049D 90 AE 16 90      [ 2]  529  	ldw y,#tib ; input buffer
      0004A1                        530 readln_loop:
      0004A1 CD 03 42         [ 4]  531 	call getc
      0004A4 6B 01            [ 1]  532 	ld (RXCHAR,sp),a
      0004A6 A1 1B            [ 1]  533     cp a,#ESC 
      0004A8 26 05            [ 1]  534     jrne 0$
      0004AA CD 03 69         [ 4]  535     call get_escape 
      0004AD 6B 01            [ 1]  536     ld (RXCHAR,sp),a 
      0004AF A1 0D            [ 1]  537 0$:	cp a,#CR
      0004B1 26 03            [ 1]  538 	jrne 1$
      0004B3 CC 06 3D         [ 2]  539 	jp readln_quit
      0004B6 A1 0A            [ 1]  540 1$:	cp a,#LF 
      0004B8 26 03            [ 1]  541 	jrne 2$ 
      0004BA CC 06 3D         [ 2]  542 	jp readln_quit
      0004BD                        543 2$:
      0004BD A1 08            [ 1]  544 	cp a,#BS
      0004BF 26 12            [ 1]  545 	jrne 3$
                                    546 ; delete left 
      0004C1 0D 03            [ 1]  547     tnz (CPOS,sp)
      0004C3 27 DC            [ 1]  548     jreq readln_loop 
      0004C5 A6 01            [ 1]  549     ld a,#1 
      0004C7 CD 03 E0         [ 4]  550     call move_left
      0004CA 0A 03            [ 1]  551     dec (CPOS,sp)
      0004CC 90 5A            [ 2]  552     decw y 
      0004CE 7B 03            [ 1]  553     ld a,(CPOS,sp) 
      0004D0 CC 05 E9         [ 2]  554     jp 12$
      0004D3                        555 3$:
      0004D3 A1 04            [ 1]  556 	cp a,#CTRL_D
      0004D5 26 1A            [ 1]  557 	jrne 4$
                                    558 ;delete line 
      0004D7 CD 04 86         [ 4]  559 	call delete_line 
      0004DA 7B 03            [ 1]  560     ld a,(CPOS,sp)
      0004DC 4C               [ 1]  561     inc a 
      0004DD CD 03 E0         [ 4]  562     call move_left 
      0004E0 A6 3E            [ 1]  563 	ld a,#'> 
      0004E2 CD 03 32         [ 4]  564 	call putc 
      0004E5 90 AE 16 90      [ 2]  565 	ldw y,#tib
      0004E9 90 7F            [ 1]  566 	clr (y)
      0004EB 0F 02            [ 1]  567 	clr (LL,sp)
      0004ED 0F 03            [ 1]  568 	clr (CPOS,sp)
      0004EF 20 B0            [ 2]  569 	jra readln_loop
      0004F1                        570 4$:
      0004F1 A1 12            [ 1]  571 	cp a,#CTRL_R 
      0004F3 26 21            [ 1]  572 	jrne 5$
                                    573 ;reprint 
      0004F5 0D 02            [ 1]  574 	tnz (LL,sp)
      0004F7 26 A8            [ 1]  575 	jrne readln_loop
      0004F9 AE 16 90         [ 2]  576 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0004FC CD 0E 43         [ 4]  577 	call strlen 
      0004FF 90 AE 16 90      [ 2]  578 	ldw y,#tib 
      000503 27 9C            [ 1]  579 	jreq readln_loop
      000505 6B 02            [ 1]  580 	ld (LL,sp),a 
      000507 6B 03            [ 1]  581     ld (CPOS,sp),a
      000509 AE 16 90         [ 2]  582 	ldw x,#tib 
      00050C CD 03 8F         [ 4]  583 	call puts
      00050F 0F 01            [ 1]  584 	clr (LL_HB,sp)
      000511 72 F9 01         [ 2]  585 	addw y,(LL_HB,sp)
      000514 20 8B            [ 2]  586 	jra readln_loop 
      000516                        587 5$:
      000516 A1 05            [ 1]  588 	cp a,#CTRL_E 
      000518 26 49            [ 1]  589 	jrne 6$
                                    590 ;edit line number 
      00051A AE 16 90         [ 2]  591 	ldw x,#tib 
      00051D CD 13 F0         [ 4]  592 	call atoi24
      000520 CE 00 0D         [ 2]  593 	ldw x,acc16
      000523 CD 06 77         [ 4]  594 	call search_lineno
      000526 5D               [ 2]  595 	tnzw x 
      000527 26 0B            [ 1]  596 	jrne 51$
      000529 0F 02            [ 1]  597 	clr (LL,sp)
      00052B 90 AE 16 90      [ 2]  598 	ldw y,#tib
      00052F 90 7F            [ 1]  599     clr (y) 	
      000531 CC 06 3D         [ 2]  600 	jp readln_quit  
      000534                        601 51$:
      000534 CF 00 04         [ 2]  602 	ldw basicptr,x
      000537 E6 02            [ 1]  603 	ld a,(2,x)
      000539 C7 00 03         [ 1]  604 	ld count,a 
      00053C 90 AE 16 90      [ 2]  605 	ldw y,#tib 
      000540 CD 0B D2         [ 4]  606 	call decompile 
      000543 0F 01            [ 1]  607 	clr (LL_HB,sp)
      000545 A6 0D            [ 1]  608 	ld a,#CR 
      000547 CD 03 32         [ 4]  609 	call putc 
      00054A A6 3E            [ 1]  610 	ld a,#'>
      00054C CD 03 32         [ 4]  611 	call putc
      00054F AE 16 90         [ 2]  612     ldw x,#tib  
      000552 CD 0E 43         [ 4]  613 	call strlen 
      000555 6B 02            [ 1]  614 	ld (LL,sp),a 
      000557 CD 03 8F         [ 4]  615 	call puts 
      00055A 90 93            [ 1]  616 	ldw y,x
      00055C 7B 02            [ 1]  617     ld a,(LL,sp)
      00055E 6B 03            [ 1]  618     ld (CPOS,sp),a  
      000560 CC 04 A1         [ 2]  619 	jp readln_loop
      000563                        620 6$:
      000563 A1 81            [ 1]  621 	cp a,#ARROW_RIGHT
      000565 26 15            [ 1]  622    	jrne 7$ 
                                    623 ; right arrow
      000567 7B 03            [ 1]  624 	ld a,(CPOS,sp)
      000569 11 02            [ 1]  625     cp a,(LL,sp)
      00056B 2B 03            [ 1]  626     jrmi 61$
      00056D CC 04 A1         [ 2]  627     jp readln_loop 
      000570                        628 61$:
      000570 A6 01            [ 1]  629     ld a,#1 
      000572 CD 03 EE         [ 4]  630 	call move_right 
      000575 0C 03            [ 1]  631 	inc (CPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      000577 90 5C            [ 1]  632     incw y 
      000579 CC 04 A1         [ 2]  633     jp readln_loop 
      00057C A1 80            [ 1]  634 7$: cp a,#ARROW_LEFT  
      00057E 26 13            [ 1]  635 	jrne 8$
                                    636 ; left arrow 
      000580 0D 03            [ 1]  637 	tnz (CPOS,sp)
      000582 26 03            [ 1]  638 	jrne 71$
      000584 CC 04 A1         [ 2]  639 	jp readln_loop
      000587                        640 71$:
      000587 A6 01            [ 1]  641     ld a,#1 
      000589 CD 03 E0         [ 4]  642 	call move_left 
      00058C 0A 03            [ 1]  643 	dec (CPOS,sp)
      00058E 90 5A            [ 2]  644     decw y 
      000590 CC 04 A1         [ 2]  645 	jp readln_loop 
      000593 A1 82            [ 1]  646 8$: cp a,#HOME  
      000595 26 0E            [ 1]  647 	jrne 9$
                                    648 ; HOME 
      000597 7B 03            [ 1]  649     ld a,(CPOS,sp)
      000599 CD 03 E0         [ 4]  650     call move_left 
      00059C 0F 03            [ 1]  651 	clr (CPOS,sp)
      00059E 90 AE 16 90      [ 2]  652     ldw y,#tib 
      0005A2 CC 04 A1         [ 2]  653 	jp readln_loop  
      0005A5 A1 83            [ 1]  654 9$: cp a,#KEY_END  
      0005A7 26 26            [ 1]  655 	jrne 10$
                                    656 ; KEY_END 
      0005A9 7B 03            [ 1]  657 	ld a,(CPOS,sp)
      0005AB 11 02            [ 1]  658 	cp a,(LL,sp)
      0005AD 26 03            [ 1]  659 	jrne 91$
      0005AF CC 04 A1         [ 2]  660 	jp readln_loop 
      0005B2                        661 91$:
      0005B2 7B 02            [ 1]  662 	ld a,(LL,sp)
      0005B4 10 03            [ 1]  663 	sub a,(CPOS,sp)
      0005B6 CD 03 EE         [ 4]  664 	call move_right 
      0005B9 7B 02            [ 1]  665 	ld a,(LL,sp)
      0005BB 6B 03            [ 1]  666 	ld (CPOS,sp),a
      0005BD 90 AE 16 90      [ 2]  667     ldw y,#tib
      0005C1 72 5F 00 0D      [ 1]  668     clr acc16 
      0005C5 C7 00 0E         [ 1]  669     ld acc8,a 
      0005C8 72 B9 00 0D      [ 2]  670     addw y,acc16  
      0005CC CC 04 A1         [ 2]  671 	jp readln_loop 
      0005CF A1 0F            [ 1]  672 10$: cp a,#CTRL_O
      0005D1 26 0C            [ 1]  673 	jrne 11$ 
                                    674 ; toggle between insert/overwrite
      0005D3 03 04            [ 1]  675 	cpl (OVRWR,sp)
      0005D5 90 89            [ 2]  676 	pushw y 
      0005D7 CD 1F 51         [ 4]  677 	call beep_1khz
      0005DA 90 85            [ 2]  678 	popw y 
      0005DC CC 04 A1         [ 2]  679 	jp readln_loop 
      0005DF A1 84            [ 1]  680 11$: cp a,#SUP 
      0005E1 26 11            [ 1]  681     jrne final_test 
                                    682 ; del character under cursor 
      0005E3 7B 03            [ 1]  683     ld a,(CPOS,sp)
      0005E5 11 02            [ 1]  684     cp a,(LL,sp)
      0005E7 2A 08            [ 1]  685     jrpl 13$
      0005E9                        686 12$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0005E9 97               [ 1]  687     ld xl,a    ; cursor position 
      0005EA 7B 02            [ 1]  688     ld a,(LL,sp)  ; line length
      0005EC CD 04 4B         [ 4]  689     call delete_under
      0005EF 0A 02            [ 1]  690     dec (LLEN,sp)
      0005F1                        691 13$:
      0005F1 CC 04 A1         [ 2]  692     jp readln_loop 
      0005F4                        693 final_test:
      0005F4 A1 20            [ 1]  694 	cp a,#SPACE
      0005F6 2A 03            [ 1]  695 	jrpl accept_char
      0005F8 CC 04 A1         [ 2]  696 	jp readln_loop
      0005FB                        697 accept_char:
      0005FB A6 4F            [ 1]  698 	ld a,#TIB_SIZE-1
      0005FD 11 02            [ 1]  699 	cp a, (LL,sp)
      0005FF 2A 03            [ 1]  700 	jrpl 1$
      000601 CC 04 A1         [ 2]  701 	jp readln_loop
      000604 0D 04            [ 1]  702 1$:	tnz (OVRWR,sp)
      000606 26 18            [ 1]  703 	jrne overwrite
                                    704 ; insert mode 
      000608 7B 03            [ 1]  705     ld a,(CPOS,sp)
      00060A 11 02            [ 1]  706     cp a,(LL,sp)
      00060C 27 12            [ 1]  707     jreq overwrite
      00060E 7B 02            [ 1]  708     ld a,(LL,sp)
      000610 97               [ 1]  709     ld xl,a 
      000611 7B 03            [ 1]  710     ld a,(CPOS,sp)
      000613 95               [ 1]  711     ld xh,a
      000614 7B 01            [ 1]  712     ld a,(RXCHAR,sp)
      000616 CD 04 08         [ 4]  713     call insert_char
      000619 0C 02            [ 1]  714     inc (LLEN,sp)
      00061B 0C 03            [ 1]  715     inc (CPOS,sp)
      00061D CC 04 A1         [ 2]  716     jp readln_loop 
      000620                        717 overwrite:
      000620 7B 01            [ 1]  718 	ld a,(RXCHAR,sp)
      000622 90 F7            [ 1]  719 	ld (y),a
      000624 90 5C            [ 1]  720     incw y
      000626 CD 03 32         [ 4]  721     call putc 
      000629 7B 03            [ 1]  722 	ld a,(CPOS,sp)
      00062B 11 02            [ 1]  723 	cp a,(LL,sp)
      00062D 2B 09            [ 1]  724 	jrmi 1$
      00062F 90 7F            [ 1]  725 	clr (y)
      000631 0C 02            [ 1]  726 	inc (LL,sp)
      000633 0C 03            [ 1]  727     inc (CPOS,sp)
      000635 CC 04 A1         [ 2]  728 	jp readln_loop 
      000638                        729 1$:	
      000638 0C 03            [ 1]  730 	inc (CPOS,sp)
      00063A CC 04 A1         [ 2]  731 	jp readln_loop 
      00063D                        732 readln_quit:
      00063D 90 AE 16 90      [ 2]  733 	ldw y,#tib
      000641 0F 01            [ 1]  734     clr (LL_HB,sp) 
      000643 72 F9 01         [ 2]  735     addw y,(LL_HB,sp)
      000646 90 7F            [ 1]  736     clr (y)
      000648 7B 02            [ 1]  737 	ld a,(LL,sp)
      00064A C7 00 03         [ 1]  738 	ld count,a 
      00064D A6 0D            [ 1]  739 	ld a,#CR
      00064F CD 03 32         [ 4]  740 	call putc
      000652                        741 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      000652 5B 04            [ 2]    1     addw sp,#VSIZE 
      000654 81               [ 4]  742 	ret
                                    743 
                                    744 ;------------------------------
                                    745 ; print byte  in hexadecimal 
                                    746 ; on console
                                    747 ; input:
                                    748 ;    A		byte to print
                                    749 ;------------------------------
      000655                        750 print_hex::
      000655 88               [ 1]  751 	push a 
      000656 4E               [ 1]  752 	swap a 
      000657 CD 06 6C         [ 4]  753 	call to_hex_char 
      00065A CD 03 32         [ 4]  754 	call putc 
      00065D 7B 01            [ 1]  755     ld a,(1,sp) 
      00065F CD 06 6C         [ 4]  756 	call to_hex_char
      000662 CD 03 32         [ 4]  757 	call putc
      000665 A6 20            [ 1]  758 	ld a,#SPACE 
      000667 CD 03 32         [ 4]  759 	call putc 
      00066A 84               [ 1]  760 	pop a 
      00066B 81               [ 4]  761 	ret 
                                    762 
                                    763 ;----------------------------------
                                    764 ; convert to hexadecimal digit 
                                    765 ; input:
                                    766 ;   A       digit to convert 
                                    767 ; output:
                                    768 ;   A       hexdecimal character 
                                    769 ;----------------------------------
      00066C                        770 to_hex_char::
      00066C A4 0F            [ 1]  771 	and a,#15 
      00066E A1 09            [ 1]  772 	cp a,#9 
      000670 23 02            [ 2]  773 	jrule 1$ 
      000672 AB 07            [ 1]  774 	add a,#7
      000674 AB 30            [ 1]  775 1$: add a,#'0 
      000676 81               [ 4]  776 	ret 
                                    777 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000677                         51 search_lineno::
      000677                         52 	_vars VSIZE
      000677 52 02            [ 2]    1     sub sp,#VSIZE 
      000679 0F 01            [ 1]   53 	clr (LL,sp)
      00067B 90 CE 00 1A      [ 2]   54 	ldw y,txtbgn
      00067F 4D               [ 1]   55 	tnz a 
      000680 27 04            [ 1]   56 	jreq search_ln_loop
      000682 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000686                         58 search_ln_loop:
      000686 90 C3 00 1C      [ 2]   59 	cpw y,txtend 
      00068A 2A 10            [ 1]   60 	jrpl 8$
      00068C 90 F3            [ 1]   61 	cpw x,(y)
      00068E 27 0E            [ 1]   62 	jreq 9$
      000690 2B 0A            [ 1]   63 	jrmi 8$ 
      000692 90 E6 02         [ 1]   64 	ld a,(2,y)
      000695 6B 02            [ 1]   65 	ld (LB,sp),a 
      000697 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      00069A 20 EA            [ 2]   67 	jra search_ln_loop 
      00069C                         68 8$: 
      00069C 5F               [ 1]   69 	clrw x 	
      00069D 51               [ 1]   70 	exgw x,y 
      00069E                         71 9$: _drop VSIZE
      00069E 5B 02            [ 2]    1     addw sp,#VSIZE 
      0006A0 51               [ 1]   72 	exgw x,y   
      0006A1 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      0006A2                         83 del_line: 
      0006A2                         84 	_vars VSIZE 
      0006A2 52 04            [ 2]    1     sub sp,#VSIZE 
      0006A4 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      0006A6 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      0006A8 0F 01            [ 1]   87 	clr (LLEN,sp)
      0006AA 90 93            [ 1]   88 	ldw y,x  
      0006AC 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      0006AF 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      0006B1 90 CE 00 1C      [ 2]   91 	ldw y,txtend 
      0006B5 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      0006B8 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      0006BC 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      0006BE CD 0E 6F         [ 4]   95 	call move
      0006C1 90 CE 00 1C      [ 2]   96 	ldw y,txtend 
      0006C5 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      0006C8 90 CF 00 1C      [ 2]   98 	ldw txtend,y  
      0006CC                         99 	_drop VSIZE     
      0006CC 5B 04            [ 2]    1     addw sp,#VSIZE 
      0006CE 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      0006CF                        115 create_gap:
      0006CF                        116 	_vars VSIZE
      0006CF 52 06            [ 2]    1     sub sp,#VSIZE 
      0006D1 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      0006D3 17 05            [ 2]  118 	ldw (LEN,sp),y 
      0006D5 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      0006D9 90 93            [ 1]  120 	ldw y,x ; SRC
      0006DB 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      0006DF 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      0006E1 CE 00 1C         [ 2]  124 	ldw x,txtend 
      0006E4 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      0006E7 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      0006EA 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      0006EC CD 0E 6F         [ 4]  128 	call move
      0006EF CE 00 1C         [ 2]  129 	ldw x,txtend
      0006F2 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      0006F5 CF 00 1C         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0006F8                        132 9$:	_drop VSIZE 
      0006F8 5B 06            [ 2]    1     addw sp,#VSIZE 
      0006FA 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      0006FB                        150 insert_line:
      0006FB                        151 	_vars VSIZE 
      0006FB 52 08            [ 2]    1     sub sp,#VSIZE 
      0006FD CE 00 1C         [ 2]  152 	ldw x,txtend  
      000700 C3 00 1A         [ 2]  153 	cpw x,txtbgn 
      000703 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000705 AE 00 02         [ 2]  156 	ldw x,#2 
      000708 72 D6 00 18      [ 4]  157 	ld a,([ptr16],x)
      00070C A1 03            [ 1]  158 	cp a,#3
      00070E 27 5A            [ 1]  159 	jreq insert_ln_exit
      000710 5F               [ 1]  160 	clrw x 
      000711 97               [ 1]  161 	ld xl,a
      000712 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000714 CE 00 1A         [ 2]  163 	ldw x,txtbgn
      000717 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000719 CE 00 1C         [ 2]  165 	ldw x,txtend 
      00071C 20 38            [ 2]  166 	jra 4$
      00071E 72 CE 00 18      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000722 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000724 AE 00 02         [ 2]  170 	ldw x,#2 
      000727 72 D6 00 18      [ 4]  171 	ld a,([ptr16],x)
      00072B 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      00072C 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      00072E 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000730 4F               [ 1]  177 	clr a 
      000731 CD 06 77         [ 4]  178 	call search_lineno 
      000734 5D               [ 2]  179 	tnzw x 
      000735 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000737 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000739 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      00073B 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      00073D CD 06 A2         [ 4]  188 	call del_line
      000740                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000740 A6 03            [ 1]  192 	ld a,#3
      000742 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000744 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000746 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000748 C3 00 1C         [ 2]  198 	cpw x,txtend 
      00074B 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      00074D 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      00074F 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000751 CD 06 CF         [ 4]  204 	call create_gap
      000754 20 06            [ 2]  205 	jra 5$
      000756                        206 4$: 
      000756 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000759 CF 00 1C         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      00075C 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      00075E CF 00 0D         [ 2]  211 	ldw acc16,x 
      000761 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      000765 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000767 CD 0E 6F         [ 4]  214 	call move 
      00076A                        215 insert_ln_exit:	
      00076A                        216 	_drop VSIZE
      00076A 5B 08            [ 2]    1     addw sp,#VSIZE 
      00076C 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      00076D                        233 parse_quote: 
      00076D                        234 	_vars VSIZE 
      00076D 52 02            [ 2]    1     sub sp,#VSIZE 
      00076F 4F               [ 1]  235 	clr a
      000770 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000772                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      000772 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000775 27 24            [ 1]  239 	jreq 6$
      000777 72 5C 00 01      [ 1]  240 	inc in 
      00077B 6B 02            [ 1]  241 	ld (CURR,sp),a 
      00077D A6 5C            [ 1]  242 	ld a,#'\
      00077F 11 01            [ 1]  243 	cp a, (PREV,sp)
      000781 26 0A            [ 1]  244 	jrne 3$
      000783 0F 01            [ 1]  245 	clr (PREV,sp)
      000785 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000787 AD 1C            [ 4]  247 	callr convert_escape
      000789 F7               [ 1]  248 	ld (x),a 
      00078A 5C               [ 1]  249 	incw x 
      00078B 20 E5            [ 2]  250 	jra 2$
      00078D                        251 3$:
      00078D 7B 02            [ 1]  252 	ld a,(CURR,sp)
      00078F A1 5C            [ 1]  253 	cp a,#'\'
      000791 27 DD            [ 1]  254 	jreq 1$
      000793 A1 22            [ 1]  255 	cp a,#'"
      000795 27 04            [ 1]  256 	jreq 6$ 
      000797 F7               [ 1]  257 	ld (x),a 
      000798 5C               [ 1]  258 	incw x 
      000799 20 D7            [ 2]  259 	jra 2$
      00079B                        260 6$:
      00079B 7F               [ 1]  261 	clr (x)
      00079C 5C               [ 1]  262 	incw x 
      00079D 90 93            [ 1]  263 	ldw y,x 
      00079F 5F               [ 1]  264 	clrw x 
      0007A0 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      0007A2                        266 	_drop VSIZE
      0007A2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0007A4 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      0007A5                        278 convert_escape:
      0007A5 89               [ 2]  279 	pushw x 
      0007A6 AE 07 BA         [ 2]  280 	ldw x,#escaped 
      0007A9 F1               [ 1]  281 1$:	cp a,(x)
      0007AA 27 06            [ 1]  282 	jreq 2$
      0007AC 7D               [ 1]  283 	tnz (x)
      0007AD 27 09            [ 1]  284 	jreq 3$
      0007AF 5C               [ 1]  285 	incw x 
      0007B0 20 F7            [ 2]  286 	jra 1$
      0007B2 1D 07 BA         [ 2]  287 2$: subw x,#escaped 
      0007B5 9F               [ 1]  288 	ld a,xl 
      0007B6 AB 07            [ 1]  289 	add a,#7
      0007B8 85               [ 2]  290 3$:	popw x 
      0007B9 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                    292 
      0007BA 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      0007C2                        310 parse_integer: ; { -- n }
      0007C2 89               [ 2]  311 	pushw x 	
      0007C3 4B 00            [ 1]  312 	push #0 ; TCHAR
      0007C5 4B 0A            [ 1]  313 	push #10 ; BASE=10
      0007C7 A1 24            [ 1]  314 	cp a,#'$
      0007C9 26 04            [ 1]  315 	jrne 2$ 
      0007CB                        316     _drop #1
      0007CB 5B 01            [ 2]    1     addw sp,##1 
      0007CD 4B 10            [ 1]  317 	push #16  ; BASE=16
      0007CF F7               [ 1]  318 2$:	ld (x),a 
      0007D0 5C               [ 1]  319 	incw x 
      0007D1 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      0007D4 72 5C 00 01      [ 1]  321 	inc in 
      0007D8 CD 13 E4         [ 4]  322 	call to_upper 
      0007DB 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      0007DD CD 08 5A         [ 4]  324 	call is_digit 
      0007E0 25 ED            [ 1]  325 	jrc 2$
      0007E2 A6 10            [ 1]  326 	ld a,#16 
      0007E4 11 01            [ 1]  327 	cp a,(BASE,sp)
      0007E6 26 0A            [ 1]  328 	jrne 3$ 
      0007E8 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      0007EA A1 41            [ 1]  330 	cp a,#'A 
      0007EC 2B 04            [ 1]  331 	jrmi 3$ 
      0007EE A1 47            [ 1]  332 	cp a,#'G 
      0007F0 2B DD            [ 1]  333 	jrmi 2$ 
      0007F2 72 5A 00 01      [ 1]  334 3$: dec in 	
      0007F6 7F               [ 1]  335     clr (x)
      0007F7 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      0007F9 CD 13 F0         [ 4]  337 	call atoi24
      0007FC 90 93            [ 1]  338 	ldw y,x 
      0007FE CE 00 0D         [ 2]  339 	ldw x,acc16 
      000801 A6 84            [ 1]  340 	ld a,#TK_INTGR
      000803 90 FF            [ 2]  341 	ldw (y),x 
      000805 72 A9 00 02      [ 2]  342 	addw y,#2
      000809                        343 	_drop VSIZE  
      000809 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00080B 81               [ 4]  344 	ret 	
                                    345 
                                    346 ;-------------------------
                                    347 ; binary integer parser
                                    348 ; build integer in acc24  
                                    349 ; input:
                                    350 ;   X 		point to output buffer  
                                    351 ;   Y 		point to tib 
                                    352 ;   A 	    '&' 
                                    353 ; output:  
                                    354 ;   buffer  TK_INTGR integer  
                                    355 ;   X 		int16 
                                    356 ;   A 		TK_INTGR
                                    357 ;   acc24    int24 
                                    358 ;-------------------------
                           000001   359 	BINARY=1 ; 24 bits integer 
                           000003   360 	VSIZE=3
      00080C                        361 parse_binary: ; { -- n }
      00080C 4B 00            [ 1]  362 	push #0
      00080E 4B 00            [ 1]  363 	push #0
      000810 4B 00            [ 1]  364 	push #0
      000812                        365 2$:	
      000812 91 D6 00         [ 4]  366 	ld a,([in.w],y)
      000815 72 5C 00 01      [ 1]  367 	inc in 
      000819 A1 30            [ 1]  368 	cp a,#'0 
      00081B 27 06            [ 1]  369 	jreq 3$
      00081D A1 31            [ 1]  370 	cp a,#'1 
      00081F 27 02            [ 1]  371 	jreq 3$ 
      000821 20 0B            [ 2]  372 	jra bin_exit 
      000823 A0 30            [ 1]  373 3$: sub a,#'0 
      000825 46               [ 1]  374 	rrc a
      000826 09 03            [ 1]  375 	rlc (BINARY+2,sp) 
      000828 09 02            [ 1]  376 	rlc (BINARY+1,sp)
      00082A 09 01            [ 1]  377 	rlc (BINARY,sp) 
      00082C 20 E4            [ 2]  378 	jra 2$  
      00082E                        379 bin_exit:
      00082E 72 5A 00 01      [ 1]  380 	dec in 
      000832 90 93            [ 1]  381 	ldw y,x
      000834 7B 01            [ 1]  382 	ld a,(BINARY,sp)
      000836 C7 00 0C         [ 1]  383 	ld acc24,a 
      000839 1E 02            [ 2]  384 	ldw x,(BINARY+1,sp)
      00083B CF 00 0D         [ 2]  385 	ldw acc16,x
      00083E 90 FF            [ 2]  386 	ldw (y),x 
      000840 72 A9 00 02      [ 2]  387 	addw y,#2  
      000844 A6 84            [ 1]  388 	ld a,#TK_INTGR 	
      000846                        389 	_drop VSIZE 
      000846 5B 03            [ 2]    1     addw sp,#VSIZE 
      000848 81               [ 4]  390 	ret
                                    391 
                                    392 ;-------------------------------------
                                    393 ; check if A is a letter 
                                    394 ; input:
                                    395 ;   A 			character to test 
                                    396 ; output:
                                    397 ;   C flag      1 true, 0 false 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                    398 ;-------------------------------------
      000849                        399 is_alpha::
      000849 A1 41            [ 1]  400 	cp a,#'A 
      00084B 8C               [ 1]  401 	ccf 
      00084C 24 0B            [ 1]  402 	jrnc 9$ 
      00084E A1 5B            [ 1]  403 	cp a,#'Z+1 
      000850 25 07            [ 1]  404 	jrc 9$ 
      000852 A1 61            [ 1]  405 	cp a,#'a 
      000854 8C               [ 1]  406 	ccf 
      000855 24 02            [ 1]  407 	jrnc 9$
      000857 A1 7B            [ 1]  408 	cp a,#'z+1
      000859 81               [ 4]  409 9$: ret 	
                                    410 
                                    411 ;------------------------------------
                                    412 ; check if character in {'0'..'9'}
                                    413 ; input:
                                    414 ;    A  character to test
                                    415 ; output:
                                    416 ;    Carry  0 not digit | 1 digit
                                    417 ;------------------------------------
      00085A                        418 is_digit::
      00085A A1 30            [ 1]  419 	cp a,#'0
      00085C 25 03            [ 1]  420 	jrc 1$
      00085E A1 3A            [ 1]  421     cp a,#'9+1
      000860 8C               [ 1]  422 	ccf 
      000861 8C               [ 1]  423 1$:	ccf 
      000862 81               [ 4]  424     ret
                                    425 
                                    426 ;-------------------------------------
                                    427 ; return true if character in  A 
                                    428 ; is letter or digit.
                                    429 ; input:
                                    430 ;   A     ASCII character 
                                    431 ; output:
                                    432 ;   A     no change 
                                    433 ;   Carry    0 false| 1 true 
                                    434 ;--------------------------------------
      000863                        435 is_alnum::
      000863 CD 08 5A         [ 4]  436 	call is_digit
      000866 25 03            [ 1]  437 	jrc 1$ 
      000868 CD 08 49         [ 4]  438 	call is_alpha
      00086B 81               [ 4]  439 1$:	ret 
                                    440 
                                    441 ;-----------------------------
                                    442 ; check if character in A 
                                    443 ; is a valid symbol character 
                                    444 ; valid: Upper case LETTER,DIGIT,'_' 
                                    445 ; input:
                                    446 ;    A   character to validate
                                    447 ; output:
                                    448 ;    Carry   set if valid 
                                    449 ;----------------------------
      00086C                        450 is_symbol_char: 
      00086C A1 5F            [ 1]  451 	cp a,#'_ 
      00086E 26 03            [ 1]  452 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      000870 99               [ 1]  453 	scf 
      000871 20 03            [ 2]  454 	jra 9$ 
      000873 CD 08 63         [ 4]  455 1$:	call is_alnum 
      000876 81               [ 4]  456 9$: ret 
                                    457 
                                    458 ;---------------------------
                                    459 ;  when lexical unit begin 
                                    460 ;  with a letter a symbol 
                                    461 ;  is expected.
                                    462 ; input:
                                    463 ;   A   first character of symbol 
                                    464 ;	X   point to output buffer 
                                    465 ;   Y   point to input text 
                                    466 ; output:
                                    467 ;	X   after symbol 
                                    468 ;   Y   point after lexical unit 
                                    469 ;---------------------------
      000877                        470 parse_symbol:
      000877 5C               [ 1]  471 	incw x ; keep space for TK_ID 
      000878                        472 symb_loop: 
                                    473 ; symbol are converted to upper case 
      000878 CD 13 E4         [ 4]  474 	call to_upper  
      00087B F7               [ 1]  475 	ld (x), a 
      00087C 5C               [ 1]  476 	incw x
      00087D 91 D6 00         [ 4]  477 	ld a,([in.w],y)
      000880 72 5C 00 01      [ 1]  478 	inc in 
      000884 CD 08 6C         [ 4]  479 	call is_symbol_char 
      000887 25 EF            [ 1]  480 	jrc symb_loop 
      000889 7F               [ 1]  481 	clr (x)
      00088A 72 5A 00 01      [ 1]  482 	dec in  
      00088E 81               [ 4]  483 	ret 
                                    484 
                                    485 ;---------------------------
                                    486 ;  token begin with a letter,
                                    487 ;  is keyword or variable. 	
                                    488 ; input:
                                    489 ;   X 		point to pad 
                                    490 ;   Y 		point to text
                                    491 ;   A 	    first letter  
                                    492 ; output:
                                    493 ;   X		exec_addr|var_addr 
                                    494 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    495 ;   pad 	keyword|var_name  
                                    496 ;--------------------------  
                           000001   497 	XFIRST=1
                           000002   498 	VSIZE=2
      00088F                        499 parse_keyword: 
      00088F 89               [ 2]  500 	pushw x ; preserve *symbol 
      000890 CD 08 77         [ 4]  501 	call parse_symbol
      000893 1E 01            [ 2]  502 	ldw x,(XFIRST,sp) 
      000895 E6 02            [ 1]  503 	ld a,(2,x)
      000897 26 14            [ 1]  504 	jrne 2$
                                    505 ; one letter variable name 
      000899 E6 01            [ 1]  506 	ld a,(1,x) 
      00089B A0 41            [ 1]  507 	sub a,#'A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      00089D 48               [ 1]  508 	sll a 
      00089E 88               [ 1]  509 	push a 
      00089F 4B 00            [ 1]  510 	push #0
      0008A1 AE 00 2F         [ 2]  511 	ldw x,#vars 
      0008A4 72 FB 01         [ 2]  512 	addw x,(1,sp) ; X=var address 
      0008A7                        513 	_drop 2 
      0008A7 5B 02            [ 2]    1     addw sp,#2 
      0008A9 A6 85            [ 1]  514 	ld a,#TK_VAR 
      0008AB 20 24            [ 2]  515 	jra 4$ 
      0008AD                        516 2$: ; check for keyword, otherwise syntax error.
      0008AD                        517 	_ldx_dict kword_dict ; dictionary entry point
      0008AD AE 2C 4B         [ 2]    1     ldw x,#kword_dict+2
      0008B0 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      0008B2 90 5C            [ 1]  519 	incw y 
      0008B4 CD 15 D7         [ 4]  520 	call search_dict
      0008B7 4D               [ 1]  521 	tnz a
      0008B8 26 17            [ 1]  522 	jrne 4$ 
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      0008BA 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      0008BC A6 03            [ 1]  526 	ld a,#TK_LABEL 
      0008BE 90 F7            [ 1]  527 	ld (y),a 
      0008C0 90 5C            [ 1]  528 	incw y
      0008C2                        529 24$:	
      0008C2 90 F6            [ 1]  530     ld a,(y)
      0008C4 27 04            [ 1]  531 	jreq 3$
      0008C6 90 5C            [ 1]  532 	incw y 
      0008C8 20 F8            [ 2]  533 	jra 24$ 
      0008CA 90 5C            [ 1]  534 3$: incw y 
      0008CC A6 03            [ 1]  535 	ld a,#TK_LABEL 
      0008CE 5F               [ 1]  536 	clrw x 	
      0008CF 20 11            [ 2]  537 	jra 5$ 
      0008D1                        538 4$:	
      0008D1 16 01            [ 2]  539 	ldw y,(XFIRST,sp)
      0008D3 A3 00 4E         [ 2]  540 	cpw x,#LET_IDX 
      0008D6 27 0A            [ 1]  541 	jreq 5$  ; don't compile LET command 
      0008D8 90 F7            [ 1]  542 	ld (y),a 
      0008DA 90 5C            [ 1]  543 	incw y 
      0008DC 90 FF            [ 2]  544 	ldw (y),x
      0008DE 72 A9 00 02      [ 2]  545 	addw y,#2  
      0008E2                        546 5$:	_drop VSIZE 
      0008E2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0008E4 81               [ 4]  547 	ret  	
                                    548 
                                    549 ;------------------------------------
                                    550 ; skip character c in text starting from 'in'
                                    551 ; input:
                                    552 ;	 y 		point to text buffer
                                    553 ;    a 		character to skip
                                    554 ; output:  
                                    555 ;	'in' ajusted to new position
                                    556 ;------------------------------------
                           000001   557 	C = 1 ; local var
      0008E5                        558 skip:
      0008E5 88               [ 1]  559 	push a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0008E6 91 D6 00         [ 4]  560 1$:	ld a,([in.w],y)
      0008E9 27 0A            [ 1]  561 	jreq 2$
      0008EB 11 01            [ 1]  562 	cp a,(C,sp)
      0008ED 26 06            [ 1]  563 	jrne 2$
      0008EF 72 5C 00 01      [ 1]  564 	inc in
      0008F3 20 F1            [ 2]  565 	jra 1$
      0008F5                        566 2$: _drop 1 
      0008F5 5B 01            [ 2]    1     addw sp,#1 
      0008F7 81               [ 4]  567 	ret
                                    568 	
                                    569 
                                    570 ;------------------------------------
                                    571 ; scan text for next token
                                    572 ; input: 
                                    573 ;	X 		pointer to buffer where 
                                    574 ;	        token id and value are copied 
                                    575 ; use:
                                    576 ;	Y   pointer to text in tib 
                                    577 ; output:
                                    578 ;   A       token attribute 
                                    579 ;   X 		token value
                                    580 ;   Y       updated position in output buffer   
                                    581 ;------------------------------------
                                    582 	; use to check special character 
                                    583 	.macro _case c t  
                                    584 	ld a,#c 
                                    585 	cp a,(TCHAR,sp) 
                                    586 	jrne t
                                    587 	.endm 
                                    588 
                           000001   589 	TCHAR=1
                           000002   590 	ATTRIB=2
                           000002   591 	VSIZE=2
      0008F8                        592 get_token:: 
      0008F8                        593 	_vars VSIZE
      0008F8 52 02            [ 2]    1     sub sp,#VSIZE 
                                    594 ;	ld a,in 
                                    595 ;	sub a,count
                                    596 ;   jrmi 0$
                                    597 ;	clr a 
                                    598 ;	ret 
      0008FA                        599 0$: 
      0008FA 90 AE 16 90      [ 2]  600 	ldw y,#tib    	
      0008FE A6 20            [ 1]  601 	ld a,#SPACE
      000900 CD 08 E5         [ 4]  602 	call skip
      000903 55 00 01 00 02   [ 1]  603 	mov in.saved,in 
      000908 91 D6 00         [ 4]  604 	ld a,([in.w],y)
      00090B 26 05            [ 1]  605 	jrne 1$
      00090D 90 93            [ 1]  606 	ldw y,x 
      00090F CC 0A B4         [ 2]  607 	jp token_exit ; end of line 
      000912 72 5C 00 01      [ 1]  608 1$:	inc in 
      000916 CD 13 E4         [ 4]  609 	call to_upper 
      000919 6B 01            [ 1]  610 	ld (TCHAR,sp),a 
                                    611 ; check for quoted string
      00091B                        612 str_tst:  	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      00091B                        613 	_case '"' nbr_tst
      00091B A6 22            [ 1]    1 	ld a,#'"' 
      00091D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00091F 26 0A            [ 1]    3 	jrne nbr_tst
      000921 A6 02            [ 1]  614 	ld a,#TK_QSTR
      000923 F7               [ 1]  615 	ld (x),a 
      000924 5C               [ 1]  616 	incw x 
      000925 CD 07 6D         [ 4]  617 	call parse_quote
      000928 CC 0A B4         [ 2]  618 	jp token_exit
      00092B                        619 nbr_tst:
                                    620 ; check for hexadecimal number 
      00092B A6 24            [ 1]  621 	ld a,#'$'
      00092D 11 01            [ 1]  622 	cp a,(TCHAR,sp) 
      00092F 27 17            [ 1]  623 	jreq 1$
                                    624 ;check for binary number 
      000931 A6 26            [ 1]  625 	ld a,#'&
      000933 11 01            [ 1]  626 	cp a,(TCHAR,sp)
      000935 26 0A            [ 1]  627 	jrne 0$
      000937 A6 84            [ 1]  628 	ld a,#TK_INTGR
      000939 F7               [ 1]  629 	ld (x),a 
      00093A 5C               [ 1]  630 	incw x 
      00093B CD 08 0C         [ 4]  631 	call parse_binary ; expect binary integer 
      00093E CC 0A B4         [ 2]  632 	jp token_exit 
                                    633 ; check for decimal number 	
      000941 7B 01            [ 1]  634 0$:	ld a,(TCHAR,sp)
      000943 CD 08 5A         [ 4]  635 	call is_digit
      000946 24 0C            [ 1]  636 	jrnc 3$
      000948 A6 84            [ 1]  637 1$:	ld a,#TK_INTGR 
      00094A F7               [ 1]  638 	ld (x),a 
      00094B 5C               [ 1]  639 	incw x 
      00094C 7B 01            [ 1]  640 	ld a,(TCHAR,sp)
      00094E CD 07 C2         [ 4]  641 	call parse_integer 
      000951 CC 0A B4         [ 2]  642 	jp token_exit 
      000954                        643 3$: 
      000954                        644 	_case '(' bkslsh_tst 
      000954 A6 28            [ 1]    1 	ld a,#'(' 
      000956 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000958 26 05            [ 1]    3 	jrne bkslsh_tst
      00095A A6 07            [ 1]  645 	ld a,#TK_LPAREN
      00095C CC 0A B0         [ 2]  646 	jp token_char   	
      00095F                        647 bkslsh_tst: ; character token 
      00095F                        648 	_case '\',rparnt_tst
      00095F A6 5C            [ 1]    1 	ld a,#'\' 
      000961 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000963 26 16            [ 1]    3 	jrne rparnt_tst
      000965 A6 04            [ 1]  649 	ld a,#TK_CHAR 
      000967 F7               [ 1]  650 	ld (x),a 
      000968 5C               [ 1]  651 	incw x 
      000969 91 D6 00         [ 4]  652 	ld a,([in.w],y)
      00096C F7               [ 1]  653 	ld (x),a 
      00096D 5C               [ 1]  654 	incw x
      00096E 90 93            [ 1]  655 	ldw y,x 	 
      000970 72 5C 00 01      [ 1]  656 	inc in  
      000974 5F               [ 1]  657 	clrw x 
      000975 97               [ 1]  658 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000976 A6 04            [ 1]  659 	ld a,#TK_CHAR 
      000978 CC 0A B4         [ 2]  660 	jp token_exit 
      00097B                        661 rparnt_tst:		
      00097B                        662 	_case ')' colon_tst 
      00097B A6 29            [ 1]    1 	ld a,#')' 
      00097D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00097F 26 05            [ 1]    3 	jrne colon_tst
      000981 A6 08            [ 1]  663 	ld a,#TK_RPAREN 
      000983 CC 0A B0         [ 2]  664 	jp token_char
      000986                        665 colon_tst:
      000986                        666 	_case ':' comma_tst 
      000986 A6 3A            [ 1]    1 	ld a,#':' 
      000988 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00098A 26 05            [ 1]    3 	jrne comma_tst
      00098C A6 0B            [ 1]  667 	ld a,#TK_COLON 
      00098E CC 0A B0         [ 2]  668 	jp token_char  
      000991                        669 comma_tst:
      000991                        670 	_case COMMA sharp_tst 
      000991 A6 2C            [ 1]    1 	ld a,#COMMA 
      000993 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000995 26 05            [ 1]    3 	jrne sharp_tst
      000997 A6 09            [ 1]  671 	ld a,#TK_COMMA
      000999 CC 0A B0         [ 2]  672 	jp token_char
      00099C                        673 sharp_tst:
      00099C                        674 	_case SHARP dash_tst 
      00099C A6 23            [ 1]    1 	ld a,#SHARP 
      00099E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009A0 26 05            [ 1]    3 	jrne dash_tst
      0009A2 A6 0A            [ 1]  675 	ld a,#TK_SHARP
      0009A4 CC 0A B0         [ 2]  676 	jp token_char  	 	 
      0009A7                        677 dash_tst: 	
      0009A7                        678 	_case '-' at_tst 
      0009A7 A6 2D            [ 1]    1 	ld a,#'-' 
      0009A9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009AB 26 05            [ 1]    3 	jrne at_tst
      0009AD A6 11            [ 1]  679 	ld a,#TK_MINUS  
      0009AF CC 0A B0         [ 2]  680 	jp token_char 
      0009B2                        681 at_tst:
      0009B2                        682 	_case '@' qmark_tst 
      0009B2 A6 40            [ 1]    1 	ld a,#'@' 
      0009B4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009B6 26 05            [ 1]    3 	jrne qmark_tst
      0009B8 A6 05            [ 1]  683 	ld a,#TK_ARRAY 
      0009BA CC 0A B0         [ 2]  684 	jp token_char
      0009BD                        685 qmark_tst:
      0009BD                        686 	_case '?' tick_tst 
      0009BD A6 3F            [ 1]    1 	ld a,#'?' 
      0009BF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009C1 26 12            [ 1]    3 	jrne tick_tst
      0009C3 A6 80            [ 1]  687 	ld a,#TK_CMD  
      0009C5 F7               [ 1]  688 	ld (x),a 
      0009C6 5C               [ 1]  689 	incw x 
      0009C7 90 93            [ 1]  690 	ldw y,x 
      0009C9 AE 00 70         [ 2]  691 	ldw x,#PRT_IDX 
      0009CC 90 FF            [ 2]  692 	ldw (y),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0009CE 72 A9 00 02      [ 2]  693 	addw y,#2
      0009D2 CC 0A B4         [ 2]  694 	jp token_exit
      0009D5                        695 tick_tst: ; comment 
      0009D5                        696 	_case TICK plus_tst 
      0009D5 A6 27            [ 1]    1 	ld a,#TICK 
      0009D7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009D9 26 35            [ 1]    3 	jrne plus_tst
      0009DB A6 80            [ 1]  697 	ld a,#TK_CMD
      0009DD F7               [ 1]  698 	ld (x),a 
      0009DE 5C               [ 1]  699 	incw x
      0009DF 90 AE 00 8A      [ 2]  700 	ldw y,#REM_IDX
      0009E3 FF               [ 2]  701 	ldw (x),y 
      0009E4 1C 00 02         [ 2]  702 	addw x,#2  
      0009E7                        703 copy_comment:
      0009E7 90 AE 16 90      [ 2]  704 	ldw y,#tib 
      0009EB 72 B9 00 00      [ 2]  705 	addw y,in.w
      0009EF 90 89            [ 2]  706 	pushw y
      0009F1 CD 0E 5F         [ 4]  707 	call strcpy
      0009F4 72 F2 01         [ 2]  708     subw y,(1,sp)
      0009F7 90 9F            [ 1]  709 	ld a,yl 
      0009F9 CB 00 01         [ 1]  710 	add a,in
      0009FC C7 00 01         [ 1]  711 	ld in,a 
      0009FF 1F 01            [ 2]  712 	ldw (1,sp),x
      000A01 72 F9 01         [ 2]  713 	addw y,(1,sp)
      000A04 90 5C            [ 1]  714 	incw y 
      000A06                        715 	_drop 2 
      000A06 5B 02            [ 2]    1     addw sp,#2 
      000A08 AE 00 8A         [ 2]  716 	ldw x,#REM_IDX 
      000A0B A6 80            [ 1]  717 	ld a,#TK_CMD 
      000A0D CC 0A B4         [ 2]  718 	jp token_exit 
      000A10                        719 plus_tst:
      000A10                        720 	_case '+' star_tst 
      000A10 A6 2B            [ 1]    1 	ld a,#'+' 
      000A12 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000A14 26 05            [ 1]    3 	jrne star_tst
      000A16 A6 10            [ 1]  721 	ld a,#TK_PLUS  
      000A18 CC 0A B0         [ 2]  722 	jp token_char 
      000A1B                        723 star_tst:
      000A1B                        724 	_case '*' slash_tst 
      000A1B A6 2A            [ 1]    1 	ld a,#'*' 
      000A1D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000A1F 26 05            [ 1]    3 	jrne slash_tst
      000A21 A6 20            [ 1]  725 	ld a,#TK_MULT 
      000A23 CC 0A B0         [ 2]  726 	jp token_char 
      000A26                        727 slash_tst: 
      000A26                        728 	_case '/' prcnt_tst 
      000A26 A6 2F            [ 1]    1 	ld a,#'/' 
      000A28 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000A2A 26 05            [ 1]    3 	jrne prcnt_tst
      000A2C A6 21            [ 1]  729 	ld a,#TK_DIV 
      000A2E CC 0A B0         [ 2]  730 	jp token_char 
      000A31                        731 prcnt_tst:
      000A31                        732 	_case '%' eql_tst 
      000A31 A6 25            [ 1]    1 	ld a,#'%' 
      000A33 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000A35 26 05            [ 1]    3 	jrne eql_tst
      000A37 A6 22            [ 1]  733 	ld a,#TK_MOD
      000A39 CC 0A B0         [ 2]  734 	jp token_char  
                                    735 ; 1 or 2 character tokens 	
      000A3C                        736 eql_tst:
      000A3C                        737 	_case '=' gt_tst 		
      000A3C A6 3D            [ 1]    1 	ld a,#'=' 
      000A3E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000A40 26 05            [ 1]    3 	jrne gt_tst
      000A42 A6 32            [ 1]  738 	ld a,#TK_EQUAL
      000A44 CC 0A B0         [ 2]  739 	jp token_char 
      000A47                        740 gt_tst:
      000A47                        741 	_case '>' lt_tst 
      000A47 A6 3E            [ 1]    1 	ld a,#'>' 
      000A49 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000A4B 26 23            [ 1]    3 	jrne lt_tst
      000A4D A6 31            [ 1]  742 	ld a,#TK_GT 
      000A4F 6B 02            [ 1]  743 	ld (ATTRIB,sp),a 
      000A51 91 D6 00         [ 4]  744 	ld a,([in.w],y)
      000A54 72 5C 00 01      [ 1]  745 	inc in 
      000A58 A1 3D            [ 1]  746 	cp a,#'=
      000A5A 26 04            [ 1]  747 	jrne 1$
      000A5C A6 33            [ 1]  748 	ld a,#TK_GE 
      000A5E 20 50            [ 2]  749 	jra token_char  
      000A60 A1 3C            [ 1]  750 1$: cp a,#'<
      000A62 26 04            [ 1]  751 	jrne 2$
      000A64 A6 35            [ 1]  752 	ld a,#TK_NE 
      000A66 20 48            [ 2]  753 	jra token_char 
      000A68 72 5A 00 01      [ 1]  754 2$: dec in
      000A6C 7B 02            [ 1]  755 	ld a,(ATTRIB,sp)
      000A6E 20 40            [ 2]  756 	jra token_char 	 
      000A70                        757 lt_tst:
      000A70                        758 	_case '<' other
      000A70 A6 3C            [ 1]    1 	ld a,#'<' 
      000A72 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000A74 26 23            [ 1]    3 	jrne other
      000A76 A6 34            [ 1]  759 	ld a,#TK_LT 
      000A78 6B 02            [ 1]  760 	ld (ATTRIB,sp),a 
      000A7A 91 D6 00         [ 4]  761 	ld a,([in.w],y)
      000A7D 72 5C 00 01      [ 1]  762 	inc in 
      000A81 A1 3D            [ 1]  763 	cp a,#'=
      000A83 26 04            [ 1]  764 	jrne 1$
      000A85 A6 36            [ 1]  765 	ld a,#TK_LE 
      000A87 20 27            [ 2]  766 	jra token_char 
      000A89 A1 3E            [ 1]  767 1$: cp a,#'>
      000A8B 26 04            [ 1]  768 	jrne 2$
      000A8D A6 35            [ 1]  769 	ld a,#TK_NE 
      000A8F 20 1F            [ 2]  770 	jra token_char 
      000A91 72 5A 00 01      [ 1]  771 2$: dec in 
      000A95 7B 02            [ 1]  772 	ld a,(ATTRIB,sp)
      000A97 20 17            [ 2]  773 	jra token_char 	
      000A99                        774 other: ; not a special character 	 
      000A99 7B 01            [ 1]  775 	ld a,(TCHAR,sp)
      000A9B CD 08 49         [ 4]  776 	call is_alpha 
      000A9E 25 03            [ 1]  777 	jrc 30$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000AA0 CC 11 95         [ 2]  778 	jp syntax_error 
      000AA3                        779 30$: 
      000AA3 CD 08 8F         [ 4]  780 	call parse_keyword
      000AA6 A3 1C 06         [ 2]  781 	cpw x,#remark 
      000AA9 26 09            [ 1]  782 	jrne token_exit 
      000AAB 90 93            [ 1]  783 	ldw y,x 
      000AAD CC 09 E7         [ 2]  784 	jp copy_comment 
      000AB0                        785 token_char:
      000AB0 F7               [ 1]  786 	ld (x),a 
      000AB1 5C               [ 1]  787 	incw x
      000AB2 90 93            [ 1]  788 	ldw y,x 
      000AB4                        789 token_exit:
      000AB4                        790 	_drop VSIZE 
      000AB4 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AB6 81               [ 4]  791 	ret
                                    792 
                                    793 
                                    794 ;-----------------------------------
                                    795 ; create token list fromm text line 
                                    796 ; save this list in pad buffer 
                                    797 ;  compiled line format: 
                                    798 ;    line_no  2 bytes {0...32767}
                                    799 ;    count    1 byte  
                                    800 ;    tokens   variable length 
                                    801 ;   
                                    802 ; input:
                                    803 ;   none
                                    804 ; modified variables:
                                    805 ;   basicptr     token list buffer address 
                                    806 ;   in.w  		 3|count, i.e. index in buffer
                                    807 ;   count        length of line | 0  
                                    808 ;-----------------------------------
                           000001   809 	XSAVE=1
                           000002   810 	VSIZE=2
      000AB7                        811 compile::
      000AB7                        812 	_vars VSIZE 
      000AB7 52 02            [ 2]    1     sub sp,#VSIZE 
      000AB9 55 00 1A 00 04   [ 1]  813 	mov basicptr,txtbgn
      000ABE 72 1A 00 21      [ 1]  814 	bset flags,#FCOMP 
      000AC2 A6 00            [ 1]  815 	ld a,#0
      000AC4 AE 00 00         [ 2]  816 	ldw x,#0
      000AC7 CF 16 E0         [ 2]  817 	ldw pad,x ; destination buffer 
      000ACA C7 16 E2         [ 1]  818 	ld pad+2,a ; count 
      000ACD AE 16 E3         [ 2]  819 	ldw x,#pad+3
      000AD0 72 5F 00 01      [ 1]  820 	clr in 
      000AD4 CD 08 F8         [ 4]  821 	call get_token
      000AD7 A1 84            [ 1]  822 	cp a,#TK_INTGR
      000AD9 26 11            [ 1]  823 	jrne 2$
      000ADB A3 00 01         [ 2]  824 	cpw x,#1 
      000ADE 2A 05            [ 1]  825 	jrpl 1$
      000AE0 A6 0A            [ 1]  826 	ld a,#ERR_BAD_VALUE
      000AE2 CC 11 97         [ 2]  827 	jp tb_error
      000AE5 CF 16 E0         [ 2]  828 1$:	ldw pad,x 
      000AE8 90 AE 16 E3      [ 2]  829 	ldw y,#pad+3 
      000AEC 90 A3 17 60      [ 2]  830 2$:	cpw y,#stack_full 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000AF0 25 05            [ 1]  831 	jrult 3$
      000AF2 A6 0F            [ 1]  832 	ld a,#ERR_BUF_FULL 
      000AF4 CC 11 97         [ 2]  833 	jp tb_error 
      000AF7                        834 3$:	
      000AF7 93               [ 1]  835 	ldw x,y 
      000AF8 CD 08 F8         [ 4]  836 	call get_token 
      000AFB A1 00            [ 1]  837 	cp a,#TK_NONE 
      000AFD 26 ED            [ 1]  838 	jrne 2$ 
                                    839 ; compilation completed  
      000AFF 72 A2 16 E0      [ 2]  840 	subw y,#pad
      000B03 90 9F            [ 1]  841     ld a,yl
      000B05 AE 16 E0         [ 2]  842 	ldw x,#pad 
      000B08 CF 00 18         [ 2]  843 	ldw ptr16,x 
      000B0B E7 02            [ 1]  844 	ld (2,x),a 
      000B0D FE               [ 2]  845 	ldw x,(x)
      000B0E 27 09            [ 1]  846 	jreq 10$
      000B10 CD 06 FB         [ 4]  847 	call insert_line
      000B13 72 5F 00 03      [ 1]  848 	clr  count 
      000B17 20 0F            [ 2]  849 	jra  11$ 
      000B19                        850 10$: ; line# is zero 
      000B19 CE 00 18         [ 2]  851 	ldw x,ptr16  
      000B1C CF 00 04         [ 2]  852 	ldw basicptr,x 
      000B1F E6 02            [ 1]  853 	ld a,(2,x)
      000B21 C7 00 03         [ 1]  854 	ld count,a 
      000B24 35 03 00 01      [ 1]  855 	mov in,#3 
      000B28                        856 11$:
      000B28                        857 	_drop VSIZE 
      000B28 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B2A 72 1B 00 21      [ 1]  858 	bres flags,#FCOMP 
      000B2E 81               [ 4]  859 	ret 
                                    860 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      000B2F                         48 cpy_cmd_name:
      000B2F F6               [ 1]   49 	ld a,(x)
      000B30 5C               [ 1]   50 	incw x
      000B31 A4 0F            [ 1]   51 	and a,#15  
      000B33 88               [ 1]   52 	push a 
      000B34 0D 01            [ 1]   53     tnz (1,sp) 
      000B36 27 0A            [ 1]   54 	jreq 9$
      000B38 F6               [ 1]   55 1$:	ld a,(x)
      000B39 90 F7            [ 1]   56 	ld (y),a  
      000B3B 5C               [ 1]   57 	incw x
      000B3C 90 5C            [ 1]   58 	incw y 
      000B3E 0A 01            [ 1]   59 	dec (1,sp)	 
      000B40 26 F6            [ 1]   60 	jrne 1$
      000B42 84               [ 1]   61 9$: pop a 
      000B43 81               [ 4]   62 	ret	
                                     63 
                                     64 ;--------------------------
                                     65 ; add a space after letter or 
                                     66 ; digit.
                                     67 ; input:
                                     68 ;   Y     pointer to buffer 
                                     69 ; output:
                                     70 ;   Y    moved to end 
                                     71 ;--------------------------
      000B44                         72 add_space:
      000B44 90 5A            [ 2]   73 	decw y 
      000B46 90 F6            [ 1]   74 	ld a,(y)
      000B48 90 5C            [ 1]   75 	incw y
      000B4A CD 08 63         [ 4]   76 	call is_alnum 
      000B4D 24 06            [ 1]   77 	jrnc 1$
      000B4F A6 20            [ 1]   78 	ld a,#SPACE 
      000B51 90 F7            [ 1]   79 	ld (y),a 
      000B53 90 5C            [ 1]   80 	incw y 
      000B55 81               [ 4]   81 1$: ret 
                                     82 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                     83 ;--------------------------
                                     84 ;  align text in buffer 
                                     85 ;  to tab_width padding 
                                     86 ;  left with  SPACE 
                                     87 ; input:
                                     88 ;   X      str*
                                     89 ;   A      str_length 
                                     90 ; output:
                                     91 ;   X      ajusted
                                     92 ;--------------------------
      000B56                         93 right_align::
      000B56 88               [ 1]   94 	push a 
      000B57 7B 01            [ 1]   95 0$: ld a,(1,sp)
      000B59 C1 00 22         [ 1]   96 	cp a,tab_width 
      000B5C 2A 08            [ 1]   97 	jrpl 1$
      000B5E A6 20            [ 1]   98 	ld a,#SPACE 
      000B60 5A               [ 2]   99 	decw x
      000B61 F7               [ 1]  100 	ld (x),a  
      000B62 0C 01            [ 1]  101 	inc (1,sp)
      000B64 20 F1            [ 2]  102 	jra 0$ 
      000B66 84               [ 1]  103 1$: pop a 	
      000B67 81               [ 4]  104 	ret 
                                    105 
                                    106 ;--------------------------
                                    107 ; print TK_QSTR
                                    108 ; converting control character
                                    109 ; to backslash sequence
                                    110 ; input:
                                    111 ;   X        char *
                                    112 ;   Y        dest. buffer 
                                    113 ; output:
                                    114 ;   X        moved forward 
                                    115 ;   Y        moved forward 
                                    116 ;-----------------------------
      000B68                        117 cpy_quote:
      000B68 A6 22            [ 1]  118 	ld a,#'"
      000B6A 90 F7            [ 1]  119 	ld (y),a 
      000B6C 90 5C            [ 1]  120 	incw y 
      000B6E F6               [ 1]  121 1$:	ld a,(x)
      000B6F 27 30            [ 1]  122 	jreq 9$
      000B71 5C               [ 1]  123 	incw x 
      000B72 A1 20            [ 1]  124 	cp a,#SPACE 
      000B74 25 0E            [ 1]  125 	jrult 3$
      000B76 90 F7            [ 1]  126 	ld (y),a
      000B78 90 5C            [ 1]  127 	incw y 
      000B7A A1 5C            [ 1]  128 	cp a,#'\ 
      000B7C 26 F0            [ 1]  129 	jrne 1$ 
      000B7E                        130 2$:
      000B7E 90 F7            [ 1]  131 	ld (y),a
      000B80 90 5C            [ 1]  132 	incw y  
      000B82 20 EA            [ 2]  133 	jra 1$
      000B84 88               [ 1]  134 3$: push a 
      000B85 A6 5C            [ 1]  135 	ld a,#'\
      000B87 90 F7            [ 1]  136 	ld (y),a 
      000B89 90 5C            [ 1]  137 	incw y  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      000B8B 84               [ 1]  138 	pop a 
      000B8C A0 07            [ 1]  139 	sub a,#7
      000B8E C7 00 0E         [ 1]  140 	ld acc8,a 
      000B91 72 5F 00 0D      [ 1]  141 	clr acc16
      000B95 89               [ 2]  142 	pushw x
      000B96 AE 07 BA         [ 2]  143 	ldw x,#escaped 
      000B99 72 BB 00 0D      [ 2]  144 	addw x,acc16 
      000B9D F6               [ 1]  145 	ld a,(x)
      000B9E 85               [ 2]  146 	popw x
      000B9F 20 DD            [ 2]  147 	jra 2$
      000BA1 A6 22            [ 1]  148 9$: ld a,#'"
      000BA3 90 F7            [ 1]  149 	ld (y),a 
      000BA5 90 5C            [ 1]  150 	incw y  
      000BA7 5C               [ 1]  151 	incw x 
      000BA8 81               [ 4]  152 	ret
                                    153 
                                    154 ;--------------------------
                                    155 ; return variable name 
                                    156 ; from its address.
                                    157 ; input:
                                    158 ;   X    variable address
                                    159 ; output:
                                    160 ;   A     variable letter
                                    161 ;--------------------------
      000BA9                        162 var_name::
      000BA9 1D 00 2F         [ 2]  163 		subw x,#vars 
      000BAC 9F               [ 1]  164 		ld a,xl 
      000BAD 44               [ 1]  165 		srl a 
      000BAE AB 41            [ 1]  166 		add a,#'A 
      000BB0 81               [ 4]  167 		ret 
                                    168 
                                    169 ;-----------------------------
                                    170 ; return cmd  idx from its 
                                    171 ; code address 
                                    172 ; input:
                                    173 ;   X      code address 
                                    174 ; output:
                                    175 ;   X      cmd_idx
                                    176 ;-----------------------------
      000BB1                        177 get_cmd_idx:
      000BB1 90 89            [ 2]  178 	pushw y
      000BB3 90 AE 2C 51      [ 2]  179 	ldw y,#code_addr 
      000BB7 90 CF 00 18      [ 2]  180 	ldw ptr16,y 
      000BBB 90 5F            [ 1]  181 	clrw y 
      000BBD 91 D3 18         [ 5]  182 1$:	cpw x,([ptr16],y)
      000BC0 27 0C            [ 1]  183 	jreq 3$ 
      000BC2 90 5C            [ 1]  184 	incw y 
      000BC4 91 D6 18         [ 4]  185 	ld a,([ptr16],y)
      000BC7 90 5C            [ 1]  186 	incw y
      000BC9 91 DA 18         [ 4]  187 	or a,([ptr16],y)	
      000BCC 26 EF            [ 1]  188 	jrne 1$
      000BCE 93               [ 1]  189 3$: ldw x,y 
      000BCF 90 85            [ 2]  190 	popw y 
      000BD1 81               [ 4]  191 	ret
                                    192 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    193 
                                    194 ;-------------------------------------
                                    195 ; decompile tokens list 
                                    196 ; to original text line 
                                    197 ; input:
                                    198 ;   [basicptr]  pointer at line 
                                    199 ;   Y           output buffer
                                    200 ; output:
                                    201 ;   A           length 
                                    202 ;   Y           after string  
                                    203 ;------------------------------------
                           000001   204 	BASE_SAV=1
                           000002   205 	WIDTH_SAV=2
                           000003   206 	STR=3
                           000004   207 	VSIZE=4 
      000BD2                        208 decompile::
      000BD2                        209 	_vars VSIZE
      000BD2 52 04            [ 2]    1     sub sp,#VSIZE 
      000BD4 C6 00 0A         [ 1]  210 	ld a,base
      000BD7 6B 01            [ 1]  211 	ld (BASE_SAV,sp),a  
      000BD9 C6 00 22         [ 1]  212 	ld a,tab_width 
      000BDC 6B 02            [ 1]  213 	ld (WIDTH_SAV,sp),a 
      000BDE 17 03            [ 2]  214 	ldw (STR,sp),y   
      000BE0 72 CE 00 04      [ 5]  215 	ldw x,[basicptr] ; line number 
      000BE4 35 0A 00 0A      [ 1]  216 	mov base,#10
      000BE8 35 05 00 22      [ 1]  217 	mov tab_width,#5
      000BEC 72 5F 00 0C      [ 1]  218 	clr acc24 
      000BF0 CF 00 0D         [ 2]  219 	ldw acc16,x
      000BF3 CD 12 F4         [ 4]  220 	call itoa  
      000BF6 CD 0B 56         [ 4]  221 	call right_align 
      000BF9 88               [ 1]  222 	push a 
      000BFA 90 93            [ 1]  223 1$:	ldw y,x ; source
      000BFC 1E 04            [ 2]  224 	ldw x,(STR+1,sp) ; destination
      000BFE CD 0E 5F         [ 4]  225 	call strcpy 
      000C01 90 5F            [ 1]  226 	clrw y 
      000C03 84               [ 1]  227 	pop a 
      000C04 90 97            [ 1]  228 	ld yl,a 
      000C06 72 F9 03         [ 2]  229 	addw y,(STR,sp)
      000C09 A6 20            [ 1]  230 	ld a,#SPACE 
      000C0B 90 F7            [ 1]  231 	ld (y),a 
      000C0D 90 5C            [ 1]  232 	incw y 
      000C0F 72 5F 00 22      [ 1]  233 	clr tab_width
      000C13 AE 00 03         [ 2]  234 	ldw x,#3
      000C16 CF 00 00         [ 2]  235 	ldw in.w,x 
      000C19                        236 decomp_loop:
      000C19 90 89            [ 2]  237 	pushw y
      000C1B CD 12 88         [ 4]  238 	call next_token 
      000C1E 90 85            [ 2]  239 	popw y 
      000C20 4D               [ 1]  240 	tnz a  
      000C21 26 03            [ 1]  241 	jrne 1$
      000C23 CC 0D 29         [ 2]  242 	jp 20$
      000C26 2B 03            [ 1]  243 1$:	jrmi 2$
      000C28 CC 0C A4         [ 2]  244 	jp 6$
      000C2B                        245 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      000C2B A1 85            [ 1]  246 	cp a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      000C2D 26 0C            [ 1]  247 	jrne 3$
                                    248 ;; TK_VAR 
      000C2F CD 0B 44         [ 4]  249 	call add_space  
      000C32 CD 0B A9         [ 4]  250 	call var_name
      000C35 90 F7            [ 1]  251 	ld (y),a 
      000C37 90 5C            [ 1]  252 	incw y  
      000C39 20 DE            [ 2]  253 	jra decomp_loop
      000C3B                        254 3$:
      000C3B A1 84            [ 1]  255 	cp a,#TK_INTGR
      000C3D 26 22            [ 1]  256 	jrne 4$
                                    257 ;; TK_INTGR
      000C3F CD 0B 44         [ 4]  258 	call add_space
      000C42 72 5F 00 0C      [ 1]  259 	clr acc24 
      000C46 CF 00 0D         [ 2]  260 	ldw acc16,x 
      000C49 90 89            [ 2]  261 	pushw y 
      000C4B CD 12 F4         [ 4]  262 	call itoa  
      000C4E 16 01            [ 2]  263 	ldw y,(1,sp) 
      000C50 88               [ 1]  264 	push a 
      000C51 51               [ 1]  265 	exgw x,y 
      000C52 CD 0E 5F         [ 4]  266 	call strcpy 
      000C55 90 5F            [ 1]  267 	clrw y
      000C57 84               [ 1]  268 	pop a  
      000C58 90 97            [ 1]  269 	ld yl,a 
      000C5A 72 F9 01         [ 2]  270 	addw y,(1,sp)
      000C5D                        271 	_drop 2 
      000C5D 5B 02            [ 2]    1     addw sp,#2 
      000C5F 20 B8            [ 2]  272 	jra decomp_loop
      000C61                        273 4$: ; dictionary keyword 
      000C61 CD 0B B1         [ 4]  274 	call get_cmd_idx 
      000C64 A3 00 8A         [ 2]  275 	cpw x,#REM_IDX
      000C67 26 23            [ 1]  276 	jrne 5$
      000C69 CE 00 04         [ 2]  277 	ldw x,basicptr 
                                    278 ; copy comment to buffer 
      000C6C CD 0B 44         [ 4]  279 	call add_space
      000C6F A6 27            [ 1]  280 	ld a,#''
      000C71 90 F7            [ 1]  281 	ld (y),a 
      000C73 90 5C            [ 1]  282 	incw y 
      000C75                        283 46$:
      000C75 72 D6 00 00      [ 4]  284 	ld a,([in.w],x)
      000C79 72 5C 00 01      [ 1]  285 	inc in  
      000C7D 90 F7            [ 1]  286 	ld (y),a 
      000C7F 90 5C            [ 1]  287 	incw y 
      000C81 C6 00 01         [ 1]  288 	ld a,in 
      000C84 C1 00 03         [ 1]  289 	cp a,count 
      000C87 2B EC            [ 1]  290 	jrmi 46$
      000C89 CC 0D 29         [ 2]  291 	jp 20$  
      000C8C A3 00 4E         [ 2]  292 5$: cpw x,#LET_IDX 
      000C8F 26 03            [ 1]  293 	jrne 51$
      000C91 CC 0C 19         [ 2]  294 	jp decomp_loop ; down display LET 	
      000C94                        295 51$: ; insert command name 
      000C94 CD 0B 44         [ 4]  296 	call add_space  
      000C97 90 89            [ 2]  297 	pushw y
      000C99 CD 0D 64         [ 4]  298 	call cmd_name
      000C9C 90 85            [ 2]  299 	popw y 
      000C9E CD 0B 2F         [ 4]  300 	call cpy_cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      000CA1 CC 0C 19         [ 2]  301 	jp decomp_loop 
      000CA4                        302 6$:
                                    303 ; label?
      000CA4 A1 03            [ 1]  304 	cp a,#TK_LABEL 
      000CA6 26 19            [ 1]  305 	jrne 64$
                                    306 ; copy label string to output buffer   	
      000CA8 A6 20            [ 1]  307 	ld a,#32 
      000CAA 90 F7            [ 1]  308 	ld (y),a 
      000CAC 90 5C            [ 1]  309 	incw y 
      000CAE                        310 61$:
      000CAE F6               [ 1]  311 	ld a,(x)
      000CAF 27 07            [ 1]  312 	jreq 62$ 
      000CB1 5C               [ 1]  313 	incw x  
      000CB2 90 F7            [ 1]  314 	ld (y),a 
      000CB4 90 5C            [ 1]  315 	incw y 
      000CB6 20 F6            [ 2]  316 	jra 61$ 
      000CB8                        317 62$: 
      000CB8 A6 20            [ 1]  318 	ld a,#32 
      000CBA 90 F7            [ 1]  319 	ld (y),a 
      000CBC 90 5C            [ 1]  320 	incw y 
      000CBE CC 0C 19         [ 2]  321 	jp decomp_loop
      000CC1                        322 64$:
      000CC1 A1 02            [ 1]  323 	cp a,#TK_QSTR 
      000CC3 26 06            [ 1]  324 	jrne 7$
                                    325 ;; TK_QSTR
      000CC5 CD 0B 68         [ 4]  326 	call cpy_quote  
      000CC8 CC 0C 19         [ 2]  327 	jp decomp_loop
      000CCB                        328 7$:
      000CCB A1 04            [ 1]  329 	cp a,#TK_CHAR 
      000CCD 26 0E            [ 1]  330 	jrne 8$
                                    331 ;; TK_CHAR 
      000CCF A6 5C            [ 1]  332 	ld a,#'\ 
      000CD1 90 F7            [ 1]  333 	ld (y),a 
      000CD3 90 5C            [ 1]  334 	incw y 
      000CD5 9F               [ 1]  335 	ld a,xl 
      000CD6 90 F7            [ 1]  336 	ld (y),a 
      000CD8 90 5C            [ 1]  337 	incw y 
      000CDA CC 0C 19         [ 2]  338 	jp decomp_loop
      000CDD A1 0B            [ 1]  339 8$: cp a,#TK_COLON 
      000CDF 26 09            [ 1]  340 	jrne 9$
      000CE1 A6 3A            [ 1]  341 	ld a,#':
      000CE3                        342 81$:
      000CE3 90 F7            [ 1]  343 	ld (y),a 
      000CE5 90 5C            [ 1]  344 	incw y 
      000CE7                        345 82$:
      000CE7 CC 0C 19         [ 2]  346 	jp decomp_loop
      000CEA                        347 9$: 
      000CEA A1 0A            [ 1]  348 	cp a,#TK_SHARP
      000CEC 22 0A            [ 1]  349 	jrugt 10$ 
      000CEE A0 05            [ 1]  350 	sub a,#TK_ARRAY 
      000CF0 5F               [ 1]  351 	clrw x 
      000CF1 97               [ 1]  352 	ld xl,a
      000CF2 1C 0D 3F         [ 2]  353 	addw x,#single_char 
      000CF5 F6               [ 1]  354 	ld a,(x)
      000CF6 20 EB            [ 2]  355 	jra 81$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000CF8                        356 10$: 
      000CF8 A1 11            [ 1]  357 	cp a,#TK_MINUS 
      000CFA 22 0A            [ 1]  358 	jrugt 11$
      000CFC A0 10            [ 1]  359 	sub a,#TK_PLUS 
      000CFE 5F               [ 1]  360 	clrw x 
      000CFF 97               [ 1]  361 	ld xl,a 
      000D00 1C 0D 44         [ 2]  362 	addw x,#add_char 
      000D03 F6               [ 1]  363 	ld a,(x)
      000D04 20 DD            [ 2]  364 	jra 81$
      000D06                        365 11$:
      000D06 A1 22            [ 1]  366     cp a,#TK_MOD 
      000D08 22 0A            [ 1]  367 	jrugt 12$
      000D0A A0 20            [ 1]  368 	sub a,#TK_MULT
      000D0C 5F               [ 1]  369 	clrw x 
      000D0D 97               [ 1]  370 	ld xl,a 
      000D0E 1C 0D 46         [ 2]  371 	addw x,#mul_char
      000D11 F6               [ 1]  372 	ld a,(x)
      000D12 20 CF            [ 2]  373 	jra 81$
      000D14                        374 12$:
      000D14 A0 31            [ 1]  375 	sub a,#TK_GT  
      000D16 48               [ 1]  376 	sll a 
      000D17 5F               [ 1]  377 	clrw x 
      000D18 97               [ 1]  378 	ld xl,a 
      000D19 1C 0D 49         [ 2]  379 	addw x,#relop_str 
      000D1C FE               [ 2]  380 	ldw x,(x)
      000D1D F6               [ 1]  381 	ld a,(x)
      000D1E 5C               [ 1]  382 	incw x 
      000D1F 90 F7            [ 1]  383 	ld (y),a
      000D21 90 5C            [ 1]  384 	incw y 
      000D23 F6               [ 1]  385 	ld a,(x)
      000D24 26 BD            [ 1]  386 	jrne 81$
      000D26 CC 0C 19         [ 2]  387 	jp decomp_loop 
      000D29                        388 20$: 
      000D29 90 7F            [ 1]  389 	clr (y)
      000D2B 1E 03            [ 2]  390 	ldw x,(STR,sp)
      000D2D 7B 01            [ 1]  391 	ld a,(BASE_SAV,sp)
      000D2F C7 00 0A         [ 1]  392 	ld base,a 
      000D32 7B 02            [ 1]  393 	ld a,(WIDTH_SAV,sp)
      000D34 C7 00 22         [ 1]  394 	ld tab_width,a
      000D37 72 F2 03         [ 2]  395 	subw y,(STR,sp) 
      000D3A 90 9F            [ 1]  396 	ld a,yl 
      000D3C                        397 	_drop VSIZE 
      000D3C 5B 04            [ 2]    1     addw sp,#VSIZE 
      000D3E 81               [ 4]  398 	ret 
                                    399 
      000D3F 40 28 29 2C 23         400 single_char: .byte '@','(',')',',','#'
      000D44 2B 2D                  401 add_char: .byte '+','-'
      000D46 2A 2F 25               402 mul_char: .byte '*','/','%'
      000D49 0D 55 0D 57 0D 59 0D   403 relop_str: .word gt,equal,ge,lt,le,ne 
             5C 0D 5E 0D 61
      000D55 3E 00                  404 gt: .asciz ">"
      000D57 3D 00                  405 equal: .asciz "="
      000D59 3E 3D 00               406 ge: .asciz ">="
      000D5C 3C 00                  407 lt: .asciz "<"
      000D5E 3C 3D 00               408 le: .asciz "<="
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      000D61 3C 3E 00               409 ne:  .asciz "<>"
                                    410 
                                    411 ;----------------------------------
                                    412 ; search in kword_dict name
                                    413 ; from its execution address 
                                    414 ; input:
                                    415 ;   X       	cmd_index 
                                    416 ; output:
                                    417 ;   X 			cstr*  | 0 
                                    418 ;--------------------------------
                           000001   419 	CMDX=1 
                           000003   420 	LINK=3 
                           000004   421 	VSIZE=4
      000D64                        422 cmd_name:
      000D64                        423 	_vars VSIZE 
      000D64 52 04            [ 2]    1     sub sp,#VSIZE 
      000D66 72 5F 00 0D      [ 1]  424 	clr acc16 
      000D6A 1F 01            [ 2]  425 	ldw (CMDX,sp),x  
      000D6C AE 2C 49         [ 2]  426 	ldw x,#kword_dict	
      000D6F 1F 03            [ 2]  427 1$:	ldw (LINK,sp),x
      000D71 E6 02            [ 1]  428 	ld a,(2,x)
      000D73 A4 0F            [ 1]  429 	and a,#15 
      000D75 C7 00 0E         [ 1]  430 	ld acc8,a 
      000D78 1C 00 03         [ 2]  431 	addw x,#3
      000D7B 72 BB 00 0D      [ 2]  432 	addw x,acc16
      000D7F FE               [ 2]  433 	ldw x,(x) ; command index  
      000D80 13 01            [ 2]  434 	cpw x,(CMDX,sp)
      000D82 27 0A            [ 1]  435 	jreq 2$
      000D84 1E 03            [ 2]  436 	ldw x,(LINK,sp)
      000D86 FE               [ 2]  437 	ldw x,(x) 
      000D87 1D 00 02         [ 2]  438 	subw x,#2  
      000D8A 26 E3            [ 1]  439 	jrne 1$
      000D8C 20 05            [ 2]  440 	jra 9$
      000D8E 1E 03            [ 2]  441 2$: ldw x,(LINK,sp)
      000D90 1C 00 02         [ 2]  442 	addw x,#2 	
      000D93                        443 9$:	_drop VSIZE
      000D93 5B 04            [ 2]    1     addw sp,#VSIZE 
      000D95 81               [ 4]  444 	ret
                                    445 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 
                                     27     .module STM8_TBI
                                     28 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                     29     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                     30 
                           000000    31 .if SEPARATE
                                     32 	.include "inc/nucleo_8s208.inc"
                                     33 	.include "inc/stm8s208.inc"
                                     34 	.include "inc/ascii.inc"
                                     35 	.include "inc/gen_macros.inc" 
                                     36 	.include "tbi_macros.inc" 
                                     37 .endif 
                                     38 
                                     39 ;--------------------------------------
                                     40     .area DATA 
                                     41 ;--------------------------------------	
                                     42 
      000000                         43 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         44 in::    .blkb 1 ; low byte of in.w 
      000002                         45 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         46 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         47 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         48 data_ptr:  .blkw 1  ; point to DATA address
      000008                         49 data_ofs:  .blkb 1  ; index to next data item 
      000009                         50 data_len:  .blkb 1  ; length of data line 
      00000A                         51 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         52 acc32:  .blkb 1 ; 32 bit accumulator most signicant byte 
      00000C                         53 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
      00000D                         54 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000E                         55 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000F                         56 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000011                         57 timer:: .blkw 1 ;  milliseconds count down timer 
      000013                         58 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000015                         59 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000017                         60 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000018                         61 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000019                         62 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001A                         63 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001C                         64 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001E                         65 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      00001F                         66 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000021                         67 flags:: .blkb 1 ; various boolean flags
      000022                         68 tab_width:: .blkb 1 ; print colon width (default 6)
      000023                         69 free_eeprom: .blkw 1 ; start address of free eeprom 
      000025                         70 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002D                         71 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002E                         72 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     73 
                                     74 
      00002F                         75 vars:: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     76 	.area BTXT (ABS)
      00007C                         77 	.org 0x7C  
                                     78 ; keep 'free_ram' as last variable 
                                     79 ; basic code compiled here. 
      00007C                         80 rsign: .blkw 1 ; "BC" 
      00007E                         81 rsize: .blkw 1 ; code size 	 
      000080                         82 free_ram: ; from here RAM free for BASIC text 
                                     83 
                                     84 	.area CODE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                     85 
                                     86 ;----------------------
                                     87 ; print token id && value
                                     88 ; input:
                                     89 ;   A     token id 
                                     90 ;   X     token value 
                                     91 ;---------------------
                           000001    92 	BSAVE=1
                           000002    93 	AREG=2
                           000003    94 	XREG=3
                           000004    95 	VSIZE=4
      000D96                         96 prt_tok:
      000D96                         97 	_vars VSIZE 
      000D96 52 04            [ 2]    1     sub sp,#VSIZE 
      000D98 6B 02            [ 1]   98 	ld (AREG,sp),a 
      000D9A 1F 03            [ 2]   99 	ldw (XREG,sp),x 
      000D9C C6 00 0A         [ 1]  100 	ld a, base
      000D9F 6B 01            [ 1]  101 	ld (BSAVE,sp),a 
      000DA1 35 10 00 0A      [ 1]  102 	mov base,#16  
      000DA5 AE 0D CD         [ 2]  103 	ldw x,#token_msg
      000DA8 CD 03 8F         [ 4]  104 	call puts 
      000DAB 5F               [ 1]  105 	clrw x 
      000DAC 7B 02            [ 1]  106 	ld a,(AREG,sp)
      000DAE 97               [ 1]  107 	ld xl,a 
      000DAF CD 12 D8         [ 4]  108 	call print_int 
      000DB2 A6 20            [ 1]  109 	ld a,#SPACE
      000DB4 CD 03 32         [ 4]  110 	call putc 
      000DB7 1E 03            [ 2]  111 	ldw x,(XREG,sp)
      000DB9 CD 12 D8         [ 4]  112 	call print_int 
      000DBC A6 0D            [ 1]  113 	ld a,#CR 
      000DBE CD 03 32         [ 4]  114 	call putc 
      000DC1 7B 01            [ 1]  115 	ld a,(BSAVE,sp)
      000DC3 C7 00 0A         [ 1]  116 	ld base,a 
      000DC6 7B 02            [ 1]  117 	ld a,(AREG,sp)
      000DC8 1E 03            [ 2]  118 	ldw x,(XREG,sp)
      000DCA                        119 	_drop VSIZE 
      000DCA 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DCC 81               [ 4]  120 	ret 
      000DCD 74 6F 6B 65 6E 3A 20   121 token_msg: .asciz "token: "
             00
                                    122 
                                    123 
                                    124 ;---------------------
                                    125 ; display n bytes row 
                                    126 ; from memory.
                                    127 ; input:
                                    128 ;   A   bytes to print 
                                    129 ;	X   start address 
                                    130 ; output:
                                    131 ;   X   address after last shown  
                                    132 ;---------------------
                           000001   133 	CNT=1 
                           000002   134 	ADR=2 
                           000003   135 	VSIZE=3 
      000DD5                        136 show_row:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000DD5 4D               [ 1]  137 	tnz a 
      000DD6 26 01            [ 1]  138 	jrne 1$
      000DD8 81               [ 4]  139 	ret 
      000DD9                        140 1$:	
      000DD9 89               [ 2]  141 	pushw x  
      000DDA 88               [ 1]  142 	push a 
      000DDB 35 04 00 22      [ 1]  143 	mov tab_width,#4 
      000DDF CD 12 D8         [ 4]  144 	call print_int 
      000DE2 A6 20            [ 1]  145 	ld a,#SPACE  
      000DE4 CD 03 32         [ 4]  146 	call putc
      000DE7                        147 row_loop:
      000DE7 1E 02            [ 2]  148 	ldw x,(ADR,sp)
      000DE9 F6               [ 1]  149 	ld a,(x)
      000DEA 5F               [ 1]  150 	clrw x 
      000DEB 97               [ 1]  151 	ld xl,a 
      000DEC CD 12 D8         [ 4]  152 	call print_int 
      000DEF 1E 02            [ 2]  153 	ldw x,(ADR,sp)
      000DF1 5C               [ 1]  154 	incw x 
      000DF2 1F 02            [ 2]  155 	ldw (ADR,sp),x 
      000DF4 0A 01            [ 1]  156 	dec (CNT,sp)
      000DF6 26 EF            [ 1]  157 	jrne row_loop
      000DF8                        158 	_drop VSIZE  		
      000DF8 5B 03            [ 2]    1     addw sp,#VSIZE 
      000DFA 35 04 00 22      [ 1]  159 	mov tab_width,#4
      000DFE A6 0D            [ 1]  160 	ld a,#CR 
      000E00 CD 03 32         [ 4]  161 	call putc 
      000E03 81               [ 4]  162 	ret 
                                    163 
                                    164 ;--------------------------
                                    165 ; print memory content 
                                    166 ; in hexadecimal format
                                    167 ;  input:
                                    168 ;    X    start address 
                                    169 ;    Y    count 
                                    170 ;--------------------------
                           000001   171 	BCNT=1
                           000003   172 	BASE=3
                           000004   173 	TABW=4
                           000004   174 	VSIZE=4   
      000E04                        175 hex_dump:
      000E04 88               [ 1]  176 	push a 
      000E05                        177 	_vars VSIZE
      000E05 52 04            [ 2]    1     sub sp,#VSIZE 
      000E07 C6 00 0A         [ 1]  178 	ld a,base
      000E0A 6B 03            [ 1]  179 	ld (BASE,sp),a 
      000E0C 35 10 00 0A      [ 1]  180 	mov base,#16
      000E10 C6 00 22         [ 1]  181 	ld a,tab_width 
      000E13 6B 04            [ 1]  182 	ld (TABW,sp),a
      000E15 A6 0D            [ 1]  183 	ld a,#CR 
      000E17 CD 03 32         [ 4]  184 	call putc 
      000E1A 17 01            [ 2]  185 1$: ldw (BCNT,sp),y
      000E1C A6 10            [ 1]  186 	ld a,#16
      000E1E 90 A3 00 10      [ 2]  187 	cpw y,#16
      000E22 2A 02            [ 1]  188 	jrpl 2$
      000E24 90 9F            [ 1]  189 	ld a,yl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000E26                        190 2$: 	
      000E26 CD 0D D5         [ 4]  191 	call show_row 
      000E29 16 01            [ 2]  192 	ldw y,(BCNT,sp) 
      000E2B 72 A2 00 10      [ 2]  193 	subw y,#16 
      000E2F 90 A3 00 01      [ 2]  194 	cpw y,#1
      000E33 2A E5            [ 1]  195 	jrpl 1$
      000E35 7B 03            [ 1]  196 	ld a,(BASE,sp)
      000E37 C7 00 0A         [ 1]  197 	ld base,a
      000E3A 7B 04            [ 1]  198 	ld a,(TABW,sp)
      000E3C C7 00 22         [ 1]  199 	ld tab_width,a 
      000E3F                        200 	_drop VSIZE
      000E3F 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E41 84               [ 1]  201 	pop a 
      000E42 81               [ 4]  202 	ret 
                                    203 
                                    204 ;-------------------------------------
                                    205 ; retrun string length
                                    206 ; input:
                                    207 ;   X         .asciz  pointer 
                                    208 ; output:
                                    209 ;   X         not affected 
                                    210 ;   A         length 
                                    211 ;-------------------------------------
      000E43                        212 strlen::
      000E43 89               [ 2]  213 	pushw x 
      000E44 4F               [ 1]  214 	clr a
      000E45 7D               [ 1]  215 1$:	tnz (x) 
      000E46 27 04            [ 1]  216 	jreq 9$ 
      000E48 4C               [ 1]  217 	inc a 
      000E49 5C               [ 1]  218 	incw x 
      000E4A 20 F9            [ 2]  219 	jra 1$ 
      000E4C 85               [ 2]  220 9$:	popw x 
      000E4D 81               [ 4]  221 	ret 
                                    222 
                                    223 ;------------------------------------
                                    224 ; compare 2 strings
                                    225 ; input:
                                    226 ;   X 		char* first string 
                                    227 ;   Y       char* second string 
                                    228 ; output:
                                    229 ;   A 		0 not == |1 ==  
                                    230 ;-------------------------------------
      000E4E                        231 strcmp:
      000E4E F6               [ 1]  232 	ld a,(x)
      000E4F 27 0B            [ 1]  233 	jreq 5$ 
      000E51 90 F1            [ 1]  234 	cp a,(y) 
      000E53 26 05            [ 1]  235 	jrne 4$ 
      000E55 5C               [ 1]  236 	incw x 
      000E56 90 5C            [ 1]  237 	incw y 
      000E58 20 F4            [ 2]  238 	jra strcmp 
      000E5A                        239 4$: ; not same  
      000E5A 4F               [ 1]  240 	clr a 
      000E5B 81               [ 4]  241 	ret 
      000E5C                        242 5$: ; same 
      000E5C A6 01            [ 1]  243 	ld a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      000E5E 81               [ 4]  244 	ret 
                                    245 
                                    246 
                                    247 ;---------------------------------------
                                    248 ;  copy src to dest 
                                    249 ; input:
                                    250 ;   X 		dest 
                                    251 ;   Y 		src 
                                    252 ; output: 
                                    253 ;   X 		dest 
                                    254 ;----------------------------------
      000E5F                        255 strcpy::
      000E5F 88               [ 1]  256 	push a 
      000E60 89               [ 2]  257 	pushw x 
      000E61 90 F6            [ 1]  258 1$: ld a,(y)
      000E63 27 06            [ 1]  259 	jreq 9$ 
      000E65 F7               [ 1]  260 	ld (x),a 
      000E66 5C               [ 1]  261 	incw x 
      000E67 90 5C            [ 1]  262 	incw y 
      000E69 20 F6            [ 2]  263 	jra 1$ 
      000E6B 7F               [ 1]  264 9$:	clr (x)
      000E6C 85               [ 2]  265 	popw x 
      000E6D 84               [ 1]  266 	pop a 
      000E6E 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; move memory block 
                                    271 ; input:
                                    272 ;   X 		destination 
                                    273 ;   Y 	    source 
                                    274 ;   acc16	bytes count 
                                    275 ; output:
                                    276 ;   none 
                                    277 ;--------------------------------------
                           000001   278 	INCR=1 ; increament high byte 
                           000002   279 	LB=2 ; increament low byte 
                           000002   280 	VSIZE=2
      000E6F                        281 move::
      000E6F 88               [ 1]  282 	push a 
      000E70                        283 	_vars VSIZE 
      000E70 52 02            [ 2]    1     sub sp,#VSIZE 
      000E72 0F 01            [ 1]  284 	clr (INCR,sp)
      000E74 0F 02            [ 1]  285 	clr (LB,sp)
      000E76 90 89            [ 2]  286 	pushw y 
      000E78 13 01            [ 2]  287 	cpw x,(1,sp) ; compare DEST to SRC 
      000E7A 90 85            [ 2]  288 	popw y 
      000E7C 27 31            [ 1]  289 	jreq move_exit ; x==y 
      000E7E 2B 0E            [ 1]  290 	jrmi move_down
      000E80                        291 move_up: ; start from top address with incr=-1
      000E80 72 BB 00 0D      [ 2]  292 	addw x,acc16
      000E84 72 B9 00 0D      [ 2]  293 	addw y,acc16
      000E88 03 01            [ 1]  294 	cpl (INCR,sp)
      000E8A 03 02            [ 1]  295 	cpl (LB,sp)   ; increment = -1 
      000E8C 20 05            [ 2]  296 	jra move_loop  
      000E8E                        297 move_down: ; start from bottom address with incr=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      000E8E 5A               [ 2]  298     decw x 
      000E8F 90 5A            [ 2]  299 	decw y
      000E91 0C 02            [ 1]  300 	inc (LB,sp) ; incr=1 
      000E93                        301 move_loop:	
      000E93 C6 00 0D         [ 1]  302     ld a, acc16 
      000E96 CA 00 0E         [ 1]  303 	or a, acc8
      000E99 27 14            [ 1]  304 	jreq move_exit 
      000E9B 72 FB 01         [ 2]  305 	addw x,(INCR,sp)
      000E9E 72 F9 01         [ 2]  306 	addw y,(INCR,sp) 
      000EA1 90 F6            [ 1]  307 	ld a,(y)
      000EA3 F7               [ 1]  308 	ld (x),a 
      000EA4 89               [ 2]  309 	pushw x 
      000EA5 CE 00 0D         [ 2]  310 	ldw x,acc16 
      000EA8 5A               [ 2]  311 	decw x 
      000EA9 CF 00 0D         [ 2]  312 	ldw acc16,x 
      000EAC 85               [ 2]  313 	popw x 
      000EAD 20 E4            [ 2]  314 	jra move_loop
      000EAF                        315 move_exit:
      000EAF                        316 	_drop VSIZE
      000EAF 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EB1 84               [ 1]  317 	pop a 
      000EB2 81               [ 4]  318 	ret 	
                                    319 
                                    320 ;------------------------------------
                                    321 ;  set all variables to zero 
                                    322 ; input:
                                    323 ;   none 
                                    324 ; output:
                                    325 ;	none
                                    326 ;------------------------------------
      000EB3                        327 clear_vars:
      000EB3 89               [ 2]  328 	pushw x 
      000EB4 88               [ 1]  329 	push a  
      000EB5 AE 00 2F         [ 2]  330 	ldw x,#vars 
      000EB8 A6 34            [ 1]  331 	ld a,#2*26 
      000EBA 7F               [ 1]  332 1$:	clr (x)
      000EBB 5C               [ 1]  333 	incw x 
      000EBC 4A               [ 1]  334 	dec a 
      000EBD 26 FB            [ 1]  335 	jrne 1$
      000EBF 84               [ 1]  336 	pop a 
      000EC0 85               [ 2]  337 	popw x 
      000EC1 81               [ 4]  338 	ret 
                                    339 
                                    340 ;-------------------------------------
                                    341 ;  program initialization entry point 
                                    342 ;-------------------------------------
                           000002   343 	MAJOR=2
                           000000   344 	MINOR=0 
      000EC2 0A 0A 54 69 6E 79 20   345 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
      000F08                        346 cold_start:
                                    347 ;set stack 
      000F08 AE 17 FF         [ 2]  348 	ldw x,#STACK_EMPTY
      000F0B 94               [ 1]  349 	ldw sp,x   
                                    350 ; clear all ram 
      000F0C 7F               [ 1]  351 0$: clr (x)
      000F0D 5A               [ 2]  352 	decw x 
      000F0E 26 FC            [ 1]  353 	jrne 0$
                                    354 ; activate pull up on all inputs 
      000F10 A6 FF            [ 1]  355 	ld a,#255 
      000F12 C7 50 03         [ 1]  356 	ld PA_CR1,a 
      000F15 C7 50 08         [ 1]  357 	ld PB_CR1,a 
      000F18 C7 50 0D         [ 1]  358 	ld PC_CR1,a 
      000F1B C7 50 12         [ 1]  359 	ld PD_CR1,a 
      000F1E C7 50 17         [ 1]  360 	ld PE_CR1,a 
      000F21 C7 50 1C         [ 1]  361 	ld PF_CR1,a 
      000F24 C7 50 21         [ 1]  362 	ld PG_CR1,a 
      000F27 C7 50 2B         [ 1]  363 	ld PI_CR1,a
                                    364 ; set LD2 pin as output 
      000F2A 72 1A 50 0D      [ 1]  365     bset PC_CR1,#LED2_BIT
      000F2E 72 1A 50 0E      [ 1]  366     bset PC_CR2,#LED2_BIT
      000F32 72 1A 50 0C      [ 1]  367     bset PC_DDR,#LED2_BIT
      000F36 72 1B 50 0A      [ 1]  368 	bres PC_ODR,#LED2_BIT 
                                    369 ; disable schmitt triggers on Arduino CN4 analog inputs
      000F3A 55 00 3F 54 07   [ 1]  370 	mov ADC_TDRL,0x3f
                                    371 ; disable peripherals clocks
                                    372 ;	clr CLK_PCKENR1 
                                    373 ;	clr CLK_PCKENR2
      000F3F 72 5F 50 F2      [ 1]  374 	clr AWU_TBR 
      000F43 72 14 50 CA      [ 1]  375 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    376 ; select internal clock no divisor: 16 Mhz 	
      000F47 A6 E1            [ 1]  377 	ld a,#CLK_SWR_HSI 
      000F49 5F               [ 1]  378 	clrw x  
      000F4A CD 00 79         [ 4]  379     call clock_init 
      000F4D CD 00 9C         [ 4]  380 	call timer4_init
      000F50 CD 00 8F         [ 4]  381 	call timer2_init
                                    382 ; UART1 at 115200 BAUD
      000F53 CD 02 ED         [ 4]  383 	call uart1_init
                                    384 ; activate PE_4 (user button interrupt)
      000F56 72 18 50 18      [ 1]  385     bset PE_CR2,#USR_BTN_BIT 
                                    386 ; display system information
      000F5A CD 0F AE         [ 4]  387 	call system_information
      000F5D 9A               [ 1]  388 	rim ; enable interrupts 
      000F5E 72 5C 00 16      [ 1]  389 	inc seedy+1 
      000F62 72 5C 00 14      [ 1]  390 	inc seedx+1 
      000F66 CD 0F FD         [ 4]  391 	call clear_basic
      000F69 CD 18 9C         [ 4]  392 	call func_eefree 
      000F6C CD 18 67         [ 4]  393 	call ubound 
      000F6F CD 1F 51         [ 4]  394 	call beep_1khz  
      000F72                        395 2$:	
      000F72 CD 0F DF         [ 4]  396 	call warm_init
                                    397 ; check for application in flash memory 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      000F75 CE 2D 80         [ 2]  398 	ldw x,app_sign 
      000F78 C3 22 35         [ 2]  399 	cpw x,SIGNATURE 
      000F7B 27 03            [ 1]  400 	jreq run_app
      000F7D CC 12 1C         [ 2]  401 	jp cmd_line
      000F80                        402 run_app:
                                    403 ; run application in FLASH|EEPROM 
      000F80 AE 2D 84         [ 2]  404 	ldw x,#app 
      000F83 CF 00 1A         [ 2]  405 	ldw txtbgn,x
      000F86 72 BB 2D 82      [ 2]  406 	addw x,app_size 
      000F8A CF 00 1C         [ 2]  407 	ldw txtend,x 
      000F8D AE 0F 9B         [ 2]  408 	ldw x,#AUTO_RUN 
      000F90 CD 03 8F         [ 4]  409 	call puts 
      000F93 CD 19 91         [ 4]  410 	call program_info 
      000F96 CC 1F 00         [ 2]  411 	jp run_it_02  
      000F99 20 FE            [ 2]  412     jra .  
                                    413 
      000F9B 20 61 75 74 6F 20 72   414 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
             72 61 6D 0A 00
                                    415 
                                    416 
                                    417 ;-----------------------
                                    418 ;  display system 
                                    419 ;  information 
                                    420 ;-----------------------
      000FAE                        421 system_information:
      000FAE AE 0E C2         [ 2]  422 	ldw x,#software 
      000FB1 CD 03 8F         [ 4]  423 	call puts 
      000FB4 A6 02            [ 1]  424 	ld a,#MAJOR 
      000FB6 C7 00 0E         [ 1]  425 	ld acc8,a 
      000FB9 5F               [ 1]  426 	clrw x 
      000FBA CF 00 0C         [ 2]  427 	ldw acc24,x
      000FBD 72 5F 00 22      [ 1]  428 	clr tab_width  
      000FC1 35 0A 00 0A      [ 1]  429 	mov base, #10 
      000FC5 CD 12 E8         [ 4]  430 	call prti24 
      000FC8 A6 2E            [ 1]  431 	ld a,#'.
      000FCA CD 03 32         [ 4]  432 	call putc 
      000FCD A6 00            [ 1]  433 	ld a,#MINOR 
      000FCF C7 00 0E         [ 1]  434 	ld acc8,a 
      000FD2 5F               [ 1]  435 	clrw x 
      000FD3 CF 00 0C         [ 2]  436 	ldw acc24,x 
      000FD6 CD 12 E8         [ 4]  437 	call prti24
      000FD9 A6 0D            [ 1]  438 	ld a,#CR 
      000FDB CD 03 32         [ 4]  439 	call putc
      000FDE 81               [ 4]  440 	ret
                                    441 
                                    442 
      000FDF                        443 warm_init:
      000FDF 72 5F 00 21      [ 1]  444 	clr flags 
      000FE3 72 5F 00 1E      [ 1]  445 	clr loop_depth 
      000FE7 35 04 00 22      [ 1]  446 	mov tab_width,#TAB_WIDTH 
      000FEB 35 0A 00 0A      [ 1]  447 	mov base,#10 
      000FEF AE 00 00         [ 2]  448 	ldw x,#0 
      000FF2 CF 00 04         [ 2]  449 	ldw basicptr,x 
      000FF5 CF 00 00         [ 2]  450 	ldw in.w,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      000FF8 72 5F 00 03      [ 1]  451 	clr count
      000FFC 81               [ 4]  452 	ret 
                                    453 
                                    454 
                                    455 ;---------------------------
                                    456 ; reset BASIC text variables 
                                    457 ; and clear variables 
                                    458 ;---------------------------
      000FFD                        459 clear_basic:
      000FFD 89               [ 2]  460 	pushw x 
      000FFE 72 5F 00 03      [ 1]  461 	clr count
      001002 72 5F 00 01      [ 1]  462 	clr in  
      001006 AE 00 80         [ 2]  463 	ldw x,#free_ram 
      001009 CF 00 1A         [ 2]  464 	ldw txtbgn,x 
      00100C CF 00 1C         [ 2]  465 	ldw txtend,x 
      00100F CD 0E B3         [ 4]  466 	call clear_vars 
      001012 85               [ 2]  467 	popw x
      001013 81               [ 4]  468 	ret 
                                    469 
                                    470 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    471 ;;   Tiny BASIC error messages     ;;
                                    472 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001014                        473 err_msg:
      001014 00 00 10 34 10 41 10   474 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             4F 10 68 10 77
      001020 10 8D 10 A3 10 BD 10   475 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             CE 10 DF
      00102A 10 EB 11 1E 11 2E 11   476 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             42 11 55
                                    477 
      001034 4D 65 6D 6F 72 79 20   478 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      001041 73 79 6E 74 61 78 20   479 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      00104F 6D 61 74 68 20 6F 70   480 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001068 64 69 76 69 73 69 6F   481 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001077 69 6E 76 61 6C 69 64   482 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00108D 72 75 6E 20 74 69 6D   483 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      0010A3 63 6F 6D 6D 61 6E 64   484 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0010BD 64 75 70 6C 69 63 61   485 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



             2E 0A 00
      0010CE 46 69 6C 65 20 6E 6F   486 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0010DF 62 61 64 20 76 61 6C   487 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0010EB 46 69 6C 65 20 69 6E   488 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      00111E 4E 6F 20 64 61 74 61   489 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      00112E 4E 6F 20 70 72 6F 67   490 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      001142 46 69 6C 65 20 73 79   491 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001155 42 75 66 66 65 72 20   492 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                    493 
      001162 0A 72 75 6E 20 74 69   494 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001174 0A 63 6F 6D 70 69 6C   495 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001185 6C 61 73 74 20 74 6F   496 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    497 
      001195                        498 syntax_error::
      001195 A6 02            [ 1]  499 	ld a,#ERR_SYNTAX 
                                    500 
      001197                        501 tb_error::
      001197 72 0A 00 21 44   [ 2]  502 	btjt flags,#FCOMP,1$
      00119C 88               [ 1]  503 	push a 
      00119D AE 11 62         [ 2]  504 	ldw x, #rt_msg 
      0011A0 CD 03 8F         [ 4]  505 	call puts 
      0011A3 84               [ 1]  506 	pop a 
      0011A4 AE 10 14         [ 2]  507 	ldw x, #err_msg 
      0011A7 72 5F 00 0D      [ 1]  508 	clr acc16 
      0011AB 48               [ 1]  509 	sll a
      0011AC 72 59 00 0D      [ 1]  510 	rlc acc16  
      0011B0 C7 00 0E         [ 1]  511 	ld acc8, a 
      0011B3 72 BB 00 0D      [ 2]  512 	addw x,acc16 
      0011B7 FE               [ 2]  513 	ldw x,(x)
      0011B8 CD 03 8F         [ 4]  514 	call puts
      0011BB CE 00 04         [ 2]  515 	ldw x,basicptr
      0011BE C6 00 01         [ 1]  516 	ld a,in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      0011C1 CD 1A E6         [ 4]  517 	call prt_basic_line
      0011C4 AE 11 85         [ 2]  518 	ldw x,#tk_id 
      0011C7 CD 03 8F         [ 4]  519 	call puts 
      0011CA C6 00 02         [ 1]  520 	ld a,in.saved 
      0011CD 5F               [ 1]  521 	clrw x 
      0011CE 97               [ 1]  522 	ld xl,a 
      0011CF 72 BB 00 04      [ 2]  523 	addw x,basicptr 
      0011D3 F6               [ 1]  524 	ld a,(x)
      0011D4 5F               [ 1]  525 	clrw x 
      0011D5 97               [ 1]  526 	ld xl,a 
      0011D6 CD 12 D8         [ 4]  527 	call print_int
      0011D9 72 0D 00 21 37   [ 2]  528 	btjf flags,#FAUTORUN ,6$
      0011DE 20 35            [ 2]  529 	jra 6$
      0011E0                        530 1$:	
      0011E0 88               [ 1]  531 	push a 
      0011E1 AE 11 74         [ 2]  532 	ldw x,#comp_msg
      0011E4 CD 03 8F         [ 4]  533 	call puts 
      0011E7 84               [ 1]  534 	pop a 
      0011E8 AE 10 14         [ 2]  535 	ldw x, #err_msg 
      0011EB 72 5F 00 0D      [ 1]  536 	clr acc16 
      0011EF 48               [ 1]  537 	sll a
      0011F0 72 59 00 0D      [ 1]  538 	rlc acc16  
      0011F4 C7 00 0E         [ 1]  539 	ld acc8, a 
      0011F7 72 BB 00 0D      [ 2]  540 	addw x,acc16 
      0011FB FE               [ 2]  541 	ldw x,(x)
      0011FC CD 03 8F         [ 4]  542 	call puts
      0011FF AE 16 90         [ 2]  543 	ldw x,#tib
      001202 CD 03 8F         [ 4]  544 	call puts 
      001205 A6 0D            [ 1]  545 	ld a,#CR 
      001207 CD 03 32         [ 4]  546 	call putc
      00120A CE 00 00         [ 2]  547 	ldw x,in.w
      00120D CD 03 FC         [ 4]  548 	call spaces
      001210 A6 5E            [ 1]  549 	ld a,#'^
      001212 CD 03 32         [ 4]  550 	call putc 
      001215 AE 17 FF         [ 2]  551 6$: ldw x,#STACK_EMPTY 
      001218 94               [ 1]  552     ldw sp,x
      001219                        553 warm_start:
      001219 CD 0F DF         [ 4]  554 	call warm_init
                                    555 ;----------------------------
                                    556 ;   BASIC interpreter
                                    557 ;----------------------------
      00121C                        558 cmd_line: ; user interface 
      00121C A6 0D            [ 1]  559 	ld a,#CR 
      00121E CD 03 32         [ 4]  560 	call putc 
      001221 A6 3E            [ 1]  561 	ld a,#'> 
      001223 CD 03 32         [ 4]  562 	call putc
      001226 CD 04 94         [ 4]  563 	call readln
      001229 72 5D 00 03      [ 1]  564 	tnz count 
      00122D 27 ED            [ 1]  565 	jreq cmd_line
      00122F CD 0A B7         [ 4]  566 	call compile
                                    567 ;;; test 
                                    568 ; ldw x,txtbgn 
                                    569 ; ldw y,#16 
                                    570 ; call hex_dump
                                    571 ;;; end test
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                    572 
                                    573 ; if text begin with a line number
                                    574 ; the compiler set count to zero    
                                    575 ; so code is not interpreted
      001232 72 5D 00 03      [ 1]  576 	tnz count 
      001236 27 E4            [ 1]  577 	jreq cmd_line
                                    578 
                                    579 ; if direct command 
                                    580 ; it's ready to interpret 
                                    581 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    582 ;; This is the interpreter loop
                                    583 ;; for each BASIC code line. 
                                    584 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      001238                        585 interpreter: 
      001238 C6 00 01         [ 1]  586 	ld a,in 
      00123B C1 00 03         [ 1]  587 	cp a,count 
      00123E 2B 1D            [ 1]  588 	jrmi interp_loop
      001240                        589 next_line:
      001240 72 01 00 21 D7   [ 2]  590 	btjf flags, #FRUN, cmd_line
      001245 CE 00 04         [ 2]  591 	ldw x,basicptr
      001248 72 BB 00 00      [ 2]  592 	addw x,in.w 
      00124C C3 00 1C         [ 2]  593 	cpw x,txtend 
      00124F 2A C8            [ 1]  594 	jrpl warm_start
      001251 CF 00 04         [ 2]  595 	ldw basicptr,x ; start of next line  
      001254 E6 02            [ 1]  596 	ld a,(2,x)
      001256 C7 00 03         [ 1]  597 	ld count,a 
      001259 35 03 00 01      [ 1]  598 	mov in,#3 ; skip first 3 bytes of line 
      00125D                        599 interp_loop: 
      00125D CD 12 88         [ 4]  600 	call next_token
      001260 A1 00            [ 1]  601 	cp a,#TK_NONE 
      001262 27 DC            [ 1]  602 	jreq next_line 
      001264 A1 80            [ 1]  603 	cp a,#TK_CMD
      001266 26 03            [ 1]  604 	jrne 1$
      001268 FD               [ 4]  605 	call (x) 
      001269 20 F2            [ 2]  606 	jra interp_loop 
      00126B                        607 1$:	 
      00126B A1 85            [ 1]  608 	cp a,#TK_VAR
      00126D 26 05            [ 1]  609 	jrne 2$
      00126F CD 18 82         [ 4]  610 	call let_var  
      001272 20 E9            [ 2]  611 	jra interp_loop 
      001274                        612 2$:	
      001274 A1 05            [ 1]  613 	cp a,#TK_ARRAY 
      001276 26 05            [ 1]  614 	jrne 3$
      001278 CD 18 7F         [ 4]  615 	call let_array 
      00127B 20 E0            [ 2]  616 	jra interp_loop
      00127D                        617 3$:	
      00127D A1 0B            [ 1]  618 	cp a,#TK_COLON 
      00127F 27 DC            [ 1]  619 	jreq interp_loop
      001281 A1 03            [ 1]  620 4$: cp a,#TK_LABEL 
      001283 27 D8            [ 1]  621 	jreq interp_loop 
      001285 CC 11 95         [ 2]  622 5$:	jp syntax_error 
                                    623 
                                    624 		
                                    625 ;--------------------------
                                    626 ; extract next token from
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    627 ; token list 
                                    628 ; basicptr -> base address 
                                    629 ; in  -> offset in list array 
                                    630 ; output:
                                    631 ;   A 		token attribute
                                    632 ;   X 		token value if there is one
                                    633 ;----------------------------------------
      001288                        634 next_token::
      001288 5F               [ 1]  635 	clrw x 
      001289 C6 00 01         [ 1]  636 	ld a,in 
      00128C C7 00 02         [ 1]  637 	ld in.saved,a ; in case "_unget_token" needed 
                                    638 ; don't replace sub by "cp a,count" 
                                    639 ; if end of line must return with A=0   	
      00128F C0 00 03         [ 1]  640 	sub a,count 
      001292 27 43            [ 1]  641 	jreq 9$ ; end of line 
      001294                        642 0$: 
      001294 90 CE 00 04      [ 2]  643 	ldw y,basicptr 
      001298 72 B9 00 00      [ 2]  644 	addw y,in.w 
      00129C 90 F6            [ 1]  645 	ld a,(y)
      00129E 90 5C            [ 1]  646 	incw y   
      0012A0 4D               [ 1]  647 	tnz a 
      0012A1 2B 1F            [ 1]  648 	jrmi 4$
      0012A3 A1 05            [ 1]  649 	cp a,#TK_ARRAY
      0012A5 2A 28            [ 1]  650 	jrpl 7$  ; no attribute for these
      0012A7                        651 1$: ; 
      0012A7 A1 04            [ 1]  652 	cp a,#TK_CHAR
      0012A9 26 06            [ 1]  653 	jrne 2$
      0012AB 41               [ 1]  654 	exg a,xl
      0012AC 90 F6            [ 1]  655 	ld a,(y)
      0012AE 41               [ 1]  656 	exg a,xl  
      0012AF 20 1C            [ 2]  657 	jra 6$ 
      0012B1 A1 02            [ 1]  658 2$:	cp a,#TK_QSTR 
      0012B3 27 04            [ 1]  659 	jreq 22$
      0012B5 A1 03            [ 1]  660 	cp a,#TK_LABEL 
      0012B7 26 16            [ 1]  661 	jrne 7$ 
      0012B9                        662 22$:
      0012B9 93               [ 1]  663 	ldw x,y 
                                    664 ; move pointer after string 
      0012BA 90 7D            [ 1]  665 3$:	tnz (y)
      0012BC 27 0F            [ 1]  666 	jreq 6$
      0012BE 90 5C            [ 1]  667 	incw y 
      0012C0 20 F8            [ 2]  668 	jra 3$
      0012C2                        669 4$: 
      0012C2 93               [ 1]  670 	ldw x,y 
      0012C3 FE               [ 2]  671 	ldw x,(x)
      0012C4 A1 84            [ 1]  672 	cp a,#TK_INTGR
      0012C6 2A 03            [ 1]  673 	jrpl 5$
      0012C8 DE 2C 51         [ 2]  674 	ldw x,(code_addr,x) 
      0012CB 90 5C            [ 1]  675 5$:	incw y 
      0012CD 90 5C            [ 1]  676 6$:	incw y 
      0012CF 72 B2 00 04      [ 2]  677 7$:	subw y,basicptr 
      0012D3 90 CF 00 00      [ 2]  678 	ldw in.w,y 
      0012D7                        679 9$: 
      0012D7 81               [ 4]  680 	ret	
                                    681 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                    682 ;-----------------------------------
                                    683 ; print a 16 bit integer 
                                    684 ; using variable 'base' as conversion
                                    685 ; format.
                                    686 ; input:
                                    687 ;   X       integer to print 
                                    688 ;   'base'    conversion base 
                                    689 ; output:
                                    690 ;   none 
                                    691 ;-----------------------------------
      0012D8                        692 print_int:
      0012D8 72 5F 00 0C      [ 1]  693 	clr acc24 
      0012DC CF 00 0D         [ 2]  694 	ldw acc16,x 
      0012DF 72 0F 00 0D 04   [ 2]  695 	btjf acc16,#7,prti24
      0012E4 72 53 00 0C      [ 1]  696 	cpl acc24 
                                    697 	
                                    698 ;------------------------------------
                                    699 ; print integer in acc24 
                                    700 ; input:
                                    701 ;	acc24 		integer to print 
                                    702 ;	'base' 		numerical base for conversion 
                                    703 ;   'tab_width' field width 
                                    704 ;  output:
                                    705 ;    A          string length
                                    706 ;------------------------------------
      0012E8                        707 prti24:
      0012E8 CD 12 F4         [ 4]  708     call itoa  ; conversion entier en  .asciz
      0012EB CD 0B 56         [ 4]  709 	call right_align  
      0012EE 88               [ 1]  710 	push a 
      0012EF CD 03 8F         [ 4]  711 	call puts
      0012F2 84               [ 1]  712 	pop a 
      0012F3 81               [ 4]  713     ret	
                                    714 
                                    715 ;------------------------------------
                                    716 ; convert integer in acc24 to string
                                    717 ; input:
                                    718 ;   'base'	conversion base 
                                    719 ;	acc24	integer to convert
                                    720 ; output:
                                    721 ;   X  		pointer to first char of string
                                    722 ;   A       string length
                                    723 ;------------------------------------
                           000001   724 	SIGN=1  ; integer sign 
                           000002   725 	LEN=2 
                           000003   726 	PSTR=3
                           000004   727 	VSIZE=4 ;locals size
      0012F4                        728 itoa::
      0012F4                        729 	_vars VSIZE
      0012F4 52 04            [ 2]    1     sub sp,#VSIZE 
      0012F6 0F 02            [ 1]  730 	clr (LEN,sp) ; string length  
      0012F8 0F 01            [ 1]  731 	clr (SIGN,sp)    ; sign
      0012FA C6 00 0A         [ 1]  732 	ld a,base 
      0012FD A1 0A            [ 1]  733 	cp a,#10
      0012FF 26 0A            [ 1]  734 	jrne 1$
                                    735 	; base 10 string display with negative sign if bit 23==1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001301 72 0F 00 0C 05   [ 2]  736 	btjf acc24,#7,1$
      001306 03 01            [ 1]  737 	cpl (SIGN,sp)
      001308 CD 13 C1         [ 4]  738 	call neg_acc24
      00130B                        739 1$:
                                    740 ; initialize string pointer 
      00130B AE 16 90         [ 2]  741 	ldw x,#tib 
      00130E 1C 00 50         [ 2]  742 	addw x,#TIB_SIZE
      001311 5A               [ 2]  743 	decw x 
      001312 7F               [ 1]  744 	clr (x)
      001313 5A               [ 2]  745 	decw x 
      001314 A6 20            [ 1]  746 	ld a,#32
      001316 F7               [ 1]  747 	ld (x),a
      001317 0C 02            [ 1]  748 	inc (LEN,sp)
      001319                        749 itoa_loop:
      001319 C6 00 0A         [ 1]  750     ld a,base
      00131C 1F 03            [ 2]  751 	ldw (PSTR,sp),x 
      00131E CD 13 5F         [ 4]  752     call divu24_8 ; acc24/A 
      001321 1E 03            [ 2]  753 	ldw x,(PSTR,sp)
      001323 AB 30            [ 1]  754     add a,#'0  ; remainder of division
      001325 A1 3A            [ 1]  755     cp a,#'9+1
      001327 2B 02            [ 1]  756     jrmi 2$
      001329 AB 07            [ 1]  757     add a,#7 
      00132B                        758 2$:	
      00132B 5A               [ 2]  759 	decw x
      00132C F7               [ 1]  760     ld (x),a
      00132D 0C 02            [ 1]  761 	inc (LEN,sp)
                                    762 	; if acc24==0 conversion done
      00132F C6 00 0C         [ 1]  763 	ld a,acc24
      001332 CA 00 0D         [ 1]  764 	or a,acc16
      001335 CA 00 0E         [ 1]  765 	or a,acc8
      001338 26 DF            [ 1]  766     jrne itoa_loop
                                    767 	;conversion done, next add '$' or '-' as required
      00133A C6 00 0A         [ 1]  768 	ld a,base 
      00133D A1 10            [ 1]  769 	cp a,#16
      00133F 27 08            [ 1]  770 	jreq 8$
      001341 7B 01            [ 1]  771 	ld a,(SIGN,sp)
      001343 27 15            [ 1]  772     jreq 10$
      001345 A6 2D            [ 1]  773     ld a,#'-
      001347 20 0D            [ 2]  774 	jra 9$ 
                                    775 ; don't print more than 4 digits
                                    776 ; in hexadecimal to avoid '-' sign 
                                    777 ; extend display 	
      001349 7B 02            [ 1]  778 8$: ld a,(LEN,sp) 
      00134B A1 06            [ 1]  779 	cp a,#6 
      00134D 2B 05            [ 1]  780 	jrmi 81$
      00134F 5C               [ 1]  781 	incw x
      001350 0A 02            [ 1]  782 	dec (LEN,sp)
      001352 20 F5            [ 2]  783 	jra 8$
      001354                        784 81$:	
      001354 A6 24            [ 1]  785 	ld a,#'$ 
      001356 5A               [ 2]  786 9$: decw x
      001357 F7               [ 1]  787     ld (x),a
      001358 0C 02            [ 1]  788 	inc (LEN,sp)
      00135A                        789 10$:
      00135A 7B 02            [ 1]  790 	ld a,(LEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      00135C                        791 	_drop VSIZE
      00135C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00135E 81               [ 4]  792 	ret
                                    793 
                                    794 ;-------------------------------------
                                    795 ; divide uint24_t by uint8_t
                                    796 ; used to convert uint24_t to string
                                    797 ; input:
                                    798 ;	acc24	dividend
                                    799 ;   A 		divisor
                                    800 ; output:
                                    801 ;   acc24	quotient
                                    802 ;   A		remainder
                                    803 ;------------------------------------- 
                                    804 ; offset  on sp of arguments and locals
                           000001   805 	U8   = 1   ; divisor on stack
                           000001   806 	VSIZE =1
      00135F                        807 divu24_8:
      00135F 89               [ 2]  808 	pushw x ; save x
      001360 88               [ 1]  809 	push a 
                                    810 	; ld dividend UU:MM bytes in X
      001361 C6 00 0C         [ 1]  811 	ld a, acc24
      001364 95               [ 1]  812 	ld xh,a
      001365 C6 00 0D         [ 1]  813 	ld a,acc24+1
      001368 97               [ 1]  814 	ld xl,a
      001369 7B 01            [ 1]  815 	ld a,(U8,SP) ; divisor
      00136B 62               [ 2]  816 	div x,a ; UU:MM/U8
      00136C 88               [ 1]  817 	push a  ;save remainder
      00136D 9E               [ 1]  818 	ld a,xh
      00136E C7 00 0C         [ 1]  819 	ld acc24,a
      001371 9F               [ 1]  820 	ld a,xl
      001372 C7 00 0D         [ 1]  821 	ld acc24+1,a
      001375 84               [ 1]  822 	pop a
      001376 95               [ 1]  823 	ld xh,a
      001377 C6 00 0E         [ 1]  824 	ld a,acc24+2
      00137A 97               [ 1]  825 	ld xl,a
      00137B 7B 01            [ 1]  826 	ld a,(U8,sp) ; divisor
      00137D 62               [ 2]  827 	div x,a  ; R:LL/U8
      00137E 6B 01            [ 1]  828 	ld (U8,sp),a ; save remainder
      001380 9F               [ 1]  829 	ld a,xl
      001381 C7 00 0E         [ 1]  830 	ld acc24+2,a
      001384 84               [ 1]  831 	pop a
      001385 85               [ 2]  832 	popw x
      001386 81               [ 4]  833 	ret
                                    834 
                                    835 ;--------------------------------------
                                    836 ; unsigned multiply uint24_t by uint8_t
                                    837 ; use to convert numerical string to uint24_t
                                    838 ; input:
                                    839 ;	acc24	uint24_t 
                                    840 ;   A		uint8_t
                                    841 ; output:
                                    842 ;   acc24   A*acc24
                                    843 ;-------------------------------------
                                    844 ; local variables offset  on sp
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                           000003   845 	U8   = 3   ; A pushed on stack
                           000002   846 	OVFL = 2  ; multiplicaton overflow low byte
                           000001   847 	OVFH = 1  ; multiplication overflow high byte
                           000003   848 	VSIZE = 3
      001387                        849 mulu24_8:
      001387 89               [ 2]  850 	pushw x    ; save X
                                    851 	; local variables
      001388 88               [ 1]  852 	push a     ; U8
      001389 5F               [ 1]  853 	clrw x     ; initialize overflow to 0
      00138A 89               [ 2]  854 	pushw x    ; multiplication overflow
                                    855 ; multiply low byte.
      00138B C6 00 0E         [ 1]  856 	ld a,acc24+2
      00138E 97               [ 1]  857 	ld xl,a
      00138F 7B 03            [ 1]  858 	ld a,(U8,sp)
      001391 42               [ 4]  859 	mul x,a
      001392 9F               [ 1]  860 	ld a,xl
      001393 C7 00 0E         [ 1]  861 	ld acc24+2,a
      001396 9E               [ 1]  862 	ld a, xh
      001397 6B 02            [ 1]  863 	ld (OVFL,sp),a
                                    864 ; multipy middle byte
      001399 C6 00 0D         [ 1]  865 	ld a,acc24+1
      00139C 97               [ 1]  866 	ld xl,a
      00139D 7B 03            [ 1]  867 	ld a, (U8,sp)
      00139F 42               [ 4]  868 	mul x,a
                                    869 ; add overflow to this partial product
      0013A0 72 FB 01         [ 2]  870 	addw x,(OVFH,sp)
      0013A3 9F               [ 1]  871 	ld a,xl
      0013A4 C7 00 0D         [ 1]  872 	ld acc24+1,a
      0013A7 4F               [ 1]  873 	clr a
      0013A8 A9 00            [ 1]  874 	adc a,#0
      0013AA 6B 01            [ 1]  875 	ld (OVFH,sp),a
      0013AC 9E               [ 1]  876 	ld a,xh
      0013AD 6B 02            [ 1]  877 	ld (OVFL,sp),a
                                    878 ; multiply most signficant byte	
      0013AF C6 00 0C         [ 1]  879 	ld a, acc24
      0013B2 97               [ 1]  880 	ld xl, a
      0013B3 7B 03            [ 1]  881 	ld a, (U8,sp)
      0013B5 42               [ 4]  882 	mul x,a
      0013B6 72 FB 01         [ 2]  883 	addw x, (OVFH,sp)
      0013B9 9F               [ 1]  884 	ld a, xl
      0013BA C7 00 0C         [ 1]  885 	ld acc24,a
      0013BD 5B 03            [ 2]  886     addw sp,#VSIZE
      0013BF 85               [ 2]  887 	popw x
      0013C0 81               [ 4]  888 	ret
                                    889 
                                    890 ;------------------------------------
                                    891 ;  two's complement acc24
                                    892 ;  input:
                                    893 ;		acc24 variable
                                    894 ;  output:
                                    895 ;		acc24 variable
                                    896 ;-------------------------------------
      0013C1                        897 neg_acc24:
      0013C1 72 53 00 0E      [ 1]  898 	cpl acc24+2
      0013C5 72 53 00 0D      [ 1]  899 	cpl acc24+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0013C9 72 53 00 0C      [ 1]  900 	cpl acc24
      0013CD A6 01            [ 1]  901 	ld a,#1
      0013CF CB 00 0E         [ 1]  902 	add a,acc24+2
      0013D2 C7 00 0E         [ 1]  903 	ld acc24+2,a
      0013D5 4F               [ 1]  904 	clr a
      0013D6 C9 00 0D         [ 1]  905 	adc a,acc24+1
      0013D9 C7 00 0D         [ 1]  906 	ld acc24+1,a 
      0013DC 4F               [ 1]  907 	clr a 
      0013DD C9 00 0C         [ 1]  908 	adc a,acc24 
      0013E0 C7 00 0C         [ 1]  909 	ld acc24,a 
      0013E3 81               [ 4]  910 	ret
                                    911 
                                    912 
                                    913 
                                    914 
                                    915 ;------------------------------------
                                    916 ; convert alpha to uppercase
                                    917 ; input:
                                    918 ;    a  character to convert
                                    919 ; output:
                                    920 ;    a  uppercase character
                                    921 ;------------------------------------
      0013E4                        922 to_upper::
      0013E4 A1 61            [ 1]  923 	cp a,#'a
      0013E6 2A 01            [ 1]  924 	jrpl 1$
      0013E8 81               [ 4]  925 0$:	ret
      0013E9 A1 7A            [ 1]  926 1$: cp a,#'z	
      0013EB 22 FB            [ 1]  927 	jrugt 0$
      0013ED A0 20            [ 1]  928 	sub a,#32
      0013EF 81               [ 4]  929 	ret
                                    930 	
                                    931 ;------------------------------------
                                    932 ; convert pad content in integer
                                    933 ; input:
                                    934 ;    x		.asciz to convert
                                    935 ; output:
                                    936 ;    acc24      int24_t
                                    937 ;------------------------------------
                                    938 	; local variables
                           000001   939 	SIGN=1 ; 1 byte, 
                           000002   940 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   941 	TEMP=3 ; 1 byte, temporary storage
                           000003   942 	VSIZE=3 ; 3 bytes reserved for local storage
      0013F0                        943 atoi24::
      0013F0 89               [ 2]  944 	pushw x 
      0013F1                        945 	_vars VSIZE
      0013F1 52 03            [ 2]    1     sub sp,#VSIZE 
                                    946 	; acc24=0 
      0013F3 72 5F 00 0C      [ 1]  947 	clr acc24    
      0013F7 72 5F 00 0D      [ 1]  948 	clr acc16
      0013FB 72 5F 00 0E      [ 1]  949 	clr acc8 
      0013FF 0F 01            [ 1]  950 	clr (SIGN,sp)
      001401 A6 0A            [ 1]  951 	ld a,#10
      001403 6B 02            [ 1]  952 	ld (BASE,sp),a ; default base decimal
      001405 F6               [ 1]  953 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      001406 27 47            [ 1]  954 	jreq 9$  ; completed if 0
      001408 A1 2D            [ 1]  955 	cp a,#'-
      00140A 26 04            [ 1]  956 	jrne 1$
      00140C 03 01            [ 1]  957 	cpl (SIGN,sp)
      00140E 20 08            [ 2]  958 	jra 2$
      001410 A1 24            [ 1]  959 1$: cp a,#'$
      001412 26 06            [ 1]  960 	jrne 3$
      001414 A6 10            [ 1]  961 	ld a,#16
      001416 6B 02            [ 1]  962 	ld (BASE,sp),a
      001418 5C               [ 1]  963 2$:	incw x
      001419 F6               [ 1]  964 	ld a,(x)
      00141A                        965 3$:	
      00141A A1 61            [ 1]  966 	cp a,#'a
      00141C 2B 02            [ 1]  967 	jrmi 4$
      00141E A0 20            [ 1]  968 	sub a,#32
      001420 A1 30            [ 1]  969 4$:	cp a,#'0
      001422 2B 2B            [ 1]  970 	jrmi 9$
      001424 A0 30            [ 1]  971 	sub a,#'0
      001426 A1 0A            [ 1]  972 	cp a,#10
      001428 2B 06            [ 1]  973 	jrmi 5$
      00142A A0 07            [ 1]  974 	sub a,#7
      00142C 11 02            [ 1]  975 	cp a,(BASE,sp)
      00142E 2A 1F            [ 1]  976 	jrpl 9$
      001430 6B 03            [ 1]  977 5$:	ld (TEMP,sp),a
      001432 7B 02            [ 1]  978 	ld a,(BASE,sp)
      001434 CD 13 87         [ 4]  979 	call mulu24_8
      001437 7B 03            [ 1]  980 	ld a,(TEMP,sp)
      001439 CB 00 0E         [ 1]  981 	add a,acc24+2
      00143C C7 00 0E         [ 1]  982 	ld acc24+2,a
      00143F 4F               [ 1]  983 	clr a
      001440 C9 00 0D         [ 1]  984 	adc a,acc24+1
      001443 C7 00 0D         [ 1]  985 	ld acc24+1,a
      001446 4F               [ 1]  986 	clr a
      001447 C9 00 0C         [ 1]  987 	adc a,acc24
      00144A C7 00 0C         [ 1]  988 	ld acc24,a
      00144D 20 C9            [ 2]  989 	jra 2$
      00144F 0D 01            [ 1]  990 9$:	tnz (SIGN,sp)
      001451 27 03            [ 1]  991     jreq atoi_exit
      001453 CD 13 C1         [ 4]  992     call neg_acc24
      001456                        993 atoi_exit: 
      001456                        994 	_drop VSIZE
      001456 5B 03            [ 2]    1     addw sp,#VSIZE 
      001458 85               [ 2]  995 	popw x ; restore x
      001459 81               [ 4]  996 	ret
                                    997 
                                    998 
                                    999 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1000 ;;   TINY BASIC  operators,
                                   1001 ;;   commands and functions 
                                   1002 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1003 
                                   1004 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1005 ;;  Arithmetic operators
                                   1006 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                   1008 ;debug support
                           000001  1009 DEBUG_PRT=1
                           000001  1010 .if DEBUG_PRT 
                           000001  1011 	REGA=1
                           000002  1012 	SAVEB=2
                           000003  1013 	REGX=3
                           000005  1014 	REGY=5
                           000007  1015 	ACC24=7
                           000009  1016 	VSIZE=9 
      00145A                       1017 printxy:
      00145A                       1018 	_vars VSIZE 
      00145A 52 09            [ 2]    1     sub sp,#VSIZE 
      00145C 6B 01            [ 1] 1019 	ld (REGA,sp),a 
      00145E C6 00 0A         [ 1] 1020 	ld a,base 
      001461 6B 02            [ 1] 1021 	ld (SAVEB,sp),a
      001463 1F 03            [ 2] 1022 	ldw (REGX,sp),x
      001465 17 05            [ 2] 1023 	ldw (REGY,sp),y
      001467 CE 00 0C         [ 2] 1024 	ldw x,acc24 
      00146A C6 00 0E         [ 1] 1025 	ld a,acc8 
      00146D 1F 07            [ 2] 1026 	ldw (ACC24,sp),x 
      00146F 6B 09            [ 1] 1027 	ld (ACC24+2,sp),a 
      001471 35 10 00 0A      [ 1] 1028 	mov base,#16 
      001475 5F               [ 1] 1029 	clrw x 
      001476 7B 01            [ 1] 1030 	ld a,(REGA,sp)
      001478 97               [ 1] 1031 	ld xl,a 
      001479 CD 12 D8         [ 4] 1032 	call print_int
      00147C A6 20            [ 1] 1033 	ld a,#SPACE 
      00147E CD 03 32         [ 4] 1034 	call putc  
      001481 1E 03            [ 2] 1035 	ldw x,(REGX,sp)
      001483 CD 12 D8         [ 4] 1036 	call print_int 
      001486 A6 20            [ 1] 1037 	ld a,#SPACE 
      001488 CD 03 32         [ 4] 1038 	call putc  
      00148B 1E 05            [ 2] 1039 	ldw x,(REGY,sp)
      00148D CD 12 D8         [ 4] 1040 	call print_int 
      001490 A6 0D            [ 1] 1041 	ld a,#CR 
      001492 CD 03 32         [ 4] 1042 	call putc 
      001495 7B 09            [ 1] 1043 	ld a,(ACC24+2,sp)
      001497 1E 07            [ 2] 1044 	ldw x,(ACC24,sp)
      001499 CF 00 0C         [ 2] 1045 	ldw acc24,x 
      00149C C7 00 0E         [ 1] 1046 	ld acc8,a
      00149F 7B 02            [ 1] 1047 	ld a,(SAVEB,sp)
      0014A1 C7 00 0A         [ 1] 1048 	ld base,a 
      0014A4 7B 01            [ 1] 1049 	ld a,(REGA,sp)
      0014A6 1E 03            [ 2] 1050 	ldw x,(REGX,sp)
      0014A8 16 05            [ 2] 1051 	ldw y,(REGY,sp)
      0014AA                       1052 	_drop VSIZE 
      0014AA 5B 09            [ 2]    1     addw sp,#VSIZE 
      0014AC 81               [ 4] 1053 	ret 
                                   1054 .endif 
                                   1055 
                                   1056 
                                   1057 ;--------------------------------------
                                   1058 ;  multiply 2 uint16_t return uint32_t
                                   1059 ;  input:
                                   1060 ;     x       uint16_t 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                   1061 ;     y       uint16_t 
                                   1062 ;  output:
                                   1063 ;     x       product bits 15..0
                                   1064 ;     y       product bits 31..16 
                                   1065 ;---------------------------------------
                           000001  1066 		U1=1  ; uint16_t 
                           000003  1067 		DBL=3 ; uint32_t
                           000006  1068 		VSIZE=6
      0014AD                       1069 umstar:
      0014AD                       1070 	_vars VSIZE 
      0014AD 52 06            [ 2]    1     sub sp,#VSIZE 
      0014AF 1F 01            [ 2] 1071 	ldw (U1,sp),x 
                                   1072 ;initialize bits 31..16 of 
                                   1073 ;product to zero 
      0014B1 0F 03            [ 1] 1074 	clr (DBL,sp)
      0014B3 0F 04            [ 1] 1075 	clr (DBL+1,sp)
                                   1076 ; produc U1L*U2L 
      0014B5 90 9F            [ 1] 1077 	ld a,yl 
      0014B7 42               [ 4] 1078 	mul x,a 
      0014B8 1F 05            [ 2] 1079 	ldw (DBL+2,sp),x
                                   1080 ; product U1H*U2L 
      0014BA 7B 01            [ 1] 1081 	ld a,(U1,sp) ; xh 
      0014BC 93               [ 1] 1082 	ldw x,y
      0014BD 42               [ 4] 1083 	mul x,a 
      0014BE 4F               [ 1] 1084 	clr a 
      0014BF 72 FB 04         [ 2] 1085 	addw x,(DBL+1,sp) 
      0014C2 4F               [ 1] 1086 	clr a 
      0014C3 19 03            [ 1] 1087 	adc a,(DBL,sp) 
      0014C5 6B 03            [ 1] 1088 	ld (DBL,sp),a ; bits 23..17 
      0014C7 1F 04            [ 2] 1089 	ldw (DBL+1,sp),x ; bits 15..0 
                                   1090 ; product U1L*U2H
      0014C9 90 5E            [ 1] 1091 	swapw y 
      0014CB 93               [ 1] 1092 	ldw x,y
      0014CC 7B 02            [ 1] 1093 	ld a,(U1+1,sp)
      0014CE 42               [ 4] 1094 	mul x,a
      0014CF 72 FB 04         [ 2] 1095 	addw x,(DBL+1,sp)
      0014D2 4F               [ 1] 1096 	clr a 
      0014D3 19 03            [ 1] 1097 	adc a,(DBL,sp)
      0014D5 6B 03            [ 1] 1098 	ld (DBL,sp),a 
      0014D7 1F 04            [ 2] 1099 	ldw (DBL+1,sp),x 
                                   1100 ; product U1H*U2H 	
      0014D9 7B 01            [ 1] 1101 	ld a,(U1,sp)
      0014DB 93               [ 1] 1102 	ldw x,y  
      0014DC 42               [ 4] 1103 	mul x,a 
      0014DD 72 FB 03         [ 2] 1104 	addw x,(DBL,sp)
      0014E0 90 93            [ 1] 1105 	ldw y,x 
      0014E2 1E 05            [ 2] 1106 	ldw x,(DBL+2,sp)
      0014E4                       1107 	_drop VSIZE 
      0014E4 5B 06            [ 2]    1     addw sp,#VSIZE 
      0014E6 81               [ 4] 1108 	ret
                                   1109 
                                   1110 
                                   1111 ;-------------------------------------
                                   1112 ; multiply 2 integers
                                   1113 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                   1114 ;  	x       n1 
                                   1115 ;   y 		n2 
                                   1116 ; output:
                                   1117 ;	X        N1*N2 bits 15..0
                                   1118 ;   Y        N1*N2 bits 31..16 
                                   1119 ;-------------------------------------
                           000001  1120 	SIGN=1
                           000001  1121 	VSIZE=1
      0014E7                       1122 multiply:
      0014E7                       1123 	_vars VSIZE 
      0014E7 52 01            [ 2]    1     sub sp,#VSIZE 
      0014E9 0F 01            [ 1] 1124 	clr (SIGN,sp)
      0014EB 9E               [ 1] 1125 	ld a,xh 
      0014EC A4 80            [ 1] 1126 	and a,#0x80
      0014EE 2A 03            [ 1] 1127 	jrpl 1$
      0014F0 03 01            [ 1] 1128 	cpl (SIGN,sp)
      0014F2 50               [ 2] 1129 	negw x 
      0014F3                       1130 1$:	
      0014F3 90 9E            [ 1] 1131 	ld a,yh
      0014F5 A4 80            [ 1] 1132 	and a,#0x80  
      0014F7 2A 04            [ 1] 1133 	jrpl 2$ 
      0014F9 03 01            [ 1] 1134 	cpl (SIGN,sp)
      0014FB 90 50            [ 2] 1135 	negw y 
      0014FD                       1136 2$:	
      0014FD CD 14 AD         [ 4] 1137 	call umstar
      001500 7B 01            [ 1] 1138 	ld a,(SIGN,sp)
      001502 27 03            [ 1] 1139 	jreq 3$
      001504 CD 15 34         [ 4] 1140 	call dneg 
      001507                       1141 3$:	
      001507                       1142 	_drop VSIZE 
      001507 5B 01            [ 2]    1     addw sp,#VSIZE 
      001509 81               [ 4] 1143 	ret
                                   1144 
                                   1145 ;--------------------------------------
                                   1146 ; divide uint32_t/uint16_t
                                   1147 ; return:  quotient and remainder 
                                   1148 ; quotient expected to be uint16_t 
                                   1149 ; input:
                                   1150 ;   DBLDIVDND    on stack 
                                   1151 ;   X            divisor 
                                   1152 ; output:
                                   1153 ;   X            quotient 
                                   1154 ;   Y            remainder 
                                   1155 ;---------------------------------------
                           000003  1156 	VSIZE=3
      00150A                       1157 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      00150A                       1158 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   1159 	; local variables 
                           000001  1160 	DIVISOR=1 
                           000003  1161 	CNTR=3 
      00150A                       1162 udiv32_16:
      00150A                       1163 	_vars VSIZE 
      00150A 52 03            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      00150C 1F 01            [ 2] 1164 	ldw (DIVISOR,sp),x	; save divisor 
      00150E 1E 08            [ 2] 1165 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      001510 16 06            [ 2] 1166 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      001512 90 5D            [ 2] 1167 	tnzw y
      001514 26 06            [ 1] 1168 	jrne long_division 
      001516 16 01            [ 2] 1169 	ldw y,(DIVISOR,sp)
      001518 65               [ 2] 1170 	divw x,y
      001519                       1171 	_drop VSIZE 
      001519 5B 03            [ 2]    1     addw sp,#VSIZE 
      00151B 81               [ 4] 1172 	ret
      00151C                       1173 long_division:
      00151C 51               [ 1] 1174 	exgw x,y ; hi in x, lo in y 
      00151D A6 11            [ 1] 1175 	ld a,#17 
      00151F 6B 03            [ 1] 1176 	ld (CNTR,sp),a
      001521                       1177 1$:
      001521 13 01            [ 2] 1178 	cpw x,(DIVISOR,sp)
      001523 2B 03            [ 1] 1179 	jrmi 2$
      001525 72 F0 01         [ 2] 1180 	subw x,(DIVISOR,sp)
      001528 8C               [ 1] 1181 2$:	ccf 
      001529 90 59            [ 2] 1182 	rlcw y 
      00152B 59               [ 2] 1183 	rlcw x 
      00152C 0A 03            [ 1] 1184 	dec (CNTR,sp)
      00152E 26 F1            [ 1] 1185 	jrne 1$
      001530 51               [ 1] 1186 	exgw x,y 
      001531                       1187 	_drop VSIZE 
      001531 5B 03            [ 2]    1     addw sp,#VSIZE 
      001533 81               [ 4] 1188 	ret
                                   1189 
                                   1190 ;-----------------------------
                                   1191 ; negate double int.
                                   1192 ; input:
                                   1193 ;   x     bits 15..0
                                   1194 ;   y     bits 31..16
                                   1195 ; output: 
                                   1196 ;   x     bits 15..0
                                   1197 ;   y     bits 31..16
                                   1198 ;-----------------------------
      001534                       1199 dneg:
      001534 53               [ 2] 1200 	cplw x 
      001535 90 53            [ 2] 1201 	cplw y 
      001537 1C 00 01         [ 2] 1202 	addw x,#1 
      00153A 24 02            [ 1] 1203 	jrnc 1$
      00153C 90 5C            [ 1] 1204 	incw y 
      00153E 81               [ 4] 1205 1$: ret 
                                   1206 
                                   1207 
                                   1208 ;--------------------------------
                                   1209 ; sign extend single to double
                                   1210 ; input:
                                   1211 ;   x    int16_t
                                   1212 ; output:
                                   1213 ;   x    int32_t bits 15..0
                                   1214 ;   y    int32_t bits 31..16
                                   1215 ;--------------------------------
      00153F                       1216 dbl_sign_extend:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      00153F 90 5F            [ 1] 1217 	clrw y
      001541 9E               [ 1] 1218 	ld a,xh 
      001542 A4 80            [ 1] 1219 	and a,#0x80 
      001544 27 02            [ 1] 1220 	jreq 1$
      001546 90 53            [ 2] 1221 	cplw y
      001548 81               [ 4] 1222 1$: ret 	
                                   1223 
                                   1224 
                                   1225 ;----------------------------------
                                   1226 ;  euclidian divide dbl/n1 
                                   1227 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   1228 ; input:
                                   1229 ;    dbl    int32_t on stack 
                                   1230 ;    x 		n1   int16_t  disivor  
                                   1231 ; output:
                                   1232 ;    X      dbl/x  int16_t 
                                   1233 ;    Y      remainder int16_t 
                                   1234 ;----------------------------------
                           000008  1235 	VSIZE=8
      001549                       1236 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      001549                       1237 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      001549                       1238 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   1239 	; local variables
                           000001  1240 	DBLHI=1
                           000003  1241 	DBLLO=3 
                           000005  1242 	SDIVSR=5 ; sign divisor
                           000006  1243 	SQUOT=6 ; sign dividend 
                           000007  1244 	DIVISR=7 ; divisor 
      001549                       1245 div32_16:
      001549                       1246 	_vars VSIZE 
      001549 52 08            [ 2]    1     sub sp,#VSIZE 
      00154B 0F 05            [ 1] 1247 	clr (SDIVSR,sp)
      00154D 0F 06            [ 1] 1248 	clr (SQUOT,sp)
                                   1249 ; copy arguments 
      00154F 16 0B            [ 2] 1250 	ldw y,(DIVDNDHI,sp)
      001551 17 01            [ 2] 1251 	ldw (DBLHI,sp),y
      001553 16 0D            [ 2] 1252 	ldw y,(DIVDNDLO,sp)
      001555 17 03            [ 2] 1253 	ldw (DBLLO,sp),y 
                                   1254 ; check for 0 divisor
      001557 5D               [ 2] 1255 	tnzw x 
      001558 26 05            [ 1] 1256     jrne 0$
      00155A A6 04            [ 1] 1257 	ld a,#ERR_DIV0 
      00155C CC 11 97         [ 2] 1258 	jp tb_error 
                                   1259 ; check divisor sign 	
      00155F 9E               [ 1] 1260 0$:	ld a,xh 
      001560 A4 80            [ 1] 1261 	and a,#0x80 
      001562 27 05            [ 1] 1262 	jreq 1$
      001564 03 05            [ 1] 1263 	cpl (SDIVSR,sp)
      001566 03 06            [ 1] 1264 	cpl (SQUOT,sp)
      001568 50               [ 2] 1265 	negw x
      001569 1F 07            [ 2] 1266 1$:	ldw (DIVISR,sp),x
                                   1267 ; check dividend sign 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00156B 7B 01            [ 1] 1268  	ld a,(DBLHI,sp) 
      00156D A4 80            [ 1] 1269 	and a,#0x80 
      00156F 27 0D            [ 1] 1270 	jreq 2$ 
      001571 03 06            [ 1] 1271 	cpl (SQUOT,sp)
      001573 1E 03            [ 2] 1272 	ldw x,(DBLLO,sp)
      001575 16 01            [ 2] 1273 	ldw y,(DBLHI,sp)
      001577 CD 15 34         [ 4] 1274 	call dneg 
      00157A 1F 03            [ 2] 1275 	ldw (DBLLO,sp),x 
      00157C 17 01            [ 2] 1276 	ldw (DBLHI,sp),y 
      00157E 1E 07            [ 2] 1277 2$:	ldw x,(DIVISR,sp)
      001580 CD 15 0A         [ 4] 1278 	call udiv32_16
      001583 90 5D            [ 2] 1279 	tnzw y 
      001585 27 11            [ 1] 1280 	jreq 3$ 
                                   1281 ; x=quotient 
                                   1282 ; y=remainder 
                                   1283 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      001587 7B 06            [ 1] 1284 	ld a,(SQUOT,sp)
      001589 18 05            [ 1] 1285 	xor a,(SDIVSR,sp)
      00158B 27 0B            [ 1] 1286 	jreq 3$
      00158D 5C               [ 1] 1287 	incw x 
      00158E 90 CF 00 0D      [ 2] 1288 	ldw acc16,y 
      001592 16 07            [ 2] 1289 	ldw y,(DIVISR,sp)
      001594 72 B2 00 0D      [ 2] 1290 	subw y,acc16
                                   1291 ; sign quotient
      001598 7B 06            [ 1] 1292 3$:	ld a,(SQUOT,sp)
      00159A 27 01            [ 1] 1293 	jreq 4$
      00159C 50               [ 2] 1294 	negw x 
      00159D                       1295 4$:	
      00159D                       1296 	_drop VSIZE 
      00159D 5B 08            [ 2]    1     addw sp,#VSIZE 
      00159F 81               [ 4] 1297 	ret 
                                   1298 
                                   1299 
                                   1300 
                                   1301 ;----------------------------------
                                   1302 ; division x/y 
                                   1303 ; input:
                                   1304 ;    X       dividend
                                   1305 ;    Y       divisor 
                                   1306 ; output:
                                   1307 ;    X       quotient
                                   1308 ;    Y       remainder 
                                   1309 ;-----------------------------------
                           000004  1310 	VSIZE=4 
                                   1311 	; local variables 
                           000001  1312 	DBLHI=1
                           000003  1313 	DBLLO=3
      0015A0                       1314 divide: 
      0015A0                       1315 	_vars VSIZE 
      0015A0 52 04            [ 2]    1     sub sp,#VSIZE 
      0015A2 90 CF 00 0D      [ 2] 1316 	ldw acc16,y
      0015A6 CD 15 3F         [ 4] 1317 	call dbl_sign_extend
      0015A9 1F 03            [ 2] 1318 	ldw (DBLLO,sp),x 
      0015AB 17 01            [ 2] 1319 	ldw (DBLHI,sp),y 
      0015AD CE 00 0D         [ 2] 1320 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0015B0 CD 15 49         [ 4] 1321 	call div32_16 
      0015B3                       1322 	_drop VSIZE 
      0015B3 5B 04            [ 2]    1     addw sp,#VSIZE 
      0015B5 81               [ 4] 1323 	ret
                                   1324 
                                   1325 
                                   1326 ;----------------------------------
                                   1327 ;  remainder resulting from euclidian 
                                   1328 ;  division of x/y 
                                   1329 ; input:
                                   1330 ;   x   	dividend int16_t 
                                   1331 ;   y 		divisor int16_t
                                   1332 ; output:
                                   1333 ;   X       n1%n2 
                                   1334 ;----------------------------------
      0015B6                       1335 modulo:
      0015B6 CD 15 A0         [ 4] 1336 	call divide
      0015B9 93               [ 1] 1337 	ldw x,y 
      0015BA 81               [ 4] 1338 	ret 
                                   1339 
                                   1340 ;----------------------------------
                                   1341 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   1342 ; return expr1*expr2/expr3 
                                   1343 ; product result is int32_t and 
                                   1344 ; divisiont is int32_t/int16_t
                                   1345 ;----------------------------------
                           000004  1346 	DBL_SIZE=4 
      0015BB                       1347 muldiv:
      0015BB CD 16 31         [ 4] 1348 	call func_args 
      0015BE A1 03            [ 1] 1349 	cp a,#3 
      0015C0 27 03            [ 1] 1350 	jreq 1$
      0015C2 CC 11 95         [ 2] 1351 	jp syntax_error
      0015C5                       1352 1$: 
      0015C5 1E 05            [ 2] 1353 	ldw x,(5,sp) ; expr1
      0015C7 16 03            [ 2] 1354 	ldw y,(3,sp) ; expr2
      0015C9 CD 14 E7         [ 4] 1355 	call multiply 
      0015CC 1F 05            [ 2] 1356 	ldw (5,sp),x  ;int32_t 15..0
      0015CE 17 03            [ 2] 1357 	ldw (3,sp),y  ;int32_t 31..16
      0015D0 85               [ 2] 1358 	popw x        ; expr3 
      0015D1 CD 15 49         [ 4] 1359 	call div32_16 ; int32_t/expr3 
      0015D4                       1360 	_drop DBL_SIZE
      0015D4 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      0015D6 81               [ 4] 1361 	ret 
                                   1362 
                                   1363 
                                   1364 ;---------------------------------
                                   1365 ; dictionary search 
                                   1366 ; input:
                                   1367 ;	X 		dictionary entry point, name field  
                                   1368 ;   y		.asciz name to search 
                                   1369 ; output:
                                   1370 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   1371 ;  X		cmd_index
                                   1372 ;---------------------------------
                           000001  1373 	NLEN=1 ; cmd length 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                           000002  1374 	XSAVE=2
                           000004  1375 	YSAVE=4
                           000005  1376 	VSIZE=5 
      0015D7                       1377 search_dict::
      0015D7                       1378 	_vars VSIZE 
      0015D7 52 05            [ 2]    1     sub sp,#VSIZE 
                                   1379 
      0015D9 17 04            [ 2] 1380 	ldw (YSAVE,sp),y 
      0015DB                       1381 search_next:
      0015DB 1F 02            [ 2] 1382 	ldw (XSAVE,sp),x 
                                   1383 ; get name length in dictionary	
      0015DD F6               [ 1] 1384 	ld a,(x)
      0015DE A4 0F            [ 1] 1385 	and a,#0xf 
      0015E0 6B 01            [ 1] 1386 	ld (NLEN,sp),a  
      0015E2 16 04            [ 2] 1387 	ldw y,(YSAVE,sp) ; name pointer 
      0015E4 5C               [ 1] 1388 	incw x 
      0015E5                       1389 cp_loop:
      0015E5 90 F6            [ 1] 1390 	ld a,(y)
      0015E7 27 1B            [ 1] 1391 	jreq str_match 
      0015E9 0D 01            [ 1] 1392 	tnz (NLEN,sp)
      0015EB 27 0A            [ 1] 1393 	jreq no_match  
      0015ED F1               [ 1] 1394 	cp a,(x)
      0015EE 26 07            [ 1] 1395 	jrne no_match 
      0015F0 90 5C            [ 1] 1396 	incw y 
      0015F2 5C               [ 1] 1397 	incw x
      0015F3 0A 01            [ 1] 1398 	dec (NLEN,sp)
      0015F5 20 EE            [ 2] 1399 	jra cp_loop 
      0015F7                       1400 no_match:
      0015F7 1E 02            [ 2] 1401 	ldw x,(XSAVE,sp) 
      0015F9 1D 00 02         [ 2] 1402 	subw x,#2 ; move X to link field
      0015FC 4B 00            [ 1] 1403 	push #TK_NONE 
      0015FE FE               [ 2] 1404 	ldw x,(x) ; next word link 
      0015FF 84               [ 1] 1405 	pop a ; TK_NONE 
      001600 27 1F            [ 1] 1406 	jreq search_exit  ; not found  
                                   1407 ;try next 
      001602 20 D7            [ 2] 1408 	jra search_next
      001604                       1409 str_match:
      001604 1E 02            [ 2] 1410 	ldw x,(XSAVE,sp)
      001606 F6               [ 1] 1411 	ld a,(X)
      001607 6B 01            [ 1] 1412 	ld (NLEN,sp),a ; needed to test keyword type  
      001609 A4 0F            [ 1] 1413 	and a,#0xf 
                                   1414 ; move x to procedure address field 	
      00160B 4C               [ 1] 1415 	inc a 
      00160C C7 00 0E         [ 1] 1416 	ld acc8,a 
      00160F 72 5F 00 0D      [ 1] 1417 	clr acc16 
      001613 72 BB 00 0D      [ 2] 1418 	addw x,acc16 
      001617 FE               [ 2] 1419 	ldw x,(x) ; routine index  
                                   1420 ;determine keyword type bits 7:6 
      001618 7B 01            [ 1] 1421 	ld a,(NLEN,sp)
      00161A 4E               [ 1] 1422 	swap a 
      00161B A4 0C            [ 1] 1423 	and a,#0xc
      00161D 44               [ 1] 1424 	srl a
      00161E 44               [ 1] 1425 	srl a 
      00161F AB 80            [ 1] 1426 	add a,#128
      001621                       1427 search_exit: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      001621                       1428 	_drop VSIZE 	 
      001621 5B 05            [ 2]    1     addw sp,#VSIZE 
      001623 81               [ 4] 1429 	ret 
                                   1430 
                                   1431 ;---------------------
                                   1432 ; check if next token
                                   1433 ;  is of expected type 
                                   1434 ; input:
                                   1435 ;   A 		 expected token attribute
                                   1436 ;  ouput:
                                   1437 ;   none     if fail call syntax_error 
                                   1438 ;--------------------
      001624                       1439 expect:
      001624 88               [ 1] 1440 	push a 
      001625 CD 12 88         [ 4] 1441 	call next_token 
      001628 11 01            [ 1] 1442 	cp a,(1,sp)
      00162A 27 03            [ 1] 1443 	jreq 1$
      00162C CC 11 95         [ 2] 1444 	jp syntax_error
      00162F 84               [ 1] 1445 1$: pop a 
      001630 81               [ 4] 1446 	ret 
                                   1447 
                                   1448 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1449 ; parse arguments list 
                                   1450 ; between ()
                                   1451 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001631                       1452 func_args:
      001631 A6 07            [ 1] 1453 	ld a,#TK_LPAREN 
      001633 CD 16 24         [ 4] 1454 	call expect 
                                   1455 ; expected to continue in arg_list 
                                   1456 ; caller must check for TK_RPAREN 
                                   1457 
                                   1458 ;-------------------------------
                                   1459 ; parse embedded BASIC routines 
                                   1460 ; arguments list.
                                   1461 ; arg_list::=  rel[','rel]*
                                   1462 ; all arguments are of integer type
                                   1463 ; and pushed on stack 
                                   1464 ; input:
                                   1465 ;   none
                                   1466 ; output:
                                   1467 ;   stack{n}   arguments pushed on stack
                                   1468 ;   A 	number of arguments pushed on stack  
                                   1469 ;--------------------------------
      001636                       1470 arg_list:
      001636 4B 00            [ 1] 1471 	push #0  
      001638 CD 17 7E         [ 4] 1472 1$: call relation
      00163B A1 00            [ 1] 1473 	cp a,#TK_NONE 
      00163D 27 20            [ 1] 1474 	jreq 5$
      00163F A1 84            [ 1] 1475 	cp a,#TK_INTGR
      001641 26 13            [ 1] 1476 	jrne 4$
      001643                       1477 3$: 
                                   1478 ; swap return address with argument
      001643 84               [ 1] 1479 	pop a ; arg_count
      001644 90 85            [ 2] 1480 	popw y ; return address 
      001646 89               [ 2] 1481 	pushw x ; new argument 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      001647 90 89            [ 2] 1482 	pushw y 
      001649 4C               [ 1] 1483     inc a
      00164A 88               [ 1] 1484 	push a 
      00164B CD 12 88         [ 4] 1485 	call next_token 
      00164E A1 09            [ 1] 1486 	cp a,#TK_COMMA 
      001650 27 E6            [ 1] 1487 	jreq 1$ 
      001652 A1 00            [ 1] 1488 	cp a,#TK_NONE 
      001654 27 09            [ 1] 1489 	jreq 5$ 
      001656 A1 08            [ 1] 1490 4$:	cp a,#TK_RPAREN 
      001658 27 05            [ 1] 1491 	jreq 5$
      00165A                       1492 	_unget_token 
      00165A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00165F 84               [ 1] 1493 5$:	pop a  
      001660 81               [ 4] 1494 	ret 
                                   1495 
                                   1496 ;--------------------------------
                                   1497 ;   BASIC commnands 
                                   1498 ;--------------------------------
                                   1499 
                                   1500 ;--------------------------------
                                   1501 ;  arithmetic and relational 
                                   1502 ;  routines
                                   1503 ;  operators precedence
                                   1504 ;  highest to lowest
                                   1505 ;  operators on same row have 
                                   1506 ;  same precedence and are executed
                                   1507 ;  from left to right.
                                   1508 ;	'*','/','%'
                                   1509 ;   '-','+'
                                   1510 ;   '=','>','<','>=','<=','<>','><'
                                   1511 ;   '<>' and '><' are equivalent for not equal.
                                   1512 ;--------------------------------
                                   1513 
                                   1514 ;---------------------
                                   1515 ; return array element
                                   1516 ; address from @(expr)
                                   1517 ; input:
                                   1518 ;   A 		TK_ARRAY
                                   1519 ; output:
                                   1520 ;   A 		TK_INTGR
                                   1521 ;	X 		element address 
                                   1522 ;----------------------
      001661                       1523 get_array_element:
      001661 CD 16 31         [ 4] 1524 	call func_args 
      001664 A1 01            [ 1] 1525 	cp a,#1
      001666 27 03            [ 1] 1526 	jreq 1$
      001668 CC 11 95         [ 2] 1527 	jp syntax_error
      00166B 85               [ 2] 1528 1$: popw x 
                                   1529 	; check for bounds 
      00166C C3 00 1F         [ 2] 1530 	cpw x,array_size 
      00166F 23 05            [ 2] 1531 	jrule 3$
                                   1532 ; bounds {1..array_size}	
      001671 A6 0A            [ 1] 1533 2$: ld a,#ERR_BAD_VALUE 
      001673 CC 11 97         [ 2] 1534 	jp tb_error 
      001676 5D               [ 2] 1535 3$: tnzw  x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      001677 27 F8            [ 1] 1536 	jreq 2$ 
      001679 58               [ 2] 1537 	sllw x 
      00167A 89               [ 2] 1538 	pushw x 
      00167B AE 16 90         [ 2] 1539 	ldw x,#tib
      00167E 72 F0 01         [ 2] 1540 	subw x,(1,sp)
      001681                       1541 	_drop 2   
      001681 5B 02            [ 2]    1     addw sp,#2 
      001683 A6 84            [ 1] 1542 	ld a,#TK_INTGR
      001685 81               [ 4] 1543 	ret 
                                   1544 
                                   1545 
                                   1546 ;***********************************
                                   1547 ;   expression parse,execute 
                                   1548 ;***********************************
                                   1549 ;-----------------------------------
                                   1550 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1551 ;			 integer | function |
                                   1552 ;			 '('relation')' 
                                   1553 ; output:
                                   1554 ;   A    token attribute 
                                   1555 ;   X 	 integer
                                   1556 ; ---------------------------------
                           000001  1557 	NEG=1
                           000001  1558 	VSIZE=1
      001686                       1559 factor:
      001686                       1560 	_vars VSIZE 
      001686 52 01            [ 2]    1     sub sp,#VSIZE 
      001688 CD 12 88         [ 4] 1561 	call next_token
      00168B A1 02            [ 1] 1562 	cp a,#CMD_END  
      00168D 25 3D            [ 1] 1563 	jrult 16$
      00168F 6B 01            [ 1] 1564 1$:	ld (NEG,sp),a 
      001691 A4 30            [ 1] 1565 	and a,#TK_GRP_MASK
      001693 A1 10            [ 1] 1566 	cp a,#TK_GRP_ADD 
      001695 27 04            [ 1] 1567 	jreq 2$
      001697 7B 01            [ 1] 1568 	ld a,(NEG,sp)
      001699 20 03            [ 2] 1569 	jra 4$  
      00169B                       1570 2$:	
      00169B CD 12 88         [ 4] 1571 	call next_token 
      00169E                       1572 4$:	
      00169E A1 81            [ 1] 1573 	cp a,#TK_IFUNC 
      0016A0 26 03            [ 1] 1574 	jrne 5$ 
      0016A2 FD               [ 4] 1575 	call (x) 
      0016A3 20 32            [ 2] 1576 	jra 18$ 
      0016A5                       1577 5$:
      0016A5 A1 84            [ 1] 1578 	cp a,#TK_INTGR
      0016A7 26 02            [ 1] 1579 	jrne 6$
      0016A9 20 2C            [ 2] 1580 	jra 18$
      0016AB                       1581 6$:
      0016AB A1 05            [ 1] 1582 	cp a,#TK_ARRAY
      0016AD 26 06            [ 1] 1583 	jrne 10$
      0016AF CD 16 61         [ 4] 1584 	call get_array_element
      0016B2 FE               [ 2] 1585 	ldw x,(x)
      0016B3 20 22            [ 2] 1586 	jra 18$ 
      0016B5                       1587 10$:
      0016B5 A1 85            [ 1] 1588 	cp a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      0016B7 26 03            [ 1] 1589 	jrne 12$
      0016B9 FE               [ 2] 1590 	ldw x,(x)
      0016BA 20 1B            [ 2] 1591 	jra 18$
      0016BC                       1592 12$:			
      0016BC A1 07            [ 1] 1593 	cp a,#TK_LPAREN
      0016BE 26 0C            [ 1] 1594 	jrne 16$
      0016C0 CD 17 7E         [ 4] 1595 	call relation
      0016C3 89               [ 2] 1596 	pushw x 
      0016C4 A6 08            [ 1] 1597 	ld a,#TK_RPAREN 
      0016C6 CD 16 24         [ 4] 1598 	call expect
      0016C9 85               [ 2] 1599 	popw x 
      0016CA 20 0B            [ 2] 1600 	jra 18$	
      0016CC                       1601 16$:
      0016CC 4D               [ 1] 1602 	tnz a 
      0016CD 27 11            [ 1] 1603 	jreq 20$ 
      0016CF                       1604 	_unget_token
      0016CF 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0016D4 4F               [ 1] 1605 	clr a 
      0016D5 20 09            [ 2] 1606 	jra 20$ 
      0016D7                       1607 18$: 
      0016D7 A6 11            [ 1] 1608 	ld a,#TK_MINUS 
      0016D9 11 01            [ 1] 1609 	cp a,(NEG,sp)
      0016DB 26 01            [ 1] 1610 	jrne 19$
      0016DD 50               [ 2] 1611 	negw x
      0016DE                       1612 19$:
      0016DE A6 84            [ 1] 1613 	ld a,#TK_INTGR
      0016E0                       1614 20$:
      0016E0                       1615 	_drop VSIZE
      0016E0 5B 01            [ 2]    1     addw sp,#VSIZE 
      0016E2 81               [ 4] 1616 	ret
                                   1617 
                                   1618 ;-----------------------------------
                                   1619 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1620 ; output:
                                   1621 ;   A    	token attribute 
                                   1622 ;	X		integer
                                   1623 ;-----------------------------------
                           000001  1624 	N1=1   ; int16_t
                           000003  1625 	MULOP=3
                           000003  1626 	VSIZE=3
      0016E3                       1627 term:
      0016E3                       1628 	_vars VSIZE
      0016E3 52 03            [ 2]    1     sub sp,#VSIZE 
      0016E5 CD 16 86         [ 4] 1629 	call factor
      0016E8 4D               [ 1] 1630 	tnz a 
      0016E9 27 47            [ 1] 1631 	jreq term_exit 
      0016EB                       1632 term01:	 ; check for  operator 
      0016EB 1F 01            [ 2] 1633 	ldw (N1,sp),x  ; save first factor 
      0016ED CD 12 88         [ 4] 1634 	call next_token
      0016F0 6B 03            [ 1] 1635 	ld (MULOP,sp),a
      0016F2 A1 02            [ 1] 1636 	cp a,#CMD_END
      0016F4 25 2F            [ 1] 1637 	jrult 8$
      0016F6 A4 30            [ 1] 1638 	and a,#TK_GRP_MASK
      0016F8 A1 20            [ 1] 1639 	cp a,#TK_GRP_MULT
      0016FA 27 02            [ 1] 1640 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      0016FC 20 27            [ 2] 1641 	jra 8$
      0016FE                       1642 1$:	; got *|/|%
      0016FE CD 16 86         [ 4] 1643 	call factor
      001701 A1 84            [ 1] 1644 	cp a,#TK_INTGR
      001703 27 03            [ 1] 1645 	jreq 2$
      001705 CC 11 95         [ 2] 1646 	jp syntax_error
      001708 90 93            [ 1] 1647 2$:	ldw y,x 
      00170A 1E 01            [ 2] 1648 	ldw x,(N1,sp)
      00170C 7B 03            [ 1] 1649 	ld a,(MULOP,sp) 
      00170E A1 20            [ 1] 1650 	cp a,#TK_MULT 
      001710 26 05            [ 1] 1651 	jrne 3$
      001712 CD 14 E7         [ 4] 1652 	call multiply 
      001715 20 D4            [ 2] 1653 	jra term01
      001717 A1 21            [ 1] 1654 3$: cp a,#TK_DIV 
      001719 26 05            [ 1] 1655 	jrne 4$ 
      00171B CD 15 A0         [ 4] 1656 	call divide 
      00171E 20 CB            [ 2] 1657 	jra term01 
      001720 CD 15 B6         [ 4] 1658 4$: call modulo
      001723 20 C6            [ 2] 1659 	jra term01 
      001725 7B 03            [ 1] 1660 8$: ld a,(MULOP,sp)
      001727 27 05            [ 1] 1661 	jreq 9$ 
      001729                       1662 	_unget_token
      001729 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00172E 1E 01            [ 2] 1663 9$: ldw x,(N1,sp)
      001730 A6 84            [ 1] 1664 	ld a,#TK_INTGR 	
      001732                       1665 term_exit:
      001732                       1666 	_drop VSIZE 
      001732 5B 03            [ 2]    1     addw sp,#VSIZE 
      001734 81               [ 4] 1667 	ret 
                                   1668 
                                   1669 ;-------------------------------
                                   1670 ;  expr ::= term [['+'|'-'] term]*
                                   1671 ;  result range {-32768..32767}
                                   1672 ;  output:
                                   1673 ;   A    token attribute 
                                   1674 ;   X	 integer   
                                   1675 ;-------------------------------
                           000001  1676 	N1=1
                           000003  1677 	N2=3 
                           000005  1678 	OP=5 
                           000005  1679 	VSIZE=5 
      001735                       1680 expression:
      001735                       1681 	_vars VSIZE 
      001735 52 05            [ 2]    1     sub sp,#VSIZE 
      001737 CD 16 E3         [ 4] 1682 	call term
      00173A 4D               [ 1] 1683 	tnz a 
      00173B 27 3E            [ 1] 1684 	jreq expr_exit 
      00173D 1F 01            [ 2] 1685 1$:	ldw (N1,sp),x 
      00173F CD 12 88         [ 4] 1686 	call next_token
      001742 6B 05            [ 1] 1687 	ld (OP,sp),a 
      001744 A1 02            [ 1] 1688 	cp a,#CMD_END 
      001746 25 26            [ 1] 1689 	jrult 8$ 
      001748 A4 30            [ 1] 1690 	and a,#TK_GRP_MASK
      00174A A1 10            [ 1] 1691 	cp a,#TK_GRP_ADD 
      00174C 27 02            [ 1] 1692 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      00174E 20 1E            [ 2] 1693 	jra 8$
      001750                       1694 2$: 
      001750 CD 16 E3         [ 4] 1695 	call term
      001753 A1 84            [ 1] 1696 	cp a,#TK_INTGR
      001755 27 03            [ 1] 1697 	jreq 3$
      001757 CC 11 95         [ 2] 1698 	jp syntax_error
      00175A 1F 03            [ 2] 1699 3$:	ldw (N2,sp),x 
      00175C 1E 01            [ 2] 1700 	ldw x,(N1,sp)
      00175E 7B 05            [ 1] 1701 	ld a,(OP,sp)
      001760 A1 10            [ 1] 1702 	cp a,#TK_PLUS 
      001762 26 05            [ 1] 1703 	jrne 4$
      001764 72 FB 03         [ 2] 1704 	addw x,(N2,sp)
      001767 20 D4            [ 2] 1705 	jra 1$ 
      001769 72 F0 03         [ 2] 1706 4$:	subw x,(N2,sp)
      00176C 20 CF            [ 2] 1707 	jra 1$
      00176E 7B 05            [ 1] 1708 8$: ld a,(OP,sp)
      001770 27 05            [ 1] 1709 	jreq 9$ 
      001772                       1710 	_unget_token	
      001772 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001777 1E 01            [ 2] 1711 9$: ldw x,(N1,sp)
      001779 A6 84            [ 1] 1712 	ld a,#TK_INTGR	
      00177B                       1713 expr_exit:
      00177B                       1714 	_drop VSIZE 
      00177B 5B 05            [ 2]    1     addw sp,#VSIZE 
      00177D 81               [ 4] 1715 	ret 
                                   1716 
                                   1717 ;---------------------------------------------
                                   1718 ; rel ::= expr rel_op expr
                                   1719 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1720 ;  relation return  integer , zero is false 
                                   1721 ;  output:
                                   1722 ;    A 		token attribute  
                                   1723 ;	 X		integer 
                                   1724 ;---------------------------------------------
                           000001  1725 	N1=1
                           000003  1726 	RELOP=3
                           000003  1727 	VSIZE=3 
      00177E                       1728 relation: 
      00177E                       1729 	_vars VSIZE
      00177E 52 03            [ 2]    1     sub sp,#VSIZE 
      001780 CD 17 35         [ 4] 1730 	call expression
      001783 4D               [ 1] 1731 	tnz a 
      001784 27 4D            [ 1] 1732 	jreq rel_exit
      001786 1F 01            [ 2] 1733 	ldw (N1,sp),x 
                                   1734 ; expect rel_op or leave 
      001788 CD 12 88         [ 4] 1735 	call next_token 
      00178B 6B 03            [ 1] 1736 	ld (RELOP,sp),a 
      00178D A4 30            [ 1] 1737 	and a,#TK_GRP_MASK
      00178F A1 30            [ 1] 1738 	cp a,#TK_GRP_RELOP 
      001791 26 33            [ 1] 1739 	jrne 8$
      001793                       1740 2$:	; expect another expression
      001793 CD 17 35         [ 4] 1741 	call expression
      001796 A1 84            [ 1] 1742 	cp a,#TK_INTGR
      001798 27 03            [ 1] 1743 	jreq 3$
      00179A CC 11 95         [ 2] 1744 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      00179D CF 00 0D         [ 2] 1745 3$:	ldw acc16,x 
      0017A0 1E 01            [ 2] 1746 	ldw x,(N1,sp) 
      0017A2 72 B0 00 0D      [ 2] 1747 	subw x,acc16
      0017A6 26 06            [ 1] 1748 	jrne 4$
      0017A8 35 02 00 0E      [ 1] 1749 	mov acc8,#2 ; n1==n2
      0017AC 20 0C            [ 2] 1750 	jra 6$ 
      0017AE                       1751 4$: 
      0017AE 2C 06            [ 1] 1752 	jrsgt 5$  
      0017B0 35 04 00 0E      [ 1] 1753 	mov acc8,#4 ; n1<2 
      0017B4 20 04            [ 2] 1754 	jra 6$
      0017B6                       1755 5$:
      0017B6 35 01 00 0E      [ 1] 1756 	mov acc8,#1 ; n1>n2 
      0017BA                       1757 6$:
      0017BA 5F               [ 1] 1758 	clrw x 
      0017BB C6 00 0E         [ 1] 1759 	ld a, acc8  
      0017BE 14 03            [ 1] 1760 	and a,(RELOP,sp)
      0017C0 4D               [ 1] 1761 	tnz a 
      0017C1 27 0E            [ 1] 1762 	jreq 10$
      0017C3 5C               [ 1] 1763 	incw x 
      0017C4 20 0B            [ 2] 1764 	jra 10$  	
      0017C6 7B 03            [ 1] 1765 8$: ld a,(RELOP,sp)
      0017C8 27 05            [ 1] 1766 	jreq 9$
      0017CA                       1767 	_unget_token
      0017CA 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0017CF                       1768 9$: 
      0017CF 1E 01            [ 2] 1769 	ldw x,(N1,sp)
      0017D1                       1770 10$:
      0017D1 A6 84            [ 1] 1771 	ld a,#TK_INTGR
      0017D3                       1772 rel_exit:
      0017D3                       1773 	_drop VSIZE
      0017D3 5B 03            [ 2]    1     addw sp,#VSIZE 
      0017D5 81               [ 4] 1774 	ret 
                                   1775 
                                   1776 ;--------------------------------
                                   1777 ; BASIC: SHOW 
                                   1778 ; print stack content in hexadecimal bytes 
                                   1779 ; 16 bytes per row 
                                   1780 ;--------------------------------
      0017D6                       1781 show:
      0017D6 AE 17 F0         [ 2] 1782 	ldw x,#cstk_prompt
      0017D9 CD 03 8F         [ 4] 1783 	call puts 
      0017DC 96               [ 1] 1784 	ldw x,sp 
      0017DD 1C 00 03         [ 2] 1785 	addw x,#3 ; ignore return address
      0017E0 90 AE 18 00      [ 2] 1786 	ldw y,#RAM_SIZE  
      0017E4 CF 00 0D         [ 2] 1787 	ldw acc16,x 
      0017E7 72 B2 00 0D      [ 2] 1788 	subw y,acc16
      0017EB CD 0E 04         [ 4] 1789 	call hex_dump
      0017EE 4F               [ 1] 1790 	clr a 
      0017EF 81               [ 4] 1791 	ret
                                   1792 
      0017F0 0A 63 6F 6E 74 65 6E  1793 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



             6D 3A 0A 00
                                   1794 
                                   1795 
                                   1796 ;--------------------------------------------
                                   1797 ; BASIC: HEX 
                                   1798 ; select hexadecimal base for integer print
                                   1799 ;---------------------------------------------
      001817                       1800 hex_base:
      001817 35 10 00 0A      [ 1] 1801 	mov base,#16 
      00181B 81               [ 4] 1802 	ret 
                                   1803 
                                   1804 ;--------------------------------------------
                                   1805 ; BASIC: DEC 
                                   1806 ; select decimal base for integer print
                                   1807 ;---------------------------------------------
      00181C                       1808 dec_base:
      00181C 35 0A 00 0A      [ 1] 1809 	mov base,#10
      001820 81               [ 4] 1810 	ret 
                                   1811 
                                   1812 ;------------------------
                                   1813 ; BASIC: FREE 
                                   1814 ; return free size in RAM 
                                   1815 ; output:
                                   1816 ;   A 		TK_INTGR
                                   1817 ;   X 	    size integer
                                   1818 ;--------------------------
      001821                       1819 free:
      001821 AE 16 90         [ 2] 1820 	ldw x,#tib 
      001824 90 CE 00 1A      [ 2] 1821 	ldw y,txtbgn 
      001828 90 A3 2D 80      [ 2] 1822 	cpw y,#app_space
      00182C 25 05            [ 1] 1823 	jrult 1$
      00182E 1D 00 80         [ 2] 1824 	subw x,#free_ram 
      001831 20 04            [ 2] 1825 	jra 2$ 
      001833                       1826 1$:	
      001833 72 B0 00 1C      [ 2] 1827 	subw x,txtend 
      001837 A6 84            [ 1] 1828 2$:	ld a,#TK_INTGR
      001839 81               [ 4] 1829 	ret 
                                   1830 
                                   1831 ;------------------------------
                                   1832 ; BASIC: SIZE 
                                   1833 ; command that print 
                                   1834 ; program start addres and size 
                                   1835 ;------------------------------
      00183A                       1836 cmd_size:
      00183A 3B 00 0A         [ 1] 1837 	push base 
      00183D AE 19 D0         [ 2] 1838 	ldw x,#PROG_ADDR 
      001840 CD 03 8F         [ 4] 1839 	call puts 
      001843 CE 00 1A         [ 2] 1840 	ldw x,txtbgn     
      001846 35 10 00 0A      [ 1] 1841 	mov base,#16 
      00184A CD 12 D8         [ 4] 1842 	call print_int
      00184D 32 00 0A         [ 1] 1843 	pop base 
      001850 AE 19 E2         [ 2] 1844 	ldw x,#PROG_SIZE 
      001853 CD 03 8F         [ 4] 1845 	call puts 
      001856 CE 00 1C         [ 2] 1846 	ldw x,txtend 
      001859 72 B0 00 1A      [ 2] 1847 	subw x,txtbgn 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      00185D CD 12 D8         [ 4] 1848 	call print_int
      001860 AE 19 F3         [ 2] 1849 	ldw x,#STR_BYTES 
      001863 CD 03 8F         [ 4] 1850 	call puts  
      001866 81               [ 4] 1851 	ret 
                                   1852 
                                   1853 
                                   1854 ;------------------------
                                   1855 ; BASIC: UBOUND  
                                   1856 ; return array variable size 
                                   1857 ; output:
                                   1858 ;   A 		TK_INTGR
                                   1859 ;   X 	    array size 
                                   1860 ;--------------------------
      001867                       1861 ubound:
      001867 CD 18 21         [ 4] 1862 	call free 
      00186A 54               [ 2] 1863 	srlw x 
      00186B CF 00 1F         [ 2] 1864 	ldw array_size,x
      00186E A6 84            [ 1] 1865 	ld a,#TK_INTGR
      001870 81               [ 4] 1866 	ret 
                                   1867 
                                   1868 ;-----------------------------
                                   1869 ; BASIC: LET var=expr 
                                   1870 ; variable assignement 
                                   1871 ; output:
                                   1872 ;   A 		TK_NONE 
                                   1873 ;-----------------------------
      001871                       1874 let::
      001871 CD 12 88         [ 4] 1875 	call next_token 
      001874 A1 85            [ 1] 1876 	cp a,#TK_VAR 
      001876 27 0A            [ 1] 1877 	jreq let_var
      001878 A1 05            [ 1] 1878 	cp a,#TK_ARRAY 
      00187A 27 03            [ 1] 1879 	jreq  let_array
      00187C CC 11 95         [ 2] 1880 	jp syntax_error
      00187F                       1881 let_array:
      00187F CD 16 61         [ 4] 1882 	call get_array_element
      001882                       1883 let_var:
      001882 89               [ 2] 1884 	pushw x  
      001883 CD 12 88         [ 4] 1885 	call next_token 
      001886 A1 32            [ 1] 1886 	cp a,#TK_EQUAL
      001888 27 03            [ 1] 1887 	jreq 1$
      00188A CC 11 95         [ 2] 1888 	jp syntax_error
      00188D                       1889 1$:	
      00188D CD 17 7E         [ 4] 1890 	call relation   
      001890 A1 84            [ 1] 1891 	cp a,#TK_INTGR 
      001892 27 03            [ 1] 1892 	jreq 2$
      001894 CC 11 95         [ 2] 1893 	jp syntax_error
      001897                       1894 2$:	
      001897 90 93            [ 1] 1895 	ldw y,x 
      001899 85               [ 2] 1896 	popw x   
      00189A FF               [ 2] 1897 	ldw (x),y   
      00189B 81               [ 4] 1898 	ret 
                                   1899 
                                   1900 
                                   1901 ;--------------------------
                                   1902 ; BASIC: EEFREE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                   1903 ; eeprom_free 
                                   1904 ; search end of data  
                                   1905 ; in EEPROM 
                                   1906 ; input:
                                   1907 ;    none 
                                   1908 ; output:
                                   1909 ;    X     address free
                                   1910 ;    A     TK_INTGR  
                                   1911 ;-------------------------
      00189C                       1912 func_eefree:
      00189C AE 40 00         [ 2] 1913 	ldw x,#EEPROM_BASE 
      00189F 35 08 00 0E      [ 1] 1914 1$:	mov acc8,#8 ; count 8 consecutive zeros
      0018A3 A3 47 F8         [ 2] 1915     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      0018A6 24 17            [ 1] 1916 	jruge 8$ ; no free space 
      0018A8 F6               [ 1] 1917 2$: ld a,(x)
      0018A9 26 0C            [ 1] 1918 	jrne 3$
      0018AB 5C               [ 1] 1919 	incw x 
      0018AC 72 5A 00 0E      [ 1] 1920 	dec acc8 
      0018B0 26 F6            [ 1] 1921 	jrne 2$
      0018B2 1D 00 08         [ 2] 1922 	subw x,#8 
      0018B5 20 09            [ 2] 1923 	jra 9$  
      0018B7 F6               [ 1] 1924 3$: ld a,(x)
      0018B8 5C               [ 1] 1925 	incw x
      0018B9 4D               [ 1] 1926 	tnz a  
      0018BA 26 FB            [ 1] 1927 	jrne 3$
      0018BC 5A               [ 2] 1928 	decw x   
      0018BD 20 E0            [ 2] 1929 	jra 1$ 
      0018BF 5F               [ 1] 1930 8$: clrw x ; no free space 
      0018C0                       1931 9$:
      0018C0 CF 00 23         [ 2] 1932 	ldw free_eeprom,x ; save in system variable 
      0018C3 A6 84            [ 1] 1933 	ld a,#TK_INTGR
      0018C5 81               [ 4] 1934 	ret 
                                   1935 
                                   1936 ;--------------------------
                                   1937 ; search constant name 
                                   1938 ; format of constant record  
                                   1939 ;   .byte record length 
                                   1940 ;         = strlen(name)+5 
                                   1941 ;   .asciz name (variable length)
                                   1942 ;   .word value (2 bytes )
                                   1943 ; a constant record use 6+ bytes
                                   1944 ; constants are saved in EEPROM  
                                   1945 ; input:
                                   1946 ;    X     *name
                                   1947 ;    A     record length  
                                   1948 ; output:
                                   1949 ;    X     address|0
                                   1950 ; use:
                                   1951 ;   A,Y, acc16 
                                   1952 ;-------------------------
                           000001  1953 	NAMEPTR=1 ; target name pointer 
                           000003  1954 	EEPTR=3   ; walking pointer in EEPROM
                           000005  1955 	RECLEN=5  ; record length of targer 
                           000005  1956 	VSIZE=5
      0018C6                       1957 search_const:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0018C6 90 89            [ 2] 1958 	pushw y 
      0018C8                       1959 	_vars VSIZE
      0018C8 52 05            [ 2]    1     sub sp,#VSIZE 
      0018CA 72 5F 00 0D      [ 1] 1960 	clr acc16 
      0018CE 6B 05            [ 1] 1961 	ld (RECLEN,sp),a    
      0018D0 1F 01            [ 2] 1962 	ldw (NAMEPTR,sp),x
      0018D2 90 AE 40 00      [ 2] 1963 	ldw y,#EEPROM_BASE 
      0018D6 1E 01            [ 2] 1964 1$:	ldw x,(NAMEPTR,sp)
      0018D8 17 03            [ 2] 1965 	ldw (EEPTR,sp),y
      0018DA 90 C3 00 23      [ 2] 1966 	cpw y, free_eeprom 
      0018DE 24 1A            [ 1] 1967 	jruge 7$ ; no match found 
      0018E0 90 F6            [ 1] 1968 	ld a,(y)
      0018E2 11 05            [ 1] 1969 	cp a,(RECLEN,sp)
      0018E4 26 07            [ 1] 1970 	jrne 2$ 
      0018E6 90 5C            [ 1] 1971 	incw y 
      0018E8 CD 0E 4E         [ 4] 1972 	call strcmp
      0018EB 26 11            [ 1] 1973 	jrne 8$ ; match found 
      0018ED                       1974 2$: ; skip this one 	
      0018ED 16 03            [ 2] 1975 	ldW Y,(EEPTR,sp)
      0018EF 90 F6            [ 1] 1976 	ld a,(y)
      0018F1 C7 00 0E         [ 1] 1977 	ld acc8,a 
      0018F4 72 B9 00 0D      [ 2] 1978 	addw y,acc16 
      0018F8 20 DC            [ 2] 1979 	jra 1$  
      0018FA                       1980 7$: ; no match found 
      0018FA 0F 03            [ 1] 1981 	clr (EEPTR,sp)
      0018FC 0F 04            [ 1] 1982 	clr (EEPTR+1,sp)
      0018FE                       1983 8$: ; match found 
      0018FE 1E 03            [ 2] 1984 	ldw x,(EEPTR,sp) ; record address 
      001900                       1985 9$:	_DROP VSIZE
      001900 5B 05            [ 2]    1     addw sp,#VSIZE 
      001902 90 85            [ 2] 1986 	 popw y 
      001904 81               [ 4] 1987 	 ret 
                                   1988 
                                   1989 
                                   1990 ;--------------------------------------------
                                   1991 ; BASIC: CONST name=value [, name=value]*
                                   1992 ; define constant(s) saved in EEPROM
                                   1993 ;--------------------------------------------
                           000001  1994 	CNAME=1 
                           000003  1995 	BUFPTR=3
                           000005  1996 	RECLEN=5
                           000005  1997 	VSIZE=5
      001905                       1998 cmd_const:
      001905                       1999 	_vars VSIZE 
      001905 52 05            [ 2]    1     sub sp,#VSIZE 
      001907                       2000 10$:
      001907 CD 12 88         [ 4] 2001 	call next_token 
      00190A A1 03            [ 1] 2002 	cp a,#TK_LABEL 
      00190C 27 03            [ 1] 2003 	jreq 0$ 
      00190E CC 11 95         [ 2] 2004 	jp syntax_error 
      001911                       2005 0$: 
      001911 1F 01            [ 2] 2006 	ldw (CNAME,sp),x ; *const_name
      001913 1E 01            [ 2] 2007 	ldw x,(CNAME,sp)
      001915 CD 0E 43         [ 4] 2008 	call strlen 
      001918 AB 04            [ 1] 2009 	add a,#4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      00191A 6B 05            [ 1] 2010 	ld (RECLEN,sp),a 
      00191C CD 18 C6         [ 4] 2011 	call search_const 
      00191F 5D               [ 2] 2012 	tnzw x 
      001920 27 05            [ 1] 2013 	jreq 1$
      001922 A6 08            [ 1] 2014 	ld a,#ERR_DUPLICATE
      001924 CC 11 97         [ 2] 2015 	jp tb_error 
      001927                       2016 1$:	; copy name in buffer  
      001927 16 01            [ 2] 2017 	ldw y,(CNAME,sp) 
      001929 AE 16 90         [ 2] 2018 	ldw x,#tib  
      00192C 7B 05            [ 1] 2019 	ld a,(RECLEN,sp)
      00192E F7               [ 1] 2020 	ld (x),a 
      00192F 5C               [ 1] 2021 	incw x 
      001930 CD 0E 5F         [ 4] 2022 	call strcpy 
      001933 1F 03            [ 2] 2023 	ldw (BUFPTR,sp),x
      001935 CD 0E 43         [ 4] 2024 	call strlen
      001938 4C               [ 1] 2025 	inc a 
      001939 1B 04            [ 1] 2026 	add a,(BUFPTR+1,sp)
      00193B 6B 04            [ 1] 2027 	ld (BUFPTR+1,sp),a 
      00193D 24 02            [ 1] 2028 	jrnc 11$
      00193F 0C 03            [ 1] 2029     inc (BUFPTR,sp) 
      001941                       2030 11$:
      001941 A6 32            [ 1] 2031 	ld a,#TK_EQUAL 
      001943 CD 16 24         [ 4] 2032 	call expect 
      001946 CD 17 35         [ 4] 2033 	call expression 
      001949 A1 84            [ 1] 2034 	cp a,#TK_INTGR 
      00194B 27 03            [ 1] 2035 	jreq 2$ 
      00194D CC 11 95         [ 2] 2036 	jp syntax_error 
      001950 90 93            [ 1] 2037 2$:	ldw y,x 
      001952 1E 03            [ 2] 2038 	ldw x,(BUFPTR,sp)
      001954 90 9E            [ 1] 2039 	ld a,yh 
      001956 F7               [ 1] 2040 	ld (x),a 
      001957 5C               [ 1] 2041 	incw x 
      001958 90 9F            [ 1] 2042 	ld a,yl 
      00195A F7               [ 1] 2043 	ld (x),a 
                                   2044 ;	record completed 
      00195B 72 5F 00 17      [ 1] 2045 	clr farptr 
      00195F CE 00 23         [ 2] 2046 	ldw x,free_eeprom  
      001962 CF 00 18         [ 2] 2047 	ldw farptr+1,x 
      001965 AE 16 90         [ 2] 2048 	ldw x,#tib 
      001968 7B 05            [ 1] 2049 	ld a,(RECLEN,sp)
      00196A CD 02 AA         [ 4] 2050 	call write_nbytes
                                   2051 ; update free_eeprom 
      00196D 7B 05            [ 1] 2052 	ld a,(RECLEN,sp)
      00196F 97               [ 1] 2053 	ld xl,a 
      001970 72 BB 00 23      [ 2] 2054 	addw x,free_eeprom 
      001974 CF 00 23         [ 2] 2055 	ldw free_eeprom,x
      001977 CD 12 88         [ 4] 2056 	call next_token 
      00197A A1 09            [ 1] 2057 	cp a,#TK_COMMA 
      00197C 26 03            [ 1] 2058 	jrne 8$
      00197E CC 19 07         [ 2] 2059 	jp 10$ 
      001981                       2060 8$: 
      001981                       2061 	_unget_token    
      001981 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001986                       2062 9$: _drop VSIZE 
      001986 5B 05            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001988 81               [ 4] 2063 	ret 
                                   2064 
                                   2065 
                                   2066 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2067 ; return program size 
                                   2068 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001989                       2069 prog_size:
      001989 CE 00 1C         [ 2] 2070 	ldw x,txtend 
      00198C 72 B0 00 1A      [ 2] 2071 	subw x,txtbgn 
      001990 81               [ 4] 2072 	ret 
                                   2073 
                                   2074 ;----------------------------
                                   2075 ; print program information 
                                   2076 ;---------------------------
      001991                       2077 program_info: 
      001991 AE 19 D0         [ 2] 2078 	ldw x,#PROG_ADDR 
      001994 CD 03 8F         [ 4] 2079 	call puts 
      001997 CE 00 1A         [ 2] 2080 	ldw x,txtbgn 
      00199A 35 10 00 0A      [ 1] 2081 	mov base,#16 
      00199E CD 12 D8         [ 4] 2082 	call print_int
      0019A1 35 0A 00 0A      [ 1] 2083 	mov base,#10  
      0019A5 AE 19 E2         [ 2] 2084 	ldw x,#PROG_SIZE
      0019A8 CD 03 8F         [ 4] 2085 	call puts 
      0019AB CD 19 89         [ 4] 2086 	call prog_size 
      0019AE CD 12 D8         [ 4] 2087 	call print_int 
      0019B1 AE 19 F3         [ 2] 2088 	ldw x,#STR_BYTES 
      0019B4 CD 03 8F         [ 4] 2089 	call puts
      0019B7 CE 00 1A         [ 2] 2090 	ldw x,txtbgn
      0019BA A3 2D 84         [ 2] 2091 	cpw x,#app 
      0019BD 25 05            [ 1] 2092 	jrult 2$
      0019BF AE 19 F9         [ 2] 2093 	ldw x,#FLASH_MEM 
      0019C2 20 03            [ 2] 2094 	jra 3$
      0019C4 AE 1A 0A         [ 2] 2095 2$: ldw x,#RAM_MEM 	 
      0019C7 CD 03 8F         [ 4] 2096 3$:	call puts 
      0019CA A6 0D            [ 1] 2097 	ld a,#CR 
      0019CC CD 03 32         [ 4] 2098 	call putc
      0019CF 81               [ 4] 2099 	ret 
                                   2100 
      0019D0 70 72 6F 67 72 61 6D  2101 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      0019E2 2C 20 70 72 6F 67 72  2102 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      0019F3 62 79 74 65 73 00     2103 STR_BYTES: .asciz "bytes" 
      0019F9 20 69 6E 20 46 4C 41  2104 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001A0A 20 69 6E 20 52 41 4D  2105 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   2106 
                                   2107 
                                   2108 ;----------------------------
                                   2109 ; BASIC: LIST [[start][,end]]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                                   2110 ; list program lines 
                                   2111 ; form start to end 
                                   2112 ; if empty argument list then 
                                   2113 ; list all.
                                   2114 ;----------------------------
                           000001  2115 	FIRST=1
                           000003  2116 	LAST=3 
                           000005  2117 	LN_PTR=5
                           000006  2118 	VSIZE=6 
      001A19                       2119 list:
      001A19 72 01 00 21 05   [ 2] 2120 	btjf flags,#FRUN,0$
      001A1E A6 07            [ 1] 2121 	ld a,#ERR_CMD_ONLY
      001A20 CC 11 97         [ 2] 2122 	jp tb_error
      001A23                       2123 0$:	 
      001A23 CD 19 89         [ 4] 2124 	call prog_size 
      001A26 22 01            [ 1] 2125 	jrugt 1$
      001A28 81               [ 4] 2126 	ret 
      001A29                       2127 1$: _vars VSIZE
      001A29 52 06            [ 2]    1     sub sp,#VSIZE 
      001A2B CE 00 1A         [ 2] 2128 	ldw x,txtbgn 
      001A2E 1F 05            [ 2] 2129 	ldw (LN_PTR,sp),x 
      001A30 FE               [ 2] 2130 	ldw x,(x) 
      001A31 1F 01            [ 2] 2131 	ldw (FIRST,sp),x ; list from first line 
      001A33 AE 7F FF         [ 2] 2132 	ldw x,#MAX_LINENO ; biggest line number 
      001A36 1F 03            [ 2] 2133 	ldw (LAST,sp),x 
      001A38 CD 16 36         [ 4] 2134 	call arg_list
      001A3B 4D               [ 1] 2135 	tnz a
      001A3C 27 31            [ 1] 2136 	jreq list_loop 
      001A3E A1 02            [ 1] 2137 	cp a,#2 
      001A40 27 07            [ 1] 2138 	jreq 4$
      001A42 A1 01            [ 1] 2139 	cp a,#1 
      001A44 27 06            [ 1] 2140 	jreq first_line 
      001A46 CC 11 95         [ 2] 2141 	jp syntax_error 
      001A49 85               [ 2] 2142 4$:	popw x 
      001A4A 1F 05            [ 2] 2143 	ldw (LAST+2,sp),x 
      001A4C                       2144 first_line:
      001A4C 85               [ 2] 2145 	popw x
      001A4D 1F 01            [ 2] 2146 	ldw (FIRST,sp),x 
      001A4F                       2147 lines_skip:
      001A4F CE 00 1A         [ 2] 2148 	ldw x,txtbgn
      001A52 1F 05            [ 2] 2149 2$:	ldw (LN_PTR,sp),x 
      001A54 C3 00 1C         [ 2] 2150 	cpw x,txtend 
      001A57 2A 38            [ 1] 2151 	jrpl list_exit 
      001A59 FE               [ 2] 2152 	ldw x,(x) ;line# 
      001A5A 13 01            [ 2] 2153 	cpw x,(FIRST,sp)
      001A5C 2A 11            [ 1] 2154 	jrpl list_loop 
      001A5E 1E 05            [ 2] 2155 	ldw x,(LN_PTR,sp) 
      001A60 E6 02            [ 1] 2156 	ld a,(2,x)
      001A62 C7 00 0E         [ 1] 2157 	ld acc8,a 
      001A65 72 5F 00 0D      [ 1] 2158 	clr acc16 
      001A69 72 BB 00 0D      [ 2] 2159 	addw x,acc16
      001A6D 20 E3            [ 2] 2160 	jra 2$ 
                                   2161 ; print loop
      001A6F                       2162 list_loop:
      001A6F 1E 05            [ 2] 2163 	ldw x,(LN_PTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001A71 E6 02            [ 1] 2164 	ld a,(2,x) 
      001A73 CD 1A E6         [ 4] 2165 	call prt_basic_line
      001A76 1E 05            [ 2] 2166 	ldw x,(LN_PTR,sp)
      001A78 E6 02            [ 1] 2167 	ld a,(2,x)
      001A7A C7 00 0E         [ 1] 2168 	ld acc8,a 
      001A7D 72 5F 00 0D      [ 1] 2169 	clr acc16 
      001A81 72 BB 00 0D      [ 2] 2170 	addw x,acc16
      001A85 C3 00 1C         [ 2] 2171 	cpw x,txtend 
      001A88 2A 07            [ 1] 2172 	jrpl list_exit
      001A8A 1F 05            [ 2] 2173 	ldw (LN_PTR,sp),x
      001A8C FE               [ 2] 2174 	ldw x,(x)
      001A8D 13 03            [ 2] 2175 	cpw x,(LAST,sp)  
      001A8F 2F DE            [ 1] 2176 	jrslt list_loop
      001A91                       2177 list_exit:
      001A91 55 00 03 00 01   [ 1] 2178 	mov in,count 
      001A96 AE 16 E0         [ 2] 2179 	ldw x,#pad 
      001A99 CF 00 04         [ 2] 2180 	ldw basicptr,x 
      001A9C                       2181 	_drop VSIZE 
      001A9C 5B 06            [ 2]    1     addw sp,#VSIZE 
      001A9E CD 19 91         [ 4] 2182 	call program_info 
      001AA1 81               [ 4] 2183 	ret
                                   2184 
                                   2185 
                                   2186 ;--------------------------
                                   2187 ; BASIC: EDIT \E | \F
                                   2188 ;  copy program in FLASH 
                                   2189 ;  to RAM for edition 
                                   2190 ;-------------------------
      001AA2                       2191 edit:
      001AA2 CD 21 75         [ 4] 2192 	call qsign 
      001AA5 27 07            [ 1] 2193 	jreq 1$ 
      001AA7 AE 1A CF         [ 2] 2194 	ldw x,#NOT_SAVED 
      001AAA CD 03 8F         [ 4] 2195 	call puts 
      001AAD 81               [ 4] 2196 	ret 
      001AAE                       2197 1$: 
      001AAE 90 AE 2D 80      [ 2] 2198 	ldw y,#app_sign ; source address 
      001AB2 CE 2D 82         [ 2] 2199     ldw x,app_size  
      001AB5 1C 00 04         [ 2] 2200 	addw x,#4 
      001AB8 CF 00 0D         [ 2] 2201 	ldw acc16,x  ; bytes to copy 
      001ABB AE 00 7C         [ 2] 2202 	ldw x,#rsign ; destination address 
      001ABE CD 0E 6F         [ 4] 2203 	call move  
      001AC1 AE 00 80         [ 2] 2204 	ldw x,#free_ram 
      001AC4 CF 00 1A         [ 2] 2205 	ldw txtbgn,x 
      001AC7 72 BB 00 7E      [ 2] 2206 	addw x,rsize  
      001ACB CF 00 1C         [ 2] 2207 	ldw txtend,x 
      001ACE 81               [ 4] 2208 	ret 
                                   2209 
      001ACF 4E 6F 20 61 70 70 6C  2210 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   2211 
                                   2212 ;--------------------------
                                   2213 ; decompile line from token list
                                   2214 ; and print it. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                                   2215 ; input:
                                   2216 ;   A       stop at this position 
                                   2217 ;   X 		pointer at line
                                   2218 ; output:
                                   2219 ;   none 
                                   2220 ;--------------------------	
      001AE6                       2221 prt_basic_line:
      001AE6 C7 00 03         [ 1] 2222 	ld count,a 
      001AE9 E6 02            [ 1] 2223 	ld a,(2,x)
      001AEB C1 00 03         [ 1] 2224 	cp a,count 
      001AEE 2A 03            [ 1] 2225 	jrpl 1$ 
      001AF0 C7 00 03         [ 1] 2226 	ld count,a 
      001AF3 CF 00 04         [ 2] 2227 1$:	ldw basicptr,x 
      001AF6 90 AE 16 90      [ 2] 2228 	ldw y,#tib  
      001AFA CD 0B D2         [ 4] 2229 	call decompile 
      001AFD CD 03 8F         [ 4] 2230 	call puts 
      001B00 A6 0D            [ 1] 2231 	ld a,#CR 
      001B02 CD 03 32         [ 4] 2232 	call putc 
      001B05 81               [ 4] 2233 	ret 
                                   2234 
                                   2235 
                                   2236 
                                   2237 ;---------------------------------
                                   2238 ; BASIC: PRINT|? arg_list 
                                   2239 ; print values from argument list
                                   2240 ;----------------------------------
                           000001  2241 	CCOMMA=1
                           000001  2242 	VSIZE=1
      001B06                       2243 print:
      001B06                       2244 	_vars VSIZE 
      001B06 52 01            [ 2]    1     sub sp,#VSIZE 
      001B08                       2245 reset_comma:
      001B08 0F 01            [ 1] 2246 	clr (CCOMMA,sp)
      001B0A                       2247 prt_loop:
      001B0A CD 12 88         [ 4] 2248 	call next_token
      001B0D A1 02            [ 1] 2249 	cp a,#CMD_END 
      001B0F 25 4F            [ 1] 2250 	jrult print_exit ; colon or end of line 
      001B11 A1 02            [ 1] 2251 	cp a,#TK_QSTR
      001B13 27 12            [ 1] 2252 	jreq 1$
      001B15 A1 04            [ 1] 2253 	cp a,#TK_CHAR 
      001B17 27 13            [ 1] 2254 	jreq 2$ 
      001B19 A1 82            [ 1] 2255 	cp a,#TK_CFUNC 
      001B1B 27 15            [ 1] 2256 	jreq 3$
      001B1D A1 09            [ 1] 2257 	cp a,#TK_COMMA 
      001B1F 27 18            [ 1] 2258 	jreq 4$
      001B21 A1 0A            [ 1] 2259 	cp a,#TK_SHARP 
      001B23 27 18            [ 1] 2260 	jreq 5$
      001B25 20 28            [ 2] 2261 	jra 7$ 
      001B27                       2262 1$:	; print string 
      001B27 CD 03 8F         [ 4] 2263 	call puts
      001B2A 20 DC            [ 2] 2264 	jra reset_comma
      001B2C                       2265 2$:	; print character 
      001B2C 9F               [ 1] 2266 	ld a,xl 
      001B2D CD 03 32         [ 4] 2267 	call putc 
      001B30 20 D6            [ 2] 2268 	jra reset_comma 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001B32                       2269 3$: ; print character function value  	
      001B32 FD               [ 4] 2270 	call (x)
      001B33 9F               [ 1] 2271 	ld a,xl 
      001B34 CD 03 32         [ 4] 2272 	call putc
      001B37 20 CF            [ 2] 2273 	jra reset_comma 
      001B39                       2274 4$: ; set comma state 
      001B39 03 01            [ 1] 2275 	cpl (CCOMMA,sp)
      001B3B 20 CD            [ 2] 2276 	jra prt_loop   
      001B3D                       2277 5$: ; # character must be followed by an integer   
      001B3D CD 12 88         [ 4] 2278 	call next_token
      001B40 A1 84            [ 1] 2279 	cp a,#TK_INTGR 
      001B42 27 03            [ 1] 2280 	jreq 6$
      001B44 CC 11 95         [ 2] 2281 	jp syntax_error 
      001B47                       2282 6$: ; set tab width
      001B47 9F               [ 1] 2283 	ld a,xl 
      001B48 A4 0F            [ 1] 2284 	and a,#15 
      001B4A C7 00 22         [ 1] 2285 	ld tab_width,a 
      001B4D 20 B9            [ 2] 2286 	jra reset_comma 
      001B4F                       2287 7$:	
      001B4F                       2288 	_unget_token 
      001B4F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B54 CD 17 7E         [ 4] 2289 	call relation 
      001B57 A1 84            [ 1] 2290 	cp a,#TK_INTGR 
      001B59 26 05            [ 1] 2291 	jrne print_exit 
      001B5B CD 12 D8         [ 4] 2292     call print_int 
      001B5E 20 A8            [ 2] 2293 	jra reset_comma 
      001B60                       2294 print_exit:
      001B60 0D 01            [ 1] 2295 	tnz (CCOMMA,sp)
      001B62 26 05            [ 1] 2296 	jrne 9$
      001B64 A6 0D            [ 1] 2297 	ld a,#CR 
      001B66 CD 03 32         [ 4] 2298     call putc 
      001B69                       2299 9$:	_drop VSIZE 
      001B69 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B6B 81               [ 4] 2300 	ret 
                                   2301 
                                   2302 ;----------------------
                                   2303 ; 'save_context' and
                                   2304 ; 'rest_context' must be 
                                   2305 ; called at the same 
                                   2306 ; call stack depth 
                                   2307 ; i.e. SP must have the 
                                   2308 ; save value at  
                                   2309 ; entry point of both 
                                   2310 ; routine. 
                                   2311 ;---------------------
                           000004  2312 	CTXT_SIZE=4 ; size of saved data 
                                   2313 ;--------------------
                                   2314 ; save current BASIC
                                   2315 ; interpreter context 
                                   2316 ; on stack 
                                   2317 ;--------------------
      001B6C                       2318 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001B6C                       2319 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001B6C                       2320 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001B6C                       2321 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001B6C                       2322 save_context:
      001B6C CE 00 04         [ 2] 2323 	ldw x,basicptr 
      001B6F 1F 03            [ 2] 2324 	ldw (BPTR,sp),x
      001B71 C6 00 01         [ 1] 2325 	ld a,in 
      001B74 6B 05            [ 1] 2326 	ld (IN,sp),a
      001B76 C6 00 03         [ 1] 2327 	ld a,count 
      001B79 6B 06            [ 1] 2328 	ld (CNT,sp),a  
      001B7B 81               [ 4] 2329 	ret
                                   2330 
                                   2331 ;-----------------------
                                   2332 ; restore previously saved 
                                   2333 ; BASIC interpreter context 
                                   2334 ; from stack 
                                   2335 ;-------------------------
      001B7C                       2336 rest_context:
      001B7C 1E 03            [ 2] 2337 	ldw x,(BPTR,sp)
      001B7E CF 00 04         [ 2] 2338 	ldw basicptr,x 
      001B81 7B 05            [ 1] 2339 	ld a,(IN,sp)
      001B83 C7 00 01         [ 1] 2340 	ld in,a
      001B86 7B 06            [ 1] 2341 	ld a,(CNT,sp)
      001B88 C7 00 03         [ 1] 2342 	ld count,a  
      001B8B 81               [ 4] 2343 	ret
                                   2344 
                                   2345 
                                   2346 
                                   2347 ;------------------------------------------
                                   2348 ; BASIC: INPUT [string]var[,[string]var]
                                   2349 ; input value in variables 
                                   2350 ; [string] optionally can be used as prompt 
                                   2351 ;-----------------------------------------
                           000001  2352 	CX_BPTR=1
                           000003  2353 	CX_IN=3
                           000004  2354 	CX_CNT=4
                           000005  2355 	SKIP=5
                           000006  2356 	VAR_ADDR=6
                           000007  2357 	VSIZE=7
      001B8C                       2358 input_var:
      001B8C                       2359 	_vars VSIZE 
      001B8C 52 07            [ 2]    1     sub sp,#VSIZE 
      001B8E                       2360 input_loop:
      001B8E 0F 05            [ 1] 2361 	clr (SKIP,sp)
      001B90 CD 12 88         [ 4] 2362 	call next_token 
      001B93 A1 02            [ 1] 2363 	cp a,#TK_QSTR 
      001B95 26 08            [ 1] 2364 	jrne 1$ 
      001B97 CD 03 8F         [ 4] 2365 	call puts 
      001B9A 03 05            [ 1] 2366 	cpl (SKIP,sp)
      001B9C CD 12 88         [ 4] 2367 	call next_token 
      001B9F A1 85            [ 1] 2368 1$: cp a,#TK_VAR  
      001BA1 27 03            [ 1] 2369 	jreq 2$ 
      001BA3 CC 11 95         [ 2] 2370 	jp syntax_error
      001BA6 1F 06            [ 2] 2371 2$:	ldw (VAR_ADDR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001BA8 0D 05            [ 1] 2372 	tnz (SKIP,sp)
      001BAA 26 06            [ 1] 2373 	jrne 21$ 
      001BAC CD 0B A9         [ 4] 2374 	call var_name 
      001BAF CD 03 32         [ 4] 2375 	call putc   
      001BB2                       2376 21$:
      001BB2 A6 3A            [ 1] 2377 	ld a,#':
      001BB4 CD 03 32         [ 4] 2378 	call putc 
      001BB7 CD 1B 6C         [ 4] 2379 	call save_context 
      001BBA 72 5F 00 03      [ 1] 2380 	clr count  
      001BBE CD 04 94         [ 4] 2381 	call readln 
      001BC1 AE 16 90         [ 2] 2382 	ldw x,#tib 
      001BC4 3B 00 03         [ 1] 2383 	push count
      001BC7 4B 00            [ 1] 2384 	push #0 
      001BC9 72 FB 01         [ 2] 2385 	addw x,(1,sp)
      001BCC 5C               [ 1] 2386 	incw x 
      001BCD                       2387 	_drop 2 
      001BCD 5B 02            [ 2]    1     addw sp,#2 
      001BCF 72 5F 00 01      [ 1] 2388 	clr in 
      001BD3 CD 08 F8         [ 4] 2389 	call get_token
      001BD6 A1 84            [ 1] 2390 	cp a,#TK_INTGR
      001BD8 27 10            [ 1] 2391 	jreq 3$ 
      001BDA A1 11            [ 1] 2392 	cp a,#TK_MINUS
      001BDC CD 08 F8         [ 4] 2393 	call get_token 
      001BDF A1 84            [ 1] 2394 	cp a,#TK_INTGR 
      001BE1 27 06            [ 1] 2395 	jreq 22$
      001BE3 CD 1B 7C         [ 4] 2396 	call rest_context 
      001BE6 CC 11 95         [ 2] 2397 	jp syntax_error
      001BE9                       2398 22$:
      001BE9 50               [ 2] 2399 	negw x 	
      001BEA 16 06            [ 2] 2400 3$: ldw y,(VAR_ADDR,sp) 
      001BEC 90 FF            [ 2] 2401 	ldw (y),x 
      001BEE CD 1B 7C         [ 4] 2402 	call rest_context
      001BF1 CD 12 88         [ 4] 2403 	call next_token 
      001BF4 A1 09            [ 1] 2404 	cp a,#TK_COMMA 
      001BF6 27 96            [ 1] 2405 	jreq input_loop
      001BF8 A1 00            [ 1] 2406 	cp a,#TK_NONE 
      001BFA 27 07            [ 1] 2407 	jreq input_exit  
      001BFC A1 0B            [ 1] 2408 	cp a,#TK_COLON 
      001BFE 27 03            [ 1] 2409     jreq input_exit 
      001C00 CC 11 95         [ 2] 2410 	jp syntax_error 
      001C03                       2411 input_exit:
      001C03                       2412 	_drop VSIZE 
      001C03 5B 07            [ 2]    1     addw sp,#VSIZE 
      001C05 81               [ 4] 2413 	ret 
                                   2414 
                                   2415 
                                   2416 ;---------------------
                                   2417 ; BASIC: REMARK | ' 
                                   2418 ; skip comment to end of line 
                                   2419 ;---------------------- 
      001C06                       2420 remark::
      001C06 55 00 03 00 01   [ 1] 2421 	mov in,count 
      001C0B 81               [ 4] 2422  	ret 
                                   2423 
                                   2424 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                   2425 ;---------------------
                                   2426 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2427 ; read in loop 'addr'  
                                   2428 ; apply & 'mask' to value 
                                   2429 ; loop while result==0.  
                                   2430 ; 'xor_mask' is used to 
                                   2431 ; invert the wait logic.
                                   2432 ; i.e. loop while not 0.
                                   2433 ;---------------------
                           000001  2434 	XMASK=1 
                           000002  2435 	MASK=2
                           000003  2436 	ADDR=3
                           000004  2437 	VSIZE=4
      001C0C                       2438 wait: 
      001C0C                       2439 	_vars VSIZE
      001C0C 52 04            [ 2]    1     sub sp,#VSIZE 
      001C0E 0F 01            [ 1] 2440 	clr (XMASK,sp) 
      001C10 CD 16 36         [ 4] 2441 	call arg_list 
      001C13 A1 02            [ 1] 2442 	cp a,#2
      001C15 24 03            [ 1] 2443 	jruge 0$
      001C17 CC 11 95         [ 2] 2444 	jp syntax_error 
      001C1A A1 03            [ 1] 2445 0$:	cp a,#3
      001C1C 25 04            [ 1] 2446 	jrult 1$
      001C1E 85               [ 2] 2447 	popw x 
      001C1F 9F               [ 1] 2448 	ld a,xl
      001C20 6B 01            [ 1] 2449 	ld (XMASK,sp),a 
      001C22 85               [ 2] 2450 1$: popw x ; mask 
      001C23 9F               [ 1] 2451 	ld a,xl 
      001C24 6B 02            [ 1] 2452 	ld (MASK,sp),a 
      001C26 85               [ 2] 2453 	popw x ; address 
      001C27 F6               [ 1] 2454 2$:	ld a,(x)
      001C28 14 02            [ 1] 2455 	and a,(MASK,sp)
      001C2A 18 01            [ 1] 2456 	xor a,(XMASK,sp)
      001C2C 27 F9            [ 1] 2457 	jreq 2$ 
      001C2E                       2458 	_drop VSIZE 
      001C2E 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C30 81               [ 4] 2459 	ret 
                                   2460 
                                   2461 ;---------------------
                                   2462 ; BASIC: BSET addr,mask
                                   2463 ; set bits at 'addr' corresponding 
                                   2464 ; to those of 'mask' that are at 1.
                                   2465 ; arguments:
                                   2466 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2467 ;   mask        mask|addr
                                   2468 ; output:
                                   2469 ;	none 
                                   2470 ;--------------------------
      001C31                       2471 bit_set:
      001C31 CD 16 36         [ 4] 2472 	call arg_list 
      001C34 A1 02            [ 1] 2473 	cp a,#2	 
      001C36 27 03            [ 1] 2474 	jreq 1$ 
      001C38 CC 11 95         [ 2] 2475 	jp syntax_error
      001C3B                       2476 1$: 
      001C3B 85               [ 2] 2477 	popw x ; mask 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001C3C 9F               [ 1] 2478 	ld a,xl 
      001C3D 85               [ 2] 2479 	popw x ; addr  
      001C3E FA               [ 1] 2480 	or a,(x)
      001C3F F7               [ 1] 2481 	ld (x),a
      001C40 81               [ 4] 2482 	ret 
                                   2483 
                                   2484 ;---------------------
                                   2485 ; BASIC: BRES addr,mask
                                   2486 ; reset bits at 'addr' corresponding 
                                   2487 ; to those of 'mask' that are at 1.
                                   2488 ; arguments:
                                   2489 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2490 ;   mask	    ~mask&*addr  
                                   2491 ; output:
                                   2492 ;	none 
                                   2493 ;--------------------------
      001C41                       2494 bit_reset:
      001C41 CD 16 36         [ 4] 2495 	call arg_list 
      001C44 A1 02            [ 1] 2496 	cp a,#2  
      001C46 27 03            [ 1] 2497 	jreq 1$ 
      001C48 CC 11 95         [ 2] 2498 	jp syntax_error
      001C4B                       2499 1$: 
      001C4B 85               [ 2] 2500 	popw x ; mask 
      001C4C 9F               [ 1] 2501 	ld a,xl 
      001C4D 43               [ 1] 2502 	cpl a 
      001C4E 85               [ 2] 2503 	popw x ; addr  
      001C4F F4               [ 1] 2504 	and a,(x)
      001C50 F7               [ 1] 2505 	ld (x),a 
      001C51 81               [ 4] 2506 	ret 
                                   2507 
                                   2508 ;---------------------
                                   2509 ; BASIC: BTOGL addr,mask
                                   2510 ; toggle bits at 'addr' corresponding 
                                   2511 ; to those of 'mask' that are at 1.
                                   2512 ; arguments:
                                   2513 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2514 ;   mask	    mask^*addr  
                                   2515 ; output:
                                   2516 ;	none 
                                   2517 ;--------------------------
      001C52                       2518 bit_toggle:
      001C52 CD 16 36         [ 4] 2519 	call arg_list 
      001C55 A1 02            [ 1] 2520 	cp a,#2 
      001C57 27 03            [ 1] 2521 	jreq 1$ 
      001C59 CC 11 95         [ 2] 2522 	jp syntax_error
      001C5C 85               [ 2] 2523 1$: popw x ; mask 
      001C5D 9F               [ 1] 2524 	ld a,xl 
      001C5E 85               [ 2] 2525 	popw x ; addr  
      001C5F F8               [ 1] 2526 	xor a,(x)
      001C60 F7               [ 1] 2527 	ld (x),a 
      001C61 81               [ 4] 2528 	ret 
                                   2529 
                                   2530 
                                   2531 ;---------------------
                                   2532 ; BASIC: BTEST(addr,bit)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                                   2533 ; return bit value at 'addr' 
                                   2534 ; bit is in range {0..7}.
                                   2535 ; arguments:
                                   2536 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2537 ;   bit 	    bit position {0..7}  
                                   2538 ; output:
                                   2539 ;	none 
                                   2540 ;--------------------------
      001C62                       2541 bit_test:
      001C62 CD 16 31         [ 4] 2542 	call func_args 
      001C65 A1 02            [ 1] 2543 	cp a,#2
      001C67 27 03            [ 1] 2544 	jreq 0$
      001C69 CC 11 95         [ 2] 2545 	jp syntax_error
      001C6C                       2546 0$:	
      001C6C 85               [ 2] 2547 	popw x 
      001C6D 9F               [ 1] 2548 	ld a,xl 
      001C6E A4 07            [ 1] 2549 	and a,#7
      001C70 88               [ 1] 2550 	push a   
      001C71 A6 01            [ 1] 2551 	ld a,#1 
      001C73 0D 01            [ 1] 2552 1$: tnz (1,sp)
      001C75 27 05            [ 1] 2553 	jreq 2$
      001C77 48               [ 1] 2554 	sll a 
      001C78 0A 01            [ 1] 2555 	dec (1,sp)
      001C7A 20 F7            [ 2] 2556 	jra 1$
      001C7C                       2557 2$: _drop 1 
      001C7C 5B 01            [ 2]    1     addw sp,#1 
      001C7E 85               [ 2] 2558 	popw x 
      001C7F F4               [ 1] 2559 	and a,(x)
      001C80 27 02            [ 1] 2560 	jreq 3$
      001C82 A6 01            [ 1] 2561 	ld a,#1 
      001C84 5F               [ 1] 2562 3$:	clrw x 
      001C85 97               [ 1] 2563 	ld xl,a 
      001C86 A6 84            [ 1] 2564 	ld a,#TK_INTGR
      001C88 81               [ 4] 2565 	ret
                                   2566 
                                   2567 
                                   2568 ;--------------------
                                   2569 ; BASIC: POKE addr,byte
                                   2570 ; put a byte at addr 
                                   2571 ;--------------------
      001C89                       2572 poke:
      001C89 CD 16 36         [ 4] 2573 	call arg_list 
      001C8C A1 02            [ 1] 2574 	cp a,#2
      001C8E 27 03            [ 1] 2575 	jreq 1$
      001C90 CC 11 95         [ 2] 2576 	jp syntax_error
      001C93                       2577 1$:	
      001C93 85               [ 2] 2578 	popw x  
      001C94 9F               [ 1] 2579     ld a,xl 
      001C95 85               [ 2] 2580 	popw x 
      001C96 F7               [ 1] 2581 	ld (x),a 
      001C97 81               [ 4] 2582 	ret 
                                   2583 
                                   2584 ;-----------------------
                                   2585 ; BASIC: PEEK(addr)
                                   2586 ; get the byte at addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



                                   2587 ; input:
                                   2588 ;	none 
                                   2589 ; output:
                                   2590 ;	X 		value 
                                   2591 ;-----------------------
      001C98                       2592 peek:
      001C98 CD 16 31         [ 4] 2593 	call func_args
      001C9B A1 01            [ 1] 2594 	cp a,#1 
      001C9D 27 03            [ 1] 2595 	jreq 1$
      001C9F CC 11 95         [ 2] 2596 	jp syntax_error
      001CA2 85               [ 2] 2597 1$: popw x 
      001CA3 F6               [ 1] 2598 	ld a,(x)
      001CA4 5F               [ 1] 2599 	clrw x 
      001CA5 97               [ 1] 2600 	ld xl,a 
      001CA6 A6 84            [ 1] 2601 	ld a,#TK_INTGR
      001CA8 81               [ 4] 2602 	ret 
                                   2603 
                                   2604 ;---------------------------
                                   2605 ; BASIC IF expr : instructions
                                   2606 ; evaluate expr and if true 
                                   2607 ; execute instructions on same line. 
                                   2608 ;----------------------------
      001CA9                       2609 if: 
      001CA9 CD 17 7E         [ 4] 2610 	call relation 
      001CAC A1 84            [ 1] 2611 	cp a,#TK_INTGR
      001CAE 27 03            [ 1] 2612 	jreq 1$ 
      001CB0 CC 11 95         [ 2] 2613 	jp syntax_error
      001CB3 4F               [ 1] 2614 1$:	clr a 
      001CB4 5D               [ 2] 2615 	tnzw x 
      001CB5 26 05            [ 1] 2616 	jrne 9$  
                                   2617 ;skip to next line
      001CB7 55 00 03 00 01   [ 1] 2618 	mov in,count
      001CBC 81               [ 4] 2619 9$:	ret 
                                   2620 
                                   2621 ;------------------------
                                   2622 ; BASIC: FOR var=expr 
                                   2623 ; set variable to expression 
                                   2624 ; leave variable address 
                                   2625 ; on stack and set
                                   2626 ; FLOOP bit in 'flags'
                                   2627 ;-----------------
                           000001  2628 	RETL1=1 ; return address  
                           000003  2629 	FSTEP=3  ; variable increment
                           000005  2630 	LIMIT=5 ; loop limit 
                           000007  2631 	CVAR=7   ; control variable 
                           000009  2632 	INW=9   ;  in.w saved
                           00000B  2633 	BPTR=11 ; baseptr saved
                           00000A  2634 	VSIZE=10  
      001CBD                       2635 for: ; { -- var_addr }
      001CBD 85               [ 2] 2636 	popw x ; call return address 
      001CBE                       2637 	_vars VSIZE 
      001CBE 52 0A            [ 2]    1     sub sp,#VSIZE 
      001CC0 89               [ 2] 2638 	pushw x  ; RETL1 
      001CC1 A6 85            [ 1] 2639 	ld a,#TK_VAR 
      001CC3 CD 16 24         [ 4] 2640 	call expect
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001CC6 1F 07            [ 2] 2641 	ldw (CVAR,sp),x  ; control variable 
      001CC8 CD 18 82         [ 4] 2642 	call let_var 
      001CCB 72 14 00 21      [ 1] 2643 	bset flags,#FLOOP 
                                   2644 ; open space on stack for loop data 
      001CCF 5F               [ 1] 2645 	clrw x 
      001CD0 1F 0B            [ 2] 2646 	ldw (BPTR,sp),x 
      001CD2 1F 09            [ 2] 2647 	ldw (INW,sp),x 
      001CD4 CD 12 88         [ 4] 2648 	call next_token 
      001CD7 A1 80            [ 1] 2649 	cp a,#TK_CMD 
      001CD9 27 03            [ 1] 2650 	jreq 1$
      001CDB CC 11 95         [ 2] 2651 	jp syntax_error
      001CDE                       2652 1$:  
      001CDE A3 1C E6         [ 2] 2653 	cpw x,#to 
      001CE1 27 03            [ 1] 2654 	jreq to
      001CE3 CC 11 95         [ 2] 2655 	jp syntax_error 
                                   2656 
                                   2657 ;-----------------------------------
                                   2658 ; BASIC: TO expr 
                                   2659 ; second part of FOR loop initilization
                                   2660 ; leave limit on stack and set 
                                   2661 ; FTO bit in 'flags'
                                   2662 ;-----------------------------------
      001CE6                       2663 to: ; { var_addr -- var_addr limit step }
      001CE6 72 04 00 21 03   [ 2] 2664 	btjt flags,#FLOOP,1$
      001CEB CC 11 95         [ 2] 2665 	jp syntax_error
      001CEE CD 17 7E         [ 4] 2666 1$: call relation  
      001CF1 A1 84            [ 1] 2667 	cp a,#TK_INTGR 
      001CF3 27 03            [ 1] 2668 	jreq 2$ 
      001CF5 CC 11 95         [ 2] 2669 	jp syntax_error
      001CF8 1F 05            [ 2] 2670 2$: ldw (LIMIT,sp),x
                                   2671 ;	ldw x,in.w 
      001CFA CD 12 88         [ 4] 2672 	call next_token
      001CFD A1 00            [ 1] 2673 	cp a,#TK_NONE  
      001CFF 27 0E            [ 1] 2674 	jreq 4$ 
      001D01 A1 80            [ 1] 2675 	cp a,#TK_CMD
      001D03 26 05            [ 1] 2676 	jrne 3$
      001D05 A3 1D 16         [ 2] 2677 	cpw x,#step 
      001D08 27 0C            [ 1] 2678 	jreq step
      001D0A                       2679 3$:	
      001D0A                       2680 	_unget_token   	 
      001D0A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001D0F                       2681 4$:	
      001D0F AE 00 01         [ 2] 2682 	ldw x,#1   ; default step  
      001D12 1F 03            [ 2] 2683 	ldw (FSTEP,sp),x 
      001D14 20 14            [ 2] 2684 	jra store_loop_addr 
                                   2685 
                                   2686 
                                   2687 ;----------------------------------
                                   2688 ; BASIC: STEP expr 
                                   2689 ; optional third par of FOR loop
                                   2690 ; initialization. 	
                                   2691 ;------------------------------------
      001D16                       2692 step: ; {var limit -- var limit step}
      001D16 72 04 00 21 03   [ 2] 2693 	btjt flags,#FLOOP,1$
      001D1B CC 11 95         [ 2] 2694 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001D1E CD 17 7E         [ 4] 2695 1$: call relation
      001D21 A1 84            [ 1] 2696 	cp a,#TK_INTGR
      001D23 27 03            [ 1] 2697 	jreq 2$
      001D25 CC 11 95         [ 2] 2698 	jp syntax_error
      001D28 1F 03            [ 2] 2699 2$:	ldw (FSTEP,sp),x ; step
                                   2700 ; leave loop back entry point on cstack 
                                   2701 ; cstack is 1 call deep from interpreter
      001D2A                       2702 store_loop_addr:
      001D2A CE 00 04         [ 2] 2703 	ldw x,basicptr  
      001D2D 1F 0B            [ 2] 2704 	ldw (BPTR,sp),x 
      001D2F CE 00 00         [ 2] 2705 	ldw x,in.w 
      001D32 1F 09            [ 2] 2706 	ldw (INW,sp),x   
      001D34 72 15 00 21      [ 1] 2707 	bres flags,#FLOOP 
      001D38 72 5C 00 1E      [ 1] 2708 	inc loop_depth  
      001D3C 81               [ 4] 2709 	ret 
                                   2710 
                                   2711 ;--------------------------------
                                   2712 ; BASIC: NEXT var 
                                   2713 ; FOR loop control 
                                   2714 ; increment variable with step 
                                   2715 ; and compare with limit 
                                   2716 ; loop if threshold not crossed.
                                   2717 ; else stack. 
                                   2718 ; and decrement 'loop_depth' 
                                   2719 ;--------------------------------
      001D3D                       2720 next: ; {var limit step retl1 -- [var limit step ] }
      001D3D 72 5D 00 1E      [ 1] 2721 	tnz loop_depth 
      001D41 26 03            [ 1] 2722 	jrne 1$ 
      001D43 CC 11 95         [ 2] 2723 	jp syntax_error 
      001D46                       2724 1$: 
      001D46 A6 85            [ 1] 2725 	ld a,#TK_VAR 
      001D48 CD 16 24         [ 4] 2726 	call expect
                                   2727 ; check for good variable after NEXT 	 
      001D4B 13 07            [ 2] 2728 	cpw x,(CVAR,sp)
      001D4D 27 03            [ 1] 2729 	jreq 2$  
      001D4F CC 11 95         [ 2] 2730 	jp syntax_error ; not the good one 
      001D52                       2731 2$: ; increment variable 
      001D52 FE               [ 2] 2732 	ldw x,(x)  ; get var value 
      001D53 72 FB 03         [ 2] 2733 	addw x,(FSTEP,sp) ; var+step 
      001D56 16 07            [ 2] 2734 	ldw y,(CVAR,sp)
      001D58 90 FF            [ 2] 2735 	ldw (y),x ; save var new value 
                                   2736 ; check sign of STEP  
      001D5A A6 80            [ 1] 2737 	ld a,#0x80
      001D5C 15 03            [ 1] 2738 	bcp a,(FSTEP,sp)
      001D5E 2A 06            [ 1] 2739 	jrpl 4$
                                   2740 ;negative step 
      001D60 13 05            [ 2] 2741 	cpw x,(LIMIT,sp)
      001D62 2F 1B            [ 1] 2742 	jrslt loop_done
      001D64 20 04            [ 2] 2743 	jra loop_back 
      001D66                       2744 4$: ; positive step
      001D66 13 05            [ 2] 2745 	cpw x,(LIMIT,sp)
      001D68 2C 15            [ 1] 2746 	jrsgt loop_done
      001D6A                       2747 loop_back:
      001D6A 1E 0B            [ 2] 2748 	ldw x,(BPTR,sp)
      001D6C CF 00 04         [ 2] 2749 	ldw basicptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001D6F 72 01 00 21 05   [ 2] 2750 	btjf flags,#FRUN,1$ 
      001D74 E6 02            [ 1] 2751 	ld a,(2,x)
      001D76 C7 00 03         [ 1] 2752 	ld count,a
      001D79 1E 09            [ 2] 2753 1$:	ldw x,(INW,sp)
      001D7B CF 00 00         [ 2] 2754 	ldw in.w,x 
      001D7E 81               [ 4] 2755 	ret 
      001D7F                       2756 loop_done:
                                   2757 	; remove loop data from stack  
      001D7F 85               [ 2] 2758 	popw x
      001D80                       2759 	_drop VSIZE 
      001D80 5B 0A            [ 2]    1     addw sp,#VSIZE 
      001D82 72 5A 00 1E      [ 1] 2760 	dec loop_depth 
                                   2761 ;	pushw x 
                                   2762 ;	ret 
      001D86 FC               [ 2] 2763 	jp (x)
                                   2764 
                                   2765 ;----------------------------
                                   2766 ; called by goto/gosub
                                   2767 ; to get target line number 
                                   2768 ;---------------------------
      001D87                       2769 get_target_line:
      001D87 CD 12 88         [ 4] 2770 	call next_token  
      001D8A A1 84            [ 1] 2771 	cp a,#TK_INTGR
      001D8C 27 07            [ 1] 2772 	jreq get_target_line_2 
      001D8E A1 03            [ 1] 2773 	cp a,#TK_LABEL 
      001D90 27 1F            [ 1] 2774 	jreq look_target_symbol 
      001D92 CC 11 95         [ 2] 2775 	jp syntax_error
      001D95                       2776 get_target_line_2:
      001D95 4F               [ 1] 2777 	clr a
      001D96 90 CE 00 04      [ 2] 2778 	ldw y,basicptr 
      001D9A 90 FE            [ 2] 2779 	ldw y,(y)
      001D9C 90 89            [ 2] 2780 	pushw y 
      001D9E 13 01            [ 2] 2781 	cpw x,(1,sp)
      001DA0 5B 02            [ 2] 2782 	addw sp,#2 
      001DA2 25 01            [ 1] 2783 	jrult 11$
      001DA4 4C               [ 1] 2784 	inc a 
      001DA5                       2785 11$:	
      001DA5 CD 06 77         [ 4] 2786 	call search_lineno  
      001DA8 5D               [ 2] 2787 	tnzw x 
      001DA9 26 05            [ 1] 2788 	jrne 2$ 
      001DAB A6 05            [ 1] 2789 	ld a,#ERR_NO_LINE 
      001DAD CC 11 97         [ 2] 2790 	jp tb_error 
      001DB0 81               [ 4] 2791 2$:	ret 
                                   2792 
                                   2793 ; the GOTO|GOSUB target is a symbol.
      001DB1                       2794 look_target_symbol:
      001DB1 89               [ 2] 2795 	pushw x 
      001DB2 72 5F 00 0D      [ 1] 2796 	clr acc16 
      001DB6 90 CE 00 1A      [ 2] 2797 	ldw y,txtbgn 
      001DBA 90 E6 03         [ 1] 2798 1$:	ld a,(3,y) ; first TK_ID on line 
      001DBD A1 03            [ 1] 2799 	cp a,#TK_LABEL 
      001DBF 27 15            [ 1] 2800 	jreq 3$ 
      001DC1 90 E6 02         [ 1] 2801 2$:	ld a,(2,y); line length 
      001DC4 C7 00 0E         [ 1] 2802 	ld acc8,a 
      001DC7 72 B9 00 0D      [ 2] 2803 	addw y,acc16 ;point to next line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001DCB 90 C3 00 1C      [ 2] 2804 	cpw y,txtend 
      001DCF 25 E9            [ 1] 2805 	jrult 1$
      001DD1 A6 0A            [ 1] 2806 	ld a,#ERR_BAD_VALUE
      001DD3 CC 11 97         [ 2] 2807 	jp tb_error 
      001DD6                       2808 3$: ; found a TK_LABEL 
                                   2809 	; compare with GOTO|GOSUB target 
      001DD6 90 89            [ 2] 2810 	pushw y 
      001DD8 72 A9 00 04      [ 2] 2811 	addw y,#4 ; label string 
      001DDC 1E 03            [ 2] 2812 	ldw x,(3,sp) ; target string 
      001DDE CD 0E 4E         [ 4] 2813 	call strcmp
      001DE1 26 04            [ 1] 2814 	jrne 4$
      001DE3 90 85            [ 2] 2815 	popw y 
      001DE5 20 DA            [ 2] 2816 	jra 2$ 
      001DE7                       2817 4$: ; target found 
      001DE7 85               [ 2] 2818 	popw x ;  address line target  
      001DE8                       2819 	_drop 2 ; target string 
      001DE8 5B 02            [ 2]    1     addw sp,#2 
      001DEA 81               [ 4] 2820 	ret
                                   2821 
                                   2822 
                                   2823 ;--------------------------------
                                   2824 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2825 ; selective goto or gosub 
                                   2826 ;--------------------------------
                           000003  2827 	RET_ADDR=3
                           000005  2828 	RET_INW=5
                           000004  2829 	VSIZE=4  
      001DEB                       2830 cmd_on:
      001DEB 72 00 00 21 05   [ 2] 2831 	btjt flags,#FRUN,0$ 
      001DF0 A6 06            [ 1] 2832 	ld a,#ERR_RUN_ONLY
      001DF2 CC 11 97         [ 2] 2833 	jp tb_error 
      001DF5 CD 17 35         [ 4] 2834 0$:	call expression 
      001DF8 A1 84            [ 1] 2835 	cp a,#TK_INTGR
      001DFA 27 03            [ 1] 2836 	jreq 1$
      001DFC CC 11 95         [ 2] 2837 	jp syntax_error
      001DFF A3 00 01         [ 2] 2838 1$: cpw x,#1 
      001E02 2F 69            [ 1] 2839 	jrslt 9$
      001E04 A3 00 10         [ 2] 2840 	cpw x,#16 ; no more than 16 arguments 
      001E07 22 64            [ 1] 2841 	jrugt 9$
      001E09 9F               [ 1] 2842 	ld a,xl 
      001E0A 88               [ 1] 2843 	push a  ; selector  
      001E0B CD 12 88         [ 4] 2844 	call next_token ; should be GOTO|GOSUB 
      001E0E A1 80            [ 1] 2845 	cp a,#TK_CMD 
      001E10 27 03            [ 1] 2846 	jreq 2$ 
      001E12 CC 11 95         [ 2] 2847 	jp syntax_error 
      001E15 A3 1E 74         [ 2] 2848 2$: cpw x,#goto 
      001E18 27 08            [ 1] 2849 	jreq 4$
      001E1A A3 1E 8E         [ 2] 2850 	cpw x,#gosub 
      001E1D 27 03            [ 1] 2851 	jreq 4$ 
      001E1F CC 11 95         [ 2] 2852 	jp syntax_error 
      001E22 84               [ 1] 2853 4$: pop a 
      001E23 89               [ 2] 2854 	pushw x ; save routine address 	
      001E24 88               [ 1] 2855 	push a  ; -- code_addr selector  
      001E25 CD 12 88         [ 4] 2856 5$: call next_token 
      001E28 A1 84            [ 1] 2857 	cp a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001E2A 27 03            [ 1] 2858 	jreq 52$
      001E2C CC 11 95         [ 2] 2859 	jp syntax_error 
      001E2F                       2860 52$: ; got a line number 
      001E2F 0A 01            [ 1] 2861 	dec (1,sp) ; decrement selector 
      001E31 27 0B            [ 1] 2862 	jreq 58$ ; this is the selected one 
      001E33 CD 12 88         [ 4] 2863 	call next_token ; try for the next one 
      001E36 A1 09            [ 1] 2864 	cp a,#TK_COMMA 
      001E38 27 EB            [ 1] 2865 	jreq 5$ 
                                   2866 ; arg list exhausted, selector to big 
                                   2867 ; continue execution on next line 
      001E3A                       2868 	_drop 3 ; drop selector and GOTO|GOSUB address 
      001E3A 5B 03            [ 2]    1     addw sp,#3 
      001E3C 20 2F            [ 2] 2869 	jra 9$
      001E3E                       2870 58$: ;found line# in list 
      001E3E                       2871 	_drop 1 ; discard selector 
      001E3E 5B 01            [ 2]    1     addw sp,#1 
      001E40 55 00 03 00 01   [ 1] 2872 	mov in,count ; skip to end of this line. 
                                   2873 ; here only the routine address of GOTO|GOSUB is on stack 
                                   2874 ;   X contain target line number 
      001E45 CD 1D 95         [ 4] 2875 8$:	call get_target_line_2
      001E48 90 85            [ 2] 2876 	popw y ; routine address GOTO|GOSUB  
      001E4A 90 A3 1E 74      [ 2] 2877 	cpw y,#goto 
      001E4E 27 31            [ 1] 2878 	jreq jp_to_target 
      001E50 90 85            [ 2] 2879 	popw y 
      001E52                       2880 	_vars VSIZE 
      001E52 52 04            [ 2]    1     sub sp,#VSIZE 
      001E54 90 89            [ 2] 2881 	pushw y 
      001E56 90 CE 00 04      [ 2] 2882 	ldw y,basicptr 
      001E5A 55 00 03 00 01   [ 1] 2883 	mov in,count 
      001E5F 72 B9 00 00      [ 2] 2884 	addw y,in.w 
      001E63 17 03            [ 2] 2885 	ldw (RET_ADDR,sp),y 
      001E65 90 AE 00 03      [ 2] 2886 	ldw y,#3 
      001E69 17 05            [ 2] 2887 	ldw (RET_INW,sp),y
      001E6B 20 14            [ 2] 2888 	jra jp_to_target
      001E6D                       2889 9$: ; expr out of range skip to next line 
      001E6D 55 00 03 00 01   [ 1] 2890 	mov in,count
      001E72 4F               [ 1] 2891 	clr a  
      001E73 81               [ 4] 2892 	ret 
                                   2893 
                                   2894 ;------------------------
                                   2895 ; BASIC: GOTO line# 
                                   2896 ; jump to line# 
                                   2897 ; here cstack is 2 call deep from interpreter 
                                   2898 ;------------------------
      001E74                       2899 goto:
      001E74 72 00 00 21 05   [ 2] 2900 	btjt flags,#FRUN,0$ 
      001E79 A6 06            [ 1] 2901 	ld a,#ERR_RUN_ONLY
      001E7B CC 11 97         [ 2] 2902 	jp tb_error 
      001E7E CD 1D 87         [ 4] 2903 0$:	call get_target_line
      001E81                       2904 jp_to_target:
      001E81 CF 00 04         [ 2] 2905 	ldw basicptr,x 
      001E84 E6 02            [ 1] 2906 	ld a,(2,x)
      001E86 C7 00 03         [ 1] 2907 	ld count,a 
      001E89 35 03 00 01      [ 1] 2908 	mov in,#3 
      001E8D 81               [ 4] 2909 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                   2910 
                                   2911 
                                   2912 ;--------------------
                                   2913 ; BASIC: GOSUB line#
                                   2914 ; basic subroutine call
                                   2915 ; actual line# and basicptr 
                                   2916 ; are saved on cstack
                                   2917 ; here cstack is 2 call deep from interpreter 
                                   2918 ;--------------------
                           000003  2919 	RET_ADDR=3
                           000005  2920 	RET_INW=5
                           000004  2921 	VSIZE=4  
      001E8E                       2922 gosub:
      001E8E 72 00 00 21 06   [ 2] 2923 	btjt flags,#FRUN,0$ 
      001E93 A6 06            [ 1] 2924 	ld a,#ERR_RUN_ONLY
      001E95 CC 11 97         [ 2] 2925 	jp tb_error 
      001E98 81               [ 4] 2926 	ret 
      001E99 85               [ 2] 2927 0$:	popw x 
      001E9A                       2928 	_vars VSIZE  
      001E9A 52 04            [ 2]    1     sub sp,#VSIZE 
      001E9C 89               [ 2] 2929 	pushw x 
      001E9D CE 00 04         [ 2] 2930 	ldw x,basicptr
      001EA0 1F 03            [ 2] 2931 	ldw (RET_ADDR,sp),x 
      001EA2 CD 1D 87         [ 4] 2932 	call get_target_line  
      001EA5 89               [ 2] 2933 	pushw x 
      001EA6 CE 00 00         [ 2] 2934 	ldw x,in.w 
      001EA9 1F 07            [ 2] 2935 	ldw (RET_INW+2,sp),x
      001EAB 85               [ 2] 2936 	popw x 
      001EAC 20 D3            [ 2] 2937 	jra jp_to_target
                                   2938 
                                   2939 ;------------------------
                                   2940 ; BASIC: RETURN 
                                   2941 ; exit from a subroutine 
                                   2942 ; 
                                   2943 ;------------------------
      001EAE                       2944 return:
      001EAE 72 00 00 21 05   [ 2] 2945 	btjt flags,#FRUN,0$ 
      001EB3 A6 06            [ 1] 2946 	ld a,#ERR_RUN_ONLY
      001EB5 CC 11 97         [ 2] 2947 	jp tb_error 
      001EB8                       2948 0$:	
      001EB8 1E 03            [ 2] 2949 	ldw x,(RET_ADDR,sp) 
      001EBA CF 00 04         [ 2] 2950 	ldw basicptr,x
      001EBD E6 02            [ 1] 2951 	ld a,(2,x)
      001EBF C7 00 03         [ 1] 2952 	ld count,a  
      001EC2 1E 05            [ 2] 2953 	ldw x,(RET_INW,sp)
      001EC4 CF 00 00         [ 2] 2954 	ldw in.w,x 
      001EC7 85               [ 2] 2955 	popw x 
      001EC8                       2956 	_drop VSIZE 
      001EC8 5B 04            [ 2]    1     addw sp,#VSIZE 
      001ECA 89               [ 2] 2957 	pushw x
      001ECB 81               [ 4] 2958 	ret  
                                   2959 
                                   2960 
                                   2961 ;----------------------------------
                                   2962 ; BASIC: RUN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                                   2963 ; run BASIC program in RAM
                                   2964 ;----------------------------------- 
      001ECC                       2965 run: 
      001ECC 72 01 00 21 02   [ 2] 2966 	btjf flags,#FRUN,0$  
      001ED1 4F               [ 1] 2967 	clr a 
      001ED2 81               [ 4] 2968 	ret
      001ED3                       2969 0$: 
      001ED3 72 09 00 21 12   [ 2] 2970 	btjf flags,#FBREAK,1$
      001ED8                       2971 	_drop 2 
      001ED8 5B 02            [ 2]    1     addw sp,#2 
      001EDA CD 1B 7C         [ 4] 2972 	call rest_context
      001EDD                       2973 	_drop CTXT_SIZE 
      001EDD 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      001EDF 72 19 00 21      [ 1] 2974 	bres flags,#FBREAK 
      001EE3 72 10 00 21      [ 1] 2975 	bset flags,#FRUN 
      001EE7 CC 12 38         [ 2] 2976 	jp interpreter 
      001EEA CE 00 1A         [ 2] 2977 1$:	ldw x,txtbgn
      001EED C3 00 1C         [ 2] 2978 	cpw x,txtend 
      001EF0 2B 0C            [ 1] 2979 	jrmi run_it 
      001EF2 AE 11 2E         [ 2] 2980 	ldw x,#err_no_prog
      001EF5 CD 03 8F         [ 4] 2981 	call puts 
      001EF8 55 00 03 00 01   [ 1] 2982 	mov in,count
      001EFD 81               [ 4] 2983 	ret 
      001EFE                       2984 run_it:	 
      001EFE                       2985 	_drop 2 ; drop return address 
      001EFE 5B 02            [ 2]    1     addw sp,#2 
      001F00                       2986 run_it_02: 
      001F00 CD 18 67         [ 4] 2987     call ubound 
      001F03 CD 0E B3         [ 4] 2988 	call clear_vars 
                                   2989 ; clear data pointer 
      001F06 5F               [ 1] 2990 	clrw x 
      001F07 CF 00 06         [ 2] 2991 	ldw data_ptr,x 
      001F0A 72 5F 00 08      [ 1] 2992 	clr data_ofs 
      001F0E 72 5F 00 09      [ 1] 2993 	clr data_len 
                                   2994 ; initialize BASIC pointer 
      001F12 CE 00 1A         [ 2] 2995 	ldw x,txtbgn 
      001F15 CF 00 04         [ 2] 2996 	ldw basicptr,x 
      001F18 E6 02            [ 1] 2997 	ld a,(2,x)
      001F1A C7 00 03         [ 1] 2998 	ld count,a
      001F1D 35 03 00 01      [ 1] 2999 	mov in,#3	
      001F21 72 10 00 21      [ 1] 3000 	bset flags,#FRUN 
      001F25 CC 12 38         [ 2] 3001 	jp interpreter 
                                   3002 
                                   3003 
                                   3004 ;----------------------
                                   3005 ; BASIC: END
                                   3006 ; end running program
                                   3007 ;---------------------- 
      001F28                       3008 cmd_end: 
                                   3009 ; clean stack 
      001F28 AE 17 FF         [ 2] 3010 	ldw x,#STACK_EMPTY
      001F2B 94               [ 1] 3011 	ldw sp,x 
      001F2C CC 12 19         [ 2] 3012 	jp warm_start
                                   3013 
                                   3014 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                   3015 ; BASIC: GET var 
                                   3016 ; receive a key in variable 
                                   3017 ; don't wait 
                                   3018 ;---------------------------
      001F2F                       3019 cmd_get:
      001F2F CD 12 88         [ 4] 3020 	call next_token 
      001F32 A1 85            [ 1] 3021 	cp a,#TK_VAR 
      001F34 27 03            [ 1] 3022 	jreq 0$
      001F36 CC 11 95         [ 2] 3023 	jp syntax_error 
      001F39 CF 00 18         [ 2] 3024 0$: ldw ptr16,x 
      001F3C CD 03 3B         [ 4] 3025 	call qgetc 
      001F3F 27 03            [ 1] 3026 	jreq 2$
      001F41 CD 03 42         [ 4] 3027 	call getc  
      001F44 72 3F 00 18      [ 4] 3028 2$: clr [ptr16]
      001F48 72 5C 00 19      [ 1] 3029 	inc ptr8 
      001F4C 72 C7 00 18      [ 4] 3030 	ld [ptr16],a 
      001F50 81               [ 4] 3031 	ret 
                                   3032 
                                   3033 
                                   3034 ;-----------------
                                   3035 ; 1 Khz beep 
                                   3036 ;-----------------
      001F51                       3037 beep_1khz:: 
      001F51 AE 00 64         [ 2] 3038 	ldw x,#100
      001F54 90 AE 03 E8      [ 2] 3039 	ldw y,#1000
      001F58 20 0D            [ 2] 3040 	jra beep
                                   3041 
                                   3042 ;-----------------------
                                   3043 ; BASIC: TONE expr1,expr2
                                   3044 ; used TIMER2 channel 1
                                   3045 ; to produce a tone 
                                   3046 ; arguments:
                                   3047 ;    expr1   frequency 
                                   3048 ;    expr2   duration msec.
                                   3049 ;---------------------------
      001F5A                       3050 tone:
      001F5A CD 16 36         [ 4] 3051 	call arg_list 
      001F5D A1 02            [ 1] 3052 	cp a,#2 
      001F5F 27 03            [ 1] 3053 	jreq 1$
      001F61 CC 11 95         [ 2] 3054 	jp syntax_error 
      001F64                       3055 1$: 
      001F64 85               [ 2] 3056 	popw x ; duration
      001F65 90 85            [ 2] 3057 	popw y ; frequency 
      001F67                       3058 beep:  
      001F67 89               [ 2] 3059 	pushw x 
      001F68 AE F4 24         [ 2] 3060 	ldw x,#TIM2_CLK_FREQ
      001F6B 65               [ 2] 3061 	divw x,y 
                                   3062 ; round to nearest integer 
      001F6C 90 A3 7A 12      [ 2] 3063 	cpw y,#TIM2_CLK_FREQ/2
      001F70 2B 01            [ 1] 3064 	jrmi 2$
      001F72 5C               [ 1] 3065 	incw x 
      001F73                       3066 2$:	 
      001F73 9E               [ 1] 3067 	ld a,xh 
      001F74 C7 53 0D         [ 1] 3068 	ld TIM2_ARRH,a 
      001F77 9F               [ 1] 3069 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      001F78 C7 53 0E         [ 1] 3070 	ld TIM2_ARRL,a 
                                   3071 ; 50% duty cycle 
      001F7B 8C               [ 1] 3072 	ccf 
      001F7C 56               [ 2] 3073 	rrcw x 
      001F7D 9E               [ 1] 3074 	ld a,xh 
      001F7E C7 53 0F         [ 1] 3075 	ld TIM2_CCR1H,a 
      001F81 9F               [ 1] 3076 	ld a,xl
      001F82 C7 53 10         [ 1] 3077 	ld TIM2_CCR1L,a
      001F85 72 10 53 08      [ 1] 3078 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001F89 72 10 53 00      [ 1] 3079 	bset TIM2_CR1,#TIM2_CR1_CEN
      001F8D 72 10 53 04      [ 1] 3080 	bset TIM2_EGR,#TIM2_EGR_UG
      001F91 85               [ 2] 3081 	popw x 
      001F92 CD 23 8F         [ 4] 3082 	call pause02
      001F95 72 11 53 08      [ 1] 3083 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      001F99 72 11 53 00      [ 1] 3084 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001F9D 81               [ 4] 3085 	ret 
                                   3086 
                                   3087 ;-------------------------------
                                   3088 ; BASIC: ADCON 0|1 [,divisor]  
                                   3089 ; disable/enanble ADC 
                                   3090 ;-------------------------------
                           000003  3091 	ONOFF=3 
                           000001  3092 	DIVSOR=1
                           000004  3093 	VSIZE=4 
      001F9E                       3094 power_adc:
      001F9E CD 16 36         [ 4] 3095 	call arg_list 
      001FA1 A1 02            [ 1] 3096 	cp a,#2	
      001FA3 27 0B            [ 1] 3097 	jreq 1$
      001FA5 A1 01            [ 1] 3098 	cp a,#1 
      001FA7 27 03            [ 1] 3099 	jreq 0$ 
      001FA9 CC 11 95         [ 2] 3100 	jp syntax_error 
      001FAC AE 00 00         [ 2] 3101 0$: ldw x,#0
      001FAF 89               [ 2] 3102 	pushw x  ; divisor 
      001FB0 1E 03            [ 2] 3103 1$: ldw x,(ONOFF,sp)
      001FB2 5D               [ 2] 3104 	tnzw x 
      001FB3 27 1A            [ 1] 3105 	jreq 2$ 
      001FB5 1E 01            [ 2] 3106 	ldw x,(DIVSOR,sp) ; divisor 
      001FB7 9F               [ 1] 3107 	ld a,xl
      001FB8 A4 07            [ 1] 3108 	and a,#7
      001FBA 4E               [ 1] 3109 	swap a 
      001FBB C7 54 01         [ 1] 3110 	ld ADC_CR1,a
      001FBE 72 16 50 CA      [ 1] 3111 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001FC2 72 10 54 01      [ 1] 3112 	bset ADC_CR1,#ADC_CR1_ADON 
      001FC6                       3113 	_usec_dly 7 
      001FC6 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001FC9 5A               [ 2]    2     decw x
      001FCA 9D               [ 1]    3     nop 
      001FCB 26 FA            [ 1]    4     jrne .-4
      001FCD 20 08            [ 2] 3114 	jra 3$
      001FCF 72 11 54 01      [ 1] 3115 2$: bres ADC_CR1,#ADC_CR1_ADON
      001FD3 72 17 50 CA      [ 1] 3116 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      001FD7                       3117 3$:	_drop VSIZE 
      001FD7 5B 04            [ 2]    1     addw sp,#VSIZE 
      001FD9 81               [ 4] 3118 	ret
                                   3119 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                   3120 ;-----------------------------
                                   3121 ; BASIC: ADCREAD (channel)
                                   3122 ; read adc channel {0..5}
                                   3123 ; output:
                                   3124 ;   A 		TK_INTGR 
                                   3125 ;   X 		value 
                                   3126 ;-----------------------------
      001FDA                       3127 analog_read:
      001FDA CD 16 31         [ 4] 3128 	call func_args 
      001FDD A1 01            [ 1] 3129 	cp a,#1 
      001FDF 27 03            [ 1] 3130 	jreq 1$
      001FE1 CC 11 95         [ 2] 3131 	jp syntax_error
      001FE4 85               [ 2] 3132 1$: popw x 
      001FE5 A3 00 05         [ 2] 3133 	cpw x,#5 
      001FE8 23 05            [ 2] 3134 	jrule 2$
      001FEA A6 0A            [ 1] 3135 	ld a,#ERR_BAD_VALUE
      001FEC CC 11 97         [ 2] 3136 	jp tb_error 
      001FEF 9F               [ 1] 3137 2$: ld a,xl
      001FF0 C7 00 0E         [ 1] 3138 	ld acc8,a 
      001FF3 A6 05            [ 1] 3139 	ld a,#5
      001FF5 C0 00 0E         [ 1] 3140 	sub a,acc8 
      001FF8 C7 54 00         [ 1] 3141 	ld ADC_CSR,a
      001FFB 72 16 54 02      [ 1] 3142 	bset ADC_CR2,#ADC_CR2_ALIGN
      001FFF 72 10 54 01      [ 1] 3143 	bset ADC_CR1,#ADC_CR1_ADON
      002003 72 0F 54 00 FB   [ 2] 3144 	btjf ADC_CSR,#ADC_CSR_EOC,.
      002008 CE 54 04         [ 2] 3145 	ldw x,ADC_DRH
      00200B A6 84            [ 1] 3146 	ld a,#TK_INTGR
      00200D 81               [ 4] 3147 	ret 
                                   3148 
                                   3149 ;-----------------------
                                   3150 ; BASIC: DREAD(pin)
                                   3151 ; Arduino pins 
                                   3152 ; read state of a digital pin 
                                   3153 ; pin# {0..15}
                                   3154 ; output:
                                   3155 ;    A 		TK_INTGR
                                   3156 ;    X      0|1 
                                   3157 ;-------------------------
                           000001  3158 	PINNO=1
                           000001  3159 	VSIZE=1
      00200E                       3160 digital_read:
      00200E                       3161 	_vars VSIZE 
      00200E 52 01            [ 2]    1     sub sp,#VSIZE 
      002010 CD 16 31         [ 4] 3162 	call func_args
      002013 A1 01            [ 1] 3163 	cp a,#1
      002015 27 03            [ 1] 3164 	jreq 1$
      002017 CC 11 95         [ 2] 3165 	jp syntax_error
      00201A 85               [ 2] 3166 1$: popw x 
      00201B A3 00 0F         [ 2] 3167 	cpw x,#15 
      00201E 23 05            [ 2] 3168 	jrule 2$
      002020 A6 0A            [ 1] 3169 	ld a,#ERR_BAD_VALUE
      002022 CC 11 97         [ 2] 3170 	jp tb_error 
      002025 CD 24 CD         [ 4] 3171 2$:	call select_pin 
      002028 6B 01            [ 1] 3172 	ld (PINNO,sp),a
      00202A E6 01            [ 1] 3173 	ld a,(GPIO_IDR,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      00202C 0D 01            [ 1] 3174 	tnz (PINNO,sp)
      00202E 27 05            [ 1] 3175 	jreq 8$
      002030 44               [ 1] 3176 3$: srl a 
      002031 0A 01            [ 1] 3177 	dec (PINNO,sp)
      002033 26 FB            [ 1] 3178 	jrne 3$ 
      002035 A4 01            [ 1] 3179 8$: and a,#1 
      002037 5F               [ 1] 3180 	clrw x 
      002038 97               [ 1] 3181 	ld xl,a 
      002039 A6 84            [ 1] 3182 	ld a,#TK_INTGR
      00203B                       3183 	_drop VSIZE
      00203B 5B 01            [ 2]    1     addw sp,#VSIZE 
      00203D 81               [ 4] 3184 	ret
                                   3185 
                                   3186 
                                   3187 ;-----------------------
                                   3188 ; BASIC: DWRITE pin,0|1
                                   3189 ; Arduino pins 
                                   3190 ; write to a digital pin 
                                   3191 ; pin# {0..15}
                                   3192 ; output:
                                   3193 ;    A 		TK_INTGR
                                   3194 ;    X      0|1 
                                   3195 ;-------------------------
                           000001  3196 	PINNO=1
                           000002  3197 	PINVAL=2
                           000002  3198 	VSIZE=2
      00203E                       3199 digital_write:
      00203E                       3200 	_vars VSIZE 
      00203E 52 02            [ 2]    1     sub sp,#VSIZE 
      002040 CD 16 36         [ 4] 3201 	call arg_list  
      002043 A1 02            [ 1] 3202 	cp a,#2 
      002045 27 03            [ 1] 3203 	jreq 1$
      002047 CC 11 95         [ 2] 3204 	jp syntax_error
      00204A 85               [ 2] 3205 1$: popw x 
      00204B 9F               [ 1] 3206 	ld a,xl 
      00204C 6B 02            [ 1] 3207 	ld (PINVAL,sp),a
      00204E 85               [ 2] 3208 	popw x 
      00204F A3 00 0F         [ 2] 3209 	cpw x,#15 
      002052 23 05            [ 2] 3210 	jrule 2$
      002054 A6 0A            [ 1] 3211 	ld a,#ERR_BAD_VALUE
      002056 CC 11 97         [ 2] 3212 	jp tb_error 
      002059 CD 24 CD         [ 4] 3213 2$:	call select_pin 
      00205C 6B 01            [ 1] 3214 	ld (PINNO,sp),a 
      00205E A6 01            [ 1] 3215 	ld a,#1
      002060 0D 01            [ 1] 3216 	tnz (PINNO,sp)
      002062 27 05            [ 1] 3217 	jreq 4$
      002064 48               [ 1] 3218 3$: sll a
      002065 0A 01            [ 1] 3219 	dec (PINNO,sp)
      002067 26 FB            [ 1] 3220 	jrne 3$
      002069 0D 02            [ 1] 3221 4$: tnz (PINVAL,sp)
      00206B 26 05            [ 1] 3222 	jrne 5$
      00206D 43               [ 1] 3223 	cpl a 
      00206E E4 00            [ 1] 3224 	and a,(GPIO_ODR,x)
      002070 20 02            [ 2] 3225 	jra 8$
      002072 EA 00            [ 1] 3226 5$: or a,(GPIO_ODR,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002074 E7 00            [ 1] 3227 8$: ld (GPIO_ODR,x),a 
      002076                       3228 	_drop VSIZE 
      002076 5B 02            [ 2]    1     addw sp,#VSIZE 
      002078 81               [ 4] 3229 	ret
                                   3230 
                                   3231 
                                   3232 ;-----------------------
                                   3233 ; BASIC: STOP
                                   3234 ; stop progam execution  
                                   3235 ; without resetting pointers 
                                   3236 ; the program is resumed
                                   3237 ; with RUN 
                                   3238 ;-------------------------
      002079                       3239 stop:
      002079 72 00 00 21 02   [ 2] 3240 	btjt flags,#FRUN,2$
      00207E 4F               [ 1] 3241 	clr a
      00207F 81               [ 4] 3242 	ret 
      002080                       3243 2$:	 
                                   3244 ; create space on cstack to save context 
      002080 AE 20 A7         [ 2] 3245 	ldw x,#break_point 
      002083 CD 03 8F         [ 4] 3246 	call puts 
      002086                       3247 	_drop 2 ;drop return address 
      002086 5B 02            [ 2]    1     addw sp,#2 
      002088                       3248 	_vars CTXT_SIZE ; context size 
      002088 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      00208A CD 1B 6C         [ 4] 3249 	call save_context 
      00208D AE 16 90         [ 2] 3250 	ldw x,#tib 
      002090 CF 00 04         [ 2] 3251 	ldw basicptr,x
      002093 7F               [ 1] 3252 	clr (x)
      002094 72 5F 00 03      [ 1] 3253 	clr count  
      002098 5F               [ 1] 3254 	clrw x 
      002099 CF 00 00         [ 2] 3255 	ldw in.w,x
      00209C 72 11 00 21      [ 1] 3256 	bres flags,#FRUN 
      0020A0 72 18 00 21      [ 1] 3257 	bset flags,#FBREAK
      0020A4 CC 12 38         [ 2] 3258 	jp interpreter 
      0020A7 0A 62 72 65 61 6B 20  3259 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3260 
                                   3261 ;-----------------------
                                   3262 ; BASIC: NEW
                                   3263 ; from command line only 
                                   3264 ; free program memory
                                   3265 ; and clear variables 
                                   3266 ;------------------------
      0020C5                       3267 new: 
      0020C5 72 01 00 21 01   [ 2] 3268 	btjf flags,#FRUN,0$ 
      0020CA 81               [ 4] 3269 	ret 
      0020CB                       3270 0$:	
      0020CB CD 0F FD         [ 4] 3271 	call clear_basic 
      0020CE 81               [ 4] 3272 	ret 
                                   3273 
                                   3274 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                                   3275 ;;;  flash memory operations
                                   3276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3277 
                                   3278 ;--------------------------
                                   3279 ; align farptr to BLOCK_SIZE 
                                   3280 ;---------------------------
      0020CF                       3281 row_align:
      0020CF A6 7F            [ 1] 3282 	ld a,#0x7f 
      0020D1 C4 00 19         [ 1] 3283 	and a,farptr+2 
      0020D4 27 13            [ 1] 3284 	jreq 1$ 
      0020D6 CE 00 18         [ 2] 3285 	ldw x,farptr+1 
      0020D9 1C 00 80         [ 2] 3286 	addw x,#BLOCK_SIZE 
      0020DC 24 04            [ 1] 3287 	jrnc 0$
      0020DE 72 5C 00 17      [ 1] 3288 	inc farptr 
      0020E2 9F               [ 1] 3289 0$: ld a,xl 
      0020E3 A4 80            [ 1] 3290 	and a,#0x80
      0020E5 97               [ 1] 3291 	ld xl,a
      0020E6 CF 00 18         [ 2] 3292 	ldw farptr+1,x  	
      0020E9 81               [ 4] 3293 1$:	ret
                                   3294 
                                   3295 ;--------------------
                                   3296 ; input:
                                   3297 ;   X     increment 
                                   3298 ; output:
                                   3299 ;   farptr  incremented 
                                   3300 ;---------------------
      0020EA                       3301 incr_farptr:
      0020EA 72 BB 00 18      [ 2] 3302 	addw x,farptr+1 
      0020EE 24 04            [ 1] 3303 	jrnc 1$
      0020F0 72 5C 00 17      [ 1] 3304 	inc farptr 
      0020F4 CF 00 18         [ 2] 3305 1$:	ldw farptr+1,x  
      0020F7 81               [ 4] 3306 	ret 
                                   3307 
                                   3308 ;-----------------------------------
                                   3309 ; scan block for non zero byte 
                                   3310 ; block are 128 bytes 
                                   3311 ; input:
                                   3312 ;    farptr     address block  
                                   3313 ; output:
                                   3314 ;     A     0 cleared, other not cleared  
                                   3315 ;-----------------------------------
      0020F8                       3316 scan_block:
      0020F8 5F               [ 1] 3317 	clrw x 
      0020F9 92 AF 00 17      [ 5] 3318 1$: ldf a,([farptr],x) 
      0020FD 26 06            [ 1] 3319 	jrne 2$
      0020FF 5C               [ 1] 3320 	incw x 
      002100 A3 00 80         [ 2] 3321 	cpw x,#BLOCK_SIZE 
      002103 25 F4            [ 1] 3322 	jrult 1$ 
      002105 81               [ 4] 3323 2$:	ret 
                                   3324 
                                   3325 
                                   3326 
                                   3327 ;-----------------------------------
                                   3328 ; BASIC: ERASE \E | \F 
                                   3329 ; erase all block in range from 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                                   3330 ;  'app_space' to FLASH end (0x20000)
                                   3331 ;  or all EEPROM 
                                   3332 ; that contains a non zero byte.  
                                   3333 ;-----------------------------------
                           000001  3334 	LIMIT=1 
                           000003  3335 	VSIZE = 3 
      002106                       3336 erase:
      002106 72 5F 00 17      [ 1] 3337 	clr farptr 
      00210A                       3338 	_vars VSIZE 
      00210A 52 03            [ 2]    1     sub sp,#VSIZE 
      00210C CD 12 88         [ 4] 3339 	call next_token 
      00210F A1 04            [ 1] 3340 	cp a,#TK_CHAR 
      002111 27 03            [ 1] 3341 	jreq 0$ 
      002113 CC 11 95         [ 2] 3342 	jp syntax_error
      002116 9F               [ 1] 3343 0$: ld a,xl 
      002117 A4 DF            [ 1] 3344 	and a,#0XDF 
      002119 A1 45            [ 1] 3345 	cp a,#'E
      00211B 26 0C            [ 1] 3346 	jrne 1$
      00211D AE 40 00         [ 2] 3347 	ldw x,#EEPROM_BASE 
      002120 CF 00 18         [ 2] 3348 	ldw farptr+1,x 
      002123 AE 47 FF         [ 2] 3349 	ldw x,#EEPROM_END
      002126 4F               [ 1] 3350 	clr a 
      002127 20 15            [ 2] 3351 	jra 3$ 
      002129 A1 46            [ 1] 3352 1$: cp a,#'F 
      00212B 27 06            [ 1] 3353 	jreq 2$
      00212D AE 10 DF         [ 2] 3354 	ldw x,#err_bad_value
      002130 CC 11 97         [ 2] 3355 	jp tb_error
      002133                       3356 2$:
      002133 AE 2D 80         [ 2] 3357 	ldw x,#app_sign 
      002136 CF 00 18         [ 2] 3358 	ldw farptr+1,x 
      002139 A6 02            [ 1] 3359 	ld a,#(FLASH_END>>16)&0XFF 
      00213B AE 7F FF         [ 2] 3360 	ldw x,#FLASH_END&0xffff
      00213E                       3361 3$:
      00213E 6B 01            [ 1] 3362 	ld (LIMIT,sp),a 
      002140 1F 02            [ 2] 3363 	ldw (LIMIT+1,sp),x 
                                   3364  ; operation done from RAM
                                   3365  ; copy code to RAM in tib   
      002142 CD 01 6C         [ 4] 3366 	call move_erase_to_ram
      002145                       3367 4$:	 
      002145 CD 20 F8         [ 4] 3368     call scan_block 
      002148 27 08            [ 1] 3369 	jreq 5$  ; block already erased 
      00214A A6 45            [ 1] 3370     ld a,#'E 
      00214C CD 03 32         [ 4] 3371     call putc 
      00214F CD 01 EA         [ 4] 3372 	call block_erase   
                                   3373 ; this block is clean, next  
      002152 AE 00 80         [ 2] 3374 5$:	ldw x,#BLOCK_SIZE
      002155 CD 20 EA         [ 4] 3375 	call incr_farptr
                                   3376 ; check limit, 24 bit substraction  	
      002158 7B 01            [ 1] 3377 	ld a,(LIMIT,sp)
      00215A 1E 02            [ 2] 3378 	ldw x,(LIMIT+1,sp)
      00215C 72 B0 00 18      [ 2] 3379 	subw x,farptr+1
      002160 C2 00 17         [ 1] 3380 	sbc a,farptr 
      002163 22 E0            [ 1] 3381 	jrugt 4$ 
      002165 CD 0F FD         [ 4] 3382 9$: call clear_basic
      002168 1E 02            [ 2] 3383 	ldw x,(LIMIT+1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      00216A A3 47 FF         [ 2] 3384 	cpw x,#EEPROM_END
      00216D 26 03            [ 1] 3385 	jrne 10$
      00216F CD 18 9C         [ 4] 3386 	call func_eefree 
      002172                       3387 10$:
      002172                       3388 	_drop VSIZE 
      002172 5B 03            [ 2]    1     addw sp,#VSIZE 
      002174 81               [ 4] 3389 	ret 
                                   3390 	
                                   3391 
                                   3392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3393 ;  check for application signature 
                                   3394 ; output:
                                   3395 ;   Carry    0 app present 
                                   3396 ;            1 no app installed  
                                   3397 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002175                       3398 qsign: 
      002175 CE 2D 80         [ 2] 3399 	ldw x,app_sign 
      002178 C3 22 35         [ 2] 3400 	cpw x,SIGNATURE ; "BC" 
      00217B 81               [ 4] 3401 	ret 
                                   3402 
                                   3403 ;--------------------------------------
                                   3404 ;  fill write buffer 
                                   3405 ;  input:
                                   3406 ;    y  point to output buffer 
                                   3407 ;    x  point to source 
                                   3408 ;    a  bytes to write in buffer 
                                   3409 ;  output:
                                   3410 ;    y   += A 
                                   3411 ;    X   += A 
                                   3412 ;    A   0 
                                   3413 ;---------------------------------------
      00217C                       3414 fill_write_buffer:
      00217C 88               [ 1] 3415 	push a 
      00217D 4D               [ 1] 3416 	tnz a 
      00217E 27 0A            [ 1] 3417 	jreq 9$ 
      002180 F6               [ 1] 3418 1$: ld a,(x)
      002181 5C               [ 1] 3419 	incw x 
      002182 90 F7            [ 1] 3420 	ld (y),a 
      002184 90 5C            [ 1] 3421 	incw y 
      002186 0A 01            [ 1] 3422 	dec (1,sp) 
      002188 26 F6            [ 1] 3423 	jrne 1$ 
      00218A 84               [ 1] 3424 9$:	pop a 
      00218B 81               [ 4] 3425     ret 	
                                   3426 
                                   3427 ;--------------------------------------
                                   3428 ;  fill pad buffer with zero 
                                   3429 ;  input:
                                   3430 ;	none 
                                   3431 ;  output:
                                   3432 ;    y     buffer address  
                                   3433 ;--------------------------------------
      00218C                       3434 clear_block_buffer:
      00218C 88               [ 1] 3435 	push a 
      00218D 90 AE 16 E0      [ 2] 3436 	ldw y,#block_buffer 
      002191 90 89            [ 2] 3437 	pushw y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002193 A6 80            [ 1] 3438 	ld a,#BLOCK_SIZE   
      002195 90 7F            [ 1] 3439 1$:	clr (y)
      002197 90 5C            [ 1] 3440 	incw y
      002199 4A               [ 1] 3441 	dec a  
      00219A 26 F9            [ 1] 3442 	jrne 1$ 	
      00219C 90 85            [ 2] 3443 9$: popw y 
      00219E 84               [ 1] 3444 	pop a 			
      00219F 81               [ 4] 3445 	ret 
                                   3446 
                                   3447 
                                   3448 ;---------------------------------------
                                   3449 ; BASIC: SAVE
                                   3450 ; write application from RAM to FLASH
                                   3451 ;--------------------------------------
                           000001  3452 	XTEMP=1
                           000003  3453 	COUNT=3  ; last count bytes written 
                           000004  3454 	CNT_LO=4 ; count low byte 
                           000005  3455 	TOWRITE=5 ; how bytes left to write  
                           000006  3456 	VSIZE=6 
      0021A0                       3457 save_app:
      0021A0 89               [ 2] 3458 	pushw x 
      0021A1 90 89            [ 2] 3459 	pushw y 
      0021A3                       3460 	_vars VSIZE
      0021A3 52 06            [ 2]    1     sub sp,#VSIZE 
      0021A5 CD 21 75         [ 4] 3461 	call qsign 
      0021A8 26 09            [ 1] 3462 	jrne 1$
      0021AA AE 22 37         [ 2] 3463 	ldw x,#CANT_DO 
      0021AD CD 03 8F         [ 4] 3464 	call puts 
      0021B0 CC 22 2F         [ 2] 3465 	jp 9$
      0021B3                       3466 1$: 
      0021B3 CE 00 1A         [ 2] 3467 	ldw x,txtbgn
      0021B6 C3 00 1C         [ 2] 3468 	cpw x,txtend 
      0021B9 25 09            [ 1] 3469 	jrult 2$ 
      0021BB AE 22 79         [ 2] 3470 	ldw x,#NO_APP
      0021BE CD 03 8F         [ 4] 3471 	call puts 
      0021C1 CC 22 2F         [ 2] 3472 	jp 9$
      0021C4                       3473 2$: 
                                   3474 ; block programming flash
                                   3475 ; must be done from RAM
                                   3476 ; moved in tib  
      0021C4 CD 01 AC         [ 4] 3477 	call move_prg_to_ram
                                   3478 ; initialize farptr 
                                   3479 ; to app_sign address 
      0021C7 72 5F 00 17      [ 1] 3480 	clr farptr 
      0021CB AE 2D 80         [ 2] 3481 	ldw x,#app_sign 
      0021CE CF 00 18         [ 2] 3482 	ldw farptr+1,x
                                   3483 ; initialize local variables 
      0021D1 CD 19 89         [ 4] 3484 	call prog_size
      0021D4 1F 05            [ 2] 3485 	ldw (TOWRITE,sp),x
      0021D6 0F 03            [ 1] 3486 	clr (COUNT,sp)
                                   3487 ; first bock 
                                   3488 ; containt signature 2 bytes 
                                   3489 ; and size 	2 bytes 
                                   3490 ; use Y as pointer to block_buffer
      0021D8 CD 21 8C         [ 4] 3491 	call clear_block_buffer ; -- y=*block_buffer	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



                                   3492 ; write signature
      0021DB CE 22 35         [ 2] 3493 	ldw x,SIGNATURE ; "BC" 
      0021DE 90 FF            [ 2] 3494 	ldw (y),x 
      0021E0 72 A9 00 02      [ 2] 3495 	addw y,#2
      0021E4 1E 05            [ 2] 3496 	ldw x,(TOWRITE,sp)
      0021E6 90 FF            [ 2] 3497 	ldw (y),x
      0021E8 72 A9 00 02      [ 2] 3498 	addw y,#2   
      0021EC A6 7C            [ 1] 3499 	ld a,#(BLOCK_SIZE-4)
      0021EE 6B 04            [ 1] 3500 	ld (CNT_LO,sp),a 
      0021F0 A3 00 7C         [ 2] 3501 	cpw x,#(BLOCK_SIZE-4) 
      0021F3 22 01            [ 1] 3502 	jrugt 3$
      0021F5 9F               [ 1] 3503 	ld a,xl 
      0021F6 6B 04            [ 1] 3504 3$:	ld (CNT_LO,sp),a   
      0021F8 CE 00 1A         [ 2] 3505 	ldw x,txtbgn 
      0021FB 1F 01            [ 2] 3506 	ldw (XTEMP,sp),x 
      0021FD                       3507 32$: 
      0021FD 1E 01            [ 2] 3508 	ldw x,(XTEMP,sp)
      0021FF 7B 04            [ 1] 3509 	ld a,(CNT_LO,sp)
      002201 CD 21 7C         [ 4] 3510 	call fill_write_buffer 
      002204 1F 01            [ 2] 3511 	ldw (XTEMP,sp),x 
      002206 AE 16 E0         [ 2] 3512 	ldw x,#block_buffer
      002209 CD 01 C6         [ 4] 3513 	call write_buffer
      00220C AE 00 80         [ 2] 3514 	ldw x,#BLOCK_SIZE 
      00220F CD 20 EA         [ 4] 3515 	call incr_farptr  
                                   3516 ; following blocks 
      002212 1E 01            [ 2] 3517 	ldw x,(XTEMP,sp)
      002214 C3 00 1C         [ 2] 3518 	cpw x,txtend 
      002217 24 16            [ 1] 3519 	jruge 9$ 
      002219 1E 05            [ 2] 3520 	ldw x,(TOWRITE,sp)
      00221B 72 F0 03         [ 2] 3521 	subw x,(COUNT,sp)
      00221E 1F 05            [ 2] 3522 	ldw (TOWRITE,sp),x 
      002220 A6 80            [ 1] 3523 	ld a,#BLOCK_SIZE 
      002222 A3 00 80         [ 2] 3524 	cpw x,#BLOCK_SIZE 
      002225 24 01            [ 1] 3525 	jruge 4$ 
      002227 9F               [ 1] 3526 	ld a,xl 
      002228 6B 04            [ 1] 3527 4$:	ld (CNT_LO,sp),a 
      00222A CD 21 8C         [ 4] 3528 	call clear_block_buffer 
      00222D 20 CE            [ 2] 3529 	jra 32$ 
      00222F                       3530 9$:	_drop VSIZE 
      00222F 5B 06            [ 2]    1     addw sp,#VSIZE 
      002231 90 85            [ 2] 3531     popw y 
      002233 85               [ 2] 3532 	popw x 
      002234 81               [ 4] 3533 	ret 
                                   3534 
                                   3535 
      002235 42 43                 3536 SIGNATURE: .ascii "BC"
      002237 43 61 6E 27 74 20 66  3537 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



             72 65 00
      002279 4E 6F 20 61 70 70 6C  3538 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3539 
                                   3540 ;---------------------
                                   3541 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3542 ; write 1 or more byte to FLASH or EEPROM
                                   3543 ; starting at address  
                                   3544 ; input:
                                   3545 ;   expr1  	is address 
                                   3546 ;   expr2,...,exprn   are bytes to write
                                   3547 ; output:
                                   3548 ;   none 
                                   3549 ;---------------------
                           000001  3550 	ADDR=1
                           000002  3551 	VSIZ=2 
      00228F                       3552 write:
      00228F                       3553 	_vars VSIZE 
      00228F 52 06            [ 2]    1     sub sp,#VSIZE 
      002291 72 5F 00 17      [ 1] 3554 	clr farptr ; expect 16 bits address 
      002295 CD 17 35         [ 4] 3555 	call expression
      002298 A1 84            [ 1] 3556 	cp a,#TK_INTGR 
      00229A 27 03            [ 1] 3557 	jreq 0$
      00229C CC 11 95         [ 2] 3558 	jp syntax_error
      00229F 1F 01            [ 2] 3559 0$: ldw (ADDR,sp),x 
      0022A1 CD 12 88         [ 4] 3560 	call next_token 
      0022A4 A1 09            [ 1] 3561 	cp a,#TK_COMMA 
      0022A6 27 02            [ 1] 3562 	jreq 1$ 
      0022A8 20 19            [ 2] 3563 	jra 9$ 
      0022AA CD 17 35         [ 4] 3564 1$:	call expression
      0022AD A1 84            [ 1] 3565 	cp a,#TK_INTGR
      0022AF 27 03            [ 1] 3566 	jreq 2$
      0022B1 CC 11 95         [ 2] 3567 	jp syntax_error
      0022B4 9F               [ 1] 3568 2$:	ld a,xl 
      0022B5 1E 01            [ 2] 3569 	ldw x,(ADDR,sp) 
      0022B7 CF 00 18         [ 2] 3570 	ldw farptr+1,x 
      0022BA 5F               [ 1] 3571 	clrw x 
      0022BB CD 02 0B         [ 4] 3572 	call write_byte
      0022BE 1E 01            [ 2] 3573 	ldw x,(ADDR,sp)
      0022C0 5C               [ 1] 3574 	incw x 
      0022C1 20 DC            [ 2] 3575 	jra 0$ 
      0022C3                       3576 9$:
      0022C3                       3577 	_drop VSIZE
      0022C3 5B 06            [ 2]    1     addw sp,#VSIZE 
      0022C5 81               [ 4] 3578 	ret 
                                   3579 
                                   3580 
                                   3581 ;---------------------
                                   3582 ;BASIC: CHAR(expr)
                                   3583 ; évaluate expression 
                                   3584 ; and take the 7 least 
                                   3585 ; bits as ASCII character
                                   3586 ; return a TK_CHAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



                                   3587 ;---------------------
      0022C6                       3588 char:
      0022C6 CD 16 31         [ 4] 3589 	call func_args 
      0022C9 A1 01            [ 1] 3590 	cp a,#1
      0022CB 27 03            [ 1] 3591 	jreq 1$
      0022CD CC 11 95         [ 2] 3592 	jp syntax_error
      0022D0 85               [ 2] 3593 1$:	popw x 
      0022D1 9F               [ 1] 3594 	ld a,xl 
      0022D2 A4 7F            [ 1] 3595 	and a,#0x7f 
      0022D4 97               [ 1] 3596 	ld xl,a
      0022D5 A6 04            [ 1] 3597 	ld a,#TK_CHAR
      0022D7 81               [ 4] 3598 	ret
                                   3599 
                                   3600 ;---------------------
                                   3601 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3602 ; extract first character 
                                   3603 ; of string argument 
                                   3604 ; return it as TK_INTGR 
                                   3605 ;---------------------
      0022D8                       3606 ascii:
      0022D8 A6 07            [ 1] 3607 	ld a,#TK_LPAREN
      0022DA CD 16 24         [ 4] 3608 	call expect 
      0022DD CD 12 88         [ 4] 3609 	call next_token 
      0022E0 A1 02            [ 1] 3610 	cp a,#TK_QSTR 
      0022E2 27 0E            [ 1] 3611 	jreq 1$
      0022E4 A1 04            [ 1] 3612 	cp a,#TK_CHAR 
      0022E6 27 0D            [ 1] 3613 	jreq 2$ 
      0022E8 A1 82            [ 1] 3614 	cp a,#TK_CFUNC 
      0022EA 27 03            [ 1] 3615 	jreq 0$
      0022EC CC 11 95         [ 2] 3616 	jp syntax_error
      0022EF FD               [ 4] 3617 0$: call (x)
      0022F0 20 03            [ 2] 3618 	jra 2$
      0022F2                       3619 1$: 
      0022F2 F6               [ 1] 3620 	ld a,(x) 
      0022F3 5F               [ 1] 3621 	clrw x
      0022F4 97               [ 1] 3622 	ld xl,a 
      0022F5                       3623 2$: 
      0022F5 89               [ 2] 3624 	pushw x 
      0022F6 A6 08            [ 1] 3625 	ld a,#TK_RPAREN 
      0022F8 CD 16 24         [ 4] 3626 	call expect
      0022FB 85               [ 2] 3627 	popw x 
      0022FC A6 84            [ 1] 3628 	ld a,#TK_INTGR 
      0022FE 81               [ 4] 3629 	ret 
                                   3630 
                                   3631 ;---------------------
                                   3632 ;BASIC: KEY
                                   3633 ; wait for a character 
                                   3634 ; received from STDIN 
                                   3635 ; input:
                                   3636 ;	none 
                                   3637 ; output:
                                   3638 ;	X 		ASCII character 
                                   3639 ;---------------------
      0022FF                       3640 key:
      0022FF CD 03 42         [ 4] 3641 	call getc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002302 5F               [ 1] 3642 	clrw x 
      002303 97               [ 1] 3643 	ld xl,a 
      002304 A6 84            [ 1] 3644 	ld a,#TK_INTGR
      002306 81               [ 4] 3645 	ret
                                   3646 
                                   3647 ;----------------------
                                   3648 ; BASIC: QKEY
                                   3649 ; Return true if there 
                                   3650 ; is a character in 
                                   3651 ; waiting in STDIN 
                                   3652 ; input:
                                   3653 ;  none 
                                   3654 ; output:
                                   3655 ;   X 		0|-1 
                                   3656 ;-----------------------
      002307                       3657 qkey:: 
      002307 5F               [ 1] 3658 	clrw x 
      002308 C6 00 2D         [ 1] 3659 	ld a,rx1_head
      00230B C1 00 2E         [ 1] 3660 	cp a,rx1_tail 
      00230E 27 01            [ 1] 3661 	jreq 9$ 
      002310 53               [ 2] 3662 	cplw x 
      002311 A6 84            [ 1] 3663 9$: ld a,#TK_INTGR
      002313 81               [ 4] 3664 	ret 
                                   3665 
                                   3666 ;---------------------
                                   3667 ; BASIC: GPIO(expr,reg)
                                   3668 ; return gpio address 
                                   3669 ; expr {0..8}
                                   3670 ; input:
                                   3671 ;   none 
                                   3672 ; output:
                                   3673 ;   X 		gpio register address
                                   3674 ;----------------------------
                           000003  3675 	PORT=3
                           000001  3676 	REG=1 
                           000004  3677 	VSIZE=4 
      002314                       3678 gpio:
      002314 CD 16 31         [ 4] 3679 	call func_args 
      002317 A1 02            [ 1] 3680 	cp a,#2
      002319 27 03            [ 1] 3681 	jreq 1$
      00231B CC 11 95         [ 2] 3682 	jp syntax_error  
      00231E                       3683 1$:	
      00231E 1E 03            [ 2] 3684 	ldw x,(PORT,sp)
      002320 2B 17            [ 1] 3685 	jrmi bad_port
      002322 A3 00 09         [ 2] 3686 	cpw x,#9
      002325 2A 12            [ 1] 3687 	jrpl bad_port
      002327 A6 05            [ 1] 3688 	ld a,#5
      002329 42               [ 4] 3689 	mul x,a
      00232A 1C 50 00         [ 2] 3690 	addw x,#GPIO_BASE 
      00232D 1F 03            [ 2] 3691 	ldw (PORT,sp),x  
      00232F 1E 01            [ 2] 3692 	ldw x,(REG,sp) 
      002331 72 FB 03         [ 2] 3693 	addw x,(PORT,sp)
      002334 A6 84            [ 1] 3694 	ld a,#TK_INTGR
      002336                       3695 	_drop VSIZE 
      002336 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002338 81               [ 4] 3696 	ret
      002339                       3697 bad_port:
      002339 A6 0A            [ 1] 3698 	ld a,#ERR_BAD_VALUE
      00233B CC 11 97         [ 2] 3699 	jp tb_error
                                   3700 
                                   3701 
                                   3702 ;-------------------------
                                   3703 ; BASIC: UFLASH 
                                   3704 ; return free flash address
                                   3705 ; input:
                                   3706 ;  none 
                                   3707 ; output:
                                   3708 ;	A		TK_INTGR
                                   3709 ;   X 		free address 
                                   3710 ;---------------------------
      00233E                       3711 uflash:
      00233E CE 2D 80         [ 2] 3712 	ldw x,app_sign
      002341 A3 10 93         [ 2] 3713 	cpw x,#4243 ; signature "BC" 
      002344 27 08            [ 1] 3714 	jreq 1$
      002346 CE 2D 82         [ 2] 3715 	ldw x,app_size 
      002349 1C 2D 84         [ 2] 3716 	addw x,#app
      00234C 20 03            [ 2] 3717 	jra 2$
      00234E AE 2D 80         [ 2] 3718 1$:	ldw x,#app_space 
      002351 A6 84            [ 1] 3719 2$:	ld a,#TK_INTGR 
      002353 81               [ 4] 3720 	ret 
                                   3721 
                                   3722 
                                   3723 ;---------------------
                                   3724 ; BASIC: USR(addr[,arg])
                                   3725 ; execute a function written 
                                   3726 ; in binary code.
                                   3727 ; binary fonction should 
                                   3728 ; return token attribute in A 
                                   3729 ; and value in X. 
                                   3730 ; input:
                                   3731 ;   addr	routine address 
                                   3732 ;   arg 	is an optional argument 
                                   3733 ; output:
                                   3734 ;   A 		token attribute 
                                   3735 ;   X       returned value 
                                   3736 ;---------------------
      002354                       3737 usr:
      002354 90 89            [ 2] 3738 	pushw y 	
      002356 CD 16 31         [ 4] 3739 	call func_args 
      002359 A1 01            [ 1] 3740 	cp a,#1 
      00235B 27 07            [ 1] 3741 	jreq 2$
      00235D A1 02            [ 1] 3742 	cp a,#2
      00235F 27 03            [ 1] 3743 	jreq 2$  
      002361 CC 11 95         [ 2] 3744 	jp syntax_error 
      002364 90 85            [ 2] 3745 2$: popw y  ; arg|addr 
      002366 A1 01            [ 1] 3746 	cp a,#1
      002368 27 02            [ 1] 3747 	jreq 3$
      00236A 85               [ 2] 3748 	popw x ; addr
      00236B 51               [ 1] 3749 	exgw x,y 
      00236C 90 FD            [ 4] 3750 3$: call (y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      00236E 90 85            [ 2] 3751 	popw y 
      002370 81               [ 4] 3752 	ret 
                                   3753 
                                   3754 ;------------------------------
                                   3755 ; BASIC: BYE 
                                   3756 ; halt mcu in its lowest power mode 
                                   3757 ; wait for reset or external interrupt
                                   3758 ; do a cold start on wakeup.
                                   3759 ;------------------------------
      002371                       3760 bye:
      002371 72 0D 52 30 FB   [ 2] 3761 	btjf UART1_SR,#UART_SR_TC,.
      002376 8E               [10] 3762 	halt
      002377 CC 0F 08         [ 2] 3763 	jp cold_start  
                                   3764 
                                   3765 ;----------------------------------
                                   3766 ; BASIC: SLEEP 
                                   3767 ; halt mcu until reset or external
                                   3768 ; interrupt.
                                   3769 ; Resume progam after SLEEP command
                                   3770 ;----------------------------------
      00237A                       3771 sleep:
      00237A 72 0D 52 30 FB   [ 2] 3772 	btjf UART1_SR,#UART_SR_TC,.
      00237F 72 16 00 21      [ 1] 3773 	bset flags,#FSLEEP
      002383 8E               [10] 3774 	halt 
      002384 81               [ 4] 3775 	ret 
                                   3776 
                                   3777 ;-------------------------------
                                   3778 ; BASIC: PAUSE expr 
                                   3779 ; suspend execution for n msec.
                                   3780 ; input:
                                   3781 ;	none
                                   3782 ; output:
                                   3783 ;	none 
                                   3784 ;------------------------------
      002385                       3785 pause:
      002385 CD 17 35         [ 4] 3786 	call expression
      002388 A1 84            [ 1] 3787 	cp a,#TK_INTGR
      00238A 27 03            [ 1] 3788 	jreq pause02 
      00238C CC 11 95         [ 2] 3789 	jp syntax_error
      00238F                       3790 pause02: 
      00238F 5D               [ 2] 3791 1$: tnzw x 
      002390 27 04            [ 1] 3792 	jreq 2$
      002392 8F               [10] 3793 	wfi 
      002393 5A               [ 2] 3794 	decw x 
      002394 26 F9            [ 1] 3795 	jrne 1$
      002396 4F               [ 1] 3796 2$:	clr a 
      002397 81               [ 4] 3797 	ret 
                                   3798 
                                   3799 ;------------------------------
                                   3800 ; BASIC: AWU expr
                                   3801 ; halt mcu for 'expr' milliseconds
                                   3802 ; use Auto wakeup peripheral
                                   3803 ; all oscillators stopped except LSI
                                   3804 ; range: 1ms - 511ms
                                   3805 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



                                   3806 ;  none
                                   3807 ; output:
                                   3808 ;  none:
                                   3809 ;------------------------------
      002398                       3810 awu:
      002398 CD 17 35         [ 4] 3811   call expression
      00239B A1 84            [ 1] 3812   cp a,#TK_INTGR
      00239D 27 03            [ 1] 3813   jreq awu02
      00239F CC 11 95         [ 2] 3814   jp syntax_error
      0023A2                       3815 awu02:
      0023A2 A3 14 00         [ 2] 3816   cpw x,#5120
      0023A5 2B 0C            [ 1] 3817   jrmi 1$ 
      0023A7 35 0F 50 F2      [ 1] 3818   mov AWU_TBR,#15 
      0023AB A6 1E            [ 1] 3819   ld a,#30
      0023AD 62               [ 2] 3820   div x,a
      0023AE A6 10            [ 1] 3821   ld a,#16
      0023B0 62               [ 2] 3822   div x,a 
      0023B1 20 1E            [ 2] 3823   jra 4$
      0023B3                       3824 1$: 
      0023B3 A3 08 00         [ 2] 3825   cpw x,#2048
      0023B6 2B 09            [ 1] 3826   jrmi 2$ 
      0023B8 35 0E 50 F2      [ 1] 3827   mov AWU_TBR,#14
      0023BC A6 50            [ 1] 3828   ld a,#80
      0023BE 62               [ 2] 3829   div x,a 
      0023BF 20 10            [ 2] 3830   jra 4$   
      0023C1                       3831 2$:
      0023C1 35 07 50 F2      [ 1] 3832   mov AWU_TBR,#7
      0023C5                       3833 3$:  
                                   3834 ; while X > 64  divide by 2 and increment AWU_TBR 
      0023C5 A3 00 40         [ 2] 3835   cpw x,#64 
      0023C8 23 07            [ 2] 3836   jrule 4$ 
      0023CA 72 5C 50 F2      [ 1] 3837   inc AWU_TBR 
      0023CE 54               [ 2] 3838   srlw x 
      0023CF 20 F4            [ 2] 3839   jra 3$ 
      0023D1                       3840 4$:
      0023D1 9F               [ 1] 3841   ld a, xl
      0023D2 4A               [ 1] 3842   dec a 
      0023D3 27 01            [ 1] 3843   jreq 5$
      0023D5 4A               [ 1] 3844   dec a 	
      0023D6                       3845 5$: 
      0023D6 A4 3E            [ 1] 3846   and a,#0x3e 
      0023D8 C7 50 F1         [ 1] 3847   ld AWU_APR,a 
      0023DB 72 18 50 F0      [ 1] 3848   bset AWU_CSR,#AWU_CSR_AWUEN
      0023DF 8E               [10] 3849   halt 
                                   3850 
      0023E0 81               [ 4] 3851   ret 
                                   3852 
                                   3853 ;------------------------------
                                   3854 ; BASIC: TICKS
                                   3855 ; return msec ticks counter value 
                                   3856 ; input:
                                   3857 ; 	none 
                                   3858 ; output:
                                   3859 ;	X 		TK_INTGR
                                   3860 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      0023E1                       3861 get_ticks:
      0023E1 CE 00 0F         [ 2] 3862 	ldw x,ticks 
      0023E4 A6 84            [ 1] 3863 	ld a,#TK_INTGR
      0023E6 81               [ 4] 3864 	ret 
                                   3865 
                                   3866 
                                   3867 
                                   3868 ;------------------------------
                                   3869 ; BASIC: ABS(expr)
                                   3870 ; return absolute value of expr.
                                   3871 ; input:
                                   3872 ;   none
                                   3873 ; output:
                                   3874 ;   X     	positive integer
                                   3875 ;-------------------------------
      0023E7                       3876 abs:
      0023E7 CD 16 31         [ 4] 3877 	call func_args 
      0023EA A1 01            [ 1] 3878 	cp a,#1 
      0023EC 27 03            [ 1] 3879 	jreq 0$ 
      0023EE CC 11 95         [ 2] 3880 	jp syntax_error
      0023F1                       3881 0$:  
      0023F1 85               [ 2] 3882     popw x   
      0023F2 9E               [ 1] 3883 	ld a,xh 
      0023F3 A5 80            [ 1] 3884 	bcp a,#0x80 
      0023F5 27 01            [ 1] 3885 	jreq 2$ 
      0023F7 50               [ 2] 3886 	negw x 
      0023F8 A6 84            [ 1] 3887 2$: ld a,#TK_INTGR 
      0023FA 81               [ 4] 3888 	ret 
                                   3889 
                                   3890 ;------------------------------
                                   3891 ; BASIC: AND(expr1,expr2)
                                   3892 ; Apply bit AND relation between
                                   3893 ; the 2 arguments, i.e expr1 & expr2 
                                   3894 ; output:
                                   3895 ; 	A 		TK_INTGR
                                   3896 ;   X 		result 
                                   3897 ;------------------------------
      0023FB                       3898 bit_and:
      0023FB CD 16 31         [ 4] 3899 	call func_args 
      0023FE A1 02            [ 1] 3900 	cp a,#2
      002400 27 03            [ 1] 3901 	jreq 1$
      002402 CC 11 95         [ 2] 3902 	jp syntax_error 
      002405 85               [ 2] 3903 1$:	popw x 
      002406 9E               [ 1] 3904 	ld a,xh 
      002407 14 01            [ 1] 3905 	and a,(1,sp)
      002409 95               [ 1] 3906 	ld xh,a 
      00240A 9F               [ 1] 3907 	ld a,xl
      00240B 14 02            [ 1] 3908 	and a,(2,sp)
      00240D 97               [ 1] 3909 	ld xl,a 
      00240E                       3910 	_drop 2 
      00240E 5B 02            [ 2]    1     addw sp,#2 
      002410 A6 84            [ 1] 3911 	ld a,#TK_INTGR
      002412 81               [ 4] 3912 	ret
                                   3913 
                                   3914 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



                                   3915 ; BASIC: OR(expr1,expr2)
                                   3916 ; Apply bit OR relation between
                                   3917 ; the 2 arguments, i.e expr1 | expr2 
                                   3918 ; output:
                                   3919 ; 	A 		TK_INTGR
                                   3920 ;   X 		result 
                                   3921 ;------------------------------
      002413                       3922 bit_or:
      002413 CD 16 31         [ 4] 3923 	call func_args 
      002416 A1 02            [ 1] 3924 	cp a,#2
      002418 27 03            [ 1] 3925 	jreq 1$
      00241A CC 11 95         [ 2] 3926 	jp syntax_error 
      00241D                       3927 1$: 
      00241D 85               [ 2] 3928 	popw x 
      00241E 9E               [ 1] 3929 	ld a,xh 
      00241F 1A 01            [ 1] 3930 	or a,(1,sp)
      002421 95               [ 1] 3931 	ld xh,a 
      002422 9F               [ 1] 3932 	ld a,xl 
      002423 1A 02            [ 1] 3933 	or a,(2,sp)
      002425 97               [ 1] 3934 	ld xl,a 
      002426                       3935 	_drop 2 
      002426 5B 02            [ 2]    1     addw sp,#2 
      002428 A6 84            [ 1] 3936 	ld a,#TK_INTGR 
      00242A 81               [ 4] 3937 	ret
                                   3938 
                                   3939 ;------------------------------
                                   3940 ; BASIC: XOR(expr1,expr2)
                                   3941 ; Apply bit XOR relation between
                                   3942 ; the 2 arguments, i.e expr1 ^ expr2 
                                   3943 ; output:
                                   3944 ; 	A 		TK_INTGR
                                   3945 ;   X 		result 
                                   3946 ;------------------------------
      00242B                       3947 bit_xor:
      00242B CD 16 31         [ 4] 3948 	call func_args 
      00242E A1 02            [ 1] 3949 	cp a,#2
      002430 27 03            [ 1] 3950 	jreq 1$
      002432 CC 11 95         [ 2] 3951 	jp syntax_error 
      002435                       3952 1$: 
      002435 85               [ 2] 3953 	popw x 
      002436 9E               [ 1] 3954 	ld a,xh 
      002437 18 01            [ 1] 3955 	xor a,(1,sp)
      002439 95               [ 1] 3956 	ld xh,a 
      00243A 9F               [ 1] 3957 	ld a,xl 
      00243B 18 02            [ 1] 3958 	xor a,(2,sp)
      00243D 97               [ 1] 3959 	ld xl,a 
      00243E                       3960 	_drop 2 
      00243E 5B 02            [ 2]    1     addw sp,#2 
      002440 A6 84            [ 1] 3961 	ld a,#TK_INTGR 
      002442 81               [ 4] 3962 	ret 
                                   3963 
                                   3964 ;------------------------------
                                   3965 ; BASIC: LSHIFT(expr1,expr2)
                                   3966 ; logical shift left expr1 by 
                                   3967 ; expr2 bits 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



                                   3968 ; output:
                                   3969 ; 	A 		TK_INTGR
                                   3970 ;   X 		result 
                                   3971 ;------------------------------
      002443                       3972 lshift:
      002443 CD 16 31         [ 4] 3973 	call func_args
      002446 A1 02            [ 1] 3974 	cp a,#2 
      002448 27 03            [ 1] 3975 	jreq 1$
      00244A CC 11 95         [ 2] 3976 	jp syntax_error
      00244D 90 85            [ 2] 3977 1$: popw y   
      00244F 85               [ 2] 3978 	popw x 
      002450 90 5D            [ 2] 3979 	tnzw y 
      002452 27 05            [ 1] 3980 	jreq 4$
      002454 58               [ 2] 3981 2$:	sllw x 
      002455 90 5A            [ 2] 3982 	decw y 
      002457 26 FB            [ 1] 3983 	jrne 2$
      002459                       3984 4$:  
      002459 A6 84            [ 1] 3985 	ld a,#TK_INTGR
      00245B 81               [ 4] 3986 	ret
                                   3987 
                                   3988 ;------------------------------
                                   3989 ; BASIC: RSHIFT(expr1,expr2)
                                   3990 ; logical shift right expr1 by 
                                   3991 ; expr2 bits.
                                   3992 ; output:
                                   3993 ; 	A 		TK_INTGR
                                   3994 ;   X 		result 
                                   3995 ;------------------------------
      00245C                       3996 rshift:
      00245C CD 16 31         [ 4] 3997 	call func_args
      00245F A1 02            [ 1] 3998 	cp a,#2 
      002461 27 03            [ 1] 3999 	jreq 1$
      002463 CC 11 95         [ 2] 4000 	jp syntax_error
      002466 90 85            [ 2] 4001 1$: popw y  
      002468 85               [ 2] 4002 	popw x
      002469 90 5D            [ 2] 4003 	tnzw y 
      00246B 27 05            [ 1] 4004 	jreq 4$
      00246D 54               [ 2] 4005 2$:	srlw x 
      00246E 90 5A            [ 2] 4006 	decw y 
      002470 26 FB            [ 1] 4007 	jrne 2$
      002472                       4008 4$:  
      002472 A6 84            [ 1] 4009 	ld a,#TK_INTGR
      002474 81               [ 4] 4010 	ret
                                   4011 
                                   4012 ;--------------------------
                                   4013 ; BASIC: FCPU integer
                                   4014 ; set CPU frequency 
                                   4015 ;-------------------------- 
                                   4016 
      002475                       4017 fcpu:
      002475 A6 84            [ 1] 4018 	ld a,#TK_INTGR
      002477 CD 16 24         [ 4] 4019 	call expect 
      00247A 9F               [ 1] 4020 	ld a,xl 
      00247B A4 07            [ 1] 4021 	and a,#7 
      00247D C7 50 C6         [ 1] 4022 	ld CLK_CKDIVR,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      002480 81               [ 4] 4023 	ret 
                                   4024 
                                   4025 ;------------------------------
                                   4026 ; BASIC: PMODE pin#, mode 
                                   4027 ; Arduino pin. 
                                   4028 ; define pin as input or output
                                   4029 ; pin#: {0..15}
                                   4030 ; mode: INPUT|OUTPUT  
                                   4031 ;------------------------------
                           000001  4032 	PINNO=1
                           000001  4033 	VSIZE=1
      002481                       4034 pin_mode:
      002481                       4035 	_vars VSIZE 
      002481 52 01            [ 2]    1     sub sp,#VSIZE 
      002483 CD 16 36         [ 4] 4036 	call arg_list 
      002486 A1 02            [ 1] 4037 	cp a,#2 
      002488 27 03            [ 1] 4038 	jreq 1$
      00248A CC 11 95         [ 2] 4039 	jp syntax_error 
      00248D 90 85            [ 2] 4040 1$: popw y ; mode 
      00248F 85               [ 2] 4041 	popw x ; Dx pin 
      002490 CD 24 CD         [ 4] 4042 	call select_pin 
      002493 6B 01            [ 1] 4043 	ld (PINNO,sp),a  
      002495 A6 01            [ 1] 4044 	ld a,#1 
      002497 0D 01            [ 1] 4045 	tnz (PINNO,sp)
      002499 27 0D            [ 1] 4046 	jreq 4$
      00249B 48               [ 1] 4047 2$:	sll a 
      00249C 0A 01            [ 1] 4048 	dec (PINNO,sp)
      00249E 26 FB            [ 1] 4049 	jrne 2$ 
      0024A0 6B 01            [ 1] 4050 	ld (PINNO,sp),a
      0024A2 7B 01            [ 1] 4051 	ld a,(PINNO,sp)
      0024A4 EA 03            [ 1] 4052 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      0024A6 E7 03            [ 1] 4053 	ld (GPIO_CR1,x),a 
      0024A8 90 A3 00 01      [ 2] 4054 4$:	cpw y,#OUTP 
      0024AC 27 10            [ 1] 4055 	jreq 6$
                                   4056 ; input mode
                                   4057 ; disable external interrupt 
      0024AE 7B 01            [ 1] 4058 	ld a,(PINNO,sp)
      0024B0 43               [ 1] 4059 	cpl a 
      0024B1 E4 04            [ 1] 4060 	and a,(GPIO_CR2,x)
      0024B3 E7 04            [ 1] 4061 	ld (GPIO_CR2,x),a 
                                   4062 ;clear bit in DDR for input mode 
      0024B5 7B 01            [ 1] 4063 	ld a,(PINNO,sp)
      0024B7 43               [ 1] 4064 	cpl a 
      0024B8 E4 02            [ 1] 4065 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      0024BA E7 02            [ 1] 4066 	ld (GPIO_DDR,x),a 
      0024BC 20 0C            [ 2] 4067 	jra 9$
      0024BE                       4068 6$: ;output mode  
      0024BE 7B 01            [ 1] 4069 	ld a,(PINNO,sp)
      0024C0 EA 02            [ 1] 4070 	or a,(GPIO_DDR,x) ; bit==1 for output 
      0024C2 E7 02            [ 1] 4071 	ld (GPIO_DDR,x),a 
      0024C4 7B 01            [ 1] 4072 	ld a,(PINNO,sp)
      0024C6 EA 04            [ 1] 4073 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      0024C8 E7 04            [ 1] 4074 	ld (GPIO_CR2,x),a 
      0024CA                       4075 9$:	
      0024CA                       4076 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0024CA 5B 01            [ 2]    1     addw sp,#VSIZE 
      0024CC 81               [ 4] 4077 	ret
                                   4078 
                                   4079 ;------------------------
                                   4080 ; select Arduino pin 
                                   4081 ; input:
                                   4082 ;   X 	 {0..15} Arduino Dx 
                                   4083 ; output:
                                   4084 ;   A     stm8s208 pin 
                                   4085 ;   X     base address s208 GPIO port 
                                   4086 ;---------------------------
      0024CD                       4087 select_pin:
      0024CD 58               [ 2] 4088 	sllw x 
      0024CE 1C 24 DD         [ 2] 4089 	addw x,#arduino_to_8s208 
      0024D1 FE               [ 2] 4090 	ldw x,(x)
      0024D2 9F               [ 1] 4091 	ld a,xl 
      0024D3 88               [ 1] 4092 	push a 
      0024D4 5E               [ 1] 4093 	swapw x 
      0024D5 A6 05            [ 1] 4094 	ld a,#5 
      0024D7 42               [ 4] 4095 	mul x,a 
      0024D8 1C 50 00         [ 2] 4096 	addw x,#GPIO_BASE 
      0024DB 84               [ 1] 4097 	pop a 
      0024DC 81               [ 4] 4098 	ret 
                                   4099 ; translation from Arduino D0..D15 to stm8s208rb 
      0024DD                       4100 arduino_to_8s208:
      0024DD 03 06                 4101 .byte 3,6 ; D0 
      0024DF 03 05                 4102 .byte 3,5 ; D1 
      0024E1 04 00                 4103 .byte 4,0 ; D2 
      0024E3 02 01                 4104 .byte 2,1 ; D3
      0024E5 06 00                 4105 .byte 6,0 ; D4
      0024E7 02 02                 4106 .byte 2,2 ; D5
      0024E9 02 03                 4107 .byte 2,3 ; D6
      0024EB 03 01                 4108 .byte 3,1 ; D7
      0024ED 03 03                 4109 .byte 3,3 ; D8
      0024EF 02 04                 4110 .byte 2,4 ; D9
      0024F1 04 05                 4111 .byte 4,5 ; D10
      0024F3 02 06                 4112 .byte 2,6 ; D11
      0024F5 02 07                 4113 .byte 2,7 ; D12
      0024F7 02 05                 4114 .byte 2,5 ; D13
      0024F9 04 02                 4115 .byte 4,2 ; D14
      0024FB 04 01                 4116 .byte 4,1 ; D15
                                   4117 
                                   4118 
                                   4119 ;------------------------------
                                   4120 ; BASIC: RND(expr)
                                   4121 ; return random number 
                                   4122 ; between 1 and expr inclusive
                                   4123 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4124 ; input:
                                   4125 ; 	none 
                                   4126 ; output:
                                   4127 ;	X 		random positive integer 
                                   4128 ;------------------------------
      0024FD                       4129 random:
      0024FD CD 16 31         [ 4] 4130 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      002500 A1 01            [ 1] 4131 	cp a,#1
      002502 27 03            [ 1] 4132 	jreq 1$
      002504 CC 11 95         [ 2] 4133 	jp syntax_error
      002507                       4134 1$:  
      002507 A6 80            [ 1] 4135 	ld a,#0x80 
      002509 15 01            [ 1] 4136 	bcp a,(1,sp)
      00250B 27 05            [ 1] 4137 	jreq 2$
      00250D A6 0A            [ 1] 4138 	ld a,#ERR_BAD_VALUE
      00250F CC 11 97         [ 2] 4139 	jp tb_error
      002512                       4140 2$: 
                                   4141 ; acc16=(x<<5)^x 
      002512 CE 00 13         [ 2] 4142 	ldw x,seedx 
      002515 58               [ 2] 4143 	sllw x 
      002516 58               [ 2] 4144 	sllw x 
      002517 58               [ 2] 4145 	sllw x 
      002518 58               [ 2] 4146 	sllw x 
      002519 58               [ 2] 4147 	sllw x 
      00251A 9E               [ 1] 4148 	ld a,xh 
      00251B C8 00 13         [ 1] 4149 	xor a,seedx 
      00251E C7 00 0D         [ 1] 4150 	ld acc16,a 
      002521 9F               [ 1] 4151 	ld a,xl 
      002522 C8 00 14         [ 1] 4152 	xor a,seedx+1 
      002525 C7 00 0E         [ 1] 4153 	ld acc8,a 
                                   4154 ; seedx=seedy 
      002528 CE 00 15         [ 2] 4155 	ldw x,seedy 
      00252B CF 00 13         [ 2] 4156 	ldw seedx,x  
                                   4157 ; seedy=seedy^(seedy>>1)
      00252E 90 54            [ 2] 4158 	srlw y 
      002530 90 9E            [ 1] 4159 	ld a,yh 
      002532 C8 00 15         [ 1] 4160 	xor a,seedy 
      002535 C7 00 15         [ 1] 4161 	ld seedy,a  
      002538 90 9F            [ 1] 4162 	ld a,yl 
      00253A C8 00 16         [ 1] 4163 	xor a,seedy+1 
      00253D C7 00 16         [ 1] 4164 	ld seedy+1,a 
                                   4165 ; acc16>>3 
      002540 CE 00 0D         [ 2] 4166 	ldw x,acc16 
      002543 54               [ 2] 4167 	srlw x 
      002544 54               [ 2] 4168 	srlw x 
      002545 54               [ 2] 4169 	srlw x 
                                   4170 ; x=acc16^x 
      002546 9E               [ 1] 4171 	ld a,xh 
      002547 C8 00 0D         [ 1] 4172 	xor a,acc16 
      00254A 95               [ 1] 4173 	ld xh,a 
      00254B 9F               [ 1] 4174 	ld a,xl 
      00254C C8 00 0E         [ 1] 4175 	xor a,acc8 
      00254F 97               [ 1] 4176 	ld xl,a 
                                   4177 ; seedy=x^seedy 
      002550 C8 00 16         [ 1] 4178 	xor a,seedy+1
      002553 97               [ 1] 4179 	ld xl,a 
      002554 9E               [ 1] 4180 	ld a,xh 
      002555 C8 00 15         [ 1] 4181 	xor a,seedy
      002558 95               [ 1] 4182 	ld xh,a 
      002559 CF 00 15         [ 2] 4183 	ldw seedy,x 
                                   4184 ; return seedy modulo expr + 1 
      00255C 90 85            [ 2] 4185 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      00255E 65               [ 2] 4186 	divw x,y 
      00255F 93               [ 1] 4187 	ldw x,y 
      002560 5C               [ 1] 4188 	incw x 
      002561                       4189 10$:
      002561 A6 84            [ 1] 4190 	ld a,#TK_INTGR
      002563 81               [ 4] 4191 	ret 
                                   4192 
                                   4193 ;---------------------------------
                                   4194 ; BASIC: WORDS 
                                   4195 ; affiche la listes des mots du
                                   4196 ; dictionnaire ainsi que le nombre
                                   4197 ; de mots.
                                   4198 ;---------------------------------
                           000001  4199 	WLEN=1 ; word length
                           000002  4200 	LLEN=2 ; character sent to console
                           000003  4201 	WCNT=3 ; count words printed 
                           000003  4202 	VSIZE=3 
      002564                       4203 words:
      002564                       4204 	_vars VSIZE
      002564 52 03            [ 2]    1     sub sp,#VSIZE 
      002566 0F 02            [ 1] 4205 	clr (LLEN,sp)
      002568 0F 03            [ 1] 4206 	clr (WCNT,sp)
      00256A 90 AE 2C 4B      [ 2] 4207 	ldw y,#kword_dict+2
      00256E 93               [ 1] 4208 0$:	ldw x,y
      00256F F6               [ 1] 4209 	ld a,(x)
      002570 A4 0F            [ 1] 4210 	and a,#15 
      002572 6B 01            [ 1] 4211 	ld (WLEN,sp),a 
      002574 0C 03            [ 1] 4212 	inc (WCNT,sp)
      002576 5C               [ 1] 4213 1$:	incw x 
      002577 F6               [ 1] 4214 	ld a,(x)
      002578 CD 03 32         [ 4] 4215 	call putc 
      00257B 0C 02            [ 1] 4216 	inc (LLEN,sp)
      00257D 0A 01            [ 1] 4217 	dec (WLEN,sp)
      00257F 26 F5            [ 1] 4218 	jrne 1$
      002581 A6 46            [ 1] 4219 	ld a,#70
      002583 11 02            [ 1] 4220 	cp a,(LLEN,sp)
      002585 2B 09            [ 1] 4221 	jrmi 2$   
      002587 A6 20            [ 1] 4222 	ld a,#SPACE 
      002589 CD 03 32         [ 4] 4223 	call putc 
      00258C 0C 02            [ 1] 4224 	inc (LLEN,sp) 
      00258E 20 07            [ 2] 4225 	jra 3$
      002590 A6 0D            [ 1] 4226 2$: ld a,#CR 
      002592 CD 03 32         [ 4] 4227 	call putc 
      002595 0F 02            [ 1] 4228 	clr (LLEN,sp)
      002597 72 A2 00 02      [ 2] 4229 3$:	subw y,#2 
      00259B 90 FE            [ 2] 4230 	ldw y,(y)
      00259D 26 CF            [ 1] 4231 	jrne 0$ 
      00259F A6 0D            [ 1] 4232 	ld a,#CR 
      0025A1 CD 03 32         [ 4] 4233 	call putc  
      0025A4 5F               [ 1] 4234 	clrw x 
      0025A5 7B 03            [ 1] 4235 	ld a,(WCNT,sp)
      0025A7 97               [ 1] 4236 	ld xl,a 
      0025A8 CD 12 D8         [ 4] 4237 	call print_int 
      0025AB AE 25 B4         [ 2] 4238 	ldw x,#words_count_msg
      0025AE CD 03 8F         [ 4] 4239 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0025B1                       4240 	_drop VSIZE 
      0025B1 5B 03            [ 2]    1     addw sp,#VSIZE 
      0025B3 81               [ 4] 4241 	ret 
      0025B4 20 77 6F 72 64 73 20  4242 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4243 
                                   4244 
                                   4245 ;-----------------------------
                                   4246 ; BASIC: TIMER expr 
                                   4247 ; initialize count down timer 
                                   4248 ;-----------------------------
      0025CA                       4249 set_timer:
      0025CA CD 16 36         [ 4] 4250 	call arg_list
      0025CD A1 01            [ 1] 4251 	cp a,#1 
      0025CF 27 03            [ 1] 4252 	jreq 1$
      0025D1 CC 11 95         [ 2] 4253 	jp syntax_error
      0025D4                       4254 1$: 
      0025D4 85               [ 2] 4255 	popw x 
      0025D5 CF 00 11         [ 2] 4256 	ldw timer,x 
      0025D8 81               [ 4] 4257 	ret 
                                   4258 
                                   4259 ;------------------------------
                                   4260 ; BASIC: TIMEOUT 
                                   4261 ; return state of timer 
                                   4262 ;------------------------------
      0025D9                       4263 timeout:
      0025D9 CE 00 11         [ 2] 4264 	ldw x,timer 
      0025DC                       4265 logical_complement:
      0025DC 53               [ 2] 4266 	cplw x 
      0025DD A3 FF FF         [ 2] 4267 	cpw x,#-1
      0025E0 27 01            [ 1] 4268 	jreq 2$
      0025E2 5F               [ 1] 4269 	clrw x 
      0025E3 A6 84            [ 1] 4270 2$:	ld a,#TK_INTGR
      0025E5 81               [ 4] 4271 	ret 
                                   4272 
                                   4273 ;--------------------------------
                                   4274 ; BASIC NOT(expr) 
                                   4275 ; return logical complement of expr
                                   4276 ;--------------------------------
      0025E6                       4277 func_not:
      0025E6 CD 16 31         [ 4] 4278 	call func_args  
      0025E9 A1 01            [ 1] 4279 	cp a,#1
      0025EB 27 03            [ 1] 4280 	jreq 1$
      0025ED CC 11 95         [ 2] 4281 	jp syntax_error
      0025F0 85               [ 2] 4282 1$:	popw x 
      0025F1 20 E9            [ 2] 4283 	jra logical_complement
                                   4284 
                                   4285 
                                   4286 
                                   4287 ;-----------------------------------
                                   4288 ; BASIC: IWDGEN expr1 
                                   4289 ; enable independant watchdog timer
                                   4290 ; expr1 is delay in multiple of 62.5µsec
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



                                   4291 ; expr1 -> {1..16383}
                                   4292 ;-----------------------------------
      0025F3                       4293 enable_iwdg:
      0025F3 CD 16 36         [ 4] 4294 	call arg_list
      0025F6 A1 01            [ 1] 4295 	cp a,#1 
      0025F8 27 03            [ 1] 4296 	jreq 1$
      0025FA CC 11 95         [ 2] 4297 	jp syntax_error 
      0025FD 85               [ 2] 4298 1$: popw x 
      0025FE 4B 00            [ 1] 4299 	push #0
      002600 35 CC 50 E0      [ 1] 4300 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002604 9E               [ 1] 4301 	ld a,xh 
      002605 A4 3F            [ 1] 4302 	and a,#0x3f
      002607 95               [ 1] 4303 	ld xh,a  
      002608 A3 00 FF         [ 2] 4304 2$:	cpw x,#255
      00260B 23 06            [ 2] 4305 	jrule 3$
      00260D 0C 01            [ 1] 4306 	inc (1,sp)
      00260F 98               [ 1] 4307 	rcf 
      002610 56               [ 2] 4308 	rrcw x 
      002611 20 F5            [ 2] 4309 	jra 2$
      002613 35 55 50 E0      [ 1] 4310 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002617 84               [ 1] 4311 	pop a  
      002618 C7 50 E1         [ 1] 4312 	ld IWDG_PR,a 
      00261B 9F               [ 1] 4313 	ld a,xl
      00261C 4A               [ 1] 4314 	dec a 
      00261D 35 55 50 E0      [ 1] 4315 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002621 C7 50 E2         [ 1] 4316 	ld IWDG_RLR,a 
      002624 35 AA 50 E0      [ 1] 4317 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002628 81               [ 4] 4318 	ret 
                                   4319 
                                   4320 
                                   4321 ;-----------------------------------
                                   4322 ; BASIC: IWDGREF  
                                   4323 ; refresh independant watchdog count down 
                                   4324 ; timer before it reset MCU. 
                                   4325 ;-----------------------------------
      002629                       4326 refresh_iwdg:
      002629 35 AA 50 E0      [ 1] 4327 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      00262D 81               [ 4] 4328 	ret 
                                   4329 
                                   4330 
                                   4331 ;-------------------------------------
                                   4332 ; BASIC: LOG(expr)
                                   4333 ; return logarithm base 2 of expr 
                                   4334 ; this is the position of most significant
                                   4335 ; bit set. 
                                   4336 ; input: 
                                   4337 ; output:
                                   4338 ;   X     log2 
                                   4339 ;   A     TK_INTGR 
                                   4340 ;*********************************
      00262E                       4341 log2:
      00262E CD 16 31         [ 4] 4342 	call func_args 
      002631 A1 01            [ 1] 4343 	cp a,#1 
      002633 27 03            [ 1] 4344 	jreq 1$
      002635 CC 11 95         [ 2] 4345 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      002638 85               [ 2] 4346 1$: popw x 
      002639                       4347 leading_one:
      002639 5D               [ 2] 4348 	tnzw x 
      00263A 27 0A            [ 1] 4349 	jreq 4$
      00263C A6 0F            [ 1] 4350 	ld a,#15 
      00263E 59               [ 2] 4351 2$: rlcw x 
      00263F 25 03            [ 1] 4352     jrc 3$
      002641 4A               [ 1] 4353 	dec a 
      002642 20 FA            [ 2] 4354 	jra 2$
      002644 5F               [ 1] 4355 3$: clrw x 
      002645 97               [ 1] 4356     ld xl,a
      002646 A6 84            [ 1] 4357 4$:	ld a,#TK_INTGR
      002648 81               [ 4] 4358 	ret 
                                   4359 
                                   4360 ;-----------------------------------
                                   4361 ; BASIC: BIT(expr) 
                                   4362 ; expr ->{0..15}
                                   4363 ; return 2^expr 
                                   4364 ; output:
                                   4365 ;    x    2^expr 
                                   4366 ;-----------------------------------
      002649                       4367 bitmask:
      002649 CD 16 31         [ 4] 4368     call func_args 
      00264C A1 01            [ 1] 4369 	cp a,#1
      00264E 27 03            [ 1] 4370 	jreq 1$
      002650 CC 11 95         [ 2] 4371 	jp syntax_error 
      002653 85               [ 2] 4372 1$: popw x 
      002654 9F               [ 1] 4373 	ld a,xl 
      002655 A4 0F            [ 1] 4374 	and a,#15
      002657 5F               [ 1] 4375 	clrw x 
      002658 5C               [ 1] 4376 	incw x 
      002659 4D               [ 1] 4377 2$: tnz a 
      00265A 27 04            [ 1] 4378 	jreq 3$
      00265C 58               [ 2] 4379 	slaw x 
      00265D 4A               [ 1] 4380 	dec a 
      00265E 20 F9            [ 2] 4381 	jra 2$ 
      002660 A6 84            [ 1] 4382 3$: ld a,#TK_INTGR
      002662 81               [ 4] 4383 	ret 
                                   4384 
                                   4385 ;------------------------------
                                   4386 ; BASIC: INVERT(expr)
                                   4387 ; 1's complement 
                                   4388 ;--------------------------------
      002663                       4389 invert:
      002663 CD 16 31         [ 4] 4390 	call func_args
      002666 A1 01            [ 1] 4391 	cp a,#1 
      002668 27 03            [ 1] 4392 	jreq 1$
      00266A CC 11 95         [ 2] 4393 	jp syntax_error
      00266D 85               [ 2] 4394 1$: popw x  
      00266E 53               [ 2] 4395 	cplw x 
      00266F A6 84            [ 1] 4396 	ld a,#TK_INTGR 
      002671 81               [ 4] 4397 	ret 
                                   4398 
                                   4399 ;------------------------------
                                   4400 ; BASIC: DO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                                   4401 ; initiate a DO ... UNTIL loop 
                                   4402 ;------------------------------
                           000003  4403 	DOLP_ADR=3 
                           000005  4404 	DOLP_INW=5
                           000004  4405 	VSIZE=4 
      002672                       4406 do_loop:
      002672 85               [ 2] 4407 	popw x 
      002673                       4408 	_vars VSIZE 
      002673 52 04            [ 2]    1     sub sp,#VSIZE 
      002675 89               [ 2] 4409 	pushw x 
      002676 90 CE 00 04      [ 2] 4410 	ldw y,basicptr 
      00267A 17 03            [ 2] 4411 	ldw (DOLP_ADR,sp),y
      00267C 90 CE 00 00      [ 2] 4412 	ldw y,in.w 
      002680 17 05            [ 2] 4413 	ldw (DOLP_INW,sp),y
      002682 72 5C 00 1E      [ 1] 4414 	inc loop_depth 
      002686 81               [ 4] 4415 	ret 
                                   4416 
                                   4417 ;--------------------------------
                                   4418 ; BASIC: UNTIL expr 
                                   4419 ; loop if exprssion is false 
                                   4420 ; else terminate loop
                                   4421 ;--------------------------------
      002687                       4422 until: 
      002687 72 5D 00 1E      [ 1] 4423 	tnz loop_depth 
      00268B 26 03            [ 1] 4424 	jrne 1$ 
      00268D CC 11 95         [ 2] 4425 	jp syntax_error 
      002690                       4426 1$: 
      002690 CD 17 7E         [ 4] 4427 	call relation 
      002693 A1 84            [ 1] 4428 	cp a,#TK_INTGR
      002695 27 03            [ 1] 4429 	jreq 2$
      002697 CC 11 95         [ 2] 4430 	jp syntax_error
      00269A                       4431 2$: 
      00269A 5D               [ 2] 4432 	tnzw x 
      00269B 26 10            [ 1] 4433 	jrne 9$
      00269D 1E 03            [ 2] 4434 	ldw x,(DOLP_ADR,sp)
      00269F CF 00 04         [ 2] 4435 	ldw basicptr,x 
      0026A2 E6 02            [ 1] 4436 	ld a,(2,x)
      0026A4 C7 00 03         [ 1] 4437 	ld count,a 
      0026A7 1E 05            [ 2] 4438 	ldw x,(DOLP_INW,sp)
      0026A9 CF 00 00         [ 2] 4439 	ldw in.w,x 
      0026AC 81               [ 4] 4440 	ret 
      0026AD                       4441 9$:	; remove loop data from stack  
      0026AD 85               [ 2] 4442 	popw x
      0026AE                       4443 	_drop VSIZE
      0026AE 5B 04            [ 2]    1     addw sp,#VSIZE 
      0026B0 72 5A 00 1E      [ 1] 4444 	dec loop_depth 
      0026B4 FC               [ 2] 4445 	jp (x)
                                   4446 
                                   4447 ;--------------------------
                                   4448 ; BASIC: PRTA...PRTI  
                                   4449 ;  return constant value 
                                   4450 ;  PORT  offset in GPIO
                                   4451 ;  array
                                   4452 ;---------------------------
      0026B5                       4453 const_porta:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0026B5 AE 00 00         [ 2] 4454 	ldw x,#0
      0026B8 A6 84            [ 1] 4455 	ld a,#TK_INTGR 
      0026BA 81               [ 4] 4456 	ret 
      0026BB                       4457 const_portb:
      0026BB AE 00 01         [ 2] 4458 	ldw x,#1
      0026BE A6 84            [ 1] 4459 	ld a,#TK_INTGR 
      0026C0 81               [ 4] 4460 	ret 
      0026C1                       4461 const_portc:
      0026C1 AE 00 02         [ 2] 4462 	ldw x,#2
      0026C4 A6 84            [ 1] 4463 	ld a,#TK_INTGR 
      0026C6 81               [ 4] 4464 	ret 
      0026C7                       4465 const_portd:
      0026C7 AE 00 03         [ 2] 4466 	ldw x,#3
      0026CA A6 84            [ 1] 4467 	ld a,#TK_INTGR 
      0026CC 81               [ 4] 4468 	ret 
      0026CD                       4469 const_porte:
      0026CD AE 00 04         [ 2] 4470 	ldw x,#4
      0026D0 A6 84            [ 1] 4471 	ld a,#TK_INTGR 
      0026D2 81               [ 4] 4472 	ret 
      0026D3                       4473 const_portf:
      0026D3 AE 00 05         [ 2] 4474 	ldw x,#5
      0026D6 A6 84            [ 1] 4475 	ld a,#TK_INTGR 
      0026D8 81               [ 4] 4476 	ret 
      0026D9                       4477 const_portg:
      0026D9 AE 00 06         [ 2] 4478 	ldw x,#6
      0026DC A6 84            [ 1] 4479 	ld a,#TK_INTGR 
      0026DE 81               [ 4] 4480 	ret 
      0026DF                       4481 const_porth:
      0026DF AE 00 07         [ 2] 4482 	ldw x,#7
      0026E2 A6 84            [ 1] 4483 	ld a,#TK_INTGR 
      0026E4 81               [ 4] 4484 	ret 
      0026E5                       4485 const_porti:
      0026E5 AE 00 08         [ 2] 4486 	ldw x,#8
      0026E8 A6 84            [ 1] 4487 	ld a,#TK_INTGR 
      0026EA 81               [ 4] 4488 	ret 
                                   4489 
                                   4490 ;-------------------------------
                                   4491 ; following return constant 
                                   4492 ; related to GPIO register offset 
                                   4493 ;---------------------------------
      0026EB                       4494 const_odr:
      0026EB A6 84            [ 1] 4495 	ld a,#TK_INTGR 
      0026ED AE 00 00         [ 2] 4496 	ldw x,#GPIO_ODR
      0026F0 81               [ 4] 4497 	ret 
      0026F1                       4498 const_idr:
      0026F1 A6 84            [ 1] 4499 	ld a,#TK_INTGR 
      0026F3 AE 00 01         [ 2] 4500 	ldw x,#GPIO_IDR
      0026F6 81               [ 4] 4501 	ret 
      0026F7                       4502 const_ddr:
      0026F7 A6 84            [ 1] 4503 	ld a,#TK_INTGR 
      0026F9 AE 00 02         [ 2] 4504 	ldw x,#GPIO_DDR
      0026FC 81               [ 4] 4505 	ret 
      0026FD                       4506 const_cr1:
      0026FD A6 84            [ 1] 4507 	ld a,#TK_INTGR 
      0026FF AE 00 03         [ 2] 4508 	ldw x,#GPIO_CR1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      002702 81               [ 4] 4509 	ret 
      002703                       4510 const_cr2:
      002703 A6 84            [ 1] 4511 	ld a,#TK_INTGR 
      002705 AE 00 04         [ 2] 4512 	ldw x,#GPIO_CR2
      002708 81               [ 4] 4513 	ret 
                                   4514 ;-------------------------
                                   4515 ; BASIC: POUT 
                                   4516 ;  constant for port mode
                                   4517 ;  used by PMODE 
                                   4518 ;  to set pin as output
                                   4519 ;------------------------
      002709                       4520 const_output:
      002709 A6 84            [ 1] 4521 	ld a,#TK_INTGR 
      00270B AE 00 01         [ 2] 4522 	ldw x,#OUTP
      00270E 81               [ 4] 4523 	ret 
                                   4524 
                                   4525 ;-------------------------
                                   4526 ; BASIC: PINP 
                                   4527 ;  constant for port mode
                                   4528 ;  used by PMODE 
                                   4529 ;  to set pin as input
                                   4530 ;------------------------
      00270F                       4531 const_input:
      00270F A6 84            [ 1] 4532 	ld a,#TK_INTGR 
      002711 AE 00 00         [ 2] 4533 	ldw x,#INP 
      002714 81               [ 4] 4534 	ret 
                                   4535 	
                                   4536 ;-----------------------
                                   4537 ; memory area constants
                                   4538 ;-----------------------
      002715                       4539 const_eeprom_base:
      002715 A6 84            [ 1] 4540 	ld a,#TK_INTGR 
      002717 AE 40 00         [ 2] 4541 	ldw x,#EEPROM_BASE 
      00271A 81               [ 4] 4542 	ret 
                                   4543 
                                   4544 ;---------------------------
                                   4545 ; BASIC: DATA 
                                   4546 ; when the interpreter find 
                                   4547 ; a DATA line it skip it.
                                   4548 ;---------------------------
      00271B                       4549 data:
      00271B 55 00 03 00 01   [ 1] 4550 	mov in,count 
      002720 81               [ 4] 4551 	ret 
                                   4552 
                                   4553 ;------------------------------
                                   4554 ; check if it is a DATA line 
                                   4555 ; input: 
                                   4556 ;    X    line address 
                                   4557 ; output:
                                   4558 ;    Z    set if DATA line 
                                   4559 ;----------------------------
      002721                       4560 is_data_line:
      002721 EE 04            [ 2] 4561 	ldw x,(4,x)
      002723 DE 2C 51         [ 2] 4562 	ldw x,(code_addr,x)
      002726 A3 27 1B         [ 2] 4563 	cpw x,#data 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      002729 81               [ 4] 4564 	ret 
                                   4565 
                                   4566 ;---------------------------
                                   4567 ; set DATA pointer at line# 
                                   4568 ; specified by X 
                                   4569 ;---------------------------
      00272A                       4570 data_line:
      00272A 4F               [ 1] 4571     clr a 
      00272B CD 06 77         [ 4] 4572 	call search_lineno
      00272E 5D               [ 2] 4573 	tnzw x 
      00272F 26 05            [ 1] 4574 	jrne 3$
      002731 A6 05            [ 1] 4575 2$:	ld a,#ERR_NO_LINE 
      002733 CC 11 97         [ 2] 4576 	jp tb_error
      002736                       4577 3$: ; check if valid data line 
      002736 90 93            [ 1] 4578     ldw y,x 
      002738 CD 27 21         [ 4] 4579 	call is_data_line 
      00273B 26 F4            [ 1] 4580 	jrne 2$ 
      00273D                       4581 set_data_ptr: 	
      00273D 90 CF 00 06      [ 2] 4582 	ldw data_ptr,y
      002741 90 E6 02         [ 1] 4583 	ld a,(2,y)
      002744 C7 00 09         [ 1] 4584 	ld data_len,a 
      002747 35 06 00 08      [ 1] 4585 	mov data_ofs,#FIRST_DATA_ITEM 
      00274B 81               [ 4] 4586 	ret
                                   4587 
                                   4588 ;---------------------------------
                                   4589 ; BASIC: RESTORE [line#]
                                   4590 ; set data_ptr to first data line
                                   4591 ; if no DATA found pointer set to
                                   4592 ; zero.
                                   4593 ; if a line# is given as argument 
                                   4594 ; a data line with that number 
                                   4595 ; is searched and the data pointer 
                                   4596 ; is set to it. If there is no 
                                   4597 ; data line with that number 
                                   4598 ; the program is interrupted. 
                                   4599 ;---------------------------------
      00274C                       4600 restore:
      00274C 72 5F 00 06      [ 1] 4601 	clr data_ptr 
      002750 72 5F 00 07      [ 1] 4602 	clr data_ptr+1
      002754 72 5F 00 08      [ 1] 4603 	clr data_ofs 
      002758 72 5F 00 09      [ 1] 4604 	clr data_len
      00275C CD 12 88         [ 4] 4605 	call next_token 
      00275F A1 84            [ 1] 4606 	cp a,#TK_INTGR
      002761 27 C7            [ 1] 4607 	jreq data_line
      002763                       4608 	_unget_token 
      002763 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002768 CE 00 1A         [ 2] 4609 	ldw x,txtbgn
                                   4610 ; search first DATA line 
      00276B                       4611 data_search_loop: 	
      00276B C3 00 1C         [ 2] 4612 	cpw x,txtend
      00276E 24 17            [ 1] 4613 	jruge restore_error 
      002770 90 93            [ 1] 4614 	ldw y,x 
      002772 CD 27 21         [ 4] 4615 	call is_data_line 
      002775 27 C6            [ 1] 4616 	jreq set_data_ptr
      002777                       4617 try_next_line: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      002777 93               [ 1] 4618 	ldw x,y 
      002778 E6 02            [ 1] 4619 	ld a,(2,x)
      00277A C7 00 0E         [ 1] 4620 	ld acc8,a 
      00277D 72 5F 00 0D      [ 1] 4621 	clr acc16 
      002781 72 BB 00 0D      [ 2] 4622 	addw x,acc16 
      002785 20 E4            [ 2] 4623 	jra data_search_loop
      002787                       4624 restore_error:	
      002787 A6 0C            [ 1] 4625     ld a,#ERR_NO_DATA 
      002789 CC 11 97         [ 2] 4626 	jp tb_error 
                                   4627 
                                   4628 
                                   4629 ;---------------------------------
                                   4630 ; BASIC: READ 
                                   4631 ; return next data item | 0 
                                   4632 ;---------------------------------
                           000001  4633 	CTX_BPTR=1 
                           000003  4634 	CTX_IN=3 
                           000004  4635 	CTX_COUNT=4 
                           000005  4636 	XSAVE=5
                           000006  4637 	VSIZE=6
      00278C                       4638 read:
      00278C                       4639 	_vars  VSIZE 
      00278C 52 06            [ 2]    1     sub sp,#VSIZE 
      00278E                       4640 read01:	
      00278E C6 00 08         [ 1] 4641 	ld a,data_ofs
      002791 C1 00 09         [ 1] 4642 	cp a,data_len 
      002794 27 37            [ 1] 4643 	jreq 2$ ; end of line  
      002796 CD 1B 6C         [ 4] 4644 	call save_context
      002799 CE 00 06         [ 2] 4645 	ldw x,data_ptr 
      00279C CF 00 04         [ 2] 4646 	ldw basicptr,x 
      00279F 55 00 08 00 01   [ 1] 4647 	mov in,data_ofs 
      0027A4 55 00 09 00 03   [ 1] 4648 	mov count,data_len  
      0027A9 CD 17 35         [ 4] 4649 	call expression 
      0027AC A1 84            [ 1] 4650 	cp a,#TK_INTGR 
      0027AE 27 03            [ 1] 4651 	jreq 1$ 
      0027B0 CC 11 95         [ 2] 4652 	jp syntax_error 
      0027B3                       4653 1$:
      0027B3 1F 05            [ 2] 4654 	ldw (XSAVE,SP),x
      0027B5 CD 12 88         [ 4] 4655 	call next_token ; skip comma
      0027B8 CE 00 04         [ 2] 4656 	ldw x,basicptr 
      0027BB CF 00 06         [ 2] 4657 	ldw data_ptr,x 
      0027BE 55 00 01 00 08   [ 1] 4658 	mov data_ofs,in 
      0027C3 CD 1B 7C         [ 4] 4659 	call rest_context
      0027C6 1E 05            [ 2] 4660 	ldw x,(XSAVE,sp)
      0027C8 A6 84            [ 1] 4661 	ld a,#TK_INTGR
      0027CA                       4662 	_drop VSIZE 
      0027CA 5B 06            [ 2]    1     addw sp,#VSIZE 
      0027CC 81               [ 4] 4663 	ret 
      0027CD                       4664 2$: ; end of line reached 
      0027CD 90 CE 00 06      [ 2] 4665 	ldw y, data_ptr 
      0027D1 72 5F 00 06      [ 1] 4666 	clr data_ptr
      0027D5 72 5F 00 07      [ 1] 4667 	clr data_ptr+1   
      0027D9 72 5F 00 08      [ 1] 4668 	clr data_ofs 
      0027DD 72 5F 00 09      [ 1] 4669 	clr data_len 
      0027E1 CD 27 77         [ 4] 4670 	call try_next_line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      0027E4 20 A8            [ 2] 4671 	jra read01
                                   4672 
                                   4673 
                                   4674 ;---------------------------------
                                   4675 ; BASIC: SPIEN clkdiv, 0|1  
                                   4676 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4677 ; if clkdiv==-1 disable SPI
                                   4678 ; 0|1 -> disable|enable  
                                   4679 ;--------------------------------- 
                           000005  4680 SPI_CS_BIT=5
      0027E6                       4681 spi_enable:
      0027E6 CD 16 36         [ 4] 4682 	call arg_list 
      0027E9 A1 02            [ 1] 4683 	cp a,#2
      0027EB 27 03            [ 1] 4684 	jreq 1$
      0027ED CC 11 95         [ 2] 4685 	jp syntax_error 
      0027F0                       4686 1$: 
      0027F0 72 12 50 C7      [ 1] 4687 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      0027F4 85               [ 2] 4688 	popw x  
      0027F5 5D               [ 2] 4689 	tnzw x 
      0027F6 27 21            [ 1] 4690 	jreq spi_disable 
      0027F8 85               [ 2] 4691 	popw x 
      0027F9 A6 08            [ 1] 4692 	ld a,#(1<<SPI_CR1_BR)
      0027FB 42               [ 4] 4693 	mul x,a 
      0027FC 9F               [ 1] 4694 	ld a,xl 
      0027FD C7 52 00         [ 1] 4695 	ld SPI_CR1,a 
                                   4696 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002800 72 1A 50 14      [ 1] 4697 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002804 72 1A 50 16      [ 1] 4698 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4699 ; configure SPI as master mode 0.	
      002808 72 14 52 00      [ 1] 4700 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4701 ; ~CS line controlled by sofware 	
      00280C 72 12 52 01      [ 1] 4702 	bset SPI_CR2,#SPI_CR2_SSM 
      002810 72 10 52 01      [ 1] 4703     bset SPI_CR2,#SPI_CR2_SSI 
                                   4704 ; enable SPI
      002814 72 1C 52 00      [ 1] 4705 	bset SPI_CR1,#SPI_CR1_SPE 	
      002818 81               [ 4] 4706 	ret 
      002819                       4707 spi_disable:
      002819                       4708 	_drop #2; throw first argument.
      002819 5B 02            [ 2]    1     addw sp,##2 
                                   4709 ; wait spi idle 
      00281B A6 82            [ 1] 4710 1$:	ld a,#0x82 
      00281D C4 52 03         [ 1] 4711 	and a,SPI_SR
      002820 A1 02            [ 1] 4712 	cp a,#2 
      002822 26 F7            [ 1] 4713 	jrne 1$
      002824 72 1D 52 00      [ 1] 4714 	bres SPI_CR1,#SPI_CR1_SPE
      002828 72 13 50 C7      [ 1] 4715 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      00282C 72 1B 50 16      [ 1] 4716 	bres PE_DDR,#SPI_CS_BIT 
      002830 81               [ 4] 4717 	ret 
                                   4718 
      002831                       4719 spi_clear_error:
      002831 A6 78            [ 1] 4720 	ld a,#0x78 
      002833 C5 52 03         [ 1] 4721 	bcp a,SPI_SR 
      002836 27 04            [ 1] 4722 	jreq 1$
      002838 72 5F 52 03      [ 1] 4723 	clr SPI_SR 
      00283C 81               [ 4] 4724 1$: ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



                                   4725 
      00283D                       4726 spi_send_byte:
      00283D 88               [ 1] 4727 	push a 
      00283E CD 28 31         [ 4] 4728 	call spi_clear_error
      002841 84               [ 1] 4729 	pop a 
      002842 72 03 52 03 FB   [ 2] 4730 	btjf SPI_SR,#SPI_SR_TXE,.
      002847 C7 52 04         [ 1] 4731 	ld SPI_DR,a
      00284A 72 01 52 03 FB   [ 2] 4732 	btjf SPI_SR,#SPI_SR_RXNE,.  
      00284F C6 52 04         [ 1] 4733 	ld a,SPI_DR 
      002852 81               [ 4] 4734 	ret 
                                   4735 
      002853                       4736 spi_rcv_byte:
      002853 A6 FF            [ 1] 4737 	ld a,#255
      002855 72 01 52 03 E3   [ 2] 4738 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      00285A C6 52 04         [ 1] 4739 	ld a,SPI_DR 
      00285D 81               [ 4] 4740 	ret
                                   4741 
                                   4742 ;------------------------------
                                   4743 ; BASIC: SPIWR byte [,byte]
                                   4744 ; write 1 or more byte
                                   4745 ;------------------------------
      00285E                       4746 spi_write:
      00285E CD 17 35         [ 4] 4747 	call expression
      002861 A1 84            [ 1] 4748 	cp a,#TK_INTGR 
      002863 27 03            [ 1] 4749 	jreq 1$
      002865 CC 11 95         [ 2] 4750 	jp syntax_error 
      002868                       4751 1$:	
      002868 9F               [ 1] 4752 	ld a,xl 
      002869 CD 28 3D         [ 4] 4753 	call spi_send_byte 
      00286C CD 12 88         [ 4] 4754 	call next_token 
      00286F A1 09            [ 1] 4755 	cp a,#TK_COMMA 
      002871 26 02            [ 1] 4756 	jrne 2$ 
      002873 20 E9            [ 2] 4757 	jra spi_write 
      002875 4D               [ 1] 4758 2$:	tnz a 
      002876 27 05            [ 1] 4759 	jreq 3$
      002878                       4760 	_unget_token  
      002878 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00287D 81               [ 4] 4761 3$:	ret 
                                   4762 
                                   4763 
                                   4764 ;-------------------------------
                                   4765 ; BASIC: SPIRD 	
                                   4766 ; read one byte from SPI 
                                   4767 ;-------------------------------
      00287E                       4768 spi_read:
      00287E CD 28 53         [ 4] 4769 	call spi_rcv_byte 
      002881 5F               [ 1] 4770 	clrw x 
      002882 97               [ 1] 4771 	ld xl,a 
      002883 A6 84            [ 1] 4772 	ld a,#TK_INTGR 
      002885 81               [ 4] 4773 	ret 
                                   4774 
                                   4775 ;------------------------------
                                   4776 ; BASIC: SPISEL 0|1 
                                   4777 ; set state of ~CS line
                                   4778 ; 0|1 deselect|select  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



                                   4779 ;------------------------------
      002886                       4780 spi_select:
      002886 CD 12 88         [ 4] 4781 	call next_token 
      002889 A1 84            [ 1] 4782 	cp a,#TK_INTGR 
      00288B 27 03            [ 1] 4783 	jreq 1$
      00288D CC 11 95         [ 2] 4784 	jp syntax_error 
      002890 5D               [ 2] 4785 1$: tnzw x  
      002891 27 05            [ 1] 4786 	jreq cs_high 
      002893 72 1B 50 14      [ 1] 4787 	bres PE_ODR,#SPI_CS_BIT
      002897 81               [ 4] 4788 	ret 
      002898                       4789 cs_high: 
      002898 72 1A 50 14      [ 1] 4790 	bset PE_ODR,#SPI_CS_BIT
      00289C 81               [ 4] 4791 	ret 
                                   4792 
                                   4793 ;-------------------------------
                                   4794 ; BASIC: PAD 
                                   4795 ; Return pad buffer address.
                                   4796 ;------------------------------
      00289D                       4797 pad_ref:
      00289D AE 16 E0         [ 2] 4798 	ldw x,#pad 
      0028A0 B6 84            [ 1] 4799 	ld a,TK_INTGR
      0028A2 81               [ 4] 4800 	ret 
                                   4801 
                                   4802 
                                   4803 ;------------------------------
                                   4804 ;      dictionary 
                                   4805 ; format:
                                   4806 ;   link:   2 bytes 
                                   4807 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   4808 ;   cmd_name: 16 byte max 
                                   4809 ;   cmd_index: 2 bytes 
                                   4810 ;------------------------------
                                   4811 	.macro _dict_entry len,name,cmd_idx 
                                   4812 	.word LINK 
                                   4813 	LINK=.
                                   4814 name:
                                   4815 	.byte len 	
                                   4816 	.ascii "name"
                                   4817 	.word cmd_idx 
                                   4818 	.endm 
                                   4819 
                           000000  4820 	LINK=0
                                   4821 ; respect alphabetic order for BASIC names from Z-A
                                   4822 ; this sort order is for a cleaner WORDS cmd output. 	
      0028A3                       4823 kword_end:
      0028A3                       4824 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      0028A3 00 00                    1 	.word LINK 
                           0028A5     2 	LINK=.
      0028A5                          3 XOR:
      0028A5 43                       4 	.byte 3+F_IFUNC 	
      0028A6 58 4F 52                 5 	.ascii "XOR"
      0028A9 00 C0                    6 	.word XOR_IDX 
      0028AB                       4825 	_dict_entry,5,WRITE,WRITE_IDX;write  
      0028AB 28 A5                    1 	.word LINK 
                           0028AD     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      0028AD                          3 WRITE:
      0028AD 05                       4 	.byte 5 	
      0028AE 57 52 49 54 45           5 	.ascii "WRITE"
      0028B3 00 BE                    6 	.word WRITE_IDX 
      0028B5                       4826 	_dict_entry,5,WORDS,WORDS_IDX;words 
      0028B5 28 AD                    1 	.word LINK 
                           0028B7     2 	LINK=.
      0028B7                          3 WORDS:
      0028B7 05                       4 	.byte 5 	
      0028B8 57 4F 52 44 53           5 	.ascii "WORDS"
      0028BD 00 BC                    6 	.word WORDS_IDX 
      0028BF                       4827 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      0028BF 28 B7                    1 	.word LINK 
                           0028C1     2 	LINK=.
      0028C1                          3 WAIT:
      0028C1 04                       4 	.byte 4 	
      0028C2 57 41 49 54              5 	.ascii "WAIT"
      0028C6 00 BA                    6 	.word WAIT_IDX 
      0028C8                       4828 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      0028C8 28 C1                    1 	.word LINK 
                           0028CA     2 	LINK=.
      0028CA                          3 USR:
      0028CA 43                       4 	.byte 3+F_IFUNC 	
      0028CB 55 53 52                 5 	.ascii "USR"
      0028CE 00 B8                    6 	.word USR_IDX 
      0028D0                       4829 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      0028D0 28 CA                    1 	.word LINK 
                           0028D2     2 	LINK=.
      0028D2                          3 UNTIL:
      0028D2 05                       4 	.byte 5 	
      0028D3 55 4E 54 49 4C           5 	.ascii "UNTIL"
      0028D8 00 B6                    6 	.word UNTIL_IDX 
      0028DA                       4830 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      0028DA 28 D2                    1 	.word LINK 
                           0028DC     2 	LINK=.
      0028DC                          3 UFLASH:
      0028DC 46                       4 	.byte 6+F_IFUNC 	
      0028DD 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      0028E3 00 B4                    6 	.word UFLASH_IDX 
      0028E5                       4831 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      0028E5 28 DC                    1 	.word LINK 
                           0028E7     2 	LINK=.
      0028E7                          3 UBOUND:
      0028E7 46                       4 	.byte 6+F_IFUNC 	
      0028E8 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      0028EE 00 B2                    6 	.word UBOUND_IDX 
      0028F0                       4832 	_dict_entry,4,TONE,TONE_IDX;tone  
      0028F0 28 E7                    1 	.word LINK 
                           0028F2     2 	LINK=.
      0028F2                          3 TONE:
      0028F2 04                       4 	.byte 4 	
      0028F3 54 4F 4E 45              5 	.ascii "TONE"
      0028F7 00 B0                    6 	.word TONE_IDX 
      0028F9                       4833 	_dict_entry,2,TO,TO_IDX;to
      0028F9 28 F2                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



                           0028FB     2 	LINK=.
      0028FB                          3 TO:
      0028FB 02                       4 	.byte 2 	
      0028FC 54 4F                    5 	.ascii "TO"
      0028FE 00 AE                    6 	.word TO_IDX 
      002900                       4834 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      002900 28 FB                    1 	.word LINK 
                           002902     2 	LINK=.
      002902                          3 TIMER:
      002902 05                       4 	.byte 5 	
      002903 54 49 4D 45 52           5 	.ascii "TIMER"
      002908 00 AA                    6 	.word TIMER_IDX 
      00290A                       4835 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      00290A 29 02                    1 	.word LINK 
                           00290C     2 	LINK=.
      00290C                          3 TIMEOUT:
      00290C 47                       4 	.byte 7+F_IFUNC 	
      00290D 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002914 00 AC                    6 	.word TMROUT_IDX 
      002916                       4836 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      002916 29 0C                    1 	.word LINK 
                           002918     2 	LINK=.
      002918                          3 TICKS:
      002918 45                       4 	.byte 5+F_IFUNC 	
      002919 54 49 43 4B 53           5 	.ascii "TICKS"
      00291E 00 A8                    6 	.word TICKS_IDX 
      002920                       4837 	_dict_entry,4,STOP,STOP_IDX;stop 
      002920 29 18                    1 	.word LINK 
                           002922     2 	LINK=.
      002922                          3 STOP:
      002922 04                       4 	.byte 4 	
      002923 53 54 4F 50              5 	.ascii "STOP"
      002927 00 A6                    6 	.word STOP_IDX 
      002929                       4838 	_dict_entry,4,STEP,STEP_IDX;step 
      002929 29 22                    1 	.word LINK 
                           00292B     2 	LINK=.
      00292B                          3 STEP:
      00292B 04                       4 	.byte 4 	
      00292C 53 54 45 50              5 	.ascii "STEP"
      002930 00 A4                    6 	.word STEP_IDX 
      002932                       4839 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      002932 29 2B                    1 	.word LINK 
                           002934     2 	LINK=.
      002934                          3 SPIWR:
      002934 05                       4 	.byte 5 	
      002935 53 50 49 57 52           5 	.ascii "SPIWR"
      00293A 00 A2                    6 	.word SPIWR_IDX 
      00293C                       4840 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      00293C 29 34                    1 	.word LINK 
                           00293E     2 	LINK=.
      00293E                          3 SPISEL:
      00293E 06                       4 	.byte 6 	
      00293F 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      002945 00 A0                    6 	.word SPISEL_IDX 
      002947                       4841 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002947 29 3E                    1 	.word LINK 
                           002949     2 	LINK=.
      002949                          3 SPIRD:
      002949 45                       4 	.byte 5+F_IFUNC 	
      00294A 53 50 49 52 44           5 	.ascii "SPIRD"
      00294F 00 9C                    6 	.word SPIRD_IDX 
      002951                       4842 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      002951 29 49                    1 	.word LINK 
                           002953     2 	LINK=.
      002953                          3 SPIEN:
      002953 05                       4 	.byte 5 	
      002954 53 50 49 45 4E           5 	.ascii "SPIEN"
      002959 00 9E                    6 	.word SPIEN_IDX 
      00295B                       4843 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      00295B 29 53                    1 	.word LINK 
                           00295D     2 	LINK=.
      00295D                          3 SLEEP:
      00295D 05                       4 	.byte 5 	
      00295E 53 4C 45 45 50           5 	.ascii "SLEEP"
      002963 00 9A                    6 	.word SLEEP_IDX 
      002965                       4844     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      002965 29 5D                    1 	.word LINK 
                           002967     2 	LINK=.
      002967                          3 SIZE:
      002967 04                       4 	.byte 4 	
      002968 53 49 5A 45              5 	.ascii "SIZE"
      00296C 00 C2                    6 	.word SIZE_IDX 
      00296E                       4845 	_dict_entry,4,SHOW,SHOW_IDX;show 
      00296E 29 67                    1 	.word LINK 
                           002970     2 	LINK=.
      002970                          3 SHOW:
      002970 04                       4 	.byte 4 	
      002971 53 48 4F 57              5 	.ascii "SHOW"
      002975 00 96                    6 	.word SHOW_IDX 
      002977                       4846 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      002977 29 70                    1 	.word LINK 
                           002979     2 	LINK=.
      002979                          3 SAVE:
      002979 04                       4 	.byte 4 	
      00297A 53 41 56 45              5 	.ascii "SAVE"
      00297E 00 34                    6 	.word SAVE_IDX 
      002980                       4847 	_dict_entry 3,RUN,RUN_IDX;run
      002980 29 79                    1 	.word LINK 
                           002982     2 	LINK=.
      002982                          3 RUN:
      002982 03                       4 	.byte 3 	
      002983 52 55 4E                 5 	.ascii "RUN"
      002986 00 94                    6 	.word RUN_IDX 
      002988                       4848 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      002988 29 82                    1 	.word LINK 
                           00298A     2 	LINK=.
      00298A                          3 RSHIFT:
      00298A 46                       4 	.byte 6+F_IFUNC 	
      00298B 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      002991 00 92                    6 	.word RSHIFT_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002993                       4849 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      002993 29 8A                    1 	.word LINK 
                           002995     2 	LINK=.
      002995                          3 RND:
      002995 43                       4 	.byte 3+F_IFUNC 	
      002996 52 4E 44                 5 	.ascii "RND"
      002999 00 90                    6 	.word RND_IDX 
      00299B                       4850 	_dict_entry,6,RETURN,RET_IDX;return 
      00299B 29 95                    1 	.word LINK 
                           00299D     2 	LINK=.
      00299D                          3 RETURN:
      00299D 06                       4 	.byte 6 	
      00299E 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0029A4 00 8E                    6 	.word RET_IDX 
      0029A6                       4851 	_dict_entry,7,RESTORE,REST_IDX;restore 
      0029A6 29 9D                    1 	.word LINK 
                           0029A8     2 	LINK=.
      0029A8                          3 RESTORE:
      0029A8 07                       4 	.byte 7 	
      0029A9 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0029B0 00 8C                    6 	.word REST_IDX 
      0029B2                       4852 	_dict_entry 6,REMARK,REM_IDX;remark 
      0029B2 29 A8                    1 	.word LINK 
                           0029B4     2 	LINK=.
      0029B4                          3 REMARK:
      0029B4 06                       4 	.byte 6 	
      0029B5 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      0029BB 00 8A                    6 	.word REM_IDX 
      0029BD                       4853 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      0029BD 29 B4                    1 	.word LINK 
                           0029BF     2 	LINK=.
      0029BF                          3 REBOOT:
      0029BF 06                       4 	.byte 6 	
      0029C0 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0029C6 00 88                    6 	.word RBT_IDX 
      0029C8                       4854 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      0029C8 29 BF                    1 	.word LINK 
                           0029CA     2 	LINK=.
      0029CA                          3 READ:
      0029CA 44                       4 	.byte 4+F_IFUNC 	
      0029CB 52 45 41 44              5 	.ascii "READ"
      0029CF 00 86                    6 	.word READ_IDX 
      0029D1                       4855 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      0029D1 29 CA                    1 	.word LINK 
                           0029D3     2 	LINK=.
      0029D3                          3 QKEY:
      0029D3 44                       4 	.byte 4+F_IFUNC 	
      0029D4 51 4B 45 59              5 	.ascii "QKEY"
      0029D8 00 84                    6 	.word QKEY_IDX 
      0029DA                       4856 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      0029DA 29 D3                    1 	.word LINK 
                           0029DC     2 	LINK=.
      0029DC                          3 PRTI:
      0029DC 44                       4 	.byte 4+F_IFUNC 	
      0029DD 50 52 54 49              5 	.ascii "PRTI"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      0029E1 00 82                    6 	.word PRTI_IDX 
      0029E3                       4857 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      0029E3 29 DC                    1 	.word LINK 
                           0029E5     2 	LINK=.
      0029E5                          3 PRTH:
      0029E5 44                       4 	.byte 4+F_IFUNC 	
      0029E6 50 52 54 48              5 	.ascii "PRTH"
      0029EA 00 80                    6 	.word PRTH_IDX 
      0029EC                       4858 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      0029EC 29 E5                    1 	.word LINK 
                           0029EE     2 	LINK=.
      0029EE                          3 PRTG:
      0029EE 44                       4 	.byte 4+F_IFUNC 	
      0029EF 50 52 54 47              5 	.ascii "PRTG"
      0029F3 00 7E                    6 	.word PRTG_IDX 
      0029F5                       4859 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      0029F5 29 EE                    1 	.word LINK 
                           0029F7     2 	LINK=.
      0029F7                          3 PRTF:
      0029F7 44                       4 	.byte 4+F_IFUNC 	
      0029F8 50 52 54 46              5 	.ascii "PRTF"
      0029FC 00 7C                    6 	.word PRTF_IDX 
      0029FE                       4860 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      0029FE 29 F7                    1 	.word LINK 
                           002A00     2 	LINK=.
      002A00                          3 PRTE:
      002A00 44                       4 	.byte 4+F_IFUNC 	
      002A01 50 52 54 45              5 	.ascii "PRTE"
      002A05 00 7A                    6 	.word PRTE_IDX 
      002A07                       4861 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      002A07 2A 00                    1 	.word LINK 
                           002A09     2 	LINK=.
      002A09                          3 PRTD:
      002A09 44                       4 	.byte 4+F_IFUNC 	
      002A0A 50 52 54 44              5 	.ascii "PRTD"
      002A0E 00 78                    6 	.word PRTD_IDX 
      002A10                       4862 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      002A10 2A 09                    1 	.word LINK 
                           002A12     2 	LINK=.
      002A12                          3 PRTC:
      002A12 44                       4 	.byte 4+F_IFUNC 	
      002A13 50 52 54 43              5 	.ascii "PRTC"
      002A17 00 76                    6 	.word PRTC_IDX 
      002A19                       4863 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      002A19 2A 12                    1 	.word LINK 
                           002A1B     2 	LINK=.
      002A1B                          3 PRTB:
      002A1B 44                       4 	.byte 4+F_IFUNC 	
      002A1C 50 52 54 42              5 	.ascii "PRTB"
      002A20 00 74                    6 	.word PRTB_IDX 
      002A22                       4864 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      002A22 2A 1B                    1 	.word LINK 
                           002A24     2 	LINK=.
      002A24                          3 PRTA:
      002A24 44                       4 	.byte 4+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002A25 50 52 54 41              5 	.ascii "PRTA"
      002A29 00 72                    6 	.word PRTA_IDX 
      002A2B                       4865 	_dict_entry 5,PRINT,PRT_IDX;print 
      002A2B 2A 24                    1 	.word LINK 
                           002A2D     2 	LINK=.
      002A2D                          3 PRINT:
      002A2D 05                       4 	.byte 5 	
      002A2E 50 52 49 4E 54           5 	.ascii "PRINT"
      002A33 00 70                    6 	.word PRT_IDX 
      002A35                       4866 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      002A35 2A 2D                    1 	.word LINK 
                           002A37     2 	LINK=.
      002A37                          3 POUT:
      002A37 44                       4 	.byte 4+F_IFUNC 	
      002A38 50 4F 55 54              5 	.ascii "POUT"
      002A3C 00 6E                    6 	.word POUT_IDX 
      002A3E                       4867 	_dict_entry,4,POKE,POKE_IDX;poke 
      002A3E 2A 37                    1 	.word LINK 
                           002A40     2 	LINK=.
      002A40                          3 POKE:
      002A40 04                       4 	.byte 4 	
      002A41 50 4F 4B 45              5 	.ascii "POKE"
      002A45 00 6C                    6 	.word POKE_IDX 
      002A47                       4868 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      002A47 2A 40                    1 	.word LINK 
                           002A49     2 	LINK=.
      002A49                          3 PMODE:
      002A49 05                       4 	.byte 5 	
      002A4A 50 4D 4F 44 45           5 	.ascii "PMODE"
      002A4F 00 66                    6 	.word PMODE_IDX 
      002A51                       4869 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      002A51 2A 49                    1 	.word LINK 
                           002A53     2 	LINK=.
      002A53                          3 PINP:
      002A53 44                       4 	.byte 4+F_IFUNC 	
      002A54 50 49 4E 50              5 	.ascii "PINP"
      002A58 00 6A                    6 	.word PINP_IDX 
      002A5A                       4870 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      002A5A 2A 53                    1 	.word LINK 
                           002A5C     2 	LINK=.
      002A5C                          3 PEEK:
      002A5C 44                       4 	.byte 4+F_IFUNC 	
      002A5D 50 45 45 4B              5 	.ascii "PEEK"
      002A61 00 68                    6 	.word PEEK_IDX 
      002A63                       4871 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      002A63 2A 5C                    1 	.word LINK 
                           002A65     2 	LINK=.
      002A65                          3 PAUSE:
      002A65 05                       4 	.byte 5 	
      002A66 50 41 55 53 45           5 	.ascii "PAUSE"
      002A6B 00 64                    6 	.word PAUSE_IDX 
      002A6D                       4872 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      002A6D 2A 65                    1 	.word LINK 
                           002A6F     2 	LINK=.
      002A6F                          3 PAD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002A6F 43                       4 	.byte 3+F_IFUNC 	
      002A70 50 41 44                 5 	.ascii "PAD"
      002A73 00 62                    6 	.word PAD_IDX 
      002A75                       4873 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      002A75 2A 6F                    1 	.word LINK 
                           002A77     2 	LINK=.
      002A77                          3 OR:
      002A77 42                       4 	.byte 2+F_IFUNC 	
      002A78 4F 52                    5 	.ascii "OR"
      002A7A 00 60                    6 	.word OR_IDX 
      002A7C                       4874 	_dict_entry,2,ON,ON_IDX; cmd_on 
      002A7C 2A 77                    1 	.word LINK 
                           002A7E     2 	LINK=.
      002A7E                          3 ON:
      002A7E 02                       4 	.byte 2 	
      002A7F 4F 4E                    5 	.ascii "ON"
      002A81 00 C4                    6 	.word ON_IDX 
      002A83                       4875 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      002A83 2A 7E                    1 	.word LINK 
                           002A85     2 	LINK=.
      002A85                          3 ODR:
      002A85 43                       4 	.byte 3+F_IFUNC 	
      002A86 4F 44 52                 5 	.ascii "ODR"
      002A89 00 5E                    6 	.word ODR_IDX 
      002A8B                       4876 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      002A8B 2A 85                    1 	.word LINK 
                           002A8D     2 	LINK=.
      002A8D                          3 NOT:
      002A8D 43                       4 	.byte 3+F_IFUNC 	
      002A8E 4E 4F 54                 5 	.ascii "NOT"
      002A91 00 5C                    6 	.word NOT_IDX 
      002A93                       4877 	_dict_entry,4,NEXT,NEXT_IDX;next 
      002A93 2A 8D                    1 	.word LINK 
                           002A95     2 	LINK=.
      002A95                          3 NEXT:
      002A95 04                       4 	.byte 4 	
      002A96 4E 45 58 54              5 	.ascii "NEXT"
      002A9A 00 58                    6 	.word NEXT_IDX 
      002A9C                       4878 	_dict_entry,3,NEW,NEW_IDX;new
      002A9C 2A 95                    1 	.word LINK 
                           002A9E     2 	LINK=.
      002A9E                          3 NEW:
      002A9E 03                       4 	.byte 3 	
      002A9F 4E 45 57                 5 	.ascii "NEW"
      002AA2 00 5A                    6 	.word NEW_IDX 
      002AA4                       4879 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      002AA4 2A 9E                    1 	.word LINK 
                           002AA6     2 	LINK=.
      002AA6                          3 MULDIV:
      002AA6 46                       4 	.byte 6+F_IFUNC 	
      002AA7 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      002AAD 00 56                    6 	.word MULDIV_IDX 
      002AAF                       4880 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      002AAF 2A A6                    1 	.word LINK 
                           002AB1     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002AB1                          3 LSHIFT:
      002AB1 46                       4 	.byte 6+F_IFUNC 	
      002AB2 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      002AB8 00 54                    6 	.word LSHIFT_IDX 
      002ABA                       4881 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      002ABA 2A B1                    1 	.word LINK 
                           002ABC     2 	LINK=.
      002ABC                          3 LOG:
      002ABC 43                       4 	.byte 3+F_IFUNC 	
      002ABD 4C 4F 47                 5 	.ascii "LOG"
      002AC0 00 52                    6 	.word LOG_IDX 
      002AC2                       4882 	_dict_entry 4,LIST,LIST_IDX;list
      002AC2 2A BC                    1 	.word LINK 
                           002AC4     2 	LINK=.
      002AC4                          3 LIST:
      002AC4 04                       4 	.byte 4 	
      002AC5 4C 49 53 54              5 	.ascii "LIST"
      002AC9 00 50                    6 	.word LIST_IDX 
      002ACB                       4883 	_dict_entry 3,LET,LET_IDX;let 
      002ACB 2A C4                    1 	.word LINK 
                           002ACD     2 	LINK=.
      002ACD                          3 LET:
      002ACD 03                       4 	.byte 3 	
      002ACE 4C 45 54                 5 	.ascii "LET"
      002AD1 00 4E                    6 	.word LET_IDX 
      002AD3                       4884 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      002AD3 2A CD                    1 	.word LINK 
                           002AD5     2 	LINK=.
      002AD5                          3 KEY:
      002AD5 43                       4 	.byte 3+F_IFUNC 	
      002AD6 4B 45 59                 5 	.ascii "KEY"
      002AD9 00 4C                    6 	.word KEY_IDX 
      002ADB                       4885 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      002ADB 2A D5                    1 	.word LINK 
                           002ADD     2 	LINK=.
      002ADD                          3 IWDGREF:
      002ADD 07                       4 	.byte 7 	
      002ADE 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      002AE5 00 4A                    6 	.word IWDGREF_IDX 
      002AE7                       4886 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      002AE7 2A DD                    1 	.word LINK 
                           002AE9     2 	LINK=.
      002AE9                          3 IWDGEN:
      002AE9 06                       4 	.byte 6 	
      002AEA 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      002AF0 00 48                    6 	.word IWDGEN_IDX 
      002AF2                       4887 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      002AF2 2A E9                    1 	.word LINK 
                           002AF4     2 	LINK=.
      002AF4                          3 INVERT:
      002AF4 46                       4 	.byte 6+F_IFUNC 	
      002AF5 49 4E 56 45 52 54        5 	.ascii "INVERT"
      002AFB 00 46                    6 	.word INVERT_IDX 
      002AFD                       4888 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      002AFD 2A F4                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



                           002AFF     2 	LINK=.
      002AFF                          3 INPUT:
      002AFF 05                       4 	.byte 5 	
      002B00 49 4E 50 55 54           5 	.ascii "INPUT"
      002B05 00 44                    6 	.word INPUT_IDX 
      002B07                       4889 	_dict_entry,2,IF,IF_IDX;if 
      002B07 2A FF                    1 	.word LINK 
                           002B09     2 	LINK=.
      002B09                          3 IF:
      002B09 02                       4 	.byte 2 	
      002B0A 49 46                    5 	.ascii "IF"
      002B0C 00 42                    6 	.word IF_IDX 
      002B0E                       4890 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      002B0E 2B 09                    1 	.word LINK 
                           002B10     2 	LINK=.
      002B10                          3 IDR:
      002B10 43                       4 	.byte 3+F_IFUNC 	
      002B11 49 44 52                 5 	.ascii "IDR"
      002B14 00 40                    6 	.word IDR_IDX 
      002B16                       4891 	_dict_entry,3,HEX,HEX_IDX;hex_base
      002B16 2B 10                    1 	.word LINK 
                           002B18     2 	LINK=.
      002B18                          3 HEX:
      002B18 03                       4 	.byte 3 	
      002B19 48 45 58                 5 	.ascii "HEX"
      002B1C 00 3E                    6 	.word HEX_IDX 
      002B1E                       4892 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      002B1E 2B 18                    1 	.word LINK 
                           002B20     2 	LINK=.
      002B20                          3 GPIO:
      002B20 44                       4 	.byte 4+F_IFUNC 	
      002B21 47 50 49 4F              5 	.ascii "GPIO"
      002B25 00 3C                    6 	.word GPIO_IDX 
      002B27                       4893 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      002B27 2B 20                    1 	.word LINK 
                           002B29     2 	LINK=.
      002B29                          3 GOTO:
      002B29 04                       4 	.byte 4 	
      002B2A 47 4F 54 4F              5 	.ascii "GOTO"
      002B2E 00 3A                    6 	.word GOTO_IDX 
      002B30                       4894 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      002B30 2B 29                    1 	.word LINK 
                           002B32     2 	LINK=.
      002B32                          3 GOSUB:
      002B32 05                       4 	.byte 5 	
      002B33 47 4F 53 55 42           5 	.ascii "GOSUB"
      002B38 00 38                    6 	.word GOSUB_IDX 
      002B3A                       4895 	_dict_entry,3,GET,GET_IDX; cmd_get 
      002B3A 2B 32                    1 	.word LINK 
                           002B3C     2 	LINK=.
      002B3C                          3 GET:
      002B3C 03                       4 	.byte 3 	
      002B3D 47 45 54                 5 	.ascii "GET"
      002B40 00 C6                    6 	.word GET_IDX 
      002B42                       4896 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002B42 2B 3C                    1 	.word LINK 
                           002B44     2 	LINK=.
      002B44                          3 FREE:
      002B44 44                       4 	.byte 4+F_IFUNC 	
      002B45 46 52 45 45              5 	.ascii "FREE"
      002B49 00 98                    6 	.word FREE_IDX 
      002B4B                       4897 	_dict_entry,3,FOR,FOR_IDX;for 
      002B4B 2B 44                    1 	.word LINK 
                           002B4D     2 	LINK=.
      002B4D                          3 FOR:
      002B4D 03                       4 	.byte 3 	
      002B4E 46 4F 52                 5 	.ascii "FOR"
      002B51 00 36                    6 	.word FOR_IDX 
      002B53                       4898 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      002B53 2B 4D                    1 	.word LINK 
                           002B55     2 	LINK=.
      002B55                          3 FCPU:
      002B55 04                       4 	.byte 4 	
      002B56 46 43 50 55              5 	.ascii "FCPU"
      002B5A 00 32                    6 	.word FCPU_IDX 
      002B5C                       4899 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      002B5C 2B 55                    1 	.word LINK 
                           002B5E     2 	LINK=.
      002B5E                          3 ERASE:
      002B5E 05                       4 	.byte 5 	
      002B5F 45 52 41 53 45           5 	.ascii "ERASE"
      002B64 00 30                    6 	.word ERASE_IDX 
      002B66                       4900 	_dict_entry,3,END,END_IDX;cmd_end  
      002B66 2B 5E                    1 	.word LINK 
                           002B68     2 	LINK=.
      002B68                          3 END:
      002B68 03                       4 	.byte 3 	
      002B69 45 4E 44                 5 	.ascii "END"
      002B6C 00 2E                    6 	.word END_IDX 
      002B6E                       4901 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      002B6E 2B 68                    1 	.word LINK 
                           002B70     2 	LINK=.
      002B70                          3 EEPROM:
      002B70 46                       4 	.byte 6+F_IFUNC 	
      002B71 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      002B77 00 2C                    6 	.word EEPROM_IDX 
      002B79                       4902 	_dict_entry,6+F_IFUNC,EEFREE,EEFREE_IDX; func_eefree 
      002B79 2B 70                    1 	.word LINK 
                           002B7B     2 	LINK=.
      002B7B                          3 EEFREE:
      002B7B 46                       4 	.byte 6+F_IFUNC 	
      002B7C 45 45 46 52 45 45        5 	.ascii "EEFREE"
      002B82 00 CA                    6 	.word EEFREE_IDX 
      002B84                       4903 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      002B84 2B 7B                    1 	.word LINK 
                           002B86     2 	LINK=.
      002B86                          3 EDIT:
      002B86 04                       4 	.byte 4 	
      002B87 45 44 49 54              5 	.ascii "EDIT"
      002B8B 00 2A                    6 	.word EDIT_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002B8D                       4904 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      002B8D 2B 86                    1 	.word LINK 
                           002B8F     2 	LINK=.
      002B8F                          3 DWRITE:
      002B8F 06                       4 	.byte 6+F_CMD 	
      002B90 44 57 52 49 54 45        5 	.ascii "DWRITE"
      002B96 00 28                    6 	.word DWRITE_IDX 
      002B98                       4905 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      002B98 2B 8F                    1 	.word LINK 
                           002B9A     2 	LINK=.
      002B9A                          3 DREAD:
      002B9A 45                       4 	.byte 5+F_IFUNC 	
      002B9B 44 52 45 41 44           5 	.ascii "DREAD"
      002BA0 00 26                    6 	.word DREAD_IDX 
      002BA2                       4906 	_dict_entry,2,DO,DO_IDX;do_loop
      002BA2 2B 9A                    1 	.word LINK 
                           002BA4     2 	LINK=.
      002BA4                          3 DO:
      002BA4 02                       4 	.byte 2 	
      002BA5 44 4F                    5 	.ascii "DO"
      002BA7 00 24                    6 	.word DO_IDX 
      002BA9                       4907 	_dict_entry,3,DEC,DEC_IDX;dec_base
      002BA9 2B A4                    1 	.word LINK 
                           002BAB     2 	LINK=.
      002BAB                          3 DEC:
      002BAB 03                       4 	.byte 3 	
      002BAC 44 45 43                 5 	.ascii "DEC"
      002BAF 00 22                    6 	.word DEC_IDX 
      002BB1                       4908 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      002BB1 2B AB                    1 	.word LINK 
                           002BB3     2 	LINK=.
      002BB3                          3 DDR:
      002BB3 43                       4 	.byte 3+F_IFUNC 	
      002BB4 44 44 52                 5 	.ascii "DDR"
      002BB7 00 20                    6 	.word DDR_IDX 
      002BB9                       4909 	_dict_entry,4,DATA,DATA_IDX;data  
      002BB9 2B B3                    1 	.word LINK 
                           002BBB     2 	LINK=.
      002BBB                          3 DATA:
      002BBB 04                       4 	.byte 4 	
      002BBC 44 41 54 41              5 	.ascii "DATA"
      002BC0 00 1E                    6 	.word DATA_IDX 
      002BC2                       4910 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      002BC2 2B BB                    1 	.word LINK 
                           002BC4     2 	LINK=.
      002BC4                          3 CRL:
      002BC4 43                       4 	.byte 3+F_IFUNC 	
      002BC5 43 52 4C                 5 	.ascii "CRL"
      002BC8 00 1C                    6 	.word CRL_IDX 
      002BCA                       4911 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      002BCA 2B C4                    1 	.word LINK 
                           002BCC     2 	LINK=.
      002BCC                          3 CRH:
      002BCC 43                       4 	.byte 3+F_IFUNC 	
      002BCD 43 52 48                 5 	.ascii "CRH"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002BD0 00 1A                    6 	.word CRH_IDX 
      002BD2                       4912 	_dict_entry,5,CONST,CONST_IDX; cmd_const 
      002BD2 2B CC                    1 	.word LINK 
                           002BD4     2 	LINK=.
      002BD4                          3 CONST:
      002BD4 05                       4 	.byte 5 	
      002BD5 43 4F 4E 53 54           5 	.ascii "CONST"
      002BDA 00 C8                    6 	.word CONST_IDX 
      002BDC                       4913 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      002BDC 2B D4                    1 	.word LINK 
                           002BDE     2 	LINK=.
      002BDE                          3 CHAR:
      002BDE 84                       4 	.byte 4+F_CFUNC 	
      002BDF 43 48 41 52              5 	.ascii "CHAR"
      002BE3 00 18                    6 	.word CHAR_IDX 
      002BE5                       4914 	_dict_entry,3,BYE,BYE_IDX;bye 
      002BE5 2B DE                    1 	.word LINK 
                           002BE7     2 	LINK=.
      002BE7                          3 BYE:
      002BE7 03                       4 	.byte 3 	
      002BE8 42 59 45                 5 	.ascii "BYE"
      002BEB 00 16                    6 	.word BYE_IDX 
      002BED                       4915 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      002BED 2B E7                    1 	.word LINK 
                           002BEF     2 	LINK=.
      002BEF                          3 BTOGL:
      002BEF 05                       4 	.byte 5 	
      002BF0 42 54 4F 47 4C           5 	.ascii "BTOGL"
      002BF5 00 14                    6 	.word BTOGL_IDX 
      002BF7                       4916 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      002BF7 2B EF                    1 	.word LINK 
                           002BF9     2 	LINK=.
      002BF9                          3 BTEST:
      002BF9 45                       4 	.byte 5+F_IFUNC 	
      002BFA 42 54 45 53 54           5 	.ascii "BTEST"
      002BFF 00 12                    6 	.word BTEST_IDX 
      002C01                       4917 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      002C01 2B F9                    1 	.word LINK 
                           002C03     2 	LINK=.
      002C03                          3 BSET:
      002C03 04                       4 	.byte 4 	
      002C04 42 53 45 54              5 	.ascii "BSET"
      002C08 00 10                    6 	.word BSET_IDX 
      002C0A                       4918 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      002C0A 2C 03                    1 	.word LINK 
                           002C0C     2 	LINK=.
      002C0C                          3 BRES:
      002C0C 04                       4 	.byte 4 	
      002C0D 42 52 45 53              5 	.ascii "BRES"
      002C11 00 0E                    6 	.word BRES_IDX 
      002C13                       4919 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      002C13 2C 0C                    1 	.word LINK 
                           002C15     2 	LINK=.
      002C15                          3 BIT:
      002C15 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002C16 42 49 54                 5 	.ascii "BIT"
      002C19 00 0C                    6 	.word BIT_IDX 
      002C1B                       4920 	_dict_entry,3,AWU,AWU_IDX;awu 
      002C1B 2C 15                    1 	.word LINK 
                           002C1D     2 	LINK=.
      002C1D                          3 AWU:
      002C1D 03                       4 	.byte 3 	
      002C1E 41 57 55                 5 	.ascii "AWU"
      002C21 00 0A                    6 	.word AWU_IDX 
      002C23                       4921 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      002C23 2C 1D                    1 	.word LINK 
                           002C25     2 	LINK=.
      002C25                          3 ASC:
      002C25 43                       4 	.byte 3+F_IFUNC 	
      002C26 41 53 43                 5 	.ascii "ASC"
      002C29 00 08                    6 	.word ASC_IDX 
      002C2B                       4922 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      002C2B 2C 25                    1 	.word LINK 
                           002C2D     2 	LINK=.
      002C2D                          3 AND:
      002C2D 43                       4 	.byte 3+F_IFUNC 	
      002C2E 41 4E 44                 5 	.ascii "AND"
      002C31 00 06                    6 	.word AND_IDX 
      002C33                       4923 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      002C33 2C 2D                    1 	.word LINK 
                           002C35     2 	LINK=.
      002C35                          3 ADCREAD:
      002C35 47                       4 	.byte 7+F_IFUNC 	
      002C36 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      002C3D 00 04                    6 	.word ADCREAD_IDX 
      002C3F                       4924 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      002C3F 2C 35                    1 	.word LINK 
                           002C41     2 	LINK=.
      002C41                          3 ADCON:
      002C41 05                       4 	.byte 5 	
      002C42 41 44 43 4F 4E           5 	.ascii "ADCON"
      002C47 00 02                    6 	.word ADCON_IDX 
      002C49                       4925 kword_dict::
      002C49                       4926 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      002C49 2C 41                    1 	.word LINK 
                           002C4B     2 	LINK=.
      002C4B                          3 ABS:
      002C4B 43                       4 	.byte 3+F_IFUNC 	
      002C4C 41 42 53                 5 	.ascii "ABS"
      002C4F 00 00                    6 	.word ABS_IDX 
                                   4927 
                                   4928 ;comands and fonctions address table 	
      002C51                       4929 code_addr::
      002C51 23 E7 1F 9E 1F DA 23  4930 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             FB 22 D8 23 98 26 49
      002C5F 1C 41 1C 31 1C 62 1C  4931 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             52 23 71 22 C6 27 03
      002C6D 26 FD 27 1B 26 F7 18  4932 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             1C 26 72 20 0E 20 3E
      002C7B 1A A2 27 15 1F 28 21  4933 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto,gpio ; 24..31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



             06 24 75 21 A0 1C BD
             1E 8E 1E 74 23 14
      002C8F 18 17 26 F1 1C A9 1B  4934 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             8C 26 63 25 F3 26 29
             22 FF
      002C9F 18 71 1A 19 26 2E 24  4935 	.word let,list,log2,lshift,muldiv,next,new ; 40..47
             43 15 BB 1D 3D 20 C5
      002CAD 25 E6 26 EB 24 13 28  4936 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             9D 23 85 24 81 1C 98
             27 0F
      002CBD 1C 89 27 09 1B 06 26  4937 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             B5 26 BB 26 C1 26 C7
             26 CD
      002CCD 26 D3 26 D9 26 DF 26  4938 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             E5 23 07 27 8C 0F 08
             1C 06
      002CDD 27 4C 1E AE 24 FD 24  4939 	.word restore,return, random,rshift,run,show,free ; 72..79
             5C 1E CC 17 D6 18 21
      002CEB 23 7A 28 7E 27 E6 28  4940 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             86 28 5E 1D 16 20 79
             23 E1
      002CFB 25 CA 25 D9 1C E6 1F  4941 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             5A 18 67 23 3E 26 87
             23 54
      002D0B 1C 0C 25 64 22 8F 24  4942 	.word wait,words,write,bit_xor,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
             2B 18 3A 1D EB 1F 2F
             19 05
      002D1B 18 9C 00 00           4943 	.word func_eefree,0 
                                   4944 
                                   4945 
                                   4946 
                                   4947 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      002D80                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      002D80                         30 app_space::
      002D80 00 00                   31 app_sign: .word 0 ; .ascii "BC"  ; signature 
      002D82 00 00                   32 app_size: .word 0 ; 31 
      002D84                         33 app: 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     35 ;;  BASIC code demo 'BLINK.BAS' 
                                     36 ;; 10 do btogl $500a,32 pause 250 until qkey bres $500a,32 end 
                                     37 ;; byte code generated by compiler.
                                     38 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     39 ;.byte 0,10,31,128,0,38,128,0,20,132,80,10,9,132,0,32,128
                                     40 ;.byte 0,100,132,0,250,128,0,182,129,0,132,128,0,46
                                     41 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   4 ABS        002C4B R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   4 ADCON      002C41 R
    ADCON_ID=  000002     |   4 ADCREAD    002C35 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 AND        002C2D R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 ASC        002C25 R   |     ASC_IDX =  000008     |     ATTRIB  =  000002 
    AUTORUN_=  004000     |   4 AUTO_RUN   000F9B R   |   4 AWU        002C1D R
  4 AWUHandl   000004 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_CSR_=  000004     |     AWU_IDX =  00000A     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
  4 BIT        002C15 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BIT_IDX =  00000C     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000B     |   4 BRES       002C0C R
    BRES_IDX=  00000E     |     BS      =  000008     |     BSAVE   =  000001 
  4 BSET       002C03 R   |     BSET_IDX=  000010     |     BSIZE   =  000006 
  4 BTEST      002BF9 R   |     BTEST_ID=  000012     |   4 BTOGL      002BEF R
    BTOGL_ID=  000014     |     BTW     =  000001     |     BUFPTR  =  000003 
  4 BYE        002BE7 R   |     BYE_IDX =  000016     |     C       =  000001 
    CAN     =  000018     |   4 CANT_DO    002237 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CCOMMA  =  000001 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000002     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   4 CHAR       002BDE R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]

Symbol Table

    CHAR_IDX=  000018     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMDX    =  000001     |     CMD_END =  000002 
    CNAME   =  000001     |     CNT     =  000006     |     CNTR    =  000003 
    CNT_LO  =  000004     |     COMMA   =  00002C     |   4 CONST      002BD4 R
    CONST_ID=  0000C8     |     COUNT   =  000003     |     CPOS    =  000003 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  4 CRH        002BCC R   |     CRH_IDX =  00001A     |   4 CRL        002BC4 R
    CRL_IDX =  00001C     |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000007 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  4 DATA       002BBB R   |     DATA_IDX=  00001E     |     DBG_A   =  000005 
    DBG_CC  =  000006     |     DBG_X   =  000003     |     DBG_Y   =  000001 
    DBL     =  000003     |     DBLDIVDN=  000006     |     DBLHI   =  000001 
    DBLLO   =  000003     |     DBL_SIZE=  000004     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  4 DDR        002BB3 R   |     DDR_IDX =  000020     |     DEBUG   =  000001 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |     DEBUG_PR=  000001 
  4 DEC        002BAB R   |     DEC_IDX =  000022     |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |     DIVDNDHI=  00000B 
    DIVDNDLO=  00000D     |     DIVISOR =  000001     |     DIVISR  =  000007 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]

Symbol Table

    DM_ENFCT=  007F9A     |   4 DO         002BA4 R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     DO_IDX  =  000024     |   4 DREAD      002B9A R
    DREAD_ID=  000026     |   4 DWRITE     002B8F R   |     DWRITE_I=  000028 
  4 EDIT       002B86 R   |     EDIT_IDX=  00002A     |   4 EEFREE     002B7B R
    EEFREE_I=  0000CA     |   4 EEPROM     002B70 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_I=  00002C     |     EEPROM_S=  000800 
    EEPTR   =  000003     |     EM      =  000019     |   4 END        002B68 R
    END_IDX =  00002E     |     ENQ     =  000005     |     EOF     =  0000FF 
    EOT     =  000004     |   4 ERASE      002B5E R   |     ERASE_ID=  000030 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FAUTORUN=  000006     |     FBREAK  =  000004     |     FCOMP   =  000005 
  4 FCPU       002B55 R   |     FCPU_IDX=  000032     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
  4 FLASH_ME   0019F9 R   |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   4 FOR        002B4D R   |     FOR_IDX =  000036 
  4 FREE       002B44 R   |     FREE_IDX=  000098     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   4 GET        002B3C R
    GET_IDX =  0000C6     |   4 GOSUB      002B32 R   |     GOSUB_ID=  000038 
  4 GOTO       002B29 R   |     GOTO_IDX=  00003A     |   4 GPIO       002B20 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_IDX=  00003C 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  4 HEX        002B18 R   |     HEX_IDX =  00003E     |     HOME    =  000082 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]

Symbol Table

    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   4 IDR        002B10 R   |     IDR_IDX =  000040 
  4 IF         002B09 R   |     IF_IDX  =  000042     |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   4 INPUT      002AFF R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000044     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  4 INVERT     002AF4 R   |     INVERT_I=  000046     |     INW     =  000009 
    IPOS    =  000001     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  4 IWDGEN     002AE9 R   |     IWDGEN_I=  000048     |   4 IWDGREF    002ADD R
    IWDGREF_=  00004A     |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |     KCHAR   =  000002     |   4 KEY        002AD5 R
    KEY_END =  000083     |     KEY_IDX =  00004C     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |   4 LET        002ACD R
    LET_IDX =  00004E     |     LF      =  00000A     |     LIMIT   =  000001 
    LINENO  =  000005     |   4 LINK    =  002C4B R   |   4 LIST       002AC4 R
    LIST_IDX=  000050     |     LL      =  000001     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   4 LOG        002ABC R
    LOG_IDX =  000052     |   4 LSHIFT     002AB1 R   |     LSHIFT_I=  000054 
    MAJOR   =  000002     |     MASK    =  000002     |     MATH_OVF=  000000 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |   4 MULDIV     002AA6 R
    MULDIV_I=  000056     |     MULOP   =  000003     |     N1      =  000001 
    N2      =  000003     |     NAFR    =  004804     |     NAK     =  000015 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]

Symbol Table

    NAMEPTR =  000001     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        002A9E R   |     NEW_IDX =  00005A     |   4 NEXT       002A95 R
    NEXT_IDX=  000058     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  4 NOT        002A8D R   |     NOT_IDX =  00005C     |   4 NOT_SAVE   001ACF R
  4 NO_APP     002279 R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R   |   4 ODR        002A85 R
    ODR_IDX =  00005E     |   4 ON         002A7E R   |     ONOFF   =  000003 
    ON_IDX  =  0000C4     |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  4 OR         002A77 R   |     OR_IDX  =  000060     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    OVRWR   =  000004     |     PA      =  000000     |   4 PAD        002A6F R
    PAD_IDX =  000062     |     PAD_SIZE=  000080     |   4 PAUSE      002A65 R
    PAUSE_ID=  000064     |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   4 PEEK       002A5C R
    PEEK_IDX=  000068     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  4 PINP       002A53 R   |     PINP_IDX=  00006A     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  4 PMODE      002A49 R   |     PMODE_ID=  000066     |   4 POKE       002A40 R
    POKE_IDX=  00006C     |     PORT    =  000003     |   4 POUT       002A37 R
    POUT_IDX=  00006E     |     PREV    =  000001     |   4 PRINT      002A2D R
  4 PROG_ADD   0019D0 R   |   4 PROG_SIZ   0019E2 R   |   4 PRTA       002A24 R
    PRTA_IDX=  000072     |   4 PRTB       002A1B R   |     PRTB_IDX=  000074 
  4 PRTC       002A12 R   |     PRTC_IDX=  000076     |   4 PRTD       002A09 R
    PRTD_IDX=  000078     |   4 PRTE       002A00 R   |     PRTE_IDX=  00007A 
  4 PRTF       0029F7 R   |     PRTF_IDX=  00007C     |   4 PRTG       0029EE R
    PRTG_IDX=  00007E     |   4 PRTH       0029E5 R   |     PRTH_IDX=  000080 
  4 PRTI       0029DC R   |     PRTI_IDX=  000082     |     PRT_IDX =  000070 
    PSTR    =  000003     |   4 QKEY       0029D3 R   |     QKEY_IDX=  000084 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]

Symbol Table

    RAM_BASE=  000000     |     RAM_END =  0017FF     |   4 RAM_MEM    001A0A R
    RAM_SIZE=  001800     |     RBT_IDX =  000088     |   4 READ       0029CA R
    READ_IDX=  000086     |   4 REBOOT     0029BF R   |     RECLEN  =  000005 
    REG     =  000001     |     REGA    =  000001     |     REGX    =  000003 
    REGY    =  000005     |     RELOP   =  000003     |   4 REMARK     0029B4 R
    REM_IDX =  00008A     |   4 RESTORE    0029A8 R   |     REST_IDX=  00008C 
    RETL1   =  000001     |   4 RETURN     00299D R   |     RET_ADDR=  000003 
    RET_IDX =  00008E     |     RET_INW =  000005     |   4 RND        002995 R
    RND_IDX =  000090     |     ROP     =  004800     |     RS      =  00001E 
  4 RSHIFT     00298A R   |     RSHIFT_I=  000092     |     RST_SR  =  0050B3 
  4 RUN        002982 R   |     RUN_IDX =  000094     |     RXCHAR  =  000001 
    RX_QUEUE=  000008     |   4 SAVE       002979 R   |     SAVEB   =  000002 
    SAVE_IDX=  000034     |     SDIVSR  =  000005     |     SEPARATE=  000000 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
  4 SHOW       002970 R   |     SHOW_IDX=  000096     |     SI      =  00000F 
    SIGN    =  000001     |   4 SIGNATUR   002235 R   |   4 SIZE       002967 R
    SIZE_IDX=  0000C2     |     SKIP    =  000005     |   4 SLEEP      00295D R
    SLEEP_ID=  00009A     |     SO      =  00000E     |     SOH     =  000001 
    SPACE   =  000020     |   4 SPIEN      002953 R   |     SPIEN_ID=  00009E 
  4 SPIRD      002949 R   |     SPIRD_ID=  00009C     |   4 SPISEL     00293E R
    SPISEL_I=  0000A0     |   4 SPIWR      002934 R   |     SPIWR_ID=  0000A2 
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_CS_B=  000005     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_SR_B=  000007     |     SPI_SR_C=  000004     |     SPI_SR_M=  000005 
    SPI_SR_O=  000006     |     SPI_SR_R=  000000     |     SPI_SR_T=  000001 
    SPI_SR_W=  000003     |     SPI_TXCR=  005207     |     SQUOT   =  000006 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  0000A0 
  4 STEP       00292B R   |     STEP_IDX=  0000A4     |   4 STOP       002922 R
    STOP_IDX=  0000A6     |     STR     =  000003     |   4 STR_BYTE   0019F3 R
    STX     =  000002     |     SUB     =  00001A     |     SUP     =  000084 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  4 TICKS      002918 R   |     TICKS_ID=  0000A8     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  4 TIMEOUT    00290C R   |   4 TIMER      002902 R   |     TIMER_ID=  0000AA 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000005 
    TK_CFUNC=  000082     |     TK_CHAR =  000004     |     TK_CMD  =  000080 
    TK_COLON=  00000B     |     TK_COMMA=  000009     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LABEL=  000003 
    TK_LE   =  000036     |     TK_LPARE=  000007     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  000008     |     TK_SHARP=  00000A 
    TK_VAR  =  000085     |     TMROUT_I=  0000AC     |   4 TO         0028FB R
  4 TONE       0028F2 R   |     TONE_IDX=  0000B0     |     TOWRITE =  000005 
    TO_IDX  =  0000AE     |   4 Timer4Up   000012 R   |     U1      =  000001 
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART2   =  000001 
    UART3   =  000002     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   4 UBOUND     0028E7 R   |     UBOUND_I=  0000B2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]

Symbol Table

  4 UBTN_Han   00004B R   |   4 UFLASH     0028DC R   |     UFLASH_I=  0000B4 
  4 UNTIL      0028D2 R   |     UNTIL_ID=  0000B6     |     US      =  00001F 
  4 USER_ABO   00005E R   |   4 USR        0028CA R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     USR_IDX =  0000B8 
  4 Uart1RxH   0002C0 R   |   4 UserButt   000027 R   |     VAR_ADDR=  000006 
    VSISE   =  000003     |     VSIZ    =  000002     |     VSIZE   =  000006 
    VT      =  00000B     |   4 WAIT       0028C1 R   |     WAIT_IDX=  0000BA 
    WCNT    =  000003     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   4 WORDS      0028B7 R
    WORDS_ID=  0000BC     |   4 WRITE      0028AD R   |     WRITE_ID=  0000BE 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XFIRST  =  000001 
    XMASK   =  000001     |     XOFF    =  000013     |     XON     =  000011 
  4 XOR        0028A5 R   |     XOR_IDX =  0000C0     |     XREG    =  000003 
    XSAVE   =  000005     |     XTEMP   =  000001     |     YSAVE   =  000004 
  4 abs        0023E7 R   |   5 acc16      00000D GR  |   5 acc24      00000C GR
  5 acc32      00000B R   |   5 acc8       00000E GR  |   4 accept_c   0005FB R
  4 add_char   000D44 R   |   4 add_spac   000B44 R   |   4 analog_r   001FDA R
  4 app        002D84 R   |   4 app_sign   002D80 R   |   4 app_size   002D82 R
  4 app_spac   002D80 GR  |   4 arduino_   0024DD R   |   4 arg_list   001636 R
  5 array_si   00001F R   |   4 ascii      0022D8 R   |   4 at_tst     0009B2 R
  4 atoi24     0013F0 GR  |   4 atoi_exi   001456 R   |   4 awu        002398 R
  4 awu02      0023A2 R   |   4 bad_port   002339 R   |   5 base       00000A GR
  5 basicptr   000004 GR  |   4 beep       001F67 R   |   4 beep_1kh   001F51 GR
  4 bin_exit   00082E R   |   4 bit_and    0023FB R   |   4 bit_or     002413 R
  4 bit_rese   001C41 R   |   4 bit_set    001C31 R   |   4 bit_test   001C62 R
  4 bit_togg   001C52 R   |   4 bit_xor    00242B R   |   4 bitmask    002649 R
  4 bkslsh_t   00095F R   |   4 bksp       000399 R   |   2 block_bu   0016E0 GR
  4 block_er   0001EA R   |   4 break_po   0020A7 R   |   4 bye        002371 R
  4 char       0022C6 R   |   4 clear_ba   000FFD R   |   4 clear_bl   00218C R
  4 clear_va   000EB3 R   |   4 clock_in   000079 R   |   4 cmd_cons   001905 R
  4 cmd_end    001F28 R   |   4 cmd_get    001F2F R   |   4 cmd_line   00121C R
  4 cmd_name   000D64 R   |   4 cmd_on     001DEB R   |   4 cmd_size   00183A R
  4 code_add   002C51 GR  |   4 cold_sta   000F08 R   |   4 colon_ts   000986 R
  4 comma_ts   000991 R   |   4 comp_msg   001174 R   |   4 compile    000AB7 GR
  4 const_cr   0026FD R   |   4 const_cr   002703 R   |   4 const_dd   0026F7 R
  4 const_ee   002715 R   |   4 const_id   0026F1 R   |   4 const_in   00270F R
  4 const_od   0026EB R   |   4 const_ou   002709 R   |   4 const_po   0026B5 R
  4 const_po   0026BB R   |   4 const_po   0026C1 R   |   4 const_po   0026C7 R
  4 const_po   0026CD R   |   4 const_po   0026D3 R   |   4 const_po   0026D9 R
  4 const_po   0026DF R   |   4 const_po   0026E5 R   |   4 convert_   0007A5 R
  4 convert_   00035D R   |   4 copy_com   0009E7 R   |   5 count      000003 GR
  4 cp_loop    0015E5 R   |   4 cpy_cmd_   000B2F R   |   4 cpy_quot   000B68 R
  4 create_g   0006CF R   |   4 cs_high    002898 R   |   4 cstk_pro   0017F0 R
  4 dash_tst   0009A7 R   |   4 data       00271B R   |   5 data_len   000009 R
  4 data_lin   00272A R   |   5 data_ofs   000008 R   |   5 data_ptr   000006 R
  4 data_sea   00276B R   |   4 dbl_sign   00153F R   |   4 dec_base   00181C R
  4 decomp_l   000C19 R   |   4 decompil   000BD2 GR  |   4 del_line   0006A2 R
  4 delete_l   000486 R   |   4 delete_n   0003A9 R   |   4 delete_u   00044B R
  4 digital_   00200E R   |   4 digital_   00203E R   |   4 div32_16   001549 R
  4 divide     0015A0 R   |   4 divu24_8   00135F R   |   4 dneg       001534 R
  4 do_loop    002672 R   |   4 do_progr   0001DD R   |   4 edit       001AA2 R
  4 enable_i   0025F3 R   |   4 eql_tst    000A3C R   |   4 equal      000D57 R
  4 erase      002106 R   |   4 erase_ex   000209 R   |   4 erase_fl   0001FF R
  4 err_bad_   0010DF R   |   4 err_buf_   001155 R   |   4 err_cmd_   0010A3 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]

Symbol Table

  4 err_div0   001068 R   |   4 err_dupl   0010BD R   |   4 err_math   00104F R
  4 err_mem_   001034 R   |   4 err_msg    001014 R   |   4 err_no_a   0010EB R
  4 err_no_d   00111E R   |   4 err_no_f   001142 R   |   4 err_no_l   001077 R
  4 err_no_p   00112E R   |   4 err_not_   0010CE R   |   4 err_run_   00108D R
  4 err_synt   001041 R   |   4 escaped    0007BA GR  |   4 expect     001624 R
  4 expr_exi   00177B R   |   4 expressi   001735 R   |   4 factor     001686 R
  5 farptr     000017 R   |   4 fcpu       002475 R   |   4 fill_wri   00217C R
  4 final_te   0005F4 R   |   4 first_li   001A4C R   |   5 flags      000021 GR
  4 for        001CBD R   |   4 free       001821 R   |   5 free_eep   000023 R
  7 free_ram   000080 R   |   4 func_arg   001631 R   |   4 func_eef   00189C R
  4 func_not   0025E6 R   |   4 ge         000D59 R   |   4 get_arra   001661 R
  4 get_cmd_   000BB1 R   |   4 get_esca   000369 R   |   4 get_targ   001D87 R
  4 get_targ   001D95 R   |   4 get_tick   0023E1 R   |   4 get_toke   0008F8 GR
  4 getc       000342 GR  |   4 gosub      001E8E R   |   4 goto       001E74 R
  4 gpio       002314 R   |   4 gt         000D55 R   |   4 gt_tst     000A47 R
  4 hex_base   001817 R   |   4 hex_dump   000E04 R   |   4 if         001CA9 R
  5 in         000001 GR  |   5 in.saved   000002 GR  |   5 in.w       000000 GR
  4 incr_far   0020EA R   |   4 input_ex   001C03 R   |   4 input_lo   001B8E R
  4 input_va   001B8C R   |   4 insert_c   000408 R   |   4 insert_l   0006FB R
  4 insert_l   00076A R   |   4 interp_l   00125D R   |   4 interpre   001238 R
  4 invert     002663 R   |   4 is_alnum   000863 GR  |   4 is_alpha   000849 GR
  4 is_data_   002721 R   |   4 is_digit   00085A GR  |   4 is_symbo   00086C R
  4 itoa       0012F4 GR  |   4 itoa_loo   001319 R   |   4 jp_to_ta   001E81 R
  4 key        0022FF R   |   4 kword_di   002C49 GR  |   4 kword_en   0028A3 R
  4 le         000D5E R   |   4 leading_   002639 R   |   4 let        001871 GR
  4 let_arra   00187F R   |   4 let_var    001882 R   |   4 lines_sk   001A4F R
  4 list       001A19 R   |   4 list_exi   001A91 R   |   4 list_loo   001A6F R
  4 log2       00262E R   |   4 logical_   0025DC R   |   4 long_div   00151C R
  4 look_tar   001DB1 R   |   4 loop_bac   001D6A R   |   5 loop_dep   00001E R
  4 loop_don   001D7F R   |   4 lshift     002443 R   |   4 lt         000D5C R
  4 lt_tst     000A70 R   |   4 modulo     0015B6 R   |   4 move       000E6F GR
  4 move_dow   000E8E R   |   4 move_era   00016C R   |   4 move_exi   000EAF R
  4 move_lef   0003E0 R   |   4 move_loo   000E93 R   |   4 move_prg   0001AC R
  4 move_rig   0003EE R   |   4 move_up    000E80 R   |   4 mul_char   000D46 R
  4 muldiv     0015BB R   |   4 multiply   0014E7 R   |   4 mulu24_8   001387 R
  4 nbr_tst    00092B R   |   4 ne         000D61 R   |   4 neg_acc2   0013C1 R
  4 new        0020C5 R   |   4 next       001D3D R   |   4 next_lin   001240 R
  4 next_tok   001288 GR  |   4 no_match   0015F7 R   |   4 other      000A99 R
  4 overwrit   000620 R   |   2 pad        0016E0 GR  |   4 pad_ref    00289D R
  4 parse_bi   00080C R   |   4 parse_in   0007C2 R   |   4 parse_ke   00088F R
  4 parse_qu   00076D R   |   4 parse_sy   000877 R   |   4 pause      002385 R
  4 pause02    00238F R   |   4 peek       001C98 R   |   4 pin_mode   002481 R
  4 plus_tst   000A10 R   |   4 poke       001C89 R   |   4 power_ad   001F9E R
  4 prcnt_ts   000A31 R   |   4 print      001B06 R   |   4 print_ex   001B60 R
  4 print_he   000655 GR  |   4 print_in   0012D8 R   |   4 printxy    00145A R
  4 prog_siz   001989 R   |   4 program_   001991 R   |   4 program_   000186 R
  4 program_   0001AC R   |   4 prt_basi   001AE6 R   |   4 prt_loop   001B0A R
  4 prt_regs   0000B1 R   |   4 prt_tok    000D96 R   |   4 prti24     0012E8 R
  5 ptr16      000018 GR  |   5 ptr8       000019 R   |   4 putc       000332 GR
  4 puts       00038F GR  |   4 qgetc      00033B GR  |   4 qkey       002307 GR
  4 qmark_ts   0009BD R   |   4 qsign      002175 R   |   4 random     0024FD R
  4 read       00278C R   |   4 read01     00278E R   |   4 readln     000494 GR
  4 readln_l   0004A1 R   |   4 readln_q   00063D R   |   4 refresh_   002629 R
  4 rel_exit   0017D3 R   |   4 relation   00177E R   |   4 relop_st   000D49 R
  4 remark     001C06 GR  |   4 reset_co   001B08 R   |   4 rest_con   001B7C R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]

Symbol Table

  4 restore    00274C R   |   4 restore_   002787 R   |   4 return     001EAE R
  4 right_al   000B56 GR  |   4 row_alig   0020CF R   |   4 row_eras   00013F R
  4 row_eras   00016C R   |   4 row_loop   000DE7 R   |   4 rparnt_t   00097B R
  4 rshift     00245C R   |   7 rsign      00007C R   |   7 rsize      00007E R
  4 rt_msg     001162 R   |   4 run        001ECC R   |   4 run_app    000F80 R
  4 run_it     001EFE R   |   4 run_it_0   001F00 R   |   5 rx1_head   00002D R
  5 rx1_queu   000025 R   |   5 rx1_tail   00002E R   |   4 save_app   0021A0 R
  4 save_con   001B6C R   |   4 scan_blo   0020F8 R   |   4 search_c   0018C6 R
  4 search_d   0015D7 GR  |   4 search_e   001621 R   |   4 search_l   000677 GR
  4 search_l   000686 R   |   4 search_n   0015DB R   |   5 seedx      000013 R
  5 seedy      000015 R   |   4 select_p   0024CD R   |   4 send_esc   0003B7 R
  4 send_par   0003C2 R   |   4 set_data   00273D R   |   4 set_time   0025CA R
  4 sharp_ts   00099C R   |   4 show       0017D6 R   |   4 show_row   000DD5 R
  4 single_c   000D3F R   |   4 skip       0008E5 R   |   4 slash_ts   000A26 R
  4 sleep      00237A R   |   4 software   000EC2 R   |   4 spaces     0003FC GR
  4 spi_clea   002831 R   |   4 spi_disa   002819 R   |   4 spi_enab   0027E6 R
  4 spi_rcv_   002853 R   |   4 spi_read   00287E R   |   4 spi_sele   002886 R
  4 spi_send   00283D R   |   4 spi_writ   00285E R   |   2 stack_fu   001760 GR
  2 stack_un   001800 R   |   4 star_tst   000A1B R   |   4 step       001D16 R
  4 stop       002079 R   |   4 store_lo   001D2A R   |   4 str_matc   001604 R
  4 str_tst    00091B R   |   4 strcmp     000E4E R   |   4 strcpy     000E5F GR
  4 strlen     000E43 GR  |   4 symb_loo   000878 R   |   4 syntax_e   001195 GR
  4 system_i   000FAE R   |   5 tab_widt   000022 GR  |   4 tb_error   001197 GR
  4 term       0016E3 R   |   4 term01     0016EB R   |   4 term_exi   001732 R
  2 tib        001690 GR  |   4 tick_tst   0009D5 R   |   5 ticks      00000F R
  4 timeout    0025D9 R   |   5 timer      000011 GR  |   4 timer2_i   00008F R
  4 timer4_i   00009C R   |   4 tk_id      001185 R   |   4 to         001CE6 R
  4 to_eepro   0001D5 R   |   4 to_flash   0001DA R   |   4 to_hex_c   00066C GR
  4 to_upper   0013E4 GR  |   4 token_ch   000AB0 R   |   4 token_ex   000AB4 R
  4 token_ms   000DCD R   |   4 tone       001F5A R   |   4 try_next   002777 R
  5 txtbgn     00001A GR  |   5 txtend     00001C GR  |   4 uart1_ge   000342 GR
  4 uart1_in   0002ED R   |   4 uart1_pu   000332 GR  |   4 uart1_qg   00033B GR
  4 uart1_se   0002FD R   |   4 ubound     001867 R   |   4 udiv32_1   00150A R
  4 uflash     00233E R   |   4 umstar     0014AD R   |   4 unlock_e   000109 R
  4 unlock_f   000124 R   |   4 until      002687 R   |   4 user_int   00003A R
  4 usr        002354 R   |   4 var_name   000BA9 GR  |   5 vars       00002F GR
  4 wait       001C0C R   |   4 warm_ini   000FDF R   |   4 warm_sta   001219 R
  4 words      002564 R   |   4 words_co   0025B4 R   |   4 write      00228F R
  4 write_bl   000285 GR  |   4 write_bu   0001C6 R   |   4 write_by   00020B R
  4 write_ee   000247 R   |   4 write_ex   000280 R   |   4 write_fl   000231 R
  4 write_nb   0002AA R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    170   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   2D84   flags    0
   5 DATA       size     63   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

