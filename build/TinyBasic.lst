ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_AND=(7<<4)   ; TK_AND
                           000080    27         F_OR=(8<<4)    ; TK_OR
                           000090    28         F_XOR=(9<<4)   ; TK_XOR   
                           00000F    29         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    30         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     31 
                                     32 
                           00008C    33 	STACK_SIZE=140
                           0017FF    34 	STACK_EMPTY=RAM_SIZE-1  
                           000003    35         CELL_SIZE=3
                           00003C    36         XSTACK_SIZE=CELL_SIZE*20 ; 20 * int24
                           001773    37         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    38 	FRUN=0 ; flags run code in variable flags
                           000001    39 	FTRAP=1 ; inside trap handler 
                           000002    40 	FLOOP=2 ; FOR loop in preparation 
                           000003    41 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    42 	FBREAK=4 ; break point flag 
                           000005    43 	FCOMP=5  ; compiling flags 
                                     44 
                                     45 
                           000006    46         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     47 
                           007FFF    48 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     49 
                           000008    50 	RX_QUEUE_SIZE=8 
                                     51 
                           00F424    52         TIM2_CLK_FREQ=62500
                                     53 
                           000050    54 	TIB_SIZE=80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000080    55         PAD_SIZE=BLOCK_SIZE 
                                     56 
                                     57 ;--------------------------------------
                                     58 ;   constantes related to Arduino 
                                     59 ;   API mapping 
                                     60 ;-------------------------------------
                           000000    61         INP=0
                           000001    62         OUTP=1 
                                     63 
                                     64 ;--------------------------------------
                                     65 ;       token attribute
                                     66 ;--------------------------------------
                                     67         ; bits 4:5 identify token group 
                                     68         ; 0x0n -> miscelinous 
                                     69         ; 0x1n -> +|- operators 
                                     70         ; 0x2n -> *|/|% operators
                                     71         ; 0x3n -> relational operators 
                           000080    72         TK_CMD=128      ; BASIC command   
                           000081    73         TK_IFUNC=129    ; BASIC integer function
                           000082    74         TK_CFUNC=130    ; BASIC character function
                           000083    75         TK_CONST=131    ; BASIC constant 
                           000084    76         TK_INTGR=132    ; 16 bits integer 
                           000085    77         TK_VAR=133
                           000086    78         TK_FLOAT=134    ; float32 
                           000087    79         TK_AND=135      ;
                           000088    80         TK_OR=136       ;
                           000089    81         TK_XOR=137      ; 
                           000000    82         TK_NONE=0       ; not a token 
                           000002    83         TK_QSTR=2       ; quoted string  
                           000003    84         TK_LABEL=3      ; used for defined, constants, variables
                           000004    85         TK_CHAR=4       ; ASCII character 
                           000005    86         TK_ARRAY=5     ; array variable '@' 
                           000006    87         TK_LPAREN=6     ; left parenthesis '('
                           000007    88         TK_RPAREN=7     ; right parenthesis ')'
                           000008    89         TK_COMMA=8     ; item separator ',' 
                           000009    90         TK_SHARP=9     ; print colon width '#' 
                           00000A    91         TK_COLON=0xa      ; command separator ':' 
                                     92         
                           000010    93         TK_PLUS=0x10    ; addition operator '+'
                           000011    94         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    95         TK_MULT=0x20    ; multiplication operator '*'
                           000021    96         TK_DIV=0x21     ; division operator '/'
                           000022    97         TK_MOD=0x22     ; modulo operator '%'
                                     98 
                                     99         ; don't change these token values 
                                    100         ; values chosen to be used as a mask.
                                    101         ; bit 7   1 for dictionary words else 0 
                                    102         ; bits 6  always 0 
                                    103         ; bits 5:4 identify group 
                                    104         ; bits 3:0 token identifier inside group  
                           000031   105         TK_GT=0x31      ; relation operator '>'
                           000032   106         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   107         TK_GE=0x33      ; relation operator '>='
                           000034   108         TK_LT=0x34      ; relation operator '<'
                           000036   109         TK_LE=0x36      ; relation operator '<='
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000035   110         TK_NE=0x35      ; relation operator '<>' not equal 
                                    111         ; token groups 
                           000030   112         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   113         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   114         TK_GRP_ADD=0x10  ; additive operators
                           000020   115         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   116         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   117         CMD_END=2 
                                    118 
                                    119 ;--------------------------------------
                                    120 ;   error codes 
                                    121 ;--------------------------------------
                           000000   122     ERR_NONE=0
                           000001   123     ERR_MEM_FULL=1 
                           000002   124     ERR_SYNTAX=2
                           000003   125     ERR_MATH_OVF=3
                           000004   126     ERR_DIV0=4 
                           000005   127     ERR_NO_LINE=5
                           000006   128     ERR_RUN_ONLY=6
                           000007   129     ERR_CMD_ONLY=7
                           000008   130     ERR_DUPLICATE=8
                           000009   131     ERR_NOT_FILE=9
                           00000A   132     ERR_BAD_VALUE=10
                           00000B   133     ERR_NO_ACCESS=11
                           00000C   134     ERR_NO_DATA=12 
                           00000D   135     ERR_NO_PROG=13
                           00000E   136     ERR_NO_FSPACE=14
                           00000F   137     ERR_BUF_FULL=15
                           000010   138     ERR_OVERFLOW=16 
                                    139 
                                    140 ;--------------------------------------
                                    141 ;   assembler flags 
                                    142 ;-------------------------------------
                                    143 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    144 
                                    145      .macro _usec_dly n 
                                    146     ldw x,#(16*n-2)/4
                                    147     decw x
                                    148     nop 
                                    149     jrne .-4
                                    150     .endm 
                                    151     
                                    152     ; load X register with 
                                    153     ; entry point of dictionary
                                    154     ; before calling 'search_dict'
                                    155     .macro _ldx_dict dict_name
                                    156     ldw x,#dict_name+2
                                    157     .endm 
                                    158 
                                    159     ; reset BASIC pointer
                                    160     ; to beginning of last token
                                    161     ; extracted except if it was end of line 
                                    162     .macro _unget_token 
                                    163      mov in,in.saved  
                                    164     .endm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165 
                                    166 
                                    167 ;---------------------------------------
                                    168 ;    xtack manipulation macros 
                                    169 ;    Y is used as xstack pointer  
                                    170 ;----------------------------------------
                                    171     ; pop in A:X from XSTACK 
                                    172     .macro _xpop 
                                    173     ld a,(y)
                                    174     ldw x,y 
                                    175     ldw x,(1,x)
                                    176     addw y,#CELL_SIZE 
                                    177     .endm 
                                    178 
                                    179     ; push A:X  to XSTACK 
                                    180     .macro _xpush 
                                    181     subw y,#CELL_SIZE
                                    182     ld (y),a 
                                    183     ldw (1,y),x 
                                    184     .endm 
                                    185 
                                    186     ; drop from XSTACK 
                                    187     .macro _xdrop 
                                    188     addw y,#CELL_SIZE 
                                    189     .endm 
                                    190 
                                    191     ; @T fetch top xstack 
                                    192     .macro _at_top
                                    193     ld a,(y)
                                    194     ldw x,y 
                                    195     ldw x,(1,x)
                                    196     .endm 
                                    197 
                                    198     ; @N  fetch next on xstack 
                                    199     .macro _at_next 
                                    200     ld a,(3,y)
                                    201     ldw x,y 
                                    202     ldw x,(4,x)
                                    203     .endm 
                                    204 
                                    205     ; !T put on top of xtack 
                                    206     .macro _store_top 
                                    207     ld (y),a 
                                    208     ldw (1,y),x     
                                    209     .endm 
                                    210 
                                    211     ; !N put next on xstack 
                                    212     .macro _store_next 
                                    213     ld (3,y),a 
                                    214     ldw (4,y),x 
                                    215     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CRH_IDX=CHAR_IDX+2
                           00001A    38     CRL_IDX=CRH_IDX+2
                           00001C    39     DATA_IDX=CRL_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     GPIO_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00003C    55     HEX_IDX=GPIO_IDX+2
                           00003E    56     IDR_IDX=HEX_IDX+2
                           000040    57     IF_IDX=IDR_IDX+2
                           000042    58     INPUT_IDX=IF_IDX+2
                           000044    59     INVERT_IDX=INPUT_IDX+2
                           000046    60     IWDGEN_IDX=INVERT_IDX+2
                           000048    61     IWDGREF_IDX=IWDGEN_IDX+2
                           00004A    62     KEY_IDX=IWDGREF_IDX+2
                           00004C    63     LET_IDX=KEY_IDX+2
                           00004E    64     LIST_IDX=LET_IDX+2
                           000050    65     LOG_IDX=LIST_IDX+2
                           000052    66     LSHIFT_IDX=LOG_IDX+2
                           000054    67     NEXT_IDX=LSHIFT_IDX+2
                           000056    68     NEW_IDX=NEXT_IDX+2
                           000058    69     NOT_IDX=NEW_IDX+2
                           00005A    70     ODR_IDX=NOT_IDX+2
                           00005C    71     PAD_IDX=ODR_IDX+2
                           00005E    72     PAUSE_IDX=PAD_IDX+2
                           000060    73     PMODE_IDX=PAUSE_IDX+2
                           000062    74     PEEK_IDX=PMODE_IDX+2
                           000064    75     PINP_IDX=PEEK_IDX+2
                           000066    76     POKE_IDX=PINP_IDX+2
                           000068    77     POUT_IDX=POKE_IDX+2
                           00006A    78    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           00006C    79     PRTA_IDX=PRT_IDX+2
                           00006E    80     PRTB_IDX=PRTA_IDX+2
                           000070    81     PRTC_IDX=PRTB_IDX+2
                           000072    82     PRTD_IDX=PRTC_IDX+2
                           000074    83     PRTE_IDX=PRTD_IDX+2
                           000076    84     PRTF_IDX=PRTE_IDX+2
                           000078    85     PRTG_IDX=PRTF_IDX+2
                           00007A    86     PRTH_IDX=PRTG_IDX+2
                           00007C    87     PRTI_IDX=PRTH_IDX+2
                           00007E    88     QKEY_IDX=PRTI_IDX+2
                           000080    89     READ_IDX=QKEY_IDX+2
                           000082    90     RBT_IDX=READ_IDX+2  ; REBOOT
                           000084    91 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           000086    92     REST_IDX=REM_IDX+2 ; RESTORE
                           000088    93     RET_IDX=REST_IDX+2  ; RETURN 
                           00008A    94     RND_IDX=RET_IDX+2 ; RANDOM 
                           00008C    95     RSHIFT_IDX=RND_IDX+2
                           00008E    96     RUN_IDX=RSHIFT_IDX+2
                           000090    97     FREE_IDX=RUN_IDX+2
                           000092    98     SLEEP_IDX=FREE_IDX+2
                           000094    99     SPIRD_IDX=SLEEP_IDX+2
                           000096   100     SPIEN_IDX=SPIRD_IDX+2
                           000098   101     SPISEL_IDX=SPIEN_IDX+2
                           00009A   102     SPIWR_IDX=SPISEL_IDX+2
                           00009C   103     STEP_IDX=SPIWR_IDX+2
                           00009E   104     STOP_IDX=STEP_IDX+2
                           0000A0   105     TICKS_IDX=STOP_IDX+2
                           0000A2   106     TIMER_IDX=TICKS_IDX+2
                           0000A4   107     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000A6   108     TO_IDX=TMROUT_IDX+2
                           0000A8   109     TONE_IDX=TO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           0000AA   110     UBOUND_IDX=TONE_IDX+2
                           0000AC   111     UFLASH_IDX=UBOUND_IDX+2
                           0000AE   112     UNTIL_IDX=UFLASH_IDX+2
                           0000B0   113     USR_IDX=UNTIL_IDX+2
                           0000B2   114     WAIT_IDX=USR_IDX+2
                           0000B4   115     WORDS_IDX=WAIT_IDX+2
                           0000B6   116     WRITE_IDX=WORDS_IDX+2
                           0000B8   117     SIZE_IDX=WRITE_IDX+2 
                           0000BA   118     ON_IDX=SIZE_IDX+2 
                           0000BC   119     GET_IDX=ON_IDX+2
                           0000BE   120     CONST_IDX=GET_IDX+2
                           0000C0   121     EEFREE_IDX=CONST_IDX+2 ; (121-25)*2=192
                                    122      
                                    123     ; keep these 3 at end 
                           0000FA   124     AND_IDX=250 
                           0000FC   125     OR_IDX=252 
                           0000FE   126     XOR_IDX=254    
                                    127 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                     34 	.include "dbg_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;----------------------------------
                                     21 ;  macros used for debugging
                                     22 ;---------------------------------
                                     23 ;-------------------------------
                                     24 ;  macros used to help debugging
                                     25 ;-------------------------------
                                     26     
                           000009    27     DBG_CC=9
                           000008    28     DBG_A=8 
                           000006    29     DBG_X=6 
                           000004    30     DBG_Y=4 
                                     31     .macro _dbg_save_regs 
                                     32     .if DEBUG 
                                     33     push cc ; (9,sp)
                                     34     push a   ; (8,sp)
                                     35     pushw x  ; (6,sp)
                                     36     pushw y  ; (4,sp)
                                     37     ; save acc24 
                                     38     ld a,acc24 
                                     39     ldw x,acc16 
                                     40     pushw x 
                                     41     push a 
                                     42     .endif 
                                     43     .endm 
                                     44 
                                     45     .macro _dbg_restore_regs 
                                     46     ; restore acc24 
                                     47     .if DEBUG 
                                     48     pop a 
                                     49     popw x 
                                     50     ld acc24,a 
                                     51     ldw acc16,x 
                                     52     popw y 
                                     53     popw x 
                                     54     pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     55     pop cc 
                                     56     .endif 
                                     57     .endm 
                                     58 
                                     59     .macro _dbg_getc
                                     60     .if DEBUG  
                                     61     _dbg_save_regs 
                                     62     call getc
                                     63     ld (DBG_A,sp),a 
                                     64     _dbg_restore_regs
                                     65     .endif   
                                     66     .endm 
                                     67 
                                     68     .macro _dbg_putc
                                     69     .if DEBUG  
                                     70     push cc 
                                     71     call putc 
                                     72     pop cc 
                                     73     .endif 
                                     74     .endm 
                                     75 
                                     76     .macro _dbg_puts
                                     77     .if DEBUG  
                                     78     _dbg_save_regs
                                     79     call puts 
                                     80     _dbg_restore_regs
                                     81     .endif 
                                     82     .endm 
                                     83 
                                     84     .macro _dbg_prti24 
                                     85     .if DEBUG 
                                     86     _dbg_save_regs
                                     87     call prti24 
                                     88     _dbg_restore_regs
                                     89     .endif 
                                     90     .endm 
                                     91 
                                     92     .macro _dbg_prt_regs
                                     93     .if DEBUG 
                                     94     call print_registers
                                     95     .endif  
                                     96     .endm 
                                     97 
                                     98     .macro _dbg_peek addr 
                                     99     .if DEBUG 
                                    100     _dbg_save_regs 
                                    101     ldw x,addr 
                                    102     call peek     
                                    103     _dbg_restore_regs
                                    104     .endif 
                                    105     .endm 
                                    106 
                                    107     .macro _dbg_parser_init 
                                    108     .if DEBUG 
                                    109     _dbg_save_regs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                    110     call parser_init 
                                    111     _dbg_restore_regs
                                    112     .endif 
                                    113     .endm
                                    114 
                                    115     .macro _dbg_readln
                                    116     .if DEBUG 
                                    117     _dbg_save_regs
                                    118     call readln
                                    119     _dbg_restore_regs
                                    120     .endif 
                                    121     .endm
                                    122 
                                    123     .macro _dbg_number
                                    124     .if DEBUG 
                                    125     _dbg_save_regs
                                    126     call number 
                                    127     _dbg_restore_regs
                                    128     .endif 
                                    129     .endm  
                                    130 
                                    131     .macro _dbg_nextword
                                    132     .if DEBUG 
                                    133     _dbg_save_regs
                                    134     call get_token   
                                    135     _dbg_restore_regs
                                    136     .endif 
                                    137     .endm  
                                    138 
                                    139     .macro _dbg_dots 
                                    140     .if DEBUG 
                                    141     _dbg_save_regs
                                    142     call dots 
                                    143     _dbg_restore_regs
                                    144     .endif 
                                    145     .endm 
                                    146 
                                    147     .macro _dbg_trap
                                    148     bset flags,#FTRAP 
                                    149     trap 
                                    150     .endm 
                                    151 
                                    152     .macro _dbg_mark n  
                                    153     .if DEBUG 
                                    154     push cc
                                    155     push a 
                                    156     ld a,#n 
                                    157     call putc
                                    158     btjf UART1_SR,#UART_SR_TC,. 
                                    159     pop a 
                                    160     pop cc 
                                    161     .endif 
                                    162     .endm 
                                    163     
                                    164     .macro _dbg_prt_var var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    165     .if DEBUG 
                                    166     _dbg_save_regs 
                                    167     ldw x,var 
                                    168     ldw acc16,x 
                                    169     clr acc24 
                                    170     clrw x 
                                    171     ld a,#16+128  
                                    172     call prti24
                                    173     ld a,#CR 
                                    174     call putc  
                                    175     _dbg_restore_regs
                                    176     .endif  
                                    177     .endm 
                                    178 
                                    179     .macro _dbg_show
                                    180     .if DEBUG  
                                    181     _dbg_save_regs 
                                    182     call show 
                                    183     _dbg_restore_regs
                                    184     .endif 
                                    185     .endm 
                                    186 
                                    187 
                                    188 
                                    189 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                     35   
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001668                         41     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016B8                         43 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         44 pad:: .ds PAD_SIZE             ; working buffer
      001738                         45 xstack_full:: .ds XSTACK_SIZE   ; expression stack 
      001774                         46 xstack_unf:: ; xstack underflow 
      001774                         47 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         48 stack_unf: ; stack underflow ; control_stack bottom 
                                     49 
                                     50 ;;--------------------------------------
                                     51     .area HOME 
                                     52 ;; interrupt vector table at 0x8000
                                     53 ;;--------------------------------------
                                     54 
      000000 82 00 00 C3             55     int cold_start			; RESET vector 
                           000001    56 .if DEBUG
      000004 82 00 00 12             57 	int TrapHandler 		;TRAP  software interrupt
                           000000    58 .else
                                     59 	int NonHandledInterrupt ;TRAP  software interrupt
                                     60 .endif
      000008 82 00 00 00             61 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             62 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             63 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             64 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             65 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             66 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             67 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 44             68 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             69 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             70 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             71 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             72 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             73 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             74 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             75 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             76 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             77 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             78 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 D2             79 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             80 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             81 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             82 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             83 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 21             84 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             85 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             86 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             87 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             88 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             89 	int NonHandledInterrupt ;int28  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      00007C 82 00 00 00             90 	int NonHandledInterrupt ;int29  not used
                                     91 
                                     92 ;---------------------------------------
                                     93     .area CODE
                                     94 ;---------------------------------------
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; non handled interrupt 
                                     98 ; reset MCU
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        100 NonHandledInterrupt:
      000000                        101 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ; auto wakeup from halt
                                    105 ; at iret, program continue 
                                    106 ; after hatl instruction
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        108 AWUHandler:
      000004 72 19 50 F0      [ 1]  109 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  110 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  111 	clr AWU_TBR 
      000011 80               [11]  112 	iret
                                    113 
                                    114 ;------------------------------------
                                    115 ; software interrupt handler  
                                    116 ;------------------------------------
                           000001   117 .if DEBUG 
      000012                        118 TrapHandler:
      000012 72 12 00 22      [ 1]  119 	bset flags,#FTRAP 
      000016 CD 04 C5         [ 4]  120 	call print_registers
      000019 CD 05 70         [ 4]  121 	call cmd_itf
      00001C 72 13 00 22      [ 1]  122 	bres flags,#FTRAP 	
      000020 80               [11]  123 	iret
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ; ticks range {0..2^23-1}
                                    131 ;--------------------------------
      000021                        132 Timer4UpdateHandler:
      000021 72 5F 53 42      [ 1]  133 	clr TIM4_SR 
      000025 C6 00 0F         [ 1]  134 	ld a,ticks 
      000028 CE 00 10         [ 2]  135 	ldw x,ticks+1
      00002B 1C 00 01         [ 2]  136 	addw x,#1 
      00002E A9 00            [ 1]  137 	adc a,#0 
      000030 2A 02            [ 1]  138 	jrpl 0$
                                    139 ; reset to 0 when negatif 
      000032 4F               [ 1]  140 	clr a 
      000033 5F               [ 1]  141 	clrw x 
      000034 C7 00 0F         [ 1]  142 0$:	ld ticks,a 
      000037 CF 00 10         [ 2]  143 	ldw ticks+1,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      00003A CE 00 12         [ 2]  144 	ldw x,timer
      00003D 27 04            [ 1]  145 	jreq 1$
      00003F 5A               [ 2]  146 	decw x 
      000040 CF 00 12         [ 2]  147 	ldw timer,x 
      000043                        148 1$:	
      000043 80               [11]  149 	iret 
                                    150 
                                    151 ;------------------------------------
                                    152 ; Triggered by pressing USER UserButton 
                                    153 ; on NUCLEO card.
                                    154 ; This is used to abort a progam lock 
                                    155 ; in infinite loop. 
                                    156 ;------------------------------------
      000044                        157 UserButtonHandler:
                                    158 ; wait button release
      000044 5F               [ 1]  159 	clrw x
      000045 5A               [ 2]  160 1$: decw x 
      000046 26 FD            [ 1]  161 	jrne 1$
      000048 72 09 50 15 F8   [ 2]  162 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    163 ; if MCU suspended by SLEEP resume program
      00004D 72 07 00 22 05   [ 2]  164     btjf flags,#FSLEEP,2$
      000052 72 17 00 22      [ 1]  165 	bres flags,#FSLEEP 
      000056 80               [11]  166 	iret
      000057                        167 2$:	
      000057                        168 user_interrupted:
      000057 72 00 00 22 02   [ 2]  169     btjt flags,#FRUN,4$
      00005C 20 0A            [ 2]  170 	jra UBTN_Handler_exit 
      00005E                        171 4$:	; program interrupted by user 
      00005E 72 11 00 22      [ 1]  172 	bres flags,#FRUN 
      000062 AE 00 70         [ 2]  173 	ldw x,#USER_ABORT
      000065 CD 09 A1         [ 4]  174 	call puts 
      000068                        175 UBTN_Handler_exit:
      000068 AE 17 FF         [ 2]  176     ldw x,#STACK_EMPTY 
      00006B 94               [ 1]  177     ldw sp,x
      00006C 9A               [ 1]  178 	rim 
      00006D CC 17 48         [ 2]  179 5$:	jp warm_start
                                    180 
      000070 0A 50 72 6F 67 72 61   181 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    182 
                                    183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    184 ;    peripherals initialization
                                    185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    186 
                                    187 ;----------------------------------------
                                    188 ; inialize MCU clock 
                                    189 ; input:
                                    190 ;   A 		source  HSI | 1 HSE 
                                    191 ;   XL      CLK_CKDIVR , clock divisor 
                                    192 ; output:
                                    193 ;   none 
                                    194 ;----------------------------------------
      00008B                        195 clock_init:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00008B C1 50 C3         [ 1]  196 	cp a,CLK_CMSR 
      00008E 27 0C            [ 1]  197 	jreq 2$ ; no switching required 
                                    198 ; select clock source 
      000090 72 12 50 C5      [ 1]  199 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000094 C7 50 C4         [ 1]  200 	ld CLK_SWR,a
      000097 C1 50 C3         [ 1]  201 1$:	cp a,CLK_CMSR
      00009A 26 FB            [ 1]  202 	jrne 1$
      00009C                        203 2$: 	
                                    204 ; HSI and cpu clock divisor 
      00009C 9F               [ 1]  205 	ld a,xl 
      00009D C7 50 C6         [ 1]  206 	ld CLK_CKDIVR,a  
      0000A0 81               [ 4]  207 	ret
                                    208 
                                    209 ;----------------------------------
                                    210 ; TIMER2 used as audio tone output 
                                    211 ; on port D:5.
                                    212 ; channel 1 configured as PWM mode 1 
                                    213 ;-----------------------------------  
                                    214 
      0000A1                        215 timer2_init:
      0000A1 72 1A 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000A5 35 60 53 05      [ 1]  217  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000A9 35 08 53 0C      [ 1]  218 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000AD 81               [ 4]  219 	ret 
                                    220 
                                    221 ;---------------------------------
                                    222 ; TIM4 is configured to generate an 
                                    223 ; interrupt every millisecond 
                                    224 ;----------------------------------
      0000AE                        225 timer4_init:
      0000AE 72 18 50 C7      [ 1]  226 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000B2 35 07 53 45      [ 1]  227 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B6 35 7D 53 46      [ 1]  228 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BA 35 05 53 40      [ 1]  229 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BE 72 10 53 41      [ 1]  230 	bset TIM4_IER,#TIM4_IER_UIE
      0000C2 81               [ 4]  231 	ret
                                    232 
                                    233 ;-------------------------------------
                                    234 ;  initialization entry point 
                                    235 ;-------------------------------------
      0000C3                        236 cold_start:
                                    237 ;set stack 
      0000C3 AE 17 FF         [ 2]  238 	ldw x,#STACK_EMPTY
      0000C6 94               [ 1]  239 	ldw sp,x
                                    240 ; clear all ram 
      0000C7 7F               [ 1]  241 0$: clr (x)
      0000C8 5A               [ 2]  242 	decw x 
      0000C9 26 FC            [ 1]  243 	jrne 0$
                                    244 ; activate pull up on all inputs 
      0000CB A6 FF            [ 1]  245 	ld a,#255 
      0000CD C7 50 03         [ 1]  246 	ld PA_CR1,a 
      0000D0 C7 50 08         [ 1]  247 	ld PB_CR1,a 
      0000D3 C7 50 0D         [ 1]  248 	ld PC_CR1,a 
      0000D6 C7 50 12         [ 1]  249 	ld PD_CR1,a 
      0000D9 C7 50 17         [ 1]  250 	ld PE_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      0000DC C7 50 1C         [ 1]  251 	ld PF_CR1,a 
      0000DF C7 50 21         [ 1]  252 	ld PG_CR1,a 
      0000E2 C7 50 2B         [ 1]  253 	ld PI_CR1,a
                                    254 ; set LD2 pin as output 
      0000E5 72 1A 50 0D      [ 1]  255     bset PC_CR1,#LED2_BIT
      0000E9 72 1A 50 0E      [ 1]  256     bset PC_CR2,#LED2_BIT
      0000ED 72 1A 50 0C      [ 1]  257     bset PC_DDR,#LED2_BIT
      0000F1 72 1B 50 0A      [ 1]  258 	bres PC_ODR,#LED2_BIT 
                                    259 ; disable schmitt triggers on Arduino CN4 analog inputs
      0000F5 55 00 3F 54 07   [ 1]  260 	mov ADC_TDRL,0x3f
                                    261 ; disable peripherals clocks
                                    262 ;	clr CLK_PCKENR1 
                                    263 ;	clr CLK_PCKENR2
      0000FA 72 5F 50 F2      [ 1]  264 	clr AWU_TBR 
      0000FE 72 14 50 CA      [ 1]  265 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    266 ; select internal clock no divisor: 16 Mhz 	
      000102 A6 E1            [ 1]  267 	ld a,#CLK_SWR_HSI 
      000104 5F               [ 1]  268 	clrw x  
      000105 CD 00 8B         [ 4]  269     call clock_init 
      000108 CD 00 AE         [ 4]  270 	call timer4_init
      00010B CD 00 A1         [ 4]  271 	call timer2_init
                                    272 ; UART1 at 115200 BAUD
      00010E CD 08 FF         [ 4]  273 	call uart1_init
                                    274 ; activate PE_4 (user button interrupt)
      000111 72 18 50 18      [ 1]  275     bset PE_CR2,#USR_BTN_BIT 
                                    276 ; display system information
      000115 9A               [ 1]  277 	rim ; enable interrupts 
      000116 72 5C 00 17      [ 1]  278 	inc seedy+1 
      00011A 72 5C 00 15      [ 1]  279 	inc seedx+1 
      00011E CD 1D 3B         [ 4]  280 	call func_eefree 
      000121 CD 1C 72         [ 4]  281 	call ubound 
      000124 CD 15 18         [ 4]  282 	call clear_basic
      000127 CD 25 7C         [ 4]  283 	call beep_1khz  
      00012A CD 14 C5         [ 4]  284 	call system_information
      00012D                        285 2$:	
                                    286 ; check for application in flash memory 
      00012D CD 27 B1         [ 4]  287 	call qsign 
      000130 27 03            [ 1]  288 	jreq run_app
      000132 CC 17 48         [ 2]  289 	jp warm_start 
      000135                        290 run_app:
                                    291 ; run application in FLASH|EEPROM 
      000135 90 CE 17 73      [ 2]  292 	ldw y,XSTACK_EMPTY
      000139 CD 14 F6         [ 4]  293 	call warm_init
      00013C AE 36 04         [ 2]  294 	ldw x,#app 
      00013F CF 00 1B         [ 2]  295 	ldw txtbgn,x
      000142 72 BB 36 02      [ 2]  296 	addw x,app_size 
      000146 CF 00 1D         [ 2]  297 	ldw txtend,x 
      000149 AE 01 57         [ 2]  298 	ldw x,#AUTO_RUN 
      00014C CD 09 A1         [ 4]  299 	call puts 
      00014F CD 1E 5F         [ 4]  300 	call program_info 
      000152 CC 25 20         [ 2]  301 	jp run_it_02  
      000155 20 FE            [ 2]  302     jra .  
                                    303 
      000157 20 61 75 74 6F 20 72   304 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic 
                                     21 ;;  format in registers: A:X 
                                     22 ;;      A  bits 23..16 
                                     23 ;;      X  bits 15..0 
                                     24 ;;  acc24 variable used for 
                                     25 ;;  computation 
                                     26 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     27 
                                     28 
                                     29     .area CODE 
                                     30 
                                     31 ;-------------------------------
                                     32 ; add24 A:X+acc24 
                                     33 ; add 24 bits integers 
                                     34 ;------------------------------
      00016A                         35 add24: ; ( i1 i2 -- i1 + i2 )
      00016A                         36     _xpop 
      00016A 90 F6            [ 1]    1     ld a,(y)
      00016C 93               [ 1]    2     ldw x,y 
      00016D EE 01            [ 2]    3     ldw x,(1,x)
      00016F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000173 89               [ 2]   37     pushw x  
      000174 88               [ 1]   38     push a  
      000175                         39     _at_top  
      000175 90 F6            [ 1]    1     ld a,(y)
      000177 93               [ 1]    2     ldw x,y 
      000178 EE 01            [ 2]    3     ldw x,(1,x)
      00017A 72 FB 02         [ 2]   40     addw x,(2,sp)
      00017D 19 01            [ 1]   41     adc a, (1,sp)
      00017F                         42     _store_top 
      00017F 90 F7            [ 1]    1     ld (y),a 
      000181 90 EF 01         [ 2]    2     ldw (1,y),x     
      000184                         43     _drop 3 
      000184 5B 03            [ 2]    1     addw sp,#3 
      000186 81               [ 4]   44     ret 
                                     45 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                     46 ;-------------------------------
                                     47 ; sub24 A:X-acc24 
                                     48 ; subtract 24 bits integers 
                                     49 ;------------------------------
      000187                         50 sub24: ; (i1 i2 -- i1-i2 ) 
      000187                         51     _xpop 
      000187 90 F6            [ 1]    1     ld a,(y)
      000189 93               [ 1]    2     ldw x,y 
      00018A EE 01            [ 2]    3     ldw x,(1,x)
      00018C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000190 89               [ 2]   52     pushw x 
      000191 88               [ 1]   53     push  a
      000192                         54     _at_top  
      000192 90 F6            [ 1]    1     ld a,(y)
      000194 93               [ 1]    2     ldw x,y 
      000195 EE 01            [ 2]    3     ldw x,(1,x)
      000197 72 F0 02         [ 2]   55     subw x,(2,sp) 
      00019A 12 01            [ 1]   56     sbc a, (1,sp)
      00019C                         57     _store_top  
      00019C 90 F7            [ 1]    1     ld (y),a 
      00019E 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001A1                         58     _drop 3 
      0001A1 5B 03            [ 2]    1     addw sp,#3 
      0001A3 81               [ 4]   59     ret 
                                     60 
                                     61 ;------------------------------
                                     62 ; cp24  i1 i2 -- 0x800000|0|0x010000
                                     63 ;------------------------------
      0001A4                         64 cp24:
      0001A4                         65     _xpop 
      0001A4 90 F6            [ 1]    1     ld a,(y)
      0001A6 93               [ 1]    2     ldw x,y 
      0001A7 EE 01            [ 2]    3     ldw x,(1,x)
      0001A9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001AD C7 00 0C         [ 1]   66     ld acc24,a 
      0001B0 CF 00 0D         [ 2]   67     ldw acc16,x
      0001B3                         68     _at_top 
      0001B3 90 F6            [ 1]    1     ld a,(y)
      0001B5 93               [ 1]    2     ldw x,y 
      0001B6 EE 01            [ 2]    3     ldw x,(1,x)
      0001B8 72 B0 00 0D      [ 2]   69     subw x,acc16
      0001BC C2 00 0C         [ 1]   70     sbc a,acc24
      0001BF 2F 08            [ 1]   71     jrslt 1$
      0001C1 26 0A            [ 1]   72     jrne 2$
      0001C3 5D               [ 2]   73     tnzw x 
      0001C4 26 07            [ 1]   74     jrne 2$
      0001C6 4F               [ 1]   75     clr a 
      0001C7 20 06            [ 2]   76     jra 9$ 
      0001C9                         77 1$: ; i1 < i2 
      0001C9 A6 FF            [ 1]   78     ld a,#255
      0001CB 20 02            [ 2]   79     jra 9$ 
      0001CD                         80 2$: ; i1 > i2 
      0001CD A6 01            [ 1]   81     ld a,#1 
      0001CF 5F               [ 1]   82 9$: clrw x
      0001D0                         83      _store_top 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      0001D0 90 F7            [ 1]    1     ld (y),a 
      0001D2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001D5 81               [ 4]   84     ret 
                                     85 
                                     86 ;-------------------------------
                                     87 ; cp24_ax 
                                     88 ; compare acc24 with A:X 
                                     89 ;-------------------------------
      0001D6                         90 cp24_ax:
      0001D6 88               [ 1]   91     push a 
      0001D7 C3 00 0D         [ 2]   92     cpw x,acc16 
      0001DA C2 00 0C         [ 1]   93     sbc a,acc24
      0001DD 84               [ 1]   94     pop a 
      0001DE 81               [ 4]   95     ret 
                                     96 
                                     97 
                                     98 ;-------------------------------
                                     99 ; abs24 
                                    100 ; abolute value of top  
                                    101 ;-------------------------------
      0001DF                        102 abs24: ; ( i -- u )
      0001DF 90 F6            [ 1]  103     ld a,(y)
      0001E1 A1 80            [ 1]  104     cp a,#0x80 
      0001E3 2A 0E            [ 1]  105     jrpl neg24 ; negative integer
      0001E5 81               [ 4]  106     ret  
                                    107 
                                    108 ;----------------------------
                                    109 ;  one's compleement 
                                    110 ;----------------------------
      0001E6                        111 cpl24:  ; i -- ~i 
      0001E6                        112     _at_top 
      0001E6 90 F6            [ 1]    1     ld a,(y)
      0001E8 93               [ 1]    2     ldw x,y 
      0001E9 EE 01            [ 2]    3     ldw x,(1,x)
      0001EB 43               [ 1]  113     cpl a 
      0001EC 53               [ 2]  114     cplw x 
      0001ED                        115     _store_top 
      0001ED 90 F7            [ 1]    1     ld (y),a 
      0001EF 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001F2 81               [ 4]  116     ret 
                                    117 
                                    118 ;----------------------------    
                                    119 ; two'2 complement of top  
                                    120 ;---------------------------
      0001F3                        121 neg24: ; (i -- -i )
      0001F3                        122     _at_top
      0001F3 90 F6            [ 1]    1     ld a,(y)
      0001F5 93               [ 1]    2     ldw x,y 
      0001F6 EE 01            [ 2]    3     ldw x,(1,x)
      0001F8 43               [ 1]  123     cpl  a  
      0001F9 53               [ 2]  124     cplw x 
      0001FA 1C 00 01         [ 2]  125     addw x,#1
      0001FD A9 00            [ 1]  126     adc a,#0
      0001FF                        127     _store_top  
      0001FF 90 F7            [ 1]    1     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000201 90 EF 01         [ 2]    2     ldw (1,y),x     
      000204 81               [ 4]  128 9$: ret 
                                    129 
                                    130 ;-----------------------------
                                    131 ; negate integer in A:X 
                                    132 ;----------------------------
      000205                        133 neg_ax:
      000205 43               [ 1]  134     cpl  a  
      000206 53               [ 2]  135     cplw x 
      000207 1C 00 01         [ 2]  136     addw x,#1
      00020A A9 00            [ 1]  137     adc a,#0
      00020C 81               [ 4]  138     ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ;  two's complement of acc24 
                                    142 ;-------------------------------------
      00020D                        143 neg_acc24: ; 
      00020D 72 53 00 0C      [ 1]  144     cpl acc24 
      000211 72 53 00 0D      [ 1]  145     cpl acc16 
      000215 72 53 00 0E      [ 1]  146     cpl acc8
      000219 72 5C 00 0E      [ 1]  147     inc acc8 
      00021D 26 0A            [ 1]  148     jrne 9$
      00021F 72 5C 00 0D      [ 1]  149     inc acc16 
      000223 26 04            [ 1]  150     jrne 9$
      000225 72 5C 00 0C      [ 1]  151     inc acc24 
      000229 81               [ 4]  152 9$: ret 
                                    153 
                                    154 
                                    155 ;--------------------------------------
                                    156 ; unsigned multiply uint24_t by uint8_t
                                    157 ; input:
                                    158 ;	acc24	uint24_t 
                                    159 ;   A		uint8_t
                                    160 ; output:
                                    161 ;   acc24   A*acc24
                                    162 ;      A    overflow, bits 31..24 
                                    163 ;-------------------------------------
                                    164 ; local variables offset  on sp
                           000001   165 	U8   = 1   ; A pushed on stack
                           000001   166 	VSIZE = 1 
      00022A                        167 mulu24_8:
      00022A 89               [ 2]  168 	pushw x    ; save X
                                    169 	; local variable
      00022B 88               [ 1]  170 	push a     ; U8
      00022C 72 5F 00 0B      [ 1]  171 	clr acc32 
                                    172 ; multiply bits 7..0 * U8   	
      000230 97               [ 1]  173 	ld xl,a 
      000231 C6 00 0E         [ 1]  174 	ld a,acc8 
      000234 42               [ 4]  175 	mul x,a 
      000235 C6 00 0D         [ 1]  176 	ld a, acc16 
      000238 CF 00 0D         [ 2]  177 	ldw acc16,x
                                    178 ; multiply middle byte, bits 15..8 * U8  	
      00023B 97               [ 1]  179 	ld xl,a 
      00023C 7B 01            [ 1]  180 	ld a,(U8,sp)
      00023E 42               [ 4]  181 	mul x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00023F C6 00 0C         [ 1]  182 	ld a,acc24
      000242 72 5F 00 0C      [ 1]  183 	clr acc24  
      000246 72 BB 00 0C      [ 2]  184 	addw x,acc24
      00024A CF 00 0C         [ 2]  185 	ldw acc24,x 
                                    186 ; multiply  MSB, bits 23..16 * U8 
      00024D 97               [ 1]  187 	ld xl,a 
      00024E 7B 01            [ 1]  188 	ld a,(U8,sp)
      000250 42               [ 4]  189 	mul x,a
      000251 72 BB 00 0B      [ 2]  190 	addw x,acc32  
      000255 CF 00 0B         [ 2]  191 	ldw acc32,x 
      000258 9E               [ 1]  192 	ld a,xh 
      000259                        193 	_drop VSIZE  
      000259 5B 01            [ 2]    1     addw sp,#VSIZE 
      00025B 85               [ 2]  194 	popw x 
      00025C 81               [ 4]  195 	ret 
                                    196 
                                    197 
                                    198 ;-------------------------------
                                    199 ; mul24 i1 i2 -- i1*i2  
                                    200 ; multiply 24 bits integers 
                                    201 ;------------------------------
                           000001   202     PROD=1 
                           000004   203     N1=4
                           000007   204     N2=7
                           00000A   205     PROD_SIGN=10
                           00000A   206     VSIZE=10 
      00025D                        207 mul24:
      00025D                        208     _vars VSIZE
      00025D 52 0A            [ 2]    1     sub sp,#VSIZE 
      00025F 0F 0A            [ 1]  209     clr (PROD_SIGN,sp)
      000261 0F 01            [ 1]  210     clr (PROD,sp)
      000263 5F               [ 1]  211     clrw x 
      000264 1F 02            [ 2]  212     ldw (PROD+1,sp),x
      000266                        213     _xpop 
      000266 90 F6            [ 1]    1     ld a,(y)
      000268 93               [ 1]    2     ldw x,y 
      000269 EE 01            [ 2]    3     ldw x,(1,x)
      00026B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00026F 4D               [ 1]  214     tnz a 
      000270 2A 05            [ 1]  215     jrpl 0$
      000272 03 0A            [ 1]  216     cpl (PROD_SIGN,sp)
      000274 CD 02 05         [ 4]  217     call neg_ax 
      000277                        218 0$:    
      000277 6B 04            [ 1]  219     ld (N1,sp),a 
      000279 1F 05            [ 2]  220     ldw (N1+1,sp),x
      00027B                        221     _at_top 
      00027B 90 F6            [ 1]    1     ld a,(y)
      00027D 93               [ 1]    2     ldw x,y 
      00027E EE 01            [ 2]    3     ldw x,(1,x)
      000280 4D               [ 1]  222     tnz a 
      000281 2A 09            [ 1]  223     jrpl 2$ 
      000283 03 0A            [ 1]  224     cpl (PROD_SIGN,sp) 
      000285 CD 02 05         [ 4]  225     call neg_ax
      000288 6B 07            [ 1]  226     ld (N2,sp),a 
      00028A 1F 08            [ 2]  227     ldw (N2+1,sp),x   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00028C                        228 2$: 
      00028C C7 00 0C         [ 1]  229     ld acc24,a 
      00028F CF 00 0D         [ 2]  230     ldw acc16,x 
      000292 7B 06            [ 1]  231     ld a,(N1+2,sp); least byte     
      000294 27 12            [ 1]  232     jreq 4$
      000296 CD 02 2A         [ 4]  233     call mulu24_8
      000299 4D               [ 1]  234     tnz a 
      00029A 26 60            [ 1]  235     jrne 8$ ; overflow 
      00029C CE 00 0D         [ 2]  236     ldw x,acc16  
      00029F C6 00 0C         [ 1]  237     ld a,acc24
      0002A2 2B 58            [ 1]  238     jrmi 8$ ; overflow  
      0002A4 6B 01            [ 1]  239     ld (PROD,sp),a
      0002A6 1F 02            [ 2]  240     ldw (PROD+1,sp),x 
      0002A8                        241 4$:
      0002A8 7B 07            [ 1]  242     ld a,(N2,sp) 
      0002AA 1E 08            [ 2]  243     ldw x,(N2+1,sp)
      0002AC C7 00 0C         [ 1]  244     ld acc24,a 
      0002AF CF 00 0D         [ 2]  245     ldw acc16,x 
      0002B2 7B 05            [ 1]  246     ld a,(N1+1,sp); middle byte     
      0002B4 27 1F            [ 1]  247     jreq 5$
      0002B6 CD 02 2A         [ 4]  248     call mulu24_8
      0002B9 4D               [ 1]  249     tnz a 
      0002BA 26 40            [ 1]  250     jrne 8$ ; overflow 
      0002BC C6 00 0C         [ 1]  251     ld a,acc24 
      0002BF 26 3B            [ 1]  252     jrne 8$  ; overflow 
      0002C1 CE 00 0D         [ 2]  253     ldw x,acc16  
      0002C4 72 FB 01         [ 2]  254     addw x,(PROD,sp)
      0002C7 29 33            [ 1]  255     jrv 8$ ; overflow
      0002C9 1F 01            [ 2]  256     ldw (PROD,sp),x 
      0002CB 7B 07            [ 1]  257     ld a,(N2,sp)
      0002CD 1E 08            [ 2]  258     ldw x,(N2+1,sp)
      0002CF C7 00 0C         [ 1]  259     ld acc24,a 
      0002D2 CF 00 0D         [ 2]  260     ldw acc16,x 
      0002D5                        261 5$:
      0002D5 7B 04            [ 1]  262     ld a,(N1,sp) ; high byte 
      0002D7 27 16            [ 1]  263     jreq 6$
      0002D9 CD 02 2A         [ 4]  264     call mulu24_8
      0002DC 4D               [ 1]  265     tnz a 
      0002DD 26 1D            [ 1]  266     jrne 8$ ; overflow 
      0002DF CE 00 0C         [ 2]  267     ldw x,acc24 
      0002E2 26 18            [ 1]  268     jrne 8$ ; overflow 
      0002E4 C6 00 0E         [ 1]  269     ld a,acc8 
      0002E7 2B 13            [ 1]  270     jrmi 8$ ; overflow 
      0002E9 1B 01            [ 1]  271     add a,(PROD,sp)
      0002EB 6B 01            [ 1]  272     ld (PROD,sp),a 
      0002ED 29 0D            [ 1]  273     jrv 8$ ; overflow 
      0002EF                        274 6$:
      0002EF 7B 01            [ 1]  275     ld a,(PROD,sp)
      0002F1 1E 02            [ 2]  276     ldw x,(PROD+1,sp)
      0002F3 0D 0A            [ 1]  277     tnz (PROD_SIGN,sp)
      0002F5 27 0A            [ 1]  278     jreq 9$
      0002F7 CD 02 05         [ 4]  279     call neg_ax 
      0002FA 20 05            [ 2]  280     jra 9$ 
      0002FC                        281 8$: ; overflow
      0002FC A6 10            [ 1]  282     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0002FE CC 16 BE         [ 2]  283     jp tb_error 
      000301                        284 9$:    
      000301                        285     _store_top 
      000301 90 F7            [ 1]    1     ld (y),a 
      000303 90 EF 01         [ 2]    2     ldw (1,y),x     
      000306                        286     _drop VSIZE 
      000306 5B 0A            [ 2]    1     addw sp,#VSIZE 
      000308 81               [ 4]  287     ret 
                                    288 
                                    289 ;-------------------------------------
                                    290 ; divide uint24_t by uint8_t
                                    291 ; input:
                                    292 ;	acc24	dividend
                                    293 ;   A 		divisor
                                    294 ; output:
                                    295 ;   acc24	quotient
                                    296 ;   A		remainder
                                    297 ;------------------------------------- 
                                    298 ; offset  on sp of arguments and locals
                           000001   299 	U8   = 1   ; divisor on stack
                           000001   300 	VSIZE =1
      000309                        301 divu24_8:
      000309 89               [ 2]  302 	pushw x ; save x
      00030A 88               [ 1]  303 	push a 
                                    304 	; ld dividend UU:MM bytes in X
      00030B CE 00 0C         [ 2]  305 	ldw x,acc24
      00030E 7B 01            [ 1]  306 	ld a,(U8,SP) ; divisor
      000310 62               [ 2]  307 	div x,a ; UU:MM/U8
      000311 88               [ 1]  308 	push a  ;save remainder
      000312 CF 00 0C         [ 2]  309     ldw acc24,x ; quotient 
      000315 84               [ 1]  310 	pop a
      000316 95               [ 1]  311 	ld xh,a
      000317 C6 00 0E         [ 1]  312 	ld a,acc8
      00031A 97               [ 1]  313 	ld xl,a
      00031B 7B 01            [ 1]  314 	ld a,(U8,sp) ; divisor
      00031D 62               [ 2]  315 	div x,a  ; R:LL/U8
      00031E 6B 01            [ 1]  316 	ld (U8,sp),a ; save remainder
      000320 9F               [ 1]  317 	ld a,xl
      000321 C7 00 0E         [ 1]  318 	ld acc8,a
      000324 84               [ 1]  319 	pop a
      000325 85               [ 2]  320 	popw x
      000326 81               [ 4]  321 	ret
                                    322 
                                    323 
                                    324 ;-------------------------------
                                    325 ; div24 N/T   
                                    326 ; divide 24 bits integers
                                    327 ;  i1 i2 -- i1/i2 
                                    328 ;------------------------------
                           000001   329     DIVISOR=1
                           000004   330     CNTR=4
                           000005   331     QSIGN=5
                           000006   332     RSIGN=6 
                           000006   333     VSIZE=6 
      000327                        334 div24:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000327                        335     _vars VSIZE 
      000327 52 06            [ 2]    1     sub sp,#VSIZE 
      000329 0F 06            [ 1]  336     clr (RSIGN,sp)
      00032B 0F 05            [ 1]  337     clr (QSIGN,sp)
      00032D                        338     _xpop 
      00032D 90 F6            [ 1]    1     ld a,(y)
      00032F 93               [ 1]    2     ldw x,y 
      000330 EE 01            [ 2]    3     ldw x,(1,x)
      000332 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000336 4D               [ 1]  339     tnz a 
      000337 2A 05            [ 1]  340     jrpl 0$ 
      000339 03 05            [ 1]  341     cpl (QSIGN,sp)
      00033B CD 02 05         [ 4]  342     call neg_ax
      00033E                        343 0$:
      00033E 6B 01            [ 1]  344     ld  (DIVISOR,sp),a
      000340 1F 02            [ 2]  345     ldw (DIVISOR+1,sp),x
      000342 1A 02            [ 1]  346     or a,(DIVISOR+1,sp)
      000344 1A 03            [ 1]  347     or a,(DIVISOR+2,sp)
      000346 26 05            [ 1]  348     jrne 1$ 
      000348 A6 04            [ 1]  349     ld a,#ERR_DIV0 
      00034A CC 16 BE         [ 2]  350     jp tb_error 
      00034D                        351 1$: 
      00034D                        352     _at_top
      00034D 90 F6            [ 1]    1     ld a,(y)
      00034F 93               [ 1]    2     ldw x,y 
      000350 EE 01            [ 2]    3     ldw x,(1,x)
      000352 4D               [ 1]  353     tnz a 
      000353 2A 07            [ 1]  354     jrpl 2$
      000355 CD 02 05         [ 4]  355     call neg_ax
      000358 03 05            [ 1]  356     cpl (QSIGN,sp)
      00035A 03 06            [ 1]  357     cpl (RSIGN,sp)
      00035C                        358 2$: 
      00035C C7 00 0C         [ 1]  359     ld acc24,a 
      00035F CF 00 0D         [ 2]  360     ldw acc16,x 
      000362 A6 18            [ 1]  361     ld a,#24 
      000364 6B 04            [ 1]  362     ld (CNTR,sp),a
      000366 7B 01            [ 1]  363     ld a,(DIVISOR,sp)
      000368 1E 02            [ 2]  364     ldw x,(DIVISOR+1,sp)
      00036A CD 01 D6         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      00036D 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00036F C6 00 0C         [ 1]  368     ld a,acc24 
      000372 CE 00 0D         [ 2]  369     ldw x,acc16 
      000375 72 5F 00 0C      [ 1]  370     clr acc24 
      000379 72 5F 00 0D      [ 1]  371     clr acc16 
      00037D 72 5F 00 0E      [ 1]  372     clr acc8 
      000381 20 2E            [ 2]  373     jra 6$
      000383                        374 22$:     
      000383 4F               [ 1]  375     clr a 
      000384 5F               [ 1]  376     clrw x 
      000385 98               [ 1]  377     rcf  
      000386                        378 3$: 
      000386 72 59 00 0E      [ 1]  379     rlc acc8 
      00038A 72 59 00 0D      [ 1]  380     rlc acc16
      00038E 72 59 00 0C      [ 1]  381     rlc acc24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000392 59               [ 2]  382     rlcw x  
      000393 49               [ 1]  383     rlc a
      000394 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      000397 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000399 24 05            [ 1]  386     jrnc 5$
      00039B 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      00039E 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      0003A0                        389 5$: ; shift carry in QUOTIENT 
      0003A0 8C               [ 1]  390     ccf
      0003A1 0A 04            [ 1]  391     dec (CNTR,sp)
      0003A3 26 E1            [ 1]  392     jrne 3$ 
      0003A5 72 59 00 0E      [ 1]  393     rlc acc8 
      0003A9 72 59 00 0D      [ 1]  394     rlc acc16 
      0003AD 72 59 00 0B      [ 1]  395     rlc acc32 
      0003B1                        396 6$:    
      0003B1 6B 01            [ 1]  397     ld (DIVISOR,sp),a 
      0003B3 1F 02            [ 2]  398     ldw (DIVISOR+1,sp),x 
      0003B5 C6 00 0C         [ 1]  399     ld a,acc24 
      0003B8 CE 00 0D         [ 2]  400     ldw x,acc16 
      0003BB 0D 05            [ 1]  401     tnz (QSIGN,sp)
      0003BD 27 03            [ 1]  402     jreq 8$
      0003BF CD 02 05         [ 4]  403     call neg_ax 
      0003C2                        404 8$: 
      0003C2                        405     _store_top 
      0003C2 90 F7            [ 1]    1     ld (y),a 
      0003C4 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003C7 7B 01            [ 1]  406     ld a,(DIVISOR,sp)
      0003C9 1E 02            [ 2]  407     ldw x,(DIVSOR+1,sp)
      0003CB                        408 81$:
      0003CB 0D 06            [ 1]  409     tnz (RSIGN,sp)
      0003CD 27 03            [ 1]  410     jreq 9$
      0003CF CD 02 05         [ 4]  411     call neg_ax       
      0003D2                        412 9$: _drop VSIZE 
      0003D2 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003D4 81               [ 4]  413     ret 
                                    414 
                                    415 
                                    416 ;-------------------------------
                                    417 ; mod24 A:X % acc24 
                                    418 ; remainder 24 bits integers 
                                    419 ; input:
                                    420 ;    acc24   dividend 
                                    421 ;    A:X     divisor 
                                    422 ; output:
                                    423 ;    acc24   acc24 % A:X 
                                    424 ;------------------------------
      0003D5                        425 mod24:
      0003D5 CD 03 27         [ 4]  426     call div24 
      0003D8                        427     _store_top  ; replace quotient by remainder 
      0003D8 90 F7            [ 1]    1     ld (y),a 
      0003DA 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003DD 81               [ 4]  428     ret 
                                    429 
                                    430 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;;;;;;;;;;;;;;;;;;;
                                     22 
                           000001    23 .if DEBUG 
                                     24 
                                     25     .area CODE
                                     26 
                                     27 ;---------------------------------
                                     28 ;; print actual registers states 
                                     29 ;; as pushed on stack 
                                     30 ;; {Y,X,CC,A}
                                     31 ;---------------------------------
      0003DE                         32 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0003DE                         33 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0003DE                         34 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0003DE                         35 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0003DE                         36 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0003DE                         37 prt_regs::
      0003DE AE 04 21         [ 2]   38 	ldw x,#regs_state 
      0003E1 CD 09 A1         [ 4]   39 	call puts
                                     40 ; register PC
      0003E4 16 01            [ 2]   41 	ldw y,(1,sp)
      0003E6 AE 05 55         [ 2]   42 	ldw x,#REG_EPC 
      0003E9 CD 04 A6         [ 4]   43 	call prt_reg16 
                                     44 ; register CC 
      0003EC 7B 08            [ 1]   45 	ld a,(R_CC,sp)
      0003EE AE 05 66         [ 2]   46 	ldw x,#REG_CC 
      0003F1 CD 04 84         [ 4]   47 	call prt_reg8 
                                     48 ; register A 
      0003F4 7B 07            [ 1]   49 	ld a,(R_A,sp)
      0003F6 AE 05 62         [ 2]   50 	ldw x,#REG_A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0003F9 CD 04 84         [ 4]   51 	call prt_reg8 
                                     52 ; register X 
      0003FC 16 05            [ 2]   53 	ldw y,(R_X,sp)
      0003FE AE 05 5E         [ 2]   54 	ldw x,#REG_X 
      000401 CD 04 A6         [ 4]   55 	call prt_reg16 
                                     56 ; register Y 
      000404 16 03            [ 2]   57 	ldw y,(R_Y,sp)
      000406 AE 05 5A         [ 2]   58 	ldw x,#REG_Y 
      000409 CD 04 A6         [ 4]   59 	call prt_reg16 
                                     60 ; register SP 
      00040C 90 96            [ 1]   61 	ldw y,sp
      00040E 72 A9 00 08      [ 2]   62 	addw y,#6+ARG_OFS  
      000412 AE 05 6B         [ 2]   63 	ldw x,#REG_SP
      000415 CD 04 A6         [ 4]   64 	call prt_reg16
      000418 A6 0D            [ 1]   65 	ld a,#CR 
      00041A CD 09 44         [ 4]   66 	call putc
      00041D CD 09 44         [ 4]   67 	call putc   
      000420 81               [ 4]   68 	ret 
                                     69 
                                     70 
      000421 0A 72 65 67 69 73 74    71 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                     72 
                                     73 
                                     74 ;--------------------
                                     75 ; print content at address in hex.
                                     76 ; input:
                                     77 ;   X 	address to peek 
                                     78 ; output:
                                     79 ;	none 
                                     80 ;--------------------	
      000448                         81 prt_peek::
      000448 89               [ 2]   82 	pushw x 
      000449 35 10 00 0A      [ 1]   83 	mov base,#16 
      00044D CD 18 12         [ 4]   84 	call prt_i16  
      000450 A6 3A            [ 1]   85 	ld a,#': 
      000452 CD 09 44         [ 4]   86 	call putc 
      000455 A6 20            [ 1]   87 	ld a,#SPACE 
      000457 CD 09 44         [ 4]   88 	call putc 
      00045A 85               [ 2]   89 	popw x 
      00045B F6               [ 1]   90 	ld a,(x)
      00045C 5F               [ 1]   91 	clrw x 
      00045D 97               [ 1]   92 	ld xl,a 
      00045E 35 0A 00 0A      [ 1]   93 	mov base,#10 
      000462 CD 18 12         [ 4]   94 	call prt_i16 
      000465 81               [ 4]   95 	ret 
                                     96 
                                     97 ;----------------------------------------
                                     98 ;   DEBUG support functions
                                     99 ;----------------------------------------
                                    100 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                    101 ; turn LED on 
      000466                        102 ledon:
      000466 72 1A 50 0A      [ 1]  103     bset PC_ODR,#LED2_BIT
      00046A 81               [ 4]  104     ret 
                                    105 
                                    106 ; turn LED off 
      00046B                        107 ledoff:
      00046B 72 1B 50 0A      [ 1]  108     bres PC_ODR,#LED2_BIT 
      00046F 81               [ 4]  109     ret 
                                    110 
                                    111 ; invert LED status 
      000470                        112 ledtoggle:
      000470 A6 20            [ 1]  113     ld a,#LED2_MASK
      000472 C8 50 0A         [ 1]  114     xor a,PC_ODR
      000475 C7 50 0A         [ 1]  115     ld PC_ODR,a
      000478 81               [ 4]  116     ret 
                                    117 
      000479                        118 left_paren:
      000479 A6 20            [ 1]  119 	ld a,#SPACE 
      00047B CD 09 44         [ 4]  120 	call putc
      00047E A6 28            [ 1]  121 	ld a,#'( 
      000480 CD 09 44         [ 4]  122 	call putc 	
      000483 81               [ 4]  123 	ret 
                                    124 
                                    125 ;------------------------------
                                    126 ; print 8 bit register 
                                    127 ; input:
                                    128 ;   X  point to register name 
                                    129 ;   A  register value to print 
                                    130 ; output:
                                    131 ;   none
                                    132 ;------------------------------- 
      000484                        133 prt_reg8:
      000484 88               [ 1]  134 	push a 
      000485 CD 09 A1         [ 4]  135 	call puts 
      000488 7B 01            [ 1]  136 	ld a,(1,sp) 
      00048A 5F               [ 1]  137 	clrw x 
      00048B 97               [ 1]  138 	ld xl,a 
      00048C 35 10 00 0A      [ 1]  139 	mov base,#16
      000490 CD 18 12         [ 4]  140 	call prt_i16  
      000493 CD 04 79         [ 4]  141 	call left_paren 
      000496 84               [ 1]  142 	pop a 
      000497 5F               [ 1]  143 	clrw x 
      000498 97               [ 1]  144 	ld xl,a 
      000499 35 0A 00 0A      [ 1]  145 	mov base,#10 
      00049D CD 18 12         [ 4]  146 	call prt_i16  
      0004A0 A6 29            [ 1]  147 	ld a,#') 
      0004A2 CD 09 44         [ 4]  148 	call putc
      0004A5 81               [ 4]  149 	ret
                                    150 
                                    151 ;--------------------------------
                                    152 ; print 16 bits register 
                                    153 ; input:
                                    154 ;   X   point register name 
                                    155 ;   Y   register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    156 ; output:
                                    157 ;  none
                                    158 ;--------------------------------
      0004A6                        159 prt_reg16: 
      0004A6 90 89            [ 2]  160 	pushw y 
      0004A8 CD 09 A1         [ 4]  161 	call puts 
      0004AB 1E 01            [ 2]  162 	ldw x,(1,sp) 
      0004AD 35 10 00 0A      [ 1]  163 	mov base,#16 
      0004B1 CD 18 12         [ 4]  164 	call prt_i16  
      0004B4 CD 04 79         [ 4]  165 	call left_paren 
      0004B7 85               [ 2]  166 	popw x 
      0004B8 35 0A 00 0A      [ 1]  167 	mov base,#10 
      0004BC CD 18 12         [ 4]  168 	call prt_i16  
      0004BF A6 29            [ 1]  169 	ld a,#') 
      0004C1 CD 09 44         [ 4]  170 	call putc
      0004C4 81               [ 4]  171 	ret 
                                    172 
                                    173 ;------------------------------------
                                    174 ; print registers contents saved on
                                    175 ; stack by trap interrupt.
                                    176 ;------------------------------------
      0004C5                        177 print_registers:
      0004C5 AE 05 18         [ 2]  178 	ldw x,#STATES
      0004C8 CD 09 A1         [ 4]  179 	call puts
                                    180 ; print EPC 
      0004CB AE 05 55         [ 2]  181 	ldw x, #REG_EPC
      0004CE CD 09 A1         [ 4]  182 	call puts 
      0004D1 7B 0B            [ 1]  183 	ld a, (11,sp)
      0004D3 C7 00 0E         [ 1]  184 	ld acc8,a 
      0004D6 7B 0A            [ 1]  185 	ld a, (10,sp) 
      0004D8 C7 00 0D         [ 1]  186 	ld acc16,a 
      0004DB 7B 09            [ 1]  187 	ld a,(9,sp) 
      0004DD C7 00 0C         [ 1]  188 	ld acc24,a
      0004E0 5F               [ 1]  189 	clrw x  
      0004E1 A6 10            [ 1]  190 	ld a,#16
      0004E3 CD 18 29         [ 4]  191 	call prt_acc24  
                                    192 ; print X
      0004E6 AE 05 5E         [ 2]  193 	ldw x,#REG_X
      0004E9 16 05            [ 2]  194 	ldw y,(5,sp)
      0004EB CD 04 A6         [ 4]  195 	call prt_reg16  
                                    196 ; print Y 
      0004EE AE 05 5A         [ 2]  197 	ldw x,#REG_Y
      0004F1 16 07            [ 2]  198 	ldw y, (7,sp)
      0004F3 CD 04 A6         [ 4]  199 	call prt_reg16  
                                    200 ; print A 
      0004F6 AE 05 62         [ 2]  201 	ldw x,#REG_A
      0004F9 7B 04            [ 1]  202 	ld a, (4,sp) 
      0004FB CD 04 84         [ 4]  203 	call prt_reg8
                                    204 ; print CC 
      0004FE AE 05 66         [ 2]  205 	ldw x,#REG_CC 
      000501 7B 03            [ 1]  206 	ld a, (3,sp) 
      000503 CD 04 84         [ 4]  207 	call prt_reg8 
                                    208 ; print SP 
      000506 AE 05 6B         [ 2]  209 	ldw x,#REG_SP
      000509 90 96            [ 1]  210 	ldw y,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00050B 72 A9 00 0C      [ 2]  211 	addw y,#12
      00050F CD 04 A6         [ 4]  212 	call prt_reg16  
      000512 A6 0A            [ 1]  213 	ld a,#'\n' 
      000514 CD 09 44         [ 4]  214 	call putc
      000517 81               [ 4]  215 	ret
                                    216 
      000518 0A 52 65 67 69 73 74   217 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000555 45 50 43 3A 00         218 REG_EPC: .asciz "EPC:"
      00055A 0A 59 3A 00            219 REG_Y:   .asciz "\nY:" 
      00055E 0A 58 3A 00            220 REG_X:   .asciz "\nX:"
      000562 0A 41 3A 00            221 REG_A:   .asciz "\nA:" 
      000566 0A 43 43 3A 00         222 REG_CC:  .asciz "\nCC:"
      00056B 0A 53 50 3A 00         223 REG_SP:  .asciz "\nSP:"
                                    224 
                                    225 ;----------------------------
                                    226 ; command interface
                                    227 ; only 3 commands:
                                    228 ;  'q' to resume application
                                    229 ;  'p [addr]' to print memory values 
                                    230 ;  's addr' to print string 
                                    231 ;----------------------------
                                    232 ;local variable 
                           000001   233 	PSIZE=1
                           000001   234 	VSIZE=1 
      000570                        235 cmd_itf:
      000570 52 01            [ 2]  236 	sub sp,#VSIZE 
      000572 72 5F 00 18      [ 1]  237 	clr farptr 
      000576 72 5F 00 19      [ 1]  238 	clr farptr+1 
      00057A 72 5F 00 1A      [ 1]  239 	clr farptr+2  
      00057E                        240 repl:
      00057E A6 0D            [ 1]  241 	ld a,#CR 
      000580 CD 09 44         [ 4]  242 	call putc 
      000583 A6 3F            [ 1]  243 	ld a,#'? 
      000585 CD 09 44         [ 4]  244 	call putc
      000588 72 5F 00 00      [ 1]  245 	clr in.w 
      00058C 72 5F 00 01      [ 1]  246 	clr in 
      000590 CD 0A A6         [ 4]  247 	call readln
      000593 90 AE 16 68      [ 2]  248 	ldw y,#tib  
      000597 90 F6            [ 1]  249 	ld a,(y)
      000599 27 E3            [ 1]  250 	jreq repl  
      00059B 72 5C 00 01      [ 1]  251 	inc in 
      00059F CD 18 A8         [ 4]  252 	call to_upper 
      0005A2 A1 51            [ 1]  253 	cp a,#'Q 
      0005A4 26 17            [ 1]  254 	jrne test_p
      0005A6                        255 repl_exit:
      0005A6 72 5F 16 68      [ 1]  256 	clr tib 
      0005AA 72 5F 00 03      [ 1]  257 	clr count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0005AE 72 5F 00 01      [ 1]  258 	clr in 
      0005B2                        259 	_drop #VSIZE 	
      0005B2 5B 01            [ 2]    1     addw sp,##VSIZE 
      0005B4 81               [ 4]  260 	ret  
      0005B5                        261 invalid:
      0005B5 AE 06 36         [ 2]  262 	ldw x,#invalid_cmd 
      0005B8 CD 09 A1         [ 4]  263 	call puts 
      0005BB 20 C1            [ 2]  264 	jra repl 
      0005BD                        265 test_p:	
      0005BD A1 50            [ 1]  266     cp a,#'P 
      0005BF 27 11            [ 1]  267 	jreq mem_peek
      0005C1 A1 53            [ 1]  268     cp a,#'S 
      0005C3 26 F0            [ 1]  269 	jrne invalid 
      0005C5                        270 print_string:	
      0005C5 CD 0F 2A         [ 4]  271 	call get_token
      0005C8 A1 84            [ 1]  272 	cp a,#TK_INTGR 
      0005CA 26 E9            [ 1]  273 	jrne invalid 
      0005CC CD 09 A1         [ 4]  274 	call puts
      0005CF CC 05 7E         [ 2]  275 	jp repl 	
      0005D2                        276 mem_peek:
      0005D2 A6 20            [ 1]  277 	ld a,#SPACE 
      0005D4 CD 0F 17         [ 4]  278 	call skip  	 
      0005D7 72 B9 00 00      [ 2]  279 	addw y,in.w 
      0005DB AE 16 B8         [ 2]  280 	ldw x,#pad 
      0005DE CD 14 1C         [ 4]  281 	call strcpy
      0005E1 AE 16 B8         [ 2]  282 	ldw x,#pad
      0005E4 CD 18 B4         [ 4]  283 	call atoi24 	
      0005E7 C6 00 0C         [ 1]  284 	ld a, acc24 
      0005EA CA 00 0D         [ 1]  285 	or a,acc16 
      0005ED CA 00 0E         [ 1]  286 	or a,acc8 
      0005F0 26 02            [ 1]  287 	jrne 1$ 
      0005F2 20 0C            [ 2]  288 	jra peek_byte  
      0005F4 CE 00 0C         [ 2]  289 1$:	ldw x,acc24 
      0005F7 CF 00 18         [ 2]  290 	ldw farptr,x 
      0005FA C6 00 0E         [ 1]  291 	ld a,acc8 
      0005FD C7 00 1A         [ 1]  292 	ld farptr+2,a 
      000600                        293 peek_byte:
      000600 CD 06 45         [ 4]  294 	call print_farptr 
      000603 A6 08            [ 1]  295 	ld a,#8 
      000605 6B 01            [ 1]  296 	ld (PSIZE,sp),a 
      000607 5F               [ 1]  297 	clrw x 
      000608 CD 06 60         [ 4]  298 1$:	call fetchc  
      00060B 89               [ 2]  299 	pushw x 
      00060C C7 00 0E         [ 1]  300 	ld acc8,a 
      00060F 5F               [ 1]  301 	clrw x 
      000610 CF 00 0C         [ 2]  302 	ldw acc24,x 
      000613 A6 90            [ 1]  303 	ld a,#16+128
      000615 CD 18 29         [ 4]  304 	call prt_acc24
      000618 85               [ 2]  305 	popw x 
      000619 0A 01            [ 1]  306 	dec (PSIZE,sp)
      00061B 26 EB            [ 1]  307 	jrne 1$ 
      00061D A6 08            [ 1]  308 	ld a,#8 
      00061F CB 00 1A         [ 1]  309 	add a,farptr+2 
      000622 C7 00 1A         [ 1]  310 	ld farptr+2,a
      000625 4F               [ 1]  311 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000626 C9 00 19         [ 1]  312 	adc a,farptr+1 
      000629 C7 00 19         [ 1]  313 	ld farptr+1,a 
      00062C 4F               [ 1]  314 	clr a 
      00062D C9 00 18         [ 1]  315 	adc a,farptr 
      000630 C7 00 18         [ 1]  316 	ld farptr,a 
      000633 CC 05 7E         [ 2]  317 	jp repl  
                                    318 
      000636 6E 6F 74 20 61 20 63   319 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    320 
                                    321 ;----------------------------
                                    322 ; display farptr address
                                    323 ;----------------------------
      000645                        324 print_farptr:
      000645 C6 00 1A         [ 1]  325 	ld a ,farptr+2 
      000648 C7 00 0E         [ 1]  326 	ld acc8,a 
      00064B CE 00 18         [ 2]  327 	ldw x,farptr 
      00064E CF 00 0C         [ 2]  328 	ldw acc24,x 
      000651 5F               [ 1]  329 	clrw x 
      000652 A6 10            [ 1]  330 	ld a,#16 
      000654 CD 18 29         [ 4]  331 	call prt_acc24
      000657 A6 20            [ 1]  332 	ld a,#SPACE 
      000659 CD 09 44         [ 4]  333 	call putc 
      00065C CD 09 44         [ 4]  334 	call putc 
      00065F 81               [ 4]  335 	ret
                                    336 
                                    337 ;------------------------------------
                                    338 ; get byte at address farptr[X]
                                    339 ; input:
                                    340 ;	 farptr   address to peek
                                    341 ;    X		  farptr index 	
                                    342 ; output:
                                    343 ;	 A 		  byte from memory  
                                    344 ;    x		  incremented by 1
                                    345 ;------------------------------------
      000660                        346 fetchc: ; @C
      000660 92 AF 00 18      [ 5]  347 	ldf a,([farptr],x)
      000664 5C               [ 1]  348 	incw x
      000665 81               [ 4]  349 	ret
                                    350 
                                    351 
                                    352 ;------------------------------------
                                    353 ; expect a number from command line 
                                    354 ; next argument
                                    355 ;  input:
                                    356 ;	  none
                                    357 ;  output:
                                    358 ;    acc24   int24_t 
                                    359 ;------------------------------------
      000666                        360 number:
      000666 CD 0F 2A         [ 4]  361 	call get_token
      000669 A1 84            [ 1]  362 	cp a,#TK_INTGR
      00066B 27 03            [ 1]  363 	jreq 1$
      00066D CC 16 BC         [ 2]  364 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000670 81               [ 4]  365 1$:	ret
                                    366 
                                    367 
                                    368 ;---------------------
                                    369 ; display n bytes row 
                                    370 ; from memory.
                                    371 ; input:
                                    372 ;   A   bytes to print 
                                    373 ;	X   start address 
                                    374 ; output:
                                    375 ;   X   address after last shown  
                                    376 ;---------------------
                           000001   377 	CNT=1 
                           000002   378 	ADR=2 
                           000003   379 	VSIZE=3 
      000671                        380 show_row:
      000671 4D               [ 1]  381 	tnz a 
      000672 26 01            [ 1]  382 	jrne 1$
      000674 81               [ 4]  383 	ret 
      000675                        384 1$:	
      000675 89               [ 2]  385 	pushw x  
      000676 88               [ 1]  386 	push a 
      000677 35 04 00 23      [ 1]  387 	mov tab_width,#4 
      00067B CD 18 12         [ 4]  388 	call prt_i16 
      00067E A6 20            [ 1]  389 	ld a,#SPACE  
      000680 CD 09 44         [ 4]  390 	call putc
      000683                        391 row_loop:
      000683 1E 02            [ 2]  392 	ldw x,(ADR,sp)
      000685 F6               [ 1]  393 	ld a,(x)
      000686 5F               [ 1]  394 	clrw x 
      000687 97               [ 1]  395 	ld xl,a 
      000688 CD 18 12         [ 4]  396 	call prt_i16 
      00068B 1E 02            [ 2]  397 	ldw x,(ADR,sp)
      00068D 5C               [ 1]  398 	incw x 
      00068E 1F 02            [ 2]  399 	ldw (ADR,sp),x 
      000690 0A 01            [ 1]  400 	dec (CNT,sp)
      000692 26 EF            [ 1]  401 	jrne row_loop
      000694                        402 	_drop VSIZE  		
      000694 5B 03            [ 2]    1     addw sp,#VSIZE 
      000696 35 04 00 23      [ 1]  403 	mov tab_width,#4
      00069A A6 0D            [ 1]  404 	ld a,#CR 
      00069C CD 09 44         [ 4]  405 	call putc 
      00069F 81               [ 4]  406 	ret 
                                    407 
                                    408 ;--------------------------
                                    409 ; print memory content 
                                    410 ; in hexadecimal format
                                    411 ;  input:
                                    412 ;    X    start address 
                                    413 ;    Y    count 
                                    414 ;--------------------------
                           000001   415 	BCNT=1
                           000003   416 	BASE=3
                           000004   417 	TABW=4
                           000004   418 	VSIZE=4   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0006A0                        419 hex_dump:
      0006A0 88               [ 1]  420 	push a 
      0006A1                        421 	_vars VSIZE
      0006A1 52 04            [ 2]    1     sub sp,#VSIZE 
      0006A3 C6 00 0A         [ 1]  422 	ld a,base
      0006A6 6B 03            [ 1]  423 	ld (BASE,sp),a 
      0006A8 35 10 00 0A      [ 1]  424 	mov base,#16
      0006AC C6 00 23         [ 1]  425 	ld a,tab_width 
      0006AF 6B 04            [ 1]  426 	ld (TABW,sp),a
      0006B1 A6 0D            [ 1]  427 	ld a,#CR 
      0006B3 CD 09 44         [ 4]  428 	call putc 
      0006B6 17 01            [ 2]  429 1$: ldw (BCNT,sp),y
      0006B8 A6 10            [ 1]  430 	ld a,#16
      0006BA 90 A3 00 10      [ 2]  431 	cpw y,#16
      0006BE 2A 02            [ 1]  432 	jrpl 2$
      0006C0 90 9F            [ 1]  433 	ld a,yl
      0006C2                        434 2$: 	
      0006C2 CD 06 71         [ 4]  435 	call show_row 
      0006C5 16 01            [ 2]  436 	ldw y,(BCNT,sp) 
      0006C7 72 A2 00 10      [ 2]  437 	subw y,#16 
      0006CB 90 A3 00 01      [ 2]  438 	cpw y,#1
      0006CF 2A E5            [ 1]  439 	jrpl 1$
      0006D1 7B 03            [ 1]  440 	ld a,(BASE,sp)
      0006D3 C7 00 0A         [ 1]  441 	ld base,a
      0006D6 7B 04            [ 1]  442 	ld a,(TABW,sp)
      0006D8 C7 00 23         [ 1]  443 	ld tab_width,a 
      0006DB                        444 	_drop VSIZE
      0006DB 5B 04            [ 2]    1     addw sp,#VSIZE 
      0006DD 84               [ 1]  445 	pop a 
      0006DE 81               [ 4]  446 	ret 
                                    447 
                                    448 .endif ; DEBUG 
                                    449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0006DF                         45 unlock_eeprom:
      0006DF 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0006E4 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0006E8 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0006EC 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0006F0 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0006F4 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006F9 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0006FA                         62 unlock_flash:
      0006FA 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006FF 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      000703 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      000707 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      00070B 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      00070F 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000714 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      000715                         76 row_erase:
      000715 88               [ 1]   77 	push a 
      000716 90 89            [ 2]   78 	pushw y 
      000718 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      00071C 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000720 4F               [ 1]   81 	clr a 
      000721 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      000723 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      000727 90 5C            [ 1]   84     incw y
      000729 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      00072D 90 5C            [ 1]   86     incw y
      00072F 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      000733 90 5C            [ 1]   88     incw y
      000735 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      000739 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00073E 90 85            [ 2]   91 	popw y 
      000740 84               [ 1]   92 	pop a 
      000741 81               [ 4]   93 	ret
      000742                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      000742                         97 move_erase_to_ram:
      000742 89               [ 2]   98 	pushw x 
      000743 90 89            [ 2]   99 	pushw y 
      000745 AE 07 42         [ 2]  100 	ldw x,#row_erase_end 
      000748 1D 07 15         [ 2]  101 	subw x,#row_erase
      00074B CF 00 0D         [ 2]  102 	ldw acc16,x 
      00074E AE 16 68         [ 2]  103 	ldw x,#tib 
      000751 90 AE 07 15      [ 2]  104 	ldw y,#row_erase 
      000755 CD 14 2C         [ 4]  105 	call move
      000758 90 85            [ 2]  106 	popw y
      00075A 85               [ 2]  107 	popw x
      00075B 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      00075C                        123 program_row:
      00075C 88               [ 1]  124 	push a 
      00075D 90 89            [ 2]  125 	pushw y 
      00075F 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000761 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000765 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000769 90 5F            [ 1]  130 	clrw y 
      00076B F6               [ 1]  131 1$:	ld a,(x)
      00076C 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000770 5C               [ 1]  133 	incw x 
      000771 90 5C            [ 1]  134 	incw y 
      000773 0A 01            [ 1]  135 	dec (BCNT,sp)
      000775 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      000777 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00077C                        139 	_drop 1 
      00077C 5B 01            [ 2]    1     addw sp,#1 
      00077E 90 85            [ 2]  140 	popw y 
      000780 84               [ 1]  141 	pop a 
      000781 81               [ 4]  142 	ret 
      000782                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000782                        149 move_prg_to_ram:
      000782 89               [ 2]  150 	pushw x 
      000783 90 89            [ 2]  151 	pushw y 
      000785 AE 07 82         [ 2]  152 	ldw x,#program_row_end 
      000788 1D 07 5C         [ 2]  153 	subw x,#program_row 
      00078B CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      00078E AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      000791 90 AE 07 5C      [ 2]  156 	ldw y,#program_row ; source address 
      000795 CD 14 2C         [ 4]  157 	call move
      000798 90 85            [ 2]  158 	popw y 
      00079A 85               [ 2]  159 	popw x  
      00079B 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      00079C                        169 write_buffer:
      00079C 89               [ 2]  170 	pushw x 
      00079D 72 5D 00 18      [ 1]  171 	tnz farptr 
      0007A1 26 0D            [ 1]  172 	jrne to_flash 
      0007A3 CE 00 19         [ 2]  173 	ldw x,farptr+1 
      0007A6 A3 36 00         [ 2]  174 	cpw x,#app_space  
      0007A9 24 05            [ 1]  175 	jruge to_flash 
      0007AB                        176 to_eeprom:
      0007AB CD 06 DF         [ 4]  177 	call unlock_eeprom
      0007AE 20 03            [ 2]  178 	jra do_programming
      0007B0                        179 to_flash:
      0007B0 CD 06 FA         [ 4]  180 	call unlock_flash
      0007B3                        181 do_programming:
      0007B3 85               [ 2]  182 	popw x 
      0007B4 CD 16 68         [ 4]  183 	call tib
      0007B7 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0007BB 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0007BF 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      0007C0                        197 block_erase:
      0007C0 89               [ 2]  198 	pushw x 
      0007C1 C6 00 18         [ 1]  199 	ld a,farptr 
      0007C4 26 14            [ 1]  200 	jrne erase_flash
      0007C6 CE 00 19         [ 2]  201 	ldw x,farptr+1
      0007C9 A3 36 00         [ 2]  202 	cpw x,#app_space 
      0007CC 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      0007CE CD 06 DF         [ 4]  205 	call unlock_eeprom 
      0007D1 CD 16 68         [ 4]  206 	call tib 
      0007D4 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0007D8 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0007DA                        210 erase_flash:
      0007DA CD 06 FA         [ 4]  211 	call unlock_flash 
      0007DD CD 16 68         [ 4]  212 	call tib 
      0007E0 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007E4                        214 erase_exit: 
      0007E4 85               [ 2]  215 	popw x 
      0007E5 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0007E6                        232 write_byte:
      0007E6 90 89            [ 2]  233 	pushw y
      0007E8                        234 	_vars VSIZE
      0007E8 52 02            [ 2]    1     sub sp,#VSIZE 
      0007EA 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0007EC 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0007EE 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0007F2 72 5D 00 18      [ 1]  240 	tnz farptr 
      0007F6 26 14            [ 1]  241 	jrne write_flash
      0007F8 90 A3 36 00      [ 2]  242     cpw y,#app_space 	 
      0007FC 24 0E            [ 1]  243     jruge write_flash
      0007FE 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      000802 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      000804 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      000808 22 51            [ 1]  247 	jrugt write_exit
      00080A 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      00080C                        250 write_flash:
      00080C CD 06 FA         [ 4]  251 	call unlock_flash 
      00080F 9B               [ 1]  252 1$:	sim 
      000810 7B 01            [ 1]  253 	ld a,(BTW,sp)
      000812 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      000816 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00081B 9A               [ 1]  256     rim 
      00081C 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000820 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      000822                        260 write_eeprom:
      000822 CD 06 DF         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      000825 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      000829 2B 08            [ 1]  264 	jrmi 1$
      00082B 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      00082F 2A 02            [ 1]  266 	jrpl 1$
      000831 03 02            [ 1]  267 	cpl (OPT,sp)
      000833                        268 1$: 
      000833 0D 02            [ 1]  269     tnz (OPT,sp)
      000835 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      000837 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      00083B 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00083F                        274 2$: 
      00083F 7B 01            [ 1]  275     ld a,(BTW,sp)
      000841 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      000845 0D 02            [ 1]  277     tnz (OPT,sp)
      000847 27 08            [ 1]  278     jreq 3$
      000849 5C               [ 1]  279     incw x
      00084A 7B 01            [ 1]  280     ld a,(BTW,sp)
      00084C 43               [ 1]  281     cpl a
      00084D 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      000851 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000856 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      00085B                        285 write_exit:
      00085B                        286 	_drop VSIZE 
      00085B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00085D 90 85            [ 2]  287 	popw y
      00085F 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; the block must be erased before 
                                    293 ; using this routine.
                                    294 ; input:
                                    295 ;   Y        source address   
                                    296 ;   X        array index  destination  farptr[x]
                                    297 ;   BSIZE    block size bytes 
                                    298 ;   farptr   write address , byte* 
                                    299 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                    300 ;	X 		after last byte written 
                                    301 ;   Y 		after last byte read 
                                    302 ;  farptr   point after block
                                    303 ;---------------------------------------------
      000860                        304 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000860                        305 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    306 	; local var 
                           000001   307 	XSAVE=1 
                           000002   308 	VSIZE=2 
      000860                        309 write_block::
      000860 88               [ 1]  310 	push a 
      000861                        311 	_vars VSIZE
      000861 52 02            [ 2]    1     sub sp,#VSIZE 
      000863 1F 01            [ 2]  312 	ldw (XSAVE,sp),x 
      000865 1E 06            [ 2]  313 	ldw x,(BSIZE,sp) 
      000867 27 13            [ 1]  314 	jreq 9$
      000869 1E 01            [ 2]  315 1$:	ldw x,(XSAVE,sp)
      00086B 90 F6            [ 1]  316 	ld a,(y)
      00086D CD 07 E6         [ 4]  317 	call write_byte 
      000870 5C               [ 1]  318 	incw x 
      000871 90 5C            [ 1]  319 	incw y 
      000873 1F 01            [ 2]  320 	ldw (XSAVE,sp),x
      000875 1E 06            [ 2]  321 	ldw x,(BSIZE,sp)
      000877 5A               [ 2]  322 	decw x
      000878 1F 06            [ 2]  323 	ldw (BSIZE,sp),x 
      00087A 26 ED            [ 1]  324 	jrne 1$
      00087C                        325 9$:
      00087C 1E 01            [ 2]  326 	ldw x,(XSAVE,sp)
      00087E CD 08 B6         [ 4]  327 	call incr_farptr
      000881                        328 	_drop VSIZE
      000881 5B 02            [ 2]    1     addw sp,#VSIZE 
      000883 84               [ 1]  329 	pop a 
      000884 81               [ 4]  330 	ret 
                                    331 
                                    332 
                                    333 ;------------------------------------
                                    334 ; write n bytes to flash | eeprom 
                                    335 ; if the number of bytes is 
                                    336 ; >=128 it is faster to 
                                    337 ; use write_block
                                    338 ; the bytes are written one by 
                                    339 ; one and auto erased if required. 
                                    340 ; input:
                                    341 ;    farptr    dest address 
                                    342 ;    X         src address 
                                    343 ;    A         count 
                                    344 ; output:
                                    345 ;    none   
                                    346 ;----------------------------------
      000885                        347 write_nbytes:
      000885 90 89            [ 2]  348 	pushw y
      000887 88               [ 1]  349 	push a 
      000888 90 93            [ 1]  350 	ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00088A 5F               [ 1]  351 	clrw x 
      00088B                        352 1$:  
      00088B 90 F6            [ 1]  353 	ld a,(y)
      00088D 90 5C            [ 1]  354 	incw y
      00088F CD 07 E6         [ 4]  355 	call write_byte 
      000892 5C               [ 1]  356 	incw x 
      000893 0A 01            [ 1]  357 	dec (1,sp)  
      000895 26 F4            [ 1]  358 	jrne 1$ 
      000897 84               [ 1]  359 9$: pop a 
      000898 90 85            [ 2]  360 	popw y 
      00089A 81               [ 4]  361 	ret 
                                    362 
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 ;;;  flash memory operations
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 
                                    367 ;--------------------------
                                    368 ; align farptr to BLOCK_SIZE 
                                    369 ;---------------------------
      00089B                        370 row_align:
      00089B A6 7F            [ 1]  371 	ld a,#0x7f 
      00089D C4 00 1A         [ 1]  372 	and a,farptr+2 
      0008A0 27 13            [ 1]  373 	jreq 1$ 
      0008A2 CE 00 19         [ 2]  374 	ldw x,farptr+1 
      0008A5 1C 00 80         [ 2]  375 	addw x,#BLOCK_SIZE 
      0008A8 24 04            [ 1]  376 	jrnc 0$
      0008AA 72 5C 00 18      [ 1]  377 	inc farptr 
      0008AE 9F               [ 1]  378 0$: ld a,xl 
      0008AF A4 80            [ 1]  379 	and a,#0x80
      0008B1 97               [ 1]  380 	ld xl,a
      0008B2 CF 00 19         [ 2]  381 	ldw farptr+1,x  	
      0008B5 81               [ 4]  382 1$:	ret
                                    383 
                                    384 ;--------------------
                                    385 ; input:
                                    386 ;   X     increment 
                                    387 ; output:
                                    388 ;   farptr  incremented 
                                    389 ;---------------------
      0008B6                        390 incr_farptr:
      0008B6 72 BB 00 19      [ 2]  391 	addw x,farptr+1 
      0008BA 24 04            [ 1]  392 	jrnc 1$
      0008BC 72 5C 00 18      [ 1]  393 	inc farptr 
      0008C0 CF 00 19         [ 2]  394 1$:	ldw farptr+1,x  
      0008C3 81               [ 4]  395 	ret 
                                    396 
                                    397 ;-----------------------------------
                                    398 ; scan block for non zero byte 
                                    399 ; block are 128 bytes 
                                    400 ; input:
                                    401 ;    farptr     address block  
                                    402 ; output:
                                    403 ;     A     0 cleared, other not cleared  
                                    404 ;-----------------------------------
      0008C4                        405 scan_block:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0008C4 5F               [ 1]  406 	clrw x 
      0008C5 92 AF 00 18      [ 5]  407 1$: ldf a,([farptr],x) 
      0008C9 26 06            [ 1]  408 	jrne 2$
      0008CB 5C               [ 1]  409 	incw x 
      0008CC A3 00 80         [ 2]  410 	cpw x,#BLOCK_SIZE 
      0008CF 25 F4            [ 1]  411 	jrult 1$ 
      0008D1 81               [ 4]  412 2$:	ret 
                                    413 
                                    414 
                                    415 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      0008D2                         66 Uart1RxHandler: ; console receive char 
      0008D2 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      0008D7 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      0008DA A1 03            [ 1]   69 	cp a,#CTRL_C 
      0008DC 26 06            [ 1]   70 	jrne 2$
      0008DE CD 09 44         [ 4]   71 	call putc 
      0008E1 CC 00 57         [ 2]   72 	jp user_interrupted
      0008E4                         73 2$:
      0008E4 A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      0008E6 26 03            [ 1]   75 	jrne 3$
      0008E8 CC 00 C3         [ 2]   76 	jp cold_start 	
      0008EB 88               [ 1]   77 3$:	push a 
      0008EC A6 26            [ 1]   78 	ld a,#rx1_queue 
      0008EE CB 00 2F         [ 1]   79 	add a,rx1_tail 
      0008F1 5F               [ 1]   80 	clrw x 
      0008F2 97               [ 1]   81 	ld xl,a 
      0008F3 84               [ 1]   82 	pop a 
      0008F4 F7               [ 1]   83 	ld (x),a 
      0008F5 C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      0008F8 4C               [ 1]   85 	inc a 
      0008F9 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0008FB C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0008FE 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0008FF                         97 uart1_init:
      0008FF 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      000903 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      000907 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      00090B 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      00090F                        103 uart1_set_baud: 
      00090F 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000910 A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      000912 C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      000915 27 0A            [ 1]  109 	jreq 2$ 
      000917                        110 1$: ; 8 Mhz 	
      000917 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      00091B 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      00091F 20 08            [ 2]  113 	jra 3$
      000921                        114 2$: ; 16 Mhz 	
      000921 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      000925 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      000929                        117 3$:
      000929 72 5F 52 31      [ 1]  118     clr UART1_DR
      00092D 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000931 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      000935 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      00093A 72 5F 00 2E      [ 1]  122     clr rx1_head 
      00093E 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      000942 84               [ 1]  124 	pop a  
      000943 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      000944                        133 putc:: ; console output always on UART1
      000944                        134 uart1_putc:: 
      000944 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      000949 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      00094C 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      00094D                        148 qgetc::
      00094D                        149 uart1_qgetc::
      00094D C6 00 2E         [ 1]  150 	ld a,rx1_head 
      000950 C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      000953 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      000954                        161 getc:: ;console input
      000954                        162 uart1_getc::
      000954 CD 09 4D         [ 4]  163 	call uart1_qgetc
      000957 27 FB            [ 1]  164 	jreq uart1_getc 
      000959 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      00095A A6 26            [ 1]  167 	ld a,#rx1_queue
      00095C CB 00 2E         [ 1]  168 	add a,rx1_head 
      00095F 5F               [ 1]  169 	clrw x  
      000960 97               [ 1]  170 	ld xl,a 
      000961 F6               [ 1]  171 	ld a,(x)
      000962 88               [ 1]  172 	push a
      000963 C6 00 2E         [ 1]  173 	ld a,rx1_head 
      000966 4C               [ 1]  174 	inc a 
      000967 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000969 C7 00 2E         [ 1]  176 	ld rx1_head,a 
      00096C 84               [ 1]  177 	pop a  
      00096D 85               [ 2]  178 	popw x
      00096E 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      00096F 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      00097B                        207 get_escape:
      00097B CD 09 54         [ 4]  208     call getc 
      00097E A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      000980 27 02            [ 1]  210     jreq 1$
      000982 4F               [ 1]  211     clr a
      000983 81               [ 4]  212     ret
      000984 CD 09 54         [ 4]  213 1$: call getc 
      000987 AE 09 6F         [ 2]  214     ldw x,#convert_table
      00098A                        215 2$:
      00098A F1               [ 1]  216     cp a,(x)
      00098B 27 08            [ 1]  217     jreq 4$
      00098D 1C 00 02         [ 2]  218     addw x,#2
      000990 7D               [ 1]  219     tnz (x)
      000991 26 F7            [ 1]  220     jrne 2$
      000993 4F               [ 1]  221     clr a
      000994 81               [ 4]  222     ret 
      000995 5C               [ 1]  223 4$: incw x 
      000996 F6               [ 1]  224     ld a,(x)
      000997 A1 84            [ 1]  225     cp a,#SUP
      000999 26 05            [ 1]  226     jrne 5$
      00099B 88               [ 1]  227     push a 
      00099C CD 09 54         [ 4]  228     call getc
      00099F 84               [ 1]  229     pop a 
      0009A0                        230 5$:
      0009A0 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      0009A1                        241 puts::
      0009A1 F6               [ 1]  242     ld a,(x)
      0009A2 27 06            [ 1]  243 	jreq 1$
      0009A4 CD 09 44         [ 4]  244 	call putc 
      0009A7 5C               [ 1]  245 	incw x 
      0009A8 20 F7            [ 2]  246 	jra puts 
      0009AA 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      0009AB                        258 bksp:
      0009AB A6 08            [ 1]  259 	ld a,#BS 
      0009AD CD 09 44         [ 4]  260 	call putc 
      0009B0 A6 20            [ 1]  261 	ld a,#SPACE 
      0009B2 CD 09 44         [ 4]  262 	call putc 
      0009B5 A6 08            [ 1]  263 	ld a,#BS 
      0009B7 CD 09 44         [ 4]  264 	call putc 
      0009BA 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      0009BB                        274 delete_nchar:
      0009BB 88               [ 1]  275 	push a 
      0009BC 0D 01            [ 1]  276 0$:	tnz (1,sp)
      0009BE 27 07            [ 1]  277 	jreq 1$
      0009C0 CD 09 AB         [ 4]  278 	call bksp 
      0009C3 0A 01            [ 1]  279 	dec (1,sp)
      0009C5 20 F5            [ 2]  280 	jra 0$
      0009C7 84               [ 1]  281 1$:	pop a 
      0009C8 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      0009C9                        290 send_escape:
      0009C9 A6 1B            [ 1]  291 	ld a,#ESC 
      0009CB CD 09 44         [ 4]  292 	call putc 
      0009CE A6 5B            [ 1]  293 	ld a,#'[
      0009D0 CD 09 44         [ 4]  294 	call putc 
      0009D3 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      0009D4                        311 send_parameter:
      0009D4 89               [ 2]  312 	pushw x 
      0009D5 5F               [ 1]  313 	clrw x 
      0009D6 97               [ 1]  314 	ld xl,a 
      0009D7 A6 0A            [ 1]  315 	ld a,#10 
      0009D9 62               [ 2]  316 	div x,a 
      0009DA 95               [ 1]  317 	ld xh,a 
      0009DB 9F               [ 1]  318 	ld a,xl
      0009DC 4D               [ 1]  319     tnz a 
      0009DD 27 0B            [ 1]  320     jreq 2$
      0009DF A1 09            [ 1]  321 	cp a,#9 
      0009E1 23 02            [ 2]  322 	jrule 1$
      0009E3 A6 39            [ 1]  323 	ld a,#'9
      0009E5                        324 1$:
      0009E5 AB 30            [ 1]  325 	add a,#'0 
      0009E7 CD 09 44         [ 4]  326 	call putc
      0009EA 9E               [ 1]  327 2$:	ld a,xh 
      0009EB AB 30            [ 1]  328 	add a,#'0
      0009ED CD 09 44         [ 4]  329 	call putc 
      0009F0 85               [ 2]  330 	popw x 
      0009F1 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      0009F2                        344 move_left:
      0009F2 88               [ 1]  345 	push a 
      0009F3 CD 09 C9         [ 4]  346 	call send_escape
      0009F6 84               [ 1]  347     pop a
      0009F7 CD 09 D4         [ 4]  348 	call send_parameter 
      0009FA A6 44            [ 1]  349 	ld a,#'D 
      0009FC CD 09 44         [ 4]  350 	call putc 
      0009FF 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      000A00                        362 move_right:
      000A00 88               [ 1]  363 	push a 
      000A01 CD 09 C9         [ 4]  364 	call send_escape
      000A04 84               [ 1]  365     pop a
      000A05 CD 09 D4         [ 4]  366 	call send_parameter 
      000A08 A6 43            [ 1]  367 	ld a,#'C 
      000A0A CD 09 44         [ 4]  368 	call putc 
      000A0D 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      000A0E                        379 spaces::
      000A0E A6 20            [ 1]  380 	ld a,#SPACE 
      000A10 5D               [ 2]  381 1$:	tnzw x
      000A11 27 06            [ 1]  382 	jreq 9$
      000A13 CD 09 44         [ 4]  383 	call putc 
      000A16 5A               [ 2]  384 	decw x
      000A17 20 F7            [ 2]  385 	jra 1$
      000A19                        386 9$: 
      000A19 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   Y       updated Y 
                                    399 ;-------------------------
                           000001   400 	IPOS=1
                           000002   401 	KCHAR=2 
                           000003   402     LLEN=3 
                           000003   403 	VSISE=3 
      000A1A                        404 insert_char: 
      000A1A                        405 	_vars VSIZE 
      000A1A 52 02            [ 2]    1     sub sp,#VSIZE 
      000A1C 6B 02            [ 1]  406     ld (KCHAR,sp),a 
      000A1E 9E               [ 1]  407     ld a,xh 
      000A1F 6B 01            [ 1]  408 	ld (IPOS,sp),a
      000A21 9F               [ 1]  409     ld a,xl 
      000A22 6B 03            [ 1]  410     ld (LLEN,sp),a  
      000A24 93               [ 1]  411     ldw x,y
      000A25 5C               [ 1]  412     incw x 
      000A26 7B 03            [ 1]  413     ld a,(LLEN,sp)
      000A28 10 01            [ 1]  414     sub a,(IPOS,sp)
      000A2A 4C               [ 1]  415     inc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000A2B C7 00 0E         [ 1]  416     ld acc8,a 
      000A2E 72 5F 00 0D      [ 1]  417     clr acc16
      000A32 CD 14 2C         [ 4]  418     call move
      000A35 90 AE 16 68      [ 2]  419     ldw y,#tib 
      000A39 7B 01            [ 1]  420     ld a,(IPOS,sp)
      000A3B C7 00 0E         [ 1]  421     ld acc8,a 
      000A3E 72 B9 00 0D      [ 2]  422     addw y,acc16 
      000A42 7B 02            [ 1]  423     ld a,(KCHAR,sp)
      000A44 90 F7            [ 1]  424     ld (y),a
      000A46 90 5C            [ 1]  425     incw y  
      000A48 7B 01            [ 1]  426     ld a,(IPOS,sp)
      000A4A CD 09 F2         [ 4]  427     call move_left
      000A4D AE 16 68         [ 2]  428     ldw x,#tib 
      000A50 CD 09 A1         [ 4]  429     call puts 
      000A53 7B 03            [ 1]  430     ld a,(LLEN,sp)
      000A55 10 01            [ 1]  431     sub a,(IPOS,sp) 
      000A57 CD 09 F2         [ 4]  432     call move_left 
      000A5A                        433 	_drop VSIZE 
      000A5A 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A5C 81               [ 4]  434 	ret 
                                    435 
                                    436 
                                    437 ;--------------------------
                                    438 ; delete character under cursor
                                    439 ; input:
                                    440 ;   A       line length   
                                    441 ;   xl      delete position
                                    442 ;   Y       line pointer 
                                    443 ;-------------------------
                           000001   444 	CPOS=1
                           000002   445 	LLEN=2
                           000002   446 	VSIZE=2
      000A5D                        447 delete_under:
      000A5D                        448 	_vars VSIZE 
      000A5D 52 02            [ 2]    1     sub sp,#VSIZE 
      000A5F 6B 02            [ 1]  449     ld (LLEN,sp),a 
      000A61 9F               [ 1]  450     ld a,xl 
      000A62 6B 01            [ 1]  451     ld (CPOS,sp),a 
      000A64 93               [ 1]  452     ldw x,y ; move destination
      000A65 90 5C            [ 1]  453     incw y  ; move source 
      000A67 7B 02            [ 1]  454     ld a,(LLEN,sp)
      000A69 10 01            [ 1]  455     sub a,(CPOS,sp)
      000A6B 4C               [ 1]  456     inc a ; move including zero at end.
      000A6C C7 00 0E         [ 1]  457     ld acc8,a 
      000A6F 72 5F 00 0D      [ 1]  458     clr acc16 
      000A73 CD 14 2C         [ 4]  459 	call move 
      000A76 90 AE 16 68      [ 2]  460     ldw y,#tib 
      000A7A 7B 01            [ 1]  461     ld a,(CPOS,sp)
      000A7C C7 00 0E         [ 1]  462     ld acc8,a 
      000A7F 72 B9 00 0D      [ 2]  463     addw y,acc16 
      000A83 93               [ 1]  464     ldw x,y 
      000A84 CD 09 A1         [ 4]  465     call puts 
      000A87 A6 20            [ 1]  466     ld a,#SPACE  
      000A89 CD 09 44         [ 4]  467     call putc
      000A8C 7B 02            [ 1]  468     ld a,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000A8E 10 01            [ 1]  469     sub a,(CPOS,sp)
      000A90 CD 09 F2         [ 4]  470     call move_left 
      000A93 0A 02            [ 1]  471     dec (LLEN,sp)
      000A95                        472 	_drop VSIZE 
      000A95 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A97 81               [ 4]  473 	ret 
                                    474 
                                    475 ;-----------------------------
                                    476 ; send ANSI sequence to delete
                                    477 ; whole line. Cursor position
                                    478 ; is not updated.
                                    479 ; ANSI: ESC[2K
                                    480 ; input:
                                    481 ;   none
                                    482 ; output:
                                    483 ;   none 
                                    484 ;-----------------------------
      000A98                        485 delete_line:
      000A98 CD 09 C9         [ 4]  486     call send_escape
      000A9B A6 32            [ 1]  487 	ld a,#'2
      000A9D CD 09 44         [ 4]  488 	call putc 
      000AA0 A6 4B            [ 1]  489 	ld a,#'K 
      000AA2 CD 09 44         [ 4]  490 	call putc 
      000AA5 81               [ 4]  491 	ret 
                                    492 
                                    493 
                                    494 
                                    495 ;------------------------------------
                                    496 ; read a line of text from terminal
                                    497 ;  touches de contrôle
                                    498 ;    BS   efface caractère à gauche 
                                    499 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    500 ;    CTRL_R  répète dernière ligne saisie
                                    501 ;    CTRL_D  supprime ligne 
                                    502 ;    HOME  va au début de la ligne 
                                    503 ;    KEY_END  va à la fin de la ligne 
                                    504 ;    ARROW_LEFT  un caractère vers la gauche 
                                    505 ;    ARROW_RIGHT  un caractère vers la droite 
                                    506 ;    CTRL_O  commute entre insert/overwrite
                                    507 ; input:
                                    508 ;	none
                                    509 ; local variable on stack:
                                    510 ;	LL  line length
                                    511 ;   RXCHAR last received character 
                                    512 ; output:
                                    513 ;   text in tib  buffer
                                    514 ;   count  line length 
                                    515 ;------------------------------------
                                    516 	; local variables
                           000001   517 	LL_HB=1
                           000001   518 	RXCHAR = 1 ; last char received
                           000002   519 	LL = 2  ; accepted line length
                           000003   520 	CPOS=3  ; cursor position 
                           000004   521 	OVRWR=4 ; overwrite flag 
                           000004   522 	VSIZE=4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000AA6                        523 readln::
      000AA6                        524 	_vars VSIZE 
      000AA6 52 04            [ 2]    1     sub sp,#VSIZE 
      000AA8 5F               [ 1]  525 	clrw x 
      000AA9 1F 02            [ 2]  526 	ldw (LL,sp),x 
      000AAB 1F 03            [ 2]  527 	ldw (CPOS,sp),x 
      000AAD 03 04            [ 1]  528 	cpl (OVRWR,sp) ; default to overwrite mode 
      000AAF 90 AE 16 68      [ 2]  529  	ldw y,#tib ; input buffer
      000AB3                        530 readln_loop:
      000AB3 CD 09 54         [ 4]  531 	call getc
      000AB6 6B 01            [ 1]  532 	ld (RXCHAR,sp),a
      000AB8 A1 1B            [ 1]  533     cp a,#ESC 
      000ABA 26 05            [ 1]  534     jrne 0$
      000ABC CD 09 7B         [ 4]  535     call get_escape 
      000ABF 6B 01            [ 1]  536     ld (RXCHAR,sp),a 
      000AC1 A1 0D            [ 1]  537 0$:	cp a,#CR
      000AC3 26 03            [ 1]  538 	jrne 1$
      000AC5 CC 0C 4F         [ 2]  539 	jp readln_quit
      000AC8 A1 0A            [ 1]  540 1$:	cp a,#LF 
      000ACA 26 03            [ 1]  541 	jrne 2$ 
      000ACC CC 0C 4F         [ 2]  542 	jp readln_quit
      000ACF                        543 2$:
      000ACF A1 08            [ 1]  544 	cp a,#BS
      000AD1 26 12            [ 1]  545 	jrne 3$
                                    546 ; delete left 
      000AD3 0D 03            [ 1]  547     tnz (CPOS,sp)
      000AD5 27 DC            [ 1]  548     jreq readln_loop 
      000AD7 A6 01            [ 1]  549     ld a,#1 
      000AD9 CD 09 F2         [ 4]  550     call move_left
      000ADC 0A 03            [ 1]  551     dec (CPOS,sp)
      000ADE 90 5A            [ 2]  552     decw y 
      000AE0 7B 03            [ 1]  553     ld a,(CPOS,sp) 
      000AE2 CC 0B FB         [ 2]  554     jp 12$
      000AE5                        555 3$:
      000AE5 A1 04            [ 1]  556 	cp a,#CTRL_D
      000AE7 26 1A            [ 1]  557 	jrne 4$
                                    558 ;delete line 
      000AE9 CD 0A 98         [ 4]  559 	call delete_line 
      000AEC 7B 03            [ 1]  560     ld a,(CPOS,sp)
      000AEE 4C               [ 1]  561     inc a 
      000AEF CD 09 F2         [ 4]  562     call move_left 
      000AF2 A6 3E            [ 1]  563 	ld a,#'> 
      000AF4 CD 09 44         [ 4]  564 	call putc 
      000AF7 90 AE 16 68      [ 2]  565 	ldw y,#tib
      000AFB 90 7F            [ 1]  566 	clr (y)
      000AFD 0F 02            [ 1]  567 	clr (LL,sp)
      000AFF 0F 03            [ 1]  568 	clr (CPOS,sp)
      000B01 20 B0            [ 2]  569 	jra readln_loop
      000B03                        570 4$:
      000B03 A1 12            [ 1]  571 	cp a,#CTRL_R 
      000B05 26 21            [ 1]  572 	jrne 5$
                                    573 ;reprint 
      000B07 0D 02            [ 1]  574 	tnz (LL,sp)
      000B09 26 A8            [ 1]  575 	jrne readln_loop
      000B0B AE 16 68         [ 2]  576 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000B0E CD 14 00         [ 4]  577 	call strlen 
      000B11 90 AE 16 68      [ 2]  578 	ldw y,#tib 
      000B15 27 9C            [ 1]  579 	jreq readln_loop
      000B17 6B 02            [ 1]  580 	ld (LL,sp),a 
      000B19 6B 03            [ 1]  581     ld (CPOS,sp),a
      000B1B AE 16 68         [ 2]  582 	ldw x,#tib 
      000B1E CD 09 A1         [ 4]  583 	call puts
      000B21 0F 01            [ 1]  584 	clr (LL_HB,sp)
      000B23 72 F9 01         [ 2]  585 	addw y,(LL_HB,sp)
      000B26 20 8B            [ 2]  586 	jra readln_loop 
      000B28                        587 5$:
      000B28 A1 05            [ 1]  588 	cp a,#CTRL_E 
      000B2A 26 49            [ 1]  589 	jrne 6$
                                    590 ;edit line number 
      000B2C AE 16 68         [ 2]  591 	ldw x,#tib 
      000B2F CD 18 B4         [ 4]  592 	call atoi24
      000B32 CE 00 0D         [ 2]  593 	ldw x,acc16
      000B35 CD 0C 89         [ 4]  594 	call search_lineno
      000B38 5D               [ 2]  595 	tnzw x 
      000B39 26 0B            [ 1]  596 	jrne 51$
      000B3B 0F 02            [ 1]  597 	clr (LL,sp)
      000B3D 90 AE 16 68      [ 2]  598 	ldw y,#tib
      000B41 90 7F            [ 1]  599     clr (y) 	
      000B43 CC 0C 4F         [ 2]  600 	jp readln_quit  
      000B46                        601 51$:
      000B46 CF 00 04         [ 2]  602 	ldw basicptr,x
      000B49 E6 02            [ 1]  603 	ld a,(2,x)
      000B4B C7 00 03         [ 1]  604 	ld count,a 
      000B4E 90 AE 16 68      [ 2]  605 	ldw y,#tib 
      000B52 CD 12 16         [ 4]  606 	call decompile 
      000B55 0F 01            [ 1]  607 	clr (LL_HB,sp)
      000B57 A6 0D            [ 1]  608 	ld a,#CR 
      000B59 CD 09 44         [ 4]  609 	call putc 
      000B5C A6 3E            [ 1]  610 	ld a,#'>
      000B5E CD 09 44         [ 4]  611 	call putc
      000B61 AE 16 68         [ 2]  612     ldw x,#tib  
      000B64 CD 14 00         [ 4]  613 	call strlen 
      000B67 6B 02            [ 1]  614 	ld (LL,sp),a 
      000B69 CD 09 A1         [ 4]  615 	call puts 
      000B6C 90 93            [ 1]  616 	ldw y,x
      000B6E 7B 02            [ 1]  617     ld a,(LL,sp)
      000B70 6B 03            [ 1]  618     ld (CPOS,sp),a  
      000B72 CC 0A B3         [ 2]  619 	jp readln_loop
      000B75                        620 6$:
      000B75 A1 81            [ 1]  621 	cp a,#ARROW_RIGHT
      000B77 26 15            [ 1]  622    	jrne 7$ 
                                    623 ; right arrow
      000B79 7B 03            [ 1]  624 	ld a,(CPOS,sp)
      000B7B 11 02            [ 1]  625     cp a,(LL,sp)
      000B7D 2B 03            [ 1]  626     jrmi 61$
      000B7F CC 0A B3         [ 2]  627     jp readln_loop 
      000B82                        628 61$:
      000B82 A6 01            [ 1]  629     ld a,#1 
      000B84 CD 0A 00         [ 4]  630 	call move_right 
      000B87 0C 03            [ 1]  631 	inc (CPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000B89 90 5C            [ 1]  632     incw y 
      000B8B CC 0A B3         [ 2]  633     jp readln_loop 
      000B8E A1 80            [ 1]  634 7$: cp a,#ARROW_LEFT  
      000B90 26 13            [ 1]  635 	jrne 8$
                                    636 ; left arrow 
      000B92 0D 03            [ 1]  637 	tnz (CPOS,sp)
      000B94 26 03            [ 1]  638 	jrne 71$
      000B96 CC 0A B3         [ 2]  639 	jp readln_loop
      000B99                        640 71$:
      000B99 A6 01            [ 1]  641     ld a,#1 
      000B9B CD 09 F2         [ 4]  642 	call move_left 
      000B9E 0A 03            [ 1]  643 	dec (CPOS,sp)
      000BA0 90 5A            [ 2]  644     decw y 
      000BA2 CC 0A B3         [ 2]  645 	jp readln_loop 
      000BA5 A1 82            [ 1]  646 8$: cp a,#HOME  
      000BA7 26 0E            [ 1]  647 	jrne 9$
                                    648 ; HOME 
      000BA9 7B 03            [ 1]  649     ld a,(CPOS,sp)
      000BAB CD 09 F2         [ 4]  650     call move_left 
      000BAE 0F 03            [ 1]  651 	clr (CPOS,sp)
      000BB0 90 AE 16 68      [ 2]  652     ldw y,#tib 
      000BB4 CC 0A B3         [ 2]  653 	jp readln_loop  
      000BB7 A1 83            [ 1]  654 9$: cp a,#KEY_END  
      000BB9 26 26            [ 1]  655 	jrne 10$
                                    656 ; KEY_END 
      000BBB 7B 03            [ 1]  657 	ld a,(CPOS,sp)
      000BBD 11 02            [ 1]  658 	cp a,(LL,sp)
      000BBF 26 03            [ 1]  659 	jrne 91$
      000BC1 CC 0A B3         [ 2]  660 	jp readln_loop 
      000BC4                        661 91$:
      000BC4 7B 02            [ 1]  662 	ld a,(LL,sp)
      000BC6 10 03            [ 1]  663 	sub a,(CPOS,sp)
      000BC8 CD 0A 00         [ 4]  664 	call move_right 
      000BCB 7B 02            [ 1]  665 	ld a,(LL,sp)
      000BCD 6B 03            [ 1]  666 	ld (CPOS,sp),a
      000BCF 90 AE 16 68      [ 2]  667     ldw y,#tib
      000BD3 72 5F 00 0D      [ 1]  668     clr acc16 
      000BD7 C7 00 0E         [ 1]  669     ld acc8,a 
      000BDA 72 B9 00 0D      [ 2]  670     addw y,acc16  
      000BDE CC 0A B3         [ 2]  671 	jp readln_loop 
      000BE1 A1 0F            [ 1]  672 10$: cp a,#CTRL_O
      000BE3 26 0C            [ 1]  673 	jrne 11$ 
                                    674 ; toggle between insert/overwrite
      000BE5 03 04            [ 1]  675 	cpl (OVRWR,sp)
      000BE7 90 89            [ 2]  676 	pushw y 
      000BE9 CD 25 7C         [ 4]  677 	call beep_1khz
      000BEC 90 85            [ 2]  678 	popw y 
      000BEE CC 0A B3         [ 2]  679 	jp readln_loop 
      000BF1 A1 84            [ 1]  680 11$: cp a,#SUP 
      000BF3 26 11            [ 1]  681     jrne final_test 
                                    682 ; del character under cursor 
      000BF5 7B 03            [ 1]  683     ld a,(CPOS,sp)
      000BF7 11 02            [ 1]  684     cp a,(LL,sp)
      000BF9 2A 08            [ 1]  685     jrpl 13$
      000BFB                        686 12$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000BFB 97               [ 1]  687     ld xl,a    ; cursor position 
      000BFC 7B 02            [ 1]  688     ld a,(LL,sp)  ; line length
      000BFE CD 0A 5D         [ 4]  689     call delete_under
      000C01 0A 02            [ 1]  690     dec (LLEN,sp)
      000C03                        691 13$:
      000C03 CC 0A B3         [ 2]  692     jp readln_loop 
      000C06                        693 final_test:
      000C06 A1 20            [ 1]  694 	cp a,#SPACE
      000C08 2A 03            [ 1]  695 	jrpl accept_char
      000C0A CC 0A B3         [ 2]  696 	jp readln_loop
      000C0D                        697 accept_char:
      000C0D A6 4F            [ 1]  698 	ld a,#TIB_SIZE-1
      000C0F 11 02            [ 1]  699 	cp a, (LL,sp)
      000C11 2A 03            [ 1]  700 	jrpl 1$
      000C13 CC 0A B3         [ 2]  701 	jp readln_loop
      000C16 0D 04            [ 1]  702 1$:	tnz (OVRWR,sp)
      000C18 26 18            [ 1]  703 	jrne overwrite
                                    704 ; insert mode 
      000C1A 7B 03            [ 1]  705     ld a,(CPOS,sp)
      000C1C 11 02            [ 1]  706     cp a,(LL,sp)
      000C1E 27 12            [ 1]  707     jreq overwrite
      000C20 7B 02            [ 1]  708     ld a,(LL,sp)
      000C22 97               [ 1]  709     ld xl,a 
      000C23 7B 03            [ 1]  710     ld a,(CPOS,sp)
      000C25 95               [ 1]  711     ld xh,a
      000C26 7B 01            [ 1]  712     ld a,(RXCHAR,sp)
      000C28 CD 0A 1A         [ 4]  713     call insert_char
      000C2B 0C 02            [ 1]  714     inc (LLEN,sp)
      000C2D 0C 03            [ 1]  715     inc (CPOS,sp)
      000C2F CC 0A B3         [ 2]  716     jp readln_loop 
      000C32                        717 overwrite:
      000C32 7B 01            [ 1]  718 	ld a,(RXCHAR,sp)
      000C34 90 F7            [ 1]  719 	ld (y),a
      000C36 90 5C            [ 1]  720     incw y
      000C38 CD 09 44         [ 4]  721     call putc 
      000C3B 7B 03            [ 1]  722 	ld a,(CPOS,sp)
      000C3D 11 02            [ 1]  723 	cp a,(LL,sp)
      000C3F 2B 09            [ 1]  724 	jrmi 1$
      000C41 90 7F            [ 1]  725 	clr (y)
      000C43 0C 02            [ 1]  726 	inc (LL,sp)
      000C45 0C 03            [ 1]  727     inc (CPOS,sp)
      000C47 CC 0A B3         [ 2]  728 	jp readln_loop 
      000C4A                        729 1$:	
      000C4A 0C 03            [ 1]  730 	inc (CPOS,sp)
      000C4C CC 0A B3         [ 2]  731 	jp readln_loop 
      000C4F                        732 readln_quit:
      000C4F 90 AE 16 68      [ 2]  733 	ldw y,#tib
      000C53 0F 01            [ 1]  734     clr (LL_HB,sp) 
      000C55 72 F9 01         [ 2]  735     addw y,(LL_HB,sp)
      000C58 90 7F            [ 1]  736     clr (y)
      000C5A 7B 02            [ 1]  737 	ld a,(LL,sp)
      000C5C C7 00 03         [ 1]  738 	ld count,a 
      000C5F A6 0D            [ 1]  739 	ld a,#CR
      000C61 CD 09 44         [ 4]  740 	call putc
      000C64                        741 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      000C64 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C66 81               [ 4]  742 	ret
                                    743 
                                    744 ;------------------------------
                                    745 ; print byte  in hexadecimal 
                                    746 ; on console
                                    747 ; input:
                                    748 ;    A		byte to print
                                    749 ;------------------------------
      000C67                        750 print_hex::
      000C67 88               [ 1]  751 	push a 
      000C68 4E               [ 1]  752 	swap a 
      000C69 CD 0C 7E         [ 4]  753 	call to_hex_char 
      000C6C CD 09 44         [ 4]  754 	call putc 
      000C6F 7B 01            [ 1]  755     ld a,(1,sp) 
      000C71 CD 0C 7E         [ 4]  756 	call to_hex_char
      000C74 CD 09 44         [ 4]  757 	call putc
      000C77 A6 20            [ 1]  758 	ld a,#SPACE 
      000C79 CD 09 44         [ 4]  759 	call putc 
      000C7C 84               [ 1]  760 	pop a 
      000C7D 81               [ 4]  761 	ret 
                                    762 
                                    763 ;----------------------------------
                                    764 ; convert to hexadecimal digit 
                                    765 ; input:
                                    766 ;   A       digit to convert 
                                    767 ; output:
                                    768 ;   A       hexdecimal character 
                                    769 ;----------------------------------
      000C7E                        770 to_hex_char::
      000C7E A4 0F            [ 1]  771 	and a,#15 
      000C80 A1 09            [ 1]  772 	cp a,#9 
      000C82 23 02            [ 2]  773 	jrule 1$ 
      000C84 AB 07            [ 1]  774 	add a,#7
      000C86 AB 30            [ 1]  775 1$: add a,#'0 
      000C88 81               [ 4]  776 	ret 
                                    777 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C89                         51 search_lineno::
      000C89                         52 	_vars VSIZE
      000C89 52 02            [ 2]    1     sub sp,#VSIZE 
      000C8B 0F 01            [ 1]   53 	clr (LL,sp)
      000C8D 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C91 4D               [ 1]   55 	tnz a 
      000C92 27 04            [ 1]   56 	jreq search_ln_loop
      000C94 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C98                         58 search_ln_loop:
      000C98 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C9C 2A 10            [ 1]   60 	jrpl 8$
      000C9E 90 F3            [ 1]   61 	cpw x,(y)
      000CA0 27 0E            [ 1]   62 	jreq 9$
      000CA2 2B 0A            [ 1]   63 	jrmi 8$ 
      000CA4 90 E6 02         [ 1]   64 	ld a,(2,y)
      000CA7 6B 02            [ 1]   65 	ld (LB,sp),a 
      000CA9 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000CAC 20 EA            [ 2]   67 	jra search_ln_loop 
      000CAE                         68 8$: 
      000CAE 5F               [ 1]   69 	clrw x 	
      000CAF 51               [ 1]   70 	exgw x,y 
      000CB0                         71 9$: _drop VSIZE
      000CB0 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CB2 51               [ 1]   72 	exgw x,y   
      000CB3 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000CB4                         83 del_line: 
      000CB4                         84 	_vars VSIZE 
      000CB4 52 04            [ 2]    1     sub sp,#VSIZE 
      000CB6 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000CB8 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000CBA 0F 01            [ 1]   87 	clr (LLEN,sp)
      000CBC 90 93            [ 1]   88 	ldw y,x  
      000CBE 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000CC1 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000CC3 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000CC7 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000CCA 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000CCE 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000CD0 CD 14 2C         [ 4]   95 	call move
      000CD3 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000CD7 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000CDA 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000CDE                         99 	_drop VSIZE     
      000CDE 5B 04            [ 2]    1     addw sp,#VSIZE 
      000CE0 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000CE1                        115 create_gap:
      000CE1                        116 	_vars VSIZE
      000CE1 52 06            [ 2]    1     sub sp,#VSIZE 
      000CE3 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000CE5 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000CE7 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000CEB 90 93            [ 1]  120 	ldw y,x ; SRC
      000CED 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000CF1 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000CF3 CE 00 1D         [ 2]  124 	ldw x,txtend 
      000CF6 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000CF9 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000CFC 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000CFE CD 14 2C         [ 4]  128 	call move
      000D01 CE 00 1D         [ 2]  129 	ldw x,txtend
      000D04 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000D07 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      000D0A                        132 9$:	_drop VSIZE 
      000D0A 5B 06            [ 2]    1     addw sp,#VSIZE 
      000D0C 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000D0D                        150 insert_line:
      000D0D                        151 	_vars VSIZE 
      000D0D 52 08            [ 2]    1     sub sp,#VSIZE 
      000D0F CE 00 1D         [ 2]  152 	ldw x,txtend  
      000D12 C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000D15 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000D17 AE 00 02         [ 2]  156 	ldw x,#2 
      000D1A 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000D1E A1 03            [ 1]  158 	cp a,#3
      000D20 27 5A            [ 1]  159 	jreq insert_ln_exit
      000D22 5F               [ 1]  160 	clrw x 
      000D23 97               [ 1]  161 	ld xl,a
      000D24 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000D26 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000D29 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000D2B CE 00 1D         [ 2]  165 	ldw x,txtend 
      000D2E 20 38            [ 2]  166 	jra 4$
      000D30 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000D34 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000D36 AE 00 02         [ 2]  170 	ldw x,#2 
      000D39 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000D3D 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000D3E 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000D40 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000D42 4F               [ 1]  177 	clr a 
      000D43 CD 0C 89         [ 4]  178 	call search_lineno 
      000D46 5D               [ 2]  179 	tnzw x 
      000D47 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000D49 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000D4B 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000D4D 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000D4F CD 0C B4         [ 4]  188 	call del_line
      000D52                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000D52 A6 03            [ 1]  192 	ld a,#3
      000D54 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000D56 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000D58 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000D5A C3 00 1D         [ 2]  198 	cpw x,txtend 
      000D5D 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000D5F 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000D61 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000D63 CD 0C E1         [ 4]  204 	call create_gap
      000D66 20 06            [ 2]  205 	jra 5$
      000D68                        206 4$: 
      000D68 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000D6B CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000D6E 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000D70 CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D73 90 AE 16 B8      [ 2]  212 	ldw y,#pad ;SRC 
      000D77 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D79 CD 14 2C         [ 4]  214 	call move 
      000D7C                        215 insert_ln_exit:	
      000D7C                        216 	_drop VSIZE
      000D7C 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D7E 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D7F                        233 parse_quote: 
      000D7F                        234 	_vars VSIZE 
      000D7F 52 02            [ 2]    1     sub sp,#VSIZE 
      000D81 4F               [ 1]  235 	clr a
      000D82 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D84                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000D84 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D87 27 24            [ 1]  239 	jreq 6$
      000D89 72 5C 00 01      [ 1]  240 	inc in 
      000D8D 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D8F A6 5C            [ 1]  242 	ld a,#'\
      000D91 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D93 26 0A            [ 1]  244 	jrne 3$
      000D95 0F 01            [ 1]  245 	clr (PREV,sp)
      000D97 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D99 AD 1C            [ 4]  247 	callr convert_escape
      000D9B F7               [ 1]  248 	ld (x),a 
      000D9C 5C               [ 1]  249 	incw x 
      000D9D 20 E5            [ 2]  250 	jra 2$
      000D9F                        251 3$:
      000D9F 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000DA1 A1 5C            [ 1]  253 	cp a,#'\'
      000DA3 27 DD            [ 1]  254 	jreq 1$
      000DA5 A1 22            [ 1]  255 	cp a,#'"
      000DA7 27 04            [ 1]  256 	jreq 6$ 
      000DA9 F7               [ 1]  257 	ld (x),a 
      000DAA 5C               [ 1]  258 	incw x 
      000DAB 20 D7            [ 2]  259 	jra 2$
      000DAD                        260 6$:
      000DAD 7F               [ 1]  261 	clr (x)
      000DAE 5C               [ 1]  262 	incw x 
      000DAF 90 93            [ 1]  263 	ldw y,x 
      000DB1 5F               [ 1]  264 	clrw x 
      000DB2 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000DB4                        266 	_drop VSIZE
      000DB4 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DB6 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000DB7                        278 convert_escape:
      000DB7 89               [ 2]  279 	pushw x 
      000DB8 AE 0D CC         [ 2]  280 	ldw x,#escaped 
      000DBB F1               [ 1]  281 1$:	cp a,(x)
      000DBC 27 06            [ 1]  282 	jreq 2$
      000DBE 7D               [ 1]  283 	tnz (x)
      000DBF 27 09            [ 1]  284 	jreq 3$
      000DC1 5C               [ 1]  285 	incw x 
      000DC2 20 F7            [ 2]  286 	jra 1$
      000DC4 1D 0D CC         [ 2]  287 2$: subw x,#escaped 
      000DC7 9F               [ 1]  288 	ld a,xl 
      000DC8 AB 07            [ 1]  289 	add a,#7
      000DCA 85               [ 2]  290 3$:	popw x 
      000DCB 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    292 
      000DCC 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000DD4                        310 parse_integer: ; { -- n }
      000DD4 89               [ 2]  311 	pushw x 	
      000DD5 4B 00            [ 1]  312 	push #0 ; TCHAR
      000DD7 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000DD9 A1 24            [ 1]  314 	cp a,#'$
      000DDB 26 04            [ 1]  315 	jrne 2$ 
      000DDD                        316     _drop #1
      000DDD 5B 01            [ 2]    1     addw sp,##1 
      000DDF 4B 10            [ 1]  317 	push #16  ; BASE=16
      000DE1 F7               [ 1]  318 2$:	ld (x),a 
      000DE2 5C               [ 1]  319 	incw x 
      000DE3 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000DE6 72 5C 00 01      [ 1]  321 	inc in 
      000DEA CD 18 A8         [ 4]  322 	call to_upper 
      000DED 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000DEF CD 0E 75         [ 4]  324 	call is_digit 
      000DF2 25 ED            [ 1]  325 	jrc 2$
      000DF4 A6 10            [ 1]  326 	ld a,#16 
      000DF6 11 01            [ 1]  327 	cp a,(BASE,sp)
      000DF8 26 0A            [ 1]  328 	jrne 3$ 
      000DFA 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000DFC A1 41            [ 1]  330 	cp a,#'A 
      000DFE 2B 04            [ 1]  331 	jrmi 3$ 
      000E00 A1 47            [ 1]  332 	cp a,#'G 
      000E02 2B DD            [ 1]  333 	jrmi 2$ 
      000E04 72 5A 00 01      [ 1]  334 3$: dec in 	
      000E08 7F               [ 1]  335     clr (x)
      000E09 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000E0B CD 18 B4         [ 4]  337 	call atoi24
      000E0E 90 93            [ 1]  338 	ldw y,x
      000E10 C6 00 0C         [ 1]  339 	ld a,acc24 
      000E13 90 F7            [ 1]  340 	ld (y),a 
      000E15 72 A9 00 01      [ 2]  341 	addw y,#1  
      000E19 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000E1C 90 FF            [ 2]  343 	ldw (y),x 
      000E1E 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000E22 A6 84            [ 1]  345 	ld a,#TK_INTGR
      000E24                        346 	_drop VSIZE  
      000E24 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E26 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000E27                        364 parse_binary: ; { -- n }
      000E27 4B 00            [ 1]  365 	push #0
      000E29 4B 00            [ 1]  366 	push #0
      000E2B 4B 00            [ 1]  367 	push #0
      000E2D                        368 2$:	
      000E2D 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000E30 72 5C 00 01      [ 1]  370 	inc in 
      000E34 A1 30            [ 1]  371 	cp a,#'0 
      000E36 27 06            [ 1]  372 	jreq 3$
      000E38 A1 31            [ 1]  373 	cp a,#'1 
      000E3A 27 02            [ 1]  374 	jreq 3$ 
      000E3C 20 0B            [ 2]  375 	jra bin_exit 
      000E3E A0 30            [ 1]  376 3$: sub a,#'0 
      000E40 46               [ 1]  377 	rrc a
      000E41 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000E43 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000E45 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000E47 20 E4            [ 2]  381 	jra 2$  
      000E49                        382 bin_exit:
      000E49 72 5A 00 01      [ 1]  383 	dec in 
      000E4D 90 93            [ 1]  384 	ldw y,x
      000E4F 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000E51 C7 00 0C         [ 1]  386 	ld acc24,a 
      000E54 1E 02            [ 2]  387 	ldw x,(BINARY+1,sp)
      000E56 CF 00 0D         [ 2]  388 	ldw acc16,x
      000E59 90 FF            [ 2]  389 	ldw (y),x 
      000E5B 72 A9 00 02      [ 2]  390 	addw y,#2  
      000E5F A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000E61                        392 	_drop VSIZE 
      000E61 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E63 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000E64                        402 is_alpha::
      000E64 A1 41            [ 1]  403 	cp a,#'A 
      000E66 8C               [ 1]  404 	ccf 
      000E67 24 0B            [ 1]  405 	jrnc 9$ 
      000E69 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000E6B 25 07            [ 1]  407 	jrc 9$ 
      000E6D A1 61            [ 1]  408 	cp a,#'a 
      000E6F 8C               [ 1]  409 	ccf 
      000E70 24 02            [ 1]  410 	jrnc 9$
      000E72 A1 7B            [ 1]  411 	cp a,#'z+1
      000E74 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E75                        421 is_digit::
      000E75 A1 30            [ 1]  422 	cp a,#'0
      000E77 25 03            [ 1]  423 	jrc 1$
      000E79 A1 3A            [ 1]  424     cp a,#'9+1
      000E7B 8C               [ 1]  425 	ccf 
      000E7C 8C               [ 1]  426 1$:	ccf 
      000E7D 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E7E                        438 is_alnum::
      000E7E CD 0E 75         [ 4]  439 	call is_digit
      000E81 25 03            [ 1]  440 	jrc 1$ 
      000E83 CD 0E 64         [ 4]  441 	call is_alpha
      000E86 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000E87                        453 is_symbol_char: 
      000E87 A1 5F            [ 1]  454 	cp a,#'_ 
      000E89 26 03            [ 1]  455 	jrne 1$
      000E8B 99               [ 1]  456 	scf 
      000E8C 20 03            [ 2]  457 	jra 9$ 
      000E8E CD 0E 7E         [ 4]  458 1$:	call is_alnum 
      000E91 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E92                        473 parse_symbol:
      000E92 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E93                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E93 CD 18 A8         [ 4]  477 	call to_upper  
      000E96 F7               [ 1]  478 	ld (x), a 
      000E97 5C               [ 1]  479 	incw x
      000E98 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E9B 72 5C 00 01      [ 1]  481 	inc in 
      000E9F CD 0E 87         [ 4]  482 	call is_symbol_char 
      000EA2 25 EF            [ 1]  483 	jrc symb_loop 
      000EA4 7F               [ 1]  484 	clr (x)
      000EA5 72 5A 00 01      [ 1]  485 	dec in  
      000EA9 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000EAA                        502 parse_keyword: 
      000EAA 89               [ 2]  503 	pushw x ; preserve *symbol 
      000EAB CD 0E 92         [ 4]  504 	call parse_symbol
      000EAE 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000EB0 E6 02            [ 1]  506 	ld a,(2,x)
      000EB2 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000EB4 E6 01            [ 1]  509 	ld a,(1,x) 
      000EB6 A0 41            [ 1]  510 	sub a,#'A 
      000EB8 AE 00 03         [ 2]  511 	ldw x,#3 
      000EBB 42               [ 4]  512 	mul x,a 
      000EBC 1C 00 30         [ 2]  513 	addw x,#vars 
      000EBF A6 85            [ 1]  514 	ld a,#TK_VAR 
      000EC1 20 36            [ 2]  515 	jra 4$ 
      000EC3                        516 2$: ; check for keyword, otherwise syntax error.
      000EC3                        517 	_ldx_dict kword_dict ; dictionary entry point
      000EC3 AE 33 43         [ 2]    1     ldw x,#kword_dict+2
      000EC6 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000EC8 90 5C            [ 1]  519 	incw y 
      000ECA CD 19 1E         [ 4]  520 	call search_dict
      000ECD 4D               [ 1]  521 	tnz a
      000ECE 26 29            [ 1]  522 	jrne 4$
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000ED0 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000ED2 A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000ED4 90 F7            [ 1]  527 	ld (y),a 
      000ED6 90 5C            [ 1]  528 	incw y
      000ED8 93               [ 1]  529 	ldw x,y 
      000ED9 CD 14 00         [ 4]  530 	call strlen
      000EDC A1 0F            [ 1]  531 	cp a,#15 
      000EDE 23 02            [ 2]  532 	jrule 22$ 
      000EE0 A6 0F            [ 1]  533 	ld a,#15
      000EE2                        534 22$:	
      000EE2 88               [ 1]  535 	push a 
      000EE3                        536 24$:
      000EE3 90 F6            [ 1]  537     ld a,(y)
      000EE5 27 09            [ 1]  538 	jreq 3$
      000EE7 90 5C            [ 1]  539 	incw y
      000EE9 0A 01            [ 1]  540 	dec (1,sp) 
      000EEB 26 F6            [ 1]  541 	jrne 24$
      000EED 4F               [ 1]  542 	clr a 
      000EEE 90 F7            [ 1]  543 	ld (y),a 
      000EF0 90 5C            [ 1]  544 3$: incw y 
      000EF2                        545 	_drop 1 
      000EF2 5B 01            [ 2]    1     addw sp,#1 
      000EF4 A6 03            [ 1]  546 	ld a,#TK_LABEL 
      000EF6 5F               [ 1]  547 	clrw x 	
      000EF7 20 1B            [ 2]  548 	jra 5$ 
      000EF9                        549 4$:	
      000EF9 16 01            [ 2]  550 	ldw y,(XFIRST,sp)
      000EFB A1 87            [ 1]  551 	cp a,#TK_AND
      000EFD 2B 06            [ 1]  552 	jrmi 41$
      000EFF 90 F7            [ 1]  553 	ld (y),a 
      000F01 90 5C            [ 1]  554 	incw y 
      000F03 20 0F            [ 2]  555 	jra 5$ 
      000F05                        556 41$:	
      000F05 A3 00 4C         [ 2]  557 	cpw x,#LET_IDX 
      000F08 27 0A            [ 1]  558 	jreq 5$  ; don't compile LET command 
      000F0A 90 F7            [ 1]  559 	ld (y),a 
      000F0C 90 5C            [ 1]  560 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000F0E 90 FF            [ 2]  561 	ldw (y),x
      000F10 72 A9 00 02      [ 2]  562 	addw y,#2  
      000F14                        563 5$:	_drop VSIZE 
      000F14 5B 02            [ 2]    1     addw sp,#VSIZE 
      000F16 81               [ 4]  564 	ret  	
                                    565 
                                    566 ;------------------------------------
                                    567 ; skip character c in text starting from 'in'
                                    568 ; input:
                                    569 ;	 y 		point to text buffer
                                    570 ;    a 		character to skip
                                    571 ; output:  
                                    572 ;	'in' ajusted to new position
                                    573 ;------------------------------------
                           000001   574 	C = 1 ; local var
      000F17                        575 skip:
      000F17 88               [ 1]  576 	push a
      000F18 91 D6 00         [ 4]  577 1$:	ld a,([in.w],y)
      000F1B 27 0A            [ 1]  578 	jreq 2$
      000F1D 11 01            [ 1]  579 	cp a,(C,sp)
      000F1F 26 06            [ 1]  580 	jrne 2$
      000F21 72 5C 00 01      [ 1]  581 	inc in
      000F25 20 F1            [ 2]  582 	jra 1$
      000F27                        583 2$: _drop 1 
      000F27 5B 01            [ 2]    1     addw sp,#1 
      000F29 81               [ 4]  584 	ret
                                    585 	
                                    586 
                                    587 ;------------------------------------
                                    588 ; scan text for next token
                                    589 ; input: 
                                    590 ;	X 		pointer to buffer where 
                                    591 ;	        token id and value are copied 
                                    592 ; use:
                                    593 ;	Y   pointer to text in tib 
                                    594 ; output:
                                    595 ;   A       token attribute 
                                    596 ;   X 		token value
                                    597 ;   Y       updated position in output buffer   
                                    598 ;------------------------------------
                                    599 	; use to check special character 
                                    600 	.macro _case c t  
                                    601 	ld a,#c 
                                    602 	cp a,(TCHAR,sp) 
                                    603 	jrne t
                                    604 	.endm 
                                    605 
                           000001   606 	TCHAR=1
                           000002   607 	ATTRIB=2
                           000002   608 	VSIZE=2
      000F2A                        609 get_token:: 
      000F2A                        610 	_vars VSIZE
      000F2A 52 02            [ 2]    1     sub sp,#VSIZE 
                                    611 ;	ld a,in 
                                    612 ;	sub a,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                    613 ;   jrmi 0$
                                    614 ;	clr a 
                                    615 ;	ret 
      000F2C                        616 0$: 
      000F2C 90 AE 16 68      [ 2]  617 	ldw y,#tib    	
      000F30 A6 20            [ 1]  618 	ld a,#SPACE
      000F32 CD 0F 17         [ 4]  619 	call skip
      000F35 55 00 01 00 02   [ 1]  620 	mov in.saved,in 
      000F3A 91 D6 00         [ 4]  621 	ld a,([in.w],y)
      000F3D 26 05            [ 1]  622 	jrne 1$
      000F3F 90 93            [ 1]  623 	ldw y,x 
      000F41 CC 10 E6         [ 2]  624 	jp token_exit ; end of line 
      000F44 72 5C 00 01      [ 1]  625 1$:	inc in 
      000F48 CD 18 A8         [ 4]  626 	call to_upper 
      000F4B 6B 01            [ 1]  627 	ld (TCHAR,sp),a 
                                    628 ; check for quoted string
      000F4D                        629 str_tst:  	
      000F4D                        630 	_case '"' nbr_tst
      000F4D A6 22            [ 1]    1 	ld a,#'"' 
      000F4F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F51 26 0A            [ 1]    3 	jrne nbr_tst
      000F53 A6 02            [ 1]  631 	ld a,#TK_QSTR
      000F55 F7               [ 1]  632 	ld (x),a 
      000F56 5C               [ 1]  633 	incw x 
      000F57 CD 0D 7F         [ 4]  634 	call parse_quote
      000F5A CC 10 E6         [ 2]  635 	jp token_exit
      000F5D                        636 nbr_tst:
                                    637 ; check for hexadecimal number 
      000F5D A6 24            [ 1]  638 	ld a,#'$'
      000F5F 11 01            [ 1]  639 	cp a,(TCHAR,sp) 
      000F61 27 17            [ 1]  640 	jreq 1$
                                    641 ;check for binary number 
      000F63 A6 26            [ 1]  642 	ld a,#'&
      000F65 11 01            [ 1]  643 	cp a,(TCHAR,sp)
      000F67 26 0A            [ 1]  644 	jrne 0$
      000F69 A6 84            [ 1]  645 	ld a,#TK_INTGR
      000F6B F7               [ 1]  646 	ld (x),a 
      000F6C 5C               [ 1]  647 	incw x 
      000F6D CD 0E 27         [ 4]  648 	call parse_binary ; expect binary integer 
      000F70 CC 10 E6         [ 2]  649 	jp token_exit 
                                    650 ; check for decimal number 	
      000F73 7B 01            [ 1]  651 0$:	ld a,(TCHAR,sp)
      000F75 CD 0E 75         [ 4]  652 	call is_digit
      000F78 24 0C            [ 1]  653 	jrnc 3$
      000F7A A6 84            [ 1]  654 1$:	ld a,#TK_INTGR 
      000F7C F7               [ 1]  655 	ld (x),a 
      000F7D 5C               [ 1]  656 	incw x 
      000F7E 7B 01            [ 1]  657 	ld a,(TCHAR,sp)
      000F80 CD 0D D4         [ 4]  658 	call parse_integer 
      000F83 CC 10 E6         [ 2]  659 	jp token_exit 
      000F86                        660 3$: 
      000F86                        661 	_case '(' bkslsh_tst 
      000F86 A6 28            [ 1]    1 	ld a,#'(' 
      000F88 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F8A 26 05            [ 1]    3 	jrne bkslsh_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      000F8C A6 06            [ 1]  662 	ld a,#TK_LPAREN
      000F8E CC 10 E2         [ 2]  663 	jp token_char   	
      000F91                        664 bkslsh_tst: ; character token 
      000F91                        665 	_case '\',rparnt_tst
      000F91 A6 5C            [ 1]    1 	ld a,#'\' 
      000F93 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F95 26 16            [ 1]    3 	jrne rparnt_tst
      000F97 A6 04            [ 1]  666 	ld a,#TK_CHAR 
      000F99 F7               [ 1]  667 	ld (x),a 
      000F9A 5C               [ 1]  668 	incw x 
      000F9B 91 D6 00         [ 4]  669 	ld a,([in.w],y)
      000F9E F7               [ 1]  670 	ld (x),a 
      000F9F 5C               [ 1]  671 	incw x
      000FA0 90 93            [ 1]  672 	ldw y,x 	 
      000FA2 72 5C 00 01      [ 1]  673 	inc in  
      000FA6 5F               [ 1]  674 	clrw x 
      000FA7 97               [ 1]  675 	ld xl,a 
      000FA8 A6 04            [ 1]  676 	ld a,#TK_CHAR 
      000FAA CC 10 E6         [ 2]  677 	jp token_exit 
      000FAD                        678 rparnt_tst:		
      000FAD                        679 	_case ')' colon_tst 
      000FAD A6 29            [ 1]    1 	ld a,#')' 
      000FAF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FB1 26 05            [ 1]    3 	jrne colon_tst
      000FB3 A6 07            [ 1]  680 	ld a,#TK_RPAREN 
      000FB5 CC 10 E2         [ 2]  681 	jp token_char
      000FB8                        682 colon_tst:
      000FB8                        683 	_case ':' comma_tst 
      000FB8 A6 3A            [ 1]    1 	ld a,#':' 
      000FBA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FBC 26 05            [ 1]    3 	jrne comma_tst
      000FBE A6 0A            [ 1]  684 	ld a,#TK_COLON 
      000FC0 CC 10 E2         [ 2]  685 	jp token_char  
      000FC3                        686 comma_tst:
      000FC3                        687 	_case COMMA sharp_tst 
      000FC3 A6 2C            [ 1]    1 	ld a,#COMMA 
      000FC5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC7 26 05            [ 1]    3 	jrne sharp_tst
      000FC9 A6 08            [ 1]  688 	ld a,#TK_COMMA
      000FCB CC 10 E2         [ 2]  689 	jp token_char
      000FCE                        690 sharp_tst:
      000FCE                        691 	_case SHARP dash_tst 
      000FCE A6 23            [ 1]    1 	ld a,#SHARP 
      000FD0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FD2 26 05            [ 1]    3 	jrne dash_tst
      000FD4 A6 09            [ 1]  692 	ld a,#TK_SHARP
      000FD6 CC 10 E2         [ 2]  693 	jp token_char  	 	 
      000FD9                        694 dash_tst: 	
      000FD9                        695 	_case '-' at_tst 
      000FD9 A6 2D            [ 1]    1 	ld a,#'-' 
      000FDB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FDD 26 05            [ 1]    3 	jrne at_tst
      000FDF A6 11            [ 1]  696 	ld a,#TK_MINUS  
      000FE1 CC 10 E2         [ 2]  697 	jp token_char 
      000FE4                        698 at_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      000FE4                        699 	_case '@' qmark_tst 
      000FE4 A6 40            [ 1]    1 	ld a,#'@' 
      000FE6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FE8 26 05            [ 1]    3 	jrne qmark_tst
      000FEA A6 05            [ 1]  700 	ld a,#TK_ARRAY 
      000FEC CC 10 E2         [ 2]  701 	jp token_char
      000FEF                        702 qmark_tst:
      000FEF                        703 	_case '?' tick_tst 
      000FEF A6 3F            [ 1]    1 	ld a,#'?' 
      000FF1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF3 26 12            [ 1]    3 	jrne tick_tst
      000FF5 A6 80            [ 1]  704 	ld a,#TK_CMD  
      000FF7 F7               [ 1]  705 	ld (x),a 
      000FF8 5C               [ 1]  706 	incw x 
      000FF9 90 93            [ 1]  707 	ldw y,x 
      000FFB AE 00 6A         [ 2]  708 	ldw x,#PRT_IDX 
      000FFE 90 FF            [ 2]  709 	ldw (y),x 
      001000 72 A9 00 02      [ 2]  710 	addw y,#2
      001004 CC 10 E6         [ 2]  711 	jp token_exit
      001007                        712 tick_tst: ; comment 
      001007                        713 	_case TICK plus_tst 
      001007 A6 27            [ 1]    1 	ld a,#TICK 
      001009 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00100B 26 35            [ 1]    3 	jrne plus_tst
      00100D A6 80            [ 1]  714 	ld a,#TK_CMD
      00100F F7               [ 1]  715 	ld (x),a 
      001010 5C               [ 1]  716 	incw x
      001011 90 AE 00 84      [ 2]  717 	ldw y,#REM_IDX
      001015 FF               [ 2]  718 	ldw (x),y 
      001016 1C 00 02         [ 2]  719 	addw x,#2  
      001019                        720 copy_comment:
      001019 90 AE 16 68      [ 2]  721 	ldw y,#tib 
      00101D 72 B9 00 00      [ 2]  722 	addw y,in.w
      001021 90 89            [ 2]  723 	pushw y
      001023 CD 14 1C         [ 4]  724 	call strcpy
      001026 72 F2 01         [ 2]  725     subw y,(1,sp)
      001029 90 9F            [ 1]  726 	ld a,yl 
      00102B CB 00 01         [ 1]  727 	add a,in
      00102E C7 00 01         [ 1]  728 	ld in,a 
      001031 1F 01            [ 2]  729 	ldw (1,sp),x
      001033 72 F9 01         [ 2]  730 	addw y,(1,sp)
      001036 90 5C            [ 1]  731 	incw y 
      001038                        732 	_drop 2 
      001038 5B 02            [ 2]    1     addw sp,#2 
      00103A AE 00 84         [ 2]  733 	ldw x,#REM_IDX 
      00103D A6 80            [ 1]  734 	ld a,#TK_CMD 
      00103F CC 10 E6         [ 2]  735 	jp token_exit 
      001042                        736 plus_tst:
      001042                        737 	_case '+' star_tst 
      001042 A6 2B            [ 1]    1 	ld a,#'+' 
      001044 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001046 26 05            [ 1]    3 	jrne star_tst
      001048 A6 10            [ 1]  738 	ld a,#TK_PLUS  
      00104A CC 10 E2         [ 2]  739 	jp token_char 
      00104D                        740 star_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      00104D                        741 	_case '*' slash_tst 
      00104D A6 2A            [ 1]    1 	ld a,#'*' 
      00104F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001051 26 05            [ 1]    3 	jrne slash_tst
      001053 A6 20            [ 1]  742 	ld a,#TK_MULT 
      001055 CC 10 E2         [ 2]  743 	jp token_char 
      001058                        744 slash_tst: 
      001058                        745 	_case '/' prcnt_tst 
      001058 A6 2F            [ 1]    1 	ld a,#'/' 
      00105A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00105C 26 05            [ 1]    3 	jrne prcnt_tst
      00105E A6 21            [ 1]  746 	ld a,#TK_DIV 
      001060 CC 10 E2         [ 2]  747 	jp token_char 
      001063                        748 prcnt_tst:
      001063                        749 	_case '%' eql_tst 
      001063 A6 25            [ 1]    1 	ld a,#'%' 
      001065 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001067 26 05            [ 1]    3 	jrne eql_tst
      001069 A6 22            [ 1]  750 	ld a,#TK_MOD
      00106B CC 10 E2         [ 2]  751 	jp token_char  
                                    752 ; 1 or 2 character tokens 	
      00106E                        753 eql_tst:
      00106E                        754 	_case '=' gt_tst 		
      00106E A6 3D            [ 1]    1 	ld a,#'=' 
      001070 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001072 26 05            [ 1]    3 	jrne gt_tst
      001074 A6 32            [ 1]  755 	ld a,#TK_EQUAL
      001076 CC 10 E2         [ 2]  756 	jp token_char 
      001079                        757 gt_tst:
      001079                        758 	_case '>' lt_tst 
      001079 A6 3E            [ 1]    1 	ld a,#'>' 
      00107B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00107D 26 23            [ 1]    3 	jrne lt_tst
      00107F A6 31            [ 1]  759 	ld a,#TK_GT 
      001081 6B 02            [ 1]  760 	ld (ATTRIB,sp),a 
      001083 91 D6 00         [ 4]  761 	ld a,([in.w],y)
      001086 72 5C 00 01      [ 1]  762 	inc in 
      00108A A1 3D            [ 1]  763 	cp a,#'=
      00108C 26 04            [ 1]  764 	jrne 1$
      00108E A6 33            [ 1]  765 	ld a,#TK_GE 
      001090 20 50            [ 2]  766 	jra token_char  
      001092 A1 3C            [ 1]  767 1$: cp a,#'<
      001094 26 04            [ 1]  768 	jrne 2$
      001096 A6 35            [ 1]  769 	ld a,#TK_NE 
      001098 20 48            [ 2]  770 	jra token_char 
      00109A 72 5A 00 01      [ 1]  771 2$: dec in
      00109E 7B 02            [ 1]  772 	ld a,(ATTRIB,sp)
      0010A0 20 40            [ 2]  773 	jra token_char 	 
      0010A2                        774 lt_tst:
      0010A2                        775 	_case '<' other
      0010A2 A6 3C            [ 1]    1 	ld a,#'<' 
      0010A4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0010A6 26 23            [ 1]    3 	jrne other
      0010A8 A6 34            [ 1]  776 	ld a,#TK_LT 
      0010AA 6B 02            [ 1]  777 	ld (ATTRIB,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      0010AC 91 D6 00         [ 4]  778 	ld a,([in.w],y)
      0010AF 72 5C 00 01      [ 1]  779 	inc in 
      0010B3 A1 3D            [ 1]  780 	cp a,#'=
      0010B5 26 04            [ 1]  781 	jrne 1$
      0010B7 A6 36            [ 1]  782 	ld a,#TK_LE 
      0010B9 20 27            [ 2]  783 	jra token_char 
      0010BB A1 3E            [ 1]  784 1$: cp a,#'>
      0010BD 26 04            [ 1]  785 	jrne 2$
      0010BF A6 35            [ 1]  786 	ld a,#TK_NE 
      0010C1 20 1F            [ 2]  787 	jra token_char 
      0010C3 72 5A 00 01      [ 1]  788 2$: dec in 
      0010C7 7B 02            [ 1]  789 	ld a,(ATTRIB,sp)
      0010C9 20 17            [ 2]  790 	jra token_char 	
      0010CB                        791 other: ; not a special character 	 
      0010CB 7B 01            [ 1]  792 	ld a,(TCHAR,sp)
      0010CD CD 0E 64         [ 4]  793 	call is_alpha 
      0010D0 25 03            [ 1]  794 	jrc 30$ 
      0010D2 CC 16 BC         [ 2]  795 	jp syntax_error 
      0010D5                        796 30$: 
      0010D5 CD 0E AA         [ 4]  797 	call parse_keyword
      0010D8 A3 21 35         [ 2]  798 	cpw x,#remark 
      0010DB 26 09            [ 1]  799 	jrne token_exit 
      0010DD 90 93            [ 1]  800 	ldw y,x 
      0010DF CC 10 19         [ 2]  801 	jp copy_comment 
      0010E2                        802 token_char:
      0010E2 F7               [ 1]  803 	ld (x),a 
      0010E3 5C               [ 1]  804 	incw x
      0010E4 90 93            [ 1]  805 	ldw y,x 
      0010E6                        806 token_exit:
      0010E6                        807 	_drop VSIZE 
      0010E6 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010E8 81               [ 4]  808 	ret
                                    809 
                                    810 
                                    811 ;-----------------------------------
                                    812 ; create token list fromm text line 
                                    813 ; save this list in pad buffer 
                                    814 ;  compiled line format: 
                                    815 ;    line_no  2 bytes {0...32767}
                                    816 ;    count    1 byte  
                                    817 ;    tokens   variable length 
                                    818 ;   
                                    819 ; input:
                                    820 ;   none
                                    821 ; modified variables:
                                    822 ;   basicptr     token list buffer address 
                                    823 ;   in.w  		 3|count, i.e. index in buffer
                                    824 ;   count        length of line | 0  
                                    825 ;-----------------------------------
                           000001   826 	XSAVE=1
                           000002   827 	VSIZE=2
      0010E9                        828 compile::
      0010E9 90 89            [ 2]  829 	pushw y 
      0010EB                        830 	_vars VSIZE 
      0010EB 52 02            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0010ED 55 00 1B 00 04   [ 1]  831 	mov basicptr,txtbgn
      0010F2 72 1A 00 22      [ 1]  832 	bset flags,#FCOMP 
      0010F6 A6 00            [ 1]  833 	ld a,#0
      0010F8 AE 00 00         [ 2]  834 	ldw x,#0
      0010FB CF 16 B8         [ 2]  835 	ldw pad,x ; destination buffer 
      0010FE C7 16 BA         [ 1]  836 	ld pad+2,a ; count 
      001101 AE 16 BB         [ 2]  837 	ldw x,#pad+3
      001104 72 5F 00 01      [ 1]  838 	clr in 
      001108 CD 0F 2A         [ 4]  839 	call get_token
      00110B A1 84            [ 1]  840 	cp a,#TK_INTGR
      00110D 26 11            [ 1]  841 	jrne 2$
      00110F A3 00 01         [ 2]  842 	cpw x,#1 
      001112 2A 05            [ 1]  843 	jrpl 1$
      001114 A6 0A            [ 1]  844 	ld a,#ERR_BAD_VALUE
      001116 CC 16 BE         [ 2]  845 	jp tb_error
      001119 CF 16 B8         [ 2]  846 1$:	ldw pad,x 
      00111C 90 AE 16 BB      [ 2]  847 	ldw y,#pad+3 
      001120 90 A3 17 74      [ 2]  848 2$:	cpw y,#stack_full 
      001124 25 05            [ 1]  849 	jrult 3$
      001126 A6 0F            [ 1]  850 	ld a,#ERR_BUF_FULL 
      001128 CC 16 BE         [ 2]  851 	jp tb_error 
      00112B                        852 3$:	
      00112B 93               [ 1]  853 	ldw x,y 
      00112C CD 0F 2A         [ 4]  854 	call get_token 
      00112F A1 00            [ 1]  855 	cp a,#TK_NONE 
      001131 26 ED            [ 1]  856 	jrne 2$ 
                                    857 ; compilation completed  
      001133 72 A2 16 B8      [ 2]  858 	subw y,#pad
      001137 90 9F            [ 1]  859     ld a,yl
      001139 AE 16 B8         [ 2]  860 	ldw x,#pad 
      00113C CF 00 19         [ 2]  861 	ldw ptr16,x 
      00113F E7 02            [ 1]  862 	ld (2,x),a 
      001141 FE               [ 2]  863 	ldw x,(x)
      001142 27 09            [ 1]  864 	jreq 10$
      001144 CD 0D 0D         [ 4]  865 	call insert_line
      001147 72 5F 00 03      [ 1]  866 	clr  count 
      00114B 20 0F            [ 2]  867 	jra  11$ 
      00114D                        868 10$: ; line# is zero 
      00114D CE 00 19         [ 2]  869 	ldw x,ptr16  
      001150 CF 00 04         [ 2]  870 	ldw basicptr,x 
      001153 E6 02            [ 1]  871 	ld a,(2,x)
      001155 C7 00 03         [ 1]  872 	ld count,a 
      001158 35 03 00 01      [ 1]  873 	mov in,#3 
      00115C                        874 11$:
      00115C                        875 	_drop VSIZE 
      00115C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00115E 72 1B 00 22      [ 1]  876 	bres flags,#FCOMP 
      001162 90 85            [ 2]  877 	popw y 
      001164 81               [ 4]  878 	ret 
                                    879 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      001165                         48 cpy_cmd_name:
      001165 5D               [ 2]   49 	tnzw x 
      001166 27 14            [ 1]   50 	jreq 10$
      001168 F6               [ 1]   51 	ld a,(x)
      001169 5C               [ 1]   52 	incw x
      00116A A4 0F            [ 1]   53 	and a,#15  
      00116C 88               [ 1]   54 	push a 
      00116D 0D 01            [ 1]   55     tnz (1,sp) 
      00116F 27 0A            [ 1]   56 	jreq 9$
      001171 F6               [ 1]   57 1$:	ld a,(x)
      001172 90 F7            [ 1]   58 	ld (y),a  
      001174 5C               [ 1]   59 	incw x
      001175 90 5C            [ 1]   60 	incw y 
      001177 0A 01            [ 1]   61 	dec (1,sp)	 
      001179 26 F6            [ 1]   62 	jrne 1$
      00117B 84               [ 1]   63 9$: pop a 
      00117C                         64 10$: 
      00117C 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      00117D                         75 add_space:
      00117D 90 5A            [ 2]   76 	decw y 
      00117F 90 F6            [ 1]   77 	ld a,(y)
      001181 90 5C            [ 1]   78 	incw y
      001183 A1 29            [ 1]   79 	cp a,#') 
      001185 27 05            [ 1]   80 	jreq 0$
      001187 CD 0E 7E         [ 4]   81 	call is_alnum 
      00118A 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00118C                         83 0$: 
      00118C A6 20            [ 1]   84 	ld a,#SPACE 
      00118E 90 F7            [ 1]   85 	ld (y),a 
      001190 90 5C            [ 1]   86 	incw y 
      001192 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      001193                         99 right_align::
      001193 88               [ 1]  100 	push a 
      001194 7B 01            [ 1]  101 0$: ld a,(1,sp)
      001196 C1 00 23         [ 1]  102 	cp a,tab_width 
      001199 2A 08            [ 1]  103 	jrpl 1$
      00119B A6 20            [ 1]  104 	ld a,#SPACE 
      00119D 5A               [ 2]  105 	decw x
      00119E F7               [ 1]  106 	ld (x),a  
      00119F 0C 01            [ 1]  107 	inc (1,sp)
      0011A1 20 F1            [ 2]  108 	jra 0$ 
      0011A3 84               [ 1]  109 1$: pop a 	
      0011A4 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      0011A5                        123 cpy_quote:
      0011A5 A6 22            [ 1]  124 	ld a,#'"
      0011A7 90 F7            [ 1]  125 	ld (y),a 
      0011A9 90 5C            [ 1]  126 	incw y 
      0011AB 89               [ 2]  127 	pushw x 
      0011AC CD 17 E3         [ 4]  128 	call skip_string 
      0011AF 85               [ 2]  129 	popw x 
      0011B0 F6               [ 1]  130 1$:	ld a,(x)
      0011B1 27 30            [ 1]  131 	jreq 9$
      0011B3 5C               [ 1]  132 	incw x 
      0011B4 A1 20            [ 1]  133 	cp a,#SPACE 
      0011B6 25 0E            [ 1]  134 	jrult 3$
      0011B8 90 F7            [ 1]  135 	ld (y),a
      0011BA 90 5C            [ 1]  136 	incw y 
      0011BC A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0011BE 26 F0            [ 1]  138 	jrne 1$ 
      0011C0                        139 2$:
      0011C0 90 F7            [ 1]  140 	ld (y),a
      0011C2 90 5C            [ 1]  141 	incw y  
      0011C4 20 EA            [ 2]  142 	jra 1$
      0011C6 88               [ 1]  143 3$: push a 
      0011C7 A6 5C            [ 1]  144 	ld a,#'\
      0011C9 90 F7            [ 1]  145 	ld (y),a 
      0011CB 90 5C            [ 1]  146 	incw y  
      0011CD 84               [ 1]  147 	pop a 
      0011CE A0 07            [ 1]  148 	sub a,#7
      0011D0 C7 00 0E         [ 1]  149 	ld acc8,a 
      0011D3 72 5F 00 0D      [ 1]  150 	clr acc16
      0011D7 89               [ 2]  151 	pushw x
      0011D8 AE 0D CC         [ 2]  152 	ldw x,#escaped 
      0011DB 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      0011DF F6               [ 1]  154 	ld a,(x)
      0011E0 85               [ 2]  155 	popw x
      0011E1 20 DD            [ 2]  156 	jra 2$
      0011E3 A6 22            [ 1]  157 9$: ld a,#'"
      0011E5 90 F7            [ 1]  158 	ld (y),a 
      0011E7 90 5C            [ 1]  159 	incw y  
      0011E9 5C               [ 1]  160 	incw x 
      0011EA 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      0011EB                        171 var_name::
      0011EB 1D 00 30         [ 2]  172 		subw x,#vars 
      0011EE A6 03            [ 1]  173 		ld a,#3
      0011F0 62               [ 2]  174 		div x,a 
      0011F1 9F               [ 1]  175 		ld a,xl 
      0011F2 AB 41            [ 1]  176 		add a,#'A 
      0011F4 81               [ 4]  177 		ret 
                                    178 
                                    179 ;-----------------------------
                                    180 ; return cmd  idx from its 
                                    181 ; code address 
                                    182 ; input:
                                    183 ;   X      code address 
                                    184 ; output:
                                    185 ;   X      cmd_idx
                                    186 ;-----------------------------
      0011F5                        187 get_cmd_idx:
      0011F5 90 89            [ 2]  188 	pushw y
      0011F7 90 AE 33 49      [ 2]  189 	ldw y,#code_addr 
      0011FB 90 CF 00 19      [ 2]  190 	ldw ptr16,y 
      0011FF 90 5F            [ 1]  191 	clrw y 
      001201 91 D3 19         [ 5]  192 1$:	cpw x,([ptr16],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001204 27 0C            [ 1]  193 	jreq 3$ 
      001206 90 5C            [ 1]  194 	incw y 
      001208 91 D6 19         [ 4]  195 	ld a,([ptr16],y)
      00120B 90 5C            [ 1]  196 	incw y
      00120D 91 DA 19         [ 4]  197 	or a,([ptr16],y)	
      001210 26 EF            [ 1]  198 	jrne 1$
      001212 93               [ 1]  199 3$: ldw x,y 
      001213 90 85            [ 2]  200 	popw y 
      001215 81               [ 4]  201 	ret
                                    202 
                                    203 
                                    204 ;-------------------------------------
                                    205 ; decompile tokens list 
                                    206 ; to original text line 
                                    207 ; input:
                                    208 ;   [basicptr]  pointer at line 
                                    209 ;   Y           output buffer
                                    210 ; output:
                                    211 ;   A           length 
                                    212 ;   Y           after string  
                                    213 ;------------------------------------
                           000001   214 	BASE_SAV=1
                           000002   215 	WIDTH_SAV=2
                           000003   216 	STR=3
                           000004   217 	VSIZE=4 
      001216                        218 decompile::
      001216                        219 	_vars VSIZE
      001216 52 04            [ 2]    1     sub sp,#VSIZE 
      001218 C6 00 0A         [ 1]  220 	ld a,base
      00121B 6B 01            [ 1]  221 	ld (BASE_SAV,sp),a  
      00121D C6 00 23         [ 1]  222 	ld a,tab_width 
      001220 6B 02            [ 1]  223 	ld (WIDTH_SAV,sp),a 
      001222 17 03            [ 2]  224 	ldw (STR,sp),y   
      001224 72 CE 00 04      [ 5]  225 	ldw x,[basicptr] ; line number 
      001228 35 0A 00 0A      [ 1]  226 	mov base,#10
      00122C 35 05 00 23      [ 1]  227 	mov tab_width,#5
      001230 72 5F 00 0C      [ 1]  228 	clr acc24 
      001234 CF 00 0D         [ 2]  229 	ldw acc16,x
      001237 4F               [ 1]  230 	clr a ; unsigned conversion 
      001238 CD 18 4F         [ 4]  231 	call itoa  
      00123B CD 11 93         [ 4]  232 	call right_align 
      00123E 88               [ 1]  233 	push a 
      00123F 90 93            [ 1]  234 1$:	ldw y,x ; source
      001241 1E 04            [ 2]  235 	ldw x,(STR+1,sp) ; destination
      001243 CD 14 1C         [ 4]  236 	call strcpy 
      001246 90 5F            [ 1]  237 	clrw y 
      001248 84               [ 1]  238 	pop a 
      001249 90 97            [ 1]  239 	ld yl,a 
      00124B 72 F9 03         [ 2]  240 	addw y,(STR,sp)
      00124E A6 20            [ 1]  241 	ld a,#SPACE 
      001250 90 F7            [ 1]  242 	ld (y),a 
      001252 90 5C            [ 1]  243 	incw y 
      001254 72 5F 00 23      [ 1]  244 	clr tab_width
      001258 AE 00 03         [ 2]  245 	ldw x,#3
      00125B CF 00 00         [ 2]  246 	ldw in.w,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      00125E                        247 decomp_loop:
      00125E 90 89            [ 2]  248 	pushw y
      001260 CD 17 BD         [ 4]  249 	call next_token 
      001263 90 85            [ 2]  250 	popw y 
      001265 4D               [ 1]  251 	tnz a  
      001266 26 03            [ 1]  252 	jrne 1$
      001268 CC 13 91         [ 2]  253 	jp 20$
      00126B 2B 03            [ 1]  254 1$:	jrmi 2$
      00126D CC 13 02         [ 2]  255 	jp 6$
      001270                        256 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      001270 A1 85            [ 1]  257 	cp a,#TK_VAR 
      001272 26 0F            [ 1]  258 	jrne 3$
                                    259 ;; TK_VAR 
      001274 CD 11 7D         [ 4]  260 	call add_space
      001277 CD 17 F2         [ 4]  261 	call get_addr   
      00127A CD 11 EB         [ 4]  262 	call var_name
      00127D 90 F7            [ 1]  263 	ld (y),a 
      00127F 90 5C            [ 1]  264 	incw y  
      001281 20 DB            [ 2]  265 	jra decomp_loop
      001283                        266 3$:
      001283 A1 84            [ 1]  267 	cp a,#TK_INTGR
      001285 26 26            [ 1]  268 	jrne 4$
                                    269 ;; TK_INTGR
      001287 CD 17 FC         [ 4]  270 	call get_int24 
      00128A C7 00 0C         [ 1]  271 	ld acc24,a 
      00128D CF 00 0D         [ 2]  272 	ldw acc16,x 
      001290 CD 11 7D         [ 4]  273 	call add_space
      001293 90 89            [ 2]  274 	pushw y 
      001295 A6 FF            [ 1]  275 	ld a,#255 ; signed conversion 
      001297 CD 18 4F         [ 4]  276 	call itoa  
      00129A 16 01            [ 2]  277 	ldw y,(1,sp) 
      00129C 88               [ 1]  278 	push a 
      00129D 51               [ 1]  279 	exgw x,y 
      00129E CD 14 1C         [ 4]  280 	call strcpy 
      0012A1 90 5F            [ 1]  281 	clrw y
      0012A3 84               [ 1]  282 	pop a  
      0012A4 90 97            [ 1]  283 	ld yl,a 
      0012A6 72 F9 01         [ 2]  284 	addw y,(1,sp)
      0012A9                        285 	_drop 2 
      0012A9 5B 02            [ 2]    1     addw sp,#2 
      0012AB 20 B1            [ 2]  286 	jra decomp_loop
      0012AD                        287 4$: ; dictionary keyword
      0012AD A1 87            [ 1]  288 	cp a,#TK_AND 
      0012AF 24 39            [ 1]  289 	jruge 50$ 
      0012B1 FE               [ 2]  290 	ldw x,(x)
      0012B2 72 5C 00 01      [ 1]  291 	inc in 
      0012B6 72 5C 00 01      [ 1]  292 	inc in 
      0012BA A3 00 84         [ 2]  293 	cpw x,#REM_IDX
      0012BD 26 23            [ 1]  294 	jrne 5$
      0012BF CE 00 04         [ 2]  295 	ldw x,basicptr 
                                    296 ; copy comment to buffer 
      0012C2 CD 11 7D         [ 4]  297 	call add_space
      0012C5 A6 27            [ 1]  298 	ld a,#''
      0012C7 90 F7            [ 1]  299 	ld (y),a 
      0012C9 90 5C            [ 1]  300 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      0012CB                        301 46$:
      0012CB 72 D6 00 00      [ 4]  302 	ld a,([in.w],x)
      0012CF 72 5C 00 01      [ 1]  303 	inc in  
      0012D3 90 F7            [ 1]  304 	ld (y),a 
      0012D5 90 5C            [ 1]  305 	incw y 
      0012D7 C6 00 01         [ 1]  306 	ld a,in 
      0012DA C1 00 03         [ 1]  307 	cp a,count 
      0012DD 2B EC            [ 1]  308 	jrmi 46$
      0012DF CC 13 91         [ 2]  309 	jp 20$  
      0012E2 A3 00 4C         [ 2]  310 5$: cpw x,#LET_IDX 
      0012E5 26 0B            [ 1]  311 	jrne 54$
      0012E7 CC 12 5E         [ 2]  312 	jp decomp_loop ; down display LET 	
      0012EA                        313 50$:
      0012EA 5F               [ 1]  314 	clrw x 
      0012EB A0 87            [ 1]  315 	sub a,#TK_AND 
      0012ED 48               [ 1]  316 	sll a 
      0012EE 97               [ 1]  317 	ld xl,a 
      0012EF 1C 00 FA         [ 2]  318 	addw x,#AND_IDX
      0012F2                        319 54$: ; insert command name 
      0012F2 CD 11 7D         [ 4]  320 	call add_space  
      0012F5 90 89            [ 2]  321 	pushw y
      0012F7 CD 13 CC         [ 4]  322 	call cmd_name
      0012FA 90 85            [ 2]  323 	popw y 
      0012FC CD 11 65         [ 4]  324 	call cpy_cmd_name
      0012FF CC 12 5E         [ 2]  325 	jp decomp_loop 
      001302                        326 6$:
                                    327 ; label?
      001302 A1 03            [ 1]  328 	cp a,#TK_LABEL 
      001304 26 1E            [ 1]  329 	jrne 64$
                                    330 ; copy label string to output buffer   	
      001306 A6 20            [ 1]  331 	ld a,#32 
      001308 90 F7            [ 1]  332 	ld (y),a 
      00130A 90 5C            [ 1]  333 	incw y 
      00130C                        334 61$:
      00130C 89               [ 2]  335 	pushw x 
      00130D CD 17 E3         [ 4]  336 	call skip_string 
      001310 85               [ 2]  337 	popw x 
      001311                        338 62$:	
      001311 F6               [ 1]  339 	ld a,(x)
      001312 27 07            [ 1]  340 	jreq 63$ 
      001314 5C               [ 1]  341 	incw x  
      001315 90 F7            [ 1]  342 	ld (y),a 
      001317 90 5C            [ 1]  343 	incw y 
      001319 20 F6            [ 2]  344 	jra 62$ 
      00131B                        345 63$: 
      00131B A6 20            [ 1]  346 	ld a,#32 
      00131D 90 F7            [ 1]  347 	ld (y),a 
      00131F 90 5C            [ 1]  348 	incw y 
      001321 CC 12 5E         [ 2]  349 	jp decomp_loop
      001324                        350 64$:
      001324 A1 02            [ 1]  351 	cp a,#TK_QSTR 
      001326 26 09            [ 1]  352 	jrne 7$
                                    353 ;; TK_QSTR
      001328 CD 11 7D         [ 4]  354 	call add_space
      00132B CD 11 A5         [ 4]  355 	call cpy_quote  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      00132E CC 12 5E         [ 2]  356 	jp decomp_loop
      001331                        357 7$:
      001331 A1 04            [ 1]  358 	cp a,#TK_CHAR 
      001333 26 10            [ 1]  359 	jrne 8$
                                    360 ;; TK_CHAR
      001335 CD 11 7D         [ 4]  361 	call add_space 
      001338 A6 5C            [ 1]  362 	ld a,#'\ 
      00133A 90 F7            [ 1]  363 	ld (y),a 
      00133C 90 5C            [ 1]  364 	incw y
      00133E F6               [ 1]  365 	ld a,(x)
      00133F 72 5C 00 01      [ 1]  366 	inc in  
      001343 20 06            [ 2]  367 	jra 81$
      001345 A1 0A            [ 1]  368 8$: cp a,#TK_COLON 
      001347 26 09            [ 1]  369 	jrne 9$
      001349 A6 3A            [ 1]  370 	ld a,#':
      00134B                        371 81$:
      00134B 90 F7            [ 1]  372 	ld (y),a 
      00134D 90 5C            [ 1]  373 	incw y 
      00134F                        374 82$:
      00134F CC 12 5E         [ 2]  375 	jp decomp_loop
      001352                        376 9$: 
      001352 A1 09            [ 1]  377 	cp a,#TK_SHARP
      001354 22 0A            [ 1]  378 	jrugt 10$ 
      001356 A0 05            [ 1]  379 	sub a,#TK_ARRAY 
      001358 5F               [ 1]  380 	clrw x 
      001359 97               [ 1]  381 	ld xl,a
      00135A 1C 13 A7         [ 2]  382 	addw x,#single_char 
      00135D F6               [ 1]  383 	ld a,(x)
      00135E 20 EB            [ 2]  384 	jra 81$ 
      001360                        385 10$: 
      001360 A1 11            [ 1]  386 	cp a,#TK_MINUS 
      001362 22 0A            [ 1]  387 	jrugt 11$
      001364 A0 10            [ 1]  388 	sub a,#TK_PLUS 
      001366 5F               [ 1]  389 	clrw x 
      001367 97               [ 1]  390 	ld xl,a 
      001368 1C 13 AC         [ 2]  391 	addw x,#add_char 
      00136B F6               [ 1]  392 	ld a,(x)
      00136C 20 DD            [ 2]  393 	jra 81$
      00136E                        394 11$:
      00136E A1 22            [ 1]  395     cp a,#TK_MOD 
      001370 22 0A            [ 1]  396 	jrugt 12$
      001372 A0 20            [ 1]  397 	sub a,#TK_MULT
      001374 5F               [ 1]  398 	clrw x 
      001375 97               [ 1]  399 	ld xl,a 
      001376 1C 13 AE         [ 2]  400 	addw x,#mul_char
      001379 F6               [ 1]  401 	ld a,(x)
      00137A 20 CF            [ 2]  402 	jra 81$
      00137C                        403 12$:
      00137C A0 31            [ 1]  404 	sub a,#TK_GT  
      00137E 48               [ 1]  405 	sll a 
      00137F 5F               [ 1]  406 	clrw x 
      001380 97               [ 1]  407 	ld xl,a 
      001381 1C 13 B1         [ 2]  408 	addw x,#relop_str 
      001384 FE               [ 2]  409 	ldw x,(x)
      001385 F6               [ 1]  410 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      001386 5C               [ 1]  411 	incw x 
      001387 90 F7            [ 1]  412 	ld (y),a
      001389 90 5C            [ 1]  413 	incw y 
      00138B F6               [ 1]  414 	ld a,(x)
      00138C 26 BD            [ 1]  415 	jrne 81$
      00138E CC 12 5E         [ 2]  416 	jp decomp_loop 
      001391                        417 20$: 
      001391 90 7F            [ 1]  418 	clr (y)
      001393 1E 03            [ 2]  419 	ldw x,(STR,sp)
      001395 7B 01            [ 1]  420 	ld a,(BASE_SAV,sp)
      001397 C7 00 0A         [ 1]  421 	ld base,a 
      00139A 7B 02            [ 1]  422 	ld a,(WIDTH_SAV,sp)
      00139C C7 00 23         [ 1]  423 	ld tab_width,a
      00139F 72 F2 03         [ 2]  424 	subw y,(STR,sp) 
      0013A2 90 9F            [ 1]  425 	ld a,yl 
      0013A4                        426 	_drop VSIZE 
      0013A4 5B 04            [ 2]    1     addw sp,#VSIZE 
      0013A6 81               [ 4]  427 	ret 
                                    428 
      0013A7 40 28 29 2C 23         429 single_char: .byte '@','(',')',',','#'
      0013AC 2B 2D                  430 add_char: .byte '+','-'
      0013AE 2A 2F 25               431 mul_char: .byte '*','/','%'
      0013B1 13 BD 13 BF 13 C1 13   432 relop_str: .word gt,equal,ge,lt,le,ne 
             C4 13 C6 13 C9
      0013BD 3E 00                  433 gt: .asciz ">"
      0013BF 3D 00                  434 equal: .asciz "="
      0013C1 3E 3D 00               435 ge: .asciz ">="
      0013C4 3C 00                  436 lt: .asciz "<"
      0013C6 3C 3D 00               437 le: .asciz "<="
      0013C9 3C 3E 00               438 ne:  .asciz "<>"
                                    439 
                                    440 ;----------------------------------
                                    441 ; search in kword_dict name
                                    442 ; from its execution address 
                                    443 ; input:
                                    444 ;   X       	cmd_index 
                                    445 ; output:
                                    446 ;   X 			cstr*  | 0 
                                    447 ;--------------------------------
                           000001   448 	CMDX=1 
                           000003   449 	LINK=3 
                           000004   450 	VSIZE=4
      0013CC                        451 cmd_name:
      0013CC                        452 	_vars VSIZE 
      0013CC 52 04            [ 2]    1     sub sp,#VSIZE 
      0013CE 72 5F 00 0D      [ 1]  453 	clr acc16 
      0013D2 1F 01            [ 2]  454 	ldw (CMDX,sp),x  
      0013D4 AE 33 41         [ 2]  455 	ldw x,#kword_dict	
      0013D7 1F 03            [ 2]  456 1$:	ldw (LINK,sp),x
      0013D9 E6 02            [ 1]  457 	ld a,(2,x)
      0013DB A4 0F            [ 1]  458 	and a,#15 
      0013DD C7 00 0E         [ 1]  459 	ld acc8,a 
      0013E0 1C 00 03         [ 2]  460 	addw x,#3
      0013E3 72 BB 00 0D      [ 2]  461 	addw x,acc16
      0013E7 FE               [ 2]  462 	ldw x,(x) ; command index  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0013E8 13 01            [ 2]  463 	cpw x,(CMDX,sp)
      0013EA 27 0C            [ 1]  464 	jreq 2$
      0013EC 1E 03            [ 2]  465 	ldw x,(LINK,sp)
      0013EE FE               [ 2]  466 	ldw x,(x) 
      0013EF 1D 00 02         [ 2]  467 	subw x,#2  
      0013F2 26 E3            [ 1]  468 	jrne 1$
      0013F4 4F               [ 1]  469 	clr a 
      0013F5 5F               [ 1]  470 	clrw x 
      0013F6 20 05            [ 2]  471 	jra 9$
      0013F8 1E 03            [ 2]  472 2$: ldw x,(LINK,sp)
      0013FA 1C 00 02         [ 2]  473 	addw x,#2 	
      0013FD                        474 9$:	_drop VSIZE
      0013FD 5B 04            [ 2]    1     addw sp,#VSIZE 
      0013FF 81               [ 4]  475 	ret
                                    476 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     94 ; 24 bits integer variables 
      000030                         95 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     96 
                                     97 	.area BTXT (ABS)
      00007C                         98 	.org 0x7C  
                                     99 ; keep 'free_ram' as last variable 
                                    100 ; basic code compiled here. 
      00007C                        101 rsign: .blkw 1 ; "BC" 
      00007E                        102 rsize: .blkw 1 ; code size 	 
      000080                        103 free_ram: ; from here RAM free for BASIC text 
                                    104 
                                    105 	.area CODE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                    106 
                                    107 
                                    108 ;-------------------------------------
                                    109 ; retrun string length
                                    110 ; input:
                                    111 ;   X         .asciz  pointer 
                                    112 ; output:
                                    113 ;   X         not affected 
                                    114 ;   A         length 
                                    115 ;-------------------------------------
      001400                        116 strlen::
      001400 89               [ 2]  117 	pushw x 
      001401 4F               [ 1]  118 	clr a
      001402 7D               [ 1]  119 1$:	tnz (x) 
      001403 27 04            [ 1]  120 	jreq 9$ 
      001405 4C               [ 1]  121 	inc a 
      001406 5C               [ 1]  122 	incw x 
      001407 20 F9            [ 2]  123 	jra 1$ 
      001409 85               [ 2]  124 9$:	popw x 
      00140A 81               [ 4]  125 	ret 
                                    126 
                                    127 ;------------------------------------
                                    128 ; compare 2 strings
                                    129 ; input:
                                    130 ;   X 		char* first string 
                                    131 ;   Y       char* second string 
                                    132 ; output:
                                    133 ;   A 		0 not == |1 ==  
                                    134 ;-------------------------------------
      00140B                        135 strcmp:
      00140B F6               [ 1]  136 	ld a,(x)
      00140C 27 0B            [ 1]  137 	jreq 5$ 
      00140E 90 F1            [ 1]  138 	cp a,(y) 
      001410 26 05            [ 1]  139 	jrne 4$ 
      001412 5C               [ 1]  140 	incw x 
      001413 90 5C            [ 1]  141 	incw y 
      001415 20 F4            [ 2]  142 	jra strcmp 
      001417                        143 4$: ; not same  
      001417 4F               [ 1]  144 	clr a 
      001418 81               [ 4]  145 	ret 
      001419                        146 5$: ; same 
      001419 A6 01            [ 1]  147 	ld a,#1 
      00141B 81               [ 4]  148 	ret 
                                    149 
                                    150 
                                    151 ;---------------------------------------
                                    152 ;  copy src to dest 
                                    153 ; input:
                                    154 ;   X 		dest 
                                    155 ;   Y 		src 
                                    156 ; output: 
                                    157 ;   X 		dest 
                                    158 ;----------------------------------
      00141C                        159 strcpy::
      00141C 88               [ 1]  160 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00141D 89               [ 2]  161 	pushw x 
      00141E 90 F6            [ 1]  162 1$: ld a,(y)
      001420 27 06            [ 1]  163 	jreq 9$ 
      001422 F7               [ 1]  164 	ld (x),a 
      001423 5C               [ 1]  165 	incw x 
      001424 90 5C            [ 1]  166 	incw y 
      001426 20 F6            [ 2]  167 	jra 1$ 
      001428 7F               [ 1]  168 9$:	clr (x)
      001429 85               [ 2]  169 	popw x 
      00142A 84               [ 1]  170 	pop a 
      00142B 81               [ 4]  171 	ret 
                                    172 
                                    173 ;---------------------------------------
                                    174 ; move memory block 
                                    175 ; input:
                                    176 ;   X 		destination 
                                    177 ;   Y 	    source 
                                    178 ;   acc16	bytes count 
                                    179 ; output:
                                    180 ;   none 
                                    181 ;--------------------------------------
                           000001   182 	INCR=1 ; increament high byte 
                           000002   183 	LB=2 ; increament low byte 
                           000002   184 	VSIZE=2
      00142C                        185 move::
      00142C 88               [ 1]  186 	push a 
      00142D                        187 	_vars VSIZE 
      00142D 52 02            [ 2]    1     sub sp,#VSIZE 
      00142F 0F 01            [ 1]  188 	clr (INCR,sp)
      001431 0F 02            [ 1]  189 	clr (LB,sp)
      001433 90 89            [ 2]  190 	pushw y 
      001435 13 01            [ 2]  191 	cpw x,(1,sp) ; compare DEST to SRC 
      001437 90 85            [ 2]  192 	popw y 
      001439 27 31            [ 1]  193 	jreq move_exit ; x==y 
      00143B 2B 0E            [ 1]  194 	jrmi move_down
      00143D                        195 move_up: ; start from top address with incr=-1
      00143D 72 BB 00 0D      [ 2]  196 	addw x,acc16
      001441 72 B9 00 0D      [ 2]  197 	addw y,acc16
      001445 03 01            [ 1]  198 	cpl (INCR,sp)
      001447 03 02            [ 1]  199 	cpl (LB,sp)   ; increment = -1 
      001449 20 05            [ 2]  200 	jra move_loop  
      00144B                        201 move_down: ; start from bottom address with incr=1 
      00144B 5A               [ 2]  202     decw x 
      00144C 90 5A            [ 2]  203 	decw y
      00144E 0C 02            [ 1]  204 	inc (LB,sp) ; incr=1 
      001450                        205 move_loop:	
      001450 C6 00 0D         [ 1]  206     ld a, acc16 
      001453 CA 00 0E         [ 1]  207 	or a, acc8
      001456 27 14            [ 1]  208 	jreq move_exit 
      001458 72 FB 01         [ 2]  209 	addw x,(INCR,sp)
      00145B 72 F9 01         [ 2]  210 	addw y,(INCR,sp) 
      00145E 90 F6            [ 1]  211 	ld a,(y)
      001460 F7               [ 1]  212 	ld (x),a 
      001461 89               [ 2]  213 	pushw x 
      001462 CE 00 0D         [ 2]  214 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      001465 5A               [ 2]  215 	decw x 
      001466 CF 00 0D         [ 2]  216 	ldw acc16,x 
      001469 85               [ 2]  217 	popw x 
      00146A 20 E4            [ 2]  218 	jra move_loop
      00146C                        219 move_exit:
      00146C                        220 	_drop VSIZE
      00146C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00146E 84               [ 1]  221 	pop a 
      00146F 81               [ 4]  222 	ret 	
                                    223 
                                    224 ;------------------------------------
                                    225 ;  set all variables to zero 
                                    226 ; input:
                                    227 ;   none 
                                    228 ; output:
                                    229 ;	none
                                    230 ;------------------------------------
      001470                        231 clear_vars:
      001470 89               [ 2]  232 	pushw x 
      001471 88               [ 1]  233 	push a  
      001472 AE 00 30         [ 2]  234 	ldw x,#vars 
      001475 A6 4E            [ 1]  235 	ld a,#CELL_SIZE*26 
      001477 7F               [ 1]  236 1$:	clr (x)
      001478 5C               [ 1]  237 	incw x 
      001479 4A               [ 1]  238 	dec a 
      00147A 26 FB            [ 1]  239 	jrne 1$
      00147C 84               [ 1]  240 	pop a 
      00147D 85               [ 2]  241 	popw x 
      00147E 81               [ 4]  242 	ret 
                                    243 
                                    244 
                                    245 ;-----------------------
                                    246 ;  display system 
                                    247 ;  information 
                                    248 ;-----------------------
                           000002   249 	MAJOR=2
                           000000   250 	MINOR=0 
      00147F 0A 0A 54 69 6E 79 20   251 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    252 
      0014C5                        253 system_information:
      0014C5 AE 14 7F         [ 2]  254 	ldw x,#software 
      0014C8 CD 09 A1         [ 4]  255 	call puts 
      0014CB A6 02            [ 1]  256 	ld a,#MAJOR 
      0014CD C7 00 0E         [ 1]  257 	ld acc8,a 
      0014D0 5F               [ 1]  258 	clrw x 
      0014D1 CF 00 0C         [ 2]  259 	ldw acc24,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0014D4 72 5F 00 23      [ 1]  260 	clr tab_width  
      0014D8 35 0A 00 0A      [ 1]  261 	mov base, #10 
      0014DC CD 18 29         [ 4]  262 	call prt_acc24 
      0014DF A6 2E            [ 1]  263 	ld a,#'.
      0014E1 CD 09 44         [ 4]  264 	call putc 
      0014E4 A6 00            [ 1]  265 	ld a,#MINOR 
      0014E6 C7 00 0E         [ 1]  266 	ld acc8,a 
      0014E9 5F               [ 1]  267 	clrw x 
      0014EA CF 00 0C         [ 2]  268 	ldw acc24,x 
      0014ED CD 18 29         [ 4]  269 	call prt_acc24
      0014F0 A6 0D            [ 1]  270 	ld a,#CR 
      0014F2 CD 09 44         [ 4]  271 	call putc
                                    272 ;call test 
      0014F5 81               [ 4]  273 	ret
                                    274 
      0014F6                        275 warm_init:
      0014F6 90 AE 17 73      [ 2]  276 	ldw y,#XSTACK_EMPTY  
      0014FA 72 5F 00 22      [ 1]  277 	clr flags 
      0014FE 72 5F 00 1F      [ 1]  278 	clr loop_depth 
      001502 35 04 00 23      [ 1]  279 	mov tab_width,#TAB_WIDTH 
      001506 35 0A 00 0A      [ 1]  280 	mov base,#10 
      00150A AE 00 00         [ 2]  281 	ldw x,#0 
      00150D CF 00 04         [ 2]  282 	ldw basicptr,x 
      001510 CF 00 00         [ 2]  283 	ldw in.w,x 
      001513 72 5F 00 03      [ 1]  284 	clr count
      001517 81               [ 4]  285 	ret 
                                    286 
                                    287 ;---------------------------
                                    288 ; reset BASIC text variables 
                                    289 ; and clear variables 
                                    290 ;---------------------------
      001518                        291 clear_basic:
      001518 89               [ 2]  292 	pushw x 
      001519 72 5F 00 03      [ 1]  293 	clr count
      00151D 72 5F 00 01      [ 1]  294 	clr in  
      001521 AE 00 80         [ 2]  295 	ldw x,#free_ram 
      001524 CF 00 1B         [ 2]  296 	ldw txtbgn,x 
      001527 CF 00 1D         [ 2]  297 	ldw txtend,x 
      00152A CD 14 70         [ 4]  298 	call clear_vars 
      00152D 85               [ 2]  299 	popw x
      00152E 81               [ 4]  300 	ret 
                                    301 
                                    302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    303 ;;   Tiny BASIC error messages     ;;
                                    304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00152F                        305 err_msg:
      00152F 00 00 15 51 15 5E 15   306 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             6C 15 85 15 94
      00153B 15 AA 15 C0 15 DA 15   307 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             EB 15 FC
      001545 16 08 16 3B 16 4B 16   308 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             5F 16 72
      00154F 16 7F                  309 	.word err_overflow 
                                    310 
      001551 4D 65 6D 6F 72 79 20   311 err_mem_full: .asciz "Memory full\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



             66 75 6C 6C 0A 00
      00155E 73 79 6E 74 61 78 20   312 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      00156C 6D 61 74 68 20 6F 70   313 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001585 64 69 76 69 73 69 6F   314 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001594 69 6E 76 61 6C 69 64   315 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      0015AA 72 75 6E 20 74 69 6D   316 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      0015C0 63 6F 6D 6D 61 6E 64   317 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0015DA 64 75 70 6C 69 63 61   318 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0015EB 46 69 6C 65 20 6E 6F   319 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0015FC 62 61 64 20 76 61 6C   320 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      001608 46 69 6C 65 20 69 6E   321 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      00163B 4E 6F 20 64 61 74 61   322 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      00164B 4E 6F 20 70 72 6F 67   323 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      00165F 46 69 6C 65 20 73 79   324 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001672 42 75 66 66 65 72 20   325 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      00167F 6F 76 65 72 66 6C 6F   326 err_overflow: .asciz "overflow\n" 
             77 0A 00
                                    327 
      001689 0A 72 75 6E 20 74 69   328 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      00169B 0A 63 6F 6D 70 69 6C   329 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      0016AC 6C 61 73 74 20 74 6F   330 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    331 
      0016BC                        332 syntax_error::
      0016BC A6 02            [ 1]  333 	ld a,#ERR_SYNTAX 
                                    334 
      0016BE                        335 tb_error::
      0016BE 72 0A 00 22 4C   [ 2]  336 	btjt flags,#FCOMP,1$
      0016C3 88               [ 1]  337 	push a 
      0016C4 AE 16 89         [ 2]  338 	ldw x, #rt_msg 
      0016C7 CD 09 A1         [ 4]  339 	call puts 
      0016CA 84               [ 1]  340 	pop a 
      0016CB AE 15 2F         [ 2]  341 	ldw x, #err_msg 
      0016CE 72 5F 00 0D      [ 1]  342 	clr acc16 
      0016D2 48               [ 1]  343 	sll a
      0016D3 72 59 00 0D      [ 1]  344 	rlc acc16  
      0016D7 C7 00 0E         [ 1]  345 	ld acc8, a 
      0016DA 72 BB 00 0D      [ 2]  346 	addw x,acc16 
      0016DE FE               [ 2]  347 	ldw x,(x)
      0016DF CD 09 A1         [ 4]  348 	call puts
      0016E2 CE 00 04         [ 2]  349 	ldw x,basicptr 
                           000001   350 .if DEBUG 
      0016E5 C6 00 03         [ 1]  351 ld a,count 
      0016E8 90 5F            [ 1]  352 clrw y 
      0016EA 90 02            [ 1]  353 rlwa y  
      0016EC CD 06 A0         [ 4]  354 call hex_dump
      0016EF CE 00 04         [ 2]  355 ldw x,basicptr
                                    356 .endif 
      0016F2 C6 00 01         [ 1]  357 	ld a,in 
      0016F5 CD 1F D1         [ 4]  358 	call prt_basic_line
      0016F8 AE 16 AC         [ 2]  359 	ldw x,#tk_id 
      0016FB CD 09 A1         [ 4]  360 	call puts 
      0016FE C6 00 02         [ 1]  361 	ld a,in.saved 
      001701 5F               [ 1]  362 	clrw x 
      001702 97               [ 1]  363 	ld xl,a 
      001703 72 BB 00 04      [ 2]  364 	addw x,basicptr 
      001707 F6               [ 1]  365 	ld a,(x)
      001708 5F               [ 1]  366 	clrw x 
      001709 97               [ 1]  367 	ld xl,a 
      00170A CD 18 12         [ 4]  368 	call prt_i16
      00170D 20 35            [ 2]  369 	jra 6$
      00170F                        370 1$:	
      00170F 88               [ 1]  371 	push a 
      001710 AE 16 9B         [ 2]  372 	ldw x,#comp_msg
      001713 CD 09 A1         [ 4]  373 	call puts 
      001716 84               [ 1]  374 	pop a 
      001717 AE 15 2F         [ 2]  375 	ldw x, #err_msg 
      00171A 72 5F 00 0D      [ 1]  376 	clr acc16 
      00171E 48               [ 1]  377 	sll a
      00171F 72 59 00 0D      [ 1]  378 	rlc acc16  
      001723 C7 00 0E         [ 1]  379 	ld acc8, a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      001726 72 BB 00 0D      [ 2]  380 	addw x,acc16 
      00172A FE               [ 2]  381 	ldw x,(x)
      00172B CD 09 A1         [ 4]  382 	call puts
      00172E AE 16 68         [ 2]  383 	ldw x,#tib
      001731 CD 09 A1         [ 4]  384 	call puts 
      001734 A6 0D            [ 1]  385 	ld a,#CR 
      001736 CD 09 44         [ 4]  386 	call putc
      001739 CE 00 00         [ 2]  387 	ldw x,in.w
      00173C CD 0A 0E         [ 4]  388 	call spaces
      00173F A6 5E            [ 1]  389 	ld a,#'^
      001741 CD 09 44         [ 4]  390 	call putc 
      001744 AE 17 FF         [ 2]  391 6$: ldw x,#STACK_EMPTY 
      001747 94               [ 1]  392     ldw sp,x
                                    393 
      001748                        394 warm_start:
      001748 CD 14 F6         [ 4]  395 	call warm_init
                                    396 ;----------------------------
                                    397 ;   BASIC interpreter
                                    398 ;----------------------------
      00174B                        399 cmd_line: ; user interface 
      00174B A6 0D            [ 1]  400 	ld a,#CR 
      00174D CD 09 44         [ 4]  401 	call putc 
      001750 A6 3E            [ 1]  402 	ld a,#'> 
      001752 CD 09 44         [ 4]  403 	call putc
      001755 CD 0A A6         [ 4]  404 	call readln
      001758 72 5D 00 03      [ 1]  405 	tnz count 
      00175C 27 ED            [ 1]  406 	jreq cmd_line
      00175E CD 10 E9         [ 4]  407 	call compile
                                    408 
                                    409 ;;;;;;;;;;;;;;;;;;;;;;	
                                    410 ;pushw y 
                                    411 ;ldw x,txtbgn  
                                    412 ;ldw y,txtend
                                    413 ;ldw acc16,x   
                                    414 ;subw y,acc16 
                                    415 ;call hex_dump
                                    416 ;popw y 
                                    417 ;;;;;;;;;;;;;;;;;;;;;;
                                    418 
                                    419 ; if text begin with a line number
                                    420 ; the compiler set count to zero    
                                    421 ; so code is not interpreted
      001761 72 5D 00 03      [ 1]  422 	tnz count 
      001765 27 E4            [ 1]  423 	jreq cmd_line
                                    424 	
                                    425 ; if direct command 
                                    426 ; it's ready to interpret 
                                    427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    428 ;; This is the interpreter loop
                                    429 ;; for each BASIC code line. 
                                    430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      001767                        431 interpreter: 
      001767 C6 00 01         [ 1]  432 	ld a,in 
      00176A C1 00 03         [ 1]  433 	cp a,count 
      00176D 2B 1D            [ 1]  434 	jrmi interp_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      00176F                        435 next_line:
      00176F 72 01 00 22 D7   [ 2]  436 	btjf flags, #FRUN, cmd_line
      001774 CE 00 04         [ 2]  437 	ldw x,basicptr
      001777 72 BB 00 00      [ 2]  438 	addw x,in.w 
      00177B C3 00 1D         [ 2]  439 	cpw x,txtend 
      00177E 2A C8            [ 1]  440 	jrpl warm_start
      001780 CF 00 04         [ 2]  441 	ldw basicptr,x ; start of next line  
      001783 E6 02            [ 1]  442 	ld a,(2,x)
      001785 C7 00 03         [ 1]  443 	ld count,a 
      001788 35 03 00 01      [ 1]  444 	mov in,#3 ; skip first 3 bytes of line 
      00178C                        445 interp_loop:
      00178C CD 17 BD         [ 4]  446 	call next_token
      00178F A1 00            [ 1]  447 	cp a,#TK_NONE 
      001791 27 DC            [ 1]  448 	jreq next_line 
      001793 A1 80            [ 1]  449 	cp a,#TK_CMD
      001795 26 06            [ 1]  450 	jrne 1$
      001797 CD 17 D6         [ 4]  451 	call get_code_addr
      00179A FD               [ 4]  452 	call (x) 
      00179B 20 EF            [ 2]  453 	jra interp_loop 
      00179D                        454 1$:	 
      00179D A1 85            [ 1]  455 	cp a,#TK_VAR
      00179F 26 05            [ 1]  456 	jrne 2$
      0017A1 CD 1C 90         [ 4]  457 	call let_var  
      0017A4 20 E6            [ 2]  458 	jra interp_loop 
      0017A6                        459 2$:	
      0017A6 A1 05            [ 1]  460 	cp a,#TK_ARRAY 
      0017A8 26 05            [ 1]  461 	jrne 3$
      0017AA CD 1C 8B         [ 4]  462 	call let_array 
      0017AD 20 DD            [ 2]  463 	jra interp_loop
      0017AF                        464 3$:	
      0017AF A1 0A            [ 1]  465 	cp a,#TK_COLON 
      0017B1 27 D9            [ 1]  466 	jreq interp_loop
      0017B3 A1 03            [ 1]  467 4$: cp a,#TK_LABEL
      0017B5 CD 17 E3         [ 4]  468 	call skip_string 
      0017B8 20 D2            [ 2]  469 	jra interp_loop 
      0017BA CC 16 BC         [ 2]  470 5$:	jp syntax_error 
                                    471 
                                    472 ;--------------------------
                                    473 ; extract next token from
                                    474 ; token list 
                                    475 ; basicptr -> base address 
                                    476 ; in  -> offset in list array 
                                    477 ; output:
                                    478 ;   A 		token attribute
                                    479 ;   X 		*token_value 
                                    480 ;----------------------------------------
      0017BD                        481 next_token::
                                    482 ;	clrw x 
      0017BD C6 00 01         [ 1]  483 	ld a,in 
      0017C0 C7 00 02         [ 1]  484 	ld in.saved,a ; in case "_unget_token" needed 
                                    485 ; don't replace sub by "cp a,count" 
                                    486 ; if end of line must return with A=0   	
      0017C3 C0 00 03         [ 1]  487 	sub a,count 
      0017C6 27 0D            [ 1]  488 	jreq 9$ ; end of line 
      0017C8                        489 0$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      0017C8 CE 00 04         [ 2]  490 	ldw x,basicptr 
      0017CB 72 BB 00 00      [ 2]  491 	addw x,in.w 
      0017CF F6               [ 1]  492 	ld a,(x)
      0017D0 5C               [ 1]  493 	incw x
      0017D1 72 5C 00 01      [ 1]  494 	inc in   
      0017D5 81               [ 4]  495 9$: ret 
                                    496 
                                    497 ;------------------------
                                    498 ; get cmd and function 
                                    499 ; code address 
                                    500 ; input:
                                    501 ;    X   * cmd|func index 
                                    502 ;        in code_addr table 
                                    503 ;------------------------
      0017D6                        504 get_code_addr:
      0017D6 FE               [ 2]  505 	ldw x,(x)
      0017D7 DE 33 49         [ 2]  506 	ldw x,(code_addr,x)
      0017DA 72 5C 00 01      [ 1]  507 	inc in 
      0017DE 72 5C 00 01      [ 1]  508 	inc in 
      0017E2 81               [ 4]  509 	ret
                                    510 
                                    511 ;-------------------------
                                    512 ;  skip .asciz in BASIC line 
                                    513 ;  name 
                                    514 ;  input:
                                    515 ;     x		* string 
                                    516 ;  output:
                                    517 ;     none 
                                    518 ;-------------------------
      0017E3                        519 skip_string:
      0017E3 F6               [ 1]  520 	ld a,(x)
      0017E4 27 03            [ 1]  521 	jreq 1$
      0017E6 5C               [ 1]  522 	incw x 
      0017E7 20 FA            [ 2]  523 	jra skip_string 
      0017E9 5C               [ 1]  524 1$: incw x 	
      0017EA 72 B0 00 04      [ 2]  525 	subw x,basicptr 
      0017EE CF 00 00         [ 2]  526 	ldw in.w,x 
      0017F1 81               [ 4]  527 	ret 
                                    528 
                                    529 ;---------------------
                                    530 ; extract 16 bits  
                                    531 ; address from BASIC
                                    532 ; code 
                                    533 ; input:
                                    534 ;    X    *address
                                    535 ; output:
                                    536 ;    X    address 
                                    537 ;-------------------- 
      0017F2                        538 get_addr:
      0017F2 FE               [ 2]  539 	ldw x,(x)
      0017F3 72 5C 00 01      [ 1]  540 	inc in 
      0017F7 72 5C 00 01      [ 1]  541 	inc in 
      0017FB 81               [ 4]  542 	ret 
                                    543 
                                    544 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    545 ; extract int24_t  
                                    546 ; value from BASIC 
                                    547 ; code 
                                    548 ; input:
                                    549 ;    X   *integer 
                                    550 ; output:
                                    551 ;    A:X   int24  
                                    552 ;--------------------
      0017FC                        553 get_int24:
      0017FC F6               [ 1]  554 	ld a,(x)
      0017FD EE 01            [ 2]  555 	ldw x,(1,x)
                                    556 ; skip 3 bytes 
      0017FF 72 5C 00 01      [ 1]  557 	inc in 
      001803 72 5C 00 01      [ 1]  558 	inc in 
      001807 72 5C 00 01      [ 1]  559 	inc in 
      00180B 81               [ 4]  560 	ret 
                                    561 
                                    562 ;-------------------------
                                    563 ; get character from 
                                    564 ; BASIC code 
                                    565 ; input:
                                    566 ;    X   *char 
                                    567 ; output:
                                    568 ;    A    char 
                                    569 ;-------------------------
      00180C                        570 get_char:
      00180C F6               [ 1]  571 	ld a,(x)
      00180D 72 5C 00 01      [ 1]  572 	inc in  
      001811 81               [ 4]  573     ret 
                                    574 
                                    575 ;-----------------------------------
                                    576 ; print a 16 bit integer 
                                    577 ; using variable 'base' as conversion
                                    578 ; format.
                                    579 ; input:
                                    580 ;    X       integer to print 
                                    581 ;   'base'    conversion base 
                                    582 ; output:
                                    583 ;   terminal  
                                    584 ;-----------------------------------
      001812                        585 prt_i16:
      001812 72 5F 00 0C      [ 1]  586 	clr acc24 
      001816 CF 00 0D         [ 2]  587 	ldw acc16,x 
      001819 A6 10            [ 1]  588 	ld a,#16
      00181B C1 00 0A         [ 1]  589 	cp a,base
      00181E 27 09            [ 1]  590 	jreq prt_acc24  
      001820 72 0F 00 0D 04   [ 2]  591 	btjf acc16,#7,prt_acc24
      001825 72 53 00 0C      [ 1]  592 	cpl acc24 ; sign extend 
                                    593 	
                                    594 ;------------------------------------
                                    595 ; print integer in acc24 
                                    596 ; input:
                                    597 ;	acc24 		integer to print 
                                    598 ;	'base' 		numerical base for conversion 
                                    599 ;   'tab_width' field width 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    600 ;    A 			signed||unsigned conversion
                                    601 ;  output:
                                    602 ;    A          string length
                                    603 ;------------------------------------
      001829                        604 prt_acc24:
      001829 A6 FF            [ 1]  605 	ld a,#255  ; signed conversion  
      00182B CD 18 4F         [ 4]  606     call itoa  ; conversion entier en  .asciz
      00182E CD 11 93         [ 4]  607 	call right_align  
      001831 88               [ 1]  608 	push a 
      001832 CD 09 A1         [ 4]  609 	call puts
      001835 84               [ 1]  610 	pop a 
      001836 81               [ 4]  611     ret	
                                    612 
                                    613 ;---------------------------------------
                                    614 ;  print value at xstack top 
                                    615 ;---------------------------------------
      001837                        616 print_top: 
      001837                        617 	_xpop 
      001837 90 F6            [ 1]    1     ld a,(y)
      001839 93               [ 1]    2     ldw x,y 
      00183A EE 01            [ 2]    3     ldw x,(1,x)
      00183C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001840 C7 00 0C         [ 1]  618 	ld acc24,a 
      001843 CF 00 0D         [ 2]  619 	ldw acc16,x 
      001846 CD 18 29         [ 4]  620 	call prt_acc24 
      001849 A6 20            [ 1]  621 	ld a,#SPACE
      00184B CD 09 44         [ 4]  622 	call putc 
      00184E 81               [ 4]  623 	ret 
                                    624 
                                    625 ;------------------------------------
                                    626 ; convert integer in acc24 to string
                                    627 ; input:
                                    628 ;   'base'	conversion base 
                                    629 ;	acc24	integer to convert
                                    630 ;   A       0=unsigned, else signed 
                                    631 ; output:
                                    632 ;   X  		pointer to first char of string
                                    633 ;   A       string length
                                    634 ;------------------------------------
                           000001   635 	SIGN=1  ; integer sign 
                           000002   636 	LEN=2 
                           000003   637 	PSTR=3
                           000004   638 	VSIZE=4 ;locals size
      00184F                        639 itoa::
      00184F                        640 	_vars VSIZE
      00184F 52 04            [ 2]    1     sub sp,#VSIZE 
      001851 0F 02            [ 1]  641 	clr (LEN,sp) ; string length  
      001853 0F 01            [ 1]  642 	clr (SIGN,sp)    ; sign
      001855 4D               [ 1]  643 	tnz A
      001856 27 11            [ 1]  644 	jreq 1$ ; unsigned conversion  
      001858 C6 00 0A         [ 1]  645 	ld a,base 
      00185B A1 0A            [ 1]  646 	cp a,#10
      00185D 26 0A            [ 1]  647 	jrne 1$
                                    648 	; base 10 string display with negative sign if bit 23==1
      00185F 72 0F 00 0C 05   [ 2]  649 	btjf acc24,#7,1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      001864 03 01            [ 1]  650 	cpl (SIGN,sp)
      001866 CD 02 0D         [ 4]  651 	call neg_acc24
      001869                        652 1$:
                                    653 ; initialize string pointer 
      001869 AE 16 68         [ 2]  654 	ldw x,#tib 
      00186C 1C 00 50         [ 2]  655 	addw x,#TIB_SIZE
      00186F 5A               [ 2]  656 	decw x 
      001870 7F               [ 1]  657 	clr (x)
      001871                        658 itoa_loop:
      001871 C6 00 0A         [ 1]  659     ld a,base
                                    660 ;	ldw (PSTR,sp),x 
      001874 CD 03 09         [ 4]  661     call divu24_8 ; acc24/A 
                                    662 ;	ldw x,(PSTR,sp)
      001877 AB 30            [ 1]  663     add a,#'0  ; remainder of division
      001879 A1 3A            [ 1]  664     cp a,#'9+1
      00187B 2B 02            [ 1]  665     jrmi 2$
      00187D AB 07            [ 1]  666     add a,#7 
      00187F                        667 2$:	
      00187F 5A               [ 2]  668 	decw x
      001880 F7               [ 1]  669     ld (x),a
      001881 0C 02            [ 1]  670 	inc (LEN,sp)
                                    671 	; if acc24==0 conversion done
      001883 C6 00 0C         [ 1]  672 	ld a,acc24
      001886 CA 00 0D         [ 1]  673 	or a,acc16
      001889 CA 00 0E         [ 1]  674 	or a,acc8
      00188C 26 E3            [ 1]  675     jrne itoa_loop
                                    676 	;conversion done, next add '$' or '-' as required
      00188E C6 00 0A         [ 1]  677 	ld a,base 
      001891 A1 10            [ 1]  678 	cp a,#16
      001893 27 08            [ 1]  679 	jreq 8$
      001895 7B 01            [ 1]  680 	ld a,(SIGN,sp)
      001897 27 0A            [ 1]  681     jreq 10$
      001899 A6 2D            [ 1]  682     ld a,#'-
      00189B 20 02            [ 2]  683 	jra 9$ 
      00189D                        684 8$:	
      00189D A6 24            [ 1]  685 	ld a,#'$ 
      00189F 5A               [ 2]  686 9$: decw x
      0018A0 F7               [ 1]  687     ld (x),a
      0018A1 0C 02            [ 1]  688 	inc (LEN,sp)
      0018A3                        689 10$:
      0018A3 7B 02            [ 1]  690 	ld a,(LEN,sp)
      0018A5                        691 	_drop VSIZE
      0018A5 5B 04            [ 2]    1     addw sp,#VSIZE 
      0018A7 81               [ 4]  692 	ret
                                    693 
                                    694 ;------------------------------------
                                    695 ; convert alpha to uppercase
                                    696 ; input:
                                    697 ;    a  character to convert
                                    698 ; output:
                                    699 ;    a  uppercase character
                                    700 ;------------------------------------
      0018A8                        701 to_upper::
      0018A8 A1 61            [ 1]  702 	cp a,#'a
      0018AA 2A 01            [ 1]  703 	jrpl 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      0018AC 81               [ 4]  704 0$:	ret
      0018AD A1 7A            [ 1]  705 1$: cp a,#'z	
      0018AF 22 FB            [ 1]  706 	jrugt 0$
      0018B1 A0 20            [ 1]  707 	sub a,#32
      0018B3 81               [ 4]  708 	ret
                                    709 	
                                    710 ;------------------------------------
                                    711 ; convert pad content in integer
                                    712 ; input:
                                    713 ;    x		* .asciz to convert
                                    714 ; output:
                                    715 ;    acc24      int24_t
                                    716 ;------------------------------------
                                    717 	; local variables
                           000001   718 	SIGN=1 ; 1 byte, 
                           000002   719 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   720 	TEMP=3 ; 1 byte, temporary storage
                           000003   721 	VSIZE=3 ; 3 bytes reserved for local storage
      0018B4                        722 atoi24::
      0018B4 89               [ 2]  723 	pushw x 
      0018B5                        724 	_vars VSIZE
      0018B5 52 03            [ 2]    1     sub sp,#VSIZE 
                                    725 	; acc24=0 
      0018B7 72 5F 00 0C      [ 1]  726 	clr acc24    
      0018BB 72 5F 00 0D      [ 1]  727 	clr acc16
      0018BF 72 5F 00 0E      [ 1]  728 	clr acc8 
      0018C3 0F 01            [ 1]  729 	clr (SIGN,sp)
      0018C5 A6 0A            [ 1]  730 	ld a,#10
      0018C7 6B 02            [ 1]  731 	ld (BASE,sp),a ; default base decimal
      0018C9 F6               [ 1]  732 	ld a,(x)
      0018CA 27 47            [ 1]  733 	jreq 9$  ; completed if 0
      0018CC A1 2D            [ 1]  734 	cp a,#'-
      0018CE 26 04            [ 1]  735 	jrne 1$
      0018D0 03 01            [ 1]  736 	cpl (SIGN,sp)
      0018D2 20 08            [ 2]  737 	jra 2$
      0018D4 A1 24            [ 1]  738 1$: cp a,#'$
      0018D6 26 06            [ 1]  739 	jrne 3$
      0018D8 A6 10            [ 1]  740 	ld a,#16
      0018DA 6B 02            [ 1]  741 	ld (BASE,sp),a
      0018DC 5C               [ 1]  742 2$:	incw x
      0018DD F6               [ 1]  743 	ld a,(x)
      0018DE                        744 3$:	
      0018DE A1 61            [ 1]  745 	cp a,#'a
      0018E0 2B 02            [ 1]  746 	jrmi 4$
      0018E2 A0 20            [ 1]  747 	sub a,#32
      0018E4 A1 30            [ 1]  748 4$:	cp a,#'0
      0018E6 2B 2B            [ 1]  749 	jrmi 9$
      0018E8 A0 30            [ 1]  750 	sub a,#'0
      0018EA A1 0A            [ 1]  751 	cp a,#10
      0018EC 2B 06            [ 1]  752 	jrmi 5$
      0018EE A0 07            [ 1]  753 	sub a,#7
      0018F0 11 02            [ 1]  754 	cp a,(BASE,sp)
      0018F2 2A 1F            [ 1]  755 	jrpl 9$
      0018F4 6B 03            [ 1]  756 5$:	ld (TEMP,sp),a
      0018F6 7B 02            [ 1]  757 	ld a,(BASE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0018F8 CD 02 2A         [ 4]  758 	call mulu24_8
      0018FB 7B 03            [ 1]  759 	ld a,(TEMP,sp)
      0018FD CB 00 0E         [ 1]  760 	add a,acc24+2
      001900 C7 00 0E         [ 1]  761 	ld acc24+2,a
      001903 4F               [ 1]  762 	clr a
      001904 C9 00 0D         [ 1]  763 	adc a,acc24+1
      001907 C7 00 0D         [ 1]  764 	ld acc24+1,a
      00190A 4F               [ 1]  765 	clr a
      00190B C9 00 0C         [ 1]  766 	adc a,acc24
      00190E C7 00 0C         [ 1]  767 	ld acc24,a
      001911 20 C9            [ 2]  768 	jra 2$
      001913 0D 01            [ 1]  769 9$:	tnz (SIGN,sp)
      001915 27 03            [ 1]  770     jreq atoi_exit
      001917 CD 02 0D         [ 4]  771     call neg_acc24
      00191A                        772 atoi_exit: 
      00191A                        773 	_drop VSIZE
      00191A 5B 03            [ 2]    1     addw sp,#VSIZE 
      00191C 85               [ 2]  774 	popw x ; restore x
      00191D 81               [ 4]  775 	ret
                                    776 
                                    777 
                                    778 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    779 ;;   TINY BASIC  operators,
                                    780 ;;   commands and functions 
                                    781 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    782 
                                    783 ;---------------------------------
                                    784 ; dictionary search 
                                    785 ; input:
                                    786 ;	X 		dictionary entry point, name field  
                                    787 ;   y		.asciz name to search 
                                    788 ; output:
                                    789 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    790 ;  X		cmd_index
                                    791 ;---------------------------------
                           000001   792 	NLEN=1 ; cmd length 
                           000002   793 	XSAVE=2
                           000004   794 	YSAVE=4
                           000005   795 	VSIZE=5 
      00191E                        796 search_dict::
      00191E                        797 	_vars VSIZE 
      00191E 52 05            [ 2]    1     sub sp,#VSIZE 
      001920 17 04            [ 2]  798 	ldw (YSAVE,sp),y 
      001922                        799 search_next:
      001922 1F 02            [ 2]  800 	ldw (XSAVE,sp),x 
                                    801 ; get name length in dictionary	
      001924 F6               [ 1]  802 	ld a,(x)
      001925 A4 0F            [ 1]  803 	and a,#0xf 
      001927 6B 01            [ 1]  804 	ld (NLEN,sp),a  
      001929 16 04            [ 2]  805 	ldw y,(YSAVE,sp) ; name pointer 
      00192B 5C               [ 1]  806 	incw x 
      00192C                        807 cp_loop:
      00192C 90 F6            [ 1]  808 	ld a,(y)
      00192E 27 1B            [ 1]  809 	jreq str_match 
      001930 0D 01            [ 1]  810 	tnz (NLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      001932 27 0A            [ 1]  811 	jreq no_match  
      001934 F1               [ 1]  812 	cp a,(x)
      001935 26 07            [ 1]  813 	jrne no_match 
      001937 90 5C            [ 1]  814 	incw y 
      001939 5C               [ 1]  815 	incw x
      00193A 0A 01            [ 1]  816 	dec (NLEN,sp)
      00193C 20 EE            [ 2]  817 	jra cp_loop 
      00193E                        818 no_match:
      00193E 1E 02            [ 2]  819 	ldw x,(XSAVE,sp) 
      001940 1D 00 02         [ 2]  820 	subw x,#2 ; move X to link field
      001943 4B 00            [ 1]  821 	push #TK_NONE 
      001945 FE               [ 2]  822 	ldw x,(x) ; next word link 
      001946 84               [ 1]  823 	pop a ; TK_NONE 
      001947 27 1D            [ 1]  824 	jreq search_exit  ; not found  
                                    825 ;try next 
      001949 20 D7            [ 2]  826 	jra search_next
      00194B                        827 str_match:
      00194B 1E 02            [ 2]  828 	ldw x,(XSAVE,sp)
      00194D F6               [ 1]  829 	ld a,(X)
      00194E 6B 01            [ 1]  830 	ld (NLEN,sp),a ; needed to test keyword type  
      001950 A4 0F            [ 1]  831 	and a,#NLEN_MASK 
                                    832 ; move x to procedure address field 	
      001952 4C               [ 1]  833 	inc a 
      001953 C7 00 0E         [ 1]  834 	ld acc8,a 
      001956 72 5F 00 0D      [ 1]  835 	clr acc16 
      00195A 72 BB 00 0D      [ 2]  836 	addw x,acc16 
      00195E FE               [ 2]  837 	ldw x,(x) ; routine index  
                                    838 ;determine keyword type bits 7:4 
      00195F 7B 01            [ 1]  839 	ld a,(NLEN,sp)
      001961 A4 F0            [ 1]  840 	and a,#KW_TYPE_MASK 
      001963 4E               [ 1]  841 	swap a 
      001964 AB 80            [ 1]  842 	add a,#128
      001966                        843 search_exit: 
      001966                        844 	_drop VSIZE 
      001966 5B 05            [ 2]    1     addw sp,#VSIZE 
      001968 81               [ 4]  845 	ret 
                                    846 
                                    847 ;---------------------
                                    848 ; check if next token
                                    849 ;  is of expected type 
                                    850 ; input:
                                    851 ;   A 		 expected token attribute
                                    852 ;  ouput:
                                    853 ;   none     if fail call syntax_error 
                                    854 ;--------------------
      001969                        855 expect:
      001969 88               [ 1]  856 	push a 
      00196A CD 17 BD         [ 4]  857 	call next_token 
      00196D 11 01            [ 1]  858 	cp a,(1,sp)
      00196F 27 03            [ 1]  859 	jreq 1$
      001971 CC 16 BC         [ 2]  860 	jp syntax_error
      001974 84               [ 1]  861 1$: pop a 
      001975 81               [ 4]  862 	ret 
                                    863 
                                    864 ;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



                                    865 ; parse arguments list 
                                    866 ; between ()
                                    867 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001976                        868 func_args:
      001976 A6 06            [ 1]  869 	ld a,#TK_LPAREN 
      001978 CD 19 69         [ 4]  870 	call expect 
                                    871 ; expected to continue in arg_list 
                                    872 ; caller must check for TK_RPAREN 
                                    873 
                                    874 ;-------------------------------
                                    875 ; parse embedded BASIC routines 
                                    876 ; arguments list.
                                    877 ; arg_list::=  expr[','expr]*
                                    878 ; all arguments are of int24_t type
                                    879 ; and pushed on stack 
                                    880 ; input:
                                    881 ;   none
                                    882 ; output:
                                    883 ;   xstack{n}   arguments pushed on xstack
                                    884 ;   A 	number of arguments pushed on xstack  
                                    885 ;--------------------------------
      00197B                        886 arg_list:
      00197B 4B 00            [ 1]  887 	push #0
      00197D CD 1B AB         [ 4]  888 1$:	call condition 
      001980 4D               [ 1]  889 	tnz a 
      001981 27 12            [ 1]  890 	jreq 7$  
      001983 0C 01            [ 1]  891 	inc (1,sp)
      001985 CD 17 BD         [ 4]  892 	call next_token 
      001988 A1 08            [ 1]  893 	cp a,#TK_COMMA 
      00198A 27 F1            [ 1]  894 	jreq 1$ 
      00198C A1 07            [ 1]  895 	cp a,#TK_RPAREN
      00198E 27 05            [ 1]  896 	jreq 7$
      001990                        897 	_unget_token 
      001990 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001995 84               [ 1]  898 7$:	pop a  
      001996 81               [ 4]  899 	ret 
                                    900 
                                    901 ;--------------------------------
                                    902 ;   BASIC commnands 
                                    903 ;--------------------------------
                                    904 
                                    905 ;--------------------------------
                                    906 ;  arithmetic and relational 
                                    907 ;  routines
                                    908 ;  operators precedence
                                    909 ;  highest to lowest
                                    910 ;  operators on same row have 
                                    911 ;  same precedence and are executed
                                    912 ;  from left to right.
                                    913 ;	'*','/','%'
                                    914 ;   '-','+'
                                    915 ;   '=','>','<','>=','<=','<>','><'
                                    916 ;   '<>' and '><' are equivalent for not equal.
                                    917 ;--------------------------------
                                    918 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



                                    919 ;---------------------
                                    920 ; return array element
                                    921 ; address from @(expr)
                                    922 ; input:
                                    923 ;   A 		TK_ARRAY
                                    924 ; output:
                                    925 ;	X 		element address 
                                    926 ;----------------------
      001997                        927 get_array_element:
      001997 CD 19 76         [ 4]  928 	call func_args 
      00199A A1 01            [ 1]  929 	cp a,#1
      00199C 27 03            [ 1]  930 	jreq 1$
      00199E CC 16 BC         [ 2]  931 	jp syntax_error
      0019A1                        932 1$: _xpop 
      0019A1 90 F6            [ 1]    1     ld a,(y)
      0019A3 93               [ 1]    2     ldw x,y 
      0019A4 EE 01            [ 2]    3     ldw x,(1,x)
      0019A6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    933     ; ignore A, index < 65536 in any case 
                                    934 	; check for bounds 
      0019AA C3 00 20         [ 2]  935 	cpw x,array_size 
      0019AD 23 05            [ 2]  936 	jrule 3$
                                    937 ; bounds {1..array_size}	
      0019AF A6 0A            [ 1]  938 2$: ld a,#ERR_BAD_VALUE 
      0019B1 CC 16 BE         [ 2]  939 	jp tb_error 
      0019B4 5D               [ 2]  940 3$: tnzw  x
      0019B5 27 F8            [ 1]  941 	jreq 2$ 
      0019B7 89               [ 2]  942 	pushw x 
      0019B8 58               [ 2]  943 	sllw x 
      0019B9 72 FB 01         [ 2]  944 	addw x,(1,sp) ; index*size_of(int24)
      0019BC 1F 01            [ 2]  945 	ldw (1,sp),x  
      0019BE AE 16 68         [ 2]  946 	ldw x,#tib ; array is below tib 
      0019C1 72 F0 01         [ 2]  947 	subw x,(1,sp)
      0019C4                        948 	_drop 2   
      0019C4 5B 02            [ 2]    1     addw sp,#2 
      0019C6 81               [ 4]  949 	ret 
                                    950 
                                    951 
                                    952 ;***********************************
                                    953 ;   expression parse,execute 
                                    954 ;***********************************
                                    955 ;-----------------------------------
                                    956 ; factor ::= ['+'|'-'|e]  var | @ |
                                    957 ;			 integer | function |
                                    958 ;			 '('relation')' 
                                    959 ; output:
                                    960 ;   A       token attribute 
                                    961 ;   xstack  value  
                                    962 ; ---------------------------------
                           000001   963 	NEG=1
                           000001   964 	VSIZE=1
      0019C7                        965 factor:
      0019C7                        966 	_vars VSIZE 
      0019C7 52 01            [ 2]    1     sub sp,#VSIZE 
      0019C9 0F 01            [ 1]  967 	clr (NEG,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      0019CB CD 17 BD         [ 4]  968 	call next_token
      0019CE 4D               [ 1]  969 	tnz a 
      0019CF 26 03            [ 1]  970 	jrne 1$ 
      0019D1 CC 1A 60         [ 2]  971 	jp 22$ 
      0019D4 A1 10            [ 1]  972 1$:	cp a,#TK_PLUS 
      0019D6 27 06            [ 1]  973 	jreq 2$
      0019D8 A1 11            [ 1]  974 	cp a,#TK_MINUS 
      0019DA 26 05            [ 1]  975 	jrne 4$ 
      0019DC 03 01            [ 1]  976 	cpl (NEG,sp)
      0019DE                        977 2$:	
      0019DE CD 17 BD         [ 4]  978 	call next_token
      0019E1                        979 4$:
      0019E1 4D               [ 1]  980 	tnz a 
      0019E2 26 03            [ 1]  981 	jrne 41$ 
      0019E4 CC 16 BC         [ 2]  982 	jp syntax_error  
      0019E7                        983 41$:	
      0019E7 A1 81            [ 1]  984 	cp a,#TK_IFUNC 
      0019E9 26 06            [ 1]  985 	jrne 5$ 
      0019EB CD 17 D6         [ 4]  986 	call get_code_addr 
      0019EE FD               [ 4]  987 	call (x); result in A:X  
      0019EF 20 5D            [ 2]  988 	jra 18$ 
      0019F1                        989 5$:
      0019F1 A1 84            [ 1]  990 	cp a,#TK_INTGR
      0019F3 26 05            [ 1]  991 	jrne 6$
      0019F5 CD 17 FC         [ 4]  992 	call get_int24 ; A:X
      0019F8 20 54            [ 2]  993 	jra 18$
      0019FA                        994 6$:
      0019FA A1 05            [ 1]  995 	cp a,#TK_ARRAY
      0019FC 26 05            [ 1]  996 	jrne 7$
      0019FE CD 19 97         [ 4]  997 	call get_array_element
      001A01 20 07            [ 2]  998     jra 71$
      001A03                        999 7$:
      001A03 A1 85            [ 1] 1000 	cp a,#TK_VAR 
      001A05 26 08            [ 1] 1001 	jrne 8$
      001A07 CD 17 F2         [ 4] 1002 	call get_addr 
      001A0A                       1003 71$: ; put value in A:X
      001A0A F6               [ 1] 1004 	ld a,(x)
      001A0B EE 01            [ 2] 1005 	ldw x,(1,x)
      001A0D 20 3F            [ 2] 1006 	jra 18$
      001A0F                       1007 8$:
      001A0F A1 03            [ 1] 1008 	cp a,#TK_LABEL 
      001A11 26 10            [ 1] 1009 	jrne 9$ 
      001A13 89               [ 2] 1010 	pushw x 
      001A14 CD 17 E3         [ 4] 1011 	call skip_string
      001A17 85               [ 2] 1012 	popw x 
      001A18 CD 1D 64         [ 4] 1013 	call search_const 
      001A1B 5D               [ 2] 1014 	tnzw x 
      001A1C 27 28            [ 1] 1015 	jreq 16$
      001A1E CD 1C C0         [ 4] 1016 	call get_const_value ; in A:X 
      001A21 20 2B            [ 2] 1017 	jra 18$
      001A23                       1018 9$: 
      001A23 A1 82            [ 1] 1019 	cp a,#TK_CFUNC 
      001A25 26 08            [ 1] 1020 	jrne 12$
      001A27 CD 17 D6         [ 4] 1021 	call get_code_addr 
      001A2A FD               [ 4] 1022 	call(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001A2B 5F               [ 1] 1023 	clrw x 
      001A2C 02               [ 1] 1024 	rlwa x  ; char>int24 in A:X 
      001A2D 20 1F            [ 2] 1025 	jra 18$ 	 
      001A2F                       1026 12$:			
      001A2F A1 06            [ 1] 1027 	cp a,#TK_LPAREN
      001A31 26 13            [ 1] 1028 	jrne 16$
      001A33 CD 1A A6         [ 4] 1029 	call expression
      001A36 A6 07            [ 1] 1030 	ld a,#TK_RPAREN 
      001A38 CD 19 69         [ 4] 1031 	call expect
      001A3B                       1032 	_xpop 
      001A3B 90 F6            [ 1]    1     ld a,(y)
      001A3D 93               [ 1]    2     ldw x,y 
      001A3E EE 01            [ 2]    3     ldw x,(1,x)
      001A40 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A44 20 08            [ 2] 1033 	jra 18$	
      001A46                       1034 16$:
      001A46                       1035 	_unget_token 
      001A46 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A4B 4F               [ 1] 1036 	clr a 
      001A4C 20 12            [ 2] 1037 	jra 22$ 
      001A4E                       1038 18$: 
      001A4E 0D 01            [ 1] 1039 	tnz (NEG,sp)
      001A50 27 03            [ 1] 1040 	jreq 20$
      001A52 CD 02 05         [ 4] 1041 	call neg_ax   
      001A55                       1042 20$:
      001A55                       1043 	_xpush 
      001A55 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001A59 90 F7            [ 1]    2     ld (y),a 
      001A5B 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A5E A6 84            [ 1] 1044 	ld a,#TK_INTGR
      001A60                       1045 22$:
      001A60                       1046 	_drop VSIZE
      001A60 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A62 81               [ 4] 1047 	ret
                                   1048 
                                   1049 
                                   1050 ;-----------------------------------
                                   1051 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1052 ; output:
                                   1053 ;   A    	token attribute 
                                   1054 ;	xstack		value 
                                   1055 ;-----------------------------------
                           000001  1056 	MULOP=1
                           000001  1057 	VSIZE=1
      001A63                       1058 term:
      001A63                       1059 	_vars VSIZE
      001A63 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1060 ; first factor 	
      001A65 CD 19 C7         [ 4] 1061 	call factor
      001A68 4D               [ 1] 1062 	tnz a 
      001A69 27 38            [ 1] 1063 	jreq term_exit  
      001A6B                       1064 term01:	 ; check for  operator '*'|'/'|'%' 
      001A6B CD 17 BD         [ 4] 1065 	call next_token
      001A6E 6B 01            [ 1] 1066 	ld (MULOP,sp),a
      001A70 A4 30            [ 1] 1067 	and a,#TK_GRP_MASK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001A72 A1 20            [ 1] 1068 	cp a,#TK_GRP_MULT
      001A74 27 09            [ 1] 1069 	jreq 1$
      001A76 A6 84            [ 1] 1070 	ld a,#TK_INTGR
      001A78                       1071 	_unget_token 
      001A78 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A7D 20 24            [ 2] 1072 	jra term_exit 
      001A7F                       1073 1$:	; got *|/|%
                                   1074 ;second factor
      001A7F CD 19 C7         [ 4] 1075 	call factor
      001A82 4D               [ 1] 1076 	tnz a 
      001A83 26 03            [ 1] 1077 	jrne 2$ 
      001A85 CC 16 BC         [ 2] 1078 	jp syntax_error 
      001A88                       1079 2$: ; select operation 	
      001A88 7B 01            [ 1] 1080 	ld a,(MULOP,sp) 
      001A8A A1 20            [ 1] 1081 	cp a,#TK_MULT 
      001A8C 26 05            [ 1] 1082 	jrne 3$
                                   1083 ; '*' operator
      001A8E CD 02 5D         [ 4] 1084 	call mul24 
      001A91 20 D8            [ 2] 1085 	jra term01
      001A93 A1 21            [ 1] 1086 3$: cp a,#TK_DIV 
      001A95 26 05            [ 1] 1087 	jrne 4$ 
                                   1088 ; '/' operator	
      001A97 CD 03 27         [ 4] 1089 	call div24 
      001A9A 20 CF            [ 2] 1090 	jra term01 
      001A9C                       1091 4$: ; '%' operator
      001A9C CD 03 D5         [ 4] 1092 	call mod24
      001A9F 20 CA            [ 2] 1093 	jra term01 
      001AA1                       1094 9$: 
      001AA1 A6 84            [ 1] 1095 	ld a,#TK_INTGR
      001AA3                       1096 term_exit:
      001AA3                       1097 	_drop VSIZE 
      001AA3 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AA5 81               [ 4] 1098 	ret 
                                   1099 
                                   1100 ;-------------------------------
                                   1101 ;  expr ::= term [['+'|'-'] term]*
                                   1102 ;  result range {-32768..32767}
                                   1103 ;  output:
                                   1104 ;   A    token attribute 
                                   1105 ;   xstack	 result    
                                   1106 ;-------------------------------
                           000001  1107 	OP=1 
                           000001  1108 	VSIZE=1 
      001AA6                       1109 expression:
      001AA6                       1110 	_vars VSIZE 
      001AA6 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1111 ; first term 	
      001AA8 CD 1A 63         [ 4] 1112 	call term
      001AAB 4D               [ 1] 1113 	tnz a 
      001AAC 27 2D            [ 1] 1114 	jreq 9$
      001AAE                       1115 1$:	; operator '+'|'-'
      001AAE CD 17 BD         [ 4] 1116 	call next_token
      001AB1 6B 01            [ 1] 1117 	ld (OP,sp),a 
      001AB3 A4 30            [ 1] 1118 	and a,#TK_GRP_MASK
      001AB5 A1 10            [ 1] 1119 	cp a,#TK_GRP_ADD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001AB7 27 09            [ 1] 1120 	jreq 2$ 
      001AB9                       1121 	_unget_token 
      001AB9 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001ABE A6 84            [ 1] 1122 	ld a,#TK_INTGR
      001AC0 20 19            [ 2] 1123 	jra 9$ 
      001AC2                       1124 2$: ; second term 
      001AC2 CD 1A 63         [ 4] 1125 	call term
      001AC5 4D               [ 1] 1126 	tnz a 
      001AC6 26 03            [ 1] 1127 	jrne 3$
      001AC8 CC 16 BC         [ 2] 1128 	jp syntax_error
      001ACB                       1129 3$:
      001ACB 7B 01            [ 1] 1130 	ld a,(OP,sp)
      001ACD A1 10            [ 1] 1131 	cp a,#TK_PLUS 
      001ACF 26 05            [ 1] 1132 	jrne 4$
                                   1133 ; '+' operator	
      001AD1 CD 01 6A         [ 4] 1134 	call add24
      001AD4 20 D8            [ 2] 1135 	jra 1$ 
      001AD6                       1136 4$:	; '-' operator 
      001AD6 CD 01 87         [ 4] 1137 	call sub24
      001AD9 20 D3            [ 2] 1138 	jra 1$
      001ADB                       1139 9$:
      001ADB                       1140 	_drop VSIZE 
      001ADB 5B 01            [ 2]    1     addw sp,#VSIZE 
      001ADD 81               [ 4] 1141 	ret 
                                   1142 
                                   1143 ;---------------------------------------------
                                   1144 ; rel ::= expr rel_op expr
                                   1145 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1146 ;  relation return  integer , zero is false 
                                   1147 ;  output:
                                   1148 ;	 xstack		value  
                                   1149 ;---------------------------------------------
                           000001  1150 	RELOP=1
                           000001  1151 	VSIZE=1 
      001ADE                       1152 relation: 
      001ADE                       1153 	_vars VSIZE
      001ADE 52 01            [ 2]    1     sub sp,#VSIZE 
      001AE0 CD 1A A6         [ 4] 1154 	call expression
      001AE3 4D               [ 1] 1155 	tnz a 
      001AE4 27 54            [ 1] 1156 	jreq 9$ 
                                   1157 ; expect rel_op or leave 
      001AE6 CD 17 BD         [ 4] 1158 	call next_token 
      001AE9 6B 01            [ 1] 1159 	ld (RELOP,sp),a 
      001AEB A4 30            [ 1] 1160 	and a,#TK_GRP_MASK
      001AED A1 30            [ 1] 1161 	cp a,#TK_GRP_RELOP 
      001AEF 27 09            [ 1] 1162 	jreq 2$
      001AF1 A6 84            [ 1] 1163 	ld a,#TK_INTGR 
      001AF3                       1164 	_unget_token 
      001AF3 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AF8 20 40            [ 2] 1165 	jra 9$ 
      001AFA                       1166 2$:	; expect another expression
      001AFA CD 1A A6         [ 4] 1167 	call expression
      001AFD 4D               [ 1] 1168 	tnz a 
      001AFE 26 03            [ 1] 1169 	jrne 3$
      001B00 CC 16 BC         [ 2] 1170 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001B03                       1171 3$: 
      001B03 CD 01 A4         [ 4] 1172 	call cp24 
      001B06                       1173 	_xpop  
      001B06 90 F6            [ 1]    1     ld a,(y)
      001B08 93               [ 1]    2     ldw x,y 
      001B09 EE 01            [ 2]    3     ldw x,(1,x)
      001B0B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B0F 4D               [ 1] 1174 	tnz a 
      001B10 2B 08            [ 1] 1175 	jrmi 4$
      001B12 26 0C            [ 1] 1176 	jrne 5$
      001B14 35 02 00 0E      [ 1] 1177 	mov acc8,#2 ; i1==i2
      001B18 20 0A            [ 2] 1178 	jra 6$ 
      001B1A                       1179 4$: ; i1<i2
      001B1A 35 04 00 0E      [ 1] 1180 	mov acc8,#4 
      001B1E 20 04            [ 2] 1181 	jra 6$
      001B20                       1182 5$: ; i1>i2
      001B20 35 01 00 0E      [ 1] 1183 	mov acc8,#1  
      001B24                       1184 6$: ; 0=false, -1=true 
      001B24 5F               [ 1] 1185 	clrw x 
      001B25 C6 00 0E         [ 1] 1186 	ld a, acc8  
      001B28 14 01            [ 1] 1187 	and a,(RELOP,sp)
      001B2A 27 03            [ 1] 1188 	jreq 7$
      001B2C 53               [ 2] 1189 	cplw x 
      001B2D A6 FF            [ 1] 1190 	ld a,#255 
      001B2F                       1191 7$:	_xpush 
      001B2F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B33 90 F7            [ 1]    2     ld (y),a 
      001B35 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B38 A6 84            [ 1] 1192 	ld a,#TK_INTGR
      001B3A                       1193 9$: 
      001B3A                       1194 	_drop VSIZE
      001B3A 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B3C 81               [ 4] 1195 	ret 
                                   1196 
                                   1197 ;-------------------------------------------
                                   1198 ;  AND factor:   relation | (condition)
                                   1199 ;  output:
                                   1200 ;     A      TK_INTGR|0
                                   1201 ;-------------------------------------------
      001B3D                       1202 and_factor:
      001B3D CD 17 BD         [ 4] 1203 	call next_token  
      001B40 4D               [ 1] 1204 	tnz a 
      001B41 27 15            [ 1] 1205 	jreq 8$ 
      001B43 A1 06            [ 1] 1206 	cp a,#TK_LPAREN 
      001B45 26 09            [ 1] 1207 	jrne 1$
      001B47 CD 1B AB         [ 4] 1208 	call condition
      001B4A A6 07            [ 1] 1209 	ld a,#TK_RPAREN 
      001B4C CD 19 69         [ 4] 1210 	call expect
      001B4F 81               [ 4] 1211 	ret
      001B50                       1212 1$: _unget_token 
      001B50 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B55 CD 1A DE         [ 4] 1213 	call relation 
      001B58 81               [ 4] 1214 8$: ret 
                                   1215 
                                   1216 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



                                   1217 ;--------------------------------------------
                                   1218 ;  AND operator as priority over OR||XOR 
                                   1219 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1220 ;          
                                   1221 ;  output:
                                   1222 ;     A     TK_INTGR|0
                                   1223 ;    xtack   value 
                                   1224 ;--------------------------------------------
      001B59                       1225 and_cond:
      001B59 CD 1B 3D         [ 4] 1226 	call and_factor
      001B5C 4D               [ 1] 1227 	tnz a 
      001B5D 27 4B            [ 1] 1228 	jreq 9$  
      001B5F CD 17 BD         [ 4] 1229 1$: call next_token 
      001B62 4D               [ 1] 1230 	tnz a 
      001B63 27 43            [ 1] 1231 	jreq 6$ 
      001B65 A1 87            [ 1] 1232 	cp a,#TK_AND 
      001B67 27 07            [ 1] 1233 	jreq 3$
      001B69                       1234 	_unget_token 
      001B69 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B6E 20 38            [ 2] 1235 	jra 6$ 
      001B70 CD 1B 3D         [ 4] 1236 3$:	call and_factor  
      001B73 4D               [ 1] 1237 	tnz a 
      001B74 26 03            [ 1] 1238 	jrne 4$
      001B76 CC 16 BC         [ 2] 1239 	jp syntax_error 
      001B79                       1240 4$:	
      001B79                       1241 	_xpop 
      001B79 90 F6            [ 1]    1     ld a,(y)
      001B7B 93               [ 1]    2     ldw x,y 
      001B7C EE 01            [ 2]    3     ldw x,(1,x)
      001B7E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B82 C7 00 0C         [ 1] 1242 	ld acc24,a 
      001B85 CF 00 0D         [ 2] 1243 	ldw acc16,x
      001B88                       1244 	_xpop 
      001B88 90 F6            [ 1]    1     ld a,(y)
      001B8A 93               [ 1]    2     ldw x,y 
      001B8B EE 01            [ 2]    3     ldw x,(1,x)
      001B8D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B91 C4 00 0C         [ 1] 1245 	and a,acc24 
      001B94 02               [ 1] 1246 	rlwa x 
      001B95 C4 00 0D         [ 1] 1247 	and a,acc16 
      001B98 02               [ 1] 1248 	rlwa x 
      001B99 C4 00 0E         [ 1] 1249 	and a,acc8 
      001B9C 02               [ 1] 1250 	rlwa x
      001B9D                       1251 	_xpush
      001B9D 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BA1 90 F7            [ 1]    2     ld (y),a 
      001BA3 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BA6 20 B7            [ 2] 1252 	jra 1$  
      001BA8 A6 84            [ 1] 1253 6$: ld a,#TK_INTGR 
      001BAA 81               [ 4] 1254 9$:	ret 	 
                                   1255 
                                   1256 
                                   1257 ;--------------------------------------------
                                   1258 ; condition for IF and UNTIL 
                                   1259 ; operators: OR,XOR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                   1260 ; format:  and_cond [ OP and_cond ]* 
                                   1261 ; output:
                                   1262 ;    A        INTGR|0 
                                   1263 ;    xstack   value 
                                   1264 ;--------------------------------------------
                           000001  1265 	ATMP=1
                           000002  1266 	OP=2
                           000002  1267 	VSIZE=2 
      001BAB                       1268 condition:
      001BAB                       1269 	_vars VSIZE 
      001BAB 52 02            [ 2]    1     sub sp,#VSIZE 
      001BAD CD 1B 59         [ 4] 1270 	call and_cond
      001BB0 4D               [ 1] 1271 	tnz a 
      001BB1 27 69            [ 1] 1272 	jreq 9$ 
      001BB3 CD 17 BD         [ 4] 1273 1$:	call next_token 
      001BB6 A1 88            [ 1] 1274 	cp a,#TK_OR 
      001BB8 27 0B            [ 1] 1275 	jreq 2$
      001BBA A1 89            [ 1] 1276 	cp a,#TK_XOR
      001BBC 27 07            [ 1] 1277 	jreq 2$ 
      001BBE                       1278 	_unget_token 
      001BBE 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BC3 20 55            [ 2] 1279 	jra 8$ 
      001BC5 6B 02            [ 1] 1280 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001BC7 CD 1B 59         [ 4] 1281 	call and_cond
      001BCA A1 84            [ 1] 1282 	cp a,#TK_INTGR 
      001BCC 27 03            [ 1] 1283 	jreq 3$
      001BCE CC 16 BC         [ 2] 1284 	jp syntax_error 
      001BD1                       1285 3$:	 
      001BD1                       1286 	_xpop  ; rigth arg 
      001BD1 90 F6            [ 1]    1     ld a,(y)
      001BD3 93               [ 1]    2     ldw x,y 
      001BD4 EE 01            [ 2]    3     ldw x,(1,x)
      001BD6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BDA C7 00 0C         [ 1] 1287 	ld acc24,a 
      001BDD CF 00 0D         [ 2] 1288 	ldw acc16,x 
      001BE0                       1289 	_xpop  ; left arg  
      001BE0 90 F6            [ 1]    1     ld a,(y)
      001BE2 93               [ 1]    2     ldw x,y 
      001BE3 EE 01            [ 2]    3     ldw x,(1,x)
      001BE5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BE9 6B 01            [ 1] 1290 	ld (ATMP,sp),a 
      001BEB 7B 02            [ 1] 1291 	ld a,(OP,sp)
      001BED A1 89            [ 1] 1292 	cp a,#TK_XOR 
      001BEF 27 10            [ 1] 1293 	jreq 5$ 
      001BF1                       1294 4$: ; A:X OR acc24   
      001BF1 7B 01            [ 1] 1295 	ld a,(ATMP,sp)
      001BF3 CA 00 0C         [ 1] 1296 	or a,acc24 
      001BF6 02               [ 1] 1297 	rlwa x 
      001BF7 CA 00 0D         [ 1] 1298 	or a,acc16 
      001BFA 02               [ 1] 1299 	rlwa x 
      001BFB CA 00 0E         [ 1] 1300 	or a,acc8 
      001BFE 02               [ 1] 1301 	rlwa x 
      001BFF 20 0E            [ 2] 1302 	jra 6$  
      001C01                       1303 5$: ; A:X XOR acc24 
      001C01 7B 01            [ 1] 1304 	ld a,(ATMP,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001C03 C8 00 0C         [ 1] 1305 	xor a,acc24 
      001C06 02               [ 1] 1306 	rlwa x 
      001C07 C8 00 0D         [ 1] 1307 	xor a,acc16 
      001C0A 02               [ 1] 1308 	rlwa x 
      001C0B C8 00 0E         [ 1] 1309 	xor a,acc8 
      001C0E 02               [ 1] 1310 	rlwa x 
      001C0F                       1311 6$: _xpush
      001C0F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C13 90 F7            [ 1]    2     ld (y),a 
      001C15 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C18 20 99            [ 2] 1312 	jra 1$ 
      001C1A A6 84            [ 1] 1313 8$:	ld a,#TK_INTGR 
      001C1C                       1314 9$:	_drop VSIZE 
      001C1C 5B 02            [ 2]    1     addw sp,#VSIZE 
      001C1E 81               [ 4] 1315 	ret 
                                   1316 
                                   1317 
                                   1318 ;--------------------------------------------
                                   1319 ; BASIC: HEX 
                                   1320 ; select hexadecimal base for integer print
                                   1321 ;---------------------------------------------
      001C1F                       1322 hex_base:
      001C1F 35 10 00 0A      [ 1] 1323 	mov base,#16 
      001C23 81               [ 4] 1324 	ret 
                                   1325 
                                   1326 ;--------------------------------------------
                                   1327 ; BASIC: DEC 
                                   1328 ; select decimal base for integer print
                                   1329 ;---------------------------------------------
      001C24                       1330 dec_base:
      001C24 35 0A 00 0A      [ 1] 1331 	mov base,#10
      001C28 81               [ 4] 1332 	ret 
                                   1333 
                                   1334 ;------------------------
                                   1335 ; BASIC: FREE 
                                   1336 ; return free size in RAM 
                                   1337 ; output:
                                   1338 ;   A:x		size 
                                   1339 ;--------------------------
      001C29                       1340 free:
      001C29 90 89            [ 2] 1341 	pushw y 
      001C2B 4F               [ 1] 1342 	clr a 
      001C2C AE 16 68         [ 2] 1343 	ldw x,#tib 
      001C2F 90 CE 00 1B      [ 2] 1344 	ldw y,txtbgn 
      001C33 90 A3 36 00      [ 2] 1345 	cpw y,#app_space
      001C37 25 05            [ 1] 1346 	jrult 1$
      001C39 1D 00 80         [ 2] 1347 	subw x,#free_ram 
      001C3C 20 04            [ 2] 1348 	jra 2$ 
      001C3E                       1349 1$:	
      001C3E 72 B0 00 1D      [ 2] 1350 	subw x,txtend
      001C42 90 85            [ 2] 1351 2$:	popw y 
      001C44 81               [ 4] 1352 	ret 
                                   1353 
                                   1354 ;------------------------------
                                   1355 ; BASIC: SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                                   1356 ; command that print 
                                   1357 ; program start addres and size 
                                   1358 ;------------------------------
      001C45                       1359 cmd_size:
      001C45 3B 00 0A         [ 1] 1360 	push base 
      001C48 AE 1E 9E         [ 2] 1361 	ldw x,#PROG_ADDR 
      001C4B CD 09 A1         [ 4] 1362 	call puts 
      001C4E CE 00 1B         [ 2] 1363 	ldw x,txtbgn     
      001C51 35 10 00 0A      [ 1] 1364 	mov base,#16 
      001C55 CD 18 12         [ 4] 1365 	call prt_i16
      001C58 32 00 0A         [ 1] 1366 	pop base 
      001C5B AE 1E B0         [ 2] 1367 	ldw x,#PROG_SIZE 
      001C5E CD 09 A1         [ 4] 1368 	call puts 
      001C61 CE 00 1D         [ 2] 1369 	ldw x,txtend 
      001C64 72 B0 00 1B      [ 2] 1370 	subw x,txtbgn 
      001C68 CD 18 12         [ 4] 1371 	call prt_i16
      001C6B AE 1E C1         [ 2] 1372 	ldw x,#STR_BYTES 
      001C6E CD 09 A1         [ 4] 1373 	call puts  
      001C71 81               [ 4] 1374 	ret 
                                   1375 
                                   1376 
                                   1377 ;------------------------
                                   1378 ; BASIC: UBOUND  
                                   1379 ; return array variable size 
                                   1380 ; and set 'array_size' variable 
                                   1381 ; output:
                                   1382 ;   A:X 	array_size
                                   1383 ;--------------------------
      001C72                       1384 ubound:
      001C72 CD 1C 29         [ 4] 1385 	call free 
      001C75 A6 03            [ 1] 1386 	ld a,#CELL_SIZE 
      001C77 42               [ 4] 1387 	mul x,a 
      001C78 CF 00 20         [ 2] 1388 	ldw array_size,x
      001C7B 4F               [ 1] 1389 	clr a 
      001C7C 81               [ 4] 1390 	ret 
                                   1391 
                                   1392 ;-----------------------------
                                   1393 ; BASIC: LET var=expr 
                                   1394 ; variable assignement 
                                   1395 ; output:
                                   1396 ;   A 		TK_NONE 
                                   1397 ;-----------------------------
      001C7D                       1398 let::
      001C7D CD 17 BD         [ 4] 1399 	call next_token 
      001C80 A1 85            [ 1] 1400 	cp a,#TK_VAR 
      001C82 27 0C            [ 1] 1401 	jreq let_var
      001C84 A1 05            [ 1] 1402 	cp a,#TK_ARRAY 
      001C86 27 03            [ 1] 1403 	jreq  let_array
      001C88 CC 16 BC         [ 2] 1404 	jp syntax_error
      001C8B                       1405 let_array:
      001C8B CD 19 97         [ 4] 1406 	call get_array_element
      001C8E 20 03            [ 2] 1407 	jra let_eval 
      001C90                       1408 let_var:
      001C90 CD 17 F2         [ 4] 1409 	call get_addr
      001C93                       1410 let_eval:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001C93 CF 00 19         [ 2] 1411 	ldw ptr16,x  ; variable address 
      001C96 CD 17 BD         [ 4] 1412 	call next_token 
      001C99 A1 32            [ 1] 1413 	cp a,#TK_EQUAL
      001C9B 27 03            [ 1] 1414 	jreq 1$
      001C9D CC 16 BC         [ 2] 1415 	jp syntax_error
      001CA0                       1416 1$:	
      001CA0 CD 1B AB         [ 4] 1417 	call condition   
      001CA3 A1 84            [ 1] 1418 	cp a,#TK_INTGR 
      001CA5 27 03            [ 1] 1419 	jreq 2$
      001CA7 CC 16 BC         [ 2] 1420 	jp syntax_error
      001CAA                       1421 2$:	
      001CAA                       1422 	_xpop ; value 
      001CAA 90 F6            [ 1]    1     ld a,(y)
      001CAC 93               [ 1]    2     ldw x,y 
      001CAD EE 01            [ 2]    3     ldw x,(1,x)
      001CAF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001CB3                       1423 3$:
      001CB3 72 C7 00 19      [ 4] 1424 	ld [ptr16],a
      001CB7 72 5C 00 1A      [ 1] 1425 	inc ptr8  
      001CBB 72 CF 00 19      [ 5] 1426 	ldw [ptr16],x 
      001CBF 81               [ 4] 1427 	ret 
                                   1428 
                                   1429 
                                   1430 ;--------------------------
                                   1431 ; return constant value 
                                   1432 ; from it's record address
                                   1433 ; input:
                                   1434 ;	X	*const record 
                                   1435 ; output:
                                   1436 ;   A:X   const  value
                                   1437 ;--------------------------
      001CC0                       1438 get_const_value: ; -- i 
      001CC0 F6               [ 1] 1439 	ld a,(x) ; record size 
      001CC1 A0 03            [ 1] 1440 	sub a,#3 ; * value 
      001CC3 88               [ 1] 1441 	push a 
      001CC4 4B 00            [ 1] 1442 	push #0 
      001CC6 72 FB 01         [ 2] 1443 	addw x,(1,sp)
      001CC9 F6               [ 1] 1444 	ld a,(x)
      001CCA EE 01            [ 2] 1445 	ldw x,(1,x)
      001CCC                       1446 	_drop 2
      001CCC 5B 02            [ 2]    1     addw sp,#2 
      001CCE 81               [ 4] 1447 	ret 
                                   1448 
                                   1449 
                                   1450 ;--------------------------
                                   1451 ; list constants in EEPROM 
                                   1452 ; call when using LIST \C 
                                   1453 ;-------------------------
                           000001  1454 	COUNT=1
                           000003  1455 	YTEMP=3
                           000004  1456 	VSIZE=4 
      001CCF                       1457 list_const:
      001CCF 90 89            [ 2] 1458 	pushw y 
      001CD1                       1459 	_vars 4 
      001CD1 52 04            [ 2]    1     sub sp,#4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001CD3 5F               [ 1] 1460 	clrw x 
      001CD4 1F 01            [ 2] 1461 	ldw (COUNT,sp),x  
      001CD6 90 AE 40 00      [ 2] 1462 	ldw Y,#EEPROM_BASE 
      001CDA 90 C3 00 24      [ 2] 1463 1$:	cpw y,free_eeprom 
      001CDE 24 35            [ 1] 1464 	jruge 9$
      001CE0 17 03            [ 2] 1465     ldw (YTEMP,sp),y 
      001CE2 93               [ 1] 1466 	ldw x,y
      001CE3 5C               [ 1] 1467 	incw x 
      001CE4 CD 09 A1         [ 4] 1468 	call puts  
      001CE7 A6 3D            [ 1] 1469 	ld a,#'= 
      001CE9 CD 09 44         [ 4] 1470 	call putc 
      001CEC 1E 03            [ 2] 1471 	ldw x,(YTEMP,sp)
      001CEE CD 1C C0         [ 4] 1472 	call get_const_value 
      001CF1 C7 00 0C         [ 1] 1473 	ld acc24,a 
      001CF4 CF 00 0D         [ 2] 1474 	ldw acc16,x 
      001CF7 CD 18 29         [ 4] 1475 	call prt_acc24
      001CFA A6 0D            [ 1] 1476 	ld a,#CR 
      001CFC CD 09 44         [ 4] 1477 	call putc 
      001CFF 1E 01            [ 2] 1478 	ldw x,(COUNT,sp)
      001D01 5C               [ 1] 1479 	incw x 
      001D02 1F 01            [ 2] 1480 	ldw (COUNT,sp),x 
      001D04 72 5F 00 0D      [ 1] 1481 	clr acc16 
      001D08 16 03            [ 2] 1482 	ldw y,(YTEMP,sp)
      001D0A 90 F6            [ 1] 1483 	ld a,(y)
      001D0C C7 00 0E         [ 1] 1484 	ld acc8,a
      001D0F 72 B9 00 0D      [ 2] 1485 	addw y,acc16 
      001D13 20 C5            [ 2] 1486 	jra 1$ 
      001D15                       1487 9$:	
      001D15 1E 01            [ 2] 1488 	ldw x,(COUNT,sp)
      001D17 CD 18 12         [ 4] 1489 	call prt_i16 
      001D1A AE 1D 25         [ 2] 1490 	ldw x,#CONST_COUNT 
      001D1D CD 09 A1         [ 4] 1491 	call puts 
      001D20                       1492 	_drop VSIZE 
      001D20 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D22 90 85            [ 2] 1493 	popw y 
      001D24 81               [ 4] 1494 	ret 
                                   1495 
      001D25 20 63 6F 6E 73 74 61  1496 CONST_COUNT: .asciz " constants in EEPROM\n"
             6E 74 73 20 69 6E 20
             45 45 50 52 4F 4D 0A
             00
                                   1497 
                                   1498 
                                   1499 ;--------------------------
                                   1500 ; BASIC: EEFREE 
                                   1501 ; eeprom_free 
                                   1502 ; search end of data  
                                   1503 ; in EEPROM 
                                   1504 ; input:
                                   1505 ;    none 
                                   1506 ; output:
                                   1507 ;    A:X     address free
                                   1508 ;-------------------------
      001D3B                       1509 func_eefree:
      001D3B AE 40 00         [ 2] 1510 	ldw x,#EEPROM_BASE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001D3E 35 08 00 0E      [ 1] 1511 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001D42 A3 47 F8         [ 2] 1512     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D45 24 17            [ 1] 1513 	jruge 8$ ; no free space 
      001D47 F6               [ 1] 1514 2$: ld a,(x)
      001D48 26 0C            [ 1] 1515 	jrne 3$
      001D4A 5C               [ 1] 1516 	incw x 
      001D4B 72 5A 00 0E      [ 1] 1517 	dec acc8 
      001D4F 26 F6            [ 1] 1518 	jrne 2$
      001D51 1D 00 08         [ 2] 1519 	subw x,#8 
      001D54 20 09            [ 2] 1520 	jra 9$  
      001D56 F6               [ 1] 1521 3$: ld a,(x)
      001D57 5C               [ 1] 1522 	incw x
      001D58 4D               [ 1] 1523 	tnz a  
      001D59 26 FB            [ 1] 1524 	jrne 3$
      001D5B 5A               [ 2] 1525 	decw x   
      001D5C 20 E0            [ 2] 1526 	jra 1$ 
      001D5E 5F               [ 1] 1527 8$: clrw x ; no free space 
      001D5F 4F               [ 1] 1528 9$: clr a 
      001D60 CF 00 24         [ 2] 1529 	ldw free_eeprom,x ; save in system variable 
      001D63 81               [ 4] 1530 	ret 
                                   1531 
                           000005  1532 CONST_REC_XTRA_BYTES=5 
                                   1533 ;--------------------------
                                   1534 ; search constant name 
                                   1535 ; format of constant record  
                                   1536 ;   .byte record length 
                                   1537 ;         = strlen(name)+5 
                                   1538 ;   .asciz name (variable length)
                                   1539 ;   .int24 value (3 bytes )
                                   1540 ; a constant record use 7+ bytes
                                   1541 ; constants are saved in EEPROM  
                                   1542 ; input:
                                   1543 ;    X     *name
                                   1544 ; output:
                                   1545 ;    X     address|0
                                   1546 ; use:
                                   1547 ;   A,Y, acc16 
                                   1548 ;-------------------------
                           000001  1549 	NAMEPTR=1 ; target name pointer 
                           000003  1550 	EEPTR=3   ; walking pointer in EEPROM
                           000005  1551 	RECLEN=5  ; record length of target
                           000005  1552 	VSIZE=5
      001D64                       1553 search_const:
      001D64 90 89            [ 2] 1554 	pushw y 
      001D66                       1555 	_vars VSIZE
      001D66 52 05            [ 2]    1     sub sp,#VSIZE 
      001D68 72 5F 00 0D      [ 1] 1556 	clr acc16 
      001D6C CD 14 00         [ 4] 1557 	call strlen 
      001D6F AB 05            [ 1] 1558 	add a,#CONST_REC_XTRA_BYTES
      001D71 6B 05            [ 1] 1559 	ld (RECLEN,sp),a    
      001D73 1F 01            [ 2] 1560 	ldw (NAMEPTR,sp),x
      001D75 90 AE 40 00      [ 2] 1561 	ldw y,#EEPROM_BASE 
      001D79 1E 01            [ 2] 1562 1$:	ldw x,(NAMEPTR,sp)
      001D7B 17 03            [ 2] 1563 	ldw (EEPTR,sp),y
      001D7D 90 C3 00 24      [ 2] 1564 	cpw y, free_eeprom 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001D81 24 1A            [ 1] 1565 	jruge 7$ ; no match found 
      001D83 90 F6            [ 1] 1566 	ld a,(y)
      001D85 11 05            [ 1] 1567 	cp a,(RECLEN,sp)
      001D87 26 07            [ 1] 1568 	jrne 2$ 
      001D89 90 5C            [ 1] 1569 	incw y 
      001D8B CD 14 0B         [ 4] 1570 	call strcmp
      001D8E 26 11            [ 1] 1571 	jrne 8$ ; match found 
      001D90                       1572 2$: ; skip this one 	
      001D90 16 03            [ 2] 1573 	ldW Y,(EEPTR,sp)
      001D92 90 F6            [ 1] 1574 	ld a,(y)
      001D94 C7 00 0E         [ 1] 1575 	ld acc8,a 
      001D97 72 B9 00 0D      [ 2] 1576 	addw y,acc16 
      001D9B 20 DC            [ 2] 1577 	jra 1$  
      001D9D                       1578 7$: ; no match found 
      001D9D 0F 03            [ 1] 1579 	clr (EEPTR,sp)
      001D9F 0F 04            [ 1] 1580 	clr (EEPTR+1,sp)
      001DA1                       1581 8$: ; match found 
      001DA1 1E 03            [ 2] 1582 	ldw x,(EEPTR,sp) ; record address 
      001DA3                       1583 9$:	_DROP VSIZE
      001DA3 5B 05            [ 2]    1     addw sp,#VSIZE 
      001DA5 90 85            [ 2] 1584 	 popw y 
      001DA7 81               [ 4] 1585 	 ret 
                                   1586 
                                   1587 
                                   1588 ;--------------------------------------------
                                   1589 ; BASIC: CONST name=value [, name=value]*
                                   1590 ; define constant(s) saved in EEPROM
                                   1591 ;--------------------------------------------
                           000001  1592 	CNAME=1 
                           000003  1593 	BUFPTR=3
                           000005  1594 	RECLEN=5
                           000006  1595 	UPDATE=6
                           000007  1596 	YSAVE=7
                           000008  1597 	VSIZE=8 
      001DA8                       1598 cmd_const:
      001DA8 90 89            [ 2] 1599 	pushw y 
      001DAA                       1600 	_vars VSIZE 
      001DAA 52 08            [ 2]    1     sub sp,#VSIZE 
      001DAC 0F 06            [ 1] 1601 	clr (UPDATE,sp)
      001DAE CD 17 BD         [ 4] 1602 	call next_token 
      001DB1 A1 04            [ 1] 1603 	cp a,#TK_CHAR 
      001DB3 26 0D            [ 1] 1604 	jrne 0$
      001DB5 CD 18 0C         [ 4] 1605 	call get_char 
      001DB8 A4 DF            [ 1] 1606 	and a,#0xDF 
      001DBA A1 55            [ 1] 1607 	cp a,#'U 
      001DBC 26 08            [ 1] 1608 	jrne 1$
      001DBE 03 06            [ 1] 1609 	cpl (UPDATE,sp)
      001DC0 20 07            [ 2] 1610 	jra const_loop 
      001DC2 A1 03            [ 1] 1611 0$: cp a,#TK_LABEL 
      001DC4 27 08            [ 1] 1612 	jreq cloop_1
      001DC6 CC 16 BC         [ 2] 1613 1$: jp syntax_error
      001DC9                       1614 const_loop: 
      001DC9 A6 03            [ 1] 1615 	ld a,#TK_LABEL 
      001DCB CD 19 69         [ 4] 1616 	call expect  
      001DCE                       1617 cloop_1: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001DCE 1F 01            [ 2] 1618 	ldw (CNAME,sp),x ; *const_name
      001DD0 CD 17 E3         [ 4] 1619 	call skip_string
      001DD3 1E 01            [ 2] 1620 	ldw x,(CNAME,sp)
      001DD5 CD 14 00         [ 4] 1621 	call strlen  
      001DD8 AB 05            [ 1] 1622 	add a,#CONST_REC_XTRA_BYTES 
      001DDA 6B 05            [ 1] 1623 	ld (RECLEN,sp),a 
                                   1624 ; copy name in buffer  
      001DDC 16 01            [ 2] 1625 	ldw y,(CNAME,sp) 
      001DDE AE 16 68         [ 2] 1626 	ldw x,#tib  
      001DE1 7B 05            [ 1] 1627 	ld a,(RECLEN,sp)
      001DE3 F7               [ 1] 1628 	ld (x),a 
      001DE4 5C               [ 1] 1629 	incw x  
      001DE5 CD 14 1C         [ 4] 1630 	call strcpy 
      001DE8 1F 03            [ 2] 1631 	ldw (BUFPTR,sp),x 
                                   1632 ; x not updated by strcpy 
                                   1633 ; BUFPTR must be incremented 
                                   1634 ; to point after name 
      001DEA 5F               [ 1] 1635 	clrw x 
      001DEB 7B 05            [ 1] 1636 	ld a,(RECLEN,sp)
      001DED A0 04            [ 1] 1637 	sub a,#CONST_REC_XTRA_BYTES-1
      001DEF 97               [ 1] 1638 	ld xl,a  
      001DF0 72 FB 03         [ 2] 1639 	addw x,(BUFPTR,sp)
      001DF3 1F 03            [ 2] 1640 	ldw (BUFPTR,sp),x 
      001DF5 A6 32            [ 1] 1641 	ld a,#TK_EQUAL 
      001DF7 CD 19 69         [ 4] 1642 	call expect 
      001DFA 16 07            [ 2] 1643 	ldw y,(YSAVE,sp) ; restore xstack pointer 
      001DFC CD 1A A6         [ 4] 1644 	call expression 
      001DFF A1 84            [ 1] 1645 	cp a,#TK_INTGR 
      001E01 27 03            [ 1] 1646 	jreq 5$ 
      001E03 CC 16 BC         [ 2] 1647 	jp syntax_error 
      001E06                       1648 5$:	_xpop 
      001E06 90 F6            [ 1]    1     ld a,(y)
      001E08 93               [ 1]    2     ldw x,y 
      001E09 EE 01            [ 2]    3     ldw x,(1,x)
      001E0B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E0F 17 07            [ 2] 1649 	ldw (YSAVE,sp),y ; save xtack pointer 
      001E11 16 03            [ 2] 1650 	ldw y,(BUFPTR,sp)
      001E13 90 F7            [ 1] 1651 	ld (y),a 
      001E15 90 EF 01         [ 2] 1652 	ldw (1,y),x 
                                   1653 ; record completed in buffer 
                                   1654 ; check if constant already exist 
                                   1655 ; if exist and \U option then update  
      001E18 72 5F 00 18      [ 1] 1656 	clr farptr 
      001E1C 1E 01            [ 2] 1657 	ldw x,(CNAME,sp)
      001E1E CD 1D 64         [ 4] 1658 	call search_const 
      001E21 5D               [ 2] 1659 	tnzw x 
      001E22 27 06            [ 1] 1660 	jreq 6$ ; new constant  
      001E24 0D 06            [ 1] 1661 	tnz (UPDATE,sp)
      001E26 27 1B            [ 1] 1662 	jreq 8$ 
      001E28 20 03            [ 2] 1663 	jra 7$	
      001E2A                       1664 6$:	
      001E2A CE 00 24         [ 2] 1665 	ldw x,free_eeprom  
      001E2D                       1666 7$:	
      001E2D CF 00 19         [ 2] 1667 	ldw farptr+1,x 
      001E30 AE 16 68         [ 2] 1668 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001E33 7B 05            [ 1] 1669 	ld a,(RECLEN,sp)
      001E35 CD 08 85         [ 4] 1670 	call write_nbytes
                                   1671 ; update free_eeprom 
      001E38 5F               [ 1] 1672 	clrw x 
      001E39 7B 05            [ 1] 1673 	ld a,(RECLEN,sp)
      001E3B 97               [ 1] 1674 	ld xl,a 
      001E3C 72 BB 00 24      [ 2] 1675 	addw x,free_eeprom 
      001E40 CF 00 24         [ 2] 1676 	ldw free_eeprom,x
      001E43                       1677 8$: ; check for next constant 
      001E43 CD 17 BD         [ 4] 1678 	call next_token 
      001E46 A1 08            [ 1] 1679 	cp a,#TK_COMMA 
      001E48 26 03            [ 1] 1680 	jrne 9$ ; no other constant 
      001E4A CC 1D C9         [ 2] 1681 	jp const_loop 
      001E4D                       1682 9$: 
      001E4D                       1683 	_unget_token    
      001E4D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E52                       1684 10$: 
      001E52                       1685 	_drop VSIZE 
      001E52 5B 08            [ 2]    1     addw sp,#VSIZE 
      001E54 90 85            [ 2] 1686 	popw y ; restore xstack pointer 
      001E56 81               [ 4] 1687 	ret 
                                   1688 
                                   1689 
                                   1690 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1691 ; return program size 
                                   1692 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E57                       1693 prog_size:
      001E57 CE 00 1D         [ 2] 1694 	ldw x,txtend 
      001E5A 72 B0 00 1B      [ 2] 1695 	subw x,txtbgn 
      001E5E 81               [ 4] 1696 	ret 
                                   1697 
                                   1698 ;----------------------------
                                   1699 ; print program information 
                                   1700 ;---------------------------
      001E5F                       1701 program_info: 
      001E5F AE 1E 9E         [ 2] 1702 	ldw x,#PROG_ADDR 
      001E62 CD 09 A1         [ 4] 1703 	call puts 
      001E65 CE 00 1B         [ 2] 1704 	ldw x,txtbgn 
      001E68 35 10 00 0A      [ 1] 1705 	mov base,#16 
      001E6C CD 18 12         [ 4] 1706 	call prt_i16
      001E6F 35 0A 00 0A      [ 1] 1707 	mov base,#10  
      001E73 AE 1E B0         [ 2] 1708 	ldw x,#PROG_SIZE
      001E76 CD 09 A1         [ 4] 1709 	call puts 
      001E79 CD 1E 57         [ 4] 1710 	call prog_size 
      001E7C CD 18 12         [ 4] 1711 	call prt_i16 
      001E7F AE 1E C1         [ 2] 1712 	ldw x,#STR_BYTES 
      001E82 CD 09 A1         [ 4] 1713 	call puts
      001E85 CE 00 1B         [ 2] 1714 	ldw x,txtbgn
      001E88 A3 36 04         [ 2] 1715 	cpw x,#app 
      001E8B 25 05            [ 1] 1716 	jrult 2$
      001E8D AE 1E C8         [ 2] 1717 	ldw x,#FLASH_MEM 
      001E90 20 03            [ 2] 1718 	jra 3$
      001E92 AE 1E D9         [ 2] 1719 2$: ldw x,#RAM_MEM 	 
      001E95 CD 09 A1         [ 4] 1720 3$:	call puts 
      001E98 A6 0D            [ 1] 1721 	ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001E9A CD 09 44         [ 4] 1722 	call putc
      001E9D 81               [ 4] 1723 	ret 
                                   1724 
      001E9E 70 72 6F 67 72 61 6D  1725 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001EB0 2C 20 70 72 6F 67 72  1726 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001EC1 20 62 79 74 65 73 00  1727 STR_BYTES: .asciz " bytes" 
      001EC8 20 69 6E 20 46 4C 41  1728 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001ED9 20 69 6E 20 52 41 4D  1729 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1730 
                                   1731 
                                   1732 ;----------------------------
                                   1733 ; BASIC: LIST [[start][,end]]
                                   1734 ; list program lines 
                                   1735 ; form start to end 
                                   1736 ; if empty argument list then 
                                   1737 ; list all.
                                   1738 ;----------------------------
                           000001  1739 	FIRST=1
                           000003  1740 	LAST=3 
                           000005  1741 	LN_PTR=5
                           000006  1742 	VSIZE=6 
      001EE8                       1743 list:
      001EE8 72 01 00 22 05   [ 2] 1744 	btjf flags,#FRUN,0$
      001EED A6 07            [ 1] 1745 	ld a,#ERR_CMD_ONLY
      001EEF CC 16 BE         [ 2] 1746 	jp tb_error
      001EF2                       1747 0$:	 
      001EF2 CD 17 BD         [ 4] 1748 	call next_token 
      001EF5 A1 04            [ 1] 1749 	cp a,#TK_CHAR 
      001EF7 26 10            [ 1] 1750 	jrne 2$
      001EF9 CD 18 0C         [ 4] 1751 	call get_char 
      001EFC A4 DF            [ 1] 1752 	and a,#0xDF 
      001EFE A1 43            [ 1] 1753 	cp a,#'C 
      001F00 26 04            [ 1] 1754 	jrne 1$
      001F02 CD 1C CF         [ 4] 1755 	call list_const
      001F05 81               [ 4] 1756 	ret 
      001F06 CC 16 BC         [ 2] 1757 1$: jp syntax_error 
      001F09                       1758 2$:	_unget_token 
      001F09 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001F0E CD 1E 57         [ 4] 1759 	call prog_size 
      001F11 22 01            [ 1] 1760 	jrugt 3$
      001F13 81               [ 4] 1761 	ret 
      001F14                       1762 3$: _vars VSIZE
      001F14 52 06            [ 2]    1     sub sp,#VSIZE 
      001F16 CE 00 1B         [ 2] 1763 	ldw x,txtbgn 
      001F19 1F 05            [ 2] 1764 	ldw (LN_PTR,sp),x 
      001F1B FE               [ 2] 1765 	ldw x,(x) 
      001F1C 1F 01            [ 2] 1766 	ldw (FIRST,sp),x ; list from first line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      001F1E AE 7F FF         [ 2] 1767 	ldw x,#MAX_LINENO ; biggest line number 
      001F21 1F 03            [ 2] 1768 	ldw (LAST,sp),x 
      001F23 CD 19 7B         [ 4] 1769 	call arg_list
      001F26 4D               [ 1] 1770 	tnz a
      001F27 27 31            [ 1] 1771 	jreq list_loop 
      001F29 A1 02            [ 1] 1772 	cp a,#2 
      001F2B 27 07            [ 1] 1773 	jreq 4$
      001F2D A1 01            [ 1] 1774 	cp a,#1 
      001F2F 27 06            [ 1] 1775 	jreq first_line 
      001F31 CC 16 BC         [ 2] 1776 	jp syntax_error 
      001F34 85               [ 2] 1777 4$:	popw x 
      001F35 1F 05            [ 2] 1778 	ldw (LAST+2,sp),x 
      001F37                       1779 first_line:
      001F37 85               [ 2] 1780 	popw x
      001F38 1F 01            [ 2] 1781 	ldw (FIRST,sp),x 
      001F3A                       1782 lines_skip:
      001F3A CE 00 1B         [ 2] 1783 	ldw x,txtbgn
      001F3D 1F 05            [ 2] 1784 2$:	ldw (LN_PTR,sp),x 
      001F3F C3 00 1D         [ 2] 1785 	cpw x,txtend 
      001F42 2A 38            [ 1] 1786 	jrpl list_exit 
      001F44 FE               [ 2] 1787 	ldw x,(x) ;line# 
      001F45 13 01            [ 2] 1788 	cpw x,(FIRST,sp)
      001F47 2A 11            [ 1] 1789 	jrpl list_loop 
      001F49 1E 05            [ 2] 1790 	ldw x,(LN_PTR,sp) 
      001F4B E6 02            [ 1] 1791 	ld a,(2,x)
      001F4D C7 00 0E         [ 1] 1792 	ld acc8,a 
      001F50 72 5F 00 0D      [ 1] 1793 	clr acc16 
      001F54 72 BB 00 0D      [ 2] 1794 	addw x,acc16
      001F58 20 E3            [ 2] 1795 	jra 2$ 
                                   1796 ; print loop
      001F5A                       1797 list_loop:
      001F5A 1E 05            [ 2] 1798 	ldw x,(LN_PTR,sp)
      001F5C E6 02            [ 1] 1799 	ld a,(2,x) 
      001F5E CD 1F D1         [ 4] 1800 	call prt_basic_line
      001F61 1E 05            [ 2] 1801 	ldw x,(LN_PTR,sp)
      001F63 E6 02            [ 1] 1802 	ld a,(2,x)
      001F65 C7 00 0E         [ 1] 1803 	ld acc8,a 
      001F68 72 5F 00 0D      [ 1] 1804 	clr acc16 
      001F6C 72 BB 00 0D      [ 2] 1805 	addw x,acc16
      001F70 C3 00 1D         [ 2] 1806 	cpw x,txtend 
      001F73 2A 07            [ 1] 1807 	jrpl list_exit
      001F75 1F 05            [ 2] 1808 	ldw (LN_PTR,sp),x
      001F77 FE               [ 2] 1809 	ldw x,(x)
      001F78 13 03            [ 2] 1810 	cpw x,(LAST,sp)  
      001F7A 2F DE            [ 1] 1811 	jrslt list_loop
      001F7C                       1812 list_exit:
      001F7C 55 00 03 00 01   [ 1] 1813 	mov in,count 
      001F81 AE 16 B8         [ 2] 1814 	ldw x,#pad 
      001F84 CF 00 04         [ 2] 1815 	ldw basicptr,x 
      001F87                       1816 	_drop VSIZE 
      001F87 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F89 CD 1E 5F         [ 4] 1817 	call program_info 
      001F8C 81               [ 4] 1818 	ret
                                   1819 
                                   1820 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                   1821 ;--------------------------
                                   1822 ; BASIC: EDIT 
                                   1823 ;  copy program in FLASH 
                                   1824 ;  to RAM for edition 
                                   1825 ;-------------------------
      001F8D                       1826 edit:
      001F8D CD 27 B1         [ 4] 1827 	call qsign 
      001F90 27 07            [ 1] 1828 	jreq 1$ 
      001F92 AE 1F BA         [ 2] 1829 	ldw x,#NOT_SAVED 
      001F95 CD 09 A1         [ 4] 1830 	call puts 
      001F98 81               [ 4] 1831 	ret 
      001F99                       1832 1$: 
      001F99 90 AE 36 00      [ 2] 1833 	ldw y,#app_sign ; source address 
      001F9D CE 36 02         [ 2] 1834     ldw x,app_size  
      001FA0 1C 00 04         [ 2] 1835 	addw x,#4 
      001FA3 CF 00 0D         [ 2] 1836 	ldw acc16,x  ; bytes to copy 
      001FA6 AE 00 7C         [ 2] 1837 	ldw x,#rsign ; destination address 
      001FA9 CD 14 2C         [ 4] 1838 	call move  
      001FAC AE 00 80         [ 2] 1839 	ldw x,#free_ram 
      001FAF CF 00 1B         [ 2] 1840 	ldw txtbgn,x 
      001FB2 72 BB 00 7E      [ 2] 1841 	addw x,rsize  
      001FB6 CF 00 1D         [ 2] 1842 	ldw txtend,x 
      001FB9 81               [ 4] 1843 	ret 
                                   1844 
      001FBA 4E 6F 20 61 70 70 6C  1845 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1846 
                                   1847 
                                   1848 ;--------------------------
                                   1849 ; decompile line from token list
                                   1850 ; and print it. 
                                   1851 ; input:
                                   1852 ;   A       stop at this position 
                                   1853 ;   X 		pointer at line
                                   1854 ; output:
                                   1855 ;   none 
                                   1856 ;--------------------------	
      001FD1                       1857 prt_basic_line:
      001FD1 90 89            [ 2] 1858 	pushw y 
      001FD3 C7 00 03         [ 1] 1859 	ld count,a 
      001FD6 E6 02            [ 1] 1860 	ld a,(2,x)
      001FD8 C1 00 03         [ 1] 1861 	cp a,count 
      001FDB 2A 03            [ 1] 1862 	jrpl 1$ 
      001FDD C7 00 03         [ 1] 1863 	ld count,a 
      001FE0 CF 00 04         [ 2] 1864 1$:	ldw basicptr,x 
      001FE3 90 AE 16 68      [ 2] 1865 	ldw y,#tib  
      001FE7 CD 12 16         [ 4] 1866 	call decompile 
      001FEA CD 09 A1         [ 4] 1867 	call puts 
      001FED A6 0D            [ 1] 1868 	ld a,#CR 
      001FEF CD 09 44         [ 4] 1869 	call putc 
      001FF2 90 85            [ 2] 1870 	popw y 
      001FF4 81               [ 4] 1871 	ret 
                                   1872 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                   1873 
                                   1874 ;---------------------------------
                                   1875 ; BASIC: PRINT|? arg_list 
                                   1876 ; print values from argument list
                                   1877 ;----------------------------------
                           000001  1878 	CCOMMA=1
                           000001  1879 	VSIZE=1
      001FF5                       1880 print:
      001FF5                       1881 	_vars VSIZE 
      001FF5 52 01            [ 2]    1     sub sp,#VSIZE 
      001FF7                       1882 reset_comma:
      001FF7 0F 01            [ 1] 1883 	clr (CCOMMA,sp)
      001FF9                       1884 prt_loop:
      001FF9 CD 17 BD         [ 4] 1885 	call next_token
      001FFC A1 02            [ 1] 1886 	cp a,#CMD_END 
      001FFE 25 08            [ 1] 1887 	jrult 0$
      002000 A1 0A            [ 1] 1888 	cp a,#TK_COLON 
      002002 27 04            [ 1] 1889 	jreq 0$
      002004 A1 80            [ 1] 1890 	cp a,#TK_CMD
      002006 26 07            [ 1] 1891 	jrne 10$
      002008                       1892 0$:
      002008                       1893 	_unget_token 
      002008 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00200D 20 5D            [ 2] 1894 	jra 8$ 
      00200F                       1895 10$:	
      00200F A1 02            [ 1] 1896 	cp a,#TK_QSTR
      002011 27 12            [ 1] 1897 	jreq 1$
      002013 A1 04            [ 1] 1898 	cp a,#TK_CHAR 
      002015 27 1B            [ 1] 1899 	jreq 2$ 
      002017 A1 82            [ 1] 1900 	cp a,#TK_CFUNC 
      002019 27 1F            [ 1] 1901 	jreq 3$
      00201B A1 08            [ 1] 1902 	cp a,#TK_COMMA 
      00201D 27 24            [ 1] 1903 	jreq 4$
      00201F A1 09            [ 1] 1904 	cp a,#TK_SHARP 
      002021 27 24            [ 1] 1905 	jreq 5$
      002023 20 37            [ 2] 1906 	jra 7$ 
      002025                       1907 1$:	; print string 
      002025 CD 09 A1         [ 4] 1908 	call puts
      002028 5C               [ 1] 1909 	incw x
      002029 72 B0 00 04      [ 2] 1910 	subw x,basicptr 
      00202D CF 00 00         [ 2] 1911 	ldw in.w,x  
      002030 20 C5            [ 2] 1912 	jra reset_comma
      002032                       1913 2$:	; print character 
      002032 CD 18 0C         [ 4] 1914 	call get_char 
      002035 CD 09 44         [ 4] 1915 	call putc 
      002038 20 BD            [ 2] 1916 	jra reset_comma 
      00203A                       1917 3$: ; print character function value  	
      00203A CD 17 D6         [ 4] 1918 	call get_code_addr 
      00203D FD               [ 4] 1919 	call (x)
      00203E CD 09 44         [ 4] 1920 	call putc
      002041 20 B4            [ 2] 1921 	jra reset_comma 
      002043                       1922 4$: ; set comma state 
      002043 03 01            [ 1] 1923 	cpl (CCOMMA,sp)
      002045 20 B2            [ 2] 1924 	jra prt_loop   
      002047                       1925 5$: ; # character must be followed by an integer   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002047 CD 17 BD         [ 4] 1926 	call next_token
      00204A A1 84            [ 1] 1927 	cp a,#TK_INTGR 
      00204C 27 03            [ 1] 1928 	jreq 6$
      00204E CC 16 BC         [ 2] 1929 	jp syntax_error 
      002051                       1930 6$: ; set tab width
      002051 CD 17 FC         [ 4] 1931 	call get_int24 
      002054 9F               [ 1] 1932 	ld a,xl 
      002055 A4 0F            [ 1] 1933 	and a,#15 
      002057 C7 00 23         [ 1] 1934 	ld tab_width,a 
      00205A 20 9B            [ 2] 1935 	jra reset_comma 
      00205C                       1936 7$:	
      00205C                       1937 	_unget_token 
      00205C 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002061 CD 1B AB         [ 4] 1938 	call condition
      002064 4D               [ 1] 1939 	tnz a 
      002065 27 05            [ 1] 1940 	jreq 8$    
      002067 CD 18 37         [ 4] 1941     call print_top
      00206A 20 8B            [ 2] 1942 	jra reset_comma 
      00206C                       1943 8$:
      00206C 0D 01            [ 1] 1944 	tnz (CCOMMA,sp)
      00206E 26 05            [ 1] 1945 	jrne 9$
      002070 A6 0D            [ 1] 1946 	ld a,#CR 
      002072 CD 09 44         [ 4] 1947     call putc 
      002075                       1948 9$:	_drop VSIZE 
      002075 5B 01            [ 2]    1     addw sp,#VSIZE 
      002077 81               [ 4] 1949 	ret 
                                   1950 
                                   1951 ;----------------------
                                   1952 ; 'save_context' and
                                   1953 ; 'rest_context' must be 
                                   1954 ; called at the same 
                                   1955 ; call stack depth 
                                   1956 ; i.e. SP must have the 
                                   1957 ; save value at  
                                   1958 ; entry point of both 
                                   1959 ; routine. 
                                   1960 ;---------------------
                           000004  1961 	CTXT_SIZE=4 ; size of saved data 
                                   1962 ;--------------------
                                   1963 ; save current BASIC
                                   1964 ; interpreter context 
                                   1965 ; on stack 
                                   1966 ;--------------------
      002078                       1967 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      002078                       1968 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      002078                       1969 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      002078                       1970 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      002078                       1971 save_context:
      002078 CE 00 04         [ 2] 1972 	ldw x,basicptr 
      00207B 1F 03            [ 2] 1973 	ldw (BPTR,sp),x
      00207D C6 00 01         [ 1] 1974 	ld a,in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002080 6B 05            [ 1] 1975 	ld (IN,sp),a
      002082 C6 00 03         [ 1] 1976 	ld a,count 
      002085 6B 06            [ 1] 1977 	ld (CNT,sp),a  
      002087 81               [ 4] 1978 	ret
                                   1979 
                                   1980 ;-----------------------
                                   1981 ; restore previously saved 
                                   1982 ; BASIC interpreter context 
                                   1983 ; from stack 
                                   1984 ;-------------------------
      002088                       1985 rest_context:
      002088 1E 03            [ 2] 1986 	ldw x,(BPTR,sp)
      00208A CF 00 04         [ 2] 1987 	ldw basicptr,x 
      00208D 7B 05            [ 1] 1988 	ld a,(IN,sp)
      00208F C7 00 01         [ 1] 1989 	ld in,a
      002092 7B 06            [ 1] 1990 	ld a,(CNT,sp)
      002094 C7 00 03         [ 1] 1991 	ld count,a  
      002097 81               [ 4] 1992 	ret
                                   1993 
                                   1994 
                                   1995 
                                   1996 ;------------------------------------------
                                   1997 ; BASIC: INPUT [string]var[,[string]var]
                                   1998 ; input value in variables 
                                   1999 ; [string] optionally can be used as prompt 
                                   2000 ;-----------------------------------------
                           000001  2001 	CX_BPTR=1
                           000003  2002 	CX_IN=3
                           000004  2003 	CX_CNT=4
                           000005  2004 	SKIP=5
                           000005  2005 	VSIZE=5
      002098                       2006 input_var:
      002098 90 89            [ 2] 2007 	pushw y 
      00209A                       2008 	_vars VSIZE 
      00209A 52 05            [ 2]    1     sub sp,#VSIZE 
      00209C                       2009 input_loop:
      00209C 0F 05            [ 1] 2010 	clr (SKIP,sp)
      00209E CD 17 BD         [ 4] 2011 	call next_token 
      0020A1 A1 02            [ 1] 2012 	cp a,#TK_QSTR 
      0020A3 26 10            [ 1] 2013 	jrne 1$ 
      0020A5 CD 09 A1         [ 4] 2014 	call puts 
      0020A8 5C               [ 1] 2015 	incw x 
      0020A9 72 B0 00 04      [ 2] 2016 	subw x,basicptr 
      0020AD CF 00 00         [ 2] 2017 	ldw in.w,x 
      0020B0 03 05            [ 1] 2018 	cpl (SKIP,sp)
      0020B2 CD 17 BD         [ 4] 2019 	call next_token 
      0020B5 A1 85            [ 1] 2020 1$: cp a,#TK_VAR  
      0020B7 27 03            [ 1] 2021 	jreq 2$ 
      0020B9 CC 16 BC         [ 2] 2022 	jp syntax_error
      0020BC CD 17 F2         [ 4] 2023 2$:	call get_addr
      0020BF CF 00 19         [ 2] 2024 	ldw ptr16,x 
      0020C2 0D 05            [ 1] 2025 	tnz (SKIP,sp)
      0020C4 26 06            [ 1] 2026 	jrne 21$ 
      0020C6 CD 11 EB         [ 4] 2027 	call var_name 
      0020C9 CD 09 44         [ 4] 2028 	call putc   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      0020CC                       2029 21$:
      0020CC A6 3A            [ 1] 2030 	ld a,#':
      0020CE CD 09 44         [ 4] 2031 	call putc 
      0020D1 CD 20 78         [ 4] 2032 	call save_context 
      0020D4 72 5F 00 03      [ 1] 2033 	clr count  
      0020D8 CD 0A A6         [ 4] 2034 	call readln 
      0020DB AE 16 68         [ 2] 2035 	ldw x,#tib 
      0020DE 3B 00 03         [ 1] 2036 	push count
      0020E1 4B 00            [ 1] 2037 	push #0 
      0020E3 72 FB 01         [ 2] 2038 	addw x,(1,sp)
      0020E6 5C               [ 1] 2039 	incw x 
      0020E7                       2040 	_drop 2 
      0020E7 5B 02            [ 2]    1     addw sp,#2 
      0020E9 72 5F 00 01      [ 1] 2041 	clr in 
      0020ED CD 0F 2A         [ 4] 2042 	call get_token
      0020F0 A1 84            [ 1] 2043 	cp a,#TK_INTGR
      0020F2 27 12            [ 1] 2044 	jreq 3$ 
      0020F4 A1 11            [ 1] 2045 	cp a,#TK_MINUS
      0020F6 CD 0F 2A         [ 4] 2046 	call get_token 
      0020F9 A1 84            [ 1] 2047 	cp a,#TK_INTGR 
      0020FB 27 06            [ 1] 2048 	jreq 22$
      0020FD CD 20 88         [ 4] 2049 	call rest_context 
      002100 CC 16 BC         [ 2] 2050 	jp syntax_error
      002103                       2051 22$:
      002103 CD 02 0D         [ 4] 2052 	call neg_acc24	
      002106                       2053 3$: 
      002106 C6 00 0C         [ 1] 2054 	ld a,acc24 
      002109 CE 00 0D         [ 2] 2055 	ldw x,acc16 
      00210C 72 C7 00 19      [ 4] 2056 	ld [ptr16],a
      002110 72 5C 00 1A      [ 1] 2057 	inc ptr8  
      002114 72 CF 00 19      [ 5] 2058 	ldw [ptr16],x 
      002118 CD 20 88         [ 4] 2059 	call rest_context
      00211B CD 17 BD         [ 4] 2060 	call next_token 
      00211E A1 08            [ 1] 2061 	cp a,#TK_COMMA
      002120 26 03            [ 1] 2062 	jrne 4$ 
      002122 CC 20 9C         [ 2] 2063 	jp input_loop
      002125                       2064 4$:
      002125 A1 00            [ 1] 2065 	cp a,#TK_NONE 
      002127 27 07            [ 1] 2066 	jreq input_exit  
      002129 A1 0A            [ 1] 2067 	cp a,#TK_COLON 
      00212B 27 03            [ 1] 2068     jreq input_exit 
      00212D CC 16 BC         [ 2] 2069 	jp syntax_error 
      002130                       2070 input_exit:
      002130                       2071 	_drop VSIZE 
      002130 5B 05            [ 2]    1     addw sp,#VSIZE 
      002132 90 85            [ 2] 2072 	popw y 
      002134 81               [ 4] 2073 	ret 
                                   2074 
                                   2075 
                                   2076 ;---------------------
                                   2077 ; BASIC: REM | ' 
                                   2078 ; skip comment to end of line 
                                   2079 ;---------------------- 
      002135                       2080 remark::
      002135 55 00 03 00 01   [ 1] 2081 	mov in,count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      00213A 81               [ 4] 2082  	ret 
                                   2083 
                                   2084 
                                   2085 ;---------------------
                                   2086 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2087 ; read in loop 'addr'  
                                   2088 ; apply & 'mask' to value 
                                   2089 ; loop while result==0.  
                                   2090 ; 'xor_mask' is used to 
                                   2091 ; invert the wait logic.
                                   2092 ; i.e. loop while not 0.
                                   2093 ;---------------------
                           000001  2094 	XMASK=1 
                           000002  2095 	MASK=2
                           000003  2096 	ADDR=3
                           000004  2097 	VSIZE=4
      00213B                       2098 wait: 
      00213B                       2099 	_vars VSIZE
      00213B 52 04            [ 2]    1     sub sp,#VSIZE 
      00213D 0F 01            [ 1] 2100 	clr (XMASK,sp) 
      00213F CD 19 7B         [ 4] 2101 	call arg_list 
      002142 A1 02            [ 1] 2102 	cp a,#2
      002144 24 03            [ 1] 2103 	jruge 0$
      002146 CC 16 BC         [ 2] 2104 	jp syntax_error 
      002149 A1 03            [ 1] 2105 0$:	cp a,#3
      00214B 25 0C            [ 1] 2106 	jrult 1$
      00214D                       2107 	_xpop  ; xor mask 
      00214D 90 F6            [ 1]    1     ld a,(y)
      00214F 93               [ 1]    2     ldw x,y 
      002150 EE 01            [ 2]    3     ldw x,(1,x)
      002152 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002156 9F               [ 1] 2108 	ld a,xl 
      002157 6B 01            [ 1] 2109 	ld (XMASK,sp),a 
      002159                       2110 1$: _xpop ; mask
      002159 90 F6            [ 1]    1     ld a,(y)
      00215B 93               [ 1]    2     ldw x,y 
      00215C EE 01            [ 2]    3     ldw x,(1,x)
      00215E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002162 9F               [ 1] 2111     ld a,xl  
      002163 6B 02            [ 1] 2112 	ld (MASK,sp),a 
      002165                       2113 	_xpop ; address 
      002165 90 F6            [ 1]    1     ld a,(y)
      002167 93               [ 1]    2     ldw x,y 
      002168 EE 01            [ 2]    3     ldw x,(1,x)
      00216A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00216E F6               [ 1] 2114 2$:	ld a,(x)
      00216F 14 02            [ 1] 2115 	and a,(MASK,sp)
      002171 18 01            [ 1] 2116 	xor a,(XMASK,sp)
      002173 27 F9            [ 1] 2117 	jreq 2$ 
      002175                       2118 	_drop VSIZE 
      002175 5B 04            [ 2]    1     addw sp,#VSIZE 
      002177 81               [ 4] 2119 	ret 
                                   2120 
                                   2121 ;---------------------
                                   2122 ; BASIC: BSET addr,mask
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                                   2123 ; set bits at 'addr' corresponding 
                                   2124 ; to those of 'mask' that are at 1.
                                   2125 ; arguments:
                                   2126 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2127 ;   mask        mask|addr
                                   2128 ; output:
                                   2129 ;	none 
                                   2130 ;--------------------------
      002178                       2131 bit_set:
      002178 CD 19 7B         [ 4] 2132 	call arg_list 
      00217B A1 02            [ 1] 2133 	cp a,#2	 
      00217D 27 03            [ 1] 2134 	jreq 1$ 
      00217F CC 16 BC         [ 2] 2135 	jp syntax_error
      002182                       2136 1$: 
      002182                       2137 	_xpop ; mask 
      002182 90 F6            [ 1]    1     ld a,(y)
      002184 93               [ 1]    2     ldw x,y 
      002185 EE 01            [ 2]    3     ldw x,(1,x)
      002187 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00218B 9F               [ 1] 2138 	ld a,xl
      00218C 88               [ 1] 2139 	push a  
      00218D                       2140 	_xpop ; addr  
      00218D 90 F6            [ 1]    1     ld a,(y)
      00218F 93               [ 1]    2     ldw x,y 
      002190 EE 01            [ 2]    3     ldw x,(1,x)
      002192 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002196 84               [ 1] 2141 	pop a 
      002197 FA               [ 1] 2142 	or a,(x)
      002198 F7               [ 1] 2143 	ld (x),a
      002199 81               [ 4] 2144 	ret 
                                   2145 
                                   2146 ;---------------------
                                   2147 ; BASIC: BRES addr,mask
                                   2148 ; reset bits at 'addr' corresponding 
                                   2149 ; to those of 'mask' that are at 1.
                                   2150 ; arguments:
                                   2151 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2152 ;   mask	    ~mask&*addr  
                                   2153 ; output:
                                   2154 ;	none 
                                   2155 ;--------------------------
      00219A                       2156 bit_reset:
      00219A CD 19 7B         [ 4] 2157 	call arg_list 
      00219D A1 02            [ 1] 2158 	cp a,#2  
      00219F 27 03            [ 1] 2159 	jreq 1$ 
      0021A1 CC 16 BC         [ 2] 2160 	jp syntax_error
      0021A4                       2161 1$: 
      0021A4                       2162 	_xpop ; mask 
      0021A4 90 F6            [ 1]    1     ld a,(y)
      0021A6 93               [ 1]    2     ldw x,y 
      0021A7 EE 01            [ 2]    3     ldw x,(1,x)
      0021A9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021AD 9F               [ 1] 2163 	ld a,xl 
      0021AE 43               [ 1] 2164 	cpl a
      0021AF 88               [ 1] 2165 	push a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      0021B0                       2166 	_xpop ; addr  
      0021B0 90 F6            [ 1]    1     ld a,(y)
      0021B2 93               [ 1]    2     ldw x,y 
      0021B3 EE 01            [ 2]    3     ldw x,(1,x)
      0021B5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021B9 84               [ 1] 2167 	pop a 
      0021BA F4               [ 1] 2168 	and a,(x)
      0021BB F7               [ 1] 2169 	ld (x),a 
      0021BC 81               [ 4] 2170 	ret 
                                   2171 
                                   2172 ;---------------------
                                   2173 ; BASIC: BTOGL addr,mask
                                   2174 ; toggle bits at 'addr' corresponding 
                                   2175 ; to those of 'mask' that are at 1.
                                   2176 ; arguments:
                                   2177 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2178 ;   mask	    mask^*addr  
                                   2179 ; output:
                                   2180 ;	none 
                                   2181 ;--------------------------
      0021BD                       2182 bit_toggle:
      0021BD CD 19 7B         [ 4] 2183 	call arg_list 
      0021C0 A1 02            [ 1] 2184 	cp a,#2 
      0021C2 27 03            [ 1] 2185 	jreq 1$ 
      0021C4 CC 16 BC         [ 2] 2186 	jp syntax_error
      0021C7                       2187 1$: _xpop ; mask 
      0021C7 90 F6            [ 1]    1     ld a,(y)
      0021C9 93               [ 1]    2     ldw x,y 
      0021CA EE 01            [ 2]    3     ldw x,(1,x)
      0021CC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021D0 9F               [ 1] 2188 	ld a,xl
      0021D1 88               [ 1] 2189 	push a 
      0021D2                       2190 	_xpop  ; addr  
      0021D2 90 F6            [ 1]    1     ld a,(y)
      0021D4 93               [ 1]    2     ldw x,y 
      0021D5 EE 01            [ 2]    3     ldw x,(1,x)
      0021D7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021DB 84               [ 1] 2191 	pop a 
      0021DC F8               [ 1] 2192 	xor a,(x)
      0021DD F7               [ 1] 2193 	ld (x),a 
      0021DE 81               [ 4] 2194 	ret 
                                   2195 
                                   2196 
                                   2197 ;---------------------
                                   2198 ; BASIC: BTEST(addr,bit)
                                   2199 ; return bit value at 'addr' 
                                   2200 ; bit is in range {0..7}.
                                   2201 ; arguments:
                                   2202 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2203 ;   bit 	    bit position {0..7}  
                                   2204 ; output:
                                   2205 ;	A:X       bit value  
                                   2206 ;--------------------------
      0021DF                       2207 bit_test:
      0021DF CD 19 76         [ 4] 2208 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0021E2 A1 02            [ 1] 2209 	cp a,#2
      0021E4 27 03            [ 1] 2210 	jreq 0$
      0021E6 CC 16 BC         [ 2] 2211 	jp syntax_error
      0021E9                       2212 0$:	
      0021E9                       2213 	_xpop 
      0021E9 90 F6            [ 1]    1     ld a,(y)
      0021EB 93               [ 1]    2     ldw x,y 
      0021EC EE 01            [ 2]    3     ldw x,(1,x)
      0021EE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021F2 9F               [ 1] 2214 	ld a,xl 
      0021F3 A4 07            [ 1] 2215 	and a,#7
      0021F5 88               [ 1] 2216 	push a   
      0021F6 A6 01            [ 1] 2217 	ld a,#1 
      0021F8 0D 01            [ 1] 2218 1$: tnz (1,sp)
      0021FA 27 05            [ 1] 2219 	jreq 2$
      0021FC 48               [ 1] 2220 	sll a 
      0021FD 0A 01            [ 1] 2221 	dec (1,sp)
      0021FF 20 F7            [ 2] 2222 	jra 1$
      002201 6B 01            [ 1] 2223 2$: ld (1,sp),a  
      002203                       2224 	_xpop ; address  
      002203 90 F6            [ 1]    1     ld a,(y)
      002205 93               [ 1]    2     ldw x,y 
      002206 EE 01            [ 2]    3     ldw x,(1,x)
      002208 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00220C 84               [ 1] 2225 	pop a 
      00220D F4               [ 1] 2226 	and a,(x)
      00220E 27 02            [ 1] 2227 	jreq 3$
      002210 A6 01            [ 1] 2228 	ld a,#1 
      002212 5F               [ 1] 2229 3$:	clrw x 
      002213 97               [ 1] 2230 	ld xl,a
      002214 4F               [ 1] 2231 	clr a  
      002215 81               [ 4] 2232 	ret
                                   2233 
                                   2234 ;--------------------
                                   2235 ; BASIC: POKE addr,byte
                                   2236 ; put a byte at addr 
                                   2237 ;--------------------
      002216                       2238 poke:
      002216 CD 19 7B         [ 4] 2239 	call arg_list 
      002219 A1 02            [ 1] 2240 	cp a,#2
      00221B 27 03            [ 1] 2241 	jreq 1$
      00221D CC 16 BC         [ 2] 2242 	jp syntax_error
      002220                       2243 1$:	
      002220                       2244 	_xpop ; byte   
      002220 90 F6            [ 1]    1     ld a,(y)
      002222 93               [ 1]    2     ldw x,y 
      002223 EE 01            [ 2]    3     ldw x,(1,x)
      002225 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002229 9F               [ 1] 2245     ld a,xl 
      00222A 88               [ 1] 2246 	push a 
      00222B                       2247 	_xpop ; address 
      00222B 90 F6            [ 1]    1     ld a,(y)
      00222D 93               [ 1]    2     ldw x,y 
      00222E EE 01            [ 2]    3     ldw x,(1,x)
      002230 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002234 84               [ 1] 2248 	pop a 
      002235 F7               [ 1] 2249 	ld (x),a 
      002236 81               [ 4] 2250 	ret 
                                   2251 
                                   2252 ;-----------------------
                                   2253 ; BASIC: PEEK(addr)
                                   2254 ; get the byte at addr 
                                   2255 ; input:
                                   2256 ;	none 
                                   2257 ; output:
                                   2258 ;	X 		value 
                                   2259 ;-----------------------
      002237                       2260 peek:
      002237 CD 19 76         [ 4] 2261 	call func_args
      00223A A1 01            [ 1] 2262 	cp a,#1 
      00223C 27 03            [ 1] 2263 	jreq 1$
      00223E CC 16 BC         [ 2] 2264 	jp syntax_error
      002241                       2265 1$: _xpop ; address  
      002241 90 F6            [ 1]    1     ld a,(y)
      002243 93               [ 1]    2     ldw x,y 
      002244 EE 01            [ 2]    3     ldw x,(1,x)
      002246 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00224A C7 00 18         [ 1] 2266 	ld farptr,a 
      00224D CF 00 19         [ 2] 2267 	ldw ptr16,x 
      002250 92 BC 00 18      [ 5] 2268 	ldf a,[farptr]
      002254 5F               [ 1] 2269 	clrw x 
      002255 97               [ 1] 2270 	ld xl,a 
      002256 4F               [ 1] 2271 	clr a 
      002257 81               [ 4] 2272 	ret 
                                   2273 
                                   2274 ;---------------------------
                                   2275 ; BASIC IF expr : instructions
                                   2276 ; evaluate expr and if true 
                                   2277 ; execute instructions on same line. 
                                   2278 ;----------------------------
      002258                       2279 if: 
      002258 CD 1B AB         [ 4] 2280 	call condition  
      00225B                       2281 	_xpop 
      00225B 90 F6            [ 1]    1     ld a,(y)
      00225D 93               [ 1]    2     ldw x,y 
      00225E EE 01            [ 2]    3     ldw x,(1,x)
      002260 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002264 4D               [ 1] 2282 	tnz  a  
      002265 26 0A            [ 1] 2283 	jrne 9$ 
                                   2284 ;skip to next line
      002267 55 00 03 00 01   [ 1] 2285 	mov in,count
      00226C                       2286 	_drop 2 
      00226C 5B 02            [ 2]    1     addw sp,#2 
      00226E CC 17 6F         [ 2] 2287 	jp next_line
      002271 81               [ 4] 2288 9$:	ret 
                                   2289 
                                   2290 ;------------------------
                                   2291 ; BASIC: FOR var=expr 
                                   2292 ; set variable to expression 
                                   2293 ; leave variable address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



                                   2294 ; on stack and set
                                   2295 ; FLOOP bit in 'flags'
                                   2296 ;-----------------
                           000001  2297 	RETL1=1 ; return address  
                           000003  2298 	FSTEP=3  ; variable increment int24
                           000006  2299 	LIMIT=6 ; loop limit, int24  
                           000009  2300 	CVAR=9   ; control variable 
                           00000B  2301 	INW=11   ;  in.w saved
                           00000D  2302 	BPTR=13 ; baseptr saved
                           00000D  2303 	VSIZE=13  
      002272                       2304 for: ; { -- var_addr }
      002272 85               [ 2] 2305 	popw x ; call return address 
      002273                       2306 	_vars VSIZE 
      002273 52 0D            [ 2]    1     sub sp,#VSIZE 
      002275 89               [ 2] 2307 	pushw x  ; RETL1 
      002276 A6 85            [ 1] 2308 	ld a,#TK_VAR 
      002278 CD 19 69         [ 4] 2309 	call expect
      00227B CD 17 F2         [ 4] 2310 	call get_addr
      00227E 1F 09            [ 2] 2311 	ldw (CVAR,sp),x  ; control variable 
      002280 CD 1C 93         [ 4] 2312 	call let_eval 
      002283 72 14 00 22      [ 1] 2313 	bset flags,#FLOOP 
      002287 CD 17 BD         [ 4] 2314 	call next_token 
      00228A A1 80            [ 1] 2315 	cp a,#TK_CMD 
      00228C 27 03            [ 1] 2316 	jreq 1$
      00228E CC 16 BC         [ 2] 2317 	jp syntax_error
      002291                       2318 1$:  
      002291 CD 17 D6         [ 4] 2319 	call get_code_addr
      002294 A3 22 9C         [ 2] 2320 	cpw x,#to   
      002297 27 03            [ 1] 2321 	jreq to
      002299 CC 16 BC         [ 2] 2322 	jp syntax_error 
                                   2323 
                                   2324 ;-----------------------------------
                                   2325 ; BASIC: TO expr 
                                   2326 ; second part of FOR loop initilization
                                   2327 ; leave limit on stack and set 
                                   2328 ; FTO bit in 'flags'
                                   2329 ;-----------------------------------
      00229C                       2330 to: ; { var_addr -- var_addr limit step }
      00229C 72 04 00 22 03   [ 2] 2331 	btjt flags,#FLOOP,1$
      0022A1 CC 16 BC         [ 2] 2332 	jp syntax_error
      0022A4 CD 1A A6         [ 4] 2333 1$: call expression   
      0022A7 A1 84            [ 1] 2334 	cp a,#TK_INTGR 
      0022A9 27 03            [ 1] 2335 	jreq 2$ 
      0022AB CC 16 BC         [ 2] 2336 	jp syntax_error
      0022AE                       2337 2$: _xpop
      0022AE 90 F6            [ 1]    1     ld a,(y)
      0022B0 93               [ 1]    2     ldw x,y 
      0022B1 EE 01            [ 2]    3     ldw x,(1,x)
      0022B3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022B7 6B 06            [ 1] 2338 	ld (LIMIT,sp),a 
      0022B9 1F 07            [ 2] 2339 	ldw (LIMIT+1,sp),x
      0022BB CD 17 BD         [ 4] 2340 	call next_token
      0022BE A1 00            [ 1] 2341 	cp a,#TK_NONE  
      0022C0 27 11            [ 1] 2342 	jreq 4$ 
      0022C2 A1 80            [ 1] 2343 	cp a,#TK_CMD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0022C4 26 08            [ 1] 2344 	jrne 3$
      0022C6 CD 17 D6         [ 4] 2345 	call get_code_addr
      0022C9 A3 22 DC         [ 2] 2346 	cpw x,#step 
      0022CC 27 0E            [ 1] 2347 	jreq step
      0022CE                       2348 3$:	
      0022CE                       2349 	_unget_token   	 
      0022CE 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0022D3                       2350 4$:	
      0022D3 0F 03            [ 1] 2351 	clr (FSTEP,sp) 
      0022D5 AE 00 01         [ 2] 2352 	ldw x,#1   ; default step  
      0022D8 1F 04            [ 2] 2353 	ldw (FSTEP+1,sp),x 
      0022DA 20 2F            [ 2] 2354 	jra store_loop_addr 
                                   2355 
                                   2356 
                                   2357 ;----------------------------------
                                   2358 ; BASIC: STEP expr 
                                   2359 ; optional third par of FOR loop
                                   2360 ; initialization. 	
                                   2361 ;------------------------------------
      0022DC                       2362 step: ; {var limit -- var limit step}
      0022DC 72 04 00 22 03   [ 2] 2363 	btjt flags,#FLOOP,1$
      0022E1 CC 16 BC         [ 2] 2364 	jp syntax_error
      0022E4 CD 1A A6         [ 4] 2365 1$: call expression 
      0022E7 A1 84            [ 1] 2366 	cp a,#TK_INTGR
      0022E9 27 03            [ 1] 2367 	jreq 2$
      0022EB CC 16 BC         [ 2] 2368 	jp syntax_error
      0022EE                       2369 2$:	
      0022EE                       2370 	_xpop 
      0022EE 90 F6            [ 1]    1     ld a,(y)
      0022F0 93               [ 1]    2     ldw x,y 
      0022F1 EE 01            [ 2]    3     ldw x,(1,x)
      0022F3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022F7 6B 03            [ 1] 2371 	ld (FSTEP,sp),a 
      0022F9 1F 04            [ 2] 2372 	ldw (FSTEP+1,sp),x ; step
                                   2373 ; if step < 0 decrement LIMIT 
      0022FB 4D               [ 1] 2374 	tnz a
      0022FC 2A 0D            [ 1] 2375 	jrpl store_loop_addr 
      0022FE 7B 06            [ 1] 2376 	ld a,(LIMIT,sp)
      002300 1E 07            [ 2] 2377 	ldw x,(LIMIT+1,sp)
      002302 1D 00 01         [ 2] 2378 	subw x,#1 
      002305 A2 00            [ 1] 2379 	sbc a,#0 
      002307 6B 06            [ 1] 2380 	ld (LIMIT,sp),a 
      002309 1F 07            [ 2] 2381 	ldw (LIMIT+1,sp),x 
                                   2382 ; leave loop back entry point on cstack 
                                   2383 ; cstack is 1 call deep from interpreter
      00230B                       2384 store_loop_addr:
      00230B CE 00 04         [ 2] 2385 	ldw x,basicptr
      00230E 1F 0D            [ 2] 2386 	ldw (BPTR,sp),x 
      002310 CE 00 00         [ 2] 2387 	ldw x,in.w 
      002313 1F 0B            [ 2] 2388 	ldw (INW,sp),x   
      002315 72 15 00 22      [ 1] 2389 	bres flags,#FLOOP 
      002319 72 5C 00 1F      [ 1] 2390 	inc loop_depth  
      00231D 81               [ 4] 2391 	ret 
                                   2392 
                                   2393 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



                                   2394 ; BASIC: NEXT var 
                                   2395 ; FOR loop control 
                                   2396 ; increment variable with step 
                                   2397 ; and compare with limit 
                                   2398 ; loop if threshold not crossed.
                                   2399 ; else stack. 
                                   2400 ; and decrement 'loop_depth' 
                                   2401 ;--------------------------------
      00231E                       2402 next: ; {var limit step retl1 -- [var limit step ] }
      00231E 72 5D 00 1F      [ 1] 2403 	tnz loop_depth 
      002322 26 03            [ 1] 2404 	jrne 1$ 
      002324 CC 16 BC         [ 2] 2405 	jp syntax_error 
      002327                       2406 1$: 
      002327 A6 85            [ 1] 2407 	ld a,#TK_VAR 
      002329 CD 19 69         [ 4] 2408 	call expect
      00232C CD 17 F2         [ 4] 2409 	call get_addr 
                                   2410 ; check for good variable after NEXT 	 
      00232F 13 09            [ 2] 2411 	cpw x,(CVAR,sp)
      002331 27 03            [ 1] 2412 	jreq 2$  
      002333 CC 16 BC         [ 2] 2413 	jp syntax_error ; not the good one 
      002336                       2414 2$: 
      002336 CF 00 19         [ 2] 2415 	ldw ptr16,x 
                                   2416 	; increment variable 
      002339 F6               [ 1] 2417 	ld a,(x)
      00233A EE 01            [ 2] 2418 	ldw x,(1,x)  ; get var value 
      00233C 72 FB 04         [ 2] 2419 	addw x,(FSTEP+1,sp) ; var+step 
      00233F 19 03            [ 1] 2420 	adc a,(FSTEP,sp)
      002341 72 C7 00 19      [ 4] 2421 	ld [ptr16],a
      002345 72 5C 00 1A      [ 1] 2422 	inc ptr8  
      002349 72 CF 00 19      [ 5] 2423 	ldw [ptr16],x 
      00234D C7 00 0C         [ 1] 2424 	ld acc24,a 
      002350 CF 00 0D         [ 2] 2425 	ldw acc16,x 
      002353 7B 06            [ 1] 2426 	ld a,(LIMIT,sp)
      002355 1E 07            [ 2] 2427 	ldw x,(LIMIT+1,sp)
      002357 72 B0 00 0D      [ 2] 2428 	subw x,acc16 
      00235B C2 00 0C         [ 1] 2429 	sbc a,acc24
      00235E 18 03            [ 1] 2430 	xor a,(FSTEP,sp)
      002360 A8 80            [ 1] 2431 	xor a,#0x80
      002362 2B 12            [ 1] 2432 	jrmi loop_back  
      002364 20 25            [ 2] 2433 	jra loop_done   
                                   2434 ; check sign of STEP  
      002366 7B 03            [ 1] 2435 	ld a,(FSTEP,sp)
      002368 2A 07            [ 1] 2436 	jrpl 4$
                                   2437 ;negative step
      00236A C6 00 0E         [ 1] 2438     ld a,acc8 
      00236D 2F 07            [ 1] 2439 	jrslt loop_back   
      00236F 20 1A            [ 2] 2440 	jra loop_done  
      002371                       2441 4$: ; positive step
      002371 72 0E 00 0E 15   [ 2] 2442 	btjt acc8,#7,loop_done 
      002376                       2443 loop_back:
      002376 1E 0D            [ 2] 2444 	ldw x,(BPTR,sp)
      002378 CF 00 04         [ 2] 2445 	ldw basicptr,x 
      00237B 72 01 00 22 05   [ 2] 2446 	btjf flags,#FRUN,1$ 
      002380 E6 02            [ 1] 2447 	ld a,(2,x)
      002382 C7 00 03         [ 1] 2448 	ld count,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002385 1E 0B            [ 2] 2449 1$:	ldw x,(INW,sp)
      002387 CF 00 00         [ 2] 2450 	ldw in.w,x 
      00238A 81               [ 4] 2451 	ret 
      00238B                       2452 loop_done:
                                   2453 	; remove loop data from stack  
      00238B 85               [ 2] 2454 	popw x
      00238C                       2455 	_drop VSIZE 
      00238C 5B 0D            [ 2]    1     addw sp,#VSIZE 
      00238E 72 5A 00 1F      [ 1] 2456 	dec loop_depth 
      002392 FC               [ 2] 2457 	jp (x)
                                   2458 
                                   2459 ;----------------------------
                                   2460 ; called by goto/gosub
                                   2461 ; to get target line number 
                                   2462 ; output:
                                   2463 ;    x    line address 
                                   2464 ;---------------------------
      002393                       2465 get_target_line:
      002393 CD 17 BD         [ 4] 2466 	call next_token  
      002396 A1 84            [ 1] 2467 	cp a,#TK_INTGR
      002398 27 07            [ 1] 2468 	jreq get_target_line_addr 
      00239A A1 03            [ 1] 2469 	cp a,#TK_LABEL 
      00239C 27 26            [ 1] 2470 	jreq look_target_symbol 
      00239E CC 16 BC         [ 2] 2471 	jp syntax_error
                                   2472 ; the target is a line number 
                                   2473 ; search it. 
      0023A1                       2474 get_target_line_addr:
      0023A1 90 89            [ 2] 2475 	pushw y 
      0023A3 CD 17 FC         [ 4] 2476 	call get_int24 ; line # 
      0023A6 4F               [ 1] 2477 	clr a
      0023A7 90 CE 00 04      [ 2] 2478 	ldw y,basicptr 
      0023AB 90 FE            [ 2] 2479 	ldw y,(y)
      0023AD 90 89            [ 2] 2480 	pushw y 
      0023AF 13 01            [ 2] 2481 	cpw x,(1,sp)
      0023B1                       2482 	_drop 2  
      0023B1 5B 02            [ 2]    1     addw sp,#2 
      0023B3 25 01            [ 1] 2483 	jrult 11$
      0023B5 4C               [ 1] 2484 	inc a 
      0023B6                       2485 11$: ; scan program for this line# 	
      0023B6 CD 0C 89         [ 4] 2486 	call search_lineno  
      0023B9 5D               [ 2] 2487 	tnzw x ; 0| line# address 
      0023BA 26 05            [ 1] 2488 	jrne 2$ 
      0023BC A6 05            [ 1] 2489 	ld a,#ERR_NO_LINE 
      0023BE CC 16 BE         [ 2] 2490 	jp tb_error 
      0023C1 90 85            [ 2] 2491 2$:	popw y  
      0023C3 81               [ 4] 2492 	ret 
                                   2493 
                                   2494 ; the GOTO|GOSUB target is a symbol.
      0023C4                       2495 look_target_symbol:
      0023C4 90 89            [ 2] 2496 	pushw y 
      0023C6 89               [ 2] 2497 	pushw x 
      0023C7 72 5F 00 0D      [ 1] 2498 	clr acc16 
      0023CB 90 CE 00 1B      [ 2] 2499 	ldw y,txtbgn 
      0023CF 90 E6 03         [ 1] 2500 1$:	ld a,(3,y) ; first TK_ID on line 
      0023D2 A1 03            [ 1] 2501 	cp a,#TK_LABEL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      0023D4 27 15            [ 1] 2502 	jreq 3$ 
      0023D6 90 E6 02         [ 1] 2503 2$:	ld a,(2,y); line length 
      0023D9 C7 00 0E         [ 1] 2504 	ld acc8,a 
      0023DC 72 B9 00 0D      [ 2] 2505 	addw y,acc16 ;point to next line 
      0023E0 90 C3 00 1D      [ 2] 2506 	cpw y,txtend 
      0023E4 25 E9            [ 1] 2507 	jrult 1$
      0023E6 A6 0A            [ 1] 2508 	ld a,#ERR_BAD_VALUE
      0023E8 CC 16 BE         [ 2] 2509 	jp tb_error 
      0023EB                       2510 3$: ; found a TK_LABEL 
                                   2511 	; compare with GOTO|GOSUB target 
      0023EB 90 89            [ 2] 2512 	pushw y ; line address 
      0023ED 72 A9 00 04      [ 2] 2513 	addw y,#4 ; label string 
      0023F1 1E 03            [ 2] 2514 	ldw x,(3,sp) ; target string 
      0023F3 CD 14 0B         [ 4] 2515 	call strcmp
      0023F6 26 04            [ 1] 2516 	jrne 4$
      0023F8 90 85            [ 2] 2517 	popw y 
      0023FA 20 DA            [ 2] 2518 	jra 2$ 
      0023FC                       2519 4$: ; target found 
      0023FC 85               [ 2] 2520 	popw x ;  address line target  
      0023FD                       2521 	_drop 2 ; target string 
      0023FD 5B 02            [ 2]    1     addw sp,#2 
      0023FF 90 85            [ 2] 2522 	popw y 
      002401 81               [ 4] 2523 	ret
                                   2524 
                                   2525 
                                   2526 ;--------------------------------
                                   2527 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2528 ; selective goto or gosub 
                                   2529 ;--------------------------------
      002402                       2530 cmd_on:
      002402 72 00 00 22 05   [ 2] 2531 	btjt flags,#FRUN,0$ 
      002407 A6 06            [ 1] 2532 	ld a,#ERR_RUN_ONLY
      002409 CC 16 BE         [ 2] 2533 	jp tb_error 
      00240C CD 1A A6         [ 4] 2534 0$:	call expression 
      00240F A1 84            [ 1] 2535 	cp a,#TK_INTGR
      002411 27 03            [ 1] 2536 	jreq 1$
      002413 CC 16 BC         [ 2] 2537 	jp syntax_error
      002416                       2538 1$: _xpop
      002416 90 F6            [ 1]    1     ld a,(y)
      002418 93               [ 1]    2     ldw x,y 
      002419 EE 01            [ 2]    3     ldw x,(1,x)
      00241B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2539 ; the selector is the element indice 
                                   2540 ; in the list of arguments. {1..#elements} 
      00241F 9F               [ 1] 2541 	ld a,xl ; keep only bits 7..0
      002420 27 62            [ 1] 2542 	jreq 9$ ; element # begin at 1. 
      002422 88               [ 1] 2543 	push a  ; selector  
      002423 CD 17 BD         [ 4] 2544 	call next_token
      002426 A1 80            [ 1] 2545 	cp a,#TK_CMD 
      002428 27 03            [ 1] 2546 	jreq 2$ 
      00242A CC 16 BC         [ 2] 2547 	jp syntax_error 
      00242D CD 17 D6         [ 4] 2548 2$: call get_code_addr
                                   2549 ;; must be a GOTO or GOSUB 
      002430 A3 24 8E         [ 2] 2550 	cpw x,#goto 
      002433 27 08            [ 1] 2551 	jreq 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      002435 A3 24 A8         [ 2] 2552 	cpw x,#gosub 
      002438 27 03            [ 1] 2553 	jreq 4$ 
      00243A CC 16 BC         [ 2] 2554 	jp syntax_error 
      00243D                       2555 4$: 
      00243D 84               [ 1] 2556 	pop a 
      00243E 89               [ 2] 2557 	pushw x ; save routine address 	
      00243F 88               [ 1] 2558 	push a  ; selector  
      002440                       2559 5$: ; skip elements in list until selector==0 
      002440 0A 01            [ 1] 2560 	dec (1,sp)
      002442 27 26            [ 1] 2561 	jreq 6$ 
                                   2562 ; can be a line# or a label 
      002444 CD 17 BD         [ 4] 2563 	call next_token 
      002447 A1 84            [ 1] 2564 	cp a,#TK_INTGR 
      002449 27 07            [ 1] 2565 	jreq 52$
      00244B A1 03            [ 1] 2566 	cp a,#TK_LABEL 
      00244D 27 0D            [ 1] 2567 	jreq 54$
      00244F CC 16 BC         [ 2] 2568 	jp syntax_error 
      002452                       2569 52$: ; got a line number 
      002452 C6 00 01         [ 1] 2570 	ld a,in ; skip over int24 value 
      002455 AB 03            [ 1] 2571 	add a,#CELL_SIZE ; integer size  
      002457 C7 00 01         [ 1] 2572 	ld in,a 
      00245A 20 03            [ 2] 2573 	jra 56$
      00245C CD 17 E3         [ 4] 2574 54$: call skip_string ; skip over label 	
      00245F                       2575 56$: ; if another element comma present 
      00245F CD 17 BD         [ 4] 2576 	call next_token
      002462 A1 08            [ 1] 2577 	cp a,#TK_COMMA 
      002464 27 DA            [ 1] 2578 	jreq 5$ 
                                   2579 ; arg list exhausted, selector to big 
                                   2580 ; continue execution on next line 
      002466                       2581 	_drop 3 ; drop selector and GOTO|GOSUB address 
      002466 5B 03            [ 2]    1     addw sp,#3 
      002468 20 1A            [ 2] 2582 	jra 9$
      00246A                       2583 6$: ;at selected position  
      00246A                       2584 	_drop 1 ; discard selector
      00246A 5B 01            [ 2]    1     addw sp,#1 
                                   2585 ; here only the routine address 
                                   2586 ; of GOTO|GOSUB is on stack 
      00246C CD 23 93         [ 4] 2587     call get_target_line
      00246F CF 00 19         [ 2] 2588 	ldw ptr16,x 	
      002472 55 00 03 00 01   [ 1] 2589 	mov in,count ; move to end of line  
      002477 85               [ 2] 2590 	popw x ; cmd address, GOTO||GOSUB 
      002478 A3 24 8E         [ 2] 2591 	cpw x,#goto 
      00247B 26 05            [ 1] 2592 	jrne 7$ 
      00247D CE 00 19         [ 2] 2593 	ldw x,ptr16 
      002480 20 19            [ 2] 2594 	jra jp_to_target
      002482                       2595 7$: 
      002482 20 35            [ 2] 2596 	jra gosub_2 ; target in ptr16 
      002484                       2597 9$: ; expr out of range skip to end of line
                                   2598     ; this will force a fall to next line  
      002484 55 00 03 00 01   [ 1] 2599 	mov in,count
      002489                       2600 	_drop 2
      002489 5B 02            [ 2]    1     addw sp,#2 
      00248B CC 17 6F         [ 2] 2601 	jp next_line  
                                   2602 
                                   2603 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



                                   2604 ;------------------------
                                   2605 ; BASIC: GOTO line# 
                                   2606 ; jump to line# 
                                   2607 ; here cstack is 2 call deep from interpreter 
                                   2608 ;------------------------
      00248E                       2609 goto:
      00248E 72 00 00 22 05   [ 2] 2610 	btjt flags,#FRUN,goto_1  
      002493 A6 06            [ 1] 2611 	ld a,#ERR_RUN_ONLY
      002495 CC 16 BE         [ 2] 2612 	jp tb_error 
      002498                       2613 goto_1:
      002498 CD 23 93         [ 4] 2614 	call get_target_line
      00249B                       2615 jp_to_target:
      00249B CF 00 04         [ 2] 2616 	ldw basicptr,x 
      00249E E6 02            [ 1] 2617 	ld a,(2,x)
      0024A0 C7 00 03         [ 1] 2618 	ld count,a 
      0024A3 35 03 00 01      [ 1] 2619 	mov in,#3 
      0024A7 81               [ 4] 2620 	ret 
                                   2621 
                                   2622 
                                   2623 ;--------------------
                                   2624 ; BASIC: GOSUB line#
                                   2625 ; basic subroutine call
                                   2626 ; actual line# and basicptr 
                                   2627 ; are saved on cstack
                                   2628 ; here cstack is 2 call deep from interpreter 
                                   2629 ;--------------------
                           000001  2630 	TARGET=1   ; target address 
                           000003  2631 	RET_ADDR=3 ; subroutine return address 
                           000005  2632 	RET_BPTR=5 ; basicptr return point 
                           000007  2633 	RET_INW=7  ; in.w return point 
                           000004  2634 	VSIZE=4  
      0024A8                       2635 gosub:
      0024A8 72 00 00 22 06   [ 2] 2636 	btjt flags,#FRUN,gosub_1 
      0024AD A6 06            [ 1] 2637 	ld a,#ERR_RUN_ONLY
      0024AF CC 16 BE         [ 2] 2638 	jp tb_error 
      0024B2 81               [ 4] 2639 	ret 
      0024B3                       2640 gosub_1:
      0024B3 CD 23 93         [ 4] 2641 	call get_target_line 
      0024B6 CF 00 19         [ 2] 2642 	ldw ptr16,x 
      0024B9                       2643 gosub_2: 
      0024B9 85               [ 2] 2644 	popw x 
      0024BA                       2645 	_vars VSIZE  
      0024BA 52 04            [ 2]    1     sub sp,#VSIZE 
      0024BC 89               [ 2] 2646 	pushw x ; RET_ADDR 
      0024BD CE 00 19         [ 2] 2647 	ldw x,ptr16 
      0024C0 89               [ 2] 2648 	pushw x ; TARGET
                                   2649 ; save BASIC subroutine return point.   
      0024C1 CE 00 04         [ 2] 2650 	ldw x,basicptr
      0024C4 1F 05            [ 2] 2651 	ldw (RET_BPTR,sp),x 
      0024C6 CE 00 00         [ 2] 2652 	ldw x,in.w 
      0024C9 1F 07            [ 2] 2653 	ldw (RET_INW,sp),x
      0024CB 85               [ 2] 2654 	popw x 
      0024CC 20 CD            [ 2] 2655 	jra jp_to_target
                                   2656 
                                   2657 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



                                   2658 ; BASIC: RETURN 
                                   2659 ; exit from BASIC subroutine 
                                   2660 ;------------------------
                           000003  2661 	RET_BPTR=3 ; basicptr return point 
                           000005  2662 	RET_INW=5  ; in.w return point 
                           000004  2663 	VSIZE=4  
      0024CE                       2664 return:
      0024CE 72 00 00 22 05   [ 2] 2665 	btjt flags,#FRUN,0$ 
      0024D3 A6 06            [ 1] 2666 	ld a,#ERR_RUN_ONLY
      0024D5 CC 16 BE         [ 2] 2667 	jp tb_error 
      0024D8                       2668 0$:	
      0024D8 1E 03            [ 2] 2669 	ldw x,(RET_ADDR,sp) 
      0024DA CF 00 04         [ 2] 2670 	ldw basicptr,x
      0024DD E6 02            [ 1] 2671 	ld a,(2,x)
      0024DF C7 00 03         [ 1] 2672 	ld count,a  
      0024E2 1E 05            [ 2] 2673 	ldw x,(RET_INW,sp)
      0024E4 CF 00 00         [ 2] 2674 	ldw in.w,x 
      0024E7 85               [ 2] 2675 	popw x 
      0024E8                       2676 	_drop VSIZE 
      0024E8 5B 04            [ 2]    1     addw sp,#VSIZE 
      0024EA 89               [ 2] 2677 	pushw x
      0024EB 81               [ 4] 2678 	ret  
                                   2679 
                                   2680 ;----------------------------------
                                   2681 ; BASIC: RUN
                                   2682 ; run BASIC program in RAM
                                   2683 ;----------------------------------- 
      0024EC                       2684 run: 
      0024EC 72 01 00 22 02   [ 2] 2685 	btjf flags,#FRUN,0$  
      0024F1 4F               [ 1] 2686 	clr a 
      0024F2 81               [ 4] 2687 	ret
      0024F3                       2688 0$: 
      0024F3 72 09 00 22 12   [ 2] 2689 	btjf flags,#FBREAK,1$
      0024F8                       2690 	_drop 2 
      0024F8 5B 02            [ 2]    1     addw sp,#2 
      0024FA CD 20 88         [ 4] 2691 	call rest_context
      0024FD                       2692 	_drop CTXT_SIZE 
      0024FD 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0024FF 72 19 00 22      [ 1] 2693 	bres flags,#FBREAK 
      002503 72 10 00 22      [ 1] 2694 	bset flags,#FRUN 
      002507 CC 17 67         [ 2] 2695 	jp interpreter 
      00250A CE 00 1B         [ 2] 2696 1$:	ldw x,txtbgn
      00250D C3 00 1D         [ 2] 2697 	cpw x,txtend 
      002510 2B 0C            [ 1] 2698 	jrmi run_it 
      002512 AE 16 4B         [ 2] 2699 	ldw x,#err_no_prog
      002515 CD 09 A1         [ 4] 2700 	call puts 
      002518 55 00 03 00 01   [ 1] 2701 	mov in,count
      00251D 81               [ 4] 2702 	ret 
      00251E                       2703 run_it:	 
      00251E                       2704 	_drop 2 ; drop return address 
      00251E 5B 02            [ 2]    1     addw sp,#2 
      002520                       2705 run_it_02: 
      002520 CD 1C 72         [ 4] 2706     call ubound 
      002523 CD 14 70         [ 4] 2707 	call clear_vars 
                                   2708 ; clear data pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      002526 5F               [ 1] 2709 	clrw x 
      002527 CF 00 06         [ 2] 2710 	ldw data_ptr,x 
      00252A 72 5F 00 08      [ 1] 2711 	clr data_ofs 
      00252E 72 5F 00 09      [ 1] 2712 	clr data_len 
                                   2713 ; initialize BASIC pointer 
      002532 CE 00 1B         [ 2] 2714 	ldw x,txtbgn 
      002535 CF 00 04         [ 2] 2715 	ldw basicptr,x 
      002538 E6 02            [ 1] 2716 	ld a,(2,x)
      00253A C7 00 03         [ 1] 2717 	ld count,a
      00253D 35 03 00 01      [ 1] 2718 	mov in,#3	
      002541 72 10 00 22      [ 1] 2719 	bset flags,#FRUN 
      002545 CC 17 67         [ 2] 2720 	jp interpreter 
                                   2721 
                                   2722 
                                   2723 ;----------------------
                                   2724 ; BASIC: END
                                   2725 ; end running program
                                   2726 ;---------------------- 
      002548                       2727 cmd_end: 
                                   2728 ; clean stack 
      002548 AE 17 FF         [ 2] 2729 	ldw x,#STACK_EMPTY
      00254B 94               [ 1] 2730 	ldw sp,x 
      00254C CC 17 48         [ 2] 2731 	jp warm_start
                                   2732 
                                   2733 ;---------------------------
                                   2734 ; BASIC: GET var 
                                   2735 ; receive a key in variable 
                                   2736 ; don't wait 
                                   2737 ;---------------------------
      00254F                       2738 cmd_get:
      00254F CD 17 BD         [ 4] 2739 	call next_token 
      002552 A1 85            [ 1] 2740 	cp a,#TK_VAR 
      002554 27 03            [ 1] 2741 	jreq 0$
      002556 CC 16 BC         [ 2] 2742 	jp syntax_error 
      002559 CD 17 F2         [ 4] 2743 0$: call get_addr 
      00255C CF 00 19         [ 2] 2744 	ldw ptr16,x 
      00255F CD 09 4D         [ 4] 2745 	call qgetc 
      002562 27 03            [ 1] 2746 	jreq 2$
      002564 CD 09 54         [ 4] 2747 	call getc  
      002567 72 3F 00 19      [ 4] 2748 2$: clr [ptr16]
      00256B 72 5C 00 1A      [ 1] 2749 	inc ptr8 
      00256F 72 3F 00 19      [ 4] 2750 	clr [ptr16]
      002573 72 5C 00 1A      [ 1] 2751 	inc ptr8 
      002577 72 C7 00 19      [ 4] 2752 	ld [ptr16],a 
      00257B 81               [ 4] 2753 	ret 
                                   2754 
                                   2755 
                                   2756 ;-----------------
                                   2757 ; 1 Khz beep 
                                   2758 ;-----------------
      00257C                       2759 beep_1khz:: 
      00257C AE 00 64         [ 2] 2760 	ldw x,#100
      00257F 90 AE 03 E8      [ 2] 2761 	ldw y,#1000
      002583 20 20            [ 2] 2762 	jra beep
                                   2763 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



                                   2764 ;-----------------------
                                   2765 ; BASIC: TONE expr1,expr2
                                   2766 ; used TIMER2 channel 1
                                   2767 ; to produce a tone 
                                   2768 ; arguments:
                                   2769 ;    expr1   frequency 
                                   2770 ;    expr2   duration msec.
                                   2771 ;---------------------------
      002585                       2772 tone:
      002585 CD 19 7B         [ 4] 2773 	call arg_list 
      002588 A1 02            [ 1] 2774 	cp a,#2 
      00258A 27 03            [ 1] 2775 	jreq 1$
      00258C CC 16 BC         [ 2] 2776 	jp syntax_error 
      00258F                       2777 1$: 
      00258F                       2778 	_xpop 
      00258F 90 F6            [ 1]    1     ld a,(y)
      002591 93               [ 1]    2     ldw x,y 
      002592 EE 01            [ 2]    3     ldw x,(1,x)
      002594 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002598 89               [ 2] 2779 	pushw x ; duration 
      002599                       2780 	_xpop ; frequency
      002599 90 F6            [ 1]    1     ld a,(y)
      00259B 93               [ 1]    2     ldw x,y 
      00259C EE 01            [ 2]    3     ldw x,(1,x)
      00259E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025A2 90 93            [ 1] 2781 	ldw y,x ; frequency 
      0025A4 85               [ 2] 2782 	popw x  ; duration 
      0025A5                       2783 beep:  
      0025A5 89               [ 2] 2784 	pushw x 
      0025A6 AE F4 24         [ 2] 2785 	ldw x,#TIM2_CLK_FREQ
      0025A9 65               [ 2] 2786 	divw x,y ; cntr=Fclk/freq 
                                   2787 ; round to nearest integer 
      0025AA 90 A3 7A 12      [ 2] 2788 	cpw y,#TIM2_CLK_FREQ/2
      0025AE 2B 01            [ 1] 2789 	jrmi 2$
      0025B0 5C               [ 1] 2790 	incw x 
      0025B1                       2791 2$:	 
      0025B1 9E               [ 1] 2792 	ld a,xh 
      0025B2 C7 53 0D         [ 1] 2793 	ld TIM2_ARRH,a 
      0025B5 9F               [ 1] 2794 	ld a,xl 
      0025B6 C7 53 0E         [ 1] 2795 	ld TIM2_ARRL,a 
                                   2796 ; 50% duty cycle 
      0025B9 8C               [ 1] 2797 	ccf 
      0025BA 56               [ 2] 2798 	rrcw x 
      0025BB 9E               [ 1] 2799 	ld a,xh 
      0025BC C7 53 0F         [ 1] 2800 	ld TIM2_CCR1H,a 
      0025BF 9F               [ 1] 2801 	ld a,xl
      0025C0 C7 53 10         [ 1] 2802 	ld TIM2_CCR1L,a
      0025C3 72 10 53 08      [ 1] 2803 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0025C7 72 10 53 00      [ 1] 2804 	bset TIM2_CR1,#TIM2_CR1_CEN
      0025CB 72 10 53 04      [ 1] 2805 	bset TIM2_EGR,#TIM2_EGR_UG
      0025CF 85               [ 2] 2806 	popw x 
      0025D0 CD 2A 20         [ 4] 2807 	call pause02
      0025D3 72 11 53 08      [ 1] 2808 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0025D7 72 11 53 00      [ 1] 2809 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0025DB 81               [ 4] 2810 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                                   2811 
                                   2812 ;-------------------------------
                                   2813 ; BASIC: ADCON 0|1 [,divisor]  
                                   2814 ; disable/enanble ADC 
                                   2815 ;-------------------------------
                           000003  2816 	ONOFF=3 
                           000001  2817 	DIVSOR=1
                           000004  2818 	VSIZE=4 
      0025DC                       2819 power_adc:
      0025DC CD 19 7B         [ 4] 2820 	call arg_list 
      0025DF A1 02            [ 1] 2821 	cp a,#2	
      0025E1 27 12            [ 1] 2822 	jreq 1$
      0025E3 A1 01            [ 1] 2823 	cp a,#1 
      0025E5 27 03            [ 1] 2824 	jreq 0$ 
      0025E7 CC 16 BC         [ 2] 2825 	jp syntax_error 
      0025EA 4F               [ 1] 2826 0$:	clr a 
      0025EB 5F               [ 1] 2827 	clrw x
      0025EC                       2828 	_xpush   ; divisor  
      0025EC 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0025F0 90 F7            [ 1]    2     ld (y),a 
      0025F2 90 EF 01         [ 2]    3     ldw (1,y),x 
      0025F5                       2829 1$: _at_next 
      0025F5 90 E6 03         [ 1]    1     ld a,(3,y)
      0025F8 93               [ 1]    2     ldw x,y 
      0025F9 EE 04            [ 2]    3     ldw x,(4,x)
      0025FB 5D               [ 2] 2830 	tnzw x 
      0025FC 27 25            [ 1] 2831 	jreq 2$ 
      0025FE                       2832 	_xpop
      0025FE 90 F6            [ 1]    1     ld a,(y)
      002600 93               [ 1]    2     ldw x,y 
      002601 EE 01            [ 2]    3     ldw x,(1,x)
      002603 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002607                       2833 	_xdrop  
      002607 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      00260B 9F               [ 1] 2834 	ld a,xl
      00260C A4 07            [ 1] 2835 	and a,#7
      00260E 4E               [ 1] 2836 	swap a 
      00260F C7 54 01         [ 1] 2837 	ld ADC_CR1,a
      002612 72 16 50 CA      [ 1] 2838 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      002616 72 10 54 01      [ 1] 2839 	bset ADC_CR1,#ADC_CR1_ADON 
      00261A                       2840 	_usec_dly 7 
      00261A AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00261D 5A               [ 2]    2     decw x
      00261E 9D               [ 1]    3     nop 
      00261F 26 FA            [ 1]    4     jrne .-4
      002621 20 08            [ 2] 2841 	jra 3$
      002623 72 11 54 01      [ 1] 2842 2$: bres ADC_CR1,#ADC_CR1_ADON
      002627 72 17 50 CA      [ 1] 2843 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00262B                       2844 3$:	
      00262B 81               [ 4] 2845 	ret
                                   2846 
                                   2847 ;-----------------------------
                                   2848 ; BASIC: ADCREAD (channel)
                                   2849 ; read adc channel {0..5}
                                   2850 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                                   2851 ;   A 		TK_INTGR 
                                   2852 ;   X 		value 
                                   2853 ;-----------------------------
      00262C                       2854 analog_read:
      00262C CD 19 76         [ 4] 2855 	call func_args 
      00262F A1 01            [ 1] 2856 	cp a,#1 
      002631 27 03            [ 1] 2857 	jreq 1$
      002633 CC 16 BC         [ 2] 2858 	jp syntax_error
      002636                       2859 1$: _xpop 
      002636 90 F6            [ 1]    1     ld a,(y)
      002638 93               [ 1]    2     ldw x,y 
      002639 EE 01            [ 2]    3     ldw x,(1,x)
      00263B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00263F A3 00 05         [ 2] 2860 	cpw x,#5 
      002642 23 05            [ 2] 2861 	jrule 2$
      002644 A6 0A            [ 1] 2862 	ld a,#ERR_BAD_VALUE
      002646 CC 16 BE         [ 2] 2863 	jp tb_error 
      002649 9F               [ 1] 2864 2$: ld a,xl
      00264A C7 00 0E         [ 1] 2865 	ld acc8,a 
      00264D A6 05            [ 1] 2866 	ld a,#5
      00264F C0 00 0E         [ 1] 2867 	sub a,acc8 
      002652 C7 54 00         [ 1] 2868 	ld ADC_CSR,a
      002655 72 16 54 02      [ 1] 2869 	bset ADC_CR2,#ADC_CR2_ALIGN
      002659 72 10 54 01      [ 1] 2870 	bset ADC_CR1,#ADC_CR1_ADON
      00265D 72 0F 54 00 FB   [ 2] 2871 	btjf ADC_CSR,#ADC_CSR_EOC,.
      002662 CE 54 04         [ 2] 2872 	ldw x,ADC_DRH
      002665 A6 84            [ 1] 2873 	ld a,#TK_INTGR
      002667 81               [ 4] 2874 	ret 
                                   2875 
                                   2876 ;-----------------------
                                   2877 ; BASIC: DREAD(pin)
                                   2878 ; Arduino pins 
                                   2879 ; read state of a digital pin 
                                   2880 ; pin# {0..15}
                                   2881 ; output:
                                   2882 ;    A 		TK_INTGR
                                   2883 ;    X      0|1 
                                   2884 ;-------------------------
                           000001  2885 	PINNO=1
                           000001  2886 	VSIZE=1
      002668                       2887 digital_read:
      002668                       2888 	_vars VSIZE 
      002668 52 01            [ 2]    1     sub sp,#VSIZE 
      00266A CD 19 76         [ 4] 2889 	call func_args
      00266D A1 01            [ 1] 2890 	cp a,#1
      00266F 27 03            [ 1] 2891 	jreq 1$
      002671 CC 16 BC         [ 2] 2892 	jp syntax_error
      002674                       2893 1$: _xpop 
      002674 90 F6            [ 1]    1     ld a,(y)
      002676 93               [ 1]    2     ldw x,y 
      002677 EE 01            [ 2]    3     ldw x,(1,x)
      002679 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00267D A3 00 0F         [ 2] 2894 	cpw x,#15 
      002680 23 05            [ 2] 2895 	jrule 2$
      002682 A6 0A            [ 1] 2896 	ld a,#ERR_BAD_VALUE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      002684 CC 16 BE         [ 2] 2897 	jp tb_error 
      002687 CD 2B 64         [ 4] 2898 2$:	call select_pin 
      00268A 6B 01            [ 1] 2899 	ld (PINNO,sp),a
      00268C E6 01            [ 1] 2900 	ld a,(GPIO_IDR,x)
      00268E 0D 01            [ 1] 2901 	tnz (PINNO,sp)
      002690 27 05            [ 1] 2902 	jreq 8$
      002692 44               [ 1] 2903 3$: srl a 
      002693 0A 01            [ 1] 2904 	dec (PINNO,sp)
      002695 26 FB            [ 1] 2905 	jrne 3$ 
      002697 A4 01            [ 1] 2906 8$: and a,#1 
      002699 5F               [ 1] 2907 	clrw x 
      00269A 97               [ 1] 2908 	ld xl,a 
      00269B 4F               [ 1] 2909 	clr a 
      00269C                       2910 	_drop VSIZE
      00269C 5B 01            [ 2]    1     addw sp,#VSIZE 
      00269E 81               [ 4] 2911 	ret
                                   2912 
                                   2913 
                                   2914 ;-----------------------
                                   2915 ; BASIC: DWRITE pin,0|1
                                   2916 ; Arduino pins 
                                   2917 ; write to a digital pin 
                                   2918 ; pin# {0..15}
                                   2919 ; output:
                                   2920 ;    A 		TK_INTGR
                                   2921 ;    X      0|1 
                                   2922 ;-------------------------
                           000001  2923 	PINNO=1
                           000002  2924 	PINVAL=2
                           000002  2925 	VSIZE=2
      00269F                       2926 digital_write:
      00269F                       2927 	_vars VSIZE 
      00269F 52 02            [ 2]    1     sub sp,#VSIZE 
      0026A1 CD 19 7B         [ 4] 2928 	call arg_list  
      0026A4 A1 02            [ 1] 2929 	cp a,#2 
      0026A6 27 03            [ 1] 2930 	jreq 1$
      0026A8 CC 16 BC         [ 2] 2931 	jp syntax_error
      0026AB                       2932 1$: _xpop 
      0026AB 90 F6            [ 1]    1     ld a,(y)
      0026AD 93               [ 1]    2     ldw x,y 
      0026AE EE 01            [ 2]    3     ldw x,(1,x)
      0026B0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026B4 9F               [ 1] 2933 	ld a,xl 
      0026B5 6B 02            [ 1] 2934 	ld (PINVAL,sp),a
      0026B7                       2935 	_xpop 
      0026B7 90 F6            [ 1]    1     ld a,(y)
      0026B9 93               [ 1]    2     ldw x,y 
      0026BA EE 01            [ 2]    3     ldw x,(1,x)
      0026BC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026C0 A3 00 0F         [ 2] 2936 	cpw x,#15 
      0026C3 23 05            [ 2] 2937 	jrule 2$
      0026C5 A6 0A            [ 1] 2938 	ld a,#ERR_BAD_VALUE
      0026C7 CC 16 BE         [ 2] 2939 	jp tb_error 
      0026CA CD 2B 64         [ 4] 2940 2$:	call select_pin 
      0026CD 6B 01            [ 1] 2941 	ld (PINNO,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0026CF A6 01            [ 1] 2942 	ld a,#1
      0026D1 0D 01            [ 1] 2943 	tnz (PINNO,sp)
      0026D3 27 05            [ 1] 2944 	jreq 4$
      0026D5 48               [ 1] 2945 3$: sll a
      0026D6 0A 01            [ 1] 2946 	dec (PINNO,sp)
      0026D8 26 FB            [ 1] 2947 	jrne 3$
      0026DA 0D 02            [ 1] 2948 4$: tnz (PINVAL,sp)
      0026DC 26 05            [ 1] 2949 	jrne 5$
      0026DE 43               [ 1] 2950 	cpl a 
      0026DF E4 00            [ 1] 2951 	and a,(GPIO_ODR,x)
      0026E1 20 02            [ 2] 2952 	jra 8$
      0026E3 EA 00            [ 1] 2953 5$: or a,(GPIO_ODR,x)
      0026E5 E7 00            [ 1] 2954 8$: ld (GPIO_ODR,x),a 
      0026E7                       2955 	_drop VSIZE 
      0026E7 5B 02            [ 2]    1     addw sp,#VSIZE 
      0026E9 81               [ 4] 2956 	ret
                                   2957 
                                   2958 
                                   2959 ;-----------------------
                                   2960 ; BASIC: STOP
                                   2961 ; stop progam execution  
                                   2962 ; without resetting pointers 
                                   2963 ; the program is resumed
                                   2964 ; with RUN 
                                   2965 ;-------------------------
      0026EA                       2966 stop:
      0026EA 72 00 00 22 02   [ 2] 2967 	btjt flags,#FRUN,2$
      0026EF 4F               [ 1] 2968 	clr a
      0026F0 81               [ 4] 2969 	ret 
      0026F1                       2970 2$:	 
                                   2971 ; create space on cstack to save context 
      0026F1 AE 27 18         [ 2] 2972 	ldw x,#break_point 
      0026F4 CD 09 A1         [ 4] 2973 	call puts 
      0026F7                       2974 	_drop 2 ;drop return address 
      0026F7 5B 02            [ 2]    1     addw sp,#2 
      0026F9                       2975 	_vars CTXT_SIZE ; context size 
      0026F9 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0026FB CD 20 78         [ 4] 2976 	call save_context 
      0026FE AE 16 68         [ 2] 2977 	ldw x,#tib 
      002701 CF 00 04         [ 2] 2978 	ldw basicptr,x
      002704 7F               [ 1] 2979 	clr (x)
      002705 72 5F 00 03      [ 1] 2980 	clr count  
      002709 5F               [ 1] 2981 	clrw x 
      00270A CF 00 00         [ 2] 2982 	ldw in.w,x
      00270D 72 11 00 22      [ 1] 2983 	bres flags,#FRUN 
      002711 72 18 00 22      [ 1] 2984 	bset flags,#FBREAK
      002715 CC 17 67         [ 2] 2985 	jp interpreter 
      002718 0A 62 72 65 61 6B 20  2986 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   2987 
                                   2988 ;-----------------------
                                   2989 ; BASIC: NEW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



                                   2990 ; from command line only 
                                   2991 ; free program memory
                                   2992 ; and clear variables 
                                   2993 ;------------------------
      002736                       2994 new: 
      002736 72 01 00 22 01   [ 2] 2995 	btjf flags,#FRUN,0$ 
      00273B 81               [ 4] 2996 	ret 
      00273C                       2997 0$:	
      00273C CD 15 18         [ 4] 2998 	call clear_basic 
      00273F 81               [ 4] 2999 	ret 
                                   3000 
                                   3001 ;-----------------------------------
                                   3002 ; BASIC: ERASE \E | \F 
                                   3003 ; erase all block in range from 
                                   3004 ;  'app_space' to FLASH end (0x20000)
                                   3005 ;  or all EEPROM 
                                   3006 ; that contains a non zero byte.  
                                   3007 ;-----------------------------------
                           000001  3008 	LIMIT=1 
                           000003  3009 	VSIZE = 3 
      002740                       3010 erase:
      002740 72 5F 00 18      [ 1] 3011 	clr farptr 
      002744                       3012 	_vars VSIZE 
      002744 52 03            [ 2]    1     sub sp,#VSIZE 
      002746 CD 17 BD         [ 4] 3013 	call next_token 
      002749 A1 04            [ 1] 3014 	cp a,#TK_CHAR 
      00274B 27 03            [ 1] 3015 	jreq 0$ 
      00274D CC 16 BC         [ 2] 3016 	jp syntax_error
      002750 CD 18 0C         [ 4] 3017 0$: call get_char 
      002753 A4 DF            [ 1] 3018 	and a,#0XDF 
      002755 A1 45            [ 1] 3019 	cp a,#'E
      002757 26 0C            [ 1] 3020 	jrne 1$
      002759 AE 40 00         [ 2] 3021 	ldw x,#EEPROM_BASE 
      00275C CF 00 19         [ 2] 3022 	ldw farptr+1,x 
      00275F AE 47 FF         [ 2] 3023 	ldw x,#EEPROM_END
      002762 4F               [ 1] 3024 	clr a 
      002763 20 15            [ 2] 3025 	jra 3$ 
      002765 A1 46            [ 1] 3026 1$: cp a,#'F 
      002767 27 06            [ 1] 3027 	jreq 2$
      002769 AE 15 FC         [ 2] 3028 	ldw x,#err_bad_value
      00276C CC 16 BE         [ 2] 3029 	jp tb_error
      00276F                       3030 2$:
      00276F AE 36 00         [ 2] 3031 	ldw x,#app_space  
      002772 CF 00 19         [ 2] 3032 	ldw farptr+1,x 
      002775 A6 02            [ 1] 3033 	ld a,#(FLASH_END>>16)&0XFF 
      002777 AE 7F FF         [ 2] 3034 	ldw x,#FLASH_END&0xffff
      00277A                       3035 3$:
      00277A 6B 01            [ 1] 3036 	ld (LIMIT,sp),a 
      00277C 1F 02            [ 2] 3037 	ldw (LIMIT+1,sp),x 
                                   3038  ; operation done from RAM
                                   3039  ; copy code to RAM in tib   
      00277E CD 07 42         [ 4] 3040 	call move_erase_to_ram
      002781                       3041 4$:	 
      002781 CD 08 C4         [ 4] 3042     call scan_block 
      002784 27 08            [ 1] 3043 	jreq 5$  ; block already erased 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      002786 A6 45            [ 1] 3044     ld a,#'E 
      002788 CD 09 44         [ 4] 3045     call putc 
      00278B CD 07 C0         [ 4] 3046 	call block_erase   
                                   3047 ; this block is clean, next  
      00278E AE 00 80         [ 2] 3048 5$:	ldw x,#BLOCK_SIZE
      002791 CD 08 B6         [ 4] 3049 	call incr_farptr
                                   3050 ; check limit, 24 bit substraction  	
      002794 7B 01            [ 1] 3051 	ld a,(LIMIT,sp)
      002796 1E 02            [ 2] 3052 	ldw x,(LIMIT+1,sp)
      002798 72 B0 00 19      [ 2] 3053 	subw x,farptr+1
      00279C C2 00 18         [ 1] 3054 	sbc a,farptr 
      00279F 22 E0            [ 1] 3055 	jrugt 4$ 
      0027A1 CD 15 18         [ 4] 3056 9$: call clear_basic
      0027A4 1E 02            [ 2] 3057 	ldw x,(LIMIT+1,sp)
      0027A6 A3 47 FF         [ 2] 3058 	cpw x,#EEPROM_END
      0027A9 26 03            [ 1] 3059 	jrne 10$
      0027AB CD 1D 3B         [ 4] 3060 	call func_eefree 
      0027AE                       3061 10$:
      0027AE                       3062 	_drop VSIZE 
      0027AE 5B 03            [ 2]    1     addw sp,#VSIZE 
      0027B0 81               [ 4] 3063 	ret 
                                   3064 	
                                   3065 
                                   3066 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3067 ;  check for application signature 
                                   3068 ; output:
                                   3069 ;   Carry    0 app present 
                                   3070 ;            1 no app installed  
                                   3071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027B1                       3072 qsign: 
      0027B1 CE 36 00         [ 2] 3073 	ldw x,app_sign 
      0027B4 C3 28 71         [ 2] 3074 	cpw x,SIGNATURE ; "BC" 
      0027B7 81               [ 4] 3075 	ret 
                                   3076 
                                   3077 ;--------------------------------------
                                   3078 ;  fill write buffer 
                                   3079 ;  input:
                                   3080 ;    y  point to output buffer 
                                   3081 ;    x  point to source 
                                   3082 ;    a  bytes to write in buffer 
                                   3083 ;  output:
                                   3084 ;    y   += A 
                                   3085 ;    X   += A 
                                   3086 ;    A   0 
                                   3087 ;---------------------------------------
      0027B8                       3088 fill_write_buffer:
      0027B8 88               [ 1] 3089 	push a 
      0027B9 4D               [ 1] 3090 	tnz a 
      0027BA 27 0A            [ 1] 3091 	jreq 9$ 
      0027BC F6               [ 1] 3092 1$: ld a,(x)
      0027BD 5C               [ 1] 3093 	incw x 
      0027BE 90 F7            [ 1] 3094 	ld (y),a 
      0027C0 90 5C            [ 1] 3095 	incw y 
      0027C2 0A 01            [ 1] 3096 	dec (1,sp) 
      0027C4 26 F6            [ 1] 3097 	jrne 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      0027C6 84               [ 1] 3098 9$:	pop a 
      0027C7 81               [ 4] 3099     ret 	
                                   3100 
                                   3101 ;--------------------------------------
                                   3102 ;  fill pad buffer with zero 
                                   3103 ;  input:
                                   3104 ;	none 
                                   3105 ;  output:
                                   3106 ;    y     buffer address  
                                   3107 ;--------------------------------------
      0027C8                       3108 clear_block_buffer:
      0027C8 88               [ 1] 3109 	push a 
      0027C9 90 AE 16 B8      [ 2] 3110 	ldw y,#block_buffer 
      0027CD 90 89            [ 2] 3111 	pushw y
      0027CF A6 80            [ 1] 3112 	ld a,#BLOCK_SIZE   
      0027D1 90 7F            [ 1] 3113 1$:	clr (y)
      0027D3 90 5C            [ 1] 3114 	incw y
      0027D5 4A               [ 1] 3115 	dec a  
      0027D6 26 F9            [ 1] 3116 	jrne 1$ 	
      0027D8 90 85            [ 2] 3117 9$: popw y 
      0027DA 84               [ 1] 3118 	pop a 			
      0027DB 81               [ 4] 3119 	ret 
                                   3120 
                                   3121 
                                   3122 ;---------------------------------------
                                   3123 ; BASIC: SAVE
                                   3124 ; write application from RAM to FLASH
                                   3125 ;--------------------------------------
                           000001  3126 	XTEMP=1
                           000003  3127 	COUNT=3  ; last count bytes written 
                           000004  3128 	CNT_LO=4 ; count low byte 
                           000005  3129 	TOWRITE=5 ; how bytes left to write  
                           000006  3130 	VSIZE=6 
      0027DC                       3131 save_app:
      0027DC 89               [ 2] 3132 	pushw x 
      0027DD 90 89            [ 2] 3133 	pushw y 
      0027DF                       3134 	_vars VSIZE
      0027DF 52 06            [ 2]    1     sub sp,#VSIZE 
      0027E1 CD 27 B1         [ 4] 3135 	call qsign 
      0027E4 26 09            [ 1] 3136 	jrne 1$
      0027E6 AE 28 73         [ 2] 3137 	ldw x,#CANT_DO 
      0027E9 CD 09 A1         [ 4] 3138 	call puts 
      0027EC CC 28 6B         [ 2] 3139 	jp 9$
      0027EF                       3140 1$: 
      0027EF CE 00 1B         [ 2] 3141 	ldw x,txtbgn
      0027F2 C3 00 1D         [ 2] 3142 	cpw x,txtend 
      0027F5 25 09            [ 1] 3143 	jrult 2$ 
      0027F7 AE 28 B5         [ 2] 3144 	ldw x,#NO_APP
      0027FA CD 09 A1         [ 4] 3145 	call puts 
      0027FD CC 28 6B         [ 2] 3146 	jp 9$
      002800                       3147 2$: 
                                   3148 ; block programming flash
                                   3149 ; must be done from RAM
                                   3150 ; moved in tib  
      002800 CD 07 82         [ 4] 3151 	call move_prg_to_ram
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



                                   3152 ; initialize farptr 
                                   3153 ; to app_sign address 
      002803 72 5F 00 18      [ 1] 3154 	clr farptr 
      002807 AE 36 00         [ 2] 3155 	ldw x,#app_sign 
      00280A CF 00 19         [ 2] 3156 	ldw farptr+1,x
                                   3157 ; initialize local variables 
      00280D CD 1E 57         [ 4] 3158 	call prog_size
      002810 1F 05            [ 2] 3159 	ldw (TOWRITE,sp),x
      002812 0F 03            [ 1] 3160 	clr (COUNT,sp)
                                   3161 ; first bock 
                                   3162 ; containt signature 2 bytes 
                                   3163 ; and size 	2 bytes 
                                   3164 ; use Y as pointer to block_buffer
      002814 CD 27 C8         [ 4] 3165 	call clear_block_buffer ; -- y=*block_buffer	
                                   3166 ; write signature
      002817 CE 28 71         [ 2] 3167 	ldw x,SIGNATURE ; "BC" 
      00281A 90 FF            [ 2] 3168 	ldw (y),x 
      00281C 72 A9 00 02      [ 2] 3169 	addw y,#2
      002820 1E 05            [ 2] 3170 	ldw x,(TOWRITE,sp)
      002822 90 FF            [ 2] 3171 	ldw (y),x
      002824 72 A9 00 02      [ 2] 3172 	addw y,#2   
      002828 A6 7C            [ 1] 3173 	ld a,#(BLOCK_SIZE-4)
      00282A 6B 04            [ 1] 3174 	ld (CNT_LO,sp),a 
      00282C A3 00 7C         [ 2] 3175 	cpw x,#(BLOCK_SIZE-4) 
      00282F 22 01            [ 1] 3176 	jrugt 3$
      002831 9F               [ 1] 3177 	ld a,xl 
      002832 6B 04            [ 1] 3178 3$:	ld (CNT_LO,sp),a   
      002834 CE 00 1B         [ 2] 3179 	ldw x,txtbgn 
      002837 1F 01            [ 2] 3180 	ldw (XTEMP,sp),x 
      002839                       3181 32$: 
      002839 1E 01            [ 2] 3182 	ldw x,(XTEMP,sp)
      00283B 7B 04            [ 1] 3183 	ld a,(CNT_LO,sp)
      00283D CD 27 B8         [ 4] 3184 	call fill_write_buffer 
      002840 1F 01            [ 2] 3185 	ldw (XTEMP,sp),x 
      002842 AE 16 B8         [ 2] 3186 	ldw x,#block_buffer
      002845 CD 07 9C         [ 4] 3187 	call write_buffer
      002848 AE 00 80         [ 2] 3188 	ldw x,#BLOCK_SIZE 
      00284B CD 08 B6         [ 4] 3189 	call incr_farptr  
                                   3190 ; following blocks 
      00284E 1E 01            [ 2] 3191 	ldw x,(XTEMP,sp)
      002850 C3 00 1D         [ 2] 3192 	cpw x,txtend 
      002853 24 16            [ 1] 3193 	jruge 9$ 
      002855 1E 05            [ 2] 3194 	ldw x,(TOWRITE,sp)
      002857 72 F0 03         [ 2] 3195 	subw x,(COUNT,sp)
      00285A 1F 05            [ 2] 3196 	ldw (TOWRITE,sp),x 
      00285C A6 80            [ 1] 3197 	ld a,#BLOCK_SIZE 
      00285E A3 00 80         [ 2] 3198 	cpw x,#BLOCK_SIZE 
      002861 24 01            [ 1] 3199 	jruge 4$ 
      002863 9F               [ 1] 3200 	ld a,xl 
      002864 6B 04            [ 1] 3201 4$:	ld (CNT_LO,sp),a 
      002866 CD 27 C8         [ 4] 3202 	call clear_block_buffer 
      002869 20 CE            [ 2] 3203 	jra 32$ 
      00286B                       3204 9$:	_drop VSIZE 
      00286B 5B 06            [ 2]    1     addw sp,#VSIZE 
      00286D 90 85            [ 2] 3205     popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      00286F 85               [ 2] 3206 	popw x 
      002870 81               [ 4] 3207 	ret 
                                   3208 
                                   3209 
      002871 42 43                 3210 SIGNATURE: .ascii "BC"
      002873 43 61 6E 27 74 20 66  3211 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      0028B5 4E 6F 20 61 70 70 6C  3212 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3213 
                                   3214 ;---------------------
                                   3215 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3216 ; write 1 or more byte to FLASH or EEPROM
                                   3217 ; starting at address  
                                   3218 ; input:
                                   3219 ;   expr1  	is address 
                                   3220 ;   expr2,...,exprn   are bytes to write
                                   3221 ; output:
                                   3222 ;   none 
                                   3223 ;---------------------
      0028CB                       3224 write:
      0028CB CD 1A A6         [ 4] 3225 	call expression
      0028CE A1 84            [ 1] 3226 	cp a,#TK_INTGR 
      0028D0 27 03            [ 1] 3227 	jreq 0$
      0028D2 CC 16 BC         [ 2] 3228 	jp syntax_error
      0028D5                       3229 0$: _xpop 
      0028D5 90 F6            [ 1]    1     ld a,(y)
      0028D7 93               [ 1]    2     ldw x,y 
      0028D8 EE 01            [ 2]    3     ldw x,(1,x)
      0028DA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028DE C7 00 18         [ 1] 3230 	ld farptr,a 
      0028E1 CF 00 19         [ 2] 3231 	ldw ptr16,x 
      0028E4                       3232 1$:	
      0028E4 CD 17 BD         [ 4] 3233 	call next_token 
      0028E7 A1 08            [ 1] 3234 	cp a,#TK_COMMA 
      0028E9 27 02            [ 1] 3235 	jreq 2$ 
      0028EB 20 20            [ 2] 3236 	jra 9$ ; no more data 
      0028ED CD 1A A6         [ 4] 3237 2$:	call expression
      0028F0 A1 84            [ 1] 3238 	cp a,#TK_INTGR
      0028F2 27 03            [ 1] 3239 	jreq 3$
      0028F4 CC 16 BC         [ 2] 3240 	jp syntax_error
      0028F7                       3241 3$:	_xpop 
      0028F7 90 F6            [ 1]    1     ld a,(y)
      0028F9 93               [ 1]    2     ldw x,y 
      0028FA EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      0028FC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002900 9F               [ 1] 3242 	ld a,xl 
      002901 5F               [ 1] 3243 	clrw x 
      002902 CD 07 E6         [ 4] 3244 	call write_byte
      002905 AE 00 01         [ 2] 3245 	ldw x,#1 
      002908 CD 08 B6         [ 4] 3246 	call incr_farptr 
      00290B 20 D7            [ 2] 3247 	jra 1$ 
      00290D                       3248 9$:
      00290D 81               [ 4] 3249 	ret 
                                   3250 
                                   3251 
                                   3252 ;---------------------
                                   3253 ;BASIC: CHAR(expr)
                                   3254 ; évaluate expression 
                                   3255 ; and take the 7 least 
                                   3256 ; bits as ASCII character
                                   3257 ; output: 
                                   3258 ; 	A char 
                                   3259 ;---------------------
      00290E                       3260 char:
      00290E CD 19 76         [ 4] 3261 	call func_args 
      002911 A1 01            [ 1] 3262 	cp a,#1
      002913 27 03            [ 1] 3263 	jreq 1$
      002915 CC 16 BC         [ 2] 3264 	jp syntax_error
      002918                       3265 1$:	_xpop
      002918 90 F6            [ 1]    1     ld a,(y)
      00291A 93               [ 1]    2     ldw x,y 
      00291B EE 01            [ 2]    3     ldw x,(1,x)
      00291D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002921 9F               [ 1] 3266 	ld a,xl
      002922 A4 7F            [ 1] 3267 	and a,#0x7f 
      002924 81               [ 4] 3268 	ret
                                   3269 
                                   3270 ;---------------------
                                   3271 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3272 ; extract first character 
                                   3273 ; of string argument 
                                   3274 ; output:
                                   3275 ;    A:X    int24 
                                   3276 ;---------------------
      002925                       3277 ascii:
      002925 A6 06            [ 1] 3278 	ld a,#TK_LPAREN
      002927 CD 19 69         [ 4] 3279 	call expect 
      00292A CD 17 BD         [ 4] 3280 	call next_token 
      00292D A1 02            [ 1] 3281 	cp a,#TK_QSTR 
      00292F 27 0E            [ 1] 3282 	jreq 1$
      002931 A1 04            [ 1] 3283 	cp a,#TK_CHAR 
      002933 27 12            [ 1] 3284 	jreq 2$ 
      002935 A1 82            [ 1] 3285 	cp a,#TK_CFUNC 
      002937 27 03            [ 1] 3286 	jreq 0$
      002939 CC 16 BC         [ 2] 3287 	jp syntax_error
      00293C                       3288 0$: ; cfunc 
      00293C FD               [ 4] 3289 	call (x)
      00293D 20 0B            [ 2] 3290 	jra 3$
      00293F                       3291 1$: ; quoted string 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      00293F F6               [ 1] 3292 	ld a,(x)
      002940 88               [ 1] 3293 	push a  
      002941 CD 17 E3         [ 4] 3294 	call skip_string
      002944 84               [ 1] 3295 	pop a  	
      002945 20 03            [ 2] 3296 	jra 3$ 
      002947                       3297 2$: ; character 
      002947 CD 18 0C         [ 4] 3298 	call get_char 
      00294A 5F               [ 1] 3299 3$:	clrw x 
      00294B 02               [ 1] 3300 	rlwa x   
      00294C                       3301 4$:	_xpush  
      00294C 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002950 90 F7            [ 1]    2     ld (y),a 
      002952 90 EF 01         [ 2]    3     ldw (1,y),x 
      002955 A6 07            [ 1] 3302 	ld a,#TK_RPAREN 
      002957 CD 19 69         [ 4] 3303 	call expect
      00295A                       3304 9$:	
      00295A                       3305 	_xpop  
      00295A 90 F6            [ 1]    1     ld a,(y)
      00295C 93               [ 1]    2     ldw x,y 
      00295D EE 01            [ 2]    3     ldw x,(1,x)
      00295F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002963 81               [ 4] 3306 	ret 
                                   3307 
                                   3308 ;---------------------
                                   3309 ;BASIC: KEY
                                   3310 ; wait for a character 
                                   3311 ; received from STDIN 
                                   3312 ; input:
                                   3313 ;	none 
                                   3314 ; output:
                                   3315 ;	a	 character 
                                   3316 ;---------------------
      002964                       3317 key:
      002964 CD 09 54         [ 4] 3318 	call getc 
      002967 81               [ 4] 3319 	ret
                                   3320 
                                   3321 ;----------------------
                                   3322 ; BASIC: QKEY
                                   3323 ; Return true if there 
                                   3324 ; is a character in 
                                   3325 ; waiting in STDIN 
                                   3326 ; input:
                                   3327 ;  none 
                                   3328 ; output:
                                   3329 ;   A     0|-1
                                   3330 ;-----------------------
      002968                       3331 qkey:: 
      002968 5F               [ 1] 3332 	clrw x 
      002969 C6 00 2E         [ 1] 3333 	ld a,rx1_head
      00296C C0 00 2F         [ 1] 3334 	sub a,rx1_tail 
      00296F 27 03            [ 1] 3335 	jreq 9$ 
      002971 53               [ 2] 3336 	cplw x
      002972 A6 FF            [ 1] 3337 	ld a,#255    
      002974                       3338 9$: 
      002974 81               [ 4] 3339 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



                                   3340 
                                   3341 ;---------------------
                                   3342 ; BASIC: GPIO(port,reg)
                                   3343 ; return gpio register address 
                                   3344 ; expr {PORTA..PORTI}
                                   3345 ; input:
                                   3346 ;   none 
                                   3347 ; output:
                                   3348 ;   A:X 	gpio register address
                                   3349 ;----------------------------
                                   3350 ;	N=PORT
                                   3351 ;	T=REG 
      002975                       3352 gpio:
      002975 CD 19 76         [ 4] 3353 	call func_args 
      002978 A1 02            [ 1] 3354 	cp a,#2
      00297A 27 03            [ 1] 3355 	jreq 1$
      00297C CC 16 BC         [ 2] 3356 	jp syntax_error  
      00297F                       3357 1$:	_at_next 
      00297F 90 E6 03         [ 1]    1     ld a,(3,y)
      002982 93               [ 1]    2     ldw x,y 
      002983 EE 04            [ 2]    3     ldw x,(4,x)
      002985 A3 50 00         [ 2] 3358 	cpw x,#PA_BASE 
      002988 2B 16            [ 1] 3359 	jrmi bad_port
      00298A A3 50 29         [ 2] 3360 	cpw x,#PI_BASE+1 
      00298D 2A 11            [ 1] 3361 	jrpl bad_port
      00298F 89               [ 2] 3362 	pushw x 
      002990                       3363 	_xpop
      002990 90 F6            [ 1]    1     ld a,(y)
      002992 93               [ 1]    2     ldw x,y 
      002993 EE 01            [ 2]    3     ldw x,(1,x)
      002995 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002999 72 FB 01         [ 2] 3364 	addw x,(1,sp)
      00299C                       3365 	_drop 2 
      00299C 5B 02            [ 2]    1     addw sp,#2 
      00299E 4F               [ 1] 3366 	clr a 
      00299F 81               [ 4] 3367 	ret
      0029A0                       3368 bad_port:
      0029A0 A6 0A            [ 1] 3369 	ld a,#ERR_BAD_VALUE
      0029A2 CC 16 BE         [ 2] 3370 	jp tb_error
                                   3371 
                                   3372 
                                   3373 ;-------------------------
                                   3374 ; BASIC: UFLASH 
                                   3375 ; return free flash address
                                   3376 ; input:
                                   3377 ;  none 
                                   3378 ; output:
                                   3379 ;	A		TK_INTGR
                                   3380 ;   xstack	free address 
                                   3381 ;---------------------------
      0029A5                       3382 uflash:
      0029A5 CE 36 00         [ 2] 3383 	ldw x,app_sign
      0029A8 A3 10 93         [ 2] 3384 	cpw x,#4243 ; signature "BC" 
      0029AB 27 08            [ 1] 3385 	jreq 1$
      0029AD CE 36 02         [ 2] 3386 	ldw x,app_size 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      0029B0 1C 36 04         [ 2] 3387 	addw x,#app
      0029B3 20 03            [ 2] 3388 	jra 2$
      0029B5 AE 36 00         [ 2] 3389 1$:	ldw x,#app_space 
      0029B8 4F               [ 1] 3390 2$:	clr a 
      0029B9 81               [ 4] 3391 	ret 
                                   3392 
                                   3393 
                                   3394 ;---------------------
                                   3395 ; BASIC: USR(addr[,arg])
                                   3396 ; execute a function written 
                                   3397 ; in binary code.
                                   3398 ; binary fonction should 
                                   3399 ; return token attribute in A 
                                   3400 ; and value in YL:X. 
                                   3401 ; input:
                                   3402 ;   addr	routine address 
                                   3403 ;   arg 	is an optional argument 
                                   3404 ; output:
                                   3405 ;   A 		token attribute 
                                   3406 ;   xstack  returned value 
                                   3407 ;---------------------
      0029BA                       3408 usr:
      0029BA 89               [ 2] 3409 	pushw x 
      0029BB 90 89            [ 2] 3410 	pushw y 	
      0029BD CD 19 76         [ 4] 3411 	call func_args 
      0029C0 A1 01            [ 1] 3412 	cp a,#1 
      0029C2 27 07            [ 1] 3413 	jreq 1$
      0029C4 A1 02            [ 1] 3414 	cp a,#2
      0029C6 27 03            [ 1] 3415 	jreq 1$  
      0029C8 CC 16 BC         [ 2] 3416 	jp syntax_error 
      0029CB 88               [ 1] 3417 1$: push a 
      0029CC                       3418 	_xpop 
      0029CC 90 F6            [ 1]    1     ld a,(y)
      0029CE 93               [ 1]    2     ldw x,y 
      0029CF EE 01            [ 2]    3     ldw x,(1,x)
      0029D1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029D5 90 93            [ 1] 3419 	ldw y,x  ; arg|addr 
      0029D7 84               [ 1] 3420     pop a 
      0029D8 A1 01            [ 1] 3421 	cp a,#1 
      0029DA 27 0A            [ 1] 3422 	jreq 3$
      0029DC                       3423 	_xpop  ; x=code addr  
      0029DC 90 F6            [ 1]    1     ld a,(y)
      0029DE 93               [ 1]    2     ldw x,y 
      0029DF EE 01            [ 2]    3     ldw x,(1,x)
      0029E1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029E5 51               [ 1] 3424 	exgw x,y ; y=code addr, x=arg 
      0029E6 90 FD            [ 4] 3425 3$: call (y)
      0029E8 88               [ 1] 3426 	push a 
      0029E9 90 9F            [ 1] 3427 	ld a,yl  
      0029EB                       3428 	_xpush 
      0029EB 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0029EF 90 F7            [ 1]    2     ld (y),a 
      0029F1 90 EF 01         [ 2]    3     ldw (1,y),x 
      0029F4 84               [ 1] 3429 	pop a 
      0029F5 90 85            [ 2] 3430 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      0029F7 85               [ 2] 3431 	popw x 
      0029F8 81               [ 4] 3432 	ret 
                                   3433 
                                   3434 
                                   3435 ;------------------------------
                                   3436 ; BASIC: BYE 
                                   3437 ; halt mcu in its lowest power mode 
                                   3438 ; wait for reset or external interrupt
                                   3439 ; do a cold start on wakeup.
                                   3440 ;------------------------------
      0029F9                       3441 bye:
      0029F9 72 0D 52 30 FB   [ 2] 3442 	btjf UART1_SR,#UART_SR_TC,.
      0029FE 8E               [10] 3443 	halt
      0029FF CC 00 C3         [ 2] 3444 	jp cold_start  
                                   3445 
                                   3446 ;----------------------------------
                                   3447 ; BASIC: SLEEP 
                                   3448 ; halt mcu until reset or external
                                   3449 ; interrupt.
                                   3450 ; Resume progam after SLEEP command
                                   3451 ;----------------------------------
      002A02                       3452 sleep:
      002A02 72 0D 52 30 FB   [ 2] 3453 	btjf UART1_SR,#UART_SR_TC,.
      002A07 72 16 00 22      [ 1] 3454 	bset flags,#FSLEEP
      002A0B 8E               [10] 3455 	halt 
      002A0C 81               [ 4] 3456 	ret 
                                   3457 
                                   3458 ;-------------------------------
                                   3459 ; BASIC: PAUSE expr 
                                   3460 ; suspend execution for n msec.
                                   3461 ; input:
                                   3462 ;	none
                                   3463 ; output:
                                   3464 ;	none 
                                   3465 ;------------------------------
      002A0D                       3466 pause:
      002A0D CD 1A A6         [ 4] 3467 	call expression
      002A10 A1 84            [ 1] 3468 	cp a,#TK_INTGR
      002A12 27 03            [ 1] 3469 	jreq 1$ 
      002A14 CC 16 BC         [ 2] 3470 	jp syntax_error
      002A17                       3471 1$: _xpop 
      002A17 90 F6            [ 1]    1     ld a,(y)
      002A19 93               [ 1]    2     ldw x,y 
      002A1A EE 01            [ 2]    3     ldw x,(1,x)
      002A1C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A20                       3472 pause02:
      002A20 CF 00 12         [ 2] 3473 	ldw timer,x 
      002A23 CE 00 12         [ 2] 3474 1$: ldw x,timer 
      002A26 5D               [ 2] 3475 	tnzw x 
      002A27 27 03            [ 1] 3476 	jreq 2$
      002A29 8F               [10] 3477 	wfi 
      002A2A 26 F7            [ 1] 3478 	jrne 1$
      002A2C 4F               [ 1] 3479 2$:	clr a 
      002A2D 81               [ 4] 3480 	ret 
                                   3481 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



                                   3482 ;------------------------------
                                   3483 ; BASIC: AWU expr
                                   3484 ; halt mcu for 'expr' milliseconds
                                   3485 ; use Auto wakeup peripheral
                                   3486 ; all oscillators stopped except LSI
                                   3487 ; range: 1ms - 511ms
                                   3488 ; input:
                                   3489 ;  none
                                   3490 ; output:
                                   3491 ;  none:
                                   3492 ;------------------------------
      002A2E                       3493 awu:
      002A2E CD 1A A6         [ 4] 3494   call expression
      002A31 A1 84            [ 1] 3495   cp a,#TK_INTGR
      002A33 27 03            [ 1] 3496   jreq 1$
      002A35 CC 16 BC         [ 2] 3497   jp syntax_error
      002A38                       3498 1$: _xpop 
      002A38 90 F6            [ 1]    1     ld a,(y)
      002A3A 93               [ 1]    2     ldw x,y 
      002A3B EE 01            [ 2]    3     ldw x,(1,x)
      002A3D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A41                       3499 awu02:
      002A41 A3 14 00         [ 2] 3500   cpw x,#5120
      002A44 2B 0C            [ 1] 3501   jrmi 1$ 
      002A46 35 0F 50 F2      [ 1] 3502   mov AWU_TBR,#15 
      002A4A A6 1E            [ 1] 3503   ld a,#30
      002A4C 62               [ 2] 3504   div x,a
      002A4D A6 10            [ 1] 3505   ld a,#16
      002A4F 62               [ 2] 3506   div x,a 
      002A50 20 1E            [ 2] 3507   jra 4$
      002A52                       3508 1$: 
      002A52 A3 08 00         [ 2] 3509   cpw x,#2048
      002A55 2B 09            [ 1] 3510   jrmi 2$ 
      002A57 35 0E 50 F2      [ 1] 3511   mov AWU_TBR,#14
      002A5B A6 50            [ 1] 3512   ld a,#80
      002A5D 62               [ 2] 3513   div x,a 
      002A5E 20 10            [ 2] 3514   jra 4$   
      002A60                       3515 2$:
      002A60 35 07 50 F2      [ 1] 3516   mov AWU_TBR,#7
      002A64                       3517 3$:  
                                   3518 ; while X > 64  divide by 2 and increment AWU_TBR 
      002A64 A3 00 40         [ 2] 3519   cpw x,#64 
      002A67 23 07            [ 2] 3520   jrule 4$ 
      002A69 72 5C 50 F2      [ 1] 3521   inc AWU_TBR 
      002A6D 54               [ 2] 3522   srlw x 
      002A6E 20 F4            [ 2] 3523   jra 3$ 
      002A70                       3524 4$:
      002A70 9F               [ 1] 3525   ld a, xl
      002A71 4A               [ 1] 3526   dec a 
      002A72 27 01            [ 1] 3527   jreq 5$
      002A74 4A               [ 1] 3528   dec a 	
      002A75                       3529 5$: 
      002A75 A4 3E            [ 1] 3530   and a,#0x3e 
      002A77 C7 50 F1         [ 1] 3531   ld AWU_APR,a 
      002A7A 72 18 50 F0      [ 1] 3532   bset AWU_CSR,#AWU_CSR_AWUEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002A7E 8E               [10] 3533   halt 
                                   3534 
      002A7F 81               [ 4] 3535   ret 
                                   3536 
                                   3537 ;------------------------------
                                   3538 ; BASIC: TICKS
                                   3539 ; return msec ticks counter value 
                                   3540 ; input:
                                   3541 ; 	none 
                                   3542 ; output:
                                   3543 ;	X 		TK_INTGR
                                   3544 ;-------------------------------
      002A80                       3545 get_ticks:
      002A80 C6 00 0F         [ 1] 3546 	ld a,ticks 
      002A83 CE 00 10         [ 2] 3547 	ldw x,ticks+1 
      002A86 81               [ 4] 3548 	ret 
                                   3549 
                                   3550 ;------------------------------
                                   3551 ; BASIC: ABS(expr)
                                   3552 ; return absolute value of expr.
                                   3553 ; input:
                                   3554 ;   none
                                   3555 ; output:
                                   3556 ;   xstack    positive int24 
                                   3557 ;-------------------------------
      002A87                       3558 abs:
      002A87 CD 19 76         [ 4] 3559 	call func_args 
      002A8A A1 01            [ 1] 3560 	cp a,#1 
      002A8C 27 03            [ 1] 3561 	jreq 0$ 
      002A8E CC 16 BC         [ 2] 3562 	jp syntax_error
      002A91                       3563 0$:  
      002A91 CD 01 DF         [ 4] 3564 	call abs24 
      002A94                       3565 	_xpop 
      002A94 90 F6            [ 1]    1     ld a,(y)
      002A96 93               [ 1]    2     ldw x,y 
      002A97 EE 01            [ 2]    3     ldw x,(1,x)
      002A99 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A9D 81               [ 4] 3566 	ret 
                                   3567 
                                   3568 ;------------------------------
                                   3569 ; BASIC: LSHIFT(expr1,expr2)
                                   3570 ; logical shift left expr1 by 
                                   3571 ; expr2 bits 
                                   3572 ; output:
                                   3573 ; 	A 		TK_INTGR
                                   3574 ;   X 		result 
                                   3575 ;------------------------------
      002A9E                       3576 lshift:
      002A9E CD 19 76         [ 4] 3577 	call func_args
      002AA1 A1 02            [ 1] 3578 	cp a,#2 
      002AA3 27 03            [ 1] 3579 	jreq 1$
      002AA5 CC 16 BC         [ 2] 3580 	jp syntax_error
      002AA8                       3581 1$: _xpop 
      002AA8 90 F6            [ 1]    1     ld a,(y)
      002AAA 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002AAB EE 01            [ 2]    3     ldw x,(1,x)
      002AAD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AB1 90 93            [ 1] 3582     ldw y,x    
      002AB3                       3583 	_at_top  ; T@ 
      002AB3 90 F6            [ 1]    1     ld a,(y)
      002AB5 93               [ 1]    2     ldw x,y 
      002AB6 EE 01            [ 2]    3     ldw x,(1,x)
      002AB8 90 5D            [ 2] 3584 	tnzw y 
      002ABA 27 07            [ 1] 3585 	jreq 4$
      002ABC 98               [ 1] 3586 2$:	rcf 
      002ABD 59               [ 2] 3587 	rlcw x 
      002ABE 49               [ 1] 3588 	rlc a 
      002ABF 90 5A            [ 2] 3589 	decw y 
      002AC1 26 F9            [ 1] 3590 	jrne 2$
      002AC3                       3591 4$: _store_top  ; T! 
      002AC3 90 F7            [ 1]    1     ld (y),a 
      002AC5 90 EF 01         [ 2]    2     ldw (1,y),x     
      002AC8 A6 84            [ 1] 3592 	ld a,#TK_INTGR
      002ACA 81               [ 4] 3593 	ret
                                   3594 
                                   3595 ;------------------------------
                                   3596 ; BASIC: RSHIFT(expr1,expr2)
                                   3597 ; logical shift right expr1 by 
                                   3598 ; expr2 bits.
                                   3599 ; output:
                                   3600 ; 	A 		TK_INTGR
                                   3601 ;   X 		result 
                                   3602 ;------------------------------
      002ACB                       3603 rshift:
      002ACB CD 19 76         [ 4] 3604 	call func_args
      002ACE A1 02            [ 1] 3605 	cp a,#2 
      002AD0 27 03            [ 1] 3606 	jreq 1$
      002AD2 CC 16 BC         [ 2] 3607 	jp syntax_error
      002AD5                       3608 1$: _xpop 
      002AD5 90 F6            [ 1]    1     ld a,(y)
      002AD7 93               [ 1]    2     ldw x,y 
      002AD8 EE 01            [ 2]    3     ldw x,(1,x)
      002ADA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ADE 90 93            [ 1] 3609     ldw y,x   
      002AE0                       3610 	_at_top  ; T@  
      002AE0 90 F6            [ 1]    1     ld a,(y)
      002AE2 93               [ 1]    2     ldw x,y 
      002AE3 EE 01            [ 2]    3     ldw x,(1,x)
      002AE5 90 5D            [ 2] 3611 	tnzw y 
      002AE7 27 07            [ 1] 3612 	jreq 4$
      002AE9 98               [ 1] 3613 2$:	rcf 
      002AEA 56               [ 2] 3614 	rrcw x
      002AEB 46               [ 1] 3615 	rrc a  
      002AEC 90 5A            [ 2] 3616 	decw y 
      002AEE 26 F9            [ 1] 3617 	jrne 2$
      002AF0                       3618 4$: _store_top  ; T! 
      002AF0 90 F7            [ 1]    1     ld (y),a 
      002AF2 90 EF 01         [ 2]    2     ldw (1,y),x     
      002AF5 A6 84            [ 1] 3619 	ld a,#TK_INTGR
      002AF7 81               [ 4] 3620 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



                                   3621 
                                   3622 ;--------------------------
                                   3623 ; BASIC: FCPU integer
                                   3624 ; set CPU frequency 
                                   3625 ;-------------------------- 
                                   3626 
      002AF8                       3627 fcpu:
      002AF8 A6 84            [ 1] 3628 	ld a,#TK_INTGR
      002AFA CD 19 69         [ 4] 3629 	call expect 
      002AFD CD 17 FC         [ 4] 3630 	call get_int24 
      002B00 9F               [ 1] 3631 	ld a,xl 
      002B01 A4 07            [ 1] 3632 	and a,#7 
      002B03 C7 50 C6         [ 1] 3633 	ld CLK_CKDIVR,a 
      002B06 81               [ 4] 3634 	ret 
                                   3635 
                                   3636 ;------------------------------
                                   3637 ; BASIC: PMODE pin#, mode 
                                   3638 ; Arduino pin. 
                                   3639 ; define pin as input or output
                                   3640 ; pin#: {0..15}
                                   3641 ; mode: INPUT|OUTPUT  
                                   3642 ;------------------------------
                           000001  3643 	PINNO=1
                           000001  3644 	VSIZE=1
      002B07                       3645 pin_mode:
      002B07                       3646 	_vars VSIZE 
      002B07 52 01            [ 2]    1     sub sp,#VSIZE 
      002B09 CD 19 7B         [ 4] 3647 	call arg_list 
      002B0C A1 02            [ 1] 3648 	cp a,#2 
      002B0E 27 03            [ 1] 3649 	jreq 1$
      002B10 CC 16 BC         [ 2] 3650 	jp syntax_error 
      002B13                       3651 1$: _xpop 
      002B13 90 F6            [ 1]    1     ld a,(y)
      002B15 93               [ 1]    2     ldw x,y 
      002B16 EE 01            [ 2]    3     ldw x,(1,x)
      002B18 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B1C 90 93            [ 1] 3652 	ldw y,x ; mode 
      002B1E                       3653 	_xpop ; Dx pin 
      002B1E 90 F6            [ 1]    1     ld a,(y)
      002B20 93               [ 1]    2     ldw x,y 
      002B21 EE 01            [ 2]    3     ldw x,(1,x)
      002B23 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B27 CD 2B 64         [ 4] 3654 	call select_pin 
      002B2A 6B 01            [ 1] 3655 	ld (PINNO,sp),a  
      002B2C A6 01            [ 1] 3656 	ld a,#1 
      002B2E 0D 01            [ 1] 3657 	tnz (PINNO,sp)
      002B30 27 0D            [ 1] 3658 	jreq 4$
      002B32 48               [ 1] 3659 2$:	sll a 
      002B33 0A 01            [ 1] 3660 	dec (PINNO,sp)
      002B35 26 FB            [ 1] 3661 	jrne 2$ 
      002B37 6B 01            [ 1] 3662 	ld (PINNO,sp),a
      002B39 7B 01            [ 1] 3663 	ld a,(PINNO,sp)
      002B3B EA 03            [ 1] 3664 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002B3D E7 03            [ 1] 3665 	ld (GPIO_CR1,x),a 
      002B3F 90 A3 00 01      [ 2] 3666 4$:	cpw y,#OUTP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002B43 27 10            [ 1] 3667 	jreq 6$
                                   3668 ; input mode
                                   3669 ; disable external interrupt 
      002B45 7B 01            [ 1] 3670 	ld a,(PINNO,sp)
      002B47 43               [ 1] 3671 	cpl a 
      002B48 E4 04            [ 1] 3672 	and a,(GPIO_CR2,x)
      002B4A E7 04            [ 1] 3673 	ld (GPIO_CR2,x),a 
                                   3674 ;clear bit in DDR for input mode 
      002B4C 7B 01            [ 1] 3675 	ld a,(PINNO,sp)
      002B4E 43               [ 1] 3676 	cpl a 
      002B4F E4 02            [ 1] 3677 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002B51 E7 02            [ 1] 3678 	ld (GPIO_DDR,x),a 
      002B53 20 0C            [ 2] 3679 	jra 9$
      002B55                       3680 6$: ;output mode  
      002B55 7B 01            [ 1] 3681 	ld a,(PINNO,sp)
      002B57 EA 02            [ 1] 3682 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002B59 E7 02            [ 1] 3683 	ld (GPIO_DDR,x),a 
      002B5B 7B 01            [ 1] 3684 	ld a,(PINNO,sp)
      002B5D EA 04            [ 1] 3685 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002B5F E7 04            [ 1] 3686 	ld (GPIO_CR2,x),a 
      002B61                       3687 9$:	
      002B61                       3688 	_drop VSIZE 
      002B61 5B 01            [ 2]    1     addw sp,#VSIZE 
      002B63 81               [ 4] 3689 	ret
                                   3690 
                                   3691 ;------------------------
                                   3692 ; select Arduino pin 
                                   3693 ; input:
                                   3694 ;   X 	 {0..15} Arduino Dx 
                                   3695 ; output:
                                   3696 ;   A     stm8s208 pin 
                                   3697 ;   X     base address s208 GPIO port 
                                   3698 ;---------------------------
      002B64                       3699 select_pin:
      002B64 58               [ 2] 3700 	sllw x 
      002B65 1C 2B 74         [ 2] 3701 	addw x,#arduino_to_8s208 
      002B68 FE               [ 2] 3702 	ldw x,(x)
      002B69 9F               [ 1] 3703 	ld a,xl 
      002B6A 88               [ 1] 3704 	push a 
      002B6B 5E               [ 1] 3705 	swapw x 
      002B6C A6 05            [ 1] 3706 	ld a,#5 
      002B6E 42               [ 4] 3707 	mul x,a 
      002B6F 1C 50 00         [ 2] 3708 	addw x,#GPIO_BASE 
      002B72 84               [ 1] 3709 	pop a 
      002B73 81               [ 4] 3710 	ret 
                                   3711 ; translation from Arduino D0..D15 to stm8s208rb 
      002B74                       3712 arduino_to_8s208:
      002B74 03 06                 3713 .byte 3,6 ; D0 
      002B76 03 05                 3714 .byte 3,5 ; D1 
      002B78 04 00                 3715 .byte 4,0 ; D2 
      002B7A 02 01                 3716 .byte 2,1 ; D3
      002B7C 06 00                 3717 .byte 6,0 ; D4
      002B7E 02 02                 3718 .byte 2,2 ; D5
      002B80 02 03                 3719 .byte 2,3 ; D6
      002B82 03 01                 3720 .byte 3,1 ; D7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002B84 03 03                 3721 .byte 3,3 ; D8
      002B86 02 04                 3722 .byte 2,4 ; D9
      002B88 04 05                 3723 .byte 4,5 ; D10
      002B8A 02 06                 3724 .byte 2,6 ; D11
      002B8C 02 07                 3725 .byte 2,7 ; D12
      002B8E 02 05                 3726 .byte 2,5 ; D13
      002B90 04 02                 3727 .byte 4,2 ; D14
      002B92 04 01                 3728 .byte 4,1 ; D15
                                   3729 
                                   3730 
                                   3731 ;------------------------------
                                   3732 ; BASIC: RND(expr)
                                   3733 ; return random number 
                                   3734 ; between 1 and expr inclusive
                                   3735 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3736 ; input:
                                   3737 ; 	none 
                                   3738 ; output:
                                   3739 ;	xstack 	random positive integer 
                                   3740 ;------------------------------
      002B94                       3741 random:
      002B94 CD 19 76         [ 4] 3742 	call func_args 
      002B97 A1 01            [ 1] 3743 	cp a,#1
      002B99 27 03            [ 1] 3744 	jreq 1$
      002B9B CC 16 BC         [ 2] 3745 	jp syntax_error
      002B9E                       3746 1$:  
      002B9E                       3747 	_xpop   
      002B9E 90 F6            [ 1]    1     ld a,(y)
      002BA0 93               [ 1]    2     ldw x,y 
      002BA1 EE 01            [ 2]    3     ldw x,(1,x)
      002BA3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BA7 89               [ 2] 3748 	pushw x 
      002BA8 88               [ 1] 3749 	push a  
      002BA9 A6 80            [ 1] 3750 	ld a,#0x80 
      002BAB 15 01            [ 1] 3751 	bcp a,(1,sp)
      002BAD 27 05            [ 1] 3752 	jreq 2$
      002BAF A6 0A            [ 1] 3753 	ld a,#ERR_BAD_VALUE
      002BB1 CC 16 BE         [ 2] 3754 	jp tb_error
      002BB4                       3755 2$: 
                                   3756 ; acc16=(x<<5)^x 
      002BB4 CE 00 14         [ 2] 3757 	ldw x,seedx 
      002BB7 58               [ 2] 3758 	sllw x 
      002BB8 58               [ 2] 3759 	sllw x 
      002BB9 58               [ 2] 3760 	sllw x 
      002BBA 58               [ 2] 3761 	sllw x 
      002BBB 58               [ 2] 3762 	sllw x 
      002BBC 9E               [ 1] 3763 	ld a,xh 
      002BBD C8 00 14         [ 1] 3764 	xor a,seedx 
      002BC0 C7 00 0D         [ 1] 3765 	ld acc16,a 
      002BC3 9F               [ 1] 3766 	ld a,xl 
      002BC4 C8 00 15         [ 1] 3767 	xor a,seedx+1 
      002BC7 C7 00 0E         [ 1] 3768 	ld acc8,a 
                                   3769 ; seedx=seedy 
      002BCA CE 00 16         [ 2] 3770 	ldw x,seedy 
      002BCD CF 00 14         [ 2] 3771 	ldw seedx,x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



                                   3772 ; seedy=seedy^(seedy>>1)
      002BD0 CE 00 16         [ 2] 3773 	ldw x,seedy 
      002BD3 54               [ 2] 3774 	srlw x 
      002BD4 9E               [ 1] 3775 	ld a,xh 
      002BD5 C8 00 16         [ 1] 3776 	xor a,seedy 
      002BD8 C7 00 16         [ 1] 3777 	ld seedy,a  
      002BDB 9F               [ 1] 3778 	ld a,xl 
      002BDC C8 00 17         [ 1] 3779 	xor a,seedy+1 
      002BDF C7 00 17         [ 1] 3780 	ld seedy+1,a 
                                   3781 ; acc16>>3 
      002BE2 CE 00 0D         [ 2] 3782 	ldw x,acc16 
      002BE5 54               [ 2] 3783 	srlw x 
      002BE6 54               [ 2] 3784 	srlw x 
      002BE7 54               [ 2] 3785 	srlw x 
                                   3786 ; x=acc16^x 
      002BE8 9E               [ 1] 3787 	ld a,xh 
      002BE9 C8 00 0D         [ 1] 3788 	xor a,acc16 
      002BEC C7 00 0D         [ 1] 3789 	ld acc16,a 
      002BEF 9F               [ 1] 3790 	ld a,xl 
      002BF0 C8 00 0E         [ 1] 3791 	xor a,acc8 
      002BF3 C7 00 0E         [ 1] 3792 	ld acc8,a 
                                   3793 ; seedy=acc16^seedy 
      002BF6 C8 00 17         [ 1] 3794 	xor a,seedy+1
      002BF9 97               [ 1] 3795 	ld xl,a 
      002BFA C6 00 0D         [ 1] 3796 	ld a,acc16 
      002BFD C8 00 16         [ 1] 3797 	xor a,seedy
      002C00 95               [ 1] 3798 	ld xh,a 
      002C01 CF 00 16         [ 2] 3799 	ldw seedy,x 
                                   3800 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002C04 C6 00 15         [ 1] 3801 	ld a,seedx+1
      002C07 A4 7F            [ 1] 3802 	and a,#127
      002C09                       3803 	_xpush 
      002C09 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C0D 90 F7            [ 1]    2     ld (y),a 
      002C0F 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C12 84               [ 1] 3804 	pop a 
      002C13 85               [ 2] 3805 	popw x 
      002C14                       3806 	_xpush 
      002C14 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C18 90 F7            [ 1]    2     ld (y),a 
      002C1A 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C1D CD 03 D5         [ 4] 3807 	call mod24 
      002C20                       3808 	_xpop
      002C20 90 F6            [ 1]    1     ld a,(y)
      002C22 93               [ 1]    2     ldw x,y 
      002C23 EE 01            [ 2]    3     ldw x,(1,x)
      002C25 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C29 1C 00 01         [ 2] 3809 	addw x,#1 
      002C2C A9 00            [ 1] 3810 	adc a,#0  
      002C2E 81               [ 4] 3811 	ret 
                                   3812 
                                   3813 ;---------------------------------
                                   3814 ; BASIC: WORDS 
                                   3815 ; affiche la listes des mots du
                                   3816 ; dictionnaire ainsi que le nombre
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



                                   3817 ; de mots.
                                   3818 ;---------------------------------
                           000001  3819 	WLEN=1 ; word length
                           000002  3820 	LLEN=2 ; character sent to console
                           000003  3821 	WCNT=3 ; count words printed 
                           000003  3822 	VSIZE=3 
      002C2F                       3823 words:
      002C2F                       3824 	_vars VSIZE
      002C2F 52 03            [ 2]    1     sub sp,#VSIZE 
      002C31 0F 02            [ 1] 3825 	clr (LLEN,sp)
      002C33 0F 03            [ 1] 3826 	clr (WCNT,sp)
      002C35 90 AE 33 43      [ 2] 3827 	ldw y,#kword_dict+2
      002C39 93               [ 1] 3828 0$:	ldw x,y
      002C3A F6               [ 1] 3829 	ld a,(x)
      002C3B A4 0F            [ 1] 3830 	and a,#15 
      002C3D 6B 01            [ 1] 3831 	ld (WLEN,sp),a 
      002C3F 0C 03            [ 1] 3832 	inc (WCNT,sp)
      002C41 5C               [ 1] 3833 1$:	incw x 
      002C42 F6               [ 1] 3834 	ld a,(x)
      002C43 CD 09 44         [ 4] 3835 	call putc 
      002C46 0C 02            [ 1] 3836 	inc (LLEN,sp)
      002C48 0A 01            [ 1] 3837 	dec (WLEN,sp)
      002C4A 26 F5            [ 1] 3838 	jrne 1$
      002C4C A6 46            [ 1] 3839 	ld a,#70
      002C4E 11 02            [ 1] 3840 	cp a,(LLEN,sp)
      002C50 2B 09            [ 1] 3841 	jrmi 2$   
      002C52 A6 20            [ 1] 3842 	ld a,#SPACE 
      002C54 CD 09 44         [ 4] 3843 	call putc 
      002C57 0C 02            [ 1] 3844 	inc (LLEN,sp) 
      002C59 20 07            [ 2] 3845 	jra 3$
      002C5B A6 0D            [ 1] 3846 2$: ld a,#CR 
      002C5D CD 09 44         [ 4] 3847 	call putc 
      002C60 0F 02            [ 1] 3848 	clr (LLEN,sp)
      002C62 72 A2 00 02      [ 2] 3849 3$:	subw y,#2 
      002C66 90 FE            [ 2] 3850 	ldw y,(y)
      002C68 26 CF            [ 1] 3851 	jrne 0$ 
      002C6A A6 0D            [ 1] 3852 	ld a,#CR 
      002C6C CD 09 44         [ 4] 3853 	call putc  
      002C6F 5F               [ 1] 3854 	clrw x 
      002C70 7B 03            [ 1] 3855 	ld a,(WCNT,sp)
      002C72 97               [ 1] 3856 	ld xl,a 
      002C73 CD 18 12         [ 4] 3857 	call prt_i16 
      002C76 AE 2C 7F         [ 2] 3858 	ldw x,#words_count_msg
      002C79 CD 09 A1         [ 4] 3859 	call puts 
      002C7C                       3860 	_drop VSIZE 
      002C7C 5B 03            [ 2]    1     addw sp,#VSIZE 
      002C7E 81               [ 4] 3861 	ret 
      002C7F 20 77 6F 72 64 73 20  3862 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3863 
                                   3864 
                                   3865 ;-----------------------------
                                   3866 ; BASIC: TIMER expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



                                   3867 ; initialize count down timer 
                                   3868 ;-----------------------------
      002C95                       3869 set_timer:
      002C95 CD 19 7B         [ 4] 3870 	call arg_list
      002C98 A1 01            [ 1] 3871 	cp a,#1 
      002C9A 27 03            [ 1] 3872 	jreq 1$
      002C9C CC 16 BC         [ 2] 3873 	jp syntax_error
      002C9F                       3874 1$: 
      002C9F                       3875 	_xpop  
      002C9F 90 F6            [ 1]    1     ld a,(y)
      002CA1 93               [ 1]    2     ldw x,y 
      002CA2 EE 01            [ 2]    3     ldw x,(1,x)
      002CA4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CA8 CF 00 12         [ 2] 3876 	ldw timer,x 
      002CAB 81               [ 4] 3877 	ret 
                                   3878 
                                   3879 ;------------------------------
                                   3880 ; BASIC: TIMEOUT 
                                   3881 ; return state of timer 
                                   3882 ; output:
                                   3883 ;   A:X     0 not timeout 
                                   3884 ;   A:X     -1 timeout 
                                   3885 ;------------------------------
      002CAC                       3886 timeout:
      002CAC CE 00 12         [ 2] 3887 	ldw x,timer 
      002CAF 4F               [ 1] 3888 	clr a 
      002CB0 20 13            [ 2] 3889 	jra logical_not 
                                   3890 
                                   3891 ;--------------------------------
                                   3892 ; BASIC NOT(expr) 
                                   3893 ; return logical complement of expr
                                   3894 ;--------------------------------
      002CB2                       3895 func_not:
      002CB2 CD 19 76         [ 4] 3896 	call func_args  
      002CB5 A1 01            [ 1] 3897 	cp a,#1
      002CB7 27 03            [ 1] 3898 	jreq 1$
      002CB9 CC 16 BC         [ 2] 3899 	jp syntax_error
      002CBC                       3900 1$: _xpop 
      002CBC 90 F6            [ 1]    1     ld a,(y)
      002CBE 93               [ 1]    2     ldw x,y 
      002CBF EE 01            [ 2]    3     ldw x,(1,x)
      002CC1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CC5                       3901 logical_not: 
      002CC5 4D               [ 1] 3902 	tnz a 
      002CC6 26 06            [ 1] 3903 	jrne 2$
      002CC8 5D               [ 2] 3904 	tnzw x 
      002CC9 26 03            [ 1] 3905 	jrne 2$  
      002CCB 43               [ 1] 3906 	cpl a 
      002CCC 53               [ 2] 3907 	cplw x  
      002CCD 81               [ 4] 3908 	ret 
      002CCE 4F               [ 1] 3909 2$: clr a 
      002CCF 5F               [ 1] 3910 	clrw x 
      002CD0 81               [ 4] 3911 	ret 
                                   3912 
                                   3913 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



                                   3914 ;-----------------------------------
                                   3915 ; BASIC: IWDGEN expr1 
                                   3916 ; enable independant watchdog timer
                                   3917 ; expr1 is delay in multiple of 62.5µsec
                                   3918 ; expr1 -> {1..16383}
                                   3919 ;-----------------------------------
      002CD1                       3920 enable_iwdg:
      002CD1 CD 19 7B         [ 4] 3921 	call arg_list
      002CD4 A1 01            [ 1] 3922 	cp a,#1 
      002CD6 27 03            [ 1] 3923 	jreq 1$
      002CD8 CC 16 BC         [ 2] 3924 	jp syntax_error 
      002CDB                       3925 1$: _xpop  
      002CDB 90 F6            [ 1]    1     ld a,(y)
      002CDD 93               [ 1]    2     ldw x,y 
      002CDE EE 01            [ 2]    3     ldw x,(1,x)
      002CE0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CE4 4B 00            [ 1] 3926 	push #0
      002CE6 35 CC 50 E0      [ 1] 3927 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002CEA 9E               [ 1] 3928 	ld a,xh 
      002CEB A4 3F            [ 1] 3929 	and a,#0x3f
      002CED 95               [ 1] 3930 	ld xh,a  
      002CEE A3 00 FF         [ 2] 3931 2$:	cpw x,#255
      002CF1 23 06            [ 2] 3932 	jrule 3$
      002CF3 0C 01            [ 1] 3933 	inc (1,sp)
      002CF5 98               [ 1] 3934 	rcf 
      002CF6 56               [ 2] 3935 	rrcw x 
      002CF7 20 F5            [ 2] 3936 	jra 2$
      002CF9 35 55 50 E0      [ 1] 3937 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CFD 84               [ 1] 3938 	pop a  
      002CFE C7 50 E1         [ 1] 3939 	ld IWDG_PR,a 
      002D01 9F               [ 1] 3940 	ld a,xl
      002D02 4A               [ 1] 3941 	dec a 
      002D03 35 55 50 E0      [ 1] 3942 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002D07 C7 50 E2         [ 1] 3943 	ld IWDG_RLR,a 
      002D0A 35 AA 50 E0      [ 1] 3944 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002D0E 81               [ 4] 3945 	ret 
                                   3946 
                                   3947 
                                   3948 ;-----------------------------------
                                   3949 ; BASIC: IWDGREF  
                                   3950 ; refresh independant watchdog count down 
                                   3951 ; timer before it reset MCU. 
                                   3952 ;-----------------------------------
      002D0F                       3953 refresh_iwdg:
      002D0F 35 AA 50 E0      [ 1] 3954 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002D13 81               [ 4] 3955 	ret 
                                   3956 
                                   3957 
                                   3958 ;-------------------------------------
                                   3959 ; BASIC: LOG(expr)
                                   3960 ; return logarithm base 2 of expr 
                                   3961 ; this is the position of most significant
                                   3962 ; bit set. 
                                   3963 ; input: 
                                   3964 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



                                   3965 ;   A     TK_INTGR 
                                   3966 ;   xstack log2 
                                   3967 ;*********************************
      002D14                       3968 log2:
      002D14 CD 19 76         [ 4] 3969 	call func_args 
      002D17 A1 01            [ 1] 3970 	cp a,#1 
      002D19 27 03            [ 1] 3971 	jreq 1$
      002D1B CC 16 BC         [ 2] 3972 	jp syntax_error 
      002D1E                       3973 1$: 
      002D1E                       3974 	_xpop    
      002D1E 90 F6            [ 1]    1     ld a,(y)
      002D20 93               [ 1]    2     ldw x,y 
      002D21 EE 01            [ 2]    3     ldw x,(1,x)
      002D23 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D27 4D               [ 1] 3975 	tnz a
      002D28 26 08            [ 1] 3976 	jrne 2$ 
      002D2A 5D               [ 2] 3977 	tnzw x 
      002D2B 26 05            [ 1] 3978 	jrne 2$
      002D2D A6 0A            [ 1] 3979 	ld a,#ERR_BAD_VALUE
      002D2F CC 16 BE         [ 2] 3980 	jp tb_error 
      002D32 4B 18            [ 1] 3981 2$: push #24 
      002D34 59               [ 2] 3982 3$: rlcw x 
      002D35 49               [ 1] 3983     rlc a 
      002D36 25 04            [ 1] 3984 	jrc 4$
      002D38 0A 01            [ 1] 3985 	dec (1,sp) 
      002D3A 26 F8            [ 1] 3986 	jrne 3$
      002D3C 5F               [ 1] 3987 4$: clrw x 
      002D3D 84               [ 1] 3988     pop a 
      002D3E 4A               [ 1] 3989 	dec a
      002D3F 02               [ 1] 3990 	rlwa x  
      002D40                       3991 9$:	
      002D40 81               [ 4] 3992 	ret 
                                   3993 
                                   3994 ;-----------------------------------
                                   3995 ; BASIC: BIT(expr) 
                                   3996 ; expr ->{0..23}
                                   3997 ; return 2^expr 
                                   3998 ; output:
                                   3999 ;    A:X    2^expr 
                                   4000 ;-----------------------------------
      002D41                       4001 bitmask:
      002D41 CD 19 76         [ 4] 4002     call func_args 
      002D44 A1 01            [ 1] 4003 	cp a,#1
      002D46 27 03            [ 1] 4004 	jreq 1$
      002D48 CC 16 BC         [ 2] 4005 	jp syntax_error 
      002D4B                       4006 1$: _xpop 
      002D4B 90 F6            [ 1]    1     ld a,(y)
      002D4D 93               [ 1]    2     ldw x,y 
      002D4E EE 01            [ 2]    3     ldw x,(1,x)
      002D50 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D54 9F               [ 1] 4007 	ld a,xl 
      002D55 AE 00 01         [ 2] 4008 	ldw x,#1 
      002D58 A4 17            [ 1] 4009 	and a,#23
      002D5A 27 0A            [ 1] 4010 	jreq 9$
      002D5C 88               [ 1] 4011 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002D5D 4F               [ 1] 4012 	clr a 
      002D5E                       4013 2$: 
      002D5E 58               [ 2] 4014 	slaw x 
      002D5F 49               [ 1] 4015 	rlc a 	
      002D60 0A 01            [ 1] 4016 	dec (1,sp)
      002D62 26 FA            [ 1] 4017 	jrne 2$ 
      002D64                       4018 4$:
      002D64                       4019     _drop 1 
      002D64 5B 01            [ 2]    1     addw sp,#1 
      002D66 81               [ 4] 4020 9$:	ret 
                                   4021 
                                   4022 ;------------------------------
                                   4023 ; BASIC: INVERT(expr)
                                   4024 ; 1's complement 
                                   4025 ;--------------------------------
      002D67                       4026 invert:
      002D67 CD 19 76         [ 4] 4027 	call func_args
      002D6A A1 01            [ 1] 4028 	cp a,#1 
      002D6C 27 03            [ 1] 4029 	jreq 1$
      002D6E CC 16 BC         [ 2] 4030 	jp syntax_error
      002D71                       4031 1$: _xpop 
      002D71 90 F6            [ 1]    1     ld a,(y)
      002D73 93               [ 1]    2     ldw x,y 
      002D74 EE 01            [ 2]    3     ldw x,(1,x)
      002D76 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D7A 43               [ 1] 4032 	cpl a 
      002D7B 53               [ 2] 4033 	cplw x 
      002D7C 81               [ 4] 4034 	ret 
                                   4035 
                                   4036 ;------------------------------
                                   4037 ; BASIC: DO 
                                   4038 ; initiate a DO ... UNTIL loop 
                                   4039 ;------------------------------
                           000003  4040 	DOLP_ADR=3 
                           000005  4041 	DOLP_INW=5
                           000004  4042 	VSIZE=4 
      002D7D                       4043 do_loop:
      002D7D 85               [ 2] 4044 	popw x 
      002D7E                       4045 	_vars VSIZE 
      002D7E 52 04            [ 2]    1     sub sp,#VSIZE 
      002D80 89               [ 2] 4046 	pushw x 
      002D81 CE 00 04         [ 2] 4047 	ldw x,basicptr 
      002D84 1F 03            [ 2] 4048 	ldw (DOLP_ADR,sp),x
      002D86 CE 00 00         [ 2] 4049 	ldw x,in.w 
      002D89 1F 05            [ 2] 4050 	ldw (DOLP_INW,sp),x
      002D8B 72 5C 00 1F      [ 1] 4051 	inc loop_depth 
      002D8F 81               [ 4] 4052 	ret 
                                   4053 
                                   4054 ;--------------------------------
                                   4055 ; BASIC: UNTIL expr 
                                   4056 ; loop if exprssion is false 
                                   4057 ; else terminate loop
                                   4058 ;--------------------------------
      002D90                       4059 until: 
      002D90 72 5D 00 1F      [ 1] 4060 	tnz loop_depth 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002D94 26 03            [ 1] 4061 	jrne 1$ 
      002D96 CC 16 BC         [ 2] 4062 	jp syntax_error 
      002D99                       4063 1$: 
      002D99 CD 1B AB         [ 4] 4064 	call condition  
      002D9C                       4065 	_xpop 
      002D9C 90 F6            [ 1]    1     ld a,(y)
      002D9E 93               [ 1]    2     ldw x,y 
      002D9F EE 01            [ 2]    3     ldw x,(1,x)
      002DA1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DA5 4D               [ 1] 4066 	tnz a 
      002DA6 26 10            [ 1] 4067 	jrne 9$ 
      002DA8 1E 03            [ 2] 4068 	ldw x,(DOLP_ADR,sp)
      002DAA CF 00 04         [ 2] 4069 	ldw basicptr,x 
      002DAD E6 02            [ 1] 4070 	ld a,(2,x)
      002DAF C7 00 03         [ 1] 4071 	ld count,a 
      002DB2 1E 05            [ 2] 4072 	ldw x,(DOLP_INW,sp)
      002DB4 CF 00 00         [ 2] 4073 	ldw in.w,x 
      002DB7 81               [ 4] 4074 	ret 
      002DB8                       4075 9$:	; remove loop data from stack  
      002DB8 85               [ 2] 4076 	popw x
      002DB9                       4077 	_drop VSIZE
      002DB9 5B 04            [ 2]    1     addw sp,#VSIZE 
      002DBB 72 5A 00 1F      [ 1] 4078 	dec loop_depth 
      002DBF FC               [ 2] 4079 	jp (x)
                                   4080 
                                   4081 ;--------------------------
                                   4082 ; BASIC: PORTA...PORTI  
                                   4083 ;  return constant value 
                                   4084 ;  PORT  base address 
                                   4085 ;---------------------------
      002DC0                       4086 const_porta:
      002DC0 AE 50 00         [ 2] 4087 	ldw x,#PA_BASE 
      002DC3 4F               [ 1] 4088 	clr a 
      002DC4 81               [ 4] 4089 	ret 
      002DC5                       4090 const_portb:
      002DC5 AE 50 05         [ 2] 4091 	ldw x,#PB_BASE 
      002DC8 4F               [ 1] 4092 	clr a 
      002DC9 81               [ 4] 4093 	ret 
      002DCA                       4094 const_portc:
      002DCA AE 50 0A         [ 2] 4095 	ldw x,#PC_BASE 
      002DCD 4F               [ 1] 4096 	clr a 
      002DCE 81               [ 4] 4097 	ret 
      002DCF                       4098 const_portd:
      002DCF AE 50 0F         [ 2] 4099 	ldw x,#PD_BASE 
      002DD2 4F               [ 1] 4100 	clr a 
      002DD3 81               [ 4] 4101 	ret 
      002DD4                       4102 const_porte:
      002DD4 AE 50 14         [ 2] 4103 	ldw x,#PE_BASE 
      002DD7 4F               [ 1] 4104 	clr a 
      002DD8 81               [ 4] 4105 	ret 
      002DD9                       4106 const_portf:
      002DD9 AE 50 19         [ 2] 4107 	ldw x,#PF_BASE 
      002DDC 4F               [ 1] 4108 	clr a 
      002DDD 81               [ 4] 4109 	ret 
      002DDE                       4110 const_portg:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002DDE AE 50 1E         [ 2] 4111 	ldw x,#PG_BASE 
      002DE1 4F               [ 1] 4112 	clr a 
      002DE2 81               [ 4] 4113 	ret 
      002DE3                       4114 const_porth:
      002DE3 AE 50 23         [ 2] 4115 	ldw x,#PH_BASE 
      002DE6 4F               [ 1] 4116 	clr a 
      002DE7 81               [ 4] 4117 	ret 
      002DE8                       4118 const_porti:
      002DE8 AE 50 28         [ 2] 4119 	ldw x,#PI_BASE 
      002DEB 4F               [ 1] 4120 	clr a 
      002DEC 81               [ 4] 4121 	ret 
                                   4122 
                                   4123 ;-------------------------------
                                   4124 ; following return constant 
                                   4125 ; related to GPIO register offset 
                                   4126 ;---------------------------------
      002DED                       4127 const_odr:
      002DED 4F               [ 1] 4128 	clr a 
      002DEE AE 00 00         [ 2] 4129 	ldw x,#GPIO_ODR
      002DF1 81               [ 4] 4130 	ret 
      002DF2                       4131 const_idr:
      002DF2 4F               [ 1] 4132 	clr a 
      002DF3 AE 00 01         [ 2] 4133 	ldw x,#GPIO_IDR
      002DF6 81               [ 4] 4134 	ret 
      002DF7                       4135 const_ddr:
      002DF7 4F               [ 1] 4136 	clr a
      002DF8 AE 00 02         [ 2] 4137 	ldw x,#GPIO_DDR
      002DFB 81               [ 4] 4138 	ret 
      002DFC                       4139 const_cr1:
      002DFC 4F               [ 1] 4140 	clr a 
      002DFD AE 00 03         [ 2] 4141 	ldw x,#GPIO_CR1
      002E00 81               [ 4] 4142 	ret 
      002E01                       4143 const_cr2:
      002E01 4F               [ 1] 4144 	clr a
      002E02 AE 00 04         [ 2] 4145 	ldw x,#GPIO_CR2
      002E05 81               [ 4] 4146 	ret 
                                   4147 ;-------------------------
                                   4148 ; BASIC: POUT 
                                   4149 ;  constant for port mode
                                   4150 ;  used by PMODE 
                                   4151 ;  to set pin as output
                                   4152 ;------------------------
      002E06                       4153 const_output:
      002E06 4F               [ 1] 4154 	clr a 
      002E07 AE 00 01         [ 2] 4155 	ldw x,#OUTP
      002E0A 81               [ 4] 4156 	ret 
                                   4157 
                                   4158 ;-------------------------
                                   4159 ; BASIC: PINP 
                                   4160 ;  constant for port mode
                                   4161 ;  used by PMODE 
                                   4162 ;  to set pin as input
                                   4163 ;------------------------
      002E0B                       4164 const_input:
      002E0B 4F               [ 1] 4165 	clr a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002E0C AE 00 00         [ 2] 4166 	ldw x,#INP 
      002E0F 81               [ 4] 4167 	ret 
                                   4168 	
                                   4169 ;-----------------------
                                   4170 ; memory area constants
                                   4171 ;-----------------------
      002E10                       4172 const_eeprom_base:
      002E10 4F               [ 1] 4173 	clr a  
      002E11 AE 40 00         [ 2] 4174 	ldw x,#EEPROM_BASE 
      002E14 81               [ 4] 4175 	ret 
                                   4176 
                                   4177 ;---------------------------
                                   4178 ; BASIC: DATA 
                                   4179 ; when the interpreter find 
                                   4180 ; a DATA line it skip it.
                                   4181 ;---------------------------
      002E15                       4182 data:
      002E15 55 00 03 00 01   [ 1] 4183 	mov in,count 
      002E1A 81               [ 4] 4184 	ret 
                                   4185 
                                   4186 ;------------------------------
                                   4187 ; check if it is a DATA line 
                                   4188 ; input: 
                                   4189 ;    X    line address 
                                   4190 ; output:
                                   4191 ;    Z    set if DATA line 
                                   4192 ;----------------------------
      002E1B                       4193 is_data_line:
      002E1B EE 04            [ 2] 4194 	ldw x,(4,x)
      002E1D DE 33 49         [ 2] 4195 	ldw x,(code_addr,x)
      002E20 A3 2E 15         [ 2] 4196 	cpw x,#data 
      002E23 81               [ 4] 4197 	ret 
                                   4198 
                                   4199 ;---------------------------
                                   4200 ; set DATA pointer at line# 
                                   4201 ; specified by X 
                                   4202 ;---------------------------
      002E24                       4203 data_line:
      002E24 90 89            [ 2] 4204 	pushw y 
      002E26 4F               [ 1] 4205 	clr a 
      002E27 CD 0C 89         [ 4] 4206 	call search_lineno
      002E2A 5D               [ 2] 4207 	tnzw x 
      002E2B 26 05            [ 1] 4208 	jrne 3$
      002E2D A6 05            [ 1] 4209 2$:	ld a,#ERR_NO_LINE 
      002E2F CC 16 BE         [ 2] 4210 	jp tb_error
      002E32                       4211 3$: ; check if valid data line 
      002E32 90 93            [ 1] 4212     ldw y,x 
      002E34 CD 2E 1B         [ 4] 4213 	call is_data_line 
      002E37 26 F4            [ 1] 4214 	jrne 2$ 
      002E39                       4215 set_data_ptr: 	
      002E39 90 CF 00 06      [ 2] 4216 	ldw data_ptr,y
      002E3D 90 E6 02         [ 1] 4217 	ld a,(2,y)
      002E40 C7 00 09         [ 1] 4218 	ld data_len,a 
      002E43 35 06 00 08      [ 1] 4219 	mov data_ofs,#FIRST_DATA_ITEM 
      002E47 90 85            [ 2] 4220 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002E49 81               [ 4] 4221 	ret
                                   4222 
                                   4223 ;---------------------------------
                                   4224 ; BASIC: RESTORE [line#]
                                   4225 ; set data_ptr to first data line
                                   4226 ; if no DATA found pointer set to
                                   4227 ; zero.
                                   4228 ; if a line# is given as argument 
                                   4229 ; a data line with that number 
                                   4230 ; is searched and the data pointer 
                                   4231 ; is set to it. If there is no 
                                   4232 ; data line with that number 
                                   4233 ; the program is interrupted. 
                                   4234 ;---------------------------------
      002E4A                       4235 restore:
      002E4A 72 5F 00 06      [ 1] 4236 	clr data_ptr 
      002E4E 72 5F 00 07      [ 1] 4237 	clr data_ptr+1
      002E52 72 5F 00 08      [ 1] 4238 	clr data_ofs 
      002E56 72 5F 00 09      [ 1] 4239 	clr data_len
      002E5A CD 17 BD         [ 4] 4240 	call next_token 
      002E5D A1 84            [ 1] 4241 	cp a,#TK_INTGR
      002E5F 26 05            [ 1] 4242 	jrne 0$
      002E61 CD 17 FC         [ 4] 4243 	call get_int24 
      002E64 20 BE            [ 2] 4244 	jra data_line 
      002E66                       4245 0$:	
      002E66                       4246 	_unget_token  
      002E66 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002E6B CE 00 1B         [ 2] 4247 	ldw x,txtbgn
      002E6E 90 89            [ 2] 4248 	pushw y 
                                   4249 ; search first DATA line 
      002E70                       4250 data_search_loop: 	
      002E70 C3 00 1D         [ 2] 4251 	cpw x,txtend
      002E73 24 17            [ 1] 4252 	jruge restore_error 
      002E75 90 93            [ 1] 4253 	ldw y,x 
      002E77 CD 2E 1B         [ 4] 4254 	call is_data_line 
      002E7A 27 BD            [ 1] 4255 	jreq set_data_ptr
      002E7C                       4256 try_next_line: 
      002E7C 93               [ 1] 4257 	ldw x,y 
      002E7D E6 02            [ 1] 4258 	ld a,(2,x)
      002E7F C7 00 0E         [ 1] 4259 	ld acc8,a 
      002E82 72 5F 00 0D      [ 1] 4260 	clr acc16 
      002E86 72 BB 00 0D      [ 2] 4261 	addw x,acc16 
      002E8A 20 E4            [ 2] 4262 	jra data_search_loop
      002E8C                       4263 restore_error:	
      002E8C A6 0C            [ 1] 4264     ld a,#ERR_NO_DATA 
      002E8E CC 16 BE         [ 2] 4265 	jp tb_error 
                                   4266 
                                   4267 
                                   4268 ;---------------------------------
                                   4269 ; BASIC: READ 
                                   4270 ; return next data item | 0 
                                   4271 ;---------------------------------
                           000001  4272 	CTX_BPTR=1 
                           000003  4273 	CTX_IN=3 
                           000004  4274 	CTX_COUNT=4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



                           000005  4275 	INT24=5
                           000007  4276 	VSIZE=7 
      002E91                       4277 read:
      002E91                       4278 	_vars  VSIZE 
      002E91 52 07            [ 2]    1     sub sp,#VSIZE 
      002E93                       4279 read01:	
      002E93 C6 00 08         [ 1] 4280 	ld a,data_ofs
      002E96 C1 00 09         [ 1] 4281 	cp a,data_len 
      002E99 27 3A            [ 1] 4282 	jreq 2$ ; end of line  
      002E9B CD 20 78         [ 4] 4283 	call save_context
      002E9E CE 00 06         [ 2] 4284 	ldw x,data_ptr 
      002EA1 CF 00 04         [ 2] 4285 	ldw basicptr,x 
      002EA4 55 00 08 00 01   [ 1] 4286 	mov in,data_ofs 
      002EA9 55 00 09 00 03   [ 1] 4287 	mov count,data_len  
      002EAE CD 1A A6         [ 4] 4288 	call expression 
      002EB1 A1 84            [ 1] 4289 	cp a,#TK_INTGR 
      002EB3 27 03            [ 1] 4290 	jreq 1$ 
      002EB5 CC 16 BC         [ 2] 4291 	jp syntax_error 
      002EB8                       4292 1$:
      002EB8 CD 17 BD         [ 4] 4293 	call next_token ; skip comma
      002EBB CE 00 04         [ 2] 4294 	ldw x,basicptr 
      002EBE CF 00 06         [ 2] 4295 	ldw data_ptr,x 
      002EC1 55 00 01 00 08   [ 1] 4296 	mov data_ofs,in 
      002EC6 CD 20 88         [ 4] 4297 	call rest_context
      002EC9                       4298 	_xpop 
      002EC9 90 F6            [ 1]    1     ld a,(y)
      002ECB 93               [ 1]    2     ldw x,y 
      002ECC EE 01            [ 2]    3     ldw x,(1,x)
      002ECE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ED2                       4299 	_drop VSIZE 
      002ED2 5B 07            [ 2]    1     addw sp,#VSIZE 
      002ED4 81               [ 4] 4300 	ret 
      002ED5                       4301 2$: ; end of line reached 
      002ED5 90 CE 00 06      [ 2] 4302 	ldw y, data_ptr 
      002ED9 72 5F 00 06      [ 1] 4303 	clr data_ptr
      002EDD 72 5F 00 07      [ 1] 4304 	clr data_ptr+1   
      002EE1 72 5F 00 08      [ 1] 4305 	clr data_ofs 
      002EE5 72 5F 00 09      [ 1] 4306 	clr data_len 
      002EE9 CD 2E 7C         [ 4] 4307 	call try_next_line 
      002EEC 20 A5            [ 2] 4308 	jra read01
                                   4309 
                                   4310 
                                   4311 ;---------------------------------
                                   4312 ; BASIC: SPIEN clkdiv, 0|1  
                                   4313 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4314 ; if clkdiv==-1 disable SPI
                                   4315 ; 0|1 -> disable|enable  
                                   4316 ;--------------------------------- 
                           000005  4317 SPI_CS_BIT=5
      002EEE                       4318 spi_enable:
      002EEE CD 19 7B         [ 4] 4319 	call arg_list 
      002EF1 A1 02            [ 1] 4320 	cp a,#2
      002EF3 27 03            [ 1] 4321 	jreq 1$
      002EF5 CC 16 BC         [ 2] 4322 	jp syntax_error 
      002EF8                       4323 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002EF8 72 12 50 C7      [ 1] 4324 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002EFC 85               [ 2] 4325 	popw x  
      002EFD 5D               [ 2] 4326 	tnzw x 
      002EFE 27 21            [ 1] 4327 	jreq spi_disable 
      002F00 85               [ 2] 4328 	popw x 
      002F01 A6 08            [ 1] 4329 	ld a,#(1<<SPI_CR1_BR)
      002F03 42               [ 4] 4330 	mul x,a 
      002F04 9F               [ 1] 4331 	ld a,xl 
      002F05 C7 52 00         [ 1] 4332 	ld SPI_CR1,a 
                                   4333 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002F08 72 1A 50 14      [ 1] 4334 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002F0C 72 1A 50 16      [ 1] 4335 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4336 ; configure SPI as master mode 0.	
      002F10 72 14 52 00      [ 1] 4337 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4338 ; ~CS line controlled by sofware 	
      002F14 72 12 52 01      [ 1] 4339 	bset SPI_CR2,#SPI_CR2_SSM 
      002F18 72 10 52 01      [ 1] 4340     bset SPI_CR2,#SPI_CR2_SSI 
                                   4341 ; enable SPI
      002F1C 72 1C 52 00      [ 1] 4342 	bset SPI_CR1,#SPI_CR1_SPE 	
      002F20 81               [ 4] 4343 	ret 
      002F21                       4344 spi_disable:
      002F21                       4345 	_drop #2; throw first argument.
      002F21 5B 02            [ 2]    1     addw sp,##2 
                                   4346 ; wait spi idle 
      002F23 A6 82            [ 1] 4347 1$:	ld a,#0x82 
      002F25 C4 52 03         [ 1] 4348 	and a,SPI_SR
      002F28 A1 02            [ 1] 4349 	cp a,#2 
      002F2A 26 F7            [ 1] 4350 	jrne 1$
      002F2C 72 1D 52 00      [ 1] 4351 	bres SPI_CR1,#SPI_CR1_SPE
      002F30 72 13 50 C7      [ 1] 4352 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002F34 72 1B 50 16      [ 1] 4353 	bres PE_DDR,#SPI_CS_BIT 
      002F38 81               [ 4] 4354 	ret 
                                   4355 
      002F39                       4356 spi_clear_error:
      002F39 A6 78            [ 1] 4357 	ld a,#0x78 
      002F3B C5 52 03         [ 1] 4358 	bcp a,SPI_SR 
      002F3E 27 04            [ 1] 4359 	jreq 1$
      002F40 72 5F 52 03      [ 1] 4360 	clr SPI_SR 
      002F44 81               [ 4] 4361 1$: ret 
                                   4362 
      002F45                       4363 spi_send_byte:
      002F45 88               [ 1] 4364 	push a 
      002F46 CD 2F 39         [ 4] 4365 	call spi_clear_error
      002F49 84               [ 1] 4366 	pop a 
      002F4A 72 03 52 03 FB   [ 2] 4367 	btjf SPI_SR,#SPI_SR_TXE,.
      002F4F C7 52 04         [ 1] 4368 	ld SPI_DR,a
      002F52 72 01 52 03 FB   [ 2] 4369 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002F57 C6 52 04         [ 1] 4370 	ld a,SPI_DR 
      002F5A 81               [ 4] 4371 	ret 
                                   4372 
      002F5B                       4373 spi_rcv_byte:
      002F5B A6 FF            [ 1] 4374 	ld a,#255
      002F5D 72 01 52 03 E3   [ 2] 4375 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002F62 C6 52 04         [ 1] 4376 	ld a,SPI_DR 
      002F65 81               [ 4] 4377 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



                                   4378 
                                   4379 ;------------------------------
                                   4380 ; BASIC: SPIWR byte [,byte]
                                   4381 ; write 1 or more byte
                                   4382 ;------------------------------
      002F66                       4383 spi_write:
      002F66 CD 1A A6         [ 4] 4384 	call expression
      002F69 A1 84            [ 1] 4385 	cp a,#TK_INTGR 
      002F6B 27 03            [ 1] 4386 	jreq 1$
      002F6D CC 16 BC         [ 2] 4387 	jp syntax_error 
      002F70                       4388 1$:	
      002F70 9F               [ 1] 4389 	ld a,xl 
      002F71 CD 2F 45         [ 4] 4390 	call spi_send_byte 
      002F74 CD 17 BD         [ 4] 4391 	call next_token 
      002F77 A1 08            [ 1] 4392 	cp a,#TK_COMMA 
      002F79 26 02            [ 1] 4393 	jrne 2$ 
      002F7B 20 E9            [ 2] 4394 	jra spi_write 
      002F7D 4D               [ 1] 4395 2$:	tnz a 
      002F7E 27 05            [ 1] 4396 	jreq 3$
      002F80                       4397 	_unget_token  
      002F80 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F85 81               [ 4] 4398 3$:	ret 
                                   4399 
                                   4400 
                                   4401 ;-------------------------------
                                   4402 ; BASIC: SPIRD 	
                                   4403 ; read one byte from SPI 
                                   4404 ;-------------------------------
      002F86                       4405 spi_read:
      002F86 CD 2F 5B         [ 4] 4406 	call spi_rcv_byte 
      002F89 5F               [ 1] 4407 	clrw x 
      002F8A 97               [ 1] 4408 	ld xl,a 
      002F8B 4F               [ 1] 4409 	clr a  
      002F8C 81               [ 4] 4410 	ret 
                                   4411 
                                   4412 ;------------------------------
                                   4413 ; BASIC: SPISEL 0|1 
                                   4414 ; set state of ~CS line
                                   4415 ; 0|1 deselect|select  
                                   4416 ;------------------------------
      002F8D                       4417 spi_select:
      002F8D CD 17 BD         [ 4] 4418 	call next_token 
      002F90 A1 84            [ 1] 4419 	cp a,#TK_INTGR 
      002F92 27 03            [ 1] 4420 	jreq 1$
      002F94 CC 16 BC         [ 2] 4421 	jp syntax_error 
      002F97 5D               [ 2] 4422 1$: tnzw x  
      002F98 27 05            [ 1] 4423 	jreq cs_high 
      002F9A 72 1B 50 14      [ 1] 4424 	bres PE_ODR,#SPI_CS_BIT
      002F9E 81               [ 4] 4425 	ret 
      002F9F                       4426 cs_high: 
      002F9F 72 1A 50 14      [ 1] 4427 	bset PE_ODR,#SPI_CS_BIT
      002FA3 81               [ 4] 4428 	ret 
                                   4429 
                                   4430 ;-------------------------------
                                   4431 ; BASIC: PAD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



                                   4432 ; Return pad buffer address.
                                   4433 ;------------------------------
      002FA4                       4434 pad_ref:
      002FA4 AE 16 B8         [ 2] 4435 	ldw x,#pad 
      002FA7 4F               [ 1] 4436 	clr a
      002FA8 81               [ 4] 4437 	ret 
                                   4438 
                                   4439 
                                   4440 ;------------------------------
                                   4441 ;      dictionary 
                                   4442 ; format:
                                   4443 ;   link:   2 bytes 
                                   4444 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   4445 ;   cmd_name: 16 byte max 
                                   4446 ;   cmd_index: 2 bytes 
                                   4447 ;------------------------------
                                   4448 	.macro _dict_entry len,name,cmd_idx 
                                   4449 	.word LINK 
                                   4450 	LINK=.
                                   4451 name:
                                   4452 	.byte len   	
                                   4453 	.ascii "name"
                                   4454 	.word cmd_idx 
                                   4455 	.endm 
                                   4456 
                           000000  4457 	LINK=0
                                   4458 ; respect alphabetic order for BASIC names from Z-A
                                   4459 ; this sort order is for a cleaner WORDS cmd output. 	
      002FA9                       4460 kword_end:
      002FA9                       4461 	_dict_entry,3+F_XOR,XOR,XOR_IDX ; xor operator
      002FA9 00 00                    1 	.word LINK 
                           002FAB     2 	LINK=.
      002FAB                          3 XOR:
      002FAB 93                       4 	.byte 3+F_XOR   	
      002FAC 58 4F 52                 5 	.ascii "XOR"
      002FAF 00 FE                    6 	.word XOR_IDX 
      002FB1                       4462 	_dict_entry,5,WRITE,WRITE_IDX;write  
      002FB1 2F AB                    1 	.word LINK 
                           002FB3     2 	LINK=.
      002FB3                          3 WRITE:
      002FB3 05                       4 	.byte 5   	
      002FB4 57 52 49 54 45           5 	.ascii "WRITE"
      002FB9 00 B6                    6 	.word WRITE_IDX 
      002FBB                       4463 	_dict_entry,5,WORDS,WORDS_IDX;words 
      002FBB 2F B3                    1 	.word LINK 
                           002FBD     2 	LINK=.
      002FBD                          3 WORDS:
      002FBD 05                       4 	.byte 5   	
      002FBE 57 4F 52 44 53           5 	.ascii "WORDS"
      002FC3 00 B4                    6 	.word WORDS_IDX 
      002FC5                       4464 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      002FC5 2F BD                    1 	.word LINK 
                           002FC7     2 	LINK=.
      002FC7                          3 WAIT:
      002FC7 04                       4 	.byte 4   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      002FC8 57 41 49 54              5 	.ascii "WAIT"
      002FCC 00 B2                    6 	.word WAIT_IDX 
      002FCE                       4465 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      002FCE 2F C7                    1 	.word LINK 
                           002FD0     2 	LINK=.
      002FD0                          3 USR:
      002FD0 13                       4 	.byte 3+F_IFUNC   	
      002FD1 55 53 52                 5 	.ascii "USR"
      002FD4 00 B0                    6 	.word USR_IDX 
      002FD6                       4466 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      002FD6 2F D0                    1 	.word LINK 
                           002FD8     2 	LINK=.
      002FD8                          3 UNTIL:
      002FD8 05                       4 	.byte 5   	
      002FD9 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002FDE 00 AE                    6 	.word UNTIL_IDX 
      002FE0                       4467 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      002FE0 2F D8                    1 	.word LINK 
                           002FE2     2 	LINK=.
      002FE2                          3 UFLASH:
      002FE2 16                       4 	.byte 6+F_IFUNC   	
      002FE3 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002FE9 00 AC                    6 	.word UFLASH_IDX 
      002FEB                       4468 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      002FEB 2F E2                    1 	.word LINK 
                           002FED     2 	LINK=.
      002FED                          3 UBOUND:
      002FED 16                       4 	.byte 6+F_IFUNC   	
      002FEE 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002FF4 00 AA                    6 	.word UBOUND_IDX 
      002FF6                       4469 	_dict_entry,4,TONE,TONE_IDX;tone  
      002FF6 2F ED                    1 	.word LINK 
                           002FF8     2 	LINK=.
      002FF8                          3 TONE:
      002FF8 04                       4 	.byte 4   	
      002FF9 54 4F 4E 45              5 	.ascii "TONE"
      002FFD 00 A8                    6 	.word TONE_IDX 
      002FFF                       4470 	_dict_entry,2,TO,TO_IDX;to
      002FFF 2F F8                    1 	.word LINK 
                           003001     2 	LINK=.
      003001                          3 TO:
      003001 02                       4 	.byte 2   	
      003002 54 4F                    5 	.ascii "TO"
      003004 00 A6                    6 	.word TO_IDX 
      003006                       4471 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      003006 30 01                    1 	.word LINK 
                           003008     2 	LINK=.
      003008                          3 TIMER:
      003008 05                       4 	.byte 5   	
      003009 54 49 4D 45 52           5 	.ascii "TIMER"
      00300E 00 A2                    6 	.word TIMER_IDX 
      003010                       4472 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      003010 30 08                    1 	.word LINK 
                           003012     2 	LINK=.
      003012                          3 TIMEOUT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      003012 17                       4 	.byte 7+F_IFUNC   	
      003013 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      00301A 00 A4                    6 	.word TMROUT_IDX 
      00301C                       4473 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      00301C 30 12                    1 	.word LINK 
                           00301E     2 	LINK=.
      00301E                          3 TICKS:
      00301E 15                       4 	.byte 5+F_IFUNC   	
      00301F 54 49 43 4B 53           5 	.ascii "TICKS"
      003024 00 A0                    6 	.word TICKS_IDX 
      003026                       4474 	_dict_entry,4,STOP,STOP_IDX;stop 
      003026 30 1E                    1 	.word LINK 
                           003028     2 	LINK=.
      003028                          3 STOP:
      003028 04                       4 	.byte 4   	
      003029 53 54 4F 50              5 	.ascii "STOP"
      00302D 00 9E                    6 	.word STOP_IDX 
      00302F                       4475 	_dict_entry,4,STEP,STEP_IDX;step 
      00302F 30 28                    1 	.word LINK 
                           003031     2 	LINK=.
      003031                          3 STEP:
      003031 04                       4 	.byte 4   	
      003032 53 54 45 50              5 	.ascii "STEP"
      003036 00 9C                    6 	.word STEP_IDX 
      003038                       4476 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      003038 30 31                    1 	.word LINK 
                           00303A     2 	LINK=.
      00303A                          3 SPIWR:
      00303A 05                       4 	.byte 5   	
      00303B 53 50 49 57 52           5 	.ascii "SPIWR"
      003040 00 9A                    6 	.word SPIWR_IDX 
      003042                       4477 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      003042 30 3A                    1 	.word LINK 
                           003044     2 	LINK=.
      003044                          3 SPISEL:
      003044 06                       4 	.byte 6   	
      003045 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      00304B 00 98                    6 	.word SPISEL_IDX 
      00304D                       4478 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      00304D 30 44                    1 	.word LINK 
                           00304F     2 	LINK=.
      00304F                          3 SPIRD:
      00304F 15                       4 	.byte 5+F_IFUNC   	
      003050 53 50 49 52 44           5 	.ascii "SPIRD"
      003055 00 94                    6 	.word SPIRD_IDX 
      003057                       4479 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      003057 30 4F                    1 	.word LINK 
                           003059     2 	LINK=.
      003059                          3 SPIEN:
      003059 05                       4 	.byte 5   	
      00305A 53 50 49 45 4E           5 	.ascii "SPIEN"
      00305F 00 96                    6 	.word SPIEN_IDX 
      003061                       4480 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      003061 30 59                    1 	.word LINK 
                           003063     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      003063                          3 SLEEP:
      003063 05                       4 	.byte 5   	
      003064 53 4C 45 45 50           5 	.ascii "SLEEP"
      003069 00 92                    6 	.word SLEEP_IDX 
      00306B                       4481     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      00306B 30 63                    1 	.word LINK 
                           00306D     2 	LINK=.
      00306D                          3 SIZE:
      00306D 04                       4 	.byte 4   	
      00306E 53 49 5A 45              5 	.ascii "SIZE"
      003072 00 B8                    6 	.word SIZE_IDX 
      003074                       4482 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      003074 30 6D                    1 	.word LINK 
                           003076     2 	LINK=.
      003076                          3 SAVE:
      003076 04                       4 	.byte 4   	
      003077 53 41 56 45              5 	.ascii "SAVE"
      00307B 00 32                    6 	.word SAVE_IDX 
      00307D                       4483 	_dict_entry 3,RUN,RUN_IDX;run
      00307D 30 76                    1 	.word LINK 
                           00307F     2 	LINK=.
      00307F                          3 RUN:
      00307F 03                       4 	.byte 3   	
      003080 52 55 4E                 5 	.ascii "RUN"
      003083 00 8E                    6 	.word RUN_IDX 
      003085                       4484 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      003085 30 7F                    1 	.word LINK 
                           003087     2 	LINK=.
      003087                          3 RSHIFT:
      003087 16                       4 	.byte 6+F_IFUNC   	
      003088 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00308E 00 8C                    6 	.word RSHIFT_IDX 
      003090                       4485 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      003090 30 87                    1 	.word LINK 
                           003092     2 	LINK=.
      003092                          3 RND:
      003092 13                       4 	.byte 3+F_IFUNC   	
      003093 52 4E 44                 5 	.ascii "RND"
      003096 00 8A                    6 	.word RND_IDX 
      003098                       4486 	_dict_entry,6,RETURN,RET_IDX;return 
      003098 30 92                    1 	.word LINK 
                           00309A     2 	LINK=.
      00309A                          3 RETURN:
      00309A 06                       4 	.byte 6   	
      00309B 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0030A1 00 88                    6 	.word RET_IDX 
      0030A3                       4487 	_dict_entry,7,RESTORE,REST_IDX;restore 
      0030A3 30 9A                    1 	.word LINK 
                           0030A5     2 	LINK=.
      0030A5                          3 RESTORE:
      0030A5 07                       4 	.byte 7   	
      0030A6 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0030AD 00 86                    6 	.word REST_IDX 
      0030AF                       4488 	_dict_entry 3,REM,REM_IDX;remark 
      0030AF 30 A5                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



                           0030B1     2 	LINK=.
      0030B1                          3 REM:
      0030B1 03                       4 	.byte 3   	
      0030B2 52 45 4D                 5 	.ascii "REM"
      0030B5 00 84                    6 	.word REM_IDX 
      0030B7                       4489 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      0030B7 30 B1                    1 	.word LINK 
                           0030B9     2 	LINK=.
      0030B9                          3 REBOOT:
      0030B9 06                       4 	.byte 6   	
      0030BA 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0030C0 00 82                    6 	.word RBT_IDX 
      0030C2                       4490 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      0030C2 30 B9                    1 	.word LINK 
                           0030C4     2 	LINK=.
      0030C4                          3 READ:
      0030C4 14                       4 	.byte 4+F_IFUNC   	
      0030C5 52 45 41 44              5 	.ascii "READ"
      0030C9 00 80                    6 	.word READ_IDX 
      0030CB                       4491 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      0030CB 30 C4                    1 	.word LINK 
                           0030CD     2 	LINK=.
      0030CD                          3 QKEY:
      0030CD 14                       4 	.byte 4+F_IFUNC   	
      0030CE 51 4B 45 59              5 	.ascii "QKEY"
      0030D2 00 7E                    6 	.word QKEY_IDX 
      0030D4                       4492 	_dict_entry,5+F_IFUNC,PORTI,PRTI_IDX;const_porti 
      0030D4 30 CD                    1 	.word LINK 
                           0030D6     2 	LINK=.
      0030D6                          3 PORTI:
      0030D6 15                       4 	.byte 5+F_IFUNC   	
      0030D7 50 4F 52 54 49           5 	.ascii "PORTI"
      0030DC 00 7C                    6 	.word PRTI_IDX 
      0030DE                       4493 	_dict_entry,5+F_IFUNC,PORTH,PRTH_IDX;const_porth 
      0030DE 30 D6                    1 	.word LINK 
                           0030E0     2 	LINK=.
      0030E0                          3 PORTH:
      0030E0 15                       4 	.byte 5+F_IFUNC   	
      0030E1 50 4F 52 54 48           5 	.ascii "PORTH"
      0030E6 00 7A                    6 	.word PRTH_IDX 
      0030E8                       4494 	_dict_entry,5+F_IFUNC,PORTG,PRTG_IDX;const_portg 
      0030E8 30 E0                    1 	.word LINK 
                           0030EA     2 	LINK=.
      0030EA                          3 PORTG:
      0030EA 15                       4 	.byte 5+F_IFUNC   	
      0030EB 50 4F 52 54 47           5 	.ascii "PORTG"
      0030F0 00 78                    6 	.word PRTG_IDX 
      0030F2                       4495 	_dict_entry,5+F_IFUNC,PORTF,PRTF_IDX;const_portf
      0030F2 30 EA                    1 	.word LINK 
                           0030F4     2 	LINK=.
      0030F4                          3 PORTF:
      0030F4 15                       4 	.byte 5+F_IFUNC   	
      0030F5 50 4F 52 54 46           5 	.ascii "PORTF"
      0030FA 00 76                    6 	.word PRTF_IDX 
      0030FC                       4496 	_dict_entry,5+F_IFUNC,PORTE,PRTE_IDX;const_porte
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      0030FC 30 F4                    1 	.word LINK 
                           0030FE     2 	LINK=.
      0030FE                          3 PORTE:
      0030FE 15                       4 	.byte 5+F_IFUNC   	
      0030FF 50 4F 52 54 45           5 	.ascii "PORTE"
      003104 00 74                    6 	.word PRTE_IDX 
      003106                       4497 	_dict_entry,5+F_IFUNC,PORTD,PRTD_IDX;const_portd
      003106 30 FE                    1 	.word LINK 
                           003108     2 	LINK=.
      003108                          3 PORTD:
      003108 15                       4 	.byte 5+F_IFUNC   	
      003109 50 4F 52 54 44           5 	.ascii "PORTD"
      00310E 00 72                    6 	.word PRTD_IDX 
      003110                       4498 	_dict_entry,5+F_IFUNC,PORTC,PRTC_IDX;const_portc
      003110 31 08                    1 	.word LINK 
                           003112     2 	LINK=.
      003112                          3 PORTC:
      003112 15                       4 	.byte 5+F_IFUNC   	
      003113 50 4F 52 54 43           5 	.ascii "PORTC"
      003118 00 70                    6 	.word PRTC_IDX 
      00311A                       4499 	_dict_entry,5+F_IFUNC,PORTB,PRTB_IDX;const_portb
      00311A 31 12                    1 	.word LINK 
                           00311C     2 	LINK=.
      00311C                          3 PORTB:
      00311C 15                       4 	.byte 5+F_IFUNC   	
      00311D 50 4F 52 54 42           5 	.ascii "PORTB"
      003122 00 6E                    6 	.word PRTB_IDX 
      003124                       4500 	_dict_entry,5+F_IFUNC,PORTA,PRTA_IDX;const_porta 
      003124 31 1C                    1 	.word LINK 
                           003126     2 	LINK=.
      003126                          3 PORTA:
      003126 15                       4 	.byte 5+F_IFUNC   	
      003127 50 4F 52 54 41           5 	.ascii "PORTA"
      00312C 00 6C                    6 	.word PRTA_IDX 
      00312E                       4501 	_dict_entry 5,PRINT,PRT_IDX;print 
      00312E 31 26                    1 	.word LINK 
                           003130     2 	LINK=.
      003130                          3 PRINT:
      003130 05                       4 	.byte 5   	
      003131 50 52 49 4E 54           5 	.ascii "PRINT"
      003136 00 6A                    6 	.word PRT_IDX 
      003138                       4502 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      003138 31 30                    1 	.word LINK 
                           00313A     2 	LINK=.
      00313A                          3 POUT:
      00313A 14                       4 	.byte 4+F_IFUNC   	
      00313B 50 4F 55 54              5 	.ascii "POUT"
      00313F 00 68                    6 	.word POUT_IDX 
      003141                       4503 	_dict_entry,4,POKE,POKE_IDX;poke 
      003141 31 3A                    1 	.word LINK 
                           003143     2 	LINK=.
      003143                          3 POKE:
      003143 04                       4 	.byte 4   	
      003144 50 4F 4B 45              5 	.ascii "POKE"
      003148 00 66                    6 	.word POKE_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      00314A                       4504 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      00314A 31 43                    1 	.word LINK 
                           00314C     2 	LINK=.
      00314C                          3 PMODE:
      00314C 05                       4 	.byte 5   	
      00314D 50 4D 4F 44 45           5 	.ascii "PMODE"
      003152 00 60                    6 	.word PMODE_IDX 
      003154                       4505 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      003154 31 4C                    1 	.word LINK 
                           003156     2 	LINK=.
      003156                          3 PINP:
      003156 14                       4 	.byte 4+F_IFUNC   	
      003157 50 49 4E 50              5 	.ascii "PINP"
      00315B 00 64                    6 	.word PINP_IDX 
      00315D                       4506 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      00315D 31 56                    1 	.word LINK 
                           00315F     2 	LINK=.
      00315F                          3 PEEK:
      00315F 14                       4 	.byte 4+F_IFUNC   	
      003160 50 45 45 4B              5 	.ascii "PEEK"
      003164 00 62                    6 	.word PEEK_IDX 
      003166                       4507 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      003166 31 5F                    1 	.word LINK 
                           003168     2 	LINK=.
      003168                          3 PAUSE:
      003168 05                       4 	.byte 5   	
      003169 50 41 55 53 45           5 	.ascii "PAUSE"
      00316E 00 5E                    6 	.word PAUSE_IDX 
      003170                       4508 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      003170 31 68                    1 	.word LINK 
                           003172     2 	LINK=.
      003172                          3 PAD:
      003172 13                       4 	.byte 3+F_IFUNC   	
      003173 50 41 44                 5 	.ascii "PAD"
      003176 00 5C                    6 	.word PAD_IDX 
      003178                       4509 	_dict_entry,2+F_OR,OR,OR_IDX; OR operator 
      003178 31 72                    1 	.word LINK 
                           00317A     2 	LINK=.
      00317A                          3 OR:
      00317A 82                       4 	.byte 2+F_OR   	
      00317B 4F 52                    5 	.ascii "OR"
      00317D 00 FC                    6 	.word OR_IDX 
      00317F                       4510 	_dict_entry,2,ON,ON_IDX; cmd_on 
      00317F 31 7A                    1 	.word LINK 
                           003181     2 	LINK=.
      003181                          3 ON:
      003181 02                       4 	.byte 2   	
      003182 4F 4E                    5 	.ascii "ON"
      003184 00 BA                    6 	.word ON_IDX 
      003186                       4511 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      003186 31 81                    1 	.word LINK 
                           003188     2 	LINK=.
      003188                          3 ODR:
      003188 13                       4 	.byte 3+F_IFUNC   	
      003189 4F 44 52                 5 	.ascii "ODR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      00318C 00 5A                    6 	.word ODR_IDX 
      00318E                       4512 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      00318E 31 88                    1 	.word LINK 
                           003190     2 	LINK=.
      003190                          3 NOT:
      003190 13                       4 	.byte 3+F_IFUNC   	
      003191 4E 4F 54                 5 	.ascii "NOT"
      003194 00 58                    6 	.word NOT_IDX 
      003196                       4513 	_dict_entry,4,NEXT,NEXT_IDX;next 
      003196 31 90                    1 	.word LINK 
                           003198     2 	LINK=.
      003198                          3 NEXT:
      003198 04                       4 	.byte 4   	
      003199 4E 45 58 54              5 	.ascii "NEXT"
      00319D 00 54                    6 	.word NEXT_IDX 
      00319F                       4514 	_dict_entry,3,NEW,NEW_IDX;new
      00319F 31 98                    1 	.word LINK 
                           0031A1     2 	LINK=.
      0031A1                          3 NEW:
      0031A1 03                       4 	.byte 3   	
      0031A2 4E 45 57                 5 	.ascii "NEW"
      0031A5 00 56                    6 	.word NEW_IDX 
      0031A7                       4515 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      0031A7 31 A1                    1 	.word LINK 
                           0031A9     2 	LINK=.
      0031A9                          3 LSHIFT:
      0031A9 16                       4 	.byte 6+F_IFUNC   	
      0031AA 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0031B0 00 52                    6 	.word LSHIFT_IDX 
      0031B2                       4516 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      0031B2 31 A9                    1 	.word LINK 
                           0031B4     2 	LINK=.
      0031B4                          3 LOG:
      0031B4 13                       4 	.byte 3+F_IFUNC   	
      0031B5 4C 4F 47                 5 	.ascii "LOG"
      0031B8 00 50                    6 	.word LOG_IDX 
      0031BA                       4517 	_dict_entry 4,LIST,LIST_IDX;list
      0031BA 31 B4                    1 	.word LINK 
                           0031BC     2 	LINK=.
      0031BC                          3 LIST:
      0031BC 04                       4 	.byte 4   	
      0031BD 4C 49 53 54              5 	.ascii "LIST"
      0031C1 00 4E                    6 	.word LIST_IDX 
      0031C3                       4518 	_dict_entry 3,LET,LET_IDX;let 
      0031C3 31 BC                    1 	.word LINK 
                           0031C5     2 	LINK=.
      0031C5                          3 LET:
      0031C5 03                       4 	.byte 3   	
      0031C6 4C 45 54                 5 	.ascii "LET"
      0031C9 00 4C                    6 	.word LET_IDX 
      0031CB                       4519 	_dict_entry,3+F_CFUNC,KEY,KEY_IDX;key 
      0031CB 31 C5                    1 	.word LINK 
                           0031CD     2 	LINK=.
      0031CD                          3 KEY:
      0031CD 23                       4 	.byte 3+F_CFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      0031CE 4B 45 59                 5 	.ascii "KEY"
      0031D1 00 4A                    6 	.word KEY_IDX 
      0031D3                       4520 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      0031D3 31 CD                    1 	.word LINK 
                           0031D5     2 	LINK=.
      0031D5                          3 IWDGREF:
      0031D5 07                       4 	.byte 7   	
      0031D6 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      0031DD 00 48                    6 	.word IWDGREF_IDX 
      0031DF                       4521 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      0031DF 31 D5                    1 	.word LINK 
                           0031E1     2 	LINK=.
      0031E1                          3 IWDGEN:
      0031E1 06                       4 	.byte 6   	
      0031E2 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      0031E8 00 46                    6 	.word IWDGEN_IDX 
      0031EA                       4522 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      0031EA 31 E1                    1 	.word LINK 
                           0031EC     2 	LINK=.
      0031EC                          3 INVERT:
      0031EC 16                       4 	.byte 6+F_IFUNC   	
      0031ED 49 4E 56 45 52 54        5 	.ascii "INVERT"
      0031F3 00 44                    6 	.word INVERT_IDX 
      0031F5                       4523 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      0031F5 31 EC                    1 	.word LINK 
                           0031F7     2 	LINK=.
      0031F7                          3 INPUT:
      0031F7 05                       4 	.byte 5   	
      0031F8 49 4E 50 55 54           5 	.ascii "INPUT"
      0031FD 00 42                    6 	.word INPUT_IDX 
      0031FF                       4524 	_dict_entry,2,IF,IF_IDX;if 
      0031FF 31 F7                    1 	.word LINK 
                           003201     2 	LINK=.
      003201                          3 IF:
      003201 02                       4 	.byte 2   	
      003202 49 46                    5 	.ascii "IF"
      003204 00 40                    6 	.word IF_IDX 
      003206                       4525 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      003206 32 01                    1 	.word LINK 
                           003208     2 	LINK=.
      003208                          3 IDR:
      003208 13                       4 	.byte 3+F_IFUNC   	
      003209 49 44 52                 5 	.ascii "IDR"
      00320C 00 3E                    6 	.word IDR_IDX 
      00320E                       4526 	_dict_entry,3,HEX,HEX_IDX;hex_base
      00320E 32 08                    1 	.word LINK 
                           003210     2 	LINK=.
      003210                          3 HEX:
      003210 03                       4 	.byte 3   	
      003211 48 45 58                 5 	.ascii "HEX"
      003214 00 3C                    6 	.word HEX_IDX 
      003216                       4527 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      003216 32 10                    1 	.word LINK 
                           003218     2 	LINK=.
      003218                          3 GPIO:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      003218 14                       4 	.byte 4+F_IFUNC   	
      003219 47 50 49 4F              5 	.ascii "GPIO"
      00321D 00 3A                    6 	.word GPIO_IDX 
      00321F                       4528 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      00321F 32 18                    1 	.word LINK 
                           003221     2 	LINK=.
      003221                          3 GOTO:
      003221 04                       4 	.byte 4   	
      003222 47 4F 54 4F              5 	.ascii "GOTO"
      003226 00 38                    6 	.word GOTO_IDX 
      003228                       4529 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      003228 32 21                    1 	.word LINK 
                           00322A     2 	LINK=.
      00322A                          3 GOSUB:
      00322A 05                       4 	.byte 5   	
      00322B 47 4F 53 55 42           5 	.ascii "GOSUB"
      003230 00 36                    6 	.word GOSUB_IDX 
      003232                       4530 	_dict_entry,3,GET,GET_IDX; cmd_get 
      003232 32 2A                    1 	.word LINK 
                           003234     2 	LINK=.
      003234                          3 GET:
      003234 03                       4 	.byte 3   	
      003235 47 45 54                 5 	.ascii "GET"
      003238 00 BC                    6 	.word GET_IDX 
      00323A                       4531 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      00323A 32 34                    1 	.word LINK 
                           00323C     2 	LINK=.
      00323C                          3 FREE:
      00323C 14                       4 	.byte 4+F_IFUNC   	
      00323D 46 52 45 45              5 	.ascii "FREE"
      003241 00 90                    6 	.word FREE_IDX 
      003243                       4532 	_dict_entry,3,FOR,FOR_IDX;for 
      003243 32 3C                    1 	.word LINK 
                           003245     2 	LINK=.
      003245                          3 FOR:
      003245 03                       4 	.byte 3   	
      003246 46 4F 52                 5 	.ascii "FOR"
      003249 00 34                    6 	.word FOR_IDX 
      00324B                       4533 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      00324B 32 45                    1 	.word LINK 
                           00324D     2 	LINK=.
      00324D                          3 FCPU:
      00324D 04                       4 	.byte 4   	
      00324E 46 43 50 55              5 	.ascii "FCPU"
      003252 00 30                    6 	.word FCPU_IDX 
      003254                       4534 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      003254 32 4D                    1 	.word LINK 
                           003256     2 	LINK=.
      003256                          3 ERASE:
      003256 05                       4 	.byte 5   	
      003257 45 52 41 53 45           5 	.ascii "ERASE"
      00325C 00 2E                    6 	.word ERASE_IDX 
      00325E                       4535 	_dict_entry,3,END,END_IDX;cmd_end  
      00325E 32 56                    1 	.word LINK 
                           003260     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      003260                          3 END:
      003260 03                       4 	.byte 3   	
      003261 45 4E 44                 5 	.ascii "END"
      003264 00 2C                    6 	.word END_IDX 
      003266                       4536 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      003266 32 60                    1 	.word LINK 
                           003268     2 	LINK=.
      003268                          3 EEPROM:
      003268 16                       4 	.byte 6+F_IFUNC   	
      003269 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      00326F 00 2A                    6 	.word EEPROM_IDX 
      003271                       4537 	_dict_entry,6+F_IFUNC,EEFREE,EEFREE_IDX; func_eefree 
      003271 32 68                    1 	.word LINK 
                           003273     2 	LINK=.
      003273                          3 EEFREE:
      003273 16                       4 	.byte 6+F_IFUNC   	
      003274 45 45 46 52 45 45        5 	.ascii "EEFREE"
      00327A 00 C0                    6 	.word EEFREE_IDX 
      00327C                       4538 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      00327C 32 73                    1 	.word LINK 
                           00327E     2 	LINK=.
      00327E                          3 EDIT:
      00327E 04                       4 	.byte 4   	
      00327F 45 44 49 54              5 	.ascii "EDIT"
      003283 00 28                    6 	.word EDIT_IDX 
      003285                       4539 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      003285 32 7E                    1 	.word LINK 
                           003287     2 	LINK=.
      003287                          3 DWRITE:
      003287 06                       4 	.byte 6+F_CMD   	
      003288 44 57 52 49 54 45        5 	.ascii "DWRITE"
      00328E 00 26                    6 	.word DWRITE_IDX 
      003290                       4540 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      003290 32 87                    1 	.word LINK 
                           003292     2 	LINK=.
      003292                          3 DREAD:
      003292 15                       4 	.byte 5+F_IFUNC   	
      003293 44 52 45 41 44           5 	.ascii "DREAD"
      003298 00 24                    6 	.word DREAD_IDX 
      00329A                       4541 	_dict_entry,2,DO,DO_IDX;do_loop
      00329A 32 92                    1 	.word LINK 
                           00329C     2 	LINK=.
      00329C                          3 DO:
      00329C 02                       4 	.byte 2   	
      00329D 44 4F                    5 	.ascii "DO"
      00329F 00 22                    6 	.word DO_IDX 
      0032A1                       4542 	_dict_entry,3,DEC,DEC_IDX;dec_base
      0032A1 32 9C                    1 	.word LINK 
                           0032A3     2 	LINK=.
      0032A3                          3 DEC:
      0032A3 03                       4 	.byte 3   	
      0032A4 44 45 43                 5 	.ascii "DEC"
      0032A7 00 20                    6 	.word DEC_IDX 
      0032A9                       4543 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      0032A9 32 A3                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



                           0032AB     2 	LINK=.
      0032AB                          3 DDR:
      0032AB 13                       4 	.byte 3+F_IFUNC   	
      0032AC 44 44 52                 5 	.ascii "DDR"
      0032AF 00 1E                    6 	.word DDR_IDX 
      0032B1                       4544 	_dict_entry,4,DATA,DATA_IDX;data  
      0032B1 32 AB                    1 	.word LINK 
                           0032B3     2 	LINK=.
      0032B3                          3 DATA:
      0032B3 04                       4 	.byte 4   	
      0032B4 44 41 54 41              5 	.ascii "DATA"
      0032B8 00 1C                    6 	.word DATA_IDX 
      0032BA                       4545 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      0032BA 32 B3                    1 	.word LINK 
                           0032BC     2 	LINK=.
      0032BC                          3 CRL:
      0032BC 13                       4 	.byte 3+F_IFUNC   	
      0032BD 43 52 4C                 5 	.ascii "CRL"
      0032C0 00 1A                    6 	.word CRL_IDX 
      0032C2                       4546 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      0032C2 32 BC                    1 	.word LINK 
                           0032C4     2 	LINK=.
      0032C4                          3 CRH:
      0032C4 13                       4 	.byte 3+F_IFUNC   	
      0032C5 43 52 48                 5 	.ascii "CRH"
      0032C8 00 18                    6 	.word CRH_IDX 
      0032CA                       4547 	_dict_entry,5,CONST,CONST_IDX; cmd_const 
      0032CA 32 C4                    1 	.word LINK 
                           0032CC     2 	LINK=.
      0032CC                          3 CONST:
      0032CC 05                       4 	.byte 5   	
      0032CD 43 4F 4E 53 54           5 	.ascii "CONST"
      0032D2 00 BE                    6 	.word CONST_IDX 
      0032D4                       4548 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      0032D4 32 CC                    1 	.word LINK 
                           0032D6     2 	LINK=.
      0032D6                          3 CHAR:
      0032D6 24                       4 	.byte 4+F_CFUNC   	
      0032D7 43 48 41 52              5 	.ascii "CHAR"
      0032DB 00 16                    6 	.word CHAR_IDX 
      0032DD                       4549 	_dict_entry,3,BYE,BYE_IDX;bye 
      0032DD 32 D6                    1 	.word LINK 
                           0032DF     2 	LINK=.
      0032DF                          3 BYE:
      0032DF 03                       4 	.byte 3   	
      0032E0 42 59 45                 5 	.ascii "BYE"
      0032E3 00 14                    6 	.word BYE_IDX 
      0032E5                       4550 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      0032E5 32 DF                    1 	.word LINK 
                           0032E7     2 	LINK=.
      0032E7                          3 BTOGL:
      0032E7 05                       4 	.byte 5   	
      0032E8 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0032ED 00 12                    6 	.word BTOGL_IDX 
      0032EF                       4551 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      0032EF 32 E7                    1 	.word LINK 
                           0032F1     2 	LINK=.
      0032F1                          3 BTEST:
      0032F1 15                       4 	.byte 5+F_IFUNC   	
      0032F2 42 54 45 53 54           5 	.ascii "BTEST"
      0032F7 00 10                    6 	.word BTEST_IDX 
      0032F9                       4552 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      0032F9 32 F1                    1 	.word LINK 
                           0032FB     2 	LINK=.
      0032FB                          3 BSET:
      0032FB 04                       4 	.byte 4   	
      0032FC 42 53 45 54              5 	.ascii "BSET"
      003300 00 0E                    6 	.word BSET_IDX 
      003302                       4553 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      003302 32 FB                    1 	.word LINK 
                           003304     2 	LINK=.
      003304                          3 BRES:
      003304 04                       4 	.byte 4   	
      003305 42 52 45 53              5 	.ascii "BRES"
      003309 00 0C                    6 	.word BRES_IDX 
      00330B                       4554 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      00330B 33 04                    1 	.word LINK 
                           00330D     2 	LINK=.
      00330D                          3 BIT:
      00330D 13                       4 	.byte 3+F_IFUNC   	
      00330E 42 49 54                 5 	.ascii "BIT"
      003311 00 0A                    6 	.word BIT_IDX 
      003313                       4555 	_dict_entry,3,AWU,AWU_IDX;awu 
      003313 33 0D                    1 	.word LINK 
                           003315     2 	LINK=.
      003315                          3 AWU:
      003315 03                       4 	.byte 3   	
      003316 41 57 55                 5 	.ascii "AWU"
      003319 00 08                    6 	.word AWU_IDX 
      00331B                       4556 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      00331B 33 15                    1 	.word LINK 
                           00331D     2 	LINK=.
      00331D                          3 ASC:
      00331D 13                       4 	.byte 3+F_IFUNC   	
      00331E 41 53 43                 5 	.ascii "ASC"
      003321 00 06                    6 	.word ASC_IDX 
      003323                       4557 	_dict_entry,3+F_AND,AND,AND_IDX ; AND operator 
      003323 33 1D                    1 	.word LINK 
                           003325     2 	LINK=.
      003325                          3 AND:
      003325 73                       4 	.byte 3+F_AND   	
      003326 41 4E 44                 5 	.ascii "AND"
      003329 00 FA                    6 	.word AND_IDX 
      00332B                       4558 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      00332B 33 25                    1 	.word LINK 
                           00332D     2 	LINK=.
      00332D                          3 ADCREAD:
      00332D 17                       4 	.byte 7+F_IFUNC   	
      00332E 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      003335 00 04                    6 	.word ADCREAD_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      003337                       4559 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      003337 33 2D                    1 	.word LINK 
                           003339     2 	LINK=.
      003339                          3 ADCON:
      003339 05                       4 	.byte 5   	
      00333A 41 44 43 4F 4E           5 	.ascii "ADCON"
      00333F 00 02                    6 	.word ADCON_IDX 
      003341                       4560 kword_dict::
      003341                       4561 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      003341 33 39                    1 	.word LINK 
                           003343     2 	LINK=.
      003343                          3 ABS:
      003343 13                       4 	.byte 3+F_IFUNC   	
      003344 41 42 53                 5 	.ascii "ABS"
      003347 00 00                    6 	.word ABS_IDX 
                                   4562 
                                   4563 ;comands and fonctions address table 	
      003349                       4564 code_addr::
      003349 2A 87 25 DC 26 2C 29  4565 	.word abs,power_adc,analog_read,ascii,awu,bitmask ; 0..7
             25 2A 2E 2D 41
      003355 21 9A 21 78 21 DF 21  4566 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             BD 29 F9 29 0E 2E 01
      003363 2D FC 2E 15 2D F7 1C  4567 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             24 2D 7D 26 68 26 9F
      003371 1F 8D 2E 10 25 48 27  4568 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto,gpio ; 24..31 
             40 2A F8 27 DC 22 72
             24 A8 24 8E 29 75
      003385 1C 1F 2D F2 22 58 20  4569 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             98 2D 67 2C D1 2D 0F
             29 64
      003395 1C 7D 1E E8 2D 14 2A  4570 	.word let,list,log2,lshift,next,new ; 40..47
             9E 23 1E 27 36
      0033A1 2C B2 2D ED 2F A4 2A  4571 	.word func_not,const_odr,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             0D 2B 07 22 37 2E 0B
      0033AF 22 16 2E 06 1F F5 2D  4572 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             C0 2D C5 2D CA 2D CF
             2D D4
      0033BF 2D D9 2D DE 2D E3 2D  4573 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             E8 29 68 2E 91 00 C3
             21 35
      0033CF 2E 4A 24 CE 2B 94 2A  4574 	.word restore,return, random,rshift,run,free ; 72..79
             CB 24 EC 1C 29
      0033DB 2A 02 2F 86 2E EE 2F  4575 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             8D 2F 66 22 DC 26 EA
             2A 80
      0033EB 2C 95 2C AC 22 9C 25  4576 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             85 1C 72 29 A5 2D 90
             29 BA
      0033FB 21 3B 2C 2F 28 CB 1C  4577 	.word wait,words,write,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
             45 24 02 25 4F 1D A8
      003409 1D 3B 00 00           4578 	.word func_eefree,0 
                                   4579 
                                   4580 
                                   4581 
                                   4582 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      00340D                         30 test:
      00340D                         31     _vars VSIZE 
      00340D 52 08            [ 2]    1     sub sp,#VSIZE 
      00340F AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      003412 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      003414 CE 00 0F         [ 2]   34     ldw x,ticks 
      003417 1F 01            [ 2]   35     ldw (T,sp),x
      003419                         36 1$: ; test add24 
      003419 A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      00341B AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      00341E C7 00 0C         [ 1]   39     ld acc24,a 
      003421 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      003424 A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      003426 AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      003429 CD 01 6A         [ 4]   43     call add24 
      00342C 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      00342E 1D 00 01         [ 2]   45     subw x,#1
      003431 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      003433 26 E4            [ 1]   47     jrne 1$
      003435 CD 18 29         [ 4]   48     call prt_acc24
      003438 A6 20            [ 1]   49     ld a,#SPACE 
      00343A CD 09 44         [ 4]   50     call putc 
      00343D CE 00 0F         [ 2]   51     ldw x,ticks 
      003440 72 F0 01         [ 2]   52     subw x,(T,sp)
      003443 CD 18 12         [ 4]   53     call prt_i16  
      003446 A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      003448 CD 09 44         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      00344B CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      00344E 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      003450 CE 00 0F         [ 2]   60     ldw x,ticks 
      003453 1F 01            [ 2]   61     ldw (T,sp),x 
      003455                         62 2$: 
      003455 A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      003457 AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      00345A C7 00 0C         [ 1]   65     ld acc24,a 
      00345D CF 00 0D         [ 2]   66     ldw acc24+1,x  
      003460 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      003462 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      003465 CD 02 5D         [ 4]   69     call mul24 
      003468 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      00346A 1D 00 01         [ 2]   71     subw x,#1
      00346D 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      00346F 26 E4            [ 1]   73     jrne 2$ 
      003471 CD 18 29         [ 4]   74    call prt_acc24 
      003474 A6 20            [ 1]   75    ld a,#SPACE 
      003476 CD 09 44         [ 4]   76    call putc 
      003479 CE 00 0F         [ 2]   77     ldw x,ticks 
      00347C 72 F0 01         [ 2]   78     subw x,(T,sp)
      00347F CD 18 12         [ 4]   79     call prt_i16 
      003482 A6 0D            [ 1]   80     ld a,#CR 
      003484 CD 09 44         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      003487 CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      00348A 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      00348C CE 00 0F         [ 2]   85     ldw x,ticks 
      00348F 1F 01            [ 2]   86     ldw (T,sp),x 
      003491                         87 3$: 
      003491 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003493 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      003496 C7 00 0C         [ 1]   90     ld acc24,a 
      003499 CF 00 0D         [ 2]   91     ldw acc24+1,x  
      00349C A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      00349E AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      0034A1 CD 02 5D         [ 4]   94     call mul24 
      0034A4 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      0034A6 1D 00 01         [ 2]   96     subw x,#1
      0034A9 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      0034AB 26 E4            [ 1]   98     jrne 3$ 
      0034AD CD 18 29         [ 4]   99     call prt_acc24    
      0034B0 A6 20            [ 1]  100     ld a,#SPACE 
      0034B2 CD 09 44         [ 4]  101     call putc 
      0034B5 CE 00 0F         [ 2]  102     ldw x,ticks 
      0034B8 72 F0 01         [ 2]  103     subw x,(T,sp)
      0034BB CD 18 12         [ 4]  104     call prt_i16 
      0034BE A6 0D            [ 1]  105     ld a,#CR 
      0034C0 CD 09 44         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      0034C3 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      0034C6 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      0034C8 CE 00 0F         [ 2]  110     ldw x,ticks 
      0034CB 1F 01            [ 2]  111     ldw (T,sp),x 
      0034CD                        112 4$:
      0034CD A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      0034CF AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      0034D2 C7 00 0C         [ 1]  115     ld acc24,a 
      0034D5 CF 00 0D         [ 2]  116     ldw acc24+1,x  
      0034D8 A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      0034DA AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      0034DD CD 02 5D         [ 4]  119     call mul24 
      0034E0 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      0034E2 1D 00 01         [ 2]  121     subw x,#1
      0034E5 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      0034E7 26 E4            [ 1]  123     jrne 4$ 
      0034E9 CD 18 29         [ 4]  124     call prt_acc24 
      0034EC A6 20            [ 1]  125     ld a,#SPACE 
      0034EE CD 09 44         [ 4]  126     call putc 
      0034F1 CE 00 0F         [ 2]  127     ldw x,ticks 
      0034F4 72 F0 01         [ 2]  128     subw x,(T,sp)
      0034F7 CD 18 12         [ 4]  129     call prt_i16 
      0034FA A6 0D            [ 1]  130     ld a,#CR 
      0034FC CD 09 44         [ 4]  131     call putc 
                                    132 ; test abs24 
      0034FF CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      003502 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      003504 CE 00 0F         [ 2]  135     ldw x,ticks 
      003507 1F 01            [ 2]  136     ldw (T,sp),x 
      003509                        137 5$: 
      003509 A6 FF            [ 1]  138     ld a,#0xff
      00350B AE FF FF         [ 2]  139     ldw x,#0xffff
      00350E CD 01 DF         [ 4]  140     call abs24 
      003511 C7 00 0C         [ 1]  141     ld acc24,a 
      003514 CF 00 0D         [ 2]  142     ldw acc24+1,x
      003517 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      003519 1D 00 01         [ 2]  144     subw x,#1
      00351C 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      00351E 26 E9            [ 1]  146     jrne 5$ 
      003520 CD 18 29         [ 4]  147     call prt_acc24 
      003523 A6 20            [ 1]  148     ld a,#SPACE 
      003525 CD 09 44         [ 4]  149     call putc 
      003528 CE 00 0F         [ 2]  150     ldw x,ticks 
      00352B 72 F0 01         [ 2]  151     subw x,(T,sp)
      00352E CD 18 12         [ 4]  152     call prt_i16 
      003531                        153 6$:
      003531 A6 0D            [ 1]  154     ld a,#CR 
      003533 CD 09 44         [ 4]  155     call putc 
      003536 CD 35 7C         [ 4]  156     call read_integer 
      003539 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      00353E 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      003543 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      003548 CD 35 7C         [ 4]  160     call read_integer 
      00354B C6 00 0C         [ 1]  161     ld a,acc24 
      00354E CE 00 0D         [ 2]  162     ldw x,acc16 
      003551 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      003556 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      00355B 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      003560 CD 03 27         [ 4]  166     call div24 
      003563 88               [ 1]  167     push a 
      003564 89               [ 2]  168     pushw x 
      003565 CD 18 29         [ 4]  169     call prt_acc24 
      003568 A6 20            [ 1]  170     ld a,#SPACE 
      00356A CD 09 44         [ 4]  171     call putc 
      00356D 85               [ 2]  172     popw x
      00356E CF 00 0D         [ 2]  173     ldw acc16,x  
      003571 32 00 0C         [ 1]  174     pop acc24 
      003574 CD 18 29         [ 4]  175     call prt_acc24
      003577 20 B8            [ 2]  176     jra 6$
      003579                        177     _drop VSIZE 
      003579 5B 08            [ 2]    1     addw sp,#VSIZE 
      00357B 81               [ 4]  178     ret 
                                    179 
                                    180 
      00357C                        181 read_integer:
      00357C A6 3F            [ 1]  182     ld a,#'? 
      00357E CD 09 44         [ 4]  183     call putc  
      003581 72 5F 00 03      [ 1]  184 	clr count  
      003585 CD 0A A6         [ 4]  185 	call readln 
      003588 AE 16 68         [ 2]  186 	ldw x,#tib 
      00358B 3B 00 03         [ 1]  187 	push count
      00358E 4B 00            [ 1]  188 	push #0 
      003590 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003593 5C               [ 1]  190 	incw x 
      003594                        191 	_drop 2 
      003594 5B 02            [ 2]    1     addw sp,#2 
      003596 72 5F 00 01      [ 1]  192 	clr in 
      00359A CD 0F 2A         [ 4]  193 	call get_token
      00359D A1 84            [ 1]  194 	cp a,#TK_INTGR
      00359F 27 0F            [ 1]  195 	jreq 3$ 
      0035A1 A1 11            [ 1]  196 	cp a,#TK_MINUS
      0035A3 CD 0F 2A         [ 4]  197 	call get_token 
      0035A6 A1 84            [ 1]  198 	cp a,#TK_INTGR 
      0035A8 27 03            [ 1]  199 	jreq 2$
      0035AA CC 16 BC         [ 2]  200 	jp syntax_error
      0035AD                        201 2$:
      0035AD CD 02 0D         [ 4]  202 	call neg_acc24  	
      0035B0                        203 3$: 
      0035B0 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003600                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003600                         30 app_space::
      003600 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003602 00 00                   32 app_size: .word 0 
      003604                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        003343 R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      003339 R
    ADCON_ID=  000002     |   4 ADCREAD    00332D R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 AND        003325 R   |     AND_IDX =  0000FA     |     ARG_OFS =  000002 
    ARROW_LE=  000080     |     ARROW_RI=  000081     |   4 ASC        00331D R
    ASC_IDX =  000006     |     ATMP    =  000001     |     ATTRIB  =  000002 
  4 AUTO_RUN   000157 R   |   4 AWU        003315 R   |   4 AWUHandl   000004 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  000008     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   4 BIT        00330D R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000A 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000D     |   4 BRES       003304 R   |     BRES_IDX=  00000C 
    BS      =  000008     |   4 BSET       0032FB R   |     BSET_IDX=  00000E 
    BSIZE   =  000006     |   4 BTEST      0032F1 R   |     BTEST_ID=  000010 
  4 BTOGL      0032E7 R   |     BTOGL_ID=  000012     |     BTW     =  000001 
    BUFPTR  =  000003     |   4 BYE        0032DF R   |     BYE_IDX =  000014 
    C       =  000001     |     CAN     =  000018     |   4 CANT_DO    002873 R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000003 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  4 CHAR       0032D6 R   |     CHAR_IDX=  000016     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMDX    =  000001 
    CMD_END =  000002     |     CNAME   =  000001     |     CNT     =  000006 
    CNTR    =  000003     |     CNT_LO  =  000004     |     COMMA   =  00002C 
  4 CONST      0032CC R   |   4 CONST_CO   001D25 R   |     CONST_ID=  0000BE 
    CONST_RE=  000005     |     COUNT   =  000003     |     CPOS    =  000003 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  4 CRH        0032C4 R   |     CRH_IDX =  000018     |   4 CRL        0032BC R
    CRL_IDX =  00001A     |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000009 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  4 DATA       0032B3 R   |     DATA_IDX=  00001C     |     DBG_A   =  000008 
    DBG_CC  =  000009     |     DBG_X   =  000006     |     DBG_Y   =  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   4 DDR        0032AB R   |     DDR_IDX =  00001E 
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  4 DEC        0032A3 R   |     DEC_IDX =  000020     |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |     DIVISOR =  000001 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   4 DO         00329C R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     DO_IDX  =  000022     |   4 DREAD      003292 R
    DREAD_ID=  000024     |   4 DWRITE     003287 R   |     DWRITE_I=  000026 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]

Symbol Table

  4 EDIT       00327E R   |     EDIT_IDX=  000028     |   4 EEFREE     003273 R
    EEFREE_I=  0000C0     |   4 EEPROM     003268 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_I=  00002A     |     EEPROM_S=  000800 
    EEPTR   =  000003     |     EM      =  000019     |   4 END        003260 R
    END_IDX =  00002C     |     ENQ     =  000005     |     EOF     =  0000FF 
    EOT     =  000004     |   4 ERASE      003256 R   |     ERASE_ID=  00002E 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_OVER=  000010 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
  4 FCPU       00324D R   |     FCPU_IDX=  000030     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
  4 FLASH_ME   001EC8 R   |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   4 FOR        003245 R   |     FOR_IDX =  000034 
  4 FREE       00323C R   |     FREE_IDX=  000090     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_AND   =  000070     |     F_CFUNC =  000020 
    F_CMD   =  000000     |     F_CONST =  000030     |     F_IFUNC =  000010 
    F_OR    =  000080     |     F_XOR   =  000090     |   4 GET        003234 R
    GET_IDX =  0000BC     |   4 GOSUB      00322A R   |     GOSUB_ID=  000036 
  4 GOTO       003221 R   |     GOTO_IDX=  000038     |   4 GPIO       003218 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_IDX=  00003A 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  4 HEX        003210 R   |     HEX_IDX =  00003C     |     HOME    =  000082 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   4 IDR        003208 R   |     IDR_IDX =  00003E 
  4 IF         003201 R   |     IF_IDX  =  000040     |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   4 INPUT      0031F7 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000042     |     INPUT_PU=  000001     |     INT24   =  000005 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   4 INVERT     0031EC R   |     INVERT_I=  000044 
    INW     =  00000B     |     IPOS    =  000001     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   4 IWDGEN     0031E1 R   |     IWDGEN_I=  000046 
  4 IWDGREF    0031D5 R   |     IWDGREF_=  000048     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  4 KEY        0031CD R   |     KEY_END =  000083     |     KEY_IDX =  00004A 
    KW_TYPE_=  0000F0     |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000002     |   4 LET        0031C5 R   |     LET_IDX =  00004C 
    LF      =  00000A     |     LIMIT   =  000001     |     LINENO  =  000005 
  4 LINK    =  003343 R   |   4 LIST       0031BC R   |     LIST_IDX=  00004E 
    LL      =  000001     |     LLEN    =  000002     |     LL_HB   =  000001 
    LN_PTR  =  000005     |   4 LOG        0031B4 R   |     LOG_IDX =  000050 
    LOOP_CNT=  002710     |   4 LSHIFT     0031A9 R   |     LSHIFT_I=  000052 
    MAJOR   =  000002     |     MASK    =  000002     |     MAX_LINE=  007FFF 
    MINOR   =  000000     |     MULOP   =  000001     |     N1      =  000004 
    N2      =  000007     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000001     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        0031A1 R   |     NEW_IDX =  000056     |   4 NEXT       003198 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

    NEXT_IDX=  000054     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NLEN_MAS=  00000F     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   4 NOT        003190 R   |     NOT_IDX =  000058 
  4 NOT_SAVE   001FBA R   |   4 NO_APP     0028B5 R   |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R
  4 ODR        003188 R   |     ODR_IDX =  00005A     |   4 ON         003181 R
    ONOFF   =  000003     |     ON_IDX  =  0000BA     |     OP      =  000002 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   4 OR         00317A R   |     OR_IDX  =  0000FC 
    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVRWR   =  000004 
    PA      =  000000     |   4 PAD        003172 R   |     PAD_IDX =  00005C 
    PAD_SIZE=  000080     |   4 PAUSE      003168 R   |     PAUSE_ID=  00005E 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   4 PEEK       00315F R   |     PEEK_IDX=  000062 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PINNO   =  000001     |   4 PINP       003156 R
    PINP_IDX=  000064     |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   4 PMODE      00314C R
    PMODE_ID=  000060     |   4 POKE       003143 R   |     POKE_IDX=  000066 
  4 PORTA      003126 R   |   4 PORTB      00311C R   |   4 PORTC      003112 R
  4 PORTD      003108 R   |   4 PORTE      0030FE R   |   4 PORTF      0030F4 R
  4 PORTG      0030EA R   |   4 PORTH      0030E0 R   |   4 PORTI      0030D6 R
  4 POUT       00313A R   |     POUT_IDX=  000068     |     PREV    =  000001 
  4 PRINT      003130 R   |     PROD    =  000001     |     PROD_SIG=  00000A 
  4 PROG_ADD   001E9E R   |   4 PROG_SIZ   001EB0 R   |     PRTA_IDX=  00006C 
    PRTB_IDX=  00006E     |     PRTC_IDX=  000070     |     PRTD_IDX=  000072 
    PRTE_IDX=  000074     |     PRTF_IDX=  000076     |     PRTG_IDX=  000078 
    PRTH_IDX=  00007A     |     PRTI_IDX=  00007C     |     PRT_IDX =  00006A 
    PSIZE   =  000001     |     PSTR    =  000003     |   4 QKEY       0030CD R
    QKEY_IDX=  00007E     |     QSIGN   =  000005     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |   4 RAM_MEM    001ED9 R   |     RAM_SIZE=  001800 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

    RBT_IDX =  000082     |   4 READ       0030C4 R   |     READ_IDX=  000080 
  4 REBOOT     0030B9 R   |     RECLEN  =  000005     |   4 REG_A      000562 R
  4 REG_CC     000566 R   |   4 REG_EPC    000555 R   |   4 REG_SP     00056B R
  4 REG_X      00055E R   |   4 REG_Y      00055A R   |     RELOP   =  000001 
  4 REM        0030B1 R   |     REM_IDX =  000084     |   4 RESTORE    0030A5 R
    REST_IDX=  000086     |     RETL1   =  000001     |   4 RETURN     00309A R
    RET_ADDR=  000003     |     RET_BPTR=  000003     |     RET_IDX =  000088 
    RET_INW =  000005     |   4 RND        003092 R   |     RND_IDX =  00008A 
    ROP     =  004800     |     RS      =  00001E     |   4 RSHIFT     003087 R
    RSHIFT_I=  00008C     |     RSIGN   =  000006     |     RST_SR  =  0050B3 
  4 RUN        00307F R   |     RUN_IDX =  00008E     |     RXCHAR  =  000001 
    RX_QUEUE=  000008     |     R_A     =  000007     |     R_CC    =  000008 
    R_X     =  000005     |     R_Y     =  000003     |   4 SAVE       003076 R
    SAVE_IDX=  000032     |     SEPARATE=  000000     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |     SI      =  00000F 
    SIGN    =  000001     |   4 SIGNATUR   002871 R   |   4 SIZE       00306D R
    SIZE_IDX=  0000B8     |     SKIP    =  000005     |   4 SLEEP      003063 R
    SLEEP_ID=  000092     |     SO      =  00000E     |     SOH     =  000001 
    SPACE   =  000020     |   4 SPIEN      003059 R   |     SPIEN_ID=  000096 
  4 SPIRD      00304F R   |     SPIRD_ID=  000094     |   4 SPISEL     003044 R
    SPISEL_I=  000098     |   4 SPIWR      00303A R   |     SPIWR_ID=  00009A 
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_CS_B=  000005     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_SR_B=  000007     |     SPI_SR_C=  000004     |     SPI_SR_M=  000005 
    SPI_SR_O=  000006     |     SPI_SR_R=  000000     |     SPI_SR_T=  000001 
    SPI_SR_W=  000003     |     SPI_TXCR=  005207     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  00008C     |   4 STATES     000518 R
  4 STEP       003031 R   |     STEP_IDX=  00009C     |   4 STOP       003028 R
    STOP_IDX=  00009E     |     STR     =  000003     |   4 STR_BYTE   001EC1 R
    STX     =  000002     |     SUB     =  00001A     |     SUP     =  000084 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     T       =  000001 
    TAB     =  000009     |     TABW    =  000004     |     TAB_WIDT=  000004 
    TARGET  =  000001     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   4 TICKS      00301E R
    TICKS_ID=  0000A0     |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   4 TIMEOUT    003012 R
  4 TIMER      003008 R   |     TIMER_ID=  0000A2     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_AND  =  000087     |     TK_ARRAY=  000005 
    TK_CFUNC=  000082     |     TK_CHAR =  000004     |     TK_CMD  =  000080 
    TK_COLON=  00000A     |     TK_COMMA=  000008     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_FLOAT=  000086 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LABEL=  000003     |     TK_LE   =  000036     |     TK_LPARE=  000006 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_OR   =  000088     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000007     |     TK_SHARP=  000009     |     TK_VAR  =  000085 
    TK_XOR  =  000089     |     TMROUT_I=  0000A4     |   4 TO         003001 R
  4 TONE       002FF8 R   |     TONE_IDX=  0000A8     |     TOWRITE =  000005 
    TO_IDX  =  0000A6     |   4 Timer4Up   000021 R   |   4 TrapHand   000012 R
    U8      =  000001     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART2   =  000001 
    UART3   =  000002     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   4 UBOUND     002FED R   |     UBOUND_I=  0000AA 
  4 UBTN_Han   000068 R   |   4 UFLASH     002FE2 R   |     UFLASH_I=  0000AC 
  4 UNTIL      002FD8 R   |     UNTIL_ID=  0000AE     |     UPDATE  =  000006 
    US      =  00001F     |   4 USER_ABO   000070 R   |   4 USR        002FD0 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    USR_IDX =  0000B0     |   4 Uart1RxH   0008D2 R   |   4 UserButt   000044 R
    VAL1    =  02FFFF     |     VAL2    =  00002A     |     VAL3    =  000003 
    VAL4    =  0005FF     |     VAL5    =  FFFFFFFD     |     VSISE   =  000003 
    VSIZE   =  000008     |     VT      =  00000B     |   4 WAIT       002FC7 R
    WAIT_IDX=  0000B2     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  4 WORDS      002FBD R   |     WORDS_ID=  0000B4     |   4 WRITE      002FB3 R
    WRITE_ID=  0000B6     |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   4 XOR        002FAB R   |     XOR_IDX =  0000FE 
    XSAVE   =  000002     |     XSTACK_E=  001773     |     XSTACK_S=  00003C 
    XTEMP   =  000001     |     YSAVE   =  000007     |     YTEMP   =  000003 
  4 abs        002A87 R   |   4 abs24      0001DF R   |   5 acc16      00000D GR
  5 acc24      00000C GR  |   5 acc32      00000B GR  |   5 acc8       00000E GR
  4 accept_c   000C0D R   |   4 add24      00016A R   |   4 add_char   0013AC R
  4 add_spac   00117D R   |   4 analog_r   00262C R   |   4 and_cond   001B59 R
  4 and_fact   001B3D R   |   4 app        003604 R   |   4 app_sign   003600 R
  4 app_size   003602 R   |   4 app_spac   003600 GR  |   4 arduino_   002B74 R
  4 arg_list   00197B R   |   5 array_si   000020 R   |   4 ascii      002925 R
  4 at_tst     000FE4 R   |   4 atoi24     0018B4 GR  |   4 atoi_exi   00191A R
  4 awu        002A2E R   |   4 awu02      002A41 R   |   4 bad_port   0029A0 R
  5 base       00000A GR  |   5 basicptr   000004 GR  |   4 beep       0025A5 R
  4 beep_1kh   00257C GR  |   4 bin_exit   000E49 R   |   4 bit_rese   00219A R
  4 bit_set    002178 R   |   4 bit_test   0021DF R   |   4 bit_togg   0021BD R
  4 bitmask    002D41 R   |   4 bkslsh_t   000F91 R   |   4 bksp       0009AB R
  2 block_bu   0016B8 GR  |   4 block_er   0007C0 R   |   4 break_po   002718 R
  4 bye        0029F9 R   |   4 char       00290E R   |   4 clear_ba   001518 R
  4 clear_bl   0027C8 R   |   4 clear_va   001470 R   |   4 clock_in   00008B R
  4 cloop_1    001DCE R   |   4 cmd_cons   001DA8 R   |   4 cmd_end    002548 R
  4 cmd_get    00254F R   |   4 cmd_itf    000570 R   |   4 cmd_line   00174B R
  4 cmd_name   0013CC R   |   4 cmd_on     002402 R   |   4 cmd_size   001C45 R
  4 code_add   003349 GR  |   4 cold_sta   0000C3 R   |   4 colon_ts   000FB8 R
  4 comma_ts   000FC3 R   |   4 comp_msg   00169B R   |   4 compile    0010E9 GR
  4 conditio   001BAB R   |   4 const_cr   002DFC R   |   4 const_cr   002E01 R
  4 const_dd   002DF7 R   |   4 const_ee   002E10 R   |   4 const_id   002DF2 R
  4 const_in   002E0B R   |   4 const_lo   001DC9 R   |   4 const_od   002DED R
  4 const_ou   002E06 R   |   4 const_po   002DC0 R   |   4 const_po   002DC5 R
  4 const_po   002DCA R   |   4 const_po   002DCF R   |   4 const_po   002DD4 R
  4 const_po   002DD9 R   |   4 const_po   002DDE R   |   4 const_po   002DE3 R
  4 const_po   002DE8 R   |   4 convert_   000DB7 R   |   4 convert_   00096F R
  4 copy_com   001019 R   |   5 count      000003 GR  |   4 cp24       0001A4 R
  4 cp24_ax    0001D6 R   |   4 cp_loop    00192C R   |   4 cpl24      0001E6 R
  4 cpy_cmd_   001165 R   |   4 cpy_quot   0011A5 R   |   4 create_g   000CE1 R
  4 cs_high    002F9F R   |   4 dash_tst   000FD9 R   |   4 data       002E15 R
  5 data_len   000009 R   |   4 data_lin   002E24 R   |   5 data_ofs   000008 R
  5 data_ptr   000006 R   |   4 data_sea   002E70 R   |   4 dec_base   001C24 R
  4 decomp_l   00125E R   |   4 decompil   001216 GR  |   4 del_line   000CB4 R
  4 delete_l   000A98 R   |   4 delete_n   0009BB R   |   4 delete_u   000A5D R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

  4 digital_   002668 R   |   4 digital_   00269F R   |   4 div24      000327 R
  4 divu24_8   000309 R   |   4 do_loop    002D7D R   |   4 do_progr   0007B3 R
  4 edit       001F8D R   |   4 enable_i   002CD1 R   |   4 eql_tst    00106E R
  4 equal      0013BF R   |   4 erase      002740 R   |   4 erase_ex   0007E4 R
  4 erase_fl   0007DA R   |   4 err_bad_   0015FC R   |   4 err_buf_   001672 R
  4 err_cmd_   0015C0 R   |   4 err_div0   001585 R   |   4 err_dupl   0015DA R
  4 err_math   00156C R   |   4 err_mem_   001551 R   |   4 err_msg    00152F R
  4 err_no_a   001608 R   |   4 err_no_d   00163B R   |   4 err_no_f   00165F R
  4 err_no_l   001594 R   |   4 err_no_p   00164B R   |   4 err_not_   0015EB R
  4 err_over   00167F R   |   4 err_run_   0015AA R   |   4 err_synt   00155E R
  4 escaped    000DCC GR  |   4 expect     001969 R   |   4 expressi   001AA6 R
  4 factor     0019C7 R   |   5 farptr     000018 R   |   4 fcpu       002AF8 R
  4 fetchc     000660 R   |   4 fill_wri   0027B8 R   |   4 final_te   000C06 R
  4 first_li   001F37 R   |   5 flags      000022 GR  |   4 for        002272 R
  4 free       001C29 R   |   5 free_eep   000024 R   |   7 free_ram   000080 R
  4 func_arg   001976 R   |   4 func_eef   001D3B R   |   4 func_not   002CB2 R
  4 ge         0013C1 R   |   4 get_addr   0017F2 R   |   4 get_arra   001997 R
  4 get_char   00180C R   |   4 get_cmd_   0011F5 R   |   4 get_code   0017D6 R
  4 get_cons   001CC0 R   |   4 get_esca   00097B R   |   4 get_int2   0017FC R
  4 get_targ   002393 R   |   4 get_targ   0023A1 R   |   4 get_tick   002A80 R
  4 get_toke   000F2A GR  |   4 getc       000954 GR  |   4 gosub      0024A8 R
  4 gosub_1    0024B3 R   |   4 gosub_2    0024B9 R   |   4 goto       00248E R
  4 goto_1     002498 R   |   4 gpio       002975 R   |   4 gt         0013BD R
  4 gt_tst     001079 R   |   4 hex_base   001C1F R   |   4 hex_dump   0006A0 R
  4 if         002258 R   |   5 in         000001 GR  |   5 in.saved   000002 GR
  5 in.w       000000 GR  |   4 incr_far   0008B6 R   |   4 input_ex   002130 R
  4 input_lo   00209C R   |   4 input_va   002098 R   |   4 insert_c   000A1A R
  4 insert_l   000D0D R   |   4 insert_l   000D7C R   |   4 interp_l   00178C R
  4 interpre   001767 R   |   4 invalid    0005B5 R   |   4 invalid_   000636 R
  4 invert     002D67 R   |   4 is_alnum   000E7E GR  |   4 is_alpha   000E64 GR
  4 is_data_   002E1B R   |   4 is_digit   000E75 GR  |   4 is_symbo   000E87 R
  4 itoa       00184F GR  |   4 itoa_loo   001871 R   |   4 jp_to_ta   00249B R
  4 key        002964 R   |   4 kword_di   003341 GR  |   4 kword_en   002FA9 R
  4 le         0013C6 R   |   4 ledoff     00046B R   |   4 ledon      000466 R
  4 ledtoggl   000470 R   |   4 left_par   000479 R   |   4 let        001C7D GR
  4 let_arra   001C8B R   |   4 let_eval   001C93 R   |   4 let_var    001C90 R
  4 lines_sk   001F3A R   |   4 list       001EE8 R   |   4 list_con   001CCF R
  4 list_exi   001F7C R   |   4 list_loo   001F5A R   |   4 log2       002D14 R
  4 logical_   002CC5 R   |   4 look_tar   0023C4 R   |   4 loop_bac   002376 R
  5 loop_dep   00001F R   |   4 loop_don   00238B R   |   4 lshift     002A9E R
  4 lt         0013C4 R   |   4 lt_tst     0010A2 R   |   4 mem_peek   0005D2 R
  4 mod24      0003D5 R   |   4 move       00142C GR  |   4 move_dow   00144B R
  4 move_era   000742 R   |   4 move_exi   00146C R   |   4 move_lef   0009F2 R
  4 move_loo   001450 R   |   4 move_prg   000782 R   |   4 move_rig   000A00 R
  4 move_up    00143D R   |   4 mul24      00025D R   |   4 mul_char   0013AE R
  4 mulu24_8   00022A R   |   4 nbr_tst    000F5D R   |   4 ne         0013C9 R
  4 neg24      0001F3 R   |   4 neg_acc2   00020D R   |   4 neg_ax     000205 R
  4 new        002736 R   |   4 next       00231E R   |   4 next_lin   00176F R
  4 next_tok   0017BD GR  |   4 no_match   00193E R   |   4 number     000666 R
  4 other      0010CB R   |   4 overwrit   000C32 R   |   2 pad        0016B8 GR
  4 pad_ref    002FA4 R   |   4 parse_bi   000E27 R   |   4 parse_in   000DD4 R
  4 parse_ke   000EAA R   |   4 parse_qu   000D7F R   |   4 parse_sy   000E92 R
  4 pause      002A0D R   |   4 pause02    002A20 R   |   4 peek       002237 R
  4 peek_byt   000600 R   |   4 pin_mode   002B07 R   |   4 plus_tst   001042 R
  4 poke       002216 R   |   4 power_ad   0025DC R   |   4 prcnt_ts   001063 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

  4 print      001FF5 R   |   4 print_fa   000645 R   |   4 print_he   000C67 GR
  4 print_re   0004C5 R   |   4 print_st   0005C5 R   |   4 print_to   001837 R
  4 prog_siz   001E57 R   |   4 program_   001E5F R   |   4 program_   00075C R
  4 program_   000782 R   |   4 prt_acc2   001829 R   |   4 prt_basi   001FD1 R
  4 prt_i16    001812 R   |   4 prt_loop   001FF9 R   |   4 prt_peek   000448 GR
  4 prt_reg1   0004A6 R   |   4 prt_reg8   000484 R   |   4 prt_regs   0003DE GR
  5 ptr16      000019 GR  |   5 ptr8       00001A R   |   4 putc       000944 GR
  4 puts       0009A1 GR  |   4 qgetc      00094D GR  |   4 qkey       002968 GR
  4 qmark_ts   000FEF R   |   4 qsign      0027B1 R   |   4 random     002B94 R
  4 read       002E91 R   |   4 read01     002E93 R   |   4 read_int   00357C R
  4 readln     000AA6 GR  |   4 readln_l   000AB3 R   |   4 readln_q   000C4F R
  4 refresh_   002D0F R   |   4 regs_sta   000421 R   |   4 relation   001ADE R
  4 relop_st   0013B1 R   |   4 remark     002135 GR  |   4 repl       00057E R
  4 repl_exi   0005A6 R   |   4 reset_co   001FF7 R   |   4 rest_con   002088 R
  4 restore    002E4A R   |   4 restore_   002E8C R   |   4 return     0024CE R
  4 right_al   001193 GR  |   4 row_alig   00089B R   |   4 row_eras   000715 R
  4 row_eras   000742 R   |   4 row_loop   000683 R   |   4 rparnt_t   000FAD R
  4 rshift     002ACB R   |   7 rsign      00007C R   |   7 rsize      00007E R
  4 rt_msg     001689 R   |   4 run        0024EC R   |   4 run_app    000135 R
  4 run_it     00251E R   |   4 run_it_0   002520 R   |   5 rx1_head   00002E R
  5 rx1_queu   000026 R   |   5 rx1_tail   00002F R   |   4 save_app   0027DC R
  4 save_con   002078 R   |   4 scan_blo   0008C4 R   |   4 search_c   001D64 R
  4 search_d   00191E GR  |   4 search_e   001966 R   |   4 search_l   000C89 GR
  4 search_l   000C98 R   |   4 search_n   001922 R   |   5 seedx      000014 R
  5 seedy      000016 R   |   4 select_p   002B64 R   |   4 send_esc   0009C9 R
  4 send_par   0009D4 R   |   4 set_data   002E39 R   |   4 set_time   002C95 R
  4 sharp_ts   000FCE R   |   4 show_row   000671 R   |   4 single_c   0013A7 R
  4 skip       000F17 R   |   4 skip_str   0017E3 R   |   4 slash_ts   001058 R
  4 sleep      002A02 R   |   4 software   00147F R   |   4 spaces     000A0E GR
  4 spi_clea   002F39 R   |   4 spi_disa   002F21 R   |   4 spi_enab   002EEE R
  4 spi_rcv_   002F5B R   |   4 spi_read   002F86 R   |   4 spi_sele   002F8D R
  4 spi_send   002F45 R   |   4 spi_writ   002F66 R   |   2 stack_fu   001774 GR
  2 stack_un   001800 R   |   4 star_tst   00104D R   |   4 step       0022DC R
  4 stop       0026EA R   |   4 store_lo   00230B R   |   4 str_matc   00194B R
  4 str_tst    000F4D R   |   4 strcmp     00140B R   |   4 strcpy     00141C GR
  4 strlen     001400 GR  |   4 sub24      000187 R   |   4 symb_loo   000E93 R
  4 syntax_e   0016BC GR  |   4 system_i   0014C5 R   |   5 tab_widt   000023 GR
  4 tb_error   0016BE GR  |   4 term       001A63 R   |   4 term01     001A6B R
  4 term_exi   001AA3 R   |   4 test       00340D R   |   4 test_p     0005BD R
  2 tib        001668 GR  |   4 tick_tst   001007 R   |   5 ticks      00000F R
  4 timeout    002CAC R   |   5 timer      000012 GR  |   4 timer2_i   0000A1 R
  4 timer4_i   0000AE R   |   4 tk_id      0016AC R   |   4 to         00229C R
  4 to_eepro   0007AB R   |   4 to_flash   0007B0 R   |   4 to_hex_c   000C7E GR
  4 to_upper   0018A8 GR  |   4 token_ch   0010E2 R   |   4 token_ex   0010E6 R
  4 tone       002585 R   |   4 try_next   002E7C R   |   5 txtbgn     00001B GR
  5 txtend     00001D GR  |   4 uart1_ge   000954 GR  |   4 uart1_in   0008FF R
  4 uart1_pu   000944 GR  |   4 uart1_qg   00094D GR  |   4 uart1_se   00090F R
  4 ubound     001C72 R   |   4 uflash     0029A5 R   |   4 unlock_e   0006DF R
  4 unlock_f   0006FA R   |   4 until      002D90 R   |   4 user_int   000057 R
  4 usr        0029BA R   |   4 var_name   0011EB GR  |   5 vars       000030 GR
  4 wait       00213B R   |   4 warm_ini   0014F6 R   |   4 warm_sta   001748 R
  4 words      002C2F R   |   4 words_co   002C7F R   |   4 write      0028CB R
  4 write_bl   000860 GR  |   4 write_bu   00079C R   |   4 write_by   0007E6 R
  4 write_ee   000822 R   |   4 write_ex   00085B R   |   4 write_fl   00080C R
  4 write_nb   000885 R   |   2 xstack_f   001738 GR  |   2 xstack_u   001774 GR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table


ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3604   flags    0
   5 DATA       size     7E   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

