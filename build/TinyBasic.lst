ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module STM8_TBI
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; parsed 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                     34     .list 
                                     35 
                                     36 ;_dbg 
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000080    43     PAD_SIZE=128
                           0000A0    44 	STACK_SIZE=160
                           0017FF    45 	STACK_EMPTY=RAM_SIZE-1  
                           000000    46 	FRUN=0 ; flags run code in variable flags
                           000001    47 	FTRAP=1 ; inside trap handler 
                           000002    48 	FLOOP=2 ; FOR loop in preparation 
                           000003    49 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    50 	FBREAK=4 ; break point flag 
                           000005    51 	FCOMP=5  ; compiling flags 
                           000006    52 	FAUTORUN=6; auto start program running 
                                     53 
                           004000    54 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     55 
                           000006    56     FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     57 
                           007FFF    58 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     59 
      000000                         60 in.w:  .blkb 1 ; parser position in text line high-byte 
      000001                         61 in:    .blkb 1 ; low byte of in.w 
      000002                         62 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         63 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         64 basicptr:  .blkb 2  ; point to current BASIC line address.
      000006                         65 data_ptr:  .blkw 1  ; point to DATA address
      000008                         66 data_ofs:  .blkb 1  ; index to next data item 
      000009                         67 data_len:  .blkb 1  ; length of data line 
      00000A                         68 base:  .blkb 1 ; nemeric base used to print integer 
      00000B                         69 acc24: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         70 acc16: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         71 acc8:  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         72 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         73 timer: .blkw 1 ;  milliseconds count down timer 
      000012                         74 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         75 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         76 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         77 ptr16:  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         78 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000019                         79 ffree: .blkb 3 ; flash free address ; file system free space pointer
      00001C                         80 txtbgn: .blkw 1 ; tokenized BASIC text beginning address 
      00001E                         81 txtend: .blkw 1 ; tokenized BASIC text end address 
      000020                         82 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000021                         83 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000023                         84 flags: .blkb 1 ; various boolean flags
      000024                         85 tab_width: .blkb 1 ; print colon width (default 4)
      000025                         86 rx_char: .blkb 1 ; last received character from UART1 
      000026                         87 vars: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     88 ; keep 'free_ram' as last variable 
      00005A                         89 free_ram: ; from here RAM free for BASIC text 
                                     90 
                                     91 ;;-----------------------------------
                                     92     .area SSEG (ABS)
                                     93 ;; working buffers and stack at end of RAM. 	
                                     94 ;;-----------------------------------
      001690                         95     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         96 tib: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         97 pad: .ds PAD_SIZE             ; working buffer
      001760                         98 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         99 stack_unf: ; stack underflow ; control_stack bottom 
                                    100 
                                    101 ;;--------------------------------------
                                    102     .area HOME 
                                    103 ;; interrupt vector table at 0x8000
                                    104 ;;--------------------------------------
      000000 82 00 05 CB            105     int cold_start			; RESET vector 
                           000000   106 .if DEBUG
                                    107 	int TrapHandler 		;TRAP  software interrupt
                           000001   108 .else
      000004 82 00 00 00            109 	int NonHandledInterrupt ;TRAP  software interrupt
                                    110 .endif
      000008 82 00 00 00            111 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            112 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            113 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            114 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            115 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            116 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            117 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 4D            118 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            119 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            120 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            121 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            122 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            123 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            124 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            125 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            126 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            127 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            128 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            129 	int Uart1RxHandler		;int18 UART1 RX full ; user communication channel.
      000054 82 00 00 00            130 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            131 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 00            132 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 00            133 	int NonHandledInterrupt ;int22 ADC2 end of conversion
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000064 82 00 00 37            134 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            135 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            136 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            137 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            138 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            139 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            140 	int NonHandledInterrupt ;int29  not used
                                    141 
                                    142 ;---------------------------------------
                                    143     .area CODE
                                    144 ;---------------------------------------
                           000000   145 .if DEBUG
                                    146 .asciz "STM8_TBI" ; I like to put module name here.
                                    147 .endif 
                                    148 
                                    149 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    150 ; non handled interrupt 
                                    151 ; reset MCU
                                    152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        153 NonHandledInterrupt:
      000000 71                     154     .byte 0x71  ; invalid opcode reinitialize MCU
                                    155 
                                    156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    157 ; auto wakeup from halt
                                    158 ; at iret, program continue 
                                    159 ; after hatl instruction
                                    160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        161 AWUHandler:
      000001 72 19 50 F0      [ 1]  162 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  163 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  164 	clr AWU_TBR 
      00000E 80               [11]  165 	iret
                                    166 
                                    167 ;--------------------------
                                    168 ; UART1 receive character
                                    169 ; CTRL-C (ASCII 3)
                                    170 ; cancel program execution
                                    171 ; and fall back to command line
                                    172 ;--------------------------
      00000F                        173 Uart1RxHandler:
      00000F 72 0B 52 30 FB   [ 2]  174 	btjf UART1_SR,#UART_SR_RXNE,.
      000014 C6 52 31         [ 1]  175 	ld a,UART1_DR 
      000017 A1 03            [ 1]  176 	cp a,#CTRL_C 
      000019 26 07            [ 1]  177 	jrne 1$
      00001B 72 5F 00 25      [ 1]  178 	clr rx_char 
      00001F CC 00 60         [ 2]  179 	jp user_interrupted
      000022                        180 1$:
      000022 A1 18            [ 1]  181 	cp a,#CAN ; CTRL_X 
      000024 26 03            [ 1]  182 	jrne 2$
      000026 CC 05 CB         [ 2]  183 	jp cold_start 	
      000029                        184 2$: 
      000029 A1 1A            [ 1]  185 	cp a,#CTRL_Z
      00002B 26 06            [ 1]  186 	jrne 3$
      00002D CD 06 94         [ 4]  187 	call cancel_autorun 
      000030 CC 05 CB         [ 2]  188 	jp cold_start 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000033 C7 00 25         [ 1]  189 3$:	ld rx_char,a 	
      000036 80               [11]  190 	iret 
                                    191 
                                    192 ;------------------------------------
                                    193 ; software interrupt handler  
                                    194 ;------------------------------------
                           000000   195 .if DEBUG 
                                    196 TrapHandler:
                                    197 	bset flags,#FTRAP 
                                    198 	call print_registers
                                    199 	call cmd_itf
                                    200 	bres flags,#FTRAP 	
                                    201 	iret
                                    202 .endif 
                                    203 
                                    204 ;------------------------------
                                    205 ; TIMER 4 is used to maintain 
                                    206 ; a milliseconds 'ticks' counter
                                    207 ; and decrement 'timer' varaiable
                                    208 ;--------------------------------
      000037                        209 Timer4UpdateHandler:
      000037 72 5F 53 42      [ 1]  210 	clr TIM4_SR 
      00003B CE 00 0E         [ 2]  211 	ldw x,ticks
      00003E 5C               [ 2]  212 	incw x
      00003F CF 00 0E         [ 2]  213 	ldw ticks,x 
      000042 CE 00 10         [ 2]  214 	ldw x,timer
      000045 5D               [ 2]  215 	tnzw x 
      000046 27 04            [ 1]  216 	jreq 1$
      000048 5A               [ 2]  217 	decw x 
      000049 CF 00 10         [ 2]  218 	ldw timer,x 
      00004C                        219 1$:	
      00004C 80               [11]  220 	iret 
                                    221 
                                    222 
                                    223 ;------------------------------------
                                    224 ; Triggered by pressing USER UserButton 
                                    225 ; on NUCLEO card.
                                    226 ; This is used to abort a progam lock 
                                    227 ; in infinite loop. 
                                    228 ;------------------------------------
      00004D                        229 UserButtonHandler:
                                    230 ; wait button release
      00004D 5F               [ 1]  231 	clrw x
      00004E 5A               [ 2]  232 1$: decw x 
      00004F 26 FD            [ 1]  233 	jrne 1$
      000051 72 09 50 15 F8   [ 2]  234 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    235 ; if MCU suspended by SLEEP resume program
      000056 72 07 00 23 05   [ 2]  236     btjf flags,#FSLEEP,2$
      00005B 72 17 00 23      [ 1]  237 	bres flags,#FSLEEP 
      00005F 80               [11]  238 	iret
      000060                        239 2$:	
      000060                        240 user_interrupted:
      000060 72 00 00 23 02   [ 2]  241     btjt flags,#FRUN,4$
      000065 20 13            [ 2]  242 	jra UBTN_Handler_exit 
      000067                        243 4$:	; program interrupted by user 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000067 72 11 00 23      [ 1]  244 	bres flags,#FRUN 
      00006B AE 00 82         [ 2]  245 	ldw x,#USER_ABORT
      00006E CD 02 B3         [ 4]  246 	call puts 
      000071 CE 00 04         [ 2]  247 	ldw x,basicptr 
      000074 C6 00 01         [ 1]  248 	ld a,in 
      000077 CD 13 8B         [ 4]  249 	call prt_basic_line
      00007A                        250 UBTN_Handler_exit:
      00007A AE 17 FF         [ 2]  251     ldw x,#STACK_EMPTY 
      00007D 94               [ 1]  252     ldw sp,x
      00007E 9A               [ 1]  253 	rim 
      00007F CC 08 FC         [ 2]  254 	jp warm_start
                                    255 
      000082 0A 50 72 6F 67 72 61   256 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    257 
                                    258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    259 ;    peripherals initialization
                                    260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    261 
                                    262 ;----------------------------------------
                                    263 ; inialize MCU clock 
                                    264 ; input:
                                    265 ;   A 		source  HSI | 1 HSE 
                                    266 ;   XL      CLK_CKDIVR , clock divisor 
                                    267 ; output:
                                    268 ;   none 
                                    269 ;----------------------------------------
      00009D                        270 clock_init:	
      00009D C1 50 C3         [ 1]  271 	cp a,CLK_CMSR 
      0000A0 27 0C            [ 1]  272 	jreq 2$ ; no switching required 
                                    273 ; select clock source 
      0000A2 72 12 50 C5      [ 1]  274 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A6 C7 50 C4         [ 1]  275 	ld CLK_SWR,a
      0000A9 C1 50 C3         [ 1]  276 1$:	cp a,CLK_CMSR
      0000AC 26 FB            [ 1]  277 	jrne 1$
      0000AE                        278 2$: 	
                                    279 ; HSI and cpu clock divisor 
      0000AE 9F               [ 1]  280 	ld a,xl 
      0000AF C7 50 C6         [ 1]  281 	ld CLK_CKDIVR,a  
      0000B2 81               [ 4]  282 	ret
                                    283 
                                    284 ;----------------------------------
                                    285 ; TIMER2 used as audio tone output 
                                    286 ; on port D:5.
                                    287 ; channel 1 configured as PWM mode 1 
                                    288 ;-----------------------------------  
                           00F424   289 TIM2_CLK_FREQ=62500
      0000B3                        290 timer2_init:
      0000B3 72 1A 50 C7      [ 1]  291 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000B7 35 60 53 05      [ 1]  292  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000BB 35 08 53 0C      [ 1]  293 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000BF 81               [ 4]  294 	ret 
                                    295 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    296 ;---------------------------------
                                    297 ; TIM4 is configured to generate an 
                                    298 ; interrupt every millisecond 
                                    299 ;----------------------------------
      0000C0                        300 timer4_init:
      0000C0 72 18 50 C7      [ 1]  301 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000C4 35 07 53 45      [ 1]  302 	mov TIM4_PSCR,#7 ; prescale 128  
      0000C8 35 7D 53 46      [ 1]  303 	mov TIM4_ARR,#125 ; set for 1msec.
      0000CC 35 05 53 40      [ 1]  304 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000D0 72 10 53 41      [ 1]  305 	bset TIM4_IER,#TIM4_IER_UIE
      0000D4 81               [ 4]  306 	ret
                                    307 
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    309 ;  routines to write to FLASH, EEPROM 
                                    310 ;  and OPTION 
                                    311 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    312 
                                    313 ;----------------------------------
                                    314 ; unlock EEPROM/OPT for writing/erasing
                                    315 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    316 ; input:
                                    317 ;  none
                                    318 ; output:
                                    319 ;  none 
                                    320 ;----------------------------------
      0000D5                        321 unlock_eeprom:
      0000D5 35 00 50 5B      [ 1]  322 	mov FLASH_CR2,#0 
      0000D9 35 FF 50 5C      [ 1]  323 	mov FLASH_NCR2,#0xFF 
      0000DD 35 AE 50 64      [ 1]  324 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000E1 35 56 50 64      [ 1]  325     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000E5 72 07 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000EA 81               [ 4]  327 	ret
                                    328 
                                    329 ;----------------------------------
                                    330 ; unlock FLASH for writing/erasing
                                    331 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    332 ; input:
                                    333 ;  none
                                    334 ; output:
                                    335 ;  none
                                    336 ;----------------------------------
      0000EB                        337 unlock_flash:
      0000EB 35 00 50 5B      [ 1]  338 	mov FLASH_CR2,#0 
      0000EF 35 FF 50 5C      [ 1]  339 	mov FLASH_NCR2,#0xFF 
      0000F3 35 56 50 62      [ 1]  340 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000F7 35 AE 50 62      [ 1]  341 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000FB 72 03 50 5F FB   [ 2]  342 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000100 81               [ 4]  343 	ret
                                    344 
                                    345 ;----------------------------
                                    346 ; erase block code must be 
                                    347 ; executed from RAM
                                    348 ; input:
                                    349 ;-----------------------------
      000101                        350 row_erase:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000101 35 20 50 5B      [ 1]  351 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      000105 35 DF 50 5C      [ 1]  352 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000109 4F               [ 1]  353 	clr a 
      00010A 90 5F            [ 1]  354 	clrw y 
      00010C 91 A7 00 16      [ 1]  355 	ldf ([farptr],y),a
      000110 90 5C            [ 2]  356     incw y
      000112 91 A7 00 16      [ 1]  357 	ldf ([farptr],y),a
      000116 90 5C            [ 2]  358     incw y
      000118 91 A7 00 16      [ 1]  359 	ldf ([farptr],y),a
      00011C 90 5C            [ 2]  360     incw y
      00011E 91 A7 00 16      [ 1]  361 	ldf ([farptr],y),a
      000122 72 05 50 5F FB   [ 2]  362 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000127 81               [ 4]  363 	ret
      000128                        364 row_erase_end:
                                    365 
                                    366 ; copy erase_start in RAM 
      000128                        367 move_erase_to_ram:
      000128 AE 01 28         [ 2]  368 	ldw x,#row_erase_end 
      00012B 1D 01 01         [ 2]  369 	subw x,#row_erase
      00012E CF 00 0C         [ 2]  370 	ldw acc16,x 
      000131 AE 16 90         [ 2]  371 	ldw x,#tib 
      000134 90 AE 01 01      [ 2]  372 	ldw y,#row_erase 
      000138 CD 03 BE         [ 4]  373 	call move 
      00013B 81               [ 4]  374 	ret 
                                    375 
                                    376 ;-----------------------------------
                                    377 ; block programming must be 
                                    378 ; executed from RAM 
                                    379 ; initial contidions: 
                                    380 ; 	memory unlocked
                                    381 ;   bit PRG set in 
                                    382 ; input:
                                    383 ;   x        128 bytes row to program 
                                    384 ;   farptr   row address 
                                    385 ; output:
                                    386 ;   none 
                                    387 ;----------------------------------
                           000001   388 	BCNT=1 
      00013C                        389 program_row:
      00013C 4B 80            [ 1]  390 	push #BLOCK_SIZE  
                                    391 ;enable block programming 
      00013E 72 10 50 5B      [ 1]  392 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000142 72 11 50 5C      [ 1]  393 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000146 90 5F            [ 1]  394 	clrw y 
      000148 F6               [ 1]  395 1$:	ld a,(x)
      000149 91 A7 00 16      [ 1]  396 	ldf ([farptr],y),a
      00014D 5C               [ 2]  397 	incw x 
      00014E 90 5C            [ 2]  398 	incw y 
      000150 0A 01            [ 1]  399 	dec (BCNT,sp)
      000152 26 F4            [ 1]  400 	jrne 1$
                                    401 ; wait EOP bit 
      000154 72 05 50 5F FB   [ 2]  402 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      000159                        403 	_drop 1 
      000159 5B 01            [ 2]    1     addw sp,#1 
      00015B 81               [ 4]  404 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      00015C                        405 program_row_end:
                                    406 
                                    407 ;-------------------------
                                    408 ; move program_row to RAM 
                                    409 ; at txtubound address 
                                    410 ;------------------------
      00015C                        411 move_prg_to_ram:
      00015C AE 01 5C         [ 2]  412 	ldw x,#program_row_end 
      00015F 1D 01 3C         [ 2]  413 	subw x,#program_row 
      000162 CF 00 0C         [ 2]  414 	ldw acc16,x 
      000165 AE 16 90         [ 2]  415 	ldw x,#tib 
      000168 90 AE 01 3C      [ 2]  416 	ldw y,#program_row 
      00016C CD 03 BE         [ 4]  417 	call move 
      00016F 81               [ 4]  418 	ret 
                                    419 
                                    420 
                                    421 ;-----------------------------
                                    422 ; write a row in FLASH/EEPROM 
                                    423 ; input:
                                    424 ;    farptr   destination address 
                                    425 ;    x        source address 
                                    426 ;-----------------------------
      000170                        427 write_row:
      000170 89               [ 2]  428 	pushw x 
      000171 72 5D 00 16      [ 1]  429 	tnz farptr 
      000175 26 1C            [ 1]  430 	jrne to_flash 
      000177 AE 80 00         [ 2]  431 	ldw x,#FLASH_BASE 
      00017A C3 00 17         [ 2]  432 	cpw x,farptr+1 
      00017D 24 14            [ 1]  433 	jruge to_flash 
      00017F                        434 to_eeprom:
      00017F AE 40 00         [ 2]  435 	ldw x,#EEPROM_BASE 
      000182 C3 00 17         [ 2]  436 	cpw x,farptr+1 
      000185 24 01            [ 1]  437 	jruge 1$
      000187 81               [ 4]  438 	ret ; bad address 
      000188 AE 47 FF         [ 2]  439 1$: ldw x,#EEPROM_END 
      00018B 23 01            [ 2]  440 	jrule 2$ 
      00018D 81               [ 4]  441 	ret ; bad address 
      00018E CD 00 D5         [ 4]  442 2$:	call unlock_eeprom
      000191 20 03            [ 2]  443 	jra do_programming
      000193                        444 to_flash:
      000193 CD 00 EB         [ 4]  445 	call unlock_flash 
      000196                        446 do_programming:
      000196 85               [ 2]  447 	popw x 
      000197 CD 16 90         [ 4]  448 	call tib
      00019A 72 13 50 5F      [ 1]  449 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      00019E 72 17 50 5F      [ 1]  450 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001A2 81               [ 4]  451 	ret 
                                    452 
                                    453 
                                    454 ;-----------------------------------
                                    455 ; erase flash or EEPROM block
                                    456 ; a blow is 128 bytes 
                                    457 ; input:
                                    458 ;   farptr  address row begin
                                    459 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    460 ;   none
                                    461 ;--------------------------------------
      0001A3                        462 block_erase:
      0001A3 CE 00 17         [ 2]  463 	ldw x,farptr+1
      0001A6 A3 27 00         [ 2]  464 	cpw x,#user_space 
      0001A9 2A 17            [ 1]  465 	jrpl erase_flash 
                                    466 ; erase eeprom block
      0001AB A3 40 00         [ 2]  467 	cpw x,#EEPROM_BASE 
      0001AE 24 01            [ 1]  468 	jruge 1$
      0001B0 81               [ 4]  469 	ret ; bad address 
      0001B1 AE 47 FF         [ 2]  470 1$: ldw x,#EEPROM_END 
      0001B4 23 01            [ 2]  471 	jrule 2$ 
      0001B6 81               [ 4]  472 	ret ; bad address 
      0001B7 CD 00 D5         [ 4]  473 2$:	call unlock_eeprom 
      0001BA CD 16 90         [ 4]  474 	call tib 
      0001BD 72 17 50 5F      [ 1]  475 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001C1 81               [ 4]  476 	ret 
                                    477 ; erase flash block:
      0001C2                        478 erase_flash:
      0001C2 CD 00 EB         [ 4]  479 	call unlock_flash 
      0001C5 CD 16 90         [ 4]  480 	call tib 
      0001C8 72 13 50 5F      [ 1]  481     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001CC 81               [ 4]  482 	ret 
                                    483 
                                    484 
                                    485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    486 ; write a byte to FLASH or EEPROM/OPTION  
                                    487 ; input:
                                    488 ;    a  		byte to write
                                    489 ;    farptr  	address
                                    490 ;    x          farptr[x]
                                    491 ; output:
                                    492 ;    none
                                    493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    494 	; variables locales
                           000001   495 	BTW = 1   ; byte to write offset on stack
                           000002   496 	OPT = 2   ; OPTION flag offset on stack
                           000002   497 	VSIZE = 2
      0001CD                        498 write_byte:
      0001CD 90 89            [ 2]  499 	pushw y
      0001CF                        500 	_vars VSIZE
      0001CF 52 02            [ 2]    1     sub sp,#VSIZE 
      0001D1 6B 01            [ 1]  501 	ld (BTW,sp),a ; byte to write 
      0001D3 0F 02            [ 1]  502 	clr (OPT,sp)  ; OPTION flag
                                    503 ; put addr[15:0] in Y, for bounds check.
      0001D5 90 CE 00 17      [ 2]  504 	ldw y,farptr+1   ; Y=addr15:0
                                    505 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001D9 72 5D 00 16      [ 1]  506 	tnz farptr 
      0001DD 26 14            [ 1]  507 	jrne write_flash
      0001DF 90 A3 27 00      [ 2]  508     cpw y,#user_space
      0001E3 24 0E            [ 1]  509     jruge write_flash
      0001E5 90 A3 40 00      [ 2]  510 	cpw y,#EEPROM_BASE  
      0001E9 25 52            [ 1]  511     jrult write_exit
      0001EB 90 A3 48 7F      [ 2]  512 	cpw y,#OPTION_END 
      0001EF 22 4C            [ 1]  513 	jrugt write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0001F1 20 16            [ 2]  514 	jra write_eeprom 
                                    515 ; write program memory
      0001F3                        516 write_flash:
      0001F3 CD 00 EB         [ 4]  517 	call unlock_flash 
      0001F6 9B               [ 1]  518 1$:	sim 
      0001F7 7B 01            [ 1]  519 	ld a,(BTW,sp)
      0001F9 92 A7 00 16      [ 4]  520 	ldf ([farptr],x),a ; farptr[x]=A
      0001FD 72 05 50 5F FB   [ 2]  521 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000202 9A               [ 1]  522     rim 
      000203 72 13 50 5F      [ 1]  523     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000207 20 34            [ 2]  524     jra write_exit
                                    525 ; write eeprom and option
      000209                        526 write_eeprom:
      000209 CD 00 D5         [ 4]  527 	call unlock_eeprom
                                    528 	; check for data eeprom or option eeprom
      00020C 90 A3 48 00      [ 2]  529 	cpw y,#OPTION_BASE
      000210 2B 08            [ 1]  530 	jrmi 1$
      000212 90 A3 48 80      [ 2]  531 	cpw y,#OPTION_END+1
      000216 2A 02            [ 1]  532 	jrpl 1$
      000218 03 02            [ 1]  533 	cpl (OPT,sp)
      00021A                        534 1$: 
      00021A 0D 02            [ 1]  535     tnz (OPT,sp)
      00021C 27 08            [ 1]  536     jreq 2$
                                    537 	; pour modifier une option il faut modifier ces 2 bits
      00021E 72 1E 50 5B      [ 1]  538     bset FLASH_CR2,#FLASH_CR2_OPT
      000222 72 1F 50 5C      [ 1]  539     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000226                        540 2$: 
      000226 7B 01            [ 1]  541     ld a,(BTW,sp)
      000228 92 A7 00 16      [ 4]  542     ldf ([farptr],x),a
      00022C 0D 02            [ 1]  543     tnz (OPT,sp)
      00022E 27 08            [ 1]  544     jreq 3$
      000230 5C               [ 2]  545     incw x
      000231 7B 01            [ 1]  546     ld a,(BTW,sp)
      000233 43               [ 1]  547     cpl a
      000234 92 A7 00 16      [ 4]  548     ldf ([farptr],x),a
      000238 72 05 50 5F FB   [ 2]  549 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00023D                        550 write_exit:
      00023D                        551 	_drop VSIZE 
      00023D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00023F 90 85            [ 2]  552 	popw y
      000241 81               [ 4]  553     ret
                                    554 
                                    555 ;--------------------------------------------
                                    556 ; write a data block to eeprom or flash 
                                    557 ; input:
                                    558 ;   Y        source address   
                                    559 ;   X        array index  destination  farptr[x]
                                    560 ;   BSIZE    block size bytes 
                                    561 ;   farptr   write address , byte* 
                                    562 ; output:
                                    563 ;	X 		after last byte written 
                                    564 ;   Y 		after last byte read 
                                    565 ;  farptr   point after block
                                    566 ;---------------------------------------------
      000242                        567 	_argofs 2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           000004     1     ARG_OFS=2+2 
      000242                        568 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    569 	; local var 
                           000001   570 	XSAVE=1 
                           000002   571 	VSIZE=2 
      000242                        572 write_block:
      000242                        573 	_vars VSIZE
      000242 52 02            [ 2]    1     sub sp,#VSIZE 
      000244 1F 01            [ 2]  574 	ldw (XSAVE,sp),x 
      000246 1E 05            [ 2]  575 	ldw x,(BSIZE,sp) 
      000248 27 13            [ 1]  576 	jreq 9$
      00024A 1E 01            [ 2]  577 1$:	ldw x,(XSAVE,sp)
      00024C 90 F6            [ 1]  578 	ld a,(y)
      00024E CD 01 CD         [ 4]  579 	call write_byte 
      000251 5C               [ 2]  580 	incw x 
      000252 90 5C            [ 2]  581 	incw y 
      000254 1F 01            [ 2]  582 	ldw (XSAVE,sp),x
      000256 1E 05            [ 2]  583 	ldw x,(BSIZE,sp)
      000258 5A               [ 2]  584 	decw x
      000259 1F 05            [ 2]  585 	ldw (BSIZE,sp),x 
      00025B 26 ED            [ 1]  586 	jrne 1$
      00025D                        587 9$:
      00025D 1E 01            [ 2]  588 	ldw x,(XSAVE,sp)
      00025F CD 19 A9         [ 4]  589 	call incr_farptr
      000262                        590 	_drop VSIZE
      000262 5B 02            [ 2]    1     addw sp,#VSIZE 
      000264 81               [ 4]  591 	ret 
                                    592 
                                    593 
                                    594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    595 ;;   UART1 subroutines
                                    596 ;;   used for user interface 
                                    597 ;;   communication channel.
                                    598 ;;   settings: 
                                    599 ;;		115200 8N1 no flow control
                                    600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    601 
                                    602 ;---------------------------------------------
                                    603 ; initialize UART1, 115200 8N1
                                    604 ; input:
                                    605 ;	none
                                    606 ; output:
                                    607 ;   none
                                    608 ;---------------------------------------------
      000265                        609 uart1_init:
      000265 72 1A 50 02      [ 1]  610     bset PA_DDR,#UART1_TX_PIN
      000269 72 1A 50 03      [ 1]  611     bset PA_CR1,#UART1_TX_PIN 
      00026D 72 1A 50 04      [ 1]  612     bset PA_CR2,#UART1_TX_PIN 
                                    613 ; enable UART1 clock
      000271 72 14 50 C7      [ 1]  614 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      000275                        615 uart1_set_baud: 
                                    616 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    617 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000275 A6 E1            [ 1]  618 	ld a,#CLK_SWR_HSI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000277 C1 50 C3         [ 1]  619 	cp a,CLK_CMSR 
      00027A 27 0A            [ 1]  620 	jreq 2$ 
      00027C                        621 1$: ; 8 Mhz 	
      00027C 35 05 52 33      [ 1]  622 	mov UART1_BRR2,#0x05 ; must be loaded first
      000280 35 04 52 32      [ 1]  623 	mov UART1_BRR1,#0x4
      000284 20 08            [ 2]  624 	jra 3$
      000286                        625 2$: ; 16 Mhz 	
      000286 35 0B 52 33      [ 1]  626 	mov UART1_BRR2,#0x0b ; must be loaded first
      00028A 35 08 52 32      [ 1]  627 	mov UART1_BRR1,#0x08
      00028E                        628 3$:
      00028E 72 5F 52 31      [ 1]  629     clr UART1_DR
      000292 35 2C 52 35      [ 1]  630 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000296 72 10 52 35      [ 1]  631 	bset UART1_CR2,#UART_CR2_SBK
      00029A 72 0D 52 30 FB   [ 2]  632     btjf UART1_SR,#UART_SR_TC,.
      00029F 81               [ 4]  633     ret
                                    634 
                                    635 ;---------------------------------
                                    636 ; send character to UART1 
                                    637 ; input:
                                    638 ;   A 
                                    639 ; output:
                                    640 ;   none 
                                    641 ;--------------------------------	
      0002A0                        642 putc:
      0002A0 72 0F 52 30 FB   [ 2]  643 	btjf UART1_SR,#UART_SR_TXE,.
      0002A5 C7 52 31         [ 1]  644 	ld UART1_DR,a 
      0002A8 81               [ 4]  645 	ret 
                                    646 
                                    647 ;---------------------------------
                                    648 ; wait character from UART1 
                                    649 ; input:
                                    650 ;   none
                                    651 ; output:
                                    652 ;   A 			char  
                                    653 ;--------------------------------	
      0002A9                        654 getc:
      0002A9 C6 00 25         [ 1]  655 	ld a,rx_char 
      0002AC 27 FB            [ 1]  656 	jreq getc 
      0002AE 72 5F 00 25      [ 1]  657 	clr rx_char 
      0002B2 81               [ 4]  658 	ret 
                                    659 
                                    660 ;-----------------------------
                                    661 ; send an ASCIZ string to UART1 
                                    662 ; input: 
                                    663 ;   x 		char * 
                                    664 ; output:
                                    665 ;   none 
                                    666 ;-------------------------------
      0002B3                        667 puts:
      0002B3 F6               [ 1]  668     ld a,(x)
      0002B4 27 06            [ 1]  669 	jreq 1$
      0002B6 CD 02 A0         [ 4]  670 	call putc 
      0002B9 5C               [ 2]  671 	incw x 
      0002BA 20 F7            [ 2]  672 	jra puts 
      0002BC 81               [ 4]  673 1$:	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    674 
                                    675 
                                    676 ;---------------------------
                                    677 ; delete character at left 
                                    678 ; of cursor on terminal 
                                    679 ; input:
                                    680 ;   none 
                                    681 ; output:
                                    682 ;	none 
                                    683 ;---------------------------
      0002BD                        684 bksp:
      0002BD A6 08            [ 1]  685 	ld a,#BS 
      0002BF CD 02 A0         [ 4]  686 	call putc 
      0002C2 A6 20            [ 1]  687 	ld a,#SPACE 
      0002C4 CD 02 A0         [ 4]  688 	call putc 
      0002C7 A6 08            [ 1]  689 	ld a,#BS 
      0002C9 CD 02 A0         [ 4]  690 	call putc 
      0002CC 81               [ 4]  691 	ret 
                                    692 ;---------------------------
                                    693 ; delete n character left of cursor 
                                    694 ; at terminal.
                                    695 ; input: 
                                    696 ;   A   number of characters to delete.
                                    697 ; output:
                                    698 ;    none 
                                    699 ;--------------------------	
      0002CD                        700 delete:
      0002CD 88               [ 1]  701 	push a 
      0002CE 0D 01            [ 1]  702 0$:	tnz (1,sp)
      0002D0 27 07            [ 1]  703 	jreq 1$
      0002D2 CD 02 BD         [ 4]  704 	call bksp 
      0002D5 0A 01            [ 1]  705 	dec (1,sp)
      0002D7 20 F5            [ 2]  706 	jra 0$
      0002D9 84               [ 1]  707 1$:	pop a 
      0002DA 81               [ 4]  708 	ret
                                    709 
                                    710 ;--------------------------
                                    711 ; print n spaces on terminal
                                    712 ; input:
                                    713 ;  X 		number of spaces 
                                    714 ; output:
                                    715 ;	none 
                                    716 ;---------------------------
      0002DB                        717 spaces:
      0002DB A6 20            [ 1]  718 	ld a,#SPACE 
      0002DD 5D               [ 2]  719 1$:	tnzw x
      0002DE 27 06            [ 1]  720 	jreq 9$
      0002E0 CD 02 A0         [ 4]  721 	call putc 
      0002E3 5A               [ 2]  722 	decw x
      0002E4 20 F7            [ 2]  723 	jra 1$
      0002E6                        724 9$: 
      0002E6 81               [ 4]  725 	ret 
                                    726 
                                    727 ;----------------------
                                    728 ; print token id && value
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    729 ; input:
                                    730 ;   A     token id 
                                    731 ;   X     token value 
                                    732 ;---------------------
                           000001   733 	BSAVE=1
                           000002   734 	AREG=2
                           000003   735 	XREG=3
                           000004   736 	VSIZE=4
      0002E7                        737 prt_tok:
      0002E7                        738 	_vars VSIZE 
      0002E7 52 04            [ 2]    1     sub sp,#VSIZE 
      0002E9 6B 02            [ 1]  739 	ld (AREG,sp),a 
      0002EB 1F 03            [ 2]  740 	ldw (XREG,sp),x 
      0002ED C6 00 0A         [ 1]  741 	ld a, base
      0002F0 6B 01            [ 1]  742 	ld (BSAVE,sp),a 
      0002F2 35 10 00 0A      [ 1]  743 	mov base,#16  
      0002F6 AE 03 1E         [ 2]  744 	ldw x,#token_msg
      0002F9 CD 02 B3         [ 4]  745 	call puts 
      0002FC 5F               [ 1]  746 	clrw x 
      0002FD 7B 02            [ 1]  747 	ld a,(AREG,sp)
      0002FF 97               [ 1]  748 	ld xl,a 
      000300 CD 09 BC         [ 4]  749 	call print_int 
      000303 A6 20            [ 1]  750 	ld a,#SPACE
      000305 CD 02 A0         [ 4]  751 	call putc 
      000308 1E 03            [ 2]  752 	ldw x,(XREG,sp)
      00030A CD 09 BC         [ 4]  753 	call print_int 
      00030D A6 0D            [ 1]  754 	ld a,#CR 
      00030F CD 02 A0         [ 4]  755 	call putc 
      000312 7B 01            [ 1]  756 	ld a,(BSAVE,sp)
      000314 C7 00 0A         [ 1]  757 	ld base,a 
      000317 7B 02            [ 1]  758 	ld a,(AREG,sp)
      000319 1E 03            [ 2]  759 	ldw x,(XREG,sp)
      00031B                        760 	_drop VSIZE 
      00031B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00031D 81               [ 4]  761 	ret 
      00031E 74 6F 6B 65 6E 3A 20   762 token_msg: .asciz "token: "
             00
                                    763 
                                    764 
                                    765 ;---------------------
                                    766 ; display n bytes row 
                                    767 ; from memory.
                                    768 ; input:
                                    769 ;   A   bytes to print 
                                    770 ;	X   start address 
                                    771 ; output:
                                    772 ;   X   address after last shown  
                                    773 ;---------------------
                           000001   774 	CNT=1 
                           000002   775 	ADR=2 
                           000003   776 	VSIZE=3 
      000326                        777 show_row:
      000326 4D               [ 1]  778 	tnz a 
      000327 26 01            [ 1]  779 	jrne 1$
      000329 81               [ 4]  780 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00032A                        781 1$:	
      00032A 89               [ 2]  782 	pushw x  
      00032B 88               [ 1]  783 	push a 
      00032C 35 04 00 24      [ 1]  784 	mov tab_width,#4 
      000330 CD 09 BC         [ 4]  785 	call print_int 
      000333 A6 20            [ 1]  786 	ld a,#SPACE  
      000335 CD 02 A0         [ 4]  787 	call putc
      000338                        788 row_loop:
      000338 1E 02            [ 2]  789 	ldw x,(ADR,sp)
      00033A F6               [ 1]  790 	ld a,(x)
      00033B 5F               [ 1]  791 	clrw x 
      00033C 97               [ 1]  792 	ld xl,a 
      00033D CD 09 BC         [ 4]  793 	call print_int 
      000340 1E 02            [ 2]  794 	ldw x,(ADR,sp)
      000342 5C               [ 2]  795 	incw x 
      000343 1F 02            [ 2]  796 	ldw (ADR,sp),x 
      000345 0A 01            [ 1]  797 	dec (CNT,sp)
      000347 26 EF            [ 1]  798 	jrne row_loop
      000349                        799 	_drop VSIZE  		
      000349 5B 03            [ 2]    1     addw sp,#VSIZE 
      00034B 35 04 00 24      [ 1]  800 	mov tab_width,#4
      00034F A6 0D            [ 1]  801 	ld a,#CR 
      000351 CD 02 A0         [ 4]  802 	call putc 
      000354 81               [ 4]  803 	ret 
                                    804 
                                    805 ;--------------------------
                                    806 ; print memory content 
                                    807 ; in hexadecimal format
                                    808 ;  input:
                                    809 ;    X    start address 
                                    810 ;    Y    count 
                                    811 ;--------------------------
                           000001   812 	BCNT=1
                           000003   813 	BASE=3
                           000004   814 	TABW=4
                           000004   815 	VSIZE=4   
      000355                        816 hex_dump:
      000355                        817 	_vars VSIZE
      000355 52 04            [ 2]    1     sub sp,#VSIZE 
      000357 C6 00 0A         [ 1]  818 	ld a,base
      00035A 6B 03            [ 1]  819 	ld (BASE,sp),a 
      00035C 35 10 00 0A      [ 1]  820 	mov base,#16
      000360 C6 00 24         [ 1]  821 	ld a,tab_width 
      000363 6B 04            [ 1]  822 	ld (TABW,sp),a
      000365 A6 0D            [ 1]  823 	ld a,#CR 
      000367 CD 02 A0         [ 4]  824 	call putc 
      00036A 17 01            [ 2]  825 1$: ldw (BCNT,sp),y
      00036C A6 10            [ 1]  826 	ld a,#16
      00036E 90 A3 00 10      [ 2]  827 	cpw y,#16
      000372 2A 02            [ 1]  828 	jrpl 2$
      000374 90 9F            [ 1]  829 	ld a,yl
      000376                        830 2$: 	
      000376 CD 03 26         [ 4]  831 	call show_row 
      000379 16 01            [ 2]  832 	ldw y,(BCNT,sp) 
      00037B 72 A2 00 10      [ 2]  833 	subw y,#16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00037F 90 A3 00 01      [ 2]  834 	cpw y,#1
      000383 2A E5            [ 1]  835 	jrpl 1$
      000385 7B 03            [ 1]  836 	ld a,(BASE,sp)
      000387 C7 00 0A         [ 1]  837 	ld base,a
      00038A 7B 04            [ 1]  838 	ld a,(TABW,sp)
      00038C C7 00 24         [ 1]  839 	ld tab_width,a 
      00038F                        840 	_drop VSIZE
      00038F 5B 04            [ 2]    1     addw sp,#VSIZE 
      000391 81               [ 4]  841 	ret 
                                    842 
                                    843 ;-------------------------------------
                                    844 ; retrun string length
                                    845 ; input:
                                    846 ;   X         .asciz  pointer 
                                    847 ; output:
                                    848 ;   X         length 
                                    849 ;-------------------------------------
      000392                        850 strlen:
      000392 90 93            [ 1]  851 	ldw y,x 
      000394 5F               [ 1]  852 	clrw x 
      000395 90 7D            [ 1]  853 1$:	tnz (y) 
      000397 27 05            [ 1]  854 	jreq 9$ 
      000399 5C               [ 2]  855 	incw x
      00039A 90 5C            [ 2]  856 	incw y 
      00039C 20 F7            [ 2]  857 	jra 1$ 
      00039E 81               [ 4]  858 9$: ret 
                                    859 
                                    860 ;------------------------------------
                                    861 ; compare 2 strings
                                    862 ; input:
                                    863 ;   X 		char* first string 
                                    864 ;   Y       char* second string 
                                    865 ; output:
                                    866 ;   A 		0|1 
                                    867 ;-------------------------------------
      00039F                        868 strcmp:
      00039F F6               [ 1]  869 	ld a,(x)
      0003A0 27 0B            [ 1]  870 	jreq 5$ 
      0003A2 90 F1            [ 1]  871 	cp a,(y) 
      0003A4 26 05            [ 1]  872 	jrne 4$ 
      0003A6 5C               [ 2]  873 	incw x 
      0003A7 90 5C            [ 2]  874 	incw y 
      0003A9 20 F4            [ 2]  875 	jra strcmp 
      0003AB                        876 4$: ; not same  
      0003AB 4F               [ 1]  877 	clr a 
      0003AC 81               [ 4]  878 	ret 
      0003AD                        879 5$: ; same 
      0003AD A6 01            [ 1]  880 	ld a,#1 
      0003AF 81               [ 4]  881 	ret 
                                    882 
                                    883 
                                    884 ;---------------------------------------
                                    885 ;  copy src to dest 
                                    886 ; input:
                                    887 ;   X 		dest 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    888 ;   Y 		src 
                                    889 ; output: 
                                    890 ;   X 		dest 
                                    891 ;----------------------------------
      0003B0                        892 strcpy:
      0003B0 89               [ 2]  893 	pushw x 
      0003B1 90 F6            [ 1]  894 1$: ld a,(y)
      0003B3 27 06            [ 1]  895 	jreq 9$ 
      0003B5 F7               [ 1]  896 	ld (x),a 
      0003B6 5C               [ 2]  897 	incw x 
      0003B7 90 5C            [ 2]  898 	incw y 
      0003B9 20 F6            [ 2]  899 	jra 1$ 
      0003BB 7F               [ 1]  900 9$:	clr (x)
      0003BC 85               [ 2]  901 	popw x 
      0003BD 81               [ 4]  902 	ret 
                                    903 
                                    904 ;---------------------------------------
                                    905 ; move memory block 
                                    906 ; input:
                                    907 ;   X 		destination 
                                    908 ;   Y 	    source 
                                    909 ;   acc16	bytes count 
                                    910 ; output:
                                    911 ;   none 
                                    912 ;--------------------------------------
                           000001   913 	INCR=1 ; increament high byte 
                           000002   914 	LB=2 ; increament low byte 
                           000002   915 	VSIZE=2
      0003BE                        916 move:
      0003BE                        917 	_vars VSIZE 
      0003BE 52 02            [ 2]    1     sub sp,#VSIZE 
      0003C0 0F 01            [ 1]  918 	clr (INCR,sp)
      0003C2 0F 02            [ 1]  919 	clr (LB,sp)
      0003C4 90 89            [ 2]  920 	pushw y 
      0003C6 13 01            [ 2]  921 	cpw x,(1,sp) ; compare DEST to SRC 
      0003C8 90 85            [ 2]  922 	popw y 
      0003CA 27 31            [ 1]  923 	jreq move_exit ; x==y 
      0003CC 2B 0E            [ 1]  924 	jrmi move_down
      0003CE                        925 move_up: ; start from top address with incr=-1
      0003CE 72 BB 00 0C      [ 2]  926 	addw x,acc16
      0003D2 72 B9 00 0C      [ 2]  927 	addw y,acc16
      0003D6 03 01            [ 1]  928 	cpl (INCR,sp)
      0003D8 03 02            [ 1]  929 	cpl (LB,sp)   ; increment = -1 
      0003DA 20 05            [ 2]  930 	jra move_loop  
      0003DC                        931 move_down: ; start from bottom address with incr=1 
      0003DC 5A               [ 2]  932     decw x 
      0003DD 90 5A            [ 2]  933 	decw y
      0003DF 0C 02            [ 1]  934 	inc (LB,sp) ; incr=1 
      0003E1                        935 move_loop:	
      0003E1 C6 00 0C         [ 1]  936     ld a, acc16 
      0003E4 CA 00 0D         [ 1]  937 	or a, acc8
      0003E7 27 14            [ 1]  938 	jreq move_exit 
      0003E9 72 FB 01         [ 2]  939 	addw x,(INCR,sp)
      0003EC 72 F9 01         [ 2]  940 	addw y,(INCR,sp) 
      0003EF 90 F6            [ 1]  941 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003F1 F7               [ 1]  942 	ld (x),a 
      0003F2 89               [ 2]  943 	pushw x 
      0003F3 CE 00 0C         [ 2]  944 	ldw x,acc16 
      0003F6 5A               [ 2]  945 	decw x 
      0003F7 CF 00 0C         [ 2]  946 	ldw acc16,x 
      0003FA 85               [ 2]  947 	popw x 
      0003FB 20 E4            [ 2]  948 	jra move_loop
      0003FD                        949 move_exit:
      0003FD                        950 	_drop VSIZE
      0003FD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0003FF 81               [ 4]  951 	ret 	
                                    952 
                                    953 ;-------------------------------------
                                    954 ; search text area for a line#
                                    955 ; input:
                                    956 ;	X 			line# 
                                    957 ; output:
                                    958 ;   X 			addr of line | 0 
                                    959 ;   Y           line#|insert address if not found  
                                    960 ;-------------------------------------
                           000001   961 	LL=1 ; line length 
                           000002   962 	LB=2 ; line length low byte 
                           000002   963 	VSIZE=2 
      000400                        964 search_lineno:
      000400                        965 	_vars VSIZE
      000400 52 02            [ 2]    1     sub sp,#VSIZE 
      000402 0F 01            [ 1]  966 	clr (LL,sp)
      000404 90 CE 00 1C      [ 2]  967 	ldw y,txtbgn
      000408                        968 search_ln_loop:
      000408 90 C3 00 1E      [ 2]  969 	cpw y,txtend 
      00040C 2A 10            [ 1]  970 	jrpl 8$
      00040E 90 F3            [ 1]  971 	cpw x,(y)
      000410 27 0E            [ 1]  972 	jreq 9$
      000412 2B 0A            [ 1]  973 	jrmi 8$ 
      000414 90 E6 02         [ 1]  974 	ld a,(2,y)
      000417 6B 02            [ 1]  975 	ld (LB,sp),a 
      000419 72 F9 01         [ 2]  976 	addw y,(LL,sp)
      00041C 20 EA            [ 2]  977 	jra search_ln_loop 
      00041E                        978 8$: 
      00041E 5F               [ 1]  979 	clrw x 	
      00041F 51               [ 1]  980 	exgw x,y 
      000420                        981 9$: _drop VSIZE
      000420 5B 02            [ 2]    1     addw sp,#VSIZE 
      000422 51               [ 1]  982 	exgw x,y   
      000423 81               [ 4]  983 	ret 
                                    984 
                                    985 ;-------------------------------------
                                    986 ; delete line at addr
                                    987 ; input:
                                    988 ;   X 		addr of line i.e DEST for move 
                                    989 ;-------------------------------------
                           000001   990 	LLEN=1
                           000003   991 	SRC=3
                           000004   992 	VSIZE=4
      000424                        993 del_line: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000424                        994 	_vars VSIZE 
      000424 52 04            [ 2]    1     sub sp,#VSIZE 
      000426 E6 02            [ 1]  995 	ld a,(2,x) ; line length
      000428 6B 02            [ 1]  996 	ld (LLEN+1,sp),a 
      00042A 0F 01            [ 1]  997 	clr (LLEN,sp)
      00042C 90 93            [ 1]  998 	ldw y,x  
      00042E 72 F9 01         [ 2]  999 	addw y,(LLEN,sp) ;SRC  
      000431 17 03            [ 2] 1000 	ldw (SRC,sp),y  ;save source 
      000433 90 CE 00 1E      [ 2] 1001 	ldw y,txtend 
      000437 72 F2 03         [ 2] 1002 	subw y,(SRC,sp) ; y=count 
      00043A 90 CF 00 0C      [ 2] 1003 	ldw acc16,y 
      00043E 16 03            [ 2] 1004 	ldw y,(SRC,sp)    ; source
      000440 CD 03 BE         [ 4] 1005 	call move
      000443 90 CE 00 1E      [ 2] 1006 	ldw y,txtend 
      000447 72 F2 01         [ 2] 1007 	subw y,(LLEN,sp)
      00044A 90 CF 00 1E      [ 2] 1008 	ldw txtend,y  
      00044E                       1009 	_drop VSIZE     
      00044E 5B 04            [ 2]    1     addw sp,#VSIZE 
      000450 81               [ 4] 1010 	ret 
                                   1011 
                                   1012 ;---------------------------------------------
                                   1013 ; create a gap in text area to 
                                   1014 ; move new line in this gap
                                   1015 ; input:
                                   1016 ;    X 			addr gap start 
                                   1017 ;    Y 			gap length 
                                   1018 ; output:
                                   1019 ;    X 			addr gap start 
                                   1020 ;--------------------------------------------
                           000001  1021 	DEST=1
                           000003  1022 	SRC=3
                           000005  1023 	LEN=5
                           000006  1024 	VSIZE=6 
      000451                       1025 create_gap:
      000451                       1026 	_vars VSIZE
      000451 52 06            [ 2]    1     sub sp,#VSIZE 
      000453 1F 03            [ 2] 1027 	ldw (SRC,sp),x 
      000455 17 05            [ 2] 1028 	ldw (LEN,sp),y 
      000457 90 CF 00 0C      [ 2] 1029 	ldw acc16,y 
      00045B 90 93            [ 1] 1030 	ldw y,x ; SRC
      00045D 72 BB 00 0C      [ 2] 1031 	addw x,acc16  
      000461 1F 01            [ 2] 1032 	ldw (DEST,sp),x 
                                   1033 ;compute size to move 	
      000463 CE 00 1E         [ 2] 1034 	ldw x,txtend 
      000466 72 F0 03         [ 2] 1035 	subw x,(SRC,sp)
      000469 CF 00 0C         [ 2] 1036 	ldw acc16,x ; size to move
      00046C 1E 01            [ 2] 1037 	ldw x,(DEST,sp) 
      00046E CD 03 BE         [ 4] 1038 	call move
      000471 CE 00 1E         [ 2] 1039 	ldw x,txtend
      000474 72 FB 05         [ 2] 1040 	addw x,(LEN,sp)
      000477 CF 00 1E         [ 2] 1041 	ldw txtend,x
      00047A                       1042 9$:	_drop VSIZE 
      00047A 5B 06            [ 2]    1     addw sp,#VSIZE 
      00047C 81               [ 4] 1043 	ret 
                                   1044 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1045 ;--------------------------------------------
                                   1046 ; insert line in pad into text area 
                                   1047 ; first search for already existing 
                                   1048 ; replace existing 
                                   1049 ; if new line empty delete existing one. 
                                   1050 ; input:
                                   1051 ;   ptr16		pointer to tokenized line  
                                   1052 ; output:
                                   1053 ;   none
                                   1054 ;---------------------------------------------
                           000001  1055 	DEST=1  ; text area insertion address 
                           000003  1056 	SRC=3   ; str to insert address 
                           000005  1057 	LINENO=5 ; line number 
                           000007  1058 	LLEN=7 ; line length 
                           000008  1059 	VSIZE=8  
      00047D                       1060 insert_line:
      00047D                       1061 	_vars VSIZE 
      00047D 52 08            [ 2]    1     sub sp,#VSIZE 
      00047F CE 00 1E         [ 2] 1062 	ldw x,txtend  
      000482 C3 00 1C         [ 2] 1063 	cpw x,txtbgn 
      000485 26 15            [ 1] 1064 	jrne 0$
                                   1065 ;first text line 
      000487 AE 00 02         [ 2] 1066 	ldw x,#2 
      00048A 72 D6 00 17      [ 4] 1067 	ld a,([ptr16],x)
      00048E 5F               [ 1] 1068 	clrw x 
      00048F 97               [ 1] 1069 	ld xl,a
      000490 1F 07            [ 2] 1070 	ldw (LLEN,sp),x 
      000492 CE 00 1C         [ 2] 1071 	ldw x,txtbgn
      000495 1F 01            [ 2] 1072 	ldw (DEST,sp),x 
      000497 CE 00 1E         [ 2] 1073 	ldw x,txtend 
      00049A 20 37            [ 2] 1074 	jra 4$
      00049C 72 CE 00 17      [ 5] 1075 0$:	ldw x,[ptr16]
                                   1076 ; line number
      0004A0 1F 05            [ 2] 1077 	ldw (LINENO,sp),x 
      0004A2 AE 00 02         [ 2] 1078 	ldw x,#2 
      0004A5 72 D6 00 17      [ 4] 1079 	ld a,([ptr16],x)
      0004A9 97               [ 1] 1080 	ld xl,a
                                   1081 ; line length
      0004AA 1F 07            [ 2] 1082 	ldw (LLEN,sp),x
                                   1083 ; check if that line number already exit 	
      0004AC 1E 05            [ 2] 1084 	ldw x,(LINENO,sp)
      0004AE CD 04 00         [ 4] 1085 	call search_lineno 
      0004B1 5D               [ 2] 1086 	tnzw x 
      0004B2 26 04            [ 1] 1087 	jrne 2$
                                   1088 ; line doesn't exit
                                   1089 ; it will be inserted at this point.  	
      0004B4 17 01            [ 2] 1090 	ldw (DEST,sp),y 
      0004B6 20 05            [ 2] 1091 	jra 3$
                                   1092 ; line exit delete it.
                                   1093 ; it will be replaced by new one 	
      0004B8 1F 01            [ 2] 1094 2$: ldw (DEST,sp),x 
      0004BA CD 04 24         [ 4] 1095 	call del_line
      0004BD                       1096 3$: 
                                   1097 ; insert new line or leave if LLEN==3
                                   1098 ; LLEN==3 means empty line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004BD A6 03            [ 1] 1099 	ld a,#3
      0004BF 11 08            [ 1] 1100 	cp a,(LLEN+1,sp)
      0004C1 27 24            [ 1] 1101 	jreq insert_ln_exit ; empty line exit.
                                   1102 ; if insertion point at txtend 
                                   1103 ; move no need to create a gap 
      0004C3 1E 01            [ 2] 1104 	ldw x,(DEST,sp)
      0004C5 C3 00 1E         [ 2] 1105 	cpw x,txtend 
      0004C8 27 09            [ 1] 1106 	jreq 4$ 
                                   1107 ; must create a gap
                                   1108 ; at insertion point  
      0004CA 1E 01            [ 2] 1109 	ldw x,(DEST,sp)
      0004CC 16 07            [ 2] 1110 	ldw y,(LLEN,sp)
      0004CE CD 04 51         [ 4] 1111 	call create_gap
      0004D1 20 06            [ 2] 1112 	jra 5$
      0004D3                       1113 4$: 
      0004D3 72 FB 07         [ 2] 1114 	addw x,(LLEN,sp)
      0004D6 CF 00 1E         [ 2] 1115 	ldw txtend,x 	 
                                   1116 ; move new line in gap 
      0004D9 1E 07            [ 2] 1117 5$:	ldw x,(LLEN,sp)
      0004DB CF 00 0C         [ 2] 1118 	ldw acc16,x 
      0004DE 90 AE 16 E0      [ 2] 1119 	ldw y,#pad ;SRC 
      0004E2 1E 01            [ 2] 1120 	ldw x,(DEST,sp) ; dest address 
      0004E4 CD 03 BE         [ 4] 1121 	call move 
      0004E7                       1122 insert_ln_exit:	
      0004E7                       1123 	_drop VSIZE
      0004E7 5B 08            [ 2]    1     addw sp,#VSIZE 
      0004E9 81               [ 4] 1124 	ret
                                   1125 
                                   1126 ;-----------------------------------
                                   1127 ; create token list fromm text line 
                                   1128 ; save this list in pad buffer 
                                   1129 ;  compiled line format: 
                                   1130 ;    line_no  2 bytes {0...32767}
                                   1131 ;    count    1 byte  
                                   1132 ;    tokens   variable length 
                                   1133 ;   
                                   1134 ; input:
                                   1135 ;   none
                                   1136 ; modified variables:
                                   1137 ;   basicptr     token list buffer address 
                                   1138 ;   in.w  		 3|count, i.e. index in buffer
                                   1139 ;   count        length of line | 0  
                                   1140 ;-----------------------------------
                           000001  1141 	XSAVE=1
                           000002  1142 	VSIZE=2
      0004EA                       1143 compile:
      0004EA                       1144 	_vars VSIZE 
      0004EA 52 02            [ 2]    1     sub sp,#VSIZE 
      0004EC 72 1A 00 23      [ 1] 1145 	bset flags,#FCOMP 
      0004F0 A6 00            [ 1] 1146 	ld a,#0
      0004F2 AE 00 00         [ 2] 1147 	ldw x,#0
      0004F5 CF 16 E0         [ 2] 1148 	ldw pad,x ; destination buffer 
      0004F8 C7 16 E2         [ 1] 1149 	ld pad+2,a ; count 
      0004FB AE 16 E3         [ 2] 1150 	ldw x,#pad+3
      0004FE 72 5F 00 01      [ 1] 1151 	clr in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000502 CD 0C 7C         [ 4] 1152 	call get_token
      000505 A1 84            [ 1] 1153 	cp a,#TK_INTGR
      000507 26 11            [ 1] 1154 	jrne 2$
      000509 A3 00 01         [ 2] 1155 	cpw x,#1 
      00050C 2A 05            [ 1] 1156 	jrpl 1$
      00050E A6 0A            [ 1] 1157 	ld a,#ERR_BAD_VALUE
      000510 CC 08 77         [ 2] 1158 	jp tb_error
      000513 CF 16 E0         [ 2] 1159 1$:	ldw pad,x 
      000516 90 AE 16 E3      [ 2] 1160 	ldw y,#pad+3 
      00051A 90 A3 17 60      [ 2] 1161 2$:	cpw y,#stack_full 
      00051E 25 05            [ 1] 1162 	jrult 3$
      000520 A6 0F            [ 1] 1163 	ld a,#ERR_BUF_FULL 
      000522 CC 08 77         [ 2] 1164 	jp tb_error 
      000525                       1165 3$:	
      000525 93               [ 1] 1166 	ldw x,y 
      000526 CD 0C 7C         [ 4] 1167 	call get_token 
      000529 A1 00            [ 1] 1168 	cp a,#TK_NONE 
      00052B 26 ED            [ 1] 1169 	jrne 2$ 
                                   1170 ; compilation completed  
      00052D 72 A2 16 E0      [ 2] 1171 	subw y,#pad
      000531 90 9F            [ 1] 1172     ld a,yl
      000533 AE 16 E0         [ 2] 1173 	ldw x,#pad 
      000536 CF 00 17         [ 2] 1174 	ldw ptr16,x 
      000539 E7 02            [ 1] 1175 	ld (2,x),a 
      00053B FE               [ 2] 1176 	ldw x,(x)
      00053C 27 09            [ 1] 1177 	jreq 10$
      00053E CD 04 7D         [ 4] 1178 	call insert_line
      000541 72 5F 00 03      [ 1] 1179 	clr  count 
      000545 20 0F            [ 2] 1180 	jra  11$ 
      000547                       1181 10$: ; line# is zero 
      000547 CE 00 17         [ 2] 1182 	ldw x,ptr16  
      00054A CF 00 04         [ 2] 1183 	ldw basicptr,x 
      00054D E6 02            [ 1] 1184 	ld a,(2,x)
      00054F C7 00 03         [ 1] 1185 	ld count,a 
      000552 35 03 00 01      [ 1] 1186 	mov in,#3 
      000556                       1187 11$:
      000556                       1188 	_drop VSIZE 
      000556 5B 02            [ 2]    1     addw sp,#VSIZE 
      000558 72 1B 00 23      [ 1] 1189 	bres flags,#FCOMP 
      00055C 81               [ 4] 1190 	ret 
                                   1191 
                                   1192 ;------------------------------------
                                   1193 ;  set all variables to zero 
                                   1194 ; input:
                                   1195 ;   none 
                                   1196 ; output:
                                   1197 ;	none
                                   1198 ;------------------------------------
      00055D                       1199 clear_vars:
      00055D AE 00 26         [ 2] 1200 	ldw x,#vars 
      000560 90 AE 00 34      [ 2] 1201 	ldw y,#2*26 
      000564 7F               [ 1] 1202 1$:	clr (x)
      000565 5C               [ 2] 1203 	incw x 
      000566 90 5A            [ 2] 1204 	decw y 
      000568 26 FA            [ 1] 1205 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      00056A 81               [ 4] 1206 	ret 
                                   1207 
                                   1208 ;-------------------------------------
                                   1209 ; check if A is a letter 
                                   1210 ; input:
                                   1211 ;   A 			character to test 
                                   1212 ; output:
                                   1213 ;   C flag      1 true, 0 false 
                                   1214 ;-------------------------------------
      00056B                       1215 is_alpha:
      00056B A1 41            [ 1] 1216 	cp a,#'A 
      00056D 8C               [ 1] 1217 	ccf
      00056E 24 0B            [ 1] 1218 	jrnc 9$ 
      000570 A1 5B            [ 1] 1219 	cp a,#'Z+1 
      000572 25 07            [ 1] 1220 	jrc 9$ 
      000574 A1 61            [ 1] 1221 	cp a,#'a 
      000576 8C               [ 1] 1222 	ccf 
      000577 24 02            [ 1] 1223 	jrnc 9$
      000579 A1 7B            [ 1] 1224 	cp a,#'z+1   
      00057B 81               [ 4] 1225 9$: ret 	
                                   1226 
                                   1227 ;------------------------------------
                                   1228 ; check if character in {'0'..'9'}
                                   1229 ; input:
                                   1230 ;    A  character to test
                                   1231 ; output:
                                   1232 ;    Carry  0 not digit | 1 digit
                                   1233 ;------------------------------------
      00057C                       1234 is_digit:
      00057C A1 30            [ 1] 1235 	cp a,#'0
      00057E 25 03            [ 1] 1236 	jrc 1$
      000580 A1 3A            [ 1] 1237     cp a,#'9+1
      000582 8C               [ 1] 1238 	ccf 
      000583 8C               [ 1] 1239 1$:	ccf 
      000584 81               [ 4] 1240     ret
                                   1241 
                                   1242 ;-------------------------------------
                                   1243 ;  program initialization entry point 
                                   1244 ;-------------------------------------
                           000001  1245 	MAJOR=1
                           000000  1246 	MINOR=0
      000585 0A 0A 54 69 6E 79 20  1247 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      0005CB                       1248 cold_start:
                                   1249 ;set stack 
      0005CB AE 17 FF         [ 2] 1250 	ldw x,#STACK_EMPTY
      0005CE 94               [ 1] 1251 	ldw sp,x   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1252 ; clear all ram 
      0005CF 7F               [ 1] 1253 0$: clr (x)
      0005D0 5A               [ 2] 1254 	decw x 
      0005D1 26 FC            [ 1] 1255 	jrne 0$
                                   1256 ; activate pull up on all inputs 
      0005D3 A6 FF            [ 1] 1257 	ld a,#255 
      0005D5 C7 50 03         [ 1] 1258 	ld PA_CR1,a 
      0005D8 C7 50 08         [ 1] 1259 	ld PB_CR1,a 
      0005DB C7 50 0D         [ 1] 1260 	ld PC_CR1,a 
      0005DE C7 50 12         [ 1] 1261 	ld PD_CR1,a 
      0005E1 C7 50 17         [ 1] 1262 	ld PE_CR1,a 
      0005E4 C7 50 1C         [ 1] 1263 	ld PF_CR1,a 
      0005E7 C7 50 21         [ 1] 1264 	ld PG_CR1,a 
      0005EA C7 50 2B         [ 1] 1265 	ld PI_CR1,a
                                   1266 ; set LD2 pin as output and turn it on
      0005ED 72 1A 50 0D      [ 1] 1267     bset PC_CR1,#LED2_BIT
      0005F1 72 1A 50 0E      [ 1] 1268     bset PC_CR2,#LED2_BIT
      0005F5 72 1A 50 0C      [ 1] 1269     bset PC_DDR,#LED2_BIT
      0005F9 72 1A 50 0A      [ 1] 1270 	bset PC_ODR,#LED2_BIT 
                                   1271 ; disable schmitt triggers on Arduino CN4 analog inputs
      0005FD 55 00 3F 54 07   [ 1] 1272 	mov ADC_TDRL,0x3f
                                   1273 ; disable peripherals clocks
                                   1274 ;	clr CLK_PCKENR1 
                                   1275 ;	clr CLK_PCKENR2
      000602 72 5F 50 F2      [ 1] 1276 	clr AWU_TBR 
      000606 72 14 50 CA      [ 1] 1277 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1278 ; select internal clock no divisor: 16 Mhz 	
      00060A A6 E1            [ 1] 1279 	ld a,#CLK_SWR_HSI 
      00060C 5F               [ 1] 1280 	clrw x  
      00060D CD 00 9D         [ 4] 1281     call clock_init 
      000610 CD 00 C0         [ 4] 1282 	call timer4_init
      000613 CD 00 B3         [ 4] 1283 	call timer2_init
                                   1284 ; UART1 at 115200 BAUD
      000616 CD 02 65         [ 4] 1285 	call uart1_init
                                   1286 ; activate PE_4 (user button interrupt)
      000619 72 18 50 18      [ 1] 1287     bset PE_CR2,#USR_BTN_BIT 
                                   1288 ; display system information
      00061D AE 05 85         [ 2] 1289 	ldw x,#software 
      000620 CD 02 B3         [ 4] 1290 	call puts 
      000623 A6 01            [ 1] 1291 	ld a,#MAJOR 
      000625 C7 00 0D         [ 1] 1292 	ld acc8,a 
      000628 5F               [ 1] 1293 	clrw x 
      000629 CF 00 0B         [ 2] 1294 	ldw acc24,x
      00062C 72 5F 00 24      [ 1] 1295 	clr tab_width  
      000630 35 0A 00 0A      [ 1] 1296 	mov base, #10 
      000634 CD 09 CC         [ 4] 1297 	call prti24 
      000637 A6 2E            [ 1] 1298 	ld a,#'.
      000639 CD 02 A0         [ 4] 1299 	call putc 
      00063C A6 00            [ 1] 1300 	ld a,#MINOR 
      00063E C7 00 0D         [ 1] 1301 	ld acc8,a 
      000641 5F               [ 1] 1302 	clrw x 
      000642 CF 00 0B         [ 2] 1303 	ldw acc24,x 
      000645 CD 09 CC         [ 4] 1304 	call prti24
      000648 A6 0D            [ 1] 1305 	ld a,#CR 
      00064A CD 02 A0         [ 4] 1306 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00064D CD 19 B7         [ 4] 1307 	call seek_fdrive 
      000650 9A               [ 1] 1308 	rim 
      000651 72 5C 00 15      [ 1] 1309 	inc seedy+1 
      000655 72 5C 00 13      [ 1] 1310 	inc seedx+1 
      000659 CD 06 E1         [ 4] 1311 	call clear_basic
      00065C CD 12 71         [ 4] 1312 	call ubound 
                                   1313 ;	jra 2$	
                                   1314 ; 150 msec beep 
      00065F AE 00 96         [ 2] 1315 	ldw x,#150 
      000662 90 AE 03 E6      [ 2] 1316 	ldw y,#998 
      000666 CD 18 1B         [ 4] 1317 	call beep  
      000669 72 1B 50 0A      [ 1] 1318 2$:	bres PC_ODR,#LED2_BIT	
      00066D CD 06 76         [ 4] 1319 	call warm_init
      000670 CD 06 A3         [ 4] 1320 	call load_autorun
      000673 CC 08 FF         [ 2] 1321     jp cmd_line  
                                   1322 
      000676                       1323 warm_init:
      000676 72 5F 00 23      [ 1] 1324 	clr flags 
      00067A 72 5F 00 20      [ 1] 1325 	clr loop_depth 
      00067E 35 04 00 24      [ 1] 1326 	mov tab_width,#TAB_WIDTH 
      000682 35 0A 00 0A      [ 1] 1327 	mov base,#10 
      000686 AE 00 00         [ 2] 1328 	ldw x,#0 
      000689 CF 00 04         [ 2] 1329 	ldw basicptr,x 
      00068C CF 00 00         [ 2] 1330 	ldw in.w,x 
      00068F 72 5F 00 03      [ 1] 1331 	clr count
      000693 81               [ 4] 1332 	ret 
                                   1333 
                                   1334 ;--------------------------
                                   1335 ; called by tb_error when
                                   1336 ; flag FAUTORUN is set.
                                   1337 ; There is a bug in autorun 
                                   1338 ; program so cancel it.
                                   1339 ;---------------------------
      000694                       1340 cancel_autorun:
      000694 AE 40 00         [ 2] 1341 	ldw x,#AUTORUN_NAME 
      000697 CF 00 17         [ 2] 1342 	ldw farptr+1,x 
      00069A 4F               [ 1] 1343 	clr a
      00069B 5F               [ 1] 1344 	clrw x  
      00069C C7 00 16         [ 1] 1345 	ld farptr,a 
      00069F CD 01 CD         [ 4] 1346 	call write_byte 
      0006A2 81               [ 4] 1347 	ret 
                                   1348 
                                   1349 
                                   1350 ;--------------------------
                                   1351 ; if autorun file defined 
                                   1352 ; in eeprom address AUTORUN_NAME 
                                   1353 ; load and run it.
                                   1354 ;-------------------------
      0006A3                       1355 load_autorun:
      0006A3 90 AE 40 00      [ 2] 1356 	ldw y,#AUTORUN_NAME
      0006A7 90 F6            [ 1] 1357 	ld a,(y)
      0006A9 27 20            [ 1] 1358 	jreq 9$
      0006AB CD 1A 1D         [ 4] 1359 	call search_file
      0006AE 25 05            [ 1] 1360 	jrc 2$ 
                                   1361 ; if file doesn't exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0006B0 CD 06 94         [ 4] 1362 	call cancel_autorun
      0006B3 20 16            [ 2] 1363 	jra 9$ 
      0006B5 CD 1B 33         [ 4] 1364 2$:	call load_file
      0006B8 AE 40 00         [ 2] 1365 	ldw x,#AUTORUN_NAME 
      0006BB CD 02 B3         [ 4] 1366 	call puts
      0006BE AE 06 CC         [ 2] 1367 	ldw x,#autorun_msg 
      0006C1 CD 02 B3         [ 4] 1368 	call puts 
      0006C4 72 1C 00 23      [ 1] 1369 	bset flags,#FAUTORUN 
      0006C8 CC 17 E0         [ 2] 1370 	jp run_it    
      0006CB 81               [ 4] 1371 9$: ret 	
                                   1372 
      0006CC 20 6C 6F 61 64 65 64  1373 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1374 ;---------------------------
                                   1375 ; reset BASIC text variables 
                                   1376 ; and clear variables 
                                   1377 ;---------------------------
      0006E1                       1378 clear_basic:
      0006E1 72 5F 00 03      [ 1] 1379 	clr count
      0006E5 72 5F 00 01      [ 1] 1380 	clr in  
      0006E9 AE 00 5A         [ 2] 1381 	ldw x,#free_ram 
      0006EC CF 00 1C         [ 2] 1382 	ldw txtbgn,x 
      0006EF CF 00 1E         [ 2] 1383 	ldw txtend,x 
      0006F2 CD 05 5D         [ 4] 1384 	call clear_vars 
      0006F5 81               [ 4] 1385 	ret 
                                   1386 
                                   1387 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1388 ;;   Tiny BASIC error messages     ;;
                                   1389 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F6                       1390 err_msg:
      0006F6 00 00 07 16 07 23 07  1391 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             31 07 4A 07 59
      000702 07 6F 07 85 07 9F 07  1392 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             B0 07 C1
      00070C 07 CD 08 00 08 10 08  1393 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             24 08 37
                                   1394 
      000716 4D 65 6D 6F 72 79 20  1395 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      000723 73 79 6E 74 61 78 20  1396 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      000731 6D 61 74 68 20 6F 70  1397 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      00074A 64 69 76 69 73 69 6F  1398 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      000759 69 6E 76 61 6C 69 64  1399 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00076F 72 75 6E 20 74 69 6D  1400 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



             75 73 61 67 65 2E 0A
             00
      000785 63 6F 6D 6D 61 6E 64  1401 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      00079F 64 75 70 6C 69 63 61  1402 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0007B0 46 69 6C 65 20 6E 6F  1403 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0007C1 62 61 64 20 76 61 6C  1404 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0007CD 46 69 6C 65 20 69 6E  1405 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      000800 4E 6F 20 64 61 74 61  1406 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      000810 4E 6F 20 70 72 6F 67  1407 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      000824 46 69 6C 65 20 73 79  1408 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      000837 42 75 66 66 65 72 20  1409 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1410 
      000844 72 75 6E 20 74 69 6D  1411 rt_msg: .asciz "run time error, "
             65 20 65 72 72 6F 72
             2C 20 00
      000855 63 6F 6D 70 69 6C 65  1412 comp_msg: .asciz "compile error, "
             20 65 72 72 6F 72 2C
             20 00
      000865 6C 61 73 74 20 74 6F  1413 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1414 
      000875                       1415 syntax_error:
      000875 A6 02            [ 1] 1416 	ld a,#ERR_SYNTAX 
                                   1417 
      000877                       1418 tb_error:
      000877 72 0A 00 23 47   [ 2] 1419 	btjt flags,#FCOMP,1$
      00087C 88               [ 1] 1420 	push a 
      00087D AE 08 44         [ 2] 1421 	ldw x, #rt_msg 
      000880 CD 02 B3         [ 4] 1422 	call puts 
      000883 84               [ 1] 1423 	pop a 
      000884 AE 06 F6         [ 2] 1424 	ldw x, #err_msg 
      000887 72 5F 00 0C      [ 1] 1425 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      00088B 48               [ 1] 1426 	sll a
      00088C 72 59 00 0C      [ 1] 1427 	rlc acc16  
      000890 C7 00 0D         [ 1] 1428 	ld acc8, a 
      000893 72 BB 00 0C      [ 2] 1429 	addw x,acc16 
      000897 FE               [ 2] 1430 	ldw x,(x)
      000898 CD 02 B3         [ 4] 1431 	call puts
      00089B CE 00 04         [ 2] 1432 	ldw x,basicptr
      00089E C6 00 01         [ 1] 1433 	ld a,in 
      0008A1 CD 13 8B         [ 4] 1434 	call prt_basic_line
      0008A4 AE 08 65         [ 2] 1435 	ldw x,#tk_id 
      0008A7 CD 02 B3         [ 4] 1436 	call puts 
      0008AA C6 00 02         [ 1] 1437 	ld a,in.saved 
      0008AD 5F               [ 1] 1438 	clrw x 
      0008AE 97               [ 1] 1439 	ld xl,a 
      0008AF 72 BB 00 04      [ 2] 1440 	addw x,basicptr 
      0008B3 F6               [ 1] 1441 	ld a,(x)
      0008B4 5F               [ 1] 1442 	clrw x 
      0008B5 97               [ 1] 1443 	ld xl,a 
      0008B6 CD 09 BC         [ 4] 1444 	call print_int
      0008B9 72 0D 00 23 3A   [ 2] 1445 	btjf flags,#FAUTORUN ,6$
      0008BE CD 06 94         [ 4] 1446 	call cancel_autorun  
      0008C1 20 35            [ 2] 1447 	jra 6$
      0008C3                       1448 1$:	
      0008C3 88               [ 1] 1449 	push a 
      0008C4 AE 08 55         [ 2] 1450 	ldw x,#comp_msg
      0008C7 CD 02 B3         [ 4] 1451 	call puts 
      0008CA 84               [ 1] 1452 	pop a 
      0008CB AE 06 F6         [ 2] 1453 	ldw x, #err_msg 
      0008CE 72 5F 00 0C      [ 1] 1454 	clr acc16 
      0008D2 48               [ 1] 1455 	sll a
      0008D3 72 59 00 0C      [ 1] 1456 	rlc acc16  
      0008D7 C7 00 0D         [ 1] 1457 	ld acc8, a 
      0008DA 72 BB 00 0C      [ 2] 1458 	addw x,acc16 
      0008DE FE               [ 2] 1459 	ldw x,(x)
      0008DF CD 02 B3         [ 4] 1460 	call puts
      0008E2 AE 16 90         [ 2] 1461 	ldw x,#tib
      0008E5 CD 02 B3         [ 4] 1462 	call puts 
      0008E8 A6 0D            [ 1] 1463 	ld a,#CR 
      0008EA CD 02 A0         [ 4] 1464 	call putc
      0008ED CE 00 00         [ 2] 1465 	ldw x,in.w
      0008F0 CD 02 DB         [ 4] 1466 	call spaces
      0008F3 A6 5E            [ 1] 1467 	ld a,#'^
      0008F5 CD 02 A0         [ 4] 1468 	call putc 
      0008F8 AE 17 FF         [ 2] 1469 6$: ldw x,#STACK_EMPTY 
      0008FB 94               [ 1] 1470     ldw sp,x
      0008FC                       1471 warm_start:
      0008FC CD 06 76         [ 4] 1472 	call warm_init
                                   1473 ;----------------------------
                                   1474 ;   BASIC interpreter
                                   1475 ;----------------------------
      0008FF                       1476 cmd_line: ; user interface 
      0008FF A6 0D            [ 1] 1477 	ld a,#CR 
      000901 CD 02 A0         [ 4] 1478 	call putc 
      000904 A6 3E            [ 1] 1479 	ld a,#'> 
      000906 CD 02 A0         [ 4] 1480 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000909 CD 0A C7         [ 4] 1481 	call readln
      00090C 72 5D 00 03      [ 1] 1482 	tnz count 
      000910 27 ED            [ 1] 1483 	jreq cmd_line
      000912 CD 04 EA         [ 4] 1484 	call compile
                                   1485 ; if text begin with a line number
                                   1486 ; the compiler set count to zero    
                                   1487 ; so code is not interpreted
      000915 72 5D 00 03      [ 1] 1488 	tnz count 
      000919 27 E4            [ 1] 1489 	jreq cmd_line
                                   1490 
                                   1491 ; if direct command 
                                   1492 ; it's ready to interpret 
                                   1493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1494 ;; This is the interpreter loop
                                   1495 ;; for each BASIC code line. 
                                   1496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      00091B                       1497 interpreter: 
      00091B C6 00 01         [ 1] 1498 	ld a,in 
      00091E C1 00 03         [ 1] 1499 	cp a,count 
      000921 2B 1D            [ 1] 1500 	jrmi interp_loop
      000923                       1501 next_line:
      000923 72 01 00 23 D7   [ 2] 1502 	btjf flags, #FRUN, cmd_line
      000928 CE 00 04         [ 2] 1503 	ldw x,basicptr
      00092B 72 BB 00 00      [ 2] 1504 	addw x,in.w 
      00092F C3 00 1E         [ 2] 1505 	cpw x,txtend 
      000932 2A C8            [ 1] 1506 	jrpl warm_start
      000934 CF 00 04         [ 2] 1507 	ldw basicptr,x ; start of next line  
      000937 E6 02            [ 1] 1508 	ld a,(2,x)
      000939 C7 00 03         [ 1] 1509 	ld count,a 
      00093C 35 03 00 01      [ 1] 1510 	mov in,#3 ; skip first 3 bytes of line 
      000940                       1511 interp_loop: 
      000940 CD 09 67         [ 4] 1512 	call next_token
      000943 A1 00            [ 1] 1513 	cp a,#TK_NONE 
      000945 27 DC            [ 1] 1514 	jreq next_line 
      000947 A1 80            [ 1] 1515 	cp a,#TK_CMD
      000949 26 03            [ 1] 1516 	jrne 1$
      00094B FD               [ 4] 1517 	call (x) 
      00094C 20 F2            [ 2] 1518 	jra interp_loop 
      00094E                       1519 1$:	 
      00094E A1 85            [ 1] 1520 	cp a,#TK_VAR
      000950 26 05            [ 1] 1521 	jrne 2$
      000952 CD 12 A4         [ 4] 1522 	call let_var  
      000955 20 E9            [ 2] 1523 	jra interp_loop 
      000957                       1524 2$:	
      000957 A1 06            [ 1] 1525 	cp a,#TK_ARRAY 
      000959 26 05            [ 1] 1526 	jrne 3$
      00095B CD 12 A1         [ 4] 1527 	call let_array 
      00095E 20 E0            [ 2] 1528 	jra interp_loop
      000960                       1529 3$:	
      000960 A1 01            [ 1] 1530 	cp a,#TK_COLON 
      000962 27 DC            [ 1] 1531 	jreq interp_loop 
      000964 CC 08 75         [ 2] 1532 	jp syntax_error 
                                   1533 
                                   1534 		
                                   1535 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1536 ; extract next token from
                                   1537 ; token list 
                                   1538 ; basicptr -> base address 
                                   1539 ; in  -> offset in list array 
                                   1540 ; output:
                                   1541 ;   A 		token attribute
                                   1542 ;   X 		token value if there is one
                                   1543 ;----------------------------------------
      000967                       1544 next_token:
      000967 5F               [ 1] 1545 	clrw x 
      000968 C6 00 01         [ 1] 1546 	ld a,in 
      00096B C0 00 03         [ 1] 1547 	sub a,count ; don't replace sub by cp!  
      00096E 2B 01            [ 1] 1548 	jrmi 0$
      000970 81               [ 4] 1549 	ret  ; end of BASIC line 
      000971                       1550 0$: 
      000971 55 00 01 00 02   [ 1] 1551 	mov in.saved,in 
      000976 90 CE 00 04      [ 2] 1552 	ldw y,basicptr 
      00097A 91 D6 00         [ 4] 1553 	ld a,([in.w],y)
      00097D 72 5C 00 01      [ 1] 1554 	inc in  
      000981 4D               [ 1] 1555 	tnz a 
      000982 2B 2B            [ 1] 1556 	jrmi 6$
      000984 A1 06            [ 1] 1557 	cp a,#TK_ARRAY
      000986 2A 33            [ 1] 1558 	jrpl 9$  ; no attribute for these
      000988 A1 01            [ 1] 1559 	cp a,#TK_COLON
      00098A 27 2F            [ 1] 1560 	jreq 9$  
      00098C                       1561 1$: ; 
      00098C A1 03            [ 1] 1562 	cp a,#TK_CHAR
      00098E 26 0B            [ 1] 1563 	jrne 2$
      000990 91 D6 00         [ 4] 1564 	ld a,([in.w],y)
      000993 72 5C 00 01      [ 1] 1565 	inc in 
      000997 41               [ 1] 1566 	exg a,xl  
      000998 A6 03            [ 1] 1567 	ld a,#TK_CHAR
      00099A 81               [ 4] 1568 	ret
      00099B A1 02            [ 1] 1569 2$:	cp a,#TK_QSTR 
      00099D 26 1C            [ 1] 1570 	jrne 9$
      00099F 93               [ 1] 1571 	ldw x,y 
      0009A0 72 BB 00 00      [ 2] 1572 	addw x,in.w ; pointer to string 
                                   1573 ; move pointer after string 
      0009A4 91 6D 00         [ 4] 1574 3$:	tnz ([in.w],y)
      0009A7 27 0E            [ 1] 1575 	jreq 8$
      0009A9 72 5C 00 01      [ 1] 1576 	inc in 
      0009AD 20 F5            [ 2] 1577 	jra 3$
      0009AF                       1578 6$: 
      0009AF 91 DE 00         [ 5] 1579 	ldw y,([in.w],y)
      0009B2 51               [ 1] 1580 	exgw x,y 
      0009B3 72 5C 00 01      [ 1] 1581 	inc in
      0009B7 72 5C 00 01      [ 1] 1582 8$:	inc in 
      0009BB                       1583 9$: 
      0009BB 81               [ 4] 1584 	ret	
                                   1585 
                                   1586 ;-----------------------------------
                                   1587 ; print a 16 bit integer 
                                   1588 ; using variable 'base' as conversion
                                   1589 ; format.
                                   1590 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1591 ;   X       integer to print 
                                   1592 ;   'base'    conversion base 
                                   1593 ; output:
                                   1594 ;   none 
                                   1595 ;-----------------------------------
      0009BC                       1596 print_int:
      0009BC 72 5F 00 0B      [ 1] 1597 	clr acc24 
      0009C0 CF 00 0C         [ 2] 1598 	ldw acc16,x 
      0009C3 72 0F 00 0C 04   [ 2] 1599 	btjf acc16,#7,prti24
      0009C8 72 53 00 0B      [ 1] 1600 	cpl acc24 
                                   1601 
                                   1602 ;------------------------------------
                                   1603 ; print integer in acc24 
                                   1604 ; input:
                                   1605 ;	acc24 		integer to print 
                                   1606 ;	'base' 		numerical base for conversion 
                                   1607 ;   'tab_width' field width 
                                   1608 ;  output:
                                   1609 ;   A          string length
                                   1610 ;    X          pointer to string  
                                   1611 ;------------------------------------
                           000001  1612 	SPCNT=1
                           000011  1613 	VSIZE=17 
      0009CC                       1614 prti24:
      0009CC                       1615 	_vars VSIZE 
      0009CC 52 11            [ 2]    1     sub sp,#VSIZE 
      0009CE CD 09 E8         [ 4] 1616     call itoa  ; conversion entier en  .asciz
      0009D1 6B 01            [ 1] 1617 	ld (SPCNT,sp),a 
      0009D3 7B 01            [ 1] 1618 1$: ld a,(SPCNT,sp)
      0009D5 C1 00 24         [ 1] 1619 	cp a,tab_width
      0009D8 24 08            [ 1] 1620 	jruge 4$
      0009DA A6 20            [ 1] 1621 	ld  a,#SPACE
      0009DC 5A               [ 2] 1622 	decw x
      0009DD F7               [ 1] 1623     ld (x),a 
      0009DE 0C 01            [ 1] 1624 	inc (SPCNT,sp)
      0009E0 20 F1            [ 2] 1625 	jra 1$ 
      0009E2                       1626 4$: 
      0009E2 CD 02 B3         [ 4] 1627 	call puts 
      0009E5                       1628 5$: _drop VSIZE 
      0009E5 5B 11            [ 2]    1     addw sp,#VSIZE 
      0009E7 81               [ 4] 1629     ret	
                                   1630 
                                   1631 ;------------------------------------
                                   1632 ; convert integer in acc24 to string
                                   1633 ; input:
                                   1634 ;   'base'	conversion base 
                                   1635 ;	acc24	integer to convert
                                   1636 ; output:
                                   1637 ;   X  		pointer to first char of string
                                   1638 ;   A       string length
                                   1639 ;------------------------------------
                           000001  1640 	SIGN=1  ; integer sign 
                           000002  1641 	LEN=2 
                           000003  1642 	PSTR=3
                           000004  1643 	VSIZE=4 ;locals size
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009E8                       1644 itoa:
      0009E8                       1645 	_vars VSIZE
      0009E8 52 04            [ 2]    1     sub sp,#VSIZE 
      0009EA 0F 02            [ 1] 1646 	clr (LEN,sp) ; string length  
      0009EC 0F 01            [ 1] 1647 	clr (SIGN,sp)    ; sign
      0009EE C6 00 0A         [ 1] 1648 	ld a,base 
      0009F1 A1 0A            [ 1] 1649 	cp a,#10
      0009F3 26 0A            [ 1] 1650 	jrne 1$
                                   1651 	; base 10 string display with negative sign if bit 23==1
      0009F5 72 0F 00 0B 05   [ 2] 1652 	btjf acc24,#7,1$
      0009FA 03 01            [ 1] 1653 	cpl (SIGN,sp)
      0009FC CD 0A A4         [ 4] 1654 	call neg_acc24
      0009FF                       1655 1$:
                                   1656 ; initialize string pointer 
      0009FF AE 16 90         [ 2] 1657 	ldw x,#tib 
      000A02 1C 00 50         [ 2] 1658 	addw x,#TIB_SIZE
      000A05 5A               [ 2] 1659 	decw x 
      000A06 7F               [ 1] 1660 	clr (x)
      000A07                       1661 itoa_loop:
      000A07 C6 00 0A         [ 1] 1662     ld a,base
      000A0A 1F 03            [ 2] 1663 	ldw (PSTR,sp),x 
      000A0C CD 0A 42         [ 4] 1664     call divu24_8 ; acc24/A 
      000A0F 1E 03            [ 2] 1665 	ldw x,(PSTR,sp)
      000A11 AB 30            [ 1] 1666     add a,#'0  ; remainder of division
      000A13 A1 3A            [ 1] 1667     cp a,#'9+1
      000A15 2B 02            [ 1] 1668     jrmi 2$
      000A17 AB 07            [ 1] 1669     add a,#7 
      000A19                       1670 2$:	
      000A19 5A               [ 2] 1671 	decw x
      000A1A F7               [ 1] 1672     ld (x),a
      000A1B 0C 02            [ 1] 1673 	inc (LEN,sp)
                                   1674 	; if acc24==0 conversion done
      000A1D C6 00 0B         [ 1] 1675 	ld a,acc24
      000A20 CA 00 0C         [ 1] 1676 	or a,acc16
      000A23 CA 00 0D         [ 1] 1677 	or a,acc8
      000A26 26 DF            [ 1] 1678     jrne itoa_loop
                                   1679 	;conversion done, next add '$' or '-' as required
      000A28 C6 00 0A         [ 1] 1680 	ld a,base 
      000A2B A1 10            [ 1] 1681 	cp a,#16
      000A2D 27 08            [ 1] 1682 	jreq 8$
      000A2F 7B 01            [ 1] 1683 	ld a,(SIGN,sp)
      000A31 27 0A            [ 1] 1684     jreq 10$
      000A33 A6 2D            [ 1] 1685     ld a,#'-
      000A35 20 02            [ 2] 1686 	jra 9$ 
      000A37 A6 24            [ 1] 1687 8$: ld a,#'$ 
      000A39 5A               [ 2] 1688 9$: decw x
      000A3A F7               [ 1] 1689     ld (x),a
      000A3B 0C 02            [ 1] 1690 	inc (LEN,sp)
      000A3D                       1691 10$:
      000A3D 7B 02            [ 1] 1692 	ld a,(LEN,sp)
      000A3F                       1693 	_drop VSIZE
      000A3F 5B 04            [ 2]    1     addw sp,#VSIZE 
      000A41 81               [ 4] 1694 	ret
                                   1695 
                                   1696 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1697 ; divide uint24_t by uint8_t
                                   1698 ; used to convert uint24_t to string
                                   1699 ; input:
                                   1700 ;	acc24	dividend
                                   1701 ;   A 		divisor
                                   1702 ; output:
                                   1703 ;   acc24	quotient
                                   1704 ;   A		remainder
                                   1705 ;------------------------------------- 
                                   1706 ; offset  on sp of arguments and locals
                           000001  1707 	U8   = 1   ; divisor on stack
                           000001  1708 	VSIZE =1
      000A42                       1709 divu24_8:
      000A42 89               [ 2] 1710 	pushw x ; save x
      000A43 88               [ 1] 1711 	push a 
                                   1712 	; ld dividend UU:MM bytes in X
      000A44 C6 00 0B         [ 1] 1713 	ld a, acc24
      000A47 95               [ 1] 1714 	ld xh,a
      000A48 C6 00 0C         [ 1] 1715 	ld a,acc24+1
      000A4B 97               [ 1] 1716 	ld xl,a
      000A4C 7B 01            [ 1] 1717 	ld a,(U8,SP) ; divisor
      000A4E 62               [ 2] 1718 	div x,a ; UU:MM/U8
      000A4F 88               [ 1] 1719 	push a  ;save remainder
      000A50 9E               [ 1] 1720 	ld a,xh
      000A51 C7 00 0B         [ 1] 1721 	ld acc24,a
      000A54 9F               [ 1] 1722 	ld a,xl
      000A55 C7 00 0C         [ 1] 1723 	ld acc24+1,a
      000A58 84               [ 1] 1724 	pop a
      000A59 95               [ 1] 1725 	ld xh,a
      000A5A C6 00 0D         [ 1] 1726 	ld a,acc24+2
      000A5D 97               [ 1] 1727 	ld xl,a
      000A5E 7B 01            [ 1] 1728 	ld a,(U8,sp) ; divisor
      000A60 62               [ 2] 1729 	div x,a  ; R:LL/U8
      000A61 6B 01            [ 1] 1730 	ld (U8,sp),a ; save remainder
      000A63 9F               [ 1] 1731 	ld a,xl
      000A64 C7 00 0D         [ 1] 1732 	ld acc24+2,a
      000A67 84               [ 1] 1733 	pop a
      000A68 85               [ 2] 1734 	popw x
      000A69 81               [ 4] 1735 	ret
                                   1736 
                                   1737 ;--------------------------------------
                                   1738 ; unsigned multiply uint24_t by uint8_t
                                   1739 ; use to convert numerical string to uint24_t
                                   1740 ; input:
                                   1741 ;	acc24	uint24_t 
                                   1742 ;   A		uint8_t
                                   1743 ; output:
                                   1744 ;   acc24   A*acc24
                                   1745 ;-------------------------------------
                                   1746 ; local variables offset  on sp
                           000003  1747 	U8   = 3   ; A pushed on stack
                           000002  1748 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1749 	OVFH = 1  ; multiplication overflow high byte
                           000003  1750 	VSIZE = 3
      000A6A                       1751 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A6A 89               [ 2] 1752 	pushw x    ; save X
                                   1753 	; local variables
      000A6B 88               [ 1] 1754 	push a     ; U8
      000A6C 5F               [ 1] 1755 	clrw x     ; initialize overflow to 0
      000A6D 89               [ 2] 1756 	pushw x    ; multiplication overflow
                                   1757 ; multiply low byte.
      000A6E C6 00 0D         [ 1] 1758 	ld a,acc24+2
      000A71 97               [ 1] 1759 	ld xl,a
      000A72 7B 03            [ 1] 1760 	ld a,(U8,sp)
      000A74 42               [ 4] 1761 	mul x,a
      000A75 9F               [ 1] 1762 	ld a,xl
      000A76 C7 00 0D         [ 1] 1763 	ld acc24+2,a
      000A79 9E               [ 1] 1764 	ld a, xh
      000A7A 6B 02            [ 1] 1765 	ld (OVFL,sp),a
                                   1766 ; multipy middle byte
      000A7C C6 00 0C         [ 1] 1767 	ld a,acc24+1
      000A7F 97               [ 1] 1768 	ld xl,a
      000A80 7B 03            [ 1] 1769 	ld a, (U8,sp)
      000A82 42               [ 4] 1770 	mul x,a
                                   1771 ; add overflow to this partial product
      000A83 72 FB 01         [ 2] 1772 	addw x,(OVFH,sp)
      000A86 9F               [ 1] 1773 	ld a,xl
      000A87 C7 00 0C         [ 1] 1774 	ld acc24+1,a
      000A8A 4F               [ 1] 1775 	clr a
      000A8B A9 00            [ 1] 1776 	adc a,#0
      000A8D 6B 01            [ 1] 1777 	ld (OVFH,sp),a
      000A8F 9E               [ 1] 1778 	ld a,xh
      000A90 6B 02            [ 1] 1779 	ld (OVFL,sp),a
                                   1780 ; multiply most signficant byte	
      000A92 C6 00 0B         [ 1] 1781 	ld a, acc24
      000A95 97               [ 1] 1782 	ld xl, a
      000A96 7B 03            [ 1] 1783 	ld a, (U8,sp)
      000A98 42               [ 4] 1784 	mul x,a
      000A99 72 FB 01         [ 2] 1785 	addw x, (OVFH,sp)
      000A9C 9F               [ 1] 1786 	ld a, xl
      000A9D C7 00 0B         [ 1] 1787 	ld acc24,a
      000AA0 5B 03            [ 2] 1788     addw sp,#VSIZE
      000AA2 85               [ 2] 1789 	popw x
      000AA3 81               [ 4] 1790 	ret
                                   1791 
                                   1792 ;------------------------------------
                                   1793 ;  two's complement acc24
                                   1794 ;  input:
                                   1795 ;		acc24 variable
                                   1796 ;  output:
                                   1797 ;		acc24 variable
                                   1798 ;-------------------------------------
      000AA4                       1799 neg_acc24:
      000AA4 72 53 00 0D      [ 1] 1800 	cpl acc24+2
      000AA8 72 53 00 0C      [ 1] 1801 	cpl acc24+1
      000AAC 72 53 00 0B      [ 1] 1802 	cpl acc24
      000AB0 A6 01            [ 1] 1803 	ld a,#1
      000AB2 CB 00 0D         [ 1] 1804 	add a,acc24+2
      000AB5 C7 00 0D         [ 1] 1805 	ld acc24+2,a
      000AB8 4F               [ 1] 1806 	clr a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000AB9 C9 00 0C         [ 1] 1807 	adc a,acc24+1
      000ABC C7 00 0C         [ 1] 1808 	ld acc24+1,a 
      000ABF 4F               [ 1] 1809 	clr a 
      000AC0 C9 00 0B         [ 1] 1810 	adc a,acc24 
      000AC3 C7 00 0B         [ 1] 1811 	ld acc24,a 
      000AC6 81               [ 4] 1812 	ret
                                   1813 
                                   1814 
                                   1815 ;------------------------------------
                                   1816 ; read a line of text from terminal
                                   1817 ; input:
                                   1818 ;	none
                                   1819 ; local variable on stack:
                                   1820 ;	LL  line length
                                   1821 ;   RXCHAR last received character 
                                   1822 ; output:
                                   1823 ;   text in tib  buffer
                                   1824 ;   count  line length 
                                   1825 ;------------------------------------
                                   1826 	; local variables
                           000001  1827 	LL_HB=1
                           000001  1828 	RXCHAR = 1 ; last char received
                           000002  1829 	LL = 2  ; accepted line length
                           000002  1830 	VSIZE=2 
      000AC7                       1831 readln:
      000AC7 4B 00            [ 1] 1832 	push #0
      000AC9 4B 00            [ 1] 1833 	push #0  
      000ACB 90 AE 16 90      [ 2] 1834  	ldw y,#tib ; input buffer
      000ACF                       1835 readln_loop:
      000ACF CD 02 A9         [ 4] 1836 	call getc
      000AD2 6B 01            [ 1] 1837 	ld (RXCHAR,sp),a
      000AD4 A1 0D            [ 1] 1838 	cp a,#CR
      000AD6 26 03            [ 1] 1839 	jrne 1$
      000AD8 CC 0B 44         [ 2] 1840 	jp readln_quit
      000ADB A1 0A            [ 1] 1841 1$:	cp a,#LF 
      000ADD 27 65            [ 1] 1842 	jreq readln_quit
      000ADF A1 08            [ 1] 1843 	cp a,#BS
      000AE1 27 3D            [ 1] 1844 	jreq del_back
      000AE3 A1 04            [ 1] 1845 	cp a,#CTRL_D
      000AE5 27 2A            [ 1] 1846 	jreq del_ln
      000AE7 A1 12            [ 1] 1847 	cp a,#CTRL_R 
      000AE9 27 06            [ 1] 1848 	jreq reprint 
                                   1849 ;	cp a,#'[
                                   1850 ;	jreq ansi_seq
      000AEB                       1851 final_test:
      000AEB A1 20            [ 1] 1852 	cp a,#SPACE
      000AED 2A 40            [ 1] 1853 	jrpl accept_char
      000AEF 20 DE            [ 2] 1854 	jra readln_loop
      000AF1                       1855 ansi_seq:
                                   1856 ;	call getc
                                   1857 ;	cp a,#'C 
                                   1858 ;	jreq rigth_arrow
                                   1859 ;	cp a,#'D 
                                   1860 ;	jreq left_arrow 
                                   1861 ;	jra final_test
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000AF1                       1862 right_arrow:
                                   1863 ;	ld a,#BSP 
                                   1864 ;	call putc 
                                   1865 ;	jra realn_loop 
      000AF1                       1866 left_arrow:
                                   1867 ;	jra readln_loop
      000AF1                       1868 reprint: 
      000AF1 0D 02            [ 1] 1869 	tnz (LL,sp)
      000AF3 26 DA            [ 1] 1870 	jrne readln_loop
      000AF5 AE 16 90         [ 2] 1871 	ldw x,#tib 
      000AF8 CD 03 92         [ 4] 1872 	call strlen 
      000AFB 90 AE 16 90      [ 2] 1873 	ldw y,#tib 
      000AFF 9F               [ 1] 1874 	ld a,xl
      000B00 27 CD            [ 1] 1875 	jreq readln_loop
      000B02 6B 02            [ 1] 1876 	ld (LL,sp),a 
      000B04 AE 16 90         [ 2] 1877 	ldw x,#tib 
      000B07 CD 02 B3         [ 4] 1878 	call puts
      000B0A 0F 01            [ 1] 1879 	clr (LL_HB,sp)
      000B0C 72 F9 01         [ 2] 1880 	addw y,(LL_HB,sp)
      000B0F 20 BE            [ 2] 1881 	jra readln_loop 
      000B11                       1882 del_ln:
      000B11 7B 02            [ 1] 1883 	ld a,(LL,sp)
      000B13 CD 02 CD         [ 4] 1884 	call delete
      000B16 90 AE 16 90      [ 2] 1885 	ldw y,#tib
      000B1A 90 7F            [ 1] 1886 	clr (y)
      000B1C 0F 02            [ 1] 1887 	clr (LL,sp)
      000B1E 20 AF            [ 2] 1888 	jra readln_loop
      000B20                       1889 del_back:
      000B20 0D 02            [ 1] 1890     tnz (LL,sp)
      000B22 27 AB            [ 1] 1891     jreq readln_loop
      000B24 0A 02            [ 1] 1892     dec (LL,sp)
      000B26 90 5A            [ 2] 1893     decw y
      000B28 90 7F            [ 1] 1894     clr  (y)
      000B2A CD 02 BD         [ 4] 1895     call bksp 
      000B2D 20 A0            [ 2] 1896     jra readln_loop	
      000B2F                       1897 accept_char:
      000B2F A6 4F            [ 1] 1898 	ld a,#TIB_SIZE-1
      000B31 11 02            [ 1] 1899 	cp a, (LL,sp)
      000B33 27 9A            [ 1] 1900 	jreq readln_loop
      000B35 7B 01            [ 1] 1901 	ld a,(RXCHAR,sp)
      000B37 90 F7            [ 1] 1902 	ld (y),a
      000B39 0C 02            [ 1] 1903 	inc (LL,sp)
      000B3B 90 5C            [ 2] 1904 	incw y
      000B3D 90 7F            [ 1] 1905 	clr (y)
      000B3F CD 02 A0         [ 4] 1906 	call putc 
      000B42 20 8B            [ 2] 1907 	jra readln_loop
      000B44                       1908 readln_quit:
      000B44 90 7F            [ 1] 1909 	clr (y)
      000B46 7B 02            [ 1] 1910 	ld a,(LL,sp)
      000B48 C7 00 03         [ 1] 1911 	ld count,a 
      000B4B A6 0D            [ 1] 1912 	ld a,#CR
      000B4D CD 02 A0         [ 4] 1913 	call putc
      000B50                       1914 	_drop VSIZE 
      000B50 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B52 81               [ 4] 1915 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1916 
                                   1917 
                                   1918 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1919 ;; compiler routines        ;;
                                   1920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1921 ;------------------------------------
                                   1922 ; parse quoted string 
                                   1923 ; input:
                                   1924 ;   Y 	pointer to tib 
                                   1925 ;   X   pointer to output buffer 
                                   1926 ; output:
                                   1927 ;	buffer   parsed string
                                   1928 ;------------------------------------
                           000001  1929 	PREV = 1
                           000002  1930 	CURR =2
                           000002  1931 	VSIZE=2
      000B53                       1932 parse_quote: 
      000B53                       1933 	_vars VSIZE 
      000B53 52 02            [ 2]    1     sub sp,#VSIZE 
      000B55 4F               [ 1] 1934 	clr a
      000B56 6B 01            [ 1] 1935 1$:	ld (PREV,sp),a 
      000B58                       1936 2$:	
      000B58 91 D6 00         [ 4] 1937 	ld a,([in.w],y)
      000B5B 27 24            [ 1] 1938 	jreq 6$
      000B5D 72 5C 00 01      [ 1] 1939 	inc in 
      000B61 6B 02            [ 1] 1940 	ld (CURR,sp),a 
      000B63 A6 5C            [ 1] 1941 	ld a,#'\
      000B65 11 01            [ 1] 1942 	cp a, (PREV,sp)
      000B67 26 0A            [ 1] 1943 	jrne 3$
      000B69 0F 01            [ 1] 1944 	clr (PREV,sp)
      000B6B 7B 02            [ 1] 1945 	ld a,(CURR,sp)
      000B6D AD 1C            [ 4] 1946 	callr convert_escape
      000B6F F7               [ 1] 1947 	ld (x),a 
      000B70 5C               [ 2] 1948 	incw x 
      000B71 20 E5            [ 2] 1949 	jra 2$
      000B73                       1950 3$:
      000B73 7B 02            [ 1] 1951 	ld a,(CURR,sp)
      000B75 A1 5C            [ 1] 1952 	cp a,#'\'
      000B77 27 DD            [ 1] 1953 	jreq 1$
      000B79 A1 22            [ 1] 1954 	cp a,#'"
      000B7B 27 04            [ 1] 1955 	jreq 6$ 
      000B7D F7               [ 1] 1956 	ld (x),a 
      000B7E 5C               [ 2] 1957 	incw x 
      000B7F 20 D7            [ 2] 1958 	jra 2$
      000B81                       1959 6$:
      000B81 7F               [ 1] 1960 	clr (x)
      000B82 5C               [ 2] 1961 	incw x 
      000B83 90 93            [ 1] 1962 	ldw y,x 
      000B85 5F               [ 1] 1963 	clrw x 
      000B86 A6 02            [ 1] 1964 	ld a,#TK_QSTR  
      000B88                       1965 	_drop VSIZE
      000B88 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B8A 81               [ 4] 1966 	ret 
                                   1967 
                                   1968 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1969 ; called by parse_quote
                                   1970 ; subtitute escaped character 
                                   1971 ; by their ASCII value .
                                   1972 ; input:
                                   1973 ;   A  character following '\'
                                   1974 ; output:
                                   1975 ;   A  substitued char or same if not valid.
                                   1976 ;---------------------------------------
      000B8B                       1977 convert_escape:
      000B8B 89               [ 2] 1978 	pushw x 
      000B8C AE 0B A0         [ 2] 1979 	ldw x,#escaped 
      000B8F F1               [ 1] 1980 1$:	cp a,(x)
      000B90 27 06            [ 1] 1981 	jreq 2$
      000B92 7D               [ 1] 1982 	tnz (x)
      000B93 27 09            [ 1] 1983 	jreq 3$
      000B95 5C               [ 2] 1984 	incw x 
      000B96 20 F7            [ 2] 1985 	jra 1$
      000B98 1D 0B A0         [ 2] 1986 2$: subw x,#escaped 
      000B9B 9F               [ 1] 1987 	ld a,xl 
      000B9C AB 07            [ 1] 1988 	add a,#7
      000B9E 85               [ 2] 1989 3$:	popw x 
      000B9F 81               [ 4] 1990 	ret 
                                   1991 
      000BA0 61 62 74 6E 76 66 72  1992 escaped: .asciz "abtnvfr"
             00
                                   1993 
                                   1994 ;-------------------------
                                   1995 ; integer parser 
                                   1996 ; input:
                                   1997 ;   X 		point to output buffer  
                                   1998 ;   Y 		point to tib 
                                   1999 ;   A 	    first digit|'$' 
                                   2000 ; output:  
                                   2001 ;   X 		integer 
                                   2002 ;   A 		TK_INTGR
                                   2003 ;   acc24   24 bits integer 
                                   2004 ;-------------------------
                           000001  2005 	BASE=1
                           000002  2006 	TCHAR=2 
                           000003  2007 	XSAVE=3
                           000004  2008 	VSIZE=4 
      000BA8                       2009 parse_integer: ; { -- n }
      000BA8 89               [ 2] 2010 	pushw x 	
      000BA9 4B 00            [ 1] 2011 	push #0 ; TCHAR
      000BAB 4B 0A            [ 1] 2012 	push #10 ; BASE=10
      000BAD A1 24            [ 1] 2013 	cp a,#'$
      000BAF 26 04            [ 1] 2014 	jrne 2$ 
      000BB1                       2015     _drop #1
      000BB1 5B 01            [ 2]    1     addw sp,##1 
      000BB3 4B 10            [ 1] 2016 	push #16  ; BASE=16
      000BB5 F7               [ 1] 2017 2$:	ld (x),a 
      000BB6 5C               [ 2] 2018 	incw x 
      000BB7 91 D6 00         [ 4] 2019 	ld a,([in.w],y)
      000BBA 72 5C 00 01      [ 1] 2020 	inc in 
      000BBE CD 0E 3B         [ 4] 2021 	call to_upper 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000BC1 6B 02            [ 1] 2022 	ld (TCHAR,sp),a 
      000BC3 CD 05 7C         [ 4] 2023 	call is_digit 
      000BC6 25 ED            [ 1] 2024 	jrc 2$
      000BC8 A6 10            [ 1] 2025 	ld a,#16 
      000BCA 11 01            [ 1] 2026 	cp a,(BASE,sp)
      000BCC 26 0A            [ 1] 2027 	jrne 3$ 
      000BCE 7B 02            [ 1] 2028 	ld a,(TCHAR,sp)
      000BD0 A1 41            [ 1] 2029 	cp a,#'A 
      000BD2 2B 04            [ 1] 2030 	jrmi 3$ 
      000BD4 A1 47            [ 1] 2031 	cp a,#'G 
      000BD6 2B DD            [ 1] 2032 	jrmi 2$ 
      000BD8 72 5A 00 01      [ 1] 2033 3$: dec in 	
      000BDC 7F               [ 1] 2034     clr (x)
      000BDD 1E 03            [ 2] 2035 	ldw x,(XSAVE,sp)
      000BDF CD 0E 47         [ 4] 2036 	call atoi24
      000BE2 90 93            [ 1] 2037 	ldw y,x 
      000BE4 CE 00 0C         [ 2] 2038 	ldw x,acc16 
      000BE7 A6 84            [ 1] 2039 	ld a,#TK_INTGR
      000BE9 90 FF            [ 2] 2040 	ldw (y),x 
      000BEB 72 A9 00 02      [ 2] 2041 	addw y,#2
      000BEF                       2042 	_drop VSIZE  
      000BEF 5B 04            [ 2]    1     addw sp,#VSIZE 
      000BF1 81               [ 4] 2043 	ret 	
                                   2044 
                                   2045 ;-------------------------
                                   2046 ; binary integer parser
                                   2047 ; build integer in acc24  
                                   2048 ; input:
                                   2049 ;   X 		point to output buffer  
                                   2050 ;   Y 		point to tib 
                                   2051 ;   A 	    '&' 
                                   2052 ; output:  
                                   2053 ;   buffer  TK_INTGR integer  
                                   2054 ;   X 		int16 
                                   2055 ;   A 		TK_INTGR
                                   2056 ;   acc24    int24 
                                   2057 ;-------------------------
                           000001  2058 	BINARY=1 ; 24 bits integer 
                           000003  2059 	VSIZE=3
      000BF2                       2060 parse_binary: ; { -- n }
      000BF2 4B 00            [ 1] 2061 	push #0
      000BF4 4B 00            [ 1] 2062 	push #0
      000BF6 4B 00            [ 1] 2063 	push #0
      000BF8                       2064 2$:	
      000BF8 91 D6 00         [ 4] 2065 	ld a,([in.w],y)
      000BFB 72 5C 00 01      [ 1] 2066 	inc in 
      000BFF A1 30            [ 1] 2067 	cp a,#'0 
      000C01 27 06            [ 1] 2068 	jreq 3$
      000C03 A1 31            [ 1] 2069 	cp a,#'1 
      000C05 27 02            [ 1] 2070 	jreq 3$ 
      000C07 20 0B            [ 2] 2071 	jra bin_exit 
      000C09 A0 30            [ 1] 2072 3$: sub a,#'0 
      000C0B 46               [ 1] 2073 	rrc a
      000C0C 09 03            [ 1] 2074 	rlc (BINARY+2,sp) 
      000C0E 09 02            [ 1] 2075 	rlc (BINARY+1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C10 09 01            [ 1] 2076 	rlc (BINARY,sp) 
      000C12 20 E4            [ 2] 2077 	jra 2$  
      000C14                       2078 bin_exit:
      000C14 72 5A 00 01      [ 1] 2079 	dec in 
      000C18 90 93            [ 1] 2080 	ldw y,x
      000C1A 7B 01            [ 1] 2081 	ld a,(BINARY,sp)
      000C1C C7 00 0B         [ 1] 2082 	ld acc24,a 
      000C1F 1E 02            [ 2] 2083 	ldw x,(BINARY+1,sp)
      000C21 CF 00 0C         [ 2] 2084 	ldw acc16,x
      000C24 90 FF            [ 2] 2085 	ldw (y),x 
      000C26 72 A9 00 02      [ 2] 2086 	addw y,#2  
      000C2A A6 84            [ 1] 2087 	ld a,#TK_INTGR 	
      000C2C                       2088 	_drop VSIZE 
      000C2C 5B 03            [ 2]    1     addw sp,#VSIZE 
      000C2E 81               [ 4] 2089 	ret
                                   2090 
                                   2091 ;---------------------------
                                   2092 ;  token begin with a letter,
                                   2093 ;  is keyword or variable. 	
                                   2094 ; input:
                                   2095 ;   X 		point to pad 
                                   2096 ;   Y 		point to text
                                   2097 ;   A 	    first letter  
                                   2098 ; output:
                                   2099 ;   X		exec_addr|var_addr 
                                   2100 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                   2101 ;   pad 	keyword|var_name  
                                   2102 ;--------------------------  
                           000001  2103 	XFIRST=1
                           000002  2104 	VSIZE=2
      000C2F                       2105 parse_keyword: 
      000C2F 89               [ 2] 2106 	pushw x 
      000C30                       2107 kw_loop:	
      000C30 CD 0E 3B         [ 4] 2108 	call to_upper 
      000C33 F7               [ 1] 2109 	ld (x),a 
      000C34 5C               [ 2] 2110 	incw x 
      000C35 91 D6 00         [ 4] 2111 	ld a,([in.w],y)
      000C38 72 5C 00 01      [ 1] 2112 	inc in 
      000C3C CD 05 6B         [ 4] 2113 	call is_alpha 
      000C3F 25 EF            [ 1] 2114 	jrc kw_loop
      000C41 72 5A 00 01      [ 1] 2115 	dec in   
      000C45 7F               [ 1] 2116 1$: clr (x)
      000C46 1E 01            [ 2] 2117 	ldw x,(XFIRST,sp) 
      000C48 E6 01            [ 1] 2118 	ld a,(1,x)
      000C4A 26 13            [ 1] 2119 	jrne 2$
                                   2120 ; one letter variable name 
      000C4C F6               [ 1] 2121 	ld a,(x) 
      000C4D A0 41            [ 1] 2122 	sub a,#'A 
      000C4F 48               [ 1] 2123 	sll a 
      000C50 88               [ 1] 2124 	push a 
      000C51 4B 00            [ 1] 2125 	push #0
      000C53 AE 00 26         [ 2] 2126 	ldw x,#vars 
      000C56 72 FB 01         [ 2] 2127 	addw x,(1,sp) ; X=var address 
      000C59                       2128 	_drop 2 
      000C59 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000C5B A6 85            [ 1] 2129 	ld a,#TK_VAR 
      000C5D 20 0E            [ 2] 2130 	jra 4$ 
      000C5F                       2131 2$: ; check for keyword, otherwise syntax error.
      000C5F                       2132 	_ldx_dict kword_dict ; dictionary entry point
      000C5F AE 26 B9         [ 2]    1     ldw x,#kword_dict+2
      000C62 16 01            [ 2] 2133 	ldw y,(XFIRST,sp) ; name to search for
      000C64 CD 10 20         [ 4] 2134 	call search_dict
      000C67 4D               [ 1] 2135 	tnz a
      000C68 26 03            [ 1] 2136 	jrne 4$ 
      000C6A CC 08 75         [ 2] 2137 	jp syntax_error
      000C6D                       2138 4$:	
      000C6D 16 01            [ 2] 2139 	ldw y,(XFIRST,sp)
      000C6F 90 F7            [ 1] 2140 	ld (y),a 
      000C71 90 5C            [ 2] 2141 	incw y 
      000C73 90 FF            [ 2] 2142 	ldw (y),x
      000C75 72 A9 00 02      [ 2] 2143 	addw y,#2  
      000C79                       2144 	_drop VSIZE 
      000C79 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C7B 81               [ 4] 2145 	ret  	
                                   2146 
                                   2147 
                                   2148 ;------------------------------------
                                   2149 ; scan text for next token
                                   2150 ; input: 
                                   2151 ;	X 		pointer to buffer where 
                                   2152 ;	        token id and value are copied 
                                   2153 ; use:
                                   2154 ;	Y   pointer to text in tib 
                                   2155 ; output:
                                   2156 ;   A       token attribute 
                                   2157 ;   X 		token value
                                   2158 ;   Y       updated position in output buffer   
                                   2159 ;------------------------------------
                                   2160 	; use to check special character 
                                   2161 	.macro _case c t  
                                   2162 	ld a,#c 
                                   2163 	cp a,(TCHAR,sp) 
                                   2164 	jrne t
                                   2165 	.endm 
                                   2166 
                           000001  2167 	TCHAR=1
                           000002  2168 	ATTRIB=2
                           000002  2169 	VSIZE=2
      000C7C                       2170 get_token: 
      000C7C                       2171 	_vars VSIZE
      000C7C 52 02            [ 2]    1     sub sp,#VSIZE 
                                   2172 ;	ld a,in 
                                   2173 ;	sub a,count
                                   2174 ;   jrmi 0$
                                   2175 ;	clr a 
                                   2176 ;	ret 
      000C7E                       2177 0$: 
      000C7E 90 AE 16 90      [ 2] 2178 	ldw y,#tib    	
      000C82 A6 20            [ 1] 2179 	ld a,#SPACE
      000C84 CD 0E B1         [ 4] 2180 	call skip
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000C87 55 00 01 00 02   [ 1] 2181 	mov in.saved,in 
      000C8C 91 D6 00         [ 4] 2182 	ld a,([in.w],y)
      000C8F 26 05            [ 1] 2183 	jrne 1$
      000C91 90 93            [ 1] 2184 	ldw y,x 
      000C93 CC 0E 38         [ 2] 2185 	jp token_exit ; end of line 
      000C96 72 5C 00 01      [ 1] 2186 1$:	inc in 
      000C9A CD 0E 3B         [ 4] 2187 	call to_upper 
      000C9D 6B 01            [ 1] 2188 	ld (TCHAR,sp),a 
                                   2189 ; check for quoted string
      000C9F                       2190 str_tst:  	
      000C9F                       2191 	_case '"' nbr_tst
      000C9F A6 22            [ 1]    1 	ld a,#'"' 
      000CA1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CA3 26 0A            [ 1]    3 	jrne nbr_tst
      000CA5 A6 02            [ 1] 2192 	ld a,#TK_QSTR
      000CA7 F7               [ 1] 2193 	ld (x),a 
      000CA8 5C               [ 2] 2194 	incw x 
      000CA9 CD 0B 53         [ 4] 2195 	call parse_quote
      000CAC CC 0E 38         [ 2] 2196 	jp token_exit
      000CAF                       2197 nbr_tst:
                                   2198 ; check for hexadecimal number 
      000CAF A6 24            [ 1] 2199 	ld a,#'$'
      000CB1 11 01            [ 1] 2200 	cp a,(TCHAR,sp) 
      000CB3 27 17            [ 1] 2201 	jreq 1$
                                   2202 ;check for binary number 
      000CB5 A6 26            [ 1] 2203 	ld a,#'&
      000CB7 11 01            [ 1] 2204 	cp a,(TCHAR,sp)
      000CB9 26 0A            [ 1] 2205 	jrne 0$
      000CBB A6 84            [ 1] 2206 	ld a,#TK_INTGR
      000CBD F7               [ 1] 2207 	ld (x),a 
      000CBE 5C               [ 2] 2208 	incw x 
      000CBF CD 0B F2         [ 4] 2209 	call parse_binary ; expect binary integer 
      000CC2 CC 0E 38         [ 2] 2210 	jp token_exit 
                                   2211 ; check for decimal number 	
      000CC5 7B 01            [ 1] 2212 0$:	ld a,(TCHAR,sp)
      000CC7 CD 05 7C         [ 4] 2213 	call is_digit
      000CCA 24 0C            [ 1] 2214 	jrnc 3$
      000CCC A6 84            [ 1] 2215 1$:	ld a,#TK_INTGR 
      000CCE F7               [ 1] 2216 	ld (x),a 
      000CCF 5C               [ 2] 2217 	incw x 
      000CD0 7B 01            [ 1] 2218 	ld a,(TCHAR,sp)
      000CD2 CD 0B A8         [ 4] 2219 	call parse_integer 
      000CD5 CC 0E 38         [ 2] 2220 	jp token_exit 
      000CD8                       2221 3$: 
      000CD8                       2222 	_case '(' bkslsh_tst 
      000CD8 A6 28            [ 1]    1 	ld a,#'(' 
      000CDA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CDC 26 05            [ 1]    3 	jrne bkslsh_tst
      000CDE A6 07            [ 1] 2223 	ld a,#TK_LPAREN
      000CE0 CC 0E 34         [ 2] 2224 	jp token_char   	
      000CE3                       2225 bkslsh_tst: ; character token 
      000CE3                       2226 	_case '\',rparnt_tst
      000CE3 A6 5C            [ 1]    1 	ld a,#'\' 
      000CE5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CE7 26 16            [ 1]    3 	jrne rparnt_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000CE9 A6 03            [ 1] 2227 	ld a,#TK_CHAR 
      000CEB F7               [ 1] 2228 	ld (x),a 
      000CEC 5C               [ 2] 2229 	incw x 
      000CED 91 D6 00         [ 4] 2230 	ld a,([in.w],y)
      000CF0 F7               [ 1] 2231 	ld (x),a 
      000CF1 5C               [ 2] 2232 	incw x
      000CF2 90 93            [ 1] 2233 	ldw y,x 	 
      000CF4 72 5C 00 01      [ 1] 2234 	inc in  
      000CF8 5F               [ 1] 2235 	clrw x 
      000CF9 97               [ 1] 2236 	ld xl,a 
      000CFA A6 03            [ 1] 2237 	ld a,#TK_CHAR 
      000CFC CC 0E 38         [ 2] 2238 	jp token_exit 
      000CFF                       2239 rparnt_tst:		
      000CFF                       2240 	_case ')' colon_tst 
      000CFF A6 29            [ 1]    1 	ld a,#')' 
      000D01 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D03 26 05            [ 1]    3 	jrne colon_tst
      000D05 A6 08            [ 1] 2241 	ld a,#TK_RPAREN 
      000D07 CC 0E 34         [ 2] 2242 	jp token_char
      000D0A                       2243 colon_tst:
      000D0A                       2244 	_case ':' comma_tst 
      000D0A A6 3A            [ 1]    1 	ld a,#':' 
      000D0C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D0E 26 05            [ 1]    3 	jrne comma_tst
      000D10 A6 01            [ 1] 2245 	ld a,#TK_COLON 
      000D12 CC 0E 34         [ 2] 2246 	jp token_char  
      000D15                       2247 comma_tst:
      000D15                       2248 	_case COMMA sharp_tst 
      000D15 A6 2C            [ 1]    1 	ld a,#COMMA 
      000D17 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D19 26 05            [ 1]    3 	jrne sharp_tst
      000D1B A6 09            [ 1] 2249 	ld a,#TK_COMMA
      000D1D CC 0E 34         [ 2] 2250 	jp token_char
      000D20                       2251 sharp_tst:
      000D20                       2252 	_case SHARP dash_tst 
      000D20 A6 23            [ 1]    1 	ld a,#SHARP 
      000D22 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D24 26 05            [ 1]    3 	jrne dash_tst
      000D26 A6 0A            [ 1] 2253 	ld a,#TK_SHARP
      000D28 CC 0E 34         [ 2] 2254 	jp token_char  	 	 
      000D2B                       2255 dash_tst: 	
      000D2B                       2256 	_case '-' at_tst 
      000D2B A6 2D            [ 1]    1 	ld a,#'-' 
      000D2D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D2F 26 05            [ 1]    3 	jrne at_tst
      000D31 A6 11            [ 1] 2257 	ld a,#TK_MINUS  
      000D33 CC 0E 34         [ 2] 2258 	jp token_char 
      000D36                       2259 at_tst:
      000D36                       2260 	_case '@' qmark_tst 
      000D36 A6 40            [ 1]    1 	ld a,#'@' 
      000D38 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D3A 26 05            [ 1]    3 	jrne qmark_tst
      000D3C A6 06            [ 1] 2261 	ld a,#TK_ARRAY 
      000D3E CC 0E 34         [ 2] 2262 	jp token_char
      000D41                       2263 qmark_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D41                       2264 	_case '?' tick_tst 
      000D41 A6 3F            [ 1]    1 	ld a,#'?' 
      000D43 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D45 26 12            [ 1]    3 	jrne tick_tst
      000D47 A6 80            [ 1] 2265 	ld a,#TK_CMD  
      000D49 F7               [ 1] 2266 	ld (x),a 
      000D4A 5C               [ 2] 2267 	incw x 
      000D4B 90 93            [ 1] 2268 	ldw y,x 
      000D4D AE 14 C1         [ 2] 2269 	ldw x,#print 
      000D50 90 FF            [ 2] 2270 	ldw (y),x 
      000D52 72 A9 00 02      [ 2] 2271 	addw y,#2
      000D56 CC 0E 38         [ 2] 2272 	jp token_exit
      000D59                       2273 tick_tst: ; comment 
      000D59                       2274 	_case TICK plus_tst 
      000D59 A6 27            [ 1]    1 	ld a,#TICK 
      000D5B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D5D 26 35            [ 1]    3 	jrne plus_tst
      000D5F A6 80            [ 1] 2275 	ld a,#TK_CMD
      000D61 F7               [ 1] 2276 	ld (x),a 
      000D62 5C               [ 2] 2277 	incw x
      000D63 90 AE 15 BE      [ 2] 2278 	ldw y,#remark
      000D67 FF               [ 2] 2279 	ldw (x),y 
      000D68 1C 00 02         [ 2] 2280 	addw x,#2  
      000D6B                       2281 copy_comment:
      000D6B 90 AE 16 90      [ 2] 2282 	ldw y,#tib 
      000D6F 72 B9 00 00      [ 2] 2283 	addw y,in.w
      000D73 90 89            [ 2] 2284 	pushw y
      000D75 CD 03 B0         [ 4] 2285 	call strcpy
      000D78 72 F2 01         [ 2] 2286     subw y,(1,sp)
      000D7B 90 9F            [ 1] 2287 	ld a,yl 
      000D7D CB 00 01         [ 1] 2288 	add a,in
      000D80 C7 00 01         [ 1] 2289 	ld in,a 
      000D83 1F 01            [ 2] 2290 	ldw (1,sp),x
      000D85 72 F9 01         [ 2] 2291 	addw y,(1,sp)
      000D88 90 5C            [ 2] 2292 	incw y 
      000D8A                       2293 	_drop 2 
      000D8A 5B 02            [ 2]    1     addw sp,#2 
      000D8C AE 15 BE         [ 2] 2294 	ldw x,#remark 
      000D8F A6 80            [ 1] 2295 	ld a,#TK_CMD 
      000D91 CC 0E 38         [ 2] 2296 	jp token_exit 
      000D94                       2297 plus_tst:
      000D94                       2298 	_case '+' star_tst 
      000D94 A6 2B            [ 1]    1 	ld a,#'+' 
      000D96 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D98 26 05            [ 1]    3 	jrne star_tst
      000D9A A6 10            [ 1] 2299 	ld a,#TK_PLUS  
      000D9C CC 0E 34         [ 2] 2300 	jp token_char 
      000D9F                       2301 star_tst:
      000D9F                       2302 	_case '*' slash_tst 
      000D9F A6 2A            [ 1]    1 	ld a,#'*' 
      000DA1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DA3 26 05            [ 1]    3 	jrne slash_tst
      000DA5 A6 20            [ 1] 2303 	ld a,#TK_MULT 
      000DA7 CC 0E 34         [ 2] 2304 	jp token_char 
      000DAA                       2305 slash_tst: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DAA                       2306 	_case '/' prcnt_tst 
      000DAA A6 2F            [ 1]    1 	ld a,#'/' 
      000DAC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DAE 26 05            [ 1]    3 	jrne prcnt_tst
      000DB0 A6 21            [ 1] 2307 	ld a,#TK_DIV 
      000DB2 CC 0E 34         [ 2] 2308 	jp token_char 
      000DB5                       2309 prcnt_tst:
      000DB5                       2310 	_case '%' eql_tst 
      000DB5 A6 25            [ 1]    1 	ld a,#'%' 
      000DB7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DB9 26 05            [ 1]    3 	jrne eql_tst
      000DBB A6 22            [ 1] 2311 	ld a,#TK_MOD
      000DBD CC 0E 34         [ 2] 2312 	jp token_char  
                                   2313 ; 1 or 2 character tokens 	
      000DC0                       2314 eql_tst:
      000DC0                       2315 	_case '=' gt_tst 		
      000DC0 A6 3D            [ 1]    1 	ld a,#'=' 
      000DC2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DC4 26 05            [ 1]    3 	jrne gt_tst
      000DC6 A6 32            [ 1] 2316 	ld a,#TK_EQUAL
      000DC8 CC 0E 34         [ 2] 2317 	jp token_char 
      000DCB                       2318 gt_tst:
      000DCB                       2319 	_case '>' lt_tst 
      000DCB A6 3E            [ 1]    1 	ld a,#'>' 
      000DCD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DCF 26 23            [ 1]    3 	jrne lt_tst
      000DD1 A6 31            [ 1] 2320 	ld a,#TK_GT 
      000DD3 6B 02            [ 1] 2321 	ld (ATTRIB,sp),a 
      000DD5 72 5C 00 01      [ 1] 2322 	inc in 
      000DD9 91 D6 00         [ 4] 2323 	ld a,([in.w],y)
      000DDC A1 3D            [ 1] 2324 	cp a,#'=
      000DDE 26 04            [ 1] 2325 	jrne 1$
      000DE0 A6 33            [ 1] 2326 	ld a,#TK_GE 
      000DE2 20 50            [ 2] 2327 	jra token_char  
      000DE4 A1 3C            [ 1] 2328 1$: cp a,#'<
      000DE6 26 04            [ 1] 2329 	jrne 2$
      000DE8 A6 35            [ 1] 2330 	ld a,#TK_NE 
      000DEA 20 48            [ 2] 2331 	jra token_char 
      000DEC 72 5A 00 01      [ 1] 2332 2$: dec in
      000DF0 7B 02            [ 1] 2333 	ld a,(ATTRIB,sp)
      000DF2 20 40            [ 2] 2334 	jra token_char 	 
      000DF4                       2335 lt_tst:
      000DF4                       2336 	_case '<' other
      000DF4 A6 3C            [ 1]    1 	ld a,#'<' 
      000DF6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DF8 26 23            [ 1]    3 	jrne other
      000DFA A6 34            [ 1] 2337 	ld a,#TK_LT 
      000DFC 6B 02            [ 1] 2338 	ld (ATTRIB,sp),a 
      000DFE 72 5C 00 01      [ 1] 2339 	inc in 
      000E02 91 D6 00         [ 4] 2340 	ld a,([in.w],y)
      000E05 A1 3D            [ 1] 2341 	cp a,#'=
      000E07 26 04            [ 1] 2342 	jrne 1$
      000E09 A6 36            [ 1] 2343 	ld a,#TK_LE 
      000E0B 20 27            [ 2] 2344 	jra token_char 
      000E0D A1 3E            [ 1] 2345 1$: cp a,#'>
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E0F 26 04            [ 1] 2346 	jrne 2$
      000E11 A6 35            [ 1] 2347 	ld a,#TK_NE 
      000E13 20 1F            [ 2] 2348 	jra token_char 
      000E15 72 5A 00 01      [ 1] 2349 2$: dec in 
      000E19 7B 02            [ 1] 2350 	ld a,(ATTRIB,sp)
      000E1B 20 17            [ 2] 2351 	jra token_char 	
      000E1D                       2352 other: ; not a special character 	 
      000E1D 7B 01            [ 1] 2353 	ld a,(TCHAR,sp)
      000E1F CD 05 6B         [ 4] 2354 	call is_alpha 
      000E22 25 03            [ 1] 2355 	jrc 30$ 
      000E24 CC 08 75         [ 2] 2356 	jp syntax_error 
      000E27                       2357 30$: 
      000E27 CD 0C 2F         [ 4] 2358 	call parse_keyword
      000E2A A3 15 BE         [ 2] 2359 	cpw x,#remark 
      000E2D 26 09            [ 1] 2360 	jrne token_exit 
      000E2F 90 93            [ 1] 2361 	ldw y,x 
      000E31 CC 0D 6B         [ 2] 2362 	jp copy_comment 
      000E34                       2363 token_char:
      000E34 F7               [ 1] 2364 	ld (x),a 
      000E35 5C               [ 2] 2365 	incw x
      000E36 90 93            [ 1] 2366 	ldw y,x 
      000E38                       2367 token_exit:
      000E38                       2368 	_drop VSIZE 
      000E38 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E3A 81               [ 4] 2369 	ret
                                   2370 
                                   2371 
                                   2372 ;------------------------------------
                                   2373 ; convert alpha to uppercase
                                   2374 ; input:
                                   2375 ;    a  character to convert
                                   2376 ; output:
                                   2377 ;    a  uppercase character
                                   2378 ;------------------------------------
      000E3B                       2379 to_upper::
      000E3B A1 61            [ 1] 2380 	cp a,#'a
      000E3D 2A 01            [ 1] 2381 	jrpl 1$
      000E3F 81               [ 4] 2382 0$:	ret
      000E40 A1 7A            [ 1] 2383 1$: cp a,#'z	
      000E42 22 FB            [ 1] 2384 	jrugt 0$
      000E44 A0 20            [ 1] 2385 	sub a,#32
      000E46 81               [ 4] 2386 	ret
                                   2387 	
                                   2388 ;------------------------------------
                                   2389 ; convert pad content in integer
                                   2390 ; input:
                                   2391 ;    x		.asciz to convert
                                   2392 ; output:
                                   2393 ;    acc24      int24_t
                                   2394 ;------------------------------------
                                   2395 	; local variables
                           000001  2396 	SIGN=1 ; 1 byte, 
                           000002  2397 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2398 	TEMP=3 ; 1 byte, temporary storage
                           000003  2399 	VSIZE=3 ; 3 bytes reserved for local storage
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E47                       2400 atoi24:
      000E47 89               [ 2] 2401 	pushw x 
      000E48                       2402 	_vars VSIZE
      000E48 52 03            [ 2]    1     sub sp,#VSIZE 
                                   2403 	; acc24=0 
      000E4A 72 5F 00 0B      [ 1] 2404 	clr acc24    
      000E4E 72 5F 00 0C      [ 1] 2405 	clr acc16
      000E52 72 5F 00 0D      [ 1] 2406 	clr acc8 
      000E56 0F 01            [ 1] 2407 	clr (SIGN,sp)
      000E58 A6 0A            [ 1] 2408 	ld a,#10
      000E5A 6B 02            [ 1] 2409 	ld (BASE,sp),a ; default base decimal
      000E5C F6               [ 1] 2410 	ld a,(x)
      000E5D 27 47            [ 1] 2411 	jreq 9$  ; completed if 0
      000E5F A1 2D            [ 1] 2412 	cp a,#'-
      000E61 26 04            [ 1] 2413 	jrne 1$
      000E63 03 01            [ 1] 2414 	cpl (SIGN,sp)
      000E65 20 08            [ 2] 2415 	jra 2$
      000E67 A1 24            [ 1] 2416 1$: cp a,#'$
      000E69 26 06            [ 1] 2417 	jrne 3$
      000E6B A6 10            [ 1] 2418 	ld a,#16
      000E6D 6B 02            [ 1] 2419 	ld (BASE,sp),a
      000E6F 5C               [ 2] 2420 2$:	incw x
      000E70 F6               [ 1] 2421 	ld a,(x)
      000E71                       2422 3$:	
      000E71 A1 61            [ 1] 2423 	cp a,#'a
      000E73 2B 02            [ 1] 2424 	jrmi 4$
      000E75 A0 20            [ 1] 2425 	sub a,#32
      000E77 A1 30            [ 1] 2426 4$:	cp a,#'0
      000E79 2B 2B            [ 1] 2427 	jrmi 9$
      000E7B A0 30            [ 1] 2428 	sub a,#'0
      000E7D A1 0A            [ 1] 2429 	cp a,#10
      000E7F 2B 06            [ 1] 2430 	jrmi 5$
      000E81 A0 07            [ 1] 2431 	sub a,#7
      000E83 11 02            [ 1] 2432 	cp a,(BASE,sp)
      000E85 2A 1F            [ 1] 2433 	jrpl 9$
      000E87 6B 03            [ 1] 2434 5$:	ld (TEMP,sp),a
      000E89 7B 02            [ 1] 2435 	ld a,(BASE,sp)
      000E8B CD 0A 6A         [ 4] 2436 	call mulu24_8
      000E8E 7B 03            [ 1] 2437 	ld a,(TEMP,sp)
      000E90 CB 00 0D         [ 1] 2438 	add a,acc24+2
      000E93 C7 00 0D         [ 1] 2439 	ld acc24+2,a
      000E96 4F               [ 1] 2440 	clr a
      000E97 C9 00 0C         [ 1] 2441 	adc a,acc24+1
      000E9A C7 00 0C         [ 1] 2442 	ld acc24+1,a
      000E9D 4F               [ 1] 2443 	clr a
      000E9E C9 00 0B         [ 1] 2444 	adc a,acc24
      000EA1 C7 00 0B         [ 1] 2445 	ld acc24,a
      000EA4 20 C9            [ 2] 2446 	jra 2$
      000EA6 0D 01            [ 1] 2447 9$:	tnz (SIGN,sp)
      000EA8 27 03            [ 1] 2448     jreq atoi_exit
      000EAA CD 0A A4         [ 4] 2449     call neg_acc24
      000EAD                       2450 atoi_exit: 
      000EAD                       2451 	_drop VSIZE
      000EAD 5B 03            [ 2]    1     addw sp,#VSIZE 
      000EAF 85               [ 2] 2452 	popw x ; restore x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000EB0 81               [ 4] 2453 	ret
                                   2454 
                                   2455 
                                   2456 ;------------------------------------
                                   2457 ; skip character c in text starting from 'in'
                                   2458 ; input:
                                   2459 ;	 y 		point to text buffer
                                   2460 ;    a 		character to skip
                                   2461 ; output:  
                                   2462 ;	'in' ajusted to new position
                                   2463 ;------------------------------------
                           000001  2464 	C = 1 ; local var
      000EB1                       2465 skip:
      000EB1 88               [ 1] 2466 	push a
      000EB2 91 D6 00         [ 4] 2467 1$:	ld a,([in.w],y)
      000EB5 27 0A            [ 1] 2468 	jreq 2$
      000EB7 11 01            [ 1] 2469 	cp a,(C,sp)
      000EB9 26 06            [ 1] 2470 	jrne 2$
      000EBB 72 5C 00 01      [ 1] 2471 	inc in
      000EBF 20 F1            [ 2] 2472 	jra 1$
      000EC1                       2473 2$: _drop 1 
      000EC1 5B 01            [ 2]    1     addw sp,#1 
      000EC3 81               [ 4] 2474 	ret
                                   2475 	
                                   2476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2477 ;;   TINY BASIC  operators,
                                   2478 ;;   commands and functions 
                                   2479 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2480 
                                   2481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2482 ;;  Arithmetic operators
                                   2483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2484 
                                   2485 ;debug support
                           000000  2486 DEBUG_PRT=0
                           000000  2487 .if DEBUG_PRT 
                                   2488 printxy:
                                   2489 	ld a,base 
                                   2490 	push a 
                                   2491 	pushw x 
                                   2492 	pushw y
                                   2493 	mov base,#16 
                                   2494 	call print_int 
                                   2495 	ldw x,(1,sp)
                                   2496 	call print_int 
                                   2497 	ld a,#CR 
                                   2498 	call putc 
                                   2499 	popw y 
                                   2500 	popw x 
                                   2501 	pop a 
                                   2502 	ld base,a 
                                   2503 	ret 
                                   2504 .endif 
                                   2505 
                                   2506 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2507 ;--------------------------------------
                                   2508 ;  multiply 2 uint16_t return uint32_t
                                   2509 ;  input:
                                   2510 ;     x       uint16_t 
                                   2511 ;     y       uint16_t 
                                   2512 ;  output:
                                   2513 ;     x       product bits 15..0
                                   2514 ;     y       product bits 31..16 
                                   2515 ;---------------------------------------
                           000001  2516 		U1=1  ; uint16_t 
                           000003  2517 		DBL=3 ; uint32_t
                           000006  2518 		VSIZE=6
      000EC4                       2519 umstar:
      000EC4                       2520 	_vars VSIZE 
      000EC4 52 06            [ 2]    1     sub sp,#VSIZE 
      000EC6 1F 01            [ 2] 2521 	ldw (U1,sp),x 
                                   2522 ;initialize bits 31..16 of 
                                   2523 ;product to zero 
      000EC8 0F 03            [ 1] 2524 	clr (DBL,sp)
      000ECA 0F 04            [ 1] 2525 	clr (DBL+1,sp)
                                   2526 ; produc U1L*U2L 
      000ECC 90 9F            [ 1] 2527 	ld a,yl 
      000ECE 42               [ 4] 2528 	mul x,a 
      000ECF 1F 05            [ 2] 2529 	ldw (DBL+2,sp),x
                                   2530 ; product U1H*U2L 
      000ED1 7B 01            [ 1] 2531 	ld a,(U1,sp) ; xh 
      000ED3 93               [ 1] 2532 	ldw x,y
      000ED4 42               [ 4] 2533 	mul x,a 
      000ED5 4F               [ 1] 2534 	clr a 
      000ED6 72 FB 04         [ 2] 2535 	addw x,(DBL+1,sp) 
      000ED9 4F               [ 1] 2536 	clr a 
      000EDA 19 03            [ 1] 2537 	adc a,(DBL,sp) 
      000EDC 6B 03            [ 1] 2538 	ld (DBL,sp),a ; bits 23..17 
      000EDE 1F 04            [ 2] 2539 	ldw (DBL+1,sp),x ; bits 15..0 
                                   2540 ; product U1L*U2H
      000EE0 90 5E            [ 1] 2541 	swapw y 
      000EE2 93               [ 1] 2542 	ldw x,y
      000EE3 7B 02            [ 1] 2543 	ld a,(U1+1,sp)
      000EE5 42               [ 4] 2544 	mul x,a
      000EE6 72 FB 04         [ 2] 2545 	addw x,(DBL+1,sp)
      000EE9 4F               [ 1] 2546 	clr a 
      000EEA 19 03            [ 1] 2547 	adc a,(DBL,sp)
      000EEC 6B 03            [ 1] 2548 	ld (DBL,sp),a 
      000EEE 1F 04            [ 2] 2549 	ldw (DBL+1,sp),x 
                                   2550 ; product U1H*U2H 	
      000EF0 7B 01            [ 1] 2551 	ld a,(U1,sp)
      000EF2 93               [ 1] 2552 	ldw x,y  
      000EF3 42               [ 4] 2553 	mul x,a 
      000EF4 72 FB 03         [ 2] 2554 	addw x,(DBL,sp)
      000EF7 90 93            [ 1] 2555 	ldw y,x 
      000EF9 1E 05            [ 2] 2556 	ldw x,(DBL+2,sp)
      000EFB                       2557 	_drop VSIZE 
      000EFB 5B 06            [ 2]    1     addw sp,#VSIZE 
      000EFD 81               [ 4] 2558 	ret
                                   2559 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2560 
                                   2561 ;-------------------------------------
                                   2562 ; multiply 2 integers
                                   2563 ; input:
                                   2564 ;  	x       n1 
                                   2565 ;   y 		n2 
                                   2566 ; output:
                                   2567 ;	X        N1*N2 bits 15..0
                                   2568 ;   Y        N1*N2 bits 31..16 
                                   2569 ;-------------------------------------
                           000001  2570 	SIGN=1
                           000001  2571 	VSIZE=1
      000EFE                       2572 multiply:
      000EFE                       2573 	_vars VSIZE 
      000EFE 52 01            [ 2]    1     sub sp,#VSIZE 
      000F00 0F 01            [ 1] 2574 	clr (SIGN,sp)
      000F02 9E               [ 1] 2575 	ld a,xh 
      000F03 A4 80            [ 1] 2576 	and a,#0x80
      000F05 2A 03            [ 1] 2577 	jrpl 1$
      000F07 03 01            [ 1] 2578 	cpl (SIGN,sp)
      000F09 50               [ 2] 2579 	negw x 
      000F0A                       2580 1$:	
      000F0A 90 9E            [ 1] 2581 	ld a,yh
      000F0C A4 80            [ 1] 2582 	and a,#0x80  
      000F0E 2A 04            [ 1] 2583 	jrpl 2$ 
      000F10 03 01            [ 1] 2584 	cpl (SIGN,sp)
      000F12 90 50            [ 2] 2585 	negw y 
      000F14                       2586 2$:	
      000F14 CD 0E C4         [ 4] 2587 	call umstar
      000F17 7B 01            [ 1] 2588 	ld a,(SIGN,sp)
      000F19 27 03            [ 1] 2589 	jreq 3$
      000F1B CD 0F 4B         [ 4] 2590 	call dneg 
      000F1E                       2591 3$:	
      000F1E                       2592 	_drop VSIZE 
      000F1E 5B 01            [ 2]    1     addw sp,#VSIZE 
      000F20 81               [ 4] 2593 	ret
                                   2594 
                                   2595 ;--------------------------------------
                                   2596 ; divide uint32_t/uint16_t
                                   2597 ; return:  quotient and remainder 
                                   2598 ; quotient expected to be uint16_t 
                                   2599 ; input:
                                   2600 ;   DBLDIVDND    on stack 
                                   2601 ;   X            divisor 
                                   2602 ; output:
                                   2603 ;   X            quotient 
                                   2604 ;   Y            remainder 
                                   2605 ;---------------------------------------
                           000003  2606 	VSIZE=3
      000F21                       2607 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      000F21                       2608 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   2609 	; local variables 
                           000001  2610 	DIVISOR=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                           000003  2611 	CNTR=3 
      000F21                       2612 udiv32_16:
      000F21                       2613 	_vars VSIZE 
      000F21 52 03            [ 2]    1     sub sp,#VSIZE 
      000F23 1F 01            [ 2] 2614 	ldw (DIVISOR,sp),x	; save divisor 
      000F25 1E 08            [ 2] 2615 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      000F27 16 06            [ 2] 2616 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      000F29 90 5D            [ 2] 2617 	tnzw y
      000F2B 26 06            [ 1] 2618 	jrne long_division 
      000F2D 16 01            [ 2] 2619 	ldw y,(DIVISOR,sp)
      000F2F 65               [ 2] 2620 	divw x,y
      000F30                       2621 	_drop VSIZE 
      000F30 5B 03            [ 2]    1     addw sp,#VSIZE 
      000F32 81               [ 4] 2622 	ret
      000F33                       2623 long_division:
      000F33 51               [ 1] 2624 	exgw x,y ; hi in x, lo in y 
      000F34 A6 11            [ 1] 2625 	ld a,#17 
      000F36 6B 03            [ 1] 2626 	ld (CNTR,sp),a
      000F38                       2627 1$:
      000F38 13 01            [ 2] 2628 	cpw x,(DIVISOR,sp)
      000F3A 2B 03            [ 1] 2629 	jrmi 2$
      000F3C 72 F0 01         [ 2] 2630 	subw x,(DIVISOR,sp)
      000F3F 8C               [ 1] 2631 2$:	ccf 
      000F40 90 59            [ 2] 2632 	rlcw y 
      000F42 59               [ 2] 2633 	rlcw x 
      000F43 0A 03            [ 1] 2634 	dec (CNTR,sp)
      000F45 26 F1            [ 1] 2635 	jrne 1$
      000F47 51               [ 1] 2636 	exgw x,y 
      000F48                       2637 	_drop VSIZE 
      000F48 5B 03            [ 2]    1     addw sp,#VSIZE 
      000F4A 81               [ 4] 2638 	ret
                                   2639 
                                   2640 ;-----------------------------
                                   2641 ; negate double int.
                                   2642 ; input:
                                   2643 ;   x     bits 15..0
                                   2644 ;   y     bits 31..16
                                   2645 ; output: 
                                   2646 ;   x     bits 15..0
                                   2647 ;   y     bits 31..16
                                   2648 ;-----------------------------
      000F4B                       2649 dneg:
      000F4B 53               [ 2] 2650 	cplw x 
      000F4C 90 53            [ 2] 2651 	cplw y 
      000F4E 1C 00 01         [ 2] 2652 	addw x,#1 
      000F51 24 02            [ 1] 2653 	jrnc 1$
      000F53 90 5C            [ 2] 2654 	incw y 
      000F55 81               [ 4] 2655 1$: ret 
                                   2656 
                                   2657 
                                   2658 ;--------------------------------
                                   2659 ; sign extend single to double
                                   2660 ; input:
                                   2661 ;   x    int16_t
                                   2662 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2663 ;   x    int32_t bits 15..0
                                   2664 ;   y    int32_t bits 31..16
                                   2665 ;--------------------------------
      000F56                       2666 dbl_sign_extend:
      000F56 90 5F            [ 1] 2667 	clrw y
      000F58 9E               [ 1] 2668 	ld a,xh 
      000F59 A4 80            [ 1] 2669 	and a,#0x80 
      000F5B 27 02            [ 1] 2670 	jreq 1$
      000F5D 90 53            [ 2] 2671 	cplw y
      000F5F 81               [ 4] 2672 1$: ret 	
                                   2673 
                                   2674 
                                   2675 ;----------------------------------
                                   2676 ;  euclidian divide dbl/n1 
                                   2677 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   2678 ; input:
                                   2679 ;    dbl    int32_t on stack 
                                   2680 ;    x 		n1   int16_t  disivor  
                                   2681 ; output:
                                   2682 ;    X      dbl/x  int16_t 
                                   2683 ;    Y      remainder int16_t 
                                   2684 ;----------------------------------
                           000008  2685 	VSIZE=8
      000F60                       2686 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      000F60                       2687 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      000F60                       2688 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   2689 	; local variables
                           000001  2690 	DBLHI=1
                           000003  2691 	DBLLO=3 
                           000005  2692 	SDIVSR=5 ; sign divisor
                           000006  2693 	SQUOT=6 ; sign dividend 
                           000007  2694 	DIVISR=7 ; divisor 
      000F60                       2695 div32_16:
      000F60                       2696 	_vars VSIZE 
      000F60 52 08            [ 2]    1     sub sp,#VSIZE 
      000F62 0F 05            [ 1] 2697 	clr (SDIVSR,sp)
      000F64 0F 06            [ 1] 2698 	clr (SQUOT,sp)
                                   2699 ; copy arguments 
      000F66 16 0B            [ 2] 2700 	ldw y,(DIVDNDHI,sp)
      000F68 17 01            [ 2] 2701 	ldw (DBLHI,sp),y
      000F6A 16 0D            [ 2] 2702 	ldw y,(DIVDNDLO,sp)
      000F6C 17 03            [ 2] 2703 	ldw (DBLLO,sp),y 
                                   2704 ; check for 0 divisor
      000F6E 5D               [ 2] 2705 	tnzw x 
      000F6F 26 05            [ 1] 2706     jrne 0$
      000F71 A6 04            [ 1] 2707 	ld a,#ERR_DIV0 
      000F73 CC 08 77         [ 2] 2708 	jp tb_error 
                                   2709 ; check divisor sign 	
      000F76 9E               [ 1] 2710 0$:	ld a,xh 
      000F77 A4 80            [ 1] 2711 	and a,#0x80 
      000F79 27 05            [ 1] 2712 	jreq 1$
      000F7B 03 05            [ 1] 2713 	cpl (SDIVSR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F7D 03 06            [ 1] 2714 	cpl (SQUOT,sp)
      000F7F 50               [ 2] 2715 	negw x
      000F80 1F 07            [ 2] 2716 1$:	ldw (DIVISR,sp),x
                                   2717 ; check dividend sign 	 
      000F82 7B 01            [ 1] 2718  	ld a,(DBLHI,sp) 
      000F84 A4 80            [ 1] 2719 	and a,#0x80 
      000F86 27 0D            [ 1] 2720 	jreq 2$ 
      000F88 03 06            [ 1] 2721 	cpl (SQUOT,sp)
      000F8A 1E 03            [ 2] 2722 	ldw x,(DBLLO,sp)
      000F8C 16 01            [ 2] 2723 	ldw y,(DBLHI,sp)
      000F8E CD 0F 4B         [ 4] 2724 	call dneg 
      000F91 1F 03            [ 2] 2725 	ldw (DBLLO,sp),x 
      000F93 17 01            [ 2] 2726 	ldw (DBLHI,sp),y 
      000F95 1E 07            [ 2] 2727 2$:	ldw x,(DIVISR,sp)
      000F97 CD 0F 21         [ 4] 2728 	call udiv32_16
      000F9A 90 5D            [ 2] 2729 	tnzw y 
      000F9C 27 11            [ 1] 2730 	jreq 3$ 
                                   2731 ; x=quotient 
                                   2732 ; y=remainder 
                                   2733 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      000F9E 7B 06            [ 1] 2734 	ld a,(SQUOT,sp)
      000FA0 18 05            [ 1] 2735 	xor a,(SDIVSR,sp)
      000FA2 27 0B            [ 1] 2736 	jreq 3$
      000FA4 5C               [ 2] 2737 	incw x 
      000FA5 90 CF 00 0C      [ 2] 2738 	ldw acc16,y 
      000FA9 16 07            [ 2] 2739 	ldw y,(DIVISR,sp)
      000FAB 72 B2 00 0C      [ 2] 2740 	subw y,acc16
                                   2741 ; sign quotient
      000FAF 7B 06            [ 1] 2742 3$:	ld a,(SQUOT,sp)
      000FB1 27 01            [ 1] 2743 	jreq 4$
      000FB3 50               [ 2] 2744 	negw x 
      000FB4                       2745 4$:	
      000FB4                       2746 	_drop VSIZE 
      000FB4 5B 08            [ 2]    1     addw sp,#VSIZE 
      000FB6 81               [ 4] 2747 	ret 
                                   2748 
                                   2749 
                                   2750 
                                   2751 ;----------------------------------
                                   2752 ; division x/y 
                                   2753 ; input:
                                   2754 ;    X       dividend
                                   2755 ;    Y       divisor 
                                   2756 ; output:
                                   2757 ;    X       quotient
                                   2758 ;    Y       remainder 
                                   2759 ;-----------------------------------
                           000004  2760 	VSIZE=4 
                                   2761 	; local variables 
                           000001  2762 	DBLHI=1
                           000003  2763 	DBLLO=3
      000FB7                       2764 divide: 
      000FB7                       2765 	_vars VSIZE 
      000FB7 52 04            [ 2]    1     sub sp,#VSIZE 
      000FB9 90 CF 00 0C      [ 2] 2766 	ldw acc16,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000FBD CD 0F 56         [ 4] 2767 	call dbl_sign_extend
      000FC0 1F 03            [ 2] 2768 	ldw (DBLLO,sp),x 
      000FC2 17 01            [ 2] 2769 	ldw (DBLHI,sp),y 
      000FC4 CE 00 0C         [ 2] 2770 	ldw x,acc16 
      000FC7 CD 0F 60         [ 4] 2771 	call div32_16 
      000FCA                       2772 	_drop VSIZE 
      000FCA 5B 04            [ 2]    1     addw sp,#VSIZE 
      000FCC 81               [ 4] 2773 	ret
                                   2774 
                                   2775 
                                   2776 ;----------------------------------
                                   2777 ;  remainder resulting from euclidian 
                                   2778 ;  division of x/y 
                                   2779 ; input:
                                   2780 ;   x   	dividend int16_t 
                                   2781 ;   y 		divisor int16_t
                                   2782 ; output:
                                   2783 ;   X       n1%n2 
                                   2784 ;----------------------------------
      000FCD                       2785 modulo:
      000FCD CD 0F B7         [ 4] 2786 	call divide
      000FD0 93               [ 1] 2787 	ldw x,y 
      000FD1 81               [ 4] 2788 	ret 
                                   2789 
                                   2790 ;----------------------------------
                                   2791 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   2792 ; return expr1*expr2/expr3 
                                   2793 ; product result is int32_t and 
                                   2794 ; divisiont is int32_t/int16_t
                                   2795 ;----------------------------------
                           000004  2796 	DBL_SIZE=4 
      000FD2                       2797 muldiv:
      000FD2 CD 10 7A         [ 4] 2798 	call func_args 
      000FD5 A1 03            [ 1] 2799 	cp a,#3 
      000FD7 27 03            [ 1] 2800 	jreq 1$
      000FD9 CC 08 75         [ 2] 2801 	jp syntax_error
      000FDC                       2802 1$: 
      000FDC 1E 05            [ 2] 2803 	ldw x,(5,sp) ; expr1
      000FDE 16 03            [ 2] 2804 	ldw y,(3,sp) ; expr2
      000FE0 CD 0E FE         [ 4] 2805 	call multiply 
      000FE3 1F 05            [ 2] 2806 	ldw (5,sp),x  ;int32_t 15..0
      000FE5 17 03            [ 2] 2807 	ldw (3,sp),y  ;int32_t 31..16
      000FE7 85               [ 2] 2808 	popw x        ; expr3 
      000FE8 CD 0F 60         [ 4] 2809 	call div32_16 ; int32_t/expr3 
      000FEB                       2810 	_drop DBL_SIZE
      000FEB 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      000FED 81               [ 4] 2811 	ret 
                                   2812 
                                   2813 
                                   2814 ;----------------------------------
                                   2815 ; search in kword_dict name
                                   2816 ; from its execution address 
                                   2817 ; input:
                                   2818 ;   X       	execution address 
                                   2819 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2820 ;   X 			cstr*  | 0 
                                   2821 ;--------------------------------
                           000001  2822 	XADR=1 
                           000003  2823 	LINK=3 
                           000004  2824 	VSIZE=4
      000FEE                       2825 cmd_name:
      000FEE                       2826 	_vars VSIZE 
      000FEE 52 04            [ 2]    1     sub sp,#VSIZE 
      000FF0 72 5F 00 0C      [ 1] 2827 	clr acc16 
      000FF4 1F 01            [ 2] 2828 	ldw (XADR,sp),x  
      000FF6 AE 26 B7         [ 2] 2829 	ldw x,#kword_dict	
      000FF9 1F 03            [ 2] 2830 1$:	ldw (LINK,sp),x
      000FFB E6 02            [ 1] 2831 	ld a,(2,x)
      000FFD A4 0F            [ 1] 2832 	and a,#15 
      000FFF C7 00 0D         [ 1] 2833 	ld acc8,a 
      001002 1C 00 03         [ 2] 2834 	addw x,#3
      001005 72 BB 00 0C      [ 2] 2835 	addw x,acc16
      001009 FE               [ 2] 2836 	ldw x,(x) ; execution address 
      00100A 13 01            [ 2] 2837 	cpw x,(XADR,sp)
      00100C 27 0A            [ 1] 2838 	jreq 2$
      00100E 1E 03            [ 2] 2839 	ldw x,(LINK,sp)
      001010 FE               [ 2] 2840 	ldw x,(x) 
      001011 1D 00 02         [ 2] 2841 	subw x,#2  
      001014 26 E3            [ 1] 2842 	jrne 1$
      001016 20 05            [ 2] 2843 	jra 9$
      001018 1E 03            [ 2] 2844 2$: ldw x,(LINK,sp)
      00101A 1C 00 02         [ 2] 2845 	addw x,#2 	
      00101D                       2846 9$:	_drop VSIZE
      00101D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00101F 81               [ 4] 2847 	ret
                                   2848 
                                   2849 
                                   2850 ;---------------------------------
                                   2851 ; dictionary search 
                                   2852 ; input:
                                   2853 ;	X 		dictionary entry point, name field  
                                   2854 ;   y		.asciz name to search 
                                   2855 ; output:
                                   2856 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2857 ;  X		execution address | 0 
                                   2858 ;---------------------------------
                           000001  2859 	NLEN=1 ; cmd length 
                           000002  2860 	XSAVE=2
                           000004  2861 	YSAVE=4
                           000005  2862 	VSIZE=5 
      001020                       2863 search_dict:
      001020                       2864 	_vars VSIZE 
      001020 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2865 
      001022 17 04            [ 2] 2866 	ldw (YSAVE,sp),y 
      001024                       2867 search_next:
      001024 1F 02            [ 2] 2868 	ldw (XSAVE,sp),x 
                                   2869 ; get name length in dictionary	
      001026 F6               [ 1] 2870 	ld a,(x)
      001027 A4 0F            [ 1] 2871 	and a,#0xf 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001029 6B 01            [ 1] 2872 	ld (NLEN,sp),a  
      00102B 16 04            [ 2] 2873 	ldw y,(YSAVE,sp) ; name pointer 
      00102D 5C               [ 2] 2874 	incw x 
      00102E                       2875 cp_loop:
      00102E 90 F6            [ 1] 2876 	ld a,(y)
      001030 27 1B            [ 1] 2877 	jreq str_match 
      001032 0D 01            [ 1] 2878 	tnz (NLEN,sp)
      001034 27 0A            [ 1] 2879 	jreq no_match  
      001036 F1               [ 1] 2880 	cp a,(x)
      001037 26 07            [ 1] 2881 	jrne no_match 
      001039 90 5C            [ 2] 2882 	incw y 
      00103B 5C               [ 2] 2883 	incw x
      00103C 0A 01            [ 1] 2884 	dec (NLEN,sp)
      00103E 20 EE            [ 2] 2885 	jra cp_loop 
      001040                       2886 no_match:
      001040 1E 02            [ 2] 2887 	ldw x,(XSAVE,sp) 
      001042 1D 00 02         [ 2] 2888 	subw x,#2 ; move X to link field
      001045 4B 00            [ 1] 2889 	push #TK_NONE 
      001047 FE               [ 2] 2890 	ldw x,(x) ; next word link 
      001048 84               [ 1] 2891 	pop a ; TK_NONE 
      001049 27 1F            [ 1] 2892 	jreq search_exit  ; not found  
                                   2893 ;try next 
      00104B 20 D7            [ 2] 2894 	jra search_next
      00104D                       2895 str_match:
      00104D 1E 02            [ 2] 2896 	ldw x,(XSAVE,sp)
      00104F F6               [ 1] 2897 	ld a,(X)
      001050 6B 01            [ 1] 2898 	ld (NLEN,sp),a ; needed to test keyword type  
      001052 A4 0F            [ 1] 2899 	and a,#0xf 
                                   2900 ; move x to procedure address field 	
      001054 4C               [ 1] 2901 	inc a 
      001055 C7 00 0D         [ 1] 2902 	ld acc8,a 
      001058 72 5F 00 0C      [ 1] 2903 	clr acc16 
      00105C 72 BB 00 0C      [ 2] 2904 	addw x,acc16 
      001060 FE               [ 2] 2905 	ldw x,(x) ; routine entry point 
                                   2906 ;determine keyword type bits 7:6 
      001061 7B 01            [ 1] 2907 	ld a,(NLEN,sp)
      001063 4E               [ 1] 2908 	swap a 
      001064 A4 0C            [ 1] 2909 	and a,#0xc
      001066 44               [ 1] 2910 	srl a
      001067 44               [ 1] 2911 	srl a 
      001068 AB 80            [ 1] 2912 	add a,#128
      00106A                       2913 search_exit: 
      00106A                       2914 	_drop VSIZE 	 
      00106A 5B 05            [ 2]    1     addw sp,#VSIZE 
      00106C 81               [ 4] 2915 	ret 
                                   2916 
                                   2917 ;---------------------
                                   2918 ; check if next token
                                   2919 ;  is of expected type 
                                   2920 ; input:
                                   2921 ;   A 		 expected token attribute
                                   2922 ;  ouput:
                                   2923 ;   none     if fail call syntax_error 
                                   2924 ;--------------------
      00106D                       2925 expect:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00106D 88               [ 1] 2926 	push a 
      00106E CD 09 67         [ 4] 2927 	call next_token 
      001071 11 01            [ 1] 2928 	cp a,(1,sp)
      001073 27 03            [ 1] 2929 	jreq 1$
      001075 CC 08 75         [ 2] 2930 	jp syntax_error
      001078 84               [ 1] 2931 1$: pop a 
      001079 81               [ 4] 2932 	ret 
                                   2933 
                                   2934 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2935 ; parse arguments list 
                                   2936 ; between ()
                                   2937 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00107A                       2938 func_args:
      00107A A6 07            [ 1] 2939 	ld a,#TK_LPAREN 
      00107C CD 10 6D         [ 4] 2940 	call expect 
                                   2941 ; expected to continue in arg_list 
                                   2942 ; caller must check for TK_RPAREN 
                                   2943 
                                   2944 ;-------------------------------
                                   2945 ; parse embedded BASIC routines 
                                   2946 ; arguments list.
                                   2947 ; arg_list::=  rel[','rel]*
                                   2948 ; all arguments are of integer type
                                   2949 ; and pushed on stack 
                                   2950 ; input:
                                   2951 ;   none
                                   2952 ; output:
                                   2953 ;   stack{n}   arguments pushed on stack
                                   2954 ;   A 	number of arguments pushed on stack  
                                   2955 ;--------------------------------
      00107F                       2956 arg_list:
      00107F 4B 00            [ 1] 2957 	push #0  
      001081 CD 11 C1         [ 4] 2958 1$: call relation
      001084 A1 00            [ 1] 2959 	cp a,#TK_NONE 
      001086 27 20            [ 1] 2960 	jreq 5$
      001088 A1 84            [ 1] 2961 	cp a,#TK_INTGR
      00108A 26 13            [ 1] 2962 	jrne 4$
      00108C                       2963 3$: 
                                   2964 ; swap return address with argument
      00108C 84               [ 1] 2965 	pop a ; arg_count
      00108D 90 85            [ 2] 2966 	popw y ; return address 
      00108F 89               [ 2] 2967 	pushw x ; new argument 
      001090 90 89            [ 2] 2968 	pushw y 
      001092 4C               [ 1] 2969     inc a
      001093 88               [ 1] 2970 	push a 
      001094 CD 09 67         [ 4] 2971 	call next_token 
      001097 A1 09            [ 1] 2972 	cp a,#TK_COMMA 
      001099 27 E6            [ 1] 2973 	jreq 1$ 
      00109B A1 00            [ 1] 2974 	cp a,#TK_NONE 
      00109D 27 09            [ 1] 2975 	jreq 5$ 
      00109F A1 08            [ 1] 2976 4$:	cp a,#TK_RPAREN 
      0010A1 27 05            [ 1] 2977 	jreq 5$
      0010A3                       2978 	_unget_token 
      0010A3 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0010A8 84               [ 1] 2979 5$:	pop a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0010A9 81               [ 4] 2980 	ret 
                                   2981 
                                   2982 ;--------------------------------
                                   2983 ;   BASIC commnands 
                                   2984 ;--------------------------------
                                   2985 
                                   2986 ;--------------------------------
                                   2987 ;  arithmetic and relational 
                                   2988 ;  routines
                                   2989 ;  operators precedence
                                   2990 ;  highest to lowest
                                   2991 ;  operators on same row have 
                                   2992 ;  same precedence and are executed
                                   2993 ;  from left to right.
                                   2994 ;	'*','/','%'
                                   2995 ;   '-','+'
                                   2996 ;   '=','>','<','>=','<=','<>','><'
                                   2997 ;   '<>' and '><' are equivalent for not equal.
                                   2998 ;--------------------------------
                                   2999 
                                   3000 ;---------------------
                                   3001 ; return array element
                                   3002 ; address from @(expr)
                                   3003 ; input:
                                   3004 ;   A 		TK_ARRAY
                                   3005 ; output:
                                   3006 ;   A 		TK_INTGR
                                   3007 ;	X 		element address 
                                   3008 ;----------------------
      0010AA                       3009 get_array_element:
      0010AA CD 10 7A         [ 4] 3010 	call func_args 
      0010AD A1 01            [ 1] 3011 	cp a,#1
      0010AF 27 03            [ 1] 3012 	jreq 1$
      0010B1 CC 08 75         [ 2] 3013 	jp syntax_error
      0010B4 85               [ 2] 3014 1$: popw x 
                                   3015 	; check for bounds 
      0010B5 C3 00 21         [ 2] 3016 	cpw x,array_size 
      0010B8 23 05            [ 2] 3017 	jrule 3$
                                   3018 ; bounds {1..array_size}	
      0010BA A6 0A            [ 1] 3019 2$: ld a,#ERR_BAD_VALUE 
      0010BC CC 08 77         [ 2] 3020 	jp tb_error 
      0010BF 5D               [ 2] 3021 3$: tnzw  x
      0010C0 27 F8            [ 1] 3022 	jreq 2$ 
      0010C2 58               [ 2] 3023 	sllw x 
      0010C3 89               [ 2] 3024 	pushw x 
      0010C4 AE 16 90         [ 2] 3025 	ldw x,#tib
      0010C7 72 F0 01         [ 2] 3026 	subw x,(1,sp)
      0010CA                       3027 	_drop 2   
      0010CA 5B 02            [ 2]    1     addw sp,#2 
      0010CC A6 84            [ 1] 3028 	ld a,#TK_INTGR
      0010CE 81               [ 4] 3029 	ret 
                                   3030 
                                   3031 
                                   3032 ;***********************************
                                   3033 ;   expression parse,execute 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3034 ;***********************************
                                   3035 ;-----------------------------------
                                   3036 ; factor ::= ['+'|'-'|e]  var | @ |
                                   3037 ;			 integer | function |
                                   3038 ;			 '('relation')' 
                                   3039 ; output:
                                   3040 ;   A    token attribute 
                                   3041 ;   X 	 integer
                                   3042 ; ---------------------------------
                           000001  3043 	NEG=1
                           000001  3044 	VSIZE=1
      0010CF                       3045 factor:
      0010CF                       3046 	_vars VSIZE 
      0010CF 52 01            [ 2]    1     sub sp,#VSIZE 
      0010D1 CD 09 67         [ 4] 3047 	call next_token
      0010D4 A1 02            [ 1] 3048 	cp a,#CMD_END 
      0010D6 25 4E            [ 1] 3049 	jrult 20$
      0010D8 6B 01            [ 1] 3050 1$:	ld (NEG,sp),a 
      0010DA A4 30            [ 1] 3051 	and a,#TK_GRP_MASK
      0010DC A1 10            [ 1] 3052 	cp a,#TK_GRP_ADD 
      0010DE 27 04            [ 1] 3053 	jreq 2$
      0010E0 7B 01            [ 1] 3054 	ld a,(NEG,sp)
      0010E2 20 03            [ 2] 3055 	jra 4$  
      0010E4                       3056 2$:	
      0010E4 CD 09 67         [ 4] 3057 	call next_token 
      0010E7                       3058 4$:	
      0010E7 A1 81            [ 1] 3059 	cp a,#TK_IFUNC 
      0010E9 26 03            [ 1] 3060 	jrne 5$ 
      0010EB FD               [ 4] 3061 	call (x) 
      0010EC 20 2F            [ 2] 3062 	jra 18$ 
      0010EE                       3063 5$:
      0010EE A1 84            [ 1] 3064 	cp a,#TK_INTGR
      0010F0 26 02            [ 1] 3065 	jrne 6$
      0010F2 20 29            [ 2] 3066 	jra 18$
      0010F4                       3067 6$:
      0010F4 A1 06            [ 1] 3068 	cp a,#TK_ARRAY
      0010F6 26 06            [ 1] 3069 	jrne 10$
      0010F8 CD 10 AA         [ 4] 3070 	call get_array_element
      0010FB FE               [ 2] 3071 	ldw x,(x)
      0010FC 20 1F            [ 2] 3072 	jra 18$ 
      0010FE                       3073 10$:
      0010FE A1 85            [ 1] 3074 	cp a,#TK_VAR 
      001100 26 03            [ 1] 3075 	jrne 12$
      001102 FE               [ 2] 3076 	ldw x,(x)
      001103 20 18            [ 2] 3077 	jra 18$
      001105                       3078 12$:			
      001105 A1 07            [ 1] 3079 	cp a,#TK_LPAREN
      001107 26 0C            [ 1] 3080 	jrne 16$
      001109 CD 11 C1         [ 4] 3081 	call relation
      00110C 89               [ 2] 3082 	pushw x 
      00110D A6 08            [ 1] 3083 	ld a,#TK_RPAREN 
      00110F CD 10 6D         [ 4] 3084 	call expect
      001112 85               [ 2] 3085 	popw x 
      001113 20 08            [ 2] 3086 	jra 18$	
      001115                       3087 16$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001115                       3088 	_unget_token
      001115 55 00 02 00 01   [ 1]    1     mov in,in.saved
      00111A 4F               [ 1] 3089 	clr a 
      00111B 20 09            [ 2] 3090 	jra 20$ 
      00111D                       3091 18$: 
      00111D A6 11            [ 1] 3092 	ld a,#TK_MINUS 
      00111F 11 01            [ 1] 3093 	cp a,(NEG,sp)
      001121 26 01            [ 1] 3094 	jrne 19$
      001123 50               [ 2] 3095 	negw x
      001124                       3096 19$:
      001124 A6 84            [ 1] 3097 	ld a,#TK_INTGR
      001126                       3098 20$:
      001126                       3099 	_drop VSIZE
      001126 5B 01            [ 2]    1     addw sp,#VSIZE 
      001128 81               [ 4] 3100 	ret
                                   3101 
                                   3102 ;-----------------------------------
                                   3103 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3104 ; output:
                                   3105 ;   A    	token attribute 
                                   3106 ;	X		integer
                                   3107 ;-----------------------------------
                           000001  3108 	N1=1   ; int16_t
                           000003  3109 	MULOP=3
                           000003  3110 	VSIZE=3
      001129                       3111 term:
      001129                       3112 	_vars VSIZE
      001129 52 03            [ 2]    1     sub sp,#VSIZE 
      00112B CD 10 CF         [ 4] 3113 	call factor
      00112E A1 02            [ 1] 3114 	cp a,#CMD_END
      001130 25 43            [ 1] 3115 	jrult term_exit
      001132                       3116 term01:	 ; check for  operator 
      001132 1F 01            [ 2] 3117 	ldw (N1,sp),x  ; save first factor 
      001134 CD 09 67         [ 4] 3118 	call next_token
      001137 A1 02            [ 1] 3119 	cp a,#CMD_END
      001139 25 36            [ 1] 3120 	jrult 9$
      00113B 6B 03            [ 1] 3121 0$:	ld (MULOP,sp),a
      00113D A4 30            [ 1] 3122 	and a,#TK_GRP_MASK
      00113F A1 20            [ 1] 3123 	cp a,#TK_GRP_MULT
      001141 27 07            [ 1] 3124 	jreq 1$
      001143                       3125 	_unget_token 
      001143 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001148 20 27            [ 2] 3126 	jra 9$
      00114A                       3127 1$:	; got *|/|%
      00114A CD 10 CF         [ 4] 3128 	call factor
      00114D A1 84            [ 1] 3129 	cp a,#TK_INTGR
      00114F 27 03            [ 1] 3130 	jreq 2$ 
      001151 CC 08 75         [ 2] 3131 	jp syntax_error
      001154 90 93            [ 1] 3132 2$:	ldw y,x 
      001156 1E 01            [ 2] 3133 	ldw x,(N1,sp)
      001158 7B 03            [ 1] 3134 	ld a,(MULOP,sp) 
      00115A A1 20            [ 1] 3135 	cp a,#TK_MULT 
      00115C 26 05            [ 1] 3136 	jrne 3$
      00115E CD 0E FE         [ 4] 3137 	call multiply 
      001161 20 CF            [ 2] 3138 	jra term01
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001163 A1 21            [ 1] 3139 3$: cp a,#TK_DIV 
      001165 26 05            [ 1] 3140 	jrne 4$ 
      001167 CD 0F B7         [ 4] 3141 	call divide 
      00116A 20 C6            [ 2] 3142 	jra term01 
      00116C CD 0F CD         [ 4] 3143 4$: call modulo
      00116F 20 C1            [ 2] 3144 	jra term01 
      001171 1E 01            [ 2] 3145 9$: ldw x,(N1,sp)
      001173 A6 84            [ 1] 3146 	ld a,#TK_INTGR 	
      001175                       3147 term_exit:
      001175                       3148 	_drop VSIZE 
      001175 5B 03            [ 2]    1     addw sp,#VSIZE 
      001177 81               [ 4] 3149 	ret 
                                   3150 
                                   3151 ;-------------------------------
                                   3152 ;  expr ::= term [['+'|'-'] term]*
                                   3153 ;  result range {-32768..32767}
                                   3154 ;  output:
                                   3155 ;   A    token attribute 
                                   3156 ;   X	 integer   
                                   3157 ;-------------------------------
                           000001  3158 	N1=1 
                           000003  3159 	OP=3 
                           000003  3160 	VSIZE=3 
      001178                       3161 expression:
      001178                       3162 	_vars VSIZE 
      001178 52 03            [ 2]    1     sub sp,#VSIZE 
      00117A CD 11 29         [ 4] 3163 	call term
      00117D A1 02            [ 1] 3164 	cp a,#CMD_END 
      00117F 25 3D            [ 1] 3165 	jrult expr_exit 
      001181 1F 01            [ 2] 3166 0$:	ldw (N1,sp),x 
      001183 CD 09 67         [ 4] 3167 	call next_token
      001186 A1 02            [ 1] 3168 	cp a,#CMD_END 
      001188 25 30            [ 1] 3169 	jrult 9$ 
      00118A 6B 03            [ 1] 3170 1$:	ld (OP,sp),a  
      00118C A4 30            [ 1] 3171 	and a,#TK_GRP_MASK
      00118E A1 10            [ 1] 3172 	cp a,#TK_GRP_ADD 
      001190 27 07            [ 1] 3173 	jreq 2$ 
      001192                       3174 	_unget_token
      001192 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001197 20 21            [ 2] 3175 	jra 9$
      001199                       3176 2$: 
      001199 CD 11 29         [ 4] 3177 	call term
      00119C A1 84            [ 1] 3178 	cp a,#TK_INTGR 
      00119E 27 03            [ 1] 3179 	jreq 3$
      0011A0 CC 08 75         [ 2] 3180 	jp syntax_error
      0011A3 CF 00 0C         [ 2] 3181 3$:	ldw acc16,x 
      0011A6 1E 01            [ 2] 3182 	ldw x,(N1,sp)
      0011A8 7B 03            [ 1] 3183 	ld a,(OP,sp)
      0011AA A1 10            [ 1] 3184 	cp a,#TK_PLUS 
      0011AC 26 06            [ 1] 3185 	jrne 4$
      0011AE 72 BB 00 0C      [ 2] 3186 	addw x,acc16
      0011B2 20 CD            [ 2] 3187 	jra 0$ 
      0011B4 72 B0 00 0C      [ 2] 3188 4$:	subw x,acc16
      0011B8 20 C7            [ 2] 3189 	jra 0$
      0011BA 1E 01            [ 2] 3190 9$: ldw x,(N1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011BC A6 84            [ 1] 3191 	ld a,#TK_INTGR	
      0011BE                       3192 expr_exit:
      0011BE                       3193 	_drop VSIZE 
      0011BE 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011C0 81               [ 4] 3194 	ret 
                                   3195 
                                   3196 ;---------------------------------------------
                                   3197 ; rel ::= expr rel_op expr
                                   3198 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3199 ;  relation return  integer , zero is false 
                                   3200 ;  output:
                                   3201 ;    A 		token attribute  
                                   3202 ;	 X		integer 
                                   3203 ;---------------------------------------------
                           000001  3204 	N1=1
                           000003  3205 	RELOP=3
                           000003  3206 	VSIZE=3 
      0011C1                       3207 relation: 
      0011C1                       3208 	_vars VSIZE
      0011C1 52 03            [ 2]    1     sub sp,#VSIZE 
      0011C3 CD 11 78         [ 4] 3209 	call expression
      0011C6 A1 02            [ 1] 3210 	cp a,#CMD_END  
      0011C8 25 4F            [ 1] 3211 	jrult rel_exit 
                                   3212 	; expect rel_op or leave 
      0011CA 1F 01            [ 2] 3213 	ldw (N1,sp),x 
      0011CC CD 09 67         [ 4] 3214 	call next_token 
      0011CF A1 02            [ 1] 3215 	cp a,#CMD_END 
      0011D1 25 42            [ 1] 3216 	jrult 9$
      0011D3                       3217 1$:	
      0011D3 6B 03            [ 1] 3218 	ld (RELOP,sp),a 
      0011D5 A4 30            [ 1] 3219 	and a,#TK_GRP_MASK
      0011D7 A1 30            [ 1] 3220 	cp a,#TK_GRP_RELOP 
      0011D9 27 07            [ 1] 3221 	jreq 2$
      0011DB                       3222 	_unget_token  
      0011DB 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0011E0 20 33            [ 2] 3223 	jra 9$
      0011E2                       3224 2$:	; expect another expression or error 
      0011E2 CD 11 78         [ 4] 3225 	call expression
      0011E5 A1 84            [ 1] 3226 	cp a,#TK_INTGR 
      0011E7 27 03            [ 1] 3227 	jreq 3$
      0011E9 CC 08 75         [ 2] 3228 	jp syntax_error 
      0011EC CF 00 0C         [ 2] 3229 3$:	ldw acc16,x 
      0011EF 1E 01            [ 2] 3230 	ldw x,(N1,sp) 
      0011F1 72 B0 00 0C      [ 2] 3231 	subw x,acc16
      0011F5 26 06            [ 1] 3232 	jrne 4$
      0011F7 35 02 00 0D      [ 1] 3233 	mov acc8,#2 ; n1==n2
      0011FB 20 0C            [ 2] 3234 	jra 6$ 
      0011FD                       3235 4$: 
      0011FD 2C 06            [ 1] 3236 	jrsgt 5$  
      0011FF 35 04 00 0D      [ 1] 3237 	mov acc8,#4 ; n1<2 
      001203 20 04            [ 2] 3238 	jra 6$
      001205                       3239 5$:
      001205 35 01 00 0D      [ 1] 3240 	mov acc8,#1 ; n1>n2 
      001209                       3241 6$:
      001209 5F               [ 1] 3242 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00120A C6 00 0D         [ 1] 3243 	ld a, acc8  
      00120D 14 03            [ 1] 3244 	and a,(RELOP,sp)
      00120F 4D               [ 1] 3245 	tnz a 
      001210 27 05            [ 1] 3246 	jreq 10$
      001212 5C               [ 2] 3247 	incw x 
      001213                       3248 7$:	 
      001213 20 02            [ 2] 3249 	jra 10$  	
      001215 1E 01            [ 2] 3250 9$: ldw x,(N1,sp)
      001217                       3251 10$:
      001217 A6 84            [ 1] 3252 	ld a,#TK_INTGR
      001219                       3253 rel_exit: 	 
      001219                       3254 	_drop VSIZE
      001219 5B 03            [ 2]    1     addw sp,#VSIZE 
      00121B 81               [ 4] 3255 	ret 
                                   3256 
                                   3257 ;--------------------------------
                                   3258 ; BASIC: SHOW 
                                   3259 ; print stack content in hexadecimal bytes 
                                   3260 ; 16 bytes per row 
                                   3261 ;--------------------------------
      00121C                       3262 show:
      00121C AE 12 36         [ 2] 3263 	ldw x,#cstk_prompt
      00121F CD 02 B3         [ 4] 3264 	call puts 
      001222 96               [ 1] 3265 	ldw x,sp 
      001223 1C 00 03         [ 2] 3266 	addw x,#3 ; ignore return address
      001226 90 AE 18 00      [ 2] 3267 	ldw y,#RAM_SIZE  
      00122A CF 00 0C         [ 2] 3268 	ldw acc16,x 
      00122D 72 B2 00 0C      [ 2] 3269 	subw y,acc16
      001231 CD 03 55         [ 4] 3270 	call hex_dump
      001234 4F               [ 1] 3271 	clr a 
      001235 81               [ 4] 3272 	ret
                                   3273 
      001236 0A 63 6F 6E 74 65 6E  3274 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   3275 
                                   3276 
                                   3277 ;--------------------------------------------
                                   3278 ; BASIC: HEX 
                                   3279 ; select hexadecimal base for integer print
                                   3280 ;---------------------------------------------
      00125D                       3281 hex_base:
      00125D 35 10 00 0A      [ 1] 3282 	mov base,#16 
      001261 81               [ 4] 3283 	ret 
                                   3284 
                                   3285 ;--------------------------------------------
                                   3286 ; BASIC: DEC 
                                   3287 ; select decimal base for integer print
                                   3288 ;---------------------------------------------
      001262                       3289 dec_base:
      001262 35 0A 00 0A      [ 1] 3290 	mov base,#10
      001266 81               [ 4] 3291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3292 
                                   3293 ;------------------------
                                   3294 ; BASIC: SIZE 
                                   3295 ; return free size in text area
                                   3296 ; output:
                                   3297 ;   A 		TK_INTGR
                                   3298 ;   X 	    size integer
                                   3299 ;--------------------------
      001267                       3300 size:
      001267 AE 16 90         [ 2] 3301 	ldw x,#tib 
      00126A 72 B0 00 1E      [ 2] 3302 	subw x,txtend 
      00126E A6 84            [ 1] 3303 	ld a,#TK_INTGR
      001270 81               [ 4] 3304 	ret 
                                   3305 
                                   3306 
                                   3307 ;------------------------
                                   3308 ; BASIC: UBOUND  
                                   3309 ; return array variable size 
                                   3310 ; output:
                                   3311 ;   A 		TK_INTGR
                                   3312 ;   X 	    array size 
                                   3313 ;--------------------------
      001271                       3314 ubound:
      001271 AE 16 90         [ 2] 3315 	ldw x,#tib
      001274 72 B0 00 1E      [ 2] 3316 	subw x,txtend 
      001278 90 CE 00 04      [ 2] 3317 	ldw y,basicptr 
      00127C 90 C3 00 1E      [ 2] 3318 	cpw y,txtend 
      001280 25 0A            [ 1] 3319 	jrult 1$
      001282 3B 00 03         [ 1] 3320 	push count 
      001285 4B 00            [ 1] 3321 	push #0 
      001287 72 F0 01         [ 2] 3322 	subw x,(1,sp)
      00128A                       3323 	_drop 2 
      00128A 5B 02            [ 2]    1     addw sp,#2 
      00128C 54               [ 2] 3324 1$:	srlw x 
      00128D CF 00 21         [ 2] 3325 	ldw array_size,x
      001290 A6 84            [ 1] 3326 	ld a,#TK_INTGR
      001292 81               [ 4] 3327 	ret 
                                   3328 
                                   3329 ;-----------------------------
                                   3330 ; BASIC: LET var=expr 
                                   3331 ; variable assignement 
                                   3332 ; output:
                                   3333 ;   A 		TK_NONE 
                                   3334 ;-----------------------------
      001293                       3335 let:
      001293 CD 09 67         [ 4] 3336 	call next_token 
      001296 A1 85            [ 1] 3337 	cp a,#TK_VAR 
      001298 27 0A            [ 1] 3338 	jreq let_var
      00129A A1 06            [ 1] 3339 	cp a,#TK_ARRAY 
      00129C 27 03            [ 1] 3340 	jreq  let_array
      00129E CC 08 75         [ 2] 3341 	jp syntax_error
      0012A1                       3342 let_array:
      0012A1 CD 10 AA         [ 4] 3343 	call get_array_element
      0012A4                       3344 let_var:
      0012A4 89               [ 2] 3345 	pushw x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012A5 CD 09 67         [ 4] 3346 	call next_token 
      0012A8 A1 32            [ 1] 3347 	cp a,#TK_EQUAL
      0012AA 27 03            [ 1] 3348 	jreq 1$
      0012AC CC 08 75         [ 2] 3349 	jp syntax_error
      0012AF                       3350 1$:	
      0012AF CD 11 C1         [ 4] 3351 	call relation   
      0012B2 A1 84            [ 1] 3352 	cp a,#TK_INTGR 
      0012B4 27 03            [ 1] 3353 	jreq 2$
      0012B6 CC 08 75         [ 2] 3354 	jp syntax_error
      0012B9                       3355 2$:	
      0012B9 90 93            [ 1] 3356 	ldw y,x 
      0012BB 85               [ 2] 3357 	popw x   
      0012BC FF               [ 2] 3358 	ldw (x),y   
      0012BD 81               [ 4] 3359 	ret 
                                   3360 
                                   3361 ;----------------------------
                                   3362 ; BASIC: LIST [[start][,end]]
                                   3363 ; list program lines 
                                   3364 ; form start to end 
                                   3365 ; if empty argument list then 
                                   3366 ; list all.
                                   3367 ;----------------------------
                           000001  3368 	FIRST=1
                           000003  3369 	LAST=3 
                           000005  3370 	LN_PTR=5
                           000006  3371 	VSIZE=6 
      0012BE                       3372 list:
      0012BE CE 00 1C         [ 2] 3373 	ldw x,txtbgn 
      0012C1 C3 00 1E         [ 2] 3374 	cpw x,txtend 
      0012C4 2B 01            [ 1] 3375 	jrmi 1$
      0012C6 81               [ 4] 3376 	ret 
      0012C7                       3377 1$:	
      0012C7                       3378 	_vars VSIZE
      0012C7 52 06            [ 2]    1     sub sp,#VSIZE 
      0012C9 1F 05            [ 2] 3379 	ldw (LN_PTR,sp),x 
      0012CB FE               [ 2] 3380 	ldw x,(x) 
      0012CC 1F 01            [ 2] 3381 	ldw (FIRST,sp),x ; list from first line 
      0012CE AE 7F FF         [ 2] 3382 	ldw x,#MAX_LINENO ; biggest line number 
      0012D1 1F 03            [ 2] 3383 	ldw (LAST,sp),x 
      0012D3 CD 10 7F         [ 4] 3384 	call arg_list
      0012D6 4D               [ 1] 3385 	tnz a
      0012D7 27 31            [ 1] 3386 	jreq list_start 
      0012D9 A1 02            [ 1] 3387 	cp a,#2 
      0012DB 27 07            [ 1] 3388 	jreq 4$
      0012DD A1 01            [ 1] 3389 	cp a,#1 
      0012DF 27 06            [ 1] 3390 	jreq first_line 
      0012E1 CC 08 75         [ 2] 3391 	jp syntax_error 
      0012E4 85               [ 2] 3392 4$:	popw x 
      0012E5 1F 05            [ 2] 3393 	ldw (LAST+2,sp),x 
      0012E7                       3394 first_line:
      0012E7 85               [ 2] 3395 	popw x
      0012E8 1F 01            [ 2] 3396 	ldw (FIRST,sp),x 
      0012EA                       3397 lines_skip:
      0012EA CE 00 1C         [ 2] 3398 	ldw x,txtbgn
      0012ED 1F 05            [ 2] 3399 2$:	ldw (LN_PTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0012EF C3 00 1E         [ 2] 3400 	cpw x,txtend 
      0012F2 2A 3C            [ 1] 3401 	jrpl list_exit 
      0012F4 FE               [ 2] 3402 	ldw x,(x) ;line# 
      0012F5 13 01            [ 2] 3403 	cpw x,(FIRST,sp)
      0012F7 2A 11            [ 1] 3404 	jrpl list_start 
      0012F9 1E 05            [ 2] 3405 	ldw x,(LN_PTR,sp) 
      0012FB E6 02            [ 1] 3406 	ld a,(2,x)
      0012FD C7 00 0D         [ 1] 3407 	ld acc8,a 
      001300 72 5F 00 0C      [ 1] 3408 	clr acc16 
      001304 72 BB 00 0C      [ 2] 3409 	addw x,acc16
      001308 20 E3            [ 2] 3410 	jra 2$ 
                                   3411 ; print loop
      00130A                       3412 list_start:
      00130A 1E 05            [ 2] 3413 	ldw x,(LN_PTR,sp)
      00130C E6 02            [ 1] 3414 3$:	ld a,(2,x) 
      00130E CD 13 8B         [ 4] 3415 	call prt_basic_line
      001311 1E 05            [ 2] 3416 	ldw x,(LN_PTR,sp)
      001313 E6 02            [ 1] 3417 	ld a,(2,x)
      001315 C7 00 0D         [ 1] 3418 	ld acc8,a 
      001318 72 5F 00 0C      [ 1] 3419 	clr acc16 
      00131C 72 BB 00 0C      [ 2] 3420 	addw x,acc16
      001320 C3 00 1E         [ 2] 3421 	cpw x,txtend 
      001323 2A 0B            [ 1] 3422 	jrpl list_exit
      001325 1F 05            [ 2] 3423 	ldw (LN_PTR,sp),x
      001327 FE               [ 2] 3424 	ldw x,(x)
      001328 13 03            [ 2] 3425 	cpw x,(LAST,sp)  
      00132A 2C 04            [ 1] 3426 	jrsgt list_exit 
      00132C 1E 05            [ 2] 3427 	ldw x,(LN_PTR,sp)
      00132E 20 DC            [ 2] 3428 	jra 3$
      001330                       3429 list_exit:
      001330                       3430 	_drop VSIZE 
      001330 5B 06            [ 2]    1     addw sp,#VSIZE 
      001332 81               [ 4] 3431 	ret
                                   3432 
                                   3433 ;-------------------------
                                   3434 ; print counted string 
                                   3435 ; input:
                                   3436 ;   X 	address of string
                                   3437 ;--------------------------
      001333                       3438 prt_cmd_name:
      001333 F6               [ 1] 3439 	ld a,(x)
      001334 5C               [ 2] 3440 	incw x
      001335 A4 0F            [ 1] 3441 	and a,#15  
      001337 88               [ 1] 3442 	push a 
      001338 0D 01            [ 1] 3443 1$: tnz (1,sp) 
      00133A 27 09            [ 1] 3444 	jreq 9$
      00133C F6               [ 1] 3445 	ld a,(x)
      00133D CD 02 A0         [ 4] 3446 	call putc 
      001340 5C               [ 2] 3447 	incw x
      001341 0A 01            [ 1] 3448 	dec (1,sp)	 
      001343 20 F3            [ 2] 3449 	jra 1$
      001345 84               [ 1] 3450 9$: pop a 
      001346 81               [ 4] 3451 	ret	
                                   3452 
                                   3453 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3454 ; print TK_QSTR
                                   3455 ; converting control character
                                   3456 ; to backslash sequence
                                   3457 ; input:
                                   3458 ;   X        char *
                                   3459 ;-----------------------------
      001347                       3460 prt_quote:
      001347 A6 22            [ 1] 3461 	ld a,#'"
      001349 CD 02 A0         [ 4] 3462 	call putc 
      00134C F6               [ 1] 3463 1$:	ld a,(x)
      00134D 27 2D            [ 1] 3464 	jreq 9$
      00134F 5C               [ 2] 3465 	incw x 
      001350 A1 20            [ 1] 3466 	cp a,#SPACE 
      001352 25 0C            [ 1] 3467 	jrult 3$
      001354 CD 02 A0         [ 4] 3468 	call putc
      001357 A1 5C            [ 1] 3469 	cp a,#'\ 
      001359 26 F1            [ 1] 3470 	jrne 1$ 
      00135B                       3471 2$:
      00135B CD 02 A0         [ 4] 3472 	call putc 
      00135E 20 EC            [ 2] 3473 	jra 1$
      001360 88               [ 1] 3474 3$: push a 
      001361 A6 5C            [ 1] 3475 	ld a,#'\
      001363 CD 02 A0         [ 4] 3476 	call putc 
      001366 84               [ 1] 3477 	pop a 
      001367 A0 07            [ 1] 3478 	sub a,#7
      001369 C7 00 0D         [ 1] 3479 	ld acc8,a 
      00136C 72 5F 00 0C      [ 1] 3480 	clr acc16
      001370 90 AE 0B A0      [ 2] 3481 	ldw y,#escaped 
      001374 72 B9 00 0C      [ 2] 3482 	addw y,acc16 
      001378 90 F6            [ 1] 3483 	ld a,(y)
      00137A 20 DF            [ 2] 3484 	jra 2$
      00137C A6 22            [ 1] 3485 9$: ld a,#'"
      00137E CD 02 A0         [ 4] 3486 	call putc 
      001381 5C               [ 2] 3487 	incw x 
      001382 81               [ 4] 3488 	ret
                                   3489 
                                   3490 ;--------------------------
                                   3491 ; return variable name 
                                   3492 ; from its address.
                                   3493 ; input:
                                   3494 ;   X    variable address
                                   3495 ; output:
                                   3496 ;   A     variable letter
                                   3497 ;--------------------------
      001383                       3498 var_name:
      001383 1D 00 26         [ 2] 3499 		subw x,#vars 
      001386 9F               [ 1] 3500 		ld a,xl 
      001387 44               [ 1] 3501 		srl a 
      001388 AB 41            [ 1] 3502 		add a,#'A 
      00138A 81               [ 4] 3503 		ret 
                                   3504 
                                   3505 
                                   3506 ;--------------------------
                                   3507 ; decompile line from token list 
                                   3508 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3509 ;   A       stop at this position 
                                   3510 ;   X 		pointer at line
                                   3511 ; output:
                                   3512 ;   none 
                                   3513 ;--------------------------	
                           000001  3514 	BASE_SAV=1
                           000002  3515 	WIDTH_SAV=2
                           000003  3516 	XSAVE=3
                           000005  3517 	LLEN=5
                           000005  3518 	VSIZE=5 
      00138B                       3519 prt_basic_line:
      00138B                       3520 	_vars VSIZE
      00138B 52 05            [ 2]    1     sub sp,#VSIZE 
      00138D 6B 05            [ 1] 3521 	ld (LLEN,sp),a  
      00138F C6 00 0A         [ 1] 3522 	ld a,base
      001392 6B 01            [ 1] 3523 	ld (BASE_SAV,sp),a  
      001394 C6 00 24         [ 1] 3524 	ld a,tab_width 
      001397 6B 02            [ 1] 3525 	ld (WIDTH_SAV,sp),a 
      001399 CF 00 17         [ 2] 3526 	ldw ptr16,x
      00139C FE               [ 2] 3527 	ldw x,(x)
      00139D 35 0A 00 0A      [ 1] 3528 	mov base,#10
      0013A1 35 05 00 24      [ 1] 3529 	mov tab_width,#5
      0013A5 CD 09 BC         [ 4] 3530 	call print_int ; print line number 
      0013A8 A6 20            [ 1] 3531 	ld a,#SPACE 
      0013AA CD 02 A0         [ 4] 3532 	call putc 
      0013AD 72 5F 00 24      [ 1] 3533 	clr tab_width
      0013B1 AE 00 03         [ 2] 3534 	ldw x,#3
      0013B4 9F               [ 1] 3535 1$:	ld a,xl 
      0013B5 11 05            [ 1] 3536 	cp a,(LLEN,sp)
      0013B7 2B 03            [ 1] 3537 	jrmi 2$
      0013B9 CC 14 8A         [ 2] 3538 	jp 20$
      0013BC                       3539 2$:	 
      0013BC 72 D6 00 17      [ 4] 3540 	ld a,([ptr16],x)
      0013C0 5C               [ 2] 3541 	incw x 
      0013C1 1F 03            [ 2] 3542 	ldw (XSAVE,sp),x 
      0013C3 72 DE 00 17      [ 5] 3543 	ldw x,([ptr16],x)
      0013C7 4D               [ 1] 3544 	tnz a 
      0013C8 2B 0A            [ 1] 3545 	jrmi 3$
      0013CA A1 02            [ 1] 3546 	cp a,#TK_QSTR 
      0013CC 27 4B            [ 1] 3547 	jreq 6$
      0013CE A1 03            [ 1] 3548 	cp a,#TK_CHAR 
      0013D0 27 57            [ 1] 3549 	jreq 7$
      0013D2 20 64            [ 2] 3550 	jra 8$
                                   3551 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST
      0013D4                       3552 3$:	
      0013D4 A1 85            [ 1] 3553 	cp a,#TK_VAR 
      0013D6 27 34            [ 1] 3554 	jreq 4$
      0013D8 A1 84            [ 1] 3555 	cp a,#TK_INTGR
      0013DA 27 38            [ 1] 3556 	jreq 5$
      0013DC A3 15 BE         [ 2] 3557 	cpw x,#remark 
      0013DF 26 14            [ 1] 3558 	jrne 30$
      0013E1 A6 27            [ 1] 3559 	ld a,#''
      0013E3 CD 02 A0         [ 4] 3560 	call putc 
      0013E6 1E 03            [ 2] 3561 	ldw x,(XSAVE,sp)
      0013E8 1C 00 02         [ 2] 3562 	addw x,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0013EB 72 BB 00 17      [ 2] 3563 	addw x,ptr16  
      0013EF CD 02 B3         [ 4] 3564 	call puts 
      0013F2 CC 14 8A         [ 2] 3565 	jp 20$ 
      0013F5                       3566 30$:
      0013F5 A6 20            [ 1] 3567 	ld a,#SPACE 
      0013F7 CD 02 A0         [ 4] 3568 	call putc 
      0013FA CD 0F EE         [ 4] 3569 	call cmd_name
      0013FD CD 13 33         [ 4] 3570 	call prt_cmd_name
      001400 A6 20            [ 1] 3571 	ld a,#SPACE 
      001402 CD 02 A0         [ 4] 3572 	call putc 
      001405                       3573 31$:
      001405 1E 03            [ 2] 3574 	ldw x,(XSAVE,sp)
      001407 1C 00 02         [ 2] 3575 	addw x,#2
      00140A 20 A8            [ 2] 3576 	jra 1$
                                   3577 ;; TK_VAR 
      00140C                       3578 4$:
                                   3579 ;	ld a,#SPACE 
                                   3580 ;	call putc 
      00140C CD 13 83         [ 4] 3581 	call var_name
      00140F CD 02 A0         [ 4] 3582 	call putc 
      001412 20 F1            [ 2] 3583 	jra 31$
                                   3584 ;; TK_INTGR
      001414                       3585 5$:
                                   3586 ;	ld a,#SPACE 
                                   3587 ;	call putc
      001414 CD 09 BC         [ 4] 3588 	call print_int 
      001417 20 EC            [ 2] 3589 	jra 31$
                                   3590 ;; TK_QSTR
      001419                       3591 6$:
      001419 1E 03            [ 2] 3592 	ldw x,(XSAVE,sp)
      00141B 72 BB 00 17      [ 2] 3593 	addw x,ptr16 
      00141F CD 13 47         [ 4] 3594 	call prt_quote  
      001422 72 B0 00 17      [ 2] 3595 	subw x,ptr16  
      001426 CC 13 B4         [ 2] 3596 	jp 1$
                                   3597 ;; TK_CHAR 
      001429                       3598 7$:
      001429 A6 5C            [ 1] 3599 	ld a,#'\ 
      00142B CD 02 A0         [ 4] 3600 	call putc 
      00142E 9E               [ 1] 3601 	ld a,xh 
      00142F CD 02 A0         [ 4] 3602 	call putc 
      001432 1E 03            [ 2] 3603 	ldw x,(XSAVE,sp)
      001434 5C               [ 2] 3604 	incw x 
      001435 CC 13 B4         [ 2] 3605 	jp 1$ 
      001438 A1 01            [ 1] 3606 8$: cp a,#TK_COLON 
      00143A 26 0A            [ 1] 3607 	jrne 9$
      00143C A6 3A            [ 1] 3608 	ld a,#':
      00143E                       3609 81$:
      00143E CD 02 A0         [ 4] 3610 	call putc
      001441                       3611 82$:
      001441 1E 03            [ 2] 3612 	ldw x,(XSAVE,sp)
      001443 CC 13 B4         [ 2] 3613 	jp 1$ 
      001446                       3614 9$: 
      001446 A1 0A            [ 1] 3615 	cp a,#TK_SHARP
      001448 22 0E            [ 1] 3616 	jrugt 10$ 
      00144A A0 06            [ 1] 3617 	sub a,#TK_ARRAY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00144C 90 5F            [ 1] 3618 	clrw y 
      00144E 90 97            [ 1] 3619 	ld yl,a
      001450 72 A9 14 9C      [ 2] 3620 	addw y,#single_char 
      001454 90 F6            [ 1] 3621 	ld a,(y)
      001456 20 E6            [ 2] 3622 	jra 81$ 
      001458                       3623 10$: 
      001458 A1 11            [ 1] 3624 	cp a,#TK_MINUS 
      00145A 22 0E            [ 1] 3625 	jrugt 11$
      00145C A0 10            [ 1] 3626 	sub a,#TK_PLUS 
      00145E 90 5F            [ 1] 3627 	clrw y 
      001460 90 97            [ 1] 3628 	ld yl,a 
      001462 72 A9 14 A1      [ 2] 3629 	addw y,#add_char 
      001466 90 F6            [ 1] 3630 	ld a,(y)
      001468 20 D4            [ 2] 3631 	jra 81$
      00146A                       3632 11$:
      00146A A1 22            [ 1] 3633     cp a,#TK_MOD 
      00146C 22 0E            [ 1] 3634 	jrugt 12$
      00146E A0 20            [ 1] 3635 	sub a,#TK_MULT
      001470 90 5F            [ 1] 3636 	clrw y 
      001472 90 97            [ 1] 3637 	ld yl,a 
      001474 72 A9 14 A3      [ 2] 3638 	addw y,#mul_char
      001478 90 F6            [ 1] 3639 	ld a,(y)
      00147A 20 C2            [ 2] 3640 	jra 81$
      00147C                       3641 12$:
      00147C A0 31            [ 1] 3642 	sub a,#TK_GT  
      00147E 48               [ 1] 3643 	sll a 
      00147F 5F               [ 1] 3644 	clrw x 
      001480 97               [ 1] 3645 	ld xl,a 
      001481 1C 14 A6         [ 2] 3646 	addw x,#relop_str 
      001484 FE               [ 2] 3647 	ldw x,(x)
      001485 CD 02 B3         [ 4] 3648 	call puts 
      001488 20 B7            [ 2] 3649 	jra 82$
      00148A                       3650 20$: 
      00148A A6 0D            [ 1] 3651 	ld a,#CR 
      00148C CD 02 A0         [ 4] 3652 	call putc
      00148F 7B 02            [ 1] 3653 	ld a,(WIDTH_SAV,sp) 
      001491 C7 00 24         [ 1] 3654 	ld tab_width,a 
      001494 7B 01            [ 1] 3655 	ld a,(BASE_SAV,sp) 
      001496 C7 00 0A         [ 1] 3656 	ld base,a
      001499                       3657 	_drop VSIZE 
      001499 5B 05            [ 2]    1     addw sp,#VSIZE 
      00149B 81               [ 4] 3658 	ret 
                                   3659 
      00149C 40 28 29 2C 23        3660 single_char: .byte '@','(',')',',','#'
      0014A1 2B 2D                 3661 add_char: .byte '+','-'
      0014A3 2A 2F 25              3662 mul_char: .byte '*','/','%'
      0014A6 14 B2 14 B4 14 B6 14  3663 relop_str: .word gt,equal,ge,lt,le,ne 
             B9 14 BB 14 BE
      0014B2 3E 00                 3664 gt: .asciz ">"
      0014B4 3D 00                 3665 equal: .asciz "="
      0014B6 3E 3D 00              3666 ge: .asciz ">="
      0014B9 3C 00                 3667 lt: .asciz "<"
      0014BB 3C 3D 00              3668 le: .asciz "<="
      0014BE 3C 3E 00              3669 ne:  .asciz "<>"
                                   3670 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3671 
                                   3672 ;---------------------------------
                                   3673 ; BASIC: PRINT|? arg_list 
                                   3674 ; print values from argument list
                                   3675 ;----------------------------------
                           000001  3676 	COMMA=1
                           000001  3677 	VSIZE=1
      0014C1                       3678 print:
      0014C1 4B 00            [ 1] 3679 push #0 ; local variable COMMA 
      0014C3                       3680 reset_comma:
      0014C3 0F 01            [ 1] 3681 	clr (COMMA,sp)
      0014C5                       3682 prt_loop:
      0014C5 CD 09 67         [ 4] 3683 	call next_token
      0014C8 A1 02            [ 1] 3684 	cp a,#CMD_END 
      0014CA 25 5A            [ 1] 3685 	jrult print_exit ; colon or end of line 
      0014CC A1 02            [ 1] 3686 	cp a,#TK_QSTR
      0014CE 27 12            [ 1] 3687 	jreq 1$
      0014D0 A1 03            [ 1] 3688 	cp a,#TK_CHAR 
      0014D2 27 13            [ 1] 3689 	jreq 2$ 
      0014D4 A1 82            [ 1] 3690 	cp a,#TK_CFUNC 
      0014D6 27 15            [ 1] 3691 	jreq 3$
      0014D8 A1 09            [ 1] 3692 	cp a,#TK_COMMA 
      0014DA 27 18            [ 1] 3693 	jreq 4$
      0014DC A1 0A            [ 1] 3694 	cp a,#TK_SHARP 
      0014DE 27 1B            [ 1] 3695 	jreq 5$
      0014E0 20 2B            [ 2] 3696 	jra 7$ 
      0014E2                       3697 1$:	; print string 
      0014E2 CD 02 B3         [ 4] 3698 	call puts
      0014E5 20 DC            [ 2] 3699 	jra reset_comma
      0014E7                       3700 2$:	; print character 
      0014E7 9F               [ 1] 3701 	ld a,xl 
      0014E8 CD 02 A0         [ 4] 3702 	call putc 
      0014EB 20 D6            [ 2] 3703 	jra reset_comma 
      0014ED                       3704 3$: ; print character function value  	
      0014ED FD               [ 4] 3705 	call (x)
      0014EE 9F               [ 1] 3706 	ld a,xl 
      0014EF CD 02 A0         [ 4] 3707 	call putc
      0014F2 20 CF            [ 2] 3708 	jra reset_comma 
      0014F4                       3709 4$: ; set comma state 
      0014F4 A6 FF            [ 1] 3710 	ld a,#255 
      0014F6 6B 01            [ 1] 3711 	ld (COMMA,sp),a  
      0014F8 CC 14 C5         [ 2] 3712 	jp prt_loop   
      0014FB                       3713 5$: ; # character must be followed by an integer   
      0014FB CD 09 67         [ 4] 3714 	call next_token
      0014FE A1 84            [ 1] 3715 	cp a,#TK_INTGR 
      001500 27 03            [ 1] 3716 	jreq 6$
      001502 CC 08 75         [ 2] 3717 	jp syntax_error 
      001505                       3718 6$: ; set tab width
      001505 9F               [ 1] 3719 	ld a,xl 
      001506 A4 0F            [ 1] 3720 	and a,#15 
      001508 C7 00 24         [ 1] 3721 	ld tab_width,a 
      00150B 20 B6            [ 2] 3722 	jra reset_comma 
      00150D                       3723 7$:	
      00150D                       3724 	_unget_token
      00150D 55 00 02 00 01   [ 1]    1     mov in,in.saved
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001512 CD 11 C1         [ 4] 3725 	call relation 
      001515 A1 84            [ 1] 3726 	cp a,#TK_INTGR
      001517 27 08            [ 1] 3727 	jreq 8$
      001519                       3728 	_unget_token
      001519 55 00 02 00 01   [ 1]    1     mov in,in.saved
      00151E CC 15 26         [ 2] 3729 	jp print_exit 
      001521 CD 09 BC         [ 4] 3730 8$: call print_int 
      001524 20 9D            [ 2] 3731 	jra reset_comma 
      001526                       3732 print_exit:
      001526 0D 01            [ 1] 3733 	tnz (COMMA,sp)
      001528 26 05            [ 1] 3734 	jrne 9$
      00152A A6 0D            [ 1] 3735 	ld a,#CR 
      00152C CD 02 A0         [ 4] 3736     call putc 
      00152F                       3737 9$:	_drop VSIZE 
      00152F 5B 01            [ 2]    1     addw sp,#VSIZE 
      001531 81               [ 4] 3738 	ret 
                                   3739 
      001532                       3740 print_type: 
                                   3741 
                                   3742 ;----------------------
                                   3743 ; 'save_context' and
                                   3744 ; 'rest_context' must be 
                                   3745 ; called at the same 
                                   3746 ; call stack depth 
                                   3747 ; i.e. SP must have the 
                                   3748 ; save value at  
                                   3749 ; entry point of both 
                                   3750 ; routine. 
                                   3751 ;---------------------
                           000004  3752 	CTXT_SIZE=4 ; size of saved data 
                                   3753 ;--------------------
                                   3754 ; save current BASIC
                                   3755 ; interpreter context 
                                   3756 ; on stack 
                                   3757 ;--------------------
      001532                       3758 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001532                       3759 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001532                       3760 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001532                       3761 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001532                       3762 save_context:
      001532 CE 00 04         [ 2] 3763 	ldw x,basicptr 
      001535 1F 03            [ 2] 3764 	ldw (BPTR,sp),x
      001537 C6 00 01         [ 1] 3765 	ld a,in 
      00153A 6B 05            [ 1] 3766 	ld (IN,sp),a
      00153C C6 00 03         [ 1] 3767 	ld a,count 
      00153F 6B 06            [ 1] 3768 	ld (CNT,sp),a  
      001541 81               [ 4] 3769 	ret
                                   3770 
                                   3771 ;-----------------------
                                   3772 ; restore previously saved 
                                   3773 ; BASIC interpreter context 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3774 ; from stack 
                                   3775 ;-------------------------
      001542                       3776 rest_context:
      001542 1E 03            [ 2] 3777 	ldw x,(BPTR,sp)
      001544 CF 00 04         [ 2] 3778 	ldw basicptr,x 
      001547 7B 05            [ 1] 3779 	ld a,(IN,sp)
      001549 C7 00 01         [ 1] 3780 	ld in,a
      00154C 7B 06            [ 1] 3781 	ld a,(CNT,sp)
      00154E C7 00 03         [ 1] 3782 	ld count,a  
      001551 81               [ 4] 3783 	ret
                                   3784 
                                   3785 
                                   3786 
                                   3787 ;------------------------------------------
                                   3788 ; BASIC: INPUT [string]var[,[string]var]
                                   3789 ; input value in variables 
                                   3790 ; [string] optionally can be used as prompt 
                                   3791 ;-----------------------------------------
                           000001  3792 	CX_BPTR=1
                           000003  3793 	CX_IN=3
                           000004  3794 	CX_CNT=4
                           000005  3795 	SKIP=5
                           000006  3796 	VAR_ADDR=6
                           000007  3797 	VSIZE=7
      001552                       3798 input_var:
      001552                       3799 	_vars VSIZE 
      001552 52 07            [ 2]    1     sub sp,#VSIZE 
      001554                       3800 input_loop:
      001554 0F 05            [ 1] 3801 	clr (SKIP,sp)
      001556 CD 09 67         [ 4] 3802 	call next_token 
      001559 A1 02            [ 1] 3803 	cp a,#TK_QSTR 
      00155B 26 08            [ 1] 3804 	jrne 1$ 
      00155D CD 02 B3         [ 4] 3805 	call puts 
      001560 03 05            [ 1] 3806 	cpl (SKIP,sp)
      001562 CD 09 67         [ 4] 3807 	call next_token 
      001565 A1 85            [ 1] 3808 1$: cp a,#TK_VAR  
      001567 27 03            [ 1] 3809 	jreq 2$ 
      001569 CC 08 75         [ 2] 3810 	jp syntax_error
      00156C 1F 06            [ 2] 3811 2$:	ldw (VAR_ADDR,sp),x 
      00156E 0D 05            [ 1] 3812 	tnz (SKIP,sp)
      001570 26 06            [ 1] 3813 	jrne 21$ 
      001572 CD 13 83         [ 4] 3814 	call var_name 
      001575 CD 02 A0         [ 4] 3815 	call putc   
      001578                       3816 21$:
      001578 A6 3A            [ 1] 3817 	ld a,#':
      00157A CD 02 A0         [ 4] 3818 	call putc 
      00157D CD 15 32         [ 4] 3819 	call save_context 
      001580 72 5F 00 03      [ 1] 3820 	clr count  
      001584 CD 0A C7         [ 4] 3821 	call readln 
      001587 AE 16 90         [ 2] 3822 	ldw x,#tib 
      00158A 3B 00 03         [ 1] 3823 	push count
      00158D 4B 00            [ 1] 3824 	push #0 
      00158F 72 FB 01         [ 2] 3825 	addw x,(1,sp)
      001592 5C               [ 2] 3826 	incw x 
      001593                       3827 	_drop 2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001593 5B 02            [ 2]    1     addw sp,#2 
      001595 72 5F 00 01      [ 1] 3828 	clr in 
      001599 CD 0C 7C         [ 4] 3829 	call get_token
      00159C A1 84            [ 1] 3830 	cp a,#TK_INTGR
      00159E 27 06            [ 1] 3831 	jreq 3$ 
      0015A0 CD 15 42         [ 4] 3832 	call rest_context 
      0015A3 CC 08 75         [ 2] 3833 	jp syntax_error
      0015A6 16 06            [ 2] 3834 3$: ldw y,(VAR_ADDR,sp) 
      0015A8 90 FF            [ 2] 3835 	ldw (y),x 
      0015AA CD 15 42         [ 4] 3836 	call rest_context
      0015AD CD 09 67         [ 4] 3837 	call next_token 
      0015B0 A1 09            [ 1] 3838 	cp a,#TK_COMMA 
      0015B2 27 A0            [ 1] 3839 	jreq input_loop 
      0015B4 A1 01            [ 1] 3840 	cp a,#TK_COLON 
      0015B6 23 03            [ 2] 3841     jrule input_exit 
      0015B8 CC 08 75         [ 2] 3842 	jp syntax_error 
      0015BB                       3843 input_exit:
      0015BB                       3844 	_drop VSIZE 
      0015BB 5B 07            [ 2]    1     addw sp,#VSIZE 
      0015BD 81               [ 4] 3845 	ret 
                                   3846 
                                   3847 
                                   3848 ;---------------------
                                   3849 ; BASIC: REMARK | ' 
                                   3850 ; skip comment to end of line 
                                   3851 ;---------------------- 
      0015BE                       3852 remark:
      0015BE 55 00 03 00 01   [ 1] 3853 	mov in,count 
      0015C3 81               [ 4] 3854  	ret 
                                   3855 
                                   3856 
                                   3857 ;---------------------
                                   3858 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3859 ; read in loop 'addr'  
                                   3860 ; apply & 'mask' to value 
                                   3861 ; loop while result==0.  
                                   3862 ; 'xor_mask' is used to 
                                   3863 ; invert the wait logic.
                                   3864 ; i.e. loop while not 0.
                                   3865 ;---------------------
                           000001  3866 	XMASK=1 
                           000002  3867 	MASK=2
                           000003  3868 	ADDR=3
                           000004  3869 	VSIZE=4
      0015C4                       3870 wait: 
      0015C4                       3871 	_vars VSIZE
      0015C4 52 04            [ 2]    1     sub sp,#VSIZE 
      0015C6 0F 01            [ 1] 3872 	clr (XMASK,sp) 
      0015C8 CD 10 7F         [ 4] 3873 	call arg_list 
      0015CB A1 02            [ 1] 3874 	cp a,#2
      0015CD 24 03            [ 1] 3875 	jruge 0$
      0015CF CC 08 75         [ 2] 3876 	jp syntax_error 
      0015D2 A1 03            [ 1] 3877 0$:	cp a,#3
      0015D4 25 04            [ 1] 3878 	jrult 1$
      0015D6 85               [ 2] 3879 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0015D7 9F               [ 1] 3880 	ld a,xl
      0015D8 6B 01            [ 1] 3881 	ld (XMASK,sp),a 
      0015DA 85               [ 2] 3882 1$: popw x ; mask 
      0015DB 9F               [ 1] 3883 	ld a,xl 
      0015DC 6B 02            [ 1] 3884 	ld (MASK,sp),a 
      0015DE 85               [ 2] 3885 	popw x ; address 
      0015DF F6               [ 1] 3886 2$:	ld a,(x)
      0015E0 14 02            [ 1] 3887 	and a,(MASK,sp)
      0015E2 18 01            [ 1] 3888 	xor a,(XMASK,sp)
      0015E4 27 F9            [ 1] 3889 	jreq 2$ 
      0015E6                       3890 	_drop VSIZE 
      0015E6 5B 04            [ 2]    1     addw sp,#VSIZE 
      0015E8 81               [ 4] 3891 	ret 
                                   3892 
                                   3893 ;---------------------
                                   3894 ; BASIC: BSET addr,mask
                                   3895 ; set bits at 'addr' corresponding 
                                   3896 ; to those of 'mask' that are at 1.
                                   3897 ; arguments:
                                   3898 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3899 ;   mask        mask|addr
                                   3900 ; output:
                                   3901 ;	none 
                                   3902 ;--------------------------
      0015E9                       3903 bit_set:
      0015E9 CD 10 7F         [ 4] 3904 	call arg_list 
      0015EC A1 02            [ 1] 3905 	cp a,#2	 
      0015EE 27 03            [ 1] 3906 	jreq 1$ 
      0015F0 CC 08 75         [ 2] 3907 	jp syntax_error
      0015F3                       3908 1$: 
      0015F3 85               [ 2] 3909 	popw x ; mask 
      0015F4 9F               [ 1] 3910 	ld a,xl 
      0015F5 85               [ 2] 3911 	popw x ; addr  
      0015F6 FA               [ 1] 3912 	or a,(x)
      0015F7 F7               [ 1] 3913 	ld (x),a
      0015F8 81               [ 4] 3914 	ret 
                                   3915 
                                   3916 ;---------------------
                                   3917 ; BASIC: BRES addr,mask
                                   3918 ; reset bits at 'addr' corresponding 
                                   3919 ; to those of 'mask' that are at 1.
                                   3920 ; arguments:
                                   3921 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3922 ;   mask	    ~mask&*addr  
                                   3923 ; output:
                                   3924 ;	none 
                                   3925 ;--------------------------
      0015F9                       3926 bit_reset:
      0015F9 CD 10 7F         [ 4] 3927 	call arg_list 
      0015FC A1 02            [ 1] 3928 	cp a,#2  
      0015FE 27 03            [ 1] 3929 	jreq 1$ 
      001600 CC 08 75         [ 2] 3930 	jp syntax_error
      001603                       3931 1$: 
      001603 85               [ 2] 3932 	popw x ; mask 
      001604 9F               [ 1] 3933 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001605 43               [ 1] 3934 	cpl a 
      001606 85               [ 2] 3935 	popw x ; addr  
      001607 F4               [ 1] 3936 	and a,(x)
      001608 F7               [ 1] 3937 	ld (x),a 
      001609 81               [ 4] 3938 	ret 
                                   3939 
                                   3940 ;---------------------
                                   3941 ; BASIC: BTOGL addr,mask
                                   3942 ; toggle bits at 'addr' corresponding 
                                   3943 ; to those of 'mask' that are at 1.
                                   3944 ; arguments:
                                   3945 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3946 ;   mask	    mask^*addr  
                                   3947 ; output:
                                   3948 ;	none 
                                   3949 ;--------------------------
      00160A                       3950 bit_toggle:
      00160A CD 10 7F         [ 4] 3951 	call arg_list 
      00160D A1 02            [ 1] 3952 	cp a,#2 
      00160F 27 03            [ 1] 3953 	jreq 1$ 
      001611 CC 08 75         [ 2] 3954 	jp syntax_error
      001614 85               [ 2] 3955 1$: popw x ; mask 
      001615 9F               [ 1] 3956 	ld a,xl 
      001616 85               [ 2] 3957 	popw x ; addr  
      001617 F8               [ 1] 3958 	xor a,(x)
      001618 F7               [ 1] 3959 	ld (x),a 
      001619 81               [ 4] 3960 	ret 
                                   3961 
                                   3962 
                                   3963 ;---------------------
                                   3964 ; BASIC: BTEST(addr,bit)
                                   3965 ; return bit value at 'addr' 
                                   3966 ; bit is in range {0..7}.
                                   3967 ; arguments:
                                   3968 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3969 ;   bit 	    bit position {0..7}  
                                   3970 ; output:
                                   3971 ;	none 
                                   3972 ;--------------------------
      00161A                       3973 bit_test:
      00161A CD 10 7A         [ 4] 3974 	call func_args 
      00161D A1 02            [ 1] 3975 	cp a,#2
      00161F 27 03            [ 1] 3976 	jreq 0$
      001621 CC 08 75         [ 2] 3977 	jp syntax_error
      001624                       3978 0$:	
      001624 85               [ 2] 3979 	popw x 
      001625 9F               [ 1] 3980 	ld a,xl 
      001626 A4 07            [ 1] 3981 	and a,#7
      001628 88               [ 1] 3982 	push a   
      001629 A6 01            [ 1] 3983 	ld a,#1 
      00162B 0D 01            [ 1] 3984 1$: tnz (1,sp)
      00162D 27 05            [ 1] 3985 	jreq 2$
      00162F 48               [ 1] 3986 	sll a 
      001630 0A 01            [ 1] 3987 	dec (1,sp)
      001632 20 F7            [ 2] 3988 	jra 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001634                       3989 2$: _drop 1 
      001634 5B 01            [ 2]    1     addw sp,#1 
      001636 85               [ 2] 3990 	popw x 
      001637 F4               [ 1] 3991 	and a,(x)
      001638 27 02            [ 1] 3992 	jreq 3$
      00163A A6 01            [ 1] 3993 	ld a,#1 
      00163C 5F               [ 1] 3994 3$:	clrw x 
      00163D 97               [ 1] 3995 	ld xl,a 
      00163E A6 84            [ 1] 3996 	ld a,#TK_INTGR
      001640 81               [ 4] 3997 	ret
                                   3998 
                                   3999 
                                   4000 ;--------------------
                                   4001 ; BASIC: POKE addr,byte
                                   4002 ; put a byte at addr 
                                   4003 ;--------------------
      001641                       4004 poke:
      001641 CD 10 7F         [ 4] 4005 	call arg_list 
      001644 A1 02            [ 1] 4006 	cp a,#2
      001646 27 03            [ 1] 4007 	jreq 1$
      001648 CC 08 75         [ 2] 4008 	jp syntax_error
      00164B                       4009 1$:	
      00164B 85               [ 2] 4010 	popw x  
      00164C 9F               [ 1] 4011     ld a,xl 
      00164D 85               [ 2] 4012 	popw x 
      00164E F7               [ 1] 4013 	ld (x),a 
      00164F 81               [ 4] 4014 	ret 
                                   4015 
                                   4016 ;-----------------------
                                   4017 ; BASIC: PEEK(addr)
                                   4018 ; get the byte at addr 
                                   4019 ; input:
                                   4020 ;	none 
                                   4021 ; output:
                                   4022 ;	X 		value 
                                   4023 ;-----------------------
      001650                       4024 peek:
      001650 CD 10 7A         [ 4] 4025 	call func_args
      001653 A1 01            [ 1] 4026 	cp a,#1 
      001655 27 03            [ 1] 4027 	jreq 1$
      001657 CC 08 75         [ 2] 4028 	jp syntax_error
      00165A 85               [ 2] 4029 1$: popw x 
      00165B F6               [ 1] 4030 	ld a,(x)
      00165C 5F               [ 1] 4031 	clrw x 
      00165D 97               [ 1] 4032 	ld xl,a 
      00165E A6 84            [ 1] 4033 	ld a,#TK_INTGR
      001660 81               [ 4] 4034 	ret 
                                   4035 
                                   4036 ;---------------------------
                                   4037 ; BASIC IF expr : instructions
                                   4038 ; evaluate expr and if true 
                                   4039 ; execute instructions on same line. 
                                   4040 ;----------------------------
      001661                       4041 if: 
      001661 CD 11 C1         [ 4] 4042 	call relation 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001664 A1 84            [ 1] 4043 	cp a,#TK_INTGR
      001666 27 03            [ 1] 4044 	jreq 1$ 
      001668 CC 08 75         [ 2] 4045 	jp syntax_error
      00166B 4F               [ 1] 4046 1$:	clr a 
      00166C 5D               [ 2] 4047 	tnzw x 
      00166D 26 05            [ 1] 4048 	jrne 9$  
                                   4049 ;skip to next line
      00166F 55 00 03 00 01   [ 1] 4050 	mov in,count
      001674 81               [ 4] 4051 9$:	ret 
                                   4052 
                                   4053 ;------------------------
                                   4054 ; BASIC: FOR var=expr 
                                   4055 ; set variable to expression 
                                   4056 ; leave variable address 
                                   4057 ; on stack and set
                                   4058 ; FLOOP bit in 'flags'
                                   4059 ;-----------------
                           000001  4060 	RETL1=1 ; return address  
                           000003  4061 	FSTEP=3  ; variable increment
                           000005  4062 	LIMIT=5 ; loop limit 
                           000007  4063 	CVAR=7   ; control variable 
                           000009  4064 	INW=9   ;  in.w saved
                           00000B  4065 	BPTR=11 ; baseptr saved
                           00000A  4066 	VSIZE=10  
      001675                       4067 for: ; { -- var_addr }
      001675 85               [ 2] 4068 	popw x ; call return address 
      001676                       4069 	_vars VSIZE 
      001676 52 0A            [ 2]    1     sub sp,#VSIZE 
      001678 89               [ 2] 4070 	pushw x  ; RETL1 
      001679 A6 85            [ 1] 4071 	ld a,#TK_VAR 
      00167B CD 10 6D         [ 4] 4072 	call expect
      00167E 1F 07            [ 2] 4073 	ldw (CVAR,sp),x  ; control variable 
      001680 CD 12 A4         [ 4] 4074 	call let_var 
      001683 72 14 00 23      [ 1] 4075 	bset flags,#FLOOP 
                                   4076 ; open space on stack for loop data 
      001687 5F               [ 1] 4077 	clrw x 
      001688 1F 0B            [ 2] 4078 	ldw (BPTR,sp),x 
      00168A 1F 09            [ 2] 4079 	ldw (INW,sp),x 
      00168C CD 09 67         [ 4] 4080 	call next_token 
      00168F A1 80            [ 1] 4081 	cp a,#TK_CMD 
      001691 27 03            [ 1] 4082 	jreq 1$
      001693 CC 08 75         [ 2] 4083 	jp syntax_error
      001696                       4084 1$:  
      001696 A3 16 9E         [ 2] 4085 	cpw x,#to 
      001699 27 03            [ 1] 4086 	jreq to
      00169B CC 08 75         [ 2] 4087 	jp syntax_error 
                                   4088 
                                   4089 ;-----------------------------------
                                   4090 ; BASIC: TO expr 
                                   4091 ; second part of FOR loop initilization
                                   4092 ; leave limit on stack and set 
                                   4093 ; FTO bit in 'flags'
                                   4094 ;-----------------------------------
      00169E                       4095 to: ; { var_addr -- var_addr limit step }
      00169E 72 04 00 23 03   [ 2] 4096 	btjt flags,#FLOOP,1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0016A3 CC 08 75         [ 2] 4097 	jp syntax_error
      0016A6 CD 11 C1         [ 4] 4098 1$: call relation  
      0016A9 A1 84            [ 1] 4099 	cp a,#TK_INTGR 
      0016AB 27 03            [ 1] 4100 	jreq 2$ 
      0016AD CC 08 75         [ 2] 4101 	jp syntax_error
      0016B0 1F 05            [ 2] 4102 2$: ldw (LIMIT,sp),x
                                   4103 ;	ldw x,in.w 
      0016B2 CD 09 67         [ 4] 4104 	call next_token
      0016B5 A1 00            [ 1] 4105 	cp a,#TK_NONE  
      0016B7 27 0E            [ 1] 4106 	jreq 4$ 
      0016B9 A1 80            [ 1] 4107 	cp a,#TK_CMD
      0016BB 26 05            [ 1] 4108 	jrne 3$
      0016BD A3 16 CE         [ 2] 4109 	cpw x,#step 
      0016C0 27 0C            [ 1] 4110 	jreq step
      0016C2                       4111 3$:	
      0016C2                       4112 	_unget_token   	 
      0016C2 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0016C7                       4113 4$:	
      0016C7 AE 00 01         [ 2] 4114 	ldw x,#1   ; default step  
      0016CA 1F 03            [ 2] 4115 	ldw (FSTEP,sp),x 
      0016CC 20 14            [ 2] 4116 	jra store_loop_addr 
                                   4117 
                                   4118 
                                   4119 ;----------------------------------
                                   4120 ; BASIC: STEP expr 
                                   4121 ; optional third par of FOR loop
                                   4122 ; initialization. 	
                                   4123 ;------------------------------------
      0016CE                       4124 step: ; {var limit -- var limit step}
      0016CE 72 04 00 23 03   [ 2] 4125 	btjt flags,#FLOOP,1$
      0016D3 CC 08 75         [ 2] 4126 	jp syntax_error
      0016D6 CD 11 C1         [ 4] 4127 1$: call relation
      0016D9 A1 84            [ 1] 4128 	cp a,#TK_INTGR
      0016DB 27 03            [ 1] 4129 	jreq 2$
      0016DD CC 08 75         [ 2] 4130 	jp syntax_error
      0016E0 1F 03            [ 2] 4131 2$:	ldw (FSTEP,sp),x ; step
                                   4132 ; leave loop back entry point on cstack 
                                   4133 ; cstack is 1 call deep from interpreter
      0016E2                       4134 store_loop_addr:
      0016E2 CE 00 04         [ 2] 4135 	ldw x,basicptr  
      0016E5 1F 0B            [ 2] 4136 	ldw (BPTR,sp),x 
      0016E7 CE 00 00         [ 2] 4137 	ldw x,in.w 
      0016EA 1F 09            [ 2] 4138 	ldw (INW,sp),x   
      0016EC 72 15 00 23      [ 1] 4139 	bres flags,#FLOOP 
      0016F0 72 5C 00 20      [ 1] 4140 	inc loop_depth  
      0016F4 81               [ 4] 4141 	ret 
                                   4142 
                                   4143 ;--------------------------------
                                   4144 ; BASIC: NEXT var 
                                   4145 ; FOR loop control 
                                   4146 ; increment variable with step 
                                   4147 ; and compare with limit 
                                   4148 ; loop if threshold not crossed.
                                   4149 ; else stack. 
                                   4150 ; and decrement 'loop_depth' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4151 ;--------------------------------
      0016F5                       4152 next: ; {var limit step retl1 -- [var limit step ] }
      0016F5 72 5D 00 20      [ 1] 4153 	tnz loop_depth 
      0016F9 26 03            [ 1] 4154 	jrne 1$ 
      0016FB CC 08 75         [ 2] 4155 	jp syntax_error 
      0016FE                       4156 1$: 
      0016FE A6 85            [ 1] 4157 	ld a,#TK_VAR 
      001700 CD 10 6D         [ 4] 4158 	call expect
                                   4159 ; check for good variable after NEXT 	 
      001703 13 07            [ 2] 4160 	cpw x,(CVAR,sp)
      001705 27 03            [ 1] 4161 	jreq 2$  
      001707 CC 08 75         [ 2] 4162 	jp syntax_error ; not the good one 
      00170A                       4163 2$: ; increment variable 
      00170A FE               [ 2] 4164 	ldw x,(x)  ; get var value 
      00170B 72 FB 03         [ 2] 4165 	addw x,(FSTEP,sp) ; var+step 
      00170E 16 07            [ 2] 4166 	ldw y,(CVAR,sp)
      001710 90 FF            [ 2] 4167 	ldw (y),x ; save var new value 
                                   4168 ; check sign of STEP  
      001712 A6 80            [ 1] 4169 	ld a,#0x80
      001714 15 03            [ 1] 4170 	bcp a,(FSTEP,sp)
      001716 2A 06            [ 1] 4171 	jrpl 4$
                                   4172 ;negative step 
      001718 13 05            [ 2] 4173 	cpw x,(LIMIT,sp)
      00171A 2F 1B            [ 1] 4174 	jrslt loop_done
      00171C 20 04            [ 2] 4175 	jra loop_back 
      00171E                       4176 4$: ; positive step
      00171E 13 05            [ 2] 4177 	cpw x,(LIMIT,sp)
      001720 2C 15            [ 1] 4178 	jrsgt loop_done
      001722                       4179 loop_back:
      001722 1E 0B            [ 2] 4180 	ldw x,(BPTR,sp)
      001724 CF 00 04         [ 2] 4181 	ldw basicptr,x 
      001727 72 01 00 23 05   [ 2] 4182 	btjf flags,#FRUN,1$ 
      00172C E6 02            [ 1] 4183 	ld a,(2,x)
      00172E C7 00 03         [ 1] 4184 	ld count,a
      001731 1E 09            [ 2] 4185 1$:	ldw x,(INW,sp)
      001733 CF 00 00         [ 2] 4186 	ldw in.w,x 
      001736 81               [ 4] 4187 	ret 
      001737                       4188 loop_done:
                                   4189 	; remove loop data from stack  
      001737 85               [ 2] 4190 	popw x
      001738                       4191 	_drop VSIZE 
      001738 5B 0A            [ 2]    1     addw sp,#VSIZE 
      00173A 72 5A 00 20      [ 1] 4192 	dec loop_depth 
                                   4193 ;	pushw x 
                                   4194 ;	ret 
      00173E FC               [ 2] 4195 	jp (x)
                                   4196 
                                   4197 ;----------------------------
                                   4198 ; called by goto/gosub
                                   4199 ; to get target line number 
                                   4200 ;---------------------------
      00173F                       4201 get_target_line:
      00173F CD 11 C1         [ 4] 4202 	call relation 
      001742 A1 84            [ 1] 4203 	cp a,#TK_INTGR
      001744 27 03            [ 1] 4204 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001746 CC 08 75         [ 2] 4205 	jp syntax_error
      001749 CD 04 00         [ 4] 4206 1$:	call search_lineno  
      00174C 5D               [ 2] 4207 	tnzw x 
      00174D 26 05            [ 1] 4208 	jrne 2$ 
      00174F A6 05            [ 1] 4209 	ld a,#ERR_NO_LINE 
      001751 CC 08 77         [ 2] 4210 	jp tb_error 
      001754 81               [ 4] 4211 2$:	ret 
                                   4212 
                                   4213 ;------------------------
                                   4214 ; BASIC: GOTO line# 
                                   4215 ; jump to line# 
                                   4216 ; here cstack is 2 call deep from interpreter 
                                   4217 ;------------------------
      001755                       4218 goto:
      001755 72 00 00 23 06   [ 2] 4219 	btjt flags,#FRUN,0$ 
      00175A A6 06            [ 1] 4220 	ld a,#ERR_RUN_ONLY
      00175C CC 08 77         [ 2] 4221 	jp tb_error 
      00175F 81               [ 4] 4222 	ret 
      001760 CD 17 3F         [ 4] 4223 0$:	call get_target_line
      001763                       4224 jp_to_target:
      001763 CF 00 04         [ 2] 4225 	ldw basicptr,x 
      001766 E6 02            [ 1] 4226 	ld a,(2,x)
      001768 C7 00 03         [ 1] 4227 	ld count,a 
      00176B 35 03 00 01      [ 1] 4228 	mov in,#3 
      00176F 81               [ 4] 4229 	ret 
                                   4230 
                                   4231 
                                   4232 ;--------------------
                                   4233 ; BASIC: GOSUB line#
                                   4234 ; basic subroutine call
                                   4235 ; actual line# and basicptr 
                                   4236 ; are saved on cstack
                                   4237 ; here cstack is 2 call deep from interpreter 
                                   4238 ;--------------------
                           000003  4239 	RET_ADDR=3
                           000005  4240 	RET_INW=5
                           000004  4241 	VSIZE=4  
      001770                       4242 gosub:
      001770 72 00 00 23 06   [ 2] 4243 	btjt flags,#FRUN,0$ 
      001775 A6 06            [ 1] 4244 	ld a,#ERR_RUN_ONLY
      001777 CC 08 77         [ 2] 4245 	jp tb_error 
      00177A 81               [ 4] 4246 	ret 
      00177B 85               [ 2] 4247 0$:	popw x 
      00177C                       4248 	_vars VSIZE  
      00177C 52 04            [ 2]    1     sub sp,#VSIZE 
      00177E 89               [ 2] 4249 	pushw x 
      00177F CE 00 04         [ 2] 4250 	ldw x,basicptr
      001782 1F 03            [ 2] 4251 	ldw (RET_ADDR,sp),x 
      001784 CD 17 3F         [ 4] 4252 	call get_target_line  
      001787 89               [ 2] 4253 	pushw x 
      001788 CE 00 00         [ 2] 4254 	ldw x,in.w 
      00178B 1F 07            [ 2] 4255 	ldw (RET_INW+2,sp),x
      00178D 85               [ 2] 4256 	popw x 
      00178E 20 D3            [ 2] 4257 	jra jp_to_target
                                   4258 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4259 ;------------------------
                                   4260 ; BASIC: RETURN 
                                   4261 ; exit from a subroutine 
                                   4262 ; 
                                   4263 ;------------------------
      001790                       4264 return:
      001790 72 00 00 23 05   [ 2] 4265 	btjt flags,#FRUN,0$ 
      001795 A6 06            [ 1] 4266 	ld a,#ERR_RUN_ONLY
      001797 CC 08 77         [ 2] 4267 	jp tb_error 
      00179A                       4268 0$:	
      00179A 1E 03            [ 2] 4269 	ldw x,(RET_ADDR,sp) 
      00179C CF 00 04         [ 2] 4270 	ldw basicptr,x
      00179F E6 02            [ 1] 4271 	ld a,(2,x)
      0017A1 C7 00 03         [ 1] 4272 	ld count,a  
      0017A4 1E 05            [ 2] 4273 	ldw x,(RET_INW,sp)
      0017A6 CF 00 00         [ 2] 4274 	ldw in.w,x 
      0017A9 85               [ 2] 4275 	popw x 
      0017AA                       4276 	_drop VSIZE 
      0017AA 5B 04            [ 2]    1     addw sp,#VSIZE 
      0017AC 89               [ 2] 4277 	pushw x
      0017AD 81               [ 4] 4278 	ret  
                                   4279 
                                   4280 
                                   4281 ;----------------------------------
                                   4282 ; BASIC: RUN
                                   4283 ; run BASIC program in RAM
                                   4284 ;----------------------------------- 
      0017AE                       4285 run: 
      0017AE 72 01 00 23 02   [ 2] 4286 	btjf flags,#FRUN,0$  
      0017B3 4F               [ 1] 4287 	clr a 
      0017B4 81               [ 4] 4288 	ret
      0017B5                       4289 0$: 
      0017B5 72 09 00 23 12   [ 2] 4290 	btjf flags,#FBREAK,1$
      0017BA                       4291 	_drop 2 
      0017BA 5B 02            [ 2]    1     addw sp,#2 
      0017BC CD 15 42         [ 4] 4292 	call rest_context
      0017BF                       4293 	_drop CTXT_SIZE 
      0017BF 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0017C1 72 19 00 23      [ 1] 4294 	bres flags,#FBREAK 
      0017C5 72 10 00 23      [ 1] 4295 	bset flags,#FRUN 
      0017C9 CC 09 1B         [ 2] 4296 	jp interpreter 
      0017CC CE 00 1C         [ 2] 4297 1$:	ldw x,txtbgn
      0017CF C3 00 1E         [ 2] 4298 	cpw x,txtend 
      0017D2 2B 0C            [ 1] 4299 	jrmi run_it 
      0017D4 AE 08 10         [ 2] 4300 	ldw x,#err_no_prog
      0017D7 CD 02 B3         [ 4] 4301 	call puts 
      0017DA 55 00 03 00 01   [ 1] 4302 	mov in,count
      0017DF 81               [ 4] 4303 	ret 
      0017E0                       4304 run_it:	 
      0017E0 CD 12 71         [ 4] 4305     call ubound 
      0017E3                       4306 	_drop 2 ; drop return address 
      0017E3 5B 02            [ 2]    1     addw sp,#2 
                                   4307 ; clear data pointer 
      0017E5 5F               [ 1] 4308 	clrw x 
      0017E6 CF 00 06         [ 2] 4309 	ldw data_ptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0017E9 72 5F 00 08      [ 1] 4310 	clr data_ofs 
      0017ED 72 5F 00 09      [ 1] 4311 	clr data_len 
                                   4312 ; initialize BASIC pointer 
      0017F1 CE 00 1C         [ 2] 4313 	ldw x,txtbgn 
      0017F4 CF 00 04         [ 2] 4314 	ldw basicptr,x 
      0017F7 E6 02            [ 1] 4315 	ld a,(2,x)
      0017F9 C7 00 03         [ 1] 4316 	ld count,a
      0017FC 35 03 00 01      [ 1] 4317 	mov in,#3	
      001800 72 10 00 23      [ 1] 4318 	bset flags,#FRUN 
      001804 CC 09 1B         [ 2] 4319 	jp interpreter 
                                   4320 
                                   4321 
                                   4322 ;----------------------
                                   4323 ; BASIC: END
                                   4324 ; end running program
                                   4325 ;---------------------- 
      001807                       4326 cmd_end: 
                                   4327 ; clean stack 
      001807 AE 17 FF         [ 2] 4328 	ldw x,#STACK_EMPTY
      00180A 94               [ 1] 4329 	ldw sp,x 
      00180B CC 08 FC         [ 2] 4330 	jp warm_start
                                   4331 
                                   4332 
                                   4333 ;-----------------------
                                   4334 ; BASIC: TONE expr1,expr2
                                   4335 ; used TIMER2 channel 1
                                   4336 ; to produce a tone 
                                   4337 ; arguments:
                                   4338 ;    expr1   frequency 
                                   4339 ;    expr2   duration msec.
                                   4340 ;---------------------------
      00180E                       4341 tone:
      00180E CD 10 7F         [ 4] 4342 	call arg_list 
      001811 A1 02            [ 1] 4343 	cp a,#2 
      001813 27 03            [ 1] 4344 	jreq 1$
      001815 CC 08 75         [ 2] 4345 	jp syntax_error 
      001818                       4346 1$: 
      001818 85               [ 2] 4347 	popw x ; duration
      001819 90 85            [ 2] 4348 	popw y ; frequency 
      00181B                       4349 beep:  
      00181B 89               [ 2] 4350 	pushw x 
      00181C AE F4 24         [ 2] 4351 	ldw x,#TIM2_CLK_FREQ
      00181F 65               [ 2] 4352 	divw x,y 
                                   4353 ; round to nearest integer 
      001820 90 A3 7A 12      [ 2] 4354 	cpw y,#TIM2_CLK_FREQ/2
      001824 2B 01            [ 1] 4355 	jrmi 2$
      001826 5C               [ 2] 4356 	incw x 
      001827                       4357 2$:	 
      001827 9E               [ 1] 4358 	ld a,xh 
      001828 C7 53 0D         [ 1] 4359 	ld TIM2_ARRH,a 
      00182B 9F               [ 1] 4360 	ld a,xl 
      00182C C7 53 0E         [ 1] 4361 	ld TIM2_ARRL,a 
                                   4362 ; 50% duty cycle 
      00182F 8C               [ 1] 4363 	ccf 
      001830 56               [ 2] 4364 	rrcw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001831 9E               [ 1] 4365 	ld a,xh 
      001832 C7 53 0F         [ 1] 4366 	ld TIM2_CCR1H,a 
      001835 9F               [ 1] 4367 	ld a,xl
      001836 C7 53 10         [ 1] 4368 	ld TIM2_CCR1L,a
      001839 72 10 53 08      [ 1] 4369 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      00183D 72 10 53 00      [ 1] 4370 	bset TIM2_CR1,#TIM2_CR1_CEN
      001841 72 10 53 04      [ 1] 4371 	bset TIM2_EGR,#TIM2_EGR_UG
      001845 85               [ 2] 4372 	popw x 
      001846 CD 1D BC         [ 4] 4373 	call pause02
      001849 72 11 53 08      [ 1] 4374 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      00184D 72 11 53 00      [ 1] 4375 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001851 81               [ 4] 4376 	ret 
                                   4377 
                                   4378 ;-------------------------------
                                   4379 ; BASIC: ADCON 0|1 [,divisor]  
                                   4380 ; disable/enanble ADC 
                                   4381 ;-------------------------------
                           000003  4382 	ONOFF=3 
                           000001  4383 	DIVSOR=1
                           000004  4384 	VSIZE=4 
      001852                       4385 power_adc:
      001852 CD 10 7F         [ 4] 4386 	call arg_list 
      001855 A1 02            [ 1] 4387 	cp a,#2	
      001857 27 0B            [ 1] 4388 	jreq 1$
      001859 A1 01            [ 1] 4389 	cp a,#1 
      00185B 27 03            [ 1] 4390 	jreq 0$ 
      00185D CC 08 75         [ 2] 4391 	jp syntax_error 
      001860 AE 00 00         [ 2] 4392 0$: ldw x,#0
      001863 89               [ 2] 4393 	pushw x  ; divisor 
      001864 1E 03            [ 2] 4394 1$: ldw x,(ONOFF,sp)
      001866 5D               [ 2] 4395 	tnzw x 
      001867 27 1A            [ 1] 4396 	jreq 2$ 
      001869 1E 01            [ 2] 4397 	ldw x,(DIVSOR,sp) ; divisor 
      00186B 9F               [ 1] 4398 	ld a,xl
      00186C A4 07            [ 1] 4399 	and a,#7
      00186E 4E               [ 1] 4400 	swap a 
      00186F C7 54 01         [ 1] 4401 	ld ADC_CR1,a
      001872 72 16 50 CA      [ 1] 4402 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001876 72 10 54 01      [ 1] 4403 	bset ADC_CR1,#ADC_CR1_ADON 
      00187A                       4404 	_usec_dly 7 
      00187A AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00187D 5A               [ 2]    2     decw x
      00187E 9D               [ 1]    3     nop 
      00187F 26 FA            [ 1]    4     jrne .-4
      001881 20 08            [ 2] 4405 	jra 3$
      001883 72 11 54 01      [ 1] 4406 2$: bres ADC_CR1,#ADC_CR1_ADON
      001887 72 17 50 CA      [ 1] 4407 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00188B                       4408 3$:	_drop VSIZE 
      00188B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00188D 81               [ 4] 4409 	ret
                                   4410 
                                   4411 ;-----------------------------
                                   4412 ; BASIC: ADCREAD (channel)
                                   4413 ; read adc channel {0..5}
                                   4414 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4415 ;   A 		TK_INTGR 
                                   4416 ;   X 		value 
                                   4417 ;-----------------------------
      00188E                       4418 analog_read:
      00188E CD 10 7A         [ 4] 4419 	call func_args 
      001891 A1 01            [ 1] 4420 	cp a,#1 
      001893 27 03            [ 1] 4421 	jreq 1$
      001895 CC 08 75         [ 2] 4422 	jp syntax_error
      001898 85               [ 2] 4423 1$: popw x 
      001899 A3 00 05         [ 2] 4424 	cpw x,#5 
      00189C 23 05            [ 2] 4425 	jrule 2$
      00189E A6 0A            [ 1] 4426 	ld a,#ERR_BAD_VALUE
      0018A0 CC 08 77         [ 2] 4427 	jp tb_error 
      0018A3 9F               [ 1] 4428 2$: ld a,xl
      0018A4 C7 00 0D         [ 1] 4429 	ld acc8,a 
      0018A7 A6 05            [ 1] 4430 	ld a,#5
      0018A9 C0 00 0D         [ 1] 4431 	sub a,acc8 
      0018AC C7 54 00         [ 1] 4432 	ld ADC_CSR,a
      0018AF 72 16 54 02      [ 1] 4433 	bset ADC_CR2,#ADC_CR2_ALIGN
      0018B3 72 10 54 01      [ 1] 4434 	bset ADC_CR1,#ADC_CR1_ADON
      0018B7 72 0F 54 00 FB   [ 2] 4435 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0018BC CE 54 04         [ 2] 4436 	ldw x,ADC_DRH
      0018BF A6 84            [ 1] 4437 	ld a,#TK_INTGR
      0018C1 81               [ 4] 4438 	ret 
                                   4439 
                                   4440 ;-----------------------
                                   4441 ; BASIC: DREAD(pin)
                                   4442 ; Arduino pins 
                                   4443 ; read state of a digital pin 
                                   4444 ; pin# {0..15}
                                   4445 ; output:
                                   4446 ;    A 		TK_INTGR
                                   4447 ;    X      0|1 
                                   4448 ;-------------------------
                           000001  4449 	PINNO=1
                           000001  4450 	VSIZE=1
      0018C2                       4451 digital_read:
      0018C2                       4452 	_vars VSIZE 
      0018C2 52 01            [ 2]    1     sub sp,#VSIZE 
      0018C4 CD 10 7A         [ 4] 4453 	call func_args
      0018C7 A1 01            [ 1] 4454 	cp a,#1
      0018C9 27 03            [ 1] 4455 	jreq 1$
      0018CB CC 08 75         [ 2] 4456 	jp syntax_error
      0018CE 85               [ 2] 4457 1$: popw x 
      0018CF A3 00 0F         [ 2] 4458 	cpw x,#15 
      0018D2 23 05            [ 2] 4459 	jrule 2$
      0018D4 A6 0A            [ 1] 4460 	ld a,#ERR_BAD_VALUE
      0018D6 CC 08 77         [ 2] 4461 	jp tb_error 
      0018D9 CD 1E EF         [ 4] 4462 2$:	call select_pin 
      0018DC 6B 01            [ 1] 4463 	ld (PINNO,sp),a
      0018DE E6 01            [ 1] 4464 	ld a,(GPIO_IDR,x)
      0018E0 0D 01            [ 1] 4465 	tnz (PINNO,sp)
      0018E2 27 05            [ 1] 4466 	jreq 8$
      0018E4 44               [ 1] 4467 3$: srl a 
      0018E5 0A 01            [ 1] 4468 	dec (PINNO,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0018E7 26 FB            [ 1] 4469 	jrne 3$ 
      0018E9 A4 01            [ 1] 4470 8$: and a,#1 
      0018EB 5F               [ 1] 4471 	clrw x 
      0018EC 97               [ 1] 4472 	ld xl,a 
      0018ED A6 84            [ 1] 4473 	ld a,#TK_INTGR
      0018EF                       4474 	_drop VSIZE
      0018EF 5B 01            [ 2]    1     addw sp,#VSIZE 
      0018F1 81               [ 4] 4475 	ret
                                   4476 
                                   4477 ;-----------------------
                                   4478 ; BASIC: DWRITE pin,0|1
                                   4479 ; Arduino pins 
                                   4480 ; write to a digital pin 
                                   4481 ; pin# {0..15}
                                   4482 ; output:
                                   4483 ;    A 		TK_INTGR
                                   4484 ;    X      0|1 
                                   4485 ;-------------------------
                           000001  4486 	PINNO=1
                           000002  4487 	PINVAL=2
                           000002  4488 	VSIZE=2
      0018F2                       4489 digital_write:
      0018F2                       4490 	_vars VSIZE 
      0018F2 52 02            [ 2]    1     sub sp,#VSIZE 
      0018F4 CD 10 7F         [ 4] 4491 	call arg_list  
      0018F7 A1 02            [ 1] 4492 	cp a,#2 
      0018F9 27 03            [ 1] 4493 	jreq 1$
      0018FB CC 08 75         [ 2] 4494 	jp syntax_error
      0018FE 85               [ 2] 4495 1$: popw x 
      0018FF 9F               [ 1] 4496 	ld a,xl 
      001900 6B 02            [ 1] 4497 	ld (PINVAL,sp),a
      001902 85               [ 2] 4498 	popw x 
      001903 A3 00 0F         [ 2] 4499 	cpw x,#15 
      001906 23 05            [ 2] 4500 	jrule 2$
      001908 A6 0A            [ 1] 4501 	ld a,#ERR_BAD_VALUE
      00190A CC 08 77         [ 2] 4502 	jp tb_error 
      00190D CD 1E EF         [ 4] 4503 2$:	call select_pin 
      001910 6B 01            [ 1] 4504 	ld (PINNO,sp),a 
      001912 A6 01            [ 1] 4505 	ld a,#1
      001914 0D 01            [ 1] 4506 	tnz (PINNO,sp)
      001916 27 05            [ 1] 4507 	jreq 4$
      001918 48               [ 1] 4508 3$: sll a
      001919 0A 01            [ 1] 4509 	dec (PINNO,sp)
      00191B 26 FB            [ 1] 4510 	jrne 3$
      00191D 0D 02            [ 1] 4511 4$: tnz (PINVAL,sp)
      00191F 26 05            [ 1] 4512 	jrne 5$
      001921 43               [ 1] 4513 	cpl a 
      001922 E4 00            [ 1] 4514 	and a,(GPIO_ODR,x)
      001924 20 02            [ 2] 4515 	jra 8$
      001926 EA 00            [ 1] 4516 5$: or a,(GPIO_ODR,x)
      001928 E7 00            [ 1] 4517 8$: ld (GPIO_ODR,x),a 
      00192A                       4518 	_drop VSIZE 
      00192A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00192C 81               [ 4] 4519 	ret
                                   4520 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4521 
                                   4522 ;-----------------------
                                   4523 ; BASIC: STOP
                                   4524 ; stop progam execution  
                                   4525 ; without resetting pointers 
                                   4526 ; the program is resumed
                                   4527 ; with RUN 
                                   4528 ;-------------------------
      00192D                       4529 stop:
      00192D 72 00 00 23 02   [ 2] 4530 	btjt flags,#FRUN,2$
      001932 4F               [ 1] 4531 	clr a
      001933 81               [ 4] 4532 	ret 
      001934                       4533 2$:	 
                                   4534 ; create space on cstack to save context 
      001934 AE 19 5B         [ 2] 4535 	ldw x,#break_point 
      001937 CD 02 B3         [ 4] 4536 	call puts 
      00193A                       4537 	_drop 2 ;drop return address 
      00193A 5B 02            [ 2]    1     addw sp,#2 
      00193C                       4538 	_vars CTXT_SIZE ; context size 
      00193C 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      00193E CD 15 32         [ 4] 4539 	call save_context 
      001941 AE 16 90         [ 2] 4540 	ldw x,#tib 
      001944 CF 00 04         [ 2] 4541 	ldw basicptr,x
      001947 7F               [ 1] 4542 	clr (x)
      001948 72 5F 00 03      [ 1] 4543 	clr count  
      00194C 5F               [ 1] 4544 	clrw x 
      00194D CF 00 00         [ 2] 4545 	ldw in.w,x
      001950 72 11 00 23      [ 1] 4546 	bres flags,#FRUN 
      001954 72 18 00 23      [ 1] 4547 	bset flags,#FBREAK
      001958 CC 09 1B         [ 2] 4548 	jp interpreter 
      00195B 0A 62 72 65 61 6B 20  4549 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4550 
                                   4551 ;-----------------------
                                   4552 ; BASIC: NEW
                                   4553 ; from command line only 
                                   4554 ; free program memory
                                   4555 ; and clear variables 
                                   4556 ;------------------------
      001979                       4557 new: 
      001979 72 01 00 23 01   [ 2] 4558 	btjf flags,#FRUN,0$ 
      00197E 81               [ 4] 4559 	ret 
      00197F                       4560 0$:	
      00197F CD 06 E1         [ 4] 4561 	call clear_basic 
      001982 81               [ 4] 4562 	ret 
                                   4563 	 
                                   4564 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4565 ;  file system routines
                                   4566 ;  MCU flash memory from
                                   4567 ;  0x10000-0x27fff is 
                                   4568 ;  used to store BASIC 
                                   4569 ;  program files. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4570 ;  use 128 bytes sectors
                                   4571 ;  because this is the MCU 
                                   4572 ;  row size.
                                   4573 ;  file entry aligned to row
                                   4574 ;  	name  variable length
                                   4575 ;  	size  2 bytes  
                                   4576 ; 	data  variable length 
                                   4577 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4578 
                                   4579 ;---------------------------
                                   4580 ; fill pad with zeros 
                                   4581 ;--------------------------
      001983                       4582 zero_pad:
      001983 AE 16 E0         [ 2] 4583 	ldw x,#pad 
      001986 A6 80            [ 1] 4584 	ld a,#PAD_SIZE 
      001988 7F               [ 1] 4585 1$:	clr (x)
      001989 5C               [ 2] 4586 	incw x 
      00198A 4A               [ 1] 4587 	dec a 
      00198B 26 FB            [ 1] 4588 	jrne 1$
      00198D 81               [ 4] 4589 	ret 
                                   4590 
                                   4591 ;--------------------------
                                   4592 ; align farptr to BLOCK_SIZE 
                                   4593 ;---------------------------
      00198E                       4594 row_align:
      00198E A6 7F            [ 1] 4595 	ld a,#0x7f 
      001990 C4 00 18         [ 1] 4596 	and a,farptr+2 
      001993 27 13            [ 1] 4597 	jreq 1$ 
      001995 CE 00 17         [ 2] 4598 	ldw x,farptr+1 
      001998 1C 00 80         [ 2] 4599 	addw x,#BLOCK_SIZE 
      00199B 24 04            [ 1] 4600 	jrnc 0$
      00199D 72 5C 00 16      [ 1] 4601 	inc farptr 
      0019A1 9F               [ 1] 4602 0$: ld a,xl 
      0019A2 A4 80            [ 1] 4603 	and a,#0x80
      0019A4 97               [ 1] 4604 	ld xl,a
      0019A5 CF 00 17         [ 2] 4605 	ldw farptr+1,x  	
      0019A8 81               [ 4] 4606 1$:	ret
                                   4607 
                                   4608 ;--------------------
                                   4609 ; input:
                                   4610 ;   X     increment 
                                   4611 ; output:
                                   4612 ;   farptr  incremented 
                                   4613 ;---------------------
      0019A9                       4614 incr_farptr:
      0019A9 72 BB 00 17      [ 2] 4615 	addw x,farptr+1 
      0019AD 24 04            [ 1] 4616 	jrnc 1$
      0019AF 72 5C 00 16      [ 1] 4617 	inc farptr 
      0019B3 CF 00 17         [ 2] 4618 1$:	ldw farptr+1,x  
      0019B6 81               [ 4] 4619 	ret 
                                   4620 
                                   4621 ;------------------------------
                                   4622 ; extended flash memory used as FLASH_DRIVE 
                                   4623 ; seek end of used flash drive   
                                   4624 ; starting at 0x10000 address.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4625 ; 4 consecutives 0 bytes signal free space. 
                                   4626 ; input:
                                   4627 ;	none
                                   4628 ; output:
                                   4629 ;   ffree     free_addr| 0 if memory full.
                                   4630 ;------------------------------
      0019B7                       4631 seek_fdrive:
                                   4632 ; start scan at 0x10000 address 
      0019B7 A6 01            [ 1] 4633 	ld a,#1
      0019B9 C7 00 16         [ 1] 4634 	ld farptr,a 
      0019BC 5F               [ 1] 4635 	clrw x 
      0019BD CF 00 17         [ 2] 4636 	ldw farptr+1,x 
      0019C0                       4637 1$:
      0019C0 AE 00 03         [ 2] 4638 	ldw x,#3  
      0019C3 92 AF 00 16      [ 5] 4639 2$:	ldf a,([farptr],x) 
      0019C7 26 05            [ 1] 4640 	jrne 3$
      0019C9 5A               [ 2] 4641 	decw x
      0019CA 2A F7            [ 1] 4642 	jrpl 2$
      0019CC 20 0E            [ 2] 4643 	jra 4$ 
      0019CE AE 00 80         [ 2] 4644 3$:	ldw x,#BLOCK_SIZE 
      0019D1 CD 19 A9         [ 4] 4645 	call incr_farptr
      0019D4 AE 02 80         [ 2] 4646 	ldw x,#0x280  
      0019D7 C3 00 16         [ 2] 4647 	cpw x,farptr
      0019DA 2B E4            [ 1] 4648 	jrmi 1$
      0019DC                       4649 4$: ; copy farptr to ffree	 
      0019DC CE 00 16         [ 2] 4650 	ldw x,farptr 
      0019DF C6 00 18         [ 1] 4651 	ld a,farptr+2 
      0019E2 CF 00 19         [ 2] 4652 	ldw ffree,x 
      0019E5 C7 00 1B         [ 1] 4653 	ld ffree+2,a  
      0019E8 81               [ 4] 4654 	ret 
                                   4655 
                                   4656 ;-----------------------
                                   4657 ; return amount of free 
                                   4658 ; space on flash drive
                                   4659 ; input:
                                   4660 ;   none
                                   4661 ; output:
                                   4662 ;   acc24   free space 
                                   4663 ;-----------------------
      0019E9                       4664 disk_free:
      0019E9 AE 80 00         [ 2] 4665 	ldw x,#0x8000
      0019EC 72 B0 00 1A      [ 2] 4666 	subw x,ffree+1
      0019F0 A6 02            [ 1] 4667 	ld a,#2
      0019F2 C2 00 19         [ 1] 4668 	sbc a,ffree 
      0019F5 C7 00 0B         [ 1] 4669 	ld acc24,a 
      0019F8 CF 00 0C         [ 2] 4670 	ldw acc16,x 
      0019FB 81               [ 4] 4671 	ret 
                                   4672 
                                   4673 ;-----------------------
                                   4674 ; compare file name 
                                   4675 ; with name pointed by Y  
                                   4676 ; input:
                                   4677 ;   farptr   file name 
                                   4678 ;   Y        target name 
                                   4679 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4680 ;   farptr 	 at file_name
                                   4681 ;   X 		 farptr[x] point at size field  
                                   4682 ;   Carry    0|1 no match|match  
                                   4683 ;----------------------
      0019FC                       4684 cmp_name:
      0019FC 5F               [ 1] 4685 	clrw x
      0019FD 92 AF 00 16      [ 5] 4686 1$:	ldf a,([farptr],x)
      001A01 90 F1            [ 1] 4687 	cp a,(y)
      001A03 26 08            [ 1] 4688 	jrne 4$
      001A05 4D               [ 1] 4689 	tnz a 
      001A06 27 12            [ 1] 4690 	jreq 9$ 
      001A08 5C               [ 2] 4691     incw x 
      001A09 90 5C            [ 2] 4692 	incw y 
      001A0B 20 F0            [ 2] 4693 	jra 1$
      001A0D                       4694 4$: ;no match 
      001A0D 4D               [ 1] 4695 	tnz a 
      001A0E 27 07            [ 1] 4696 	jreq 5$
      001A10 5C               [ 2] 4697 	incw x 
      001A11 92 AF 00 16      [ 5] 4698 	ldf a,([farptr],x)
      001A15 20 F6            [ 2] 4699 	jra 4$  
      001A17 5C               [ 2] 4700 5$:	incw x ; farptr[x] point at 'size' field 
      001A18 98               [ 1] 4701 	rcf 
      001A19 81               [ 4] 4702 	ret
      001A1A                       4703 9$: ; match  
      001A1A 5C               [ 2] 4704 	incw x  ; farptr[x] at 'size' field 
      001A1B 99               [ 1] 4705 	scf 
      001A1C 81               [ 4] 4706 	ret 
                                   4707 
                                   4708 ;-----------------------
                                   4709 ; search file in 
                                   4710 ; flash memory 
                                   4711 ; input:
                                   4712 ;   Y       file name  
                                   4713 ; output:
                                   4714 ;   farptr  addr at name|0
                                   4715 ;   X       offset to size field
                                   4716 ;-----------------------
                           000001  4717 	FSIZE=1
                           000003  4718 	YSAVE=3
                           000004  4719 	VSIZE=4 
      001A1D                       4720 search_file: 
      001A1D                       4721 	_vars VSIZE
      001A1D 52 04            [ 2]    1     sub sp,#VSIZE 
      001A1F 17 03            [ 2] 4722 	ldw (YSAVE,sp),y  
      001A21 5F               [ 1] 4723 	clrw x 
      001A22 CF 00 17         [ 2] 4724 	ldw farptr+1,x 
      001A25 35 01 00 16      [ 1] 4725 	mov farptr,#1
      001A29                       4726 1$:	
                                   4727 ; check if farptr is after any file 
                                   4728 ; if  0 then so.
      001A29 92 BC 00 16      [ 5] 4729 	ldf a,[farptr]
      001A2D 27 27            [ 1] 4730 	jreq 6$
      001A2F 5F               [ 1] 4731 2$: clrw x 	
      001A30 16 03            [ 2] 4732 	ldw y,(YSAVE,sp) 
      001A32 CD 19 FC         [ 4] 4733 	call cmp_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001A35 25 2F            [ 1] 4734 	jrc 9$
      001A37 92 AF 00 16      [ 5] 4735 	ldf a,([farptr],x)
      001A3B 6B 01            [ 1] 4736 	ld (FSIZE,sp),a 
      001A3D 5C               [ 2] 4737 	incw x 
      001A3E 92 AF 00 16      [ 5] 4738 	ldf a,([farptr],x)
      001A42 6B 02            [ 1] 4739 	ld (FSIZE+1,sp),a 
      001A44 5C               [ 2] 4740 	incw x 
      001A45 72 FB 01         [ 2] 4741 	addw x,(FSIZE,sp) ; skip over file data
      001A48 CD 19 A9         [ 4] 4742 	call incr_farptr
      001A4B CD 19 8E         [ 4] 4743 	call row_align  
      001A4E AE 02 80         [ 2] 4744 	ldw x,#0x280
      001A51 C3 00 16         [ 2] 4745 	cpw x,farptr 
      001A54 2A D3            [ 1] 4746 	jrpl 1$
      001A56                       4747 6$: ; file not found 
      001A56 72 5F 00 16      [ 1] 4748 	clr farptr
      001A5A 72 5F 00 17      [ 1] 4749 	clr farptr+1 
      001A5E 72 5F 00 18      [ 1] 4750 	clr farptr+2 
      001A62                       4751 	_drop VSIZE 
      001A62 5B 04            [ 2]    1     addw sp,#VSIZE 
      001A64 98               [ 1] 4752 	rcf
      001A65 81               [ 4] 4753 	ret
      001A66                       4754 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001A66                       4755 	_drop VSIZE 
      001A66 5B 04            [ 2]    1     addw sp,#VSIZE 
      001A68 99               [ 1] 4756 	scf 	
      001A69 81               [ 4] 4757 	ret
                                   4758 
                                   4759 ;--------------------------------
                                   4760 ; BASIC: SAVE "name" 
                                   4761 ; save text program in 
                                   4762 ; flash memory used as permanent
                                   4763 ; storage from address 0x10000-0x27fff 
                                   4764 ;--------------------------------
                           000001  4765 	BSIZE=1
                           000003  4766 	NAMEPTR=3
                           000005  4767 	XSAVE=5
                           000007  4768 	YSAVE=7
                           000008  4769 	VSIZE=8 
      001A6A                       4770 save:
      001A6A 72 01 00 23 05   [ 2] 4771 	btjf flags,#FRUN,0$ 
      001A6F A6 07            [ 1] 4772 	ld a,#ERR_CMD_ONLY 
      001A71 CC 08 77         [ 2] 4773 	jp tb_error
      001A74                       4774 0$:	 
      001A74 CE 00 1E         [ 2] 4775 	ldw x,txtend 
      001A77 72 B0 00 1C      [ 2] 4776 	subw x,txtbgn
      001A7B 26 0C            [ 1] 4777 	jrne 1$
                                   4778 ; nothing to save 
      001A7D AE 08 10         [ 2] 4779 	ldw x,#err_no_prog 
      001A80 CD 02 B3         [ 4] 4780 	call puts 
      001A83 55 00 03 00 01   [ 1] 4781 	mov in,count 
      001A88 81               [ 4] 4782 	ret  	
      001A89                       4783 1$:	
      001A89                       4784 	_vars VSIZE 
      001A89 52 08            [ 2]    1     sub sp,#VSIZE 
      001A8B 1F 01            [ 2] 4785 	ldw (BSIZE,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001A8D CD 09 67         [ 4] 4786 	call next_token	
      001A90 A1 02            [ 1] 4787 	cp a,#TK_QSTR
      001A92 27 03            [ 1] 4788 	jreq 2$
      001A94 CC 08 75         [ 2] 4789 	jp syntax_error
      001A97                       4790 2$: 
      001A97 1F 03            [ 2] 4791 	ldw (NAMEPTR,sp),x  
      001A99 CD 01 5C         [ 4] 4792 	call move_prg_to_ram ; move flashing program to 'tib' buffer 
                                   4793 ; check if enough free space 
      001A9C CD 03 92         [ 4] 4794 	call strlen 
      001A9F 1C 00 03         [ 2] 4795 	addw x,#3 
      001AA2 72 FB 01         [ 2] 4796 	addw x,(BSIZE,sp)
      001AA5 4F               [ 1] 4797 	clr a 
      001AA6 72 BB 00 1A      [ 2] 4798 	addw x,ffree+1 
      001AAA C9 00 19         [ 1] 4799 	adc a,ffree 
      001AAD A1 02            [ 1] 4800 	cp a,#2
      001AAF 2B 0A            [ 1] 4801 	jrmi 21$
      001AB1 A3 80 00         [ 2] 4802 	cpw x,#0x8000
      001AB4 2B 05            [ 1] 4803 	jrmi 21$
      001AB6 A6 0E            [ 1] 4804 	ld a,#ERR_NO_FSPACE  
      001AB8 CC 08 77         [ 2] 4805 	jp tb_error
      001ABB                       4806 21$: 
                                   4807 ; check for existing file of that name 
      001ABB 16 03            [ 2] 4808 	ldw y,(NAMEPTR,sp)	
      001ABD CD 1A 1D         [ 4] 4809 	call search_file 
      001AC0 24 05            [ 1] 4810 	jrnc 3$ 
      001AC2 A6 08            [ 1] 4811 	ld a,#ERR_DUPLICATE 
      001AC4 CC 08 77         [ 2] 4812 	jp tb_error 
      001AC7                       4813 3$:	; initialize farptr 
      001AC7 CE 00 19         [ 2] 4814 	ldw x,ffree 
      001ACA C6 00 1B         [ 1] 4815 	ld a,ffree+2 
      001ACD CF 00 16         [ 2] 4816 	ldw farptr,x 
      001AD0 C7 00 18         [ 1] 4817 	ld farptr+2,a 
                                   4818 ;** write file name to row buffer **	
      001AD3 16 03            [ 2] 4819 	ldw y,(NAMEPTR,sp)  
      001AD5 AE 16 E0         [ 2] 4820 	ldw x,#pad 
      001AD8 CD 03 B0         [ 4] 4821 	call strcpy
      001ADB CD 03 92         [ 4] 4822 	call strlen 
      001ADE 5C               [ 2] 4823 	incw  x
      001ADF 1C 16 E0         [ 2] 4824 	addw x,#pad 
                                   4825 ; ** write file size to row buffer 
      001AE2 16 01            [ 2] 4826 	ldw y,(BSIZE,sp)
      001AE4 FF               [ 2] 4827 	ldw (x),y 
      001AE5 1C 00 02         [ 2] 4828 	addw x,#2 
                                   4829 ; ** write file data to row buffer 
      001AE8 90 CE 00 1C      [ 2] 4830 	ldw y,txtbgn 
      001AEC 90 F6            [ 1] 4831 6$:	ld a,(y)
      001AEE 90 5C            [ 2] 4832 	incw y
      001AF0 F7               [ 1] 4833 	ld (x),a 
      001AF1 5C               [ 2] 4834 	incw x
      001AF2 90 C3 00 1E      [ 2] 4835 	cpw y,txtend 
      001AF6 27 05            [ 1] 4836 	jreq 12$
      001AF8 A3 17 60         [ 2] 4837 	cpw x,#stack_full 
      001AFB 2B EF            [ 1] 4838 	jrmi 6$
      001AFD                       4839 12$:
      001AFD 17 07            [ 2] 4840 	ldw (YSAVE,sp),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001AFF                       4841 14$: ; zero buffer end 
      001AFF A3 17 60         [ 2] 4842 	cpw x,#stack_full
      001B02 27 04            [ 1] 4843 	jreq 16$
      001B04 7F               [ 1] 4844 	clr (x)
      001B05 5C               [ 2] 4845 	incw x 
      001B06 20 F7            [ 2] 4846 	jra 14$
      001B08                       4847 16$:
      001B08 AE 16 E0         [ 2] 4848 	ldw x,#pad 
      001B0B CD 01 70         [ 4] 4849 	call write_row 
      001B0E AE 00 80         [ 2] 4850 	ldw x,#BLOCK_SIZE 
      001B11 CD 19 A9         [ 4] 4851 	call incr_farptr
      001B14 AE 16 E0         [ 2] 4852 	ldw x,#pad 
      001B17 16 07            [ 2] 4853 	ldw y,(YSAVE,sp)
      001B19 90 C3 00 1E      [ 2] 4854 	cpw y,txtend 
      001B1D 2B CD            [ 1] 4855 	jrmi 6$
                                   4856 ; save farptr in ffree
      001B1F CE 00 16         [ 2] 4857 	ldw x,farptr 
      001B22 C6 00 18         [ 1] 4858 	ld a,farptr+2 
      001B25 CF 00 19         [ 2] 4859 	ldw ffree,x 
      001B28 C7 00 1B         [ 1] 4860 	ld ffree+2,a
                                   4861 ; print file size 	
      001B2B 1E 01            [ 2] 4862 	ldw x,(BSIZE,sp) 
      001B2D CD 09 BC         [ 4] 4863 	call print_int 
      001B30                       4864 	_drop VSIZE 
      001B30 5B 08            [ 2]    1     addw sp,#VSIZE 
      001B32 81               [ 4] 4865 	ret 
                                   4866 
                                   4867 ;----------------------
                                   4868 ; load file in RAM memory
                                   4869 ; input:
                                   4870 ;    farptr point at file size 
                                   4871 ; output:
                                   4872 ;   y point after BASIC program in RAM.
                                   4873 ;------------------------
      001B33                       4874 load_file:
      001B33 CD 19 A9         [ 4] 4875 	call incr_farptr  
      001B36 CD 06 E1         [ 4] 4876 	call clear_basic  
      001B39 5F               [ 1] 4877 	clrw x
      001B3A 92 AF 00 16      [ 5] 4878 	ldf a,([farptr],x)
      001B3E 90 95            [ 1] 4879 	ld yh,a 
      001B40 5C               [ 2] 4880 	incw x  
      001B41 92 AF 00 16      [ 5] 4881 	ldf a,([farptr],x)
      001B45 5C               [ 2] 4882 	incw x 
      001B46 90 97            [ 1] 4883 	ld yl,a 
      001B48 72 B9 00 1C      [ 2] 4884 	addw y,txtbgn
      001B4C 90 CF 00 1E      [ 2] 4885 	ldw txtend,y
      001B50 90 CE 00 1C      [ 2] 4886 	ldw y,txtbgn
      001B54                       4887 3$:	; load BASIC text 	
      001B54 92 AF 00 16      [ 5] 4888 	ldf a,([farptr],x)
      001B58 90 F7            [ 1] 4889 	ld (y),a 
      001B5A 5C               [ 2] 4890 	incw x 
      001B5B 90 5C            [ 2] 4891 	incw y 
      001B5D 90 C3 00 1E      [ 2] 4892 	cpw y,txtend 
      001B61 2B F1            [ 1] 4893 	jrmi 3$
      001B63 81               [ 4] 4894 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                   4895 
                                   4896 ;------------------------
                                   4897 ; BASIC: LOAD "file" 
                                   4898 ; load file to RAM 
                                   4899 ; for execution 
                                   4900 ;------------------------
      001B64                       4901 load:
      001B64 72 01 00 23 07   [ 2] 4902 	btjf flags,#FRUN,0$ 
      001B69 27 05            [ 1] 4903 	jreq 0$ 
      001B6B A6 07            [ 1] 4904 	ld a,#ERR_CMD_ONLY 
      001B6D CC 08 77         [ 2] 4905 	jp tb_error 
      001B70                       4906 0$:	
      001B70 CD 09 67         [ 4] 4907 	call next_token 
      001B73 A1 02            [ 1] 4908 	cp a,#TK_QSTR
      001B75 27 03            [ 1] 4909 	jreq 1$
      001B77 CC 08 75         [ 2] 4910 	jp syntax_error 
      001B7A 90 93            [ 1] 4911 1$:	ldw y,x 
      001B7C CD 1A 1D         [ 4] 4912 	call search_file 
      001B7F 25 05            [ 1] 4913 	jrc 2$ 
      001B81 A6 09            [ 1] 4914 	ld a,#ERR_NOT_FILE
      001B83 CC 08 77         [ 2] 4915 	jp tb_error  
      001B86                       4916 2$:
      001B86 CD 1B 33         [ 4] 4917 	call load_file
                                   4918 ; print loaded size 	 
      001B89 CE 00 1E         [ 2] 4919 	ldw x,txtend 
      001B8C 72 B0 00 1C      [ 2] 4920 	subw x,txtbgn
      001B90 CD 09 BC         [ 4] 4921 	call print_int 
      001B93 81               [ 4] 4922 	ret 
                                   4923 
                                   4924 ;-----------------------------------
                                   4925 ; BASIC: FORGET ["file_name"] 
                                   4926 ; erase file_name and all others 
                                   4927 ; after it. 
                                   4928 ; without argument erase all files 
                                   4929 ;-----------------------------------
                           000001  4930 	NEW_FREE=1 
                           000003  4931 	VSIZE=3 
      001B94                       4932 forget:
      001B94                       4933 	_vars VSIZE 
      001B94 52 03            [ 2]    1     sub sp,#VSIZE 
      001B96 CD 09 67         [ 4] 4934 	call next_token 
      001B99 A1 00            [ 1] 4935 	cp a,#TK_NONE 
      001B9B 27 20            [ 1] 4936 	jreq 3$ 
      001B9D A1 02            [ 1] 4937 	cp a,#TK_QSTR
      001B9F 27 03            [ 1] 4938 	jreq 1$
      001BA1 CC 08 75         [ 2] 4939 	jp syntax_error
      001BA4 90 93            [ 1] 4940 1$: ldw y,x 
      001BA6 55 00 03 00 01   [ 1] 4941 	mov in,count 
      001BAB CD 1A 1D         [ 4] 4942 	call search_file
      001BAE 25 05            [ 1] 4943 	jrc 2$
      001BB0 A6 09            [ 1] 4944 	ld a,#ERR_NOT_FILE 
      001BB2 CC 08 77         [ 2] 4945 	jp tb_error 
      001BB5                       4946 2$: 
      001BB5 CE 00 16         [ 2] 4947 	ldw x,farptr
      001BB8 C6 00 18         [ 1] 4948 	ld a,farptr+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001BBB 20 0A            [ 2] 4949 	jra 4$ 
      001BBD                       4950 3$: ; forget all files 
      001BBD AE 01 00         [ 2] 4951 	ldw x,#0x100
      001BC0 4F               [ 1] 4952 	clr a 
      001BC1 CF 00 16         [ 2] 4953 	ldw farptr,x 
      001BC4 C7 00 18         [ 1] 4954 	ld farptr+2,a 
      001BC7                       4955 4$:	; save new free address 
      001BC7 1F 01            [ 2] 4956 	ldw (NEW_FREE,sp),x
      001BC9 6B 03            [ 1] 4957 	ld (NEW_FREE+2,sp),a 
      001BCB CD 01 28         [ 4] 4958 	call move_erase_to_ram
      001BCE CD 01 A3         [ 4] 4959 5$: call block_erase 
      001BD1 AE 00 80         [ 2] 4960 	ldw x,#BLOCK_SIZE 
      001BD4 CD 19 A9         [ 4] 4961 	call incr_farptr 
      001BD7 CD 19 8E         [ 4] 4962 	call row_align 
                                   4963 ; check if all blocks erased
      001BDA C6 00 18         [ 1] 4964 	ld a,farptr+2  
      001BDD C0 00 1B         [ 1] 4965 	sub a,ffree+2
      001BE0 C6 00 17         [ 1] 4966 	ld a,farptr+1 
      001BE3 C2 00 1A         [ 1] 4967 	sbc a,ffree+1 
      001BE6 C6 00 16         [ 1] 4968 	ld a,farptr 
      001BE9 C2 00 19         [ 1] 4969 	sbc a,ffree 
      001BEC 2B E0            [ 1] 4970 	jrmi 5$ 
      001BEE 7B 03            [ 1] 4971 	ld a,(NEW_FREE+2,sp)
      001BF0 1E 01            [ 2] 4972 	ldw x,(NEW_FREE,sp)
      001BF2 C7 00 1B         [ 1] 4973 	ld ffree+2,a 
      001BF5 CF 00 19         [ 2] 4974 	ldw ffree,x 
      001BF8                       4975 	_drop VSIZE 
      001BF8 5B 03            [ 2]    1     addw sp,#VSIZE 
      001BFA 81               [ 4] 4976 	ret 
                                   4977 
                                   4978 ;----------------------
                                   4979 ; BASIC: DIR 
                                   4980 ; list saved files 
                                   4981 ;----------------------
                           000001  4982 	COUNT=1 ; files counter 
                           000002  4983 	VSIZE=2 
      001BFB                       4984 directory:
      001BFB                       4985 	_vars VSIZE 
      001BFB 52 02            [ 2]    1     sub sp,#VSIZE 
      001BFD 5F               [ 1] 4986 	clrw x 
      001BFE 1F 01            [ 2] 4987 	ldw (COUNT,sp),x 
      001C00 CF 00 17         [ 2] 4988 	ldw farptr+1,x 
      001C03 35 01 00 16      [ 1] 4989 	mov farptr,#1 
      001C07                       4990 dir_loop:
      001C07 5F               [ 1] 4991 	clrw x 
      001C08 92 AF 00 16      [ 5] 4992 	ldf a,([farptr],x)
      001C0C 27 3B            [ 1] 4993 	jreq 8$ 
      001C0E                       4994 1$: ;name loop 	
      001C0E 92 AF 00 16      [ 5] 4995 	ldf a,([farptr],x)
      001C12 27 06            [ 1] 4996 	jreq 2$ 
      001C14 CD 02 A0         [ 4] 4997 	call putc 
      001C17 5C               [ 2] 4998 	incw x 
      001C18 20 F4            [ 2] 4999 	jra 1$
      001C1A 5C               [ 2] 5000 2$: incw x ; skip ending 0. 
      001C1B A6 20            [ 1] 5001 	ld a,#SPACE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001C1D CD 02 A0         [ 4] 5002 	call putc 
                                   5003 ; get file size 	
      001C20 92 AF 00 16      [ 5] 5004 	ldf a,([farptr],x)
      001C24 90 95            [ 1] 5005 	ld yh,a 
      001C26 5C               [ 2] 5006 	incw x 
      001C27 92 AF 00 16      [ 5] 5007 	ldf a,([farptr],x)
      001C2B 5C               [ 2] 5008 	incw x 
      001C2C 90 97            [ 1] 5009 	ld yl,a 
      001C2E 90 89            [ 2] 5010 	pushw y 
      001C30 72 FB 01         [ 2] 5011 	addw x,(1,sp)
                                   5012 ; skip to next file 
      001C33 CD 19 A9         [ 4] 5013 	call incr_farptr
      001C36 CD 19 8E         [ 4] 5014 	call row_align
                                   5015 ; print file size 
      001C39 85               [ 2] 5016 	popw x ; file size 
      001C3A CD 09 BC         [ 4] 5017 	call print_int 
      001C3D A6 0D            [ 1] 5018 	ld a,#CR 
      001C3F CD 02 A0         [ 4] 5019 	call putc
      001C42 1E 01            [ 2] 5020 	ldw x,(COUNT,sp)
      001C44 5C               [ 2] 5021 	incw x
      001C45 1F 01            [ 2] 5022 	ldw (COUNT,sp),x  
      001C47 20 BE            [ 2] 5023 	jra dir_loop
      001C49                       5024 8$: ; print number of files 
      001C49 1E 01            [ 2] 5025 	ldw x,(COUNT,sp)
      001C4B CD 09 BC         [ 4] 5026 	call print_int 
      001C4E AE 1C 68         [ 2] 5027 	ldw x,#file_count 
      001C51 CD 02 B3         [ 4] 5028 	call puts  
                                   5029 ; print drive free space 	
      001C54 CD 19 E9         [ 4] 5030 	call disk_free
      001C57 5F               [ 1] 5031 	clrw x  
      001C58 35 0A 00 0A      [ 1] 5032 	mov base,#10 
      001C5C CD 09 CC         [ 4] 5033 	call prti24 
      001C5F AE 1C 70         [ 2] 5034 	ldw x,#drive_free
      001C62 CD 02 B3         [ 4] 5035 	call puts 
      001C65                       5036 	_drop VSIZE 
      001C65 5B 02            [ 2]    1     addw sp,#VSIZE 
      001C67 81               [ 4] 5037 	ret
      001C68 20 66 69 6C 65 73 0A  5038 file_count: .asciz " files\n"
             00
      001C70 20 62 79 74 65 73 20  5039 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5040 
                                   5041 ;---------------------
                                   5042 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5043 ; write 1 or more byte to FLASH or EEPROM
                                   5044 ; starting at address  
                                   5045 ; input:
                                   5046 ;   expr1  	is address 
                                   5047 ;   expr2,...,exprn   are bytes to write
                                   5048 ; output:
                                   5049 ;   none 
                                   5050 ;---------------------
                           000001  5051 	ADDR=1
                           000002  5052 	VSIZ=2 
      001C7D                       5053 write:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001C7D                       5054 	_vars VSIZE 
      001C7D 52 02            [ 2]    1     sub sp,#VSIZE 
      001C7F 72 5F 00 16      [ 1] 5055 	clr farptr ; expect 16 bits address 
      001C83 CD 11 78         [ 4] 5056 	call expression
      001C86 A1 84            [ 1] 5057 	cp a,#TK_INTGR 
      001C88 27 03            [ 1] 5058 	jreq 0$
      001C8A CC 08 75         [ 2] 5059 	jp syntax_error
      001C8D 1F 01            [ 2] 5060 0$: ldw (ADDR,sp),x 
      001C8F CD 09 67         [ 4] 5061 	call next_token 
      001C92 A1 09            [ 1] 5062 	cp a,#TK_COMMA 
      001C94 27 02            [ 1] 5063 	jreq 1$ 
      001C96 20 19            [ 2] 5064 	jra 9$ 
      001C98 CD 11 78         [ 4] 5065 1$:	call expression
      001C9B A1 84            [ 1] 5066 	cp a,#TK_INTGR
      001C9D 27 03            [ 1] 5067 	jreq 2$
      001C9F CC 08 75         [ 2] 5068 	jp syntax_error
      001CA2 9F               [ 1] 5069 2$:	ld a,xl 
      001CA3 1E 01            [ 2] 5070 	ldw x,(ADDR,sp) 
      001CA5 CF 00 17         [ 2] 5071 	ldw farptr+1,x 
      001CA8 5F               [ 1] 5072 	clrw x 
      001CA9 CD 01 CD         [ 4] 5073 	call write_byte
      001CAC 1E 01            [ 2] 5074 	ldw x,(ADDR,sp)
      001CAE 5C               [ 2] 5075 	incw x 
      001CAF 20 DC            [ 2] 5076 	jra 0$ 
      001CB1                       5077 9$:
      001CB1                       5078 	_drop VSIZE
      001CB1 5B 02            [ 2]    1     addw sp,#VSIZE 
      001CB3 81               [ 4] 5079 	ret 
                                   5080 
                                   5081 
                                   5082 ;---------------------
                                   5083 ;BASIC: CHAR(expr)
                                   5084 ; évaluate expression 
                                   5085 ; and take the 7 least 
                                   5086 ; bits as ASCII character
                                   5087 ;---------------------
      001CB4                       5088 char:
      001CB4 CD 10 7A         [ 4] 5089 	call func_args 
      001CB7 A1 01            [ 1] 5090 	cp a,#1
      001CB9 27 03            [ 1] 5091 	jreq 1$
      001CBB CC 08 75         [ 2] 5092 	jp syntax_error
      001CBE 85               [ 2] 5093 1$:	popw x 
      001CBF 9F               [ 1] 5094 	ld a,xl 
      001CC0 A4 7F            [ 1] 5095 	and a,#0x7f 
      001CC2 97               [ 1] 5096 	ld xl,a
      001CC3 A6 03            [ 1] 5097 	ld a,#TK_CHAR
      001CC5 81               [ 4] 5098 	ret
                                   5099 
                                   5100 ;---------------------
                                   5101 ; BASIC: ASC(string|char)
                                   5102 ; extract first character 
                                   5103 ; of string argument 
                                   5104 ; return it as TK_INTGR 
                                   5105 ;---------------------
      001CC6                       5106 ascii:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001CC6 A6 07            [ 1] 5107 	ld a,#TK_LPAREN
      001CC8 CD 10 6D         [ 4] 5108 	call expect 
      001CCB CD 09 67         [ 4] 5109 	call next_token 
      001CCE A1 02            [ 1] 5110 	cp a,#TK_QSTR 
      001CD0 27 07            [ 1] 5111 	jreq 1$
      001CD2 A1 03            [ 1] 5112 	cp a,#TK_CHAR 
      001CD4 27 06            [ 1] 5113 	jreq 2$ 
      001CD6 CC 08 75         [ 2] 5114 	jp syntax_error
      001CD9                       5115 1$: 
      001CD9 F6               [ 1] 5116 	ld a,(x) 
      001CDA 5F               [ 1] 5117 	clrw x
      001CDB 97               [ 1] 5118 	ld xl,a 
      001CDC                       5119 2$: 
      001CDC 89               [ 2] 5120 	pushw x 
      001CDD A6 08            [ 1] 5121 	ld a,#TK_RPAREN 
      001CDF CD 10 6D         [ 4] 5122 	call expect
      001CE2 85               [ 2] 5123 	popw x 
      001CE3 A6 84            [ 1] 5124 	ld a,#TK_INTGR 
      001CE5 81               [ 4] 5125 	ret 
                                   5126 
                                   5127 ;---------------------
                                   5128 ;BASIC: KEY
                                   5129 ; wait for a character 
                                   5130 ; received from STDIN 
                                   5131 ; input:
                                   5132 ;	none 
                                   5133 ; output:
                                   5134 ;	X 		ASCII character 
                                   5135 ;---------------------
      001CE6                       5136 key:
      001CE6 CD 02 A9         [ 4] 5137 	call getc 
      001CE9 5F               [ 1] 5138 	clrw x 
      001CEA 97               [ 1] 5139 	ld xl,a 
      001CEB A6 84            [ 1] 5140 	ld a,#TK_INTGR
      001CED 81               [ 4] 5141 	ret
                                   5142 
                                   5143 ;----------------------
                                   5144 ; BASIC: QKEY
                                   5145 ; Return true if there 
                                   5146 ; is a character in 
                                   5147 ; waiting in STDIN 
                                   5148 ; input:
                                   5149 ;  none 
                                   5150 ; output:
                                   5151 ;   X 		0|-1 
                                   5152 ;-----------------------
      001CEE                       5153 qkey:: 
      001CEE 5F               [ 1] 5154 	clrw x 
      001CEF 72 5D 00 25      [ 1] 5155 	tnz rx_char
      001CF3 27 01            [ 1] 5156 	jreq 9$ 
      001CF5 53               [ 2] 5157 	cplw x 
      001CF6 A6 84            [ 1] 5158 9$: ld a,#TK_INTGR
      001CF8 81               [ 4] 5159 	ret 
                                   5160 
                                   5161 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   5162 ; BASIC: GPIO(expr,reg)
                                   5163 ; return gpio address 
                                   5164 ; expr {0..8}
                                   5165 ; input:
                                   5166 ;   none 
                                   5167 ; output:
                                   5168 ;   X 		gpio register address
                                   5169 ;----------------------------
                           000003  5170 	PORT=3
                           000001  5171 	REG=1 
                           000004  5172 	VSIZE=4 
      001CF9                       5173 gpio:
      001CF9 CD 10 7A         [ 4] 5174 	call func_args 
      001CFC A1 02            [ 1] 5175 	cp a,#2
      001CFE 27 03            [ 1] 5176 	jreq 1$
      001D00 CC 08 75         [ 2] 5177 	jp syntax_error  
      001D03                       5178 1$:	
      001D03 1E 03            [ 2] 5179 	ldw x,(PORT,sp)
      001D05 2B 17            [ 1] 5180 	jrmi bad_port
      001D07 A3 00 09         [ 2] 5181 	cpw x,#9
      001D0A 2A 12            [ 1] 5182 	jrpl bad_port
      001D0C A6 05            [ 1] 5183 	ld a,#5
      001D0E 42               [ 4] 5184 	mul x,a
      001D0F 1C 50 00         [ 2] 5185 	addw x,#GPIO_BASE 
      001D12 1F 03            [ 2] 5186 	ldw (PORT,sp),x  
      001D14 1E 01            [ 2] 5187 	ldw x,(REG,sp) 
      001D16 72 FB 03         [ 2] 5188 	addw x,(PORT,sp)
      001D19 A6 84            [ 1] 5189 	ld a,#TK_INTGR
      001D1B                       5190 	_drop VSIZE 
      001D1B 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D1D 81               [ 4] 5191 	ret
      001D1E                       5192 bad_port:
      001D1E A6 0A            [ 1] 5193 	ld a,#ERR_BAD_VALUE
      001D20 CC 08 77         [ 2] 5194 	jp tb_error
                                   5195 
                                   5196 
                                   5197 ;-------------------------
                                   5198 ; BASIC: UFLASH 
                                   5199 ; return user flash address
                                   5200 ; input:
                                   5201 ;  none 
                                   5202 ; output:
                                   5203 ;	A		TK_INTGR
                                   5204 ;   X 		user address 
                                   5205 ;---------------------------
      001D23                       5206 uflash:
      001D23 AE 27 00         [ 2] 5207 	ldw x,#user_space 
      001D26 A6 84            [ 1] 5208 	ld a,#TK_INTGR 
      001D28 81               [ 4] 5209 	ret 
                                   5210 
                                   5211 
                                   5212 ;---------------------
                                   5213 ; BASIC: USR(addr[,arg])
                                   5214 ; execute a function written 
                                   5215 ; in binary code.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                   5216 ; binary fonction should 
                                   5217 ; return token attribute in A 
                                   5218 ; and value in X. 
                                   5219 ; input:
                                   5220 ;   addr	routine address 
                                   5221 ;   arg 	is an optional argument 
                                   5222 ; output:
                                   5223 ;   A 		token attribute 
                                   5224 ;   X       returned value 
                                   5225 ;---------------------
      001D29                       5226 usr:
      001D29 90 89            [ 2] 5227 	pushw y 	
      001D2B CD 10 7A         [ 4] 5228 	call func_args 
      001D2E A1 01            [ 1] 5229 	cp a,#1 
      001D30 27 07            [ 1] 5230 	jreq 2$
      001D32 A1 02            [ 1] 5231 	cp a,#2
      001D34 27 03            [ 1] 5232 	jreq 2$  
      001D36 CC 08 75         [ 2] 5233 	jp syntax_error 
      001D39 90 85            [ 2] 5234 2$: popw y  ; arg|addr 
      001D3B A1 01            [ 1] 5235 	cp a,#1
      001D3D 27 02            [ 1] 5236 	jreq 3$
      001D3F 85               [ 2] 5237 	popw x ; addr
      001D40 51               [ 1] 5238 	exgw x,y 
      001D41 90 FD            [ 4] 5239 3$: call (y)
      001D43 90 85            [ 2] 5240 	popw y 
      001D45 81               [ 4] 5241 	ret 
                                   5242 
                                   5243 ;------------------------------
                                   5244 ; BASIC: BYE 
                                   5245 ; halt mcu in its lowest power mode 
                                   5246 ; wait for reset or external interrupt
                                   5247 ; do a cold start on wakeup.
                                   5248 ;------------------------------
      001D46                       5249 bye:
      001D46 72 0D 52 30 FB   [ 2] 5250 	btjf UART1_SR,#UART_SR_TC,.
      001D4B 8E               [10] 5251 	halt
      001D4C CC 05 CB         [ 2] 5252 	jp cold_start  
                                   5253 
                                   5254 ;----------------------------------
                                   5255 ; BASIC: AUTORUN ["file_name"] 
                                   5256 ; record in eeprom at adrress AUTORUN_NAME
                                   5257 ; the name of file to load and execute
                                   5258 ; at startup. 
                                   5259 ; empty string delete autorun name 
                                   5260 ; no argument display autorun name  
                                   5261 ; input:
                                   5262 ;   file_name   file to execute 
                                   5263 ; output:
                                   5264 ;   none
                                   5265 ;-----------------------------------
      001D4F                       5266 autorun: 
      001D4F 72 01 00 23 07   [ 2] 5267 	btjf flags,#FRUN,0$ 
      001D54 27 05            [ 1] 5268 	jreq 0$ 
      001D56 A6 07            [ 1] 5269 	ld a,#ERR_CMD_ONLY 
      001D58 CC 08 77         [ 2] 5270 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001D5B                       5271 0$:	
      001D5B CD 09 67         [ 4] 5272 	call next_token
      001D5E 26 08            [ 1] 5273 	jrne 1$
      001D60 AE 40 00         [ 2] 5274 	ldw x,#AUTORUN_NAME
      001D63 CD 02 B3         [ 4] 5275 	call puts 
      001D66 4F               [ 1] 5276 	clr a 
      001D67 81               [ 4] 5277 	ret 
      001D68                       5278 1$:
      001D68 A1 02            [ 1] 5279 	cp a,#TK_QSTR
      001D6A 27 03            [ 1] 5280 	jreq 2$
      001D6C CC 08 75         [ 2] 5281 	jp syntax_error 
      001D6F                       5282 2$:	
      001D6F 7D               [ 1] 5283 	tnz (x) 
      001D70 26 09            [ 1] 5284 	jrne 3$
                                   5285 ; empty string, delete autorun 	
      001D72 CD 06 94         [ 4] 5286 	call cancel_autorun
      001D75 55 00 03 00 01   [ 1] 5287 	mov in,count 
      001D7A 81               [ 4] 5288 	ret 
      001D7B 89               [ 2] 5289 3$:	pushw x 
      001D7C 90 93            [ 1] 5290 	ldw y,x  
      001D7E CD 1A 1D         [ 4] 5291 	call search_file 
      001D81 25 05            [ 1] 5292 	jrc 4$ 
      001D83 A6 09            [ 1] 5293 	ld a,#ERR_NOT_FILE
      001D85 CC 08 77         [ 2] 5294 	jp tb_error  
      001D88                       5295 4$: 
      001D88 55 00 03 00 01   [ 1] 5296 	mov in,count 
      001D8D 72 5F 00 16      [ 1] 5297 	clr farptr 
      001D91 AE 40 00         [ 2] 5298 	ldw x,#AUTORUN_NAME
      001D94 CF 00 17         [ 2] 5299 	ldw farptr+1,x 
      001D97 1E 01            [ 2] 5300 	ldw x,(1,sp)  
      001D99 CD 03 92         [ 4] 5301 	call strlen  ; return length in X 
      001D9C 5C               [ 2] 5302 	incw x 
      001D9D 90 85            [ 2] 5303 	popw y 
      001D9F 89               [ 2] 5304 	pushw x 
      001DA0 5F               [ 1] 5305 	clrw x 
      001DA1 CD 02 42         [ 4] 5306 	call write_block 
      001DA4                       5307 	_drop 2 
      001DA4 5B 02            [ 2]    1     addw sp,#2 
      001DA6 81               [ 4] 5308 	ret 
                                   5309 
                                   5310 ;----------------------------------
                                   5311 ; BASIC: SLEEP 
                                   5312 ; halt mcu until reset or external
                                   5313 ; interrupt.
                                   5314 ; Resume progam after SLEEP command
                                   5315 ;----------------------------------
      001DA7                       5316 sleep:
      001DA7 72 0D 52 30 FB   [ 2] 5317 	btjf UART1_SR,#UART_SR_TC,.
      001DAC 72 16 00 23      [ 1] 5318 	bset flags,#FSLEEP
      001DB0 8E               [10] 5319 	halt 
      001DB1 81               [ 4] 5320 	ret 
                                   5321 
                                   5322 ;-------------------------------
                                   5323 ; BASIC: PAUSE expr 
                                   5324 ; suspend execution for n msec.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                   5325 ; input:
                                   5326 ;	none
                                   5327 ; output:
                                   5328 ;	none 
                                   5329 ;------------------------------
      001DB2                       5330 pause:
      001DB2 CD 11 78         [ 4] 5331 	call expression
      001DB5 A1 84            [ 1] 5332 	cp a,#TK_INTGR
      001DB7 27 03            [ 1] 5333 	jreq pause02 
      001DB9 CC 08 75         [ 2] 5334 	jp syntax_error
      001DBC                       5335 pause02: 
      001DBC 5D               [ 2] 5336 1$: tnzw x 
      001DBD 27 04            [ 1] 5337 	jreq 2$
      001DBF 8F               [10] 5338 	wfi 
      001DC0 5A               [ 2] 5339 	decw x 
      001DC1 26 F9            [ 1] 5340 	jrne 1$
      001DC3 4F               [ 1] 5341 2$:	clr a 
      001DC4 81               [ 4] 5342 	ret 
                                   5343 
                                   5344 ;------------------------------
                                   5345 ; BASIC: AWU expr
                                   5346 ; halt mcu for 'expr' milliseconds
                                   5347 ; use Auto wakeup peripheral
                                   5348 ; all oscillators stopped except LSI
                                   5349 ; range: 1ms - 511ms
                                   5350 ; input:
                                   5351 ;  none
                                   5352 ; output:
                                   5353 ;  none:
                                   5354 ;------------------------------
      001DC5                       5355 awu:
      001DC5 CD 11 78         [ 4] 5356   call expression
      001DC8 A1 84            [ 1] 5357   cp a,#TK_INTGR
      001DCA 27 03            [ 1] 5358   jreq awu02
      001DCC CC 08 75         [ 2] 5359   jp syntax_error
      001DCF                       5360 awu02:
      001DCF A3 14 00         [ 2] 5361   cpw x,#5120
      001DD2 2B 0C            [ 1] 5362   jrmi 1$ 
      001DD4 35 0F 50 F2      [ 1] 5363   mov AWU_TBR,#15 
      001DD8 A6 1E            [ 1] 5364   ld a,#30
      001DDA 62               [ 2] 5365   div x,a
      001DDB A6 10            [ 1] 5366   ld a,#16
      001DDD 62               [ 2] 5367   div x,a 
      001DDE 20 1E            [ 2] 5368   jra 4$
      001DE0                       5369 1$: 
      001DE0 A3 08 00         [ 2] 5370   cpw x,#2048
      001DE3 2B 09            [ 1] 5371   jrmi 2$ 
      001DE5 35 0E 50 F2      [ 1] 5372   mov AWU_TBR,#14
      001DE9 A6 50            [ 1] 5373   ld a,#80
      001DEB 62               [ 2] 5374   div x,a 
      001DEC 20 10            [ 2] 5375   jra 4$   
      001DEE                       5376 2$:
      001DEE 35 07 50 F2      [ 1] 5377   mov AWU_TBR,#7
      001DF2                       5378 3$:  
                                   5379 ; while X > 64  divide by 2 and increment AWU_TBR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001DF2 A3 00 40         [ 2] 5380   cpw x,#64 
      001DF5 23 07            [ 2] 5381   jrule 4$ 
      001DF7 72 5C 50 F2      [ 1] 5382   inc AWU_TBR 
      001DFB 54               [ 2] 5383   srlw x 
      001DFC 20 F4            [ 2] 5384   jra 3$ 
      001DFE                       5385 4$:
      001DFE 9F               [ 1] 5386   ld a, xl
      001DFF 4A               [ 1] 5387   dec a 
      001E00 27 01            [ 1] 5388   jreq 5$
      001E02 4A               [ 1] 5389   dec a 	
      001E03                       5390 5$: 
      001E03 A4 3E            [ 1] 5391   and a,#0x3e 
      001E05 C7 50 F1         [ 1] 5392   ld AWU_APR,a 
      001E08 72 18 50 F0      [ 1] 5393   bset AWU_CSR,#AWU_CSR_AWUEN
      001E0C 8E               [10] 5394   halt 
                                   5395 
      001E0D 81               [ 4] 5396   ret 
                                   5397 
                                   5398 ;------------------------------
                                   5399 ; BASIC: TICKS
                                   5400 ; return msec ticks counter value 
                                   5401 ; input:
                                   5402 ; 	none 
                                   5403 ; output:
                                   5404 ;	X 		TK_INTGR
                                   5405 ;-------------------------------
      001E0E                       5406 get_ticks:
      001E0E CE 00 0E         [ 2] 5407 	ldw x,ticks 
      001E11 A6 84            [ 1] 5408 	ld a,#TK_INTGR
      001E13 81               [ 4] 5409 	ret 
                                   5410 
                                   5411 
                                   5412 
                                   5413 ;------------------------------
                                   5414 ; BASIC: ABS(expr)
                                   5415 ; return absolute value of expr.
                                   5416 ; input:
                                   5417 ;   none
                                   5418 ; output:
                                   5419 ;   X     	positive integer
                                   5420 ;-------------------------------
      001E14                       5421 abs:
      001E14 CD 10 7A         [ 4] 5422 	call func_args 
      001E17 A1 01            [ 1] 5423 	cp a,#1 
      001E19 27 03            [ 1] 5424 	jreq 0$ 
      001E1B CC 08 75         [ 2] 5425 	jp syntax_error
      001E1E                       5426 0$:  
      001E1E 85               [ 2] 5427     popw x   
      001E1F 9E               [ 1] 5428 	ld a,xh 
      001E20 A5 80            [ 1] 5429 	bcp a,#0x80 
      001E22 27 01            [ 1] 5430 	jreq 2$ 
      001E24 50               [ 2] 5431 	negw x 
      001E25 A6 84            [ 1] 5432 2$: ld a,#TK_INTGR 
      001E27 81               [ 4] 5433 	ret 
                                   5434 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   5435 ;------------------------------
                                   5436 ; BASIC: AND(expr1,expr2)
                                   5437 ; Apply bit AND relation between
                                   5438 ; the 2 arguments, i.e expr1 & expr2 
                                   5439 ; output:
                                   5440 ; 	A 		TK_INTGR
                                   5441 ;   X 		result 
                                   5442 ;------------------------------
      001E28                       5443 bit_and:
      001E28 CD 10 7A         [ 4] 5444 	call func_args 
      001E2B A1 02            [ 1] 5445 	cp a,#2
      001E2D 27 03            [ 1] 5446 	jreq 1$
      001E2F CC 08 75         [ 2] 5447 	jp syntax_error 
      001E32 85               [ 2] 5448 1$:	popw x 
      001E33 9E               [ 1] 5449 	ld a,xh 
      001E34 14 01            [ 1] 5450 	and a,(1,sp)
      001E36 95               [ 1] 5451 	ld xh,a 
      001E37 9F               [ 1] 5452 	ld a,xl
      001E38 14 02            [ 1] 5453 	and a,(2,sp)
      001E3A 97               [ 1] 5454 	ld xl,a 
      001E3B                       5455 	_drop 2 
      001E3B 5B 02            [ 2]    1     addw sp,#2 
      001E3D A6 84            [ 1] 5456 	ld a,#TK_INTGR
      001E3F 81               [ 4] 5457 	ret
                                   5458 
                                   5459 ;------------------------------
                                   5460 ; BASIC: OR(expr1,expr2)
                                   5461 ; Apply bit OR relation between
                                   5462 ; the 2 arguments, i.e expr1 | expr2 
                                   5463 ; output:
                                   5464 ; 	A 		TK_INTGR
                                   5465 ;   X 		result 
                                   5466 ;------------------------------
      001E40                       5467 bit_or:
      001E40 CD 10 7A         [ 4] 5468 	call func_args 
      001E43 A1 02            [ 1] 5469 	cp a,#2
      001E45 27 03            [ 1] 5470 	jreq 1$
      001E47 CC 08 75         [ 2] 5471 	jp syntax_error 
      001E4A                       5472 1$: 
      001E4A 85               [ 2] 5473 	popw x 
      001E4B 9E               [ 1] 5474 	ld a,xh 
      001E4C 1A 01            [ 1] 5475 	or a,(1,sp)
      001E4E 95               [ 1] 5476 	ld xh,a 
      001E4F 9F               [ 1] 5477 	ld a,xl 
      001E50 1A 02            [ 1] 5478 	or a,(2,sp)
      001E52 97               [ 1] 5479 	ld xl,a 
      001E53                       5480 	_drop 2 
      001E53 5B 02            [ 2]    1     addw sp,#2 
      001E55 A6 84            [ 1] 5481 	ld a,#TK_INTGR 
      001E57 81               [ 4] 5482 	ret
                                   5483 
                                   5484 ;------------------------------
                                   5485 ; BASIC: XOR(expr1,expr2)
                                   5486 ; Apply bit XOR relation between
                                   5487 ; the 2 arguments, i.e expr1 ^ expr2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   5488 ; output:
                                   5489 ; 	A 		TK_INTGR
                                   5490 ;   X 		result 
                                   5491 ;------------------------------
      001E58                       5492 bit_xor:
      001E58 CD 10 7A         [ 4] 5493 	call func_args 
      001E5B A1 02            [ 1] 5494 	cp a,#2
      001E5D 27 03            [ 1] 5495 	jreq 1$
      001E5F CC 08 75         [ 2] 5496 	jp syntax_error 
      001E62                       5497 1$: 
      001E62 85               [ 2] 5498 	popw x 
      001E63 9E               [ 1] 5499 	ld a,xh 
      001E64 18 01            [ 1] 5500 	xor a,(1,sp)
      001E66 95               [ 1] 5501 	ld xh,a 
      001E67 9F               [ 1] 5502 	ld a,xl 
      001E68 18 02            [ 1] 5503 	xor a,(2,sp)
      001E6A 97               [ 1] 5504 	ld xl,a 
      001E6B                       5505 	_drop 2 
      001E6B 5B 02            [ 2]    1     addw sp,#2 
      001E6D A6 84            [ 1] 5506 	ld a,#TK_INTGR 
      001E6F 81               [ 4] 5507 	ret 
                                   5508 
                                   5509 ;------------------------------
                                   5510 ; BASIC: LSHIFT(expr1,expr2)
                                   5511 ; logical shift left expr1 by 
                                   5512 ; expr2 bits 
                                   5513 ; output:
                                   5514 ; 	A 		TK_INTGR
                                   5515 ;   X 		result 
                                   5516 ;------------------------------
      001E70                       5517 lshift:
      001E70 CD 10 7A         [ 4] 5518 	call func_args
      001E73 A1 02            [ 1] 5519 	cp a,#2 
      001E75 27 03            [ 1] 5520 	jreq 1$
      001E77 CC 08 75         [ 2] 5521 	jp syntax_error
      001E7A 90 85            [ 2] 5522 1$: popw y   
      001E7C 85               [ 2] 5523 	popw x 
      001E7D 90 5D            [ 2] 5524 	tnzw y 
      001E7F 27 05            [ 1] 5525 	jreq 4$
      001E81 58               [ 2] 5526 2$:	sllw x 
      001E82 90 5A            [ 2] 5527 	decw y 
      001E84 26 FB            [ 1] 5528 	jrne 2$
      001E86                       5529 4$:  
      001E86 A6 84            [ 1] 5530 	ld a,#TK_INTGR
      001E88 81               [ 4] 5531 	ret
                                   5532 
                                   5533 ;------------------------------
                                   5534 ; BASIC: RSHIFT(expr1,expr2)
                                   5535 ; logical shift right expr1 by 
                                   5536 ; expr2 bits.
                                   5537 ; output:
                                   5538 ; 	A 		TK_INTGR
                                   5539 ;   X 		result 
                                   5540 ;------------------------------
      001E89                       5541 rshift:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001E89 CD 10 7A         [ 4] 5542 	call func_args
      001E8C A1 02            [ 1] 5543 	cp a,#2 
      001E8E 27 03            [ 1] 5544 	jreq 1$
      001E90 CC 08 75         [ 2] 5545 	jp syntax_error
      001E93 90 85            [ 2] 5546 1$: popw y  
      001E95 85               [ 2] 5547 	popw x
      001E96 90 5D            [ 2] 5548 	tnzw y 
      001E98 27 05            [ 1] 5549 	jreq 4$
      001E9A 54               [ 2] 5550 2$:	srlw x 
      001E9B 90 5A            [ 2] 5551 	decw y 
      001E9D 26 FB            [ 1] 5552 	jrne 2$
      001E9F                       5553 4$:  
      001E9F A6 84            [ 1] 5554 	ld a,#TK_INTGR
      001EA1 81               [ 4] 5555 	ret
                                   5556 
                                   5557 ;--------------------------
                                   5558 ; BASIC: FCPU integer
                                   5559 ; set CPU frequency 
                                   5560 ;-------------------------- 
                                   5561 
      001EA2                       5562 fcpu:
      001EA2 A6 84            [ 1] 5563 	ld a,#TK_INTGR
      001EA4 CD 10 6D         [ 4] 5564 	call expect 
      001EA7 9F               [ 1] 5565 	ld a,xl 
      001EA8 A4 07            [ 1] 5566 	and a,#7 
      001EAA C7 50 C6         [ 1] 5567 	ld CLK_CKDIVR,a 
      001EAD 81               [ 4] 5568 	ret 
                                   5569 
                                   5570 ;------------------------------
                                   5571 ; BASIC: PMODE pin#, mode 
                                   5572 ; Arduino pin. 
                                   5573 ; define pin as input or output
                                   5574 ; pin#: {0..15}
                                   5575 ; mode: INPUT|OUTPUT  
                                   5576 ;------------------------------
                           000001  5577 	PINNO=1
                           000001  5578 	VSIZE=1
      001EAE                       5579 pin_mode:
      001EAE                       5580 	_vars VSIZE 
      001EAE 52 01            [ 2]    1     sub sp,#VSIZE 
      001EB0 CD 10 7F         [ 4] 5581 	call arg_list 
      001EB3 A1 02            [ 1] 5582 	cp a,#2 
      001EB5 27 03            [ 1] 5583 	jreq 1$
      001EB7 CC 08 75         [ 2] 5584 	jp syntax_error 
      001EBA 90 85            [ 2] 5585 1$: popw y ; mode 
      001EBC 85               [ 2] 5586 	popw x ; Dx pin 
      001EBD CD 1E EF         [ 4] 5587 	call select_pin 
      001EC0 6B 01            [ 1] 5588 	ld (PINNO,sp),a  
      001EC2 A6 01            [ 1] 5589 	ld a,#1 
      001EC4 0D 01            [ 1] 5590 	tnz (PINNO,sp)
      001EC6 27 0B            [ 1] 5591 	jreq 4$
      001EC8 48               [ 1] 5592 2$:	sll a 
      001EC9 0A 01            [ 1] 5593 	dec (PINNO,sp)
      001ECB 26 FB            [ 1] 5594 	jrne 2$ 
      001ECD 6B 01            [ 1] 5595 	ld (PINNO,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001ECF EA 03            [ 1] 5596 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      001ED1 E7 03            [ 1] 5597 	ld (GPIO_CR1,x),a 
      001ED3 90 A3 00 01      [ 2] 5598 4$:	cpw y,#OUTP 
      001ED7 27 07            [ 1] 5599 	jreq 6$
                                   5600 ; input mode
      001ED9 7B 01            [ 1] 5601 	ld a,(PINNO,sp)
      001EDB 43               [ 1] 5602 	cpl a 
      001EDC E4 02            [ 1] 5603 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001EDE 20 0A            [ 2] 5604 	jra 9$
      001EE0                       5605 6$: ;output mode  
      001EE0 7B 01            [ 1] 5606 	ld a,(PINNO,sp)
      001EE2 EA 04            [ 1] 5607 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      001EE4 E7 04            [ 1] 5608 	ld (GPIO_CR2,x),a 
      001EE6 7B 01            [ 1] 5609 	ld a,(PINNO,sp)
      001EE8 EA 02            [ 1] 5610 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001EEA E7 02            [ 1] 5611 9$:	ld (GPIO_DDR,x),a 
      001EEC                       5612 	_drop VSIZE 
      001EEC 5B 01            [ 2]    1     addw sp,#VSIZE 
      001EEE 81               [ 4] 5613 	ret
                                   5614 
                                   5615 ;------------------------
                                   5616 ; select Arduino pin 
                                   5617 ; input:
                                   5618 ;   X 	 {0..15} Arduino Dx 
                                   5619 ; output:
                                   5620 ;   A     stm8s208 pin 
                                   5621 ;   X     base address s208 GPIO port 
                                   5622 ;---------------------------
      001EEF                       5623 select_pin:
      001EEF 58               [ 2] 5624 	sllw x 
      001EF0 1C 1E FF         [ 2] 5625 	addw x,#arduino_to_8s208 
      001EF3 FE               [ 2] 5626 	ldw x,(x)
      001EF4 9F               [ 1] 5627 	ld a,xl 
      001EF5 88               [ 1] 5628 	push a 
      001EF6 5E               [ 1] 5629 	swapw x 
      001EF7 A6 05            [ 1] 5630 	ld a,#5 
      001EF9 42               [ 4] 5631 	mul x,a 
      001EFA 1C 50 00         [ 2] 5632 	addw x,#GPIO_BASE 
      001EFD 84               [ 1] 5633 	pop a 
      001EFE 81               [ 4] 5634 	ret 
                                   5635 ; translation from Arduino D0..D15 to stm8s208rb 
      001EFF                       5636 arduino_to_8s208:
      001EFF 03 06                 5637 .byte 3,6 ; D0 
      001F01 03 05                 5638 .byte 3,5 ; D1 
      001F03 04 00                 5639 .byte 4,0 ; D2 
      001F05 02 01                 5640 .byte 2,1 ; D3
      001F07 06 00                 5641 .byte 6,0 ; D4
      001F09 02 02                 5642 .byte 2,2 ; D5
      001F0B 02 03                 5643 .byte 2,3 ; D6
      001F0D 03 01                 5644 .byte 3,1 ; D7
      001F0F 03 03                 5645 .byte 3,3 ; D8
      001F11 02 04                 5646 .byte 2,4 ; D9
      001F13 04 05                 5647 .byte 4,5 ; D10
      001F15 02 06                 5648 .byte 2,6 ; D11
      001F17 02 07                 5649 .byte 2,7 ; D12
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001F19 02 05                 5650 .byte 2,5 ; D13
      001F1B 04 02                 5651 .byte 4,2 ; D14
      001F1D 04 01                 5652 .byte 4,1 ; D15
                                   5653 
                                   5654 
                                   5655 ;------------------------------
                                   5656 ; BASIC: RND(expr)
                                   5657 ; return random number 
                                   5658 ; between 1 and expr inclusive
                                   5659 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5660 ; input:
                                   5661 ; 	none 
                                   5662 ; output:
                                   5663 ;	X 		random positive integer 
                                   5664 ;------------------------------
      001F1F                       5665 random:
      001F1F CD 10 7A         [ 4] 5666 	call func_args 
      001F22 A1 01            [ 1] 5667 	cp a,#1
      001F24 27 03            [ 1] 5668 	jreq 1$
      001F26 CC 08 75         [ 2] 5669 	jp syntax_error
      001F29                       5670 1$:  
      001F29 A6 80            [ 1] 5671 	ld a,#0x80 
      001F2B 15 01            [ 1] 5672 	bcp a,(1,sp)
      001F2D 27 05            [ 1] 5673 	jreq 2$
      001F2F A6 0A            [ 1] 5674 	ld a,#ERR_BAD_VALUE
      001F31 CC 08 77         [ 2] 5675 	jp tb_error
      001F34                       5676 2$: 
                                   5677 ; acc16=(x<<5)^x 
      001F34 CE 00 12         [ 2] 5678 	ldw x,seedx 
      001F37 58               [ 2] 5679 	sllw x 
      001F38 58               [ 2] 5680 	sllw x 
      001F39 58               [ 2] 5681 	sllw x 
      001F3A 58               [ 2] 5682 	sllw x 
      001F3B 58               [ 2] 5683 	sllw x 
      001F3C 9E               [ 1] 5684 	ld a,xh 
      001F3D C8 00 12         [ 1] 5685 	xor a,seedx 
      001F40 C7 00 0C         [ 1] 5686 	ld acc16,a 
      001F43 9F               [ 1] 5687 	ld a,xl 
      001F44 C8 00 13         [ 1] 5688 	xor a,seedx+1 
      001F47 C7 00 0D         [ 1] 5689 	ld acc8,a 
                                   5690 ; seedx=seedy 
      001F4A CE 00 14         [ 2] 5691 	ldw x,seedy 
      001F4D CF 00 12         [ 2] 5692 	ldw seedx,x  
                                   5693 ; seedy=seedy^(seedy>>1)
      001F50 90 54            [ 2] 5694 	srlw y 
      001F52 90 9E            [ 1] 5695 	ld a,yh 
      001F54 C8 00 14         [ 1] 5696 	xor a,seedy 
      001F57 C7 00 14         [ 1] 5697 	ld seedy,a  
      001F5A 90 9F            [ 1] 5698 	ld a,yl 
      001F5C C8 00 15         [ 1] 5699 	xor a,seedy+1 
      001F5F C7 00 15         [ 1] 5700 	ld seedy+1,a 
                                   5701 ; acc16>>3 
      001F62 CE 00 0C         [ 2] 5702 	ldw x,acc16 
      001F65 54               [ 2] 5703 	srlw x 
      001F66 54               [ 2] 5704 	srlw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001F67 54               [ 2] 5705 	srlw x 
                                   5706 ; x=acc16^x 
      001F68 9E               [ 1] 5707 	ld a,xh 
      001F69 C8 00 0C         [ 1] 5708 	xor a,acc16 
      001F6C 95               [ 1] 5709 	ld xh,a 
      001F6D 9F               [ 1] 5710 	ld a,xl 
      001F6E C8 00 0D         [ 1] 5711 	xor a,acc8 
      001F71 97               [ 1] 5712 	ld xl,a 
                                   5713 ; seedy=x^seedy 
      001F72 C8 00 15         [ 1] 5714 	xor a,seedy+1
      001F75 97               [ 1] 5715 	ld xl,a 
      001F76 9E               [ 1] 5716 	ld a,xh 
      001F77 C8 00 14         [ 1] 5717 	xor a,seedy
      001F7A 95               [ 1] 5718 	ld xh,a 
      001F7B CF 00 14         [ 2] 5719 	ldw seedy,x 
                                   5720 ; return seedy modulo expr + 1 
      001F7E 90 85            [ 2] 5721 	popw y 
      001F80 65               [ 2] 5722 	divw x,y 
      001F81 93               [ 1] 5723 	ldw x,y 
      001F82 5C               [ 2] 5724 	incw x 
      001F83                       5725 10$:
      001F83 A6 84            [ 1] 5726 	ld a,#TK_INTGR
      001F85 81               [ 4] 5727 	ret 
                                   5728 
                                   5729 ;---------------------------------
                                   5730 ; BASIC: WORDS 
                                   5731 ; affiche la listes des mots du
                                   5732 ; dictionnaire ainsi que le nombre
                                   5733 ; de mots.
                                   5734 ;---------------------------------
                           000001  5735 	WLEN=1 ; word length
                           000002  5736 	LLEN=2 ; character sent to console
                           000003  5737 	WCNT=3 ; count words printed 
                           000003  5738 	VSIZE=3 
      001F86                       5739 words:
      001F86                       5740 	_vars VSIZE
      001F86 52 03            [ 2]    1     sub sp,#VSIZE 
      001F88 0F 02            [ 1] 5741 	clr (LLEN,sp)
      001F8A 0F 03            [ 1] 5742 	clr (WCNT,sp)
      001F8C 90 AE 26 B9      [ 2] 5743 	ldw y,#kword_dict+2
      001F90 93               [ 1] 5744 0$:	ldw x,y
      001F91 F6               [ 1] 5745 	ld a,(x)
      001F92 A4 0F            [ 1] 5746 	and a,#15 
      001F94 6B 01            [ 1] 5747 	ld (WLEN,sp),a 
      001F96 0C 03            [ 1] 5748 	inc (WCNT,sp)
      001F98 5C               [ 2] 5749 1$:	incw x 
      001F99 F6               [ 1] 5750 	ld a,(x)
      001F9A CD 02 A0         [ 4] 5751 	call putc 
      001F9D 0C 02            [ 1] 5752 	inc (LLEN,sp)
      001F9F 0A 01            [ 1] 5753 	dec (WLEN,sp)
      001FA1 26 F5            [ 1] 5754 	jrne 1$
      001FA3 A6 46            [ 1] 5755 	ld a,#70
      001FA5 11 02            [ 1] 5756 	cp a,(LLEN,sp)
      001FA7 2B 09            [ 1] 5757 	jrmi 2$   
      001FA9 A6 20            [ 1] 5758 	ld a,#SPACE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001FAB CD 02 A0         [ 4] 5759 	call putc 
      001FAE 0C 02            [ 1] 5760 	inc (LLEN,sp) 
      001FB0 20 07            [ 2] 5761 	jra 3$
      001FB2 A6 0D            [ 1] 5762 2$: ld a,#CR 
      001FB4 CD 02 A0         [ 4] 5763 	call putc 
      001FB7 0F 02            [ 1] 5764 	clr (LLEN,sp)
      001FB9 72 A2 00 02      [ 2] 5765 3$:	subw y,#2 
      001FBD 90 FE            [ 2] 5766 	ldw y,(y)
      001FBF 26 CF            [ 1] 5767 	jrne 0$ 
      001FC1 A6 0D            [ 1] 5768 	ld a,#CR 
      001FC3 CD 02 A0         [ 4] 5769 	call putc  
      001FC6 5F               [ 1] 5770 	clrw x 
      001FC7 7B 03            [ 1] 5771 	ld a,(WCNT,sp)
      001FC9 97               [ 1] 5772 	ld xl,a 
      001FCA CD 09 BC         [ 4] 5773 	call print_int 
      001FCD AE 1F D6         [ 2] 5774 	ldw x,#words_count_msg
      001FD0 CD 02 B3         [ 4] 5775 	call puts 
      001FD3                       5776 	_drop VSIZE 
      001FD3 5B 03            [ 2]    1     addw sp,#VSIZE 
      001FD5 81               [ 4] 5777 	ret 
      001FD6 20 77 6F 72 64 73 20  5778 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   5779 
                                   5780 
                                   5781 ;-----------------------------
                                   5782 ; BASIC: TIMER expr 
                                   5783 ; initialize count down timer 
                                   5784 ;-----------------------------
      001FEC                       5785 set_timer:
      001FEC CD 10 7F         [ 4] 5786 	call arg_list
      001FEF A1 01            [ 1] 5787 	cp a,#1 
      001FF1 27 03            [ 1] 5788 	jreq 1$
      001FF3 CC 08 75         [ 2] 5789 	jp syntax_error
      001FF6                       5790 1$: 
      001FF6 85               [ 2] 5791 	popw x 
      001FF7 CF 00 10         [ 2] 5792 	ldw timer,x 
      001FFA 81               [ 4] 5793 	ret 
                                   5794 
                                   5795 ;------------------------------
                                   5796 ; BASIC: TIMEOUT 
                                   5797 ; return state of timer 
                                   5798 ;------------------------------
      001FFB                       5799 timeout:
      001FFB CE 00 10         [ 2] 5800 	ldw x,timer 
      001FFE                       5801 logical_complement:
      001FFE 53               [ 2] 5802 	cplw x 
      001FFF A3 FF FF         [ 2] 5803 	cpw x,#-1
      002002 27 01            [ 1] 5804 	jreq 2$
      002004 5F               [ 1] 5805 	clrw x 
      002005 A6 84            [ 1] 5806 2$:	ld a,#TK_INTGR
      002007 81               [ 4] 5807 	ret 
                                   5808 
                                   5809 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   5810 ; BASIC NOT(expr) 
                                   5811 ; return logical complement of expr
                                   5812 ;--------------------------------
      002008                       5813 func_not:
      002008 CD 10 7A         [ 4] 5814 	call func_args  
      00200B A1 01            [ 1] 5815 	cp a,#1
      00200D 27 03            [ 1] 5816 	jreq 1$
      00200F CC 08 75         [ 2] 5817 	jp syntax_error
      002012 85               [ 2] 5818 1$:	popw x 
      002013 20 E9            [ 2] 5819 	jra logical_complement
                                   5820 
                                   5821 
                                   5822 
                                   5823 ;-----------------------------------
                                   5824 ; BASIC: IWDGEN expr1 
                                   5825 ; enable independant watchdog timer
                                   5826 ; expr1 is delay in multiple of 62.5µsec
                                   5827 ; expr1 -> {1..16383}
                                   5828 ;-----------------------------------
      002015                       5829 enable_iwdg:
      002015 CD 10 7F         [ 4] 5830 	call arg_list
      002018 A1 01            [ 1] 5831 	cp a,#1 
      00201A 27 03            [ 1] 5832 	jreq 1$
      00201C CC 08 75         [ 2] 5833 	jp syntax_error 
      00201F 85               [ 2] 5834 1$: popw x 
      002020 4B 00            [ 1] 5835 	push #0
      002022 35 CC 50 E0      [ 1] 5836 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002026 9E               [ 1] 5837 	ld a,xh 
      002027 A4 3F            [ 1] 5838 	and a,#0x3f
      002029 95               [ 1] 5839 	ld xh,a  
      00202A A3 00 FF         [ 2] 5840 2$:	cpw x,#255
      00202D 23 06            [ 2] 5841 	jrule 3$
      00202F 0C 01            [ 1] 5842 	inc (1,sp)
      002031 98               [ 1] 5843 	rcf 
      002032 56               [ 2] 5844 	rrcw x 
      002033 20 F5            [ 2] 5845 	jra 2$
      002035 35 55 50 E0      [ 1] 5846 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002039 84               [ 1] 5847 	pop a  
      00203A C7 50 E1         [ 1] 5848 	ld IWDG_PR,a 
      00203D 9F               [ 1] 5849 	ld a,xl
      00203E 4A               [ 1] 5850 	dec a 
      00203F 35 55 50 E0      [ 1] 5851 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002043 C7 50 E2         [ 1] 5852 	ld IWDG_RLR,a 
      002046 35 AA 50 E0      [ 1] 5853 	mov IWDG_KR,#IWDG_KEY_REFRESH
      00204A 81               [ 4] 5854 	ret 
                                   5855 
                                   5856 
                                   5857 ;-----------------------------------
                                   5858 ; BASIC: IWDGREF  
                                   5859 ; refresh independant watchdog count down 
                                   5860 ; timer before it reset MCU. 
                                   5861 ;-----------------------------------
      00204B                       5862 refresh_iwdg:
      00204B 35 AA 50 E0      [ 1] 5863 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      00204F 81               [ 4] 5864 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                   5865 
                                   5866 
                                   5867 ;-------------------------------------
                                   5868 ; BASIC: LOG(expr)
                                   5869 ; return logarithm base 2 of expr 
                                   5870 ; this is the position of most significant
                                   5871 ; bit set. 
                                   5872 ; input: 
                                   5873 ; output:
                                   5874 ;   X     log2 
                                   5875 ;   A     TK_INTGR 
                                   5876 ;*********************************
      002050                       5877 log2:
      002050 CD 10 7A         [ 4] 5878 	call func_args 
      002053 A1 01            [ 1] 5879 	cp a,#1 
      002055 27 03            [ 1] 5880 	jreq 1$
      002057 CC 08 75         [ 2] 5881 	jp syntax_error 
      00205A 85               [ 2] 5882 1$: popw x 
      00205B                       5883 leading_one:
      00205B 5D               [ 2] 5884 	tnzw x 
      00205C 27 0A            [ 1] 5885 	jreq 4$
      00205E A6 0F            [ 1] 5886 	ld a,#15 
      002060 59               [ 2] 5887 2$: rlcw x 
      002061 25 03            [ 1] 5888     jrc 3$
      002063 4A               [ 1] 5889 	dec a 
      002064 20 FA            [ 2] 5890 	jra 2$
      002066 5F               [ 1] 5891 3$: clrw x 
      002067 97               [ 1] 5892     ld xl,a
      002068 A6 84            [ 1] 5893 4$:	ld a,#TK_INTGR
      00206A 81               [ 4] 5894 	ret 
                                   5895 
                                   5896 ;-----------------------------------
                                   5897 ; BASIC: BIT(expr) 
                                   5898 ; expr ->{0..15}
                                   5899 ; return 2^expr 
                                   5900 ; output:
                                   5901 ;    x    2^expr 
                                   5902 ;-----------------------------------
      00206B                       5903 bitmask:
      00206B CD 10 7A         [ 4] 5904     call func_args 
      00206E A1 01            [ 1] 5905 	cp a,#1
      002070 27 03            [ 1] 5906 	jreq 1$
      002072 CC 08 75         [ 2] 5907 	jp syntax_error 
      002075 85               [ 2] 5908 1$: popw x 
      002076 9F               [ 1] 5909 	ld a,xl 
      002077 A4 0F            [ 1] 5910 	and a,#15
      002079 5F               [ 1] 5911 	clrw x 
      00207A 5C               [ 2] 5912 	incw x 
      00207B 4D               [ 1] 5913 2$: tnz a 
      00207C 27 04            [ 1] 5914 	jreq 3$
      00207E 58               [ 2] 5915 	slaw x 
      00207F 4A               [ 1] 5916 	dec a 
      002080 20 F9            [ 2] 5917 	jra 2$ 
      002082 A6 84            [ 1] 5918 3$: ld a,#TK_INTGR
      002084 81               [ 4] 5919 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                   5920 
                                   5921 ;------------------------------
                                   5922 ; BASIC: INVERT(expr)
                                   5923 ; 1's complement 
                                   5924 ;--------------------------------
      002085                       5925 invert:
      002085 CD 10 7A         [ 4] 5926 	call func_args
      002088 A1 01            [ 1] 5927 	cp a,#1 
      00208A 27 03            [ 1] 5928 	jreq 1$
      00208C CC 08 75         [ 2] 5929 	jp syntax_error
      00208F 85               [ 2] 5930 1$: popw x  
      002090 53               [ 2] 5931 	cplw x 
      002091 A6 84            [ 1] 5932 	ld a,#TK_INTGR 
      002093 81               [ 4] 5933 	ret 
                                   5934 
                                   5935 ;------------------------------
                                   5936 ; BASIC: DO 
                                   5937 ; initiate a DO ... UNTIL loop 
                                   5938 ;------------------------------
                           000003  5939 	DOLP_ADR=3 
                           000005  5940 	DOLP_INW=5
                           000004  5941 	VSIZE=4 
      002094                       5942 do_loop:
      002094 85               [ 2] 5943 	popw x 
      002095                       5944 	_vars VSIZE 
      002095 52 04            [ 2]    1     sub sp,#VSIZE 
      002097 89               [ 2] 5945 	pushw x 
      002098 90 CE 00 04      [ 2] 5946 	ldw y,basicptr 
      00209C 17 03            [ 2] 5947 	ldw (DOLP_ADR,sp),y
      00209E 90 CE 00 00      [ 2] 5948 	ldw y,in.w 
      0020A2 17 05            [ 2] 5949 	ldw (DOLP_INW,sp),y
      0020A4 72 5C 00 20      [ 1] 5950 	inc loop_depth 
      0020A8 81               [ 4] 5951 	ret 
                                   5952 
                                   5953 ;--------------------------------
                                   5954 ; BASIC: UNTIL expr 
                                   5955 ; loop if exprssion is false 
                                   5956 ; else terminate loop
                                   5957 ;--------------------------------
      0020A9                       5958 until: 
      0020A9 72 5D 00 20      [ 1] 5959 	tnz loop_depth 
      0020AD 26 03            [ 1] 5960 	jrne 1$ 
      0020AF CC 08 75         [ 2] 5961 	jp syntax_error 
      0020B2                       5962 1$: 
      0020B2 CD 11 C1         [ 4] 5963 	call relation 
      0020B5 A1 84            [ 1] 5964 	cp a,#TK_INTGR
      0020B7 27 03            [ 1] 5965 	jreq 2$
      0020B9 CC 08 75         [ 2] 5966 	jp syntax_error
      0020BC                       5967 2$: 
      0020BC 5D               [ 2] 5968 	tnzw x 
      0020BD 26 10            [ 1] 5969 	jrne 9$
      0020BF 1E 03            [ 2] 5970 	ldw x,(DOLP_ADR,sp)
      0020C1 CF 00 04         [ 2] 5971 	ldw basicptr,x 
      0020C4 E6 02            [ 1] 5972 	ld a,(2,x)
      0020C6 C7 00 03         [ 1] 5973 	ld count,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      0020C9 1E 05            [ 2] 5974 	ldw x,(DOLP_INW,sp)
      0020CB CF 00 00         [ 2] 5975 	ldw in.w,x 
      0020CE 81               [ 4] 5976 	ret 
      0020CF                       5977 9$:	; remove loop data from stack  
      0020CF 85               [ 2] 5978 	popw x
      0020D0                       5979 	_drop VSIZE
      0020D0 5B 04            [ 2]    1     addw sp,#VSIZE 
      0020D2 72 5A 00 20      [ 1] 5980 	dec loop_depth 
      0020D6 FC               [ 2] 5981 	jp (x)
                                   5982 
                                   5983 ;--------------------------
                                   5984 ; BASIC: PRTA...PRTI  
                                   5985 ;  return constant value 
                                   5986 ;  PORT  offset in GPIO
                                   5987 ;  array
                                   5988 ;---------------------------
      0020D7                       5989 const_porta:
      0020D7 AE 00 00         [ 2] 5990 	ldw x,#0
      0020DA A6 84            [ 1] 5991 	ld a,#TK_INTGR 
      0020DC 81               [ 4] 5992 	ret 
      0020DD                       5993 const_portb:
      0020DD AE 00 01         [ 2] 5994 	ldw x,#1
      0020E0 A6 84            [ 1] 5995 	ld a,#TK_INTGR 
      0020E2 81               [ 4] 5996 	ret 
      0020E3                       5997 const_portc:
      0020E3 AE 00 02         [ 2] 5998 	ldw x,#2
      0020E6 A6 84            [ 1] 5999 	ld a,#TK_INTGR 
      0020E8 81               [ 4] 6000 	ret 
      0020E9                       6001 const_portd:
      0020E9 AE 00 03         [ 2] 6002 	ldw x,#3
      0020EC A6 84            [ 1] 6003 	ld a,#TK_INTGR 
      0020EE 81               [ 4] 6004 	ret 
      0020EF                       6005 const_porte:
      0020EF AE 00 04         [ 2] 6006 	ldw x,#4
      0020F2 A6 84            [ 1] 6007 	ld a,#TK_INTGR 
      0020F4 81               [ 4] 6008 	ret 
      0020F5                       6009 const_portf:
      0020F5 AE 00 05         [ 2] 6010 	ldw x,#5
      0020F8 A6 84            [ 1] 6011 	ld a,#TK_INTGR 
      0020FA 81               [ 4] 6012 	ret 
      0020FB                       6013 const_portg:
      0020FB AE 00 06         [ 2] 6014 	ldw x,#6
      0020FE A6 84            [ 1] 6015 	ld a,#TK_INTGR 
      002100 81               [ 4] 6016 	ret 
      002101                       6017 const_porth:
      002101 AE 00 07         [ 2] 6018 	ldw x,#7
      002104 A6 84            [ 1] 6019 	ld a,#TK_INTGR 
      002106 81               [ 4] 6020 	ret 
      002107                       6021 const_porti:
      002107 AE 00 08         [ 2] 6022 	ldw x,#8
      00210A A6 84            [ 1] 6023 	ld a,#TK_INTGR 
      00210C 81               [ 4] 6024 	ret 
                                   6025 
                                   6026 ;-------------------------------
                                   6027 ; following return constant 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   6028 ; related to GPIO register offset 
                                   6029 ;---------------------------------
      00210D                       6030 const_odr:
      00210D A6 84            [ 1] 6031 	ld a,#TK_INTGR 
      00210F AE 00 00         [ 2] 6032 	ldw x,#GPIO_ODR
      002112 81               [ 4] 6033 	ret 
      002113                       6034 const_idr:
      002113 A6 84            [ 1] 6035 	ld a,#TK_INTGR 
      002115 AE 00 01         [ 2] 6036 	ldw x,#GPIO_IDR
      002118 81               [ 4] 6037 	ret 
      002119                       6038 const_ddr:
      002119 A6 84            [ 1] 6039 	ld a,#TK_INTGR 
      00211B AE 00 02         [ 2] 6040 	ldw x,#GPIO_DDR
      00211E 81               [ 4] 6041 	ret 
      00211F                       6042 const_cr1:
      00211F A6 84            [ 1] 6043 	ld a,#TK_INTGR 
      002121 AE 00 03         [ 2] 6044 	ldw x,#GPIO_CR1
      002124 81               [ 4] 6045 	ret 
      002125                       6046 const_cr2:
      002125 A6 84            [ 1] 6047 	ld a,#TK_INTGR 
      002127 AE 00 04         [ 2] 6048 	ldw x,#GPIO_CR2
      00212A 81               [ 4] 6049 	ret 
                                   6050 ;-------------------------
                                   6051 ;  constant for port mode
                                   6052 ;  used by PMODE 
                                   6053 ;  input or output
                                   6054 ;------------------------
      00212B                       6055 const_output:
      00212B A6 84            [ 1] 6056 	ld a,#TK_INTGR 
      00212D AE 00 01         [ 2] 6057 	ldw x,#OUTP
      002130 81               [ 4] 6058 	ret 
      002131                       6059 const_input:
      002131 A6 84            [ 1] 6060 	ld a,#TK_INTGR 
      002133 AE 00 00         [ 2] 6061 	ldw x,#INP 
      002136 81               [ 4] 6062 	ret 
                                   6063 ;-----------------------
                                   6064 ; memory area constants
                                   6065 ;-----------------------
      002137                       6066 const_eeprom_base:
      002137 A6 84            [ 1] 6067 	ld a,#TK_INTGR 
      002139 AE 40 00         [ 2] 6068 	ldw x,#EEPROM_BASE 
      00213C 81               [ 4] 6069 	ret 
                                   6070 
                                   6071 ;---------------------------
                                   6072 ; BASIC: DATA 
                                   6073 ; when the interpreter find 
                                   6074 ; a DATA line it skip it.
                                   6075 ;---------------------------
      00213D                       6076 data:
      00213D 55 00 03 00 01   [ 1] 6077 	mov in,count 
      002142 81               [ 4] 6078 	ret 
                                   6079 
                                   6080 ;---------------------------
                                   6081 ; BASIC: DATLN  *expr*
                                   6082 ; set DATA pointer at line# 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                   6083 ; specified by *expr* 
                                   6084 ;---------------------------
      002143                       6085 data_line:
      002143 CD 11 78         [ 4] 6086 	call expression
      002146 A1 84            [ 1] 6087 	cp a,#TK_INTGR
      002148 27 03            [ 1] 6088 	jreq 1$
      00214A CC 08 75         [ 2] 6089 	jp syntax_error 
      00214D CD 04 00         [ 4] 6090 1$: call search_lineno
      002150 5D               [ 2] 6091 	tnzw x 
      002151 26 05            [ 1] 6092 	jrne 3$
      002153 A6 05            [ 1] 6093 2$:	ld a,#ERR_NO_LINE 
      002155 CC 08 77         [ 2] 6094 	jp tb_error
      002158                       6095 3$: ; check if valid data line 
      002158 90 93            [ 1] 6096     ldw y,x 
      00215A EE 04            [ 2] 6097 	ldw x,(4,x)
      00215C A3 21 3D         [ 2] 6098 	cpw x,#data 
      00215F 26 F2            [ 1] 6099 	jrne 2$ 
      002161 90 CF 00 06      [ 2] 6100 	ldw data_ptr,y
      002165 90 E6 02         [ 1] 6101 	ld a,(2,y)
      002168 C7 00 09         [ 1] 6102 	ld data_len,a 
      00216B 35 06 00 08      [ 1] 6103 	mov data_ofs,#FIRST_DATA_ITEM 
      00216F 81               [ 4] 6104 	ret
                                   6105 
                                   6106 ;---------------------------------
                                   6107 ; BASIC: RESTORE 
                                   6108 ; set data_ptr to first data line
                                   6109 ; if not DATA found pointer set to
                                   6110 ; zero 
                                   6111 ;---------------------------------
      002170                       6112 restore:
      002170 72 5F 00 06      [ 1] 6113 	clr data_ptr 
      002174 72 5F 00 07      [ 1] 6114 	clr data_ptr+1
      002178 72 5F 00 08      [ 1] 6115 	clr data_ofs 
      00217C 72 5F 00 09      [ 1] 6116 	clr data_len
      002180 CE 00 1C         [ 2] 6117 	ldw x,txtbgn
      002183                       6118 data_search_loop: 	
      002183 C3 00 1E         [ 2] 6119 	cpw x,txtend
      002186 24 17            [ 1] 6120 	jruge 9$
      002188 90 93            [ 1] 6121 	ldw y,x 
      00218A EE 04            [ 2] 6122 	ldw x,(4,x)
      00218C A3 21 3D         [ 2] 6123 	cpw x,#data 
      00218F 26 1A            [ 1] 6124 	jrne try_next_line 
      002191 90 CF 00 06      [ 2] 6125 	ldw data_ptr,y 
      002195 90 E6 02         [ 1] 6126 	ld a,(2,y)
      002198 C7 00 09         [ 1] 6127 	ld data_len,a 
      00219B 35 06 00 08      [ 1] 6128 	mov data_ofs,#FIRST_DATA_ITEM
      00219F 72 5D 00 09      [ 1] 6129 9$:	tnz data_len 
      0021A3 26 05            [ 1] 6130     jrne 10$
      0021A5 A6 0C            [ 1] 6131 	ld a,#ERR_NO_DATA 
      0021A7 CC 08 77         [ 2] 6132 	jp tb_error 
      0021AA 81               [ 4] 6133 10$:ret
      0021AB                       6134 try_next_line:
      0021AB 93               [ 1] 6135 	ldw x,y 
      0021AC E6 02            [ 1] 6136 	ld a,(2,x)
      0021AE C7 00 0D         [ 1] 6137 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0021B1 72 5F 00 0C      [ 1] 6138 	clr acc16 
      0021B5 72 BB 00 0C      [ 2] 6139 	addw x,acc16 
      0021B9 20 C8            [ 2] 6140 	jra data_search_loop
                                   6141 
                                   6142 
                                   6143 ;---------------------------------
                                   6144 ; BASIC: READ 
                                   6145 ; return next data item | 0 
                                   6146 ;---------------------------------
                           000001  6147 	CTX_BPTR=1 
                           000003  6148 	CTX_IN=3 
                           000004  6149 	CTX_COUNT=4 
                           000005  6150 	XSAVE=5
                           000006  6151 	VSIZE=6
      0021BB                       6152 read:
      0021BB                       6153 	_vars  VSIZE 
      0021BB 52 06            [ 2]    1     sub sp,#VSIZE 
      0021BD                       6154 read01:	
      0021BD C6 00 08         [ 1] 6155 	ld a,data_ofs
      0021C0 C1 00 09         [ 1] 6156 	cp a,data_len 
      0021C3 27 37            [ 1] 6157 	jreq 2$ ; end of line  
      0021C5 CD 15 32         [ 4] 6158 	call save_context
      0021C8 CE 00 06         [ 2] 6159 	ldw x,data_ptr 
      0021CB CF 00 04         [ 2] 6160 	ldw basicptr,x 
      0021CE 55 00 08 00 01   [ 1] 6161 	mov in,data_ofs 
      0021D3 55 00 09 00 03   [ 1] 6162 	mov count,data_len  
      0021D8 CD 11 78         [ 4] 6163 	call expression 
      0021DB A1 84            [ 1] 6164 	cp a,#TK_INTGR 
      0021DD 27 03            [ 1] 6165 	jreq 1$ 
      0021DF CC 08 75         [ 2] 6166 	jp syntax_error 
      0021E2                       6167 1$:
      0021E2 1F 05            [ 2] 6168 	ldw (XSAVE,SP),x
      0021E4 CD 09 67         [ 4] 6169 	call next_token ; skip comma
      0021E7 CE 00 04         [ 2] 6170 	ldw x,basicptr 
      0021EA CF 00 06         [ 2] 6171 	ldw data_ptr,x 
      0021ED 55 00 01 00 08   [ 1] 6172 	mov data_ofs,in 
      0021F2 CD 15 42         [ 4] 6173 	call rest_context
      0021F5 1E 05            [ 2] 6174 	ldw x,(XSAVE,sp)
      0021F7 A6 84            [ 1] 6175 	ld a,#TK_INTGR
      0021F9                       6176 	_drop VSIZE 
      0021F9 5B 06            [ 2]    1     addw sp,#VSIZE 
      0021FB 81               [ 4] 6177 	ret 
      0021FC                       6178 2$: ; end of line reached 
      0021FC 90 CE 00 06      [ 2] 6179 	ldw y, data_ptr 
      002200 72 5F 00 06      [ 1] 6180 	clr data_ptr
      002204 72 5F 00 07      [ 1] 6181 	clr data_ptr+1   
      002208 72 5F 00 08      [ 1] 6182 	clr data_ofs 
      00220C 72 5F 00 09      [ 1] 6183 	clr data_len 
      002210 CD 21 AB         [ 4] 6184 	call try_next_line 
      002213 20 A8            [ 2] 6185 	jra read01
                                   6186 
                                   6187 
                                   6188 ;---------------------------------
                                   6189 ; BASIC: SPIEN clkdiv, 0|1  
                                   6190 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                   6191 ; if clkdiv==-1 disable SPI
                                   6192 ; 0|1 -> disable|enable  
                                   6193 ;--------------------------------- 
                           000005  6194 SPI_CS_BIT=5
      002215                       6195 spi_enable:
      002215 CD 10 7F         [ 4] 6196 	call arg_list 
      002218 A1 02            [ 1] 6197 	cp a,#2
      00221A 27 03            [ 1] 6198 	jreq 1$
      00221C CC 08 75         [ 2] 6199 	jp syntax_error 
      00221F                       6200 1$: 
      00221F 72 12 50 C7      [ 1] 6201 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002223 85               [ 2] 6202 	popw x  
      002224 5D               [ 2] 6203 	tnzw x 
      002225 27 21            [ 1] 6204 	jreq spi_disable 
      002227 85               [ 2] 6205 	popw x 
      002228 A6 08            [ 1] 6206 	ld a,#(1<<SPI_CR1_BR)
      00222A 42               [ 4] 6207 	mul x,a 
      00222B 9F               [ 1] 6208 	ld a,xl 
      00222C C7 52 00         [ 1] 6209 	ld SPI_CR1,a 
                                   6210 ; configure ~CS on PE5 (D10 on CN8) as output. 
      00222F 72 1A 50 14      [ 1] 6211 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002233 72 1A 50 16      [ 1] 6212 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   6213 ; configure SPI as master mode 0.	
      002237 72 14 52 00      [ 1] 6214 	bset SPI_CR1,#SPI_CR1_MSTR
                                   6215 ; ~CS line controlled by sofware 	
      00223B 72 12 52 01      [ 1] 6216 	bset SPI_CR2,#SPI_CR2_SSM 
      00223F 72 10 52 01      [ 1] 6217     bset SPI_CR2,#SPI_CR2_SSI 
                                   6218 ; enable SPI
      002243 72 1C 52 00      [ 1] 6219 	bset SPI_CR1,#SPI_CR1_SPE 	
      002247 81               [ 4] 6220 	ret 
      002248                       6221 spi_disable:
      002248                       6222 	_drop #2; throw first argument.
      002248 5B 02            [ 2]    1     addw sp,##2 
                                   6223 ; wait spi idle 
      00224A A6 82            [ 1] 6224 1$:	ld a,#0x82 
      00224C C4 52 03         [ 1] 6225 	and a,SPI_SR
      00224F A1 02            [ 1] 6226 	cp a,#2 
      002251 26 F7            [ 1] 6227 	jrne 1$
      002253 72 1D 52 00      [ 1] 6228 	bres SPI_CR1,#SPI_CR1_SPE
      002257 72 13 50 C7      [ 1] 6229 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      00225B 72 1B 50 16      [ 1] 6230 	bres PE_DDR,#SPI_CS_BIT 
      00225F 81               [ 4] 6231 	ret 
                                   6232 
      002260                       6233 spi_clear_error:
      002260 A6 78            [ 1] 6234 	ld a,#0x78 
      002262 C5 52 03         [ 1] 6235 	bcp a,SPI_SR 
      002265 27 04            [ 1] 6236 	jreq 1$
      002267 72 5F 52 03      [ 1] 6237 	clr SPI_SR 
      00226B 81               [ 4] 6238 1$: ret 
                                   6239 
      00226C                       6240 spi_send_byte:
      00226C 88               [ 1] 6241 	push a 
      00226D CD 22 60         [ 4] 6242 	call spi_clear_error
      002270 84               [ 1] 6243 	pop a 
      002271 72 03 52 03 FB   [ 2] 6244 	btjf SPI_SR,#SPI_SR_TXE,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      002276 C7 52 04         [ 1] 6245 	ld SPI_DR,a
      002279 72 01 52 03 FB   [ 2] 6246 	btjf SPI_SR,#SPI_SR_RXNE,.  
      00227E C6 52 04         [ 1] 6247 	ld a,SPI_DR 
      002281 81               [ 4] 6248 	ret 
                                   6249 
      002282                       6250 spi_rcv_byte:
      002282 A6 FF            [ 1] 6251 	ld a,#255
      002284 72 01 52 03 E3   [ 2] 6252 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002289 C6 52 04         [ 1] 6253 	ld a,SPI_DR 
      00228C 81               [ 4] 6254 	ret
                                   6255 
                                   6256 ;------------------------------
                                   6257 ; BASIC: SPIWR byte [,byte]
                                   6258 ; write 1 or more byte
                                   6259 ;------------------------------
      00228D                       6260 spi_write:
      00228D CD 11 78         [ 4] 6261 	call expression
      002290 A1 84            [ 1] 6262 	cp a,#TK_INTGR 
      002292 27 03            [ 1] 6263 	jreq 1$
      002294 CC 08 75         [ 2] 6264 	jp syntax_error 
      002297                       6265 1$:	
      002297 9F               [ 1] 6266 	ld a,xl 
      002298 CD 22 6C         [ 4] 6267 	call spi_send_byte 
      00229B CD 09 67         [ 4] 6268 	call next_token 
      00229E A1 09            [ 1] 6269 	cp a,#TK_COMMA 
      0022A0 26 02            [ 1] 6270 	jrne 2$ 
      0022A2 20 E9            [ 2] 6271 	jra spi_write 
      0022A4 4D               [ 1] 6272 2$:	tnz a 
      0022A5 27 05            [ 1] 6273 	jreq 3$
      0022A7                       6274 	_unget_token  
      0022A7 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0022AC 81               [ 4] 6275 3$:	ret 
                                   6276 
                                   6277 
                                   6278 ;-------------------------------
                                   6279 ; BASIC: SPIRD 	
                                   6280 ; read one byte from SPI 
                                   6281 ;-------------------------------
      0022AD                       6282 spi_read:
      0022AD CD 22 82         [ 4] 6283 	call spi_rcv_byte 
      0022B0 5F               [ 1] 6284 	clrw x 
      0022B1 97               [ 1] 6285 	ld xl,a 
      0022B2 A6 84            [ 1] 6286 	ld a,#TK_INTGR 
      0022B4 81               [ 4] 6287 	ret 
                                   6288 
                                   6289 ;------------------------------
                                   6290 ; BASIC: SPISEL 0|1 
                                   6291 ; set state of ~CS line
                                   6292 ; 0|1 deselect|select  
                                   6293 ;------------------------------
      0022B5                       6294 spi_select:
      0022B5 CD 09 67         [ 4] 6295 	call next_token 
      0022B8 A1 84            [ 1] 6296 	cp a,#TK_INTGR 
      0022BA 27 03            [ 1] 6297 	jreq 1$
      0022BC CC 08 75         [ 2] 6298 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0022BF 5D               [ 2] 6299 1$: tnzw x  
      0022C0 27 05            [ 1] 6300 	jreq cs_high 
      0022C2 72 1B 50 14      [ 1] 6301 	bres PE_ODR,#SPI_CS_BIT
      0022C6 81               [ 4] 6302 	ret 
      0022C7                       6303 cs_high: 
      0022C7 72 1A 50 14      [ 1] 6304 	bset PE_ODR,#SPI_CS_BIT
      0022CB 81               [ 4] 6305 	ret 
                                   6306 
                                   6307 
                                   6308 ;------------------------------
                                   6309 ; BASIC: FILERX
                                   6310 ; Use to receive a BASIC program
                                   6311 ; from the PC using XMODEM 
                                   6312 ; protocol. The file is store in
                                   6313 ; Each line received is compiled
                                   6314 ; then stored in RAM. When reception 
                                   6315 ; is completed with success  the 
                                   6316 ; program is ready to be executed 
                                   6317 ; or save as local file.
                                   6318 ;--------------------------------
      0022CC                       6319 file_receive:
      0022CC 72 01 00 23 05   [ 2] 6320 	btjf flags,#FRUN,1$
      0022D1 A6 07            [ 1] 6321 	ld a,#ERR_CMD_ONLY
      0022D3 CC 08 77         [ 2] 6322 	jp tb_error 
      0022D6                       6323 1$:	
      0022D6 CD 06 E1         [ 4] 6324 	call clear_basic
      0022D9 CE 00 1C         [ 2] 6325 	ldw x, txtbgn
      0022DC CD 00 00         [ 4] 6326 	call xreceive 
      0022DF 72 BB 00 1C      [ 2] 6327 	addw x,txtbgn 
      0022E3 CF 00 1E         [ 2] 6328 	ldw txtend,x 
      0022E6 CD 09 BC         [ 4] 6329 	call print_int 
      0022E9 AE 22 F0         [ 2] 6330 	ldw x,#fsize_msg 
      0022EC CD 02 B3         [ 4] 6331 	call puts 
      0022EF 81               [ 4] 6332 	ret 
      0022F0 20 62 79 74 65 73 20  6333 fsize_msg: .asciz " bytes received\n"
             72 65 63 65 69 76 65
             64 0A 00
                                   6334 
                                   6335 ;------------------------------
                                   6336 ; BASIC: FILETX "file_name" 
                                   6337 ; Transmit the program in RAM 
                                   6338 ; To the PC using XMODEM protocol.
                                   6339 ; The file transmitted as source 
                                   6340 ; file not tokenized. 
                                   6341 ;-------------------------------
      002301                       6342 file_transmit:
                                   6343 
      002301 81               [ 4] 6344 	ret 
                                   6345 
                                   6346 ;-------------------------------
                                   6347 ; BASIC: PAD 
                                   6348 ; Return pad buffer address.
                                   6349 ;------------------------------
      002302                       6350 pad_ref:
      002302 AE 16 E0         [ 2] 6351 	ldw x,#pad 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      002305 B6 84            [ 1] 6352 	ld a,TK_INTGR
      002307 81               [ 4] 6353 	ret 
                                   6354 
                                   6355 ;------------------------------
                                   6356 ;      dictionary 
                                   6357 ; format:
                                   6358 ;   link:   2 bytes 
                                   6359 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6360 ;   cmd_name: 16 byte max 
                                   6361 ;   code_address: 2 bytes 
                                   6362 ;------------------------------
                                   6363 	.macro _dict_entry len,name,cmd 
                                   6364 	.word LINK 
                                   6365 	LINK=.
                                   6366 name:
                                   6367 	.byte len 	
                                   6368 	.ascii "name"
                                   6369 	.word cmd 
                                   6370 	.endm 
                                   6371 
                           000000  6372 	LINK=0
                                   6373 ; respect alphabetic order for BASIC names from Z-A
                                   6374 ; this sort order is for a cleaner WORDS cmd output. 	
      002308                       6375 kword_end:
      002308                       6376 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      002308 00 00                    1 	.word LINK 
                           00230A     2 	LINK=.
      00230A                          3 XOR:
      00230A 43                       4 	.byte 3+F_IFUNC 	
      00230B 58 4F 52                 5 	.ascii "XOR"
      00230E 1E 58                    6 	.word bit_xor 
      002310                       6377 	_dict_entry,5,WRITE,write  
      002310 23 0A                    1 	.word LINK 
                           002312     2 	LINK=.
      002312                          3 WRITE:
      002312 05                       4 	.byte 5 	
      002313 57 52 49 54 45           5 	.ascii "WRITE"
      002318 1C 7D                    6 	.word write 
      00231A                       6378 	_dict_entry,5,WORDS,words 
      00231A 23 12                    1 	.word LINK 
                           00231C     2 	LINK=.
      00231C                          3 WORDS:
      00231C 05                       4 	.byte 5 	
      00231D 57 4F 52 44 53           5 	.ascii "WORDS"
      002322 1F 86                    6 	.word words 
      002324                       6379 	_dict_entry 4,WAIT,wait 
      002324 23 1C                    1 	.word LINK 
                           002326     2 	LINK=.
      002326                          3 WAIT:
      002326 04                       4 	.byte 4 	
      002327 57 41 49 54              5 	.ascii "WAIT"
      00232B 15 C4                    6 	.word wait 
      00232D                       6380 	_dict_entry,3+F_IFUNC,USR,usr
      00232D 23 26                    1 	.word LINK 
                           00232F     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      00232F                          3 USR:
      00232F 43                       4 	.byte 3+F_IFUNC 	
      002330 55 53 52                 5 	.ascii "USR"
      002333 1D 29                    6 	.word usr 
      002335                       6381 	_dict_entry,5,UNTIL,until 
      002335 23 2F                    1 	.word LINK 
                           002337     2 	LINK=.
      002337                          3 UNTIL:
      002337 05                       4 	.byte 5 	
      002338 55 4E 54 49 4C           5 	.ascii "UNTIL"
      00233D 20 A9                    6 	.word until 
      00233F                       6382 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      00233F 23 37                    1 	.word LINK 
                           002341     2 	LINK=.
      002341                          3 UFLASH:
      002341 46                       4 	.byte 6+F_IFUNC 	
      002342 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002348 1D 23                    6 	.word uflash 
      00234A                       6383 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      00234A 23 41                    1 	.word LINK 
                           00234C     2 	LINK=.
      00234C                          3 UBOUND:
      00234C 46                       4 	.byte 6+F_IFUNC 	
      00234D 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002353 12 71                    6 	.word ubound 
      002355                       6384 	_dict_entry,4,TONE,tone  
      002355 23 4C                    1 	.word LINK 
                           002357     2 	LINK=.
      002357                          3 TONE:
      002357 04                       4 	.byte 4 	
      002358 54 4F 4E 45              5 	.ascii "TONE"
      00235C 18 0E                    6 	.word tone 
      00235E                       6385 	_dict_entry,2,TO,to
      00235E 23 57                    1 	.word LINK 
                           002360     2 	LINK=.
      002360                          3 TO:
      002360 02                       4 	.byte 2 	
      002361 54 4F                    5 	.ascii "TO"
      002363 16 9E                    6 	.word to 
      002365                       6386 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      002365 23 60                    1 	.word LINK 
                           002367     2 	LINK=.
      002367                          3 TIMEOUT:
      002367 47                       4 	.byte 7+F_IFUNC 	
      002368 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      00236F 1F FB                    6 	.word timeout 
      002371                       6387 	_dict_entry,5,TIMER,set_timer
      002371 23 67                    1 	.word LINK 
                           002373     2 	LINK=.
      002373                          3 TIMER:
      002373 05                       4 	.byte 5 	
      002374 54 49 4D 45 52           5 	.ascii "TIMER"
      002379 1F EC                    6 	.word set_timer 
      00237B                       6388 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      00237B 23 73                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                           00237D     2 	LINK=.
      00237D                          3 TICKS:
      00237D 45                       4 	.byte 5+F_IFUNC 	
      00237E 54 49 43 4B 53           5 	.ascii "TICKS"
      002383 1E 0E                    6 	.word get_ticks 
      002385                       6389 	_dict_entry,4,STOP,stop 
      002385 23 7D                    1 	.word LINK 
                           002387     2 	LINK=.
      002387                          3 STOP:
      002387 04                       4 	.byte 4 	
      002388 53 54 4F 50              5 	.ascii "STOP"
      00238C 19 2D                    6 	.word stop 
      00238E                       6390 	_dict_entry,4,STEP,step 
      00238E 23 87                    1 	.word LINK 
                           002390     2 	LINK=.
      002390                          3 STEP:
      002390 04                       4 	.byte 4 	
      002391 53 54 45 50              5 	.ascii "STEP"
      002395 16 CE                    6 	.word step 
      002397                       6391 	_dict_entry,5,SPIWR,spi_write
      002397 23 90                    1 	.word LINK 
                           002399     2 	LINK=.
      002399                          3 SPIWR:
      002399 05                       4 	.byte 5 	
      00239A 53 50 49 57 52           5 	.ascii "SPIWR"
      00239F 22 8D                    6 	.word spi_write 
      0023A1                       6392 	_dict_entry,6,SPISEL,spi_select
      0023A1 23 99                    1 	.word LINK 
                           0023A3     2 	LINK=.
      0023A3                          3 SPISEL:
      0023A3 06                       4 	.byte 6 	
      0023A4 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      0023AA 22 B5                    6 	.word spi_select 
      0023AC                       6393 	_dict_entry,5,SPIEN,spi_enable 
      0023AC 23 A3                    1 	.word LINK 
                           0023AE     2 	LINK=.
      0023AE                          3 SPIEN:
      0023AE 05                       4 	.byte 5 	
      0023AF 53 50 49 45 4E           5 	.ascii "SPIEN"
      0023B4 22 15                    6 	.word spi_enable 
      0023B6                       6394 	_dict_entry,5+F_IFUNC,SPIRD, spi_read 
      0023B6 23 AE                    1 	.word LINK 
                           0023B8     2 	LINK=.
      0023B8                          3 SPIRD:
      0023B8 45                       4 	.byte 5+F_IFUNC 	
      0023B9 53 50 49 52 44           5 	.ascii "SPIRD"
      0023BE 22 AD                    6 	.word spi_read 
      0023C0                       6395 	_dict_entry,5,SLEEP,sleep 
      0023C0 23 B8                    1 	.word LINK 
                           0023C2     2 	LINK=.
      0023C2                          3 SLEEP:
      0023C2 05                       4 	.byte 5 	
      0023C3 53 4C 45 45 50           5 	.ascii "SLEEP"
      0023C8 1D A7                    6 	.word sleep 
      0023CA                       6396 	_dict_entry,4+F_IFUNC,SIZE,size
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0023CA 23 C2                    1 	.word LINK 
                           0023CC     2 	LINK=.
      0023CC                          3 SIZE:
      0023CC 44                       4 	.byte 4+F_IFUNC 	
      0023CD 53 49 5A 45              5 	.ascii "SIZE"
      0023D1 12 67                    6 	.word size 
      0023D3                       6397     _dict_entry,4,SHOW,show 
      0023D3 23 CC                    1 	.word LINK 
                           0023D5     2 	LINK=.
      0023D5                          3 SHOW:
      0023D5 04                       4 	.byte 4 	
      0023D6 53 48 4F 57              5 	.ascii "SHOW"
      0023DA 12 1C                    6 	.word show 
      0023DC                       6398 	_dict_entry,4,SAVE,save
      0023DC 23 D5                    1 	.word LINK 
                           0023DE     2 	LINK=.
      0023DE                          3 SAVE:
      0023DE 04                       4 	.byte 4 	
      0023DF 53 41 56 45              5 	.ascii "SAVE"
      0023E3 1A 6A                    6 	.word save 
      0023E5                       6399 	_dict_entry 3,RUN,run
      0023E5 23 DE                    1 	.word LINK 
                           0023E7     2 	LINK=.
      0023E7                          3 RUN:
      0023E7 03                       4 	.byte 3 	
      0023E8 52 55 4E                 5 	.ascii "RUN"
      0023EB 17 AE                    6 	.word run 
      0023ED                       6400 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0023ED 23 E7                    1 	.word LINK 
                           0023EF     2 	LINK=.
      0023EF                          3 RSHIFT:
      0023EF 46                       4 	.byte 6+F_IFUNC 	
      0023F0 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0023F6 1E 89                    6 	.word rshift 
      0023F8                       6401 	_dict_entry,3+F_IFUNC,RND,random 
      0023F8 23 EF                    1 	.word LINK 
                           0023FA     2 	LINK=.
      0023FA                          3 RND:
      0023FA 43                       4 	.byte 3+F_IFUNC 	
      0023FB 52 4E 44                 5 	.ascii "RND"
      0023FE 1F 1F                    6 	.word random 
      002400                       6402 	_dict_entry,6,RETURN,return 
      002400 23 FA                    1 	.word LINK 
                           002402     2 	LINK=.
      002402                          3 RETURN:
      002402 06                       4 	.byte 6 	
      002403 52 45 54 55 52 4E        5 	.ascii "RETURN"
      002409 17 90                    6 	.word return 
      00240B                       6403 	_dict_entry,7,RESTORE,restore 
      00240B 24 02                    1 	.word LINK 
                           00240D     2 	LINK=.
      00240D                          3 RESTORE:
      00240D 07                       4 	.byte 7 	
      00240E 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      002415 21 70                    6 	.word restore 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002417                       6404 	_dict_entry 6,REMARK,remark 
      002417 24 0D                    1 	.word LINK 
                           002419     2 	LINK=.
      002419                          3 REMARK:
      002419 06                       4 	.byte 6 	
      00241A 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      002420 15 BE                    6 	.word remark 
      002422                       6405 	_dict_entry,6,REBOOT,cold_start
      002422 24 19                    1 	.word LINK 
                           002424     2 	LINK=.
      002424                          3 REBOOT:
      002424 06                       4 	.byte 6 	
      002425 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      00242B 05 CB                    6 	.word cold_start 
      00242D                       6406 	_dict_entry,4+F_IFUNC,READ,read  
      00242D 24 24                    1 	.word LINK 
                           00242F     2 	LINK=.
      00242F                          3 READ:
      00242F 44                       4 	.byte 4+F_IFUNC 	
      002430 52 45 41 44              5 	.ascii "READ"
      002434 21 BB                    6 	.word read 
      002436                       6407 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      002436 24 2F                    1 	.word LINK 
                           002438     2 	LINK=.
      002438                          3 QKEY:
      002438 44                       4 	.byte 4+F_IFUNC 	
      002439 51 4B 45 59              5 	.ascii "QKEY"
      00243D 1C EE                    6 	.word qkey 
      00243F                       6408 	_dict_entry,4+F_IFUNC,PRTI,const_porti 
      00243F 24 38                    1 	.word LINK 
                           002441     2 	LINK=.
      002441                          3 PRTI:
      002441 44                       4 	.byte 4+F_IFUNC 	
      002442 50 52 54 49              5 	.ascii "PRTI"
      002446 21 07                    6 	.word const_porti 
      002448                       6409 	_dict_entry,4+F_IFUNC,PRTH,const_porth 
      002448 24 41                    1 	.word LINK 
                           00244A     2 	LINK=.
      00244A                          3 PRTH:
      00244A 44                       4 	.byte 4+F_IFUNC 	
      00244B 50 52 54 48              5 	.ascii "PRTH"
      00244F 21 01                    6 	.word const_porth 
      002451                       6410 	_dict_entry,4+F_IFUNC,PRTG,const_portg 
      002451 24 4A                    1 	.word LINK 
                           002453     2 	LINK=.
      002453                          3 PRTG:
      002453 44                       4 	.byte 4+F_IFUNC 	
      002454 50 52 54 47              5 	.ascii "PRTG"
      002458 20 FB                    6 	.word const_portg 
      00245A                       6411 	_dict_entry,4+F_IFUNC,PRTF,const_portf
      00245A 24 53                    1 	.word LINK 
                           00245C     2 	LINK=.
      00245C                          3 PRTF:
      00245C 44                       4 	.byte 4+F_IFUNC 	
      00245D 50 52 54 46              5 	.ascii "PRTF"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      002461 20 F5                    6 	.word const_portf 
      002463                       6412 	_dict_entry,4+F_IFUNC,PRTE,const_porte
      002463 24 5C                    1 	.word LINK 
                           002465     2 	LINK=.
      002465                          3 PRTE:
      002465 44                       4 	.byte 4+F_IFUNC 	
      002466 50 52 54 45              5 	.ascii "PRTE"
      00246A 20 EF                    6 	.word const_porte 
      00246C                       6413 	_dict_entry,4+F_IFUNC,PRTD,const_portd
      00246C 24 65                    1 	.word LINK 
                           00246E     2 	LINK=.
      00246E                          3 PRTD:
      00246E 44                       4 	.byte 4+F_IFUNC 	
      00246F 50 52 54 44              5 	.ascii "PRTD"
      002473 20 E9                    6 	.word const_portd 
      002475                       6414 	_dict_entry,4+F_IFUNC,PRTC,const_portc
      002475 24 6E                    1 	.word LINK 
                           002477     2 	LINK=.
      002477                          3 PRTC:
      002477 44                       4 	.byte 4+F_IFUNC 	
      002478 50 52 54 43              5 	.ascii "PRTC"
      00247C 20 E3                    6 	.word const_portc 
      00247E                       6415 	_dict_entry,4+F_IFUNC,PRTB,const_portb
      00247E 24 77                    1 	.word LINK 
                           002480     2 	LINK=.
      002480                          3 PRTB:
      002480 44                       4 	.byte 4+F_IFUNC 	
      002481 50 52 54 42              5 	.ascii "PRTB"
      002485 20 DD                    6 	.word const_portb 
      002487                       6416 	_dict_entry,4+F_IFUNC,PRTA,const_porta 
      002487 24 80                    1 	.word LINK 
                           002489     2 	LINK=.
      002489                          3 PRTA:
      002489 44                       4 	.byte 4+F_IFUNC 	
      00248A 50 52 54 41              5 	.ascii "PRTA"
      00248E 20 D7                    6 	.word const_porta 
      002490                       6417 	_dict_entry 5,PRINT,print 
      002490 24 89                    1 	.word LINK 
                           002492     2 	LINK=.
      002492                          3 PRINT:
      002492 05                       4 	.byte 5 	
      002493 50 52 49 4E 54           5 	.ascii "PRINT"
      002498 14 C1                    6 	.word print 
      00249A                       6418 	_dict_entry,4+F_IFUNC,POUT,const_output
      00249A 24 92                    1 	.word LINK 
                           00249C     2 	LINK=.
      00249C                          3 POUT:
      00249C 44                       4 	.byte 4+F_IFUNC 	
      00249D 50 4F 55 54              5 	.ascii "POUT"
      0024A1 21 2B                    6 	.word const_output 
      0024A3                       6419 	_dict_entry,4,POKE,poke 
      0024A3 24 9C                    1 	.word LINK 
                           0024A5     2 	LINK=.
      0024A5                          3 POKE:
      0024A5 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0024A6 50 4F 4B 45              5 	.ascii "POKE"
      0024AA 16 41                    6 	.word poke 
      0024AC                       6420 	_dict_entry,4+F_IFUNC,PINP,const_input
      0024AC 24 A5                    1 	.word LINK 
                           0024AE     2 	LINK=.
      0024AE                          3 PINP:
      0024AE 44                       4 	.byte 4+F_IFUNC 	
      0024AF 50 49 4E 50              5 	.ascii "PINP"
      0024B3 21 31                    6 	.word const_input 
      0024B5                       6421 	_dict_entry,4+F_IFUNC,PEEK,peek 
      0024B5 24 AE                    1 	.word LINK 
                           0024B7     2 	LINK=.
      0024B7                          3 PEEK:
      0024B7 44                       4 	.byte 4+F_IFUNC 	
      0024B8 50 45 45 4B              5 	.ascii "PEEK"
      0024BC 16 50                    6 	.word peek 
      0024BE                       6422 	_dict_entry,5,PMODE,pin_mode 
      0024BE 24 B7                    1 	.word LINK 
                           0024C0     2 	LINK=.
      0024C0                          3 PMODE:
      0024C0 05                       4 	.byte 5 	
      0024C1 50 4D 4F 44 45           5 	.ascii "PMODE"
      0024C6 1E AE                    6 	.word pin_mode 
      0024C8                       6423 	_dict_entry,5,PAUSE,pause 
      0024C8 24 C0                    1 	.word LINK 
                           0024CA     2 	LINK=.
      0024CA                          3 PAUSE:
      0024CA 05                       4 	.byte 5 	
      0024CB 50 41 55 53 45           5 	.ascii "PAUSE"
      0024D0 1D B2                    6 	.word pause 
      0024D2                       6424 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      0024D2 24 CA                    1 	.word LINK 
                           0024D4     2 	LINK=.
      0024D4                          3 PAD:
      0024D4 43                       4 	.byte 3+F_IFUNC 	
      0024D5 50 41 44                 5 	.ascii "PAD"
      0024D8 23 02                    6 	.word pad_ref 
      0024DA                       6425 	_dict_entry,2+F_IFUNC,OR,bit_or
      0024DA 24 D4                    1 	.word LINK 
                           0024DC     2 	LINK=.
      0024DC                          3 OR:
      0024DC 42                       4 	.byte 2+F_IFUNC 	
      0024DD 4F 52                    5 	.ascii "OR"
      0024DF 1E 40                    6 	.word bit_or 
      0024E1                       6426 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0024E1 24 DC                    1 	.word LINK 
                           0024E3     2 	LINK=.
      0024E3                          3 ODR:
      0024E3 43                       4 	.byte 3+F_IFUNC 	
      0024E4 4F 44 52                 5 	.ascii "ODR"
      0024E7 21 0D                    6 	.word const_odr 
      0024E9                       6427 	_dict_entry,3+F_IFUNC,NOT,func_not 
      0024E9 24 E3                    1 	.word LINK 
                           0024EB     2 	LINK=.
      0024EB                          3 NOT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0024EB 43                       4 	.byte 3+F_IFUNC 	
      0024EC 4E 4F 54                 5 	.ascii "NOT"
      0024EF 20 08                    6 	.word func_not 
      0024F1                       6428 	_dict_entry,3,NEW,new
      0024F1 24 EB                    1 	.word LINK 
                           0024F3     2 	LINK=.
      0024F3                          3 NEW:
      0024F3 03                       4 	.byte 3 	
      0024F4 4E 45 57                 5 	.ascii "NEW"
      0024F7 19 79                    6 	.word new 
      0024F9                       6429 	_dict_entry,4,NEXT,next 
      0024F9 24 F3                    1 	.word LINK 
                           0024FB     2 	LINK=.
      0024FB                          3 NEXT:
      0024FB 04                       4 	.byte 4 	
      0024FC 4E 45 58 54              5 	.ascii "NEXT"
      002500 16 F5                    6 	.word next 
      002502                       6430 	_dict_entry,6+F_IFUNC,MULDIV,muldiv 
      002502 24 FB                    1 	.word LINK 
                           002504     2 	LINK=.
      002504                          3 MULDIV:
      002504 46                       4 	.byte 6+F_IFUNC 	
      002505 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      00250B 0F D2                    6 	.word muldiv 
      00250D                       6431 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      00250D 25 04                    1 	.word LINK 
                           00250F     2 	LINK=.
      00250F                          3 LSHIFT:
      00250F 46                       4 	.byte 6+F_IFUNC 	
      002510 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      002516 1E 70                    6 	.word lshift 
      002518                       6432 	_dict_entry,3+F_IFUNC,LOG,log2 
      002518 25 0F                    1 	.word LINK 
                           00251A     2 	LINK=.
      00251A                          3 LOG:
      00251A 43                       4 	.byte 3+F_IFUNC 	
      00251B 4C 4F 47                 5 	.ascii "LOG"
      00251E 20 50                    6 	.word log2 
      002520                       6433 	_dict_entry,4,LOAD,load 
      002520 25 1A                    1 	.word LINK 
                           002522     2 	LINK=.
      002522                          3 LOAD:
      002522 04                       4 	.byte 4 	
      002523 4C 4F 41 44              5 	.ascii "LOAD"
      002527 1B 64                    6 	.word load 
      002529                       6434 	_dict_entry 4,LIST,list
      002529 25 22                    1 	.word LINK 
                           00252B     2 	LINK=.
      00252B                          3 LIST:
      00252B 04                       4 	.byte 4 	
      00252C 4C 49 53 54              5 	.ascii "LIST"
      002530 12 BE                    6 	.word list 
      002532                       6435 	_dict_entry 3,LET,let 
      002532 25 2B                    1 	.word LINK 
                           002534     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      002534                          3 LET:
      002534 03                       4 	.byte 3 	
      002535 4C 45 54                 5 	.ascii "LET"
      002538 12 93                    6 	.word let 
      00253A                       6436 	_dict_entry,3+F_IFUNC,KEY,key 
      00253A 25 34                    1 	.word LINK 
                           00253C     2 	LINK=.
      00253C                          3 KEY:
      00253C 43                       4 	.byte 3+F_IFUNC 	
      00253D 4B 45 59                 5 	.ascii "KEY"
      002540 1C E6                    6 	.word key 
      002542                       6437 	_dict_entry,7,IWDGREF,refresh_iwdg
      002542 25 3C                    1 	.word LINK 
                           002544     2 	LINK=.
      002544                          3 IWDGREF:
      002544 07                       4 	.byte 7 	
      002545 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      00254C 20 4B                    6 	.word refresh_iwdg 
      00254E                       6438 	_dict_entry,6,IWDGEN,enable_iwdg
      00254E 25 44                    1 	.word LINK 
                           002550     2 	LINK=.
      002550                          3 IWDGEN:
      002550 06                       4 	.byte 6 	
      002551 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      002557 20 15                    6 	.word enable_iwdg 
      002559                       6439 	_dict_entry,6+F_IFUNC,INVERT,invert 
      002559 25 50                    1 	.word LINK 
                           00255B     2 	LINK=.
      00255B                          3 INVERT:
      00255B 46                       4 	.byte 6+F_IFUNC 	
      00255C 49 4E 56 45 52 54        5 	.ascii "INVERT"
      002562 20 85                    6 	.word invert 
      002564                       6440 	_dict_entry,5,INPUT,input_var  
      002564 25 5B                    1 	.word LINK 
                           002566     2 	LINK=.
      002566                          3 INPUT:
      002566 05                       4 	.byte 5 	
      002567 49 4E 50 55 54           5 	.ascii "INPUT"
      00256C 15 52                    6 	.word input_var 
      00256E                       6441 	_dict_entry,2,IF,if 
      00256E 25 66                    1 	.word LINK 
                           002570     2 	LINK=.
      002570                          3 IF:
      002570 02                       4 	.byte 2 	
      002571 49 46                    5 	.ascii "IF"
      002573 16 61                    6 	.word if 
      002575                       6442 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      002575 25 70                    1 	.word LINK 
                           002577     2 	LINK=.
      002577                          3 IDR:
      002577 43                       4 	.byte 3+F_IFUNC 	
      002578 49 44 52                 5 	.ascii "IDR"
      00257B 21 13                    6 	.word const_idr 
      00257D                       6443 	_dict_entry,3,HEX,hex_base
      00257D 25 77                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                           00257F     2 	LINK=.
      00257F                          3 HEX:
      00257F 03                       4 	.byte 3 	
      002580 48 45 58                 5 	.ascii "HEX"
      002583 12 5D                    6 	.word hex_base 
      002585                       6444 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      002585 25 7F                    1 	.word LINK 
                           002587     2 	LINK=.
      002587                          3 GPIO:
      002587 44                       4 	.byte 4+F_IFUNC 	
      002588 47 50 49 4F              5 	.ascii "GPIO"
      00258C 1C F9                    6 	.word gpio 
      00258E                       6445 	_dict_entry,4,GOTO,goto 
      00258E 25 87                    1 	.word LINK 
                           002590     2 	LINK=.
      002590                          3 GOTO:
      002590 04                       4 	.byte 4 	
      002591 47 4F 54 4F              5 	.ascii "GOTO"
      002595 17 55                    6 	.word goto 
      002597                       6446 	_dict_entry,5,GOSUB,gosub 
      002597 25 90                    1 	.word LINK 
                           002599     2 	LINK=.
      002599                          3 GOSUB:
      002599 05                       4 	.byte 5 	
      00259A 47 4F 53 55 42           5 	.ascii "GOSUB"
      00259F 17 70                    6 	.word gosub 
      0025A1                       6447 	_dict_entry,6,FORGET,forget 
      0025A1 25 99                    1 	.word LINK 
                           0025A3     2 	LINK=.
      0025A3                          3 FORGET:
      0025A3 06                       4 	.byte 6 	
      0025A4 46 4F 52 47 45 54        5 	.ascii "FORGET"
      0025AA 1B 94                    6 	.word forget 
      0025AC                       6448 	_dict_entry,3,FOR,for 
      0025AC 25 A3                    1 	.word LINK 
                           0025AE     2 	LINK=.
      0025AE                          3 FOR:
      0025AE 03                       4 	.byte 3 	
      0025AF 46 4F 52                 5 	.ascii "FOR"
      0025B2 16 75                    6 	.word for 
      0025B4                       6449 	_dict_entry,6,FILETX,file_transmit
      0025B4 25 AE                    1 	.word LINK 
                           0025B6     2 	LINK=.
      0025B6                          3 FILETX:
      0025B6 06                       4 	.byte 6 	
      0025B7 46 49 4C 45 54 58        5 	.ascii "FILETX"
      0025BD 23 01                    6 	.word file_transmit 
      0025BF                       6450 	_dict_entry,6,FILERX,file_receive 
      0025BF 25 B6                    1 	.word LINK 
                           0025C1     2 	LINK=.
      0025C1                          3 FILERX:
      0025C1 06                       4 	.byte 6 	
      0025C2 46 49 4C 45 52 58        5 	.ascii "FILERX"
      0025C8 22 CC                    6 	.word file_receive 
      0025CA                       6451 	_dict_entry,4,FCPU,fcpu 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0025CA 25 C1                    1 	.word LINK 
                           0025CC     2 	LINK=.
      0025CC                          3 FCPU:
      0025CC 04                       4 	.byte 4 	
      0025CD 46 43 50 55              5 	.ascii "FCPU"
      0025D1 1E A2                    6 	.word fcpu 
      0025D3                       6452 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      0025D3 25 CC                    1 	.word LINK 
                           0025D5     2 	LINK=.
      0025D5                          3 EEPROM:
      0025D5 46                       4 	.byte 6+F_IFUNC 	
      0025D6 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0025DC 21 37                    6 	.word const_eeprom_base 
      0025DE                       6453 	_dict_entry,3,END,cmd_end  
      0025DE 25 D5                    1 	.word LINK 
                           0025E0     2 	LINK=.
      0025E0                          3 END:
      0025E0 03                       4 	.byte 3 	
      0025E1 45 4E 44                 5 	.ascii "END"
      0025E4 18 07                    6 	.word cmd_end 
      0025E6                       6454 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0025E6 25 E0                    1 	.word LINK 
                           0025E8     2 	LINK=.
      0025E8                          3 DWRITE:
      0025E8 06                       4 	.byte 6+F_CMD 	
      0025E9 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0025EF 18 F2                    6 	.word digital_write 
      0025F1                       6455 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0025F1 25 E8                    1 	.word LINK 
                           0025F3     2 	LINK=.
      0025F3                          3 DREAD:
      0025F3 45                       4 	.byte 5+F_IFUNC 	
      0025F4 44 52 45 41 44           5 	.ascii "DREAD"
      0025F9 18 C2                    6 	.word digital_read 
      0025FB                       6456 	_dict_entry,2,DO,do_loop
      0025FB 25 F3                    1 	.word LINK 
                           0025FD     2 	LINK=.
      0025FD                          3 DO:
      0025FD 02                       4 	.byte 2 	
      0025FE 44 4F                    5 	.ascii "DO"
      002600 20 94                    6 	.word do_loop 
      002602                       6457 	_dict_entry,3,DIR,directory 
      002602 25 FD                    1 	.word LINK 
                           002604     2 	LINK=.
      002604                          3 DIR:
      002604 03                       4 	.byte 3 	
      002605 44 49 52                 5 	.ascii "DIR"
      002608 1B FB                    6 	.word directory 
      00260A                       6458 	_dict_entry,3,DEC,dec_base
      00260A 26 04                    1 	.word LINK 
                           00260C     2 	LINK=.
      00260C                          3 DEC:
      00260C 03                       4 	.byte 3 	
      00260D 44 45 43                 5 	.ascii "DEC"
      002610 12 62                    6 	.word dec_base 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      002612                       6459 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      002612 26 0C                    1 	.word LINK 
                           002614     2 	LINK=.
      002614                          3 DDR:
      002614 43                       4 	.byte 3+F_IFUNC 	
      002615 44 44 52                 5 	.ascii "DDR"
      002618 21 19                    6 	.word const_ddr 
      00261A                       6460 	_dict_entry,6,DATALN,data_line  
      00261A 26 14                    1 	.word LINK 
                           00261C     2 	LINK=.
      00261C                          3 DATALN:
      00261C 06                       4 	.byte 6 	
      00261D 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      002623 21 43                    6 	.word data_line 
      002625                       6461 	_dict_entry,4,DATA,data  
      002625 26 1C                    1 	.word LINK 
                           002627     2 	LINK=.
      002627                          3 DATA:
      002627 04                       4 	.byte 4 	
      002628 44 41 54 41              5 	.ascii "DATA"
      00262C 21 3D                    6 	.word data 
      00262E                       6462 	_dict_entry,3+F_IFUNC,CRL,const_cr1 
      00262E 26 27                    1 	.word LINK 
                           002630     2 	LINK=.
      002630                          3 CRL:
      002630 43                       4 	.byte 3+F_IFUNC 	
      002631 43 52 4C                 5 	.ascii "CRL"
      002634 21 1F                    6 	.word const_cr1 
      002636                       6463 	_dict_entry,3+F_IFUNC,CRH,const_cr2 
      002636 26 30                    1 	.word LINK 
                           002638     2 	LINK=.
      002638                          3 CRH:
      002638 43                       4 	.byte 3+F_IFUNC 	
      002639 43 52 48                 5 	.ascii "CRH"
      00263C 21 25                    6 	.word const_cr2 
      00263E                       6464 	_dict_entry,4+F_CFUNC,CHAR,char
      00263E 26 38                    1 	.word LINK 
                           002640     2 	LINK=.
      002640                          3 CHAR:
      002640 84                       4 	.byte 4+F_CFUNC 	
      002641 43 48 41 52              5 	.ascii "CHAR"
      002645 1C B4                    6 	.word char 
      002647                       6465 	_dict_entry,3,BYE,bye 
      002647 26 40                    1 	.word LINK 
                           002649     2 	LINK=.
      002649                          3 BYE:
      002649 03                       4 	.byte 3 	
      00264A 42 59 45                 5 	.ascii "BYE"
      00264D 1D 46                    6 	.word bye 
      00264F                       6466 	_dict_entry,5,BTOGL,bit_toggle
      00264F 26 49                    1 	.word LINK 
                           002651     2 	LINK=.
      002651                          3 BTOGL:
      002651 05                       4 	.byte 5 	
      002652 42 54 4F 47 4C           5 	.ascii "BTOGL"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      002657 16 0A                    6 	.word bit_toggle 
      002659                       6467 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      002659 26 51                    1 	.word LINK 
                           00265B     2 	LINK=.
      00265B                          3 BTEST:
      00265B 45                       4 	.byte 5+F_IFUNC 	
      00265C 42 54 45 53 54           5 	.ascii "BTEST"
      002661 16 1A                    6 	.word bit_test 
      002663                       6468 	_dict_entry,4,BSET,bit_set 
      002663 26 5B                    1 	.word LINK 
                           002665     2 	LINK=.
      002665                          3 BSET:
      002665 04                       4 	.byte 4 	
      002666 42 53 45 54              5 	.ascii "BSET"
      00266A 15 E9                    6 	.word bit_set 
      00266C                       6469 	_dict_entry,4,BRES,bit_reset
      00266C 26 65                    1 	.word LINK 
                           00266E     2 	LINK=.
      00266E                          3 BRES:
      00266E 04                       4 	.byte 4 	
      00266F 42 52 45 53              5 	.ascii "BRES"
      002673 15 F9                    6 	.word bit_reset 
      002675                       6470 	_dict_entry,3+F_IFUNC,BIT,bitmask
      002675 26 6E                    1 	.word LINK 
                           002677     2 	LINK=.
      002677                          3 BIT:
      002677 43                       4 	.byte 3+F_IFUNC 	
      002678 42 49 54                 5 	.ascii "BIT"
      00267B 20 6B                    6 	.word bitmask 
      00267D                       6471 	_dict_entry,3,AWU,awu 
      00267D 26 77                    1 	.word LINK 
                           00267F     2 	LINK=.
      00267F                          3 AWU:
      00267F 03                       4 	.byte 3 	
      002680 41 57 55                 5 	.ascii "AWU"
      002683 1D C5                    6 	.word awu 
      002685                       6472 	_dict_entry,7,AUTORUN,autorun
      002685 26 7F                    1 	.word LINK 
                           002687     2 	LINK=.
      002687                          3 AUTORUN:
      002687 07                       4 	.byte 7 	
      002688 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      00268F 1D 4F                    6 	.word autorun 
      002691                       6473 	_dict_entry,3+F_IFUNC,ASC,ascii
      002691 26 87                    1 	.word LINK 
                           002693     2 	LINK=.
      002693                          3 ASC:
      002693 43                       4 	.byte 3+F_IFUNC 	
      002694 41 53 43                 5 	.ascii "ASC"
      002697 1C C6                    6 	.word ascii 
      002699                       6474 	_dict_entry,3+F_IFUNC,AND,bit_and
      002699 26 93                    1 	.word LINK 
                           00269B     2 	LINK=.
      00269B                          3 AND:
      00269B 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      00269C 41 4E 44                 5 	.ascii "AND"
      00269F 1E 28                    6 	.word bit_and 
      0026A1                       6475 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      0026A1 26 9B                    1 	.word LINK 
                           0026A3     2 	LINK=.
      0026A3                          3 ADCREAD:
      0026A3 47                       4 	.byte 7+F_IFUNC 	
      0026A4 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0026AB 18 8E                    6 	.word analog_read 
      0026AD                       6476 	_dict_entry,5,ADCON,power_adc 
      0026AD 26 A3                    1 	.word LINK 
                           0026AF     2 	LINK=.
      0026AF                          3 ADCON:
      0026AF 05                       4 	.byte 5 	
      0026B0 41 44 43 4F 4E           5 	.ascii "ADCON"
      0026B5 18 52                    6 	.word power_adc 
      0026B7                       6477 kword_dict:
      0026B7                       6478 	_dict_entry,3+F_IFUNC,ABS,abs
      0026B7 26 AF                    1 	.word LINK 
                           0026B9     2 	LINK=.
      0026B9                          3 ABS:
      0026B9 43                       4 	.byte 3+F_IFUNC 	
      0026BA 41 42 53                 5 	.ascii "ABS"
      0026BD 1E 14                    6 	.word abs 
                                   6479 	
                                   6480 
      002700                       6481 	.bndry 128 ; align on FLASH block.
                                   6482 ; free space for user application  
      002700                       6483 user_space:
                                   6484 ; USR() function test
      002700 89               [ 2] 6485 	pushw x 
      002701 72 1A 50 0A      [ 1] 6486 	bset PC_ODR,#5 
      002705 85               [ 2] 6487 	popw x 
      002706 CD 1D BC         [ 4] 6488 	call pause02 
      002709 72 1B 50 0A      [ 1] 6489 	bres PC_ODR,#5 
      00270D 81               [ 4] 6490 	ret
                                   6491 
                                   6492 	.area FLASH_DRIVE (ABS)
      010000                       6493 	.org 0x10000
      010000                       6494 fdrive:
                                   6495 ; .byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        0026B9 R   |     ACK     =  000006 
  5 ADCON      0026AF R   |   5 ADCREAD    0026A3 R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADR     =  000002     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   5 AND        00269B R
    AREG    =  000002     |     ARG_OFS =  000002     |   5 ASC        002693 R
    ATTRIB  =  000002     |   5 AUTORUN    002687 R   |     AUTORUN_=  004000 
  5 AWU        00267F R   |   5 AWUHandl   000001 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
  5 BIT        002677 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000B     |   5 BRES       00266E R   |     BS      =  000008 
    BSAVE   =  000001     |   5 BSET       002665 R   |     BSIZE   =  000001 
  5 BTEST      00265B R   |   5 BTOGL      002651 R   |     BTW     =  000001 
  5 BYE        002649 R   |     C       =  000001     |     CAN     =  000018 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000002     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   5 CHAR       002640 R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMD_END =  000002     |     CNT     =  000006     |     CNTR    =  000003 
    COMMA   =  000001     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        002638 R
  5 CRL        002630 R   |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000007 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  5 DATA       002627 R   |   5 DATALN     00261C R   |     DBG_A   =  000005 
    DBG_CC  =  000006     |     DBG_X   =  000003     |     DBG_Y   =  000001 
    DBL     =  000003     |     DBLDIVDN=  000006     |     DBLHI   =  000001 
    DBLLO   =  000003     |     DBL_SIZE=  000004     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  5 DDR        002614 R   |     DEBUG   =  000000     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |     DEBUG_PR=  000000     |   5 DEC        00260C R
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  5 DIR        002604 R   |     DIVDNDHI=  00000B     |     DIVDNDLO=  00000D 
    DIVISOR =  000001     |     DIVISR  =  000007     |     DIVSOR  =  000001 
    DLE     =  000010     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  5 DO         0025FD R   |     DOLP_ADR=  000003     |     DOLP_INW=  000005 
  5 DREAD      0025F3 R   |   5 DWRITE     0025E8 R   |   5 EEPROM     0025D5 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
    EM      =  000019     |   5 END        0025E0 R   |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |     ERR_BAD_=  00000A 
    ERR_BUF_=  00000F     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_D=  00000C     |     ERR_NO_F=  00000E     |     ERR_NO_L=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]

Symbol Table

    ERR_NO_P=  00000D     |     ERR_RUN_=  000006     |     ERR_SYNT=  000002 
    ESC     =  00001B     |     ETB     =  000017     |     ETX     =  000003 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FAUTORUN=  000006 
    FBREAK  =  000004     |     FCOMP   =  000005     |   5 FCPU       0025CC R
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
  5 FILERX     0025C1 R   |   5 FILETX     0025B6 R   |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLOOP   =  000002     |     FLSI    =  01F400 
  5 FOR        0025AE R   |   5 FORGET     0025A3 R   |     FRUN    =  000000 
    FS      =  00001C     |     FSIZE   =  000001     |     FSLEEP  =  000003 
    FSTEP   =  000003     |     FTRAP   =  000001     |     F_CFUNC =  000080 
    F_CMD   =  000000     |     F_CONST =  0000C0     |     F_IFUNC =  000040 
  5 GOSUB      002599 R   |   5 GOTO       002590 R   |   5 GPIO       002587 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     GS      =  00001D     |   5 HEX        00257F R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   5 IDR        002577 R   |   5 IF         002570 R
    IN      =  000005     |     INCR    =  000001     |     INP     =  000000 
  5 INPUT      002566 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_FL=  000000     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  5 INVERT     00255B R   |     INW     =  000009     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   5 IWDGEN     002550 R   |   5 IWDGREF    002544 R
    IWDG_KEY=  000055     |     IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  5 KEY        00253C R   |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000002     |   5 LET        002534 R   |     LF      =  00000A 
    LIMIT   =  000005     |     LINENO  =  000005     |   5 LINK    =  0026B9 R
  5 LIST       00252B R   |     LL      =  000002     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   5 LOAD       002522 R
  5 LOG        00251A R   |   5 LSHIFT     00250F R   |     MAJOR   =  000001 
    MASK    =  000002     |     MATH_OVF=  000000     |     MAX_LINE=  007FFF 
    MINOR   =  000000     |   5 MULDIV     002504 R   |     MULOP   =  000003 
    N1      =  000001     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000003     |     NCLKOPT =  004808     |     NEG     =  000001 
  5 NEW        0024F3 R   |     NEW_FREE=  000001     |   5 NEXT       0024FB R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NLEN    =  000001 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   5 NOT        0024EB R
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  5 NonHandl   000000 R   |   5 ODR        0024E3 R   |     ONOFF   =  000003 
    OP      =  000003     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   5 OR         0024DC R
    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVFH    =  000001 
    OVFL    =  000002     |     PA      =  000000     |   5 PAD        0024D4 R
    PAD_SIZE=  000080     |   5 PAUSE      0024CA R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  5 PEEK       0024B7 R   |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  5 PINP       0024AE R   |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 PMODE      0024C0 R
  5 POKE       0024A5 R   |     PORT    =  000003     |   5 POUT       00249C R
    PREV    =  000001     |   5 PRINT      002492 R   |   5 PRTA       002489 R
  5 PRTB       002480 R   |   5 PRTC       002477 R   |   5 PRTD       00246E R
  5 PRTE       002465 R   |   5 PRTF       00245C R   |   5 PRTG       002453 R
  5 PRTH       00244A R   |   5 PRTI       002441 R   |     PSTR    =  000003 
  5 QKEY       002438 R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   5 READ       00242F R   |   5 REBOOT     002424 R
    REG     =  000001     |     RELOP   =  000003     |   5 REMARK     002419 R
  5 RESTORE    00240D R   |     RETL1   =  000001     |   5 RETURN     002402 R
    RET_ADDR=  000003     |     RET_INW =  000005     |   5 RND        0023FA R
    ROP     =  004800     |     RS      =  00001E     |   5 RSHIFT     0023EF R
    RST_SR  =  0050B3     |   5 RUN        0023E7 R   |     RXCHAR  =  000001 
  5 SAVE       0023DE R   |     SDIVSR  =  000005     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |   5 SHOW       0023D5 R
    SI      =  00000F     |     SIGN    =  000001     |   5 SIZE       0023CC R
    SKIP    =  000005     |   5 SLEEP      0023C2 R   |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |     SPCNT   =  000001 
  5 SPIEN      0023AE R   |   5 SPIRD      0023B8 R   |   5 SPISEL     0023A3 R
  5 SPIWR      002399 R   |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SQUOT   =  000006     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  0000A0     |   5 STEP       002390 R   |   5 STOP       002387 R
    STX     =  000002     |     SUB     =  00001A     |     SWIM_CSR=  007F80 
    SYN     =  000016     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   5 TICKS      00237D R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   5 TIMEOUT    002367 R   |   5 TIMER      002373 R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000006 
    TK_CFUNC=  000082     |     TK_CHAR =  000003     |     TK_CMD  =  000080 
    TK_COLON=  000001     |     TK_COMMA=  000009     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LE   =  000036 
    TK_LPARE=  000007     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000008     |     TK_SHARP=  00000A     |     TK_VAR  =  000085 
  5 TO         002360 R   |   5 TONE       002357 R   |   5 Timer4Up   000037 R
    U1      =  000001     |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   5 UBOUND     00234C R   |   5 UBTN_Han   00007A R
  5 UFLASH     002341 R   |   5 UNTIL      002337 R   |     US      =  00001F 
  5 USER_ABO   000082 R   |   5 USR        00232F R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |   5 Uart1RxH   00000F R
  5 UserButt   00004D R   |     VAR_ADDR=  000006     |     VSIZ    =  000002 
    VSIZE   =  000006     |     VT      =  00000B     |   5 WAIT       002326 R
    WCNT    =  000003     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   5 WORDS      00231C R
  5 WRITE      002312 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XADR    =  000001     |     XFIRST  =  000001     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   5 XOR        00230A R
    XREG    =  000003     |     XSAVE   =  000005     |     YSAVE   =  000007 
  5 abs        001E14 R   |   1 acc16      00000C R   |   1 acc24      00000B R
  1 acc8       00000D R   |   5 accept_c   000B2F R   |   5 add_char   0014A1 R
  5 analog_r   00188E R   |   5 ansi_seq   000AF1 R   |   5 arduino_   001EFF R
  5 arg_list   00107F R   |   1 array_si   000021 R   |   5 ascii      001CC6 R
  5 at_tst     000D36 R   |   5 atoi24     000E47 R   |   5 atoi_exi   000EAD R
  5 autorun    001D4F R   |   5 autorun_   0006CC R   |   5 awu        001DC5 R
  5 awu02      001DCF R   |   5 bad_port   001D1E R   |   1 base       00000A R
  1 basicptr   000004 R   |   5 beep       00181B R   |   5 bin_exit   000C14 R
  5 bit_and    001E28 R   |   5 bit_or     001E40 R   |   5 bit_rese   0015F9 R
  5 bit_set    0015E9 R   |   5 bit_test   00161A R   |   5 bit_togg   00160A R
  5 bit_xor    001E58 R   |   5 bitmask    00206B R   |   5 bkslsh_t   000CE3 R
  5 bksp       0002BD R   |   5 block_er   0001A3 R   |   5 break_po   00195B R
  5 bye        001D46 R   |   5 cancel_a   000694 R   |   5 char       001CB4 R
  5 clear_ba   0006E1 R   |   5 clear_va   00055D R   |   5 clock_in   00009D R
  5 cmd_end    001807 R   |   5 cmd_line   0008FF R   |   5 cmd_name   000FEE R
  5 cmp_name   0019FC R   |   5 cold_sta   0005CB R   |   5 colon_ts   000D0A R
  5 comma_ts   000D15 R   |   5 comp_msg   000855 R   |   5 compile    0004EA R
  5 const_cr   00211F R   |   5 const_cr   002125 R   |   5 const_dd   002119 R
  5 const_ee   002137 R   |   5 const_id   002113 R   |   5 const_in   002131 R
  5 const_od   00210D R   |   5 const_ou   00212B R   |   5 const_po   0020D7 R
  5 const_po   0020DD R   |   5 const_po   0020E3 R   |   5 const_po   0020E9 R
  5 const_po   0020EF R   |   5 const_po   0020F5 R   |   5 const_po   0020FB R
  5 const_po   002101 R   |   5 const_po   002107 R   |   5 convert_   000B8B R
  5 copy_com   000D6B R   |   1 count      000003 R   |   5 cp_loop    00102E R
  5 create_g   000451 R   |   5 cs_high    0022C7 R   |   5 cstk_pro   001236 R
  5 dash_tst   000D2B R   |   5 data       00213D R   |   1 data_len   000009 R
  5 data_lin   002143 R   |   1 data_ofs   000008 R   |   1 data_ptr   000006 R
  5 data_sea   002183 R   |   5 dbl_sign   000F56 R   |   5 dec_base   001262 R
  5 del_back   000B20 R   |   5 del_line   000424 R   |   5 del_ln     000B11 R
  5 delete     0002CD R   |   5 digital_   0018C2 R   |   5 digital_   0018F2 R
  5 dir_loop   001C07 R   |   5 director   001BFB R   |   5 disk_fre   0019E9 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

  5 div32_16   000F60 R   |   5 divide     000FB7 R   |   5 divu24_8   000A42 R
  5 dneg       000F4B R   |   5 do_loop    002094 R   |   5 do_progr   000196 R
  5 drive_fr   001C70 R   |   5 enable_i   002015 R   |   5 eql_tst    000DC0 R
  5 equal      0014B4 R   |   5 erase_fl   0001C2 R   |   5 err_bad_   0007C1 R
  5 err_buf_   000837 R   |   5 err_cmd_   000785 R   |   5 err_div0   00074A R
  5 err_dupl   00079F R   |   5 err_math   000731 R   |   5 err_mem_   000716 R
  5 err_msg    0006F6 R   |   5 err_no_a   0007CD R   |   5 err_no_d   000800 R
  5 err_no_f   000824 R   |   5 err_no_l   000759 R   |   5 err_no_p   000810 R
  5 err_not_   0007B0 R   |   5 err_run_   00076F R   |   5 err_synt   000723 R
  5 escaped    000BA0 R   |   5 expect     00106D R   |   5 expr_exi   0011BE R
  5 expressi   001178 R   |   5 factor     0010CF R   |   1 farptr     000016 R
  5 fcpu       001EA2 R   |   7 fdrive     010000 R   |   1 ffree      000019 R
  5 file_cou   001C68 R   |   5 file_rec   0022CC R   |   5 file_tra   002301 R
  5 final_te   000AEB R   |   5 first_li   0012E7 R   |   1 flags      000023 R
  5 for        001675 R   |   5 forget     001B94 R   |   1 free_ram   00005A R
  5 fsize_ms   0022F0 R   |   5 func_arg   00107A R   |   5 func_not   002008 R
  5 ge         0014B6 R   |   5 get_arra   0010AA R   |   5 get_targ   00173F R
  5 get_tick   001E0E R   |   5 get_toke   000C7C R   |   5 getc       0002A9 R
  5 gosub      001770 R   |   5 goto       001755 R   |   5 gpio       001CF9 R
  5 gt         0014B2 R   |   5 gt_tst     000DCB R   |   5 hex_base   00125D R
  5 hex_dump   000355 R   |   5 if         001661 R   |   1 in         000001 R
  1 in.saved   000002 R   |   1 in.w       000000 R   |   5 incr_far   0019A9 R
  5 input_ex   0015BB R   |   5 input_lo   001554 R   |   5 input_va   001552 R
  5 insert_l   00047D R   |   5 insert_l   0004E7 R   |   5 interp_l   000940 R
  5 interpre   00091B R   |   5 invert     002085 R   |   5 is_alpha   00056B R
  5 is_digit   00057C R   |   5 itoa       0009E8 R   |   5 itoa_loo   000A07 R
  5 jp_to_ta   001763 R   |   5 key        001CE6 R   |   5 kw_loop    000C30 R
  5 kword_di   0026B7 R   |   5 kword_en   002308 R   |   5 le         0014BB R
  5 leading_   00205B R   |   5 left_arr   000AF1 R   |   5 let        001293 R
  5 let_arra   0012A1 R   |   5 let_var    0012A4 R   |   5 lines_sk   0012EA R
  5 list       0012BE R   |   5 list_exi   001330 R   |   5 list_sta   00130A R
  5 load       001B64 R   |   5 load_aut   0006A3 R   |   5 load_fil   001B33 R
  5 log2       002050 R   |   5 logical_   001FFE R   |   5 long_div   000F33 R
  5 loop_bac   001722 R   |   1 loop_dep   000020 R   |   5 loop_don   001737 R
  5 lshift     001E70 R   |   5 lt         0014B9 R   |   5 lt_tst     000DF4 R
  5 modulo     000FCD R   |   5 move       0003BE R   |   5 move_dow   0003DC R
  5 move_era   000128 R   |   5 move_exi   0003FD R   |   5 move_loo   0003E1 R
  5 move_prg   00015C R   |   5 move_up    0003CE R   |   5 mul_char   0014A3 R
  5 muldiv     000FD2 R   |   5 multiply   000EFE R   |   5 mulu24_8   000A6A R
  5 nbr_tst    000CAF R   |   5 ne         0014BE R   |   5 neg_acc2   000AA4 R
  5 new        001979 R   |   5 next       0016F5 R   |   5 next_lin   000923 R
  5 next_tok   000967 R   |   5 no_match   001040 R   |   5 other      000E1D R
  3 pad        0016E0 R   |   5 pad_ref    002302 R   |   5 parse_bi   000BF2 R
  5 parse_in   000BA8 R   |   5 parse_ke   000C2F R   |   5 parse_qu   000B53 R
  5 pause      001DB2 R   |   5 pause02    001DBC R   |   5 peek       001650 R
  5 pin_mode   001EAE R   |   5 plus_tst   000D94 R   |   5 poke       001641 R
  5 power_ad   001852 R   |   5 prcnt_ts   000DB5 R   |   5 print      0014C1 R
  5 print_ex   001526 R   |   5 print_in   0009BC R   |   5 print_ty   001532 R
  5 program_   00013C R   |   5 program_   00015C R   |   5 prt_basi   00138B R
  5 prt_cmd_   001333 R   |   5 prt_loop   0014C5 R   |   5 prt_quot   001347 R
  5 prt_tok    0002E7 R   |   5 prti24     0009CC R   |   1 ptr16      000017 R
  1 ptr8       000018 R   |   5 putc       0002A0 R   |   5 puts       0002B3 R
  5 qkey       001CEE GR  |   5 qmark_ts   000D41 R   |   5 random     001F1F R
  5 read       0021BB R   |   5 read01     0021BD R   |   5 readln     000AC7 R
  5 readln_l   000ACF R   |   5 readln_q   000B44 R   |   5 refresh_   00204B R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

  5 rel_exit   001219 R   |   5 relation   0011C1 R   |   5 relop_st   0014A6 R
  5 remark     0015BE R   |   5 reprint    000AF1 R   |   5 reset_co   0014C3 R
  5 rest_con   001542 R   |   5 restore    002170 R   |   5 return     001790 R
  5 right_ar   000AF1 R   |   5 row_alig   00198E R   |   5 row_eras   000101 R
  5 row_eras   000128 R   |   5 row_loop   000338 R   |   5 rparnt_t   000CFF R
  5 rshift     001E89 R   |   5 rt_msg     000844 R   |   5 run        0017AE R
  5 run_it     0017E0 R   |   1 rx_char    000025 R   |   5 save       001A6A R
  5 save_con   001532 R   |   5 search_d   001020 R   |   5 search_e   00106A R
  5 search_f   001A1D R   |   5 search_l   000400 R   |   5 search_l   000408 R
  5 search_n   001024 R   |   1 seedx      000012 R   |   1 seedy      000014 R
  5 seek_fdr   0019B7 R   |   5 select_p   001EEF R   |   5 set_time   001FEC R
  5 sharp_ts   000D20 R   |   5 show       00121C R   |   5 show_row   000326 R
  5 single_c   00149C R   |   5 size       001267 R   |   5 skip       000EB1 R
  5 slash_ts   000DAA R   |   5 sleep      001DA7 R   |   5 software   000585 R
  5 spaces     0002DB R   |   5 spi_clea   002260 R   |   5 spi_disa   002248 R
  5 spi_enab   002215 R   |   5 spi_rcv_   002282 R   |   5 spi_read   0022AD R
  5 spi_sele   0022B5 R   |   5 spi_send   00226C R   |   5 spi_writ   00228D R
  3 stack_fu   001760 R   |   3 stack_un   001800 R   |   5 star_tst   000D9F R
  5 step       0016CE R   |   5 stop       00192D R   |   5 store_lo   0016E2 R
  5 str_matc   00104D R   |   5 str_tst    000C9F R   |   5 strcmp     00039F R
  5 strcpy     0003B0 R   |   5 strlen     000392 R   |   5 syntax_e   000875 R
  1 tab_widt   000024 R   |   5 tb_error   000877 R   |   5 term       001129 R
  5 term01     001132 R   |   5 term_exi   001175 R   |   3 tib        001690 R
  5 tick_tst   000D59 R   |   1 ticks      00000E R   |   5 timeout    001FFB R
  1 timer      000010 R   |   5 timer2_i   0000B3 R   |   5 timer4_i   0000C0 R
  5 tk_id      000865 R   |   5 to         00169E R   |   5 to_eepro   00017F R
  5 to_flash   000193 R   |   5 to_upper   000E3B GR  |   5 token_ch   000E34 R
  5 token_ex   000E38 R   |   5 token_ms   00031E R   |   5 tone       00180E R
  5 try_next   0021AB R   |   1 txtbgn     00001C R   |   1 txtend     00001E R
  5 uart1_in   000265 R   |   5 uart1_se   000275 R   |   5 ubound     001271 R
  5 udiv32_1   000F21 R   |   5 uflash     001D23 R   |   5 umstar     000EC4 R
  5 unlock_e   0000D5 R   |   5 unlock_f   0000EB R   |   5 until      0020A9 R
  5 user_int   000060 R   |   5 user_spa   002700 R   |   5 usr        001D29 R
  5 var_name   001383 R   |   1 vars       000026 R   |   5 wait       0015C4 R
  5 warm_ini   000676 R   |   5 warm_sta   0008FC R   |   5 words      001F86 R
  5 words_co   001FD6 R   |   5 write      001C7D R   |   5 write_bl   000242 R
  5 write_by   0001CD R   |   5 write_ee   000209 R   |   5 write_ex   00023D R
  5 write_fl   0001F3 R   |   5 write_ro   000170 R   |     xreceive   ****** GX
  5 zero_pad   001983 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5A   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   270E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

