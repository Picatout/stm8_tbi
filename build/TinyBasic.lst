ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module STM8_TBI
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; parsed 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                     34     .list 
                                     35 
                                     36 ;_dbg 
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000080    43     PAD_SIZE=128
                           0000A0    44 	STACK_SIZE=160
                           0017FF    45 	STACK_EMPTY=RAM_SIZE-1  
                           000000    46 	FRUN=0 ; flags run code in variable flags
                           000001    47 	FTRAP=1 ; inside trap handler 
                           000002    48 	FLOOP=2 ; FOR loop in preparation 
                           000003    49 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    50 	FBREAK=4 ; break point flag 
                           000005    51 	FCOMP=5  ; compiling flags 
                           000006    52 	FAUTORUN=6; auto start program running 
                                     53 
                           004000    54 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     55 
                           000006    56     FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     57 
                           007FFF    58 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     59 
      000000                         60 in.w:  .blkb 1 ; parser position in text line high-byte 
      000001                         61 in:    .blkb 1 ; low byte of in.w 
      000002                         62 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         63 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         64 basicptr:  .blkb 2  ; point to current BASIC line address.
      000006                         65 data_ptr:  .blkw 1  ; point to DATA address
      000008                         66 data_ofs:  .blkb 1  ; index to next data item 
      000009                         67 data_len:  .blkb 1  ; length of data line 
      00000A                         68 base:  .blkb 1 ; nemeric base used to print integer 
      00000B                         69 acc24: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         70 acc16: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         71 acc8:  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         72 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         73 timer: .blkw 1 ;  milliseconds count down timer 
      000012                         74 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         75 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         76 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         77 ptr16:  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         78 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000019                         79 ffree: .blkb 3 ; flash free address ; file system free space pointer
      00001C                         80 txtbgn: .blkw 1 ; tokenized BASIC text beginning address 
      00001E                         81 txtend: .blkw 1 ; tokenized BASIC text end address 
      000020                         82 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000021                         83 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000023                         84 flags: .blkb 1 ; various boolean flags
      000024                         85 tab_width: .blkb 1 ; print colon width (default 4)
      000025                         86 rx_char: .blkb 1 ; last received character from UART1 
      000026                         87 vars: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     88 ; keep 'free_ram' as last variable 
      00005A                         89 free_ram: ; from here RAM free for BASIC text 
                                     90 
                                     91 ;;-----------------------------------
                                     92     .area SSEG (ABS)
                                     93 ;; working buffers and stack at end of RAM. 	
                                     94 ;;-----------------------------------
      001690                         95     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         96 tib: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         97 pad: .ds PAD_SIZE             ; working buffer
      001760                         98 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         99 stack_unf: ; stack underflow ; control_stack bottom 
                                    100 
                                    101 ;;--------------------------------------
                                    102     .area HOME 
                                    103 ;; interrupt vector table at 0x8000
                                    104 ;;--------------------------------------
      000000 82 00 05 D4            105     int cold_start			; RESET vector 
                           000000   106 .if DEBUG
                                    107 	int TrapHandler 		;TRAP  software interrupt
                           000001   108 .else
      000004 82 00 00 00            109 	int NonHandledInterrupt ;TRAP  software interrupt
                                    110 .endif
      000008 82 00 00 00            111 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            112 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            113 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            114 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            115 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            116 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            117 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 4D            118 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            119 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            120 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            121 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            122 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            123 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            124 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            125 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            126 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            127 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            128 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            129 	int Uart1RxHandler		;int18 UART1 RX full ; user communication channel.
      000054 82 00 00 00            130 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            131 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 00            132 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 00            133 	int NonHandledInterrupt ;int22 ADC2 end of conversion
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000064 82 00 00 37            134 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            135 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            136 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            137 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            138 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            139 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            140 	int NonHandledInterrupt ;int29  not used
                                    141 
                                    142 ;---------------------------------------
                                    143     .area CODE
                                    144 ;---------------------------------------
                           000000   145 .if DEBUG
                                    146 .asciz "STM8_TBI" ; I like to put module name here.
                                    147 .endif 
                                    148 
                                    149 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    150 ; non handled interrupt 
                                    151 ; reset MCU
                                    152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        153 NonHandledInterrupt:
      000000 71                     154     .byte 0x71  ; invalid opcode reinitialize MCU
                                    155 
                                    156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    157 ; auto wakeup from halt
                                    158 ; at iret, program continue 
                                    159 ; after hatl instruction
                                    160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        161 AWUHandler:
      000001 72 19 50 F0      [ 1]  162 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  163 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  164 	clr AWU_TBR 
      00000E 80               [11]  165 	iret
                                    166 
                                    167 ;--------------------------
                                    168 ; UART1 receive character
                                    169 ; CTRL-C (ASCII 3)
                                    170 ; cancel program execution
                                    171 ; and fall back to command line
                                    172 ;--------------------------
      00000F                        173 Uart1RxHandler:
      00000F 72 0B 52 30 FB   [ 2]  174 	btjf UART1_SR,#UART_SR_RXNE,.
      000014 C6 52 31         [ 1]  175 	ld a,UART1_DR 
      000017 A1 03            [ 1]  176 	cp a,#CTRL_C 
      000019 26 07            [ 1]  177 	jrne 1$
      00001B 72 5F 00 25      [ 1]  178 	clr rx_char 
      00001F CC 00 60         [ 2]  179 	jp user_interrupted
      000022                        180 1$:
      000022 A1 18            [ 1]  181 	cp a,#CAN ; CTRL_X 
      000024 26 03            [ 1]  182 	jrne 2$
      000026 CC 05 D4         [ 2]  183 	jp cold_start 	
      000029                        184 2$: 
      000029 A1 1A            [ 1]  185 	cp a,#CTRL_Z
      00002B 26 06            [ 1]  186 	jrne 3$
      00002D CD 06 9D         [ 4]  187 	call cancel_autorun 
      000030 CC 05 D4         [ 2]  188 	jp cold_start 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000033 C7 00 25         [ 1]  189 3$:	ld rx_char,a 	
      000036 80               [11]  190 	iret 
                                    191 
                                    192 ;------------------------------------
                                    193 ; software interrupt handler  
                                    194 ;------------------------------------
                           000000   195 .if DEBUG 
                                    196 TrapHandler:
                                    197 	bset flags,#FTRAP 
                                    198 	call print_registers
                                    199 	call cmd_itf
                                    200 	bres flags,#FTRAP 	
                                    201 	iret
                                    202 .endif 
                                    203 
                                    204 ;------------------------------
                                    205 ; TIMER 4 is used to maintain 
                                    206 ; a milliseconds 'ticks' counter
                                    207 ; and decrement 'timer' varaiable
                                    208 ;--------------------------------
      000037                        209 Timer4UpdateHandler:
      000037 72 5F 53 42      [ 1]  210 	clr TIM4_SR 
      00003B CE 00 0E         [ 2]  211 	ldw x,ticks
      00003E 5C               [ 2]  212 	incw x
      00003F CF 00 0E         [ 2]  213 	ldw ticks,x 
      000042 CE 00 10         [ 2]  214 	ldw x,timer
      000045 5D               [ 2]  215 	tnzw x 
      000046 27 04            [ 1]  216 	jreq 1$
      000048 5A               [ 2]  217 	decw x 
      000049 CF 00 10         [ 2]  218 	ldw timer,x 
      00004C                        219 1$:	
      00004C 80               [11]  220 	iret 
                                    221 
                                    222 
                                    223 ;------------------------------------
                                    224 ; Triggered by pressing USER UserButton 
                                    225 ; on NUCLEO card.
                                    226 ; This is used to abort a progam lock 
                                    227 ; in infinite loop. 
                                    228 ;------------------------------------
      00004D                        229 UserButtonHandler:
                                    230 ; wait button release
      00004D 5F               [ 1]  231 	clrw x
      00004E 5A               [ 2]  232 1$: decw x 
      00004F 26 FD            [ 1]  233 	jrne 1$
      000051 72 09 50 15 F8   [ 2]  234 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    235 ; if MCU suspended by SLEEP resume program
      000056 72 07 00 23 05   [ 2]  236     btjf flags,#FSLEEP,2$
      00005B 72 17 00 23      [ 1]  237 	bres flags,#FSLEEP 
      00005F 80               [11]  238 	iret
      000060                        239 2$:	
      000060                        240 user_interrupted:
      000060 72 00 00 23 02   [ 2]  241     btjt flags,#FRUN,4$
      000065 20 13            [ 2]  242 	jra UBTN_Handler_exit 
      000067                        243 4$:	; program interrupted by user 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000067 72 11 00 23      [ 1]  244 	bres flags,#FRUN 
      00006B AE 00 82         [ 2]  245 	ldw x,#USER_ABORT
      00006E CD 02 B3         [ 4]  246 	call puts 
      000071 CE 00 04         [ 2]  247 	ldw x,basicptr 
      000074 C6 00 01         [ 1]  248 	ld a,in 
      000077 CD 15 80         [ 4]  249 	call prt_basic_line
      00007A                        250 UBTN_Handler_exit:
      00007A AE 17 FF         [ 2]  251     ldw x,#STACK_EMPTY 
      00007D 94               [ 1]  252     ldw sp,x
      00007E 9A               [ 1]  253 	rim 
      00007F CC 09 05         [ 2]  254 	jp warm_start
                                    255 
      000082 0A 50 72 6F 67 72 61   256 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    257 
                                    258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    259 ;    peripherals initialization
                                    260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    261 
                                    262 ;----------------------------------------
                                    263 ; inialize MCU clock 
                                    264 ; input:
                                    265 ;   A 		source  HSI | 1 HSE 
                                    266 ;   XL      CLK_CKDIVR , clock divisor 
                                    267 ; output:
                                    268 ;   none 
                                    269 ;----------------------------------------
      00009D                        270 clock_init:	
      00009D C1 50 C3         [ 1]  271 	cp a,CLK_CMSR 
      0000A0 27 0C            [ 1]  272 	jreq 2$ ; no switching required 
                                    273 ; select clock source 
      0000A2 72 12 50 C5      [ 1]  274 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A6 C7 50 C4         [ 1]  275 	ld CLK_SWR,a
      0000A9 C1 50 C3         [ 1]  276 1$:	cp a,CLK_CMSR
      0000AC 26 FB            [ 1]  277 	jrne 1$
      0000AE                        278 2$: 	
                                    279 ; HSI and cpu clock divisor 
      0000AE 9F               [ 1]  280 	ld a,xl 
      0000AF C7 50 C6         [ 1]  281 	ld CLK_CKDIVR,a  
      0000B2 81               [ 4]  282 	ret
                                    283 
                                    284 ;----------------------------------
                                    285 ; TIMER2 used as audio tone output 
                                    286 ; on port D:5.
                                    287 ; channel 1 configured as PWM mode 1 
                                    288 ;-----------------------------------  
                           00F424   289 TIM2_CLK_FREQ=62500
      0000B3                        290 timer2_init:
      0000B3 72 1A 50 C7      [ 1]  291 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000B7 35 60 53 05      [ 1]  292  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000BB 35 08 53 0C      [ 1]  293 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000BF 81               [ 4]  294 	ret 
                                    295 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    296 ;---------------------------------
                                    297 ; TIM4 is configured to generate an 
                                    298 ; interrupt every millisecond 
                                    299 ;----------------------------------
      0000C0                        300 timer4_init:
      0000C0 72 18 50 C7      [ 1]  301 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000C4 35 07 53 45      [ 1]  302 	mov TIM4_PSCR,#7 ; prescale 128  
      0000C8 35 7D 53 46      [ 1]  303 	mov TIM4_ARR,#125 ; set for 1msec.
      0000CC 35 05 53 40      [ 1]  304 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000D0 72 10 53 41      [ 1]  305 	bset TIM4_IER,#TIM4_IER_UIE
      0000D4 81               [ 4]  306 	ret
                                    307 
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    309 ;  routines to write to FLASH, EEPROM 
                                    310 ;  and OPTION 
                                    311 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    312 
                                    313 ;----------------------------------
                                    314 ; unlock EEPROM/OPT for writing/erasing
                                    315 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    316 ; input:
                                    317 ;  none
                                    318 ; output:
                                    319 ;  none 
                                    320 ;----------------------------------
      0000D5                        321 unlock_eeprom:
      0000D5 35 00 50 5B      [ 1]  322 	mov FLASH_CR2,#0 
      0000D9 35 FF 50 5C      [ 1]  323 	mov FLASH_NCR2,#0xFF 
      0000DD 35 AE 50 64      [ 1]  324 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000E1 35 56 50 64      [ 1]  325     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000E5 72 07 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000EA 81               [ 4]  327 	ret
                                    328 
                                    329 ;----------------------------------
                                    330 ; unlock FLASH for writing/erasing
                                    331 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    332 ; input:
                                    333 ;  none
                                    334 ; output:
                                    335 ;  none
                                    336 ;----------------------------------
      0000EB                        337 unlock_flash:
      0000EB 35 00 50 5B      [ 1]  338 	mov FLASH_CR2,#0 
      0000EF 35 FF 50 5C      [ 1]  339 	mov FLASH_NCR2,#0xFF 
      0000F3 35 56 50 62      [ 1]  340 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000F7 35 AE 50 62      [ 1]  341 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000FB 72 03 50 5F FB   [ 2]  342 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000100 81               [ 4]  343 	ret
                                    344 
                                    345 ;----------------------------
                                    346 ; erase block code must be 
                                    347 ; executed from RAM
                                    348 ; input:
                                    349 ;-----------------------------
      000101                        350 row_erase:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000101 35 20 50 5B      [ 1]  351 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      000105 35 DF 50 5C      [ 1]  352 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000109 4F               [ 1]  353 	clr a 
      00010A 90 5F            [ 1]  354 	clrw y 
      00010C 91 A7 00 16      [ 1]  355 	ldf ([farptr],y),a
      000110 90 5C            [ 2]  356     incw y
      000112 91 A7 00 16      [ 1]  357 	ldf ([farptr],y),a
      000116 90 5C            [ 2]  358     incw y
      000118 91 A7 00 16      [ 1]  359 	ldf ([farptr],y),a
      00011C 90 5C            [ 2]  360     incw y
      00011E 91 A7 00 16      [ 1]  361 	ldf ([farptr],y),a
      000122 72 05 50 5F FB   [ 2]  362 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000127 81               [ 4]  363 	ret
      000128                        364 row_erase_end:
                                    365 
                                    366 ; copy erase_start in RAM 
      000128                        367 move_erase_to_ram:
      000128 AE 01 28         [ 2]  368 	ldw x,#row_erase_end 
      00012B 1D 01 01         [ 2]  369 	subw x,#row_erase
      00012E CF 00 0C         [ 2]  370 	ldw acc16,x 
      000131 AE 16 90         [ 2]  371 	ldw x,#tib 
      000134 90 AE 01 01      [ 2]  372 	ldw y,#row_erase 
      000138 CD 03 BE         [ 4]  373 	call move 
      00013B 81               [ 4]  374 	ret 
                                    375 
                                    376 ;-----------------------------------
                                    377 ; block programming must be 
                                    378 ; executed from RAM 
                                    379 ; initial contidions: 
                                    380 ; 	memory unlocked
                                    381 ;   bit PRG set in 
                                    382 ; input:
                                    383 ;   x        128 bytes row to program 
                                    384 ;   farptr   row address 
                                    385 ; output:
                                    386 ;   none 
                                    387 ;----------------------------------
                           000001   388 	BCNT=1 
      00013C                        389 program_row:
      00013C 4B 80            [ 1]  390 	push #BLOCK_SIZE  
                                    391 ;enable block programming 
      00013E 72 10 50 5B      [ 1]  392 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000142 72 11 50 5C      [ 1]  393 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000146 90 5F            [ 1]  394 	clrw y 
      000148 F6               [ 1]  395 1$:	ld a,(x)
      000149 91 A7 00 16      [ 1]  396 	ldf ([farptr],y),a
      00014D 5C               [ 2]  397 	incw x 
      00014E 90 5C            [ 2]  398 	incw y 
      000150 0A 01            [ 1]  399 	dec (BCNT,sp)
      000152 26 F4            [ 1]  400 	jrne 1$
                                    401 ; wait EOP bit 
      000154 72 05 50 5F FB   [ 2]  402 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      000159                        403 	_drop 1 
      000159 5B 01            [ 2]    1     addw sp,#1 
      00015B 81               [ 4]  404 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      00015C                        405 program_row_end:
                                    406 
                                    407 ;-------------------------
                                    408 ; move program_row to RAM 
                                    409 ; at txtubound address 
                                    410 ;------------------------
      00015C                        411 move_prg_to_ram:
      00015C AE 01 5C         [ 2]  412 	ldw x,#program_row_end 
      00015F 1D 01 3C         [ 2]  413 	subw x,#program_row 
      000162 CF 00 0C         [ 2]  414 	ldw acc16,x 
      000165 AE 16 90         [ 2]  415 	ldw x,#tib 
      000168 90 AE 01 3C      [ 2]  416 	ldw y,#program_row 
      00016C CD 03 BE         [ 4]  417 	call move 
      00016F 81               [ 4]  418 	ret 
                                    419 
                                    420 
                                    421 ;-----------------------------
                                    422 ; write a row in FLASH/EEPROM 
                                    423 ; input:
                                    424 ;    farptr   destination address 
                                    425 ;    x        source address 
                                    426 ;-----------------------------
      000170                        427 write_row:
      000170 89               [ 2]  428 	pushw x 
      000171 72 5D 00 16      [ 1]  429 	tnz farptr 
      000175 26 1C            [ 1]  430 	jrne to_flash 
      000177 AE 80 00         [ 2]  431 	ldw x,#FLASH_BASE 
      00017A C3 00 17         [ 2]  432 	cpw x,farptr+1 
      00017D 24 14            [ 1]  433 	jruge to_flash 
      00017F                        434 to_eeprom:
      00017F AE 40 00         [ 2]  435 	ldw x,#EEPROM_BASE 
      000182 C3 00 17         [ 2]  436 	cpw x,farptr+1 
      000185 24 01            [ 1]  437 	jruge 1$
      000187 81               [ 4]  438 	ret ; bad address 
      000188 AE 47 FF         [ 2]  439 1$: ldw x,#EEPROM_END 
      00018B 23 01            [ 2]  440 	jrule 2$ 
      00018D 81               [ 4]  441 	ret ; bad address 
      00018E CD 00 D5         [ 4]  442 2$:	call unlock_eeprom
      000191 20 03            [ 2]  443 	jra do_programming
      000193                        444 to_flash:
      000193 CD 00 EB         [ 4]  445 	call unlock_flash 
      000196                        446 do_programming:
      000196 85               [ 2]  447 	popw x 
      000197 CD 16 90         [ 4]  448 	call tib
      00019A 72 13 50 5F      [ 1]  449 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      00019E 72 17 50 5F      [ 1]  450 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001A2 81               [ 4]  451 	ret 
                                    452 
                                    453 
                                    454 ;-----------------------------------
                                    455 ; erase flash or EEPROM block
                                    456 ; a blow is 128 bytes 
                                    457 ; input:
                                    458 ;   farptr  address row begin
                                    459 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    460 ;   none
                                    461 ;--------------------------------------
      0001A3                        462 block_erase:
      0001A3 CE 00 17         [ 2]  463 	ldw x,farptr+1
      0001A6 A3 27 80         [ 2]  464 	cpw x,#user_space 
      0001A9 2A 17            [ 1]  465 	jrpl erase_flash 
                                    466 ; erase eeprom block
      0001AB A3 40 00         [ 2]  467 	cpw x,#EEPROM_BASE 
      0001AE 24 01            [ 1]  468 	jruge 1$
      0001B0 81               [ 4]  469 	ret ; bad address 
      0001B1 AE 47 FF         [ 2]  470 1$: ldw x,#EEPROM_END 
      0001B4 23 01            [ 2]  471 	jrule 2$ 
      0001B6 81               [ 4]  472 	ret ; bad address 
      0001B7 CD 00 D5         [ 4]  473 2$:	call unlock_eeprom 
      0001BA CD 16 90         [ 4]  474 	call tib 
      0001BD 72 17 50 5F      [ 1]  475 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001C1 81               [ 4]  476 	ret 
                                    477 ; erase flash block:
      0001C2                        478 erase_flash:
      0001C2 CD 00 EB         [ 4]  479 	call unlock_flash 
      0001C5 CD 16 90         [ 4]  480 	call tib 
      0001C8 72 13 50 5F      [ 1]  481     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001CC 81               [ 4]  482 	ret 
                                    483 
                                    484 
                                    485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    486 ; write a byte to FLASH or EEPROM/OPTION  
                                    487 ; input:
                                    488 ;    a  		byte to write
                                    489 ;    farptr  	address
                                    490 ;    x          farptr[x]
                                    491 ; output:
                                    492 ;    none
                                    493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    494 	; variables locales
                           000001   495 	BTW = 1   ; byte to write offset on stack
                           000002   496 	OPT = 2   ; OPTION flag offset on stack
                           000002   497 	VSIZE = 2
      0001CD                        498 write_byte:
      0001CD 90 89            [ 2]  499 	pushw y
      0001CF                        500 	_vars VSIZE
      0001CF 52 02            [ 2]    1     sub sp,#VSIZE 
      0001D1 6B 01            [ 1]  501 	ld (BTW,sp),a ; byte to write 
      0001D3 0F 02            [ 1]  502 	clr (OPT,sp)  ; OPTION flag
                                    503 ; put addr[15:0] in Y, for bounds check.
      0001D5 90 CE 00 17      [ 2]  504 	ldw y,farptr+1   ; Y=addr15:0
                                    505 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001D9 72 5D 00 16      [ 1]  506 	tnz farptr 
      0001DD 26 14            [ 1]  507 	jrne write_flash
      0001DF 90 A3 27 80      [ 2]  508     cpw y,#user_space
      0001E3 24 0E            [ 1]  509     jruge write_flash
      0001E5 90 A3 40 00      [ 2]  510 	cpw y,#EEPROM_BASE  
      0001E9 25 52            [ 1]  511     jrult write_exit
      0001EB 90 A3 48 7F      [ 2]  512 	cpw y,#OPTION_END 
      0001EF 22 4C            [ 1]  513 	jrugt write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0001F1 20 16            [ 2]  514 	jra write_eeprom 
                                    515 ; write program memory
      0001F3                        516 write_flash:
      0001F3 CD 00 EB         [ 4]  517 	call unlock_flash 
      0001F6 9B               [ 1]  518 1$:	sim 
      0001F7 7B 01            [ 1]  519 	ld a,(BTW,sp)
      0001F9 92 A7 00 16      [ 4]  520 	ldf ([farptr],x),a ; farptr[x]=A
      0001FD 72 05 50 5F FB   [ 2]  521 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000202 9A               [ 1]  522     rim 
      000203 72 13 50 5F      [ 1]  523     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000207 20 34            [ 2]  524     jra write_exit
                                    525 ; write eeprom and option
      000209                        526 write_eeprom:
      000209 CD 00 D5         [ 4]  527 	call unlock_eeprom
                                    528 	; check for data eeprom or option eeprom
      00020C 90 A3 48 00      [ 2]  529 	cpw y,#OPTION_BASE
      000210 2B 08            [ 1]  530 	jrmi 1$
      000212 90 A3 48 80      [ 2]  531 	cpw y,#OPTION_END+1
      000216 2A 02            [ 1]  532 	jrpl 1$
      000218 03 02            [ 1]  533 	cpl (OPT,sp)
      00021A                        534 1$: 
      00021A 0D 02            [ 1]  535     tnz (OPT,sp)
      00021C 27 08            [ 1]  536     jreq 2$
                                    537 	; pour modifier une option il faut modifier ces 2 bits
      00021E 72 1E 50 5B      [ 1]  538     bset FLASH_CR2,#FLASH_CR2_OPT
      000222 72 1F 50 5C      [ 1]  539     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000226                        540 2$: 
      000226 7B 01            [ 1]  541     ld a,(BTW,sp)
      000228 92 A7 00 16      [ 4]  542     ldf ([farptr],x),a
      00022C 0D 02            [ 1]  543     tnz (OPT,sp)
      00022E 27 08            [ 1]  544     jreq 3$
      000230 5C               [ 2]  545     incw x
      000231 7B 01            [ 1]  546     ld a,(BTW,sp)
      000233 43               [ 1]  547     cpl a
      000234 92 A7 00 16      [ 4]  548     ldf ([farptr],x),a
      000238 72 05 50 5F FB   [ 2]  549 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00023D                        550 write_exit:
      00023D                        551 	_drop VSIZE 
      00023D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00023F 90 85            [ 2]  552 	popw y
      000241 81               [ 4]  553     ret
                                    554 
                                    555 ;--------------------------------------------
                                    556 ; write a data block to eeprom or flash 
                                    557 ; input:
                                    558 ;   Y        source address   
                                    559 ;   X        array index  destination  farptr[x]
                                    560 ;   BSIZE    block size bytes 
                                    561 ;   farptr   write address , byte* 
                                    562 ; output:
                                    563 ;	X 		after last byte written 
                                    564 ;   Y 		after last byte read 
                                    565 ;  farptr   point after block
                                    566 ;---------------------------------------------
      000242                        567 	_argofs 2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           000004     1     ARG_OFS=2+2 
      000242                        568 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    569 	; local var 
                           000001   570 	XSAVE=1 
                           000002   571 	VSIZE=2 
      000242                        572 write_block:
      000242                        573 	_vars VSIZE
      000242 52 02            [ 2]    1     sub sp,#VSIZE 
      000244 1F 01            [ 2]  574 	ldw (XSAVE,sp),x 
      000246 1E 05            [ 2]  575 	ldw x,(BSIZE,sp) 
      000248 27 13            [ 1]  576 	jreq 9$
      00024A 1E 01            [ 2]  577 1$:	ldw x,(XSAVE,sp)
      00024C 90 F6            [ 1]  578 	ld a,(y)
      00024E CD 01 CD         [ 4]  579 	call write_byte 
      000251 5C               [ 2]  580 	incw x 
      000252 90 5C            [ 2]  581 	incw y 
      000254 1F 01            [ 2]  582 	ldw (XSAVE,sp),x
      000256 1E 05            [ 2]  583 	ldw x,(BSIZE,sp)
      000258 5A               [ 2]  584 	decw x
      000259 1F 05            [ 2]  585 	ldw (BSIZE,sp),x 
      00025B 26 ED            [ 1]  586 	jrne 1$
      00025D                        587 9$:
      00025D 1E 01            [ 2]  588 	ldw x,(XSAVE,sp)
      00025F CD 1A 88         [ 4]  589 	call incr_farptr
      000262                        590 	_drop VSIZE
      000262 5B 02            [ 2]    1     addw sp,#VSIZE 
      000264 81               [ 4]  591 	ret 
                                    592 
                                    593 
                                    594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    595 ;;   UART1 subroutines
                                    596 ;;   used for user interface 
                                    597 ;;   communication channel.
                                    598 ;;   settings: 
                                    599 ;;		115200 8N1 no flow control
                                    600 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    601 
                                    602 ;---------------------------------------------
                                    603 ; initialize UART1, 115200 8N1
                                    604 ; input:
                                    605 ;	none
                                    606 ; output:
                                    607 ;   none
                                    608 ;---------------------------------------------
      000265                        609 uart1_init:
      000265 72 1A 50 02      [ 1]  610     bset PA_DDR,#UART1_TX_PIN
      000269 72 1A 50 03      [ 1]  611     bset PA_CR1,#UART1_TX_PIN 
      00026D 72 1A 50 04      [ 1]  612     bset PA_CR2,#UART1_TX_PIN 
                                    613 ; enable UART1 clock
      000271 72 14 50 C7      [ 1]  614 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      000275                        615 uart1_set_baud: 
                                    616 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    617 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000275 A6 E1            [ 1]  618 	ld a,#CLK_SWR_HSI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000277 C1 50 C3         [ 1]  619 	cp a,CLK_CMSR 
      00027A 27 0A            [ 1]  620 	jreq 2$ 
      00027C                        621 1$: ; 8 Mhz 	
      00027C 35 05 52 33      [ 1]  622 	mov UART1_BRR2,#0x05 ; must be loaded first
      000280 35 04 52 32      [ 1]  623 	mov UART1_BRR1,#0x4
      000284 20 08            [ 2]  624 	jra 3$
      000286                        625 2$: ; 16 Mhz 	
      000286 35 0B 52 33      [ 1]  626 	mov UART1_BRR2,#0x0b ; must be loaded first
      00028A 35 08 52 32      [ 1]  627 	mov UART1_BRR1,#0x08
      00028E                        628 3$:
      00028E 72 5F 52 31      [ 1]  629     clr UART1_DR
      000292 35 2C 52 35      [ 1]  630 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000296 72 10 52 35      [ 1]  631 	bset UART1_CR2,#UART_CR2_SBK
      00029A 72 0D 52 30 FB   [ 2]  632     btjf UART1_SR,#UART_SR_TC,.
      00029F 81               [ 4]  633     ret
                                    634 
                                    635 ;---------------------------------
                                    636 ; send character to UART1 
                                    637 ; input:
                                    638 ;   A 
                                    639 ; output:
                                    640 ;   none 
                                    641 ;--------------------------------	
      0002A0                        642 putc:
      0002A0 72 0F 52 30 FB   [ 2]  643 	btjf UART1_SR,#UART_SR_TXE,.
      0002A5 C7 52 31         [ 1]  644 	ld UART1_DR,a 
      0002A8 81               [ 4]  645 	ret 
                                    646 
                                    647 ;---------------------------------
                                    648 ; wait character from UART1 
                                    649 ; input:
                                    650 ;   none
                                    651 ; output:
                                    652 ;   A 			char  
                                    653 ;--------------------------------	
      0002A9                        654 getc:
      0002A9 C6 00 25         [ 1]  655 	ld a,rx_char 
      0002AC 27 FB            [ 1]  656 	jreq getc 
      0002AE 72 5F 00 25      [ 1]  657 	clr rx_char 
      0002B2 81               [ 4]  658 	ret 
                                    659 
                                    660 ;-----------------------------
                                    661 ; send an ASCIZ string to UART1 
                                    662 ; input: 
                                    663 ;   x 		char * 
                                    664 ; output:
                                    665 ;   none 
                                    666 ;-------------------------------
      0002B3                        667 puts:
      0002B3 F6               [ 1]  668     ld a,(x)
      0002B4 27 06            [ 1]  669 	jreq 1$
      0002B6 CD 02 A0         [ 4]  670 	call putc 
      0002B9 5C               [ 2]  671 	incw x 
      0002BA 20 F7            [ 2]  672 	jra puts 
      0002BC 81               [ 4]  673 1$:	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    674 
                                    675 
                                    676 ;---------------------------
                                    677 ; delete character at left 
                                    678 ; of cursor on terminal 
                                    679 ; input:
                                    680 ;   none 
                                    681 ; output:
                                    682 ;	none 
                                    683 ;---------------------------
      0002BD                        684 bksp:
      0002BD A6 08            [ 1]  685 	ld a,#BS 
      0002BF CD 02 A0         [ 4]  686 	call putc 
      0002C2 A6 20            [ 1]  687 	ld a,#SPACE 
      0002C4 CD 02 A0         [ 4]  688 	call putc 
      0002C7 A6 08            [ 1]  689 	ld a,#BS 
      0002C9 CD 02 A0         [ 4]  690 	call putc 
      0002CC 81               [ 4]  691 	ret 
                                    692 ;---------------------------
                                    693 ; delete n character left of cursor 
                                    694 ; at terminal.
                                    695 ; input: 
                                    696 ;   A   number of characters to delete.
                                    697 ; output:
                                    698 ;    none 
                                    699 ;--------------------------	
      0002CD                        700 delete:
      0002CD 88               [ 1]  701 	push a 
      0002CE 0D 01            [ 1]  702 0$:	tnz (1,sp)
      0002D0 27 07            [ 1]  703 	jreq 1$
      0002D2 CD 02 BD         [ 4]  704 	call bksp 
      0002D5 0A 01            [ 1]  705 	dec (1,sp)
      0002D7 20 F5            [ 2]  706 	jra 0$
      0002D9 84               [ 1]  707 1$:	pop a 
      0002DA 81               [ 4]  708 	ret
                                    709 
                                    710 ;--------------------------
                                    711 ; print n spaces on terminal
                                    712 ; input:
                                    713 ;  X 		number of spaces 
                                    714 ; output:
                                    715 ;	none 
                                    716 ;---------------------------
      0002DB                        717 spaces:
      0002DB A6 20            [ 1]  718 	ld a,#SPACE 
      0002DD 5D               [ 2]  719 1$:	tnzw x
      0002DE 27 06            [ 1]  720 	jreq 9$
      0002E0 CD 02 A0         [ 4]  721 	call putc 
      0002E3 5A               [ 2]  722 	decw x
      0002E4 20 F7            [ 2]  723 	jra 1$
      0002E6                        724 9$: 
      0002E6 81               [ 4]  725 	ret 
                                    726 
                                    727 ;----------------------
                                    728 ; print token id && value
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    729 ; input:
                                    730 ;   A     token id 
                                    731 ;   X     token value 
                                    732 ;---------------------
                           000001   733 	BSAVE=1
                           000002   734 	AREG=2
                           000003   735 	XREG=3
                           000004   736 	VSIZE=4
      0002E7                        737 prt_tok:
      0002E7                        738 	_vars VSIZE 
      0002E7 52 04            [ 2]    1     sub sp,#VSIZE 
      0002E9 6B 02            [ 1]  739 	ld (AREG,sp),a 
      0002EB 1F 03            [ 2]  740 	ldw (XREG,sp),x 
      0002ED C6 00 0A         [ 1]  741 	ld a, base
      0002F0 6B 01            [ 1]  742 	ld (BSAVE,sp),a 
      0002F2 35 10 00 0A      [ 1]  743 	mov base,#16  
      0002F6 AE 03 1E         [ 2]  744 	ldw x,#token_msg
      0002F9 CD 02 B3         [ 4]  745 	call puts 
      0002FC 5F               [ 1]  746 	clrw x 
      0002FD 7B 02            [ 1]  747 	ld a,(AREG,sp)
      0002FF 97               [ 1]  748 	ld xl,a 
      000300 CD 09 C5         [ 4]  749 	call print_int 
      000303 A6 20            [ 1]  750 	ld a,#SPACE
      000305 CD 02 A0         [ 4]  751 	call putc 
      000308 1E 03            [ 2]  752 	ldw x,(XREG,sp)
      00030A CD 09 C5         [ 4]  753 	call print_int 
      00030D A6 0D            [ 1]  754 	ld a,#CR 
      00030F CD 02 A0         [ 4]  755 	call putc 
      000312 7B 01            [ 1]  756 	ld a,(BSAVE,sp)
      000314 C7 00 0A         [ 1]  757 	ld base,a 
      000317 7B 02            [ 1]  758 	ld a,(AREG,sp)
      000319 1E 03            [ 2]  759 	ldw x,(XREG,sp)
      00031B                        760 	_drop VSIZE 
      00031B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00031D 81               [ 4]  761 	ret 
      00031E 74 6F 6B 65 6E 3A 20   762 token_msg: .asciz "token: "
             00
                                    763 
                                    764 
                                    765 ;---------------------
                                    766 ; display n bytes row 
                                    767 ; from memory.
                                    768 ; input:
                                    769 ;   A   bytes to print 
                                    770 ;	X   start address 
                                    771 ; output:
                                    772 ;   X   address after last shown  
                                    773 ;---------------------
                           000001   774 	CNT=1 
                           000002   775 	ADR=2 
                           000003   776 	VSIZE=3 
      000326                        777 show_row:
      000326 4D               [ 1]  778 	tnz a 
      000327 26 01            [ 1]  779 	jrne 1$
      000329 81               [ 4]  780 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00032A                        781 1$:	
      00032A 89               [ 2]  782 	pushw x  
      00032B 88               [ 1]  783 	push a 
      00032C 35 04 00 24      [ 1]  784 	mov tab_width,#4 
      000330 CD 09 C5         [ 4]  785 	call print_int 
      000333 A6 20            [ 1]  786 	ld a,#SPACE  
      000335 CD 02 A0         [ 4]  787 	call putc
      000338                        788 row_loop:
      000338 1E 02            [ 2]  789 	ldw x,(ADR,sp)
      00033A F6               [ 1]  790 	ld a,(x)
      00033B 5F               [ 1]  791 	clrw x 
      00033C 97               [ 1]  792 	ld xl,a 
      00033D CD 09 C5         [ 4]  793 	call print_int 
      000340 1E 02            [ 2]  794 	ldw x,(ADR,sp)
      000342 5C               [ 2]  795 	incw x 
      000343 1F 02            [ 2]  796 	ldw (ADR,sp),x 
      000345 0A 01            [ 1]  797 	dec (CNT,sp)
      000347 26 EF            [ 1]  798 	jrne row_loop
      000349                        799 	_drop VSIZE  		
      000349 5B 03            [ 2]    1     addw sp,#VSIZE 
      00034B 35 04 00 24      [ 1]  800 	mov tab_width,#4
      00034F A6 0D            [ 1]  801 	ld a,#CR 
      000351 CD 02 A0         [ 4]  802 	call putc 
      000354 81               [ 4]  803 	ret 
                                    804 
                                    805 ;--------------------------
                                    806 ; print memory content 
                                    807 ; in hexadecimal format
                                    808 ;  input:
                                    809 ;    X    start address 
                                    810 ;    Y    count 
                                    811 ;--------------------------
                           000001   812 	BCNT=1
                           000003   813 	BASE=3
                           000004   814 	TABW=4
                           000004   815 	VSIZE=4   
      000355                        816 hex_dump:
      000355                        817 	_vars VSIZE
      000355 52 04            [ 2]    1     sub sp,#VSIZE 
      000357 C6 00 0A         [ 1]  818 	ld a,base
      00035A 6B 03            [ 1]  819 	ld (BASE,sp),a 
      00035C 35 10 00 0A      [ 1]  820 	mov base,#16
      000360 C6 00 24         [ 1]  821 	ld a,tab_width 
      000363 6B 04            [ 1]  822 	ld (TABW,sp),a
      000365 A6 0D            [ 1]  823 	ld a,#CR 
      000367 CD 02 A0         [ 4]  824 	call putc 
      00036A 17 01            [ 2]  825 1$: ldw (BCNT,sp),y
      00036C A6 10            [ 1]  826 	ld a,#16
      00036E 90 A3 00 10      [ 2]  827 	cpw y,#16
      000372 2A 02            [ 1]  828 	jrpl 2$
      000374 90 9F            [ 1]  829 	ld a,yl
      000376                        830 2$: 	
      000376 CD 03 26         [ 4]  831 	call show_row 
      000379 16 01            [ 2]  832 	ldw y,(BCNT,sp) 
      00037B 72 A2 00 10      [ 2]  833 	subw y,#16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00037F 90 A3 00 01      [ 2]  834 	cpw y,#1
      000383 2A E5            [ 1]  835 	jrpl 1$
      000385 7B 03            [ 1]  836 	ld a,(BASE,sp)
      000387 C7 00 0A         [ 1]  837 	ld base,a
      00038A 7B 04            [ 1]  838 	ld a,(TABW,sp)
      00038C C7 00 24         [ 1]  839 	ld tab_width,a 
      00038F                        840 	_drop VSIZE
      00038F 5B 04            [ 2]    1     addw sp,#VSIZE 
      000391 81               [ 4]  841 	ret 
                                    842 
                                    843 ;-------------------------------------
                                    844 ; retrun string length
                                    845 ; input:
                                    846 ;   X         .asciz  pointer 
                                    847 ; output:
                                    848 ;   X         length 
                                    849 ;-------------------------------------
      000392                        850 strlen:
      000392 90 93            [ 1]  851 	ldw y,x 
      000394 5F               [ 1]  852 	clrw x 
      000395 90 7D            [ 1]  853 1$:	tnz (y) 
      000397 27 05            [ 1]  854 	jreq 9$ 
      000399 5C               [ 2]  855 	incw x
      00039A 90 5C            [ 2]  856 	incw y 
      00039C 20 F7            [ 2]  857 	jra 1$ 
      00039E 81               [ 4]  858 9$: ret 
                                    859 
                                    860 ;------------------------------------
                                    861 ; compare 2 strings
                                    862 ; input:
                                    863 ;   X 		char* first string 
                                    864 ;   Y       char* second string 
                                    865 ; output:
                                    866 ;   A 		0|1 
                                    867 ;-------------------------------------
      00039F                        868 strcmp:
      00039F F6               [ 1]  869 	ld a,(x)
      0003A0 27 0B            [ 1]  870 	jreq 5$ 
      0003A2 90 F1            [ 1]  871 	cp a,(y) 
      0003A4 26 05            [ 1]  872 	jrne 4$ 
      0003A6 5C               [ 2]  873 	incw x 
      0003A7 90 5C            [ 2]  874 	incw y 
      0003A9 20 F4            [ 2]  875 	jra strcmp 
      0003AB                        876 4$: ; not same  
      0003AB 4F               [ 1]  877 	clr a 
      0003AC 81               [ 4]  878 	ret 
      0003AD                        879 5$: ; same 
      0003AD A6 01            [ 1]  880 	ld a,#1 
      0003AF 81               [ 4]  881 	ret 
                                    882 
                                    883 
                                    884 ;---------------------------------------
                                    885 ;  copy src to dest 
                                    886 ; input:
                                    887 ;   X 		dest 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    888 ;   Y 		src 
                                    889 ; output: 
                                    890 ;   X 		dest 
                                    891 ;----------------------------------
      0003B0                        892 strcpy:
      0003B0 89               [ 2]  893 	pushw x 
      0003B1 90 F6            [ 1]  894 1$: ld a,(y)
      0003B3 27 06            [ 1]  895 	jreq 9$ 
      0003B5 F7               [ 1]  896 	ld (x),a 
      0003B6 5C               [ 2]  897 	incw x 
      0003B7 90 5C            [ 2]  898 	incw y 
      0003B9 20 F6            [ 2]  899 	jra 1$ 
      0003BB 7F               [ 1]  900 9$:	clr (x)
      0003BC 85               [ 2]  901 	popw x 
      0003BD 81               [ 4]  902 	ret 
                                    903 
                                    904 ;---------------------------------------
                                    905 ; move memory block 
                                    906 ; input:
                                    907 ;   X 		destination 
                                    908 ;   Y 	    source 
                                    909 ;   acc16	bytes count 
                                    910 ; output:
                                    911 ;   none 
                                    912 ;--------------------------------------
                           000001   913 	INCR=1 ; increament high byte 
                           000002   914 	LB=2 ; increament low byte 
                           000002   915 	VSIZE=2
      0003BE                        916 move:
      0003BE                        917 	_vars VSIZE 
      0003BE 52 02            [ 2]    1     sub sp,#VSIZE 
      0003C0 0F 01            [ 1]  918 	clr (INCR,sp)
      0003C2 0F 02            [ 1]  919 	clr (LB,sp)
      0003C4 90 89            [ 2]  920 	pushw y 
      0003C6 13 01            [ 2]  921 	cpw x,(1,sp) ; compare DEST to SRC 
      0003C8 90 85            [ 2]  922 	popw y 
      0003CA 27 31            [ 1]  923 	jreq move_exit ; x==y 
      0003CC 2B 0E            [ 1]  924 	jrmi move_down
      0003CE                        925 move_up: ; start from top address with incr=-1
      0003CE 72 BB 00 0C      [ 2]  926 	addw x,acc16
      0003D2 72 B9 00 0C      [ 2]  927 	addw y,acc16
      0003D6 03 01            [ 1]  928 	cpl (INCR,sp)
      0003D8 03 02            [ 1]  929 	cpl (LB,sp)   ; increment = -1 
      0003DA 20 05            [ 2]  930 	jra move_loop  
      0003DC                        931 move_down: ; start from bottom address with incr=1 
      0003DC 5A               [ 2]  932     decw x 
      0003DD 90 5A            [ 2]  933 	decw y
      0003DF 0C 02            [ 1]  934 	inc (LB,sp) ; incr=1 
      0003E1                        935 move_loop:	
      0003E1 C6 00 0C         [ 1]  936     ld a, acc16 
      0003E4 CA 00 0D         [ 1]  937 	or a, acc8
      0003E7 27 14            [ 1]  938 	jreq move_exit 
      0003E9 72 FB 01         [ 2]  939 	addw x,(INCR,sp)
      0003EC 72 F9 01         [ 2]  940 	addw y,(INCR,sp) 
      0003EF 90 F6            [ 1]  941 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003F1 F7               [ 1]  942 	ld (x),a 
      0003F2 89               [ 2]  943 	pushw x 
      0003F3 CE 00 0C         [ 2]  944 	ldw x,acc16 
      0003F6 5A               [ 2]  945 	decw x 
      0003F7 CF 00 0C         [ 2]  946 	ldw acc16,x 
      0003FA 85               [ 2]  947 	popw x 
      0003FB 20 E4            [ 2]  948 	jra move_loop
      0003FD                        949 move_exit:
      0003FD                        950 	_drop VSIZE
      0003FD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0003FF 81               [ 4]  951 	ret 	
                                    952 
                                    953 ;-------------------------------------
                                    954 ; search text area for a line#
                                    955 ; input:
                                    956 ;	X 			line# 
                                    957 ; output:
                                    958 ;   X 			addr of line | 0 
                                    959 ;   Y           line#|insert address if not found  
                                    960 ;-------------------------------------
                           000001   961 	LL=1 ; line length 
                           000002   962 	LB=2 ; line length low byte 
                           000002   963 	VSIZE=2 
      000400                        964 search_lineno:
      000400                        965 	_vars VSIZE
      000400 52 02            [ 2]    1     sub sp,#VSIZE 
      000402 0F 01            [ 1]  966 	clr (LL,sp)
      000404 90 CE 00 1C      [ 2]  967 	ldw y,txtbgn
      000408                        968 search_ln_loop:
      000408 90 C3 00 1E      [ 2]  969 	cpw y,txtend 
      00040C 2A 10            [ 1]  970 	jrpl 8$
      00040E 90 F3            [ 1]  971 	cpw x,(y)
      000410 27 0E            [ 1]  972 	jreq 9$
      000412 2B 0A            [ 1]  973 	jrmi 8$ 
      000414 90 E6 02         [ 1]  974 	ld a,(2,y)
      000417 6B 02            [ 1]  975 	ld (LB,sp),a 
      000419 72 F9 01         [ 2]  976 	addw y,(LL,sp)
      00041C 20 EA            [ 2]  977 	jra search_ln_loop 
      00041E                        978 8$: 
      00041E 5F               [ 1]  979 	clrw x 	
      00041F 51               [ 1]  980 	exgw x,y 
      000420                        981 9$: _drop VSIZE
      000420 5B 02            [ 2]    1     addw sp,#VSIZE 
      000422 51               [ 1]  982 	exgw x,y   
      000423 81               [ 4]  983 	ret 
                                    984 
                                    985 ;-------------------------------------
                                    986 ; delete line at addr
                                    987 ; input:
                                    988 ;   X 		addr of line i.e DEST for move 
                                    989 ;-------------------------------------
                           000001   990 	LLEN=1
                           000003   991 	SRC=3
                           000004   992 	VSIZE=4
      000424                        993 del_line: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000424                        994 	_vars VSIZE 
      000424 52 04            [ 2]    1     sub sp,#VSIZE 
      000426 E6 02            [ 1]  995 	ld a,(2,x) ; line length
      000428 6B 02            [ 1]  996 	ld (LLEN+1,sp),a 
      00042A 0F 01            [ 1]  997 	clr (LLEN,sp)
      00042C 90 93            [ 1]  998 	ldw y,x  
      00042E 72 F9 01         [ 2]  999 	addw y,(LLEN,sp) ;SRC  
      000431 17 03            [ 2] 1000 	ldw (SRC,sp),y  ;save source 
      000433 90 CE 00 1E      [ 2] 1001 	ldw y,txtend 
      000437 72 F2 03         [ 2] 1002 	subw y,(SRC,sp) ; y=count 
      00043A 90 CF 00 0C      [ 2] 1003 	ldw acc16,y 
      00043E 16 03            [ 2] 1004 	ldw y,(SRC,sp)    ; source
      000440 CD 03 BE         [ 4] 1005 	call move
      000443 90 CE 00 1E      [ 2] 1006 	ldw y,txtend 
      000447 72 F2 01         [ 2] 1007 	subw y,(LLEN,sp)
      00044A 90 CF 00 1E      [ 2] 1008 	ldw txtend,y  
      00044E                       1009 	_drop VSIZE     
      00044E 5B 04            [ 2]    1     addw sp,#VSIZE 
      000450 81               [ 4] 1010 	ret 
                                   1011 
                                   1012 ;---------------------------------------------
                                   1013 ; create a gap in text area to 
                                   1014 ; move new line in this gap
                                   1015 ; input:
                                   1016 ;    X 			addr gap start 
                                   1017 ;    Y 			gap length 
                                   1018 ; output:
                                   1019 ;    X 			addr gap start 
                                   1020 ;--------------------------------------------
                           000001  1021 	DEST=1
                           000003  1022 	SRC=3
                           000005  1023 	LEN=5
                           000006  1024 	VSIZE=6 
      000451                       1025 create_gap:
      000451                       1026 	_vars VSIZE
      000451 52 06            [ 2]    1     sub sp,#VSIZE 
      000453 1F 03            [ 2] 1027 	ldw (SRC,sp),x 
      000455 17 05            [ 2] 1028 	ldw (LEN,sp),y 
      000457 90 CF 00 0C      [ 2] 1029 	ldw acc16,y 
      00045B 90 93            [ 1] 1030 	ldw y,x ; SRC
      00045D 72 BB 00 0C      [ 2] 1031 	addw x,acc16  
      000461 1F 01            [ 2] 1032 	ldw (DEST,sp),x 
                                   1033 ;compute size to move 	
      000463 CE 00 1E         [ 2] 1034 	ldw x,txtend 
      000466 72 F0 03         [ 2] 1035 	subw x,(SRC,sp)
      000469 CF 00 0C         [ 2] 1036 	ldw acc16,x ; size to move
      00046C 1E 01            [ 2] 1037 	ldw x,(DEST,sp) 
      00046E CD 03 BE         [ 4] 1038 	call move
      000471 CE 00 1E         [ 2] 1039 	ldw x,txtend
      000474 72 FB 05         [ 2] 1040 	addw x,(LEN,sp)
      000477 CF 00 1E         [ 2] 1041 	ldw txtend,x
      00047A                       1042 9$:	_drop VSIZE 
      00047A 5B 06            [ 2]    1     addw sp,#VSIZE 
      00047C 81               [ 4] 1043 	ret 
                                   1044 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1045 ;--------------------------------------------
                                   1046 ; insert line in pad into text area 
                                   1047 ; first search for already existing 
                                   1048 ; replace existing 
                                   1049 ; if new line empty delete existing one. 
                                   1050 ; input:
                                   1051 ;   ptr16		pointer to tokenized line  
                                   1052 ; output:
                                   1053 ;   none
                                   1054 ;---------------------------------------------
                           000001  1055 	DEST=1  ; text area insertion address 
                           000003  1056 	SRC=3   ; str to insert address 
                           000005  1057 	LINENO=5 ; line number 
                           000007  1058 	LLEN=7 ; line length 
                           000008  1059 	VSIZE=8  
      00047D                       1060 insert_line:
      00047D                       1061 	_vars VSIZE 
      00047D 52 08            [ 2]    1     sub sp,#VSIZE 
      00047F CE 00 1E         [ 2] 1062 	ldw x,txtend  
      000482 C3 00 1C         [ 2] 1063 	cpw x,txtbgn 
      000485 26 15            [ 1] 1064 	jrne 0$
                                   1065 ;first text line 
      000487 AE 00 02         [ 2] 1066 	ldw x,#2 
      00048A 72 D6 00 17      [ 4] 1067 	ld a,([ptr16],x)
      00048E 5F               [ 1] 1068 	clrw x 
      00048F 97               [ 1] 1069 	ld xl,a
      000490 1F 07            [ 2] 1070 	ldw (LLEN,sp),x 
      000492 CE 00 1C         [ 2] 1071 	ldw x,txtbgn
      000495 1F 01            [ 2] 1072 	ldw (DEST,sp),x 
      000497 CE 00 1E         [ 2] 1073 	ldw x,txtend 
      00049A 20 37            [ 2] 1074 	jra 4$
      00049C 72 CE 00 17      [ 5] 1075 0$:	ldw x,[ptr16]
                                   1076 ; line number
      0004A0 1F 05            [ 2] 1077 	ldw (LINENO,sp),x 
      0004A2 AE 00 02         [ 2] 1078 	ldw x,#2 
      0004A5 72 D6 00 17      [ 4] 1079 	ld a,([ptr16],x)
      0004A9 97               [ 1] 1080 	ld xl,a
                                   1081 ; line length
      0004AA 1F 07            [ 2] 1082 	ldw (LLEN,sp),x
                                   1083 ; check if that line number already exit 	
      0004AC 1E 05            [ 2] 1084 	ldw x,(LINENO,sp)
      0004AE CD 04 00         [ 4] 1085 	call search_lineno 
      0004B1 5D               [ 2] 1086 	tnzw x 
      0004B2 26 04            [ 1] 1087 	jrne 2$
                                   1088 ; line doesn't exit
                                   1089 ; it will be inserted at this point.  	
      0004B4 17 01            [ 2] 1090 	ldw (DEST,sp),y 
      0004B6 20 05            [ 2] 1091 	jra 3$
                                   1092 ; line exit delete it.
                                   1093 ; it will be replaced by new one 	
      0004B8 1F 01            [ 2] 1094 2$: ldw (DEST,sp),x 
      0004BA CD 04 24         [ 4] 1095 	call del_line
      0004BD                       1096 3$: 
                                   1097 ; insert new line or leave if LLEN==3
                                   1098 ; LLEN==3 means empty line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004BD A6 03            [ 1] 1099 	ld a,#3
      0004BF 11 08            [ 1] 1100 	cp a,(LLEN+1,sp)
      0004C1 27 24            [ 1] 1101 	jreq insert_ln_exit ; empty line exit.
                                   1102 ; if insertion point at txtend 
                                   1103 ; move no need to create a gap 
      0004C3 1E 01            [ 2] 1104 	ldw x,(DEST,sp)
      0004C5 C3 00 1E         [ 2] 1105 	cpw x,txtend 
      0004C8 27 09            [ 1] 1106 	jreq 4$ 
                                   1107 ; must create a gap
                                   1108 ; at insertion point  
      0004CA 1E 01            [ 2] 1109 	ldw x,(DEST,sp)
      0004CC 16 07            [ 2] 1110 	ldw y,(LLEN,sp)
      0004CE CD 04 51         [ 4] 1111 	call create_gap
      0004D1 20 06            [ 2] 1112 	jra 5$
      0004D3                       1113 4$: 
      0004D3 72 FB 07         [ 2] 1114 	addw x,(LLEN,sp)
      0004D6 CF 00 1E         [ 2] 1115 	ldw txtend,x 	 
                                   1116 ; move new line in gap 
      0004D9 1E 07            [ 2] 1117 5$:	ldw x,(LLEN,sp)
      0004DB CF 00 0C         [ 2] 1118 	ldw acc16,x 
      0004DE 90 AE 16 E0      [ 2] 1119 	ldw y,#pad ;SRC 
      0004E2 1E 01            [ 2] 1120 	ldw x,(DEST,sp) ; dest address 
      0004E4 CD 03 BE         [ 4] 1121 	call move 
      0004E7                       1122 insert_ln_exit:	
      0004E7                       1123 	_drop VSIZE
      0004E7 5B 08            [ 2]    1     addw sp,#VSIZE 
      0004E9 81               [ 4] 1124 	ret
                                   1125 
                                   1126 ;-----------------------------------
                                   1127 ; create token list fromm text line 
                                   1128 ; save this list in pad buffer 
                                   1129 ;  compiled line format: 
                                   1130 ;    line_no  2 bytes {0...32767}
                                   1131 ;    count    1 byte  
                                   1132 ;    tokens   variable length 
                                   1133 ;   
                                   1134 ; input:
                                   1135 ;   none
                                   1136 ; modified variables:
                                   1137 ;   basicptr     token list buffer address 
                                   1138 ;   in.w  		 3|count, i.e. index in buffer
                                   1139 ;   count        length of line | 0  
                                   1140 ;-----------------------------------
                           000001  1141 	XSAVE=1
                           000002  1142 	VSIZE=2
      0004EA                       1143 compile:
      0004EA                       1144 	_vars VSIZE 
      0004EA 52 02            [ 2]    1     sub sp,#VSIZE 
      0004EC 72 1A 00 23      [ 1] 1145 	bset flags,#FCOMP 
      0004F0 A6 00            [ 1] 1146 	ld a,#0
      0004F2 AE 00 00         [ 2] 1147 	ldw x,#0
      0004F5 CF 16 E0         [ 2] 1148 	ldw pad,x ; destination buffer 
      0004F8 C7 16 E2         [ 1] 1149 	ld pad+2,a ; count 
      0004FB AE 16 E3         [ 2] 1150 	ldw x,#pad+3
      0004FE 72 5F 00 01      [ 1] 1151 	clr in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000502 CD 0C BD         [ 4] 1152 	call get_token
      000505 A1 84            [ 1] 1153 	cp a,#TK_INTGR
      000507 26 11            [ 1] 1154 	jrne 2$
      000509 A3 00 01         [ 2] 1155 	cpw x,#1 
      00050C 2A 05            [ 1] 1156 	jrpl 1$
      00050E A6 0A            [ 1] 1157 	ld a,#ERR_BAD_VALUE
      000510 CC 08 80         [ 2] 1158 	jp tb_error
      000513 CF 16 E0         [ 2] 1159 1$:	ldw pad,x 
      000516 90 AE 16 E3      [ 2] 1160 	ldw y,#pad+3 
      00051A 90 A3 17 60      [ 2] 1161 2$:	cpw y,#stack_full 
      00051E 25 05            [ 1] 1162 	jrult 3$
      000520 A6 0F            [ 1] 1163 	ld a,#ERR_BUF_FULL 
      000522 CC 08 80         [ 2] 1164 	jp tb_error 
      000525                       1165 3$:	
      000525 93               [ 1] 1166 	ldw x,y 
      000526 CD 0C BD         [ 4] 1167 	call get_token 
      000529 A1 00            [ 1] 1168 	cp a,#TK_NONE 
      00052B 26 ED            [ 1] 1169 	jrne 2$ 
                                   1170 ; compilation completed  
      00052D 72 A2 16 E0      [ 2] 1171 	subw y,#pad
      000531 90 9F            [ 1] 1172     ld a,yl
      000533 AE 16 E0         [ 2] 1173 	ldw x,#pad 
      000536 CF 00 17         [ 2] 1174 	ldw ptr16,x 
      000539 E7 02            [ 1] 1175 	ld (2,x),a 
      00053B FE               [ 2] 1176 	ldw x,(x)
      00053C 27 09            [ 1] 1177 	jreq 10$
      00053E CD 04 7D         [ 4] 1178 	call insert_line
      000541 72 5F 00 03      [ 1] 1179 	clr  count 
      000545 20 0F            [ 2] 1180 	jra  11$ 
      000547                       1181 10$: ; line# is zero 
      000547 CE 00 17         [ 2] 1182 	ldw x,ptr16  
      00054A CF 00 04         [ 2] 1183 	ldw basicptr,x 
      00054D E6 02            [ 1] 1184 	ld a,(2,x)
      00054F C7 00 03         [ 1] 1185 	ld count,a 
      000552 35 03 00 01      [ 1] 1186 	mov in,#3 
      000556                       1187 11$:
      000556                       1188 	_drop VSIZE 
      000556 5B 02            [ 2]    1     addw sp,#VSIZE 
      000558 72 1B 00 23      [ 1] 1189 	bres flags,#FCOMP 
      00055C 81               [ 4] 1190 	ret 
                                   1191 
                                   1192 ;------------------------------------
                                   1193 ;  set all variables to zero 
                                   1194 ; input:
                                   1195 ;   none 
                                   1196 ; output:
                                   1197 ;	none
                                   1198 ;------------------------------------
      00055D                       1199 clear_vars:
      00055D AE 00 26         [ 2] 1200 	ldw x,#vars 
      000560 90 AE 00 34      [ 2] 1201 	ldw y,#2*26 
      000564 7F               [ 1] 1202 1$:	clr (x)
      000565 5C               [ 2] 1203 	incw x 
      000566 90 5A            [ 2] 1204 	decw y 
      000568 26 FA            [ 1] 1205 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      00056A 81               [ 4] 1206 	ret 
                                   1207 
                                   1208 ;-------------------------------------
                                   1209 ; check if A is a letter 
                                   1210 ; input:
                                   1211 ;   A 			character to test 
                                   1212 ; output:
                                   1213 ;   C flag      1 true, 0 false 
                                   1214 ;-------------------------------------
      00056B                       1215 is_alpha:
      00056B A1 41            [ 1] 1216 	cp a,#'A 
      00056D 8C               [ 1] 1217 	ccf 
      00056E 24 0B            [ 1] 1218 	jrnc 9$ 
      000570 A1 5B            [ 1] 1219 	cp a,#'Z+1 
      000572 25 07            [ 1] 1220 	jrc 9$ 
      000574 A1 61            [ 1] 1221 	cp a,#'a 
      000576 8C               [ 1] 1222 	ccf 
      000577 24 02            [ 1] 1223 	jrnc 9$
      000579 A1 7B            [ 1] 1224 	cp a,#'z+1
      00057B 81               [ 4] 1225 9$: ret 	
                                   1226 
                                   1227 ;------------------------------------
                                   1228 ; check if character in {'0'..'9'}
                                   1229 ; input:
                                   1230 ;    A  character to test
                                   1231 ; output:
                                   1232 ;    Carry  0 not digit | 1 digit
                                   1233 ;------------------------------------
      00057C                       1234 is_digit:
      00057C A1 30            [ 1] 1235 	cp a,#'0
      00057E 25 03            [ 1] 1236 	jrc 1$
      000580 A1 3A            [ 1] 1237     cp a,#'9+1
      000582 8C               [ 1] 1238 	ccf 
      000583 8C               [ 1] 1239 1$:	ccf 
      000584 81               [ 4] 1240     ret
                                   1241 
                                   1242 ;-------------------------------------
                                   1243 ; return true if character in  A 
                                   1244 ; is letter or digit.
                                   1245 ; input:
                                   1246 ;   A     ASCII character 
                                   1247 ; output:
                                   1248 ;   A     no change 
                                   1249 ;   Carry    0 false| 1 true 
                                   1250 ;--------------------------------------
      000585                       1251 is_alnum:
      000585 CD 05 7C         [ 4] 1252 	call is_digit
      000588 25 03            [ 1] 1253 	jrc 1$ 
      00058A CD 05 6B         [ 4] 1254 	call is_alpha
      00058D 81               [ 4] 1255 1$:	ret 
                                   1256 
                                   1257 
                                   1258 ;-------------------------------------
                                   1259 ;  program initialization entry point 
                                   1260 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000001  1261 	MAJOR=1
                           000000  1262 	MINOR=0
      00058E 0A 0A 54 69 6E 79 20  1263 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      0005D4                       1264 cold_start:
                                   1265 ;set stack 
      0005D4 AE 17 FF         [ 2] 1266 	ldw x,#STACK_EMPTY
      0005D7 94               [ 1] 1267 	ldw sp,x   
                                   1268 ; clear all ram 
      0005D8 7F               [ 1] 1269 0$: clr (x)
      0005D9 5A               [ 2] 1270 	decw x 
      0005DA 26 FC            [ 1] 1271 	jrne 0$
                                   1272 ; activate pull up on all inputs 
      0005DC A6 FF            [ 1] 1273 	ld a,#255 
      0005DE C7 50 03         [ 1] 1274 	ld PA_CR1,a 
      0005E1 C7 50 08         [ 1] 1275 	ld PB_CR1,a 
      0005E4 C7 50 0D         [ 1] 1276 	ld PC_CR1,a 
      0005E7 C7 50 12         [ 1] 1277 	ld PD_CR1,a 
      0005EA C7 50 17         [ 1] 1278 	ld PE_CR1,a 
      0005ED C7 50 1C         [ 1] 1279 	ld PF_CR1,a 
      0005F0 C7 50 21         [ 1] 1280 	ld PG_CR1,a 
      0005F3 C7 50 2B         [ 1] 1281 	ld PI_CR1,a
                                   1282 ; set LD2 pin as output and turn it on
      0005F6 72 1A 50 0D      [ 1] 1283     bset PC_CR1,#LED2_BIT
      0005FA 72 1A 50 0E      [ 1] 1284     bset PC_CR2,#LED2_BIT
      0005FE 72 1A 50 0C      [ 1] 1285     bset PC_DDR,#LED2_BIT
      000602 72 1A 50 0A      [ 1] 1286 	bset PC_ODR,#LED2_BIT 
                                   1287 ; disable schmitt triggers on Arduino CN4 analog inputs
      000606 55 00 3F 54 07   [ 1] 1288 	mov ADC_TDRL,0x3f
                                   1289 ; disable peripherals clocks
                                   1290 ;	clr CLK_PCKENR1 
                                   1291 ;	clr CLK_PCKENR2
      00060B 72 5F 50 F2      [ 1] 1292 	clr AWU_TBR 
      00060F 72 14 50 CA      [ 1] 1293 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1294 ; select internal clock no divisor: 16 Mhz 	
      000613 A6 E1            [ 1] 1295 	ld a,#CLK_SWR_HSI 
      000615 5F               [ 1] 1296 	clrw x  
      000616 CD 00 9D         [ 4] 1297     call clock_init 
      000619 CD 00 C0         [ 4] 1298 	call timer4_init
      00061C CD 00 B3         [ 4] 1299 	call timer2_init
                                   1300 ; UART1 at 115200 BAUD
      00061F CD 02 65         [ 4] 1301 	call uart1_init
                                   1302 ; activate PE_4 (user button interrupt)
      000622 72 18 50 18      [ 1] 1303     bset PE_CR2,#USR_BTN_BIT 
                                   1304 ; display system information
      000626 AE 05 8E         [ 2] 1305 	ldw x,#software 
      000629 CD 02 B3         [ 4] 1306 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00062C A6 01            [ 1] 1307 	ld a,#MAJOR 
      00062E C7 00 0D         [ 1] 1308 	ld acc8,a 
      000631 5F               [ 1] 1309 	clrw x 
      000632 CF 00 0B         [ 2] 1310 	ldw acc24,x
      000635 72 5F 00 24      [ 1] 1311 	clr tab_width  
      000639 35 0A 00 0A      [ 1] 1312 	mov base, #10 
      00063D CD 09 D5         [ 4] 1313 	call prti24 
      000640 A6 2E            [ 1] 1314 	ld a,#'.
      000642 CD 02 A0         [ 4] 1315 	call putc 
      000645 A6 00            [ 1] 1316 	ld a,#MINOR 
      000647 C7 00 0D         [ 1] 1317 	ld acc8,a 
      00064A 5F               [ 1] 1318 	clrw x 
      00064B CF 00 0B         [ 2] 1319 	ldw acc24,x 
      00064E CD 09 D5         [ 4] 1320 	call prti24
      000651 A6 0D            [ 1] 1321 	ld a,#CR 
      000653 CD 02 A0         [ 4] 1322 	call putc
      000656 CD 1A 96         [ 4] 1323 	call seek_fdrive 
      000659 9A               [ 1] 1324 	rim 
      00065A 72 5C 00 15      [ 1] 1325 	inc seedy+1 
      00065E 72 5C 00 13      [ 1] 1326 	inc seedx+1 
      000662 CD 06 EA         [ 4] 1327 	call clear_basic
      000665 CD 12 D7         [ 4] 1328 	call ubound 
                                   1329 ;	jra 2$	
                                   1330 ; 150 msec beep 
      000668 AE 00 96         [ 2] 1331 	ldw x,#150 
      00066B 90 AE 03 E6      [ 2] 1332 	ldw y,#998 
      00066F CD 18 FA         [ 4] 1333 	call beep  
      000672 72 1B 50 0A      [ 1] 1334 2$:	bres PC_ODR,#LED2_BIT	
      000676 CD 06 7F         [ 4] 1335 	call warm_init
      000679 CD 06 AC         [ 4] 1336 	call load_autorun
      00067C CC 09 08         [ 2] 1337     jp cmd_line  
                                   1338 
      00067F                       1339 warm_init:
      00067F 72 5F 00 23      [ 1] 1340 	clr flags 
      000683 72 5F 00 20      [ 1] 1341 	clr loop_depth 
      000687 35 04 00 24      [ 1] 1342 	mov tab_width,#TAB_WIDTH 
      00068B 35 0A 00 0A      [ 1] 1343 	mov base,#10 
      00068F AE 00 00         [ 2] 1344 	ldw x,#0 
      000692 CF 00 04         [ 2] 1345 	ldw basicptr,x 
      000695 CF 00 00         [ 2] 1346 	ldw in.w,x 
      000698 72 5F 00 03      [ 1] 1347 	clr count
      00069C 81               [ 4] 1348 	ret 
                                   1349 
                                   1350 ;--------------------------
                                   1351 ; called by tb_error when
                                   1352 ; flag FAUTORUN is set.
                                   1353 ; There is a bug in autorun 
                                   1354 ; program so cancel it.
                                   1355 ;---------------------------
      00069D                       1356 cancel_autorun:
      00069D AE 40 00         [ 2] 1357 	ldw x,#AUTORUN_NAME 
      0006A0 CF 00 17         [ 2] 1358 	ldw farptr+1,x 
      0006A3 4F               [ 1] 1359 	clr a
      0006A4 5F               [ 1] 1360 	clrw x  
      0006A5 C7 00 16         [ 1] 1361 	ld farptr,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0006A8 CD 01 CD         [ 4] 1362 	call write_byte 
      0006AB 81               [ 4] 1363 	ret 
                                   1364 
                                   1365 
                                   1366 ;--------------------------
                                   1367 ; if autorun file defined 
                                   1368 ; in eeprom address AUTORUN_NAME 
                                   1369 ; load and run it.
                                   1370 ;-------------------------
      0006AC                       1371 load_autorun:
      0006AC 90 AE 40 00      [ 2] 1372 	ldw y,#AUTORUN_NAME
      0006B0 90 F6            [ 1] 1373 	ld a,(y)
      0006B2 27 20            [ 1] 1374 	jreq 9$
      0006B4 CD 1A FC         [ 4] 1375 	call search_file
      0006B7 25 05            [ 1] 1376 	jrc 2$ 
                                   1377 ; if file doesn't exit
      0006B9 CD 06 9D         [ 4] 1378 	call cancel_autorun
      0006BC 20 16            [ 2] 1379 	jra 9$ 
      0006BE CD 1C 12         [ 4] 1380 2$:	call load_file
      0006C1 AE 40 00         [ 2] 1381 	ldw x,#AUTORUN_NAME 
      0006C4 CD 02 B3         [ 4] 1382 	call puts
      0006C7 AE 06 D5         [ 2] 1383 	ldw x,#autorun_msg 
      0006CA CD 02 B3         [ 4] 1384 	call puts 
      0006CD 72 1C 00 23      [ 1] 1385 	bset flags,#FAUTORUN 
      0006D1 CC 18 BF         [ 2] 1386 	jp run_it    
      0006D4 81               [ 4] 1387 9$: ret 	
                                   1388 
      0006D5 20 6C 6F 61 64 65 64  1389 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1390 ;---------------------------
                                   1391 ; reset BASIC text variables 
                                   1392 ; and clear variables 
                                   1393 ;---------------------------
      0006EA                       1394 clear_basic:
      0006EA 72 5F 00 03      [ 1] 1395 	clr count
      0006EE 72 5F 00 01      [ 1] 1396 	clr in  
      0006F2 AE 00 5A         [ 2] 1397 	ldw x,#free_ram 
      0006F5 CF 00 1C         [ 2] 1398 	ldw txtbgn,x 
      0006F8 CF 00 1E         [ 2] 1399 	ldw txtend,x 
      0006FB CD 05 5D         [ 4] 1400 	call clear_vars 
      0006FE 81               [ 4] 1401 	ret 
                                   1402 
                                   1403 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1404 ;;   Tiny BASIC error messages     ;;
                                   1405 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006FF                       1406 err_msg:
      0006FF 00 00 07 1F 07 2C 07  1407 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             3A 07 53 07 62
      00070B 07 78 07 8E 07 A8 07  1408 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             B9 07 CA
      000715 07 D6 08 09 08 19 08  1409 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             2D 08 40
                                   1410 
      00071F 4D 65 6D 6F 72 79 20  1411 err_mem_full: .asciz "Memory full\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



             66 75 6C 6C 0A 00
      00072C 73 79 6E 74 61 78 20  1412 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      00073A 6D 61 74 68 20 6F 70  1413 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      000753 64 69 76 69 73 69 6F  1414 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      000762 69 6E 76 61 6C 69 64  1415 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      000778 72 75 6E 20 74 69 6D  1416 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      00078E 63 6F 6D 6D 61 6E 64  1417 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0007A8 64 75 70 6C 69 63 61  1418 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0007B9 46 69 6C 65 20 6E 6F  1419 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0007CA 62 61 64 20 76 61 6C  1420 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0007D6 46 69 6C 65 20 69 6E  1421 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      000809 4E 6F 20 64 61 74 61  1422 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      000819 4E 6F 20 70 72 6F 67  1423 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      00082D 46 69 6C 65 20 73 79  1424 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      000840 42 75 66 66 65 72 20  1425 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1426 
      00084D 72 75 6E 20 74 69 6D  1427 rt_msg: .asciz "run time error, "
             65 20 65 72 72 6F 72
             2C 20 00
      00085E 63 6F 6D 70 69 6C 65  1428 comp_msg: .asciz "compile error, "
             20 65 72 72 6F 72 2C
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



             20 00
      00086E 6C 61 73 74 20 74 6F  1429 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1430 
      00087E                       1431 syntax_error:
      00087E A6 02            [ 1] 1432 	ld a,#ERR_SYNTAX 
                                   1433 
      000880                       1434 tb_error:
      000880 72 0A 00 23 47   [ 2] 1435 	btjt flags,#FCOMP,1$
      000885 88               [ 1] 1436 	push a 
      000886 AE 08 4D         [ 2] 1437 	ldw x, #rt_msg 
      000889 CD 02 B3         [ 4] 1438 	call puts 
      00088C 84               [ 1] 1439 	pop a 
      00088D AE 06 FF         [ 2] 1440 	ldw x, #err_msg 
      000890 72 5F 00 0C      [ 1] 1441 	clr acc16 
      000894 48               [ 1] 1442 	sll a
      000895 72 59 00 0C      [ 1] 1443 	rlc acc16  
      000899 C7 00 0D         [ 1] 1444 	ld acc8, a 
      00089C 72 BB 00 0C      [ 2] 1445 	addw x,acc16 
      0008A0 FE               [ 2] 1446 	ldw x,(x)
      0008A1 CD 02 B3         [ 4] 1447 	call puts
      0008A4 CE 00 04         [ 2] 1448 	ldw x,basicptr
      0008A7 C6 00 01         [ 1] 1449 	ld a,in 
      0008AA CD 15 80         [ 4] 1450 	call prt_basic_line
      0008AD AE 08 6E         [ 2] 1451 	ldw x,#tk_id 
      0008B0 CD 02 B3         [ 4] 1452 	call puts 
      0008B3 C6 00 02         [ 1] 1453 	ld a,in.saved 
      0008B6 5F               [ 1] 1454 	clrw x 
      0008B7 97               [ 1] 1455 	ld xl,a 
      0008B8 72 BB 00 04      [ 2] 1456 	addw x,basicptr 
      0008BC F6               [ 1] 1457 	ld a,(x)
      0008BD 5F               [ 1] 1458 	clrw x 
      0008BE 97               [ 1] 1459 	ld xl,a 
      0008BF CD 09 C5         [ 4] 1460 	call print_int
      0008C2 72 0D 00 23 3A   [ 2] 1461 	btjf flags,#FAUTORUN ,6$
      0008C7 CD 06 9D         [ 4] 1462 	call cancel_autorun  
      0008CA 20 35            [ 2] 1463 	jra 6$
      0008CC                       1464 1$:	
      0008CC 88               [ 1] 1465 	push a 
      0008CD AE 08 5E         [ 2] 1466 	ldw x,#comp_msg
      0008D0 CD 02 B3         [ 4] 1467 	call puts 
      0008D3 84               [ 1] 1468 	pop a 
      0008D4 AE 06 FF         [ 2] 1469 	ldw x, #err_msg 
      0008D7 72 5F 00 0C      [ 1] 1470 	clr acc16 
      0008DB 48               [ 1] 1471 	sll a
      0008DC 72 59 00 0C      [ 1] 1472 	rlc acc16  
      0008E0 C7 00 0D         [ 1] 1473 	ld acc8, a 
      0008E3 72 BB 00 0C      [ 2] 1474 	addw x,acc16 
      0008E7 FE               [ 2] 1475 	ldw x,(x)
      0008E8 CD 02 B3         [ 4] 1476 	call puts
      0008EB AE 16 90         [ 2] 1477 	ldw x,#tib
      0008EE CD 02 B3         [ 4] 1478 	call puts 
      0008F1 A6 0D            [ 1] 1479 	ld a,#CR 
      0008F3 CD 02 A0         [ 4] 1480 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0008F6 CE 00 00         [ 2] 1481 	ldw x,in.w
      0008F9 CD 02 DB         [ 4] 1482 	call spaces
      0008FC A6 5E            [ 1] 1483 	ld a,#'^
      0008FE CD 02 A0         [ 4] 1484 	call putc 
      000901 AE 17 FF         [ 2] 1485 6$: ldw x,#STACK_EMPTY 
      000904 94               [ 1] 1486     ldw sp,x
      000905                       1487 warm_start:
      000905 CD 06 7F         [ 4] 1488 	call warm_init
                                   1489 ;----------------------------
                                   1490 ;   BASIC interpreter
                                   1491 ;----------------------------
      000908                       1492 cmd_line: ; user interface 
      000908 A6 0D            [ 1] 1493 	ld a,#CR 
      00090A CD 02 A0         [ 4] 1494 	call putc 
      00090D A6 3E            [ 1] 1495 	ld a,#'> 
      00090F CD 02 A0         [ 4] 1496 	call putc
      000912 CD 0A C0         [ 4] 1497 	call readln
      000915 72 5D 00 03      [ 1] 1498 	tnz count 
      000919 27 ED            [ 1] 1499 	jreq cmd_line
      00091B CD 04 EA         [ 4] 1500 	call compile
                                   1501 ; if text begin with a line number
                                   1502 ; the compiler set count to zero    
                                   1503 ; so code is not interpreted
      00091E 72 5D 00 03      [ 1] 1504 	tnz count 
      000922 27 E4            [ 1] 1505 	jreq cmd_line
                                   1506 
                                   1507 ; if direct command 
                                   1508 ; it's ready to interpret 
                                   1509 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1510 ;; This is the interpreter loop
                                   1511 ;; for each BASIC code line. 
                                   1512 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      000924                       1513 interpreter: 
      000924 C6 00 01         [ 1] 1514 	ld a,in 
      000927 C1 00 03         [ 1] 1515 	cp a,count 
      00092A 2B 1D            [ 1] 1516 	jrmi interp_loop
      00092C                       1517 next_line:
      00092C 72 01 00 23 D7   [ 2] 1518 	btjf flags, #FRUN, cmd_line
      000931 CE 00 04         [ 2] 1519 	ldw x,basicptr
      000934 72 BB 00 00      [ 2] 1520 	addw x,in.w 
      000938 C3 00 1E         [ 2] 1521 	cpw x,txtend 
      00093B 2A C8            [ 1] 1522 	jrpl warm_start
      00093D CF 00 04         [ 2] 1523 	ldw basicptr,x ; start of next line  
      000940 E6 02            [ 1] 1524 	ld a,(2,x)
      000942 C7 00 03         [ 1] 1525 	ld count,a 
      000945 35 03 00 01      [ 1] 1526 	mov in,#3 ; skip first 3 bytes of line 
      000949                       1527 interp_loop: 
      000949 CD 09 70         [ 4] 1528 	call next_token
      00094C A1 00            [ 1] 1529 	cp a,#TK_NONE 
      00094E 27 DC            [ 1] 1530 	jreq next_line 
      000950 A1 80            [ 1] 1531 	cp a,#TK_CMD
      000952 26 03            [ 1] 1532 	jrne 1$
      000954 FD               [ 4] 1533 	call (x) 
      000955 20 F2            [ 2] 1534 	jra interp_loop 
      000957                       1535 1$:	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000957 A1 85            [ 1] 1536 	cp a,#TK_VAR
      000959 26 05            [ 1] 1537 	jrne 2$
      00095B CD 13 0A         [ 4] 1538 	call let_var  
      00095E 20 E9            [ 2] 1539 	jra interp_loop 
      000960                       1540 2$:	
      000960 A1 06            [ 1] 1541 	cp a,#TK_ARRAY 
      000962 26 05            [ 1] 1542 	jrne 3$
      000964 CD 13 07         [ 4] 1543 	call let_array 
      000967 20 E0            [ 2] 1544 	jra interp_loop
      000969                       1545 3$:	
      000969 A1 01            [ 1] 1546 	cp a,#TK_COLON 
      00096B 27 DC            [ 1] 1547 	jreq interp_loop 
      00096D CC 08 7E         [ 2] 1548 	jp syntax_error 
                                   1549 
                                   1550 		
                                   1551 ;--------------------------
                                   1552 ; extract next token from
                                   1553 ; token list 
                                   1554 ; basicptr -> base address 
                                   1555 ; in  -> offset in list array 
                                   1556 ; output:
                                   1557 ;   A 		token attribute
                                   1558 ;   X 		token value if there is one
                                   1559 ;----------------------------------------
      000970                       1560 next_token:
      000970 5F               [ 1] 1561 	clrw x 
      000971 C6 00 01         [ 1] 1562 	ld a,in 
      000974 C0 00 03         [ 1] 1563 	sub a,count ; don't replace sub by cp!  
      000977 2B 01            [ 1] 1564 	jrmi 0$
      000979 81               [ 4] 1565 	ret  ; end of BASIC line 
      00097A                       1566 0$: 
      00097A 55 00 01 00 02   [ 1] 1567 	mov in.saved,in 
      00097F 90 CE 00 04      [ 2] 1568 	ldw y,basicptr 
      000983 91 D6 00         [ 4] 1569 	ld a,([in.w],y)
      000986 72 5C 00 01      [ 1] 1570 	inc in  
      00098A 4D               [ 1] 1571 	tnz a 
      00098B 2B 2B            [ 1] 1572 	jrmi 6$
      00098D A1 06            [ 1] 1573 	cp a,#TK_ARRAY
      00098F 2A 33            [ 1] 1574 	jrpl 9$  ; no attribute for these
      000991 A1 01            [ 1] 1575 	cp a,#TK_COLON
      000993 27 2F            [ 1] 1576 	jreq 9$  
      000995                       1577 1$: ; 
      000995 A1 03            [ 1] 1578 	cp a,#TK_CHAR
      000997 26 0B            [ 1] 1579 	jrne 2$
      000999 91 D6 00         [ 4] 1580 	ld a,([in.w],y)
      00099C 72 5C 00 01      [ 1] 1581 	inc in 
      0009A0 41               [ 1] 1582 	exg a,xl  
      0009A1 A6 03            [ 1] 1583 	ld a,#TK_CHAR
      0009A3 81               [ 4] 1584 	ret
      0009A4 A1 02            [ 1] 1585 2$:	cp a,#TK_QSTR 
      0009A6 26 1C            [ 1] 1586 	jrne 9$
      0009A8 93               [ 1] 1587 	ldw x,y 
      0009A9 72 BB 00 00      [ 2] 1588 	addw x,in.w ; pointer to string 
                                   1589 ; move pointer after string 
      0009AD 91 6D 00         [ 4] 1590 3$:	tnz ([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0009B0 27 0E            [ 1] 1591 	jreq 8$
      0009B2 72 5C 00 01      [ 1] 1592 	inc in 
      0009B6 20 F5            [ 2] 1593 	jra 3$
      0009B8                       1594 6$: 
      0009B8 91 DE 00         [ 5] 1595 	ldw y,([in.w],y)
      0009BB 51               [ 1] 1596 	exgw x,y 
      0009BC 72 5C 00 01      [ 1] 1597 	inc in
      0009C0 72 5C 00 01      [ 1] 1598 8$:	inc in 
      0009C4                       1599 9$: 
      0009C4 81               [ 4] 1600 	ret	
                                   1601 
                                   1602 ;-----------------------------------
                                   1603 ; print a 16 bit integer 
                                   1604 ; using variable 'base' as conversion
                                   1605 ; format.
                                   1606 ; input:
                                   1607 ;   X       integer to print 
                                   1608 ;   'base'    conversion base 
                                   1609 ; output:
                                   1610 ;   none 
                                   1611 ;-----------------------------------
      0009C5                       1612 print_int:
      0009C5 72 5F 00 0B      [ 1] 1613 	clr acc24 
      0009C9 CF 00 0C         [ 2] 1614 	ldw acc16,x 
      0009CC 72 0F 00 0C 04   [ 2] 1615 	btjf acc16,#7,prti24
      0009D1 72 53 00 0B      [ 1] 1616 	cpl acc24 
                                   1617 
                                   1618 ;------------------------------------
                                   1619 ; print integer in acc24 
                                   1620 ; input:
                                   1621 ;	acc24 		integer to print 
                                   1622 ;	'base' 		numerical base for conversion 
                                   1623 ;   'tab_width' field width 
                                   1624 ;  output:
                                   1625 ;    A          string length
                                   1626 ;------------------------------------
      0009D5                       1627 prti24:
      0009D5 CD 09 E1         [ 4] 1628     call itoa  ; conversion entier en  .asciz
      0009D8 CD 13 C7         [ 4] 1629 	call right_align  
      0009DB 88               [ 1] 1630 	push a 
      0009DC CD 02 B3         [ 4] 1631 	call puts
      0009DF 84               [ 1] 1632 	pop a 
      0009E0 81               [ 4] 1633     ret	
                                   1634 
                                   1635 ;------------------------------------
                                   1636 ; convert integer in acc24 to string
                                   1637 ; input:
                                   1638 ;   'base'	conversion base 
                                   1639 ;	acc24	integer to convert
                                   1640 ; output:
                                   1641 ;   X  		pointer to first char of string
                                   1642 ;   A       string length
                                   1643 ;------------------------------------
                           000001  1644 	SIGN=1  ; integer sign 
                           000002  1645 	LEN=2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                           000003  1646 	PSTR=3
                           000004  1647 	VSIZE=4 ;locals size
      0009E1                       1648 itoa:
      0009E1                       1649 	_vars VSIZE
      0009E1 52 04            [ 2]    1     sub sp,#VSIZE 
      0009E3 0F 02            [ 1] 1650 	clr (LEN,sp) ; string length  
      0009E5 0F 01            [ 1] 1651 	clr (SIGN,sp)    ; sign
      0009E7 C6 00 0A         [ 1] 1652 	ld a,base 
      0009EA A1 0A            [ 1] 1653 	cp a,#10
      0009EC 26 0A            [ 1] 1654 	jrne 1$
                                   1655 	; base 10 string display with negative sign if bit 23==1
      0009EE 72 0F 00 0B 05   [ 2] 1656 	btjf acc24,#7,1$
      0009F3 03 01            [ 1] 1657 	cpl (SIGN,sp)
      0009F5 CD 0A 9D         [ 4] 1658 	call neg_acc24
      0009F8                       1659 1$:
                                   1660 ; initialize string pointer 
      0009F8 AE 16 90         [ 2] 1661 	ldw x,#tib 
      0009FB 1C 00 50         [ 2] 1662 	addw x,#TIB_SIZE
      0009FE 5A               [ 2] 1663 	decw x 
      0009FF 7F               [ 1] 1664 	clr (x)
      000A00                       1665 itoa_loop:
      000A00 C6 00 0A         [ 1] 1666     ld a,base
      000A03 1F 03            [ 2] 1667 	ldw (PSTR,sp),x 
      000A05 CD 0A 3B         [ 4] 1668     call divu24_8 ; acc24/A 
      000A08 1E 03            [ 2] 1669 	ldw x,(PSTR,sp)
      000A0A AB 30            [ 1] 1670     add a,#'0  ; remainder of division
      000A0C A1 3A            [ 1] 1671     cp a,#'9+1
      000A0E 2B 02            [ 1] 1672     jrmi 2$
      000A10 AB 07            [ 1] 1673     add a,#7 
      000A12                       1674 2$:	
      000A12 5A               [ 2] 1675 	decw x
      000A13 F7               [ 1] 1676     ld (x),a
      000A14 0C 02            [ 1] 1677 	inc (LEN,sp)
                                   1678 	; if acc24==0 conversion done
      000A16 C6 00 0B         [ 1] 1679 	ld a,acc24
      000A19 CA 00 0C         [ 1] 1680 	or a,acc16
      000A1C CA 00 0D         [ 1] 1681 	or a,acc8
      000A1F 26 DF            [ 1] 1682     jrne itoa_loop
                                   1683 	;conversion done, next add '$' or '-' as required
      000A21 C6 00 0A         [ 1] 1684 	ld a,base 
      000A24 A1 10            [ 1] 1685 	cp a,#16
      000A26 27 08            [ 1] 1686 	jreq 8$
      000A28 7B 01            [ 1] 1687 	ld a,(SIGN,sp)
      000A2A 27 0A            [ 1] 1688     jreq 10$
      000A2C A6 2D            [ 1] 1689     ld a,#'-
      000A2E 20 02            [ 2] 1690 	jra 9$ 
      000A30 A6 24            [ 1] 1691 8$: ld a,#'$ 
      000A32 5A               [ 2] 1692 9$: decw x
      000A33 F7               [ 1] 1693     ld (x),a
      000A34 0C 02            [ 1] 1694 	inc (LEN,sp)
      000A36                       1695 10$:
      000A36 7B 02            [ 1] 1696 	ld a,(LEN,sp)
      000A38                       1697 	_drop VSIZE
      000A38 5B 04            [ 2]    1     addw sp,#VSIZE 
      000A3A 81               [ 4] 1698 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1699 
                                   1700 ;-------------------------------------
                                   1701 ; divide uint24_t by uint8_t
                                   1702 ; used to convert uint24_t to string
                                   1703 ; input:
                                   1704 ;	acc24	dividend
                                   1705 ;   A 		divisor
                                   1706 ; output:
                                   1707 ;   acc24	quotient
                                   1708 ;   A		remainder
                                   1709 ;------------------------------------- 
                                   1710 ; offset  on sp of arguments and locals
                           000001  1711 	U8   = 1   ; divisor on stack
                           000001  1712 	VSIZE =1
      000A3B                       1713 divu24_8:
      000A3B 89               [ 2] 1714 	pushw x ; save x
      000A3C 88               [ 1] 1715 	push a 
                                   1716 	; ld dividend UU:MM bytes in X
      000A3D C6 00 0B         [ 1] 1717 	ld a, acc24
      000A40 95               [ 1] 1718 	ld xh,a
      000A41 C6 00 0C         [ 1] 1719 	ld a,acc24+1
      000A44 97               [ 1] 1720 	ld xl,a
      000A45 7B 01            [ 1] 1721 	ld a,(U8,SP) ; divisor
      000A47 62               [ 2] 1722 	div x,a ; UU:MM/U8
      000A48 88               [ 1] 1723 	push a  ;save remainder
      000A49 9E               [ 1] 1724 	ld a,xh
      000A4A C7 00 0B         [ 1] 1725 	ld acc24,a
      000A4D 9F               [ 1] 1726 	ld a,xl
      000A4E C7 00 0C         [ 1] 1727 	ld acc24+1,a
      000A51 84               [ 1] 1728 	pop a
      000A52 95               [ 1] 1729 	ld xh,a
      000A53 C6 00 0D         [ 1] 1730 	ld a,acc24+2
      000A56 97               [ 1] 1731 	ld xl,a
      000A57 7B 01            [ 1] 1732 	ld a,(U8,sp) ; divisor
      000A59 62               [ 2] 1733 	div x,a  ; R:LL/U8
      000A5A 6B 01            [ 1] 1734 	ld (U8,sp),a ; save remainder
      000A5C 9F               [ 1] 1735 	ld a,xl
      000A5D C7 00 0D         [ 1] 1736 	ld acc24+2,a
      000A60 84               [ 1] 1737 	pop a
      000A61 85               [ 2] 1738 	popw x
      000A62 81               [ 4] 1739 	ret
                                   1740 
                                   1741 ;--------------------------------------
                                   1742 ; unsigned multiply uint24_t by uint8_t
                                   1743 ; use to convert numerical string to uint24_t
                                   1744 ; input:
                                   1745 ;	acc24	uint24_t 
                                   1746 ;   A		uint8_t
                                   1747 ; output:
                                   1748 ;   acc24   A*acc24
                                   1749 ;-------------------------------------
                                   1750 ; local variables offset  on sp
                           000003  1751 	U8   = 3   ; A pushed on stack
                           000002  1752 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1753 	OVFH = 1  ; multiplication overflow high byte
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000003  1754 	VSIZE = 3
      000A63                       1755 mulu24_8:
      000A63 89               [ 2] 1756 	pushw x    ; save X
                                   1757 	; local variables
      000A64 88               [ 1] 1758 	push a     ; U8
      000A65 5F               [ 1] 1759 	clrw x     ; initialize overflow to 0
      000A66 89               [ 2] 1760 	pushw x    ; multiplication overflow
                                   1761 ; multiply low byte.
      000A67 C6 00 0D         [ 1] 1762 	ld a,acc24+2
      000A6A 97               [ 1] 1763 	ld xl,a
      000A6B 7B 03            [ 1] 1764 	ld a,(U8,sp)
      000A6D 42               [ 4] 1765 	mul x,a
      000A6E 9F               [ 1] 1766 	ld a,xl
      000A6F C7 00 0D         [ 1] 1767 	ld acc24+2,a
      000A72 9E               [ 1] 1768 	ld a, xh
      000A73 6B 02            [ 1] 1769 	ld (OVFL,sp),a
                                   1770 ; multipy middle byte
      000A75 C6 00 0C         [ 1] 1771 	ld a,acc24+1
      000A78 97               [ 1] 1772 	ld xl,a
      000A79 7B 03            [ 1] 1773 	ld a, (U8,sp)
      000A7B 42               [ 4] 1774 	mul x,a
                                   1775 ; add overflow to this partial product
      000A7C 72 FB 01         [ 2] 1776 	addw x,(OVFH,sp)
      000A7F 9F               [ 1] 1777 	ld a,xl
      000A80 C7 00 0C         [ 1] 1778 	ld acc24+1,a
      000A83 4F               [ 1] 1779 	clr a
      000A84 A9 00            [ 1] 1780 	adc a,#0
      000A86 6B 01            [ 1] 1781 	ld (OVFH,sp),a
      000A88 9E               [ 1] 1782 	ld a,xh
      000A89 6B 02            [ 1] 1783 	ld (OVFL,sp),a
                                   1784 ; multiply most signficant byte	
      000A8B C6 00 0B         [ 1] 1785 	ld a, acc24
      000A8E 97               [ 1] 1786 	ld xl, a
      000A8F 7B 03            [ 1] 1787 	ld a, (U8,sp)
      000A91 42               [ 4] 1788 	mul x,a
      000A92 72 FB 01         [ 2] 1789 	addw x, (OVFH,sp)
      000A95 9F               [ 1] 1790 	ld a, xl
      000A96 C7 00 0B         [ 1] 1791 	ld acc24,a
      000A99 5B 03            [ 2] 1792     addw sp,#VSIZE
      000A9B 85               [ 2] 1793 	popw x
      000A9C 81               [ 4] 1794 	ret
                                   1795 
                                   1796 ;------------------------------------
                                   1797 ;  two's complement acc24
                                   1798 ;  input:
                                   1799 ;		acc24 variable
                                   1800 ;  output:
                                   1801 ;		acc24 variable
                                   1802 ;-------------------------------------
      000A9D                       1803 neg_acc24:
      000A9D 72 53 00 0D      [ 1] 1804 	cpl acc24+2
      000AA1 72 53 00 0C      [ 1] 1805 	cpl acc24+1
      000AA5 72 53 00 0B      [ 1] 1806 	cpl acc24
      000AA9 A6 01            [ 1] 1807 	ld a,#1
      000AAB CB 00 0D         [ 1] 1808 	add a,acc24+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000AAE C7 00 0D         [ 1] 1809 	ld acc24+2,a
      000AB1 4F               [ 1] 1810 	clr a
      000AB2 C9 00 0C         [ 1] 1811 	adc a,acc24+1
      000AB5 C7 00 0C         [ 1] 1812 	ld acc24+1,a 
      000AB8 4F               [ 1] 1813 	clr a 
      000AB9 C9 00 0B         [ 1] 1814 	adc a,acc24 
      000ABC C7 00 0B         [ 1] 1815 	ld acc24,a 
      000ABF 81               [ 4] 1816 	ret
                                   1817 
                                   1818 
                                   1819 ;------------------------------------
                                   1820 ; read a line of text from terminal
                                   1821 ; input:
                                   1822 ;	none
                                   1823 ; local variable on stack:
                                   1824 ;	LL  line length
                                   1825 ;   RXCHAR last received character 
                                   1826 ; output:
                                   1827 ;   text in tib  buffer
                                   1828 ;   count  line length 
                                   1829 ;------------------------------------
                                   1830 	; local variables
                           000001  1831 	LL_HB=1
                           000001  1832 	RXCHAR = 1 ; last char received
                           000002  1833 	LL = 2  ; accepted line length
                           000002  1834 	VSIZE=2 
      000AC0                       1835 readln:
      000AC0 4B 00            [ 1] 1836 	push #0
      000AC2 4B 00            [ 1] 1837 	push #0  
      000AC4 90 AE 16 90      [ 2] 1838  	ldw y,#tib ; input buffer
      000AC8                       1839 readln_loop:
      000AC8 CD 02 A9         [ 4] 1840 	call getc
      000ACB 6B 01            [ 1] 1841 	ld (RXCHAR,sp),a
      000ACD A1 0D            [ 1] 1842 	cp a,#CR
      000ACF 26 03            [ 1] 1843 	jrne 1$
      000AD1 CC 0B 85         [ 2] 1844 	jp readln_quit
      000AD4 A1 0A            [ 1] 1845 1$:	cp a,#LF 
      000AD6 26 03            [ 1] 1846 	jrne 2$ 
      000AD8 CC 0B 85         [ 2] 1847 	jp readln_quit
      000ADB                       1848 2$:
      000ADB A1 08            [ 1] 1849 	cp a,#BS
      000ADD 26 0F            [ 1] 1850 	jrne 3$
                                   1851 ; delete left 
      000ADF 0D 02            [ 1] 1852     tnz (LL,sp)
      000AE1 27 E5            [ 1] 1853     jreq readln_loop
      000AE3 0A 02            [ 1] 1854     dec (LL,sp)
      000AE5 90 5A            [ 2] 1855     decw y
      000AE7 90 7F            [ 1] 1856     clr  (y)
      000AE9 CD 02 BD         [ 4] 1857     call bksp 
      000AEC 20 DA            [ 2] 1858     jra readln_loop
      000AEE                       1859 3$:
      000AEE A1 04            [ 1] 1860 	cp a,#CTRL_D
      000AF0 26 0F            [ 1] 1861 	jrne 4$
                                   1862 ;delete line 
      000AF2 7B 02            [ 1] 1863 	ld a,(LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000AF4 CD 02 CD         [ 4] 1864 	call delete
      000AF7 90 AE 16 90      [ 2] 1865 	ldw y,#tib
      000AFB 90 7F            [ 1] 1866 	clr (y)
      000AFD 0F 02            [ 1] 1867 	clr (LL,sp)
      000AFF 20 C7            [ 2] 1868 	jra readln_loop
      000B01                       1869 4$:
      000B01 A1 12            [ 1] 1870 	cp a,#CTRL_R 
      000B03 26 20            [ 1] 1871 	jrne 5$
                                   1872 ;reprint 
      000B05 0D 02            [ 1] 1873 	tnz (LL,sp)
      000B07 26 BF            [ 1] 1874 	jrne readln_loop
      000B09 AE 16 90         [ 2] 1875 	ldw x,#tib 
      000B0C CD 03 92         [ 4] 1876 	call strlen 
      000B0F 90 AE 16 90      [ 2] 1877 	ldw y,#tib 
      000B13 9F               [ 1] 1878 	ld a,xl
      000B14 27 B2            [ 1] 1879 	jreq readln_loop
      000B16 6B 02            [ 1] 1880 	ld (LL,sp),a 
      000B18 AE 16 90         [ 2] 1881 	ldw x,#tib 
      000B1B CD 02 B3         [ 4] 1882 	call puts
      000B1E 0F 01            [ 1] 1883 	clr (LL_HB,sp)
      000B20 72 F9 01         [ 2] 1884 	addw y,(LL_HB,sp)
      000B23 20 A3            [ 2] 1885 	jra readln_loop 
      000B25                       1886 5$:
      000B25 A1 05            [ 1] 1887 	cp a,#CTRL_E 
      000B27 26 3C            [ 1] 1888 	jrne 6$
                                   1889 ;edit line number 
      000B29 AE 16 90         [ 2] 1890 	ldw x,#tib 
      000B2C CD 0E 88         [ 4] 1891 	call atoi24
      000B2F CE 00 0C         [ 2] 1892 	ldw x,acc16
      000B32 CD 04 00         [ 4] 1893 	call search_lineno
      000B35 5D               [ 2] 1894 	tnzw x 
      000B36 26 08            [ 1] 1895 	jrne 51$
      000B38 0F 02            [ 1] 1896 	clr (LL,sp)
      000B3A 90 AE 16 90      [ 2] 1897 	ldw y,#tib 	
      000B3E 20 45            [ 2] 1898 	jra readln_quit  
      000B40                       1899 51$:
      000B40 CF 00 04         [ 2] 1900 	ldw basicptr,x
      000B43 E6 02            [ 1] 1901 	ld a,(2,x)
      000B45 C7 00 03         [ 1] 1902 	ld count,a 
      000B48 90 AE 16 90      [ 2] 1903 	ldw y,#tib 
      000B4C CD 14 22         [ 4] 1904 	call decompile 
      000B4F 6B 02            [ 1] 1905 	ld (LL,sp),a 
      000B51 0F 01            [ 1] 1906 	clr (LL_HB,sp)
      000B53 A6 0D            [ 1] 1907 	ld a,#CR 
      000B55 CD 02 A0         [ 4] 1908 	call putc 
      000B58 A6 3E            [ 1] 1909 	ld a,#'>
      000B5A CD 02 A0         [ 4] 1910 	call putc 
      000B5D CD 02 B3         [ 4] 1911 	call puts 
      000B60 90 93            [ 1] 1912 	ldw y,x 
      000B62 CC 0A C8         [ 2] 1913 	jp readln_loop
      000B65                       1914 6$:
                                   1915 ;	cp a,#'[
                                   1916 ;	jreq ansi_seq
      000B65                       1917 final_test:
      000B65 A1 20            [ 1] 1918 	cp a,#SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B67 2A 03            [ 1] 1919 	jrpl accept_char
      000B69 CC 0A C8         [ 2] 1920 	jp readln_loop
      000B6C                       1921 ansi_seq:
                                   1922 ;	call getc
                                   1923 ;	cp a,#'C 
                                   1924 ;	jreq rigth_arrow
                                   1925 ;	cp a,#'D 
                                   1926 ;	jreq left_arrow 
                                   1927 ;	jra final_test
      000B6C                       1928 right_arrow:
                                   1929 ;	ld a,#BSP 
                                   1930 ;	call putc 
                                   1931 ;	jra realn_loop 
      000B6C                       1932 left_arrow:
                                   1933 ;	jra readln_loop
      000B6C                       1934 accept_char:
      000B6C A6 4F            [ 1] 1935 	ld a,#TIB_SIZE-1
      000B6E 11 02            [ 1] 1936 	cp a, (LL,sp)
      000B70 2A 03            [ 1] 1937 	jrpl 1$
      000B72 CC 0A C8         [ 2] 1938 	jp readln_loop
      000B75 7B 01            [ 1] 1939 1$:	ld a,(RXCHAR,sp)
      000B77 90 F7            [ 1] 1940 	ld (y),a
      000B79 0C 02            [ 1] 1941 	inc (LL,sp)
      000B7B 90 5C            [ 2] 1942 	incw y
      000B7D 90 7F            [ 1] 1943 	clr (y)
      000B7F CD 02 A0         [ 4] 1944 	call putc 
      000B82 CC 0A C8         [ 2] 1945 	jp readln_loop
      000B85                       1946 readln_quit:
      000B85 90 7F            [ 1] 1947 	clr (y)
      000B87 7B 02            [ 1] 1948 	ld a,(LL,sp)
      000B89 C7 00 03         [ 1] 1949 	ld count,a 
      000B8C A6 0D            [ 1] 1950 	ld a,#CR
      000B8E CD 02 A0         [ 4] 1951 	call putc
      000B91                       1952 	_drop VSIZE 
      000B91 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B93 81               [ 4] 1953 	ret
                                   1954 
                                   1955 
                                   1956 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1957 ;; compiler routines        ;;
                                   1958 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1959 ;------------------------------------
                                   1960 ; parse quoted string 
                                   1961 ; input:
                                   1962 ;   Y 	pointer to tib 
                                   1963 ;   X   pointer to output buffer 
                                   1964 ; output:
                                   1965 ;	buffer   parsed string
                                   1966 ;------------------------------------
                           000001  1967 	PREV = 1
                           000002  1968 	CURR =2
                           000002  1969 	VSIZE=2
      000B94                       1970 parse_quote: 
      000B94                       1971 	_vars VSIZE 
      000B94 52 02            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000B96 4F               [ 1] 1972 	clr a
      000B97 6B 01            [ 1] 1973 1$:	ld (PREV,sp),a 
      000B99                       1974 2$:	
      000B99 91 D6 00         [ 4] 1975 	ld a,([in.w],y)
      000B9C 27 24            [ 1] 1976 	jreq 6$
      000B9E 72 5C 00 01      [ 1] 1977 	inc in 
      000BA2 6B 02            [ 1] 1978 	ld (CURR,sp),a 
      000BA4 A6 5C            [ 1] 1979 	ld a,#'\
      000BA6 11 01            [ 1] 1980 	cp a, (PREV,sp)
      000BA8 26 0A            [ 1] 1981 	jrne 3$
      000BAA 0F 01            [ 1] 1982 	clr (PREV,sp)
      000BAC 7B 02            [ 1] 1983 	ld a,(CURR,sp)
      000BAE AD 1C            [ 4] 1984 	callr convert_escape
      000BB0 F7               [ 1] 1985 	ld (x),a 
      000BB1 5C               [ 2] 1986 	incw x 
      000BB2 20 E5            [ 2] 1987 	jra 2$
      000BB4                       1988 3$:
      000BB4 7B 02            [ 1] 1989 	ld a,(CURR,sp)
      000BB6 A1 5C            [ 1] 1990 	cp a,#'\'
      000BB8 27 DD            [ 1] 1991 	jreq 1$
      000BBA A1 22            [ 1] 1992 	cp a,#'"
      000BBC 27 04            [ 1] 1993 	jreq 6$ 
      000BBE F7               [ 1] 1994 	ld (x),a 
      000BBF 5C               [ 2] 1995 	incw x 
      000BC0 20 D7            [ 2] 1996 	jra 2$
      000BC2                       1997 6$:
      000BC2 7F               [ 1] 1998 	clr (x)
      000BC3 5C               [ 2] 1999 	incw x 
      000BC4 90 93            [ 1] 2000 	ldw y,x 
      000BC6 5F               [ 1] 2001 	clrw x 
      000BC7 A6 02            [ 1] 2002 	ld a,#TK_QSTR  
      000BC9                       2003 	_drop VSIZE
      000BC9 5B 02            [ 2]    1     addw sp,#VSIZE 
      000BCB 81               [ 4] 2004 	ret 
                                   2005 
                                   2006 ;---------------------------------------
                                   2007 ; called by parse_quote
                                   2008 ; subtitute escaped character 
                                   2009 ; by their ASCII value .
                                   2010 ; input:
                                   2011 ;   A  character following '\'
                                   2012 ; output:
                                   2013 ;   A  substitued char or same if not valid.
                                   2014 ;---------------------------------------
      000BCC                       2015 convert_escape:
      000BCC 89               [ 2] 2016 	pushw x 
      000BCD AE 0B E1         [ 2] 2017 	ldw x,#escaped 
      000BD0 F1               [ 1] 2018 1$:	cp a,(x)
      000BD1 27 06            [ 1] 2019 	jreq 2$
      000BD3 7D               [ 1] 2020 	tnz (x)
      000BD4 27 09            [ 1] 2021 	jreq 3$
      000BD6 5C               [ 2] 2022 	incw x 
      000BD7 20 F7            [ 2] 2023 	jra 1$
      000BD9 1D 0B E1         [ 2] 2024 2$: subw x,#escaped 
      000BDC 9F               [ 1] 2025 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000BDD AB 07            [ 1] 2026 	add a,#7
      000BDF 85               [ 2] 2027 3$:	popw x 
      000BE0 81               [ 4] 2028 	ret 
                                   2029 
      000BE1 61 62 74 6E 76 66 72  2030 escaped: .asciz "abtnvfr"
             00
                                   2031 
                                   2032 ;-------------------------
                                   2033 ; integer parser 
                                   2034 ; input:
                                   2035 ;   X 		point to output buffer  
                                   2036 ;   Y 		point to tib 
                                   2037 ;   A 	    first digit|'$' 
                                   2038 ; output:  
                                   2039 ;   X 		integer 
                                   2040 ;   A 		TK_INTGR
                                   2041 ;   acc24   24 bits integer 
                                   2042 ;-------------------------
                           000001  2043 	BASE=1
                           000002  2044 	TCHAR=2 
                           000003  2045 	XSAVE=3
                           000004  2046 	VSIZE=4 
      000BE9                       2047 parse_integer: ; { -- n }
      000BE9 89               [ 2] 2048 	pushw x 	
      000BEA 4B 00            [ 1] 2049 	push #0 ; TCHAR
      000BEC 4B 0A            [ 1] 2050 	push #10 ; BASE=10
      000BEE A1 24            [ 1] 2051 	cp a,#'$
      000BF0 26 04            [ 1] 2052 	jrne 2$ 
      000BF2                       2053     _drop #1
      000BF2 5B 01            [ 2]    1     addw sp,##1 
      000BF4 4B 10            [ 1] 2054 	push #16  ; BASE=16
      000BF6 F7               [ 1] 2055 2$:	ld (x),a 
      000BF7 5C               [ 2] 2056 	incw x 
      000BF8 91 D6 00         [ 4] 2057 	ld a,([in.w],y)
      000BFB 72 5C 00 01      [ 1] 2058 	inc in 
      000BFF CD 0E 7C         [ 4] 2059 	call to_upper 
      000C02 6B 02            [ 1] 2060 	ld (TCHAR,sp),a 
      000C04 CD 05 7C         [ 4] 2061 	call is_digit 
      000C07 25 ED            [ 1] 2062 	jrc 2$
      000C09 A6 10            [ 1] 2063 	ld a,#16 
      000C0B 11 01            [ 1] 2064 	cp a,(BASE,sp)
      000C0D 26 0A            [ 1] 2065 	jrne 3$ 
      000C0F 7B 02            [ 1] 2066 	ld a,(TCHAR,sp)
      000C11 A1 41            [ 1] 2067 	cp a,#'A 
      000C13 2B 04            [ 1] 2068 	jrmi 3$ 
      000C15 A1 47            [ 1] 2069 	cp a,#'G 
      000C17 2B DD            [ 1] 2070 	jrmi 2$ 
      000C19 72 5A 00 01      [ 1] 2071 3$: dec in 	
      000C1D 7F               [ 1] 2072     clr (x)
      000C1E 1E 03            [ 2] 2073 	ldw x,(XSAVE,sp)
      000C20 CD 0E 88         [ 4] 2074 	call atoi24
      000C23 90 93            [ 1] 2075 	ldw y,x 
      000C25 CE 00 0C         [ 2] 2076 	ldw x,acc16 
      000C28 A6 84            [ 1] 2077 	ld a,#TK_INTGR
      000C2A 90 FF            [ 2] 2078 	ldw (y),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C2C 72 A9 00 02      [ 2] 2079 	addw y,#2
      000C30                       2080 	_drop VSIZE  
      000C30 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C32 81               [ 4] 2081 	ret 	
                                   2082 
                                   2083 ;-------------------------
                                   2084 ; binary integer parser
                                   2085 ; build integer in acc24  
                                   2086 ; input:
                                   2087 ;   X 		point to output buffer  
                                   2088 ;   Y 		point to tib 
                                   2089 ;   A 	    '&' 
                                   2090 ; output:  
                                   2091 ;   buffer  TK_INTGR integer  
                                   2092 ;   X 		int16 
                                   2093 ;   A 		TK_INTGR
                                   2094 ;   acc24    int24 
                                   2095 ;-------------------------
                           000001  2096 	BINARY=1 ; 24 bits integer 
                           000003  2097 	VSIZE=3
      000C33                       2098 parse_binary: ; { -- n }
      000C33 4B 00            [ 1] 2099 	push #0
      000C35 4B 00            [ 1] 2100 	push #0
      000C37 4B 00            [ 1] 2101 	push #0
      000C39                       2102 2$:	
      000C39 91 D6 00         [ 4] 2103 	ld a,([in.w],y)
      000C3C 72 5C 00 01      [ 1] 2104 	inc in 
      000C40 A1 30            [ 1] 2105 	cp a,#'0 
      000C42 27 06            [ 1] 2106 	jreq 3$
      000C44 A1 31            [ 1] 2107 	cp a,#'1 
      000C46 27 02            [ 1] 2108 	jreq 3$ 
      000C48 20 0B            [ 2] 2109 	jra bin_exit 
      000C4A A0 30            [ 1] 2110 3$: sub a,#'0 
      000C4C 46               [ 1] 2111 	rrc a
      000C4D 09 03            [ 1] 2112 	rlc (BINARY+2,sp) 
      000C4F 09 02            [ 1] 2113 	rlc (BINARY+1,sp)
      000C51 09 01            [ 1] 2114 	rlc (BINARY,sp) 
      000C53 20 E4            [ 2] 2115 	jra 2$  
      000C55                       2116 bin_exit:
      000C55 72 5A 00 01      [ 1] 2117 	dec in 
      000C59 90 93            [ 1] 2118 	ldw y,x
      000C5B 7B 01            [ 1] 2119 	ld a,(BINARY,sp)
      000C5D C7 00 0B         [ 1] 2120 	ld acc24,a 
      000C60 1E 02            [ 2] 2121 	ldw x,(BINARY+1,sp)
      000C62 CF 00 0C         [ 2] 2122 	ldw acc16,x
      000C65 90 FF            [ 2] 2123 	ldw (y),x 
      000C67 72 A9 00 02      [ 2] 2124 	addw y,#2  
      000C6B A6 84            [ 1] 2125 	ld a,#TK_INTGR 	
      000C6D                       2126 	_drop VSIZE 
      000C6D 5B 03            [ 2]    1     addw sp,#VSIZE 
      000C6F 81               [ 4] 2127 	ret
                                   2128 
                                   2129 ;---------------------------
                                   2130 ;  token begin with a letter,
                                   2131 ;  is keyword or variable. 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2132 ; input:
                                   2133 ;   X 		point to pad 
                                   2134 ;   Y 		point to text
                                   2135 ;   A 	    first letter  
                                   2136 ; output:
                                   2137 ;   X		exec_addr|var_addr 
                                   2138 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                   2139 ;   pad 	keyword|var_name  
                                   2140 ;--------------------------  
                           000001  2141 	XFIRST=1
                           000002  2142 	VSIZE=2
      000C70                       2143 parse_keyword: 
      000C70 89               [ 2] 2144 	pushw x 
      000C71                       2145 kw_loop:	
      000C71 CD 0E 7C         [ 4] 2146 	call to_upper 
      000C74 F7               [ 1] 2147 	ld (x),a 
      000C75 5C               [ 2] 2148 	incw x 
      000C76 91 D6 00         [ 4] 2149 	ld a,([in.w],y)
      000C79 72 5C 00 01      [ 1] 2150 	inc in 
      000C7D CD 05 6B         [ 4] 2151 	call is_alpha 
      000C80 25 EF            [ 1] 2152 	jrc kw_loop
      000C82 72 5A 00 01      [ 1] 2153 	dec in   
      000C86 7F               [ 1] 2154 1$: clr (x)
      000C87 1E 01            [ 2] 2155 	ldw x,(XFIRST,sp) 
      000C89 E6 01            [ 1] 2156 	ld a,(1,x)
      000C8B 26 13            [ 1] 2157 	jrne 2$
                                   2158 ; one letter variable name 
      000C8D F6               [ 1] 2159 	ld a,(x) 
      000C8E A0 41            [ 1] 2160 	sub a,#'A 
      000C90 48               [ 1] 2161 	sll a 
      000C91 88               [ 1] 2162 	push a 
      000C92 4B 00            [ 1] 2163 	push #0
      000C94 AE 00 26         [ 2] 2164 	ldw x,#vars 
      000C97 72 FB 01         [ 2] 2165 	addw x,(1,sp) ; X=var address 
      000C9A                       2166 	_drop 2 
      000C9A 5B 02            [ 2]    1     addw sp,#2 
      000C9C A6 85            [ 1] 2167 	ld a,#TK_VAR 
      000C9E 20 0E            [ 2] 2168 	jra 4$ 
      000CA0                       2169 2$: ; check for keyword, otherwise syntax error.
      000CA0                       2170 	_ldx_dict kword_dict ; dictionary entry point
      000CA0 AE 27 4C         [ 2]    1     ldw x,#kword_dict+2
      000CA3 16 01            [ 2] 2171 	ldw y,(XFIRST,sp) ; name to search for
      000CA5 CD 10 86         [ 4] 2172 	call search_dict
      000CA8 4D               [ 1] 2173 	tnz a
      000CA9 26 03            [ 1] 2174 	jrne 4$ 
      000CAB CC 08 7E         [ 2] 2175 	jp syntax_error
      000CAE                       2176 4$:	
      000CAE 16 01            [ 2] 2177 	ldw y,(XFIRST,sp)
      000CB0 90 F7            [ 1] 2178 	ld (y),a 
      000CB2 90 5C            [ 2] 2179 	incw y 
      000CB4 90 FF            [ 2] 2180 	ldw (y),x
      000CB6 72 A9 00 02      [ 2] 2181 	addw y,#2  
      000CBA                       2182 	_drop VSIZE 
      000CBA 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CBC 81               [ 4] 2183 	ret  	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2184 
                                   2185 
                                   2186 ;------------------------------------
                                   2187 ; scan text for next token
                                   2188 ; input: 
                                   2189 ;	X 		pointer to buffer where 
                                   2190 ;	        token id and value are copied 
                                   2191 ; use:
                                   2192 ;	Y   pointer to text in tib 
                                   2193 ; output:
                                   2194 ;   A       token attribute 
                                   2195 ;   X 		token value
                                   2196 ;   Y       updated position in output buffer   
                                   2197 ;------------------------------------
                                   2198 	; use to check special character 
                                   2199 	.macro _case c t  
                                   2200 	ld a,#c 
                                   2201 	cp a,(TCHAR,sp) 
                                   2202 	jrne t
                                   2203 	.endm 
                                   2204 
                           000001  2205 	TCHAR=1
                           000002  2206 	ATTRIB=2
                           000002  2207 	VSIZE=2
      000CBD                       2208 get_token: 
      000CBD                       2209 	_vars VSIZE
      000CBD 52 02            [ 2]    1     sub sp,#VSIZE 
                                   2210 ;	ld a,in 
                                   2211 ;	sub a,count
                                   2212 ;   jrmi 0$
                                   2213 ;	clr a 
                                   2214 ;	ret 
      000CBF                       2215 0$: 
      000CBF 90 AE 16 90      [ 2] 2216 	ldw y,#tib    	
      000CC3 A6 20            [ 1] 2217 	ld a,#SPACE
      000CC5 CD 0E F2         [ 4] 2218 	call skip
      000CC8 55 00 01 00 02   [ 1] 2219 	mov in.saved,in 
      000CCD 91 D6 00         [ 4] 2220 	ld a,([in.w],y)
      000CD0 26 05            [ 1] 2221 	jrne 1$
      000CD2 90 93            [ 1] 2222 	ldw y,x 
      000CD4 CC 0E 79         [ 2] 2223 	jp token_exit ; end of line 
      000CD7 72 5C 00 01      [ 1] 2224 1$:	inc in 
      000CDB CD 0E 7C         [ 4] 2225 	call to_upper 
      000CDE 6B 01            [ 1] 2226 	ld (TCHAR,sp),a 
                                   2227 ; check for quoted string
      000CE0                       2228 str_tst:  	
      000CE0                       2229 	_case '"' nbr_tst
      000CE0 A6 22            [ 1]    1 	ld a,#'"' 
      000CE2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CE4 26 0A            [ 1]    3 	jrne nbr_tst
      000CE6 A6 02            [ 1] 2230 	ld a,#TK_QSTR
      000CE8 F7               [ 1] 2231 	ld (x),a 
      000CE9 5C               [ 2] 2232 	incw x 
      000CEA CD 0B 94         [ 4] 2233 	call parse_quote
      000CED CC 0E 79         [ 2] 2234 	jp token_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000CF0                       2235 nbr_tst:
                                   2236 ; check for hexadecimal number 
      000CF0 A6 24            [ 1] 2237 	ld a,#'$'
      000CF2 11 01            [ 1] 2238 	cp a,(TCHAR,sp) 
      000CF4 27 17            [ 1] 2239 	jreq 1$
                                   2240 ;check for binary number 
      000CF6 A6 26            [ 1] 2241 	ld a,#'&
      000CF8 11 01            [ 1] 2242 	cp a,(TCHAR,sp)
      000CFA 26 0A            [ 1] 2243 	jrne 0$
      000CFC A6 84            [ 1] 2244 	ld a,#TK_INTGR
      000CFE F7               [ 1] 2245 	ld (x),a 
      000CFF 5C               [ 2] 2246 	incw x 
      000D00 CD 0C 33         [ 4] 2247 	call parse_binary ; expect binary integer 
      000D03 CC 0E 79         [ 2] 2248 	jp token_exit 
                                   2249 ; check for decimal number 	
      000D06 7B 01            [ 1] 2250 0$:	ld a,(TCHAR,sp)
      000D08 CD 05 7C         [ 4] 2251 	call is_digit
      000D0B 24 0C            [ 1] 2252 	jrnc 3$
      000D0D A6 84            [ 1] 2253 1$:	ld a,#TK_INTGR 
      000D0F F7               [ 1] 2254 	ld (x),a 
      000D10 5C               [ 2] 2255 	incw x 
      000D11 7B 01            [ 1] 2256 	ld a,(TCHAR,sp)
      000D13 CD 0B E9         [ 4] 2257 	call parse_integer 
      000D16 CC 0E 79         [ 2] 2258 	jp token_exit 
      000D19                       2259 3$: 
      000D19                       2260 	_case '(' bkslsh_tst 
      000D19 A6 28            [ 1]    1 	ld a,#'(' 
      000D1B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D1D 26 05            [ 1]    3 	jrne bkslsh_tst
      000D1F A6 07            [ 1] 2261 	ld a,#TK_LPAREN
      000D21 CC 0E 75         [ 2] 2262 	jp token_char   	
      000D24                       2263 bkslsh_tst: ; character token 
      000D24                       2264 	_case '\',rparnt_tst
      000D24 A6 5C            [ 1]    1 	ld a,#'\' 
      000D26 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D28 26 16            [ 1]    3 	jrne rparnt_tst
      000D2A A6 03            [ 1] 2265 	ld a,#TK_CHAR 
      000D2C F7               [ 1] 2266 	ld (x),a 
      000D2D 5C               [ 2] 2267 	incw x 
      000D2E 91 D6 00         [ 4] 2268 	ld a,([in.w],y)
      000D31 F7               [ 1] 2269 	ld (x),a 
      000D32 5C               [ 2] 2270 	incw x
      000D33 90 93            [ 1] 2271 	ldw y,x 	 
      000D35 72 5C 00 01      [ 1] 2272 	inc in  
      000D39 5F               [ 1] 2273 	clrw x 
      000D3A 97               [ 1] 2274 	ld xl,a 
      000D3B A6 03            [ 1] 2275 	ld a,#TK_CHAR 
      000D3D CC 0E 79         [ 2] 2276 	jp token_exit 
      000D40                       2277 rparnt_tst:		
      000D40                       2278 	_case ')' colon_tst 
      000D40 A6 29            [ 1]    1 	ld a,#')' 
      000D42 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D44 26 05            [ 1]    3 	jrne colon_tst
      000D46 A6 08            [ 1] 2279 	ld a,#TK_RPAREN 
      000D48 CC 0E 75         [ 2] 2280 	jp token_char
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D4B                       2281 colon_tst:
      000D4B                       2282 	_case ':' comma_tst 
      000D4B A6 3A            [ 1]    1 	ld a,#':' 
      000D4D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D4F 26 05            [ 1]    3 	jrne comma_tst
      000D51 A6 01            [ 1] 2283 	ld a,#TK_COLON 
      000D53 CC 0E 75         [ 2] 2284 	jp token_char  
      000D56                       2285 comma_tst:
      000D56                       2286 	_case COMMA sharp_tst 
      000D56 A6 2C            [ 1]    1 	ld a,#COMMA 
      000D58 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D5A 26 05            [ 1]    3 	jrne sharp_tst
      000D5C A6 09            [ 1] 2287 	ld a,#TK_COMMA
      000D5E CC 0E 75         [ 2] 2288 	jp token_char
      000D61                       2289 sharp_tst:
      000D61                       2290 	_case SHARP dash_tst 
      000D61 A6 23            [ 1]    1 	ld a,#SHARP 
      000D63 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D65 26 05            [ 1]    3 	jrne dash_tst
      000D67 A6 0A            [ 1] 2291 	ld a,#TK_SHARP
      000D69 CC 0E 75         [ 2] 2292 	jp token_char  	 	 
      000D6C                       2293 dash_tst: 	
      000D6C                       2294 	_case '-' at_tst 
      000D6C A6 2D            [ 1]    1 	ld a,#'-' 
      000D6E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D70 26 05            [ 1]    3 	jrne at_tst
      000D72 A6 11            [ 1] 2295 	ld a,#TK_MINUS  
      000D74 CC 0E 75         [ 2] 2296 	jp token_char 
      000D77                       2297 at_tst:
      000D77                       2298 	_case '@' qmark_tst 
      000D77 A6 40            [ 1]    1 	ld a,#'@' 
      000D79 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D7B 26 05            [ 1]    3 	jrne qmark_tst
      000D7D A6 06            [ 1] 2299 	ld a,#TK_ARRAY 
      000D7F CC 0E 75         [ 2] 2300 	jp token_char
      000D82                       2301 qmark_tst:
      000D82                       2302 	_case '?' tick_tst 
      000D82 A6 3F            [ 1]    1 	ld a,#'?' 
      000D84 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D86 26 12            [ 1]    3 	jrne tick_tst
      000D88 A6 80            [ 1] 2303 	ld a,#TK_CMD  
      000D8A F7               [ 1] 2304 	ld (x),a 
      000D8B 5C               [ 2] 2305 	incw x 
      000D8C 90 93            [ 1] 2306 	ldw y,x 
      000D8E AE 15 A0         [ 2] 2307 	ldw x,#print 
      000D91 90 FF            [ 2] 2308 	ldw (y),x 
      000D93 72 A9 00 02      [ 2] 2309 	addw y,#2
      000D97 CC 0E 79         [ 2] 2310 	jp token_exit
      000D9A                       2311 tick_tst: ; comment 
      000D9A                       2312 	_case TICK plus_tst 
      000D9A A6 27            [ 1]    1 	ld a,#TICK 
      000D9C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D9E 26 35            [ 1]    3 	jrne plus_tst
      000DA0 A6 80            [ 1] 2313 	ld a,#TK_CMD
      000DA2 F7               [ 1] 2314 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DA3 5C               [ 2] 2315 	incw x
      000DA4 90 AE 16 9D      [ 2] 2316 	ldw y,#remark
      000DA8 FF               [ 2] 2317 	ldw (x),y 
      000DA9 1C 00 02         [ 2] 2318 	addw x,#2  
      000DAC                       2319 copy_comment:
      000DAC 90 AE 16 90      [ 2] 2320 	ldw y,#tib 
      000DB0 72 B9 00 00      [ 2] 2321 	addw y,in.w
      000DB4 90 89            [ 2] 2322 	pushw y
      000DB6 CD 03 B0         [ 4] 2323 	call strcpy
      000DB9 72 F2 01         [ 2] 2324     subw y,(1,sp)
      000DBC 90 9F            [ 1] 2325 	ld a,yl 
      000DBE CB 00 01         [ 1] 2326 	add a,in
      000DC1 C7 00 01         [ 1] 2327 	ld in,a 
      000DC4 1F 01            [ 2] 2328 	ldw (1,sp),x
      000DC6 72 F9 01         [ 2] 2329 	addw y,(1,sp)
      000DC9 90 5C            [ 2] 2330 	incw y 
      000DCB                       2331 	_drop 2 
      000DCB 5B 02            [ 2]    1     addw sp,#2 
      000DCD AE 16 9D         [ 2] 2332 	ldw x,#remark 
      000DD0 A6 80            [ 1] 2333 	ld a,#TK_CMD 
      000DD2 CC 0E 79         [ 2] 2334 	jp token_exit 
      000DD5                       2335 plus_tst:
      000DD5                       2336 	_case '+' star_tst 
      000DD5 A6 2B            [ 1]    1 	ld a,#'+' 
      000DD7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DD9 26 05            [ 1]    3 	jrne star_tst
      000DDB A6 10            [ 1] 2337 	ld a,#TK_PLUS  
      000DDD CC 0E 75         [ 2] 2338 	jp token_char 
      000DE0                       2339 star_tst:
      000DE0                       2340 	_case '*' slash_tst 
      000DE0 A6 2A            [ 1]    1 	ld a,#'*' 
      000DE2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE4 26 05            [ 1]    3 	jrne slash_tst
      000DE6 A6 20            [ 1] 2341 	ld a,#TK_MULT 
      000DE8 CC 0E 75         [ 2] 2342 	jp token_char 
      000DEB                       2343 slash_tst: 
      000DEB                       2344 	_case '/' prcnt_tst 
      000DEB A6 2F            [ 1]    1 	ld a,#'/' 
      000DED 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DEF 26 05            [ 1]    3 	jrne prcnt_tst
      000DF1 A6 21            [ 1] 2345 	ld a,#TK_DIV 
      000DF3 CC 0E 75         [ 2] 2346 	jp token_char 
      000DF6                       2347 prcnt_tst:
      000DF6                       2348 	_case '%' eql_tst 
      000DF6 A6 25            [ 1]    1 	ld a,#'%' 
      000DF8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DFA 26 05            [ 1]    3 	jrne eql_tst
      000DFC A6 22            [ 1] 2349 	ld a,#TK_MOD
      000DFE CC 0E 75         [ 2] 2350 	jp token_char  
                                   2351 ; 1 or 2 character tokens 	
      000E01                       2352 eql_tst:
      000E01                       2353 	_case '=' gt_tst 		
      000E01 A6 3D            [ 1]    1 	ld a,#'=' 
      000E03 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E05 26 05            [ 1]    3 	jrne gt_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E07 A6 32            [ 1] 2354 	ld a,#TK_EQUAL
      000E09 CC 0E 75         [ 2] 2355 	jp token_char 
      000E0C                       2356 gt_tst:
      000E0C                       2357 	_case '>' lt_tst 
      000E0C A6 3E            [ 1]    1 	ld a,#'>' 
      000E0E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E10 26 23            [ 1]    3 	jrne lt_tst
      000E12 A6 31            [ 1] 2358 	ld a,#TK_GT 
      000E14 6B 02            [ 1] 2359 	ld (ATTRIB,sp),a 
      000E16 72 5C 00 01      [ 1] 2360 	inc in 
      000E1A 91 D6 00         [ 4] 2361 	ld a,([in.w],y)
      000E1D A1 3D            [ 1] 2362 	cp a,#'=
      000E1F 26 04            [ 1] 2363 	jrne 1$
      000E21 A6 33            [ 1] 2364 	ld a,#TK_GE 
      000E23 20 50            [ 2] 2365 	jra token_char  
      000E25 A1 3C            [ 1] 2366 1$: cp a,#'<
      000E27 26 04            [ 1] 2367 	jrne 2$
      000E29 A6 35            [ 1] 2368 	ld a,#TK_NE 
      000E2B 20 48            [ 2] 2369 	jra token_char 
      000E2D 72 5A 00 01      [ 1] 2370 2$: dec in
      000E31 7B 02            [ 1] 2371 	ld a,(ATTRIB,sp)
      000E33 20 40            [ 2] 2372 	jra token_char 	 
      000E35                       2373 lt_tst:
      000E35                       2374 	_case '<' other
      000E35 A6 3C            [ 1]    1 	ld a,#'<' 
      000E37 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E39 26 23            [ 1]    3 	jrne other
      000E3B A6 34            [ 1] 2375 	ld a,#TK_LT 
      000E3D 6B 02            [ 1] 2376 	ld (ATTRIB,sp),a 
      000E3F 72 5C 00 01      [ 1] 2377 	inc in 
      000E43 91 D6 00         [ 4] 2378 	ld a,([in.w],y)
      000E46 A1 3D            [ 1] 2379 	cp a,#'=
      000E48 26 04            [ 1] 2380 	jrne 1$
      000E4A A6 36            [ 1] 2381 	ld a,#TK_LE 
      000E4C 20 27            [ 2] 2382 	jra token_char 
      000E4E A1 3E            [ 1] 2383 1$: cp a,#'>
      000E50 26 04            [ 1] 2384 	jrne 2$
      000E52 A6 35            [ 1] 2385 	ld a,#TK_NE 
      000E54 20 1F            [ 2] 2386 	jra token_char 
      000E56 72 5A 00 01      [ 1] 2387 2$: dec in 
      000E5A 7B 02            [ 1] 2388 	ld a,(ATTRIB,sp)
      000E5C 20 17            [ 2] 2389 	jra token_char 	
      000E5E                       2390 other: ; not a special character 	 
      000E5E 7B 01            [ 1] 2391 	ld a,(TCHAR,sp)
      000E60 CD 05 6B         [ 4] 2392 	call is_alpha 
      000E63 25 03            [ 1] 2393 	jrc 30$ 
      000E65 CC 08 7E         [ 2] 2394 	jp syntax_error 
      000E68                       2395 30$: 
      000E68 CD 0C 70         [ 4] 2396 	call parse_keyword
      000E6B A3 16 9D         [ 2] 2397 	cpw x,#remark 
      000E6E 26 09            [ 1] 2398 	jrne token_exit 
      000E70 90 93            [ 1] 2399 	ldw y,x 
      000E72 CC 0D AC         [ 2] 2400 	jp copy_comment 
      000E75                       2401 token_char:
      000E75 F7               [ 1] 2402 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E76 5C               [ 2] 2403 	incw x
      000E77 90 93            [ 1] 2404 	ldw y,x 
      000E79                       2405 token_exit:
      000E79                       2406 	_drop VSIZE 
      000E79 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E7B 81               [ 4] 2407 	ret
                                   2408 
                                   2409 
                                   2410 ;------------------------------------
                                   2411 ; convert alpha to uppercase
                                   2412 ; input:
                                   2413 ;    a  character to convert
                                   2414 ; output:
                                   2415 ;    a  uppercase character
                                   2416 ;------------------------------------
      000E7C                       2417 to_upper::
      000E7C A1 61            [ 1] 2418 	cp a,#'a
      000E7E 2A 01            [ 1] 2419 	jrpl 1$
      000E80 81               [ 4] 2420 0$:	ret
      000E81 A1 7A            [ 1] 2421 1$: cp a,#'z	
      000E83 22 FB            [ 1] 2422 	jrugt 0$
      000E85 A0 20            [ 1] 2423 	sub a,#32
      000E87 81               [ 4] 2424 	ret
                                   2425 	
                                   2426 ;------------------------------------
                                   2427 ; convert pad content in integer
                                   2428 ; input:
                                   2429 ;    x		.asciz to convert
                                   2430 ; output:
                                   2431 ;    acc24      int24_t
                                   2432 ;------------------------------------
                                   2433 	; local variables
                           000001  2434 	SIGN=1 ; 1 byte, 
                           000002  2435 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2436 	TEMP=3 ; 1 byte, temporary storage
                           000003  2437 	VSIZE=3 ; 3 bytes reserved for local storage
      000E88                       2438 atoi24:
      000E88 89               [ 2] 2439 	pushw x 
      000E89                       2440 	_vars VSIZE
      000E89 52 03            [ 2]    1     sub sp,#VSIZE 
                                   2441 	; acc24=0 
      000E8B 72 5F 00 0B      [ 1] 2442 	clr acc24    
      000E8F 72 5F 00 0C      [ 1] 2443 	clr acc16
      000E93 72 5F 00 0D      [ 1] 2444 	clr acc8 
      000E97 0F 01            [ 1] 2445 	clr (SIGN,sp)
      000E99 A6 0A            [ 1] 2446 	ld a,#10
      000E9B 6B 02            [ 1] 2447 	ld (BASE,sp),a ; default base decimal
      000E9D F6               [ 1] 2448 	ld a,(x)
      000E9E 27 47            [ 1] 2449 	jreq 9$  ; completed if 0
      000EA0 A1 2D            [ 1] 2450 	cp a,#'-
      000EA2 26 04            [ 1] 2451 	jrne 1$
      000EA4 03 01            [ 1] 2452 	cpl (SIGN,sp)
      000EA6 20 08            [ 2] 2453 	jra 2$
      000EA8 A1 24            [ 1] 2454 1$: cp a,#'$
      000EAA 26 06            [ 1] 2455 	jrne 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000EAC A6 10            [ 1] 2456 	ld a,#16
      000EAE 6B 02            [ 1] 2457 	ld (BASE,sp),a
      000EB0 5C               [ 2] 2458 2$:	incw x
      000EB1 F6               [ 1] 2459 	ld a,(x)
      000EB2                       2460 3$:	
      000EB2 A1 61            [ 1] 2461 	cp a,#'a
      000EB4 2B 02            [ 1] 2462 	jrmi 4$
      000EB6 A0 20            [ 1] 2463 	sub a,#32
      000EB8 A1 30            [ 1] 2464 4$:	cp a,#'0
      000EBA 2B 2B            [ 1] 2465 	jrmi 9$
      000EBC A0 30            [ 1] 2466 	sub a,#'0
      000EBE A1 0A            [ 1] 2467 	cp a,#10
      000EC0 2B 06            [ 1] 2468 	jrmi 5$
      000EC2 A0 07            [ 1] 2469 	sub a,#7
      000EC4 11 02            [ 1] 2470 	cp a,(BASE,sp)
      000EC6 2A 1F            [ 1] 2471 	jrpl 9$
      000EC8 6B 03            [ 1] 2472 5$:	ld (TEMP,sp),a
      000ECA 7B 02            [ 1] 2473 	ld a,(BASE,sp)
      000ECC CD 0A 63         [ 4] 2474 	call mulu24_8
      000ECF 7B 03            [ 1] 2475 	ld a,(TEMP,sp)
      000ED1 CB 00 0D         [ 1] 2476 	add a,acc24+2
      000ED4 C7 00 0D         [ 1] 2477 	ld acc24+2,a
      000ED7 4F               [ 1] 2478 	clr a
      000ED8 C9 00 0C         [ 1] 2479 	adc a,acc24+1
      000EDB C7 00 0C         [ 1] 2480 	ld acc24+1,a
      000EDE 4F               [ 1] 2481 	clr a
      000EDF C9 00 0B         [ 1] 2482 	adc a,acc24
      000EE2 C7 00 0B         [ 1] 2483 	ld acc24,a
      000EE5 20 C9            [ 2] 2484 	jra 2$
      000EE7 0D 01            [ 1] 2485 9$:	tnz (SIGN,sp)
      000EE9 27 03            [ 1] 2486     jreq atoi_exit
      000EEB CD 0A 9D         [ 4] 2487     call neg_acc24
      000EEE                       2488 atoi_exit: 
      000EEE                       2489 	_drop VSIZE
      000EEE 5B 03            [ 2]    1     addw sp,#VSIZE 
      000EF0 85               [ 2] 2490 	popw x ; restore x
      000EF1 81               [ 4] 2491 	ret
                                   2492 
                                   2493 
                                   2494 ;------------------------------------
                                   2495 ; skip character c in text starting from 'in'
                                   2496 ; input:
                                   2497 ;	 y 		point to text buffer
                                   2498 ;    a 		character to skip
                                   2499 ; output:  
                                   2500 ;	'in' ajusted to new position
                                   2501 ;------------------------------------
                           000001  2502 	C = 1 ; local var
      000EF2                       2503 skip:
      000EF2 88               [ 1] 2504 	push a
      000EF3 91 D6 00         [ 4] 2505 1$:	ld a,([in.w],y)
      000EF6 27 0A            [ 1] 2506 	jreq 2$
      000EF8 11 01            [ 1] 2507 	cp a,(C,sp)
      000EFA 26 06            [ 1] 2508 	jrne 2$
      000EFC 72 5C 00 01      [ 1] 2509 	inc in
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000F00 20 F1            [ 2] 2510 	jra 1$
      000F02                       2511 2$: _drop 1 
      000F02 5B 01            [ 2]    1     addw sp,#1 
      000F04 81               [ 4] 2512 	ret
                                   2513 	
                                   2514 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2515 ;;   TINY BASIC  operators,
                                   2516 ;;   commands and functions 
                                   2517 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2518 
                                   2519 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2520 ;;  Arithmetic operators
                                   2521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2522 
                                   2523 ;debug support
                           000001  2524 DEBUG_PRT=1
                           000001  2525 .if DEBUG_PRT 
      000F05                       2526 printxy:
      000F05 C6 00 0A         [ 1] 2527 	ld a,base 
      000F08 88               [ 1] 2528 	push a 
      000F09 89               [ 2] 2529 	pushw x 
      000F0A 90 89            [ 2] 2530 	pushw y
      000F0C 35 10 00 0A      [ 1] 2531 	mov base,#16 
      000F10 CD 09 C5         [ 4] 2532 	call print_int
      000F13 A6 20            [ 1] 2533 	ld a,#SPACE 
      000F15 CD 02 A0         [ 4] 2534 	call putc  
      000F18 1E 01            [ 2] 2535 	ldw x,(1,sp)
      000F1A CD 09 C5         [ 4] 2536 	call print_int 
      000F1D A6 0D            [ 1] 2537 	ld a,#CR 
      000F1F CD 02 A0         [ 4] 2538 	call putc 
      000F22 90 85            [ 2] 2539 	popw y 
      000F24 85               [ 2] 2540 	popw x 
      000F25 84               [ 1] 2541 	pop a 
      000F26 C7 00 0A         [ 1] 2542 	ld base,a 
      000F29 81               [ 4] 2543 	ret 
                                   2544 .endif 
                                   2545 
                                   2546 
                                   2547 ;--------------------------------------
                                   2548 ;  multiply 2 uint16_t return uint32_t
                                   2549 ;  input:
                                   2550 ;     x       uint16_t 
                                   2551 ;     y       uint16_t 
                                   2552 ;  output:
                                   2553 ;     x       product bits 15..0
                                   2554 ;     y       product bits 31..16 
                                   2555 ;---------------------------------------
                           000001  2556 		U1=1  ; uint16_t 
                           000003  2557 		DBL=3 ; uint32_t
                           000006  2558 		VSIZE=6
      000F2A                       2559 umstar:
      000F2A                       2560 	_vars VSIZE 
      000F2A 52 06            [ 2]    1     sub sp,#VSIZE 
      000F2C 1F 01            [ 2] 2561 	ldw (U1,sp),x 
                                   2562 ;initialize bits 31..16 of 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2563 ;product to zero 
      000F2E 0F 03            [ 1] 2564 	clr (DBL,sp)
      000F30 0F 04            [ 1] 2565 	clr (DBL+1,sp)
                                   2566 ; produc U1L*U2L 
      000F32 90 9F            [ 1] 2567 	ld a,yl 
      000F34 42               [ 4] 2568 	mul x,a 
      000F35 1F 05            [ 2] 2569 	ldw (DBL+2,sp),x
                                   2570 ; product U1H*U2L 
      000F37 7B 01            [ 1] 2571 	ld a,(U1,sp) ; xh 
      000F39 93               [ 1] 2572 	ldw x,y
      000F3A 42               [ 4] 2573 	mul x,a 
      000F3B 4F               [ 1] 2574 	clr a 
      000F3C 72 FB 04         [ 2] 2575 	addw x,(DBL+1,sp) 
      000F3F 4F               [ 1] 2576 	clr a 
      000F40 19 03            [ 1] 2577 	adc a,(DBL,sp) 
      000F42 6B 03            [ 1] 2578 	ld (DBL,sp),a ; bits 23..17 
      000F44 1F 04            [ 2] 2579 	ldw (DBL+1,sp),x ; bits 15..0 
                                   2580 ; product U1L*U2H
      000F46 90 5E            [ 1] 2581 	swapw y 
      000F48 93               [ 1] 2582 	ldw x,y
      000F49 7B 02            [ 1] 2583 	ld a,(U1+1,sp)
      000F4B 42               [ 4] 2584 	mul x,a
      000F4C 72 FB 04         [ 2] 2585 	addw x,(DBL+1,sp)
      000F4F 4F               [ 1] 2586 	clr a 
      000F50 19 03            [ 1] 2587 	adc a,(DBL,sp)
      000F52 6B 03            [ 1] 2588 	ld (DBL,sp),a 
      000F54 1F 04            [ 2] 2589 	ldw (DBL+1,sp),x 
                                   2590 ; product U1H*U2H 	
      000F56 7B 01            [ 1] 2591 	ld a,(U1,sp)
      000F58 93               [ 1] 2592 	ldw x,y  
      000F59 42               [ 4] 2593 	mul x,a 
      000F5A 72 FB 03         [ 2] 2594 	addw x,(DBL,sp)
      000F5D 90 93            [ 1] 2595 	ldw y,x 
      000F5F 1E 05            [ 2] 2596 	ldw x,(DBL+2,sp)
      000F61                       2597 	_drop VSIZE 
      000F61 5B 06            [ 2]    1     addw sp,#VSIZE 
      000F63 81               [ 4] 2598 	ret
                                   2599 
                                   2600 
                                   2601 ;-------------------------------------
                                   2602 ; multiply 2 integers
                                   2603 ; input:
                                   2604 ;  	x       n1 
                                   2605 ;   y 		n2 
                                   2606 ; output:
                                   2607 ;	X        N1*N2 bits 15..0
                                   2608 ;   Y        N1*N2 bits 31..16 
                                   2609 ;-------------------------------------
                           000001  2610 	SIGN=1
                           000001  2611 	VSIZE=1
      000F64                       2612 multiply:
      000F64                       2613 	_vars VSIZE 
      000F64 52 01            [ 2]    1     sub sp,#VSIZE 
      000F66 0F 01            [ 1] 2614 	clr (SIGN,sp)
      000F68 9E               [ 1] 2615 	ld a,xh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000F69 A4 80            [ 1] 2616 	and a,#0x80
      000F6B 2A 03            [ 1] 2617 	jrpl 1$
      000F6D 03 01            [ 1] 2618 	cpl (SIGN,sp)
      000F6F 50               [ 2] 2619 	negw x 
      000F70                       2620 1$:	
      000F70 90 9E            [ 1] 2621 	ld a,yh
      000F72 A4 80            [ 1] 2622 	and a,#0x80  
      000F74 2A 04            [ 1] 2623 	jrpl 2$ 
      000F76 03 01            [ 1] 2624 	cpl (SIGN,sp)
      000F78 90 50            [ 2] 2625 	negw y 
      000F7A                       2626 2$:	
      000F7A CD 0F 2A         [ 4] 2627 	call umstar
      000F7D 7B 01            [ 1] 2628 	ld a,(SIGN,sp)
      000F7F 27 03            [ 1] 2629 	jreq 3$
      000F81 CD 0F B1         [ 4] 2630 	call dneg 
      000F84                       2631 3$:	
      000F84                       2632 	_drop VSIZE 
      000F84 5B 01            [ 2]    1     addw sp,#VSIZE 
      000F86 81               [ 4] 2633 	ret
                                   2634 
                                   2635 ;--------------------------------------
                                   2636 ; divide uint32_t/uint16_t
                                   2637 ; return:  quotient and remainder 
                                   2638 ; quotient expected to be uint16_t 
                                   2639 ; input:
                                   2640 ;   DBLDIVDND    on stack 
                                   2641 ;   X            divisor 
                                   2642 ; output:
                                   2643 ;   X            quotient 
                                   2644 ;   Y            remainder 
                                   2645 ;---------------------------------------
                           000003  2646 	VSIZE=3
      000F87                       2647 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      000F87                       2648 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   2649 	; local variables 
                           000001  2650 	DIVISOR=1 
                           000003  2651 	CNTR=3 
      000F87                       2652 udiv32_16:
      000F87                       2653 	_vars VSIZE 
      000F87 52 03            [ 2]    1     sub sp,#VSIZE 
      000F89 1F 01            [ 2] 2654 	ldw (DIVISOR,sp),x	; save divisor 
      000F8B 1E 08            [ 2] 2655 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      000F8D 16 06            [ 2] 2656 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      000F8F 90 5D            [ 2] 2657 	tnzw y
      000F91 26 06            [ 1] 2658 	jrne long_division 
      000F93 16 01            [ 2] 2659 	ldw y,(DIVISOR,sp)
      000F95 65               [ 2] 2660 	divw x,y
      000F96                       2661 	_drop VSIZE 
      000F96 5B 03            [ 2]    1     addw sp,#VSIZE 
      000F98 81               [ 4] 2662 	ret
      000F99                       2663 long_division:
      000F99 51               [ 1] 2664 	exgw x,y ; hi in x, lo in y 
      000F9A A6 11            [ 1] 2665 	ld a,#17 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000F9C 6B 03            [ 1] 2666 	ld (CNTR,sp),a
      000F9E                       2667 1$:
      000F9E 13 01            [ 2] 2668 	cpw x,(DIVISOR,sp)
      000FA0 2B 03            [ 1] 2669 	jrmi 2$
      000FA2 72 F0 01         [ 2] 2670 	subw x,(DIVISOR,sp)
      000FA5 8C               [ 1] 2671 2$:	ccf 
      000FA6 90 59            [ 2] 2672 	rlcw y 
      000FA8 59               [ 2] 2673 	rlcw x 
      000FA9 0A 03            [ 1] 2674 	dec (CNTR,sp)
      000FAB 26 F1            [ 1] 2675 	jrne 1$
      000FAD 51               [ 1] 2676 	exgw x,y 
      000FAE                       2677 	_drop VSIZE 
      000FAE 5B 03            [ 2]    1     addw sp,#VSIZE 
      000FB0 81               [ 4] 2678 	ret
                                   2679 
                                   2680 ;-----------------------------
                                   2681 ; negate double int.
                                   2682 ; input:
                                   2683 ;   x     bits 15..0
                                   2684 ;   y     bits 31..16
                                   2685 ; output: 
                                   2686 ;   x     bits 15..0
                                   2687 ;   y     bits 31..16
                                   2688 ;-----------------------------
      000FB1                       2689 dneg:
      000FB1 53               [ 2] 2690 	cplw x 
      000FB2 90 53            [ 2] 2691 	cplw y 
      000FB4 1C 00 01         [ 2] 2692 	addw x,#1 
      000FB7 24 02            [ 1] 2693 	jrnc 1$
      000FB9 90 5C            [ 2] 2694 	incw y 
      000FBB 81               [ 4] 2695 1$: ret 
                                   2696 
                                   2697 
                                   2698 ;--------------------------------
                                   2699 ; sign extend single to double
                                   2700 ; input:
                                   2701 ;   x    int16_t
                                   2702 ; output:
                                   2703 ;   x    int32_t bits 15..0
                                   2704 ;   y    int32_t bits 31..16
                                   2705 ;--------------------------------
      000FBC                       2706 dbl_sign_extend:
      000FBC 90 5F            [ 1] 2707 	clrw y
      000FBE 9E               [ 1] 2708 	ld a,xh 
      000FBF A4 80            [ 1] 2709 	and a,#0x80 
      000FC1 27 02            [ 1] 2710 	jreq 1$
      000FC3 90 53            [ 2] 2711 	cplw y
      000FC5 81               [ 4] 2712 1$: ret 	
                                   2713 
                                   2714 
                                   2715 ;----------------------------------
                                   2716 ;  euclidian divide dbl/n1 
                                   2717 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   2718 ; input:
                                   2719 ;    dbl    int32_t on stack 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2720 ;    x 		n1   int16_t  disivor  
                                   2721 ; output:
                                   2722 ;    X      dbl/x  int16_t 
                                   2723 ;    Y      remainder int16_t 
                                   2724 ;----------------------------------
                           000008  2725 	VSIZE=8
      000FC6                       2726 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      000FC6                       2727 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      000FC6                       2728 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   2729 	; local variables
                           000001  2730 	DBLHI=1
                           000003  2731 	DBLLO=3 
                           000005  2732 	SDIVSR=5 ; sign divisor
                           000006  2733 	SQUOT=6 ; sign dividend 
                           000007  2734 	DIVISR=7 ; divisor 
      000FC6                       2735 div32_16:
      000FC6                       2736 	_vars VSIZE 
      000FC6 52 08            [ 2]    1     sub sp,#VSIZE 
      000FC8 0F 05            [ 1] 2737 	clr (SDIVSR,sp)
      000FCA 0F 06            [ 1] 2738 	clr (SQUOT,sp)
                                   2739 ; copy arguments 
      000FCC 16 0B            [ 2] 2740 	ldw y,(DIVDNDHI,sp)
      000FCE 17 01            [ 2] 2741 	ldw (DBLHI,sp),y
      000FD0 16 0D            [ 2] 2742 	ldw y,(DIVDNDLO,sp)
      000FD2 17 03            [ 2] 2743 	ldw (DBLLO,sp),y 
                                   2744 ; check for 0 divisor
      000FD4 5D               [ 2] 2745 	tnzw x 
      000FD5 26 05            [ 1] 2746     jrne 0$
      000FD7 A6 04            [ 1] 2747 	ld a,#ERR_DIV0 
      000FD9 CC 08 80         [ 2] 2748 	jp tb_error 
                                   2749 ; check divisor sign 	
      000FDC 9E               [ 1] 2750 0$:	ld a,xh 
      000FDD A4 80            [ 1] 2751 	and a,#0x80 
      000FDF 27 05            [ 1] 2752 	jreq 1$
      000FE1 03 05            [ 1] 2753 	cpl (SDIVSR,sp)
      000FE3 03 06            [ 1] 2754 	cpl (SQUOT,sp)
      000FE5 50               [ 2] 2755 	negw x
      000FE6 1F 07            [ 2] 2756 1$:	ldw (DIVISR,sp),x
                                   2757 ; check dividend sign 	 
      000FE8 7B 01            [ 1] 2758  	ld a,(DBLHI,sp) 
      000FEA A4 80            [ 1] 2759 	and a,#0x80 
      000FEC 27 0D            [ 1] 2760 	jreq 2$ 
      000FEE 03 06            [ 1] 2761 	cpl (SQUOT,sp)
      000FF0 1E 03            [ 2] 2762 	ldw x,(DBLLO,sp)
      000FF2 16 01            [ 2] 2763 	ldw y,(DBLHI,sp)
      000FF4 CD 0F B1         [ 4] 2764 	call dneg 
      000FF7 1F 03            [ 2] 2765 	ldw (DBLLO,sp),x 
      000FF9 17 01            [ 2] 2766 	ldw (DBLHI,sp),y 
      000FFB 1E 07            [ 2] 2767 2$:	ldw x,(DIVISR,sp)
      000FFD CD 0F 87         [ 4] 2768 	call udiv32_16
      001000 90 5D            [ 2] 2769 	tnzw y 
      001002 27 11            [ 1] 2770 	jreq 3$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2771 ; x=quotient 
                                   2772 ; y=remainder 
                                   2773 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      001004 7B 06            [ 1] 2774 	ld a,(SQUOT,sp)
      001006 18 05            [ 1] 2775 	xor a,(SDIVSR,sp)
      001008 27 0B            [ 1] 2776 	jreq 3$
      00100A 5C               [ 2] 2777 	incw x 
      00100B 90 CF 00 0C      [ 2] 2778 	ldw acc16,y 
      00100F 16 07            [ 2] 2779 	ldw y,(DIVISR,sp)
      001011 72 B2 00 0C      [ 2] 2780 	subw y,acc16
                                   2781 ; sign quotient
      001015 7B 06            [ 1] 2782 3$:	ld a,(SQUOT,sp)
      001017 27 01            [ 1] 2783 	jreq 4$
      001019 50               [ 2] 2784 	negw x 
      00101A                       2785 4$:	
      00101A                       2786 	_drop VSIZE 
      00101A 5B 08            [ 2]    1     addw sp,#VSIZE 
      00101C 81               [ 4] 2787 	ret 
                                   2788 
                                   2789 
                                   2790 
                                   2791 ;----------------------------------
                                   2792 ; division x/y 
                                   2793 ; input:
                                   2794 ;    X       dividend
                                   2795 ;    Y       divisor 
                                   2796 ; output:
                                   2797 ;    X       quotient
                                   2798 ;    Y       remainder 
                                   2799 ;-----------------------------------
                           000004  2800 	VSIZE=4 
                                   2801 	; local variables 
                           000001  2802 	DBLHI=1
                           000003  2803 	DBLLO=3
      00101D                       2804 divide: 
      00101D                       2805 	_vars VSIZE 
      00101D 52 04            [ 2]    1     sub sp,#VSIZE 
      00101F 90 CF 00 0C      [ 2] 2806 	ldw acc16,y
      001023 CD 0F BC         [ 4] 2807 	call dbl_sign_extend
      001026 1F 03            [ 2] 2808 	ldw (DBLLO,sp),x 
      001028 17 01            [ 2] 2809 	ldw (DBLHI,sp),y 
      00102A CE 00 0C         [ 2] 2810 	ldw x,acc16 
      00102D CD 0F C6         [ 4] 2811 	call div32_16 
      001030                       2812 	_drop VSIZE 
      001030 5B 04            [ 2]    1     addw sp,#VSIZE 
      001032 81               [ 4] 2813 	ret
                                   2814 
                                   2815 
                                   2816 ;----------------------------------
                                   2817 ;  remainder resulting from euclidian 
                                   2818 ;  division of x/y 
                                   2819 ; input:
                                   2820 ;   x   	dividend int16_t 
                                   2821 ;   y 		divisor int16_t
                                   2822 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2823 ;   X       n1%n2 
                                   2824 ;----------------------------------
      001033                       2825 modulo:
      001033 CD 10 1D         [ 4] 2826 	call divide
      001036 93               [ 1] 2827 	ldw x,y 
      001037 81               [ 4] 2828 	ret 
                                   2829 
                                   2830 ;----------------------------------
                                   2831 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   2832 ; return expr1*expr2/expr3 
                                   2833 ; product result is int32_t and 
                                   2834 ; divisiont is int32_t/int16_t
                                   2835 ;----------------------------------
                           000004  2836 	DBL_SIZE=4 
      001038                       2837 muldiv:
      001038 CD 10 E0         [ 4] 2838 	call func_args 
      00103B A1 03            [ 1] 2839 	cp a,#3 
      00103D 27 03            [ 1] 2840 	jreq 1$
      00103F CC 08 7E         [ 2] 2841 	jp syntax_error
      001042                       2842 1$: 
      001042 1E 05            [ 2] 2843 	ldw x,(5,sp) ; expr1
      001044 16 03            [ 2] 2844 	ldw y,(3,sp) ; expr2
      001046 CD 0F 64         [ 4] 2845 	call multiply 
      001049 1F 05            [ 2] 2846 	ldw (5,sp),x  ;int32_t 15..0
      00104B 17 03            [ 2] 2847 	ldw (3,sp),y  ;int32_t 31..16
      00104D 85               [ 2] 2848 	popw x        ; expr3 
      00104E CD 0F C6         [ 4] 2849 	call div32_16 ; int32_t/expr3 
      001051                       2850 	_drop DBL_SIZE
      001051 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      001053 81               [ 4] 2851 	ret 
                                   2852 
                                   2853 
                                   2854 ;----------------------------------
                                   2855 ; search in kword_dict name
                                   2856 ; from its execution address 
                                   2857 ; input:
                                   2858 ;   X       	execution address 
                                   2859 ; output:
                                   2860 ;   X 			cstr*  | 0 
                                   2861 ;--------------------------------
                           000001  2862 	XADR=1 
                           000003  2863 	LINK=3 
                           000004  2864 	VSIZE=4
      001054                       2865 cmd_name:
      001054                       2866 	_vars VSIZE 
      001054 52 04            [ 2]    1     sub sp,#VSIZE 
      001056 72 5F 00 0C      [ 1] 2867 	clr acc16 
      00105A 1F 01            [ 2] 2868 	ldw (XADR,sp),x  
      00105C AE 27 4A         [ 2] 2869 	ldw x,#kword_dict	
      00105F 1F 03            [ 2] 2870 1$:	ldw (LINK,sp),x
      001061 E6 02            [ 1] 2871 	ld a,(2,x)
      001063 A4 0F            [ 1] 2872 	and a,#15 
      001065 C7 00 0D         [ 1] 2873 	ld acc8,a 
      001068 1C 00 03         [ 2] 2874 	addw x,#3
      00106B 72 BB 00 0C      [ 2] 2875 	addw x,acc16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      00106F FE               [ 2] 2876 	ldw x,(x) ; execution address 
      001070 13 01            [ 2] 2877 	cpw x,(XADR,sp)
      001072 27 0A            [ 1] 2878 	jreq 2$
      001074 1E 03            [ 2] 2879 	ldw x,(LINK,sp)
      001076 FE               [ 2] 2880 	ldw x,(x) 
      001077 1D 00 02         [ 2] 2881 	subw x,#2  
      00107A 26 E3            [ 1] 2882 	jrne 1$
      00107C 20 05            [ 2] 2883 	jra 9$
      00107E 1E 03            [ 2] 2884 2$: ldw x,(LINK,sp)
      001080 1C 00 02         [ 2] 2885 	addw x,#2 	
      001083                       2886 9$:	_drop VSIZE
      001083 5B 04            [ 2]    1     addw sp,#VSIZE 
      001085 81               [ 4] 2887 	ret
                                   2888 
                                   2889 
                                   2890 ;---------------------------------
                                   2891 ; dictionary search 
                                   2892 ; input:
                                   2893 ;	X 		dictionary entry point, name field  
                                   2894 ;   y		.asciz name to search 
                                   2895 ; output:
                                   2896 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2897 ;  X		execution address | 0 
                                   2898 ;---------------------------------
                           000001  2899 	NLEN=1 ; cmd length 
                           000002  2900 	XSAVE=2
                           000004  2901 	YSAVE=4
                           000005  2902 	VSIZE=5 
      001086                       2903 search_dict:
      001086                       2904 	_vars VSIZE 
      001086 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2905 
      001088 17 04            [ 2] 2906 	ldw (YSAVE,sp),y 
      00108A                       2907 search_next:
      00108A 1F 02            [ 2] 2908 	ldw (XSAVE,sp),x 
                                   2909 ; get name length in dictionary	
      00108C F6               [ 1] 2910 	ld a,(x)
      00108D A4 0F            [ 1] 2911 	and a,#0xf 
      00108F 6B 01            [ 1] 2912 	ld (NLEN,sp),a  
      001091 16 04            [ 2] 2913 	ldw y,(YSAVE,sp) ; name pointer 
      001093 5C               [ 2] 2914 	incw x 
      001094                       2915 cp_loop:
      001094 90 F6            [ 1] 2916 	ld a,(y)
      001096 27 1B            [ 1] 2917 	jreq str_match 
      001098 0D 01            [ 1] 2918 	tnz (NLEN,sp)
      00109A 27 0A            [ 1] 2919 	jreq no_match  
      00109C F1               [ 1] 2920 	cp a,(x)
      00109D 26 07            [ 1] 2921 	jrne no_match 
      00109F 90 5C            [ 2] 2922 	incw y 
      0010A1 5C               [ 2] 2923 	incw x
      0010A2 0A 01            [ 1] 2924 	dec (NLEN,sp)
      0010A4 20 EE            [ 2] 2925 	jra cp_loop 
      0010A6                       2926 no_match:
      0010A6 1E 02            [ 2] 2927 	ldw x,(XSAVE,sp) 
      0010A8 1D 00 02         [ 2] 2928 	subw x,#2 ; move X to link field
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010AB 4B 00            [ 1] 2929 	push #TK_NONE 
      0010AD FE               [ 2] 2930 	ldw x,(x) ; next word link 
      0010AE 84               [ 1] 2931 	pop a ; TK_NONE 
      0010AF 27 1F            [ 1] 2932 	jreq search_exit  ; not found  
                                   2933 ;try next 
      0010B1 20 D7            [ 2] 2934 	jra search_next
      0010B3                       2935 str_match:
      0010B3 1E 02            [ 2] 2936 	ldw x,(XSAVE,sp)
      0010B5 F6               [ 1] 2937 	ld a,(X)
      0010B6 6B 01            [ 1] 2938 	ld (NLEN,sp),a ; needed to test keyword type  
      0010B8 A4 0F            [ 1] 2939 	and a,#0xf 
                                   2940 ; move x to procedure address field 	
      0010BA 4C               [ 1] 2941 	inc a 
      0010BB C7 00 0D         [ 1] 2942 	ld acc8,a 
      0010BE 72 5F 00 0C      [ 1] 2943 	clr acc16 
      0010C2 72 BB 00 0C      [ 2] 2944 	addw x,acc16 
      0010C6 FE               [ 2] 2945 	ldw x,(x) ; routine entry point 
                                   2946 ;determine keyword type bits 7:6 
      0010C7 7B 01            [ 1] 2947 	ld a,(NLEN,sp)
      0010C9 4E               [ 1] 2948 	swap a 
      0010CA A4 0C            [ 1] 2949 	and a,#0xc
      0010CC 44               [ 1] 2950 	srl a
      0010CD 44               [ 1] 2951 	srl a 
      0010CE AB 80            [ 1] 2952 	add a,#128
      0010D0                       2953 search_exit: 
      0010D0                       2954 	_drop VSIZE 	 
      0010D0 5B 05            [ 2]    1     addw sp,#VSIZE 
      0010D2 81               [ 4] 2955 	ret 
                                   2956 
                                   2957 ;---------------------
                                   2958 ; check if next token
                                   2959 ;  is of expected type 
                                   2960 ; input:
                                   2961 ;   A 		 expected token attribute
                                   2962 ;  ouput:
                                   2963 ;   none     if fail call syntax_error 
                                   2964 ;--------------------
      0010D3                       2965 expect:
      0010D3 88               [ 1] 2966 	push a 
      0010D4 CD 09 70         [ 4] 2967 	call next_token 
      0010D7 11 01            [ 1] 2968 	cp a,(1,sp)
      0010D9 27 03            [ 1] 2969 	jreq 1$
      0010DB CC 08 7E         [ 2] 2970 	jp syntax_error
      0010DE 84               [ 1] 2971 1$: pop a 
      0010DF 81               [ 4] 2972 	ret 
                                   2973 
                                   2974 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2975 ; parse arguments list 
                                   2976 ; between ()
                                   2977 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010E0                       2978 func_args:
      0010E0 A6 07            [ 1] 2979 	ld a,#TK_LPAREN 
      0010E2 CD 10 D3         [ 4] 2980 	call expect 
                                   2981 ; expected to continue in arg_list 
                                   2982 ; caller must check for TK_RPAREN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2983 
                                   2984 ;-------------------------------
                                   2985 ; parse embedded BASIC routines 
                                   2986 ; arguments list.
                                   2987 ; arg_list::=  rel[','rel]*
                                   2988 ; all arguments are of integer type
                                   2989 ; and pushed on stack 
                                   2990 ; input:
                                   2991 ;   none
                                   2992 ; output:
                                   2993 ;   stack{n}   arguments pushed on stack
                                   2994 ;   A 	number of arguments pushed on stack  
                                   2995 ;--------------------------------
      0010E5                       2996 arg_list:
      0010E5 4B 00            [ 1] 2997 	push #0  
      0010E7 CD 12 27         [ 4] 2998 1$: call relation
      0010EA A1 00            [ 1] 2999 	cp a,#TK_NONE 
      0010EC 27 20            [ 1] 3000 	jreq 5$
      0010EE A1 84            [ 1] 3001 	cp a,#TK_INTGR
      0010F0 26 13            [ 1] 3002 	jrne 4$
      0010F2                       3003 3$: 
                                   3004 ; swap return address with argument
      0010F2 84               [ 1] 3005 	pop a ; arg_count
      0010F3 90 85            [ 2] 3006 	popw y ; return address 
      0010F5 89               [ 2] 3007 	pushw x ; new argument 
      0010F6 90 89            [ 2] 3008 	pushw y 
      0010F8 4C               [ 1] 3009     inc a
      0010F9 88               [ 1] 3010 	push a 
      0010FA CD 09 70         [ 4] 3011 	call next_token 
      0010FD A1 09            [ 1] 3012 	cp a,#TK_COMMA 
      0010FF 27 E6            [ 1] 3013 	jreq 1$ 
      001101 A1 00            [ 1] 3014 	cp a,#TK_NONE 
      001103 27 09            [ 1] 3015 	jreq 5$ 
      001105 A1 08            [ 1] 3016 4$:	cp a,#TK_RPAREN 
      001107 27 05            [ 1] 3017 	jreq 5$
      001109                       3018 	_unget_token 
      001109 55 00 02 00 01   [ 1]    1     mov in,in.saved
      00110E 84               [ 1] 3019 5$:	pop a  
      00110F 81               [ 4] 3020 	ret 
                                   3021 
                                   3022 ;--------------------------------
                                   3023 ;   BASIC commnands 
                                   3024 ;--------------------------------
                                   3025 
                                   3026 ;--------------------------------
                                   3027 ;  arithmetic and relational 
                                   3028 ;  routines
                                   3029 ;  operators precedence
                                   3030 ;  highest to lowest
                                   3031 ;  operators on same row have 
                                   3032 ;  same precedence and are executed
                                   3033 ;  from left to right.
                                   3034 ;	'*','/','%'
                                   3035 ;   '-','+'
                                   3036 ;   '=','>','<','>=','<=','<>','><'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3037 ;   '<>' and '><' are equivalent for not equal.
                                   3038 ;--------------------------------
                                   3039 
                                   3040 ;---------------------
                                   3041 ; return array element
                                   3042 ; address from @(expr)
                                   3043 ; input:
                                   3044 ;   A 		TK_ARRAY
                                   3045 ; output:
                                   3046 ;   A 		TK_INTGR
                                   3047 ;	X 		element address 
                                   3048 ;----------------------
      001110                       3049 get_array_element:
      001110 CD 10 E0         [ 4] 3050 	call func_args 
      001113 A1 01            [ 1] 3051 	cp a,#1
      001115 27 03            [ 1] 3052 	jreq 1$
      001117 CC 08 7E         [ 2] 3053 	jp syntax_error
      00111A 85               [ 2] 3054 1$: popw x 
                                   3055 	; check for bounds 
      00111B C3 00 21         [ 2] 3056 	cpw x,array_size 
      00111E 23 05            [ 2] 3057 	jrule 3$
                                   3058 ; bounds {1..array_size}	
      001120 A6 0A            [ 1] 3059 2$: ld a,#ERR_BAD_VALUE 
      001122 CC 08 80         [ 2] 3060 	jp tb_error 
      001125 5D               [ 2] 3061 3$: tnzw  x
      001126 27 F8            [ 1] 3062 	jreq 2$ 
      001128 58               [ 2] 3063 	sllw x 
      001129 89               [ 2] 3064 	pushw x 
      00112A AE 16 90         [ 2] 3065 	ldw x,#tib
      00112D 72 F0 01         [ 2] 3066 	subw x,(1,sp)
      001130                       3067 	_drop 2   
      001130 5B 02            [ 2]    1     addw sp,#2 
      001132 A6 84            [ 1] 3068 	ld a,#TK_INTGR
      001134 81               [ 4] 3069 	ret 
                                   3070 
                                   3071 
                                   3072 ;***********************************
                                   3073 ;   expression parse,execute 
                                   3074 ;***********************************
                                   3075 ;-----------------------------------
                                   3076 ; factor ::= ['+'|'-'|e]  var | @ |
                                   3077 ;			 integer | function |
                                   3078 ;			 '('relation')' 
                                   3079 ; output:
                                   3080 ;   A    token attribute 
                                   3081 ;   X 	 integer
                                   3082 ; ---------------------------------
                           000001  3083 	NEG=1
                           000001  3084 	VSIZE=1
      001135                       3085 factor:
      001135                       3086 	_vars VSIZE 
      001135 52 01            [ 2]    1     sub sp,#VSIZE 
      001137 CD 09 70         [ 4] 3087 	call next_token
      00113A A1 02            [ 1] 3088 	cp a,#CMD_END 
      00113C 25 4E            [ 1] 3089 	jrult 20$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00113E 6B 01            [ 1] 3090 1$:	ld (NEG,sp),a 
      001140 A4 30            [ 1] 3091 	and a,#TK_GRP_MASK
      001142 A1 10            [ 1] 3092 	cp a,#TK_GRP_ADD 
      001144 27 04            [ 1] 3093 	jreq 2$
      001146 7B 01            [ 1] 3094 	ld a,(NEG,sp)
      001148 20 03            [ 2] 3095 	jra 4$  
      00114A                       3096 2$:	
      00114A CD 09 70         [ 4] 3097 	call next_token 
      00114D                       3098 4$:	
      00114D A1 81            [ 1] 3099 	cp a,#TK_IFUNC 
      00114F 26 03            [ 1] 3100 	jrne 5$ 
      001151 FD               [ 4] 3101 	call (x) 
      001152 20 2F            [ 2] 3102 	jra 18$ 
      001154                       3103 5$:
      001154 A1 84            [ 1] 3104 	cp a,#TK_INTGR
      001156 26 02            [ 1] 3105 	jrne 6$
      001158 20 29            [ 2] 3106 	jra 18$
      00115A                       3107 6$:
      00115A A1 06            [ 1] 3108 	cp a,#TK_ARRAY
      00115C 26 06            [ 1] 3109 	jrne 10$
      00115E CD 11 10         [ 4] 3110 	call get_array_element
      001161 FE               [ 2] 3111 	ldw x,(x)
      001162 20 1F            [ 2] 3112 	jra 18$ 
      001164                       3113 10$:
      001164 A1 85            [ 1] 3114 	cp a,#TK_VAR 
      001166 26 03            [ 1] 3115 	jrne 12$
      001168 FE               [ 2] 3116 	ldw x,(x)
      001169 20 18            [ 2] 3117 	jra 18$
      00116B                       3118 12$:			
      00116B A1 07            [ 1] 3119 	cp a,#TK_LPAREN
      00116D 26 0C            [ 1] 3120 	jrne 16$
      00116F CD 12 27         [ 4] 3121 	call relation
      001172 89               [ 2] 3122 	pushw x 
      001173 A6 08            [ 1] 3123 	ld a,#TK_RPAREN 
      001175 CD 10 D3         [ 4] 3124 	call expect
      001178 85               [ 2] 3125 	popw x 
      001179 20 08            [ 2] 3126 	jra 18$	
      00117B                       3127 16$:
      00117B                       3128 	_unget_token
      00117B 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001180 4F               [ 1] 3129 	clr a 
      001181 20 09            [ 2] 3130 	jra 20$ 
      001183                       3131 18$: 
      001183 A6 11            [ 1] 3132 	ld a,#TK_MINUS 
      001185 11 01            [ 1] 3133 	cp a,(NEG,sp)
      001187 26 01            [ 1] 3134 	jrne 19$
      001189 50               [ 2] 3135 	negw x
      00118A                       3136 19$:
      00118A A6 84            [ 1] 3137 	ld a,#TK_INTGR
      00118C                       3138 20$:
      00118C                       3139 	_drop VSIZE
      00118C 5B 01            [ 2]    1     addw sp,#VSIZE 
      00118E 81               [ 4] 3140 	ret
                                   3141 
                                   3142 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3143 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3144 ; output:
                                   3145 ;   A    	token attribute 
                                   3146 ;	X		integer
                                   3147 ;-----------------------------------
                           000001  3148 	N1=1   ; int16_t
                           000003  3149 	MULOP=3
                           000003  3150 	VSIZE=3
      00118F                       3151 term:
      00118F                       3152 	_vars VSIZE
      00118F 52 03            [ 2]    1     sub sp,#VSIZE 
      001191 CD 11 35         [ 4] 3153 	call factor
      001194 A1 02            [ 1] 3154 	cp a,#CMD_END
      001196 25 43            [ 1] 3155 	jrult term_exit
      001198                       3156 term01:	 ; check for  operator 
      001198 1F 01            [ 2] 3157 	ldw (N1,sp),x  ; save first factor 
      00119A CD 09 70         [ 4] 3158 	call next_token
      00119D A1 02            [ 1] 3159 	cp a,#CMD_END
      00119F 25 36            [ 1] 3160 	jrult 9$
      0011A1 6B 03            [ 1] 3161 0$:	ld (MULOP,sp),a
      0011A3 A4 30            [ 1] 3162 	and a,#TK_GRP_MASK
      0011A5 A1 20            [ 1] 3163 	cp a,#TK_GRP_MULT
      0011A7 27 07            [ 1] 3164 	jreq 1$
      0011A9                       3165 	_unget_token 
      0011A9 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0011AE 20 27            [ 2] 3166 	jra 9$
      0011B0                       3167 1$:	; got *|/|%
      0011B0 CD 11 35         [ 4] 3168 	call factor
      0011B3 A1 84            [ 1] 3169 	cp a,#TK_INTGR
      0011B5 27 03            [ 1] 3170 	jreq 2$ 
      0011B7 CC 08 7E         [ 2] 3171 	jp syntax_error
      0011BA 90 93            [ 1] 3172 2$:	ldw y,x 
      0011BC 1E 01            [ 2] 3173 	ldw x,(N1,sp)
      0011BE 7B 03            [ 1] 3174 	ld a,(MULOP,sp) 
      0011C0 A1 20            [ 1] 3175 	cp a,#TK_MULT 
      0011C2 26 05            [ 1] 3176 	jrne 3$
      0011C4 CD 0F 64         [ 4] 3177 	call multiply 
      0011C7 20 CF            [ 2] 3178 	jra term01
      0011C9 A1 21            [ 1] 3179 3$: cp a,#TK_DIV 
      0011CB 26 05            [ 1] 3180 	jrne 4$ 
      0011CD CD 10 1D         [ 4] 3181 	call divide 
      0011D0 20 C6            [ 2] 3182 	jra term01 
      0011D2 CD 10 33         [ 4] 3183 4$: call modulo
      0011D5 20 C1            [ 2] 3184 	jra term01 
      0011D7 1E 01            [ 2] 3185 9$: ldw x,(N1,sp)
      0011D9 A6 84            [ 1] 3186 	ld a,#TK_INTGR 	
      0011DB                       3187 term_exit:
      0011DB                       3188 	_drop VSIZE 
      0011DB 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011DD 81               [ 4] 3189 	ret 
                                   3190 
                                   3191 ;-------------------------------
                                   3192 ;  expr ::= term [['+'|'-'] term]*
                                   3193 ;  result range {-32768..32767}
                                   3194 ;  output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3195 ;   A    token attribute 
                                   3196 ;   X	 integer   
                                   3197 ;-------------------------------
                           000001  3198 	N1=1 
                           000003  3199 	OP=3 
                           000003  3200 	VSIZE=3 
      0011DE                       3201 expression:
      0011DE                       3202 	_vars VSIZE 
      0011DE 52 03            [ 2]    1     sub sp,#VSIZE 
      0011E0 CD 11 8F         [ 4] 3203 	call term
      0011E3 A1 02            [ 1] 3204 	cp a,#CMD_END 
      0011E5 25 3D            [ 1] 3205 	jrult expr_exit 
      0011E7 1F 01            [ 2] 3206 0$:	ldw (N1,sp),x 
      0011E9 CD 09 70         [ 4] 3207 	call next_token
      0011EC A1 02            [ 1] 3208 	cp a,#CMD_END 
      0011EE 25 30            [ 1] 3209 	jrult 9$ 
      0011F0 6B 03            [ 1] 3210 1$:	ld (OP,sp),a  
      0011F2 A4 30            [ 1] 3211 	and a,#TK_GRP_MASK
      0011F4 A1 10            [ 1] 3212 	cp a,#TK_GRP_ADD 
      0011F6 27 07            [ 1] 3213 	jreq 2$ 
      0011F8                       3214 	_unget_token
      0011F8 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0011FD 20 21            [ 2] 3215 	jra 9$
      0011FF                       3216 2$: 
      0011FF CD 11 8F         [ 4] 3217 	call term
      001202 A1 84            [ 1] 3218 	cp a,#TK_INTGR 
      001204 27 03            [ 1] 3219 	jreq 3$
      001206 CC 08 7E         [ 2] 3220 	jp syntax_error
      001209 CF 00 0C         [ 2] 3221 3$:	ldw acc16,x 
      00120C 1E 01            [ 2] 3222 	ldw x,(N1,sp)
      00120E 7B 03            [ 1] 3223 	ld a,(OP,sp)
      001210 A1 10            [ 1] 3224 	cp a,#TK_PLUS 
      001212 26 06            [ 1] 3225 	jrne 4$
      001214 72 BB 00 0C      [ 2] 3226 	addw x,acc16
      001218 20 CD            [ 2] 3227 	jra 0$ 
      00121A 72 B0 00 0C      [ 2] 3228 4$:	subw x,acc16
      00121E 20 C7            [ 2] 3229 	jra 0$
      001220 1E 01            [ 2] 3230 9$: ldw x,(N1,sp)
      001222 A6 84            [ 1] 3231 	ld a,#TK_INTGR	
      001224                       3232 expr_exit:
      001224                       3233 	_drop VSIZE 
      001224 5B 03            [ 2]    1     addw sp,#VSIZE 
      001226 81               [ 4] 3234 	ret 
                                   3235 
                                   3236 ;---------------------------------------------
                                   3237 ; rel ::= expr rel_op expr
                                   3238 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3239 ;  relation return  integer , zero is false 
                                   3240 ;  output:
                                   3241 ;    A 		token attribute  
                                   3242 ;	 X		integer 
                                   3243 ;---------------------------------------------
                           000001  3244 	N1=1
                           000003  3245 	RELOP=3
                           000003  3246 	VSIZE=3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001227                       3247 relation: 
      001227                       3248 	_vars VSIZE
      001227 52 03            [ 2]    1     sub sp,#VSIZE 
      001229 CD 11 DE         [ 4] 3249 	call expression
      00122C A1 02            [ 1] 3250 	cp a,#CMD_END  
      00122E 25 4F            [ 1] 3251 	jrult rel_exit 
                                   3252 	; expect rel_op or leave 
      001230 1F 01            [ 2] 3253 	ldw (N1,sp),x 
      001232 CD 09 70         [ 4] 3254 	call next_token 
      001235 A1 02            [ 1] 3255 	cp a,#CMD_END 
      001237 25 42            [ 1] 3256 	jrult 9$
      001239                       3257 1$:	
      001239 6B 03            [ 1] 3258 	ld (RELOP,sp),a 
      00123B A4 30            [ 1] 3259 	and a,#TK_GRP_MASK
      00123D A1 30            [ 1] 3260 	cp a,#TK_GRP_RELOP 
      00123F 27 07            [ 1] 3261 	jreq 2$
      001241                       3262 	_unget_token  
      001241 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001246 20 33            [ 2] 3263 	jra 9$
      001248                       3264 2$:	; expect another expression or error 
      001248 CD 11 DE         [ 4] 3265 	call expression
      00124B A1 84            [ 1] 3266 	cp a,#TK_INTGR 
      00124D 27 03            [ 1] 3267 	jreq 3$
      00124F CC 08 7E         [ 2] 3268 	jp syntax_error 
      001252 CF 00 0C         [ 2] 3269 3$:	ldw acc16,x 
      001255 1E 01            [ 2] 3270 	ldw x,(N1,sp) 
      001257 72 B0 00 0C      [ 2] 3271 	subw x,acc16
      00125B 26 06            [ 1] 3272 	jrne 4$
      00125D 35 02 00 0D      [ 1] 3273 	mov acc8,#2 ; n1==n2
      001261 20 0C            [ 2] 3274 	jra 6$ 
      001263                       3275 4$: 
      001263 2C 06            [ 1] 3276 	jrsgt 5$  
      001265 35 04 00 0D      [ 1] 3277 	mov acc8,#4 ; n1<2 
      001269 20 04            [ 2] 3278 	jra 6$
      00126B                       3279 5$:
      00126B 35 01 00 0D      [ 1] 3280 	mov acc8,#1 ; n1>n2 
      00126F                       3281 6$:
      00126F 5F               [ 1] 3282 	clrw x 
      001270 C6 00 0D         [ 1] 3283 	ld a, acc8  
      001273 14 03            [ 1] 3284 	and a,(RELOP,sp)
      001275 4D               [ 1] 3285 	tnz a 
      001276 27 05            [ 1] 3286 	jreq 10$
      001278 5C               [ 2] 3287 	incw x 
      001279                       3288 7$:	 
      001279 20 02            [ 2] 3289 	jra 10$  	
      00127B 1E 01            [ 2] 3290 9$: ldw x,(N1,sp)
      00127D                       3291 10$:
      00127D A6 84            [ 1] 3292 	ld a,#TK_INTGR
      00127F                       3293 rel_exit: 	 
      00127F                       3294 	_drop VSIZE
      00127F 5B 03            [ 2]    1     addw sp,#VSIZE 
      001281 81               [ 4] 3295 	ret 
                                   3296 
                                   3297 ;--------------------------------
                                   3298 ; BASIC: SHOW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3299 ; print stack content in hexadecimal bytes 
                                   3300 ; 16 bytes per row 
                                   3301 ;--------------------------------
      001282                       3302 show:
      001282 AE 12 9C         [ 2] 3303 	ldw x,#cstk_prompt
      001285 CD 02 B3         [ 4] 3304 	call puts 
      001288 96               [ 1] 3305 	ldw x,sp 
      001289 1C 00 03         [ 2] 3306 	addw x,#3 ; ignore return address
      00128C 90 AE 18 00      [ 2] 3307 	ldw y,#RAM_SIZE  
      001290 CF 00 0C         [ 2] 3308 	ldw acc16,x 
      001293 72 B2 00 0C      [ 2] 3309 	subw y,acc16
      001297 CD 03 55         [ 4] 3310 	call hex_dump
      00129A 4F               [ 1] 3311 	clr a 
      00129B 81               [ 4] 3312 	ret
                                   3313 
      00129C 0A 63 6F 6E 74 65 6E  3314 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   3315 
                                   3316 
                                   3317 ;--------------------------------------------
                                   3318 ; BASIC: HEX 
                                   3319 ; select hexadecimal base for integer print
                                   3320 ;---------------------------------------------
      0012C3                       3321 hex_base:
      0012C3 35 10 00 0A      [ 1] 3322 	mov base,#16 
      0012C7 81               [ 4] 3323 	ret 
                                   3324 
                                   3325 ;--------------------------------------------
                                   3326 ; BASIC: DEC 
                                   3327 ; select decimal base for integer print
                                   3328 ;---------------------------------------------
      0012C8                       3329 dec_base:
      0012C8 35 0A 00 0A      [ 1] 3330 	mov base,#10
      0012CC 81               [ 4] 3331 	ret 
                                   3332 
                                   3333 ;------------------------
                                   3334 ; BASIC: SIZE 
                                   3335 ; return free size in text area
                                   3336 ; output:
                                   3337 ;   A 		TK_INTGR
                                   3338 ;   X 	    size integer
                                   3339 ;--------------------------
      0012CD                       3340 size:
      0012CD AE 16 90         [ 2] 3341 	ldw x,#tib 
      0012D0 72 B0 00 1E      [ 2] 3342 	subw x,txtend 
      0012D4 A6 84            [ 1] 3343 	ld a,#TK_INTGR
      0012D6 81               [ 4] 3344 	ret 
                                   3345 
                                   3346 
                                   3347 ;------------------------
                                   3348 ; BASIC: UBOUND  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                   3349 ; return array variable size 
                                   3350 ; output:
                                   3351 ;   A 		TK_INTGR
                                   3352 ;   X 	    array size 
                                   3353 ;--------------------------
      0012D7                       3354 ubound:
      0012D7 AE 16 90         [ 2] 3355 	ldw x,#tib
      0012DA 72 B0 00 1E      [ 2] 3356 	subw x,txtend 
      0012DE 90 CE 00 04      [ 2] 3357 	ldw y,basicptr 
      0012E2 90 C3 00 1E      [ 2] 3358 	cpw y,txtend 
      0012E6 25 0A            [ 1] 3359 	jrult 1$
      0012E8 3B 00 03         [ 1] 3360 	push count 
      0012EB 4B 00            [ 1] 3361 	push #0 
      0012ED 72 F0 01         [ 2] 3362 	subw x,(1,sp)
      0012F0                       3363 	_drop 2 
      0012F0 5B 02            [ 2]    1     addw sp,#2 
      0012F2 54               [ 2] 3364 1$:	srlw x 
      0012F3 CF 00 21         [ 2] 3365 	ldw array_size,x
      0012F6 A6 84            [ 1] 3366 	ld a,#TK_INTGR
      0012F8 81               [ 4] 3367 	ret 
                                   3368 
                                   3369 ;-----------------------------
                                   3370 ; BASIC: LET var=expr 
                                   3371 ; variable assignement 
                                   3372 ; output:
                                   3373 ;   A 		TK_NONE 
                                   3374 ;-----------------------------
      0012F9                       3375 let:
      0012F9 CD 09 70         [ 4] 3376 	call next_token 
      0012FC A1 85            [ 1] 3377 	cp a,#TK_VAR 
      0012FE 27 0A            [ 1] 3378 	jreq let_var
      001300 A1 06            [ 1] 3379 	cp a,#TK_ARRAY 
      001302 27 03            [ 1] 3380 	jreq  let_array
      001304 CC 08 7E         [ 2] 3381 	jp syntax_error
      001307                       3382 let_array:
      001307 CD 11 10         [ 4] 3383 	call get_array_element
      00130A                       3384 let_var:
      00130A 89               [ 2] 3385 	pushw x  
      00130B CD 09 70         [ 4] 3386 	call next_token 
      00130E A1 32            [ 1] 3387 	cp a,#TK_EQUAL
      001310 27 03            [ 1] 3388 	jreq 1$
      001312 CC 08 7E         [ 2] 3389 	jp syntax_error
      001315                       3390 1$:	
      001315 CD 12 27         [ 4] 3391 	call relation   
      001318 A1 84            [ 1] 3392 	cp a,#TK_INTGR 
      00131A 27 03            [ 1] 3393 	jreq 2$
      00131C CC 08 7E         [ 2] 3394 	jp syntax_error
      00131F                       3395 2$:	
      00131F 90 93            [ 1] 3396 	ldw y,x 
      001321 85               [ 2] 3397 	popw x   
      001322 FF               [ 2] 3398 	ldw (x),y   
      001323 81               [ 4] 3399 	ret 
                                   3400 
                                   3401 ;----------------------------
                                   3402 ; BASIC: LIST [[start][,end]]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3403 ; list program lines 
                                   3404 ; form start to end 
                                   3405 ; if empty argument list then 
                                   3406 ; list all.
                                   3407 ;----------------------------
                           000001  3408 	FIRST=1
                           000003  3409 	LAST=3 
                           000005  3410 	LN_PTR=5
                           000006  3411 	VSIZE=6 
      001324                       3412 list:
      001324 CE 00 1C         [ 2] 3413 	ldw x,txtbgn 
      001327 C3 00 1E         [ 2] 3414 	cpw x,txtend 
      00132A 2B 01            [ 1] 3415 	jrmi 1$
      00132C 81               [ 4] 3416 	ret 
      00132D                       3417 1$:	
      00132D                       3418 	_vars VSIZE
      00132D 52 06            [ 2]    1     sub sp,#VSIZE 
      00132F 1F 05            [ 2] 3419 	ldw (LN_PTR,sp),x 
      001331 FE               [ 2] 3420 	ldw x,(x) 
      001332 1F 01            [ 2] 3421 	ldw (FIRST,sp),x ; list from first line 
      001334 AE 7F FF         [ 2] 3422 	ldw x,#MAX_LINENO ; biggest line number 
      001337 1F 03            [ 2] 3423 	ldw (LAST,sp),x 
      001339 CD 10 E5         [ 4] 3424 	call arg_list
      00133C 4D               [ 1] 3425 	tnz a
      00133D 27 31            [ 1] 3426 	jreq list_loop 
      00133F A1 02            [ 1] 3427 	cp a,#2 
      001341 27 07            [ 1] 3428 	jreq 4$
      001343 A1 01            [ 1] 3429 	cp a,#1 
      001345 27 06            [ 1] 3430 	jreq first_line 
      001347 CC 08 7E         [ 2] 3431 	jp syntax_error 
      00134A 85               [ 2] 3432 4$:	popw x 
      00134B 1F 05            [ 2] 3433 	ldw (LAST+2,sp),x 
      00134D                       3434 first_line:
      00134D 85               [ 2] 3435 	popw x
      00134E 1F 01            [ 2] 3436 	ldw (FIRST,sp),x 
      001350                       3437 lines_skip:
      001350 CE 00 1C         [ 2] 3438 	ldw x,txtbgn
      001353 1F 05            [ 2] 3439 2$:	ldw (LN_PTR,sp),x 
      001355 C3 00 1E         [ 2] 3440 	cpw x,txtend 
      001358 2A 38            [ 1] 3441 	jrpl list_exit 
      00135A FE               [ 2] 3442 	ldw x,(x) ;line# 
      00135B 13 01            [ 2] 3443 	cpw x,(FIRST,sp)
      00135D 2A 11            [ 1] 3444 	jrpl list_loop 
      00135F 1E 05            [ 2] 3445 	ldw x,(LN_PTR,sp) 
      001361 E6 02            [ 1] 3446 	ld a,(2,x)
      001363 C7 00 0D         [ 1] 3447 	ld acc8,a 
      001366 72 5F 00 0C      [ 1] 3448 	clr acc16 
      00136A 72 BB 00 0C      [ 2] 3449 	addw x,acc16
      00136E 20 E3            [ 2] 3450 	jra 2$ 
                                   3451 ; print loop
      001370                       3452 list_loop:
      001370 1E 05            [ 2] 3453 	ldw x,(LN_PTR,sp)
      001372 E6 02            [ 1] 3454 	ld a,(2,x) 
      001374 CD 15 80         [ 4] 3455 	call prt_basic_line
      001377 1E 05            [ 2] 3456 	ldw x,(LN_PTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001379 E6 02            [ 1] 3457 	ld a,(2,x)
      00137B C7 00 0D         [ 1] 3458 	ld acc8,a 
      00137E 72 5F 00 0C      [ 1] 3459 	clr acc16 
      001382 72 BB 00 0C      [ 2] 3460 	addw x,acc16
      001386 C3 00 1E         [ 2] 3461 	cpw x,txtend 
      001389 2A 07            [ 1] 3462 	jrpl list_exit
      00138B 1F 05            [ 2] 3463 	ldw (LN_PTR,sp),x
      00138D FE               [ 2] 3464 	ldw x,(x)
      00138E 13 03            [ 2] 3465 	cpw x,(LAST,sp)  
      001390 2F DE            [ 1] 3466 	jrslt list_loop
      001392                       3467 list_exit:
      001392 55 00 03 00 01   [ 1] 3468 	mov in,count 
      001397 AE 16 E0         [ 2] 3469 	ldw x,#pad 
      00139A CF 00 04         [ 2] 3470 	ldw basicptr,x 
      00139D                       3471 	_drop VSIZE 
      00139D 5B 06            [ 2]    1     addw sp,#VSIZE 
      00139F 81               [ 4] 3472 	ret
                                   3473 
                                   3474 ;-------------------------
                                   3475 ; copy command name to buffer  
                                   3476 ; input:
                                   3477 ;   X 	name address 
                                   3478 ;   Y   destination buffer 
                                   3479 ; output:
                                   3480 ;   Y   point after name  
                                   3481 ;--------------------------
      0013A0                       3482 cpy_cmd_name:
      0013A0 F6               [ 1] 3483 	ld a,(x)
      0013A1 5C               [ 2] 3484 	incw x
      0013A2 A4 0F            [ 1] 3485 	and a,#15  
      0013A4 88               [ 1] 3486 	push a 
      0013A5 0D 01            [ 1] 3487     tnz (1,sp) 
      0013A7 27 0A            [ 1] 3488 	jreq 9$
      0013A9 F6               [ 1] 3489 1$:	ld a,(x)
      0013AA 90 F7            [ 1] 3490 	ld (y),a  
      0013AC 5C               [ 2] 3491 	incw x
      0013AD 90 5C            [ 2] 3492 	incw y 
      0013AF 0A 01            [ 1] 3493 	dec (1,sp)	 
      0013B1 26 F6            [ 1] 3494 	jrne 1$
      0013B3 84               [ 1] 3495 9$: pop a 
      0013B4 81               [ 4] 3496 	ret	
                                   3497 
                                   3498 ;--------------------------
                                   3499 ; add a space after letter or 
                                   3500 ; digit.
                                   3501 ; input:
                                   3502 ;   Y     pointer to buffer 
                                   3503 ; output:
                                   3504 ;   Y    moved to end 
                                   3505 ;--------------------------
      0013B5                       3506 add_space:
      0013B5 90 5A            [ 2] 3507 	decw y 
      0013B7 90 F6            [ 1] 3508 	ld a,(y)
      0013B9 90 5C            [ 2] 3509 	incw y
      0013BB CD 05 85         [ 4] 3510 	call is_alnum 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013BE 24 06            [ 1] 3511 	jrnc 1$
      0013C0 A6 20            [ 1] 3512 	ld a,#SPACE 
      0013C2 90 F7            [ 1] 3513 	ld (y),a 
      0013C4 90 5C            [ 2] 3514 	incw y 
      0013C6 81               [ 4] 3515 1$: ret 
                                   3516 
                                   3517 ;--------------------------
                                   3518 ;  align text in buffer 
                                   3519 ;  to tab_width padding 
                                   3520 ;  left with  SPACE 
                                   3521 ; input:
                                   3522 ;   X      str*
                                   3523 ;   A      str_length 
                                   3524 ; output:
                                   3525 ;   X      ajusted
                                   3526 ;--------------------------
      0013C7                       3527 right_align:
      0013C7 88               [ 1] 3528 	push a 
      0013C8 7B 01            [ 1] 3529 0$: ld a,(1,sp)
      0013CA C1 00 24         [ 1] 3530 	cp a,tab_width 
      0013CD 2A 08            [ 1] 3531 	jrpl 1$
      0013CF A6 20            [ 1] 3532 	ld a,#SPACE 
      0013D1 5A               [ 2] 3533 	decw x
      0013D2 F7               [ 1] 3534 	ld (x),a  
      0013D3 0C 01            [ 1] 3535 	inc (1,sp)
      0013D5 20 F1            [ 2] 3536 	jra 0$ 
      0013D7 84               [ 1] 3537 1$: pop a 	
      0013D8 81               [ 4] 3538 	ret 
                                   3539 
                                   3540 ;--------------------------
                                   3541 ; print TK_QSTR
                                   3542 ; converting control character
                                   3543 ; to backslash sequence
                                   3544 ; input:
                                   3545 ;   X        char *
                                   3546 ;   Y        dest. buffer 
                                   3547 ; output:
                                   3548 ;   X        moved forward 
                                   3549 ;   Y        moved forward 
                                   3550 ;-----------------------------
      0013D9                       3551 cpy_quote:
      0013D9 A6 22            [ 1] 3552 	ld a,#'"
      0013DB 90 F7            [ 1] 3553 	ld (y),a 
      0013DD 90 5C            [ 2] 3554 	incw y 
      0013DF F6               [ 1] 3555 1$:	ld a,(x)
      0013E0 27 30            [ 1] 3556 	jreq 9$
      0013E2 5C               [ 2] 3557 	incw x 
      0013E3 A1 20            [ 1] 3558 	cp a,#SPACE 
      0013E5 25 0E            [ 1] 3559 	jrult 3$
      0013E7 90 F7            [ 1] 3560 	ld (y),a
      0013E9 90 5C            [ 2] 3561 	incw y 
      0013EB A1 5C            [ 1] 3562 	cp a,#'\ 
      0013ED 26 F0            [ 1] 3563 	jrne 1$ 
      0013EF                       3564 2$:
      0013EF 90 F7            [ 1] 3565 	ld (y),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0013F1 90 5C            [ 2] 3566 	incw y  
      0013F3 20 EA            [ 2] 3567 	jra 1$
      0013F5 88               [ 1] 3568 3$: push a 
      0013F6 A6 5C            [ 1] 3569 	ld a,#'\
      0013F8 90 F7            [ 1] 3570 	ld (y),a 
      0013FA 90 5C            [ 2] 3571 	incw y  
      0013FC 84               [ 1] 3572 	pop a 
      0013FD A0 07            [ 1] 3573 	sub a,#7
      0013FF C7 00 0D         [ 1] 3574 	ld acc8,a 
      001402 72 5F 00 0C      [ 1] 3575 	clr acc16
      001406 89               [ 2] 3576 	pushw x
      001407 AE 0B E1         [ 2] 3577 	ldw x,#escaped 
      00140A 72 BB 00 0C      [ 2] 3578 	addw x,acc16 
      00140E F6               [ 1] 3579 	ld a,(x)
      00140F 85               [ 2] 3580 	popw x
      001410 20 DD            [ 2] 3581 	jra 2$
      001412 A6 22            [ 1] 3582 9$: ld a,#'"
      001414 90 F7            [ 1] 3583 	ld (y),a 
      001416 90 5C            [ 2] 3584 	incw y  
      001418 5C               [ 2] 3585 	incw x 
      001419 81               [ 4] 3586 	ret
                                   3587 
                                   3588 ;--------------------------
                                   3589 ; return variable name 
                                   3590 ; from its address.
                                   3591 ; input:
                                   3592 ;   X    variable address
                                   3593 ; output:
                                   3594 ;   A     variable letter
                                   3595 ;--------------------------
      00141A                       3596 var_name:
      00141A 1D 00 26         [ 2] 3597 		subw x,#vars 
      00141D 9F               [ 1] 3598 		ld a,xl 
      00141E 44               [ 1] 3599 		srl a 
      00141F AB 41            [ 1] 3600 		add a,#'A 
      001421 81               [ 4] 3601 		ret 
                                   3602 
                                   3603 
                                   3604 ;-------------------------------------
                                   3605 ; decompile tokens list 
                                   3606 ; to original text line 
                                   3607 ; input:
                                   3608 ;   [basicptr]  pointer at line 
                                   3609 ;   Y           destination buffer
                                   3610 ; output:
                                   3611 ;   A           length 
                                   3612 ;   Y           after string  
                                   3613 ;------------------------------------
                           000001  3614 	BASE_SAV=1
                           000002  3615 	WIDTH_SAV=2
                           000003  3616 	STR=3
                           000004  3617 	VSIZE=4 
      001422                       3618 decompile:
      001422                       3619 	_vars VSIZE
      001422 52 04            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001424 C6 00 0A         [ 1] 3620 	ld a,base
      001427 6B 01            [ 1] 3621 	ld (BASE_SAV,sp),a  
      001429 C6 00 24         [ 1] 3622 	ld a,tab_width 
      00142C 6B 02            [ 1] 3623 	ld (WIDTH_SAV,sp),a 
      00142E 17 03            [ 2] 3624 	ldw (STR,sp),y   
      001430 72 CE 00 04      [ 5] 3625 	ldw x,[basicptr] ; line number 
      001434 35 0A 00 0A      [ 1] 3626 	mov base,#10
      001438 35 05 00 24      [ 1] 3627 	mov tab_width,#5
      00143C 72 5F 00 0B      [ 1] 3628 	clr acc24 
      001440 CF 00 0C         [ 2] 3629 	ldw acc16,x
      001443 CD 09 E1         [ 4] 3630 	call itoa  
      001446 CD 13 C7         [ 4] 3631 	call right_align 
      001449 88               [ 1] 3632 	push a 
      00144A 90 93            [ 1] 3633 1$:	ldw y,x ; source
      00144C 1E 04            [ 2] 3634 	ldw x,(STR+1,sp) ; destination
      00144E CD 03 B0         [ 4] 3635 	call strcpy 
      001451 90 5F            [ 1] 3636 	clrw y 
      001453 84               [ 1] 3637 	pop a 
      001454 90 97            [ 1] 3638 	ld yl,a 
      001456 72 F9 03         [ 2] 3639 	addw y,(STR,sp)
      001459 A6 20            [ 1] 3640 	ld a,#SPACE 
      00145B 90 F7            [ 1] 3641 	ld (y),a 
      00145D 90 5C            [ 2] 3642 	incw y 
      00145F 72 5F 00 24      [ 1] 3643 	clr tab_width
      001463 AE 00 03         [ 2] 3644 	ldw x,#3
      001466 CF 00 00         [ 2] 3645 	ldw in.w,x 
      001469                       3646 decomp_loop:
      001469 90 89            [ 2] 3647 	pushw y
      00146B CD 09 70         [ 4] 3648 	call next_token 
      00146E 90 85            [ 2] 3649 	popw y 
      001470 4D               [ 1] 3650 	tnz a  
      001471 26 03            [ 1] 3651 	jrne 1$
      001473 CC 15 45         [ 2] 3652 	jp 20$
      001476 2A 65            [ 1] 3653 1$:	jrpl 6$
                                   3654 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      001478 A1 85            [ 1] 3655 	cp a,#TK_VAR 
      00147A 26 0C            [ 1] 3656 	jrne 3$
                                   3657 ;; TK_VAR 
      00147C CD 13 B5         [ 4] 3658 	call add_space  
      00147F CD 14 1A         [ 4] 3659 	call var_name
      001482 90 F7            [ 1] 3660 	ld (y),a 
      001484 90 5C            [ 2] 3661 	incw y  
      001486 20 E1            [ 2] 3662 	jra decomp_loop
      001488                       3663 3$:
      001488 A1 84            [ 1] 3664 	cp a,#TK_INTGR
      00148A 26 22            [ 1] 3665 	jrne 4$
                                   3666 ;; TK_INTGR
      00148C CD 13 B5         [ 4] 3667 	call add_space
      00148F 72 5F 00 0B      [ 1] 3668 	clr acc24 
      001493 CF 00 0C         [ 2] 3669 	ldw acc16,x 
      001496 90 89            [ 2] 3670 	pushw y 
      001498 CD 09 E1         [ 4] 3671 	call itoa  
      00149B 16 01            [ 2] 3672 	ldw y,(1,sp) 
      00149D 88               [ 1] 3673 	push a 
      00149E 51               [ 1] 3674 	exgw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00149F CD 03 B0         [ 4] 3675 	call strcpy 
      0014A2 90 5F            [ 1] 3676 	clrw y
      0014A4 84               [ 1] 3677 	pop a  
      0014A5 90 97            [ 1] 3678 	ld yl,a 
      0014A7 72 F9 01         [ 2] 3679 	addw y,(1,sp)
      0014AA                       3680 	_drop 2 
      0014AA 5B 02            [ 2]    1     addw sp,#2 
      0014AC 20 BB            [ 2] 3681 	jra decomp_loop
                                   3682 ;; dictionary keyword 
      0014AE                       3683 4$:	
      0014AE A3 16 9D         [ 2] 3684 	cpw x,#remark 
      0014B1 26 1B            [ 1] 3685 	jrne 5$
      0014B3 CE 00 04         [ 2] 3686 	ldw x,basicptr 
      0014B6 72 BB 00 00      [ 2] 3687 	addw x,in.w 
                                   3688 ; copy comment to buffer 
      0014BA CD 13 B5         [ 4] 3689 	call add_space
      0014BD A6 27            [ 1] 3690 	ld a,#''
      0014BF 90 F7            [ 1] 3691 	ld (y),a 
      0014C1 90 5C            [ 2] 3692 	incw y 
      0014C3                       3693 41$:
      0014C3 F6               [ 1] 3694 	ld a,(x)
      0014C4 5C               [ 2] 3695 	incw x 
      0014C5 90 F7            [ 1] 3696 	ld (y),a 
      0014C7 90 5C            [ 2] 3697 	incw y 
      0014C9 4D               [ 1] 3698 	tnz a 
      0014CA 26 F7            [ 1] 3699 	jrne 41$
      0014CC 20 77            [ 2] 3700 	jra 20$  
                                   3701 ; insert command name 
      0014CE                       3702 5$:
      0014CE CD 13 B5         [ 4] 3703 	call add_space  
      0014D1 90 89            [ 2] 3704 	pushw y
      0014D3 CD 10 54         [ 4] 3705 	call cmd_name
      0014D6 90 85            [ 2] 3706 	popw y 
      0014D8 CD 13 A0         [ 4] 3707 	call cpy_cmd_name
      0014DB 20 8C            [ 2] 3708 	jra decomp_loop 
      0014DD                       3709 6$:
      0014DD A1 02            [ 1] 3710 	cp a,#TK_QSTR 
      0014DF 26 06            [ 1] 3711 	jrne 7$
                                   3712 ;; TK_QSTR
      0014E1 CD 13 D9         [ 4] 3713 	call cpy_quote  
      0014E4 CC 14 69         [ 2] 3714 	jp decomp_loop
      0014E7                       3715 7$:
      0014E7 A1 03            [ 1] 3716 	cp a,#TK_CHAR 
      0014E9 26 0E            [ 1] 3717 	jrne 8$
                                   3718 ;; TK_CHAR 
      0014EB A6 5C            [ 1] 3719 	ld a,#'\ 
      0014ED 90 F7            [ 1] 3720 	ld (y),a 
      0014EF 90 5C            [ 2] 3721 	incw y 
      0014F1 9F               [ 1] 3722 	ld a,xl 
      0014F2 90 F7            [ 1] 3723 	ld (y),a 
      0014F4 90 5C            [ 2] 3724 	incw y 
      0014F6 CC 14 69         [ 2] 3725 	jp decomp_loop
      0014F9 A1 01            [ 1] 3726 8$: cp a,#TK_COLON 
      0014FB 26 09            [ 1] 3727 	jrne 9$
      0014FD A6 3A            [ 1] 3728 	ld a,#':
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0014FF                       3729 81$:
      0014FF 90 F7            [ 1] 3730 	ld (y),a 
      001501 90 5C            [ 2] 3731 	incw y 
      001503                       3732 82$:
      001503 CC 14 69         [ 2] 3733 	jp decomp_loop
      001506                       3734 9$: 
      001506 A1 0A            [ 1] 3735 	cp a,#TK_SHARP
      001508 22 0A            [ 1] 3736 	jrugt 10$ 
      00150A A0 06            [ 1] 3737 	sub a,#TK_ARRAY 
      00150C 5F               [ 1] 3738 	clrw x 
      00150D 97               [ 1] 3739 	ld xl,a
      00150E 1C 15 5B         [ 2] 3740 	addw x,#single_char 
      001511 F6               [ 1] 3741 	ld a,(x)
      001512 20 EB            [ 2] 3742 	jra 81$ 
      001514                       3743 10$: 
      001514 A1 11            [ 1] 3744 	cp a,#TK_MINUS 
      001516 22 0A            [ 1] 3745 	jrugt 11$
      001518 A0 10            [ 1] 3746 	sub a,#TK_PLUS 
      00151A 5F               [ 1] 3747 	clrw x 
      00151B 97               [ 1] 3748 	ld xl,a 
      00151C 1C 15 60         [ 2] 3749 	addw x,#add_char 
      00151F F6               [ 1] 3750 	ld a,(x)
      001520 20 DD            [ 2] 3751 	jra 81$
      001522                       3752 11$:
      001522 A1 22            [ 1] 3753     cp a,#TK_MOD 
      001524 22 0A            [ 1] 3754 	jrugt 12$
      001526 A0 20            [ 1] 3755 	sub a,#TK_MULT
      001528 5F               [ 1] 3756 	clrw x 
      001529 97               [ 1] 3757 	ld xl,a 
      00152A 1C 15 62         [ 2] 3758 	addw x,#mul_char
      00152D F6               [ 1] 3759 	ld a,(x)
      00152E 20 CF            [ 2] 3760 	jra 81$
      001530                       3761 12$:
      001530 A0 31            [ 1] 3762 	sub a,#TK_GT  
      001532 48               [ 1] 3763 	sll a 
      001533 5F               [ 1] 3764 	clrw x 
      001534 97               [ 1] 3765 	ld xl,a 
      001535 1C 15 65         [ 2] 3766 	addw x,#relop_str 
      001538 FE               [ 2] 3767 	ldw x,(x)
      001539 F6               [ 1] 3768 	ld a,(x)
      00153A 5C               [ 2] 3769 	incw x 
      00153B 90 F7            [ 1] 3770 	ld (y),a
      00153D 90 5C            [ 2] 3771 	incw y 
      00153F F6               [ 1] 3772 	ld a,(x)
      001540 26 BD            [ 1] 3773 	jrne 81$
      001542 CC 14 69         [ 2] 3774 	jp decomp_loop 
      001545                       3775 20$: 
      001545 90 7F            [ 1] 3776 	clr (y)
      001547 1E 03            [ 2] 3777 	ldw x,(STR,sp)
      001549 7B 01            [ 1] 3778 	ld a,(BASE_SAV,sp)
      00154B C7 00 0A         [ 1] 3779 	ld base,a 
      00154E 7B 02            [ 1] 3780 	ld a,(WIDTH_SAV,sp)
      001550 C7 00 24         [ 1] 3781 	ld tab_width,a
      001553 72 F2 03         [ 2] 3782 	subw y,(STR,sp) 
      001556 90 9F            [ 1] 3783 	ld a,yl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001558                       3784 	_drop VSIZE 
      001558 5B 04            [ 2]    1     addw sp,#VSIZE 
      00155A 81               [ 4] 3785 	ret 
                                   3786 
      00155B 40 28 29 2C 23        3787 single_char: .byte '@','(',')',',','#'
      001560 2B 2D                 3788 add_char: .byte '+','-'
      001562 2A 2F 25              3789 mul_char: .byte '*','/','%'
      001565 15 71 15 73 15 75 15  3790 relop_str: .word gt,equal,ge,lt,le,ne 
             78 15 7A 15 7D
      001571 3E 00                 3791 gt: .asciz ">"
      001573 3D 00                 3792 equal: .asciz "="
      001575 3E 3D 00              3793 ge: .asciz ">="
      001578 3C 00                 3794 lt: .asciz "<"
      00157A 3C 3D 00              3795 le: .asciz "<="
      00157D 3C 3E 00              3796 ne:  .asciz "<>"
                                   3797 
                                   3798 
                                   3799 ;--------------------------
                                   3800 ; decompile line from token list
                                   3801 ; and print it. 
                                   3802 ; input:
                                   3803 ;   A       stop at this position 
                                   3804 ;   X 		pointer at line
                                   3805 ; output:
                                   3806 ;   none 
                                   3807 ;--------------------------	
      001580                       3808 prt_basic_line:
      001580 C7 00 03         [ 1] 3809 	ld count,a 
      001583 E6 02            [ 1] 3810 	ld a,(2,x)
      001585 C1 00 03         [ 1] 3811 	cp a,count 
      001588 2A 03            [ 1] 3812 	jrpl 1$ 
      00158A C7 00 03         [ 1] 3813 	ld count,a 
      00158D CF 00 04         [ 2] 3814 1$:	ldw basicptr,x 
      001590 90 AE 16 90      [ 2] 3815 	ldw y,#tib  
      001594 CD 14 22         [ 4] 3816 	call decompile 
      001597 CD 02 B3         [ 4] 3817 	call puts 
      00159A A6 0D            [ 1] 3818 	ld a,#CR 
      00159C CD 02 A0         [ 4] 3819 	call putc 
      00159F 81               [ 4] 3820 	ret 
                                   3821 
                                   3822 
                                   3823 
                                   3824 ;---------------------------------
                                   3825 ; BASIC: PRINT|? arg_list 
                                   3826 ; print values from argument list
                                   3827 ;----------------------------------
                           000001  3828 	COMMA=1
                           000001  3829 	VSIZE=1
      0015A0                       3830 print:
      0015A0 4B 00            [ 1] 3831 push #0 ; local variable COMMA 
      0015A2                       3832 reset_comma:
      0015A2 0F 01            [ 1] 3833 	clr (COMMA,sp)
      0015A4                       3834 prt_loop:
      0015A4 CD 09 70         [ 4] 3835 	call next_token
      0015A7 A1 02            [ 1] 3836 	cp a,#CMD_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015A9 25 5A            [ 1] 3837 	jrult print_exit ; colon or end of line 
      0015AB A1 02            [ 1] 3838 	cp a,#TK_QSTR
      0015AD 27 12            [ 1] 3839 	jreq 1$
      0015AF A1 03            [ 1] 3840 	cp a,#TK_CHAR 
      0015B1 27 13            [ 1] 3841 	jreq 2$ 
      0015B3 A1 82            [ 1] 3842 	cp a,#TK_CFUNC 
      0015B5 27 15            [ 1] 3843 	jreq 3$
      0015B7 A1 09            [ 1] 3844 	cp a,#TK_COMMA 
      0015B9 27 18            [ 1] 3845 	jreq 4$
      0015BB A1 0A            [ 1] 3846 	cp a,#TK_SHARP 
      0015BD 27 1B            [ 1] 3847 	jreq 5$
      0015BF 20 2B            [ 2] 3848 	jra 7$ 
      0015C1                       3849 1$:	; print string 
      0015C1 CD 02 B3         [ 4] 3850 	call puts
      0015C4 20 DC            [ 2] 3851 	jra reset_comma
      0015C6                       3852 2$:	; print character 
      0015C6 9F               [ 1] 3853 	ld a,xl 
      0015C7 CD 02 A0         [ 4] 3854 	call putc 
      0015CA 20 D6            [ 2] 3855 	jra reset_comma 
      0015CC                       3856 3$: ; print character function value  	
      0015CC FD               [ 4] 3857 	call (x)
      0015CD 9F               [ 1] 3858 	ld a,xl 
      0015CE CD 02 A0         [ 4] 3859 	call putc
      0015D1 20 CF            [ 2] 3860 	jra reset_comma 
      0015D3                       3861 4$: ; set comma state 
      0015D3 A6 FF            [ 1] 3862 	ld a,#255 
      0015D5 6B 01            [ 1] 3863 	ld (COMMA,sp),a  
      0015D7 CC 15 A4         [ 2] 3864 	jp prt_loop   
      0015DA                       3865 5$: ; # character must be followed by an integer   
      0015DA CD 09 70         [ 4] 3866 	call next_token
      0015DD A1 84            [ 1] 3867 	cp a,#TK_INTGR 
      0015DF 27 03            [ 1] 3868 	jreq 6$
      0015E1 CC 08 7E         [ 2] 3869 	jp syntax_error 
      0015E4                       3870 6$: ; set tab width
      0015E4 9F               [ 1] 3871 	ld a,xl 
      0015E5 A4 0F            [ 1] 3872 	and a,#15 
      0015E7 C7 00 24         [ 1] 3873 	ld tab_width,a 
      0015EA 20 B6            [ 2] 3874 	jra reset_comma 
      0015EC                       3875 7$:	
      0015EC                       3876 	_unget_token
      0015EC 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0015F1 CD 12 27         [ 4] 3877 	call relation 
      0015F4 A1 84            [ 1] 3878 	cp a,#TK_INTGR
      0015F6 27 08            [ 1] 3879 	jreq 8$
      0015F8                       3880 	_unget_token
      0015F8 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0015FD CC 16 05         [ 2] 3881 	jp print_exit 
      001600 CD 09 C5         [ 4] 3882 8$: call print_int 
      001603 20 9D            [ 2] 3883 	jra reset_comma 
      001605                       3884 print_exit:
      001605 0D 01            [ 1] 3885 	tnz (COMMA,sp)
      001607 26 05            [ 1] 3886 	jrne 9$
      001609 A6 0D            [ 1] 3887 	ld a,#CR 
      00160B CD 02 A0         [ 4] 3888     call putc 
      00160E                       3889 9$:	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00160E 5B 01            [ 2]    1     addw sp,#VSIZE 
      001610 81               [ 4] 3890 	ret 
                                   3891 
      001611                       3892 print_type: 
                                   3893 
                                   3894 ;----------------------
                                   3895 ; 'save_context' and
                                   3896 ; 'rest_context' must be 
                                   3897 ; called at the same 
                                   3898 ; call stack depth 
                                   3899 ; i.e. SP must have the 
                                   3900 ; save value at  
                                   3901 ; entry point of both 
                                   3902 ; routine. 
                                   3903 ;---------------------
                           000004  3904 	CTXT_SIZE=4 ; size of saved data 
                                   3905 ;--------------------
                                   3906 ; save current BASIC
                                   3907 ; interpreter context 
                                   3908 ; on stack 
                                   3909 ;--------------------
      001611                       3910 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001611                       3911 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001611                       3912 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001611                       3913 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001611                       3914 save_context:
      001611 CE 00 04         [ 2] 3915 	ldw x,basicptr 
      001614 1F 03            [ 2] 3916 	ldw (BPTR,sp),x
      001616 C6 00 01         [ 1] 3917 	ld a,in 
      001619 6B 05            [ 1] 3918 	ld (IN,sp),a
      00161B C6 00 03         [ 1] 3919 	ld a,count 
      00161E 6B 06            [ 1] 3920 	ld (CNT,sp),a  
      001620 81               [ 4] 3921 	ret
                                   3922 
                                   3923 ;-----------------------
                                   3924 ; restore previously saved 
                                   3925 ; BASIC interpreter context 
                                   3926 ; from stack 
                                   3927 ;-------------------------
      001621                       3928 rest_context:
      001621 1E 03            [ 2] 3929 	ldw x,(BPTR,sp)
      001623 CF 00 04         [ 2] 3930 	ldw basicptr,x 
      001626 7B 05            [ 1] 3931 	ld a,(IN,sp)
      001628 C7 00 01         [ 1] 3932 	ld in,a
      00162B 7B 06            [ 1] 3933 	ld a,(CNT,sp)
      00162D C7 00 03         [ 1] 3934 	ld count,a  
      001630 81               [ 4] 3935 	ret
                                   3936 
                                   3937 
                                   3938 
                                   3939 ;------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3940 ; BASIC: INPUT [string]var[,[string]var]
                                   3941 ; input value in variables 
                                   3942 ; [string] optionally can be used as prompt 
                                   3943 ;-----------------------------------------
                           000001  3944 	CX_BPTR=1
                           000003  3945 	CX_IN=3
                           000004  3946 	CX_CNT=4
                           000005  3947 	SKIP=5
                           000006  3948 	VAR_ADDR=6
                           000007  3949 	VSIZE=7
      001631                       3950 input_var:
      001631                       3951 	_vars VSIZE 
      001631 52 07            [ 2]    1     sub sp,#VSIZE 
      001633                       3952 input_loop:
      001633 0F 05            [ 1] 3953 	clr (SKIP,sp)
      001635 CD 09 70         [ 4] 3954 	call next_token 
      001638 A1 02            [ 1] 3955 	cp a,#TK_QSTR 
      00163A 26 08            [ 1] 3956 	jrne 1$ 
      00163C CD 02 B3         [ 4] 3957 	call puts 
      00163F 03 05            [ 1] 3958 	cpl (SKIP,sp)
      001641 CD 09 70         [ 4] 3959 	call next_token 
      001644 A1 85            [ 1] 3960 1$: cp a,#TK_VAR  
      001646 27 03            [ 1] 3961 	jreq 2$ 
      001648 CC 08 7E         [ 2] 3962 	jp syntax_error
      00164B 1F 06            [ 2] 3963 2$:	ldw (VAR_ADDR,sp),x 
      00164D 0D 05            [ 1] 3964 	tnz (SKIP,sp)
      00164F 26 06            [ 1] 3965 	jrne 21$ 
      001651 CD 14 1A         [ 4] 3966 	call var_name 
      001654 CD 02 A0         [ 4] 3967 	call putc   
      001657                       3968 21$:
      001657 A6 3A            [ 1] 3969 	ld a,#':
      001659 CD 02 A0         [ 4] 3970 	call putc 
      00165C CD 16 11         [ 4] 3971 	call save_context 
      00165F 72 5F 00 03      [ 1] 3972 	clr count  
      001663 CD 0A C0         [ 4] 3973 	call readln 
      001666 AE 16 90         [ 2] 3974 	ldw x,#tib 
      001669 3B 00 03         [ 1] 3975 	push count
      00166C 4B 00            [ 1] 3976 	push #0 
      00166E 72 FB 01         [ 2] 3977 	addw x,(1,sp)
      001671 5C               [ 2] 3978 	incw x 
      001672                       3979 	_drop 2 
      001672 5B 02            [ 2]    1     addw sp,#2 
      001674 72 5F 00 01      [ 1] 3980 	clr in 
      001678 CD 0C BD         [ 4] 3981 	call get_token
      00167B A1 84            [ 1] 3982 	cp a,#TK_INTGR
      00167D 27 06            [ 1] 3983 	jreq 3$ 
      00167F CD 16 21         [ 4] 3984 	call rest_context 
      001682 CC 08 7E         [ 2] 3985 	jp syntax_error
      001685 16 06            [ 2] 3986 3$: ldw y,(VAR_ADDR,sp) 
      001687 90 FF            [ 2] 3987 	ldw (y),x 
      001689 CD 16 21         [ 4] 3988 	call rest_context
      00168C CD 09 70         [ 4] 3989 	call next_token 
      00168F A1 09            [ 1] 3990 	cp a,#TK_COMMA 
      001691 27 A0            [ 1] 3991 	jreq input_loop 
      001693 A1 01            [ 1] 3992 	cp a,#TK_COLON 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001695 23 03            [ 2] 3993     jrule input_exit 
      001697 CC 08 7E         [ 2] 3994 	jp syntax_error 
      00169A                       3995 input_exit:
      00169A                       3996 	_drop VSIZE 
      00169A 5B 07            [ 2]    1     addw sp,#VSIZE 
      00169C 81               [ 4] 3997 	ret 
                                   3998 
                                   3999 
                                   4000 ;---------------------
                                   4001 ; BASIC: REMARK | ' 
                                   4002 ; skip comment to end of line 
                                   4003 ;---------------------- 
      00169D                       4004 remark:
      00169D 55 00 03 00 01   [ 1] 4005 	mov in,count 
      0016A2 81               [ 4] 4006  	ret 
                                   4007 
                                   4008 
                                   4009 ;---------------------
                                   4010 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   4011 ; read in loop 'addr'  
                                   4012 ; apply & 'mask' to value 
                                   4013 ; loop while result==0.  
                                   4014 ; 'xor_mask' is used to 
                                   4015 ; invert the wait logic.
                                   4016 ; i.e. loop while not 0.
                                   4017 ;---------------------
                           000001  4018 	XMASK=1 
                           000002  4019 	MASK=2
                           000003  4020 	ADDR=3
                           000004  4021 	VSIZE=4
      0016A3                       4022 wait: 
      0016A3                       4023 	_vars VSIZE
      0016A3 52 04            [ 2]    1     sub sp,#VSIZE 
      0016A5 0F 01            [ 1] 4024 	clr (XMASK,sp) 
      0016A7 CD 10 E5         [ 4] 4025 	call arg_list 
      0016AA A1 02            [ 1] 4026 	cp a,#2
      0016AC 24 03            [ 1] 4027 	jruge 0$
      0016AE CC 08 7E         [ 2] 4028 	jp syntax_error 
      0016B1 A1 03            [ 1] 4029 0$:	cp a,#3
      0016B3 25 04            [ 1] 4030 	jrult 1$
      0016B5 85               [ 2] 4031 	popw x 
      0016B6 9F               [ 1] 4032 	ld a,xl
      0016B7 6B 01            [ 1] 4033 	ld (XMASK,sp),a 
      0016B9 85               [ 2] 4034 1$: popw x ; mask 
      0016BA 9F               [ 1] 4035 	ld a,xl 
      0016BB 6B 02            [ 1] 4036 	ld (MASK,sp),a 
      0016BD 85               [ 2] 4037 	popw x ; address 
      0016BE F6               [ 1] 4038 2$:	ld a,(x)
      0016BF 14 02            [ 1] 4039 	and a,(MASK,sp)
      0016C1 18 01            [ 1] 4040 	xor a,(XMASK,sp)
      0016C3 27 F9            [ 1] 4041 	jreq 2$ 
      0016C5                       4042 	_drop VSIZE 
      0016C5 5B 04            [ 2]    1     addw sp,#VSIZE 
      0016C7 81               [ 4] 4043 	ret 
                                   4044 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4045 ;---------------------
                                   4046 ; BASIC: BSET addr,mask
                                   4047 ; set bits at 'addr' corresponding 
                                   4048 ; to those of 'mask' that are at 1.
                                   4049 ; arguments:
                                   4050 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4051 ;   mask        mask|addr
                                   4052 ; output:
                                   4053 ;	none 
                                   4054 ;--------------------------
      0016C8                       4055 bit_set:
      0016C8 CD 10 E5         [ 4] 4056 	call arg_list 
      0016CB A1 02            [ 1] 4057 	cp a,#2	 
      0016CD 27 03            [ 1] 4058 	jreq 1$ 
      0016CF CC 08 7E         [ 2] 4059 	jp syntax_error
      0016D2                       4060 1$: 
      0016D2 85               [ 2] 4061 	popw x ; mask 
      0016D3 9F               [ 1] 4062 	ld a,xl 
      0016D4 85               [ 2] 4063 	popw x ; addr  
      0016D5 FA               [ 1] 4064 	or a,(x)
      0016D6 F7               [ 1] 4065 	ld (x),a
      0016D7 81               [ 4] 4066 	ret 
                                   4067 
                                   4068 ;---------------------
                                   4069 ; BASIC: BRES addr,mask
                                   4070 ; reset bits at 'addr' corresponding 
                                   4071 ; to those of 'mask' that are at 1.
                                   4072 ; arguments:
                                   4073 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4074 ;   mask	    ~mask&*addr  
                                   4075 ; output:
                                   4076 ;	none 
                                   4077 ;--------------------------
      0016D8                       4078 bit_reset:
      0016D8 CD 10 E5         [ 4] 4079 	call arg_list 
      0016DB A1 02            [ 1] 4080 	cp a,#2  
      0016DD 27 03            [ 1] 4081 	jreq 1$ 
      0016DF CC 08 7E         [ 2] 4082 	jp syntax_error
      0016E2                       4083 1$: 
      0016E2 85               [ 2] 4084 	popw x ; mask 
      0016E3 9F               [ 1] 4085 	ld a,xl 
      0016E4 43               [ 1] 4086 	cpl a 
      0016E5 85               [ 2] 4087 	popw x ; addr  
      0016E6 F4               [ 1] 4088 	and a,(x)
      0016E7 F7               [ 1] 4089 	ld (x),a 
      0016E8 81               [ 4] 4090 	ret 
                                   4091 
                                   4092 ;---------------------
                                   4093 ; BASIC: BTOGL addr,mask
                                   4094 ; toggle bits at 'addr' corresponding 
                                   4095 ; to those of 'mask' that are at 1.
                                   4096 ; arguments:
                                   4097 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4098 ;   mask	    mask^*addr  
                                   4099 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4100 ;	none 
                                   4101 ;--------------------------
      0016E9                       4102 bit_toggle:
      0016E9 CD 10 E5         [ 4] 4103 	call arg_list 
      0016EC A1 02            [ 1] 4104 	cp a,#2 
      0016EE 27 03            [ 1] 4105 	jreq 1$ 
      0016F0 CC 08 7E         [ 2] 4106 	jp syntax_error
      0016F3 85               [ 2] 4107 1$: popw x ; mask 
      0016F4 9F               [ 1] 4108 	ld a,xl 
      0016F5 85               [ 2] 4109 	popw x ; addr  
      0016F6 F8               [ 1] 4110 	xor a,(x)
      0016F7 F7               [ 1] 4111 	ld (x),a 
      0016F8 81               [ 4] 4112 	ret 
                                   4113 
                                   4114 
                                   4115 ;---------------------
                                   4116 ; BASIC: BTEST(addr,bit)
                                   4117 ; return bit value at 'addr' 
                                   4118 ; bit is in range {0..7}.
                                   4119 ; arguments:
                                   4120 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4121 ;   bit 	    bit position {0..7}  
                                   4122 ; output:
                                   4123 ;	none 
                                   4124 ;--------------------------
      0016F9                       4125 bit_test:
      0016F9 CD 10 E0         [ 4] 4126 	call func_args 
      0016FC A1 02            [ 1] 4127 	cp a,#2
      0016FE 27 03            [ 1] 4128 	jreq 0$
      001700 CC 08 7E         [ 2] 4129 	jp syntax_error
      001703                       4130 0$:	
      001703 85               [ 2] 4131 	popw x 
      001704 9F               [ 1] 4132 	ld a,xl 
      001705 A4 07            [ 1] 4133 	and a,#7
      001707 88               [ 1] 4134 	push a   
      001708 A6 01            [ 1] 4135 	ld a,#1 
      00170A 0D 01            [ 1] 4136 1$: tnz (1,sp)
      00170C 27 05            [ 1] 4137 	jreq 2$
      00170E 48               [ 1] 4138 	sll a 
      00170F 0A 01            [ 1] 4139 	dec (1,sp)
      001711 20 F7            [ 2] 4140 	jra 1$
      001713                       4141 2$: _drop 1 
      001713 5B 01            [ 2]    1     addw sp,#1 
      001715 85               [ 2] 4142 	popw x 
      001716 F4               [ 1] 4143 	and a,(x)
      001717 27 02            [ 1] 4144 	jreq 3$
      001719 A6 01            [ 1] 4145 	ld a,#1 
      00171B 5F               [ 1] 4146 3$:	clrw x 
      00171C 97               [ 1] 4147 	ld xl,a 
      00171D A6 84            [ 1] 4148 	ld a,#TK_INTGR
      00171F 81               [ 4] 4149 	ret
                                   4150 
                                   4151 
                                   4152 ;--------------------
                                   4153 ; BASIC: POKE addr,byte
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4154 ; put a byte at addr 
                                   4155 ;--------------------
      001720                       4156 poke:
      001720 CD 10 E5         [ 4] 4157 	call arg_list 
      001723 A1 02            [ 1] 4158 	cp a,#2
      001725 27 03            [ 1] 4159 	jreq 1$
      001727 CC 08 7E         [ 2] 4160 	jp syntax_error
      00172A                       4161 1$:	
      00172A 85               [ 2] 4162 	popw x  
      00172B 9F               [ 1] 4163     ld a,xl 
      00172C 85               [ 2] 4164 	popw x 
      00172D F7               [ 1] 4165 	ld (x),a 
      00172E 81               [ 4] 4166 	ret 
                                   4167 
                                   4168 ;-----------------------
                                   4169 ; BASIC: PEEK(addr)
                                   4170 ; get the byte at addr 
                                   4171 ; input:
                                   4172 ;	none 
                                   4173 ; output:
                                   4174 ;	X 		value 
                                   4175 ;-----------------------
      00172F                       4176 peek:
      00172F CD 10 E0         [ 4] 4177 	call func_args
      001732 A1 01            [ 1] 4178 	cp a,#1 
      001734 27 03            [ 1] 4179 	jreq 1$
      001736 CC 08 7E         [ 2] 4180 	jp syntax_error
      001739 85               [ 2] 4181 1$: popw x 
      00173A F6               [ 1] 4182 	ld a,(x)
      00173B 5F               [ 1] 4183 	clrw x 
      00173C 97               [ 1] 4184 	ld xl,a 
      00173D A6 84            [ 1] 4185 	ld a,#TK_INTGR
      00173F 81               [ 4] 4186 	ret 
                                   4187 
                                   4188 ;---------------------------
                                   4189 ; BASIC IF expr : instructions
                                   4190 ; evaluate expr and if true 
                                   4191 ; execute instructions on same line. 
                                   4192 ;----------------------------
      001740                       4193 if: 
      001740 CD 12 27         [ 4] 4194 	call relation 
      001743 A1 84            [ 1] 4195 	cp a,#TK_INTGR
      001745 27 03            [ 1] 4196 	jreq 1$ 
      001747 CC 08 7E         [ 2] 4197 	jp syntax_error
      00174A 4F               [ 1] 4198 1$:	clr a 
      00174B 5D               [ 2] 4199 	tnzw x 
      00174C 26 05            [ 1] 4200 	jrne 9$  
                                   4201 ;skip to next line
      00174E 55 00 03 00 01   [ 1] 4202 	mov in,count
      001753 81               [ 4] 4203 9$:	ret 
                                   4204 
                                   4205 ;------------------------
                                   4206 ; BASIC: FOR var=expr 
                                   4207 ; set variable to expression 
                                   4208 ; leave variable address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4209 ; on stack and set
                                   4210 ; FLOOP bit in 'flags'
                                   4211 ;-----------------
                           000001  4212 	RETL1=1 ; return address  
                           000003  4213 	FSTEP=3  ; variable increment
                           000005  4214 	LIMIT=5 ; loop limit 
                           000007  4215 	CVAR=7   ; control variable 
                           000009  4216 	INW=9   ;  in.w saved
                           00000B  4217 	BPTR=11 ; baseptr saved
                           00000A  4218 	VSIZE=10  
      001754                       4219 for: ; { -- var_addr }
      001754 85               [ 2] 4220 	popw x ; call return address 
      001755                       4221 	_vars VSIZE 
      001755 52 0A            [ 2]    1     sub sp,#VSIZE 
      001757 89               [ 2] 4222 	pushw x  ; RETL1 
      001758 A6 85            [ 1] 4223 	ld a,#TK_VAR 
      00175A CD 10 D3         [ 4] 4224 	call expect
      00175D 1F 07            [ 2] 4225 	ldw (CVAR,sp),x  ; control variable 
      00175F CD 13 0A         [ 4] 4226 	call let_var 
      001762 72 14 00 23      [ 1] 4227 	bset flags,#FLOOP 
                                   4228 ; open space on stack for loop data 
      001766 5F               [ 1] 4229 	clrw x 
      001767 1F 0B            [ 2] 4230 	ldw (BPTR,sp),x 
      001769 1F 09            [ 2] 4231 	ldw (INW,sp),x 
      00176B CD 09 70         [ 4] 4232 	call next_token 
      00176E A1 80            [ 1] 4233 	cp a,#TK_CMD 
      001770 27 03            [ 1] 4234 	jreq 1$
      001772 CC 08 7E         [ 2] 4235 	jp syntax_error
      001775                       4236 1$:  
      001775 A3 17 7D         [ 2] 4237 	cpw x,#to 
      001778 27 03            [ 1] 4238 	jreq to
      00177A CC 08 7E         [ 2] 4239 	jp syntax_error 
                                   4240 
                                   4241 ;-----------------------------------
                                   4242 ; BASIC: TO expr 
                                   4243 ; second part of FOR loop initilization
                                   4244 ; leave limit on stack and set 
                                   4245 ; FTO bit in 'flags'
                                   4246 ;-----------------------------------
      00177D                       4247 to: ; { var_addr -- var_addr limit step }
      00177D 72 04 00 23 03   [ 2] 4248 	btjt flags,#FLOOP,1$
      001782 CC 08 7E         [ 2] 4249 	jp syntax_error
      001785 CD 12 27         [ 4] 4250 1$: call relation  
      001788 A1 84            [ 1] 4251 	cp a,#TK_INTGR 
      00178A 27 03            [ 1] 4252 	jreq 2$ 
      00178C CC 08 7E         [ 2] 4253 	jp syntax_error
      00178F 1F 05            [ 2] 4254 2$: ldw (LIMIT,sp),x
                                   4255 ;	ldw x,in.w 
      001791 CD 09 70         [ 4] 4256 	call next_token
      001794 A1 00            [ 1] 4257 	cp a,#TK_NONE  
      001796 27 0E            [ 1] 4258 	jreq 4$ 
      001798 A1 80            [ 1] 4259 	cp a,#TK_CMD
      00179A 26 05            [ 1] 4260 	jrne 3$
      00179C A3 17 AD         [ 2] 4261 	cpw x,#step 
      00179F 27 0C            [ 1] 4262 	jreq step
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0017A1                       4263 3$:	
      0017A1                       4264 	_unget_token   	 
      0017A1 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0017A6                       4265 4$:	
      0017A6 AE 00 01         [ 2] 4266 	ldw x,#1   ; default step  
      0017A9 1F 03            [ 2] 4267 	ldw (FSTEP,sp),x 
      0017AB 20 14            [ 2] 4268 	jra store_loop_addr 
                                   4269 
                                   4270 
                                   4271 ;----------------------------------
                                   4272 ; BASIC: STEP expr 
                                   4273 ; optional third par of FOR loop
                                   4274 ; initialization. 	
                                   4275 ;------------------------------------
      0017AD                       4276 step: ; {var limit -- var limit step}
      0017AD 72 04 00 23 03   [ 2] 4277 	btjt flags,#FLOOP,1$
      0017B2 CC 08 7E         [ 2] 4278 	jp syntax_error
      0017B5 CD 12 27         [ 4] 4279 1$: call relation
      0017B8 A1 84            [ 1] 4280 	cp a,#TK_INTGR
      0017BA 27 03            [ 1] 4281 	jreq 2$
      0017BC CC 08 7E         [ 2] 4282 	jp syntax_error
      0017BF 1F 03            [ 2] 4283 2$:	ldw (FSTEP,sp),x ; step
                                   4284 ; leave loop back entry point on cstack 
                                   4285 ; cstack is 1 call deep from interpreter
      0017C1                       4286 store_loop_addr:
      0017C1 CE 00 04         [ 2] 4287 	ldw x,basicptr  
      0017C4 1F 0B            [ 2] 4288 	ldw (BPTR,sp),x 
      0017C6 CE 00 00         [ 2] 4289 	ldw x,in.w 
      0017C9 1F 09            [ 2] 4290 	ldw (INW,sp),x   
      0017CB 72 15 00 23      [ 1] 4291 	bres flags,#FLOOP 
      0017CF 72 5C 00 20      [ 1] 4292 	inc loop_depth  
      0017D3 81               [ 4] 4293 	ret 
                                   4294 
                                   4295 ;--------------------------------
                                   4296 ; BASIC: NEXT var 
                                   4297 ; FOR loop control 
                                   4298 ; increment variable with step 
                                   4299 ; and compare with limit 
                                   4300 ; loop if threshold not crossed.
                                   4301 ; else stack. 
                                   4302 ; and decrement 'loop_depth' 
                                   4303 ;--------------------------------
      0017D4                       4304 next: ; {var limit step retl1 -- [var limit step ] }
      0017D4 72 5D 00 20      [ 1] 4305 	tnz loop_depth 
      0017D8 26 03            [ 1] 4306 	jrne 1$ 
      0017DA CC 08 7E         [ 2] 4307 	jp syntax_error 
      0017DD                       4308 1$: 
      0017DD A6 85            [ 1] 4309 	ld a,#TK_VAR 
      0017DF CD 10 D3         [ 4] 4310 	call expect
                                   4311 ; check for good variable after NEXT 	 
      0017E2 13 07            [ 2] 4312 	cpw x,(CVAR,sp)
      0017E4 27 03            [ 1] 4313 	jreq 2$  
      0017E6 CC 08 7E         [ 2] 4314 	jp syntax_error ; not the good one 
      0017E9                       4315 2$: ; increment variable 
      0017E9 FE               [ 2] 4316 	ldw x,(x)  ; get var value 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0017EA 72 FB 03         [ 2] 4317 	addw x,(FSTEP,sp) ; var+step 
      0017ED 16 07            [ 2] 4318 	ldw y,(CVAR,sp)
      0017EF 90 FF            [ 2] 4319 	ldw (y),x ; save var new value 
                                   4320 ; check sign of STEP  
      0017F1 A6 80            [ 1] 4321 	ld a,#0x80
      0017F3 15 03            [ 1] 4322 	bcp a,(FSTEP,sp)
      0017F5 2A 06            [ 1] 4323 	jrpl 4$
                                   4324 ;negative step 
      0017F7 13 05            [ 2] 4325 	cpw x,(LIMIT,sp)
      0017F9 2F 1B            [ 1] 4326 	jrslt loop_done
      0017FB 20 04            [ 2] 4327 	jra loop_back 
      0017FD                       4328 4$: ; positive step
      0017FD 13 05            [ 2] 4329 	cpw x,(LIMIT,sp)
      0017FF 2C 15            [ 1] 4330 	jrsgt loop_done
      001801                       4331 loop_back:
      001801 1E 0B            [ 2] 4332 	ldw x,(BPTR,sp)
      001803 CF 00 04         [ 2] 4333 	ldw basicptr,x 
      001806 72 01 00 23 05   [ 2] 4334 	btjf flags,#FRUN,1$ 
      00180B E6 02            [ 1] 4335 	ld a,(2,x)
      00180D C7 00 03         [ 1] 4336 	ld count,a
      001810 1E 09            [ 2] 4337 1$:	ldw x,(INW,sp)
      001812 CF 00 00         [ 2] 4338 	ldw in.w,x 
      001815 81               [ 4] 4339 	ret 
      001816                       4340 loop_done:
                                   4341 	; remove loop data from stack  
      001816 85               [ 2] 4342 	popw x
      001817                       4343 	_drop VSIZE 
      001817 5B 0A            [ 2]    1     addw sp,#VSIZE 
      001819 72 5A 00 20      [ 1] 4344 	dec loop_depth 
                                   4345 ;	pushw x 
                                   4346 ;	ret 
      00181D FC               [ 2] 4347 	jp (x)
                                   4348 
                                   4349 ;----------------------------
                                   4350 ; called by goto/gosub
                                   4351 ; to get target line number 
                                   4352 ;---------------------------
      00181E                       4353 get_target_line:
      00181E CD 12 27         [ 4] 4354 	call relation 
      001821 A1 84            [ 1] 4355 	cp a,#TK_INTGR
      001823 27 03            [ 1] 4356 	jreq 1$
      001825 CC 08 7E         [ 2] 4357 	jp syntax_error
      001828 CD 04 00         [ 4] 4358 1$:	call search_lineno  
      00182B 5D               [ 2] 4359 	tnzw x 
      00182C 26 05            [ 1] 4360 	jrne 2$ 
      00182E A6 05            [ 1] 4361 	ld a,#ERR_NO_LINE 
      001830 CC 08 80         [ 2] 4362 	jp tb_error 
      001833 81               [ 4] 4363 2$:	ret 
                                   4364 
                                   4365 ;------------------------
                                   4366 ; BASIC: GOTO line# 
                                   4367 ; jump to line# 
                                   4368 ; here cstack is 2 call deep from interpreter 
                                   4369 ;------------------------
      001834                       4370 goto:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001834 72 00 00 23 06   [ 2] 4371 	btjt flags,#FRUN,0$ 
      001839 A6 06            [ 1] 4372 	ld a,#ERR_RUN_ONLY
      00183B CC 08 80         [ 2] 4373 	jp tb_error 
      00183E 81               [ 4] 4374 	ret 
      00183F CD 18 1E         [ 4] 4375 0$:	call get_target_line
      001842                       4376 jp_to_target:
      001842 CF 00 04         [ 2] 4377 	ldw basicptr,x 
      001845 E6 02            [ 1] 4378 	ld a,(2,x)
      001847 C7 00 03         [ 1] 4379 	ld count,a 
      00184A 35 03 00 01      [ 1] 4380 	mov in,#3 
      00184E 81               [ 4] 4381 	ret 
                                   4382 
                                   4383 
                                   4384 ;--------------------
                                   4385 ; BASIC: GOSUB line#
                                   4386 ; basic subroutine call
                                   4387 ; actual line# and basicptr 
                                   4388 ; are saved on cstack
                                   4389 ; here cstack is 2 call deep from interpreter 
                                   4390 ;--------------------
                           000003  4391 	RET_ADDR=3
                           000005  4392 	RET_INW=5
                           000004  4393 	VSIZE=4  
      00184F                       4394 gosub:
      00184F 72 00 00 23 06   [ 2] 4395 	btjt flags,#FRUN,0$ 
      001854 A6 06            [ 1] 4396 	ld a,#ERR_RUN_ONLY
      001856 CC 08 80         [ 2] 4397 	jp tb_error 
      001859 81               [ 4] 4398 	ret 
      00185A 85               [ 2] 4399 0$:	popw x 
      00185B                       4400 	_vars VSIZE  
      00185B 52 04            [ 2]    1     sub sp,#VSIZE 
      00185D 89               [ 2] 4401 	pushw x 
      00185E CE 00 04         [ 2] 4402 	ldw x,basicptr
      001861 1F 03            [ 2] 4403 	ldw (RET_ADDR,sp),x 
      001863 CD 18 1E         [ 4] 4404 	call get_target_line  
      001866 89               [ 2] 4405 	pushw x 
      001867 CE 00 00         [ 2] 4406 	ldw x,in.w 
      00186A 1F 07            [ 2] 4407 	ldw (RET_INW+2,sp),x
      00186C 85               [ 2] 4408 	popw x 
      00186D 20 D3            [ 2] 4409 	jra jp_to_target
                                   4410 
                                   4411 ;------------------------
                                   4412 ; BASIC: RETURN 
                                   4413 ; exit from a subroutine 
                                   4414 ; 
                                   4415 ;------------------------
      00186F                       4416 return:
      00186F 72 00 00 23 05   [ 2] 4417 	btjt flags,#FRUN,0$ 
      001874 A6 06            [ 1] 4418 	ld a,#ERR_RUN_ONLY
      001876 CC 08 80         [ 2] 4419 	jp tb_error 
      001879                       4420 0$:	
      001879 1E 03            [ 2] 4421 	ldw x,(RET_ADDR,sp) 
      00187B CF 00 04         [ 2] 4422 	ldw basicptr,x
      00187E E6 02            [ 1] 4423 	ld a,(2,x)
      001880 C7 00 03         [ 1] 4424 	ld count,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001883 1E 05            [ 2] 4425 	ldw x,(RET_INW,sp)
      001885 CF 00 00         [ 2] 4426 	ldw in.w,x 
      001888 85               [ 2] 4427 	popw x 
      001889                       4428 	_drop VSIZE 
      001889 5B 04            [ 2]    1     addw sp,#VSIZE 
      00188B 89               [ 2] 4429 	pushw x
      00188C 81               [ 4] 4430 	ret  
                                   4431 
                                   4432 
                                   4433 ;----------------------------------
                                   4434 ; BASIC: RUN
                                   4435 ; run BASIC program in RAM
                                   4436 ;----------------------------------- 
      00188D                       4437 run: 
      00188D 72 01 00 23 02   [ 2] 4438 	btjf flags,#FRUN,0$  
      001892 4F               [ 1] 4439 	clr a 
      001893 81               [ 4] 4440 	ret
      001894                       4441 0$: 
      001894 72 09 00 23 12   [ 2] 4442 	btjf flags,#FBREAK,1$
      001899                       4443 	_drop 2 
      001899 5B 02            [ 2]    1     addw sp,#2 
      00189B CD 16 21         [ 4] 4444 	call rest_context
      00189E                       4445 	_drop CTXT_SIZE 
      00189E 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0018A0 72 19 00 23      [ 1] 4446 	bres flags,#FBREAK 
      0018A4 72 10 00 23      [ 1] 4447 	bset flags,#FRUN 
      0018A8 CC 09 24         [ 2] 4448 	jp interpreter 
      0018AB CE 00 1C         [ 2] 4449 1$:	ldw x,txtbgn
      0018AE C3 00 1E         [ 2] 4450 	cpw x,txtend 
      0018B1 2B 0C            [ 1] 4451 	jrmi run_it 
      0018B3 AE 08 19         [ 2] 4452 	ldw x,#err_no_prog
      0018B6 CD 02 B3         [ 4] 4453 	call puts 
      0018B9 55 00 03 00 01   [ 1] 4454 	mov in,count
      0018BE 81               [ 4] 4455 	ret 
      0018BF                       4456 run_it:	 
      0018BF CD 12 D7         [ 4] 4457     call ubound 
      0018C2                       4458 	_drop 2 ; drop return address 
      0018C2 5B 02            [ 2]    1     addw sp,#2 
                                   4459 ; clear data pointer 
      0018C4 5F               [ 1] 4460 	clrw x 
      0018C5 CF 00 06         [ 2] 4461 	ldw data_ptr,x 
      0018C8 72 5F 00 08      [ 1] 4462 	clr data_ofs 
      0018CC 72 5F 00 09      [ 1] 4463 	clr data_len 
                                   4464 ; initialize BASIC pointer 
      0018D0 CE 00 1C         [ 2] 4465 	ldw x,txtbgn 
      0018D3 CF 00 04         [ 2] 4466 	ldw basicptr,x 
      0018D6 E6 02            [ 1] 4467 	ld a,(2,x)
      0018D8 C7 00 03         [ 1] 4468 	ld count,a
      0018DB 35 03 00 01      [ 1] 4469 	mov in,#3	
      0018DF 72 10 00 23      [ 1] 4470 	bset flags,#FRUN 
      0018E3 CC 09 24         [ 2] 4471 	jp interpreter 
                                   4472 
                                   4473 
                                   4474 ;----------------------
                                   4475 ; BASIC: END
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4476 ; end running program
                                   4477 ;---------------------- 
      0018E6                       4478 cmd_end: 
                                   4479 ; clean stack 
      0018E6 AE 17 FF         [ 2] 4480 	ldw x,#STACK_EMPTY
      0018E9 94               [ 1] 4481 	ldw sp,x 
      0018EA CC 09 05         [ 2] 4482 	jp warm_start
                                   4483 
                                   4484 
                                   4485 ;-----------------------
                                   4486 ; BASIC: TONE expr1,expr2
                                   4487 ; used TIMER2 channel 1
                                   4488 ; to produce a tone 
                                   4489 ; arguments:
                                   4490 ;    expr1   frequency 
                                   4491 ;    expr2   duration msec.
                                   4492 ;---------------------------
      0018ED                       4493 tone:
      0018ED CD 10 E5         [ 4] 4494 	call arg_list 
      0018F0 A1 02            [ 1] 4495 	cp a,#2 
      0018F2 27 03            [ 1] 4496 	jreq 1$
      0018F4 CC 08 7E         [ 2] 4497 	jp syntax_error 
      0018F7                       4498 1$: 
      0018F7 85               [ 2] 4499 	popw x ; duration
      0018F8 90 85            [ 2] 4500 	popw y ; frequency 
      0018FA                       4501 beep:  
      0018FA 89               [ 2] 4502 	pushw x 
      0018FB AE F4 24         [ 2] 4503 	ldw x,#TIM2_CLK_FREQ
      0018FE 65               [ 2] 4504 	divw x,y 
                                   4505 ; round to nearest integer 
      0018FF 90 A3 7A 12      [ 2] 4506 	cpw y,#TIM2_CLK_FREQ/2
      001903 2B 01            [ 1] 4507 	jrmi 2$
      001905 5C               [ 2] 4508 	incw x 
      001906                       4509 2$:	 
      001906 9E               [ 1] 4510 	ld a,xh 
      001907 C7 53 0D         [ 1] 4511 	ld TIM2_ARRH,a 
      00190A 9F               [ 1] 4512 	ld a,xl 
      00190B C7 53 0E         [ 1] 4513 	ld TIM2_ARRL,a 
                                   4514 ; 50% duty cycle 
      00190E 8C               [ 1] 4515 	ccf 
      00190F 56               [ 2] 4516 	rrcw x 
      001910 9E               [ 1] 4517 	ld a,xh 
      001911 C7 53 0F         [ 1] 4518 	ld TIM2_CCR1H,a 
      001914 9F               [ 1] 4519 	ld a,xl
      001915 C7 53 10         [ 1] 4520 	ld TIM2_CCR1L,a
      001918 72 10 53 08      [ 1] 4521 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      00191C 72 10 53 00      [ 1] 4522 	bset TIM2_CR1,#TIM2_CR1_CEN
      001920 72 10 53 04      [ 1] 4523 	bset TIM2_EGR,#TIM2_EGR_UG
      001924 85               [ 2] 4524 	popw x 
      001925 CD 1E 9B         [ 4] 4525 	call pause02
      001928 72 11 53 08      [ 1] 4526 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      00192C 72 11 53 00      [ 1] 4527 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001930 81               [ 4] 4528 	ret 
                                   4529 
                                   4530 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4531 ; BASIC: ADCON 0|1 [,divisor]  
                                   4532 ; disable/enanble ADC 
                                   4533 ;-------------------------------
                           000003  4534 	ONOFF=3 
                           000001  4535 	DIVSOR=1
                           000004  4536 	VSIZE=4 
      001931                       4537 power_adc:
      001931 CD 10 E5         [ 4] 4538 	call arg_list 
      001934 A1 02            [ 1] 4539 	cp a,#2	
      001936 27 0B            [ 1] 4540 	jreq 1$
      001938 A1 01            [ 1] 4541 	cp a,#1 
      00193A 27 03            [ 1] 4542 	jreq 0$ 
      00193C CC 08 7E         [ 2] 4543 	jp syntax_error 
      00193F AE 00 00         [ 2] 4544 0$: ldw x,#0
      001942 89               [ 2] 4545 	pushw x  ; divisor 
      001943 1E 03            [ 2] 4546 1$: ldw x,(ONOFF,sp)
      001945 5D               [ 2] 4547 	tnzw x 
      001946 27 1A            [ 1] 4548 	jreq 2$ 
      001948 1E 01            [ 2] 4549 	ldw x,(DIVSOR,sp) ; divisor 
      00194A 9F               [ 1] 4550 	ld a,xl
      00194B A4 07            [ 1] 4551 	and a,#7
      00194D 4E               [ 1] 4552 	swap a 
      00194E C7 54 01         [ 1] 4553 	ld ADC_CR1,a
      001951 72 16 50 CA      [ 1] 4554 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001955 72 10 54 01      [ 1] 4555 	bset ADC_CR1,#ADC_CR1_ADON 
      001959                       4556 	_usec_dly 7 
      001959 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00195C 5A               [ 2]    2     decw x
      00195D 9D               [ 1]    3     nop 
      00195E 26 FA            [ 1]    4     jrne .-4
      001960 20 08            [ 2] 4557 	jra 3$
      001962 72 11 54 01      [ 1] 4558 2$: bres ADC_CR1,#ADC_CR1_ADON
      001966 72 17 50 CA      [ 1] 4559 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00196A                       4560 3$:	_drop VSIZE 
      00196A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00196C 81               [ 4] 4561 	ret
                                   4562 
                                   4563 ;-----------------------------
                                   4564 ; BASIC: ADCREAD (channel)
                                   4565 ; read adc channel {0..5}
                                   4566 ; output:
                                   4567 ;   A 		TK_INTGR 
                                   4568 ;   X 		value 
                                   4569 ;-----------------------------
      00196D                       4570 analog_read:
      00196D CD 10 E0         [ 4] 4571 	call func_args 
      001970 A1 01            [ 1] 4572 	cp a,#1 
      001972 27 03            [ 1] 4573 	jreq 1$
      001974 CC 08 7E         [ 2] 4574 	jp syntax_error
      001977 85               [ 2] 4575 1$: popw x 
      001978 A3 00 05         [ 2] 4576 	cpw x,#5 
      00197B 23 05            [ 2] 4577 	jrule 2$
      00197D A6 0A            [ 1] 4578 	ld a,#ERR_BAD_VALUE
      00197F CC 08 80         [ 2] 4579 	jp tb_error 
      001982 9F               [ 1] 4580 2$: ld a,xl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001983 C7 00 0D         [ 1] 4581 	ld acc8,a 
      001986 A6 05            [ 1] 4582 	ld a,#5
      001988 C0 00 0D         [ 1] 4583 	sub a,acc8 
      00198B C7 54 00         [ 1] 4584 	ld ADC_CSR,a
      00198E 72 16 54 02      [ 1] 4585 	bset ADC_CR2,#ADC_CR2_ALIGN
      001992 72 10 54 01      [ 1] 4586 	bset ADC_CR1,#ADC_CR1_ADON
      001996 72 0F 54 00 FB   [ 2] 4587 	btjf ADC_CSR,#ADC_CSR_EOC,.
      00199B CE 54 04         [ 2] 4588 	ldw x,ADC_DRH
      00199E A6 84            [ 1] 4589 	ld a,#TK_INTGR
      0019A0 81               [ 4] 4590 	ret 
                                   4591 
                                   4592 ;-----------------------
                                   4593 ; BASIC: DREAD(pin)
                                   4594 ; Arduino pins 
                                   4595 ; read state of a digital pin 
                                   4596 ; pin# {0..15}
                                   4597 ; output:
                                   4598 ;    A 		TK_INTGR
                                   4599 ;    X      0|1 
                                   4600 ;-------------------------
                           000001  4601 	PINNO=1
                           000001  4602 	VSIZE=1
      0019A1                       4603 digital_read:
      0019A1                       4604 	_vars VSIZE 
      0019A1 52 01            [ 2]    1     sub sp,#VSIZE 
      0019A3 CD 10 E0         [ 4] 4605 	call func_args
      0019A6 A1 01            [ 1] 4606 	cp a,#1
      0019A8 27 03            [ 1] 4607 	jreq 1$
      0019AA CC 08 7E         [ 2] 4608 	jp syntax_error
      0019AD 85               [ 2] 4609 1$: popw x 
      0019AE A3 00 0F         [ 2] 4610 	cpw x,#15 
      0019B1 23 05            [ 2] 4611 	jrule 2$
      0019B3 A6 0A            [ 1] 4612 	ld a,#ERR_BAD_VALUE
      0019B5 CC 08 80         [ 2] 4613 	jp tb_error 
      0019B8 CD 1F CE         [ 4] 4614 2$:	call select_pin 
      0019BB 6B 01            [ 1] 4615 	ld (PINNO,sp),a
      0019BD E6 01            [ 1] 4616 	ld a,(GPIO_IDR,x)
      0019BF 0D 01            [ 1] 4617 	tnz (PINNO,sp)
      0019C1 27 05            [ 1] 4618 	jreq 8$
      0019C3 44               [ 1] 4619 3$: srl a 
      0019C4 0A 01            [ 1] 4620 	dec (PINNO,sp)
      0019C6 26 FB            [ 1] 4621 	jrne 3$ 
      0019C8 A4 01            [ 1] 4622 8$: and a,#1 
      0019CA 5F               [ 1] 4623 	clrw x 
      0019CB 97               [ 1] 4624 	ld xl,a 
      0019CC A6 84            [ 1] 4625 	ld a,#TK_INTGR
      0019CE                       4626 	_drop VSIZE
      0019CE 5B 01            [ 2]    1     addw sp,#VSIZE 
      0019D0 81               [ 4] 4627 	ret
                                   4628 
                                   4629 ;-----------------------
                                   4630 ; BASIC: DWRITE pin,0|1
                                   4631 ; Arduino pins 
                                   4632 ; write to a digital pin 
                                   4633 ; pin# {0..15}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4634 ; output:
                                   4635 ;    A 		TK_INTGR
                                   4636 ;    X      0|1 
                                   4637 ;-------------------------
                           000001  4638 	PINNO=1
                           000002  4639 	PINVAL=2
                           000002  4640 	VSIZE=2
      0019D1                       4641 digital_write:
      0019D1                       4642 	_vars VSIZE 
      0019D1 52 02            [ 2]    1     sub sp,#VSIZE 
      0019D3 CD 10 E5         [ 4] 4643 	call arg_list  
      0019D6 A1 02            [ 1] 4644 	cp a,#2 
      0019D8 27 03            [ 1] 4645 	jreq 1$
      0019DA CC 08 7E         [ 2] 4646 	jp syntax_error
      0019DD 85               [ 2] 4647 1$: popw x 
      0019DE 9F               [ 1] 4648 	ld a,xl 
      0019DF 6B 02            [ 1] 4649 	ld (PINVAL,sp),a
      0019E1 85               [ 2] 4650 	popw x 
      0019E2 A3 00 0F         [ 2] 4651 	cpw x,#15 
      0019E5 23 05            [ 2] 4652 	jrule 2$
      0019E7 A6 0A            [ 1] 4653 	ld a,#ERR_BAD_VALUE
      0019E9 CC 08 80         [ 2] 4654 	jp tb_error 
      0019EC CD 1F CE         [ 4] 4655 2$:	call select_pin 
      0019EF 6B 01            [ 1] 4656 	ld (PINNO,sp),a 
      0019F1 A6 01            [ 1] 4657 	ld a,#1
      0019F3 0D 01            [ 1] 4658 	tnz (PINNO,sp)
      0019F5 27 05            [ 1] 4659 	jreq 4$
      0019F7 48               [ 1] 4660 3$: sll a
      0019F8 0A 01            [ 1] 4661 	dec (PINNO,sp)
      0019FA 26 FB            [ 1] 4662 	jrne 3$
      0019FC 0D 02            [ 1] 4663 4$: tnz (PINVAL,sp)
      0019FE 26 05            [ 1] 4664 	jrne 5$
      001A00 43               [ 1] 4665 	cpl a 
      001A01 E4 00            [ 1] 4666 	and a,(GPIO_ODR,x)
      001A03 20 02            [ 2] 4667 	jra 8$
      001A05 EA 00            [ 1] 4668 5$: or a,(GPIO_ODR,x)
      001A07 E7 00            [ 1] 4669 8$: ld (GPIO_ODR,x),a 
      001A09                       4670 	_drop VSIZE 
      001A09 5B 02            [ 2]    1     addw sp,#VSIZE 
      001A0B 81               [ 4] 4671 	ret
                                   4672 
                                   4673 
                                   4674 ;-----------------------
                                   4675 ; BASIC: STOP
                                   4676 ; stop progam execution  
                                   4677 ; without resetting pointers 
                                   4678 ; the program is resumed
                                   4679 ; with RUN 
                                   4680 ;-------------------------
      001A0C                       4681 stop:
      001A0C 72 00 00 23 02   [ 2] 4682 	btjt flags,#FRUN,2$
      001A11 4F               [ 1] 4683 	clr a
      001A12 81               [ 4] 4684 	ret 
      001A13                       4685 2$:	 
                                   4686 ; create space on cstack to save context 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001A13 AE 1A 3A         [ 2] 4687 	ldw x,#break_point 
      001A16 CD 02 B3         [ 4] 4688 	call puts 
      001A19                       4689 	_drop 2 ;drop return address 
      001A19 5B 02            [ 2]    1     addw sp,#2 
      001A1B                       4690 	_vars CTXT_SIZE ; context size 
      001A1B 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      001A1D CD 16 11         [ 4] 4691 	call save_context 
      001A20 AE 16 90         [ 2] 4692 	ldw x,#tib 
      001A23 CF 00 04         [ 2] 4693 	ldw basicptr,x
      001A26 7F               [ 1] 4694 	clr (x)
      001A27 72 5F 00 03      [ 1] 4695 	clr count  
      001A2B 5F               [ 1] 4696 	clrw x 
      001A2C CF 00 00         [ 2] 4697 	ldw in.w,x
      001A2F 72 11 00 23      [ 1] 4698 	bres flags,#FRUN 
      001A33 72 18 00 23      [ 1] 4699 	bset flags,#FBREAK
      001A37 CC 09 24         [ 2] 4700 	jp interpreter 
      001A3A 0A 62 72 65 61 6B 20  4701 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4702 
                                   4703 ;-----------------------
                                   4704 ; BASIC: NEW
                                   4705 ; from command line only 
                                   4706 ; free program memory
                                   4707 ; and clear variables 
                                   4708 ;------------------------
      001A58                       4709 new: 
      001A58 72 01 00 23 01   [ 2] 4710 	btjf flags,#FRUN,0$ 
      001A5D 81               [ 4] 4711 	ret 
      001A5E                       4712 0$:	
      001A5E CD 06 EA         [ 4] 4713 	call clear_basic 
      001A61 81               [ 4] 4714 	ret 
                                   4715 	 
                                   4716 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4717 ;  file system routines
                                   4718 ;  MCU flash memory from
                                   4719 ;  0x10000-0x27fff is 
                                   4720 ;  used to store BASIC 
                                   4721 ;  program files. 
                                   4722 ;  use 128 bytes sectors
                                   4723 ;  because this is the MCU 
                                   4724 ;  row size.
                                   4725 ;  file entry aligned to row
                                   4726 ;  	name  variable length
                                   4727 ;  	size  2 bytes  
                                   4728 ; 	data  variable length 
                                   4729 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4730 
                                   4731 ;---------------------------
                                   4732 ; fill pad with zeros 
                                   4733 ;--------------------------
      001A62                       4734 zero_pad:
      001A62 AE 16 E0         [ 2] 4735 	ldw x,#pad 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001A65 A6 80            [ 1] 4736 	ld a,#PAD_SIZE 
      001A67 7F               [ 1] 4737 1$:	clr (x)
      001A68 5C               [ 2] 4738 	incw x 
      001A69 4A               [ 1] 4739 	dec a 
      001A6A 26 FB            [ 1] 4740 	jrne 1$
      001A6C 81               [ 4] 4741 	ret 
                                   4742 
                                   4743 ;--------------------------
                                   4744 ; align farptr to BLOCK_SIZE 
                                   4745 ;---------------------------
      001A6D                       4746 row_align:
      001A6D A6 7F            [ 1] 4747 	ld a,#0x7f 
      001A6F C4 00 18         [ 1] 4748 	and a,farptr+2 
      001A72 27 13            [ 1] 4749 	jreq 1$ 
      001A74 CE 00 17         [ 2] 4750 	ldw x,farptr+1 
      001A77 1C 00 80         [ 2] 4751 	addw x,#BLOCK_SIZE 
      001A7A 24 04            [ 1] 4752 	jrnc 0$
      001A7C 72 5C 00 16      [ 1] 4753 	inc farptr 
      001A80 9F               [ 1] 4754 0$: ld a,xl 
      001A81 A4 80            [ 1] 4755 	and a,#0x80
      001A83 97               [ 1] 4756 	ld xl,a
      001A84 CF 00 17         [ 2] 4757 	ldw farptr+1,x  	
      001A87 81               [ 4] 4758 1$:	ret
                                   4759 
                                   4760 ;--------------------
                                   4761 ; input:
                                   4762 ;   X     increment 
                                   4763 ; output:
                                   4764 ;   farptr  incremented 
                                   4765 ;---------------------
      001A88                       4766 incr_farptr:
      001A88 72 BB 00 17      [ 2] 4767 	addw x,farptr+1 
      001A8C 24 04            [ 1] 4768 	jrnc 1$
      001A8E 72 5C 00 16      [ 1] 4769 	inc farptr 
      001A92 CF 00 17         [ 2] 4770 1$:	ldw farptr+1,x  
      001A95 81               [ 4] 4771 	ret 
                                   4772 
                                   4773 ;------------------------------
                                   4774 ; extended flash memory used as FLASH_DRIVE 
                                   4775 ; seek end of used flash drive   
                                   4776 ; starting at 0x10000 address.
                                   4777 ; 4 consecutives 0 bytes signal free space. 
                                   4778 ; input:
                                   4779 ;	none
                                   4780 ; output:
                                   4781 ;   ffree     free_addr| 0 if memory full.
                                   4782 ;------------------------------
      001A96                       4783 seek_fdrive:
                                   4784 ; start scan at 0x10000 address 
      001A96 A6 01            [ 1] 4785 	ld a,#1
      001A98 C7 00 16         [ 1] 4786 	ld farptr,a 
      001A9B 5F               [ 1] 4787 	clrw x 
      001A9C CF 00 17         [ 2] 4788 	ldw farptr+1,x 
      001A9F                       4789 1$:
      001A9F AE 00 03         [ 2] 4790 	ldw x,#3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001AA2 92 AF 00 16      [ 5] 4791 2$:	ldf a,([farptr],x) 
      001AA6 26 05            [ 1] 4792 	jrne 3$
      001AA8 5A               [ 2] 4793 	decw x
      001AA9 2A F7            [ 1] 4794 	jrpl 2$
      001AAB 20 0E            [ 2] 4795 	jra 4$ 
      001AAD AE 00 80         [ 2] 4796 3$:	ldw x,#BLOCK_SIZE 
      001AB0 CD 1A 88         [ 4] 4797 	call incr_farptr
      001AB3 AE 02 80         [ 2] 4798 	ldw x,#0x280  
      001AB6 C3 00 16         [ 2] 4799 	cpw x,farptr
      001AB9 2B E4            [ 1] 4800 	jrmi 1$
      001ABB                       4801 4$: ; copy farptr to ffree	 
      001ABB CE 00 16         [ 2] 4802 	ldw x,farptr 
      001ABE C6 00 18         [ 1] 4803 	ld a,farptr+2 
      001AC1 CF 00 19         [ 2] 4804 	ldw ffree,x 
      001AC4 C7 00 1B         [ 1] 4805 	ld ffree+2,a  
      001AC7 81               [ 4] 4806 	ret 
                                   4807 
                                   4808 ;-----------------------
                                   4809 ; return amount of free 
                                   4810 ; space on flash drive
                                   4811 ; input:
                                   4812 ;   none
                                   4813 ; output:
                                   4814 ;   acc24   free space 
                                   4815 ;-----------------------
      001AC8                       4816 disk_free:
      001AC8 AE 80 00         [ 2] 4817 	ldw x,#0x8000
      001ACB 72 B0 00 1A      [ 2] 4818 	subw x,ffree+1
      001ACF A6 02            [ 1] 4819 	ld a,#2
      001AD1 C2 00 19         [ 1] 4820 	sbc a,ffree 
      001AD4 C7 00 0B         [ 1] 4821 	ld acc24,a 
      001AD7 CF 00 0C         [ 2] 4822 	ldw acc16,x 
      001ADA 81               [ 4] 4823 	ret 
                                   4824 
                                   4825 ;-----------------------
                                   4826 ; compare file name 
                                   4827 ; with name pointed by Y  
                                   4828 ; input:
                                   4829 ;   farptr   file name 
                                   4830 ;   Y        target name 
                                   4831 ; output:
                                   4832 ;   farptr 	 at file_name
                                   4833 ;   X 		 farptr[x] point at size field  
                                   4834 ;   Carry    0|1 no match|match  
                                   4835 ;----------------------
      001ADB                       4836 cmp_name:
      001ADB 5F               [ 1] 4837 	clrw x
      001ADC 92 AF 00 16      [ 5] 4838 1$:	ldf a,([farptr],x)
      001AE0 90 F1            [ 1] 4839 	cp a,(y)
      001AE2 26 08            [ 1] 4840 	jrne 4$
      001AE4 4D               [ 1] 4841 	tnz a 
      001AE5 27 12            [ 1] 4842 	jreq 9$ 
      001AE7 5C               [ 2] 4843     incw x 
      001AE8 90 5C            [ 2] 4844 	incw y 
      001AEA 20 F0            [ 2] 4845 	jra 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001AEC                       4846 4$: ;no match 
      001AEC 4D               [ 1] 4847 	tnz a 
      001AED 27 07            [ 1] 4848 	jreq 5$
      001AEF 5C               [ 2] 4849 	incw x 
      001AF0 92 AF 00 16      [ 5] 4850 	ldf a,([farptr],x)
      001AF4 20 F6            [ 2] 4851 	jra 4$  
      001AF6 5C               [ 2] 4852 5$:	incw x ; farptr[x] point at 'size' field 
      001AF7 98               [ 1] 4853 	rcf 
      001AF8 81               [ 4] 4854 	ret
      001AF9                       4855 9$: ; match  
      001AF9 5C               [ 2] 4856 	incw x  ; farptr[x] at 'size' field 
      001AFA 99               [ 1] 4857 	scf 
      001AFB 81               [ 4] 4858 	ret 
                                   4859 
                                   4860 ;-----------------------
                                   4861 ; search file in 
                                   4862 ; flash memory 
                                   4863 ; input:
                                   4864 ;   Y       file name  
                                   4865 ; output:
                                   4866 ;   farptr  addr at name|0
                                   4867 ;   X       offset to size field
                                   4868 ;-----------------------
                           000001  4869 	FSIZE=1
                           000003  4870 	YSAVE=3
                           000004  4871 	VSIZE=4 
      001AFC                       4872 search_file: 
      001AFC                       4873 	_vars VSIZE
      001AFC 52 04            [ 2]    1     sub sp,#VSIZE 
      001AFE 17 03            [ 2] 4874 	ldw (YSAVE,sp),y  
      001B00 5F               [ 1] 4875 	clrw x 
      001B01 CF 00 17         [ 2] 4876 	ldw farptr+1,x 
      001B04 35 01 00 16      [ 1] 4877 	mov farptr,#1
      001B08                       4878 1$:	
                                   4879 ; check if farptr is after any file 
                                   4880 ; if  0 then so.
      001B08 92 BC 00 16      [ 5] 4881 	ldf a,[farptr]
      001B0C 27 27            [ 1] 4882 	jreq 6$
      001B0E 5F               [ 1] 4883 2$: clrw x 	
      001B0F 16 03            [ 2] 4884 	ldw y,(YSAVE,sp) 
      001B11 CD 1A DB         [ 4] 4885 	call cmp_name
      001B14 25 2F            [ 1] 4886 	jrc 9$
      001B16 92 AF 00 16      [ 5] 4887 	ldf a,([farptr],x)
      001B1A 6B 01            [ 1] 4888 	ld (FSIZE,sp),a 
      001B1C 5C               [ 2] 4889 	incw x 
      001B1D 92 AF 00 16      [ 5] 4890 	ldf a,([farptr],x)
      001B21 6B 02            [ 1] 4891 	ld (FSIZE+1,sp),a 
      001B23 5C               [ 2] 4892 	incw x 
      001B24 72 FB 01         [ 2] 4893 	addw x,(FSIZE,sp) ; skip over file data
      001B27 CD 1A 88         [ 4] 4894 	call incr_farptr
      001B2A CD 1A 6D         [ 4] 4895 	call row_align  
      001B2D AE 02 80         [ 2] 4896 	ldw x,#0x280
      001B30 C3 00 16         [ 2] 4897 	cpw x,farptr 
      001B33 2A D3            [ 1] 4898 	jrpl 1$
      001B35                       4899 6$: ; file not found 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001B35 72 5F 00 16      [ 1] 4900 	clr farptr
      001B39 72 5F 00 17      [ 1] 4901 	clr farptr+1 
      001B3D 72 5F 00 18      [ 1] 4902 	clr farptr+2 
      001B41                       4903 	_drop VSIZE 
      001B41 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B43 98               [ 1] 4904 	rcf
      001B44 81               [ 4] 4905 	ret
      001B45                       4906 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001B45                       4907 	_drop VSIZE 
      001B45 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B47 99               [ 1] 4908 	scf 	
      001B48 81               [ 4] 4909 	ret
                                   4910 
                                   4911 ;--------------------------------
                                   4912 ; BASIC: SAVE "name" 
                                   4913 ; save text program in 
                                   4914 ; flash memory used as permanent
                                   4915 ; storage from address 0x10000-0x27fff 
                                   4916 ;--------------------------------
                           000001  4917 	BSIZE=1
                           000003  4918 	NAMEPTR=3
                           000005  4919 	XSAVE=5
                           000007  4920 	YSAVE=7
                           000008  4921 	VSIZE=8 
      001B49                       4922 save:
      001B49 72 01 00 23 05   [ 2] 4923 	btjf flags,#FRUN,0$ 
      001B4E A6 07            [ 1] 4924 	ld a,#ERR_CMD_ONLY 
      001B50 CC 08 80         [ 2] 4925 	jp tb_error
      001B53                       4926 0$:	 
      001B53 CE 00 1E         [ 2] 4927 	ldw x,txtend 
      001B56 72 B0 00 1C      [ 2] 4928 	subw x,txtbgn
      001B5A 26 0C            [ 1] 4929 	jrne 1$
                                   4930 ; nothing to save 
      001B5C AE 08 19         [ 2] 4931 	ldw x,#err_no_prog 
      001B5F CD 02 B3         [ 4] 4932 	call puts 
      001B62 55 00 03 00 01   [ 1] 4933 	mov in,count 
      001B67 81               [ 4] 4934 	ret  	
      001B68                       4935 1$:	
      001B68                       4936 	_vars VSIZE 
      001B68 52 08            [ 2]    1     sub sp,#VSIZE 
      001B6A 1F 01            [ 2] 4937 	ldw (BSIZE,sp),x 
      001B6C CD 09 70         [ 4] 4938 	call next_token	
      001B6F A1 02            [ 1] 4939 	cp a,#TK_QSTR
      001B71 27 03            [ 1] 4940 	jreq 2$
      001B73 CC 08 7E         [ 2] 4941 	jp syntax_error
      001B76                       4942 2$: 
      001B76 1F 03            [ 2] 4943 	ldw (NAMEPTR,sp),x  
      001B78 CD 01 5C         [ 4] 4944 	call move_prg_to_ram ; move flashing program to 'tib' buffer 
                                   4945 ; check if enough free space 
      001B7B CD 03 92         [ 4] 4946 	call strlen 
      001B7E 1C 00 03         [ 2] 4947 	addw x,#3 
      001B81 72 FB 01         [ 2] 4948 	addw x,(BSIZE,sp)
      001B84 4F               [ 1] 4949 	clr a 
      001B85 72 BB 00 1A      [ 2] 4950 	addw x,ffree+1 
      001B89 C9 00 19         [ 1] 4951 	adc a,ffree 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001B8C A1 02            [ 1] 4952 	cp a,#2
      001B8E 2B 0A            [ 1] 4953 	jrmi 21$
      001B90 A3 80 00         [ 2] 4954 	cpw x,#0x8000
      001B93 2B 05            [ 1] 4955 	jrmi 21$
      001B95 A6 0E            [ 1] 4956 	ld a,#ERR_NO_FSPACE  
      001B97 CC 08 80         [ 2] 4957 	jp tb_error
      001B9A                       4958 21$: 
                                   4959 ; check for existing file of that name 
      001B9A 16 03            [ 2] 4960 	ldw y,(NAMEPTR,sp)	
      001B9C CD 1A FC         [ 4] 4961 	call search_file 
      001B9F 24 05            [ 1] 4962 	jrnc 3$ 
      001BA1 A6 08            [ 1] 4963 	ld a,#ERR_DUPLICATE 
      001BA3 CC 08 80         [ 2] 4964 	jp tb_error 
      001BA6                       4965 3$:	; initialize farptr 
      001BA6 CE 00 19         [ 2] 4966 	ldw x,ffree 
      001BA9 C6 00 1B         [ 1] 4967 	ld a,ffree+2 
      001BAC CF 00 16         [ 2] 4968 	ldw farptr,x 
      001BAF C7 00 18         [ 1] 4969 	ld farptr+2,a 
                                   4970 ;** write file name to row buffer **	
      001BB2 16 03            [ 2] 4971 	ldw y,(NAMEPTR,sp)  
      001BB4 AE 16 E0         [ 2] 4972 	ldw x,#pad 
      001BB7 CD 03 B0         [ 4] 4973 	call strcpy
      001BBA CD 03 92         [ 4] 4974 	call strlen 
      001BBD 5C               [ 2] 4975 	incw  x
      001BBE 1C 16 E0         [ 2] 4976 	addw x,#pad 
                                   4977 ; ** write file size to row buffer 
      001BC1 16 01            [ 2] 4978 	ldw y,(BSIZE,sp)
      001BC3 FF               [ 2] 4979 	ldw (x),y 
      001BC4 1C 00 02         [ 2] 4980 	addw x,#2 
                                   4981 ; ** write file data to row buffer 
      001BC7 90 CE 00 1C      [ 2] 4982 	ldw y,txtbgn 
      001BCB 90 F6            [ 1] 4983 6$:	ld a,(y)
      001BCD 90 5C            [ 2] 4984 	incw y
      001BCF F7               [ 1] 4985 	ld (x),a 
      001BD0 5C               [ 2] 4986 	incw x
      001BD1 90 C3 00 1E      [ 2] 4987 	cpw y,txtend 
      001BD5 27 05            [ 1] 4988 	jreq 12$
      001BD7 A3 17 60         [ 2] 4989 	cpw x,#stack_full 
      001BDA 2B EF            [ 1] 4990 	jrmi 6$
      001BDC                       4991 12$:
      001BDC 17 07            [ 2] 4992 	ldw (YSAVE,sp),y 
      001BDE                       4993 14$: ; zero buffer end 
      001BDE A3 17 60         [ 2] 4994 	cpw x,#stack_full
      001BE1 27 04            [ 1] 4995 	jreq 16$
      001BE3 7F               [ 1] 4996 	clr (x)
      001BE4 5C               [ 2] 4997 	incw x 
      001BE5 20 F7            [ 2] 4998 	jra 14$
      001BE7                       4999 16$:
      001BE7 AE 16 E0         [ 2] 5000 	ldw x,#pad 
      001BEA CD 01 70         [ 4] 5001 	call write_row 
      001BED AE 00 80         [ 2] 5002 	ldw x,#BLOCK_SIZE 
      001BF0 CD 1A 88         [ 4] 5003 	call incr_farptr
      001BF3 AE 16 E0         [ 2] 5004 	ldw x,#pad 
      001BF6 16 07            [ 2] 5005 	ldw y,(YSAVE,sp)
      001BF8 90 C3 00 1E      [ 2] 5006 	cpw y,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001BFC 2B CD            [ 1] 5007 	jrmi 6$
                                   5008 ; save farptr in ffree
      001BFE CE 00 16         [ 2] 5009 	ldw x,farptr 
      001C01 C6 00 18         [ 1] 5010 	ld a,farptr+2 
      001C04 CF 00 19         [ 2] 5011 	ldw ffree,x 
      001C07 C7 00 1B         [ 1] 5012 	ld ffree+2,a
                                   5013 ; print file size 	
      001C0A 1E 01            [ 2] 5014 	ldw x,(BSIZE,sp) 
      001C0C CD 09 C5         [ 4] 5015 	call print_int 
      001C0F                       5016 	_drop VSIZE 
      001C0F 5B 08            [ 2]    1     addw sp,#VSIZE 
      001C11 81               [ 4] 5017 	ret 
                                   5018 
                                   5019 ;----------------------
                                   5020 ; load file in RAM memory
                                   5021 ; input:
                                   5022 ;    farptr point at file size 
                                   5023 ; output:
                                   5024 ;   y point after BASIC program in RAM.
                                   5025 ;------------------------
      001C12                       5026 load_file:
      001C12 CD 1A 88         [ 4] 5027 	call incr_farptr  
      001C15 CD 06 EA         [ 4] 5028 	call clear_basic  
      001C18 5F               [ 1] 5029 	clrw x
      001C19 92 AF 00 16      [ 5] 5030 	ldf a,([farptr],x)
      001C1D 90 95            [ 1] 5031 	ld yh,a 
      001C1F 5C               [ 2] 5032 	incw x  
      001C20 92 AF 00 16      [ 5] 5033 	ldf a,([farptr],x)
      001C24 5C               [ 2] 5034 	incw x 
      001C25 90 97            [ 1] 5035 	ld yl,a 
      001C27 72 B9 00 1C      [ 2] 5036 	addw y,txtbgn
      001C2B 90 CF 00 1E      [ 2] 5037 	ldw txtend,y
      001C2F 90 CE 00 1C      [ 2] 5038 	ldw y,txtbgn
      001C33                       5039 3$:	; load BASIC text 	
      001C33 92 AF 00 16      [ 5] 5040 	ldf a,([farptr],x)
      001C37 90 F7            [ 1] 5041 	ld (y),a 
      001C39 5C               [ 2] 5042 	incw x 
      001C3A 90 5C            [ 2] 5043 	incw y 
      001C3C 90 C3 00 1E      [ 2] 5044 	cpw y,txtend 
      001C40 2B F1            [ 1] 5045 	jrmi 3$
      001C42 81               [ 4] 5046 	ret 
                                   5047 
                                   5048 ;------------------------
                                   5049 ; BASIC: LOAD "file" 
                                   5050 ; load file to RAM 
                                   5051 ; for execution 
                                   5052 ;------------------------
      001C43                       5053 load:
      001C43 72 01 00 23 07   [ 2] 5054 	btjf flags,#FRUN,0$ 
      001C48 27 05            [ 1] 5055 	jreq 0$ 
      001C4A A6 07            [ 1] 5056 	ld a,#ERR_CMD_ONLY 
      001C4C CC 08 80         [ 2] 5057 	jp tb_error 
      001C4F                       5058 0$:	
      001C4F CD 09 70         [ 4] 5059 	call next_token 
      001C52 A1 02            [ 1] 5060 	cp a,#TK_QSTR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001C54 27 03            [ 1] 5061 	jreq 1$
      001C56 CC 08 7E         [ 2] 5062 	jp syntax_error 
      001C59 90 93            [ 1] 5063 1$:	ldw y,x 
      001C5B CD 1A FC         [ 4] 5064 	call search_file 
      001C5E 25 05            [ 1] 5065 	jrc 2$ 
      001C60 A6 09            [ 1] 5066 	ld a,#ERR_NOT_FILE
      001C62 CC 08 80         [ 2] 5067 	jp tb_error  
      001C65                       5068 2$:
      001C65 CD 1C 12         [ 4] 5069 	call load_file
                                   5070 ; print loaded size 	 
      001C68 CE 00 1E         [ 2] 5071 	ldw x,txtend 
      001C6B 72 B0 00 1C      [ 2] 5072 	subw x,txtbgn
      001C6F CD 09 C5         [ 4] 5073 	call print_int 
      001C72 81               [ 4] 5074 	ret 
                                   5075 
                                   5076 ;-----------------------------------
                                   5077 ; BASIC: FORGET ["file_name"] 
                                   5078 ; erase file_name and all others 
                                   5079 ; after it. 
                                   5080 ; without argument erase all files 
                                   5081 ;-----------------------------------
                           000001  5082 	NEW_FREE=1 
                           000003  5083 	VSIZE=3 
      001C73                       5084 forget:
      001C73                       5085 	_vars VSIZE 
      001C73 52 03            [ 2]    1     sub sp,#VSIZE 
      001C75 CD 09 70         [ 4] 5086 	call next_token 
      001C78 A1 00            [ 1] 5087 	cp a,#TK_NONE 
      001C7A 27 20            [ 1] 5088 	jreq 3$ 
      001C7C A1 02            [ 1] 5089 	cp a,#TK_QSTR
      001C7E 27 03            [ 1] 5090 	jreq 1$
      001C80 CC 08 7E         [ 2] 5091 	jp syntax_error
      001C83 90 93            [ 1] 5092 1$: ldw y,x 
      001C85 55 00 03 00 01   [ 1] 5093 	mov in,count 
      001C8A CD 1A FC         [ 4] 5094 	call search_file
      001C8D 25 05            [ 1] 5095 	jrc 2$
      001C8F A6 09            [ 1] 5096 	ld a,#ERR_NOT_FILE 
      001C91 CC 08 80         [ 2] 5097 	jp tb_error 
      001C94                       5098 2$: 
      001C94 CE 00 16         [ 2] 5099 	ldw x,farptr
      001C97 C6 00 18         [ 1] 5100 	ld a,farptr+2
      001C9A 20 0A            [ 2] 5101 	jra 4$ 
      001C9C                       5102 3$: ; forget all files 
      001C9C AE 01 00         [ 2] 5103 	ldw x,#0x100
      001C9F 4F               [ 1] 5104 	clr a 
      001CA0 CF 00 16         [ 2] 5105 	ldw farptr,x 
      001CA3 C7 00 18         [ 1] 5106 	ld farptr+2,a 
      001CA6                       5107 4$:	; save new free address 
      001CA6 1F 01            [ 2] 5108 	ldw (NEW_FREE,sp),x
      001CA8 6B 03            [ 1] 5109 	ld (NEW_FREE+2,sp),a 
      001CAA CD 01 28         [ 4] 5110 	call move_erase_to_ram
      001CAD CD 01 A3         [ 4] 5111 5$: call block_erase 
      001CB0 AE 00 80         [ 2] 5112 	ldw x,#BLOCK_SIZE 
      001CB3 CD 1A 88         [ 4] 5113 	call incr_farptr 
      001CB6 CD 1A 6D         [ 4] 5114 	call row_align 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   5115 ; check if all blocks erased
      001CB9 C6 00 18         [ 1] 5116 	ld a,farptr+2  
      001CBC C0 00 1B         [ 1] 5117 	sub a,ffree+2
      001CBF C6 00 17         [ 1] 5118 	ld a,farptr+1 
      001CC2 C2 00 1A         [ 1] 5119 	sbc a,ffree+1 
      001CC5 C6 00 16         [ 1] 5120 	ld a,farptr 
      001CC8 C2 00 19         [ 1] 5121 	sbc a,ffree 
      001CCB 2B E0            [ 1] 5122 	jrmi 5$ 
      001CCD 7B 03            [ 1] 5123 	ld a,(NEW_FREE+2,sp)
      001CCF 1E 01            [ 2] 5124 	ldw x,(NEW_FREE,sp)
      001CD1 C7 00 1B         [ 1] 5125 	ld ffree+2,a 
      001CD4 CF 00 19         [ 2] 5126 	ldw ffree,x 
      001CD7                       5127 	_drop VSIZE 
      001CD7 5B 03            [ 2]    1     addw sp,#VSIZE 
      001CD9 81               [ 4] 5128 	ret 
                                   5129 
                                   5130 ;----------------------
                                   5131 ; BASIC: DIR 
                                   5132 ; list saved files 
                                   5133 ;----------------------
                           000001  5134 	COUNT=1 ; files counter 
                           000002  5135 	VSIZE=2 
      001CDA                       5136 directory:
      001CDA                       5137 	_vars VSIZE 
      001CDA 52 02            [ 2]    1     sub sp,#VSIZE 
      001CDC 5F               [ 1] 5138 	clrw x 
      001CDD 1F 01            [ 2] 5139 	ldw (COUNT,sp),x 
      001CDF CF 00 17         [ 2] 5140 	ldw farptr+1,x 
      001CE2 35 01 00 16      [ 1] 5141 	mov farptr,#1 
      001CE6                       5142 dir_loop:
      001CE6 5F               [ 1] 5143 	clrw x 
      001CE7 92 AF 00 16      [ 5] 5144 	ldf a,([farptr],x)
      001CEB 27 3B            [ 1] 5145 	jreq 8$ 
      001CED                       5146 1$: ;name loop 	
      001CED 92 AF 00 16      [ 5] 5147 	ldf a,([farptr],x)
      001CF1 27 06            [ 1] 5148 	jreq 2$ 
      001CF3 CD 02 A0         [ 4] 5149 	call putc 
      001CF6 5C               [ 2] 5150 	incw x 
      001CF7 20 F4            [ 2] 5151 	jra 1$
      001CF9 5C               [ 2] 5152 2$: incw x ; skip ending 0. 
      001CFA A6 20            [ 1] 5153 	ld a,#SPACE 
      001CFC CD 02 A0         [ 4] 5154 	call putc 
                                   5155 ; get file size 	
      001CFF 92 AF 00 16      [ 5] 5156 	ldf a,([farptr],x)
      001D03 90 95            [ 1] 5157 	ld yh,a 
      001D05 5C               [ 2] 5158 	incw x 
      001D06 92 AF 00 16      [ 5] 5159 	ldf a,([farptr],x)
      001D0A 5C               [ 2] 5160 	incw x 
      001D0B 90 97            [ 1] 5161 	ld yl,a 
      001D0D 90 89            [ 2] 5162 	pushw y 
      001D0F 72 FB 01         [ 2] 5163 	addw x,(1,sp)
                                   5164 ; skip to next file 
      001D12 CD 1A 88         [ 4] 5165 	call incr_farptr
      001D15 CD 1A 6D         [ 4] 5166 	call row_align
                                   5167 ; print file size 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001D18 85               [ 2] 5168 	popw x ; file size 
      001D19 CD 09 C5         [ 4] 5169 	call print_int 
      001D1C A6 0D            [ 1] 5170 	ld a,#CR 
      001D1E CD 02 A0         [ 4] 5171 	call putc
      001D21 1E 01            [ 2] 5172 	ldw x,(COUNT,sp)
      001D23 5C               [ 2] 5173 	incw x
      001D24 1F 01            [ 2] 5174 	ldw (COUNT,sp),x  
      001D26 20 BE            [ 2] 5175 	jra dir_loop
      001D28                       5176 8$: ; print number of files 
      001D28 1E 01            [ 2] 5177 	ldw x,(COUNT,sp)
      001D2A CD 09 C5         [ 4] 5178 	call print_int 
      001D2D AE 1D 47         [ 2] 5179 	ldw x,#file_count 
      001D30 CD 02 B3         [ 4] 5180 	call puts  
                                   5181 ; print drive free space 	
      001D33 CD 1A C8         [ 4] 5182 	call disk_free
      001D36 5F               [ 1] 5183 	clrw x  
      001D37 35 0A 00 0A      [ 1] 5184 	mov base,#10 
      001D3B CD 09 D5         [ 4] 5185 	call prti24 
      001D3E AE 1D 4F         [ 2] 5186 	ldw x,#drive_free
      001D41 CD 02 B3         [ 4] 5187 	call puts 
      001D44                       5188 	_drop VSIZE 
      001D44 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D46 81               [ 4] 5189 	ret
      001D47 20 66 69 6C 65 73 0A  5190 file_count: .asciz " files\n"
             00
      001D4F 20 62 79 74 65 73 20  5191 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5192 
                                   5193 ;---------------------
                                   5194 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5195 ; write 1 or more byte to FLASH or EEPROM
                                   5196 ; starting at address  
                                   5197 ; input:
                                   5198 ;   expr1  	is address 
                                   5199 ;   expr2,...,exprn   are bytes to write
                                   5200 ; output:
                                   5201 ;   none 
                                   5202 ;---------------------
                           000001  5203 	ADDR=1
                           000002  5204 	VSIZ=2 
      001D5C                       5205 write:
      001D5C                       5206 	_vars VSIZE 
      001D5C 52 02            [ 2]    1     sub sp,#VSIZE 
      001D5E 72 5F 00 16      [ 1] 5207 	clr farptr ; expect 16 bits address 
      001D62 CD 11 DE         [ 4] 5208 	call expression
      001D65 A1 84            [ 1] 5209 	cp a,#TK_INTGR 
      001D67 27 03            [ 1] 5210 	jreq 0$
      001D69 CC 08 7E         [ 2] 5211 	jp syntax_error
      001D6C 1F 01            [ 2] 5212 0$: ldw (ADDR,sp),x 
      001D6E CD 09 70         [ 4] 5213 	call next_token 
      001D71 A1 09            [ 1] 5214 	cp a,#TK_COMMA 
      001D73 27 02            [ 1] 5215 	jreq 1$ 
      001D75 20 19            [ 2] 5216 	jra 9$ 
      001D77 CD 11 DE         [ 4] 5217 1$:	call expression
      001D7A A1 84            [ 1] 5218 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001D7C 27 03            [ 1] 5219 	jreq 2$
      001D7E CC 08 7E         [ 2] 5220 	jp syntax_error
      001D81 9F               [ 1] 5221 2$:	ld a,xl 
      001D82 1E 01            [ 2] 5222 	ldw x,(ADDR,sp) 
      001D84 CF 00 17         [ 2] 5223 	ldw farptr+1,x 
      001D87 5F               [ 1] 5224 	clrw x 
      001D88 CD 01 CD         [ 4] 5225 	call write_byte
      001D8B 1E 01            [ 2] 5226 	ldw x,(ADDR,sp)
      001D8D 5C               [ 2] 5227 	incw x 
      001D8E 20 DC            [ 2] 5228 	jra 0$ 
      001D90                       5229 9$:
      001D90                       5230 	_drop VSIZE
      001D90 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D92 81               [ 4] 5231 	ret 
                                   5232 
                                   5233 
                                   5234 ;---------------------
                                   5235 ;BASIC: CHAR(expr)
                                   5236 ; évaluate expression 
                                   5237 ; and take the 7 least 
                                   5238 ; bits as ASCII character
                                   5239 ;---------------------
      001D93                       5240 char:
      001D93 CD 10 E0         [ 4] 5241 	call func_args 
      001D96 A1 01            [ 1] 5242 	cp a,#1
      001D98 27 03            [ 1] 5243 	jreq 1$
      001D9A CC 08 7E         [ 2] 5244 	jp syntax_error
      001D9D 85               [ 2] 5245 1$:	popw x 
      001D9E 9F               [ 1] 5246 	ld a,xl 
      001D9F A4 7F            [ 1] 5247 	and a,#0x7f 
      001DA1 97               [ 1] 5248 	ld xl,a
      001DA2 A6 03            [ 1] 5249 	ld a,#TK_CHAR
      001DA4 81               [ 4] 5250 	ret
                                   5251 
                                   5252 ;---------------------
                                   5253 ; BASIC: ASC(string|char)
                                   5254 ; extract first character 
                                   5255 ; of string argument 
                                   5256 ; return it as TK_INTGR 
                                   5257 ;---------------------
      001DA5                       5258 ascii:
      001DA5 A6 07            [ 1] 5259 	ld a,#TK_LPAREN
      001DA7 CD 10 D3         [ 4] 5260 	call expect 
      001DAA CD 09 70         [ 4] 5261 	call next_token 
      001DAD A1 02            [ 1] 5262 	cp a,#TK_QSTR 
      001DAF 27 07            [ 1] 5263 	jreq 1$
      001DB1 A1 03            [ 1] 5264 	cp a,#TK_CHAR 
      001DB3 27 06            [ 1] 5265 	jreq 2$ 
      001DB5 CC 08 7E         [ 2] 5266 	jp syntax_error
      001DB8                       5267 1$: 
      001DB8 F6               [ 1] 5268 	ld a,(x) 
      001DB9 5F               [ 1] 5269 	clrw x
      001DBA 97               [ 1] 5270 	ld xl,a 
      001DBB                       5271 2$: 
      001DBB 89               [ 2] 5272 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001DBC A6 08            [ 1] 5273 	ld a,#TK_RPAREN 
      001DBE CD 10 D3         [ 4] 5274 	call expect
      001DC1 85               [ 2] 5275 	popw x 
      001DC2 A6 84            [ 1] 5276 	ld a,#TK_INTGR 
      001DC4 81               [ 4] 5277 	ret 
                                   5278 
                                   5279 ;---------------------
                                   5280 ;BASIC: KEY
                                   5281 ; wait for a character 
                                   5282 ; received from STDIN 
                                   5283 ; input:
                                   5284 ;	none 
                                   5285 ; output:
                                   5286 ;	X 		ASCII character 
                                   5287 ;---------------------
      001DC5                       5288 key:
      001DC5 CD 02 A9         [ 4] 5289 	call getc 
      001DC8 5F               [ 1] 5290 	clrw x 
      001DC9 97               [ 1] 5291 	ld xl,a 
      001DCA A6 84            [ 1] 5292 	ld a,#TK_INTGR
      001DCC 81               [ 4] 5293 	ret
                                   5294 
                                   5295 ;----------------------
                                   5296 ; BASIC: QKEY
                                   5297 ; Return true if there 
                                   5298 ; is a character in 
                                   5299 ; waiting in STDIN 
                                   5300 ; input:
                                   5301 ;  none 
                                   5302 ; output:
                                   5303 ;   X 		0|-1 
                                   5304 ;-----------------------
      001DCD                       5305 qkey:: 
      001DCD 5F               [ 1] 5306 	clrw x 
      001DCE 72 5D 00 25      [ 1] 5307 	tnz rx_char
      001DD2 27 01            [ 1] 5308 	jreq 9$ 
      001DD4 53               [ 2] 5309 	cplw x 
      001DD5 A6 84            [ 1] 5310 9$: ld a,#TK_INTGR
      001DD7 81               [ 4] 5311 	ret 
                                   5312 
                                   5313 ;---------------------
                                   5314 ; BASIC: GPIO(expr,reg)
                                   5315 ; return gpio address 
                                   5316 ; expr {0..8}
                                   5317 ; input:
                                   5318 ;   none 
                                   5319 ; output:
                                   5320 ;   X 		gpio register address
                                   5321 ;----------------------------
                           000003  5322 	PORT=3
                           000001  5323 	REG=1 
                           000004  5324 	VSIZE=4 
      001DD8                       5325 gpio:
      001DD8 CD 10 E0         [ 4] 5326 	call func_args 
      001DDB A1 02            [ 1] 5327 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001DDD 27 03            [ 1] 5328 	jreq 1$
      001DDF CC 08 7E         [ 2] 5329 	jp syntax_error  
      001DE2                       5330 1$:	
      001DE2 1E 03            [ 2] 5331 	ldw x,(PORT,sp)
      001DE4 2B 17            [ 1] 5332 	jrmi bad_port
      001DE6 A3 00 09         [ 2] 5333 	cpw x,#9
      001DE9 2A 12            [ 1] 5334 	jrpl bad_port
      001DEB A6 05            [ 1] 5335 	ld a,#5
      001DED 42               [ 4] 5336 	mul x,a
      001DEE 1C 50 00         [ 2] 5337 	addw x,#GPIO_BASE 
      001DF1 1F 03            [ 2] 5338 	ldw (PORT,sp),x  
      001DF3 1E 01            [ 2] 5339 	ldw x,(REG,sp) 
      001DF5 72 FB 03         [ 2] 5340 	addw x,(PORT,sp)
      001DF8 A6 84            [ 1] 5341 	ld a,#TK_INTGR
      001DFA                       5342 	_drop VSIZE 
      001DFA 5B 04            [ 2]    1     addw sp,#VSIZE 
      001DFC 81               [ 4] 5343 	ret
      001DFD                       5344 bad_port:
      001DFD A6 0A            [ 1] 5345 	ld a,#ERR_BAD_VALUE
      001DFF CC 08 80         [ 2] 5346 	jp tb_error
                                   5347 
                                   5348 
                                   5349 ;-------------------------
                                   5350 ; BASIC: UFLASH 
                                   5351 ; return user flash address
                                   5352 ; input:
                                   5353 ;  none 
                                   5354 ; output:
                                   5355 ;	A		TK_INTGR
                                   5356 ;   X 		user address 
                                   5357 ;---------------------------
      001E02                       5358 uflash:
      001E02 AE 27 80         [ 2] 5359 	ldw x,#user_space 
      001E05 A6 84            [ 1] 5360 	ld a,#TK_INTGR 
      001E07 81               [ 4] 5361 	ret 
                                   5362 
                                   5363 
                                   5364 ;---------------------
                                   5365 ; BASIC: USR(addr[,arg])
                                   5366 ; execute a function written 
                                   5367 ; in binary code.
                                   5368 ; binary fonction should 
                                   5369 ; return token attribute in A 
                                   5370 ; and value in X. 
                                   5371 ; input:
                                   5372 ;   addr	routine address 
                                   5373 ;   arg 	is an optional argument 
                                   5374 ; output:
                                   5375 ;   A 		token attribute 
                                   5376 ;   X       returned value 
                                   5377 ;---------------------
      001E08                       5378 usr:
      001E08 90 89            [ 2] 5379 	pushw y 	
      001E0A CD 10 E0         [ 4] 5380 	call func_args 
      001E0D A1 01            [ 1] 5381 	cp a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001E0F 27 07            [ 1] 5382 	jreq 2$
      001E11 A1 02            [ 1] 5383 	cp a,#2
      001E13 27 03            [ 1] 5384 	jreq 2$  
      001E15 CC 08 7E         [ 2] 5385 	jp syntax_error 
      001E18 90 85            [ 2] 5386 2$: popw y  ; arg|addr 
      001E1A A1 01            [ 1] 5387 	cp a,#1
      001E1C 27 02            [ 1] 5388 	jreq 3$
      001E1E 85               [ 2] 5389 	popw x ; addr
      001E1F 51               [ 1] 5390 	exgw x,y 
      001E20 90 FD            [ 4] 5391 3$: call (y)
      001E22 90 85            [ 2] 5392 	popw y 
      001E24 81               [ 4] 5393 	ret 
                                   5394 
                                   5395 ;------------------------------
                                   5396 ; BASIC: BYE 
                                   5397 ; halt mcu in its lowest power mode 
                                   5398 ; wait for reset or external interrupt
                                   5399 ; do a cold start on wakeup.
                                   5400 ;------------------------------
      001E25                       5401 bye:
      001E25 72 0D 52 30 FB   [ 2] 5402 	btjf UART1_SR,#UART_SR_TC,.
      001E2A 8E               [10] 5403 	halt
      001E2B CC 05 D4         [ 2] 5404 	jp cold_start  
                                   5405 
                                   5406 ;----------------------------------
                                   5407 ; BASIC: AUTORUN ["file_name"] 
                                   5408 ; record in eeprom at adrress AUTORUN_NAME
                                   5409 ; the name of file to load and execute
                                   5410 ; at startup. 
                                   5411 ; empty string delete autorun name 
                                   5412 ; no argument display autorun name  
                                   5413 ; input:
                                   5414 ;   file_name   file to execute 
                                   5415 ; output:
                                   5416 ;   none
                                   5417 ;-----------------------------------
      001E2E                       5418 autorun: 
      001E2E 72 01 00 23 07   [ 2] 5419 	btjf flags,#FRUN,0$ 
      001E33 27 05            [ 1] 5420 	jreq 0$ 
      001E35 A6 07            [ 1] 5421 	ld a,#ERR_CMD_ONLY 
      001E37 CC 08 80         [ 2] 5422 	jp tb_error 
      001E3A                       5423 0$:	
      001E3A CD 09 70         [ 4] 5424 	call next_token
      001E3D 26 08            [ 1] 5425 	jrne 1$
      001E3F AE 40 00         [ 2] 5426 	ldw x,#AUTORUN_NAME
      001E42 CD 02 B3         [ 4] 5427 	call puts 
      001E45 4F               [ 1] 5428 	clr a 
      001E46 81               [ 4] 5429 	ret 
      001E47                       5430 1$:
      001E47 A1 02            [ 1] 5431 	cp a,#TK_QSTR
      001E49 27 03            [ 1] 5432 	jreq 2$
      001E4B CC 08 7E         [ 2] 5433 	jp syntax_error 
      001E4E                       5434 2$:	
      001E4E 7D               [ 1] 5435 	tnz (x) 
      001E4F 26 09            [ 1] 5436 	jrne 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   5437 ; empty string, delete autorun 	
      001E51 CD 06 9D         [ 4] 5438 	call cancel_autorun
      001E54 55 00 03 00 01   [ 1] 5439 	mov in,count 
      001E59 81               [ 4] 5440 	ret 
      001E5A 89               [ 2] 5441 3$:	pushw x 
      001E5B 90 93            [ 1] 5442 	ldw y,x  
      001E5D CD 1A FC         [ 4] 5443 	call search_file 
      001E60 25 05            [ 1] 5444 	jrc 4$ 
      001E62 A6 09            [ 1] 5445 	ld a,#ERR_NOT_FILE
      001E64 CC 08 80         [ 2] 5446 	jp tb_error  
      001E67                       5447 4$: 
      001E67 55 00 03 00 01   [ 1] 5448 	mov in,count 
      001E6C 72 5F 00 16      [ 1] 5449 	clr farptr 
      001E70 AE 40 00         [ 2] 5450 	ldw x,#AUTORUN_NAME
      001E73 CF 00 17         [ 2] 5451 	ldw farptr+1,x 
      001E76 1E 01            [ 2] 5452 	ldw x,(1,sp)  
      001E78 CD 03 92         [ 4] 5453 	call strlen  ; return length in X 
      001E7B 5C               [ 2] 5454 	incw x 
      001E7C 90 85            [ 2] 5455 	popw y 
      001E7E 89               [ 2] 5456 	pushw x 
      001E7F 5F               [ 1] 5457 	clrw x 
      001E80 CD 02 42         [ 4] 5458 	call write_block 
      001E83                       5459 	_drop 2 
      001E83 5B 02            [ 2]    1     addw sp,#2 
      001E85 81               [ 4] 5460 	ret 
                                   5461 
                                   5462 ;----------------------------------
                                   5463 ; BASIC: SLEEP 
                                   5464 ; halt mcu until reset or external
                                   5465 ; interrupt.
                                   5466 ; Resume progam after SLEEP command
                                   5467 ;----------------------------------
      001E86                       5468 sleep:
      001E86 72 0D 52 30 FB   [ 2] 5469 	btjf UART1_SR,#UART_SR_TC,.
      001E8B 72 16 00 23      [ 1] 5470 	bset flags,#FSLEEP
      001E8F 8E               [10] 5471 	halt 
      001E90 81               [ 4] 5472 	ret 
                                   5473 
                                   5474 ;-------------------------------
                                   5475 ; BASIC: PAUSE expr 
                                   5476 ; suspend execution for n msec.
                                   5477 ; input:
                                   5478 ;	none
                                   5479 ; output:
                                   5480 ;	none 
                                   5481 ;------------------------------
      001E91                       5482 pause:
      001E91 CD 11 DE         [ 4] 5483 	call expression
      001E94 A1 84            [ 1] 5484 	cp a,#TK_INTGR
      001E96 27 03            [ 1] 5485 	jreq pause02 
      001E98 CC 08 7E         [ 2] 5486 	jp syntax_error
      001E9B                       5487 pause02: 
      001E9B 5D               [ 2] 5488 1$: tnzw x 
      001E9C 27 04            [ 1] 5489 	jreq 2$
      001E9E 8F               [10] 5490 	wfi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001E9F 5A               [ 2] 5491 	decw x 
      001EA0 26 F9            [ 1] 5492 	jrne 1$
      001EA2 4F               [ 1] 5493 2$:	clr a 
      001EA3 81               [ 4] 5494 	ret 
                                   5495 
                                   5496 ;------------------------------
                                   5497 ; BASIC: AWU expr
                                   5498 ; halt mcu for 'expr' milliseconds
                                   5499 ; use Auto wakeup peripheral
                                   5500 ; all oscillators stopped except LSI
                                   5501 ; range: 1ms - 511ms
                                   5502 ; input:
                                   5503 ;  none
                                   5504 ; output:
                                   5505 ;  none:
                                   5506 ;------------------------------
      001EA4                       5507 awu:
      001EA4 CD 11 DE         [ 4] 5508   call expression
      001EA7 A1 84            [ 1] 5509   cp a,#TK_INTGR
      001EA9 27 03            [ 1] 5510   jreq awu02
      001EAB CC 08 7E         [ 2] 5511   jp syntax_error
      001EAE                       5512 awu02:
      001EAE A3 14 00         [ 2] 5513   cpw x,#5120
      001EB1 2B 0C            [ 1] 5514   jrmi 1$ 
      001EB3 35 0F 50 F2      [ 1] 5515   mov AWU_TBR,#15 
      001EB7 A6 1E            [ 1] 5516   ld a,#30
      001EB9 62               [ 2] 5517   div x,a
      001EBA A6 10            [ 1] 5518   ld a,#16
      001EBC 62               [ 2] 5519   div x,a 
      001EBD 20 1E            [ 2] 5520   jra 4$
      001EBF                       5521 1$: 
      001EBF A3 08 00         [ 2] 5522   cpw x,#2048
      001EC2 2B 09            [ 1] 5523   jrmi 2$ 
      001EC4 35 0E 50 F2      [ 1] 5524   mov AWU_TBR,#14
      001EC8 A6 50            [ 1] 5525   ld a,#80
      001ECA 62               [ 2] 5526   div x,a 
      001ECB 20 10            [ 2] 5527   jra 4$   
      001ECD                       5528 2$:
      001ECD 35 07 50 F2      [ 1] 5529   mov AWU_TBR,#7
      001ED1                       5530 3$:  
                                   5531 ; while X > 64  divide by 2 and increment AWU_TBR 
      001ED1 A3 00 40         [ 2] 5532   cpw x,#64 
      001ED4 23 07            [ 2] 5533   jrule 4$ 
      001ED6 72 5C 50 F2      [ 1] 5534   inc AWU_TBR 
      001EDA 54               [ 2] 5535   srlw x 
      001EDB 20 F4            [ 2] 5536   jra 3$ 
      001EDD                       5537 4$:
      001EDD 9F               [ 1] 5538   ld a, xl
      001EDE 4A               [ 1] 5539   dec a 
      001EDF 27 01            [ 1] 5540   jreq 5$
      001EE1 4A               [ 1] 5541   dec a 	
      001EE2                       5542 5$: 
      001EE2 A4 3E            [ 1] 5543   and a,#0x3e 
      001EE4 C7 50 F1         [ 1] 5544   ld AWU_APR,a 
      001EE7 72 18 50 F0      [ 1] 5545   bset AWU_CSR,#AWU_CSR_AWUEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001EEB 8E               [10] 5546   halt 
                                   5547 
      001EEC 81               [ 4] 5548   ret 
                                   5549 
                                   5550 ;------------------------------
                                   5551 ; BASIC: TICKS
                                   5552 ; return msec ticks counter value 
                                   5553 ; input:
                                   5554 ; 	none 
                                   5555 ; output:
                                   5556 ;	X 		TK_INTGR
                                   5557 ;-------------------------------
      001EED                       5558 get_ticks:
      001EED CE 00 0E         [ 2] 5559 	ldw x,ticks 
      001EF0 A6 84            [ 1] 5560 	ld a,#TK_INTGR
      001EF2 81               [ 4] 5561 	ret 
                                   5562 
                                   5563 
                                   5564 
                                   5565 ;------------------------------
                                   5566 ; BASIC: ABS(expr)
                                   5567 ; return absolute value of expr.
                                   5568 ; input:
                                   5569 ;   none
                                   5570 ; output:
                                   5571 ;   X     	positive integer
                                   5572 ;-------------------------------
      001EF3                       5573 abs:
      001EF3 CD 10 E0         [ 4] 5574 	call func_args 
      001EF6 A1 01            [ 1] 5575 	cp a,#1 
      001EF8 27 03            [ 1] 5576 	jreq 0$ 
      001EFA CC 08 7E         [ 2] 5577 	jp syntax_error
      001EFD                       5578 0$:  
      001EFD 85               [ 2] 5579     popw x   
      001EFE 9E               [ 1] 5580 	ld a,xh 
      001EFF A5 80            [ 1] 5581 	bcp a,#0x80 
      001F01 27 01            [ 1] 5582 	jreq 2$ 
      001F03 50               [ 2] 5583 	negw x 
      001F04 A6 84            [ 1] 5584 2$: ld a,#TK_INTGR 
      001F06 81               [ 4] 5585 	ret 
                                   5586 
                                   5587 ;------------------------------
                                   5588 ; BASIC: AND(expr1,expr2)
                                   5589 ; Apply bit AND relation between
                                   5590 ; the 2 arguments, i.e expr1 & expr2 
                                   5591 ; output:
                                   5592 ; 	A 		TK_INTGR
                                   5593 ;   X 		result 
                                   5594 ;------------------------------
      001F07                       5595 bit_and:
      001F07 CD 10 E0         [ 4] 5596 	call func_args 
      001F0A A1 02            [ 1] 5597 	cp a,#2
      001F0C 27 03            [ 1] 5598 	jreq 1$
      001F0E CC 08 7E         [ 2] 5599 	jp syntax_error 
      001F11 85               [ 2] 5600 1$:	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001F12 9E               [ 1] 5601 	ld a,xh 
      001F13 14 01            [ 1] 5602 	and a,(1,sp)
      001F15 95               [ 1] 5603 	ld xh,a 
      001F16 9F               [ 1] 5604 	ld a,xl
      001F17 14 02            [ 1] 5605 	and a,(2,sp)
      001F19 97               [ 1] 5606 	ld xl,a 
      001F1A                       5607 	_drop 2 
      001F1A 5B 02            [ 2]    1     addw sp,#2 
      001F1C A6 84            [ 1] 5608 	ld a,#TK_INTGR
      001F1E 81               [ 4] 5609 	ret
                                   5610 
                                   5611 ;------------------------------
                                   5612 ; BASIC: OR(expr1,expr2)
                                   5613 ; Apply bit OR relation between
                                   5614 ; the 2 arguments, i.e expr1 | expr2 
                                   5615 ; output:
                                   5616 ; 	A 		TK_INTGR
                                   5617 ;   X 		result 
                                   5618 ;------------------------------
      001F1F                       5619 bit_or:
      001F1F CD 10 E0         [ 4] 5620 	call func_args 
      001F22 A1 02            [ 1] 5621 	cp a,#2
      001F24 27 03            [ 1] 5622 	jreq 1$
      001F26 CC 08 7E         [ 2] 5623 	jp syntax_error 
      001F29                       5624 1$: 
      001F29 85               [ 2] 5625 	popw x 
      001F2A 9E               [ 1] 5626 	ld a,xh 
      001F2B 1A 01            [ 1] 5627 	or a,(1,sp)
      001F2D 95               [ 1] 5628 	ld xh,a 
      001F2E 9F               [ 1] 5629 	ld a,xl 
      001F2F 1A 02            [ 1] 5630 	or a,(2,sp)
      001F31 97               [ 1] 5631 	ld xl,a 
      001F32                       5632 	_drop 2 
      001F32 5B 02            [ 2]    1     addw sp,#2 
      001F34 A6 84            [ 1] 5633 	ld a,#TK_INTGR 
      001F36 81               [ 4] 5634 	ret
                                   5635 
                                   5636 ;------------------------------
                                   5637 ; BASIC: XOR(expr1,expr2)
                                   5638 ; Apply bit XOR relation between
                                   5639 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5640 ; output:
                                   5641 ; 	A 		TK_INTGR
                                   5642 ;   X 		result 
                                   5643 ;------------------------------
      001F37                       5644 bit_xor:
      001F37 CD 10 E0         [ 4] 5645 	call func_args 
      001F3A A1 02            [ 1] 5646 	cp a,#2
      001F3C 27 03            [ 1] 5647 	jreq 1$
      001F3E CC 08 7E         [ 2] 5648 	jp syntax_error 
      001F41                       5649 1$: 
      001F41 85               [ 2] 5650 	popw x 
      001F42 9E               [ 1] 5651 	ld a,xh 
      001F43 18 01            [ 1] 5652 	xor a,(1,sp)
      001F45 95               [ 1] 5653 	ld xh,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001F46 9F               [ 1] 5654 	ld a,xl 
      001F47 18 02            [ 1] 5655 	xor a,(2,sp)
      001F49 97               [ 1] 5656 	ld xl,a 
      001F4A                       5657 	_drop 2 
      001F4A 5B 02            [ 2]    1     addw sp,#2 
      001F4C A6 84            [ 1] 5658 	ld a,#TK_INTGR 
      001F4E 81               [ 4] 5659 	ret 
                                   5660 
                                   5661 ;------------------------------
                                   5662 ; BASIC: LSHIFT(expr1,expr2)
                                   5663 ; logical shift left expr1 by 
                                   5664 ; expr2 bits 
                                   5665 ; output:
                                   5666 ; 	A 		TK_INTGR
                                   5667 ;   X 		result 
                                   5668 ;------------------------------
      001F4F                       5669 lshift:
      001F4F CD 10 E0         [ 4] 5670 	call func_args
      001F52 A1 02            [ 1] 5671 	cp a,#2 
      001F54 27 03            [ 1] 5672 	jreq 1$
      001F56 CC 08 7E         [ 2] 5673 	jp syntax_error
      001F59 90 85            [ 2] 5674 1$: popw y   
      001F5B 85               [ 2] 5675 	popw x 
      001F5C 90 5D            [ 2] 5676 	tnzw y 
      001F5E 27 05            [ 1] 5677 	jreq 4$
      001F60 58               [ 2] 5678 2$:	sllw x 
      001F61 90 5A            [ 2] 5679 	decw y 
      001F63 26 FB            [ 1] 5680 	jrne 2$
      001F65                       5681 4$:  
      001F65 A6 84            [ 1] 5682 	ld a,#TK_INTGR
      001F67 81               [ 4] 5683 	ret
                                   5684 
                                   5685 ;------------------------------
                                   5686 ; BASIC: RSHIFT(expr1,expr2)
                                   5687 ; logical shift right expr1 by 
                                   5688 ; expr2 bits.
                                   5689 ; output:
                                   5690 ; 	A 		TK_INTGR
                                   5691 ;   X 		result 
                                   5692 ;------------------------------
      001F68                       5693 rshift:
      001F68 CD 10 E0         [ 4] 5694 	call func_args
      001F6B A1 02            [ 1] 5695 	cp a,#2 
      001F6D 27 03            [ 1] 5696 	jreq 1$
      001F6F CC 08 7E         [ 2] 5697 	jp syntax_error
      001F72 90 85            [ 2] 5698 1$: popw y  
      001F74 85               [ 2] 5699 	popw x
      001F75 90 5D            [ 2] 5700 	tnzw y 
      001F77 27 05            [ 1] 5701 	jreq 4$
      001F79 54               [ 2] 5702 2$:	srlw x 
      001F7A 90 5A            [ 2] 5703 	decw y 
      001F7C 26 FB            [ 1] 5704 	jrne 2$
      001F7E                       5705 4$:  
      001F7E A6 84            [ 1] 5706 	ld a,#TK_INTGR
      001F80 81               [ 4] 5707 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                   5708 
                                   5709 ;--------------------------
                                   5710 ; BASIC: FCPU integer
                                   5711 ; set CPU frequency 
                                   5712 ;-------------------------- 
                                   5713 
      001F81                       5714 fcpu:
      001F81 A6 84            [ 1] 5715 	ld a,#TK_INTGR
      001F83 CD 10 D3         [ 4] 5716 	call expect 
      001F86 9F               [ 1] 5717 	ld a,xl 
      001F87 A4 07            [ 1] 5718 	and a,#7 
      001F89 C7 50 C6         [ 1] 5719 	ld CLK_CKDIVR,a 
      001F8C 81               [ 4] 5720 	ret 
                                   5721 
                                   5722 ;------------------------------
                                   5723 ; BASIC: PMODE pin#, mode 
                                   5724 ; Arduino pin. 
                                   5725 ; define pin as input or output
                                   5726 ; pin#: {0..15}
                                   5727 ; mode: INPUT|OUTPUT  
                                   5728 ;------------------------------
                           000001  5729 	PINNO=1
                           000001  5730 	VSIZE=1
      001F8D                       5731 pin_mode:
      001F8D                       5732 	_vars VSIZE 
      001F8D 52 01            [ 2]    1     sub sp,#VSIZE 
      001F8F CD 10 E5         [ 4] 5733 	call arg_list 
      001F92 A1 02            [ 1] 5734 	cp a,#2 
      001F94 27 03            [ 1] 5735 	jreq 1$
      001F96 CC 08 7E         [ 2] 5736 	jp syntax_error 
      001F99 90 85            [ 2] 5737 1$: popw y ; mode 
      001F9B 85               [ 2] 5738 	popw x ; Dx pin 
      001F9C CD 1F CE         [ 4] 5739 	call select_pin 
      001F9F 6B 01            [ 1] 5740 	ld (PINNO,sp),a  
      001FA1 A6 01            [ 1] 5741 	ld a,#1 
      001FA3 0D 01            [ 1] 5742 	tnz (PINNO,sp)
      001FA5 27 0B            [ 1] 5743 	jreq 4$
      001FA7 48               [ 1] 5744 2$:	sll a 
      001FA8 0A 01            [ 1] 5745 	dec (PINNO,sp)
      001FAA 26 FB            [ 1] 5746 	jrne 2$ 
      001FAC 6B 01            [ 1] 5747 	ld (PINNO,sp),a
      001FAE EA 03            [ 1] 5748 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      001FB0 E7 03            [ 1] 5749 	ld (GPIO_CR1,x),a 
      001FB2 90 A3 00 01      [ 2] 5750 4$:	cpw y,#OUTP 
      001FB6 27 07            [ 1] 5751 	jreq 6$
                                   5752 ; input mode
      001FB8 7B 01            [ 1] 5753 	ld a,(PINNO,sp)
      001FBA 43               [ 1] 5754 	cpl a 
      001FBB E4 02            [ 1] 5755 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001FBD 20 0A            [ 2] 5756 	jra 9$
      001FBF                       5757 6$: ;output mode  
      001FBF 7B 01            [ 1] 5758 	ld a,(PINNO,sp)
      001FC1 EA 04            [ 1] 5759 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      001FC3 E7 04            [ 1] 5760 	ld (GPIO_CR2,x),a 
      001FC5 7B 01            [ 1] 5761 	ld a,(PINNO,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001FC7 EA 02            [ 1] 5762 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001FC9 E7 02            [ 1] 5763 9$:	ld (GPIO_DDR,x),a 
      001FCB                       5764 	_drop VSIZE 
      001FCB 5B 01            [ 2]    1     addw sp,#VSIZE 
      001FCD 81               [ 4] 5765 	ret
                                   5766 
                                   5767 ;------------------------
                                   5768 ; select Arduino pin 
                                   5769 ; input:
                                   5770 ;   X 	 {0..15} Arduino Dx 
                                   5771 ; output:
                                   5772 ;   A     stm8s208 pin 
                                   5773 ;   X     base address s208 GPIO port 
                                   5774 ;---------------------------
      001FCE                       5775 select_pin:
      001FCE 58               [ 2] 5776 	sllw x 
      001FCF 1C 1F DE         [ 2] 5777 	addw x,#arduino_to_8s208 
      001FD2 FE               [ 2] 5778 	ldw x,(x)
      001FD3 9F               [ 1] 5779 	ld a,xl 
      001FD4 88               [ 1] 5780 	push a 
      001FD5 5E               [ 1] 5781 	swapw x 
      001FD6 A6 05            [ 1] 5782 	ld a,#5 
      001FD8 42               [ 4] 5783 	mul x,a 
      001FD9 1C 50 00         [ 2] 5784 	addw x,#GPIO_BASE 
      001FDC 84               [ 1] 5785 	pop a 
      001FDD 81               [ 4] 5786 	ret 
                                   5787 ; translation from Arduino D0..D15 to stm8s208rb 
      001FDE                       5788 arduino_to_8s208:
      001FDE 03 06                 5789 .byte 3,6 ; D0 
      001FE0 03 05                 5790 .byte 3,5 ; D1 
      001FE2 04 00                 5791 .byte 4,0 ; D2 
      001FE4 02 01                 5792 .byte 2,1 ; D3
      001FE6 06 00                 5793 .byte 6,0 ; D4
      001FE8 02 02                 5794 .byte 2,2 ; D5
      001FEA 02 03                 5795 .byte 2,3 ; D6
      001FEC 03 01                 5796 .byte 3,1 ; D7
      001FEE 03 03                 5797 .byte 3,3 ; D8
      001FF0 02 04                 5798 .byte 2,4 ; D9
      001FF2 04 05                 5799 .byte 4,5 ; D10
      001FF4 02 06                 5800 .byte 2,6 ; D11
      001FF6 02 07                 5801 .byte 2,7 ; D12
      001FF8 02 05                 5802 .byte 2,5 ; D13
      001FFA 04 02                 5803 .byte 4,2 ; D14
      001FFC 04 01                 5804 .byte 4,1 ; D15
                                   5805 
                                   5806 
                                   5807 ;------------------------------
                                   5808 ; BASIC: RND(expr)
                                   5809 ; return random number 
                                   5810 ; between 1 and expr inclusive
                                   5811 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5812 ; input:
                                   5813 ; 	none 
                                   5814 ; output:
                                   5815 ;	X 		random positive integer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   5816 ;------------------------------
      001FFE                       5817 random:
      001FFE CD 10 E0         [ 4] 5818 	call func_args 
      002001 A1 01            [ 1] 5819 	cp a,#1
      002003 27 03            [ 1] 5820 	jreq 1$
      002005 CC 08 7E         [ 2] 5821 	jp syntax_error
      002008                       5822 1$:  
      002008 A6 80            [ 1] 5823 	ld a,#0x80 
      00200A 15 01            [ 1] 5824 	bcp a,(1,sp)
      00200C 27 05            [ 1] 5825 	jreq 2$
      00200E A6 0A            [ 1] 5826 	ld a,#ERR_BAD_VALUE
      002010 CC 08 80         [ 2] 5827 	jp tb_error
      002013                       5828 2$: 
                                   5829 ; acc16=(x<<5)^x 
      002013 CE 00 12         [ 2] 5830 	ldw x,seedx 
      002016 58               [ 2] 5831 	sllw x 
      002017 58               [ 2] 5832 	sllw x 
      002018 58               [ 2] 5833 	sllw x 
      002019 58               [ 2] 5834 	sllw x 
      00201A 58               [ 2] 5835 	sllw x 
      00201B 9E               [ 1] 5836 	ld a,xh 
      00201C C8 00 12         [ 1] 5837 	xor a,seedx 
      00201F C7 00 0C         [ 1] 5838 	ld acc16,a 
      002022 9F               [ 1] 5839 	ld a,xl 
      002023 C8 00 13         [ 1] 5840 	xor a,seedx+1 
      002026 C7 00 0D         [ 1] 5841 	ld acc8,a 
                                   5842 ; seedx=seedy 
      002029 CE 00 14         [ 2] 5843 	ldw x,seedy 
      00202C CF 00 12         [ 2] 5844 	ldw seedx,x  
                                   5845 ; seedy=seedy^(seedy>>1)
      00202F 90 54            [ 2] 5846 	srlw y 
      002031 90 9E            [ 1] 5847 	ld a,yh 
      002033 C8 00 14         [ 1] 5848 	xor a,seedy 
      002036 C7 00 14         [ 1] 5849 	ld seedy,a  
      002039 90 9F            [ 1] 5850 	ld a,yl 
      00203B C8 00 15         [ 1] 5851 	xor a,seedy+1 
      00203E C7 00 15         [ 1] 5852 	ld seedy+1,a 
                                   5853 ; acc16>>3 
      002041 CE 00 0C         [ 2] 5854 	ldw x,acc16 
      002044 54               [ 2] 5855 	srlw x 
      002045 54               [ 2] 5856 	srlw x 
      002046 54               [ 2] 5857 	srlw x 
                                   5858 ; x=acc16^x 
      002047 9E               [ 1] 5859 	ld a,xh 
      002048 C8 00 0C         [ 1] 5860 	xor a,acc16 
      00204B 95               [ 1] 5861 	ld xh,a 
      00204C 9F               [ 1] 5862 	ld a,xl 
      00204D C8 00 0D         [ 1] 5863 	xor a,acc8 
      002050 97               [ 1] 5864 	ld xl,a 
                                   5865 ; seedy=x^seedy 
      002051 C8 00 15         [ 1] 5866 	xor a,seedy+1
      002054 97               [ 1] 5867 	ld xl,a 
      002055 9E               [ 1] 5868 	ld a,xh 
      002056 C8 00 14         [ 1] 5869 	xor a,seedy
      002059 95               [ 1] 5870 	ld xh,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00205A CF 00 14         [ 2] 5871 	ldw seedy,x 
                                   5872 ; return seedy modulo expr + 1 
      00205D 90 85            [ 2] 5873 	popw y 
      00205F 65               [ 2] 5874 	divw x,y 
      002060 93               [ 1] 5875 	ldw x,y 
      002061 5C               [ 2] 5876 	incw x 
      002062                       5877 10$:
      002062 A6 84            [ 1] 5878 	ld a,#TK_INTGR
      002064 81               [ 4] 5879 	ret 
                                   5880 
                                   5881 ;---------------------------------
                                   5882 ; BASIC: WORDS 
                                   5883 ; affiche la listes des mots du
                                   5884 ; dictionnaire ainsi que le nombre
                                   5885 ; de mots.
                                   5886 ;---------------------------------
                           000001  5887 	WLEN=1 ; word length
                           000002  5888 	LLEN=2 ; character sent to console
                           000003  5889 	WCNT=3 ; count words printed 
                           000003  5890 	VSIZE=3 
      002065                       5891 words:
      002065                       5892 	_vars VSIZE
      002065 52 03            [ 2]    1     sub sp,#VSIZE 
      002067 0F 02            [ 1] 5893 	clr (LLEN,sp)
      002069 0F 03            [ 1] 5894 	clr (WCNT,sp)
      00206B 90 AE 27 4C      [ 2] 5895 	ldw y,#kword_dict+2
      00206F 93               [ 1] 5896 0$:	ldw x,y
      002070 F6               [ 1] 5897 	ld a,(x)
      002071 A4 0F            [ 1] 5898 	and a,#15 
      002073 6B 01            [ 1] 5899 	ld (WLEN,sp),a 
      002075 0C 03            [ 1] 5900 	inc (WCNT,sp)
      002077 5C               [ 2] 5901 1$:	incw x 
      002078 F6               [ 1] 5902 	ld a,(x)
      002079 CD 02 A0         [ 4] 5903 	call putc 
      00207C 0C 02            [ 1] 5904 	inc (LLEN,sp)
      00207E 0A 01            [ 1] 5905 	dec (WLEN,sp)
      002080 26 F5            [ 1] 5906 	jrne 1$
      002082 A6 46            [ 1] 5907 	ld a,#70
      002084 11 02            [ 1] 5908 	cp a,(LLEN,sp)
      002086 2B 09            [ 1] 5909 	jrmi 2$   
      002088 A6 20            [ 1] 5910 	ld a,#SPACE 
      00208A CD 02 A0         [ 4] 5911 	call putc 
      00208D 0C 02            [ 1] 5912 	inc (LLEN,sp) 
      00208F 20 07            [ 2] 5913 	jra 3$
      002091 A6 0D            [ 1] 5914 2$: ld a,#CR 
      002093 CD 02 A0         [ 4] 5915 	call putc 
      002096 0F 02            [ 1] 5916 	clr (LLEN,sp)
      002098 72 A2 00 02      [ 2] 5917 3$:	subw y,#2 
      00209C 90 FE            [ 2] 5918 	ldw y,(y)
      00209E 26 CF            [ 1] 5919 	jrne 0$ 
      0020A0 A6 0D            [ 1] 5920 	ld a,#CR 
      0020A2 CD 02 A0         [ 4] 5921 	call putc  
      0020A5 5F               [ 1] 5922 	clrw x 
      0020A6 7B 03            [ 1] 5923 	ld a,(WCNT,sp)
      0020A8 97               [ 1] 5924 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      0020A9 CD 09 C5         [ 4] 5925 	call print_int 
      0020AC AE 20 B5         [ 2] 5926 	ldw x,#words_count_msg
      0020AF CD 02 B3         [ 4] 5927 	call puts 
      0020B2                       5928 	_drop VSIZE 
      0020B2 5B 03            [ 2]    1     addw sp,#VSIZE 
      0020B4 81               [ 4] 5929 	ret 
      0020B5 20 77 6F 72 64 73 20  5930 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   5931 
                                   5932 
                                   5933 ;-----------------------------
                                   5934 ; BASIC: TIMER expr 
                                   5935 ; initialize count down timer 
                                   5936 ;-----------------------------
      0020CB                       5937 set_timer:
      0020CB CD 10 E5         [ 4] 5938 	call arg_list
      0020CE A1 01            [ 1] 5939 	cp a,#1 
      0020D0 27 03            [ 1] 5940 	jreq 1$
      0020D2 CC 08 7E         [ 2] 5941 	jp syntax_error
      0020D5                       5942 1$: 
      0020D5 85               [ 2] 5943 	popw x 
      0020D6 CF 00 10         [ 2] 5944 	ldw timer,x 
      0020D9 81               [ 4] 5945 	ret 
                                   5946 
                                   5947 ;------------------------------
                                   5948 ; BASIC: TIMEOUT 
                                   5949 ; return state of timer 
                                   5950 ;------------------------------
      0020DA                       5951 timeout:
      0020DA CE 00 10         [ 2] 5952 	ldw x,timer 
      0020DD                       5953 logical_complement:
      0020DD 53               [ 2] 5954 	cplw x 
      0020DE A3 FF FF         [ 2] 5955 	cpw x,#-1
      0020E1 27 01            [ 1] 5956 	jreq 2$
      0020E3 5F               [ 1] 5957 	clrw x 
      0020E4 A6 84            [ 1] 5958 2$:	ld a,#TK_INTGR
      0020E6 81               [ 4] 5959 	ret 
                                   5960 
                                   5961 ;--------------------------------
                                   5962 ; BASIC NOT(expr) 
                                   5963 ; return logical complement of expr
                                   5964 ;--------------------------------
      0020E7                       5965 func_not:
      0020E7 CD 10 E0         [ 4] 5966 	call func_args  
      0020EA A1 01            [ 1] 5967 	cp a,#1
      0020EC 27 03            [ 1] 5968 	jreq 1$
      0020EE CC 08 7E         [ 2] 5969 	jp syntax_error
      0020F1 85               [ 2] 5970 1$:	popw x 
      0020F2 20 E9            [ 2] 5971 	jra logical_complement
                                   5972 
                                   5973 
                                   5974 
                                   5975 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                   5976 ; BASIC: IWDGEN expr1 
                                   5977 ; enable independant watchdog timer
                                   5978 ; expr1 is delay in multiple of 62.5µsec
                                   5979 ; expr1 -> {1..16383}
                                   5980 ;-----------------------------------
      0020F4                       5981 enable_iwdg:
      0020F4 CD 10 E5         [ 4] 5982 	call arg_list
      0020F7 A1 01            [ 1] 5983 	cp a,#1 
      0020F9 27 03            [ 1] 5984 	jreq 1$
      0020FB CC 08 7E         [ 2] 5985 	jp syntax_error 
      0020FE 85               [ 2] 5986 1$: popw x 
      0020FF 4B 00            [ 1] 5987 	push #0
      002101 35 CC 50 E0      [ 1] 5988 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002105 9E               [ 1] 5989 	ld a,xh 
      002106 A4 3F            [ 1] 5990 	and a,#0x3f
      002108 95               [ 1] 5991 	ld xh,a  
      002109 A3 00 FF         [ 2] 5992 2$:	cpw x,#255
      00210C 23 06            [ 2] 5993 	jrule 3$
      00210E 0C 01            [ 1] 5994 	inc (1,sp)
      002110 98               [ 1] 5995 	rcf 
      002111 56               [ 2] 5996 	rrcw x 
      002112 20 F5            [ 2] 5997 	jra 2$
      002114 35 55 50 E0      [ 1] 5998 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002118 84               [ 1] 5999 	pop a  
      002119 C7 50 E1         [ 1] 6000 	ld IWDG_PR,a 
      00211C 9F               [ 1] 6001 	ld a,xl
      00211D 4A               [ 1] 6002 	dec a 
      00211E 35 55 50 E0      [ 1] 6003 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002122 C7 50 E2         [ 1] 6004 	ld IWDG_RLR,a 
      002125 35 AA 50 E0      [ 1] 6005 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002129 81               [ 4] 6006 	ret 
                                   6007 
                                   6008 
                                   6009 ;-----------------------------------
                                   6010 ; BASIC: IWDGREF  
                                   6011 ; refresh independant watchdog count down 
                                   6012 ; timer before it reset MCU. 
                                   6013 ;-----------------------------------
      00212A                       6014 refresh_iwdg:
      00212A 35 AA 50 E0      [ 1] 6015 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      00212E 81               [ 4] 6016 	ret 
                                   6017 
                                   6018 
                                   6019 ;-------------------------------------
                                   6020 ; BASIC: LOG(expr)
                                   6021 ; return logarithm base 2 of expr 
                                   6022 ; this is the position of most significant
                                   6023 ; bit set. 
                                   6024 ; input: 
                                   6025 ; output:
                                   6026 ;   X     log2 
                                   6027 ;   A     TK_INTGR 
                                   6028 ;*********************************
      00212F                       6029 log2:
      00212F CD 10 E0         [ 4] 6030 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      002132 A1 01            [ 1] 6031 	cp a,#1 
      002134 27 03            [ 1] 6032 	jreq 1$
      002136 CC 08 7E         [ 2] 6033 	jp syntax_error 
      002139 85               [ 2] 6034 1$: popw x 
      00213A                       6035 leading_one:
      00213A 5D               [ 2] 6036 	tnzw x 
      00213B 27 0A            [ 1] 6037 	jreq 4$
      00213D A6 0F            [ 1] 6038 	ld a,#15 
      00213F 59               [ 2] 6039 2$: rlcw x 
      002140 25 03            [ 1] 6040     jrc 3$
      002142 4A               [ 1] 6041 	dec a 
      002143 20 FA            [ 2] 6042 	jra 2$
      002145 5F               [ 1] 6043 3$: clrw x 
      002146 97               [ 1] 6044     ld xl,a
      002147 A6 84            [ 1] 6045 4$:	ld a,#TK_INTGR
      002149 81               [ 4] 6046 	ret 
                                   6047 
                                   6048 ;-----------------------------------
                                   6049 ; BASIC: BIT(expr) 
                                   6050 ; expr ->{0..15}
                                   6051 ; return 2^expr 
                                   6052 ; output:
                                   6053 ;    x    2^expr 
                                   6054 ;-----------------------------------
      00214A                       6055 bitmask:
      00214A CD 10 E0         [ 4] 6056     call func_args 
      00214D A1 01            [ 1] 6057 	cp a,#1
      00214F 27 03            [ 1] 6058 	jreq 1$
      002151 CC 08 7E         [ 2] 6059 	jp syntax_error 
      002154 85               [ 2] 6060 1$: popw x 
      002155 9F               [ 1] 6061 	ld a,xl 
      002156 A4 0F            [ 1] 6062 	and a,#15
      002158 5F               [ 1] 6063 	clrw x 
      002159 5C               [ 2] 6064 	incw x 
      00215A 4D               [ 1] 6065 2$: tnz a 
      00215B 27 04            [ 1] 6066 	jreq 3$
      00215D 58               [ 2] 6067 	slaw x 
      00215E 4A               [ 1] 6068 	dec a 
      00215F 20 F9            [ 2] 6069 	jra 2$ 
      002161 A6 84            [ 1] 6070 3$: ld a,#TK_INTGR
      002163 81               [ 4] 6071 	ret 
                                   6072 
                                   6073 ;------------------------------
                                   6074 ; BASIC: INVERT(expr)
                                   6075 ; 1's complement 
                                   6076 ;--------------------------------
      002164                       6077 invert:
      002164 CD 10 E0         [ 4] 6078 	call func_args
      002167 A1 01            [ 1] 6079 	cp a,#1 
      002169 27 03            [ 1] 6080 	jreq 1$
      00216B CC 08 7E         [ 2] 6081 	jp syntax_error
      00216E 85               [ 2] 6082 1$: popw x  
      00216F 53               [ 2] 6083 	cplw x 
      002170 A6 84            [ 1] 6084 	ld a,#TK_INTGR 
      002172 81               [ 4] 6085 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                   6086 
                                   6087 ;------------------------------
                                   6088 ; BASIC: DO 
                                   6089 ; initiate a DO ... UNTIL loop 
                                   6090 ;------------------------------
                           000003  6091 	DOLP_ADR=3 
                           000005  6092 	DOLP_INW=5
                           000004  6093 	VSIZE=4 
      002173                       6094 do_loop:
      002173 85               [ 2] 6095 	popw x 
      002174                       6096 	_vars VSIZE 
      002174 52 04            [ 2]    1     sub sp,#VSIZE 
      002176 89               [ 2] 6097 	pushw x 
      002177 90 CE 00 04      [ 2] 6098 	ldw y,basicptr 
      00217B 17 03            [ 2] 6099 	ldw (DOLP_ADR,sp),y
      00217D 90 CE 00 00      [ 2] 6100 	ldw y,in.w 
      002181 17 05            [ 2] 6101 	ldw (DOLP_INW,sp),y
      002183 72 5C 00 20      [ 1] 6102 	inc loop_depth 
      002187 81               [ 4] 6103 	ret 
                                   6104 
                                   6105 ;--------------------------------
                                   6106 ; BASIC: UNTIL expr 
                                   6107 ; loop if exprssion is false 
                                   6108 ; else terminate loop
                                   6109 ;--------------------------------
      002188                       6110 until: 
      002188 72 5D 00 20      [ 1] 6111 	tnz loop_depth 
      00218C 26 03            [ 1] 6112 	jrne 1$ 
      00218E CC 08 7E         [ 2] 6113 	jp syntax_error 
      002191                       6114 1$: 
      002191 CD 12 27         [ 4] 6115 	call relation 
      002194 A1 84            [ 1] 6116 	cp a,#TK_INTGR
      002196 27 03            [ 1] 6117 	jreq 2$
      002198 CC 08 7E         [ 2] 6118 	jp syntax_error
      00219B                       6119 2$: 
      00219B 5D               [ 2] 6120 	tnzw x 
      00219C 26 10            [ 1] 6121 	jrne 9$
      00219E 1E 03            [ 2] 6122 	ldw x,(DOLP_ADR,sp)
      0021A0 CF 00 04         [ 2] 6123 	ldw basicptr,x 
      0021A3 E6 02            [ 1] 6124 	ld a,(2,x)
      0021A5 C7 00 03         [ 1] 6125 	ld count,a 
      0021A8 1E 05            [ 2] 6126 	ldw x,(DOLP_INW,sp)
      0021AA CF 00 00         [ 2] 6127 	ldw in.w,x 
      0021AD 81               [ 4] 6128 	ret 
      0021AE                       6129 9$:	; remove loop data from stack  
      0021AE 85               [ 2] 6130 	popw x
      0021AF                       6131 	_drop VSIZE
      0021AF 5B 04            [ 2]    1     addw sp,#VSIZE 
      0021B1 72 5A 00 20      [ 1] 6132 	dec loop_depth 
      0021B5 FC               [ 2] 6133 	jp (x)
                                   6134 
                                   6135 ;--------------------------
                                   6136 ; BASIC: PRTA...PRTI  
                                   6137 ;  return constant value 
                                   6138 ;  PORT  offset in GPIO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                   6139 ;  array
                                   6140 ;---------------------------
      0021B6                       6141 const_porta:
      0021B6 AE 00 00         [ 2] 6142 	ldw x,#0
      0021B9 A6 84            [ 1] 6143 	ld a,#TK_INTGR 
      0021BB 81               [ 4] 6144 	ret 
      0021BC                       6145 const_portb:
      0021BC AE 00 01         [ 2] 6146 	ldw x,#1
      0021BF A6 84            [ 1] 6147 	ld a,#TK_INTGR 
      0021C1 81               [ 4] 6148 	ret 
      0021C2                       6149 const_portc:
      0021C2 AE 00 02         [ 2] 6150 	ldw x,#2
      0021C5 A6 84            [ 1] 6151 	ld a,#TK_INTGR 
      0021C7 81               [ 4] 6152 	ret 
      0021C8                       6153 const_portd:
      0021C8 AE 00 03         [ 2] 6154 	ldw x,#3
      0021CB A6 84            [ 1] 6155 	ld a,#TK_INTGR 
      0021CD 81               [ 4] 6156 	ret 
      0021CE                       6157 const_porte:
      0021CE AE 00 04         [ 2] 6158 	ldw x,#4
      0021D1 A6 84            [ 1] 6159 	ld a,#TK_INTGR 
      0021D3 81               [ 4] 6160 	ret 
      0021D4                       6161 const_portf:
      0021D4 AE 00 05         [ 2] 6162 	ldw x,#5
      0021D7 A6 84            [ 1] 6163 	ld a,#TK_INTGR 
      0021D9 81               [ 4] 6164 	ret 
      0021DA                       6165 const_portg:
      0021DA AE 00 06         [ 2] 6166 	ldw x,#6
      0021DD A6 84            [ 1] 6167 	ld a,#TK_INTGR 
      0021DF 81               [ 4] 6168 	ret 
      0021E0                       6169 const_porth:
      0021E0 AE 00 07         [ 2] 6170 	ldw x,#7
      0021E3 A6 84            [ 1] 6171 	ld a,#TK_INTGR 
      0021E5 81               [ 4] 6172 	ret 
      0021E6                       6173 const_porti:
      0021E6 AE 00 08         [ 2] 6174 	ldw x,#8
      0021E9 A6 84            [ 1] 6175 	ld a,#TK_INTGR 
      0021EB 81               [ 4] 6176 	ret 
                                   6177 
                                   6178 ;-------------------------------
                                   6179 ; following return constant 
                                   6180 ; related to GPIO register offset 
                                   6181 ;---------------------------------
      0021EC                       6182 const_odr:
      0021EC A6 84            [ 1] 6183 	ld a,#TK_INTGR 
      0021EE AE 00 00         [ 2] 6184 	ldw x,#GPIO_ODR
      0021F1 81               [ 4] 6185 	ret 
      0021F2                       6186 const_idr:
      0021F2 A6 84            [ 1] 6187 	ld a,#TK_INTGR 
      0021F4 AE 00 01         [ 2] 6188 	ldw x,#GPIO_IDR
      0021F7 81               [ 4] 6189 	ret 
      0021F8                       6190 const_ddr:
      0021F8 A6 84            [ 1] 6191 	ld a,#TK_INTGR 
      0021FA AE 00 02         [ 2] 6192 	ldw x,#GPIO_DDR
      0021FD 81               [ 4] 6193 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      0021FE                       6194 const_cr1:
      0021FE A6 84            [ 1] 6195 	ld a,#TK_INTGR 
      002200 AE 00 03         [ 2] 6196 	ldw x,#GPIO_CR1
      002203 81               [ 4] 6197 	ret 
      002204                       6198 const_cr2:
      002204 A6 84            [ 1] 6199 	ld a,#TK_INTGR 
      002206 AE 00 04         [ 2] 6200 	ldw x,#GPIO_CR2
      002209 81               [ 4] 6201 	ret 
                                   6202 ;-------------------------
                                   6203 ;  constant for port mode
                                   6204 ;  used by PMODE 
                                   6205 ;  input or output
                                   6206 ;------------------------
      00220A                       6207 const_output:
      00220A A6 84            [ 1] 6208 	ld a,#TK_INTGR 
      00220C AE 00 01         [ 2] 6209 	ldw x,#OUTP
      00220F 81               [ 4] 6210 	ret 
      002210                       6211 const_input:
      002210 A6 84            [ 1] 6212 	ld a,#TK_INTGR 
      002212 AE 00 00         [ 2] 6213 	ldw x,#INP 
      002215 81               [ 4] 6214 	ret 
                                   6215 ;-----------------------
                                   6216 ; memory area constants
                                   6217 ;-----------------------
      002216                       6218 const_eeprom_base:
      002216 A6 84            [ 1] 6219 	ld a,#TK_INTGR 
      002218 AE 40 00         [ 2] 6220 	ldw x,#EEPROM_BASE 
      00221B 81               [ 4] 6221 	ret 
                                   6222 
                                   6223 ;---------------------------
                                   6224 ; BASIC: DATA 
                                   6225 ; when the interpreter find 
                                   6226 ; a DATA line it skip it.
                                   6227 ;---------------------------
      00221C                       6228 data:
      00221C 55 00 03 00 01   [ 1] 6229 	mov in,count 
      002221 81               [ 4] 6230 	ret 
                                   6231 
                                   6232 ;---------------------------
                                   6233 ; BASIC: DATLN  *expr*
                                   6234 ; set DATA pointer at line# 
                                   6235 ; specified by *expr* 
                                   6236 ;---------------------------
      002222                       6237 data_line:
      002222 CD 11 DE         [ 4] 6238 	call expression
      002225 A1 84            [ 1] 6239 	cp a,#TK_INTGR
      002227 27 03            [ 1] 6240 	jreq 1$
      002229 CC 08 7E         [ 2] 6241 	jp syntax_error 
      00222C CD 04 00         [ 4] 6242 1$: call search_lineno
      00222F 5D               [ 2] 6243 	tnzw x 
      002230 26 05            [ 1] 6244 	jrne 3$
      002232 A6 05            [ 1] 6245 2$:	ld a,#ERR_NO_LINE 
      002234 CC 08 80         [ 2] 6246 	jp tb_error
      002237                       6247 3$: ; check if valid data line 
      002237 90 93            [ 1] 6248     ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      002239 EE 04            [ 2] 6249 	ldw x,(4,x)
      00223B A3 22 1C         [ 2] 6250 	cpw x,#data 
      00223E 26 F2            [ 1] 6251 	jrne 2$ 
      002240 90 CF 00 06      [ 2] 6252 	ldw data_ptr,y
      002244 90 E6 02         [ 1] 6253 	ld a,(2,y)
      002247 C7 00 09         [ 1] 6254 	ld data_len,a 
      00224A 35 06 00 08      [ 1] 6255 	mov data_ofs,#FIRST_DATA_ITEM 
      00224E 81               [ 4] 6256 	ret
                                   6257 
                                   6258 ;---------------------------------
                                   6259 ; BASIC: RESTORE 
                                   6260 ; set data_ptr to first data line
                                   6261 ; if not DATA found pointer set to
                                   6262 ; zero 
                                   6263 ;---------------------------------
      00224F                       6264 restore:
      00224F 72 5F 00 06      [ 1] 6265 	clr data_ptr 
      002253 72 5F 00 07      [ 1] 6266 	clr data_ptr+1
      002257 72 5F 00 08      [ 1] 6267 	clr data_ofs 
      00225B 72 5F 00 09      [ 1] 6268 	clr data_len
      00225F CE 00 1C         [ 2] 6269 	ldw x,txtbgn
      002262                       6270 data_search_loop: 	
      002262 C3 00 1E         [ 2] 6271 	cpw x,txtend
      002265 24 17            [ 1] 6272 	jruge 9$
      002267 90 93            [ 1] 6273 	ldw y,x 
      002269 EE 04            [ 2] 6274 	ldw x,(4,x)
      00226B A3 22 1C         [ 2] 6275 	cpw x,#data 
      00226E 26 1A            [ 1] 6276 	jrne try_next_line 
      002270 90 CF 00 06      [ 2] 6277 	ldw data_ptr,y 
      002274 90 E6 02         [ 1] 6278 	ld a,(2,y)
      002277 C7 00 09         [ 1] 6279 	ld data_len,a 
      00227A 35 06 00 08      [ 1] 6280 	mov data_ofs,#FIRST_DATA_ITEM
      00227E 72 5D 00 09      [ 1] 6281 9$:	tnz data_len 
      002282 26 05            [ 1] 6282     jrne 10$
      002284 A6 0C            [ 1] 6283 	ld a,#ERR_NO_DATA 
      002286 CC 08 80         [ 2] 6284 	jp tb_error 
      002289 81               [ 4] 6285 10$:ret
      00228A                       6286 try_next_line:
      00228A 93               [ 1] 6287 	ldw x,y 
      00228B E6 02            [ 1] 6288 	ld a,(2,x)
      00228D C7 00 0D         [ 1] 6289 	ld acc8,a 
      002290 72 5F 00 0C      [ 1] 6290 	clr acc16 
      002294 72 BB 00 0C      [ 2] 6291 	addw x,acc16 
      002298 20 C8            [ 2] 6292 	jra data_search_loop
                                   6293 
                                   6294 
                                   6295 ;---------------------------------
                                   6296 ; BASIC: READ 
                                   6297 ; return next data item | 0 
                                   6298 ;---------------------------------
                           000001  6299 	CTX_BPTR=1 
                           000003  6300 	CTX_IN=3 
                           000004  6301 	CTX_COUNT=4 
                           000005  6302 	XSAVE=5
                           000006  6303 	VSIZE=6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      00229A                       6304 read:
      00229A                       6305 	_vars  VSIZE 
      00229A 52 06            [ 2]    1     sub sp,#VSIZE 
      00229C                       6306 read01:	
      00229C C6 00 08         [ 1] 6307 	ld a,data_ofs
      00229F C1 00 09         [ 1] 6308 	cp a,data_len 
      0022A2 27 37            [ 1] 6309 	jreq 2$ ; end of line  
      0022A4 CD 16 11         [ 4] 6310 	call save_context
      0022A7 CE 00 06         [ 2] 6311 	ldw x,data_ptr 
      0022AA CF 00 04         [ 2] 6312 	ldw basicptr,x 
      0022AD 55 00 08 00 01   [ 1] 6313 	mov in,data_ofs 
      0022B2 55 00 09 00 03   [ 1] 6314 	mov count,data_len  
      0022B7 CD 11 DE         [ 4] 6315 	call expression 
      0022BA A1 84            [ 1] 6316 	cp a,#TK_INTGR 
      0022BC 27 03            [ 1] 6317 	jreq 1$ 
      0022BE CC 08 7E         [ 2] 6318 	jp syntax_error 
      0022C1                       6319 1$:
      0022C1 1F 05            [ 2] 6320 	ldw (XSAVE,SP),x
      0022C3 CD 09 70         [ 4] 6321 	call next_token ; skip comma
      0022C6 CE 00 04         [ 2] 6322 	ldw x,basicptr 
      0022C9 CF 00 06         [ 2] 6323 	ldw data_ptr,x 
      0022CC 55 00 01 00 08   [ 1] 6324 	mov data_ofs,in 
      0022D1 CD 16 21         [ 4] 6325 	call rest_context
      0022D4 1E 05            [ 2] 6326 	ldw x,(XSAVE,sp)
      0022D6 A6 84            [ 1] 6327 	ld a,#TK_INTGR
      0022D8                       6328 	_drop VSIZE 
      0022D8 5B 06            [ 2]    1     addw sp,#VSIZE 
      0022DA 81               [ 4] 6329 	ret 
      0022DB                       6330 2$: ; end of line reached 
      0022DB 90 CE 00 06      [ 2] 6331 	ldw y, data_ptr 
      0022DF 72 5F 00 06      [ 1] 6332 	clr data_ptr
      0022E3 72 5F 00 07      [ 1] 6333 	clr data_ptr+1   
      0022E7 72 5F 00 08      [ 1] 6334 	clr data_ofs 
      0022EB 72 5F 00 09      [ 1] 6335 	clr data_len 
      0022EF CD 22 8A         [ 4] 6336 	call try_next_line 
      0022F2 20 A8            [ 2] 6337 	jra read01
                                   6338 
                                   6339 
                                   6340 ;---------------------------------
                                   6341 ; BASIC: SPIEN clkdiv, 0|1  
                                   6342 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   6343 ; if clkdiv==-1 disable SPI
                                   6344 ; 0|1 -> disable|enable  
                                   6345 ;--------------------------------- 
                           000005  6346 SPI_CS_BIT=5
      0022F4                       6347 spi_enable:
      0022F4 CD 10 E5         [ 4] 6348 	call arg_list 
      0022F7 A1 02            [ 1] 6349 	cp a,#2
      0022F9 27 03            [ 1] 6350 	jreq 1$
      0022FB CC 08 7E         [ 2] 6351 	jp syntax_error 
      0022FE                       6352 1$: 
      0022FE 72 12 50 C7      [ 1] 6353 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002302 85               [ 2] 6354 	popw x  
      002303 5D               [ 2] 6355 	tnzw x 
      002304 27 21            [ 1] 6356 	jreq spi_disable 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      002306 85               [ 2] 6357 	popw x 
      002307 A6 08            [ 1] 6358 	ld a,#(1<<SPI_CR1_BR)
      002309 42               [ 4] 6359 	mul x,a 
      00230A 9F               [ 1] 6360 	ld a,xl 
      00230B C7 52 00         [ 1] 6361 	ld SPI_CR1,a 
                                   6362 ; configure ~CS on PE5 (D10 on CN8) as output. 
      00230E 72 1A 50 14      [ 1] 6363 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002312 72 1A 50 16      [ 1] 6364 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   6365 ; configure SPI as master mode 0.	
      002316 72 14 52 00      [ 1] 6366 	bset SPI_CR1,#SPI_CR1_MSTR
                                   6367 ; ~CS line controlled by sofware 	
      00231A 72 12 52 01      [ 1] 6368 	bset SPI_CR2,#SPI_CR2_SSM 
      00231E 72 10 52 01      [ 1] 6369     bset SPI_CR2,#SPI_CR2_SSI 
                                   6370 ; enable SPI
      002322 72 1C 52 00      [ 1] 6371 	bset SPI_CR1,#SPI_CR1_SPE 	
      002326 81               [ 4] 6372 	ret 
      002327                       6373 spi_disable:
      002327                       6374 	_drop #2; throw first argument.
      002327 5B 02            [ 2]    1     addw sp,##2 
                                   6375 ; wait spi idle 
      002329 A6 82            [ 1] 6376 1$:	ld a,#0x82 
      00232B C4 52 03         [ 1] 6377 	and a,SPI_SR
      00232E A1 02            [ 1] 6378 	cp a,#2 
      002330 26 F7            [ 1] 6379 	jrne 1$
      002332 72 1D 52 00      [ 1] 6380 	bres SPI_CR1,#SPI_CR1_SPE
      002336 72 13 50 C7      [ 1] 6381 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      00233A 72 1B 50 16      [ 1] 6382 	bres PE_DDR,#SPI_CS_BIT 
      00233E 81               [ 4] 6383 	ret 
                                   6384 
      00233F                       6385 spi_clear_error:
      00233F A6 78            [ 1] 6386 	ld a,#0x78 
      002341 C5 52 03         [ 1] 6387 	bcp a,SPI_SR 
      002344 27 04            [ 1] 6388 	jreq 1$
      002346 72 5F 52 03      [ 1] 6389 	clr SPI_SR 
      00234A 81               [ 4] 6390 1$: ret 
                                   6391 
      00234B                       6392 spi_send_byte:
      00234B 88               [ 1] 6393 	push a 
      00234C CD 23 3F         [ 4] 6394 	call spi_clear_error
      00234F 84               [ 1] 6395 	pop a 
      002350 72 03 52 03 FB   [ 2] 6396 	btjf SPI_SR,#SPI_SR_TXE,.
      002355 C7 52 04         [ 1] 6397 	ld SPI_DR,a
      002358 72 01 52 03 FB   [ 2] 6398 	btjf SPI_SR,#SPI_SR_RXNE,.  
      00235D C6 52 04         [ 1] 6399 	ld a,SPI_DR 
      002360 81               [ 4] 6400 	ret 
                                   6401 
      002361                       6402 spi_rcv_byte:
      002361 A6 FF            [ 1] 6403 	ld a,#255
      002363 72 01 52 03 E3   [ 2] 6404 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002368 C6 52 04         [ 1] 6405 	ld a,SPI_DR 
      00236B 81               [ 4] 6406 	ret
                                   6407 
                                   6408 ;------------------------------
                                   6409 ; BASIC: SPIWR byte [,byte]
                                   6410 ; write 1 or more byte
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                   6411 ;------------------------------
      00236C                       6412 spi_write:
      00236C CD 11 DE         [ 4] 6413 	call expression
      00236F A1 84            [ 1] 6414 	cp a,#TK_INTGR 
      002371 27 03            [ 1] 6415 	jreq 1$
      002373 CC 08 7E         [ 2] 6416 	jp syntax_error 
      002376                       6417 1$:	
      002376 9F               [ 1] 6418 	ld a,xl 
      002377 CD 23 4B         [ 4] 6419 	call spi_send_byte 
      00237A CD 09 70         [ 4] 6420 	call next_token 
      00237D A1 09            [ 1] 6421 	cp a,#TK_COMMA 
      00237F 26 02            [ 1] 6422 	jrne 2$ 
      002381 20 E9            [ 2] 6423 	jra spi_write 
      002383 4D               [ 1] 6424 2$:	tnz a 
      002384 27 05            [ 1] 6425 	jreq 3$
      002386                       6426 	_unget_token  
      002386 55 00 02 00 01   [ 1]    1     mov in,in.saved
      00238B 81               [ 4] 6427 3$:	ret 
                                   6428 
                                   6429 
                                   6430 ;-------------------------------
                                   6431 ; BASIC: SPIRD 	
                                   6432 ; read one byte from SPI 
                                   6433 ;-------------------------------
      00238C                       6434 spi_read:
      00238C CD 23 61         [ 4] 6435 	call spi_rcv_byte 
      00238F 5F               [ 1] 6436 	clrw x 
      002390 97               [ 1] 6437 	ld xl,a 
      002391 A6 84            [ 1] 6438 	ld a,#TK_INTGR 
      002393 81               [ 4] 6439 	ret 
                                   6440 
                                   6441 ;------------------------------
                                   6442 ; BASIC: SPISEL 0|1 
                                   6443 ; set state of ~CS line
                                   6444 ; 0|1 deselect|select  
                                   6445 ;------------------------------
      002394                       6446 spi_select:
      002394 CD 09 70         [ 4] 6447 	call next_token 
      002397 A1 84            [ 1] 6448 	cp a,#TK_INTGR 
      002399 27 03            [ 1] 6449 	jreq 1$
      00239B CC 08 7E         [ 2] 6450 	jp syntax_error 
      00239E 5D               [ 2] 6451 1$: tnzw x  
      00239F 27 05            [ 1] 6452 	jreq cs_high 
      0023A1 72 1B 50 14      [ 1] 6453 	bres PE_ODR,#SPI_CS_BIT
      0023A5 81               [ 4] 6454 	ret 
      0023A6                       6455 cs_high: 
      0023A6 72 1A 50 14      [ 1] 6456 	bset PE_ODR,#SPI_CS_BIT
      0023AA 81               [ 4] 6457 	ret 
                                   6458 
                                   6459 
                                   6460 ;-------------------------------
                                   6461 ; BASIC: PAD 
                                   6462 ; Return pad buffer address.
                                   6463 ;------------------------------
      0023AB                       6464 pad_ref:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0023AB AE 16 E0         [ 2] 6465 	ldw x,#pad 
      0023AE B6 84            [ 1] 6466 	ld a,TK_INTGR
      0023B0 81               [ 4] 6467 	ret 
                                   6468 
                                   6469 ;------------------------------
                                   6470 ;      dictionary 
                                   6471 ; format:
                                   6472 ;   link:   2 bytes 
                                   6473 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6474 ;   cmd_name: 16 byte max 
                                   6475 ;   code_address: 2 bytes 
                                   6476 ;------------------------------
                                   6477 	.macro _dict_entry len,name,cmd 
                                   6478 	.word LINK 
                                   6479 	LINK=.
                                   6480 name:
                                   6481 	.byte len 	
                                   6482 	.ascii "name"
                                   6483 	.word cmd 
                                   6484 	.endm 
                                   6485 
                           000000  6486 	LINK=0
                                   6487 ; respect alphabetic order for BASIC names from Z-A
                                   6488 ; this sort order is for a cleaner WORDS cmd output. 	
      0023B1                       6489 kword_end:
      0023B1                       6490 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      0023B1 00 00                    1 	.word LINK 
                           0023B3     2 	LINK=.
      0023B3                          3 XOR:
      0023B3 43                       4 	.byte 3+F_IFUNC 	
      0023B4 58 4F 52                 5 	.ascii "XOR"
      0023B7 1F 37                    6 	.word bit_xor 
      0023B9                       6491 	_dict_entry,5,WRITE,write  
      0023B9 23 B3                    1 	.word LINK 
                           0023BB     2 	LINK=.
      0023BB                          3 WRITE:
      0023BB 05                       4 	.byte 5 	
      0023BC 57 52 49 54 45           5 	.ascii "WRITE"
      0023C1 1D 5C                    6 	.word write 
      0023C3                       6492 	_dict_entry,5,WORDS,words 
      0023C3 23 BB                    1 	.word LINK 
                           0023C5     2 	LINK=.
      0023C5                          3 WORDS:
      0023C5 05                       4 	.byte 5 	
      0023C6 57 4F 52 44 53           5 	.ascii "WORDS"
      0023CB 20 65                    6 	.word words 
      0023CD                       6493 	_dict_entry 4,WAIT,wait 
      0023CD 23 C5                    1 	.word LINK 
                           0023CF     2 	LINK=.
      0023CF                          3 WAIT:
      0023CF 04                       4 	.byte 4 	
      0023D0 57 41 49 54              5 	.ascii "WAIT"
      0023D4 16 A3                    6 	.word wait 
      0023D6                       6494 	_dict_entry,3+F_IFUNC,USR,usr
      0023D6 23 CF                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                           0023D8     2 	LINK=.
      0023D8                          3 USR:
      0023D8 43                       4 	.byte 3+F_IFUNC 	
      0023D9 55 53 52                 5 	.ascii "USR"
      0023DC 1E 08                    6 	.word usr 
      0023DE                       6495 	_dict_entry,5,UNTIL,until 
      0023DE 23 D8                    1 	.word LINK 
                           0023E0     2 	LINK=.
      0023E0                          3 UNTIL:
      0023E0 05                       4 	.byte 5 	
      0023E1 55 4E 54 49 4C           5 	.ascii "UNTIL"
      0023E6 21 88                    6 	.word until 
      0023E8                       6496 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      0023E8 23 E0                    1 	.word LINK 
                           0023EA     2 	LINK=.
      0023EA                          3 UFLASH:
      0023EA 46                       4 	.byte 6+F_IFUNC 	
      0023EB 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      0023F1 1E 02                    6 	.word uflash 
      0023F3                       6497 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      0023F3 23 EA                    1 	.word LINK 
                           0023F5     2 	LINK=.
      0023F5                          3 UBOUND:
      0023F5 46                       4 	.byte 6+F_IFUNC 	
      0023F6 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      0023FC 12 D7                    6 	.word ubound 
      0023FE                       6498 	_dict_entry,4,TONE,tone  
      0023FE 23 F5                    1 	.word LINK 
                           002400     2 	LINK=.
      002400                          3 TONE:
      002400 04                       4 	.byte 4 	
      002401 54 4F 4E 45              5 	.ascii "TONE"
      002405 18 ED                    6 	.word tone 
      002407                       6499 	_dict_entry,2,TO,to
      002407 24 00                    1 	.word LINK 
                           002409     2 	LINK=.
      002409                          3 TO:
      002409 02                       4 	.byte 2 	
      00240A 54 4F                    5 	.ascii "TO"
      00240C 17 7D                    6 	.word to 
      00240E                       6500 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      00240E 24 09                    1 	.word LINK 
                           002410     2 	LINK=.
      002410                          3 TIMEOUT:
      002410 47                       4 	.byte 7+F_IFUNC 	
      002411 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002418 20 DA                    6 	.word timeout 
      00241A                       6501 	_dict_entry,5,TIMER,set_timer
      00241A 24 10                    1 	.word LINK 
                           00241C     2 	LINK=.
      00241C                          3 TIMER:
      00241C 05                       4 	.byte 5 	
      00241D 54 49 4D 45 52           5 	.ascii "TIMER"
      002422 20 CB                    6 	.word set_timer 
      002424                       6502 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002424 24 1C                    1 	.word LINK 
                           002426     2 	LINK=.
      002426                          3 TICKS:
      002426 45                       4 	.byte 5+F_IFUNC 	
      002427 54 49 43 4B 53           5 	.ascii "TICKS"
      00242C 1E ED                    6 	.word get_ticks 
      00242E                       6503 	_dict_entry,4,STOP,stop 
      00242E 24 26                    1 	.word LINK 
                           002430     2 	LINK=.
      002430                          3 STOP:
      002430 04                       4 	.byte 4 	
      002431 53 54 4F 50              5 	.ascii "STOP"
      002435 1A 0C                    6 	.word stop 
      002437                       6504 	_dict_entry,4,STEP,step 
      002437 24 30                    1 	.word LINK 
                           002439     2 	LINK=.
      002439                          3 STEP:
      002439 04                       4 	.byte 4 	
      00243A 53 54 45 50              5 	.ascii "STEP"
      00243E 17 AD                    6 	.word step 
      002440                       6505 	_dict_entry,5,SPIWR,spi_write
      002440 24 39                    1 	.word LINK 
                           002442     2 	LINK=.
      002442                          3 SPIWR:
      002442 05                       4 	.byte 5 	
      002443 53 50 49 57 52           5 	.ascii "SPIWR"
      002448 23 6C                    6 	.word spi_write 
      00244A                       6506 	_dict_entry,6,SPISEL,spi_select
      00244A 24 42                    1 	.word LINK 
                           00244C     2 	LINK=.
      00244C                          3 SPISEL:
      00244C 06                       4 	.byte 6 	
      00244D 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      002453 23 94                    6 	.word spi_select 
      002455                       6507 	_dict_entry,5,SPIEN,spi_enable 
      002455 24 4C                    1 	.word LINK 
                           002457     2 	LINK=.
      002457                          3 SPIEN:
      002457 05                       4 	.byte 5 	
      002458 53 50 49 45 4E           5 	.ascii "SPIEN"
      00245D 22 F4                    6 	.word spi_enable 
      00245F                       6508 	_dict_entry,5+F_IFUNC,SPIRD, spi_read 
      00245F 24 57                    1 	.word LINK 
                           002461     2 	LINK=.
      002461                          3 SPIRD:
      002461 45                       4 	.byte 5+F_IFUNC 	
      002462 53 50 49 52 44           5 	.ascii "SPIRD"
      002467 23 8C                    6 	.word spi_read 
      002469                       6509 	_dict_entry,5,SLEEP,sleep 
      002469 24 61                    1 	.word LINK 
                           00246B     2 	LINK=.
      00246B                          3 SLEEP:
      00246B 05                       4 	.byte 5 	
      00246C 53 4C 45 45 50           5 	.ascii "SLEEP"
      002471 1E 86                    6 	.word sleep 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      002473                       6510 	_dict_entry,4+F_IFUNC,SIZE,size
      002473 24 6B                    1 	.word LINK 
                           002475     2 	LINK=.
      002475                          3 SIZE:
      002475 44                       4 	.byte 4+F_IFUNC 	
      002476 53 49 5A 45              5 	.ascii "SIZE"
      00247A 12 CD                    6 	.word size 
      00247C                       6511     _dict_entry,4,SHOW,show 
      00247C 24 75                    1 	.word LINK 
                           00247E     2 	LINK=.
      00247E                          3 SHOW:
      00247E 04                       4 	.byte 4 	
      00247F 53 48 4F 57              5 	.ascii "SHOW"
      002483 12 82                    6 	.word show 
      002485                       6512 	_dict_entry,4,SAVE,save
      002485 24 7E                    1 	.word LINK 
                           002487     2 	LINK=.
      002487                          3 SAVE:
      002487 04                       4 	.byte 4 	
      002488 53 41 56 45              5 	.ascii "SAVE"
      00248C 1B 49                    6 	.word save 
      00248E                       6513 	_dict_entry 3,RUN,run
      00248E 24 87                    1 	.word LINK 
                           002490     2 	LINK=.
      002490                          3 RUN:
      002490 03                       4 	.byte 3 	
      002491 52 55 4E                 5 	.ascii "RUN"
      002494 18 8D                    6 	.word run 
      002496                       6514 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      002496 24 90                    1 	.word LINK 
                           002498     2 	LINK=.
      002498                          3 RSHIFT:
      002498 46                       4 	.byte 6+F_IFUNC 	
      002499 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00249F 1F 68                    6 	.word rshift 
      0024A1                       6515 	_dict_entry,3+F_IFUNC,RND,random 
      0024A1 24 98                    1 	.word LINK 
                           0024A3     2 	LINK=.
      0024A3                          3 RND:
      0024A3 43                       4 	.byte 3+F_IFUNC 	
      0024A4 52 4E 44                 5 	.ascii "RND"
      0024A7 1F FE                    6 	.word random 
      0024A9                       6516 	_dict_entry,6,RETURN,return 
      0024A9 24 A3                    1 	.word LINK 
                           0024AB     2 	LINK=.
      0024AB                          3 RETURN:
      0024AB 06                       4 	.byte 6 	
      0024AC 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0024B2 18 6F                    6 	.word return 
      0024B4                       6517 	_dict_entry,7,RESTORE,restore 
      0024B4 24 AB                    1 	.word LINK 
                           0024B6     2 	LINK=.
      0024B6                          3 RESTORE:
      0024B6 07                       4 	.byte 7 	
      0024B7 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0024BE 22 4F                    6 	.word restore 
      0024C0                       6518 	_dict_entry 6,REMARK,remark 
      0024C0 24 B6                    1 	.word LINK 
                           0024C2     2 	LINK=.
      0024C2                          3 REMARK:
      0024C2 06                       4 	.byte 6 	
      0024C3 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      0024C9 16 9D                    6 	.word remark 
      0024CB                       6519 	_dict_entry,6,REBOOT,cold_start
      0024CB 24 C2                    1 	.word LINK 
                           0024CD     2 	LINK=.
      0024CD                          3 REBOOT:
      0024CD 06                       4 	.byte 6 	
      0024CE 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0024D4 05 D4                    6 	.word cold_start 
      0024D6                       6520 	_dict_entry,4+F_IFUNC,READ,read  
      0024D6 24 CD                    1 	.word LINK 
                           0024D8     2 	LINK=.
      0024D8                          3 READ:
      0024D8 44                       4 	.byte 4+F_IFUNC 	
      0024D9 52 45 41 44              5 	.ascii "READ"
      0024DD 22 9A                    6 	.word read 
      0024DF                       6521 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      0024DF 24 D8                    1 	.word LINK 
                           0024E1     2 	LINK=.
      0024E1                          3 QKEY:
      0024E1 44                       4 	.byte 4+F_IFUNC 	
      0024E2 51 4B 45 59              5 	.ascii "QKEY"
      0024E6 1D CD                    6 	.word qkey 
      0024E8                       6522 	_dict_entry,4+F_IFUNC,PRTI,const_porti 
      0024E8 24 E1                    1 	.word LINK 
                           0024EA     2 	LINK=.
      0024EA                          3 PRTI:
      0024EA 44                       4 	.byte 4+F_IFUNC 	
      0024EB 50 52 54 49              5 	.ascii "PRTI"
      0024EF 21 E6                    6 	.word const_porti 
      0024F1                       6523 	_dict_entry,4+F_IFUNC,PRTH,const_porth 
      0024F1 24 EA                    1 	.word LINK 
                           0024F3     2 	LINK=.
      0024F3                          3 PRTH:
      0024F3 44                       4 	.byte 4+F_IFUNC 	
      0024F4 50 52 54 48              5 	.ascii "PRTH"
      0024F8 21 E0                    6 	.word const_porth 
      0024FA                       6524 	_dict_entry,4+F_IFUNC,PRTG,const_portg 
      0024FA 24 F3                    1 	.word LINK 
                           0024FC     2 	LINK=.
      0024FC                          3 PRTG:
      0024FC 44                       4 	.byte 4+F_IFUNC 	
      0024FD 50 52 54 47              5 	.ascii "PRTG"
      002501 21 DA                    6 	.word const_portg 
      002503                       6525 	_dict_entry,4+F_IFUNC,PRTF,const_portf
      002503 24 FC                    1 	.word LINK 
                           002505     2 	LINK=.
      002505                          3 PRTF:
      002505 44                       4 	.byte 4+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002506 50 52 54 46              5 	.ascii "PRTF"
      00250A 21 D4                    6 	.word const_portf 
      00250C                       6526 	_dict_entry,4+F_IFUNC,PRTE,const_porte
      00250C 25 05                    1 	.word LINK 
                           00250E     2 	LINK=.
      00250E                          3 PRTE:
      00250E 44                       4 	.byte 4+F_IFUNC 	
      00250F 50 52 54 45              5 	.ascii "PRTE"
      002513 21 CE                    6 	.word const_porte 
      002515                       6527 	_dict_entry,4+F_IFUNC,PRTD,const_portd
      002515 25 0E                    1 	.word LINK 
                           002517     2 	LINK=.
      002517                          3 PRTD:
      002517 44                       4 	.byte 4+F_IFUNC 	
      002518 50 52 54 44              5 	.ascii "PRTD"
      00251C 21 C8                    6 	.word const_portd 
      00251E                       6528 	_dict_entry,4+F_IFUNC,PRTC,const_portc
      00251E 25 17                    1 	.word LINK 
                           002520     2 	LINK=.
      002520                          3 PRTC:
      002520 44                       4 	.byte 4+F_IFUNC 	
      002521 50 52 54 43              5 	.ascii "PRTC"
      002525 21 C2                    6 	.word const_portc 
      002527                       6529 	_dict_entry,4+F_IFUNC,PRTB,const_portb
      002527 25 20                    1 	.word LINK 
                           002529     2 	LINK=.
      002529                          3 PRTB:
      002529 44                       4 	.byte 4+F_IFUNC 	
      00252A 50 52 54 42              5 	.ascii "PRTB"
      00252E 21 BC                    6 	.word const_portb 
      002530                       6530 	_dict_entry,4+F_IFUNC,PRTA,const_porta 
      002530 25 29                    1 	.word LINK 
                           002532     2 	LINK=.
      002532                          3 PRTA:
      002532 44                       4 	.byte 4+F_IFUNC 	
      002533 50 52 54 41              5 	.ascii "PRTA"
      002537 21 B6                    6 	.word const_porta 
      002539                       6531 	_dict_entry 5,PRINT,print 
      002539 25 32                    1 	.word LINK 
                           00253B     2 	LINK=.
      00253B                          3 PRINT:
      00253B 05                       4 	.byte 5 	
      00253C 50 52 49 4E 54           5 	.ascii "PRINT"
      002541 15 A0                    6 	.word print 
      002543                       6532 	_dict_entry,4+F_IFUNC,POUT,const_output
      002543 25 3B                    1 	.word LINK 
                           002545     2 	LINK=.
      002545                          3 POUT:
      002545 44                       4 	.byte 4+F_IFUNC 	
      002546 50 4F 55 54              5 	.ascii "POUT"
      00254A 22 0A                    6 	.word const_output 
      00254C                       6533 	_dict_entry,4,POKE,poke 
      00254C 25 45                    1 	.word LINK 
                           00254E     2 	LINK=.
      00254E                          3 POKE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      00254E 04                       4 	.byte 4 	
      00254F 50 4F 4B 45              5 	.ascii "POKE"
      002553 17 20                    6 	.word poke 
      002555                       6534 	_dict_entry,4+F_IFUNC,PINP,const_input
      002555 25 4E                    1 	.word LINK 
                           002557     2 	LINK=.
      002557                          3 PINP:
      002557 44                       4 	.byte 4+F_IFUNC 	
      002558 50 49 4E 50              5 	.ascii "PINP"
      00255C 22 10                    6 	.word const_input 
      00255E                       6535 	_dict_entry,4+F_IFUNC,PEEK,peek 
      00255E 25 57                    1 	.word LINK 
                           002560     2 	LINK=.
      002560                          3 PEEK:
      002560 44                       4 	.byte 4+F_IFUNC 	
      002561 50 45 45 4B              5 	.ascii "PEEK"
      002565 17 2F                    6 	.word peek 
      002567                       6536 	_dict_entry,5,PMODE,pin_mode 
      002567 25 60                    1 	.word LINK 
                           002569     2 	LINK=.
      002569                          3 PMODE:
      002569 05                       4 	.byte 5 	
      00256A 50 4D 4F 44 45           5 	.ascii "PMODE"
      00256F 1F 8D                    6 	.word pin_mode 
      002571                       6537 	_dict_entry,5,PAUSE,pause 
      002571 25 69                    1 	.word LINK 
                           002573     2 	LINK=.
      002573                          3 PAUSE:
      002573 05                       4 	.byte 5 	
      002574 50 41 55 53 45           5 	.ascii "PAUSE"
      002579 1E 91                    6 	.word pause 
      00257B                       6538 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      00257B 25 73                    1 	.word LINK 
                           00257D     2 	LINK=.
      00257D                          3 PAD:
      00257D 43                       4 	.byte 3+F_IFUNC 	
      00257E 50 41 44                 5 	.ascii "PAD"
      002581 23 AB                    6 	.word pad_ref 
      002583                       6539 	_dict_entry,2+F_IFUNC,OR,bit_or
      002583 25 7D                    1 	.word LINK 
                           002585     2 	LINK=.
      002585                          3 OR:
      002585 42                       4 	.byte 2+F_IFUNC 	
      002586 4F 52                    5 	.ascii "OR"
      002588 1F 1F                    6 	.word bit_or 
      00258A                       6540 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      00258A 25 85                    1 	.word LINK 
                           00258C     2 	LINK=.
      00258C                          3 ODR:
      00258C 43                       4 	.byte 3+F_IFUNC 	
      00258D 4F 44 52                 5 	.ascii "ODR"
      002590 21 EC                    6 	.word const_odr 
      002592                       6541 	_dict_entry,3+F_IFUNC,NOT,func_not 
      002592 25 8C                    1 	.word LINK 
                           002594     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      002594                          3 NOT:
      002594 43                       4 	.byte 3+F_IFUNC 	
      002595 4E 4F 54                 5 	.ascii "NOT"
      002598 20 E7                    6 	.word func_not 
      00259A                       6542 	_dict_entry,3,NEW,new
      00259A 25 94                    1 	.word LINK 
                           00259C     2 	LINK=.
      00259C                          3 NEW:
      00259C 03                       4 	.byte 3 	
      00259D 4E 45 57                 5 	.ascii "NEW"
      0025A0 1A 58                    6 	.word new 
      0025A2                       6543 	_dict_entry,4,NEXT,next 
      0025A2 25 9C                    1 	.word LINK 
                           0025A4     2 	LINK=.
      0025A4                          3 NEXT:
      0025A4 04                       4 	.byte 4 	
      0025A5 4E 45 58 54              5 	.ascii "NEXT"
      0025A9 17 D4                    6 	.word next 
      0025AB                       6544 	_dict_entry,6+F_IFUNC,MULDIV,muldiv 
      0025AB 25 A4                    1 	.word LINK 
                           0025AD     2 	LINK=.
      0025AD                          3 MULDIV:
      0025AD 46                       4 	.byte 6+F_IFUNC 	
      0025AE 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      0025B4 10 38                    6 	.word muldiv 
      0025B6                       6545 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0025B6 25 AD                    1 	.word LINK 
                           0025B8     2 	LINK=.
      0025B8                          3 LSHIFT:
      0025B8 46                       4 	.byte 6+F_IFUNC 	
      0025B9 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0025BF 1F 4F                    6 	.word lshift 
      0025C1                       6546 	_dict_entry,3+F_IFUNC,LOG,log2 
      0025C1 25 B8                    1 	.word LINK 
                           0025C3     2 	LINK=.
      0025C3                          3 LOG:
      0025C3 43                       4 	.byte 3+F_IFUNC 	
      0025C4 4C 4F 47                 5 	.ascii "LOG"
      0025C7 21 2F                    6 	.word log2 
      0025C9                       6547 	_dict_entry,4,LOAD,load 
      0025C9 25 C3                    1 	.word LINK 
                           0025CB     2 	LINK=.
      0025CB                          3 LOAD:
      0025CB 04                       4 	.byte 4 	
      0025CC 4C 4F 41 44              5 	.ascii "LOAD"
      0025D0 1C 43                    6 	.word load 
      0025D2                       6548 	_dict_entry 4,LIST,list
      0025D2 25 CB                    1 	.word LINK 
                           0025D4     2 	LINK=.
      0025D4                          3 LIST:
      0025D4 04                       4 	.byte 4 	
      0025D5 4C 49 53 54              5 	.ascii "LIST"
      0025D9 13 24                    6 	.word list 
      0025DB                       6549 	_dict_entry 3,LET,let 
      0025DB 25 D4                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                           0025DD     2 	LINK=.
      0025DD                          3 LET:
      0025DD 03                       4 	.byte 3 	
      0025DE 4C 45 54                 5 	.ascii "LET"
      0025E1 12 F9                    6 	.word let 
      0025E3                       6550 	_dict_entry,3+F_IFUNC,KEY,key 
      0025E3 25 DD                    1 	.word LINK 
                           0025E5     2 	LINK=.
      0025E5                          3 KEY:
      0025E5 43                       4 	.byte 3+F_IFUNC 	
      0025E6 4B 45 59                 5 	.ascii "KEY"
      0025E9 1D C5                    6 	.word key 
      0025EB                       6551 	_dict_entry,7,IWDGREF,refresh_iwdg
      0025EB 25 E5                    1 	.word LINK 
                           0025ED     2 	LINK=.
      0025ED                          3 IWDGREF:
      0025ED 07                       4 	.byte 7 	
      0025EE 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      0025F5 21 2A                    6 	.word refresh_iwdg 
      0025F7                       6552 	_dict_entry,6,IWDGEN,enable_iwdg
      0025F7 25 ED                    1 	.word LINK 
                           0025F9     2 	LINK=.
      0025F9                          3 IWDGEN:
      0025F9 06                       4 	.byte 6 	
      0025FA 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      002600 20 F4                    6 	.word enable_iwdg 
      002602                       6553 	_dict_entry,6+F_IFUNC,INVERT,invert 
      002602 25 F9                    1 	.word LINK 
                           002604     2 	LINK=.
      002604                          3 INVERT:
      002604 46                       4 	.byte 6+F_IFUNC 	
      002605 49 4E 56 45 52 54        5 	.ascii "INVERT"
      00260B 21 64                    6 	.word invert 
      00260D                       6554 	_dict_entry,5,INPUT,input_var  
      00260D 26 04                    1 	.word LINK 
                           00260F     2 	LINK=.
      00260F                          3 INPUT:
      00260F 05                       4 	.byte 5 	
      002610 49 4E 50 55 54           5 	.ascii "INPUT"
      002615 16 31                    6 	.word input_var 
      002617                       6555 	_dict_entry,2,IF,if 
      002617 26 0F                    1 	.word LINK 
                           002619     2 	LINK=.
      002619                          3 IF:
      002619 02                       4 	.byte 2 	
      00261A 49 46                    5 	.ascii "IF"
      00261C 17 40                    6 	.word if 
      00261E                       6556 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      00261E 26 19                    1 	.word LINK 
                           002620     2 	LINK=.
      002620                          3 IDR:
      002620 43                       4 	.byte 3+F_IFUNC 	
      002621 49 44 52                 5 	.ascii "IDR"
      002624 21 F2                    6 	.word const_idr 
      002626                       6557 	_dict_entry,3,HEX,hex_base
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      002626 26 20                    1 	.word LINK 
                           002628     2 	LINK=.
      002628                          3 HEX:
      002628 03                       4 	.byte 3 	
      002629 48 45 58                 5 	.ascii "HEX"
      00262C 12 C3                    6 	.word hex_base 
      00262E                       6558 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      00262E 26 28                    1 	.word LINK 
                           002630     2 	LINK=.
      002630                          3 GPIO:
      002630 44                       4 	.byte 4+F_IFUNC 	
      002631 47 50 49 4F              5 	.ascii "GPIO"
      002635 1D D8                    6 	.word gpio 
      002637                       6559 	_dict_entry,4,GOTO,goto 
      002637 26 30                    1 	.word LINK 
                           002639     2 	LINK=.
      002639                          3 GOTO:
      002639 04                       4 	.byte 4 	
      00263A 47 4F 54 4F              5 	.ascii "GOTO"
      00263E 18 34                    6 	.word goto 
      002640                       6560 	_dict_entry,5,GOSUB,gosub 
      002640 26 39                    1 	.word LINK 
                           002642     2 	LINK=.
      002642                          3 GOSUB:
      002642 05                       4 	.byte 5 	
      002643 47 4F 53 55 42           5 	.ascii "GOSUB"
      002648 18 4F                    6 	.word gosub 
      00264A                       6561 	_dict_entry,6,FORGET,forget 
      00264A 26 42                    1 	.word LINK 
                           00264C     2 	LINK=.
      00264C                          3 FORGET:
      00264C 06                       4 	.byte 6 	
      00264D 46 4F 52 47 45 54        5 	.ascii "FORGET"
      002653 1C 73                    6 	.word forget 
      002655                       6562 	_dict_entry,3,FOR,for 
      002655 26 4C                    1 	.word LINK 
                           002657     2 	LINK=.
      002657                          3 FOR:
      002657 03                       4 	.byte 3 	
      002658 46 4F 52                 5 	.ascii "FOR"
      00265B 17 54                    6 	.word for 
      00265D                       6563 	_dict_entry,4,FCPU,fcpu 
      00265D 26 57                    1 	.word LINK 
                           00265F     2 	LINK=.
      00265F                          3 FCPU:
      00265F 04                       4 	.byte 4 	
      002660 46 43 50 55              5 	.ascii "FCPU"
      002664 1F 81                    6 	.word fcpu 
      002666                       6564 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      002666 26 5F                    1 	.word LINK 
                           002668     2 	LINK=.
      002668                          3 EEPROM:
      002668 46                       4 	.byte 6+F_IFUNC 	
      002669 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      00266F 22 16                    6 	.word const_eeprom_base 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      002671                       6565 	_dict_entry,3,END,cmd_end  
      002671 26 68                    1 	.word LINK 
                           002673     2 	LINK=.
      002673                          3 END:
      002673 03                       4 	.byte 3 	
      002674 45 4E 44                 5 	.ascii "END"
      002677 18 E6                    6 	.word cmd_end 
      002679                       6566 	_dict_entry,6+F_CMD,DWRITE,digital_write
      002679 26 73                    1 	.word LINK 
                           00267B     2 	LINK=.
      00267B                          3 DWRITE:
      00267B 06                       4 	.byte 6+F_CMD 	
      00267C 44 57 52 49 54 45        5 	.ascii "DWRITE"
      002682 19 D1                    6 	.word digital_write 
      002684                       6567 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      002684 26 7B                    1 	.word LINK 
                           002686     2 	LINK=.
      002686                          3 DREAD:
      002686 45                       4 	.byte 5+F_IFUNC 	
      002687 44 52 45 41 44           5 	.ascii "DREAD"
      00268C 19 A1                    6 	.word digital_read 
      00268E                       6568 	_dict_entry,2,DO,do_loop
      00268E 26 86                    1 	.word LINK 
                           002690     2 	LINK=.
      002690                          3 DO:
      002690 02                       4 	.byte 2 	
      002691 44 4F                    5 	.ascii "DO"
      002693 21 73                    6 	.word do_loop 
      002695                       6569 	_dict_entry,3,DIR,directory 
      002695 26 90                    1 	.word LINK 
                           002697     2 	LINK=.
      002697                          3 DIR:
      002697 03                       4 	.byte 3 	
      002698 44 49 52                 5 	.ascii "DIR"
      00269B 1C DA                    6 	.word directory 
      00269D                       6570 	_dict_entry,3,DEC,dec_base
      00269D 26 97                    1 	.word LINK 
                           00269F     2 	LINK=.
      00269F                          3 DEC:
      00269F 03                       4 	.byte 3 	
      0026A0 44 45 43                 5 	.ascii "DEC"
      0026A3 12 C8                    6 	.word dec_base 
      0026A5                       6571 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      0026A5 26 9F                    1 	.word LINK 
                           0026A7     2 	LINK=.
      0026A7                          3 DDR:
      0026A7 43                       4 	.byte 3+F_IFUNC 	
      0026A8 44 44 52                 5 	.ascii "DDR"
      0026AB 21 F8                    6 	.word const_ddr 
      0026AD                       6572 	_dict_entry,6,DATALN,data_line  
      0026AD 26 A7                    1 	.word LINK 
                           0026AF     2 	LINK=.
      0026AF                          3 DATALN:
      0026AF 06                       4 	.byte 6 	
      0026B0 44 41 54 41 4C 4E        5 	.ascii "DATALN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      0026B6 22 22                    6 	.word data_line 
      0026B8                       6573 	_dict_entry,4,DATA,data  
      0026B8 26 AF                    1 	.word LINK 
                           0026BA     2 	LINK=.
      0026BA                          3 DATA:
      0026BA 04                       4 	.byte 4 	
      0026BB 44 41 54 41              5 	.ascii "DATA"
      0026BF 22 1C                    6 	.word data 
      0026C1                       6574 	_dict_entry,3+F_IFUNC,CRL,const_cr1 
      0026C1 26 BA                    1 	.word LINK 
                           0026C3     2 	LINK=.
      0026C3                          3 CRL:
      0026C3 43                       4 	.byte 3+F_IFUNC 	
      0026C4 43 52 4C                 5 	.ascii "CRL"
      0026C7 21 FE                    6 	.word const_cr1 
      0026C9                       6575 	_dict_entry,3+F_IFUNC,CRH,const_cr2 
      0026C9 26 C3                    1 	.word LINK 
                           0026CB     2 	LINK=.
      0026CB                          3 CRH:
      0026CB 43                       4 	.byte 3+F_IFUNC 	
      0026CC 43 52 48                 5 	.ascii "CRH"
      0026CF 22 04                    6 	.word const_cr2 
      0026D1                       6576 	_dict_entry,4+F_CFUNC,CHAR,char
      0026D1 26 CB                    1 	.word LINK 
                           0026D3     2 	LINK=.
      0026D3                          3 CHAR:
      0026D3 84                       4 	.byte 4+F_CFUNC 	
      0026D4 43 48 41 52              5 	.ascii "CHAR"
      0026D8 1D 93                    6 	.word char 
      0026DA                       6577 	_dict_entry,3,BYE,bye 
      0026DA 26 D3                    1 	.word LINK 
                           0026DC     2 	LINK=.
      0026DC                          3 BYE:
      0026DC 03                       4 	.byte 3 	
      0026DD 42 59 45                 5 	.ascii "BYE"
      0026E0 1E 25                    6 	.word bye 
      0026E2                       6578 	_dict_entry,5,BTOGL,bit_toggle
      0026E2 26 DC                    1 	.word LINK 
                           0026E4     2 	LINK=.
      0026E4                          3 BTOGL:
      0026E4 05                       4 	.byte 5 	
      0026E5 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0026EA 16 E9                    6 	.word bit_toggle 
      0026EC                       6579 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      0026EC 26 E4                    1 	.word LINK 
                           0026EE     2 	LINK=.
      0026EE                          3 BTEST:
      0026EE 45                       4 	.byte 5+F_IFUNC 	
      0026EF 42 54 45 53 54           5 	.ascii "BTEST"
      0026F4 16 F9                    6 	.word bit_test 
      0026F6                       6580 	_dict_entry,4,BSET,bit_set 
      0026F6 26 EE                    1 	.word LINK 
                           0026F8     2 	LINK=.
      0026F8                          3 BSET:
      0026F8 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0026F9 42 53 45 54              5 	.ascii "BSET"
      0026FD 16 C8                    6 	.word bit_set 
      0026FF                       6581 	_dict_entry,4,BRES,bit_reset
      0026FF 26 F8                    1 	.word LINK 
                           002701     2 	LINK=.
      002701                          3 BRES:
      002701 04                       4 	.byte 4 	
      002702 42 52 45 53              5 	.ascii "BRES"
      002706 16 D8                    6 	.word bit_reset 
      002708                       6582 	_dict_entry,3+F_IFUNC,BIT,bitmask
      002708 27 01                    1 	.word LINK 
                           00270A     2 	LINK=.
      00270A                          3 BIT:
      00270A 43                       4 	.byte 3+F_IFUNC 	
      00270B 42 49 54                 5 	.ascii "BIT"
      00270E 21 4A                    6 	.word bitmask 
      002710                       6583 	_dict_entry,3,AWU,awu 
      002710 27 0A                    1 	.word LINK 
                           002712     2 	LINK=.
      002712                          3 AWU:
      002712 03                       4 	.byte 3 	
      002713 41 57 55                 5 	.ascii "AWU"
      002716 1E A4                    6 	.word awu 
      002718                       6584 	_dict_entry,7,AUTORUN,autorun
      002718 27 12                    1 	.word LINK 
                           00271A     2 	LINK=.
      00271A                          3 AUTORUN:
      00271A 07                       4 	.byte 7 	
      00271B 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      002722 1E 2E                    6 	.word autorun 
      002724                       6585 	_dict_entry,3+F_IFUNC,ASC,ascii
      002724 27 1A                    1 	.word LINK 
                           002726     2 	LINK=.
      002726                          3 ASC:
      002726 43                       4 	.byte 3+F_IFUNC 	
      002727 41 53 43                 5 	.ascii "ASC"
      00272A 1D A5                    6 	.word ascii 
      00272C                       6586 	_dict_entry,3+F_IFUNC,AND,bit_and
      00272C 27 26                    1 	.word LINK 
                           00272E     2 	LINK=.
      00272E                          3 AND:
      00272E 43                       4 	.byte 3+F_IFUNC 	
      00272F 41 4E 44                 5 	.ascii "AND"
      002732 1F 07                    6 	.word bit_and 
      002734                       6587 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      002734 27 2E                    1 	.word LINK 
                           002736     2 	LINK=.
      002736                          3 ADCREAD:
      002736 47                       4 	.byte 7+F_IFUNC 	
      002737 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      00273E 19 6D                    6 	.word analog_read 
      002740                       6588 	_dict_entry,5,ADCON,power_adc 
      002740 27 36                    1 	.word LINK 
                           002742     2 	LINK=.
      002742                          3 ADCON:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      002742 05                       4 	.byte 5 	
      002743 41 44 43 4F 4E           5 	.ascii "ADCON"
      002748 19 31                    6 	.word power_adc 
      00274A                       6589 kword_dict:
      00274A                       6590 	_dict_entry,3+F_IFUNC,ABS,abs
      00274A 27 42                    1 	.word LINK 
                           00274C     2 	LINK=.
      00274C                          3 ABS:
      00274C 43                       4 	.byte 3+F_IFUNC 	
      00274D 41 42 53                 5 	.ascii "ABS"
      002750 1E F3                    6 	.word abs 
                                   6591 	
                                   6592 
      002780                       6593 	.bndry 128 ; align on FLASH block.
                                   6594 ; free space for user application  
      002780                       6595 user_space:
                                   6596 ; USR() function test
      002780 89               [ 2] 6597 	pushw x 
      002781 72 1A 50 0A      [ 1] 6598 	bset PC_ODR,#5 
      002785 85               [ 2] 6599 	popw x 
      002786 CD 1E 9B         [ 4] 6600 	call pause02 
      002789 72 1B 50 0A      [ 1] 6601 	bres PC_ODR,#5 
      00278D 81               [ 4] 6602 	ret
                                   6603 
                                   6604 	.area FLASH_DRIVE (ABS)
      010000                       6605 	.org 0x10000
      010000                       6606 fdrive:
                                   6607 ; .byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        00274C R   |     ACK     =  000006 
  5 ADCON      002742 R   |   5 ADCREAD    002736 R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADR     =  000002     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   5 AND        00272E R
    AREG    =  000002     |     ARG_OFS =  000002     |   5 ASC        002726 R
    ATTRIB  =  000002     |   5 AUTORUN    00271A R   |     AUTORUN_=  004000 
  5 AWU        002712 R   |   5 AWUHandl   000001 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
  5 BIT        00270A R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000B     |   5 BRES       002701 R   |     BS      =  000008 
    BSAVE   =  000001     |   5 BSET       0026F8 R   |     BSIZE   =  000001 
  5 BTEST      0026EE R   |   5 BTOGL      0026E4 R   |     BTW     =  000001 
  5 BYE        0026DC R   |     C       =  000001     |     CAN     =  000018 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000002     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   5 CHAR       0026D3 R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMD_END =  000002     |     CNT     =  000006     |     CNTR    =  000003 
    COMMA   =  000001     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        0026CB R
  5 CRL        0026C3 R   |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000007 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  5 DATA       0026BA R   |   5 DATALN     0026AF R   |     DBG_A   =  000005 
    DBG_CC  =  000006     |     DBG_X   =  000003     |     DBG_Y   =  000001 
    DBL     =  000003     |     DBLDIVDN=  000006     |     DBLHI   =  000001 
    DBLLO   =  000003     |     DBL_SIZE=  000004     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  5 DDR        0026A7 R   |     DEBUG   =  000000     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |     DEBUG_PR=  000001     |   5 DEC        00269F R
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  5 DIR        002697 R   |     DIVDNDHI=  00000B     |     DIVDNDLO=  00000D 
    DIVISOR =  000001     |     DIVISR  =  000007     |     DIVSOR  =  000001 
    DLE     =  000010     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  5 DO         002690 R   |     DOLP_ADR=  000003     |     DOLP_INW=  000005 
  5 DREAD      002686 R   |   5 DWRITE     00267B R   |   5 EEPROM     002668 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
    EM      =  000019     |   5 END        002673 R   |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |     ERR_BAD_=  00000A 
    ERR_BUF_=  00000F     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_D=  00000C     |     ERR_NO_F=  00000E     |     ERR_NO_L=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

    ERR_NO_P=  00000D     |     ERR_RUN_=  000006     |     ERR_SYNT=  000002 
    ESC     =  00001B     |     ETB     =  000017     |     ETX     =  000003 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FAUTORUN=  000006 
    FBREAK  =  000004     |     FCOMP   =  000005     |   5 FCPU       00265F R
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   5 FOR        002657 R   |   5 FORGET     00264C R
    FRUN    =  000000     |     FS      =  00001C     |     FSIZE   =  000001 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   5 GOSUB      002642 R   |   5 GOTO       002639 R
  5 GPIO       002630 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  5 HEX        002628 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   5 IDR        002620 R
  5 IF         002619 R   |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   5 INPUT      00260F R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   5 INVERT     002604 R   |     INW     =  000009 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   5 IWDGEN     0025F9 R
  5 IWDGREF    0025ED R   |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   5 KEY        0025E5 R   |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |   5 LET        0025DD R
    LF      =  00000A     |     LIMIT   =  000005     |     LINENO  =  000005 
  5 LINK    =  00274C R   |   5 LIST       0025D4 R   |     LL      =  000002 
    LLEN    =  000002     |     LL_HB   =  000001     |     LN_PTR  =  000005 
  5 LOAD       0025CB R   |   5 LOG        0025C3 R   |   5 LSHIFT     0025B8 R
    MAJOR   =  000001     |     MASK    =  000002     |     MATH_OVF=  000000 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |   5 MULDIV     0025AD R
    MULOP   =  000003     |     N1      =  000001     |     NAFR    =  004804 
    NAK     =  000015     |     NAMEPTR =  000003     |     NCLKOPT =  004808 
    NEG     =  000001     |   5 NEW        00259C R   |     NEW_FREE=  000001 
  5 NEXT       0025A4 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  5 NOT        002594 R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000000 R   |   5 ODR        00258C R
    ONOFF   =  000003     |     OP      =  000003     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         002585 R   |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
  5 PAD        00257D R   |     PAD_SIZE=  000080     |   5 PAUSE      002573 R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   5 PEEK       002560 R   |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PINNO   =  000001     |   5 PINP       002557 R   |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  5 PMODE      002569 R   |   5 POKE       00254E R   |     PORT    =  000003 
  5 POUT       002545 R   |     PREV    =  000001     |   5 PRINT      00253B R
  5 PRTA       002532 R   |   5 PRTB       002529 R   |   5 PRTC       002520 R
  5 PRTD       002517 R   |   5 PRTE       00250E R   |   5 PRTF       002505 R
  5 PRTG       0024FC R   |   5 PRTH       0024F3 R   |   5 PRTI       0024EA R
    PSTR    =  000003     |   5 QKEY       0024E1 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   5 READ       0024D8 R
  5 REBOOT     0024CD R   |     REG     =  000001     |     RELOP   =  000003 
  5 REMARK     0024C2 R   |   5 RESTORE    0024B6 R   |     RETL1   =  000001 
  5 RETURN     0024AB R   |     RET_ADDR=  000003     |     RET_INW =  000005 
  5 RND        0024A3 R   |     ROP     =  004800     |     RS      =  00001E 
  5 RSHIFT     002498 R   |     RST_SR  =  0050B3     |   5 RUN        002490 R
    RXCHAR  =  000001     |   5 SAVE       002487 R   |     SDIVSR  =  000005 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
  5 SHOW       00247E R   |     SI      =  00000F     |     SIGN    =  000001 
  5 SIZE       002475 R   |     SKIP    =  000005     |   5 SLEEP      00246B R
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  5 SPIEN      002457 R   |   5 SPIRD      002461 R   |   5 SPISEL     00244C R
  5 SPIWR      002442 R   |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SQUOT   =  000006     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  0000A0     |   5 STEP       002439 R   |   5 STOP       002430 R
    STR     =  000003     |     STX     =  000002     |     SUB     =  00001A 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  5 TICKS      002426 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   5 TIMEOUT    002410 R
  5 TIMER      00241C R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000006     |     TK_CFUNC=  000082     |     TK_CHAR =  000003 
    TK_CMD  =  000080     |     TK_COLON=  000001     |     TK_COMMA=  000009 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LE   =  000036     |     TK_LPARE=  000007     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  000008     |     TK_SHARP=  00000A 
    TK_VAR  =  000085     |   5 TO         002409 R   |   5 TONE       002400 R
  5 Timer4Up   000037 R   |     U1      =  000001     |     U8      =  000003 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   5 UBOUND     0023F5 R
  5 UBTN_Han   00007A R   |   5 UFLASH     0023EA R   |   5 UNTIL      0023E0 R
    US      =  00001F     |   5 USER_ABO   000082 R   |   5 USR        0023D8 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
  5 Uart1RxH   00000F R   |   5 UserButt   00004D R   |     VAR_ADDR=  000006 
    VSIZ    =  000002     |     VSIZE   =  000006     |     VT      =  00000B 
  5 WAIT       0023CF R   |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  5 WORDS      0023C5 R   |   5 WRITE      0023BB R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XADR    =  000001     |     XFIRST  =  000001 
    XMASK   =  000001     |     XOFF    =  000013     |     XON     =  000011 
  5 XOR        0023B3 R   |     XREG    =  000003     |     XSAVE   =  000005 
    YSAVE   =  000007     |   5 abs        001EF3 R   |   1 acc16      00000C R
  1 acc24      00000B R   |   1 acc8       00000D R   |   5 accept_c   000B6C R
  5 add_char   001560 R   |   5 add_spac   0013B5 R   |   5 analog_r   00196D R
  5 ansi_seq   000B6C R   |   5 arduino_   001FDE R   |   5 arg_list   0010E5 R
  1 array_si   000021 R   |   5 ascii      001DA5 R   |   5 at_tst     000D77 R
  5 atoi24     000E88 R   |   5 atoi_exi   000EEE R   |   5 autorun    001E2E R
  5 autorun_   0006D5 R   |   5 awu        001EA4 R   |   5 awu02      001EAE R
  5 bad_port   001DFD R   |   1 base       00000A R   |   1 basicptr   000004 R
  5 beep       0018FA R   |   5 bin_exit   000C55 R   |   5 bit_and    001F07 R
  5 bit_or     001F1F R   |   5 bit_rese   0016D8 R   |   5 bit_set    0016C8 R
  5 bit_test   0016F9 R   |   5 bit_togg   0016E9 R   |   5 bit_xor    001F37 R
  5 bitmask    00214A R   |   5 bkslsh_t   000D24 R   |   5 bksp       0002BD R
  5 block_er   0001A3 R   |   5 break_po   001A3A R   |   5 bye        001E25 R
  5 cancel_a   00069D R   |   5 char       001D93 R   |   5 clear_ba   0006EA R
  5 clear_va   00055D R   |   5 clock_in   00009D R   |   5 cmd_end    0018E6 R
  5 cmd_line   000908 R   |   5 cmd_name   001054 R   |   5 cmp_name   001ADB R
  5 cold_sta   0005D4 R   |   5 colon_ts   000D4B R   |   5 comma_ts   000D56 R
  5 comp_msg   00085E R   |   5 compile    0004EA R   |   5 const_cr   0021FE R
  5 const_cr   002204 R   |   5 const_dd   0021F8 R   |   5 const_ee   002216 R
  5 const_id   0021F2 R   |   5 const_in   002210 R   |   5 const_od   0021EC R
  5 const_ou   00220A R   |   5 const_po   0021B6 R   |   5 const_po   0021BC R
  5 const_po   0021C2 R   |   5 const_po   0021C8 R   |   5 const_po   0021CE R
  5 const_po   0021D4 R   |   5 const_po   0021DA R   |   5 const_po   0021E0 R
  5 const_po   0021E6 R   |   5 convert_   000BCC R   |   5 copy_com   000DAC R
  1 count      000003 R   |   5 cp_loop    001094 R   |   5 cpy_cmd_   0013A0 R
  5 cpy_quot   0013D9 R   |   5 create_g   000451 R   |   5 cs_high    0023A6 R
  5 cstk_pro   00129C R   |   5 dash_tst   000D6C R   |   5 data       00221C R
  1 data_len   000009 R   |   5 data_lin   002222 R   |   1 data_ofs   000008 R
  1 data_ptr   000006 R   |   5 data_sea   002262 R   |   5 dbl_sign   000FBC R
  5 dec_base   0012C8 R   |   5 decomp_l   001469 R   |   5 decompil   001422 R
  5 del_line   000424 R   |   5 delete     0002CD R   |   5 digital_   0019A1 R
  5 digital_   0019D1 R   |   5 dir_loop   001CE6 R   |   5 director   001CDA R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Symbol Table

  5 disk_fre   001AC8 R   |   5 div32_16   000FC6 R   |   5 divide     00101D R
  5 divu24_8   000A3B R   |   5 dneg       000FB1 R   |   5 do_loop    002173 R
  5 do_progr   000196 R   |   5 drive_fr   001D4F R   |   5 enable_i   0020F4 R
  5 eql_tst    000E01 R   |   5 equal      001573 R   |   5 erase_fl   0001C2 R
  5 err_bad_   0007CA R   |   5 err_buf_   000840 R   |   5 err_cmd_   00078E R
  5 err_div0   000753 R   |   5 err_dupl   0007A8 R   |   5 err_math   00073A R
  5 err_mem_   00071F R   |   5 err_msg    0006FF R   |   5 err_no_a   0007D6 R
  5 err_no_d   000809 R   |   5 err_no_f   00082D R   |   5 err_no_l   000762 R
  5 err_no_p   000819 R   |   5 err_not_   0007B9 R   |   5 err_run_   000778 R
  5 err_synt   00072C R   |   5 escaped    000BE1 R   |   5 expect     0010D3 R
  5 expr_exi   001224 R   |   5 expressi   0011DE R   |   5 factor     001135 R
  1 farptr     000016 R   |   5 fcpu       001F81 R   |   7 fdrive     010000 R
  1 ffree      000019 R   |   5 file_cou   001D47 R   |   5 final_te   000B65 R
  5 first_li   00134D R   |   1 flags      000023 R   |   5 for        001754 R
  5 forget     001C73 R   |   1 free_ram   00005A R   |   5 func_arg   0010E0 R
  5 func_not   0020E7 R   |   5 ge         001575 R   |   5 get_arra   001110 R
  5 get_targ   00181E R   |   5 get_tick   001EED R   |   5 get_toke   000CBD R
  5 getc       0002A9 R   |   5 gosub      00184F R   |   5 goto       001834 R
  5 gpio       001DD8 R   |   5 gt         001571 R   |   5 gt_tst     000E0C R
  5 hex_base   0012C3 R   |   5 hex_dump   000355 R   |   5 if         001740 R
  1 in         000001 R   |   1 in.saved   000002 R   |   1 in.w       000000 R
  5 incr_far   001A88 R   |   5 input_ex   00169A R   |   5 input_lo   001633 R
  5 input_va   001631 R   |   5 insert_l   00047D R   |   5 insert_l   0004E7 R
  5 interp_l   000949 R   |   5 interpre   000924 R   |   5 invert     002164 R
  5 is_alnum   000585 R   |   5 is_alpha   00056B R   |   5 is_digit   00057C R
  5 itoa       0009E1 R   |   5 itoa_loo   000A00 R   |   5 jp_to_ta   001842 R
  5 key        001DC5 R   |   5 kw_loop    000C71 R   |   5 kword_di   00274A R
  5 kword_en   0023B1 R   |   5 le         00157A R   |   5 leading_   00213A R
  5 left_arr   000B6C R   |   5 let        0012F9 R   |   5 let_arra   001307 R
  5 let_var    00130A R   |   5 lines_sk   001350 R   |   5 list       001324 R
  5 list_exi   001392 R   |   5 list_loo   001370 R   |   5 load       001C43 R
  5 load_aut   0006AC R   |   5 load_fil   001C12 R   |   5 log2       00212F R
  5 logical_   0020DD R   |   5 long_div   000F99 R   |   5 loop_bac   001801 R
  1 loop_dep   000020 R   |   5 loop_don   001816 R   |   5 lshift     001F4F R
  5 lt         001578 R   |   5 lt_tst     000E35 R   |   5 modulo     001033 R
  5 move       0003BE R   |   5 move_dow   0003DC R   |   5 move_era   000128 R
  5 move_exi   0003FD R   |   5 move_loo   0003E1 R   |   5 move_prg   00015C R
  5 move_up    0003CE R   |   5 mul_char   001562 R   |   5 muldiv     001038 R
  5 multiply   000F64 R   |   5 mulu24_8   000A63 R   |   5 nbr_tst    000CF0 R
  5 ne         00157D R   |   5 neg_acc2   000A9D R   |   5 new        001A58 R
  5 next       0017D4 R   |   5 next_lin   00092C R   |   5 next_tok   000970 R
  5 no_match   0010A6 R   |   5 other      000E5E R   |   3 pad        0016E0 R
  5 pad_ref    0023AB R   |   5 parse_bi   000C33 R   |   5 parse_in   000BE9 R
  5 parse_ke   000C70 R   |   5 parse_qu   000B94 R   |   5 pause      001E91 R
  5 pause02    001E9B R   |   5 peek       00172F R   |   5 pin_mode   001F8D R
  5 plus_tst   000DD5 R   |   5 poke       001720 R   |   5 power_ad   001931 R
  5 prcnt_ts   000DF6 R   |   5 print      0015A0 R   |   5 print_ex   001605 R
  5 print_in   0009C5 R   |   5 print_ty   001611 R   |   5 printxy    000F05 R
  5 program_   00013C R   |   5 program_   00015C R   |   5 prt_basi   001580 R
  5 prt_loop   0015A4 R   |   5 prt_tok    0002E7 R   |   5 prti24     0009D5 R
  1 ptr16      000017 R   |   1 ptr8       000018 R   |   5 putc       0002A0 R
  5 puts       0002B3 R   |   5 qkey       001DCD GR  |   5 qmark_ts   000D82 R
  5 random     001FFE R   |   5 read       00229A R   |   5 read01     00229C R
  5 readln     000AC0 R   |   5 readln_l   000AC8 R   |   5 readln_q   000B85 R
  5 refresh_   00212A R   |   5 rel_exit   00127F R   |   5 relation   001227 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]

Symbol Table

  5 relop_st   001565 R   |   5 remark     00169D R   |   5 reset_co   0015A2 R
  5 rest_con   001621 R   |   5 restore    00224F R   |   5 return     00186F R
  5 right_al   0013C7 R   |   5 right_ar   000B6C R   |   5 row_alig   001A6D R
  5 row_eras   000101 R   |   5 row_eras   000128 R   |   5 row_loop   000338 R
  5 rparnt_t   000D40 R   |   5 rshift     001F68 R   |   5 rt_msg     00084D R
  5 run        00188D R   |   5 run_it     0018BF R   |   1 rx_char    000025 R
  5 save       001B49 R   |   5 save_con   001611 R   |   5 search_d   001086 R
  5 search_e   0010D0 R   |   5 search_f   001AFC R   |   5 search_l   000400 R
  5 search_l   000408 R   |   5 search_n   00108A R   |   1 seedx      000012 R
  1 seedy      000014 R   |   5 seek_fdr   001A96 R   |   5 select_p   001FCE R
  5 set_time   0020CB R   |   5 sharp_ts   000D61 R   |   5 show       001282 R
  5 show_row   000326 R   |   5 single_c   00155B R   |   5 size       0012CD R
  5 skip       000EF2 R   |   5 slash_ts   000DEB R   |   5 sleep      001E86 R
  5 software   00058E R   |   5 spaces     0002DB R   |   5 spi_clea   00233F R
  5 spi_disa   002327 R   |   5 spi_enab   0022F4 R   |   5 spi_rcv_   002361 R
  5 spi_read   00238C R   |   5 spi_sele   002394 R   |   5 spi_send   00234B R
  5 spi_writ   00236C R   |   3 stack_fu   001760 R   |   3 stack_un   001800 R
  5 star_tst   000DE0 R   |   5 step       0017AD R   |   5 stop       001A0C R
  5 store_lo   0017C1 R   |   5 str_matc   0010B3 R   |   5 str_tst    000CE0 R
  5 strcmp     00039F R   |   5 strcpy     0003B0 R   |   5 strlen     000392 R
  5 syntax_e   00087E R   |   1 tab_widt   000024 R   |   5 tb_error   000880 R
  5 term       00118F R   |   5 term01     001198 R   |   5 term_exi   0011DB R
  3 tib        001690 R   |   5 tick_tst   000D9A R   |   1 ticks      00000E R
  5 timeout    0020DA R   |   1 timer      000010 R   |   5 timer2_i   0000B3 R
  5 timer4_i   0000C0 R   |   5 tk_id      00086E R   |   5 to         00177D R
  5 to_eepro   00017F R   |   5 to_flash   000193 R   |   5 to_upper   000E7C GR
  5 token_ch   000E75 R   |   5 token_ex   000E79 R   |   5 token_ms   00031E R
  5 tone       0018ED R   |   5 try_next   00228A R   |   1 txtbgn     00001C R
  1 txtend     00001E R   |   5 uart1_in   000265 R   |   5 uart1_se   000275 R
  5 ubound     0012D7 R   |   5 udiv32_1   000F87 R   |   5 uflash     001E02 R
  5 umstar     000F2A R   |   5 unlock_e   0000D5 R   |   5 unlock_f   0000EB R
  5 until      002188 R   |   5 user_int   000060 R   |   5 user_spa   002780 R
  5 usr        001E08 R   |   5 var_name   00141A R   |   1 vars       000026 R
  5 wait       0016A3 R   |   5 warm_ini   00067F R   |   5 warm_sta   000905 R
  5 words      002065 R   |   5 words_co   0020B5 R   |   5 write      001D5C R
  5 write_bl   000242 R   |   5 write_by   0001CD R   |   5 write_ee   000209 R
  5 write_ex   00023D R   |   5 write_fl   0001F3 R   |   5 write_ro   000170 R
  5 zero_pad   001A62 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5A   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   278E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

