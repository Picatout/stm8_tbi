ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variabls
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     31 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000040    23         F_IFUNC=0x40 ; integer function keyword
                           000080    24         F_CFUNC=0x80 ; character function keyword
                           0000C0    25         F_CONST=0xC0 ; function keyword that return a constant
                                     26 
                           0000A0    27 	STACK_SIZE=160
                           0017FF    28 	STACK_EMPTY=RAM_SIZE-1  
                           000000    29 	FRUN=0 ; flags run code in variable flags
                           000001    30 	FTRAP=1 ; inside trap handler 
                           000002    31 	FLOOP=2 ; FOR loop in preparation 
                           000003    32 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    33 	FBREAK=4 ; break point flag 
                           000005    34 	FCOMP=5  ; compiling flags 
                           000006    35 	FAUTORUN=6; auto start program running 
                                     36 
                           004000    37 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     38 
                           000006    39         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     40 
                           007FFF    41 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     42 
                           000008    43 	RX_QUEUE_SIZE=8 
                                     44 
                           00F424    45         TIM2_CLK_FREQ=62500
                                     46 
                           000050    47 	TIB_SIZE=80
                           000080    48         PAD_SIZE=128
                                     49 
                                     50 ;--------------------------------------
                                     51 ;   constantes related to Arduino 
                                     52 ;   API mapping 
                                     53 ;-------------------------------------
                           000000    54         INP=0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                           000001    55         OUTP=1 
                                     56 
                                     57 ;--------------------------------------
                                     58 ;       token attribute
                                     59 ;--------------------------------------
                                     60         ; bits 4:5 identify token group 
                                     61         ; 0x0n -> miscelinous 
                                     62         ; 0x1n -> +|- operators 
                                     63         ; 0x2n -> *|/|% operators
                                     64         ; 0x3n -> relational operators 
                           000080    65         TK_CMD=128      ; BASIC command   
                           000081    66         TK_IFUNC=129    ; BASIC integer function
                           000082    67         TK_CFUNC=130    ; BASIC character function
                           000083    68         TK_CONST=131    ; BASIC constant 
                           000084    69         TK_INTGR=132
                           000085    70         TK_VAR=133
                           000000    71         TK_NONE=0       ; not a token 
                           000002    72         TK_QSTR=2     ; quoted string  
                           000003    73         TK_CHAR=3       ; ASCII character 
                           000006    74         TK_ARRAY=6     ; array variable '@' 
                           000007    75         TK_LPAREN=7     ; left parenthesis '('
                           000008    76         TK_RPAREN=8     ; right parenthesis ')'
                           000009    77         TK_COMMA=9     ; item separator ',' 
                           00000A    78         TK_SHARP=0xa     ; print colon width '#' 
                           00000B    79         TK_COLON=0xb      ; command separator ':' 
                                     80         
                           000010    81         TK_PLUS=0x10    ; addition operator '+'
                           000011    82         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    83         TK_MULT=0x20    ; multiplication operator '*'
                           000021    84         TK_DIV=0x21     ; division operator '/'
                           000022    85         TK_MOD=0x22     ; modulo operator '%'
                                     86 
                                     87         ; don't change these token values 
                                     88         ; values chosen to be used as a mask.
                                     89         ; bit 7   1 for dictionary words else 0 
                                     90         ; bits 6  always 0 
                                     91         ; bits 5:4 identify group 
                                     92         ; bits 3:0 token identifier inside group  
                           000031    93         TK_GT=0x31      ; relation operator '>'
                           000032    94         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033    95         TK_GE=0x33      ; relation operator '>='
                           000034    96         TK_LT=0x34      ; relation operator '<'
                           000036    97         TK_LE=0x36      ; relation operator '<='
                           000035    98         TK_NE=0x35      ; relation operator '<>' not equal 
                                     99         ; token groups 
                           000030   100         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   101         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   102         TK_GRP_ADD=0x10  ; additive operators
                           000020   103         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   104         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   105         CMD_END=2 
                                    106 
                                    107 ;--------------------------------------
                                    108 ;   error codes 
                                    109 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                           000000   110     ERR_NONE=0
                           000001   111     ERR_MEM_FULL=1 
                           000002   112     ERR_SYNTAX=2
                           000003   113     ERR_MATH_OVF=3
                           000004   114     ERR_DIV0=4 
                           000005   115     ERR_NO_LINE=5
                           000006   116     ERR_RUN_ONLY=6
                           000007   117     ERR_CMD_ONLY=7
                           000008   118     ERR_DUPLICATE=8
                           000009   119     ERR_NOT_FILE=9
                           00000A   120     ERR_BAD_VALUE=10
                           00000B   121     ERR_NO_ACCESS=11
                           00000C   122     ERR_NO_DATA=12 
                           00000D   123     ERR_NO_PROG=13
                           00000E   124     ERR_NO_FSPACE=14
                           00000F   125     ERR_BUF_FULL=15
                                    126 
                                    127 ;--------------------------------------
                                    128 ;   assembler flags 
                                    129 ;-------------------------------------
                           000000   130     MATH_OVF=0 ; if 1 the stop on math overflow 
                                    131 
                           000002   132     CELL_SIZE=2 
                                    133 
                                    134     .macro _usec_dly n 
                                    135     ldw x,#(16*n-2)/4
                                    136     decw x
                                    137     nop 
                                    138     jrne .-4
                                    139     .endm 
                                    140     
                                    141     ; load X register with 
                                    142     ; entry point of dictionary
                                    143     ; before calling 'search_dict'
                                    144     .macro _ldx_dict dict_name
                                    145     ldw x,#dict_name+2
                                    146     .endm 
                                    147 
                                    148     ; reset BASIC pointer
                                    149     ; to beginning of last token
                                    150     ; extracted except if it was end of line 
                                    151     .macro _unget_token 
                                    152      mov in,in.saved  
                                    153     .endm
                                    154 
                                    155 ;-------------------------------
                                    156 ;  macros used to help debugging
                                    157 ;-------------------------------
                           000000   158     DEBUG=0
                                    159     .macro _dbg 
                                    160     DEBUG=1
                                    161     .endm
                                    162 
                                    163     .macro _nodbg
                                    164     DEBUG=0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                    165     .endm 
                                    166 
                           000006   167     DBG_CC=6
                           000005   168     DBG_A=5 
                           000003   169     DBG_X=3 
                           000001   170     DBG_Y=1 
                                    171     .macro _dbg_save_regs 
                                    172     .if DEBUG
                                    173     push cc ; (6,sp)
                                    174     push a   ; (5,sp)
                                    175     pushw x  ; (3,sp)
                                    176     pushw y  ; (1,sp)
                                    177     .endif 
                                    178     .endm 
                                    179 
                                    180     .macro _dbg_restore_regs 
                                    181     .if DEBUG 
                                    182     popw y 
                                    183     popw x 
                                    184     pop a 
                                    185     pop cc 
                                    186     .endif 
                                    187     .endm 
                                    188 
                                    189     .macro _dbg_getc 
                                    190     .if DEBUG 
                                    191     _dbg_save_regs 
                                    192     call getc
                                    193     ld (DBG_A,sp),a 
                                    194     _dbg_restore_regs  
                                    195     .endif
                                    196     .endm 
                                    197 
                                    198     .macro _dbg_putc 
                                    199     .if DEBUG
                                    200     push cc 
                                    201     call putc 
                                    202     pop cc 
                                    203     .endif 
                                    204     .endm 
                                    205 
                                    206     .macro _dbg_puts 
                                    207     .if DEBUG 
                                    208     _dbg_save_regs
                                    209     call puts 
                                    210     _dbg_restore_regs
                                    211     .endif 
                                    212     .endm 
                                    213 
                                    214     .macro _dbg_prti24 
                                    215     .if DEBUG 
                                    216     _dbg_save_regs
                                    217     call prti24 
                                    218     _dbg_restore_regs
                                    219     .endif
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                    220     .endm 
                                    221 
                                    222     .macro _dbg_prt_regs
                                    223     .if DEBUG
                                    224     _dbg_save_regs
                                    225     call prt_regs 
                                    226     _dbg_restore_regs 
                                    227     .endif 
                                    228     .endm 
                                    229 
                                    230     .macro _dbg_peek addr 
                                    231     .if DEBUG
                                    232     _dbg_save_regs 
                                    233     ldw x,addr 
                                    234     call peek     
                                    235     _dbg_restore_regs
                                    236     .endif 
                                    237     .endm 
                                    238 
                                    239     .macro _dbg_parser_init 
                                    240     .if DEBUG 
                                    241     _dbg_save_regs
                                    242     call parser_init 
                                    243     _dbg_restore_regs
                                    244     .endif
                                    245     .endm
                                    246 
                                    247     .macro _dbg_readln
                                    248     .if DEBUG 
                                    249     _dbg_save_regs
                                    250     call readln
                                    251     _dbg_restore_regs
                                    252     .endif
                                    253     .endm
                                    254 
                                    255     .macro _dbg_number
                                    256     .if DEBUG 
                                    257     _dbg_save_regs
                                    258     call number 
                                    259     _dbg_restore_regs
                                    260     .endif
                                    261     .endm  
                                    262 
                                    263     .macro _dbg_nextword
                                    264     .if DEBUG 
                                    265     _dbg_save_regs
                                    266     call get_token   
                                    267     _dbg_restore_regs
                                    268     .endif
                                    269     .endm  
                                    270 
                                    271     .macro _dbg_dots 
                                    272     .if DEBUG 
                                    273     _dbg_save_regs
                                    274     call dots 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    275     _dbg_restore_regs
                                    276     .endif 
                                    277     .endm 
                                    278 
                                    279     .macro _dbg_trap
                                    280     .if DEBUG 
                                    281     bset flags,#FTRAP 
                                    282     trap 
                                    283     .endif 
                                    284     .endm 
                                    285 
                                    286     .macro _dbg_mark n  
                                    287     .if DEBUG 
                                    288     push cc
                                    289     push a 
                                    290     ld a,#n 
                                    291     call putc
                                    292     btjf UART3_SR,#UART_SR_TC,. 
                                    293     pop a 
                                    294     pop cc 
                                    295     .endif 
                                    296     .endm 
                                    297     
                                    298     .macro _dbg_prt_var var 
                                    299     .if DEBUG
                                    300     _dbg_save_regs 
                                    301     ldw x,var 
                                    302     ldw acc16,x 
                                    303     clr acc24 
                                    304     clrw x 
                                    305     ld a,#16+128  
                                    306     call prti24
                                    307     ld a,#CR 
                                    308     call putc  
                                    309     _dbg_restore_regs 
                                    310     .endif 
                                    311     .endm 
                                    312 
                                    313     .macro _dbg_show 
                                    314     .if DEBUG 
                                    315     _dbg_save_regs 
                                    316     call show 
                                    317     _dbg_restore_regs
                                    318     .endif
                                    319     .endm 
                                    320 
                                    321     ; software reset 
                                    322     .macro _swreset
                                    323     mov WWDG_CR,#0X80
                                    324     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                     32 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     AND_IDX=ADCREAD_IDX+2     ;
                           000008    29     ASC_IDX=AND_IDX+2     ;
                           00000A    30     AWU_IDX=ASC_IDX+2 
                           00000C    31     BIT_IDX=AWU_IDX+2
                           00000E    32     BRES_IDX=BIT_IDX+2
                           000010    33     BSET_IDX=BRES_IDX+2
                           000012    34     BTEST_IDX=BSET_IDX+2
                           000014    35     BTOGL_IDX=BTEST_IDX+2
                           000016    36     BYE_IDX=BTOGL_IDX+2
                           000018    37     CHAR_IDX=BYE_IDX+2
                           00001A    38     CRH_IDX=CHAR_IDX+2
                           00001C    39     CRL_IDX=CRH_IDX+2
                           00001E    40     DATA_IDX=CRL_IDX+2
                           000020    41     DATALN_IDX=DATA_IDX+2
                           000022    42     DDR_IDX=DATALN_IDX+2
                           000024    43     DEC_IDX=DDR_IDX+2
                           000026    44     DO_IDX=DEC_IDX+2
                           000028    45     DREAD_IDX=DO_IDX+2
                           00002A    46     DWRITE_IDX=DREAD_IDX+2
                           00002C    47     EDIT_IDX=DWRITE_IDX+2
                           00002E    48     EEPROM_IDX=EDIT_IDX+2
                           000030    49     END_IDX=EEPROM_IDX+2
                           000032    50     ERASE_IDX=END_IDX+2
                           000034    51     FCPU_IDX=ERASE_IDX+2
                           000036    52     SAVE_IDX=FCPU_IDX+2
                           000038    53     FOR_IDX=SAVE_IDX+2
                           00003A    54     GOSUB_IDX=FOR_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00003C    55     GOTO_IDX=GOSUB_IDX+2
                           00003E    56     GPIO_IDX=GOTO_IDX+2
                           000040    57     HEX_IDX=GPIO_IDX+2
                           000042    58     IDR_IDX=HEX_IDX+2
                           000044    59     IF_IDX=IDR_IDX+2
                           000046    60     INPUT_IDX=IF_IDX+2
                           000048    61     INVERT_IDX=INPUT_IDX+2
                           00004A    62     IWDGEN_IDX=INVERT_IDX+2
                           00004C    63     IWDGREF_IDX=IWDGEN_IDX+2
                           00004E    64     KEY_IDX=IWDGREF_IDX+2
                           000050    65     LET_IDX=KEY_IDX+2
                           000052    66     LIST_IDX=LET_IDX+2
                           000054    67     LOG_IDX=LIST_IDX+2
                           000056    68     LSHIFT_IDX=LOG_IDX+2
                           000058    69     MULDIV_IDX=LSHIFT_IDX+2
                           00005A    70     NEXT_IDX=MULDIV_IDX+2
                           00005C    71     NEW_IDX=NEXT_IDX+2
                           00005E    72     NOT_IDX=NEW_IDX+2
                           000060    73     ODR_IDX=NOT_IDX+2
                           000062    74     OR_IDX=ODR_IDX+2
                           000064    75     PAD_IDX=OR_IDX+2
                           000066    76     PAUSE_IDX=PAD_IDX+2
                           000068    77     PMODE_IDX=PAUSE_IDX+2
                           00006A    78     PEEK_IDX=PMODE_IDX+2
                           00006C    79     PINP_IDX=PEEK_IDX+2
                           00006E    80     POKE_IDX=PINP_IDX+2
                           000070    81     POUT_IDX=POKE_IDX+2
                           000072    82    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000074    83     PRTA_IDX=PRT_IDX+2
                           000076    84     PRTB_IDX=PRTA_IDX+2
                           000078    85     PRTC_IDX=PRTB_IDX+2
                           00007A    86     PRTD_IDX=PRTC_IDX+2
                           00007C    87     PRTE_IDX=PRTD_IDX+2
                           00007E    88     PRTF_IDX=PRTE_IDX+2
                           000080    89     PRTG_IDX=PRTF_IDX+2
                           000082    90     PRTH_IDX=PRTG_IDX+2
                           000084    91     PRTI_IDX=PRTH_IDX+2
                           000086    92     QKEY_IDX=PRTI_IDX+2
                           000088    93     READ_IDX=QKEY_IDX+2
                           00008A    94     RBT_IDX=READ_IDX+2  ; REBOOT
                           00008C    95 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00008E    96     REST_IDX=REM_IDX+2 ; RESTORE
                           000090    97     RET_IDX=REST_IDX+2  ; RETURN 
                           000092    98     RND_IDX=RET_IDX+2 ; RANDOM 
                           000094    99     RSHIFT_IDX=RND_IDX+2
                           000096   100     RUN_IDX=RSHIFT_IDX+2
                           000098   101     SHOW_IDX=RUN_IDX+2
                           00009A   102     FREE_IDX=SHOW_IDX+2
                           00009C   103     SLEEP_IDX=FREE_IDX+2
                           00009E   104     SPIRD_IDX=SLEEP_IDX+2
                           0000A0   105     SPIEN_IDX=SPIRD_IDX+2
                           0000A2   106     SPISEL_IDX=SPIEN_IDX+2
                           0000A4   107     SPIWR_IDX=SPISEL_IDX+2
                           0000A6   108     STEP_IDX=SPIWR_IDX+2
                           0000A8   109     STOP_IDX=STEP_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           0000AA   110     TICKS_IDX=STOP_IDX+2
                           0000AC   111     TIMER_IDX=TICKS_IDX+2
                           0000AE   112     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000B0   113     TO_IDX=TMROUT_IDX+2
                           0000B2   114     TONE_IDX=TO_IDX+2
                           0000B4   115     UBOUND_IDX=TONE_IDX+2
                           0000B6   116     UFLASH_IDX=UBOUND_IDX+2
                           0000B8   117     UNTIL_IDX=UFLASH_IDX+2
                           0000BA   118     USR_IDX=UNTIL_IDX+2
                           0000BC   119     WAIT_IDX=USR_IDX+2
                           0000BE   120     WORDS_IDX=WAIT_IDX+2
                           0000C0   121     WRITE_IDX=WORDS_IDX+2
                           0000C2   122     XOR_IDX=WRITE_IDX+2
                           0000C4   123     SIZE_IDX=XOR_IDX+2 
                                    124     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                     33   
                                     34 
                                     35 ;_dbg 
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001690                         41     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         43 pad:: .ds PAD_SIZE             ; working buffer
      001760                         44 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         45 stack_unf: ; stack underflow ; control_stack bottom 
                                     46 
                                     47 ;;--------------------------------------
                                     48     .area HOME 
                                     49 ;; interrupt vector table at 0x8000
                                     50 ;;--------------------------------------
      000000 82 00 0E 51             51     int cold_start			; RESET vector 
                           000000    52 .if DEBUG
                                     53 	int TrapHandler 		;TRAP  software interrupt
                           000001    54 .else
      000004 82 00 00 00             55 	int NonHandledInterrupt ;TRAP  software interrupt
                                     56 .endif
      000008 82 00 00 00             57 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01             58 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             59 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             60 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             61 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             62 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             63 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 24             64 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             65 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             66 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             67 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             68 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             69 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             70 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             71 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             72 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             73 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             74 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 02 4F             75 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             76 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             77 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             78 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             79 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 0F             80 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             81 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             82 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             83 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             84 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             85 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             86 	int NonHandledInterrupt ;int29  not used
                                     87 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     88 ;---------------------------------------
                                     89     .area CODE
                                     90 ;---------------------------------------
                           000000    91 .if DEBUG
                                     92 .asciz "STM8_TBI" ; I like to put module name here.
                                     93 .endif 
                                     94 
                                     95 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     96 ; non handled interrupt 
                                     97 ; reset MCU
                                     98 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         99 NonHandledInterrupt:
      000000 71                     100     .byte 0x71  ; invalid opcode reinitialize MCU
                                    101 
                                    102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    103 ; auto wakeup from halt
                                    104 ; at iret, program continue 
                                    105 ; after hatl instruction
                                    106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        107 AWUHandler:
      000001 72 19 50 F0      [ 1]  108 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  109 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  110 	clr AWU_TBR 
      00000E 80               [11]  111 	iret
                                    112 
                                    113 ;------------------------------------
                                    114 ; software interrupt handler  
                                    115 ;------------------------------------
                           000000   116 .if DEBUG 
                                    117 TrapHandler:
                                    118 	bset flags,#FTRAP 
                                    119 	call print_registers
                                    120 	call cmd_itf
                                    121 	bres flags,#FTRAP 	
                                    122 	iret
                                    123 .endif 
                                    124 
                                    125 ;------------------------------
                                    126 ; TIMER 4 is used to maintain 
                                    127 ; a milliseconds 'ticks' counter
                                    128 ; and decrement 'timer' varaiable
                                    129 ;--------------------------------
      00000F                        130 Timer4UpdateHandler:
      00000F 72 5F 53 42      [ 1]  131 	clr TIM4_SR 
      000013 CE 00 0E         [ 2]  132 	ldw x,ticks
      000016 5C               [ 1]  133 	incw x
      000017 CF 00 0E         [ 2]  134 	ldw ticks,x 
      00001A CE 00 10         [ 2]  135 	ldw x,timer
                                    136 ;	tnzw x 
      00001D 27 04            [ 1]  137 	jreq 1$
      00001F 5A               [ 2]  138 	decw x 
      000020 CF 00 10         [ 2]  139 	ldw timer,x 
      000023                        140 1$:	
      000023 80               [11]  141 	iret 
                                    142 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                    143 ;------------------------------------
                                    144 ; Triggered by pressing USER UserButton 
                                    145 ; on NUCLEO card.
                                    146 ; This is used to abort a progam lock 
                                    147 ; in infinite loop. 
                                    148 ;------------------------------------
      000024                        149 UserButtonHandler:
                                    150 ; wait button release
      000024 5F               [ 1]  151 	clrw x
      000025 5A               [ 2]  152 1$: decw x 
      000026 26 FD            [ 1]  153 	jrne 1$
      000028 72 09 50 15 F8   [ 2]  154 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    155 ; if MCU suspended by SLEEP resume program
      00002D 72 07 00 20 05   [ 2]  156     btjf flags,#FSLEEP,2$
      000032 72 17 00 20      [ 1]  157 	bres flags,#FSLEEP 
      000036 80               [11]  158 	iret
      000037                        159 2$:	
      000037                        160 user_interrupted:
      000037 72 00 00 20 02   [ 2]  161     btjt flags,#FRUN,4$
      00003C 20 0A            [ 2]  162 	jra UBTN_Handler_exit 
      00003E                        163 4$:	; program interrupted by user 
      00003E 72 11 00 20      [ 1]  164 	bres flags,#FRUN 
      000042 AE 00 5B         [ 2]  165 	ldw x,#USER_ABORT
      000045 CD 03 1E         [ 4]  166 	call puts 
      000048                        167 UBTN_Handler_exit:
      000048 AE 17 FF         [ 2]  168     ldw x,#STACK_EMPTY 
      00004B 94               [ 1]  169     ldw sp,x
      00004C 9A               [ 1]  170 	rim 
      00004D CE 00 19         [ 2]  171 	ldw x,txtbgn 
      000050 A3 2A 00         [ 2]  172 	cpw x,#app_space 
      000053 22 03            [ 1]  173 	jrugt 5$
      000055 CD 0F 74         [ 4]  174 	call clear_basic 
      000058 CC 11 90         [ 2]  175 5$:	jp warm_start
                                    176 
      00005B 0A 50 72 6F 67 72 61   177 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    178 
                                    179 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    180 ;    peripherals initialization
                                    181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    182 
                                    183 ;----------------------------------------
                                    184 ; inialize MCU clock 
                                    185 ; input:
                                    186 ;   A 		source  HSI | 1 HSE 
                                    187 ;   XL      CLK_CKDIVR , clock divisor 
                                    188 ; output:
                                    189 ;   none 
                                    190 ;----------------------------------------
      000076                        191 clock_init:	
      000076 C1 50 C3         [ 1]  192 	cp a,CLK_CMSR 
      000079 27 0C            [ 1]  193 	jreq 2$ ; no switching required 
                                    194 ; select clock source 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      00007B 72 12 50 C5      [ 1]  195 	bset CLK_SWCR,#CLK_SWCR_SWEN
      00007F C7 50 C4         [ 1]  196 	ld CLK_SWR,a
      000082 C1 50 C3         [ 1]  197 1$:	cp a,CLK_CMSR
      000085 26 FB            [ 1]  198 	jrne 1$
      000087                        199 2$: 	
                                    200 ; HSI and cpu clock divisor 
      000087 9F               [ 1]  201 	ld a,xl 
      000088 C7 50 C6         [ 1]  202 	ld CLK_CKDIVR,a  
      00008B 81               [ 4]  203 	ret
                                    204 
                                    205 ;----------------------------------
                                    206 ; TIMER2 used as audio tone output 
                                    207 ; on port D:5.
                                    208 ; channel 1 configured as PWM mode 1 
                                    209 ;-----------------------------------  
                                    210 
      00008C                        211 timer2_init:
      00008C 72 1A 50 C7      [ 1]  212 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000090 35 60 53 05      [ 1]  213  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      000094 35 08 53 0C      [ 1]  214 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      000098 81               [ 4]  215 	ret 
                                    216 
                                    217 ;---------------------------------
                                    218 ; TIM4 is configured to generate an 
                                    219 ; interrupt every millisecond 
                                    220 ;----------------------------------
      000099                        221 timer4_init:
      000099 72 18 50 C7      [ 1]  222 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      00009D 35 07 53 45      [ 1]  223 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A1 35 7D 53 46      [ 1]  224 	mov TIM4_ARR,#125 ; set for 1msec.
      0000A5 35 05 53 40      [ 1]  225 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000A9 72 10 53 41      [ 1]  226 	bset TIM4_IER,#TIM4_IER_UIE
      0000AD 81               [ 4]  227 	ret
                                    228 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0000AE                         45 unlock_eeprom:
      0000AE 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0000B3 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0000B7 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0000BB 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000BF 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000C3 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000C8 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0000C9                         62 unlock_flash:
      0000C9 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0000CE 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0000D2 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0000D6 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000DA 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000DE 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000E3 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0000E4                         76 row_erase:
      0000E4 88               [ 1]   77 	push a 
      0000E5 90 89            [ 2]   78 	pushw y 
      0000E7 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0000EB 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0000EF 4F               [ 1]   81 	clr a 
      0000F0 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      0000F2 91 A7 00 16      [ 1]   83 	ldf ([farptr],y),a
      0000F6 90 5C            [ 1]   84     incw y
      0000F8 91 A7 00 16      [ 1]   85 	ldf ([farptr],y),a
      0000FC 90 5C            [ 1]   86     incw y
      0000FE 91 A7 00 16      [ 1]   87 	ldf ([farptr],y),a
      000102 90 5C            [ 1]   88     incw y
      000104 91 A7 00 16      [ 1]   89 	ldf ([farptr],y),a
      000108 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00010D 90 85            [ 2]   91 	popw y 
      00010F 84               [ 1]   92 	pop a 
      000110 81               [ 4]   93 	ret
      000111                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      000111                         97 move_erase_to_ram:
      000111 89               [ 2]   98 	pushw x 
      000112 90 89            [ 2]   99 	pushw y 
      000114 AE 01 11         [ 2]  100 	ldw x,#row_erase_end 
      000117 1D 00 E4         [ 2]  101 	subw x,#row_erase
      00011A CF 00 0C         [ 2]  102 	ldw acc16,x 
      00011D AE 16 90         [ 2]  103 	ldw x,#tib 
      000120 90 AE 00 E4      [ 2]  104 	ldw y,#row_erase 
      000124 CD 0D 90         [ 4]  105 	call move
      000127 90 85            [ 2]  106 	popw y
      000129 85               [ 2]  107 	popw x
      00012A 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      00012B                        123 program_row:
      00012B 88               [ 1]  124 	push a 
      00012C 90 89            [ 2]  125 	pushw y 
      00012E 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000130 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000134 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
                                    130 ;	mov FLASH_CR2,#(1<<FLASH_CR2_PRG) 
                                    131 ;	mov FLASH_NCR2,#~(1<<FLASH_CR2_PRG)
      000138 90 5F            [ 1]  132 	clrw y 
      00013A F6               [ 1]  133 1$:	ld a,(x)
      00013B 91 A7 00 16      [ 1]  134 	ldf ([farptr],y),a
      00013F 5C               [ 1]  135 	incw x 
      000140 90 5C            [ 1]  136 	incw y 
      000142 0A 01            [ 1]  137 	dec (BCNT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000144 26 F4            [ 1]  138 	jrne 1$
                                    139 ; wait EOP bit 
      000146 72 05 50 5F FB   [ 2]  140 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00014B                        141 	_drop 1 
      00014B 5B 01            [ 2]    1     addw sp,#1 
      00014D 90 85            [ 2]  142 	popw y 
      00014F 84               [ 1]  143 	pop a 
      000150 81               [ 4]  144 	ret 
      000151                        145 program_row_end:
                                    146 
                                    147 ;-------------------------
                                    148 ; move program_row to RAM 
                                    149 ; at txtubound address 
                                    150 ;------------------------
      000151                        151 move_prg_to_ram:
      000151 89               [ 2]  152 	pushw x 
      000152 90 89            [ 2]  153 	pushw y 
      000154 AE 01 51         [ 2]  154 	ldw x,#program_row_end 
      000157 1D 01 2B         [ 2]  155 	subw x,#program_row 
      00015A CF 00 0C         [ 2]  156 	ldw acc16,x ; bytes to move 
      00015D AE 16 90         [ 2]  157 	ldw x,#tib ; destination address 
      000160 90 AE 01 2B      [ 2]  158 	ldw y,#program_row ; source address 
      000164 CD 0D 90         [ 4]  159 	call move
      000167 90 85            [ 2]  160 	popw y 
      000169 85               [ 2]  161 	popw x  
      00016A 81               [ 4]  162 	ret 
                                    163 
                                    164 
                                    165 ;-----------------------------
                                    166 ; write a row in FLASH/EEPROM 
                                    167 ; input:
                                    168 ;    farptr   destination address 
                                    169 ;    x        source address 
                                    170 ;-----------------------------
      00016B                        171 write_row:
      00016B 89               [ 2]  172 	pushw x 
      00016C 72 5D 00 16      [ 1]  173 	tnz farptr 
      000170 26 0D            [ 1]  174 	jrne to_flash 
      000172 CE 00 17         [ 2]  175 	ldw x,farptr+1 
      000175 A3 2A 00         [ 2]  176 	cpw x,#app_space  
      000178 24 05            [ 1]  177 	jruge to_flash 
      00017A                        178 to_eeprom:
      00017A CD 00 AE         [ 4]  179 	call unlock_eeprom
      00017D 20 03            [ 2]  180 	jra do_programming
      00017F                        181 to_flash:
      00017F CD 00 C9         [ 4]  182 	call unlock_flash
      000182                        183 do_programming:
      000182 85               [ 2]  184 	popw x 
      000183 CD 16 90         [ 4]  185 	call tib
      000186 72 13 50 5F      [ 1]  186 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      00018A 72 17 50 5F      [ 1]  187 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      00018E 81               [ 4]  188 	ret 
                                    189 
                                    190 
                                    191 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                    192 ; erase flash or EEPROM block
                                    193 ; a block is 128 bytes 
                                    194 ; input:
                                    195 ;   farptr  address row begin
                                    196 ; output:
                                    197 ;   none
                                    198 ;--------------------------------------
      00018F                        199 block_erase:
      00018F 89               [ 2]  200 	pushw x 
      000190 CE 00 17         [ 2]  201 	ldw x,farptr+1
      000193 A3 2A 00         [ 2]  202 	cpw x,#app_space 
      000196 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000198 CD 00 AE         [ 4]  205 	call unlock_eeprom 
      00019B CD 16 90         [ 4]  206 	call tib 
      00019E 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001A2 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0001A4                        210 erase_flash:
      0001A4 CD 00 C9         [ 4]  211 	call unlock_flash 
      0001A7 CD 16 90         [ 4]  212 	call tib 
      0001AA 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001AE                        214 erase_exit: 
      0001AE 85               [ 2]  215 	popw x 
      0001AF 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0001B0                        232 write_byte:
      0001B0 90 89            [ 2]  233 	pushw y
      0001B2                        234 	_vars VSIZE
      0001B2 52 02            [ 2]    1     sub sp,#VSIZE 
      0001B4 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0001B6 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0001B8 90 CE 00 17      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001BC 72 5D 00 16      [ 1]  240 	tnz farptr 
      0001C0 26 14            [ 1]  241 	jrne write_flash
      0001C2 90 A3 2A 00      [ 2]  242     cpw y,#app_space 	 
      0001C6 24 0E            [ 1]  243     jruge write_flash
      0001C8 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0001CC 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      0001CE 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0001D2 22 51            [ 1]  247 	jrugt write_exit
      0001D4 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0001D6                        250 write_flash:
      0001D6 CD 00 C9         [ 4]  251 	call unlock_flash 
      0001D9 9B               [ 1]  252 1$:	sim 
      0001DA 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0001DC 92 A7 00 16      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0001E0 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0001E5 9A               [ 1]  256     rim 
      0001E6 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001EA 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0001EC                        260 write_eeprom:
      0001EC CD 00 AE         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0001EF 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0001F3 2B 08            [ 1]  264 	jrmi 1$
      0001F5 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0001F9 2A 02            [ 1]  266 	jrpl 1$
      0001FB 03 02            [ 1]  267 	cpl (OPT,sp)
      0001FD                        268 1$: 
      0001FD 0D 02            [ 1]  269     tnz (OPT,sp)
      0001FF 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      000201 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      000205 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000209                        274 2$: 
      000209 7B 01            [ 1]  275     ld a,(BTW,sp)
      00020B 92 A7 00 16      [ 4]  276     ldf ([farptr],x),a
      00020F 0D 02            [ 1]  277     tnz (OPT,sp)
      000211 27 08            [ 1]  278     jreq 3$
      000213 5C               [ 1]  279     incw x
      000214 7B 01            [ 1]  280     ld a,(BTW,sp)
      000216 43               [ 1]  281     cpl a
      000217 92 A7 00 16      [ 4]  282     ldf ([farptr],x),a
      00021B 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000220 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000225                        285 write_exit:
      000225                        286 	_drop VSIZE 
      000225 5B 02            [ 2]    1     addw sp,#VSIZE 
      000227 90 85            [ 2]  287 	popw y
      000229 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; input:
                                    293 ;   Y        source address   
                                    294 ;   X        array index  destination  farptr[x]
                                    295 ;   BSIZE    block size bytes 
                                    296 ;   farptr   write address , byte* 
                                    297 ; output:
                                    298 ;	X 		after last byte written 
                                    299 ;   Y 		after last byte read 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                    300 ;  farptr   point after block
                                    301 ;---------------------------------------------
      00022A                        302 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      00022A                        303 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    304 	; local var 
                           000001   305 	XSAVE=1 
                           000002   306 	VSIZE=2 
      00022A                        307 write_block:
      00022A 88               [ 1]  308 	push a 
      00022B                        309 	_vars VSIZE
      00022B 52 02            [ 2]    1     sub sp,#VSIZE 
      00022D 1F 01            [ 2]  310 	ldw (XSAVE,sp),x 
      00022F 1E 06            [ 2]  311 	ldw x,(BSIZE,sp) 
      000231 27 13            [ 1]  312 	jreq 9$
      000233 1E 01            [ 2]  313 1$:	ldw x,(XSAVE,sp)
      000235 90 F6            [ 1]  314 	ld a,(y)
      000237 CD 01 B0         [ 4]  315 	call write_byte 
      00023A 5C               [ 1]  316 	incw x 
      00023B 90 5C            [ 1]  317 	incw y 
      00023D 1F 01            [ 2]  318 	ldw (XSAVE,sp),x
      00023F 1E 06            [ 2]  319 	ldw x,(BSIZE,sp)
      000241 5A               [ 2]  320 	decw x
      000242 1F 06            [ 2]  321 	ldw (BSIZE,sp),x 
      000244 26 ED            [ 1]  322 	jrne 1$
      000246                        323 9$:
      000246 1E 01            [ 2]  324 	ldw x,(XSAVE,sp)
      000248 CD 1E 25         [ 4]  325 	call incr_farptr
      00024B                        326 	_drop VSIZE
      00024B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00024D 84               [ 1]  327 	pop a 
      00024E 81               [ 4]  328 	ret 
                                    329 
                                    330 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      00024F                         66 Uart1RxHandler: ; console receive char 
      00024F 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      000254 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      000257 A1 03            [ 1]   69 	cp a,#CTRL_C 
      000259 26 06            [ 1]   70 	jrne 2$
      00025B CD 02 C1         [ 4]   71 	call putc 
      00025E CC 00 37         [ 2]   72 	jp user_interrupted
      000261                         73 2$:
      000261 A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      000263 26 03            [ 1]   75 	jrne 3$
      000265 CC 0E 51         [ 2]   76 	jp cold_start 	
      000268 88               [ 1]   77 3$:	push a 
      000269 A6 22            [ 1]   78 	ld a,#rx1_queue 
      00026B CB 00 2B         [ 1]   79 	add a,rx1_tail 
      00026E 5F               [ 1]   80 	clrw x 
      00026F 97               [ 1]   81 	ld xl,a 
      000270 84               [ 1]   82 	pop a 
      000271 F7               [ 1]   83 	ld (x),a 
      000272 C6 00 2B         [ 1]   84 	ld a,rx1_tail 
      000275 4C               [ 1]   85 	inc a 
      000276 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      000278 C7 00 2B         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00027B 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      00027C                         97 uart1_init:
      00027C 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      000280 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      000284 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      000288 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      00028C                        103 uart1_set_baud: 
      00028C 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      00028D A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      00028F C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      000292 27 0A            [ 1]  109 	jreq 2$ 
      000294                        110 1$: ; 8 Mhz 	
      000294 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      000298 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      00029C 20 08            [ 2]  113 	jra 3$
      00029E                        114 2$: ; 16 Mhz 	
      00029E 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0002A2 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0002A6                        117 3$:
      0002A6 72 5F 52 31      [ 1]  118     clr UART1_DR
      0002AA 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002AE 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      0002B2 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      0002B7 72 5F 00 2A      [ 1]  122     clr rx1_head 
      0002BB 72 5F 00 2B      [ 1]  123 	clr rx1_tail
      0002BF 84               [ 1]  124 	pop a  
      0002C0 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      0002C1                        133 putc:: ; console output always on UART1
      0002C1                        134 uart1_putc:: 
      0002C1 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      0002C6 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      0002C9 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      0002CA                        148 qgetc::
      0002CA                        149 uart1_qgetc::
      0002CA C6 00 2A         [ 1]  150 	ld a,rx1_head 
      0002CD C0 00 2B         [ 1]  151 	sub a,rx1_tail 
      0002D0 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      0002D1                        161 getc:: ;console input
      0002D1                        162 uart1_getc::
      0002D1 CD 02 CA         [ 4]  163 	call uart1_qgetc
      0002D4 27 FB            [ 1]  164 	jreq uart1_getc 
      0002D6 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      0002D7 A6 22            [ 1]  167 	ld a,#rx1_queue
      0002D9 CB 00 2A         [ 1]  168 	add a,rx1_head 
      0002DC 5F               [ 1]  169 	clrw x  
      0002DD 97               [ 1]  170 	ld xl,a 
      0002DE F6               [ 1]  171 	ld a,(x)
      0002DF 88               [ 1]  172 	push a
      0002E0 C6 00 2A         [ 1]  173 	ld a,rx1_head 
      0002E3 4C               [ 1]  174 	inc a 
      0002E4 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      0002E6 C7 00 2A         [ 1]  176 	ld rx1_head,a 
      0002E9 84               [ 1]  177 	pop a  
      0002EA 85               [ 2]  178 	popw x
      0002EB 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      0002EC 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      0002F8                        207 get_escape:
      0002F8 CD 02 D1         [ 4]  208     call getc 
      0002FB A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      0002FD 27 02            [ 1]  210     jreq 1$
      0002FF 4F               [ 1]  211     clr a
      000300 81               [ 4]  212     ret
      000301 CD 02 D1         [ 4]  213 1$: call getc 
      000304 AE 02 EC         [ 2]  214     ldw x,#convert_table
      000307                        215 2$:
      000307 F1               [ 1]  216     cp a,(x)
      000308 27 08            [ 1]  217     jreq 4$
      00030A 1C 00 02         [ 2]  218     addw x,#2
      00030D 7D               [ 1]  219     tnz (x)
      00030E 26 F7            [ 1]  220     jrne 2$
      000310 4F               [ 1]  221     clr a
      000311 81               [ 4]  222     ret 
      000312 5C               [ 1]  223 4$: incw x 
      000313 F6               [ 1]  224     ld a,(x)
      000314 A1 84            [ 1]  225     cp a,#SUP
      000316 26 05            [ 1]  226     jrne 5$
      000318 88               [ 1]  227     push a 
      000319 CD 02 D1         [ 4]  228     call getc
      00031C 84               [ 1]  229     pop a 
      00031D                        230 5$:
      00031D 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      00031E                        241 puts::
      00031E F6               [ 1]  242     ld a,(x)
      00031F 27 06            [ 1]  243 	jreq 1$
      000321 CD 02 C1         [ 4]  244 	call putc 
      000324 5C               [ 1]  245 	incw x 
      000325 20 F7            [ 2]  246 	jra puts 
      000327 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000328                        258 bksp:
      000328 A6 08            [ 1]  259 	ld a,#BS 
      00032A CD 02 C1         [ 4]  260 	call putc 
      00032D A6 20            [ 1]  261 	ld a,#SPACE 
      00032F CD 02 C1         [ 4]  262 	call putc 
      000332 A6 08            [ 1]  263 	ld a,#BS 
      000334 CD 02 C1         [ 4]  264 	call putc 
      000337 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      000338                        274 delete_nchar:
      000338 88               [ 1]  275 	push a 
      000339 0D 01            [ 1]  276 0$:	tnz (1,sp)
      00033B 27 07            [ 1]  277 	jreq 1$
      00033D CD 03 28         [ 4]  278 	call bksp 
      000340 0A 01            [ 1]  279 	dec (1,sp)
      000342 20 F5            [ 2]  280 	jra 0$
      000344 84               [ 1]  281 1$:	pop a 
      000345 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      000346                        290 send_escape:
      000346 A6 1B            [ 1]  291 	ld a,#ESC 
      000348 CD 02 C1         [ 4]  292 	call putc 
      00034B A6 5B            [ 1]  293 	ld a,#'[
      00034D CD 02 C1         [ 4]  294 	call putc 
      000350 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      000351                        311 send_parameter:
      000351 89               [ 2]  312 	pushw x 
      000352 5F               [ 1]  313 	clrw x 
      000353 97               [ 1]  314 	ld xl,a 
      000354 A6 0A            [ 1]  315 	ld a,#10 
      000356 62               [ 2]  316 	div x,a 
      000357 95               [ 1]  317 	ld xh,a 
      000358 9F               [ 1]  318 	ld a,xl
      000359 4D               [ 1]  319     tnz a 
      00035A 27 0B            [ 1]  320     jreq 2$
      00035C A1 09            [ 1]  321 	cp a,#9 
      00035E 23 02            [ 2]  322 	jrule 1$
      000360 A6 39            [ 1]  323 	ld a,#'9
      000362                        324 1$:
      000362 AB 30            [ 1]  325 	add a,#'0 
      000364 CD 02 C1         [ 4]  326 	call putc
      000367 9E               [ 1]  327 2$:	ld a,xh 
      000368 AB 30            [ 1]  328 	add a,#'0
      00036A CD 02 C1         [ 4]  329 	call putc 
      00036D 85               [ 2]  330 	popw x 
      00036E 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      00036F                        344 move_left:
      00036F 88               [ 1]  345 	push a 
      000370 CD 03 46         [ 4]  346 	call send_escape
      000373 84               [ 1]  347     pop a
      000374 CD 03 51         [ 4]  348 	call send_parameter 
      000377 A6 44            [ 1]  349 	ld a,#'D 
      000379 CD 02 C1         [ 4]  350 	call putc 
      00037C 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00037D                        362 move_right:
      00037D 88               [ 1]  363 	push a 
      00037E CD 03 46         [ 4]  364 	call send_escape
      000381 84               [ 1]  365     pop a
      000382 CD 03 51         [ 4]  366 	call send_parameter 
      000385 A6 43            [ 1]  367 	ld a,#'C 
      000387 CD 02 C1         [ 4]  368 	call putc 
      00038A 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      00038B                        379 spaces::
      00038B A6 20            [ 1]  380 	ld a,#SPACE 
      00038D 5D               [ 2]  381 1$:	tnzw x
      00038E 27 06            [ 1]  382 	jreq 9$
      000390 CD 02 C1         [ 4]  383 	call putc 
      000393 5A               [ 2]  384 	decw x
      000394 20 F7            [ 2]  385 	jra 1$
      000396                        386 9$: 
      000396 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   Y       updated Y 
                                    399 ;-------------------------
                           000001   400 	IPOS=1
                           000002   401 	KCHAR=2 
                           000003   402     LLEN=3 
                           000003   403 	VSISE=3 
      000397                        404 insert_char: 
      000397                        405 	_vars VSIZE 
      000397 52 02            [ 2]    1     sub sp,#VSIZE 
      000399 6B 02            [ 1]  406     ld (KCHAR,sp),a 
      00039B 9E               [ 1]  407     ld a,xh 
      00039C 6B 01            [ 1]  408 	ld (IPOS,sp),a
      00039E 9F               [ 1]  409     ld a,xl 
      00039F 6B 03            [ 1]  410     ld (LLEN,sp),a  
      0003A1 93               [ 1]  411     ldw x,y
      0003A2 5C               [ 1]  412     incw x 
      0003A3 7B 03            [ 1]  413     ld a,(LLEN,sp)
      0003A5 10 01            [ 1]  414     sub a,(IPOS,sp)
      0003A7 4C               [ 1]  415     inc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0003A8 C7 00 0D         [ 1]  416     ld acc8,a 
      0003AB 72 5F 00 0C      [ 1]  417     clr acc16
      0003AF CD 0D 90         [ 4]  418     call move
      0003B2 90 AE 16 90      [ 2]  419     ldw y,#tib 
      0003B6 7B 01            [ 1]  420     ld a,(IPOS,sp)
      0003B8 C7 00 0D         [ 1]  421     ld acc8,a 
      0003BB 72 B9 00 0C      [ 2]  422     addw y,acc16 
      0003BF 7B 02            [ 1]  423     ld a,(KCHAR,sp)
      0003C1 90 F7            [ 1]  424     ld (y),a
      0003C3 90 5C            [ 1]  425     incw y  
      0003C5 7B 01            [ 1]  426     ld a,(IPOS,sp)
      0003C7 CD 03 6F         [ 4]  427     call move_left
      0003CA AE 16 90         [ 2]  428     ldw x,#tib 
      0003CD CD 03 1E         [ 4]  429     call puts 
      0003D0 7B 03            [ 1]  430     ld a,(LLEN,sp)
      0003D2 10 01            [ 1]  431     sub a,(IPOS,sp) 
      0003D4 CD 03 6F         [ 4]  432     call move_left 
      0003D7                        433 	_drop VSIZE 
      0003D7 5B 02            [ 2]    1     addw sp,#VSIZE 
      0003D9 81               [ 4]  434 	ret 
                                    435 
                                    436 
                                    437 ;--------------------------
                                    438 ; delete character under cursor
                                    439 ; input:
                                    440 ;   A       line length   
                                    441 ;   xl      delete position
                                    442 ;   Y       line pointer 
                                    443 ;-------------------------
                           000001   444 	CPOS=1
                           000002   445 	LLEN=2
                           000002   446 	VSIZE=2
      0003DA                        447 delete_under:
      0003DA                        448 	_vars VSIZE 
      0003DA 52 02            [ 2]    1     sub sp,#VSIZE 
      0003DC 6B 02            [ 1]  449     ld (LLEN,sp),a 
      0003DE 9F               [ 1]  450     ld a,xl 
      0003DF 6B 01            [ 1]  451     ld (CPOS,sp),a 
      0003E1 93               [ 1]  452     ldw x,y ; move destination
      0003E2 90 5C            [ 1]  453     incw y  ; move source 
      0003E4 7B 02            [ 1]  454     ld a,(LLEN,sp)
      0003E6 10 01            [ 1]  455     sub a,(CPOS,sp)
      0003E8 4C               [ 1]  456     inc a ; move including zero at end.
      0003E9 C7 00 0D         [ 1]  457     ld acc8,a 
      0003EC 72 5F 00 0C      [ 1]  458     clr acc16 
      0003F0 CD 0D 90         [ 4]  459 	call move 
      0003F3 90 AE 16 90      [ 2]  460     ldw y,#tib 
      0003F7 7B 01            [ 1]  461     ld a,(CPOS,sp)
      0003F9 C7 00 0D         [ 1]  462     ld acc8,a 
      0003FC 72 B9 00 0C      [ 2]  463     addw y,acc16 
      000400 93               [ 1]  464     ldw x,y 
      000401 CD 03 1E         [ 4]  465     call puts 
      000404 A6 20            [ 1]  466     ld a,#SPACE  
      000406 CD 02 C1         [ 4]  467     call putc
      000409 7B 02            [ 1]  468     ld a,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      00040B 10 01            [ 1]  469     sub a,(CPOS,sp)
      00040D CD 03 6F         [ 4]  470     call move_left 
      000410 0A 02            [ 1]  471     dec (LLEN,sp)
      000412                        472 	_drop VSIZE 
      000412 5B 02            [ 2]    1     addw sp,#VSIZE 
      000414 81               [ 4]  473 	ret 
                                    474 
                                    475 ;-----------------------------
                                    476 ; send ANSI sequence to delete
                                    477 ; whole line. Cursor position
                                    478 ; is not updated.
                                    479 ; ANSI: ESC[2K
                                    480 ; input:
                                    481 ;   none
                                    482 ; output:
                                    483 ;   none 
                                    484 ;-----------------------------
      000415                        485 delete_line:
      000415 CD 03 46         [ 4]  486     call send_escape
      000418 A6 32            [ 1]  487 	ld a,#'2
      00041A CD 02 C1         [ 4]  488 	call putc 
      00041D A6 4B            [ 1]  489 	ld a,#'K 
      00041F CD 02 C1         [ 4]  490 	call putc 
      000422 81               [ 4]  491 	ret 
                                    492 
                                    493 
                                    494 
                                    495 ;------------------------------------
                                    496 ; read a line of text from terminal
                                    497 ;  touches de contrôle
                                    498 ;    BS   efface caractère à gauche 
                                    499 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    500 ;    CTRL_R  répète dernière ligne saisie
                                    501 ;    CTRL_D  supprime ligne 
                                    502 ;    HOME  va au début de la ligne 
                                    503 ;    KEY_END  va à la fin de la ligne 
                                    504 ;    ARROW_LEFT  un caractère vers la gauche 
                                    505 ;    ARROW_RIGHT  un caractère vers la droite 
                                    506 ;    CTRL_O  commute entre insert/overwrite
                                    507 ; input:
                                    508 ;	none
                                    509 ; local variable on stack:
                                    510 ;	LL  line length
                                    511 ;   RXCHAR last received character 
                                    512 ; output:
                                    513 ;   text in tib  buffer
                                    514 ;   count  line length 
                                    515 ;------------------------------------
                                    516 	; local variables
                           000001   517 	LL_HB=1
                           000001   518 	RXCHAR = 1 ; last char received
                           000002   519 	LL = 2  ; accepted line length
                           000003   520 	CPOS=3  ; cursor position 
                           000004   521 	OVRWR=4 ; overwrite flag 
                           000004   522 	VSIZE=4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000423                        523 readln::
      000423                        524 	_vars VSIZE 
      000423 52 04            [ 2]    1     sub sp,#VSIZE 
      000425 5F               [ 1]  525 	clrw x 
      000426 1F 02            [ 2]  526 	ldw (LL,sp),x 
      000428 1F 03            [ 2]  527 	ldw (CPOS,sp),x 
      00042A 03 04            [ 1]  528 	cpl (OVRWR,sp) ; default to overwrite mode 
      00042C 90 AE 16 90      [ 2]  529  	ldw y,#tib ; input buffer
      000430                        530 readln_loop:
      000430 CD 02 D1         [ 4]  531 	call getc
      000433 6B 01            [ 1]  532 	ld (RXCHAR,sp),a
      000435 A1 1B            [ 1]  533     cp a,#ESC 
      000437 26 05            [ 1]  534     jrne 0$
      000439 CD 02 F8         [ 4]  535     call get_escape 
      00043C 6B 01            [ 1]  536     ld (RXCHAR,sp),a 
      00043E A1 0D            [ 1]  537 0$:	cp a,#CR
      000440 26 03            [ 1]  538 	jrne 1$
      000442 CC 05 CC         [ 2]  539 	jp readln_quit
      000445 A1 0A            [ 1]  540 1$:	cp a,#LF 
      000447 26 03            [ 1]  541 	jrne 2$ 
      000449 CC 05 CC         [ 2]  542 	jp readln_quit
      00044C                        543 2$:
      00044C A1 08            [ 1]  544 	cp a,#BS
      00044E 26 12            [ 1]  545 	jrne 3$
                                    546 ; delete left 
      000450 0D 03            [ 1]  547     tnz (CPOS,sp)
      000452 27 DC            [ 1]  548     jreq readln_loop 
      000454 A6 01            [ 1]  549     ld a,#1 
      000456 CD 03 6F         [ 4]  550     call move_left
      000459 0A 03            [ 1]  551     dec (CPOS,sp)
      00045B 90 5A            [ 2]  552     decw y 
      00045D 7B 03            [ 1]  553     ld a,(CPOS,sp) 
      00045F CC 05 78         [ 2]  554     jp 12$
      000462                        555 3$:
      000462 A1 04            [ 1]  556 	cp a,#CTRL_D
      000464 26 1A            [ 1]  557 	jrne 4$
                                    558 ;delete line 
      000466 CD 04 15         [ 4]  559 	call delete_line 
      000469 7B 03            [ 1]  560     ld a,(CPOS,sp)
      00046B 4C               [ 1]  561     inc a 
      00046C CD 03 6F         [ 4]  562     call move_left 
      00046F A6 3E            [ 1]  563 	ld a,#'> 
      000471 CD 02 C1         [ 4]  564 	call putc 
      000474 90 AE 16 90      [ 2]  565 	ldw y,#tib
      000478 90 7F            [ 1]  566 	clr (y)
      00047A 0F 02            [ 1]  567 	clr (LL,sp)
      00047C 0F 03            [ 1]  568 	clr (CPOS,sp)
      00047E 20 B0            [ 2]  569 	jra readln_loop
      000480                        570 4$:
      000480 A1 12            [ 1]  571 	cp a,#CTRL_R 
      000482 26 21            [ 1]  572 	jrne 5$
                                    573 ;reprint 
      000484 0D 02            [ 1]  574 	tnz (LL,sp)
      000486 26 A8            [ 1]  575 	jrne readln_loop
      000488 AE 16 90         [ 2]  576 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00048B CD 0D 64         [ 4]  577 	call strlen 
      00048E 90 AE 16 90      [ 2]  578 	ldw y,#tib 
      000492 27 9C            [ 1]  579 	jreq readln_loop
      000494 6B 02            [ 1]  580 	ld (LL,sp),a 
      000496 6B 03            [ 1]  581     ld (CPOS,sp),a
      000498 AE 16 90         [ 2]  582 	ldw x,#tib 
      00049B CD 03 1E         [ 4]  583 	call puts
      00049E 0F 01            [ 1]  584 	clr (LL_HB,sp)
      0004A0 72 F9 01         [ 2]  585 	addw y,(LL_HB,sp)
      0004A3 20 8B            [ 2]  586 	jra readln_loop 
      0004A5                        587 5$:
      0004A5 A1 05            [ 1]  588 	cp a,#CTRL_E 
      0004A7 26 49            [ 1]  589 	jrne 6$
                                    590 ;edit line number 
      0004A9 AE 16 90         [ 2]  591 	ldw x,#tib 
      0004AC CD 13 61         [ 4]  592 	call atoi24
      0004AF CE 00 0C         [ 2]  593 	ldw x,acc16
      0004B2 CD 06 06         [ 4]  594 	call search_lineno
      0004B5 5D               [ 2]  595 	tnzw x 
      0004B6 26 0B            [ 1]  596 	jrne 51$
      0004B8 0F 02            [ 1]  597 	clr (LL,sp)
      0004BA 90 AE 16 90      [ 2]  598 	ldw y,#tib
      0004BE 90 7F            [ 1]  599     clr (y) 	
      0004C0 CC 05 CC         [ 2]  600 	jp readln_quit  
      0004C3                        601 51$:
      0004C3 CF 00 04         [ 2]  602 	ldw basicptr,x
      0004C6 E6 02            [ 1]  603 	ld a,(2,x)
      0004C8 C7 00 03         [ 1]  604 	ld count,a 
      0004CB 90 AE 16 90      [ 2]  605 	ldw y,#tib 
      0004CF CD 0B 17         [ 4]  606 	call decompile 
      0004D2 0F 01            [ 1]  607 	clr (LL_HB,sp)
      0004D4 A6 0D            [ 1]  608 	ld a,#CR 
      0004D6 CD 02 C1         [ 4]  609 	call putc 
      0004D9 A6 3E            [ 1]  610 	ld a,#'>
      0004DB CD 02 C1         [ 4]  611 	call putc
      0004DE AE 16 90         [ 2]  612     ldw x,#tib  
      0004E1 CD 0D 64         [ 4]  613 	call strlen 
      0004E4 6B 02            [ 1]  614 	ld (LL,sp),a 
      0004E6 CD 03 1E         [ 4]  615 	call puts 
      0004E9 90 93            [ 1]  616 	ldw y,x
      0004EB 7B 02            [ 1]  617     ld a,(LL,sp)
      0004ED 6B 03            [ 1]  618     ld (CPOS,sp),a  
      0004EF CC 04 30         [ 2]  619 	jp readln_loop
      0004F2                        620 6$:
      0004F2 A1 81            [ 1]  621 	cp a,#ARROW_RIGHT
      0004F4 26 15            [ 1]  622    	jrne 7$ 
                                    623 ; right arrow
      0004F6 7B 03            [ 1]  624 	ld a,(CPOS,sp)
      0004F8 11 02            [ 1]  625     cp a,(LL,sp)
      0004FA 2B 03            [ 1]  626     jrmi 61$
      0004FC CC 04 30         [ 2]  627     jp readln_loop 
      0004FF                        628 61$:
      0004FF A6 01            [ 1]  629     ld a,#1 
      000501 CD 03 7D         [ 4]  630 	call move_right 
      000504 0C 03            [ 1]  631 	inc (CPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000506 90 5C            [ 1]  632     incw y 
      000508 CC 04 30         [ 2]  633     jp readln_loop 
      00050B A1 80            [ 1]  634 7$: cp a,#ARROW_LEFT  
      00050D 26 13            [ 1]  635 	jrne 8$
                                    636 ; left arrow 
      00050F 0D 03            [ 1]  637 	tnz (CPOS,sp)
      000511 26 03            [ 1]  638 	jrne 71$
      000513 CC 04 30         [ 2]  639 	jp readln_loop
      000516                        640 71$:
      000516 A6 01            [ 1]  641     ld a,#1 
      000518 CD 03 6F         [ 4]  642 	call move_left 
      00051B 0A 03            [ 1]  643 	dec (CPOS,sp)
      00051D 90 5A            [ 2]  644     decw y 
      00051F CC 04 30         [ 2]  645 	jp readln_loop 
      000522 A1 82            [ 1]  646 8$: cp a,#HOME  
      000524 26 0E            [ 1]  647 	jrne 9$
                                    648 ; HOME 
      000526 7B 03            [ 1]  649     ld a,(CPOS,sp)
      000528 CD 03 6F         [ 4]  650     call move_left 
      00052B 0F 03            [ 1]  651 	clr (CPOS,sp)
      00052D 90 AE 16 90      [ 2]  652     ldw y,#tib 
      000531 CC 04 30         [ 2]  653 	jp readln_loop  
      000534 A1 83            [ 1]  654 9$: cp a,#KEY_END  
      000536 26 26            [ 1]  655 	jrne 10$
                                    656 ; KEY_END 
      000538 7B 03            [ 1]  657 	ld a,(CPOS,sp)
      00053A 11 02            [ 1]  658 	cp a,(LL,sp)
      00053C 26 03            [ 1]  659 	jrne 91$
      00053E CC 04 30         [ 2]  660 	jp readln_loop 
      000541                        661 91$:
      000541 7B 02            [ 1]  662 	ld a,(LL,sp)
      000543 10 03            [ 1]  663 	sub a,(CPOS,sp)
      000545 CD 03 7D         [ 4]  664 	call move_right 
      000548 7B 02            [ 1]  665 	ld a,(LL,sp)
      00054A 6B 03            [ 1]  666 	ld (CPOS,sp),a
      00054C 90 AE 16 90      [ 2]  667     ldw y,#tib
      000550 72 5F 00 0C      [ 1]  668     clr acc16 
      000554 C7 00 0D         [ 1]  669     ld acc8,a 
      000557 72 B9 00 0C      [ 2]  670     addw y,acc16  
      00055B CC 04 30         [ 2]  671 	jp readln_loop 
      00055E A1 0F            [ 1]  672 10$: cp a,#CTRL_O
      000560 26 0C            [ 1]  673 	jrne 11$ 
                                    674 ; toggle between insert/overwrite
      000562 03 04            [ 1]  675 	cpl (OVRWR,sp)
      000564 90 89            [ 2]  676 	pushw y 
      000566 CD 1C 8C         [ 4]  677 	call beep_1khz
      000569 90 85            [ 2]  678 	popw y 
      00056B CC 04 30         [ 2]  679 	jp readln_loop 
      00056E A1 84            [ 1]  680 11$: cp a,#SUP 
      000570 26 11            [ 1]  681     jrne final_test 
                                    682 ; del character under cursor 
      000572 7B 03            [ 1]  683     ld a,(CPOS,sp)
      000574 11 02            [ 1]  684     cp a,(LL,sp)
      000576 2A 08            [ 1]  685     jrpl 13$
      000578                        686 12$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000578 97               [ 1]  687     ld xl,a    ; cursor position 
      000579 7B 02            [ 1]  688     ld a,(LL,sp)  ; line length
      00057B CD 03 DA         [ 4]  689     call delete_under
      00057E 0A 02            [ 1]  690     dec (LLEN,sp)
      000580                        691 13$:
      000580 CC 04 30         [ 2]  692     jp readln_loop 
      000583                        693 final_test:
      000583 A1 20            [ 1]  694 	cp a,#SPACE
      000585 2A 03            [ 1]  695 	jrpl accept_char
      000587 CC 04 30         [ 2]  696 	jp readln_loop
      00058A                        697 accept_char:
      00058A A6 4F            [ 1]  698 	ld a,#TIB_SIZE-1
      00058C 11 02            [ 1]  699 	cp a, (LL,sp)
      00058E 2A 03            [ 1]  700 	jrpl 1$
      000590 CC 04 30         [ 2]  701 	jp readln_loop
      000593 0D 04            [ 1]  702 1$:	tnz (OVRWR,sp)
      000595 26 18            [ 1]  703 	jrne overwrite
                                    704 ; insert mode 
      000597 7B 03            [ 1]  705     ld a,(CPOS,sp)
      000599 11 02            [ 1]  706     cp a,(LL,sp)
      00059B 27 12            [ 1]  707     jreq overwrite
      00059D 7B 02            [ 1]  708     ld a,(LL,sp)
      00059F 97               [ 1]  709     ld xl,a 
      0005A0 7B 03            [ 1]  710     ld a,(CPOS,sp)
      0005A2 95               [ 1]  711     ld xh,a
      0005A3 7B 01            [ 1]  712     ld a,(RXCHAR,sp)
      0005A5 CD 03 97         [ 4]  713     call insert_char
      0005A8 0C 02            [ 1]  714     inc (LLEN,sp)
      0005AA 0C 03            [ 1]  715     inc (CPOS,sp)
      0005AC CC 04 30         [ 2]  716     jp readln_loop 
      0005AF                        717 overwrite:
      0005AF 7B 01            [ 1]  718 	ld a,(RXCHAR,sp)
      0005B1 90 F7            [ 1]  719 	ld (y),a
      0005B3 90 5C            [ 1]  720     incw y
      0005B5 CD 02 C1         [ 4]  721     call putc 
      0005B8 7B 03            [ 1]  722 	ld a,(CPOS,sp)
      0005BA 11 02            [ 1]  723 	cp a,(LL,sp)
      0005BC 2B 09            [ 1]  724 	jrmi 1$
      0005BE 90 7F            [ 1]  725 	clr (y)
      0005C0 0C 02            [ 1]  726 	inc (LL,sp)
      0005C2 0C 03            [ 1]  727     inc (CPOS,sp)
      0005C4 CC 04 30         [ 2]  728 	jp readln_loop 
      0005C7                        729 1$:	
      0005C7 0C 03            [ 1]  730 	inc (CPOS,sp)
      0005C9 CC 04 30         [ 2]  731 	jp readln_loop 
      0005CC                        732 readln_quit:
      0005CC 90 AE 16 90      [ 2]  733 	ldw y,#tib
      0005D0 0F 01            [ 1]  734     clr (LL_HB,sp) 
      0005D2 72 F9 01         [ 2]  735     addw y,(LL_HB,sp)
      0005D5 90 7F            [ 1]  736     clr (y)
      0005D7 7B 02            [ 1]  737 	ld a,(LL,sp)
      0005D9 C7 00 03         [ 1]  738 	ld count,a 
      0005DC A6 0D            [ 1]  739 	ld a,#CR
      0005DE CD 02 C1         [ 4]  740 	call putc
      0005E1                        741 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0005E1 5B 04            [ 2]    1     addw sp,#VSIZE 
      0005E3 81               [ 4]  742 	ret
                                    743 
                                    744 ;------------------------------
                                    745 ; print byte  in hexadecimal 
                                    746 ; on console
                                    747 ; input:
                                    748 ;    A		byte to print
                                    749 ;------------------------------
      0005E4                        750 print_hex::
      0005E4 88               [ 1]  751 	push a 
      0005E5 4E               [ 1]  752 	swap a 
      0005E6 CD 05 FB         [ 4]  753 	call to_hex_char 
      0005E9 CD 02 C1         [ 4]  754 	call putc 
      0005EC 7B 01            [ 1]  755     ld a,(1,sp) 
      0005EE CD 05 FB         [ 4]  756 	call to_hex_char
      0005F1 CD 02 C1         [ 4]  757 	call putc
      0005F4 A6 20            [ 1]  758 	ld a,#SPACE 
      0005F6 CD 02 C1         [ 4]  759 	call putc 
      0005F9 84               [ 1]  760 	pop a 
      0005FA 81               [ 4]  761 	ret 
                                    762 
                                    763 ;----------------------------------
                                    764 ; convert to hexadecimal digit 
                                    765 ; input:
                                    766 ;   A       digit to convert 
                                    767 ; output:
                                    768 ;   A       hexdecimal character 
                                    769 ;----------------------------------
      0005FB                        770 to_hex_char::
      0005FB A4 0F            [ 1]  771 	and a,#15 
      0005FD A1 09            [ 1]  772 	cp a,#9 
      0005FF 23 02            [ 2]  773 	jrule 1$ 
      000601 AB 07            [ 1]  774 	add a,#7
      000603 AB 30            [ 1]  775 1$: add a,#'0 
      000605 81               [ 4]  776 	ret 
                                    777 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000606                         51 search_lineno::
      000606                         52 	_vars VSIZE
      000606 52 02            [ 2]    1     sub sp,#VSIZE 
      000608 0F 01            [ 1]   53 	clr (LL,sp)
      00060A 90 CE 00 19      [ 2]   54 	ldw y,txtbgn
      00060E 4D               [ 1]   55 	tnz a 
      00060F 27 04            [ 1]   56 	jreq search_ln_loop
      000611 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000615                         58 search_ln_loop:
      000615 90 C3 00 1B      [ 2]   59 	cpw y,txtend 
      000619 2A 10            [ 1]   60 	jrpl 8$
      00061B 90 F3            [ 1]   61 	cpw x,(y)
      00061D 27 0E            [ 1]   62 	jreq 9$
      00061F 2B 0A            [ 1]   63 	jrmi 8$ 
      000621 90 E6 02         [ 1]   64 	ld a,(2,y)
      000624 6B 02            [ 1]   65 	ld (LB,sp),a 
      000626 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000629 20 EA            [ 2]   67 	jra search_ln_loop 
      00062B                         68 8$: 
      00062B 5F               [ 1]   69 	clrw x 	
      00062C 51               [ 1]   70 	exgw x,y 
      00062D                         71 9$: _drop VSIZE
      00062D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00062F 51               [ 1]   72 	exgw x,y   
      000630 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000631                         83 del_line: 
      000631                         84 	_vars VSIZE 
      000631 52 04            [ 2]    1     sub sp,#VSIZE 
      000633 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000635 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000637 0F 01            [ 1]   87 	clr (LLEN,sp)
      000639 90 93            [ 1]   88 	ldw y,x  
      00063B 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      00063E 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000640 90 CE 00 1B      [ 2]   91 	ldw y,txtend 
      000644 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000647 90 CF 00 0C      [ 2]   93 	ldw acc16,y 
      00064B 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      00064D CD 0D 90         [ 4]   95 	call move
      000650 90 CE 00 1B      [ 2]   96 	ldw y,txtend 
      000654 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000657 90 CF 00 1B      [ 2]   98 	ldw txtend,y  
      00065B                         99 	_drop VSIZE     
      00065B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00065D 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      00065E                        115 create_gap:
      00065E                        116 	_vars VSIZE
      00065E 52 06            [ 2]    1     sub sp,#VSIZE 
      000660 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000662 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000664 90 CF 00 0C      [ 2]  119 	ldw acc16,y 
      000668 90 93            [ 1]  120 	ldw y,x ; SRC
      00066A 72 BB 00 0C      [ 2]  121 	addw x,acc16  
      00066E 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000670 CE 00 1B         [ 2]  124 	ldw x,txtend 
      000673 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000676 CF 00 0C         [ 2]  126 	ldw acc16,x ; size to move
      000679 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      00067B CD 0D 90         [ 4]  128 	call move
      00067E CE 00 1B         [ 2]  129 	ldw x,txtend
      000681 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000684 CF 00 1B         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      000687                        132 9$:	_drop VSIZE 
      000687 5B 06            [ 2]    1     addw sp,#VSIZE 
      000689 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      00068A                        150 insert_line:
      00068A                        151 	_vars VSIZE 
      00068A 52 08            [ 2]    1     sub sp,#VSIZE 
      00068C CE 00 1B         [ 2]  152 	ldw x,txtend  
      00068F C3 00 19         [ 2]  153 	cpw x,txtbgn 
      000692 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000694 AE 00 02         [ 2]  156 	ldw x,#2 
      000697 72 D6 00 17      [ 4]  157 	ld a,([ptr16],x)
      00069B A1 03            [ 1]  158 	cp a,#3
      00069D 27 5A            [ 1]  159 	jreq insert_ln_exit
      00069F 5F               [ 1]  160 	clrw x 
      0006A0 97               [ 1]  161 	ld xl,a
      0006A1 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      0006A3 CE 00 19         [ 2]  163 	ldw x,txtbgn
      0006A6 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      0006A8 CE 00 1B         [ 2]  165 	ldw x,txtend 
      0006AB 20 38            [ 2]  166 	jra 4$
      0006AD 72 CE 00 17      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      0006B1 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      0006B3 AE 00 02         [ 2]  170 	ldw x,#2 
      0006B6 72 D6 00 17      [ 4]  171 	ld a,([ptr16],x)
      0006BA 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      0006BB 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      0006BD 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      0006BF 4F               [ 1]  177 	clr a 
      0006C0 CD 06 06         [ 4]  178 	call search_lineno 
      0006C3 5D               [ 2]  179 	tnzw x 
      0006C4 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      0006C6 17 01            [ 2]  183 	ldw (DEST,sp),y 
      0006C8 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      0006CA 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      0006CC CD 06 31         [ 4]  188 	call del_line
      0006CF                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      0006CF A6 03            [ 1]  192 	ld a,#3
      0006D1 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      0006D3 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      0006D5 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      0006D7 C3 00 1B         [ 2]  198 	cpw x,txtend 
      0006DA 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      0006DC 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      0006DE 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      0006E0 CD 06 5E         [ 4]  204 	call create_gap
      0006E3 20 06            [ 2]  205 	jra 5$
      0006E5                        206 4$: 
      0006E5 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      0006E8 CF 00 1B         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      0006EB 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      0006ED CF 00 0C         [ 2]  211 	ldw acc16,x 
      0006F0 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      0006F4 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      0006F6 CD 0D 90         [ 4]  214 	call move 
      0006F9                        215 insert_ln_exit:	
      0006F9                        216 	_drop VSIZE
      0006F9 5B 08            [ 2]    1     addw sp,#VSIZE 
      0006FB 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      0006FC                        233 parse_quote: 
      0006FC                        234 	_vars VSIZE 
      0006FC 52 02            [ 2]    1     sub sp,#VSIZE 
      0006FE 4F               [ 1]  235 	clr a
      0006FF 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000701                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      000701 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000704 27 24            [ 1]  239 	jreq 6$
      000706 72 5C 00 01      [ 1]  240 	inc in 
      00070A 6B 02            [ 1]  241 	ld (CURR,sp),a 
      00070C A6 5C            [ 1]  242 	ld a,#'\
      00070E 11 01            [ 1]  243 	cp a, (PREV,sp)
      000710 26 0A            [ 1]  244 	jrne 3$
      000712 0F 01            [ 1]  245 	clr (PREV,sp)
      000714 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000716 AD 1C            [ 4]  247 	callr convert_escape
      000718 F7               [ 1]  248 	ld (x),a 
      000719 5C               [ 1]  249 	incw x 
      00071A 20 E5            [ 2]  250 	jra 2$
      00071C                        251 3$:
      00071C 7B 02            [ 1]  252 	ld a,(CURR,sp)
      00071E A1 5C            [ 1]  253 	cp a,#'\'
      000720 27 DD            [ 1]  254 	jreq 1$
      000722 A1 22            [ 1]  255 	cp a,#'"
      000724 27 04            [ 1]  256 	jreq 6$ 
      000726 F7               [ 1]  257 	ld (x),a 
      000727 5C               [ 1]  258 	incw x 
      000728 20 D7            [ 2]  259 	jra 2$
      00072A                        260 6$:
      00072A 7F               [ 1]  261 	clr (x)
      00072B 5C               [ 1]  262 	incw x 
      00072C 90 93            [ 1]  263 	ldw y,x 
      00072E 5F               [ 1]  264 	clrw x 
      00072F A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000731                        266 	_drop VSIZE
      000731 5B 02            [ 2]    1     addw sp,#VSIZE 
      000733 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000734                        278 convert_escape:
      000734 89               [ 2]  279 	pushw x 
      000735 AE 07 49         [ 2]  280 	ldw x,#escaped 
      000738 F1               [ 1]  281 1$:	cp a,(x)
      000739 27 06            [ 1]  282 	jreq 2$
      00073B 7D               [ 1]  283 	tnz (x)
      00073C 27 09            [ 1]  284 	jreq 3$
      00073E 5C               [ 1]  285 	incw x 
      00073F 20 F7            [ 2]  286 	jra 1$
      000741 1D 07 49         [ 2]  287 2$: subw x,#escaped 
      000744 9F               [ 1]  288 	ld a,xl 
      000745 AB 07            [ 1]  289 	add a,#7
      000747 85               [ 2]  290 3$:	popw x 
      000748 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                    292 
      000749 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000751                        310 parse_integer: ; { -- n }
      000751 89               [ 2]  311 	pushw x 	
      000752 4B 00            [ 1]  312 	push #0 ; TCHAR
      000754 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000756 A1 24            [ 1]  314 	cp a,#'$
      000758 26 04            [ 1]  315 	jrne 2$ 
      00075A                        316     _drop #1
      00075A 5B 01            [ 2]    1     addw sp,##1 
      00075C 4B 10            [ 1]  317 	push #16  ; BASE=16
      00075E F7               [ 1]  318 2$:	ld (x),a 
      00075F 5C               [ 1]  319 	incw x 
      000760 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000763 72 5C 00 01      [ 1]  321 	inc in 
      000767 CD 13 55         [ 4]  322 	call to_upper 
      00076A 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      00076C CD 0D F9         [ 4]  324 	call is_digit 
      00076F 25 ED            [ 1]  325 	jrc 2$
      000771 A6 10            [ 1]  326 	ld a,#16 
      000773 11 01            [ 1]  327 	cp a,(BASE,sp)
      000775 26 0A            [ 1]  328 	jrne 3$ 
      000777 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000779 A1 41            [ 1]  330 	cp a,#'A 
      00077B 2B 04            [ 1]  331 	jrmi 3$ 
      00077D A1 47            [ 1]  332 	cp a,#'G 
      00077F 2B DD            [ 1]  333 	jrmi 2$ 
      000781 72 5A 00 01      [ 1]  334 3$: dec in 	
      000785 7F               [ 1]  335     clr (x)
      000786 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000788 CD 13 61         [ 4]  337 	call atoi24
      00078B 90 93            [ 1]  338 	ldw y,x 
      00078D CE 00 0C         [ 2]  339 	ldw x,acc16 
      000790 A6 84            [ 1]  340 	ld a,#TK_INTGR
      000792 90 FF            [ 2]  341 	ldw (y),x 
      000794 72 A9 00 02      [ 2]  342 	addw y,#2
      000798                        343 	_drop VSIZE  
      000798 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00079A 81               [ 4]  344 	ret 	
                                    345 
                                    346 ;-------------------------
                                    347 ; binary integer parser
                                    348 ; build integer in acc24  
                                    349 ; input:
                                    350 ;   X 		point to output buffer  
                                    351 ;   Y 		point to tib 
                                    352 ;   A 	    '&' 
                                    353 ; output:  
                                    354 ;   buffer  TK_INTGR integer  
                                    355 ;   X 		int16 
                                    356 ;   A 		TK_INTGR
                                    357 ;   acc24    int24 
                                    358 ;-------------------------
                           000001   359 	BINARY=1 ; 24 bits integer 
                           000003   360 	VSIZE=3
      00079B                        361 parse_binary: ; { -- n }
      00079B 4B 00            [ 1]  362 	push #0
      00079D 4B 00            [ 1]  363 	push #0
      00079F 4B 00            [ 1]  364 	push #0
      0007A1                        365 2$:	
      0007A1 91 D6 00         [ 4]  366 	ld a,([in.w],y)
      0007A4 72 5C 00 01      [ 1]  367 	inc in 
      0007A8 A1 30            [ 1]  368 	cp a,#'0 
      0007AA 27 06            [ 1]  369 	jreq 3$
      0007AC A1 31            [ 1]  370 	cp a,#'1 
      0007AE 27 02            [ 1]  371 	jreq 3$ 
      0007B0 20 0B            [ 2]  372 	jra bin_exit 
      0007B2 A0 30            [ 1]  373 3$: sub a,#'0 
      0007B4 46               [ 1]  374 	rrc a
      0007B5 09 03            [ 1]  375 	rlc (BINARY+2,sp) 
      0007B7 09 02            [ 1]  376 	rlc (BINARY+1,sp)
      0007B9 09 01            [ 1]  377 	rlc (BINARY,sp) 
      0007BB 20 E4            [ 2]  378 	jra 2$  
      0007BD                        379 bin_exit:
      0007BD 72 5A 00 01      [ 1]  380 	dec in 
      0007C1 90 93            [ 1]  381 	ldw y,x
      0007C3 7B 01            [ 1]  382 	ld a,(BINARY,sp)
      0007C5 C7 00 0B         [ 1]  383 	ld acc24,a 
      0007C8 1E 02            [ 2]  384 	ldw x,(BINARY+1,sp)
      0007CA CF 00 0C         [ 2]  385 	ldw acc16,x
      0007CD 90 FF            [ 2]  386 	ldw (y),x 
      0007CF 72 A9 00 02      [ 2]  387 	addw y,#2  
      0007D3 A6 84            [ 1]  388 	ld a,#TK_INTGR 	
      0007D5                        389 	_drop VSIZE 
      0007D5 5B 03            [ 2]    1     addw sp,#VSIZE 
      0007D7 81               [ 4]  390 	ret
                                    391 
                                    392 ;---------------------------
                                    393 ;  token begin with a letter,
                                    394 ;  is keyword or variable. 	
                                    395 ; input:
                                    396 ;   X 		point to pad 
                                    397 ;   Y 		point to text
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                    398 ;   A 	    first letter  
                                    399 ; output:
                                    400 ;   X		exec_addr|var_addr 
                                    401 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    402 ;   pad 	keyword|var_name  
                                    403 ;--------------------------  
                           000001   404 	XFIRST=1
                           000002   405 	VSIZE=2
      0007D8                        406 parse_keyword: 
      0007D8 89               [ 2]  407 	pushw x 
      0007D9                        408 kw_loop:	
      0007D9 CD 13 55         [ 4]  409 	call to_upper 
      0007DC F7               [ 1]  410 	ld (x),a 
      0007DD 5C               [ 1]  411 	incw x 
      0007DE 91 D6 00         [ 4]  412 	ld a,([in.w],y)
      0007E1 72 5C 00 01      [ 1]  413 	inc in 
      0007E5 CD 0D E8         [ 4]  414 	call is_alpha 
      0007E8 25 EF            [ 1]  415 	jrc kw_loop
      0007EA 72 5A 00 01      [ 1]  416 	dec in   
      0007EE 7F               [ 1]  417 1$: clr (x)
      0007EF 1E 01            [ 2]  418 	ldw x,(XFIRST,sp) 
      0007F1 E6 01            [ 1]  419 	ld a,(1,x)
      0007F3 26 13            [ 1]  420 	jrne 2$
                                    421 ; one letter variable name 
      0007F5 F6               [ 1]  422 	ld a,(x) 
      0007F6 A0 41            [ 1]  423 	sub a,#'A 
      0007F8 48               [ 1]  424 	sll a 
      0007F9 88               [ 1]  425 	push a 
      0007FA 4B 00            [ 1]  426 	push #0
      0007FC AE 00 2C         [ 2]  427 	ldw x,#vars 
      0007FF 72 FB 01         [ 2]  428 	addw x,(1,sp) ; X=var address 
      000802                        429 	_drop 2 
      000802 5B 02            [ 2]    1     addw sp,#2 
      000804 A6 85            [ 1]  430 	ld a,#TK_VAR 
      000806 20 0E            [ 2]  431 	jra 4$ 
      000808                        432 2$: ; check for keyword, otherwise syntax error.
      000808                        433 	_ldx_dict kword_dict ; dictionary entry point
      000808 AE 29 1A         [ 2]    1     ldw x,#kword_dict+2
      00080B 16 01            [ 2]  434 	ldw y,(XFIRST,sp) ; name to search for
      00080D CD 15 48         [ 4]  435 	call search_dict
      000810 4D               [ 1]  436 	tnz a
      000811 26 03            [ 1]  437 	jrne 4$ 
      000813 CC 11 0C         [ 2]  438 	jp syntax_error
      000816                        439 4$:	
      000816 16 01            [ 2]  440 	ldw y,(XFIRST,sp)
      000818 A3 00 50         [ 2]  441 	cpw x,#LET_IDX 
      00081B 27 0A            [ 1]  442 	jreq 5$  ; don't compile LET command 
      00081D 90 F7            [ 1]  443 	ld (y),a 
      00081F 90 5C            [ 1]  444 	incw y 
      000821 90 FF            [ 2]  445 	ldw (y),x
      000823 72 A9 00 02      [ 2]  446 	addw y,#2  
      000827                        447 5$:	_drop VSIZE 
      000827 5B 02            [ 2]    1     addw sp,#VSIZE 
      000829 81               [ 4]  448 	ret  	
                                    449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                    450 ;------------------------------------
                                    451 ; skip character c in text starting from 'in'
                                    452 ; input:
                                    453 ;	 y 		point to text buffer
                                    454 ;    a 		character to skip
                                    455 ; output:  
                                    456 ;	'in' ajusted to new position
                                    457 ;------------------------------------
                           000001   458 	C = 1 ; local var
      00082A                        459 skip:
      00082A 88               [ 1]  460 	push a
      00082B 91 D6 00         [ 4]  461 1$:	ld a,([in.w],y)
      00082E 27 0A            [ 1]  462 	jreq 2$
      000830 11 01            [ 1]  463 	cp a,(C,sp)
      000832 26 06            [ 1]  464 	jrne 2$
      000834 72 5C 00 01      [ 1]  465 	inc in
      000838 20 F1            [ 2]  466 	jra 1$
      00083A                        467 2$: _drop 1 
      00083A 5B 01            [ 2]    1     addw sp,#1 
      00083C 81               [ 4]  468 	ret
                                    469 	
                                    470 
                                    471 ;------------------------------------
                                    472 ; scan text for next token
                                    473 ; input: 
                                    474 ;	X 		pointer to buffer where 
                                    475 ;	        token id and value are copied 
                                    476 ; use:
                                    477 ;	Y   pointer to text in tib 
                                    478 ; output:
                                    479 ;   A       token attribute 
                                    480 ;   X 		token value
                                    481 ;   Y       updated position in output buffer   
                                    482 ;------------------------------------
                                    483 	; use to check special character 
                                    484 	.macro _case c t  
                                    485 	ld a,#c 
                                    486 	cp a,(TCHAR,sp) 
                                    487 	jrne t
                                    488 	.endm 
                                    489 
                           000001   490 	TCHAR=1
                           000002   491 	ATTRIB=2
                           000002   492 	VSIZE=2
      00083D                        493 get_token:: 
      00083D                        494 	_vars VSIZE
      00083D 52 02            [ 2]    1     sub sp,#VSIZE 
                                    495 ;	ld a,in 
                                    496 ;	sub a,count
                                    497 ;   jrmi 0$
                                    498 ;	clr a 
                                    499 ;	ret 
      00083F                        500 0$: 
      00083F 90 AE 16 90      [ 2]  501 	ldw y,#tib    	
      000843 A6 20            [ 1]  502 	ld a,#SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      000845 CD 08 2A         [ 4]  503 	call skip
      000848 55 00 01 00 02   [ 1]  504 	mov in.saved,in 
      00084D 91 D6 00         [ 4]  505 	ld a,([in.w],y)
      000850 26 05            [ 1]  506 	jrne 1$
      000852 90 93            [ 1]  507 	ldw y,x 
      000854 CC 09 F9         [ 2]  508 	jp token_exit ; end of line 
      000857 72 5C 00 01      [ 1]  509 1$:	inc in 
      00085B CD 13 55         [ 4]  510 	call to_upper 
      00085E 6B 01            [ 1]  511 	ld (TCHAR,sp),a 
                                    512 ; check for quoted string
      000860                        513 str_tst:  	
      000860                        514 	_case '"' nbr_tst
      000860 A6 22            [ 1]    1 	ld a,#'"' 
      000862 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000864 26 0A            [ 1]    3 	jrne nbr_tst
      000866 A6 02            [ 1]  515 	ld a,#TK_QSTR
      000868 F7               [ 1]  516 	ld (x),a 
      000869 5C               [ 1]  517 	incw x 
      00086A CD 06 FC         [ 4]  518 	call parse_quote
      00086D CC 09 F9         [ 2]  519 	jp token_exit
      000870                        520 nbr_tst:
                                    521 ; check for hexadecimal number 
      000870 A6 24            [ 1]  522 	ld a,#'$'
      000872 11 01            [ 1]  523 	cp a,(TCHAR,sp) 
      000874 27 17            [ 1]  524 	jreq 1$
                                    525 ;check for binary number 
      000876 A6 26            [ 1]  526 	ld a,#'&
      000878 11 01            [ 1]  527 	cp a,(TCHAR,sp)
      00087A 26 0A            [ 1]  528 	jrne 0$
      00087C A6 84            [ 1]  529 	ld a,#TK_INTGR
      00087E F7               [ 1]  530 	ld (x),a 
      00087F 5C               [ 1]  531 	incw x 
      000880 CD 07 9B         [ 4]  532 	call parse_binary ; expect binary integer 
      000883 CC 09 F9         [ 2]  533 	jp token_exit 
                                    534 ; check for decimal number 	
      000886 7B 01            [ 1]  535 0$:	ld a,(TCHAR,sp)
      000888 CD 0D F9         [ 4]  536 	call is_digit
      00088B 24 0C            [ 1]  537 	jrnc 3$
      00088D A6 84            [ 1]  538 1$:	ld a,#TK_INTGR 
      00088F F7               [ 1]  539 	ld (x),a 
      000890 5C               [ 1]  540 	incw x 
      000891 7B 01            [ 1]  541 	ld a,(TCHAR,sp)
      000893 CD 07 51         [ 4]  542 	call parse_integer 
      000896 CC 09 F9         [ 2]  543 	jp token_exit 
      000899                        544 3$: 
      000899                        545 	_case '(' bkslsh_tst 
      000899 A6 28            [ 1]    1 	ld a,#'(' 
      00089B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00089D 26 05            [ 1]    3 	jrne bkslsh_tst
      00089F A6 07            [ 1]  546 	ld a,#TK_LPAREN
      0008A1 CC 09 F5         [ 2]  547 	jp token_char   	
      0008A4                        548 bkslsh_tst: ; character token 
      0008A4                        549 	_case '\',rparnt_tst
      0008A4 A6 5C            [ 1]    1 	ld a,#'\' 
      0008A6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0008A8 26 16            [ 1]    3 	jrne rparnt_tst
      0008AA A6 03            [ 1]  550 	ld a,#TK_CHAR 
      0008AC F7               [ 1]  551 	ld (x),a 
      0008AD 5C               [ 1]  552 	incw x 
      0008AE 91 D6 00         [ 4]  553 	ld a,([in.w],y)
      0008B1 F7               [ 1]  554 	ld (x),a 
      0008B2 5C               [ 1]  555 	incw x
      0008B3 90 93            [ 1]  556 	ldw y,x 	 
      0008B5 72 5C 00 01      [ 1]  557 	inc in  
      0008B9 5F               [ 1]  558 	clrw x 
      0008BA 97               [ 1]  559 	ld xl,a 
      0008BB A6 03            [ 1]  560 	ld a,#TK_CHAR 
      0008BD CC 09 F9         [ 2]  561 	jp token_exit 
      0008C0                        562 rparnt_tst:		
      0008C0                        563 	_case ')' colon_tst 
      0008C0 A6 29            [ 1]    1 	ld a,#')' 
      0008C2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0008C4 26 05            [ 1]    3 	jrne colon_tst
      0008C6 A6 08            [ 1]  564 	ld a,#TK_RPAREN 
      0008C8 CC 09 F5         [ 2]  565 	jp token_char
      0008CB                        566 colon_tst:
      0008CB                        567 	_case ':' comma_tst 
      0008CB A6 3A            [ 1]    1 	ld a,#':' 
      0008CD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0008CF 26 05            [ 1]    3 	jrne comma_tst
      0008D1 A6 0B            [ 1]  568 	ld a,#TK_COLON 
      0008D3 CC 09 F5         [ 2]  569 	jp token_char  
      0008D6                        570 comma_tst:
      0008D6                        571 	_case COMMA sharp_tst 
      0008D6 A6 2C            [ 1]    1 	ld a,#COMMA 
      0008D8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0008DA 26 05            [ 1]    3 	jrne sharp_tst
      0008DC A6 09            [ 1]  572 	ld a,#TK_COMMA
      0008DE CC 09 F5         [ 2]  573 	jp token_char
      0008E1                        574 sharp_tst:
      0008E1                        575 	_case SHARP dash_tst 
      0008E1 A6 23            [ 1]    1 	ld a,#SHARP 
      0008E3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0008E5 26 05            [ 1]    3 	jrne dash_tst
      0008E7 A6 0A            [ 1]  576 	ld a,#TK_SHARP
      0008E9 CC 09 F5         [ 2]  577 	jp token_char  	 	 
      0008EC                        578 dash_tst: 	
      0008EC                        579 	_case '-' at_tst 
      0008EC A6 2D            [ 1]    1 	ld a,#'-' 
      0008EE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0008F0 26 05            [ 1]    3 	jrne at_tst
      0008F2 A6 11            [ 1]  580 	ld a,#TK_MINUS  
      0008F4 CC 09 F5         [ 2]  581 	jp token_char 
      0008F7                        582 at_tst:
      0008F7                        583 	_case '@' qmark_tst 
      0008F7 A6 40            [ 1]    1 	ld a,#'@' 
      0008F9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0008FB 26 05            [ 1]    3 	jrne qmark_tst
      0008FD A6 06            [ 1]  584 	ld a,#TK_ARRAY 
      0008FF CC 09 F5         [ 2]  585 	jp token_char
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      000902                        586 qmark_tst:
      000902                        587 	_case '?' tick_tst 
      000902 A6 3F            [ 1]    1 	ld a,#'?' 
      000904 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000906 26 12            [ 1]    3 	jrne tick_tst
      000908 A6 80            [ 1]  588 	ld a,#TK_CMD  
      00090A F7               [ 1]  589 	ld (x),a 
      00090B 5C               [ 1]  590 	incw x 
      00090C 90 93            [ 1]  591 	ldw y,x 
      00090E AE 00 72         [ 2]  592 	ldw x,#PRT_IDX 
      000911 90 FF            [ 2]  593 	ldw (y),x 
      000913 72 A9 00 02      [ 2]  594 	addw y,#2
      000917 CC 09 F9         [ 2]  595 	jp token_exit
      00091A                        596 tick_tst: ; comment 
      00091A                        597 	_case TICK plus_tst 
      00091A A6 27            [ 1]    1 	ld a,#TICK 
      00091C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00091E 26 35            [ 1]    3 	jrne plus_tst
      000920 A6 80            [ 1]  598 	ld a,#TK_CMD
      000922 F7               [ 1]  599 	ld (x),a 
      000923 5C               [ 1]  600 	incw x
      000924 90 AE 00 8C      [ 2]  601 	ldw y,#REM_IDX
      000928 FF               [ 2]  602 	ldw (x),y 
      000929 1C 00 02         [ 2]  603 	addw x,#2  
      00092C                        604 copy_comment:
      00092C 90 AE 16 90      [ 2]  605 	ldw y,#tib 
      000930 72 B9 00 00      [ 2]  606 	addw y,in.w
      000934 90 89            [ 2]  607 	pushw y
      000936 CD 0D 80         [ 4]  608 	call strcpy
      000939 72 F2 01         [ 2]  609     subw y,(1,sp)
      00093C 90 9F            [ 1]  610 	ld a,yl 
      00093E CB 00 01         [ 1]  611 	add a,in
      000941 C7 00 01         [ 1]  612 	ld in,a 
      000944 1F 01            [ 2]  613 	ldw (1,sp),x
      000946 72 F9 01         [ 2]  614 	addw y,(1,sp)
      000949 90 5C            [ 1]  615 	incw y 
      00094B                        616 	_drop 2 
      00094B 5B 02            [ 2]    1     addw sp,#2 
      00094D AE 00 8C         [ 2]  617 	ldw x,#REM_IDX 
      000950 A6 80            [ 1]  618 	ld a,#TK_CMD 
      000952 CC 09 F9         [ 2]  619 	jp token_exit 
      000955                        620 plus_tst:
      000955                        621 	_case '+' star_tst 
      000955 A6 2B            [ 1]    1 	ld a,#'+' 
      000957 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000959 26 05            [ 1]    3 	jrne star_tst
      00095B A6 10            [ 1]  622 	ld a,#TK_PLUS  
      00095D CC 09 F5         [ 2]  623 	jp token_char 
      000960                        624 star_tst:
      000960                        625 	_case '*' slash_tst 
      000960 A6 2A            [ 1]    1 	ld a,#'*' 
      000962 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000964 26 05            [ 1]    3 	jrne slash_tst
      000966 A6 20            [ 1]  626 	ld a,#TK_MULT 
      000968 CC 09 F5         [ 2]  627 	jp token_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      00096B                        628 slash_tst: 
      00096B                        629 	_case '/' prcnt_tst 
      00096B A6 2F            [ 1]    1 	ld a,#'/' 
      00096D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00096F 26 05            [ 1]    3 	jrne prcnt_tst
      000971 A6 21            [ 1]  630 	ld a,#TK_DIV 
      000973 CC 09 F5         [ 2]  631 	jp token_char 
      000976                        632 prcnt_tst:
      000976                        633 	_case '%' eql_tst 
      000976 A6 25            [ 1]    1 	ld a,#'%' 
      000978 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00097A 26 05            [ 1]    3 	jrne eql_tst
      00097C A6 22            [ 1]  634 	ld a,#TK_MOD
      00097E CC 09 F5         [ 2]  635 	jp token_char  
                                    636 ; 1 or 2 character tokens 	
      000981                        637 eql_tst:
      000981                        638 	_case '=' gt_tst 		
      000981 A6 3D            [ 1]    1 	ld a,#'=' 
      000983 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000985 26 05            [ 1]    3 	jrne gt_tst
      000987 A6 32            [ 1]  639 	ld a,#TK_EQUAL
      000989 CC 09 F5         [ 2]  640 	jp token_char 
      00098C                        641 gt_tst:
      00098C                        642 	_case '>' lt_tst 
      00098C A6 3E            [ 1]    1 	ld a,#'>' 
      00098E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000990 26 23            [ 1]    3 	jrne lt_tst
      000992 A6 31            [ 1]  643 	ld a,#TK_GT 
      000994 6B 02            [ 1]  644 	ld (ATTRIB,sp),a 
      000996 91 D6 00         [ 4]  645 	ld a,([in.w],y)
      000999 72 5C 00 01      [ 1]  646 	inc in 
      00099D A1 3D            [ 1]  647 	cp a,#'=
      00099F 26 04            [ 1]  648 	jrne 1$
      0009A1 A6 33            [ 1]  649 	ld a,#TK_GE 
      0009A3 20 50            [ 2]  650 	jra token_char  
      0009A5 A1 3C            [ 1]  651 1$: cp a,#'<
      0009A7 26 04            [ 1]  652 	jrne 2$
      0009A9 A6 35            [ 1]  653 	ld a,#TK_NE 
      0009AB 20 48            [ 2]  654 	jra token_char 
      0009AD 72 5A 00 01      [ 1]  655 2$: dec in
      0009B1 7B 02            [ 1]  656 	ld a,(ATTRIB,sp)
      0009B3 20 40            [ 2]  657 	jra token_char 	 
      0009B5                        658 lt_tst:
      0009B5                        659 	_case '<' other
      0009B5 A6 3C            [ 1]    1 	ld a,#'<' 
      0009B7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009B9 26 23            [ 1]    3 	jrne other
      0009BB A6 34            [ 1]  660 	ld a,#TK_LT 
      0009BD 6B 02            [ 1]  661 	ld (ATTRIB,sp),a 
      0009BF 91 D6 00         [ 4]  662 	ld a,([in.w],y)
      0009C2 72 5C 00 01      [ 1]  663 	inc in 
      0009C6 A1 3D            [ 1]  664 	cp a,#'=
      0009C8 26 04            [ 1]  665 	jrne 1$
      0009CA A6 36            [ 1]  666 	ld a,#TK_LE 
      0009CC 20 27            [ 2]  667 	jra token_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0009CE A1 3E            [ 1]  668 1$: cp a,#'>
      0009D0 26 04            [ 1]  669 	jrne 2$
      0009D2 A6 35            [ 1]  670 	ld a,#TK_NE 
      0009D4 20 1F            [ 2]  671 	jra token_char 
      0009D6 72 5A 00 01      [ 1]  672 2$: dec in 
      0009DA 7B 02            [ 1]  673 	ld a,(ATTRIB,sp)
      0009DC 20 17            [ 2]  674 	jra token_char 	
      0009DE                        675 other: ; not a special character 	 
      0009DE 7B 01            [ 1]  676 	ld a,(TCHAR,sp)
      0009E0 CD 0D E8         [ 4]  677 	call is_alpha 
      0009E3 25 03            [ 1]  678 	jrc 30$ 
      0009E5 CC 11 0C         [ 2]  679 	jp syntax_error 
      0009E8                        680 30$: 
      0009E8 CD 07 D8         [ 4]  681 	call parse_keyword
      0009EB A3 1A 2C         [ 2]  682 	cpw x,#remark 
      0009EE 26 09            [ 1]  683 	jrne token_exit 
      0009F0 90 93            [ 1]  684 	ldw y,x 
      0009F2 CC 09 2C         [ 2]  685 	jp copy_comment 
      0009F5                        686 token_char:
      0009F5 F7               [ 1]  687 	ld (x),a 
      0009F6 5C               [ 1]  688 	incw x
      0009F7 90 93            [ 1]  689 	ldw y,x 
      0009F9                        690 token_exit:
      0009F9                        691 	_drop VSIZE 
      0009F9 5B 02            [ 2]    1     addw sp,#VSIZE 
      0009FB 81               [ 4]  692 	ret
                                    693 
                                    694 
                                    695 ;-----------------------------------
                                    696 ; create token list fromm text line 
                                    697 ; save this list in pad buffer 
                                    698 ;  compiled line format: 
                                    699 ;    line_no  2 bytes {0...32767}
                                    700 ;    count    1 byte  
                                    701 ;    tokens   variable length 
                                    702 ;   
                                    703 ; input:
                                    704 ;   none
                                    705 ; modified variables:
                                    706 ;   basicptr     token list buffer address 
                                    707 ;   in.w  		 3|count, i.e. index in buffer
                                    708 ;   count        length of line | 0  
                                    709 ;-----------------------------------
                           000001   710 	XSAVE=1
                           000002   711 	VSIZE=2
      0009FC                        712 compile::
      0009FC                        713 	_vars VSIZE 
      0009FC 52 02            [ 2]    1     sub sp,#VSIZE 
      0009FE 55 00 19 00 04   [ 1]  714 	mov basicptr,txtbgn
      000A03 72 1A 00 20      [ 1]  715 	bset flags,#FCOMP 
      000A07 A6 00            [ 1]  716 	ld a,#0
      000A09 AE 00 00         [ 2]  717 	ldw x,#0
      000A0C CF 16 E0         [ 2]  718 	ldw pad,x ; destination buffer 
      000A0F C7 16 E2         [ 1]  719 	ld pad+2,a ; count 
      000A12 AE 16 E3         [ 2]  720 	ldw x,#pad+3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      000A15 72 5F 00 01      [ 1]  721 	clr in 
      000A19 CD 08 3D         [ 4]  722 	call get_token
      000A1C A1 84            [ 1]  723 	cp a,#TK_INTGR
      000A1E 26 11            [ 1]  724 	jrne 2$
      000A20 A3 00 01         [ 2]  725 	cpw x,#1 
      000A23 2A 05            [ 1]  726 	jrpl 1$
      000A25 A6 0A            [ 1]  727 	ld a,#ERR_BAD_VALUE
      000A27 CC 11 0E         [ 2]  728 	jp tb_error
      000A2A CF 16 E0         [ 2]  729 1$:	ldw pad,x 
      000A2D 90 AE 16 E3      [ 2]  730 	ldw y,#pad+3 
      000A31 90 A3 17 60      [ 2]  731 2$:	cpw y,#stack_full 
      000A35 25 05            [ 1]  732 	jrult 3$
      000A37 A6 0F            [ 1]  733 	ld a,#ERR_BUF_FULL 
      000A39 CC 11 0E         [ 2]  734 	jp tb_error 
      000A3C                        735 3$:	
      000A3C 93               [ 1]  736 	ldw x,y 
      000A3D CD 08 3D         [ 4]  737 	call get_token 
      000A40 A1 00            [ 1]  738 	cp a,#TK_NONE 
      000A42 26 ED            [ 1]  739 	jrne 2$ 
                                    740 ; compilation completed  
      000A44 72 A2 16 E0      [ 2]  741 	subw y,#pad
      000A48 90 9F            [ 1]  742     ld a,yl
      000A4A AE 16 E0         [ 2]  743 	ldw x,#pad 
      000A4D CF 00 17         [ 2]  744 	ldw ptr16,x 
      000A50 E7 02            [ 1]  745 	ld (2,x),a 
      000A52 FE               [ 2]  746 	ldw x,(x)
      000A53 27 09            [ 1]  747 	jreq 10$
      000A55 CD 06 8A         [ 4]  748 	call insert_line
      000A58 72 5F 00 03      [ 1]  749 	clr  count 
      000A5C 20 0F            [ 2]  750 	jra  11$ 
      000A5E                        751 10$: ; line# is zero 
      000A5E CE 00 17         [ 2]  752 	ldw x,ptr16  
      000A61 CF 00 04         [ 2]  753 	ldw basicptr,x 
      000A64 E6 02            [ 1]  754 	ld a,(2,x)
      000A66 C7 00 03         [ 1]  755 	ld count,a 
      000A69 35 03 00 01      [ 1]  756 	mov in,#3 
      000A6D                        757 11$:
      000A6D                        758 	_drop VSIZE 
      000A6D 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A6F 72 1B 00 20      [ 1]  759 	bres flags,#FCOMP 
      000A73 81               [ 4]  760 	ret 
                                    761 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      000A74                         48 cpy_cmd_name:
      000A74 F6               [ 1]   49 	ld a,(x)
      000A75 5C               [ 1]   50 	incw x
      000A76 A4 0F            [ 1]   51 	and a,#15  
      000A78 88               [ 1]   52 	push a 
      000A79 0D 01            [ 1]   53     tnz (1,sp) 
      000A7B 27 0A            [ 1]   54 	jreq 9$
      000A7D F6               [ 1]   55 1$:	ld a,(x)
      000A7E 90 F7            [ 1]   56 	ld (y),a  
      000A80 5C               [ 1]   57 	incw x
      000A81 90 5C            [ 1]   58 	incw y 
      000A83 0A 01            [ 1]   59 	dec (1,sp)	 
      000A85 26 F6            [ 1]   60 	jrne 1$
      000A87 84               [ 1]   61 9$: pop a 
      000A88 81               [ 4]   62 	ret	
                                     63 
                                     64 ;--------------------------
                                     65 ; add a space after letter or 
                                     66 ; digit.
                                     67 ; input:
                                     68 ;   Y     pointer to buffer 
                                     69 ; output:
                                     70 ;   Y    moved to end 
                                     71 ;--------------------------
      000A89                         72 add_space:
      000A89 90 5A            [ 2]   73 	decw y 
      000A8B 90 F6            [ 1]   74 	ld a,(y)
      000A8D 90 5C            [ 1]   75 	incw y
      000A8F CD 0E 02         [ 4]   76 	call is_alnum 
      000A92 24 06            [ 1]   77 	jrnc 1$
      000A94 A6 20            [ 1]   78 	ld a,#SPACE 
      000A96 90 F7            [ 1]   79 	ld (y),a 
      000A98 90 5C            [ 1]   80 	incw y 
      000A9A 81               [ 4]   81 1$: ret 
                                     82 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                     83 ;--------------------------
                                     84 ;  align text in buffer 
                                     85 ;  to tab_width padding 
                                     86 ;  left with  SPACE 
                                     87 ; input:
                                     88 ;   X      str*
                                     89 ;   A      str_length 
                                     90 ; output:
                                     91 ;   X      ajusted
                                     92 ;--------------------------
      000A9B                         93 right_align::
      000A9B 88               [ 1]   94 	push a 
      000A9C 7B 01            [ 1]   95 0$: ld a,(1,sp)
      000A9E C1 00 21         [ 1]   96 	cp a,tab_width 
      000AA1 2A 08            [ 1]   97 	jrpl 1$
      000AA3 A6 20            [ 1]   98 	ld a,#SPACE 
      000AA5 5A               [ 2]   99 	decw x
      000AA6 F7               [ 1]  100 	ld (x),a  
      000AA7 0C 01            [ 1]  101 	inc (1,sp)
      000AA9 20 F1            [ 2]  102 	jra 0$ 
      000AAB 84               [ 1]  103 1$: pop a 	
      000AAC 81               [ 4]  104 	ret 
                                    105 
                                    106 ;--------------------------
                                    107 ; print TK_QSTR
                                    108 ; converting control character
                                    109 ; to backslash sequence
                                    110 ; input:
                                    111 ;   X        char *
                                    112 ;   Y        dest. buffer 
                                    113 ; output:
                                    114 ;   X        moved forward 
                                    115 ;   Y        moved forward 
                                    116 ;-----------------------------
      000AAD                        117 cpy_quote:
      000AAD A6 22            [ 1]  118 	ld a,#'"
      000AAF 90 F7            [ 1]  119 	ld (y),a 
      000AB1 90 5C            [ 1]  120 	incw y 
      000AB3 F6               [ 1]  121 1$:	ld a,(x)
      000AB4 27 30            [ 1]  122 	jreq 9$
      000AB6 5C               [ 1]  123 	incw x 
      000AB7 A1 20            [ 1]  124 	cp a,#SPACE 
      000AB9 25 0E            [ 1]  125 	jrult 3$
      000ABB 90 F7            [ 1]  126 	ld (y),a
      000ABD 90 5C            [ 1]  127 	incw y 
      000ABF A1 5C            [ 1]  128 	cp a,#'\ 
      000AC1 26 F0            [ 1]  129 	jrne 1$ 
      000AC3                        130 2$:
      000AC3 90 F7            [ 1]  131 	ld (y),a
      000AC5 90 5C            [ 1]  132 	incw y  
      000AC7 20 EA            [ 2]  133 	jra 1$
      000AC9 88               [ 1]  134 3$: push a 
      000ACA A6 5C            [ 1]  135 	ld a,#'\
      000ACC 90 F7            [ 1]  136 	ld (y),a 
      000ACE 90 5C            [ 1]  137 	incw y  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000AD0 84               [ 1]  138 	pop a 
      000AD1 A0 07            [ 1]  139 	sub a,#7
      000AD3 C7 00 0D         [ 1]  140 	ld acc8,a 
      000AD6 72 5F 00 0C      [ 1]  141 	clr acc16
      000ADA 89               [ 2]  142 	pushw x
      000ADB AE 07 49         [ 2]  143 	ldw x,#escaped 
      000ADE 72 BB 00 0C      [ 2]  144 	addw x,acc16 
      000AE2 F6               [ 1]  145 	ld a,(x)
      000AE3 85               [ 2]  146 	popw x
      000AE4 20 DD            [ 2]  147 	jra 2$
      000AE6 A6 22            [ 1]  148 9$: ld a,#'"
      000AE8 90 F7            [ 1]  149 	ld (y),a 
      000AEA 90 5C            [ 1]  150 	incw y  
      000AEC 5C               [ 1]  151 	incw x 
      000AED 81               [ 4]  152 	ret
                                    153 
                                    154 ;--------------------------
                                    155 ; return variable name 
                                    156 ; from its address.
                                    157 ; input:
                                    158 ;   X    variable address
                                    159 ; output:
                                    160 ;   A     variable letter
                                    161 ;--------------------------
      000AEE                        162 var_name::
      000AEE 1D 00 2C         [ 2]  163 		subw x,#vars 
      000AF1 9F               [ 1]  164 		ld a,xl 
      000AF2 44               [ 1]  165 		srl a 
      000AF3 AB 41            [ 1]  166 		add a,#'A 
      000AF5 81               [ 4]  167 		ret 
                                    168 
                                    169 ;-----------------------------
                                    170 ; return cmd  idx from its 
                                    171 ; code address 
                                    172 ; input:
                                    173 ;   X      code address 
                                    174 ; output:
                                    175 ;   X      cmd_idx
                                    176 ;-----------------------------
      000AF6                        177 get_cmd_idx:
      000AF6 90 89            [ 2]  178 	pushw y
      000AF8 90 AE 29 20      [ 2]  179 	ldw y,#code_addr 
      000AFC 90 CF 00 17      [ 2]  180 	ldw ptr16,y 
      000B00 90 5F            [ 1]  181 	clrw y 
      000B02 91 D3 17         [ 5]  182 1$:	cpw x,([ptr16],y)
      000B05 27 0C            [ 1]  183 	jreq 3$ 
      000B07 90 5C            [ 1]  184 	incw y 
      000B09 91 D6 17         [ 4]  185 	ld a,([ptr16],y)
      000B0C 90 5C            [ 1]  186 	incw y
      000B0E 91 DA 17         [ 4]  187 	or a,([ptr16],y)	
      000B11 26 EF            [ 1]  188 	jrne 1$
      000B13 93               [ 1]  189 3$: ldw x,y 
      000B14 90 85            [ 2]  190 	popw y 
      000B16 81               [ 4]  191 	ret
                                    192 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                    193 ;-------------------------------------
                                    194 ; decompile tokens list 
                                    195 ; to original text line 
                                    196 ; input:
                                    197 ;   [basicptr]  pointer at line 
                                    198 ;   Y           destination buffer
                                    199 ; output:
                                    200 ;   A           length 
                                    201 ;   Y           after string  
                                    202 ;------------------------------------
                           000001   203 	BASE_SAV=1
                           000002   204 	WIDTH_SAV=2
                           000003   205 	STR=3
                           000004   206 	VSIZE=4 
      000B17                        207 decompile::
      000B17                        208 	_vars VSIZE
      000B17 52 04            [ 2]    1     sub sp,#VSIZE 
      000B19 C6 00 0A         [ 1]  209 	ld a,base
      000B1C 6B 01            [ 1]  210 	ld (BASE_SAV,sp),a  
      000B1E C6 00 21         [ 1]  211 	ld a,tab_width 
      000B21 6B 02            [ 1]  212 	ld (WIDTH_SAV,sp),a 
      000B23 17 03            [ 2]  213 	ldw (STR,sp),y   
      000B25 72 CE 00 04      [ 5]  214 	ldw x,[basicptr] ; line number 
      000B29 35 0A 00 0A      [ 1]  215 	mov base,#10
      000B2D 35 05 00 21      [ 1]  216 	mov tab_width,#5
      000B31 72 5F 00 0B      [ 1]  217 	clr acc24 
      000B35 CF 00 0C         [ 2]  218 	ldw acc16,x
      000B38 CD 12 65         [ 4]  219 	call itoa  
      000B3B CD 0A 9B         [ 4]  220 	call right_align 
      000B3E 88               [ 1]  221 	push a 
      000B3F 90 93            [ 1]  222 1$:	ldw y,x ; source
      000B41 1E 04            [ 2]  223 	ldw x,(STR+1,sp) ; destination
      000B43 CD 0D 80         [ 4]  224 	call strcpy 
      000B46 90 5F            [ 1]  225 	clrw y 
      000B48 84               [ 1]  226 	pop a 
      000B49 90 97            [ 1]  227 	ld yl,a 
      000B4B 72 F9 03         [ 2]  228 	addw y,(STR,sp)
      000B4E A6 20            [ 1]  229 	ld a,#SPACE 
      000B50 90 F7            [ 1]  230 	ld (y),a 
      000B52 90 5C            [ 1]  231 	incw y 
      000B54 72 5F 00 21      [ 1]  232 	clr tab_width
      000B58 AE 00 03         [ 2]  233 	ldw x,#3
      000B5B CF 00 00         [ 2]  234 	ldw in.w,x 
      000B5E                        235 decomp_loop:
      000B5E 90 89            [ 2]  236 	pushw y
      000B60 CD 11 FB         [ 4]  237 	call next_token 
      000B63 90 85            [ 2]  238 	popw y 
      000B65 4D               [ 1]  239 	tnz a  
      000B66 26 03            [ 1]  240 	jrne 1$
      000B68 CC 0C 4A         [ 2]  241 	jp 20$
      000B6B 2A 75            [ 1]  242 1$:	jrpl 6$
                                    243 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      000B6D A1 85            [ 1]  244 	cp a,#TK_VAR 
      000B6F 26 0C            [ 1]  245 	jrne 3$
                                    246 ;; TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000B71 CD 0A 89         [ 4]  247 	call add_space  
      000B74 CD 0A EE         [ 4]  248 	call var_name
      000B77 90 F7            [ 1]  249 	ld (y),a 
      000B79 90 5C            [ 1]  250 	incw y  
      000B7B 20 E1            [ 2]  251 	jra decomp_loop
      000B7D                        252 3$:
      000B7D A1 84            [ 1]  253 	cp a,#TK_INTGR
      000B7F 26 22            [ 1]  254 	jrne 4$
                                    255 ;; TK_INTGR
      000B81 CD 0A 89         [ 4]  256 	call add_space
      000B84 72 5F 00 0B      [ 1]  257 	clr acc24 
      000B88 CF 00 0C         [ 2]  258 	ldw acc16,x 
      000B8B 90 89            [ 2]  259 	pushw y 
      000B8D CD 12 65         [ 4]  260 	call itoa  
      000B90 16 01            [ 2]  261 	ldw y,(1,sp) 
      000B92 88               [ 1]  262 	push a 
      000B93 51               [ 1]  263 	exgw x,y 
      000B94 CD 0D 80         [ 4]  264 	call strcpy 
      000B97 90 5F            [ 1]  265 	clrw y
      000B99 84               [ 1]  266 	pop a  
      000B9A 90 97            [ 1]  267 	ld yl,a 
      000B9C 72 F9 01         [ 2]  268 	addw y,(1,sp)
      000B9F                        269 	_drop 2 
      000B9F 5B 02            [ 2]    1     addw sp,#2 
      000BA1 20 BB            [ 2]  270 	jra decomp_loop
                                    271 ;; dictionary keyword 
      000BA3                        272 4$:	
      000BA3 CD 0A F6         [ 4]  273 	call get_cmd_idx 
      000BA6 A3 00 8C         [ 2]  274 	cpw x,#REM_IDX
      000BA9 26 22            [ 1]  275 	jrne 5$
      000BAB CE 00 04         [ 2]  276 	ldw x,basicptr 
                                    277 ; copy comment to buffer 
      000BAE CD 0A 89         [ 4]  278 	call add_space
      000BB1 A6 27            [ 1]  279 	ld a,#''
      000BB3 90 F7            [ 1]  280 	ld (y),a 
      000BB5 90 5C            [ 1]  281 	incw y 
      000BB7                        282 41$:
      000BB7 72 D6 00 00      [ 4]  283 	ld a,([in.w],x)
      000BBB 72 5C 00 01      [ 1]  284 	inc in  
      000BBF 90 F7            [ 1]  285 	ld (y),a 
      000BC1 90 5C            [ 1]  286 	incw y 
      000BC3 C6 00 01         [ 1]  287 	ld a,in 
      000BC6 C1 00 03         [ 1]  288 	cp a,count 
      000BC9 2B EC            [ 1]  289 	jrmi 41$
      000BCB 20 7D            [ 2]  290 	jra 20$  
      000BCD A3 00 50         [ 2]  291 5$: cpw x,#LET_IDX 
      000BD0 27 8C            [ 1]  292 	jreq decomp_loop ; down display LET 	
                                    293 ; insert command name 
      000BD2 CD 0A 89         [ 4]  294 	call add_space  
      000BD5 90 89            [ 2]  295 	pushw y
      000BD7 CD 0C 85         [ 4]  296 	call cmd_name
      000BDA 90 85            [ 2]  297 	popw y 
      000BDC CD 0A 74         [ 4]  298 	call cpy_cmd_name
      000BDF CC 0B 5E         [ 2]  299 	jp decomp_loop 
      000BE2                        300 6$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000BE2 A1 02            [ 1]  301 	cp a,#TK_QSTR 
      000BE4 26 06            [ 1]  302 	jrne 7$
                                    303 ;; TK_QSTR
      000BE6 CD 0A AD         [ 4]  304 	call cpy_quote  
      000BE9 CC 0B 5E         [ 2]  305 	jp decomp_loop
      000BEC                        306 7$:
      000BEC A1 03            [ 1]  307 	cp a,#TK_CHAR 
      000BEE 26 0E            [ 1]  308 	jrne 8$
                                    309 ;; TK_CHAR 
      000BF0 A6 5C            [ 1]  310 	ld a,#'\ 
      000BF2 90 F7            [ 1]  311 	ld (y),a 
      000BF4 90 5C            [ 1]  312 	incw y 
      000BF6 9F               [ 1]  313 	ld a,xl 
      000BF7 90 F7            [ 1]  314 	ld (y),a 
      000BF9 90 5C            [ 1]  315 	incw y 
      000BFB CC 0B 5E         [ 2]  316 	jp decomp_loop
      000BFE A1 0B            [ 1]  317 8$: cp a,#TK_COLON 
      000C00 26 09            [ 1]  318 	jrne 9$
      000C02 A6 3A            [ 1]  319 	ld a,#':
      000C04                        320 81$:
      000C04 90 F7            [ 1]  321 	ld (y),a 
      000C06 90 5C            [ 1]  322 	incw y 
      000C08                        323 82$:
      000C08 CC 0B 5E         [ 2]  324 	jp decomp_loop
      000C0B                        325 9$: 
      000C0B A1 0A            [ 1]  326 	cp a,#TK_SHARP
      000C0D 22 0A            [ 1]  327 	jrugt 10$ 
      000C0F A0 06            [ 1]  328 	sub a,#TK_ARRAY 
      000C11 5F               [ 1]  329 	clrw x 
      000C12 97               [ 1]  330 	ld xl,a
      000C13 1C 0C 60         [ 2]  331 	addw x,#single_char 
      000C16 F6               [ 1]  332 	ld a,(x)
      000C17 20 EB            [ 2]  333 	jra 81$ 
      000C19                        334 10$: 
      000C19 A1 11            [ 1]  335 	cp a,#TK_MINUS 
      000C1B 22 0A            [ 1]  336 	jrugt 11$
      000C1D A0 10            [ 1]  337 	sub a,#TK_PLUS 
      000C1F 5F               [ 1]  338 	clrw x 
      000C20 97               [ 1]  339 	ld xl,a 
      000C21 1C 0C 65         [ 2]  340 	addw x,#add_char 
      000C24 F6               [ 1]  341 	ld a,(x)
      000C25 20 DD            [ 2]  342 	jra 81$
      000C27                        343 11$:
      000C27 A1 22            [ 1]  344     cp a,#TK_MOD 
      000C29 22 0A            [ 1]  345 	jrugt 12$
      000C2B A0 20            [ 1]  346 	sub a,#TK_MULT
      000C2D 5F               [ 1]  347 	clrw x 
      000C2E 97               [ 1]  348 	ld xl,a 
      000C2F 1C 0C 67         [ 2]  349 	addw x,#mul_char
      000C32 F6               [ 1]  350 	ld a,(x)
      000C33 20 CF            [ 2]  351 	jra 81$
      000C35                        352 12$:
      000C35 A0 31            [ 1]  353 	sub a,#TK_GT  
      000C37 48               [ 1]  354 	sll a 
      000C38 5F               [ 1]  355 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      000C39 97               [ 1]  356 	ld xl,a 
      000C3A 1C 0C 6A         [ 2]  357 	addw x,#relop_str 
      000C3D FE               [ 2]  358 	ldw x,(x)
      000C3E F6               [ 1]  359 	ld a,(x)
      000C3F 5C               [ 1]  360 	incw x 
      000C40 90 F7            [ 1]  361 	ld (y),a
      000C42 90 5C            [ 1]  362 	incw y 
      000C44 F6               [ 1]  363 	ld a,(x)
      000C45 26 BD            [ 1]  364 	jrne 81$
      000C47 CC 0B 5E         [ 2]  365 	jp decomp_loop 
      000C4A                        366 20$: 
      000C4A 90 7F            [ 1]  367 	clr (y)
      000C4C 1E 03            [ 2]  368 	ldw x,(STR,sp)
      000C4E 7B 01            [ 1]  369 	ld a,(BASE_SAV,sp)
      000C50 C7 00 0A         [ 1]  370 	ld base,a 
      000C53 7B 02            [ 1]  371 	ld a,(WIDTH_SAV,sp)
      000C55 C7 00 21         [ 1]  372 	ld tab_width,a
      000C58 72 F2 03         [ 2]  373 	subw y,(STR,sp) 
      000C5B 90 9F            [ 1]  374 	ld a,yl 
      000C5D                        375 	_drop VSIZE 
      000C5D 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C5F 81               [ 4]  376 	ret 
                                    377 
      000C60 40 28 29 2C 23         378 single_char: .byte '@','(',')',',','#'
      000C65 2B 2D                  379 add_char: .byte '+','-'
      000C67 2A 2F 25               380 mul_char: .byte '*','/','%'
      000C6A 0C 76 0C 78 0C 7A 0C   381 relop_str: .word gt,equal,ge,lt,le,ne 
             7D 0C 7F 0C 82
      000C76 3E 00                  382 gt: .asciz ">"
      000C78 3D 00                  383 equal: .asciz "="
      000C7A 3E 3D 00               384 ge: .asciz ">="
      000C7D 3C 00                  385 lt: .asciz "<"
      000C7F 3C 3D 00               386 le: .asciz "<="
      000C82 3C 3E 00               387 ne:  .asciz "<>"
                                    388 
                                    389 ;----------------------------------
                                    390 ; search in kword_dict name
                                    391 ; from its execution address 
                                    392 ; input:
                                    393 ;   X       	cmd_index 
                                    394 ; output:
                                    395 ;   X 			cstr*  | 0 
                                    396 ;--------------------------------
                           000001   397 	CMDX=1 
                           000003   398 	LINK=3 
                           000004   399 	VSIZE=4
      000C85                        400 cmd_name:
      000C85                        401 	_vars VSIZE 
      000C85 52 04            [ 2]    1     sub sp,#VSIZE 
      000C87 72 5F 00 0C      [ 1]  402 	clr acc16 
      000C8B 1F 01            [ 2]  403 	ldw (CMDX,sp),x  
      000C8D AE 29 18         [ 2]  404 	ldw x,#kword_dict	
      000C90 1F 03            [ 2]  405 1$:	ldw (LINK,sp),x
      000C92 E6 02            [ 1]  406 	ld a,(2,x)
      000C94 A4 0F            [ 1]  407 	and a,#15 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000C96 C7 00 0D         [ 1]  408 	ld acc8,a 
      000C99 1C 00 03         [ 2]  409 	addw x,#3
      000C9C 72 BB 00 0C      [ 2]  410 	addw x,acc16
      000CA0 FE               [ 2]  411 	ldw x,(x) ; command index  
      000CA1 13 01            [ 2]  412 	cpw x,(CMDX,sp)
      000CA3 27 0A            [ 1]  413 	jreq 2$
      000CA5 1E 03            [ 2]  414 	ldw x,(LINK,sp)
      000CA7 FE               [ 2]  415 	ldw x,(x) 
      000CA8 1D 00 02         [ 2]  416 	subw x,#2  
      000CAB 26 E3            [ 1]  417 	jrne 1$
      000CAD 20 05            [ 2]  418 	jra 9$
      000CAF 1E 03            [ 2]  419 2$: ldw x,(LINK,sp)
      000CB1 1C 00 02         [ 2]  420 	addw x,#2 	
      000CB4                        421 9$:	_drop VSIZE
      000CB4 5B 04            [ 2]    1     addw sp,#VSIZE 
      000CB6 81               [ 4]  422 	ret
                                    423 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 
                                     27     .module STM8_TBI
                                     28 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                     29     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                     30 
                           000000    31 .if SEPARATE
                                     32 	.include "inc/nucleo_8s208.inc"
                                     33 	.include "inc/stm8s208.inc"
                                     34 	.include "inc/ascii.inc"
                                     35 	.include "inc/gen_macros.inc" 
                                     36 	.include "tbi_macros.inc" 
                                     37 .endif 
                                     38 
                                     39 ;--------------------------------------
                                     40     .area DATA 
                                     41 ;--------------------------------------	
                                     42 
      000000                         43 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         44 in::    .blkb 1 ; low byte of in.w 
      000002                         45 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         46 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         47 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         48 data_ptr:  .blkw 1  ; point to DATA address
      000008                         49 data_ofs:  .blkb 1  ; index to next data item 
      000009                         50 data_len:  .blkb 1  ; length of data line 
      00000A                         51 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         52 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         53 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         54 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         55 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         56 timer:: .blkw 1 ;  milliseconds count down timer 
      000012                         57 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         58 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         59 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         60 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         61 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      000019                         62 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001B                         63 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001D                         64 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      00001E                         65 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000020                         66 flags:: .blkb 1 ; various boolean flags
      000021                         67 tab_width:: .blkb 1 ; print colon width (default 6)
      000022                         68 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002A                         69 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002B                         70 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     71 
      00002C                         72 vars:: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     73 	.area BTXT (ABS)
      00007C                         74 	.org 0x7C  
                                     75 ; keep 'free_ram' as last variable 
                                     76 ; basic code compiled here. 
      00007C                         77 rsign: .blkw 1 ; "BC" 
      00007E                         78 rsize: .blkw 1 ; code size 	 
      000080                         79 free_ram: ; from here RAM free for BASIC text 
                                     80 
                                     81 	.area CODE 
                                     82 
                                     83 ;----------------------
                                     84 ; print token id && value
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                     85 ; input:
                                     86 ;   A     token id 
                                     87 ;   X     token value 
                                     88 ;---------------------
                           000001    89 	BSAVE=1
                           000002    90 	AREG=2
                           000003    91 	XREG=3
                           000004    92 	VSIZE=4
      000CB7                         93 prt_tok:
      000CB7                         94 	_vars VSIZE 
      000CB7 52 04            [ 2]    1     sub sp,#VSIZE 
      000CB9 6B 02            [ 1]   95 	ld (AREG,sp),a 
      000CBB 1F 03            [ 2]   96 	ldw (XREG,sp),x 
      000CBD C6 00 0A         [ 1]   97 	ld a, base
      000CC0 6B 01            [ 1]   98 	ld (BSAVE,sp),a 
      000CC2 35 10 00 0A      [ 1]   99 	mov base,#16  
      000CC6 AE 0C EE         [ 2]  100 	ldw x,#token_msg
      000CC9 CD 03 1E         [ 4]  101 	call puts 
      000CCC 5F               [ 1]  102 	clrw x 
      000CCD 7B 02            [ 1]  103 	ld a,(AREG,sp)
      000CCF 97               [ 1]  104 	ld xl,a 
      000CD0 CD 12 49         [ 4]  105 	call print_int 
      000CD3 A6 20            [ 1]  106 	ld a,#SPACE
      000CD5 CD 02 C1         [ 4]  107 	call putc 
      000CD8 1E 03            [ 2]  108 	ldw x,(XREG,sp)
      000CDA CD 12 49         [ 4]  109 	call print_int 
      000CDD A6 0D            [ 1]  110 	ld a,#CR 
      000CDF CD 02 C1         [ 4]  111 	call putc 
      000CE2 7B 01            [ 1]  112 	ld a,(BSAVE,sp)
      000CE4 C7 00 0A         [ 1]  113 	ld base,a 
      000CE7 7B 02            [ 1]  114 	ld a,(AREG,sp)
      000CE9 1E 03            [ 2]  115 	ldw x,(XREG,sp)
      000CEB                        116 	_drop VSIZE 
      000CEB 5B 04            [ 2]    1     addw sp,#VSIZE 
      000CED 81               [ 4]  117 	ret 
      000CEE 74 6F 6B 65 6E 3A 20   118 token_msg: .asciz "token: "
             00
                                    119 
                                    120 
                                    121 ;---------------------
                                    122 ; display n bytes row 
                                    123 ; from memory.
                                    124 ; input:
                                    125 ;   A   bytes to print 
                                    126 ;	X   start address 
                                    127 ; output:
                                    128 ;   X   address after last shown  
                                    129 ;---------------------
                           000001   130 	CNT=1 
                           000002   131 	ADR=2 
                           000003   132 	VSIZE=3 
      000CF6                        133 show_row:
      000CF6 4D               [ 1]  134 	tnz a 
      000CF7 26 01            [ 1]  135 	jrne 1$
      000CF9 81               [ 4]  136 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      000CFA                        137 1$:	
      000CFA 89               [ 2]  138 	pushw x  
      000CFB 88               [ 1]  139 	push a 
      000CFC 35 04 00 21      [ 1]  140 	mov tab_width,#4 
      000D00 CD 12 49         [ 4]  141 	call print_int 
      000D03 A6 20            [ 1]  142 	ld a,#SPACE  
      000D05 CD 02 C1         [ 4]  143 	call putc
      000D08                        144 row_loop:
      000D08 1E 02            [ 2]  145 	ldw x,(ADR,sp)
      000D0A F6               [ 1]  146 	ld a,(x)
      000D0B 5F               [ 1]  147 	clrw x 
      000D0C 97               [ 1]  148 	ld xl,a 
      000D0D CD 12 49         [ 4]  149 	call print_int 
      000D10 1E 02            [ 2]  150 	ldw x,(ADR,sp)
      000D12 5C               [ 1]  151 	incw x 
      000D13 1F 02            [ 2]  152 	ldw (ADR,sp),x 
      000D15 0A 01            [ 1]  153 	dec (CNT,sp)
      000D17 26 EF            [ 1]  154 	jrne row_loop
      000D19                        155 	_drop VSIZE  		
      000D19 5B 03            [ 2]    1     addw sp,#VSIZE 
      000D1B 35 04 00 21      [ 1]  156 	mov tab_width,#4
      000D1F A6 0D            [ 1]  157 	ld a,#CR 
      000D21 CD 02 C1         [ 4]  158 	call putc 
      000D24 81               [ 4]  159 	ret 
                                    160 
                                    161 ;--------------------------
                                    162 ; print memory content 
                                    163 ; in hexadecimal format
                                    164 ;  input:
                                    165 ;    X    start address 
                                    166 ;    Y    count 
                                    167 ;--------------------------
                           000001   168 	BCNT=1
                           000003   169 	BASE=3
                           000004   170 	TABW=4
                           000004   171 	VSIZE=4   
      000D25                        172 hex_dump:
      000D25 88               [ 1]  173 	push a 
      000D26                        174 	_vars VSIZE
      000D26 52 04            [ 2]    1     sub sp,#VSIZE 
      000D28 C6 00 0A         [ 1]  175 	ld a,base
      000D2B 6B 03            [ 1]  176 	ld (BASE,sp),a 
      000D2D 35 10 00 0A      [ 1]  177 	mov base,#16
      000D31 C6 00 21         [ 1]  178 	ld a,tab_width 
      000D34 6B 04            [ 1]  179 	ld (TABW,sp),a
      000D36 A6 0D            [ 1]  180 	ld a,#CR 
      000D38 CD 02 C1         [ 4]  181 	call putc 
      000D3B 17 01            [ 2]  182 1$: ldw (BCNT,sp),y
      000D3D A6 10            [ 1]  183 	ld a,#16
      000D3F 90 A3 00 10      [ 2]  184 	cpw y,#16
      000D43 2A 02            [ 1]  185 	jrpl 2$
      000D45 90 9F            [ 1]  186 	ld a,yl
      000D47                        187 2$: 	
      000D47 CD 0C F6         [ 4]  188 	call show_row 
      000D4A 16 01            [ 2]  189 	ldw y,(BCNT,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000D4C 72 A2 00 10      [ 2]  190 	subw y,#16 
      000D50 90 A3 00 01      [ 2]  191 	cpw y,#1
      000D54 2A E5            [ 1]  192 	jrpl 1$
      000D56 7B 03            [ 1]  193 	ld a,(BASE,sp)
      000D58 C7 00 0A         [ 1]  194 	ld base,a
      000D5B 7B 04            [ 1]  195 	ld a,(TABW,sp)
      000D5D C7 00 21         [ 1]  196 	ld tab_width,a 
      000D60                        197 	_drop VSIZE
      000D60 5B 04            [ 2]    1     addw sp,#VSIZE 
      000D62 84               [ 1]  198 	pop a 
      000D63 81               [ 4]  199 	ret 
                                    200 
                                    201 ;-------------------------------------
                                    202 ; retrun string length
                                    203 ; input:
                                    204 ;   X         .asciz  pointer 
                                    205 ; output:
                                    206 ;   X         not affected 
                                    207 ;   A         length 
                                    208 ;-------------------------------------
      000D64                        209 strlen::
      000D64 89               [ 2]  210 	pushw x 
      000D65 4F               [ 1]  211 	clr a
      000D66 7D               [ 1]  212 1$:	tnz (x) 
      000D67 27 04            [ 1]  213 	jreq 9$ 
      000D69 4C               [ 1]  214 	inc a 
      000D6A 5C               [ 1]  215 	incw x 
      000D6B 20 F9            [ 2]  216 	jra 1$ 
      000D6D 85               [ 2]  217 9$:	popw x 
      000D6E 81               [ 4]  218 	ret 
                                    219 
                                    220 ;------------------------------------
                                    221 ; compare 2 strings
                                    222 ; input:
                                    223 ;   X 		char* first string 
                                    224 ;   Y       char* second string 
                                    225 ; output:
                                    226 ;   A 		0|1 
                                    227 ;-------------------------------------
      000D6F                        228 strcmp:
      000D6F F6               [ 1]  229 	ld a,(x)
      000D70 27 0B            [ 1]  230 	jreq 5$ 
      000D72 90 F1            [ 1]  231 	cp a,(y) 
      000D74 26 05            [ 1]  232 	jrne 4$ 
      000D76 5C               [ 1]  233 	incw x 
      000D77 90 5C            [ 1]  234 	incw y 
      000D79 20 F4            [ 2]  235 	jra strcmp 
      000D7B                        236 4$: ; not same  
      000D7B 4F               [ 1]  237 	clr a 
      000D7C 81               [ 4]  238 	ret 
      000D7D                        239 5$: ; same 
      000D7D A6 01            [ 1]  240 	ld a,#1 
      000D7F 81               [ 4]  241 	ret 
                                    242 
                                    243 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    244 ;---------------------------------------
                                    245 ;  copy src to dest 
                                    246 ; input:
                                    247 ;   X 		dest 
                                    248 ;   Y 		src 
                                    249 ; output: 
                                    250 ;   X 		dest 
                                    251 ;----------------------------------
      000D80                        252 strcpy::
      000D80 88               [ 1]  253 	push a 
      000D81 89               [ 2]  254 	pushw x 
      000D82 90 F6            [ 1]  255 1$: ld a,(y)
      000D84 27 06            [ 1]  256 	jreq 9$ 
      000D86 F7               [ 1]  257 	ld (x),a 
      000D87 5C               [ 1]  258 	incw x 
      000D88 90 5C            [ 1]  259 	incw y 
      000D8A 20 F6            [ 2]  260 	jra 1$ 
      000D8C 7F               [ 1]  261 9$:	clr (x)
      000D8D 85               [ 2]  262 	popw x 
      000D8E 84               [ 1]  263 	pop a 
      000D8F 81               [ 4]  264 	ret 
                                    265 
                                    266 ;---------------------------------------
                                    267 ; move memory block 
                                    268 ; input:
                                    269 ;   X 		destination 
                                    270 ;   Y 	    source 
                                    271 ;   acc16	bytes count 
                                    272 ; output:
                                    273 ;   none 
                                    274 ;--------------------------------------
                           000001   275 	INCR=1 ; increament high byte 
                           000002   276 	LB=2 ; increament low byte 
                           000002   277 	VSIZE=2
      000D90                        278 move::
      000D90 88               [ 1]  279 	push a 
      000D91                        280 	_vars VSIZE 
      000D91 52 02            [ 2]    1     sub sp,#VSIZE 
      000D93 0F 01            [ 1]  281 	clr (INCR,sp)
      000D95 0F 02            [ 1]  282 	clr (LB,sp)
      000D97 90 89            [ 2]  283 	pushw y 
      000D99 13 01            [ 2]  284 	cpw x,(1,sp) ; compare DEST to SRC 
      000D9B 90 85            [ 2]  285 	popw y 
      000D9D 27 31            [ 1]  286 	jreq move_exit ; x==y 
      000D9F 2B 0E            [ 1]  287 	jrmi move_down
      000DA1                        288 move_up: ; start from top address with incr=-1
      000DA1 72 BB 00 0C      [ 2]  289 	addw x,acc16
      000DA5 72 B9 00 0C      [ 2]  290 	addw y,acc16
      000DA9 03 01            [ 1]  291 	cpl (INCR,sp)
      000DAB 03 02            [ 1]  292 	cpl (LB,sp)   ; increment = -1 
      000DAD 20 05            [ 2]  293 	jra move_loop  
      000DAF                        294 move_down: ; start from bottom address with incr=1 
      000DAF 5A               [ 2]  295     decw x 
      000DB0 90 5A            [ 2]  296 	decw y
      000DB2 0C 02            [ 1]  297 	inc (LB,sp) ; incr=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000DB4                        298 move_loop:	
      000DB4 C6 00 0C         [ 1]  299     ld a, acc16 
      000DB7 CA 00 0D         [ 1]  300 	or a, acc8
      000DBA 27 14            [ 1]  301 	jreq move_exit 
      000DBC 72 FB 01         [ 2]  302 	addw x,(INCR,sp)
      000DBF 72 F9 01         [ 2]  303 	addw y,(INCR,sp) 
      000DC2 90 F6            [ 1]  304 	ld a,(y)
      000DC4 F7               [ 1]  305 	ld (x),a 
      000DC5 89               [ 2]  306 	pushw x 
      000DC6 CE 00 0C         [ 2]  307 	ldw x,acc16 
      000DC9 5A               [ 2]  308 	decw x 
      000DCA CF 00 0C         [ 2]  309 	ldw acc16,x 
      000DCD 85               [ 2]  310 	popw x 
      000DCE 20 E4            [ 2]  311 	jra move_loop
      000DD0                        312 move_exit:
      000DD0                        313 	_drop VSIZE
      000DD0 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DD2 84               [ 1]  314 	pop a 
      000DD3 81               [ 4]  315 	ret 	
                                    316 
                                    317 ;------------------------------------
                                    318 ;  set all variables to zero 
                                    319 ; input:
                                    320 ;   none 
                                    321 ; output:
                                    322 ;	none
                                    323 ;------------------------------------
      000DD4                        324 clear_vars:
      000DD4 89               [ 2]  325 	pushw x 
      000DD5 90 89            [ 2]  326 	pushw y 
      000DD7 AE 00 2C         [ 2]  327 	ldw x,#vars 
      000DDA 90 AE 00 34      [ 2]  328 	ldw y,#2*26 
      000DDE 7F               [ 1]  329 1$:	clr (x)
      000DDF 5C               [ 1]  330 	incw x 
      000DE0 90 5A            [ 2]  331 	decw y 
      000DE2 26 FA            [ 1]  332 	jrne 1$
      000DE4 90 85            [ 2]  333 	popw y 
      000DE6 85               [ 2]  334 	popw x 
      000DE7 81               [ 4]  335 	ret 
                                    336 
                                    337 ;-------------------------------------
                                    338 ; check if A is a letter 
                                    339 ; input:
                                    340 ;   A 			character to test 
                                    341 ; output:
                                    342 ;   C flag      1 true, 0 false 
                                    343 ;-------------------------------------
      000DE8                        344 is_alpha::
      000DE8 A1 41            [ 1]  345 	cp a,#'A 
      000DEA 8C               [ 1]  346 	ccf 
      000DEB 24 0B            [ 1]  347 	jrnc 9$ 
      000DED A1 5B            [ 1]  348 	cp a,#'Z+1 
      000DEF 25 07            [ 1]  349 	jrc 9$ 
      000DF1 A1 61            [ 1]  350 	cp a,#'a 
      000DF3 8C               [ 1]  351 	ccf 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000DF4 24 02            [ 1]  352 	jrnc 9$
      000DF6 A1 7B            [ 1]  353 	cp a,#'z+1
      000DF8 81               [ 4]  354 9$: ret 	
                                    355 
                                    356 ;------------------------------------
                                    357 ; check if character in {'0'..'9'}
                                    358 ; input:
                                    359 ;    A  character to test
                                    360 ; output:
                                    361 ;    Carry  0 not digit | 1 digit
                                    362 ;------------------------------------
      000DF9                        363 is_digit::
      000DF9 A1 30            [ 1]  364 	cp a,#'0
      000DFB 25 03            [ 1]  365 	jrc 1$
      000DFD A1 3A            [ 1]  366     cp a,#'9+1
      000DFF 8C               [ 1]  367 	ccf 
      000E00 8C               [ 1]  368 1$:	ccf 
      000E01 81               [ 4]  369     ret
                                    370 
                                    371 ;-------------------------------------
                                    372 ; return true if character in  A 
                                    373 ; is letter or digit.
                                    374 ; input:
                                    375 ;   A     ASCII character 
                                    376 ; output:
                                    377 ;   A     no change 
                                    378 ;   Carry    0 false| 1 true 
                                    379 ;--------------------------------------
      000E02                        380 is_alnum::
      000E02 CD 0D F9         [ 4]  381 	call is_digit
      000E05 25 03            [ 1]  382 	jrc 1$ 
      000E07 CD 0D E8         [ 4]  383 	call is_alpha
      000E0A 81               [ 4]  384 1$:	ret 
                                    385 
                                    386 
                                    387 ;-------------------------------------
                                    388 ;  program initialization entry point 
                                    389 ;-------------------------------------
                           000002   390 	MAJOR=2
                           000000   391 	MINOR=0 
      000E0B 0A 0A 54 69 6E 79 20   392 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
      000E51                        393 cold_start:
                                    394 ;set stack 
      000E51 AE 17 FF         [ 2]  395 	ldw x,#STACK_EMPTY
      000E54 94               [ 1]  396 	ldw sp,x   
                                    397 ; clear all ram 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000E55 7F               [ 1]  398 0$: clr (x)
      000E56 5A               [ 2]  399 	decw x 
      000E57 26 FC            [ 1]  400 	jrne 0$
                                    401 ; activate pull up on all inputs 
      000E59 A6 FF            [ 1]  402 	ld a,#255 
      000E5B C7 50 03         [ 1]  403 	ld PA_CR1,a 
      000E5E C7 50 08         [ 1]  404 	ld PB_CR1,a 
      000E61 C7 50 0D         [ 1]  405 	ld PC_CR1,a 
      000E64 C7 50 12         [ 1]  406 	ld PD_CR1,a 
      000E67 C7 50 17         [ 1]  407 	ld PE_CR1,a 
      000E6A C7 50 1C         [ 1]  408 	ld PF_CR1,a 
      000E6D C7 50 21         [ 1]  409 	ld PG_CR1,a 
      000E70 C7 50 2B         [ 1]  410 	ld PI_CR1,a
                                    411 ; set LD2 pin as output 
      000E73 72 1A 50 0D      [ 1]  412     bset PC_CR1,#LED2_BIT
      000E77 72 1A 50 0E      [ 1]  413     bset PC_CR2,#LED2_BIT
      000E7B 72 1A 50 0C      [ 1]  414     bset PC_DDR,#LED2_BIT
      000E7F 72 1B 50 0A      [ 1]  415 	bres PC_ODR,#LED2_BIT 
                                    416 ; disable schmitt triggers on Arduino CN4 analog inputs
      000E83 55 00 3F 54 07   [ 1]  417 	mov ADC_TDRL,0x3f
                                    418 ; disable peripherals clocks
                                    419 ;	clr CLK_PCKENR1 
                                    420 ;	clr CLK_PCKENR2
      000E88 72 5F 50 F2      [ 1]  421 	clr AWU_TBR 
      000E8C 72 14 50 CA      [ 1]  422 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    423 ; select internal clock no divisor: 16 Mhz 	
      000E90 A6 E1            [ 1]  424 	ld a,#CLK_SWR_HSI 
      000E92 5F               [ 1]  425 	clrw x  
      000E93 CD 00 76         [ 4]  426     call clock_init 
      000E96 CD 00 99         [ 4]  427 	call timer4_init
      000E99 CD 00 8C         [ 4]  428 	call timer2_init
                                    429 ; UART1 at 115200 BAUD
      000E9C CD 02 7C         [ 4]  430 	call uart1_init
                                    431 ; activate PE_4 (user button interrupt)
      000E9F 72 18 50 18      [ 1]  432     bset PE_CR2,#USR_BTN_BIT 
                                    433 ; display system information
      000EA3 AE 0E 0B         [ 2]  434 	ldw x,#software 
      000EA6 CD 03 1E         [ 4]  435 	call puts 
      000EA9 A6 02            [ 1]  436 	ld a,#MAJOR 
      000EAB C7 00 0D         [ 1]  437 	ld acc8,a 
      000EAE 5F               [ 1]  438 	clrw x 
      000EAF CF 00 0B         [ 2]  439 	ldw acc24,x
      000EB2 72 5F 00 21      [ 1]  440 	clr tab_width  
      000EB6 35 0A 00 0A      [ 1]  441 	mov base, #10 
      000EBA CD 12 59         [ 4]  442 	call prti24 
      000EBD A6 2E            [ 1]  443 	ld a,#'.
      000EBF CD 02 C1         [ 4]  444 	call putc 
      000EC2 A6 00            [ 1]  445 	ld a,#MINOR 
      000EC4 C7 00 0D         [ 1]  446 	ld acc8,a 
      000EC7 5F               [ 1]  447 	clrw x 
      000EC8 CF 00 0B         [ 2]  448 	ldw acc24,x 
      000ECB CD 12 59         [ 4]  449 	call prti24
      000ECE A6 0D            [ 1]  450 	ld a,#CR 
      000ED0 CD 02 C1         [ 4]  451 	call putc
      000ED3 9A               [ 1]  452 	rim 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000ED4 72 5C 00 15      [ 1]  453 	inc seedy+1 
      000ED8 72 5C 00 13      [ 1]  454 	inc seedx+1 
      000EDC CD 0F 74         [ 4]  455 	call clear_basic
      000EDF CD 18 00         [ 4]  456 	call ubound 
      000EE2 CD 1C 8C         [ 4]  457 	call beep_1khz  
      000EE5                        458 2$:	
      000EE5 CD 0F 56         [ 4]  459 	call warm_init
                                    460 ; check for application in flash memory 
      000EE8 CE 2A 00         [ 2]  461 	ldw x,app_sign 
      000EEB C3 1F 0E         [ 2]  462 	cpw x,SIGNATURE 
      000EEE 27 03            [ 1]  463 	jreq run_app
      000EF0 CC 11 93         [ 2]  464 	jp cmd_line
      000EF3                        465 run_app:
                                    466 ; run application in FLASH|EEPROM 
      000EF3 CE 2A 02         [ 2]  467 	ldw x,app_size  
      000EF6 89               [ 2]  468 	pushw x 
      000EF7 AE 2A 04         [ 2]  469 	ldw x,#app 
      000EFA CF 00 19         [ 2]  470 	ldw txtbgn,x
      000EFD CF 00 04         [ 2]  471 	ldw basicptr,x 
      000F00 72 FB 01         [ 2]  472 	addw x,(1,sp) ; x+size 
      000F03                        473 	_drop 2 
      000F03 5B 02            [ 2]    1     addw sp,#2 
      000F05 CF 00 1B         [ 2]  474 	ldw txtend,x 
      000F08 AE 0F 34         [ 2]  475 	ldw x,#RUNNING 
      000F0B CD 03 1E         [ 4]  476 	call puts
      000F0E CE 00 04         [ 2]  477 	ldw x,basicptr    
      000F11 35 10 00 0A      [ 1]  478 	mov base,#16 
      000F15 CD 12 49         [ 4]  479 	call print_int
      000F18 35 0A 00 0A      [ 1]  480 	mov base,#10  
      000F1C CE 00 04         [ 2]  481 	ldw x, basicptr 
      000F1F E6 02            [ 1]  482 	ld a,(2,x)
      000F21 C7 00 03         [ 1]  483 	ld count,a 
      000F24 35 03 00 01      [ 1]  484 	mov in,#3 
      000F28 72 10 00 20      [ 1]  485 	bset flags,#FRUN
      000F2C CD 18 00         [ 4]  486 	call ubound   
      000F2F CC 11 AF         [ 2]  487 	jp interpreter  
      000F32 20 FE            [ 2]  488     jra .  
                                    489 
      000F34 0A 72 75 6E 6E 69 6E   490 RUNNING: .asciz "\nrunning application at address: " 
             67 20 61 70 70 6C 69
             63 61 74 69 6F 6E 20
             61 74 20 61 64 64 72
             65 73 73 3A 20 00
                                    491 
      000F56                        492 warm_init:
      000F56 72 5F 00 20      [ 1]  493 	clr flags 
      000F5A 72 5F 00 1D      [ 1]  494 	clr loop_depth 
      000F5E 35 04 00 21      [ 1]  495 	mov tab_width,#TAB_WIDTH 
      000F62 35 0A 00 0A      [ 1]  496 	mov base,#10 
      000F66 AE 00 00         [ 2]  497 	ldw x,#0 
      000F69 CF 00 04         [ 2]  498 	ldw basicptr,x 
      000F6C CF 00 00         [ 2]  499 	ldw in.w,x 
      000F6F 72 5F 00 03      [ 1]  500 	clr count
      000F73 81               [ 4]  501 	ret 
                                    502 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                    503 
                                    504 ;---------------------------
                                    505 ; reset BASIC text variables 
                                    506 ; and clear variables 
                                    507 ;---------------------------
      000F74                        508 clear_basic:
      000F74 89               [ 2]  509 	pushw x 
      000F75 72 5F 00 03      [ 1]  510 	clr count
      000F79 72 5F 00 01      [ 1]  511 	clr in  
      000F7D AE 00 80         [ 2]  512 	ldw x,#free_ram 
      000F80 CF 00 19         [ 2]  513 	ldw txtbgn,x 
      000F83 CF 00 1B         [ 2]  514 	ldw txtend,x 
      000F86 CD 0D D4         [ 4]  515 	call clear_vars 
      000F89 85               [ 2]  516 	popw x
      000F8A 81               [ 4]  517 	ret 
                                    518 
                                    519 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    520 ;;   Tiny BASIC error messages     ;;
                                    521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F8B                        522 err_msg:
      000F8B 00 00 0F AB 0F B8 0F   523 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             C6 0F DF 0F EE
      000F97 10 04 10 1A 10 34 10   524 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             45 10 56
      000FA1 10 62 10 95 10 A5 10   525 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             B9 10 CC
                                    526 
      000FAB 4D 65 6D 6F 72 79 20   527 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      000FB8 73 79 6E 74 61 78 20   528 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      000FC6 6D 61 74 68 20 6F 70   529 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      000FDF 64 69 76 69 73 69 6F   530 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      000FEE 69 6E 76 61 6C 69 64   531 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      001004 72 75 6E 20 74 69 6D   532 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      00101A 63 6F 6D 6D 61 6E 64   533 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      001034 64 75 70 6C 69 63 61   534 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      001045 46 69 6C 65 20 6E 6F   535 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



             2E 0A 00
      001056 62 61 64 20 76 61 6C   536 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      001062 46 69 6C 65 20 69 6E   537 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      001095 4E 6F 20 64 61 74 61   538 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0010A5 4E 6F 20 70 72 6F 67   539 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0010B9 46 69 6C 65 20 73 79   540 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0010CC 42 75 66 66 65 72 20   541 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                    542 
      0010D9 0A 72 75 6E 20 74 69   543 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      0010EB 0A 63 6F 6D 70 69 6C   544 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      0010FC 6C 61 73 74 20 74 6F   545 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    546 
      00110C                        547 syntax_error::
      00110C A6 02            [ 1]  548 	ld a,#ERR_SYNTAX 
                                    549 
      00110E                        550 tb_error::
      00110E 72 0A 00 20 44   [ 2]  551 	btjt flags,#FCOMP,1$
      001113 88               [ 1]  552 	push a 
      001114 AE 10 D9         [ 2]  553 	ldw x, #rt_msg 
      001117 CD 03 1E         [ 4]  554 	call puts 
      00111A 84               [ 1]  555 	pop a 
      00111B AE 0F 8B         [ 2]  556 	ldw x, #err_msg 
      00111E 72 5F 00 0C      [ 1]  557 	clr acc16 
      001122 48               [ 1]  558 	sll a
      001123 72 59 00 0C      [ 1]  559 	rlc acc16  
      001127 C7 00 0D         [ 1]  560 	ld acc8, a 
      00112A 72 BB 00 0C      [ 2]  561 	addw x,acc16 
      00112E FE               [ 2]  562 	ldw x,(x)
      00112F CD 03 1E         [ 4]  563 	call puts
      001132 CE 00 04         [ 2]  564 	ldw x,basicptr
      001135 C6 00 01         [ 1]  565 	ld a,in 
      001138 CD 19 16         [ 4]  566 	call prt_basic_line
      00113B AE 10 FC         [ 2]  567 	ldw x,#tk_id 
      00113E CD 03 1E         [ 4]  568 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001141 C6 00 02         [ 1]  569 	ld a,in.saved 
      001144 5F               [ 1]  570 	clrw x 
      001145 97               [ 1]  571 	ld xl,a 
      001146 72 BB 00 04      [ 2]  572 	addw x,basicptr 
      00114A F6               [ 1]  573 	ld a,(x)
      00114B 5F               [ 1]  574 	clrw x 
      00114C 97               [ 1]  575 	ld xl,a 
      00114D CD 12 49         [ 4]  576 	call print_int
      001150 72 0D 00 20 37   [ 2]  577 	btjf flags,#FAUTORUN ,6$
      001155 20 35            [ 2]  578 	jra 6$
      001157                        579 1$:	
      001157 88               [ 1]  580 	push a 
      001158 AE 10 EB         [ 2]  581 	ldw x,#comp_msg
      00115B CD 03 1E         [ 4]  582 	call puts 
      00115E 84               [ 1]  583 	pop a 
      00115F AE 0F 8B         [ 2]  584 	ldw x, #err_msg 
      001162 72 5F 00 0C      [ 1]  585 	clr acc16 
      001166 48               [ 1]  586 	sll a
      001167 72 59 00 0C      [ 1]  587 	rlc acc16  
      00116B C7 00 0D         [ 1]  588 	ld acc8, a 
      00116E 72 BB 00 0C      [ 2]  589 	addw x,acc16 
      001172 FE               [ 2]  590 	ldw x,(x)
      001173 CD 03 1E         [ 4]  591 	call puts
      001176 AE 16 90         [ 2]  592 	ldw x,#tib
      001179 CD 03 1E         [ 4]  593 	call puts 
      00117C A6 0D            [ 1]  594 	ld a,#CR 
      00117E CD 02 C1         [ 4]  595 	call putc
      001181 CE 00 00         [ 2]  596 	ldw x,in.w
      001184 CD 03 8B         [ 4]  597 	call spaces
      001187 A6 5E            [ 1]  598 	ld a,#'^
      001189 CD 02 C1         [ 4]  599 	call putc 
      00118C AE 17 FF         [ 2]  600 6$: ldw x,#STACK_EMPTY 
      00118F 94               [ 1]  601     ldw sp,x
      001190                        602 warm_start:
      001190 CD 0F 56         [ 4]  603 	call warm_init
                                    604 ;----------------------------
                                    605 ;   BASIC interpreter
                                    606 ;----------------------------
      001193                        607 cmd_line: ; user interface 
      001193 A6 0D            [ 1]  608 	ld a,#CR 
      001195 CD 02 C1         [ 4]  609 	call putc 
      001198 A6 3E            [ 1]  610 	ld a,#'> 
      00119A CD 02 C1         [ 4]  611 	call putc
      00119D CD 04 23         [ 4]  612 	call readln
      0011A0 72 5D 00 03      [ 1]  613 	tnz count 
      0011A4 27 ED            [ 1]  614 	jreq cmd_line
      0011A6 CD 09 FC         [ 4]  615 	call compile
                                    616 ; if text begin with a line number
                                    617 ; the compiler set count to zero    
                                    618 ; so code is not interpreted
      0011A9 72 5D 00 03      [ 1]  619 	tnz count 
      0011AD 27 E4            [ 1]  620 	jreq cmd_line
                                    621 
                                    622 ; if direct command 
                                    623 ; it's ready to interpret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                    624 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    625 ;; This is the interpreter loop
                                    626 ;; for each BASIC code line. 
                                    627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0011AF                        628 interpreter: 
      0011AF C6 00 01         [ 1]  629 	ld a,in 
      0011B2 C1 00 03         [ 1]  630 	cp a,count 
      0011B5 2B 1D            [ 1]  631 	jrmi interp_loop
      0011B7                        632 next_line:
      0011B7 72 01 00 20 D7   [ 2]  633 	btjf flags, #FRUN, cmd_line
      0011BC CE 00 04         [ 2]  634 	ldw x,basicptr
      0011BF 72 BB 00 00      [ 2]  635 	addw x,in.w 
      0011C3 C3 00 1B         [ 2]  636 	cpw x,txtend 
      0011C6 2A C8            [ 1]  637 	jrpl warm_start
      0011C8 CF 00 04         [ 2]  638 	ldw basicptr,x ; start of next line  
      0011CB E6 02            [ 1]  639 	ld a,(2,x)
      0011CD C7 00 03         [ 1]  640 	ld count,a 
      0011D0 35 03 00 01      [ 1]  641 	mov in,#3 ; skip first 3 bytes of line 
      0011D4                        642 interp_loop: 
      0011D4 CD 11 FB         [ 4]  643 	call next_token
      0011D7 A1 00            [ 1]  644 	cp a,#TK_NONE 
      0011D9 27 DC            [ 1]  645 	jreq next_line 
      0011DB A1 80            [ 1]  646 	cp a,#TK_CMD
      0011DD 26 03            [ 1]  647 	jrne 1$
      0011DF FD               [ 4]  648 	call (x) 
      0011E0 20 F2            [ 2]  649 	jra interp_loop 
      0011E2                        650 1$:	 
      0011E2 A1 85            [ 1]  651 	cp a,#TK_VAR
      0011E4 26 05            [ 1]  652 	jrne 2$
      0011E6 CD 18 1B         [ 4]  653 	call let_var  
      0011E9 20 E9            [ 2]  654 	jra interp_loop 
      0011EB                        655 2$:	
      0011EB A1 06            [ 1]  656 	cp a,#TK_ARRAY 
      0011ED 26 05            [ 1]  657 	jrne 3$
      0011EF CD 18 18         [ 4]  658 	call let_array 
      0011F2 20 E0            [ 2]  659 	jra interp_loop
      0011F4                        660 3$:	
      0011F4 A1 0B            [ 1]  661 	cp a,#TK_COLON 
      0011F6 27 DC            [ 1]  662 	jreq interp_loop 
      0011F8 CC 11 0C         [ 2]  663 	jp syntax_error 
                                    664 
                                    665 		
                                    666 ;--------------------------
                                    667 ; extract next token from
                                    668 ; token list 
                                    669 ; basicptr -> base address 
                                    670 ; in  -> offset in list array 
                                    671 ; output:
                                    672 ;   A 		token attribute
                                    673 ;   X 		token value if there is one
                                    674 ;----------------------------------------
      0011FB                        675 next_token::
      0011FB 5F               [ 1]  676 	clrw x 
      0011FC C6 00 01         [ 1]  677 	ld a,in 
                                    678 ; don't replace sub by "cp a,count" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                    679 ; if end of line must return with A=0   	
      0011FF C0 00 03         [ 1]  680 	sub a,count 
      001202 27 44            [ 1]  681 	jreq 9$ ; end of line 
      001204                        682 0$: 
      001204 55 00 01 00 02   [ 1]  683 	mov in.saved,in ; in case "_unget_token" needed 
      001209 90 CE 00 04      [ 2]  684 	ldw y,basicptr 
      00120D 72 B9 00 00      [ 2]  685 	addw y,in.w 
      001211 90 F6            [ 1]  686 	ld a,(y)
      001213 90 5C            [ 1]  687 	incw y   
      001215 4D               [ 1]  688 	tnz a 
      001216 2B 1B            [ 1]  689 	jrmi 4$
      001218 A1 06            [ 1]  690 	cp a,#TK_ARRAY
      00121A 2A 24            [ 1]  691 	jrpl 7$  ; no attribute for these
      00121C                        692 1$: ; 
      00121C A1 03            [ 1]  693 	cp a,#TK_CHAR
      00121E 26 06            [ 1]  694 	jrne 2$
      001220 41               [ 1]  695 	exg a,xl
      001221 90 F6            [ 1]  696 	ld a,(y)
      001223 41               [ 1]  697 	exg a,xl  
      001224 20 18            [ 2]  698 	jra 6$ 
      001226 A1 02            [ 1]  699 2$:	cp a,#TK_QSTR 
      001228 26 16            [ 1]  700 	jrne 7$
      00122A 93               [ 1]  701 	ldw x,y 
                                    702 ; move pointer after string 
      00122B 90 7D            [ 1]  703 3$:	tnz (y)
      00122D 27 0F            [ 1]  704 	jreq 6$
      00122F 90 5C            [ 1]  705 	incw y 
      001231 20 F8            [ 2]  706 	jra 3$
      001233                        707 4$: 
      001233 93               [ 1]  708 	ldw x,y 
      001234 FE               [ 2]  709 	ldw x,(x)
      001235 A1 84            [ 1]  710 	cp a,#TK_INTGR
      001237 2A 03            [ 1]  711 	jrpl 5$
      001239 DE 29 20         [ 2]  712 	ldw x,(code_addr,x) 
      00123C 90 5C            [ 1]  713 5$:	incw y 
      00123E 90 5C            [ 1]  714 6$:	incw y 
      001240 72 B2 00 04      [ 2]  715 7$:	subw y,basicptr 
      001244 90 CF 00 00      [ 2]  716 	ldw in.w,y 
      001248                        717 9$: 
      001248 81               [ 4]  718 	ret	
                                    719 
                                    720 ;-----------------------------------
                                    721 ; print a 16 bit integer 
                                    722 ; using variable 'base' as conversion
                                    723 ; format.
                                    724 ; input:
                                    725 ;   X       integer to print 
                                    726 ;   'base'    conversion base 
                                    727 ; output:
                                    728 ;   none 
                                    729 ;-----------------------------------
      001249                        730 print_int:
      001249 72 5F 00 0B      [ 1]  731 	clr acc24 
      00124D CF 00 0C         [ 2]  732 	ldw acc16,x 
      001250 72 0F 00 0C 04   [ 2]  733 	btjf acc16,#7,prti24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001255 72 53 00 0B      [ 1]  734 	cpl acc24 
                                    735 	
                                    736 ;------------------------------------
                                    737 ; print integer in acc24 
                                    738 ; input:
                                    739 ;	acc24 		integer to print 
                                    740 ;	'base' 		numerical base for conversion 
                                    741 ;   'tab_width' field width 
                                    742 ;  output:
                                    743 ;    A          string length
                                    744 ;------------------------------------
      001259                        745 prti24:
      001259 CD 12 65         [ 4]  746     call itoa  ; conversion entier en  .asciz
      00125C CD 0A 9B         [ 4]  747 	call right_align  
      00125F 88               [ 1]  748 	push a 
      001260 CD 03 1E         [ 4]  749 	call puts
      001263 84               [ 1]  750 	pop a 
      001264 81               [ 4]  751     ret	
                                    752 
                                    753 ;------------------------------------
                                    754 ; convert integer in acc24 to string
                                    755 ; input:
                                    756 ;   'base'	conversion base 
                                    757 ;	acc24	integer to convert
                                    758 ; output:
                                    759 ;   X  		pointer to first char of string
                                    760 ;   A       string length
                                    761 ;------------------------------------
                           000001   762 	SIGN=1  ; integer sign 
                           000002   763 	LEN=2 
                           000003   764 	PSTR=3
                           000004   765 	VSIZE=4 ;locals size
      001265                        766 itoa::
      001265                        767 	_vars VSIZE
      001265 52 04            [ 2]    1     sub sp,#VSIZE 
      001267 0F 02            [ 1]  768 	clr (LEN,sp) ; string length  
      001269 0F 01            [ 1]  769 	clr (SIGN,sp)    ; sign
      00126B C6 00 0A         [ 1]  770 	ld a,base 
      00126E A1 0A            [ 1]  771 	cp a,#10
      001270 26 0A            [ 1]  772 	jrne 1$
                                    773 	; base 10 string display with negative sign if bit 23==1
      001272 72 0F 00 0B 05   [ 2]  774 	btjf acc24,#7,1$
      001277 03 01            [ 1]  775 	cpl (SIGN,sp)
      001279 CD 13 32         [ 4]  776 	call neg_acc24
      00127C                        777 1$:
                                    778 ; initialize string pointer 
      00127C AE 16 90         [ 2]  779 	ldw x,#tib 
      00127F 1C 00 50         [ 2]  780 	addw x,#TIB_SIZE
      001282 5A               [ 2]  781 	decw x 
      001283 7F               [ 1]  782 	clr (x)
      001284 5A               [ 2]  783 	decw x 
      001285 A6 20            [ 1]  784 	ld a,#32
      001287 F7               [ 1]  785 	ld (x),a
      001288 0C 02            [ 1]  786 	inc (LEN,sp)
      00128A                        787 itoa_loop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      00128A C6 00 0A         [ 1]  788     ld a,base
      00128D 1F 03            [ 2]  789 	ldw (PSTR,sp),x 
      00128F CD 12 D0         [ 4]  790     call divu24_8 ; acc24/A 
      001292 1E 03            [ 2]  791 	ldw x,(PSTR,sp)
      001294 AB 30            [ 1]  792     add a,#'0  ; remainder of division
      001296 A1 3A            [ 1]  793     cp a,#'9+1
      001298 2B 02            [ 1]  794     jrmi 2$
      00129A AB 07            [ 1]  795     add a,#7 
      00129C                        796 2$:	
      00129C 5A               [ 2]  797 	decw x
      00129D F7               [ 1]  798     ld (x),a
      00129E 0C 02            [ 1]  799 	inc (LEN,sp)
                                    800 	; if acc24==0 conversion done
      0012A0 C6 00 0B         [ 1]  801 	ld a,acc24
      0012A3 CA 00 0C         [ 1]  802 	or a,acc16
      0012A6 CA 00 0D         [ 1]  803 	or a,acc8
      0012A9 26 DF            [ 1]  804     jrne itoa_loop
                                    805 	;conversion done, next add '$' or '-' as required
      0012AB C6 00 0A         [ 1]  806 	ld a,base 
      0012AE A1 10            [ 1]  807 	cp a,#16
      0012B0 27 08            [ 1]  808 	jreq 8$
      0012B2 7B 01            [ 1]  809 	ld a,(SIGN,sp)
      0012B4 27 15            [ 1]  810     jreq 10$
      0012B6 A6 2D            [ 1]  811     ld a,#'-
      0012B8 20 0D            [ 2]  812 	jra 9$ 
                                    813 ; don't print more than 4 digits
                                    814 ; in hexadecimal to avoid '-' sign 
                                    815 ; extend display 	
      0012BA 7B 02            [ 1]  816 8$: ld a,(LEN,sp) 
      0012BC A1 06            [ 1]  817 	cp a,#6 
      0012BE 2B 05            [ 1]  818 	jrmi 81$
      0012C0 5C               [ 1]  819 	incw x
      0012C1 0A 02            [ 1]  820 	dec (LEN,sp)
      0012C3 20 F5            [ 2]  821 	jra 8$
      0012C5                        822 81$:	
      0012C5 A6 24            [ 1]  823 	ld a,#'$ 
      0012C7 5A               [ 2]  824 9$: decw x
      0012C8 F7               [ 1]  825     ld (x),a
      0012C9 0C 02            [ 1]  826 	inc (LEN,sp)
      0012CB                        827 10$:
      0012CB 7B 02            [ 1]  828 	ld a,(LEN,sp)
      0012CD                        829 	_drop VSIZE
      0012CD 5B 04            [ 2]    1     addw sp,#VSIZE 
      0012CF 81               [ 4]  830 	ret
                                    831 
                                    832 ;-------------------------------------
                                    833 ; divide uint24_t by uint8_t
                                    834 ; used to convert uint24_t to string
                                    835 ; input:
                                    836 ;	acc24	dividend
                                    837 ;   A 		divisor
                                    838 ; output:
                                    839 ;   acc24	quotient
                                    840 ;   A		remainder
                                    841 ;------------------------------------- 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                    842 ; offset  on sp of arguments and locals
                           000001   843 	U8   = 1   ; divisor on stack
                           000001   844 	VSIZE =1
      0012D0                        845 divu24_8:
      0012D0 89               [ 2]  846 	pushw x ; save x
      0012D1 88               [ 1]  847 	push a 
                                    848 	; ld dividend UU:MM bytes in X
      0012D2 C6 00 0B         [ 1]  849 	ld a, acc24
      0012D5 95               [ 1]  850 	ld xh,a
      0012D6 C6 00 0C         [ 1]  851 	ld a,acc24+1
      0012D9 97               [ 1]  852 	ld xl,a
      0012DA 7B 01            [ 1]  853 	ld a,(U8,SP) ; divisor
      0012DC 62               [ 2]  854 	div x,a ; UU:MM/U8
      0012DD 88               [ 1]  855 	push a  ;save remainder
      0012DE 9E               [ 1]  856 	ld a,xh
      0012DF C7 00 0B         [ 1]  857 	ld acc24,a
      0012E2 9F               [ 1]  858 	ld a,xl
      0012E3 C7 00 0C         [ 1]  859 	ld acc24+1,a
      0012E6 84               [ 1]  860 	pop a
      0012E7 95               [ 1]  861 	ld xh,a
      0012E8 C6 00 0D         [ 1]  862 	ld a,acc24+2
      0012EB 97               [ 1]  863 	ld xl,a
      0012EC 7B 01            [ 1]  864 	ld a,(U8,sp) ; divisor
      0012EE 62               [ 2]  865 	div x,a  ; R:LL/U8
      0012EF 6B 01            [ 1]  866 	ld (U8,sp),a ; save remainder
      0012F1 9F               [ 1]  867 	ld a,xl
      0012F2 C7 00 0D         [ 1]  868 	ld acc24+2,a
      0012F5 84               [ 1]  869 	pop a
      0012F6 85               [ 2]  870 	popw x
      0012F7 81               [ 4]  871 	ret
                                    872 
                                    873 ;--------------------------------------
                                    874 ; unsigned multiply uint24_t by uint8_t
                                    875 ; use to convert numerical string to uint24_t
                                    876 ; input:
                                    877 ;	acc24	uint24_t 
                                    878 ;   A		uint8_t
                                    879 ; output:
                                    880 ;   acc24   A*acc24
                                    881 ;-------------------------------------
                                    882 ; local variables offset  on sp
                           000003   883 	U8   = 3   ; A pushed on stack
                           000002   884 	OVFL = 2  ; multiplicaton overflow low byte
                           000001   885 	OVFH = 1  ; multiplication overflow high byte
                           000003   886 	VSIZE = 3
      0012F8                        887 mulu24_8:
      0012F8 89               [ 2]  888 	pushw x    ; save X
                                    889 	; local variables
      0012F9 88               [ 1]  890 	push a     ; U8
      0012FA 5F               [ 1]  891 	clrw x     ; initialize overflow to 0
      0012FB 89               [ 2]  892 	pushw x    ; multiplication overflow
                                    893 ; multiply low byte.
      0012FC C6 00 0D         [ 1]  894 	ld a,acc24+2
      0012FF 97               [ 1]  895 	ld xl,a
      001300 7B 03            [ 1]  896 	ld a,(U8,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      001302 42               [ 4]  897 	mul x,a
      001303 9F               [ 1]  898 	ld a,xl
      001304 C7 00 0D         [ 1]  899 	ld acc24+2,a
      001307 9E               [ 1]  900 	ld a, xh
      001308 6B 02            [ 1]  901 	ld (OVFL,sp),a
                                    902 ; multipy middle byte
      00130A C6 00 0C         [ 1]  903 	ld a,acc24+1
      00130D 97               [ 1]  904 	ld xl,a
      00130E 7B 03            [ 1]  905 	ld a, (U8,sp)
      001310 42               [ 4]  906 	mul x,a
                                    907 ; add overflow to this partial product
      001311 72 FB 01         [ 2]  908 	addw x,(OVFH,sp)
      001314 9F               [ 1]  909 	ld a,xl
      001315 C7 00 0C         [ 1]  910 	ld acc24+1,a
      001318 4F               [ 1]  911 	clr a
      001319 A9 00            [ 1]  912 	adc a,#0
      00131B 6B 01            [ 1]  913 	ld (OVFH,sp),a
      00131D 9E               [ 1]  914 	ld a,xh
      00131E 6B 02            [ 1]  915 	ld (OVFL,sp),a
                                    916 ; multiply most signficant byte	
      001320 C6 00 0B         [ 1]  917 	ld a, acc24
      001323 97               [ 1]  918 	ld xl, a
      001324 7B 03            [ 1]  919 	ld a, (U8,sp)
      001326 42               [ 4]  920 	mul x,a
      001327 72 FB 01         [ 2]  921 	addw x, (OVFH,sp)
      00132A 9F               [ 1]  922 	ld a, xl
      00132B C7 00 0B         [ 1]  923 	ld acc24,a
      00132E 5B 03            [ 2]  924     addw sp,#VSIZE
      001330 85               [ 2]  925 	popw x
      001331 81               [ 4]  926 	ret
                                    927 
                                    928 ;------------------------------------
                                    929 ;  two's complement acc24
                                    930 ;  input:
                                    931 ;		acc24 variable
                                    932 ;  output:
                                    933 ;		acc24 variable
                                    934 ;-------------------------------------
      001332                        935 neg_acc24:
      001332 72 53 00 0D      [ 1]  936 	cpl acc24+2
      001336 72 53 00 0C      [ 1]  937 	cpl acc24+1
      00133A 72 53 00 0B      [ 1]  938 	cpl acc24
      00133E A6 01            [ 1]  939 	ld a,#1
      001340 CB 00 0D         [ 1]  940 	add a,acc24+2
      001343 C7 00 0D         [ 1]  941 	ld acc24+2,a
      001346 4F               [ 1]  942 	clr a
      001347 C9 00 0C         [ 1]  943 	adc a,acc24+1
      00134A C7 00 0C         [ 1]  944 	ld acc24+1,a 
      00134D 4F               [ 1]  945 	clr a 
      00134E C9 00 0B         [ 1]  946 	adc a,acc24 
      001351 C7 00 0B         [ 1]  947 	ld acc24,a 
      001354 81               [ 4]  948 	ret
                                    949 
                                    950 
                                    951 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                    952 
                                    953 ;------------------------------------
                                    954 ; convert alpha to uppercase
                                    955 ; input:
                                    956 ;    a  character to convert
                                    957 ; output:
                                    958 ;    a  uppercase character
                                    959 ;------------------------------------
      001355                        960 to_upper::
      001355 A1 61            [ 1]  961 	cp a,#'a
      001357 2A 01            [ 1]  962 	jrpl 1$
      001359 81               [ 4]  963 0$:	ret
      00135A A1 7A            [ 1]  964 1$: cp a,#'z	
      00135C 22 FB            [ 1]  965 	jrugt 0$
      00135E A0 20            [ 1]  966 	sub a,#32
      001360 81               [ 4]  967 	ret
                                    968 	
                                    969 ;------------------------------------
                                    970 ; convert pad content in integer
                                    971 ; input:
                                    972 ;    x		.asciz to convert
                                    973 ; output:
                                    974 ;    acc24      int24_t
                                    975 ;------------------------------------
                                    976 	; local variables
                           000001   977 	SIGN=1 ; 1 byte, 
                           000002   978 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   979 	TEMP=3 ; 1 byte, temporary storage
                           000003   980 	VSIZE=3 ; 3 bytes reserved for local storage
      001361                        981 atoi24::
      001361 89               [ 2]  982 	pushw x 
      001362                        983 	_vars VSIZE
      001362 52 03            [ 2]    1     sub sp,#VSIZE 
                                    984 	; acc24=0 
      001364 72 5F 00 0B      [ 1]  985 	clr acc24    
      001368 72 5F 00 0C      [ 1]  986 	clr acc16
      00136C 72 5F 00 0D      [ 1]  987 	clr acc8 
      001370 0F 01            [ 1]  988 	clr (SIGN,sp)
      001372 A6 0A            [ 1]  989 	ld a,#10
      001374 6B 02            [ 1]  990 	ld (BASE,sp),a ; default base decimal
      001376 F6               [ 1]  991 	ld a,(x)
      001377 27 47            [ 1]  992 	jreq 9$  ; completed if 0
      001379 A1 2D            [ 1]  993 	cp a,#'-
      00137B 26 04            [ 1]  994 	jrne 1$
      00137D 03 01            [ 1]  995 	cpl (SIGN,sp)
      00137F 20 08            [ 2]  996 	jra 2$
      001381 A1 24            [ 1]  997 1$: cp a,#'$
      001383 26 06            [ 1]  998 	jrne 3$
      001385 A6 10            [ 1]  999 	ld a,#16
      001387 6B 02            [ 1] 1000 	ld (BASE,sp),a
      001389 5C               [ 1] 1001 2$:	incw x
      00138A F6               [ 1] 1002 	ld a,(x)
      00138B                       1003 3$:	
      00138B A1 61            [ 1] 1004 	cp a,#'a
      00138D 2B 02            [ 1] 1005 	jrmi 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00138F A0 20            [ 1] 1006 	sub a,#32
      001391 A1 30            [ 1] 1007 4$:	cp a,#'0
      001393 2B 2B            [ 1] 1008 	jrmi 9$
      001395 A0 30            [ 1] 1009 	sub a,#'0
      001397 A1 0A            [ 1] 1010 	cp a,#10
      001399 2B 06            [ 1] 1011 	jrmi 5$
      00139B A0 07            [ 1] 1012 	sub a,#7
      00139D 11 02            [ 1] 1013 	cp a,(BASE,sp)
      00139F 2A 1F            [ 1] 1014 	jrpl 9$
      0013A1 6B 03            [ 1] 1015 5$:	ld (TEMP,sp),a
      0013A3 7B 02            [ 1] 1016 	ld a,(BASE,sp)
      0013A5 CD 12 F8         [ 4] 1017 	call mulu24_8
      0013A8 7B 03            [ 1] 1018 	ld a,(TEMP,sp)
      0013AA CB 00 0D         [ 1] 1019 	add a,acc24+2
      0013AD C7 00 0D         [ 1] 1020 	ld acc24+2,a
      0013B0 4F               [ 1] 1021 	clr a
      0013B1 C9 00 0C         [ 1] 1022 	adc a,acc24+1
      0013B4 C7 00 0C         [ 1] 1023 	ld acc24+1,a
      0013B7 4F               [ 1] 1024 	clr a
      0013B8 C9 00 0B         [ 1] 1025 	adc a,acc24
      0013BB C7 00 0B         [ 1] 1026 	ld acc24,a
      0013BE 20 C9            [ 2] 1027 	jra 2$
      0013C0 0D 01            [ 1] 1028 9$:	tnz (SIGN,sp)
      0013C2 27 03            [ 1] 1029     jreq atoi_exit
      0013C4 CD 13 32         [ 4] 1030     call neg_acc24
      0013C7                       1031 atoi_exit: 
      0013C7                       1032 	_drop VSIZE
      0013C7 5B 03            [ 2]    1     addw sp,#VSIZE 
      0013C9 85               [ 2] 1033 	popw x ; restore x
      0013CA 81               [ 4] 1034 	ret
                                   1035 
                                   1036 
                                   1037 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1038 ;;   TINY BASIC  operators,
                                   1039 ;;   commands and functions 
                                   1040 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1041 
                                   1042 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1043 ;;  Arithmetic operators
                                   1044 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1045 
                                   1046 ;debug support
                           000001  1047 DEBUG_PRT=1
                           000001  1048 .if DEBUG_PRT 
                           000001  1049 	REGA=1
                           000002  1050 	SAVEB=2
                           000003  1051 	REGX=3
                           000005  1052 	REGY=5
                           000007  1053 	ACC24=7
                           000009  1054 	VSIZE=9 
      0013CB                       1055 printxy:
      0013CB                       1056 	_vars VSIZE 
      0013CB 52 09            [ 2]    1     sub sp,#VSIZE 
      0013CD 6B 01            [ 1] 1057 	ld (REGA,sp),a 
      0013CF C6 00 0A         [ 1] 1058 	ld a,base 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0013D2 6B 02            [ 1] 1059 	ld (SAVEB,sp),a
      0013D4 1F 03            [ 2] 1060 	ldw (REGX,sp),x
      0013D6 17 05            [ 2] 1061 	ldw (REGY,sp),y
      0013D8 CE 00 0B         [ 2] 1062 	ldw x,acc24 
      0013DB C6 00 0D         [ 1] 1063 	ld a,acc8 
      0013DE 1F 07            [ 2] 1064 	ldw (ACC24,sp),x 
      0013E0 6B 09            [ 1] 1065 	ld (ACC24+2,sp),a 
      0013E2 35 10 00 0A      [ 1] 1066 	mov base,#16 
      0013E6 5F               [ 1] 1067 	clrw x 
      0013E7 7B 01            [ 1] 1068 	ld a,(REGA,sp)
      0013E9 97               [ 1] 1069 	ld xl,a 
      0013EA CD 12 49         [ 4] 1070 	call print_int
      0013ED A6 20            [ 1] 1071 	ld a,#SPACE 
      0013EF CD 02 C1         [ 4] 1072 	call putc  
      0013F2 1E 03            [ 2] 1073 	ldw x,(REGX,sp)
      0013F4 CD 12 49         [ 4] 1074 	call print_int 
      0013F7 A6 20            [ 1] 1075 	ld a,#SPACE 
      0013F9 CD 02 C1         [ 4] 1076 	call putc  
      0013FC 1E 05            [ 2] 1077 	ldw x,(REGY,sp)
      0013FE CD 12 49         [ 4] 1078 	call print_int 
      001401 A6 0D            [ 1] 1079 	ld a,#CR 
      001403 CD 02 C1         [ 4] 1080 	call putc 
      001406 7B 09            [ 1] 1081 	ld a,(ACC24+2,sp)
      001408 1E 07            [ 2] 1082 	ldw x,(ACC24,sp)
      00140A CF 00 0B         [ 2] 1083 	ldw acc24,x 
      00140D C7 00 0D         [ 1] 1084 	ld acc8,a
      001410 7B 02            [ 1] 1085 	ld a,(SAVEB,sp)
      001412 C7 00 0A         [ 1] 1086 	ld base,a 
      001415 7B 01            [ 1] 1087 	ld a,(REGA,sp)
      001417 1E 03            [ 2] 1088 	ldw x,(REGX,sp)
      001419 16 05            [ 2] 1089 	ldw y,(REGY,sp)
      00141B                       1090 	_drop VSIZE 
      00141B 5B 09            [ 2]    1     addw sp,#VSIZE 
      00141D 81               [ 4] 1091 	ret 
                                   1092 .endif 
                                   1093 
                                   1094 
                                   1095 ;--------------------------------------
                                   1096 ;  multiply 2 uint16_t return uint32_t
                                   1097 ;  input:
                                   1098 ;     x       uint16_t 
                                   1099 ;     y       uint16_t 
                                   1100 ;  output:
                                   1101 ;     x       product bits 15..0
                                   1102 ;     y       product bits 31..16 
                                   1103 ;---------------------------------------
                           000001  1104 		U1=1  ; uint16_t 
                           000003  1105 		DBL=3 ; uint32_t
                           000006  1106 		VSIZE=6
      00141E                       1107 umstar:
      00141E                       1108 	_vars VSIZE 
      00141E 52 06            [ 2]    1     sub sp,#VSIZE 
      001420 1F 01            [ 2] 1109 	ldw (U1,sp),x 
                                   1110 ;initialize bits 31..16 of 
                                   1111 ;product to zero 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001422 0F 03            [ 1] 1112 	clr (DBL,sp)
      001424 0F 04            [ 1] 1113 	clr (DBL+1,sp)
                                   1114 ; produc U1L*U2L 
      001426 90 9F            [ 1] 1115 	ld a,yl 
      001428 42               [ 4] 1116 	mul x,a 
      001429 1F 05            [ 2] 1117 	ldw (DBL+2,sp),x
                                   1118 ; product U1H*U2L 
      00142B 7B 01            [ 1] 1119 	ld a,(U1,sp) ; xh 
      00142D 93               [ 1] 1120 	ldw x,y
      00142E 42               [ 4] 1121 	mul x,a 
      00142F 4F               [ 1] 1122 	clr a 
      001430 72 FB 04         [ 2] 1123 	addw x,(DBL+1,sp) 
      001433 4F               [ 1] 1124 	clr a 
      001434 19 03            [ 1] 1125 	adc a,(DBL,sp) 
      001436 6B 03            [ 1] 1126 	ld (DBL,sp),a ; bits 23..17 
      001438 1F 04            [ 2] 1127 	ldw (DBL+1,sp),x ; bits 15..0 
                                   1128 ; product U1L*U2H
      00143A 90 5E            [ 1] 1129 	swapw y 
      00143C 93               [ 1] 1130 	ldw x,y
      00143D 7B 02            [ 1] 1131 	ld a,(U1+1,sp)
      00143F 42               [ 4] 1132 	mul x,a
      001440 72 FB 04         [ 2] 1133 	addw x,(DBL+1,sp)
      001443 4F               [ 1] 1134 	clr a 
      001444 19 03            [ 1] 1135 	adc a,(DBL,sp)
      001446 6B 03            [ 1] 1136 	ld (DBL,sp),a 
      001448 1F 04            [ 2] 1137 	ldw (DBL+1,sp),x 
                                   1138 ; product U1H*U2H 	
      00144A 7B 01            [ 1] 1139 	ld a,(U1,sp)
      00144C 93               [ 1] 1140 	ldw x,y  
      00144D 42               [ 4] 1141 	mul x,a 
      00144E 72 FB 03         [ 2] 1142 	addw x,(DBL,sp)
      001451 90 93            [ 1] 1143 	ldw y,x 
      001453 1E 05            [ 2] 1144 	ldw x,(DBL+2,sp)
      001455                       1145 	_drop VSIZE 
      001455 5B 06            [ 2]    1     addw sp,#VSIZE 
      001457 81               [ 4] 1146 	ret
                                   1147 
                                   1148 
                                   1149 ;-------------------------------------
                                   1150 ; multiply 2 integers
                                   1151 ; input:
                                   1152 ;  	x       n1 
                                   1153 ;   y 		n2 
                                   1154 ; output:
                                   1155 ;	X        N1*N2 bits 15..0
                                   1156 ;   Y        N1*N2 bits 31..16 
                                   1157 ;-------------------------------------
                           000001  1158 	SIGN=1
                           000001  1159 	VSIZE=1
      001458                       1160 multiply:
      001458                       1161 	_vars VSIZE 
      001458 52 01            [ 2]    1     sub sp,#VSIZE 
      00145A 0F 01            [ 1] 1162 	clr (SIGN,sp)
      00145C 9E               [ 1] 1163 	ld a,xh 
      00145D A4 80            [ 1] 1164 	and a,#0x80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      00145F 2A 03            [ 1] 1165 	jrpl 1$
      001461 03 01            [ 1] 1166 	cpl (SIGN,sp)
      001463 50               [ 2] 1167 	negw x 
      001464                       1168 1$:	
      001464 90 9E            [ 1] 1169 	ld a,yh
      001466 A4 80            [ 1] 1170 	and a,#0x80  
      001468 2A 04            [ 1] 1171 	jrpl 2$ 
      00146A 03 01            [ 1] 1172 	cpl (SIGN,sp)
      00146C 90 50            [ 2] 1173 	negw y 
      00146E                       1174 2$:	
      00146E CD 14 1E         [ 4] 1175 	call umstar
      001471 7B 01            [ 1] 1176 	ld a,(SIGN,sp)
      001473 27 03            [ 1] 1177 	jreq 3$
      001475 CD 14 A5         [ 4] 1178 	call dneg 
      001478                       1179 3$:	
      001478                       1180 	_drop VSIZE 
      001478 5B 01            [ 2]    1     addw sp,#VSIZE 
      00147A 81               [ 4] 1181 	ret
                                   1182 
                                   1183 ;--------------------------------------
                                   1184 ; divide uint32_t/uint16_t
                                   1185 ; return:  quotient and remainder 
                                   1186 ; quotient expected to be uint16_t 
                                   1187 ; input:
                                   1188 ;   DBLDIVDND    on stack 
                                   1189 ;   X            divisor 
                                   1190 ; output:
                                   1191 ;   X            quotient 
                                   1192 ;   Y            remainder 
                                   1193 ;---------------------------------------
                           000003  1194 	VSIZE=3
      00147B                       1195 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      00147B                       1196 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   1197 	; local variables 
                           000001  1198 	DIVISOR=1 
                           000003  1199 	CNTR=3 
      00147B                       1200 udiv32_16:
      00147B                       1201 	_vars VSIZE 
      00147B 52 03            [ 2]    1     sub sp,#VSIZE 
      00147D 1F 01            [ 2] 1202 	ldw (DIVISOR,sp),x	; save divisor 
      00147F 1E 08            [ 2] 1203 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      001481 16 06            [ 2] 1204 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      001483 90 5D            [ 2] 1205 	tnzw y
      001485 26 06            [ 1] 1206 	jrne long_division 
      001487 16 01            [ 2] 1207 	ldw y,(DIVISOR,sp)
      001489 65               [ 2] 1208 	divw x,y
      00148A                       1209 	_drop VSIZE 
      00148A 5B 03            [ 2]    1     addw sp,#VSIZE 
      00148C 81               [ 4] 1210 	ret
      00148D                       1211 long_division:
      00148D 51               [ 1] 1212 	exgw x,y ; hi in x, lo in y 
      00148E A6 11            [ 1] 1213 	ld a,#17 
      001490 6B 03            [ 1] 1214 	ld (CNTR,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001492                       1215 1$:
      001492 13 01            [ 2] 1216 	cpw x,(DIVISOR,sp)
      001494 2B 03            [ 1] 1217 	jrmi 2$
      001496 72 F0 01         [ 2] 1218 	subw x,(DIVISOR,sp)
      001499 8C               [ 1] 1219 2$:	ccf 
      00149A 90 59            [ 2] 1220 	rlcw y 
      00149C 59               [ 2] 1221 	rlcw x 
      00149D 0A 03            [ 1] 1222 	dec (CNTR,sp)
      00149F 26 F1            [ 1] 1223 	jrne 1$
      0014A1 51               [ 1] 1224 	exgw x,y 
      0014A2                       1225 	_drop VSIZE 
      0014A2 5B 03            [ 2]    1     addw sp,#VSIZE 
      0014A4 81               [ 4] 1226 	ret
                                   1227 
                                   1228 ;-----------------------------
                                   1229 ; negate double int.
                                   1230 ; input:
                                   1231 ;   x     bits 15..0
                                   1232 ;   y     bits 31..16
                                   1233 ; output: 
                                   1234 ;   x     bits 15..0
                                   1235 ;   y     bits 31..16
                                   1236 ;-----------------------------
      0014A5                       1237 dneg:
      0014A5 53               [ 2] 1238 	cplw x 
      0014A6 90 53            [ 2] 1239 	cplw y 
      0014A8 1C 00 01         [ 2] 1240 	addw x,#1 
      0014AB 24 02            [ 1] 1241 	jrnc 1$
      0014AD 90 5C            [ 1] 1242 	incw y 
      0014AF 81               [ 4] 1243 1$: ret 
                                   1244 
                                   1245 
                                   1246 ;--------------------------------
                                   1247 ; sign extend single to double
                                   1248 ; input:
                                   1249 ;   x    int16_t
                                   1250 ; output:
                                   1251 ;   x    int32_t bits 15..0
                                   1252 ;   y    int32_t bits 31..16
                                   1253 ;--------------------------------
      0014B0                       1254 dbl_sign_extend:
      0014B0 90 5F            [ 1] 1255 	clrw y
      0014B2 9E               [ 1] 1256 	ld a,xh 
      0014B3 A4 80            [ 1] 1257 	and a,#0x80 
      0014B5 27 02            [ 1] 1258 	jreq 1$
      0014B7 90 53            [ 2] 1259 	cplw y
      0014B9 81               [ 4] 1260 1$: ret 	
                                   1261 
                                   1262 
                                   1263 ;----------------------------------
                                   1264 ;  euclidian divide dbl/n1 
                                   1265 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   1266 ; input:
                                   1267 ;    dbl    int32_t on stack 
                                   1268 ;    x 		n1   int16_t  disivor  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                   1269 ; output:
                                   1270 ;    X      dbl/x  int16_t 
                                   1271 ;    Y      remainder int16_t 
                                   1272 ;----------------------------------
                           000008  1273 	VSIZE=8
      0014BA                       1274 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      0014BA                       1275 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      0014BA                       1276 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   1277 	; local variables
                           000001  1278 	DBLHI=1
                           000003  1279 	DBLLO=3 
                           000005  1280 	SDIVSR=5 ; sign divisor
                           000006  1281 	SQUOT=6 ; sign dividend 
                           000007  1282 	DIVISR=7 ; divisor 
      0014BA                       1283 div32_16:
      0014BA                       1284 	_vars VSIZE 
      0014BA 52 08            [ 2]    1     sub sp,#VSIZE 
      0014BC 0F 05            [ 1] 1285 	clr (SDIVSR,sp)
      0014BE 0F 06            [ 1] 1286 	clr (SQUOT,sp)
                                   1287 ; copy arguments 
      0014C0 16 0B            [ 2] 1288 	ldw y,(DIVDNDHI,sp)
      0014C2 17 01            [ 2] 1289 	ldw (DBLHI,sp),y
      0014C4 16 0D            [ 2] 1290 	ldw y,(DIVDNDLO,sp)
      0014C6 17 03            [ 2] 1291 	ldw (DBLLO,sp),y 
                                   1292 ; check for 0 divisor
      0014C8 5D               [ 2] 1293 	tnzw x 
      0014C9 26 05            [ 1] 1294     jrne 0$
      0014CB A6 04            [ 1] 1295 	ld a,#ERR_DIV0 
      0014CD CC 11 0E         [ 2] 1296 	jp tb_error 
                                   1297 ; check divisor sign 	
      0014D0 9E               [ 1] 1298 0$:	ld a,xh 
      0014D1 A4 80            [ 1] 1299 	and a,#0x80 
      0014D3 27 05            [ 1] 1300 	jreq 1$
      0014D5 03 05            [ 1] 1301 	cpl (SDIVSR,sp)
      0014D7 03 06            [ 1] 1302 	cpl (SQUOT,sp)
      0014D9 50               [ 2] 1303 	negw x
      0014DA 1F 07            [ 2] 1304 1$:	ldw (DIVISR,sp),x
                                   1305 ; check dividend sign 	 
      0014DC 7B 01            [ 1] 1306  	ld a,(DBLHI,sp) 
      0014DE A4 80            [ 1] 1307 	and a,#0x80 
      0014E0 27 0D            [ 1] 1308 	jreq 2$ 
      0014E2 03 06            [ 1] 1309 	cpl (SQUOT,sp)
      0014E4 1E 03            [ 2] 1310 	ldw x,(DBLLO,sp)
      0014E6 16 01            [ 2] 1311 	ldw y,(DBLHI,sp)
      0014E8 CD 14 A5         [ 4] 1312 	call dneg 
      0014EB 1F 03            [ 2] 1313 	ldw (DBLLO,sp),x 
      0014ED 17 01            [ 2] 1314 	ldw (DBLHI,sp),y 
      0014EF 1E 07            [ 2] 1315 2$:	ldw x,(DIVISR,sp)
      0014F1 CD 14 7B         [ 4] 1316 	call udiv32_16
      0014F4 90 5D            [ 2] 1317 	tnzw y 
      0014F6 27 11            [ 1] 1318 	jreq 3$ 
                                   1319 ; x=quotient 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                   1320 ; y=remainder 
                                   1321 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      0014F8 7B 06            [ 1] 1322 	ld a,(SQUOT,sp)
      0014FA 18 05            [ 1] 1323 	xor a,(SDIVSR,sp)
      0014FC 27 0B            [ 1] 1324 	jreq 3$
      0014FE 5C               [ 1] 1325 	incw x 
      0014FF 90 CF 00 0C      [ 2] 1326 	ldw acc16,y 
      001503 16 07            [ 2] 1327 	ldw y,(DIVISR,sp)
      001505 72 B2 00 0C      [ 2] 1328 	subw y,acc16
                                   1329 ; sign quotient
      001509 7B 06            [ 1] 1330 3$:	ld a,(SQUOT,sp)
      00150B 27 01            [ 1] 1331 	jreq 4$
      00150D 50               [ 2] 1332 	negw x 
      00150E                       1333 4$:	
      00150E                       1334 	_drop VSIZE 
      00150E 5B 08            [ 2]    1     addw sp,#VSIZE 
      001510 81               [ 4] 1335 	ret 
                                   1336 
                                   1337 
                                   1338 
                                   1339 ;----------------------------------
                                   1340 ; division x/y 
                                   1341 ; input:
                                   1342 ;    X       dividend
                                   1343 ;    Y       divisor 
                                   1344 ; output:
                                   1345 ;    X       quotient
                                   1346 ;    Y       remainder 
                                   1347 ;-----------------------------------
                           000004  1348 	VSIZE=4 
                                   1349 	; local variables 
                           000001  1350 	DBLHI=1
                           000003  1351 	DBLLO=3
      001511                       1352 divide: 
      001511                       1353 	_vars VSIZE 
      001511 52 04            [ 2]    1     sub sp,#VSIZE 
      001513 90 CF 00 0C      [ 2] 1354 	ldw acc16,y
      001517 CD 14 B0         [ 4] 1355 	call dbl_sign_extend
      00151A 1F 03            [ 2] 1356 	ldw (DBLLO,sp),x 
      00151C 17 01            [ 2] 1357 	ldw (DBLHI,sp),y 
      00151E CE 00 0C         [ 2] 1358 	ldw x,acc16 
      001521 CD 14 BA         [ 4] 1359 	call div32_16 
      001524                       1360 	_drop VSIZE 
      001524 5B 04            [ 2]    1     addw sp,#VSIZE 
      001526 81               [ 4] 1361 	ret
                                   1362 
                                   1363 
                                   1364 ;----------------------------------
                                   1365 ;  remainder resulting from euclidian 
                                   1366 ;  division of x/y 
                                   1367 ; input:
                                   1368 ;   x   	dividend int16_t 
                                   1369 ;   y 		divisor int16_t
                                   1370 ; output:
                                   1371 ;   X       n1%n2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                   1372 ;----------------------------------
      001527                       1373 modulo:
      001527 CD 15 11         [ 4] 1374 	call divide
      00152A 93               [ 1] 1375 	ldw x,y 
      00152B 81               [ 4] 1376 	ret 
                                   1377 
                                   1378 ;----------------------------------
                                   1379 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   1380 ; return expr1*expr2/expr3 
                                   1381 ; product result is int32_t and 
                                   1382 ; divisiont is int32_t/int16_t
                                   1383 ;----------------------------------
                           000004  1384 	DBL_SIZE=4 
      00152C                       1385 muldiv:
      00152C CD 15 A2         [ 4] 1386 	call func_args 
      00152F A1 03            [ 1] 1387 	cp a,#3 
      001531 27 03            [ 1] 1388 	jreq 1$
      001533 CC 11 0C         [ 2] 1389 	jp syntax_error
      001536                       1390 1$: 
      001536 1E 05            [ 2] 1391 	ldw x,(5,sp) ; expr1
      001538 16 03            [ 2] 1392 	ldw y,(3,sp) ; expr2
      00153A CD 14 58         [ 4] 1393 	call multiply 
      00153D 1F 05            [ 2] 1394 	ldw (5,sp),x  ;int32_t 15..0
      00153F 17 03            [ 2] 1395 	ldw (3,sp),y  ;int32_t 31..16
      001541 85               [ 2] 1396 	popw x        ; expr3 
      001542 CD 14 BA         [ 4] 1397 	call div32_16 ; int32_t/expr3 
      001545                       1398 	_drop DBL_SIZE
      001545 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      001547 81               [ 4] 1399 	ret 
                                   1400 
                                   1401 
                                   1402 ;---------------------------------
                                   1403 ; dictionary search 
                                   1404 ; input:
                                   1405 ;	X 		dictionary entry point, name field  
                                   1406 ;   y		.asciz name to search 
                                   1407 ; output:
                                   1408 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   1409 ;  X		cmd_index
                                   1410 ;---------------------------------
                           000001  1411 	NLEN=1 ; cmd length 
                           000002  1412 	XSAVE=2
                           000004  1413 	YSAVE=4
                           000005  1414 	VSIZE=5 
      001548                       1415 search_dict::
      001548                       1416 	_vars VSIZE 
      001548 52 05            [ 2]    1     sub sp,#VSIZE 
                                   1417 
      00154A 17 04            [ 2] 1418 	ldw (YSAVE,sp),y 
      00154C                       1419 search_next:
      00154C 1F 02            [ 2] 1420 	ldw (XSAVE,sp),x 
                                   1421 ; get name length in dictionary	
      00154E F6               [ 1] 1422 	ld a,(x)
      00154F A4 0F            [ 1] 1423 	and a,#0xf 
      001551 6B 01            [ 1] 1424 	ld (NLEN,sp),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      001553 16 04            [ 2] 1425 	ldw y,(YSAVE,sp) ; name pointer 
      001555 5C               [ 1] 1426 	incw x 
      001556                       1427 cp_loop:
      001556 90 F6            [ 1] 1428 	ld a,(y)
      001558 27 1B            [ 1] 1429 	jreq str_match 
      00155A 0D 01            [ 1] 1430 	tnz (NLEN,sp)
      00155C 27 0A            [ 1] 1431 	jreq no_match  
      00155E F1               [ 1] 1432 	cp a,(x)
      00155F 26 07            [ 1] 1433 	jrne no_match 
      001561 90 5C            [ 1] 1434 	incw y 
      001563 5C               [ 1] 1435 	incw x
      001564 0A 01            [ 1] 1436 	dec (NLEN,sp)
      001566 20 EE            [ 2] 1437 	jra cp_loop 
      001568                       1438 no_match:
      001568 1E 02            [ 2] 1439 	ldw x,(XSAVE,sp) 
      00156A 1D 00 02         [ 2] 1440 	subw x,#2 ; move X to link field
      00156D 4B 00            [ 1] 1441 	push #TK_NONE 
      00156F FE               [ 2] 1442 	ldw x,(x) ; next word link 
      001570 84               [ 1] 1443 	pop a ; TK_NONE 
      001571 27 1F            [ 1] 1444 	jreq search_exit  ; not found  
                                   1445 ;try next 
      001573 20 D7            [ 2] 1446 	jra search_next
      001575                       1447 str_match:
      001575 1E 02            [ 2] 1448 	ldw x,(XSAVE,sp)
      001577 F6               [ 1] 1449 	ld a,(X)
      001578 6B 01            [ 1] 1450 	ld (NLEN,sp),a ; needed to test keyword type  
      00157A A4 0F            [ 1] 1451 	and a,#0xf 
                                   1452 ; move x to procedure address field 	
      00157C 4C               [ 1] 1453 	inc a 
      00157D C7 00 0D         [ 1] 1454 	ld acc8,a 
      001580 72 5F 00 0C      [ 1] 1455 	clr acc16 
      001584 72 BB 00 0C      [ 2] 1456 	addw x,acc16 
      001588 FE               [ 2] 1457 	ldw x,(x) ; routine index  
                                   1458 ;determine keyword type bits 7:6 
      001589 7B 01            [ 1] 1459 	ld a,(NLEN,sp)
      00158B 4E               [ 1] 1460 	swap a 
      00158C A4 0C            [ 1] 1461 	and a,#0xc
      00158E 44               [ 1] 1462 	srl a
      00158F 44               [ 1] 1463 	srl a 
      001590 AB 80            [ 1] 1464 	add a,#128
      001592                       1465 search_exit: 
      001592                       1466 	_drop VSIZE 	 
      001592 5B 05            [ 2]    1     addw sp,#VSIZE 
      001594 81               [ 4] 1467 	ret 
                                   1468 
                                   1469 ;---------------------
                                   1470 ; check if next token
                                   1471 ;  is of expected type 
                                   1472 ; input:
                                   1473 ;   A 		 expected token attribute
                                   1474 ;  ouput:
                                   1475 ;   none     if fail call syntax_error 
                                   1476 ;--------------------
      001595                       1477 expect:
      001595 88               [ 1] 1478 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      001596 CD 11 FB         [ 4] 1479 	call next_token 
      001599 11 01            [ 1] 1480 	cp a,(1,sp)
      00159B 27 03            [ 1] 1481 	jreq 1$
      00159D CC 11 0C         [ 2] 1482 	jp syntax_error
      0015A0 84               [ 1] 1483 1$: pop a 
      0015A1 81               [ 4] 1484 	ret 
                                   1485 
                                   1486 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1487 ; parse arguments list 
                                   1488 ; between ()
                                   1489 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015A2                       1490 func_args:
      0015A2 A6 07            [ 1] 1491 	ld a,#TK_LPAREN 
      0015A4 CD 15 95         [ 4] 1492 	call expect 
                                   1493 ; expected to continue in arg_list 
                                   1494 ; caller must check for TK_RPAREN 
                                   1495 
                                   1496 ;-------------------------------
                                   1497 ; parse embedded BASIC routines 
                                   1498 ; arguments list.
                                   1499 ; arg_list::=  rel[','rel]*
                                   1500 ; all arguments are of integer type
                                   1501 ; and pushed on stack 
                                   1502 ; input:
                                   1503 ;   none
                                   1504 ; output:
                                   1505 ;   stack{n}   arguments pushed on stack
                                   1506 ;   A 	number of arguments pushed on stack  
                                   1507 ;--------------------------------
      0015A7                       1508 arg_list:
      0015A7 4B 00            [ 1] 1509 	push #0  
      0015A9 CD 16 EF         [ 4] 1510 1$: call relation
      0015AC A1 00            [ 1] 1511 	cp a,#TK_NONE 
      0015AE 27 20            [ 1] 1512 	jreq 5$
      0015B0 A1 84            [ 1] 1513 	cp a,#TK_INTGR
      0015B2 26 13            [ 1] 1514 	jrne 4$
      0015B4                       1515 3$: 
                                   1516 ; swap return address with argument
      0015B4 84               [ 1] 1517 	pop a ; arg_count
      0015B5 90 85            [ 2] 1518 	popw y ; return address 
      0015B7 89               [ 2] 1519 	pushw x ; new argument 
      0015B8 90 89            [ 2] 1520 	pushw y 
      0015BA 4C               [ 1] 1521     inc a
      0015BB 88               [ 1] 1522 	push a 
      0015BC CD 11 FB         [ 4] 1523 	call next_token 
      0015BF A1 09            [ 1] 1524 	cp a,#TK_COMMA 
      0015C1 27 E6            [ 1] 1525 	jreq 1$ 
      0015C3 A1 00            [ 1] 1526 	cp a,#TK_NONE 
      0015C5 27 09            [ 1] 1527 	jreq 5$ 
      0015C7 A1 08            [ 1] 1528 4$:	cp a,#TK_RPAREN 
      0015C9 27 05            [ 1] 1529 	jreq 5$
      0015CB                       1530 	_unget_token 
      0015CB 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0015D0 84               [ 1] 1531 5$:	pop a  
      0015D1 81               [ 4] 1532 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                   1533 
                                   1534 ;--------------------------------
                                   1535 ;   BASIC commnands 
                                   1536 ;--------------------------------
                                   1537 
                                   1538 ;--------------------------------
                                   1539 ;  arithmetic and relational 
                                   1540 ;  routines
                                   1541 ;  operators precedence
                                   1542 ;  highest to lowest
                                   1543 ;  operators on same row have 
                                   1544 ;  same precedence and are executed
                                   1545 ;  from left to right.
                                   1546 ;	'*','/','%'
                                   1547 ;   '-','+'
                                   1548 ;   '=','>','<','>=','<=','<>','><'
                                   1549 ;   '<>' and '><' are equivalent for not equal.
                                   1550 ;--------------------------------
                                   1551 
                                   1552 ;---------------------
                                   1553 ; return array element
                                   1554 ; address from @(expr)
                                   1555 ; input:
                                   1556 ;   A 		TK_ARRAY
                                   1557 ; output:
                                   1558 ;   A 		TK_INTGR
                                   1559 ;	X 		element address 
                                   1560 ;----------------------
      0015D2                       1561 get_array_element:
      0015D2 CD 15 A2         [ 4] 1562 	call func_args 
      0015D5 A1 01            [ 1] 1563 	cp a,#1
      0015D7 27 03            [ 1] 1564 	jreq 1$
      0015D9 CC 11 0C         [ 2] 1565 	jp syntax_error
      0015DC 85               [ 2] 1566 1$: popw x 
                                   1567 	; check for bounds 
      0015DD C3 00 1E         [ 2] 1568 	cpw x,array_size 
      0015E0 23 05            [ 2] 1569 	jrule 3$
                                   1570 ; bounds {1..array_size}	
      0015E2 A6 0A            [ 1] 1571 2$: ld a,#ERR_BAD_VALUE 
      0015E4 CC 11 0E         [ 2] 1572 	jp tb_error 
      0015E7 5D               [ 2] 1573 3$: tnzw  x
      0015E8 27 F8            [ 1] 1574 	jreq 2$ 
      0015EA 58               [ 2] 1575 	sllw x 
      0015EB 89               [ 2] 1576 	pushw x 
      0015EC AE 16 90         [ 2] 1577 	ldw x,#tib
      0015EF 72 F0 01         [ 2] 1578 	subw x,(1,sp)
      0015F2                       1579 	_drop 2   
      0015F2 5B 02            [ 2]    1     addw sp,#2 
      0015F4 A6 84            [ 1] 1580 	ld a,#TK_INTGR
      0015F6 81               [ 4] 1581 	ret 
                                   1582 
                                   1583 
                                   1584 ;***********************************
                                   1585 ;   expression parse,execute 
                                   1586 ;***********************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                   1587 ;-----------------------------------
                                   1588 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1589 ;			 integer | function |
                                   1590 ;			 '('relation')' 
                                   1591 ; output:
                                   1592 ;   A    token attribute 
                                   1593 ;   X 	 integer
                                   1594 ; ---------------------------------
                           000001  1595 	NEG=1
                           000001  1596 	VSIZE=1
      0015F7                       1597 factor:
      0015F7                       1598 	_vars VSIZE 
      0015F7 52 01            [ 2]    1     sub sp,#VSIZE 
      0015F9 CD 11 FB         [ 4] 1599 	call next_token
      0015FC A1 02            [ 1] 1600 	cp a,#CMD_END  
      0015FE 25 3D            [ 1] 1601 	jrult 16$
      001600 6B 01            [ 1] 1602 1$:	ld (NEG,sp),a 
      001602 A4 30            [ 1] 1603 	and a,#TK_GRP_MASK
      001604 A1 10            [ 1] 1604 	cp a,#TK_GRP_ADD 
      001606 27 04            [ 1] 1605 	jreq 2$
      001608 7B 01            [ 1] 1606 	ld a,(NEG,sp)
      00160A 20 03            [ 2] 1607 	jra 4$  
      00160C                       1608 2$:	
      00160C CD 11 FB         [ 4] 1609 	call next_token 
      00160F                       1610 4$:	
      00160F A1 81            [ 1] 1611 	cp a,#TK_IFUNC 
      001611 26 03            [ 1] 1612 	jrne 5$ 
      001613 FD               [ 4] 1613 	call (x) 
      001614 20 32            [ 2] 1614 	jra 18$ 
      001616                       1615 5$:
      001616 A1 84            [ 1] 1616 	cp a,#TK_INTGR
      001618 26 02            [ 1] 1617 	jrne 6$
      00161A 20 2C            [ 2] 1618 	jra 18$
      00161C                       1619 6$:
      00161C A1 06            [ 1] 1620 	cp a,#TK_ARRAY
      00161E 26 06            [ 1] 1621 	jrne 10$
      001620 CD 15 D2         [ 4] 1622 	call get_array_element
      001623 FE               [ 2] 1623 	ldw x,(x)
      001624 20 22            [ 2] 1624 	jra 18$ 
      001626                       1625 10$:
      001626 A1 85            [ 1] 1626 	cp a,#TK_VAR 
      001628 26 03            [ 1] 1627 	jrne 12$
      00162A FE               [ 2] 1628 	ldw x,(x)
      00162B 20 1B            [ 2] 1629 	jra 18$
      00162D                       1630 12$:			
      00162D A1 07            [ 1] 1631 	cp a,#TK_LPAREN
      00162F 26 0C            [ 1] 1632 	jrne 16$
      001631 CD 16 EF         [ 4] 1633 	call relation
      001634 89               [ 2] 1634 	pushw x 
      001635 A6 08            [ 1] 1635 	ld a,#TK_RPAREN 
      001637 CD 15 95         [ 4] 1636 	call expect
      00163A 85               [ 2] 1637 	popw x 
      00163B 20 0B            [ 2] 1638 	jra 18$	
      00163D                       1639 16$:
      00163D 4D               [ 1] 1640 	tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00163E 27 11            [ 1] 1641 	jreq 20$ 
      001640                       1642 	_unget_token
      001640 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001645 4F               [ 1] 1643 	clr a 
      001646 20 09            [ 2] 1644 	jra 20$ 
      001648                       1645 18$: 
      001648 A6 11            [ 1] 1646 	ld a,#TK_MINUS 
      00164A 11 01            [ 1] 1647 	cp a,(NEG,sp)
      00164C 26 01            [ 1] 1648 	jrne 19$
      00164E 50               [ 2] 1649 	negw x
      00164F                       1650 19$:
      00164F A6 84            [ 1] 1651 	ld a,#TK_INTGR
      001651                       1652 20$:
      001651                       1653 	_drop VSIZE
      001651 5B 01            [ 2]    1     addw sp,#VSIZE 
      001653 81               [ 4] 1654 	ret
                                   1655 
                                   1656 ;-----------------------------------
                                   1657 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1658 ; output:
                                   1659 ;   A    	token attribute 
                                   1660 ;	X		integer
                                   1661 ;-----------------------------------
                           000001  1662 	N1=1   ; int16_t
                           000003  1663 	MULOP=3
                           000003  1664 	VSIZE=3
      001654                       1665 term:
      001654                       1666 	_vars VSIZE
      001654 52 03            [ 2]    1     sub sp,#VSIZE 
      001656 CD 15 F7         [ 4] 1667 	call factor
      001659 4D               [ 1] 1668 	tnz a 
      00165A 27 47            [ 1] 1669 	jreq term_exit 
      00165C                       1670 term01:	 ; check for  operator 
      00165C 1F 01            [ 2] 1671 	ldw (N1,sp),x  ; save first factor 
      00165E CD 11 FB         [ 4] 1672 	call next_token
      001661 6B 03            [ 1] 1673 	ld (MULOP,sp),a
      001663 A1 02            [ 1] 1674 	cp a,#CMD_END
      001665 25 2F            [ 1] 1675 	jrult 8$
      001667 A4 30            [ 1] 1676 	and a,#TK_GRP_MASK
      001669 A1 20            [ 1] 1677 	cp a,#TK_GRP_MULT
      00166B 27 02            [ 1] 1678 	jreq 1$
      00166D 20 27            [ 2] 1679 	jra 8$
      00166F                       1680 1$:	; got *|/|%
      00166F CD 15 F7         [ 4] 1681 	call factor
      001672 A1 84            [ 1] 1682 	cp a,#TK_INTGR
      001674 27 03            [ 1] 1683 	jreq 2$
      001676 CC 11 0C         [ 2] 1684 	jp syntax_error
      001679 90 93            [ 1] 1685 2$:	ldw y,x 
      00167B 1E 01            [ 2] 1686 	ldw x,(N1,sp)
      00167D 7B 03            [ 1] 1687 	ld a,(MULOP,sp) 
      00167F A1 20            [ 1] 1688 	cp a,#TK_MULT 
      001681 26 05            [ 1] 1689 	jrne 3$
      001683 CD 14 58         [ 4] 1690 	call multiply 
      001686 20 D4            [ 2] 1691 	jra term01
      001688 A1 21            [ 1] 1692 3$: cp a,#TK_DIV 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      00168A 26 05            [ 1] 1693 	jrne 4$ 
      00168C CD 15 11         [ 4] 1694 	call divide 
      00168F 20 CB            [ 2] 1695 	jra term01 
      001691 CD 15 27         [ 4] 1696 4$: call modulo
      001694 20 C6            [ 2] 1697 	jra term01 
      001696 7B 03            [ 1] 1698 8$: ld a,(MULOP,sp)
      001698 27 05            [ 1] 1699 	jreq 9$ 
      00169A                       1700 	_unget_token
      00169A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00169F 1E 01            [ 2] 1701 9$: ldw x,(N1,sp)
      0016A1 A6 84            [ 1] 1702 	ld a,#TK_INTGR 	
      0016A3                       1703 term_exit:
      0016A3                       1704 	_drop VSIZE 
      0016A3 5B 03            [ 2]    1     addw sp,#VSIZE 
      0016A5 81               [ 4] 1705 	ret 
                                   1706 
                                   1707 ;-------------------------------
                                   1708 ;  expr ::= term [['+'|'-'] term]*
                                   1709 ;  result range {-32768..32767}
                                   1710 ;  output:
                                   1711 ;   A    token attribute 
                                   1712 ;   X	 integer   
                                   1713 ;-------------------------------
                           000001  1714 	N1=1
                           000003  1715 	N2=3 
                           000005  1716 	OP=5 
                           000005  1717 	VSIZE=5 
      0016A6                       1718 expression:
      0016A6                       1719 	_vars VSIZE 
      0016A6 52 05            [ 2]    1     sub sp,#VSIZE 
      0016A8 CD 16 54         [ 4] 1720 	call term
      0016AB 4D               [ 1] 1721 	tnz a 
      0016AC 27 3E            [ 1] 1722 	jreq expr_exit 
      0016AE 1F 01            [ 2] 1723 1$:	ldw (N1,sp),x 
      0016B0 CD 11 FB         [ 4] 1724 	call next_token
      0016B3 6B 05            [ 1] 1725 	ld (OP,sp),a 
      0016B5 A1 02            [ 1] 1726 	cp a,#CMD_END 
      0016B7 25 26            [ 1] 1727 	jrult 8$ 
      0016B9 A4 30            [ 1] 1728 	and a,#TK_GRP_MASK
      0016BB A1 10            [ 1] 1729 	cp a,#TK_GRP_ADD 
      0016BD 27 02            [ 1] 1730 	jreq 2$ 
      0016BF 20 1E            [ 2] 1731 	jra 8$
      0016C1                       1732 2$: 
      0016C1 CD 16 54         [ 4] 1733 	call term
      0016C4 A1 84            [ 1] 1734 	cp a,#TK_INTGR
      0016C6 27 03            [ 1] 1735 	jreq 3$
      0016C8 CC 11 0C         [ 2] 1736 	jp syntax_error
      0016CB 1F 03            [ 2] 1737 3$:	ldw (N2,sp),x 
      0016CD 1E 01            [ 2] 1738 	ldw x,(N1,sp)
      0016CF 7B 05            [ 1] 1739 	ld a,(OP,sp)
      0016D1 A1 10            [ 1] 1740 	cp a,#TK_PLUS 
      0016D3 26 05            [ 1] 1741 	jrne 4$
      0016D5 72 FB 03         [ 2] 1742 	addw x,(N2,sp)
      0016D8 20 D4            [ 2] 1743 	jra 1$ 
      0016DA 72 F0 03         [ 2] 1744 4$:	subw x,(N2,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0016DD 20 CF            [ 2] 1745 	jra 1$
      0016DF 7B 05            [ 1] 1746 8$: ld a,(OP,sp)
      0016E1 27 05            [ 1] 1747 	jreq 9$ 
      0016E3                       1748 	_unget_token	
      0016E3 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0016E8 1E 01            [ 2] 1749 9$: ldw x,(N1,sp)
      0016EA A6 84            [ 1] 1750 	ld a,#TK_INTGR	
      0016EC                       1751 expr_exit:
      0016EC                       1752 	_drop VSIZE 
      0016EC 5B 05            [ 2]    1     addw sp,#VSIZE 
      0016EE 81               [ 4] 1753 	ret 
                                   1754 
                                   1755 ;---------------------------------------------
                                   1756 ; rel ::= expr rel_op expr
                                   1757 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1758 ;  relation return  integer , zero is false 
                                   1759 ;  output:
                                   1760 ;    A 		token attribute  
                                   1761 ;	 X		integer 
                                   1762 ;---------------------------------------------
                           000001  1763 	N1=1
                           000003  1764 	RELOP=3
                           000003  1765 	VSIZE=3 
      0016EF                       1766 relation: 
      0016EF                       1767 	_vars VSIZE
      0016EF 52 03            [ 2]    1     sub sp,#VSIZE 
      0016F1 CD 16 A6         [ 4] 1768 	call expression
      0016F4 4D               [ 1] 1769 	tnz a 
      0016F5 27 4D            [ 1] 1770 	jreq rel_exit
      0016F7 1F 01            [ 2] 1771 	ldw (N1,sp),x 
                                   1772 ; expect rel_op or leave 
      0016F9 CD 11 FB         [ 4] 1773 	call next_token 
      0016FC 6B 03            [ 1] 1774 	ld (RELOP,sp),a 
      0016FE A4 30            [ 1] 1775 	and a,#TK_GRP_MASK
      001700 A1 30            [ 1] 1776 	cp a,#TK_GRP_RELOP 
      001702 26 33            [ 1] 1777 	jrne 8$
      001704                       1778 2$:	; expect another expression
      001704 CD 16 A6         [ 4] 1779 	call expression
      001707 A1 84            [ 1] 1780 	cp a,#TK_INTGR
      001709 27 03            [ 1] 1781 	jreq 3$
      00170B CC 11 0C         [ 2] 1782 	jp syntax_error 
      00170E CF 00 0C         [ 2] 1783 3$:	ldw acc16,x 
      001711 1E 01            [ 2] 1784 	ldw x,(N1,sp) 
      001713 72 B0 00 0C      [ 2] 1785 	subw x,acc16
      001717 26 06            [ 1] 1786 	jrne 4$
      001719 35 02 00 0D      [ 1] 1787 	mov acc8,#2 ; n1==n2
      00171D 20 0C            [ 2] 1788 	jra 6$ 
      00171F                       1789 4$: 
      00171F 2C 06            [ 1] 1790 	jrsgt 5$  
      001721 35 04 00 0D      [ 1] 1791 	mov acc8,#4 ; n1<2 
      001725 20 04            [ 2] 1792 	jra 6$
      001727                       1793 5$:
      001727 35 01 00 0D      [ 1] 1794 	mov acc8,#1 ; n1>n2 
      00172B                       1795 6$:
      00172B 5F               [ 1] 1796 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      00172C C6 00 0D         [ 1] 1797 	ld a, acc8  
      00172F 14 03            [ 1] 1798 	and a,(RELOP,sp)
      001731 4D               [ 1] 1799 	tnz a 
      001732 27 0E            [ 1] 1800 	jreq 10$
      001734 5C               [ 1] 1801 	incw x 
      001735 20 0B            [ 2] 1802 	jra 10$  	
      001737 7B 03            [ 1] 1803 8$: ld a,(RELOP,sp)
      001739 27 05            [ 1] 1804 	jreq 9$
      00173B                       1805 	_unget_token
      00173B 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001740                       1806 9$: 
      001740 1E 01            [ 2] 1807 	ldw x,(N1,sp)
      001742                       1808 10$:
      001742 A6 84            [ 1] 1809 	ld a,#TK_INTGR
      001744                       1810 rel_exit:
      001744                       1811 	_drop VSIZE
      001744 5B 03            [ 2]    1     addw sp,#VSIZE 
      001746 81               [ 4] 1812 	ret 
                                   1813 
                                   1814 ;--------------------------------
                                   1815 ; BASIC: SHOW 
                                   1816 ; print stack content in hexadecimal bytes 
                                   1817 ; 16 bytes per row 
                                   1818 ;--------------------------------
      001747                       1819 show:
      001747 AE 17 61         [ 2] 1820 	ldw x,#cstk_prompt
      00174A CD 03 1E         [ 4] 1821 	call puts 
      00174D 96               [ 1] 1822 	ldw x,sp 
      00174E 1C 00 03         [ 2] 1823 	addw x,#3 ; ignore return address
      001751 90 AE 18 00      [ 2] 1824 	ldw y,#RAM_SIZE  
      001755 CF 00 0C         [ 2] 1825 	ldw acc16,x 
      001758 72 B2 00 0C      [ 2] 1826 	subw y,acc16
      00175C CD 0D 25         [ 4] 1827 	call hex_dump
      00175F 4F               [ 1] 1828 	clr a 
      001760 81               [ 4] 1829 	ret
                                   1830 
      001761 0A 63 6F 6E 74 65 6E  1831 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   1832 
                                   1833 
                                   1834 ;--------------------------------------------
                                   1835 ; BASIC: HEX 
                                   1836 ; select hexadecimal base for integer print
                                   1837 ;---------------------------------------------
      001788                       1838 hex_base:
      001788 35 10 00 0A      [ 1] 1839 	mov base,#16 
      00178C 81               [ 4] 1840 	ret 
                                   1841 
                                   1842 ;--------------------------------------------
                                   1843 ; BASIC: DEC 
                                   1844 ; select decimal base for integer print
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                   1845 ;---------------------------------------------
      00178D                       1846 dec_base:
      00178D 35 0A 00 0A      [ 1] 1847 	mov base,#10
      001791 81               [ 4] 1848 	ret 
                                   1849 
                                   1850 ;------------------------
                                   1851 ; BASIC: FREE 
                                   1852 ; return free size in RAM 
                                   1853 ; output:
                                   1854 ;   A 		TK_INTGR
                                   1855 ;   X 	    size integer
                                   1856 ;--------------------------
      001792                       1857 free:
      001792 AE 16 90         [ 2] 1858 	ldw x,#tib 
      001795 90 CE 00 19      [ 2] 1859 	ldw y,txtbgn 
      001799 90 A3 2A 00      [ 2] 1860 	cpw y,#app_space
      00179D 25 05            [ 1] 1861 	jrult 1$
      00179F 1D 00 80         [ 2] 1862 	subw x,#free_ram 
      0017A2 20 04            [ 2] 1863 	jra 2$ 
      0017A4                       1864 1$:	
      0017A4 72 B0 00 1B      [ 2] 1865 	subw x,txtend 
      0017A8 A6 84            [ 1] 1866 2$:	ld a,#TK_INTGR
      0017AA 81               [ 4] 1867 	ret 
                                   1868 
                                   1869 ;------------------------------
                                   1870 ; BASIC: SIZE 
                                   1871 ; command that print 
                                   1872 ; program start addres and size 
                                   1873 ;------------------------------
      0017AB                       1874 cmd_size:
      0017AB 3B 00 0A         [ 1] 1875 	push base 
      0017AE AE 17 D8         [ 2] 1876 	ldw x,#PROG_ADDR 
      0017B1 CD 03 1E         [ 4] 1877 	call puts 
      0017B4 CE 00 19         [ 2] 1878 	ldw x,txtbgn     
      0017B7 35 10 00 0A      [ 1] 1879 	mov base,#16 
      0017BB CD 12 49         [ 4] 1880 	call print_int
      0017BE 32 00 0A         [ 1] 1881 	pop base 
      0017C1 AE 17 EA         [ 2] 1882 	ldw x,#PROG_SIZE 
      0017C4 CD 03 1E         [ 4] 1883 	call puts 
      0017C7 CE 00 1B         [ 2] 1884 	ldw x,txtend 
      0017CA 72 B0 00 19      [ 2] 1885 	subw x,txtbgn 
      0017CE CD 12 49         [ 4] 1886 	call print_int
      0017D1 AE 17 F9         [ 2] 1887 	ldw x,#STR_BYTES 
      0017D4 CD 03 1E         [ 4] 1888 	call puts  
      0017D7 81               [ 4] 1889 	ret 
                                   1890 
      0017D8 70 72 6F 67 72 61 6D  1891 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      0017EA 70 72 6F 67 72 61 6D  1892 PROG_SIZE: .asciz "program size: "
             20 73 69 7A 65 3A 20
             00
      0017F9 62 79 74 65 73 0A 00  1893 STR_BYTES: .asciz "bytes\n" 
                                   1894 
                                   1895 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                   1896 ; BASIC: UBOUND  
                                   1897 ; return array variable size 
                                   1898 ; output:
                                   1899 ;   A 		TK_INTGR
                                   1900 ;   X 	    array size 
                                   1901 ;--------------------------
      001800                       1902 ubound:
      001800 CD 17 92         [ 4] 1903 	call free 
      001803 54               [ 2] 1904 	srlw x 
      001804 CF 00 1E         [ 2] 1905 	ldw array_size,x
      001807 A6 84            [ 1] 1906 	ld a,#TK_INTGR
      001809 81               [ 4] 1907 	ret 
                                   1908 
                                   1909 ;-----------------------------
                                   1910 ; BASIC: LET var=expr 
                                   1911 ; variable assignement 
                                   1912 ; output:
                                   1913 ;   A 		TK_NONE 
                                   1914 ;-----------------------------
      00180A                       1915 let::
      00180A CD 11 FB         [ 4] 1916 	call next_token 
      00180D A1 85            [ 1] 1917 	cp a,#TK_VAR 
      00180F 27 0A            [ 1] 1918 	jreq let_var
      001811 A1 06            [ 1] 1919 	cp a,#TK_ARRAY 
      001813 27 03            [ 1] 1920 	jreq  let_array
      001815 CC 11 0C         [ 2] 1921 	jp syntax_error
      001818                       1922 let_array:
      001818 CD 15 D2         [ 4] 1923 	call get_array_element
      00181B                       1924 let_var:
      00181B 89               [ 2] 1925 	pushw x  
      00181C CD 11 FB         [ 4] 1926 	call next_token 
      00181F A1 32            [ 1] 1927 	cp a,#TK_EQUAL
      001821 27 03            [ 1] 1928 	jreq 1$
      001823 CC 11 0C         [ 2] 1929 	jp syntax_error
      001826                       1930 1$:	
      001826 CD 16 EF         [ 4] 1931 	call relation   
      001829 A1 84            [ 1] 1932 	cp a,#TK_INTGR 
      00182B 27 03            [ 1] 1933 	jreq 2$
      00182D CC 11 0C         [ 2] 1934 	jp syntax_error
      001830                       1935 2$:	
      001830 90 93            [ 1] 1936 	ldw y,x 
      001832 85               [ 2] 1937 	popw x   
      001833 FF               [ 2] 1938 	ldw (x),y   
      001834 81               [ 4] 1939 	ret 
                                   1940 
                                   1941 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1942 ; return program size 
                                   1943 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001835                       1944 prog_size:
      001835 CE 00 1B         [ 2] 1945 	ldw x,txtend 
      001838 72 B0 00 19      [ 2] 1946 	subw x,txtbgn 
      00183C 81               [ 4] 1947 	ret 
                                   1948 
                                   1949 ;----------------------------
                                   1950 ; BASIC: LIST [[start][,end]]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                   1951 ; list program lines 
                                   1952 ; form start to end 
                                   1953 ; if empty argument list then 
                                   1954 ; list all.
                                   1955 ;----------------------------
                           000001  1956 	FIRST=1
                           000003  1957 	LAST=3 
                           000005  1958 	LN_PTR=5
                           000006  1959 	VSIZE=6 
      00183D                       1960 list:
      00183D CE 00 19         [ 2] 1961 	ldw x,txtbgn 
      001840 C3 00 1B         [ 2] 1962 	cpw x,txtend 
      001843 2B 01            [ 1] 1963 	jrmi 1$
      001845 81               [ 4] 1964 	ret 
      001846                       1965 1$:	
      001846 AE 17 EA         [ 2] 1966 	ldw x,#PROG_SIZE
      001849 CD 03 1E         [ 4] 1967 	call puts 
      00184C CE 00 1B         [ 2] 1968 	ldw x,txtend 
      00184F 72 B0 00 19      [ 2] 1969 	subw x,txtbgn 
      001853 CD 12 49         [ 4] 1970 	call print_int 
      001856 AE 17 F9         [ 2] 1971 	ldw x,#STR_BYTES 
      001859 CD 03 1E         [ 4] 1972 	call puts 
      00185C                       1973 	_vars VSIZE
      00185C 52 06            [ 2]    1     sub sp,#VSIZE 
      00185E CE 00 19         [ 2] 1974 	ldw x,txtbgn 
      001861 1F 05            [ 2] 1975 	ldw (LN_PTR,sp),x 
      001863 FE               [ 2] 1976 	ldw x,(x) 
      001864 1F 01            [ 2] 1977 	ldw (FIRST,sp),x ; list from first line 
      001866 AE 7F FF         [ 2] 1978 	ldw x,#MAX_LINENO ; biggest line number 
      001869 1F 03            [ 2] 1979 	ldw (LAST,sp),x 
      00186B CD 15 A7         [ 4] 1980 	call arg_list
      00186E 4D               [ 1] 1981 	tnz a
      00186F 27 31            [ 1] 1982 	jreq list_loop 
      001871 A1 02            [ 1] 1983 	cp a,#2 
      001873 27 07            [ 1] 1984 	jreq 4$
      001875 A1 01            [ 1] 1985 	cp a,#1 
      001877 27 06            [ 1] 1986 	jreq first_line 
      001879 CC 11 0C         [ 2] 1987 	jp syntax_error 
      00187C 85               [ 2] 1988 4$:	popw x 
      00187D 1F 05            [ 2] 1989 	ldw (LAST+2,sp),x 
      00187F                       1990 first_line:
      00187F 85               [ 2] 1991 	popw x
      001880 1F 01            [ 2] 1992 	ldw (FIRST,sp),x 
      001882                       1993 lines_skip:
      001882 CE 00 19         [ 2] 1994 	ldw x,txtbgn
      001885 1F 05            [ 2] 1995 2$:	ldw (LN_PTR,sp),x 
      001887 C3 00 1B         [ 2] 1996 	cpw x,txtend 
      00188A 2A 38            [ 1] 1997 	jrpl list_exit 
      00188C FE               [ 2] 1998 	ldw x,(x) ;line# 
      00188D 13 01            [ 2] 1999 	cpw x,(FIRST,sp)
      00188F 2A 11            [ 1] 2000 	jrpl list_loop 
      001891 1E 05            [ 2] 2001 	ldw x,(LN_PTR,sp) 
      001893 E6 02            [ 1] 2002 	ld a,(2,x)
      001895 C7 00 0D         [ 1] 2003 	ld acc8,a 
      001898 72 5F 00 0C      [ 1] 2004 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      00189C 72 BB 00 0C      [ 2] 2005 	addw x,acc16
      0018A0 20 E3            [ 2] 2006 	jra 2$ 
                                   2007 ; print loop
      0018A2                       2008 list_loop:
      0018A2 1E 05            [ 2] 2009 	ldw x,(LN_PTR,sp)
      0018A4 E6 02            [ 1] 2010 	ld a,(2,x) 
      0018A6 CD 19 16         [ 4] 2011 	call prt_basic_line
      0018A9 1E 05            [ 2] 2012 	ldw x,(LN_PTR,sp)
      0018AB E6 02            [ 1] 2013 	ld a,(2,x)
      0018AD C7 00 0D         [ 1] 2014 	ld acc8,a 
      0018B0 72 5F 00 0C      [ 1] 2015 	clr acc16 
      0018B4 72 BB 00 0C      [ 2] 2016 	addw x,acc16
      0018B8 C3 00 1B         [ 2] 2017 	cpw x,txtend 
      0018BB 2A 07            [ 1] 2018 	jrpl list_exit
      0018BD 1F 05            [ 2] 2019 	ldw (LN_PTR,sp),x
      0018BF FE               [ 2] 2020 	ldw x,(x)
      0018C0 13 03            [ 2] 2021 	cpw x,(LAST,sp)  
      0018C2 2F DE            [ 1] 2022 	jrslt list_loop
      0018C4                       2023 list_exit:
      0018C4 55 00 03 00 01   [ 1] 2024 	mov in,count 
      0018C9 AE 16 E0         [ 2] 2025 	ldw x,#pad 
      0018CC CF 00 04         [ 2] 2026 	ldw basicptr,x 
      0018CF                       2027 	_drop VSIZE 
      0018CF 5B 06            [ 2]    1     addw sp,#VSIZE 
      0018D1 81               [ 4] 2028 	ret
                                   2029 
                                   2030 
                                   2031 ;--------------------------
                                   2032 ; BASIC: EDIT \E | \F
                                   2033 ;  copy program in FLASH 
                                   2034 ;  to RAM for edition 
                                   2035 ;-------------------------
      0018D2                       2036 edit:
      0018D2 CD 1E A6         [ 4] 2037 	call qsign 
      0018D5 27 07            [ 1] 2038 	jreq 1$ 
      0018D7 AE 18 FF         [ 2] 2039 	ldw x,#NOT_SAVED 
      0018DA CD 03 1E         [ 4] 2040 	call puts 
      0018DD 81               [ 4] 2041 	ret 
      0018DE                       2042 1$: 
      0018DE 90 AE 2A 00      [ 2] 2043 	ldw y,#app_sign ; source address 
      0018E2 CE 2A 02         [ 2] 2044     ldw x,app_size  
      0018E5 1C 00 04         [ 2] 2045 	addw x,#4 
      0018E8 CF 00 0C         [ 2] 2046 	ldw acc16,x  ; bytes to copy 
      0018EB AE 00 7C         [ 2] 2047 	ldw x,#rsign ; destination address 
      0018EE CD 0D 90         [ 4] 2048 	call move  
      0018F1 AE 00 80         [ 2] 2049 	ldw x,#free_ram 
      0018F4 CF 00 19         [ 2] 2050 	ldw txtbgn,x 
      0018F7 72 BB 00 7E      [ 2] 2051 	addw x,rsize  
      0018FB CF 00 1B         [ 2] 2052 	ldw txtend,x 
      0018FE 81               [ 4] 2053 	ret 
                                   2054 
      0018FF 4E 6F 20 61 70 70 6C  2055 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                   2056 
                                   2057 ;--------------------------
                                   2058 ; decompile line from token list
                                   2059 ; and print it. 
                                   2060 ; input:
                                   2061 ;   A       stop at this position 
                                   2062 ;   X 		pointer at line
                                   2063 ; output:
                                   2064 ;   none 
                                   2065 ;--------------------------	
      001916                       2066 prt_basic_line:
      001916 C7 00 03         [ 1] 2067 	ld count,a 
      001919 E6 02            [ 1] 2068 	ld a,(2,x)
      00191B C1 00 03         [ 1] 2069 	cp a,count 
      00191E 2A 03            [ 1] 2070 	jrpl 1$ 
      001920 C7 00 03         [ 1] 2071 	ld count,a 
      001923 CF 00 04         [ 2] 2072 1$:	ldw basicptr,x 
      001926 90 AE 16 90      [ 2] 2073 	ldw y,#tib  
      00192A CD 0B 17         [ 4] 2074 	call decompile 
      00192D CD 03 1E         [ 4] 2075 	call puts 
      001930 A6 0D            [ 1] 2076 	ld a,#CR 
      001932 CD 02 C1         [ 4] 2077 	call putc 
      001935 81               [ 4] 2078 	ret 
                                   2079 
                                   2080 
                                   2081 
                                   2082 ;---------------------------------
                                   2083 ; BASIC: PRINT|? arg_list 
                                   2084 ; print values from argument list
                                   2085 ;----------------------------------
                           000001  2086 	CCOMMA=1
                           000001  2087 	VSIZE=1
      001936                       2088 print:
      001936                       2089 	_vars VSIZE 
      001936 52 01            [ 2]    1     sub sp,#VSIZE 
      001938                       2090 reset_comma:
      001938 0F 01            [ 1] 2091 	clr (CCOMMA,sp)
      00193A                       2092 prt_loop:
      00193A CD 11 FB         [ 4] 2093 	call next_token
      00193D A1 02            [ 1] 2094 	cp a,#CMD_END 
      00193F 25 4F            [ 1] 2095 	jrult print_exit ; colon or end of line 
      001941 A1 02            [ 1] 2096 	cp a,#TK_QSTR
      001943 27 12            [ 1] 2097 	jreq 1$
      001945 A1 03            [ 1] 2098 	cp a,#TK_CHAR 
      001947 27 13            [ 1] 2099 	jreq 2$ 
      001949 A1 82            [ 1] 2100 	cp a,#TK_CFUNC 
      00194B 27 15            [ 1] 2101 	jreq 3$
      00194D A1 09            [ 1] 2102 	cp a,#TK_COMMA 
      00194F 27 18            [ 1] 2103 	jreq 4$
      001951 A1 0A            [ 1] 2104 	cp a,#TK_SHARP 
      001953 27 18            [ 1] 2105 	jreq 5$
      001955 20 28            [ 2] 2106 	jra 7$ 
      001957                       2107 1$:	; print string 
      001957 CD 03 1E         [ 4] 2108 	call puts
      00195A 20 DC            [ 2] 2109 	jra reset_comma
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      00195C                       2110 2$:	; print character 
      00195C 9F               [ 1] 2111 	ld a,xl 
      00195D CD 02 C1         [ 4] 2112 	call putc 
      001960 20 D6            [ 2] 2113 	jra reset_comma 
      001962                       2114 3$: ; print character function value  	
      001962 FD               [ 4] 2115 	call (x)
      001963 9F               [ 1] 2116 	ld a,xl 
      001964 CD 02 C1         [ 4] 2117 	call putc
      001967 20 CF            [ 2] 2118 	jra reset_comma 
      001969                       2119 4$: ; set comma state 
      001969 03 01            [ 1] 2120 	cpl (CCOMMA,sp)
      00196B 20 CD            [ 2] 2121 	jra prt_loop   
      00196D                       2122 5$: ; # character must be followed by an integer   
      00196D CD 11 FB         [ 4] 2123 	call next_token
      001970 A1 84            [ 1] 2124 	cp a,#TK_INTGR 
      001972 27 03            [ 1] 2125 	jreq 6$
      001974 CC 11 0C         [ 2] 2126 	jp syntax_error 
      001977                       2127 6$: ; set tab width
      001977 9F               [ 1] 2128 	ld a,xl 
      001978 A4 0F            [ 1] 2129 	and a,#15 
      00197A C7 00 21         [ 1] 2130 	ld tab_width,a 
      00197D 20 B9            [ 2] 2131 	jra reset_comma 
      00197F                       2132 7$:	
      00197F                       2133 	_unget_token 
      00197F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001984 CD 16 EF         [ 4] 2134 	call relation 
      001987 A1 84            [ 1] 2135 	cp a,#TK_INTGR 
      001989 26 05            [ 1] 2136 	jrne print_exit 
      00198B CD 12 49         [ 4] 2137     call print_int 
      00198E 20 A8            [ 2] 2138 	jra reset_comma 
      001990                       2139 print_exit:
      001990 0D 01            [ 1] 2140 	tnz (CCOMMA,sp)
      001992 26 05            [ 1] 2141 	jrne 9$
      001994 A6 0D            [ 1] 2142 	ld a,#CR 
      001996 CD 02 C1         [ 4] 2143     call putc 
      001999                       2144 9$:	_drop VSIZE 
      001999 5B 01            [ 2]    1     addw sp,#VSIZE 
      00199B 81               [ 4] 2145 	ret 
                                   2146 
                                   2147 ;----------------------
                                   2148 ; 'save_context' and
                                   2149 ; 'rest_context' must be 
                                   2150 ; called at the same 
                                   2151 ; call stack depth 
                                   2152 ; i.e. SP must have the 
                                   2153 ; save value at  
                                   2154 ; entry point of both 
                                   2155 ; routine. 
                                   2156 ;---------------------
                           000004  2157 	CTXT_SIZE=4 ; size of saved data 
                                   2158 ;--------------------
                                   2159 ; save current BASIC
                                   2160 ; interpreter context 
                                   2161 ; on stack 
                                   2162 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      00199C                       2163 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00199C                       2164 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      00199C                       2165 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      00199C                       2166 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      00199C                       2167 save_context:
      00199C CE 00 04         [ 2] 2168 	ldw x,basicptr 
      00199F 1F 03            [ 2] 2169 	ldw (BPTR,sp),x
      0019A1 C6 00 01         [ 1] 2170 	ld a,in 
      0019A4 6B 05            [ 1] 2171 	ld (IN,sp),a
      0019A6 C6 00 03         [ 1] 2172 	ld a,count 
      0019A9 6B 06            [ 1] 2173 	ld (CNT,sp),a  
      0019AB 81               [ 4] 2174 	ret
                                   2175 
                                   2176 ;-----------------------
                                   2177 ; restore previously saved 
                                   2178 ; BASIC interpreter context 
                                   2179 ; from stack 
                                   2180 ;-------------------------
      0019AC                       2181 rest_context:
      0019AC 1E 03            [ 2] 2182 	ldw x,(BPTR,sp)
      0019AE CF 00 04         [ 2] 2183 	ldw basicptr,x 
      0019B1 7B 05            [ 1] 2184 	ld a,(IN,sp)
      0019B3 C7 00 01         [ 1] 2185 	ld in,a
      0019B6 7B 06            [ 1] 2186 	ld a,(CNT,sp)
      0019B8 C7 00 03         [ 1] 2187 	ld count,a  
      0019BB 81               [ 4] 2188 	ret
                                   2189 
                                   2190 
                                   2191 
                                   2192 ;------------------------------------------
                                   2193 ; BASIC: INPUT [string]var[,[string]var]
                                   2194 ; input value in variables 
                                   2195 ; [string] optionally can be used as prompt 
                                   2196 ;-----------------------------------------
                           000001  2197 	CX_BPTR=1
                           000003  2198 	CX_IN=3
                           000004  2199 	CX_CNT=4
                           000005  2200 	SKIP=5
                           000006  2201 	VAR_ADDR=6
                           000007  2202 	VSIZE=7
      0019BC                       2203 input_var:
      0019BC                       2204 	_vars VSIZE 
      0019BC 52 07            [ 2]    1     sub sp,#VSIZE 
      0019BE                       2205 input_loop:
      0019BE 0F 05            [ 1] 2206 	clr (SKIP,sp)
      0019C0 CD 11 FB         [ 4] 2207 	call next_token 
      0019C3 A1 02            [ 1] 2208 	cp a,#TK_QSTR 
      0019C5 26 08            [ 1] 2209 	jrne 1$ 
      0019C7 CD 03 1E         [ 4] 2210 	call puts 
      0019CA 03 05            [ 1] 2211 	cpl (SKIP,sp)
      0019CC CD 11 FB         [ 4] 2212 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      0019CF A1 85            [ 1] 2213 1$: cp a,#TK_VAR  
      0019D1 27 03            [ 1] 2214 	jreq 2$ 
      0019D3 CC 11 0C         [ 2] 2215 	jp syntax_error
      0019D6 1F 06            [ 2] 2216 2$:	ldw (VAR_ADDR,sp),x 
      0019D8 0D 05            [ 1] 2217 	tnz (SKIP,sp)
      0019DA 26 06            [ 1] 2218 	jrne 21$ 
      0019DC CD 0A EE         [ 4] 2219 	call var_name 
      0019DF CD 02 C1         [ 4] 2220 	call putc   
      0019E2                       2221 21$:
      0019E2 A6 3A            [ 1] 2222 	ld a,#':
      0019E4 CD 02 C1         [ 4] 2223 	call putc 
      0019E7 CD 19 9C         [ 4] 2224 	call save_context 
      0019EA 72 5F 00 03      [ 1] 2225 	clr count  
      0019EE CD 04 23         [ 4] 2226 	call readln 
      0019F1 AE 16 90         [ 2] 2227 	ldw x,#tib 
      0019F4 3B 00 03         [ 1] 2228 	push count
      0019F7 4B 00            [ 1] 2229 	push #0 
      0019F9 72 FB 01         [ 2] 2230 	addw x,(1,sp)
      0019FC 5C               [ 1] 2231 	incw x 
      0019FD                       2232 	_drop 2 
      0019FD 5B 02            [ 2]    1     addw sp,#2 
      0019FF 72 5F 00 01      [ 1] 2233 	clr in 
      001A03 CD 08 3D         [ 4] 2234 	call get_token
      001A06 A1 84            [ 1] 2235 	cp a,#TK_INTGR
      001A08 27 06            [ 1] 2236 	jreq 3$ 
      001A0A CD 19 AC         [ 4] 2237 	call rest_context 
      001A0D CC 11 0C         [ 2] 2238 	jp syntax_error
      001A10 16 06            [ 2] 2239 3$: ldw y,(VAR_ADDR,sp) 
      001A12 90 FF            [ 2] 2240 	ldw (y),x 
      001A14 CD 19 AC         [ 4] 2241 	call rest_context
      001A17 CD 11 FB         [ 4] 2242 	call next_token 
      001A1A A1 09            [ 1] 2243 	cp a,#TK_COMMA 
      001A1C 27 A0            [ 1] 2244 	jreq input_loop
      001A1E A1 00            [ 1] 2245 	cp a,#TK_NONE 
      001A20 27 07            [ 1] 2246 	jreq input_exit  
      001A22 A1 0B            [ 1] 2247 	cp a,#TK_COLON 
      001A24 27 03            [ 1] 2248     jreq input_exit 
      001A26 CC 11 0C         [ 2] 2249 	jp syntax_error 
      001A29                       2250 input_exit:
      001A29                       2251 	_drop VSIZE 
      001A29 5B 07            [ 2]    1     addw sp,#VSIZE 
      001A2B 81               [ 4] 2252 	ret 
                                   2253 
                                   2254 
                                   2255 ;---------------------
                                   2256 ; BASIC: REMARK | ' 
                                   2257 ; skip comment to end of line 
                                   2258 ;---------------------- 
      001A2C                       2259 remark::
      001A2C 55 00 03 00 01   [ 1] 2260 	mov in,count 
      001A31 81               [ 4] 2261  	ret 
                                   2262 
                                   2263 
                                   2264 ;---------------------
                                   2265 ; BASIC: WAIT addr,mask[,xor_mask] 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                   2266 ; read in loop 'addr'  
                                   2267 ; apply & 'mask' to value 
                                   2268 ; loop while result==0.  
                                   2269 ; 'xor_mask' is used to 
                                   2270 ; invert the wait logic.
                                   2271 ; i.e. loop while not 0.
                                   2272 ;---------------------
                           000001  2273 	XMASK=1 
                           000002  2274 	MASK=2
                           000003  2275 	ADDR=3
                           000004  2276 	VSIZE=4
      001A32                       2277 wait: 
      001A32                       2278 	_vars VSIZE
      001A32 52 04            [ 2]    1     sub sp,#VSIZE 
      001A34 0F 01            [ 1] 2279 	clr (XMASK,sp) 
      001A36 CD 15 A7         [ 4] 2280 	call arg_list 
      001A39 A1 02            [ 1] 2281 	cp a,#2
      001A3B 24 03            [ 1] 2282 	jruge 0$
      001A3D CC 11 0C         [ 2] 2283 	jp syntax_error 
      001A40 A1 03            [ 1] 2284 0$:	cp a,#3
      001A42 25 04            [ 1] 2285 	jrult 1$
      001A44 85               [ 2] 2286 	popw x 
      001A45 9F               [ 1] 2287 	ld a,xl
      001A46 6B 01            [ 1] 2288 	ld (XMASK,sp),a 
      001A48 85               [ 2] 2289 1$: popw x ; mask 
      001A49 9F               [ 1] 2290 	ld a,xl 
      001A4A 6B 02            [ 1] 2291 	ld (MASK,sp),a 
      001A4C 85               [ 2] 2292 	popw x ; address 
      001A4D F6               [ 1] 2293 2$:	ld a,(x)
      001A4E 14 02            [ 1] 2294 	and a,(MASK,sp)
      001A50 18 01            [ 1] 2295 	xor a,(XMASK,sp)
      001A52 27 F9            [ 1] 2296 	jreq 2$ 
      001A54                       2297 	_drop VSIZE 
      001A54 5B 04            [ 2]    1     addw sp,#VSIZE 
      001A56 81               [ 4] 2298 	ret 
                                   2299 
                                   2300 ;---------------------
                                   2301 ; BASIC: BSET addr,mask
                                   2302 ; set bits at 'addr' corresponding 
                                   2303 ; to those of 'mask' that are at 1.
                                   2304 ; arguments:
                                   2305 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2306 ;   mask        mask|addr
                                   2307 ; output:
                                   2308 ;	none 
                                   2309 ;--------------------------
      001A57                       2310 bit_set:
      001A57 CD 15 A7         [ 4] 2311 	call arg_list 
      001A5A A1 02            [ 1] 2312 	cp a,#2	 
      001A5C 27 03            [ 1] 2313 	jreq 1$ 
      001A5E CC 11 0C         [ 2] 2314 	jp syntax_error
      001A61                       2315 1$: 
      001A61 85               [ 2] 2316 	popw x ; mask 
      001A62 9F               [ 1] 2317 	ld a,xl 
      001A63 85               [ 2] 2318 	popw x ; addr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      001A64 FA               [ 1] 2319 	or a,(x)
      001A65 F7               [ 1] 2320 	ld (x),a
      001A66 81               [ 4] 2321 	ret 
                                   2322 
                                   2323 ;---------------------
                                   2324 ; BASIC: BRES addr,mask
                                   2325 ; reset bits at 'addr' corresponding 
                                   2326 ; to those of 'mask' that are at 1.
                                   2327 ; arguments:
                                   2328 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2329 ;   mask	    ~mask&*addr  
                                   2330 ; output:
                                   2331 ;	none 
                                   2332 ;--------------------------
      001A67                       2333 bit_reset:
      001A67 CD 15 A7         [ 4] 2334 	call arg_list 
      001A6A A1 02            [ 1] 2335 	cp a,#2  
      001A6C 27 03            [ 1] 2336 	jreq 1$ 
      001A6E CC 11 0C         [ 2] 2337 	jp syntax_error
      001A71                       2338 1$: 
      001A71 85               [ 2] 2339 	popw x ; mask 
      001A72 9F               [ 1] 2340 	ld a,xl 
      001A73 43               [ 1] 2341 	cpl a 
      001A74 85               [ 2] 2342 	popw x ; addr  
      001A75 F4               [ 1] 2343 	and a,(x)
      001A76 F7               [ 1] 2344 	ld (x),a 
      001A77 81               [ 4] 2345 	ret 
                                   2346 
                                   2347 ;---------------------
                                   2348 ; BASIC: BTOGL addr,mask
                                   2349 ; toggle bits at 'addr' corresponding 
                                   2350 ; to those of 'mask' that are at 1.
                                   2351 ; arguments:
                                   2352 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2353 ;   mask	    mask^*addr  
                                   2354 ; output:
                                   2355 ;	none 
                                   2356 ;--------------------------
      001A78                       2357 bit_toggle:
      001A78 CD 15 A7         [ 4] 2358 	call arg_list 
      001A7B A1 02            [ 1] 2359 	cp a,#2 
      001A7D 27 03            [ 1] 2360 	jreq 1$ 
      001A7F CC 11 0C         [ 2] 2361 	jp syntax_error
      001A82 85               [ 2] 2362 1$: popw x ; mask 
      001A83 9F               [ 1] 2363 	ld a,xl 
      001A84 85               [ 2] 2364 	popw x ; addr  
      001A85 F8               [ 1] 2365 	xor a,(x)
      001A86 F7               [ 1] 2366 	ld (x),a 
      001A87 81               [ 4] 2367 	ret 
                                   2368 
                                   2369 
                                   2370 ;---------------------
                                   2371 ; BASIC: BTEST(addr,bit)
                                   2372 ; return bit value at 'addr' 
                                   2373 ; bit is in range {0..7}.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



                                   2374 ; arguments:
                                   2375 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2376 ;   bit 	    bit position {0..7}  
                                   2377 ; output:
                                   2378 ;	none 
                                   2379 ;--------------------------
      001A88                       2380 bit_test:
      001A88 CD 15 A2         [ 4] 2381 	call func_args 
      001A8B A1 02            [ 1] 2382 	cp a,#2
      001A8D 27 03            [ 1] 2383 	jreq 0$
      001A8F CC 11 0C         [ 2] 2384 	jp syntax_error
      001A92                       2385 0$:	
      001A92 85               [ 2] 2386 	popw x 
      001A93 9F               [ 1] 2387 	ld a,xl 
      001A94 A4 07            [ 1] 2388 	and a,#7
      001A96 88               [ 1] 2389 	push a   
      001A97 A6 01            [ 1] 2390 	ld a,#1 
      001A99 0D 01            [ 1] 2391 1$: tnz (1,sp)
      001A9B 27 05            [ 1] 2392 	jreq 2$
      001A9D 48               [ 1] 2393 	sll a 
      001A9E 0A 01            [ 1] 2394 	dec (1,sp)
      001AA0 20 F7            [ 2] 2395 	jra 1$
      001AA2                       2396 2$: _drop 1 
      001AA2 5B 01            [ 2]    1     addw sp,#1 
      001AA4 85               [ 2] 2397 	popw x 
      001AA5 F4               [ 1] 2398 	and a,(x)
      001AA6 27 02            [ 1] 2399 	jreq 3$
      001AA8 A6 01            [ 1] 2400 	ld a,#1 
      001AAA 5F               [ 1] 2401 3$:	clrw x 
      001AAB 97               [ 1] 2402 	ld xl,a 
      001AAC A6 84            [ 1] 2403 	ld a,#TK_INTGR
      001AAE 81               [ 4] 2404 	ret
                                   2405 
                                   2406 
                                   2407 ;--------------------
                                   2408 ; BASIC: POKE addr,byte
                                   2409 ; put a byte at addr 
                                   2410 ;--------------------
      001AAF                       2411 poke:
      001AAF CD 15 A7         [ 4] 2412 	call arg_list 
      001AB2 A1 02            [ 1] 2413 	cp a,#2
      001AB4 27 03            [ 1] 2414 	jreq 1$
      001AB6 CC 11 0C         [ 2] 2415 	jp syntax_error
      001AB9                       2416 1$:	
      001AB9 85               [ 2] 2417 	popw x  
      001ABA 9F               [ 1] 2418     ld a,xl 
      001ABB 85               [ 2] 2419 	popw x 
      001ABC F7               [ 1] 2420 	ld (x),a 
      001ABD 81               [ 4] 2421 	ret 
                                   2422 
                                   2423 ;-----------------------
                                   2424 ; BASIC: PEEK(addr)
                                   2425 ; get the byte at addr 
                                   2426 ; input:
                                   2427 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



                                   2428 ; output:
                                   2429 ;	X 		value 
                                   2430 ;-----------------------
      001ABE                       2431 peek:
      001ABE CD 15 A2         [ 4] 2432 	call func_args
      001AC1 A1 01            [ 1] 2433 	cp a,#1 
      001AC3 27 03            [ 1] 2434 	jreq 1$
      001AC5 CC 11 0C         [ 2] 2435 	jp syntax_error
      001AC8 85               [ 2] 2436 1$: popw x 
      001AC9 F6               [ 1] 2437 	ld a,(x)
      001ACA 5F               [ 1] 2438 	clrw x 
      001ACB 97               [ 1] 2439 	ld xl,a 
      001ACC A6 84            [ 1] 2440 	ld a,#TK_INTGR
      001ACE 81               [ 4] 2441 	ret 
                                   2442 
                                   2443 ;---------------------------
                                   2444 ; BASIC IF expr : instructions
                                   2445 ; evaluate expr and if true 
                                   2446 ; execute instructions on same line. 
                                   2447 ;----------------------------
      001ACF                       2448 if: 
      001ACF CD 16 EF         [ 4] 2449 	call relation 
      001AD2 A1 84            [ 1] 2450 	cp a,#TK_INTGR
      001AD4 27 03            [ 1] 2451 	jreq 1$ 
      001AD6 CC 11 0C         [ 2] 2452 	jp syntax_error
      001AD9 4F               [ 1] 2453 1$:	clr a 
      001ADA 5D               [ 2] 2454 	tnzw x 
      001ADB 26 05            [ 1] 2455 	jrne 9$  
                                   2456 ;skip to next line
      001ADD 55 00 03 00 01   [ 1] 2457 	mov in,count
      001AE2 81               [ 4] 2458 9$:	ret 
                                   2459 
                                   2460 ;------------------------
                                   2461 ; BASIC: FOR var=expr 
                                   2462 ; set variable to expression 
                                   2463 ; leave variable address 
                                   2464 ; on stack and set
                                   2465 ; FLOOP bit in 'flags'
                                   2466 ;-----------------
                           000001  2467 	RETL1=1 ; return address  
                           000003  2468 	FSTEP=3  ; variable increment
                           000005  2469 	LIMIT=5 ; loop limit 
                           000007  2470 	CVAR=7   ; control variable 
                           000009  2471 	INW=9   ;  in.w saved
                           00000B  2472 	BPTR=11 ; baseptr saved
                           00000A  2473 	VSIZE=10  
      001AE3                       2474 for: ; { -- var_addr }
      001AE3 85               [ 2] 2475 	popw x ; call return address 
      001AE4                       2476 	_vars VSIZE 
      001AE4 52 0A            [ 2]    1     sub sp,#VSIZE 
      001AE6 89               [ 2] 2477 	pushw x  ; RETL1 
      001AE7 A6 85            [ 1] 2478 	ld a,#TK_VAR 
      001AE9 CD 15 95         [ 4] 2479 	call expect
      001AEC 1F 07            [ 2] 2480 	ldw (CVAR,sp),x  ; control variable 
      001AEE CD 18 1B         [ 4] 2481 	call let_var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      001AF1 72 14 00 20      [ 1] 2482 	bset flags,#FLOOP 
                                   2483 ; open space on stack for loop data 
      001AF5 5F               [ 1] 2484 	clrw x 
      001AF6 1F 0B            [ 2] 2485 	ldw (BPTR,sp),x 
      001AF8 1F 09            [ 2] 2486 	ldw (INW,sp),x 
      001AFA CD 11 FB         [ 4] 2487 	call next_token 
      001AFD A1 80            [ 1] 2488 	cp a,#TK_CMD 
      001AFF 27 03            [ 1] 2489 	jreq 1$
      001B01 CC 11 0C         [ 2] 2490 	jp syntax_error
      001B04                       2491 1$:  
      001B04 A3 1B 0C         [ 2] 2492 	cpw x,#to 
      001B07 27 03            [ 1] 2493 	jreq to
      001B09 CC 11 0C         [ 2] 2494 	jp syntax_error 
                                   2495 
                                   2496 ;-----------------------------------
                                   2497 ; BASIC: TO expr 
                                   2498 ; second part of FOR loop initilization
                                   2499 ; leave limit on stack and set 
                                   2500 ; FTO bit in 'flags'
                                   2501 ;-----------------------------------
      001B0C                       2502 to: ; { var_addr -- var_addr limit step }
      001B0C 72 04 00 20 03   [ 2] 2503 	btjt flags,#FLOOP,1$
      001B11 CC 11 0C         [ 2] 2504 	jp syntax_error
      001B14 CD 16 EF         [ 4] 2505 1$: call relation  
      001B17 A1 84            [ 1] 2506 	cp a,#TK_INTGR 
      001B19 27 03            [ 1] 2507 	jreq 2$ 
      001B1B CC 11 0C         [ 2] 2508 	jp syntax_error
      001B1E 1F 05            [ 2] 2509 2$: ldw (LIMIT,sp),x
                                   2510 ;	ldw x,in.w 
      001B20 CD 11 FB         [ 4] 2511 	call next_token
      001B23 A1 00            [ 1] 2512 	cp a,#TK_NONE  
      001B25 27 0E            [ 1] 2513 	jreq 4$ 
      001B27 A1 80            [ 1] 2514 	cp a,#TK_CMD
      001B29 26 05            [ 1] 2515 	jrne 3$
      001B2B A3 1B 3C         [ 2] 2516 	cpw x,#step 
      001B2E 27 0C            [ 1] 2517 	jreq step
      001B30                       2518 3$:	
      001B30                       2519 	_unget_token   	 
      001B30 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B35                       2520 4$:	
      001B35 AE 00 01         [ 2] 2521 	ldw x,#1   ; default step  
      001B38 1F 03            [ 2] 2522 	ldw (FSTEP,sp),x 
      001B3A 20 14            [ 2] 2523 	jra store_loop_addr 
                                   2524 
                                   2525 
                                   2526 ;----------------------------------
                                   2527 ; BASIC: STEP expr 
                                   2528 ; optional third par of FOR loop
                                   2529 ; initialization. 	
                                   2530 ;------------------------------------
      001B3C                       2531 step: ; {var limit -- var limit step}
      001B3C 72 04 00 20 03   [ 2] 2532 	btjt flags,#FLOOP,1$
      001B41 CC 11 0C         [ 2] 2533 	jp syntax_error
      001B44 CD 16 EF         [ 4] 2534 1$: call relation
      001B47 A1 84            [ 1] 2535 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001B49 27 03            [ 1] 2536 	jreq 2$
      001B4B CC 11 0C         [ 2] 2537 	jp syntax_error
      001B4E 1F 03            [ 2] 2538 2$:	ldw (FSTEP,sp),x ; step
                                   2539 ; leave loop back entry point on cstack 
                                   2540 ; cstack is 1 call deep from interpreter
      001B50                       2541 store_loop_addr:
      001B50 CE 00 04         [ 2] 2542 	ldw x,basicptr  
      001B53 1F 0B            [ 2] 2543 	ldw (BPTR,sp),x 
      001B55 CE 00 00         [ 2] 2544 	ldw x,in.w 
      001B58 1F 09            [ 2] 2545 	ldw (INW,sp),x   
      001B5A 72 15 00 20      [ 1] 2546 	bres flags,#FLOOP 
      001B5E 72 5C 00 1D      [ 1] 2547 	inc loop_depth  
      001B62 81               [ 4] 2548 	ret 
                                   2549 
                                   2550 ;--------------------------------
                                   2551 ; BASIC: NEXT var 
                                   2552 ; FOR loop control 
                                   2553 ; increment variable with step 
                                   2554 ; and compare with limit 
                                   2555 ; loop if threshold not crossed.
                                   2556 ; else stack. 
                                   2557 ; and decrement 'loop_depth' 
                                   2558 ;--------------------------------
      001B63                       2559 next: ; {var limit step retl1 -- [var limit step ] }
      001B63 72 5D 00 1D      [ 1] 2560 	tnz loop_depth 
      001B67 26 03            [ 1] 2561 	jrne 1$ 
      001B69 CC 11 0C         [ 2] 2562 	jp syntax_error 
      001B6C                       2563 1$: 
      001B6C A6 85            [ 1] 2564 	ld a,#TK_VAR 
      001B6E CD 15 95         [ 4] 2565 	call expect
                                   2566 ; check for good variable after NEXT 	 
      001B71 13 07            [ 2] 2567 	cpw x,(CVAR,sp)
      001B73 27 03            [ 1] 2568 	jreq 2$  
      001B75 CC 11 0C         [ 2] 2569 	jp syntax_error ; not the good one 
      001B78                       2570 2$: ; increment variable 
      001B78 FE               [ 2] 2571 	ldw x,(x)  ; get var value 
      001B79 72 FB 03         [ 2] 2572 	addw x,(FSTEP,sp) ; var+step 
      001B7C 16 07            [ 2] 2573 	ldw y,(CVAR,sp)
      001B7E 90 FF            [ 2] 2574 	ldw (y),x ; save var new value 
                                   2575 ; check sign of STEP  
      001B80 A6 80            [ 1] 2576 	ld a,#0x80
      001B82 15 03            [ 1] 2577 	bcp a,(FSTEP,sp)
      001B84 2A 06            [ 1] 2578 	jrpl 4$
                                   2579 ;negative step 
      001B86 13 05            [ 2] 2580 	cpw x,(LIMIT,sp)
      001B88 2F 1B            [ 1] 2581 	jrslt loop_done
      001B8A 20 04            [ 2] 2582 	jra loop_back 
      001B8C                       2583 4$: ; positive step
      001B8C 13 05            [ 2] 2584 	cpw x,(LIMIT,sp)
      001B8E 2C 15            [ 1] 2585 	jrsgt loop_done
      001B90                       2586 loop_back:
      001B90 1E 0B            [ 2] 2587 	ldw x,(BPTR,sp)
      001B92 CF 00 04         [ 2] 2588 	ldw basicptr,x 
      001B95 72 01 00 20 05   [ 2] 2589 	btjf flags,#FRUN,1$ 
      001B9A E6 02            [ 1] 2590 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001B9C C7 00 03         [ 1] 2591 	ld count,a
      001B9F 1E 09            [ 2] 2592 1$:	ldw x,(INW,sp)
      001BA1 CF 00 00         [ 2] 2593 	ldw in.w,x 
      001BA4 81               [ 4] 2594 	ret 
      001BA5                       2595 loop_done:
                                   2596 	; remove loop data from stack  
      001BA5 85               [ 2] 2597 	popw x
      001BA6                       2598 	_drop VSIZE 
      001BA6 5B 0A            [ 2]    1     addw sp,#VSIZE 
      001BA8 72 5A 00 1D      [ 1] 2599 	dec loop_depth 
                                   2600 ;	pushw x 
                                   2601 ;	ret 
      001BAC FC               [ 2] 2602 	jp (x)
                                   2603 
                                   2604 ;----------------------------
                                   2605 ; called by goto/gosub
                                   2606 ; to get target line number 
                                   2607 ;---------------------------
      001BAD                       2608 get_target_line:
      001BAD CD 16 EF         [ 4] 2609 	call relation 
      001BB0 A1 84            [ 1] 2610 	cp a,#TK_INTGR
      001BB2 27 03            [ 1] 2611 	jreq 1$
      001BB4 CC 11 0C         [ 2] 2612 	jp syntax_error
      001BB7 4F               [ 1] 2613 1$:	clr a
      001BB8 90 CE 00 04      [ 2] 2614 	ldw y,basicptr 
      001BBC 90 FE            [ 2] 2615 	ldw y,(y)
      001BBE 90 89            [ 2] 2616 	pushw y 
      001BC0 13 01            [ 2] 2617 	cpw x,(1,sp)
      001BC2 5B 02            [ 2] 2618 	addw sp,#2 
      001BC4 25 01            [ 1] 2619 	jrult 11$
      001BC6 4C               [ 1] 2620 	inc a 
      001BC7                       2621 11$:	
      001BC7 CD 06 06         [ 4] 2622 	call search_lineno  
      001BCA 5D               [ 2] 2623 	tnzw x 
      001BCB 26 05            [ 1] 2624 	jrne 2$ 
      001BCD A6 05            [ 1] 2625 	ld a,#ERR_NO_LINE 
      001BCF CC 11 0E         [ 2] 2626 	jp tb_error 
      001BD2 81               [ 4] 2627 2$:	ret 
                                   2628 
                                   2629 ;------------------------
                                   2630 ; BASIC: GOTO line# 
                                   2631 ; jump to line# 
                                   2632 ; here cstack is 2 call deep from interpreter 
                                   2633 ;------------------------
      001BD3                       2634 goto:
      001BD3 72 00 00 20 06   [ 2] 2635 	btjt flags,#FRUN,0$ 
      001BD8 A6 06            [ 1] 2636 	ld a,#ERR_RUN_ONLY
      001BDA CC 11 0E         [ 2] 2637 	jp tb_error 
      001BDD 81               [ 4] 2638 	ret 
      001BDE CD 1B AD         [ 4] 2639 0$:	call get_target_line
      001BE1                       2640 jp_to_target:
      001BE1 CF 00 04         [ 2] 2641 	ldw basicptr,x 
      001BE4 E6 02            [ 1] 2642 	ld a,(2,x)
      001BE6 C7 00 03         [ 1] 2643 	ld count,a 
      001BE9 35 03 00 01      [ 1] 2644 	mov in,#3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001BED 81               [ 4] 2645 	ret 
                                   2646 
                                   2647 
                                   2648 ;--------------------
                                   2649 ; BASIC: GOSUB line#
                                   2650 ; basic subroutine call
                                   2651 ; actual line# and basicptr 
                                   2652 ; are saved on cstack
                                   2653 ; here cstack is 2 call deep from interpreter 
                                   2654 ;--------------------
                           000003  2655 	RET_ADDR=3
                           000005  2656 	RET_INW=5
                           000004  2657 	VSIZE=4  
      001BEE                       2658 gosub:
      001BEE 72 00 00 20 06   [ 2] 2659 	btjt flags,#FRUN,0$ 
      001BF3 A6 06            [ 1] 2660 	ld a,#ERR_RUN_ONLY
      001BF5 CC 11 0E         [ 2] 2661 	jp tb_error 
      001BF8 81               [ 4] 2662 	ret 
      001BF9 85               [ 2] 2663 0$:	popw x 
      001BFA                       2664 	_vars VSIZE  
      001BFA 52 04            [ 2]    1     sub sp,#VSIZE 
      001BFC 89               [ 2] 2665 	pushw x 
      001BFD CE 00 04         [ 2] 2666 	ldw x,basicptr
      001C00 1F 03            [ 2] 2667 	ldw (RET_ADDR,sp),x 
      001C02 CD 1B AD         [ 4] 2668 	call get_target_line  
      001C05 89               [ 2] 2669 	pushw x 
      001C06 CE 00 00         [ 2] 2670 	ldw x,in.w 
      001C09 1F 07            [ 2] 2671 	ldw (RET_INW+2,sp),x
      001C0B 85               [ 2] 2672 	popw x 
      001C0C 20 D3            [ 2] 2673 	jra jp_to_target
                                   2674 
                                   2675 ;------------------------
                                   2676 ; BASIC: RETURN 
                                   2677 ; exit from a subroutine 
                                   2678 ; 
                                   2679 ;------------------------
      001C0E                       2680 return:
      001C0E 72 00 00 20 05   [ 2] 2681 	btjt flags,#FRUN,0$ 
      001C13 A6 06            [ 1] 2682 	ld a,#ERR_RUN_ONLY
      001C15 CC 11 0E         [ 2] 2683 	jp tb_error 
      001C18                       2684 0$:	
      001C18 1E 03            [ 2] 2685 	ldw x,(RET_ADDR,sp) 
      001C1A CF 00 04         [ 2] 2686 	ldw basicptr,x
      001C1D E6 02            [ 1] 2687 	ld a,(2,x)
      001C1F C7 00 03         [ 1] 2688 	ld count,a  
      001C22 1E 05            [ 2] 2689 	ldw x,(RET_INW,sp)
      001C24 CF 00 00         [ 2] 2690 	ldw in.w,x 
      001C27 85               [ 2] 2691 	popw x 
      001C28                       2692 	_drop VSIZE 
      001C28 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C2A 89               [ 2] 2693 	pushw x
      001C2B 81               [ 4] 2694 	ret  
                                   2695 
                                   2696 
                                   2697 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                                   2698 ; BASIC: RUN
                                   2699 ; run BASIC program in RAM
                                   2700 ;----------------------------------- 
      001C2C                       2701 run: 
      001C2C 72 01 00 20 02   [ 2] 2702 	btjf flags,#FRUN,0$  
      001C31 4F               [ 1] 2703 	clr a 
      001C32 81               [ 4] 2704 	ret
      001C33                       2705 0$: 
      001C33 72 09 00 20 12   [ 2] 2706 	btjf flags,#FBREAK,1$
      001C38                       2707 	_drop 2 
      001C38 5B 02            [ 2]    1     addw sp,#2 
      001C3A CD 19 AC         [ 4] 2708 	call rest_context
      001C3D                       2709 	_drop CTXT_SIZE 
      001C3D 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      001C3F 72 19 00 20      [ 1] 2710 	bres flags,#FBREAK 
      001C43 72 10 00 20      [ 1] 2711 	bset flags,#FRUN 
      001C47 CC 11 AF         [ 2] 2712 	jp interpreter 
      001C4A CE 00 19         [ 2] 2713 1$:	ldw x,txtbgn
      001C4D C3 00 1B         [ 2] 2714 	cpw x,txtend 
      001C50 2B 0C            [ 1] 2715 	jrmi run_it 
      001C52 AE 10 A5         [ 2] 2716 	ldw x,#err_no_prog
      001C55 CD 03 1E         [ 4] 2717 	call puts 
      001C58 55 00 03 00 01   [ 1] 2718 	mov in,count
      001C5D 81               [ 4] 2719 	ret 
      001C5E                       2720 run_it:	 
      001C5E CD 18 00         [ 4] 2721     call ubound 
      001C61                       2722 	_drop 2 ; drop return address 
      001C61 5B 02            [ 2]    1     addw sp,#2 
                                   2723 ; clear data pointer 
      001C63 5F               [ 1] 2724 	clrw x 
      001C64 CF 00 06         [ 2] 2725 	ldw data_ptr,x 
      001C67 72 5F 00 08      [ 1] 2726 	clr data_ofs 
      001C6B 72 5F 00 09      [ 1] 2727 	clr data_len 
                                   2728 ; initialize BASIC pointer 
      001C6F CE 00 19         [ 2] 2729 	ldw x,txtbgn 
      001C72 CF 00 04         [ 2] 2730 	ldw basicptr,x 
      001C75 E6 02            [ 1] 2731 	ld a,(2,x)
      001C77 C7 00 03         [ 1] 2732 	ld count,a
      001C7A 35 03 00 01      [ 1] 2733 	mov in,#3	
      001C7E 72 10 00 20      [ 1] 2734 	bset flags,#FRUN 
      001C82 CC 11 AF         [ 2] 2735 	jp interpreter 
                                   2736 
                                   2737 
                                   2738 ;----------------------
                                   2739 ; BASIC: END
                                   2740 ; end running program
                                   2741 ;---------------------- 
      001C85                       2742 cmd_end: 
                                   2743 ; clean stack 
      001C85 AE 17 FF         [ 2] 2744 	ldw x,#STACK_EMPTY
      001C88 94               [ 1] 2745 	ldw sp,x 
      001C89 CC 11 90         [ 2] 2746 	jp warm_start
                                   2747 
                                   2748 ;-----------------
                                   2749 ; 1 Khz beep 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



                                   2750 ;-----------------
      001C8C                       2751 beep_1khz:: 
      001C8C AE 00 64         [ 2] 2752 	ldw x,#100
      001C8F 90 AE 03 E8      [ 2] 2753 	ldw y,#1000
      001C93 20 0D            [ 2] 2754 	jra beep
                                   2755 
                                   2756 ;-----------------------
                                   2757 ; BASIC: TONE expr1,expr2
                                   2758 ; used TIMER2 channel 1
                                   2759 ; to produce a tone 
                                   2760 ; arguments:
                                   2761 ;    expr1   frequency 
                                   2762 ;    expr2   duration msec.
                                   2763 ;---------------------------
      001C95                       2764 tone:
      001C95 CD 15 A7         [ 4] 2765 	call arg_list 
      001C98 A1 02            [ 1] 2766 	cp a,#2 
      001C9A 27 03            [ 1] 2767 	jreq 1$
      001C9C CC 11 0C         [ 2] 2768 	jp syntax_error 
      001C9F                       2769 1$: 
      001C9F 85               [ 2] 2770 	popw x ; duration
      001CA0 90 85            [ 2] 2771 	popw y ; frequency 
      001CA2                       2772 beep:  
      001CA2 89               [ 2] 2773 	pushw x 
      001CA3 AE F4 24         [ 2] 2774 	ldw x,#TIM2_CLK_FREQ
      001CA6 65               [ 2] 2775 	divw x,y 
                                   2776 ; round to nearest integer 
      001CA7 90 A3 7A 12      [ 2] 2777 	cpw y,#TIM2_CLK_FREQ/2
      001CAB 2B 01            [ 1] 2778 	jrmi 2$
      001CAD 5C               [ 1] 2779 	incw x 
      001CAE                       2780 2$:	 
      001CAE 9E               [ 1] 2781 	ld a,xh 
      001CAF C7 53 0D         [ 1] 2782 	ld TIM2_ARRH,a 
      001CB2 9F               [ 1] 2783 	ld a,xl 
      001CB3 C7 53 0E         [ 1] 2784 	ld TIM2_ARRL,a 
                                   2785 ; 50% duty cycle 
      001CB6 8C               [ 1] 2786 	ccf 
      001CB7 56               [ 2] 2787 	rrcw x 
      001CB8 9E               [ 1] 2788 	ld a,xh 
      001CB9 C7 53 0F         [ 1] 2789 	ld TIM2_CCR1H,a 
      001CBC 9F               [ 1] 2790 	ld a,xl
      001CBD C7 53 10         [ 1] 2791 	ld TIM2_CCR1L,a
      001CC0 72 10 53 08      [ 1] 2792 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001CC4 72 10 53 00      [ 1] 2793 	bset TIM2_CR1,#TIM2_CR1_CEN
      001CC8 72 10 53 04      [ 1] 2794 	bset TIM2_EGR,#TIM2_EGR_UG
      001CCC 85               [ 2] 2795 	popw x 
      001CCD CD 20 65         [ 4] 2796 	call pause02
      001CD0 72 11 53 08      [ 1] 2797 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      001CD4 72 11 53 00      [ 1] 2798 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001CD8 81               [ 4] 2799 	ret 
                                   2800 
                                   2801 ;-------------------------------
                                   2802 ; BASIC: ADCON 0|1 [,divisor]  
                                   2803 ; disable/enanble ADC 
                                   2804 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                           000003  2805 	ONOFF=3 
                           000001  2806 	DIVSOR=1
                           000004  2807 	VSIZE=4 
      001CD9                       2808 power_adc:
      001CD9 CD 15 A7         [ 4] 2809 	call arg_list 
      001CDC A1 02            [ 1] 2810 	cp a,#2	
      001CDE 27 0B            [ 1] 2811 	jreq 1$
      001CE0 A1 01            [ 1] 2812 	cp a,#1 
      001CE2 27 03            [ 1] 2813 	jreq 0$ 
      001CE4 CC 11 0C         [ 2] 2814 	jp syntax_error 
      001CE7 AE 00 00         [ 2] 2815 0$: ldw x,#0
      001CEA 89               [ 2] 2816 	pushw x  ; divisor 
      001CEB 1E 03            [ 2] 2817 1$: ldw x,(ONOFF,sp)
      001CED 5D               [ 2] 2818 	tnzw x 
      001CEE 27 1A            [ 1] 2819 	jreq 2$ 
      001CF0 1E 01            [ 2] 2820 	ldw x,(DIVSOR,sp) ; divisor 
      001CF2 9F               [ 1] 2821 	ld a,xl
      001CF3 A4 07            [ 1] 2822 	and a,#7
      001CF5 4E               [ 1] 2823 	swap a 
      001CF6 C7 54 01         [ 1] 2824 	ld ADC_CR1,a
      001CF9 72 16 50 CA      [ 1] 2825 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001CFD 72 10 54 01      [ 1] 2826 	bset ADC_CR1,#ADC_CR1_ADON 
      001D01                       2827 	_usec_dly 7 
      001D01 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001D04 5A               [ 2]    2     decw x
      001D05 9D               [ 1]    3     nop 
      001D06 26 FA            [ 1]    4     jrne .-4
      001D08 20 08            [ 2] 2828 	jra 3$
      001D0A 72 11 54 01      [ 1] 2829 2$: bres ADC_CR1,#ADC_CR1_ADON
      001D0E 72 17 50 CA      [ 1] 2830 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      001D12                       2831 3$:	_drop VSIZE 
      001D12 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D14 81               [ 4] 2832 	ret
                                   2833 
                                   2834 ;-----------------------------
                                   2835 ; BASIC: ADCREAD (channel)
                                   2836 ; read adc channel {0..5}
                                   2837 ; output:
                                   2838 ;   A 		TK_INTGR 
                                   2839 ;   X 		value 
                                   2840 ;-----------------------------
      001D15                       2841 analog_read:
      001D15 CD 15 A2         [ 4] 2842 	call func_args 
      001D18 A1 01            [ 1] 2843 	cp a,#1 
      001D1A 27 03            [ 1] 2844 	jreq 1$
      001D1C CC 11 0C         [ 2] 2845 	jp syntax_error
      001D1F 85               [ 2] 2846 1$: popw x 
      001D20 A3 00 05         [ 2] 2847 	cpw x,#5 
      001D23 23 05            [ 2] 2848 	jrule 2$
      001D25 A6 0A            [ 1] 2849 	ld a,#ERR_BAD_VALUE
      001D27 CC 11 0E         [ 2] 2850 	jp tb_error 
      001D2A 9F               [ 1] 2851 2$: ld a,xl
      001D2B C7 00 0D         [ 1] 2852 	ld acc8,a 
      001D2E A6 05            [ 1] 2853 	ld a,#5
      001D30 C0 00 0D         [ 1] 2854 	sub a,acc8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001D33 C7 54 00         [ 1] 2855 	ld ADC_CSR,a
      001D36 72 16 54 02      [ 1] 2856 	bset ADC_CR2,#ADC_CR2_ALIGN
      001D3A 72 10 54 01      [ 1] 2857 	bset ADC_CR1,#ADC_CR1_ADON
      001D3E 72 0F 54 00 FB   [ 2] 2858 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001D43 CE 54 04         [ 2] 2859 	ldw x,ADC_DRH
      001D46 A6 84            [ 1] 2860 	ld a,#TK_INTGR
      001D48 81               [ 4] 2861 	ret 
                                   2862 
                                   2863 ;-----------------------
                                   2864 ; BASIC: DREAD(pin)
                                   2865 ; Arduino pins 
                                   2866 ; read state of a digital pin 
                                   2867 ; pin# {0..15}
                                   2868 ; output:
                                   2869 ;    A 		TK_INTGR
                                   2870 ;    X      0|1 
                                   2871 ;-------------------------
                           000001  2872 	PINNO=1
                           000001  2873 	VSIZE=1
      001D49                       2874 digital_read:
      001D49                       2875 	_vars VSIZE 
      001D49 52 01            [ 2]    1     sub sp,#VSIZE 
      001D4B CD 15 A2         [ 4] 2876 	call func_args
      001D4E A1 01            [ 1] 2877 	cp a,#1
      001D50 27 03            [ 1] 2878 	jreq 1$
      001D52 CC 11 0C         [ 2] 2879 	jp syntax_error
      001D55 85               [ 2] 2880 1$: popw x 
      001D56 A3 00 0F         [ 2] 2881 	cpw x,#15 
      001D59 23 05            [ 2] 2882 	jrule 2$
      001D5B A6 0A            [ 1] 2883 	ld a,#ERR_BAD_VALUE
      001D5D CC 11 0E         [ 2] 2884 	jp tb_error 
      001D60 CD 21 A3         [ 4] 2885 2$:	call select_pin 
      001D63 6B 01            [ 1] 2886 	ld (PINNO,sp),a
      001D65 E6 01            [ 1] 2887 	ld a,(GPIO_IDR,x)
      001D67 0D 01            [ 1] 2888 	tnz (PINNO,sp)
      001D69 27 05            [ 1] 2889 	jreq 8$
      001D6B 44               [ 1] 2890 3$: srl a 
      001D6C 0A 01            [ 1] 2891 	dec (PINNO,sp)
      001D6E 26 FB            [ 1] 2892 	jrne 3$ 
      001D70 A4 01            [ 1] 2893 8$: and a,#1 
      001D72 5F               [ 1] 2894 	clrw x 
      001D73 97               [ 1] 2895 	ld xl,a 
      001D74 A6 84            [ 1] 2896 	ld a,#TK_INTGR
      001D76                       2897 	_drop VSIZE
      001D76 5B 01            [ 2]    1     addw sp,#VSIZE 
      001D78 81               [ 4] 2898 	ret
                                   2899 
                                   2900 
                                   2901 ;-----------------------
                                   2902 ; BASIC: DWRITE pin,0|1
                                   2903 ; Arduino pins 
                                   2904 ; write to a digital pin 
                                   2905 ; pin# {0..15}
                                   2906 ; output:
                                   2907 ;    A 		TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                                   2908 ;    X      0|1 
                                   2909 ;-------------------------
                           000001  2910 	PINNO=1
                           000002  2911 	PINVAL=2
                           000002  2912 	VSIZE=2
      001D79                       2913 digital_write:
      001D79                       2914 	_vars VSIZE 
      001D79 52 02            [ 2]    1     sub sp,#VSIZE 
      001D7B CD 15 A7         [ 4] 2915 	call arg_list  
      001D7E A1 02            [ 1] 2916 	cp a,#2 
      001D80 27 03            [ 1] 2917 	jreq 1$
      001D82 CC 11 0C         [ 2] 2918 	jp syntax_error
      001D85 85               [ 2] 2919 1$: popw x 
      001D86 9F               [ 1] 2920 	ld a,xl 
      001D87 6B 02            [ 1] 2921 	ld (PINVAL,sp),a
      001D89 85               [ 2] 2922 	popw x 
      001D8A A3 00 0F         [ 2] 2923 	cpw x,#15 
      001D8D 23 05            [ 2] 2924 	jrule 2$
      001D8F A6 0A            [ 1] 2925 	ld a,#ERR_BAD_VALUE
      001D91 CC 11 0E         [ 2] 2926 	jp tb_error 
      001D94 CD 21 A3         [ 4] 2927 2$:	call select_pin 
      001D97 6B 01            [ 1] 2928 	ld (PINNO,sp),a 
      001D99 A6 01            [ 1] 2929 	ld a,#1
      001D9B 0D 01            [ 1] 2930 	tnz (PINNO,sp)
      001D9D 27 05            [ 1] 2931 	jreq 4$
      001D9F 48               [ 1] 2932 3$: sll a
      001DA0 0A 01            [ 1] 2933 	dec (PINNO,sp)
      001DA2 26 FB            [ 1] 2934 	jrne 3$
      001DA4 0D 02            [ 1] 2935 4$: tnz (PINVAL,sp)
      001DA6 26 05            [ 1] 2936 	jrne 5$
      001DA8 43               [ 1] 2937 	cpl a 
      001DA9 E4 00            [ 1] 2938 	and a,(GPIO_ODR,x)
      001DAB 20 02            [ 2] 2939 	jra 8$
      001DAD EA 00            [ 1] 2940 5$: or a,(GPIO_ODR,x)
      001DAF E7 00            [ 1] 2941 8$: ld (GPIO_ODR,x),a 
      001DB1                       2942 	_drop VSIZE 
      001DB1 5B 02            [ 2]    1     addw sp,#VSIZE 
      001DB3 81               [ 4] 2943 	ret
                                   2944 
                                   2945 
                                   2946 ;-----------------------
                                   2947 ; BASIC: STOP
                                   2948 ; stop progam execution  
                                   2949 ; without resetting pointers 
                                   2950 ; the program is resumed
                                   2951 ; with RUN 
                                   2952 ;-------------------------
      001DB4                       2953 stop:
      001DB4 72 00 00 20 02   [ 2] 2954 	btjt flags,#FRUN,2$
      001DB9 4F               [ 1] 2955 	clr a
      001DBA 81               [ 4] 2956 	ret 
      001DBB                       2957 2$:	 
                                   2958 ; create space on cstack to save context 
      001DBB AE 1D E2         [ 2] 2959 	ldw x,#break_point 
      001DBE CD 03 1E         [ 4] 2960 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001DC1                       2961 	_drop 2 ;drop return address 
      001DC1 5B 02            [ 2]    1     addw sp,#2 
      001DC3                       2962 	_vars CTXT_SIZE ; context size 
      001DC3 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      001DC5 CD 19 9C         [ 4] 2963 	call save_context 
      001DC8 AE 16 90         [ 2] 2964 	ldw x,#tib 
      001DCB CF 00 04         [ 2] 2965 	ldw basicptr,x
      001DCE 7F               [ 1] 2966 	clr (x)
      001DCF 72 5F 00 03      [ 1] 2967 	clr count  
      001DD3 5F               [ 1] 2968 	clrw x 
      001DD4 CF 00 00         [ 2] 2969 	ldw in.w,x
      001DD7 72 11 00 20      [ 1] 2970 	bres flags,#FRUN 
      001DDB 72 18 00 20      [ 1] 2971 	bset flags,#FBREAK
      001DDF CC 11 AF         [ 2] 2972 	jp interpreter 
      001DE2 0A 62 72 65 61 6B 20  2973 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   2974 
                                   2975 ;-----------------------
                                   2976 ; BASIC: NEW
                                   2977 ; from command line only 
                                   2978 ; free program memory
                                   2979 ; and clear variables 
                                   2980 ;------------------------
      001E00                       2981 new: 
      001E00 72 01 00 20 01   [ 2] 2982 	btjf flags,#FRUN,0$ 
      001E05 81               [ 4] 2983 	ret 
      001E06                       2984 0$:	
      001E06 CD 0F 74         [ 4] 2985 	call clear_basic 
      001E09 81               [ 4] 2986 	ret 
                                   2987 
                                   2988 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2989 ;;;  flash memory operations
                                   2990 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2991 
                                   2992 ;--------------------------
                                   2993 ; align farptr to BLOCK_SIZE 
                                   2994 ;---------------------------
      001E0A                       2995 row_align:
      001E0A A6 7F            [ 1] 2996 	ld a,#0x7f 
      001E0C C4 00 18         [ 1] 2997 	and a,farptr+2 
      001E0F 27 13            [ 1] 2998 	jreq 1$ 
      001E11 CE 00 17         [ 2] 2999 	ldw x,farptr+1 
      001E14 1C 00 80         [ 2] 3000 	addw x,#BLOCK_SIZE 
      001E17 24 04            [ 1] 3001 	jrnc 0$
      001E19 72 5C 00 16      [ 1] 3002 	inc farptr 
      001E1D 9F               [ 1] 3003 0$: ld a,xl 
      001E1E A4 80            [ 1] 3004 	and a,#0x80
      001E20 97               [ 1] 3005 	ld xl,a
      001E21 CF 00 17         [ 2] 3006 	ldw farptr+1,x  	
      001E24 81               [ 4] 3007 1$:	ret
                                   3008 
                                   3009 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                   3010 ; input:
                                   3011 ;   X     increment 
                                   3012 ; output:
                                   3013 ;   farptr  incremented 
                                   3014 ;---------------------
      001E25                       3015 incr_farptr:
      001E25 72 BB 00 17      [ 2] 3016 	addw x,farptr+1 
      001E29 24 04            [ 1] 3017 	jrnc 1$
      001E2B 72 5C 00 16      [ 1] 3018 	inc farptr 
      001E2F CF 00 17         [ 2] 3019 1$:	ldw farptr+1,x  
      001E32 81               [ 4] 3020 	ret 
                                   3021 
                                   3022 ;-----------------------------------
                                   3023 ; scan block for non zero byte 
                                   3024 ; block are 128 bytes 
                                   3025 ; input:
                                   3026 ;    farptr     address block  
                                   3027 ; output:
                                   3028 ;     A     0 cleared, other not cleared  
                                   3029 ;-----------------------------------
      001E33                       3030 scan_block:
      001E33 5F               [ 1] 3031 	clrw x 
      001E34 92 AF 00 16      [ 5] 3032 1$: ldf a,([farptr],x) 
      001E38 26 06            [ 1] 3033 	jrne 2$
      001E3A 5C               [ 1] 3034 	incw x 
      001E3B A3 00 80         [ 2] 3035 	cpw x,#BLOCK_SIZE 
      001E3E 25 F4            [ 1] 3036 	jrult 1$ 
      001E40 81               [ 4] 3037 2$:	ret 
                                   3038 
                                   3039 
                                   3040 
                                   3041 ;-----------------------------------
                                   3042 ; BASIC: ERASE \E | \F 
                                   3043 ; erase all block in range from 
                                   3044 ;  'app_space' to FLASH end (0x20000)
                                   3045 ;  or all EEPROM 
                                   3046 ; that contains a non zero byte.  
                                   3047 ;-----------------------------------
                           000001  3048 	LIMIT=1 
                           000003  3049 	VSIZE = 3 
      001E41                       3050 erase:
      001E41 72 5F 00 16      [ 1] 3051 	clr farptr 
      001E45                       3052 	_vars VSIZE 
      001E45 52 03            [ 2]    1     sub sp,#VSIZE 
      001E47 CD 11 FB         [ 4] 3053 	call next_token 
      001E4A A1 03            [ 1] 3054 	cp a,#TK_CHAR 
      001E4C 27 03            [ 1] 3055 	jreq 0$ 
      001E4E CC 11 0C         [ 2] 3056 	jp syntax_error
      001E51 9F               [ 1] 3057 0$: ld a,xl 
      001E52 A4 DF            [ 1] 3058 	and a,#0XDF 
      001E54 A1 45            [ 1] 3059 	cp a,#'E
      001E56 26 0C            [ 1] 3060 	jrne 1$
      001E58 AE 40 00         [ 2] 3061 	ldw x,#EEPROM_BASE 
      001E5B CF 00 17         [ 2] 3062 	ldw farptr+1,x 
      001E5E AE 47 FF         [ 2] 3063 	ldw x,#EEPROM_END
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001E61 4F               [ 1] 3064 	clr a 
      001E62 20 15            [ 2] 3065 	jra 3$ 
      001E64 A1 46            [ 1] 3066 1$: cp a,#'F 
      001E66 27 06            [ 1] 3067 	jreq 2$
      001E68 AE 10 56         [ 2] 3068 	ldw x,#err_bad_value
      001E6B CC 11 0E         [ 2] 3069 	jp tb_error
      001E6E                       3070 2$:
      001E6E AE 2A 00         [ 2] 3071 	ldw x,#app_sign 
      001E71 CF 00 17         [ 2] 3072 	ldw farptr+1,x 
      001E74 A6 02            [ 1] 3073 	ld a,#(FLASH_END>>16)&0XFF 
      001E76 AE 7F FF         [ 2] 3074 	ldw x,#FLASH_END&0xffff
      001E79                       3075 3$:
      001E79 6B 01            [ 1] 3076 	ld (LIMIT,sp),a 
      001E7B 1F 02            [ 2] 3077 	ldw (LIMIT+1,sp),x 
                                   3078  ; operation done from RAM
                                   3079  ; copy code to RAM in tib   
      001E7D CD 01 11         [ 4] 3080 	call move_erase_to_ram
      001E80                       3081 4$:	 
      001E80 CD 1E 33         [ 4] 3082     call scan_block 
      001E83 27 08            [ 1] 3083 	jreq 5$  ; block already erased 
      001E85 A6 45            [ 1] 3084     ld a,#'E 
      001E87 CD 02 C1         [ 4] 3085     call putc 
      001E8A CD 01 8F         [ 4] 3086 	call block_erase   
                                   3087 ; this block is clean, next  
      001E8D AE 00 80         [ 2] 3088 5$:	ldw x,#BLOCK_SIZE
      001E90 CD 1E 25         [ 4] 3089 	call incr_farptr
                                   3090 ; check limit, 24 bit substraction  	
      001E93 7B 01            [ 1] 3091 	ld a,(LIMIT,sp)
      001E95 1E 02            [ 2] 3092 	ldw x,(LIMIT+1,sp)
      001E97 72 B0 00 17      [ 2] 3093 	subw x,farptr+1
      001E9B C2 00 16         [ 1] 3094 	sbc a,farptr 
      001E9E 22 E0            [ 1] 3095 	jrugt 4$ 
      001EA0 CD 0F 74         [ 4] 3096 9$: call clear_basic
      001EA3                       3097 	_drop VSIZE 
      001EA3 5B 03            [ 2]    1     addw sp,#VSIZE 
      001EA5 81               [ 4] 3098 	ret 
                                   3099 	
                                   3100 
                                   3101 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3102 ;  check for application signature 
                                   3103 ; output:
                                   3104 ;   Carry    0 app present 
                                   3105 ;            1 no app installed  
                                   3106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001EA6                       3107 qsign: 
      001EA6 CE 2A 00         [ 2] 3108 	ldw x,app_sign 
      001EA9 C3 1F 0E         [ 2] 3109 	cpw x,SIGNATURE ; "BC" 
      001EAC 81               [ 4] 3110 	ret 
                                   3111 
                                   3112 ;---------------------------------------
                                   3113 ; BASIC: SAVE
                                   3114 ; write application in RAM to FLASH
                                   3115 ;--------------------------------------
      001EAD                       3116 save_app:
      001EAD CD 1E A6         [ 4] 3117 	call qsign 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001EB0 26 09            [ 1] 3118 	jrne 1$
      001EB2 AE 1F 10         [ 2] 3119 	ldw x,#CANT_DO 
      001EB5 CD 03 1E         [ 4] 3120 	call puts 
      001EB8 CC 1F 0D         [ 2] 3121 	jp 9$
      001EBB                       3122 1$: 
      001EBB CE 00 19         [ 2] 3123 	ldw x,txtbgn
      001EBE C3 00 1B         [ 2] 3124 	cpw x,txtend 
      001EC1 25 08            [ 1] 3125 	jrult 2$ 
      001EC3 AE 1F 4F         [ 2] 3126 	ldw x,#NO_APP
      001EC6 CD 03 1E         [ 4] 3127 	call puts 
      001EC9 20 42            [ 2] 3128 	jra 9$
      001ECB                       3129 2$: 
                                   3130 ; block programming flash
                                   3131 ; must be done from RAM 
      001ECB CD 01 51         [ 4] 3132 	call move_prg_to_ram
                                   3133 ; initialize farptr 
      001ECE 72 5F 00 16      [ 1] 3134 	clr farptr 
      001ED2 AE 2A 00         [ 2] 3135 	ldw x,#app_sign 
      001ED5 CF 00 17         [ 2] 3136 	ldw farptr+1,x 
                                   3137 ; write signature
      001ED8 CE 1F 0E         [ 2] 3138 	ldw x,SIGNATURE ; "BC" 
      001EDB CF 00 7C         [ 2] 3139 	ldw rsign,x 
      001EDE CE 00 1B         [ 2] 3140 	ldw x,txtend 
      001EE1 72 B0 00 19      [ 2] 3141 	subw x,txtbgn 
      001EE5 CF 00 7E         [ 2] 3142 	ldw rsize,x   
                                   3143 ;copy block to flash
      001EE8 AE 00 7C         [ 2] 3144 	ldw x,#rsign  
      001EEB 1F 01            [ 2] 3145 	ldw (1,sp),x   
      001EED 1E 01            [ 2] 3146 3$:	ldw x,(1,sp)
      001EEF CD 01 6B         [ 4] 3147 	call write_row 
      001EF2 A6 2E            [ 1] 3148     ld a,#'. 
      001EF4 CD 02 C1         [ 4] 3149     call putc 
      001EF7 1E 01            [ 2] 3150 	ldw x,(1,sp)
      001EF9 1C 00 80         [ 2] 3151 	addw x,#BLOCK_SIZE
      001EFC 1F 01            [ 2] 3152 	ldw (1,sp),x  
      001EFE C3 00 1B         [ 2] 3153 	cpw x,txtend 
      001F01 24 08            [ 1] 3154 	jruge 8$
      001F03 AE 00 80         [ 2] 3155 	ldw x,#BLOCK_SIZE 
      001F06 CD 1E 25         [ 4] 3156 	call incr_farptr
      001F09 20 E2            [ 2] 3157 	jra 3$ 
      001F0B                       3158 8$:	
      001F0B                       3159 	_drop 2   
      001F0B 5B 02            [ 2]    1     addw sp,#2 
      001F0D 81               [ 4] 3160 9$: ret 
                                   3161 
      001F0E 42 43                 3162 SIGNATURE: .ascii "BC"
      001F10 43 61 6E 27 74 20 66  3163 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             62 65 66 6F 72 65 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001F4F 4E 6F 20 61 70 70 6C  3164 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3165 
                                   3166 ;---------------------
                                   3167 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3168 ; write 1 or more byte to FLASH or EEPROM
                                   3169 ; starting at address  
                                   3170 ; input:
                                   3171 ;   expr1  	is address 
                                   3172 ;   expr2,...,exprn   are bytes to write
                                   3173 ; output:
                                   3174 ;   none 
                                   3175 ;---------------------
                           000001  3176 	ADDR=1
                           000002  3177 	VSIZ=2 
      001F65                       3178 write:
      001F65                       3179 	_vars VSIZE 
      001F65 52 03            [ 2]    1     sub sp,#VSIZE 
      001F67 72 5F 00 16      [ 1] 3180 	clr farptr ; expect 16 bits address 
      001F6B CD 16 A6         [ 4] 3181 	call expression
      001F6E A1 84            [ 1] 3182 	cp a,#TK_INTGR 
      001F70 27 03            [ 1] 3183 	jreq 0$
      001F72 CC 11 0C         [ 2] 3184 	jp syntax_error
      001F75 1F 01            [ 2] 3185 0$: ldw (ADDR,sp),x 
      001F77 CD 11 FB         [ 4] 3186 	call next_token 
      001F7A A1 09            [ 1] 3187 	cp a,#TK_COMMA 
      001F7C 27 02            [ 1] 3188 	jreq 1$ 
      001F7E 20 19            [ 2] 3189 	jra 9$ 
      001F80 CD 16 A6         [ 4] 3190 1$:	call expression
      001F83 A1 84            [ 1] 3191 	cp a,#TK_INTGR
      001F85 27 03            [ 1] 3192 	jreq 2$
      001F87 CC 11 0C         [ 2] 3193 	jp syntax_error
      001F8A 9F               [ 1] 3194 2$:	ld a,xl 
      001F8B 1E 01            [ 2] 3195 	ldw x,(ADDR,sp) 
      001F8D CF 00 17         [ 2] 3196 	ldw farptr+1,x 
      001F90 5F               [ 1] 3197 	clrw x 
      001F91 CD 01 B0         [ 4] 3198 	call write_byte
      001F94 1E 01            [ 2] 3199 	ldw x,(ADDR,sp)
      001F96 5C               [ 1] 3200 	incw x 
      001F97 20 DC            [ 2] 3201 	jra 0$ 
      001F99                       3202 9$:
      001F99                       3203 	_drop VSIZE
      001F99 5B 03            [ 2]    1     addw sp,#VSIZE 
      001F9B 81               [ 4] 3204 	ret 
                                   3205 
                                   3206 
                                   3207 ;---------------------
                                   3208 ;BASIC: CHAR(expr)
                                   3209 ; évaluate expression 
                                   3210 ; and take the 7 least 
                                   3211 ; bits as ASCII character
                                   3212 ; return a TK_CHAR 
                                   3213 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001F9C                       3214 char:
      001F9C CD 15 A2         [ 4] 3215 	call func_args 
      001F9F A1 01            [ 1] 3216 	cp a,#1
      001FA1 27 03            [ 1] 3217 	jreq 1$
      001FA3 CC 11 0C         [ 2] 3218 	jp syntax_error
      001FA6 85               [ 2] 3219 1$:	popw x 
      001FA7 9F               [ 1] 3220 	ld a,xl 
      001FA8 A4 7F            [ 1] 3221 	and a,#0x7f 
      001FAA 97               [ 1] 3222 	ld xl,a
      001FAB A6 03            [ 1] 3223 	ld a,#TK_CHAR
      001FAD 81               [ 4] 3224 	ret
                                   3225 
                                   3226 ;---------------------
                                   3227 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3228 ; extract first character 
                                   3229 ; of string argument 
                                   3230 ; return it as TK_INTGR 
                                   3231 ;---------------------
      001FAE                       3232 ascii:
      001FAE A6 07            [ 1] 3233 	ld a,#TK_LPAREN
      001FB0 CD 15 95         [ 4] 3234 	call expect 
      001FB3 CD 11 FB         [ 4] 3235 	call next_token 
      001FB6 A1 02            [ 1] 3236 	cp a,#TK_QSTR 
      001FB8 27 0E            [ 1] 3237 	jreq 1$
      001FBA A1 03            [ 1] 3238 	cp a,#TK_CHAR 
      001FBC 27 0D            [ 1] 3239 	jreq 2$ 
      001FBE A1 82            [ 1] 3240 	cp a,#TK_CFUNC 
      001FC0 27 03            [ 1] 3241 	jreq 0$
      001FC2 CC 11 0C         [ 2] 3242 	jp syntax_error
      001FC5 FD               [ 4] 3243 0$: call (x)
      001FC6 20 03            [ 2] 3244 	jra 2$
      001FC8                       3245 1$: 
      001FC8 F6               [ 1] 3246 	ld a,(x) 
      001FC9 5F               [ 1] 3247 	clrw x
      001FCA 97               [ 1] 3248 	ld xl,a 
      001FCB                       3249 2$: 
      001FCB 89               [ 2] 3250 	pushw x 
      001FCC A6 08            [ 1] 3251 	ld a,#TK_RPAREN 
      001FCE CD 15 95         [ 4] 3252 	call expect
      001FD1 85               [ 2] 3253 	popw x 
      001FD2 A6 84            [ 1] 3254 	ld a,#TK_INTGR 
      001FD4 81               [ 4] 3255 	ret 
                                   3256 
                                   3257 ;---------------------
                                   3258 ;BASIC: KEY
                                   3259 ; wait for a character 
                                   3260 ; received from STDIN 
                                   3261 ; input:
                                   3262 ;	none 
                                   3263 ; output:
                                   3264 ;	X 		ASCII character 
                                   3265 ;---------------------
      001FD5                       3266 key:
      001FD5 CD 02 D1         [ 4] 3267 	call getc 
      001FD8 5F               [ 1] 3268 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001FD9 97               [ 1] 3269 	ld xl,a 
      001FDA A6 84            [ 1] 3270 	ld a,#TK_INTGR
      001FDC 81               [ 4] 3271 	ret
                                   3272 
                                   3273 ;----------------------
                                   3274 ; BASIC: QKEY
                                   3275 ; Return true if there 
                                   3276 ; is a character in 
                                   3277 ; waiting in STDIN 
                                   3278 ; input:
                                   3279 ;  none 
                                   3280 ; output:
                                   3281 ;   X 		0|-1 
                                   3282 ;-----------------------
      001FDD                       3283 qkey:: 
      001FDD 5F               [ 1] 3284 	clrw x 
      001FDE C6 00 2A         [ 1] 3285 	ld a,rx1_head
      001FE1 C1 00 2B         [ 1] 3286 	cp a,rx1_tail 
      001FE4 27 01            [ 1] 3287 	jreq 9$ 
      001FE6 53               [ 2] 3288 	cplw x 
      001FE7 A6 84            [ 1] 3289 9$: ld a,#TK_INTGR
      001FE9 81               [ 4] 3290 	ret 
                                   3291 
                                   3292 ;---------------------
                                   3293 ; BASIC: GPIO(expr,reg)
                                   3294 ; return gpio address 
                                   3295 ; expr {0..8}
                                   3296 ; input:
                                   3297 ;   none 
                                   3298 ; output:
                                   3299 ;   X 		gpio register address
                                   3300 ;----------------------------
                           000003  3301 	PORT=3
                           000001  3302 	REG=1 
                           000004  3303 	VSIZE=4 
      001FEA                       3304 gpio:
      001FEA CD 15 A2         [ 4] 3305 	call func_args 
      001FED A1 02            [ 1] 3306 	cp a,#2
      001FEF 27 03            [ 1] 3307 	jreq 1$
      001FF1 CC 11 0C         [ 2] 3308 	jp syntax_error  
      001FF4                       3309 1$:	
      001FF4 1E 03            [ 2] 3310 	ldw x,(PORT,sp)
      001FF6 2B 17            [ 1] 3311 	jrmi bad_port
      001FF8 A3 00 09         [ 2] 3312 	cpw x,#9
      001FFB 2A 12            [ 1] 3313 	jrpl bad_port
      001FFD A6 05            [ 1] 3314 	ld a,#5
      001FFF 42               [ 4] 3315 	mul x,a
      002000 1C 50 00         [ 2] 3316 	addw x,#GPIO_BASE 
      002003 1F 03            [ 2] 3317 	ldw (PORT,sp),x  
      002005 1E 01            [ 2] 3318 	ldw x,(REG,sp) 
      002007 72 FB 03         [ 2] 3319 	addw x,(PORT,sp)
      00200A A6 84            [ 1] 3320 	ld a,#TK_INTGR
      00200C                       3321 	_drop VSIZE 
      00200C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00200E 81               [ 4] 3322 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      00200F                       3323 bad_port:
      00200F A6 0A            [ 1] 3324 	ld a,#ERR_BAD_VALUE
      002011 CC 11 0E         [ 2] 3325 	jp tb_error
                                   3326 
                                   3327 
                                   3328 ;-------------------------
                                   3329 ; BASIC: UFLASH 
                                   3330 ; return free flash address
                                   3331 ; input:
                                   3332 ;  none 
                                   3333 ; output:
                                   3334 ;	A		TK_INTGR
                                   3335 ;   X 		free address 
                                   3336 ;---------------------------
      002014                       3337 uflash:
      002014 CE 2A 00         [ 2] 3338 	ldw x,app_sign
      002017 A3 10 93         [ 2] 3339 	cpw x,#4243 ; signature "BC" 
      00201A 27 08            [ 1] 3340 	jreq 1$
      00201C CE 2A 02         [ 2] 3341 	ldw x,app_size 
      00201F 1C 2A 04         [ 2] 3342 	addw x,#app
      002022 20 03            [ 2] 3343 	jra 2$
      002024 AE 2A 00         [ 2] 3344 1$:	ldw x,#app_space 
      002027 A6 84            [ 1] 3345 2$:	ld a,#TK_INTGR 
      002029 81               [ 4] 3346 	ret 
                                   3347 
                                   3348 
                                   3349 ;---------------------
                                   3350 ; BASIC: USR(addr[,arg])
                                   3351 ; execute a function written 
                                   3352 ; in binary code.
                                   3353 ; binary fonction should 
                                   3354 ; return token attribute in A 
                                   3355 ; and value in X. 
                                   3356 ; input:
                                   3357 ;   addr	routine address 
                                   3358 ;   arg 	is an optional argument 
                                   3359 ; output:
                                   3360 ;   A 		token attribute 
                                   3361 ;   X       returned value 
                                   3362 ;---------------------
      00202A                       3363 usr:
      00202A 90 89            [ 2] 3364 	pushw y 	
      00202C CD 15 A2         [ 4] 3365 	call func_args 
      00202F A1 01            [ 1] 3366 	cp a,#1 
      002031 27 07            [ 1] 3367 	jreq 2$
      002033 A1 02            [ 1] 3368 	cp a,#2
      002035 27 03            [ 1] 3369 	jreq 2$  
      002037 CC 11 0C         [ 2] 3370 	jp syntax_error 
      00203A 90 85            [ 2] 3371 2$: popw y  ; arg|addr 
      00203C A1 01            [ 1] 3372 	cp a,#1
      00203E 27 02            [ 1] 3373 	jreq 3$
      002040 85               [ 2] 3374 	popw x ; addr
      002041 51               [ 1] 3375 	exgw x,y 
      002042 90 FD            [ 4] 3376 3$: call (y)
      002044 90 85            [ 2] 3377 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      002046 81               [ 4] 3378 	ret 
                                   3379 
                                   3380 ;------------------------------
                                   3381 ; BASIC: BYE 
                                   3382 ; halt mcu in its lowest power mode 
                                   3383 ; wait for reset or external interrupt
                                   3384 ; do a cold start on wakeup.
                                   3385 ;------------------------------
      002047                       3386 bye:
      002047 72 0D 52 30 FB   [ 2] 3387 	btjf UART1_SR,#UART_SR_TC,.
      00204C 8E               [10] 3388 	halt
      00204D CC 0E 51         [ 2] 3389 	jp cold_start  
                                   3390 
                                   3391 ;----------------------------------
                                   3392 ; BASIC: SLEEP 
                                   3393 ; halt mcu until reset or external
                                   3394 ; interrupt.
                                   3395 ; Resume progam after SLEEP command
                                   3396 ;----------------------------------
      002050                       3397 sleep:
      002050 72 0D 52 30 FB   [ 2] 3398 	btjf UART1_SR,#UART_SR_TC,.
      002055 72 16 00 20      [ 1] 3399 	bset flags,#FSLEEP
      002059 8E               [10] 3400 	halt 
      00205A 81               [ 4] 3401 	ret 
                                   3402 
                                   3403 ;-------------------------------
                                   3404 ; BASIC: PAUSE expr 
                                   3405 ; suspend execution for n msec.
                                   3406 ; input:
                                   3407 ;	none
                                   3408 ; output:
                                   3409 ;	none 
                                   3410 ;------------------------------
      00205B                       3411 pause:
      00205B CD 16 A6         [ 4] 3412 	call expression
      00205E A1 84            [ 1] 3413 	cp a,#TK_INTGR
      002060 27 03            [ 1] 3414 	jreq pause02 
      002062 CC 11 0C         [ 2] 3415 	jp syntax_error
      002065                       3416 pause02: 
      002065 5D               [ 2] 3417 1$: tnzw x 
      002066 27 04            [ 1] 3418 	jreq 2$
      002068 8F               [10] 3419 	wfi 
      002069 5A               [ 2] 3420 	decw x 
      00206A 26 F9            [ 1] 3421 	jrne 1$
      00206C 4F               [ 1] 3422 2$:	clr a 
      00206D 81               [ 4] 3423 	ret 
                                   3424 
                                   3425 ;------------------------------
                                   3426 ; BASIC: AWU expr
                                   3427 ; halt mcu for 'expr' milliseconds
                                   3428 ; use Auto wakeup peripheral
                                   3429 ; all oscillators stopped except LSI
                                   3430 ; range: 1ms - 511ms
                                   3431 ; input:
                                   3432 ;  none
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                   3433 ; output:
                                   3434 ;  none:
                                   3435 ;------------------------------
      00206E                       3436 awu:
      00206E CD 16 A6         [ 4] 3437   call expression
      002071 A1 84            [ 1] 3438   cp a,#TK_INTGR
      002073 27 03            [ 1] 3439   jreq awu02
      002075 CC 11 0C         [ 2] 3440   jp syntax_error
      002078                       3441 awu02:
      002078 A3 14 00         [ 2] 3442   cpw x,#5120
      00207B 2B 0C            [ 1] 3443   jrmi 1$ 
      00207D 35 0F 50 F2      [ 1] 3444   mov AWU_TBR,#15 
      002081 A6 1E            [ 1] 3445   ld a,#30
      002083 62               [ 2] 3446   div x,a
      002084 A6 10            [ 1] 3447   ld a,#16
      002086 62               [ 2] 3448   div x,a 
      002087 20 1E            [ 2] 3449   jra 4$
      002089                       3450 1$: 
      002089 A3 08 00         [ 2] 3451   cpw x,#2048
      00208C 2B 09            [ 1] 3452   jrmi 2$ 
      00208E 35 0E 50 F2      [ 1] 3453   mov AWU_TBR,#14
      002092 A6 50            [ 1] 3454   ld a,#80
      002094 62               [ 2] 3455   div x,a 
      002095 20 10            [ 2] 3456   jra 4$   
      002097                       3457 2$:
      002097 35 07 50 F2      [ 1] 3458   mov AWU_TBR,#7
      00209B                       3459 3$:  
                                   3460 ; while X > 64  divide by 2 and increment AWU_TBR 
      00209B A3 00 40         [ 2] 3461   cpw x,#64 
      00209E 23 07            [ 2] 3462   jrule 4$ 
      0020A0 72 5C 50 F2      [ 1] 3463   inc AWU_TBR 
      0020A4 54               [ 2] 3464   srlw x 
      0020A5 20 F4            [ 2] 3465   jra 3$ 
      0020A7                       3466 4$:
      0020A7 9F               [ 1] 3467   ld a, xl
      0020A8 4A               [ 1] 3468   dec a 
      0020A9 27 01            [ 1] 3469   jreq 5$
      0020AB 4A               [ 1] 3470   dec a 	
      0020AC                       3471 5$: 
      0020AC A4 3E            [ 1] 3472   and a,#0x3e 
      0020AE C7 50 F1         [ 1] 3473   ld AWU_APR,a 
      0020B1 72 18 50 F0      [ 1] 3474   bset AWU_CSR,#AWU_CSR_AWUEN
      0020B5 8E               [10] 3475   halt 
                                   3476 
      0020B6 81               [ 4] 3477   ret 
                                   3478 
                                   3479 ;------------------------------
                                   3480 ; BASIC: TICKS
                                   3481 ; return msec ticks counter value 
                                   3482 ; input:
                                   3483 ; 	none 
                                   3484 ; output:
                                   3485 ;	X 		TK_INTGR
                                   3486 ;-------------------------------
      0020B7                       3487 get_ticks:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      0020B7 CE 00 0E         [ 2] 3488 	ldw x,ticks 
      0020BA A6 84            [ 1] 3489 	ld a,#TK_INTGR
      0020BC 81               [ 4] 3490 	ret 
                                   3491 
                                   3492 
                                   3493 
                                   3494 ;------------------------------
                                   3495 ; BASIC: ABS(expr)
                                   3496 ; return absolute value of expr.
                                   3497 ; input:
                                   3498 ;   none
                                   3499 ; output:
                                   3500 ;   X     	positive integer
                                   3501 ;-------------------------------
      0020BD                       3502 abs:
      0020BD CD 15 A2         [ 4] 3503 	call func_args 
      0020C0 A1 01            [ 1] 3504 	cp a,#1 
      0020C2 27 03            [ 1] 3505 	jreq 0$ 
      0020C4 CC 11 0C         [ 2] 3506 	jp syntax_error
      0020C7                       3507 0$:  
      0020C7 85               [ 2] 3508     popw x   
      0020C8 9E               [ 1] 3509 	ld a,xh 
      0020C9 A5 80            [ 1] 3510 	bcp a,#0x80 
      0020CB 27 01            [ 1] 3511 	jreq 2$ 
      0020CD 50               [ 2] 3512 	negw x 
      0020CE A6 84            [ 1] 3513 2$: ld a,#TK_INTGR 
      0020D0 81               [ 4] 3514 	ret 
                                   3515 
                                   3516 ;------------------------------
                                   3517 ; BASIC: AND(expr1,expr2)
                                   3518 ; Apply bit AND relation between
                                   3519 ; the 2 arguments, i.e expr1 & expr2 
                                   3520 ; output:
                                   3521 ; 	A 		TK_INTGR
                                   3522 ;   X 		result 
                                   3523 ;------------------------------
      0020D1                       3524 bit_and:
      0020D1 CD 15 A2         [ 4] 3525 	call func_args 
      0020D4 A1 02            [ 1] 3526 	cp a,#2
      0020D6 27 03            [ 1] 3527 	jreq 1$
      0020D8 CC 11 0C         [ 2] 3528 	jp syntax_error 
      0020DB 85               [ 2] 3529 1$:	popw x 
      0020DC 9E               [ 1] 3530 	ld a,xh 
      0020DD 14 01            [ 1] 3531 	and a,(1,sp)
      0020DF 95               [ 1] 3532 	ld xh,a 
      0020E0 9F               [ 1] 3533 	ld a,xl
      0020E1 14 02            [ 1] 3534 	and a,(2,sp)
      0020E3 97               [ 1] 3535 	ld xl,a 
      0020E4                       3536 	_drop 2 
      0020E4 5B 02            [ 2]    1     addw sp,#2 
      0020E6 A6 84            [ 1] 3537 	ld a,#TK_INTGR
      0020E8 81               [ 4] 3538 	ret
                                   3539 
                                   3540 ;------------------------------
                                   3541 ; BASIC: OR(expr1,expr2)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                   3542 ; Apply bit OR relation between
                                   3543 ; the 2 arguments, i.e expr1 | expr2 
                                   3544 ; output:
                                   3545 ; 	A 		TK_INTGR
                                   3546 ;   X 		result 
                                   3547 ;------------------------------
      0020E9                       3548 bit_or:
      0020E9 CD 15 A2         [ 4] 3549 	call func_args 
      0020EC A1 02            [ 1] 3550 	cp a,#2
      0020EE 27 03            [ 1] 3551 	jreq 1$
      0020F0 CC 11 0C         [ 2] 3552 	jp syntax_error 
      0020F3                       3553 1$: 
      0020F3 85               [ 2] 3554 	popw x 
      0020F4 9E               [ 1] 3555 	ld a,xh 
      0020F5 1A 01            [ 1] 3556 	or a,(1,sp)
      0020F7 95               [ 1] 3557 	ld xh,a 
      0020F8 9F               [ 1] 3558 	ld a,xl 
      0020F9 1A 02            [ 1] 3559 	or a,(2,sp)
      0020FB 97               [ 1] 3560 	ld xl,a 
      0020FC                       3561 	_drop 2 
      0020FC 5B 02            [ 2]    1     addw sp,#2 
      0020FE A6 84            [ 1] 3562 	ld a,#TK_INTGR 
      002100 81               [ 4] 3563 	ret
                                   3564 
                                   3565 ;------------------------------
                                   3566 ; BASIC: XOR(expr1,expr2)
                                   3567 ; Apply bit XOR relation between
                                   3568 ; the 2 arguments, i.e expr1 ^ expr2 
                                   3569 ; output:
                                   3570 ; 	A 		TK_INTGR
                                   3571 ;   X 		result 
                                   3572 ;------------------------------
      002101                       3573 bit_xor:
      002101 CD 15 A2         [ 4] 3574 	call func_args 
      002104 A1 02            [ 1] 3575 	cp a,#2
      002106 27 03            [ 1] 3576 	jreq 1$
      002108 CC 11 0C         [ 2] 3577 	jp syntax_error 
      00210B                       3578 1$: 
      00210B 85               [ 2] 3579 	popw x 
      00210C 9E               [ 1] 3580 	ld a,xh 
      00210D 18 01            [ 1] 3581 	xor a,(1,sp)
      00210F 95               [ 1] 3582 	ld xh,a 
      002110 9F               [ 1] 3583 	ld a,xl 
      002111 18 02            [ 1] 3584 	xor a,(2,sp)
      002113 97               [ 1] 3585 	ld xl,a 
      002114                       3586 	_drop 2 
      002114 5B 02            [ 2]    1     addw sp,#2 
      002116 A6 84            [ 1] 3587 	ld a,#TK_INTGR 
      002118 81               [ 4] 3588 	ret 
                                   3589 
                                   3590 ;------------------------------
                                   3591 ; BASIC: LSHIFT(expr1,expr2)
                                   3592 ; logical shift left expr1 by 
                                   3593 ; expr2 bits 
                                   3594 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



                                   3595 ; 	A 		TK_INTGR
                                   3596 ;   X 		result 
                                   3597 ;------------------------------
      002119                       3598 lshift:
      002119 CD 15 A2         [ 4] 3599 	call func_args
      00211C A1 02            [ 1] 3600 	cp a,#2 
      00211E 27 03            [ 1] 3601 	jreq 1$
      002120 CC 11 0C         [ 2] 3602 	jp syntax_error
      002123 90 85            [ 2] 3603 1$: popw y   
      002125 85               [ 2] 3604 	popw x 
      002126 90 5D            [ 2] 3605 	tnzw y 
      002128 27 05            [ 1] 3606 	jreq 4$
      00212A 58               [ 2] 3607 2$:	sllw x 
      00212B 90 5A            [ 2] 3608 	decw y 
      00212D 26 FB            [ 1] 3609 	jrne 2$
      00212F                       3610 4$:  
      00212F A6 84            [ 1] 3611 	ld a,#TK_INTGR
      002131 81               [ 4] 3612 	ret
                                   3613 
                                   3614 ;------------------------------
                                   3615 ; BASIC: RSHIFT(expr1,expr2)
                                   3616 ; logical shift right expr1 by 
                                   3617 ; expr2 bits.
                                   3618 ; output:
                                   3619 ; 	A 		TK_INTGR
                                   3620 ;   X 		result 
                                   3621 ;------------------------------
      002132                       3622 rshift:
      002132 CD 15 A2         [ 4] 3623 	call func_args
      002135 A1 02            [ 1] 3624 	cp a,#2 
      002137 27 03            [ 1] 3625 	jreq 1$
      002139 CC 11 0C         [ 2] 3626 	jp syntax_error
      00213C 90 85            [ 2] 3627 1$: popw y  
      00213E 85               [ 2] 3628 	popw x
      00213F 90 5D            [ 2] 3629 	tnzw y 
      002141 27 05            [ 1] 3630 	jreq 4$
      002143 54               [ 2] 3631 2$:	srlw x 
      002144 90 5A            [ 2] 3632 	decw y 
      002146 26 FB            [ 1] 3633 	jrne 2$
      002148                       3634 4$:  
      002148 A6 84            [ 1] 3635 	ld a,#TK_INTGR
      00214A 81               [ 4] 3636 	ret
                                   3637 
                                   3638 ;--------------------------
                                   3639 ; BASIC: FCPU integer
                                   3640 ; set CPU frequency 
                                   3641 ;-------------------------- 
                                   3642 
      00214B                       3643 fcpu:
      00214B A6 84            [ 1] 3644 	ld a,#TK_INTGR
      00214D CD 15 95         [ 4] 3645 	call expect 
      002150 9F               [ 1] 3646 	ld a,xl 
      002151 A4 07            [ 1] 3647 	and a,#7 
      002153 C7 50 C6         [ 1] 3648 	ld CLK_CKDIVR,a 
      002156 81               [ 4] 3649 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                                   3650 
                                   3651 ;------------------------------
                                   3652 ; BASIC: PMODE pin#, mode 
                                   3653 ; Arduino pin. 
                                   3654 ; define pin as input or output
                                   3655 ; pin#: {0..15}
                                   3656 ; mode: INPUT|OUTPUT  
                                   3657 ;------------------------------
                           000001  3658 	PINNO=1
                           000001  3659 	VSIZE=1
      002157                       3660 pin_mode:
      002157                       3661 	_vars VSIZE 
      002157 52 01            [ 2]    1     sub sp,#VSIZE 
      002159 CD 15 A7         [ 4] 3662 	call arg_list 
      00215C A1 02            [ 1] 3663 	cp a,#2 
      00215E 27 03            [ 1] 3664 	jreq 1$
      002160 CC 11 0C         [ 2] 3665 	jp syntax_error 
      002163 90 85            [ 2] 3666 1$: popw y ; mode 
      002165 85               [ 2] 3667 	popw x ; Dx pin 
      002166 CD 21 A3         [ 4] 3668 	call select_pin 
      002169 6B 01            [ 1] 3669 	ld (PINNO,sp),a  
      00216B A6 01            [ 1] 3670 	ld a,#1 
      00216D 0D 01            [ 1] 3671 	tnz (PINNO,sp)
      00216F 27 0D            [ 1] 3672 	jreq 4$
      002171 48               [ 1] 3673 2$:	sll a 
      002172 0A 01            [ 1] 3674 	dec (PINNO,sp)
      002174 26 FB            [ 1] 3675 	jrne 2$ 
      002176 6B 01            [ 1] 3676 	ld (PINNO,sp),a
      002178 7B 01            [ 1] 3677 	ld a,(PINNO,sp)
      00217A EA 03            [ 1] 3678 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      00217C E7 03            [ 1] 3679 	ld (GPIO_CR1,x),a 
      00217E 90 A3 00 01      [ 2] 3680 4$:	cpw y,#OUTP 
      002182 27 10            [ 1] 3681 	jreq 6$
                                   3682 ; input mode
                                   3683 ; disable external interrupt 
      002184 7B 01            [ 1] 3684 	ld a,(PINNO,sp)
      002186 43               [ 1] 3685 	cpl a 
      002187 E4 04            [ 1] 3686 	and a,(GPIO_CR2,x)
      002189 E7 04            [ 1] 3687 	ld (GPIO_CR2,x),a 
                                   3688 ;clear bit in DDR for input mode 
      00218B 7B 01            [ 1] 3689 	ld a,(PINNO,sp)
      00218D 43               [ 1] 3690 	cpl a 
      00218E E4 02            [ 1] 3691 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002190 E7 02            [ 1] 3692 	ld (GPIO_DDR,x),a 
      002192 20 0C            [ 2] 3693 	jra 9$
      002194                       3694 6$: ;output mode  
      002194 7B 01            [ 1] 3695 	ld a,(PINNO,sp)
      002196 EA 02            [ 1] 3696 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002198 E7 02            [ 1] 3697 	ld (GPIO_DDR,x),a 
      00219A 7B 01            [ 1] 3698 	ld a,(PINNO,sp)
      00219C EA 04            [ 1] 3699 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      00219E E7 04            [ 1] 3700 	ld (GPIO_CR2,x),a 
      0021A0                       3701 9$:	
      0021A0                       3702 	_drop VSIZE 
      0021A0 5B 01            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      0021A2 81               [ 4] 3703 	ret
                                   3704 
                                   3705 ;------------------------
                                   3706 ; select Arduino pin 
                                   3707 ; input:
                                   3708 ;   X 	 {0..15} Arduino Dx 
                                   3709 ; output:
                                   3710 ;   A     stm8s208 pin 
                                   3711 ;   X     base address s208 GPIO port 
                                   3712 ;---------------------------
      0021A3                       3713 select_pin:
      0021A3 58               [ 2] 3714 	sllw x 
      0021A4 1C 21 B3         [ 2] 3715 	addw x,#arduino_to_8s208 
      0021A7 FE               [ 2] 3716 	ldw x,(x)
      0021A8 9F               [ 1] 3717 	ld a,xl 
      0021A9 88               [ 1] 3718 	push a 
      0021AA 5E               [ 1] 3719 	swapw x 
      0021AB A6 05            [ 1] 3720 	ld a,#5 
      0021AD 42               [ 4] 3721 	mul x,a 
      0021AE 1C 50 00         [ 2] 3722 	addw x,#GPIO_BASE 
      0021B1 84               [ 1] 3723 	pop a 
      0021B2 81               [ 4] 3724 	ret 
                                   3725 ; translation from Arduino D0..D15 to stm8s208rb 
      0021B3                       3726 arduino_to_8s208:
      0021B3 03 06                 3727 .byte 3,6 ; D0 
      0021B5 03 05                 3728 .byte 3,5 ; D1 
      0021B7 04 00                 3729 .byte 4,0 ; D2 
      0021B9 02 01                 3730 .byte 2,1 ; D3
      0021BB 06 00                 3731 .byte 6,0 ; D4
      0021BD 02 02                 3732 .byte 2,2 ; D5
      0021BF 02 03                 3733 .byte 2,3 ; D6
      0021C1 03 01                 3734 .byte 3,1 ; D7
      0021C3 03 03                 3735 .byte 3,3 ; D8
      0021C5 02 04                 3736 .byte 2,4 ; D9
      0021C7 04 05                 3737 .byte 4,5 ; D10
      0021C9 02 06                 3738 .byte 2,6 ; D11
      0021CB 02 07                 3739 .byte 2,7 ; D12
      0021CD 02 05                 3740 .byte 2,5 ; D13
      0021CF 04 02                 3741 .byte 4,2 ; D14
      0021D1 04 01                 3742 .byte 4,1 ; D15
                                   3743 
                                   3744 
                                   3745 ;------------------------------
                                   3746 ; BASIC: RND(expr)
                                   3747 ; return random number 
                                   3748 ; between 1 and expr inclusive
                                   3749 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3750 ; input:
                                   3751 ; 	none 
                                   3752 ; output:
                                   3753 ;	X 		random positive integer 
                                   3754 ;------------------------------
      0021D3                       3755 random:
      0021D3 CD 15 A2         [ 4] 3756 	call func_args 
      0021D6 A1 01            [ 1] 3757 	cp a,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      0021D8 27 03            [ 1] 3758 	jreq 1$
      0021DA CC 11 0C         [ 2] 3759 	jp syntax_error
      0021DD                       3760 1$:  
      0021DD A6 80            [ 1] 3761 	ld a,#0x80 
      0021DF 15 01            [ 1] 3762 	bcp a,(1,sp)
      0021E1 27 05            [ 1] 3763 	jreq 2$
      0021E3 A6 0A            [ 1] 3764 	ld a,#ERR_BAD_VALUE
      0021E5 CC 11 0E         [ 2] 3765 	jp tb_error
      0021E8                       3766 2$: 
                                   3767 ; acc16=(x<<5)^x 
      0021E8 CE 00 12         [ 2] 3768 	ldw x,seedx 
      0021EB 58               [ 2] 3769 	sllw x 
      0021EC 58               [ 2] 3770 	sllw x 
      0021ED 58               [ 2] 3771 	sllw x 
      0021EE 58               [ 2] 3772 	sllw x 
      0021EF 58               [ 2] 3773 	sllw x 
      0021F0 9E               [ 1] 3774 	ld a,xh 
      0021F1 C8 00 12         [ 1] 3775 	xor a,seedx 
      0021F4 C7 00 0C         [ 1] 3776 	ld acc16,a 
      0021F7 9F               [ 1] 3777 	ld a,xl 
      0021F8 C8 00 13         [ 1] 3778 	xor a,seedx+1 
      0021FB C7 00 0D         [ 1] 3779 	ld acc8,a 
                                   3780 ; seedx=seedy 
      0021FE CE 00 14         [ 2] 3781 	ldw x,seedy 
      002201 CF 00 12         [ 2] 3782 	ldw seedx,x  
                                   3783 ; seedy=seedy^(seedy>>1)
      002204 90 54            [ 2] 3784 	srlw y 
      002206 90 9E            [ 1] 3785 	ld a,yh 
      002208 C8 00 14         [ 1] 3786 	xor a,seedy 
      00220B C7 00 14         [ 1] 3787 	ld seedy,a  
      00220E 90 9F            [ 1] 3788 	ld a,yl 
      002210 C8 00 15         [ 1] 3789 	xor a,seedy+1 
      002213 C7 00 15         [ 1] 3790 	ld seedy+1,a 
                                   3791 ; acc16>>3 
      002216 CE 00 0C         [ 2] 3792 	ldw x,acc16 
      002219 54               [ 2] 3793 	srlw x 
      00221A 54               [ 2] 3794 	srlw x 
      00221B 54               [ 2] 3795 	srlw x 
                                   3796 ; x=acc16^x 
      00221C 9E               [ 1] 3797 	ld a,xh 
      00221D C8 00 0C         [ 1] 3798 	xor a,acc16 
      002220 95               [ 1] 3799 	ld xh,a 
      002221 9F               [ 1] 3800 	ld a,xl 
      002222 C8 00 0D         [ 1] 3801 	xor a,acc8 
      002225 97               [ 1] 3802 	ld xl,a 
                                   3803 ; seedy=x^seedy 
      002226 C8 00 15         [ 1] 3804 	xor a,seedy+1
      002229 97               [ 1] 3805 	ld xl,a 
      00222A 9E               [ 1] 3806 	ld a,xh 
      00222B C8 00 14         [ 1] 3807 	xor a,seedy
      00222E 95               [ 1] 3808 	ld xh,a 
      00222F CF 00 14         [ 2] 3809 	ldw seedy,x 
                                   3810 ; return seedy modulo expr + 1 
      002232 90 85            [ 2] 3811 	popw y 
      002234 65               [ 2] 3812 	divw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002235 93               [ 1] 3813 	ldw x,y 
      002236 5C               [ 1] 3814 	incw x 
      002237                       3815 10$:
      002237 A6 84            [ 1] 3816 	ld a,#TK_INTGR
      002239 81               [ 4] 3817 	ret 
                                   3818 
                                   3819 ;---------------------------------
                                   3820 ; BASIC: WORDS 
                                   3821 ; affiche la listes des mots du
                                   3822 ; dictionnaire ainsi que le nombre
                                   3823 ; de mots.
                                   3824 ;---------------------------------
                           000001  3825 	WLEN=1 ; word length
                           000002  3826 	LLEN=2 ; character sent to console
                           000003  3827 	WCNT=3 ; count words printed 
                           000003  3828 	VSIZE=3 
      00223A                       3829 words:
      00223A                       3830 	_vars VSIZE
      00223A 52 03            [ 2]    1     sub sp,#VSIZE 
      00223C 0F 02            [ 1] 3831 	clr (LLEN,sp)
      00223E 0F 03            [ 1] 3832 	clr (WCNT,sp)
      002240 90 AE 29 1A      [ 2] 3833 	ldw y,#kword_dict+2
      002244 93               [ 1] 3834 0$:	ldw x,y
      002245 F6               [ 1] 3835 	ld a,(x)
      002246 A4 0F            [ 1] 3836 	and a,#15 
      002248 6B 01            [ 1] 3837 	ld (WLEN,sp),a 
      00224A 0C 03            [ 1] 3838 	inc (WCNT,sp)
      00224C 5C               [ 1] 3839 1$:	incw x 
      00224D F6               [ 1] 3840 	ld a,(x)
      00224E CD 02 C1         [ 4] 3841 	call putc 
      002251 0C 02            [ 1] 3842 	inc (LLEN,sp)
      002253 0A 01            [ 1] 3843 	dec (WLEN,sp)
      002255 26 F5            [ 1] 3844 	jrne 1$
      002257 A6 46            [ 1] 3845 	ld a,#70
      002259 11 02            [ 1] 3846 	cp a,(LLEN,sp)
      00225B 2B 09            [ 1] 3847 	jrmi 2$   
      00225D A6 20            [ 1] 3848 	ld a,#SPACE 
      00225F CD 02 C1         [ 4] 3849 	call putc 
      002262 0C 02            [ 1] 3850 	inc (LLEN,sp) 
      002264 20 07            [ 2] 3851 	jra 3$
      002266 A6 0D            [ 1] 3852 2$: ld a,#CR 
      002268 CD 02 C1         [ 4] 3853 	call putc 
      00226B 0F 02            [ 1] 3854 	clr (LLEN,sp)
      00226D 72 A2 00 02      [ 2] 3855 3$:	subw y,#2 
      002271 90 FE            [ 2] 3856 	ldw y,(y)
      002273 26 CF            [ 1] 3857 	jrne 0$ 
      002275 A6 0D            [ 1] 3858 	ld a,#CR 
      002277 CD 02 C1         [ 4] 3859 	call putc  
      00227A 5F               [ 1] 3860 	clrw x 
      00227B 7B 03            [ 1] 3861 	ld a,(WCNT,sp)
      00227D 97               [ 1] 3862 	ld xl,a 
      00227E CD 12 49         [ 4] 3863 	call print_int 
      002281 AE 22 8A         [ 2] 3864 	ldw x,#words_count_msg
      002284 CD 03 1E         [ 4] 3865 	call puts 
      002287                       3866 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002287 5B 03            [ 2]    1     addw sp,#VSIZE 
      002289 81               [ 4] 3867 	ret 
      00228A 20 77 6F 72 64 73 20  3868 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3869 
                                   3870 
                                   3871 ;-----------------------------
                                   3872 ; BASIC: TIMER expr 
                                   3873 ; initialize count down timer 
                                   3874 ;-----------------------------
      0022A0                       3875 set_timer:
      0022A0 CD 15 A7         [ 4] 3876 	call arg_list
      0022A3 A1 01            [ 1] 3877 	cp a,#1 
      0022A5 27 03            [ 1] 3878 	jreq 1$
      0022A7 CC 11 0C         [ 2] 3879 	jp syntax_error
      0022AA                       3880 1$: 
      0022AA 85               [ 2] 3881 	popw x 
      0022AB CF 00 10         [ 2] 3882 	ldw timer,x 
      0022AE 81               [ 4] 3883 	ret 
                                   3884 
                                   3885 ;------------------------------
                                   3886 ; BASIC: TIMEOUT 
                                   3887 ; return state of timer 
                                   3888 ;------------------------------
      0022AF                       3889 timeout:
      0022AF CE 00 10         [ 2] 3890 	ldw x,timer 
      0022B2                       3891 logical_complement:
      0022B2 53               [ 2] 3892 	cplw x 
      0022B3 A3 FF FF         [ 2] 3893 	cpw x,#-1
      0022B6 27 01            [ 1] 3894 	jreq 2$
      0022B8 5F               [ 1] 3895 	clrw x 
      0022B9 A6 84            [ 1] 3896 2$:	ld a,#TK_INTGR
      0022BB 81               [ 4] 3897 	ret 
                                   3898 
                                   3899 ;--------------------------------
                                   3900 ; BASIC NOT(expr) 
                                   3901 ; return logical complement of expr
                                   3902 ;--------------------------------
      0022BC                       3903 func_not:
      0022BC CD 15 A2         [ 4] 3904 	call func_args  
      0022BF A1 01            [ 1] 3905 	cp a,#1
      0022C1 27 03            [ 1] 3906 	jreq 1$
      0022C3 CC 11 0C         [ 2] 3907 	jp syntax_error
      0022C6 85               [ 2] 3908 1$:	popw x 
      0022C7 20 E9            [ 2] 3909 	jra logical_complement
                                   3910 
                                   3911 
                                   3912 
                                   3913 ;-----------------------------------
                                   3914 ; BASIC: IWDGEN expr1 
                                   3915 ; enable independant watchdog timer
                                   3916 ; expr1 is delay in multiple of 62.5µsec
                                   3917 ; expr1 -> {1..16383}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



                                   3918 ;-----------------------------------
      0022C9                       3919 enable_iwdg:
      0022C9 CD 15 A7         [ 4] 3920 	call arg_list
      0022CC A1 01            [ 1] 3921 	cp a,#1 
      0022CE 27 03            [ 1] 3922 	jreq 1$
      0022D0 CC 11 0C         [ 2] 3923 	jp syntax_error 
      0022D3 85               [ 2] 3924 1$: popw x 
      0022D4 4B 00            [ 1] 3925 	push #0
      0022D6 35 CC 50 E0      [ 1] 3926 	mov IWDG_KR,#IWDG_KEY_ENABLE
      0022DA 9E               [ 1] 3927 	ld a,xh 
      0022DB A4 3F            [ 1] 3928 	and a,#0x3f
      0022DD 95               [ 1] 3929 	ld xh,a  
      0022DE A3 00 FF         [ 2] 3930 2$:	cpw x,#255
      0022E1 23 06            [ 2] 3931 	jrule 3$
      0022E3 0C 01            [ 1] 3932 	inc (1,sp)
      0022E5 98               [ 1] 3933 	rcf 
      0022E6 56               [ 2] 3934 	rrcw x 
      0022E7 20 F5            [ 2] 3935 	jra 2$
      0022E9 35 55 50 E0      [ 1] 3936 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      0022ED 84               [ 1] 3937 	pop a  
      0022EE C7 50 E1         [ 1] 3938 	ld IWDG_PR,a 
      0022F1 9F               [ 1] 3939 	ld a,xl
      0022F2 4A               [ 1] 3940 	dec a 
      0022F3 35 55 50 E0      [ 1] 3941 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      0022F7 C7 50 E2         [ 1] 3942 	ld IWDG_RLR,a 
      0022FA 35 AA 50 E0      [ 1] 3943 	mov IWDG_KR,#IWDG_KEY_REFRESH
      0022FE 81               [ 4] 3944 	ret 
                                   3945 
                                   3946 
                                   3947 ;-----------------------------------
                                   3948 ; BASIC: IWDGREF  
                                   3949 ; refresh independant watchdog count down 
                                   3950 ; timer before it reset MCU. 
                                   3951 ;-----------------------------------
      0022FF                       3952 refresh_iwdg:
      0022FF 35 AA 50 E0      [ 1] 3953 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002303 81               [ 4] 3954 	ret 
                                   3955 
                                   3956 
                                   3957 ;-------------------------------------
                                   3958 ; BASIC: LOG(expr)
                                   3959 ; return logarithm base 2 of expr 
                                   3960 ; this is the position of most significant
                                   3961 ; bit set. 
                                   3962 ; input: 
                                   3963 ; output:
                                   3964 ;   X     log2 
                                   3965 ;   A     TK_INTGR 
                                   3966 ;*********************************
      002304                       3967 log2:
      002304 CD 15 A2         [ 4] 3968 	call func_args 
      002307 A1 01            [ 1] 3969 	cp a,#1 
      002309 27 03            [ 1] 3970 	jreq 1$
      00230B CC 11 0C         [ 2] 3971 	jp syntax_error 
      00230E 85               [ 2] 3972 1$: popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      00230F                       3973 leading_one:
      00230F 5D               [ 2] 3974 	tnzw x 
      002310 27 0A            [ 1] 3975 	jreq 4$
      002312 A6 0F            [ 1] 3976 	ld a,#15 
      002314 59               [ 2] 3977 2$: rlcw x 
      002315 25 03            [ 1] 3978     jrc 3$
      002317 4A               [ 1] 3979 	dec a 
      002318 20 FA            [ 2] 3980 	jra 2$
      00231A 5F               [ 1] 3981 3$: clrw x 
      00231B 97               [ 1] 3982     ld xl,a
      00231C A6 84            [ 1] 3983 4$:	ld a,#TK_INTGR
      00231E 81               [ 4] 3984 	ret 
                                   3985 
                                   3986 ;-----------------------------------
                                   3987 ; BASIC: BIT(expr) 
                                   3988 ; expr ->{0..15}
                                   3989 ; return 2^expr 
                                   3990 ; output:
                                   3991 ;    x    2^expr 
                                   3992 ;-----------------------------------
      00231F                       3993 bitmask:
      00231F CD 15 A2         [ 4] 3994     call func_args 
      002322 A1 01            [ 1] 3995 	cp a,#1
      002324 27 03            [ 1] 3996 	jreq 1$
      002326 CC 11 0C         [ 2] 3997 	jp syntax_error 
      002329 85               [ 2] 3998 1$: popw x 
      00232A 9F               [ 1] 3999 	ld a,xl 
      00232B A4 0F            [ 1] 4000 	and a,#15
      00232D 5F               [ 1] 4001 	clrw x 
      00232E 5C               [ 1] 4002 	incw x 
      00232F 4D               [ 1] 4003 2$: tnz a 
      002330 27 04            [ 1] 4004 	jreq 3$
      002332 58               [ 2] 4005 	slaw x 
      002333 4A               [ 1] 4006 	dec a 
      002334 20 F9            [ 2] 4007 	jra 2$ 
      002336 A6 84            [ 1] 4008 3$: ld a,#TK_INTGR
      002338 81               [ 4] 4009 	ret 
                                   4010 
                                   4011 ;------------------------------
                                   4012 ; BASIC: INVERT(expr)
                                   4013 ; 1's complement 
                                   4014 ;--------------------------------
      002339                       4015 invert:
      002339 CD 15 A2         [ 4] 4016 	call func_args
      00233C A1 01            [ 1] 4017 	cp a,#1 
      00233E 27 03            [ 1] 4018 	jreq 1$
      002340 CC 11 0C         [ 2] 4019 	jp syntax_error
      002343 85               [ 2] 4020 1$: popw x  
      002344 53               [ 2] 4021 	cplw x 
      002345 A6 84            [ 1] 4022 	ld a,#TK_INTGR 
      002347 81               [ 4] 4023 	ret 
                                   4024 
                                   4025 ;------------------------------
                                   4026 ; BASIC: DO 
                                   4027 ; initiate a DO ... UNTIL loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



                                   4028 ;------------------------------
                           000003  4029 	DOLP_ADR=3 
                           000005  4030 	DOLP_INW=5
                           000004  4031 	VSIZE=4 
      002348                       4032 do_loop:
      002348 85               [ 2] 4033 	popw x 
      002349                       4034 	_vars VSIZE 
      002349 52 04            [ 2]    1     sub sp,#VSIZE 
      00234B 89               [ 2] 4035 	pushw x 
      00234C 90 CE 00 04      [ 2] 4036 	ldw y,basicptr 
      002350 17 03            [ 2] 4037 	ldw (DOLP_ADR,sp),y
      002352 90 CE 00 00      [ 2] 4038 	ldw y,in.w 
      002356 17 05            [ 2] 4039 	ldw (DOLP_INW,sp),y
      002358 72 5C 00 1D      [ 1] 4040 	inc loop_depth 
      00235C 81               [ 4] 4041 	ret 
                                   4042 
                                   4043 ;--------------------------------
                                   4044 ; BASIC: UNTIL expr 
                                   4045 ; loop if exprssion is false 
                                   4046 ; else terminate loop
                                   4047 ;--------------------------------
      00235D                       4048 until: 
      00235D 72 5D 00 1D      [ 1] 4049 	tnz loop_depth 
      002361 26 03            [ 1] 4050 	jrne 1$ 
      002363 CC 11 0C         [ 2] 4051 	jp syntax_error 
      002366                       4052 1$: 
      002366 CD 16 EF         [ 4] 4053 	call relation 
      002369 A1 84            [ 1] 4054 	cp a,#TK_INTGR
      00236B 27 03            [ 1] 4055 	jreq 2$
      00236D CC 11 0C         [ 2] 4056 	jp syntax_error
      002370                       4057 2$: 
      002370 5D               [ 2] 4058 	tnzw x 
      002371 26 10            [ 1] 4059 	jrne 9$
      002373 1E 03            [ 2] 4060 	ldw x,(DOLP_ADR,sp)
      002375 CF 00 04         [ 2] 4061 	ldw basicptr,x 
      002378 E6 02            [ 1] 4062 	ld a,(2,x)
      00237A C7 00 03         [ 1] 4063 	ld count,a 
      00237D 1E 05            [ 2] 4064 	ldw x,(DOLP_INW,sp)
      00237F CF 00 00         [ 2] 4065 	ldw in.w,x 
      002382 81               [ 4] 4066 	ret 
      002383                       4067 9$:	; remove loop data from stack  
      002383 85               [ 2] 4068 	popw x
      002384                       4069 	_drop VSIZE
      002384 5B 04            [ 2]    1     addw sp,#VSIZE 
      002386 72 5A 00 1D      [ 1] 4070 	dec loop_depth 
      00238A FC               [ 2] 4071 	jp (x)
                                   4072 
                                   4073 ;--------------------------
                                   4074 ; BASIC: PRTA...PRTI  
                                   4075 ;  return constant value 
                                   4076 ;  PORT  offset in GPIO
                                   4077 ;  array
                                   4078 ;---------------------------
      00238B                       4079 const_porta:
      00238B AE 00 00         [ 2] 4080 	ldw x,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      00238E A6 84            [ 1] 4081 	ld a,#TK_INTGR 
      002390 81               [ 4] 4082 	ret 
      002391                       4083 const_portb:
      002391 AE 00 01         [ 2] 4084 	ldw x,#1
      002394 A6 84            [ 1] 4085 	ld a,#TK_INTGR 
      002396 81               [ 4] 4086 	ret 
      002397                       4087 const_portc:
      002397 AE 00 02         [ 2] 4088 	ldw x,#2
      00239A A6 84            [ 1] 4089 	ld a,#TK_INTGR 
      00239C 81               [ 4] 4090 	ret 
      00239D                       4091 const_portd:
      00239D AE 00 03         [ 2] 4092 	ldw x,#3
      0023A0 A6 84            [ 1] 4093 	ld a,#TK_INTGR 
      0023A2 81               [ 4] 4094 	ret 
      0023A3                       4095 const_porte:
      0023A3 AE 00 04         [ 2] 4096 	ldw x,#4
      0023A6 A6 84            [ 1] 4097 	ld a,#TK_INTGR 
      0023A8 81               [ 4] 4098 	ret 
      0023A9                       4099 const_portf:
      0023A9 AE 00 05         [ 2] 4100 	ldw x,#5
      0023AC A6 84            [ 1] 4101 	ld a,#TK_INTGR 
      0023AE 81               [ 4] 4102 	ret 
      0023AF                       4103 const_portg:
      0023AF AE 00 06         [ 2] 4104 	ldw x,#6
      0023B2 A6 84            [ 1] 4105 	ld a,#TK_INTGR 
      0023B4 81               [ 4] 4106 	ret 
      0023B5                       4107 const_porth:
      0023B5 AE 00 07         [ 2] 4108 	ldw x,#7
      0023B8 A6 84            [ 1] 4109 	ld a,#TK_INTGR 
      0023BA 81               [ 4] 4110 	ret 
      0023BB                       4111 const_porti:
      0023BB AE 00 08         [ 2] 4112 	ldw x,#8
      0023BE A6 84            [ 1] 4113 	ld a,#TK_INTGR 
      0023C0 81               [ 4] 4114 	ret 
                                   4115 
                                   4116 ;-------------------------------
                                   4117 ; following return constant 
                                   4118 ; related to GPIO register offset 
                                   4119 ;---------------------------------
      0023C1                       4120 const_odr:
      0023C1 A6 84            [ 1] 4121 	ld a,#TK_INTGR 
      0023C3 AE 00 00         [ 2] 4122 	ldw x,#GPIO_ODR
      0023C6 81               [ 4] 4123 	ret 
      0023C7                       4124 const_idr:
      0023C7 A6 84            [ 1] 4125 	ld a,#TK_INTGR 
      0023C9 AE 00 01         [ 2] 4126 	ldw x,#GPIO_IDR
      0023CC 81               [ 4] 4127 	ret 
      0023CD                       4128 const_ddr:
      0023CD A6 84            [ 1] 4129 	ld a,#TK_INTGR 
      0023CF AE 00 02         [ 2] 4130 	ldw x,#GPIO_DDR
      0023D2 81               [ 4] 4131 	ret 
      0023D3                       4132 const_cr1:
      0023D3 A6 84            [ 1] 4133 	ld a,#TK_INTGR 
      0023D5 AE 00 03         [ 2] 4134 	ldw x,#GPIO_CR1
      0023D8 81               [ 4] 4135 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      0023D9                       4136 const_cr2:
      0023D9 A6 84            [ 1] 4137 	ld a,#TK_INTGR 
      0023DB AE 00 04         [ 2] 4138 	ldw x,#GPIO_CR2
      0023DE 81               [ 4] 4139 	ret 
                                   4140 ;-------------------------
                                   4141 ; BASIC: POUT 
                                   4142 ;  constant for port mode
                                   4143 ;  used by PMODE 
                                   4144 ;  to set pin as output
                                   4145 ;------------------------
      0023DF                       4146 const_output:
      0023DF A6 84            [ 1] 4147 	ld a,#TK_INTGR 
      0023E1 AE 00 01         [ 2] 4148 	ldw x,#OUTP
      0023E4 81               [ 4] 4149 	ret 
                                   4150 
                                   4151 ;-------------------------
                                   4152 ; BASIC: PINP 
                                   4153 ;  constant for port mode
                                   4154 ;  used by PMODE 
                                   4155 ;  to set pin as input
                                   4156 ;------------------------
      0023E5                       4157 const_input:
      0023E5 A6 84            [ 1] 4158 	ld a,#TK_INTGR 
      0023E7 AE 00 00         [ 2] 4159 	ldw x,#INP 
      0023EA 81               [ 4] 4160 	ret 
                                   4161 	
                                   4162 ;-----------------------
                                   4163 ; memory area constants
                                   4164 ;-----------------------
      0023EB                       4165 const_eeprom_base:
      0023EB A6 84            [ 1] 4166 	ld a,#TK_INTGR 
      0023ED AE 40 00         [ 2] 4167 	ldw x,#EEPROM_BASE 
      0023F0 81               [ 4] 4168 	ret 
                                   4169 
                                   4170 ;---------------------------
                                   4171 ; BASIC: DATA 
                                   4172 ; when the interpreter find 
                                   4173 ; a DATA line it skip it.
                                   4174 ;---------------------------
      0023F1                       4175 data:
      0023F1 55 00 03 00 01   [ 1] 4176 	mov in,count 
      0023F6 81               [ 4] 4177 	ret 
                                   4178 
                                   4179 ;---------------------------
                                   4180 ; BASIC: DATLN  *expr*
                                   4181 ; set DATA pointer at line# 
                                   4182 ; specified by *expr* 
                                   4183 ;---------------------------
      0023F7                       4184 data_line:
      0023F7 CD 16 A6         [ 4] 4185 	call expression
      0023FA A1 84            [ 1] 4186 	cp a,#TK_INTGR
      0023FC 27 03            [ 1] 4187 	jreq 1$
      0023FE CC 11 0C         [ 2] 4188 	jp syntax_error  
      002401 4F               [ 1] 4189 1$: clr a 
      002402 CD 06 06         [ 4] 4190 	call search_lineno
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      002405 5D               [ 2] 4191 	tnzw x 
      002406 26 05            [ 1] 4192 	jrne 3$
      002408 A6 05            [ 1] 4193 2$:	ld a,#ERR_NO_LINE 
      00240A CC 11 0E         [ 2] 4194 	jp tb_error
      00240D                       4195 3$: ; check if valid data line 
      00240D 90 93            [ 1] 4196     ldw y,x 
      00240F EE 04            [ 2] 4197 	ldw x,(4,x)
      002411 A3 23 F1         [ 2] 4198 	cpw x,#data 
      002414 26 F2            [ 1] 4199 	jrne 2$ 
      002416 90 CF 00 06      [ 2] 4200 	ldw data_ptr,y
      00241A 90 E6 02         [ 1] 4201 	ld a,(2,y)
      00241D C7 00 09         [ 1] 4202 	ld data_len,a 
      002420 35 06 00 08      [ 1] 4203 	mov data_ofs,#FIRST_DATA_ITEM 
      002424 81               [ 4] 4204 	ret
                                   4205 
                                   4206 ;---------------------------------
                                   4207 ; BASIC: RESTORE 
                                   4208 ; set data_ptr to first data line
                                   4209 ; if not DATA found pointer set to
                                   4210 ; zero 
                                   4211 ;---------------------------------
      002425                       4212 restore:
      002425 72 5F 00 06      [ 1] 4213 	clr data_ptr 
      002429 72 5F 00 07      [ 1] 4214 	clr data_ptr+1
      00242D 72 5F 00 08      [ 1] 4215 	clr data_ofs 
      002431 72 5F 00 09      [ 1] 4216 	clr data_len
      002435 CE 00 19         [ 2] 4217 	ldw x,txtbgn
      002438                       4218 data_search_loop: 	
      002438 C3 00 1B         [ 2] 4219 	cpw x,txtend
      00243B 24 1B            [ 1] 4220 	jruge 9$
      00243D 90 93            [ 1] 4221 	ldw y,x 
      00243F EE 04            [ 2] 4222 	ldw x,(4,x)
      002441 1C 29 20         [ 2] 4223 	addw x,#code_addr
      002444 FE               [ 2] 4224 	ldw x,(x)
      002445 A3 23 F1         [ 2] 4225 	cpw x,#data 
      002448 26 1A            [ 1] 4226 	jrne try_next_line 
      00244A 90 CF 00 06      [ 2] 4227 	ldw data_ptr,y 
      00244E 90 E6 02         [ 1] 4228 	ld a,(2,y)
      002451 C7 00 09         [ 1] 4229 	ld data_len,a 
      002454 35 06 00 08      [ 1] 4230 	mov data_ofs,#FIRST_DATA_ITEM
      002458 72 5D 00 09      [ 1] 4231 9$:	tnz data_len 
      00245C 26 05            [ 1] 4232     jrne 10$
      00245E A6 0C            [ 1] 4233 	ld a,#ERR_NO_DATA 
      002460 CC 11 0E         [ 2] 4234 	jp tb_error 
      002463 81               [ 4] 4235 10$:ret
      002464                       4236 try_next_line:
      002464 93               [ 1] 4237 	ldw x,y 
      002465 E6 02            [ 1] 4238 	ld a,(2,x)
      002467 C7 00 0D         [ 1] 4239 	ld acc8,a 
      00246A 72 5F 00 0C      [ 1] 4240 	clr acc16 
      00246E 72 BB 00 0C      [ 2] 4241 	addw x,acc16 
      002472 20 C4            [ 2] 4242 	jra data_search_loop
                                   4243 
                                   4244 
                                   4245 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



                                   4246 ; BASIC: READ 
                                   4247 ; return next data item | 0 
                                   4248 ;---------------------------------
                           000001  4249 	CTX_BPTR=1 
                           000003  4250 	CTX_IN=3 
                           000004  4251 	CTX_COUNT=4 
                           000005  4252 	XSAVE=5
                           000006  4253 	VSIZE=6
      002474                       4254 read:
      002474                       4255 	_vars  VSIZE 
      002474 52 06            [ 2]    1     sub sp,#VSIZE 
      002476                       4256 read01:	
      002476 C6 00 08         [ 1] 4257 	ld a,data_ofs
      002479 C1 00 09         [ 1] 4258 	cp a,data_len 
      00247C 27 37            [ 1] 4259 	jreq 2$ ; end of line  
      00247E CD 19 9C         [ 4] 4260 	call save_context
      002481 CE 00 06         [ 2] 4261 	ldw x,data_ptr 
      002484 CF 00 04         [ 2] 4262 	ldw basicptr,x 
      002487 55 00 08 00 01   [ 1] 4263 	mov in,data_ofs 
      00248C 55 00 09 00 03   [ 1] 4264 	mov count,data_len  
      002491 CD 16 A6         [ 4] 4265 	call expression 
      002494 A1 84            [ 1] 4266 	cp a,#TK_INTGR 
      002496 27 03            [ 1] 4267 	jreq 1$ 
      002498 CC 11 0C         [ 2] 4268 	jp syntax_error 
      00249B                       4269 1$:
      00249B 1F 05            [ 2] 4270 	ldw (XSAVE,SP),x
      00249D CD 11 FB         [ 4] 4271 	call next_token ; skip comma
      0024A0 CE 00 04         [ 2] 4272 	ldw x,basicptr 
      0024A3 CF 00 06         [ 2] 4273 	ldw data_ptr,x 
      0024A6 55 00 01 00 08   [ 1] 4274 	mov data_ofs,in 
      0024AB CD 19 AC         [ 4] 4275 	call rest_context
      0024AE 1E 05            [ 2] 4276 	ldw x,(XSAVE,sp)
      0024B0 A6 84            [ 1] 4277 	ld a,#TK_INTGR
      0024B2                       4278 	_drop VSIZE 
      0024B2 5B 06            [ 2]    1     addw sp,#VSIZE 
      0024B4 81               [ 4] 4279 	ret 
      0024B5                       4280 2$: ; end of line reached 
      0024B5 90 CE 00 06      [ 2] 4281 	ldw y, data_ptr 
      0024B9 72 5F 00 06      [ 1] 4282 	clr data_ptr
      0024BD 72 5F 00 07      [ 1] 4283 	clr data_ptr+1   
      0024C1 72 5F 00 08      [ 1] 4284 	clr data_ofs 
      0024C5 72 5F 00 09      [ 1] 4285 	clr data_len 
      0024C9 CD 24 64         [ 4] 4286 	call try_next_line 
      0024CC 20 A8            [ 2] 4287 	jra read01
                                   4288 
                                   4289 
                                   4290 ;---------------------------------
                                   4291 ; BASIC: SPIEN clkdiv, 0|1  
                                   4292 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4293 ; if clkdiv==-1 disable SPI
                                   4294 ; 0|1 -> disable|enable  
                                   4295 ;--------------------------------- 
                           000005  4296 SPI_CS_BIT=5
      0024CE                       4297 spi_enable:
      0024CE CD 15 A7         [ 4] 4298 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0024D1 A1 02            [ 1] 4299 	cp a,#2
      0024D3 27 03            [ 1] 4300 	jreq 1$
      0024D5 CC 11 0C         [ 2] 4301 	jp syntax_error 
      0024D8                       4302 1$: 
      0024D8 72 12 50 C7      [ 1] 4303 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      0024DC 85               [ 2] 4304 	popw x  
      0024DD 5D               [ 2] 4305 	tnzw x 
      0024DE 27 21            [ 1] 4306 	jreq spi_disable 
      0024E0 85               [ 2] 4307 	popw x 
      0024E1 A6 08            [ 1] 4308 	ld a,#(1<<SPI_CR1_BR)
      0024E3 42               [ 4] 4309 	mul x,a 
      0024E4 9F               [ 1] 4310 	ld a,xl 
      0024E5 C7 52 00         [ 1] 4311 	ld SPI_CR1,a 
                                   4312 ; configure ~CS on PE5 (D10 on CN8) as output. 
      0024E8 72 1A 50 14      [ 1] 4313 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      0024EC 72 1A 50 16      [ 1] 4314 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4315 ; configure SPI as master mode 0.	
      0024F0 72 14 52 00      [ 1] 4316 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4317 ; ~CS line controlled by sofware 	
      0024F4 72 12 52 01      [ 1] 4318 	bset SPI_CR2,#SPI_CR2_SSM 
      0024F8 72 10 52 01      [ 1] 4319     bset SPI_CR2,#SPI_CR2_SSI 
                                   4320 ; enable SPI
      0024FC 72 1C 52 00      [ 1] 4321 	bset SPI_CR1,#SPI_CR1_SPE 	
      002500 81               [ 4] 4322 	ret 
      002501                       4323 spi_disable:
      002501                       4324 	_drop #2; throw first argument.
      002501 5B 02            [ 2]    1     addw sp,##2 
                                   4325 ; wait spi idle 
      002503 A6 82            [ 1] 4326 1$:	ld a,#0x82 
      002505 C4 52 03         [ 1] 4327 	and a,SPI_SR
      002508 A1 02            [ 1] 4328 	cp a,#2 
      00250A 26 F7            [ 1] 4329 	jrne 1$
      00250C 72 1D 52 00      [ 1] 4330 	bres SPI_CR1,#SPI_CR1_SPE
      002510 72 13 50 C7      [ 1] 4331 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002514 72 1B 50 16      [ 1] 4332 	bres PE_DDR,#SPI_CS_BIT 
      002518 81               [ 4] 4333 	ret 
                                   4334 
      002519                       4335 spi_clear_error:
      002519 A6 78            [ 1] 4336 	ld a,#0x78 
      00251B C5 52 03         [ 1] 4337 	bcp a,SPI_SR 
      00251E 27 04            [ 1] 4338 	jreq 1$
      002520 72 5F 52 03      [ 1] 4339 	clr SPI_SR 
      002524 81               [ 4] 4340 1$: ret 
                                   4341 
      002525                       4342 spi_send_byte:
      002525 88               [ 1] 4343 	push a 
      002526 CD 25 19         [ 4] 4344 	call spi_clear_error
      002529 84               [ 1] 4345 	pop a 
      00252A 72 03 52 03 FB   [ 2] 4346 	btjf SPI_SR,#SPI_SR_TXE,.
      00252F C7 52 04         [ 1] 4347 	ld SPI_DR,a
      002532 72 01 52 03 FB   [ 2] 4348 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002537 C6 52 04         [ 1] 4349 	ld a,SPI_DR 
      00253A 81               [ 4] 4350 	ret 
                                   4351 
      00253B                       4352 spi_rcv_byte:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      00253B A6 FF            [ 1] 4353 	ld a,#255
      00253D 72 01 52 03 E3   [ 2] 4354 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002542 C6 52 04         [ 1] 4355 	ld a,SPI_DR 
      002545 81               [ 4] 4356 	ret
                                   4357 
                                   4358 ;------------------------------
                                   4359 ; BASIC: SPIWR byte [,byte]
                                   4360 ; write 1 or more byte
                                   4361 ;------------------------------
      002546                       4362 spi_write:
      002546 CD 16 A6         [ 4] 4363 	call expression
      002549 A1 84            [ 1] 4364 	cp a,#TK_INTGR 
      00254B 27 03            [ 1] 4365 	jreq 1$
      00254D CC 11 0C         [ 2] 4366 	jp syntax_error 
      002550                       4367 1$:	
      002550 9F               [ 1] 4368 	ld a,xl 
      002551 CD 25 25         [ 4] 4369 	call spi_send_byte 
      002554 CD 11 FB         [ 4] 4370 	call next_token 
      002557 A1 09            [ 1] 4371 	cp a,#TK_COMMA 
      002559 26 02            [ 1] 4372 	jrne 2$ 
      00255B 20 E9            [ 2] 4373 	jra spi_write 
      00255D 4D               [ 1] 4374 2$:	tnz a 
      00255E 27 05            [ 1] 4375 	jreq 3$
      002560                       4376 	_unget_token  
      002560 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002565 81               [ 4] 4377 3$:	ret 
                                   4378 
                                   4379 
                                   4380 ;-------------------------------
                                   4381 ; BASIC: SPIRD 	
                                   4382 ; read one byte from SPI 
                                   4383 ;-------------------------------
      002566                       4384 spi_read:
      002566 CD 25 3B         [ 4] 4385 	call spi_rcv_byte 
      002569 5F               [ 1] 4386 	clrw x 
      00256A 97               [ 1] 4387 	ld xl,a 
      00256B A6 84            [ 1] 4388 	ld a,#TK_INTGR 
      00256D 81               [ 4] 4389 	ret 
                                   4390 
                                   4391 ;------------------------------
                                   4392 ; BASIC: SPISEL 0|1 
                                   4393 ; set state of ~CS line
                                   4394 ; 0|1 deselect|select  
                                   4395 ;------------------------------
      00256E                       4396 spi_select:
      00256E CD 11 FB         [ 4] 4397 	call next_token 
      002571 A1 84            [ 1] 4398 	cp a,#TK_INTGR 
      002573 27 03            [ 1] 4399 	jreq 1$
      002575 CC 11 0C         [ 2] 4400 	jp syntax_error 
      002578 5D               [ 2] 4401 1$: tnzw x  
      002579 27 05            [ 1] 4402 	jreq cs_high 
      00257B 72 1B 50 14      [ 1] 4403 	bres PE_ODR,#SPI_CS_BIT
      00257F 81               [ 4] 4404 	ret 
      002580                       4405 cs_high: 
      002580 72 1A 50 14      [ 1] 4406 	bset PE_ODR,#SPI_CS_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      002584 81               [ 4] 4407 	ret 
                                   4408 
                                   4409 ;-------------------------------
                                   4410 ; BASIC: PAD 
                                   4411 ; Return pad buffer address.
                                   4412 ;------------------------------
      002585                       4413 pad_ref:
      002585 AE 16 E0         [ 2] 4414 	ldw x,#pad 
      002588 B6 84            [ 1] 4415 	ld a,TK_INTGR
      00258A 81               [ 4] 4416 	ret 
                                   4417 
                                   4418 
                                   4419 ;------------------------------
                                   4420 ;      dictionary 
                                   4421 ; format:
                                   4422 ;   link:   2 bytes 
                                   4423 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   4424 ;   cmd_name: 16 byte max 
                                   4425 ;   cmd_index: 2 bytes 
                                   4426 ;------------------------------
                                   4427 	.macro _dict_entry len,name,cmd_idx 
                                   4428 	.word LINK 
                                   4429 	LINK=.
                                   4430 name:
                                   4431 	.byte len 	
                                   4432 	.ascii "name"
                                   4433 	.word cmd_idx 
                                   4434 	.endm 
                                   4435 
                           000000  4436 	LINK=0
                                   4437 ; respect alphabetic order for BASIC names from Z-A
                                   4438 ; this sort order is for a cleaner WORDS cmd output. 	
      00258B                       4439 kword_end:
      00258B                       4440 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      00258B 00 00                    1 	.word LINK 
                           00258D     2 	LINK=.
      00258D                          3 XOR:
      00258D 43                       4 	.byte 3+F_IFUNC 	
      00258E 58 4F 52                 5 	.ascii "XOR"
      002591 00 C2                    6 	.word XOR_IDX 
      002593                       4441 	_dict_entry,5,WRITE,WRITE_IDX;write  
      002593 25 8D                    1 	.word LINK 
                           002595     2 	LINK=.
      002595                          3 WRITE:
      002595 05                       4 	.byte 5 	
      002596 57 52 49 54 45           5 	.ascii "WRITE"
      00259B 00 C0                    6 	.word WRITE_IDX 
      00259D                       4442 	_dict_entry,5,WORDS,WORDS_IDX;words 
      00259D 25 95                    1 	.word LINK 
                           00259F     2 	LINK=.
      00259F                          3 WORDS:
      00259F 05                       4 	.byte 5 	
      0025A0 57 4F 52 44 53           5 	.ascii "WORDS"
      0025A5 00 BE                    6 	.word WORDS_IDX 
      0025A7                       4443 	_dict_entry 4,WAIT,WAIT_IDX;wait 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0025A7 25 9F                    1 	.word LINK 
                           0025A9     2 	LINK=.
      0025A9                          3 WAIT:
      0025A9 04                       4 	.byte 4 	
      0025AA 57 41 49 54              5 	.ascii "WAIT"
      0025AE 00 BC                    6 	.word WAIT_IDX 
      0025B0                       4444 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      0025B0 25 A9                    1 	.word LINK 
                           0025B2     2 	LINK=.
      0025B2                          3 USR:
      0025B2 43                       4 	.byte 3+F_IFUNC 	
      0025B3 55 53 52                 5 	.ascii "USR"
      0025B6 00 BA                    6 	.word USR_IDX 
      0025B8                       4445 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      0025B8 25 B2                    1 	.word LINK 
                           0025BA     2 	LINK=.
      0025BA                          3 UNTIL:
      0025BA 05                       4 	.byte 5 	
      0025BB 55 4E 54 49 4C           5 	.ascii "UNTIL"
      0025C0 00 B8                    6 	.word UNTIL_IDX 
      0025C2                       4446 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      0025C2 25 BA                    1 	.word LINK 
                           0025C4     2 	LINK=.
      0025C4                          3 UFLASH:
      0025C4 46                       4 	.byte 6+F_IFUNC 	
      0025C5 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      0025CB 00 B6                    6 	.word UFLASH_IDX 
      0025CD                       4447 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      0025CD 25 C4                    1 	.word LINK 
                           0025CF     2 	LINK=.
      0025CF                          3 UBOUND:
      0025CF 46                       4 	.byte 6+F_IFUNC 	
      0025D0 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      0025D6 00 B4                    6 	.word UBOUND_IDX 
      0025D8                       4448 	_dict_entry,4,TONE,TONE_IDX;tone  
      0025D8 25 CF                    1 	.word LINK 
                           0025DA     2 	LINK=.
      0025DA                          3 TONE:
      0025DA 04                       4 	.byte 4 	
      0025DB 54 4F 4E 45              5 	.ascii "TONE"
      0025DF 00 B2                    6 	.word TONE_IDX 
      0025E1                       4449 	_dict_entry,2,TO,TO_IDX;to
      0025E1 25 DA                    1 	.word LINK 
                           0025E3     2 	LINK=.
      0025E3                          3 TO:
      0025E3 02                       4 	.byte 2 	
      0025E4 54 4F                    5 	.ascii "TO"
      0025E6 00 B0                    6 	.word TO_IDX 
      0025E8                       4450 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      0025E8 25 E3                    1 	.word LINK 
                           0025EA     2 	LINK=.
      0025EA                          3 TIMER:
      0025EA 05                       4 	.byte 5 	
      0025EB 54 49 4D 45 52           5 	.ascii "TIMER"
      0025F0 00 AC                    6 	.word TIMER_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      0025F2                       4451 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      0025F2 25 EA                    1 	.word LINK 
                           0025F4     2 	LINK=.
      0025F4                          3 TIMEOUT:
      0025F4 47                       4 	.byte 7+F_IFUNC 	
      0025F5 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      0025FC 00 AE                    6 	.word TMROUT_IDX 
      0025FE                       4452 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      0025FE 25 F4                    1 	.word LINK 
                           002600     2 	LINK=.
      002600                          3 TICKS:
      002600 45                       4 	.byte 5+F_IFUNC 	
      002601 54 49 43 4B 53           5 	.ascii "TICKS"
      002606 00 AA                    6 	.word TICKS_IDX 
      002608                       4453 	_dict_entry,4,STOP,STOP_IDX;stop 
      002608 26 00                    1 	.word LINK 
                           00260A     2 	LINK=.
      00260A                          3 STOP:
      00260A 04                       4 	.byte 4 	
      00260B 53 54 4F 50              5 	.ascii "STOP"
      00260F 00 A8                    6 	.word STOP_IDX 
      002611                       4454 	_dict_entry,4,STEP,STEP_IDX;step 
      002611 26 0A                    1 	.word LINK 
                           002613     2 	LINK=.
      002613                          3 STEP:
      002613 04                       4 	.byte 4 	
      002614 53 54 45 50              5 	.ascii "STEP"
      002618 00 A6                    6 	.word STEP_IDX 
      00261A                       4455 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      00261A 26 13                    1 	.word LINK 
                           00261C     2 	LINK=.
      00261C                          3 SPIWR:
      00261C 05                       4 	.byte 5 	
      00261D 53 50 49 57 52           5 	.ascii "SPIWR"
      002622 00 A4                    6 	.word SPIWR_IDX 
      002624                       4456 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      002624 26 1C                    1 	.word LINK 
                           002626     2 	LINK=.
      002626                          3 SPISEL:
      002626 06                       4 	.byte 6 	
      002627 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      00262D 00 A2                    6 	.word SPISEL_IDX 
      00262F                       4457 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      00262F 26 26                    1 	.word LINK 
                           002631     2 	LINK=.
      002631                          3 SPIRD:
      002631 45                       4 	.byte 5+F_IFUNC 	
      002632 53 50 49 52 44           5 	.ascii "SPIRD"
      002637 00 9E                    6 	.word SPIRD_IDX 
      002639                       4458 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      002639 26 31                    1 	.word LINK 
                           00263B     2 	LINK=.
      00263B                          3 SPIEN:
      00263B 05                       4 	.byte 5 	
      00263C 53 50 49 45 4E           5 	.ascii "SPIEN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      002641 00 A0                    6 	.word SPIEN_IDX 
      002643                       4459 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      002643 26 3B                    1 	.word LINK 
                           002645     2 	LINK=.
      002645                          3 SLEEP:
      002645 05                       4 	.byte 5 	
      002646 53 4C 45 45 50           5 	.ascii "SLEEP"
      00264B 00 9C                    6 	.word SLEEP_IDX 
      00264D                       4460     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      00264D 26 45                    1 	.word LINK 
                           00264F     2 	LINK=.
      00264F                          3 SIZE:
      00264F 04                       4 	.byte 4 	
      002650 53 49 5A 45              5 	.ascii "SIZE"
      002654 00 C4                    6 	.word SIZE_IDX 
      002656                       4461 	_dict_entry,4,SHOW,SHOW_IDX;show 
      002656 26 4F                    1 	.word LINK 
                           002658     2 	LINK=.
      002658                          3 SHOW:
      002658 04                       4 	.byte 4 	
      002659 53 48 4F 57              5 	.ascii "SHOW"
      00265D 00 98                    6 	.word SHOW_IDX 
      00265F                       4462 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      00265F 26 58                    1 	.word LINK 
                           002661     2 	LINK=.
      002661                          3 SAVE:
      002661 04                       4 	.byte 4 	
      002662 53 41 56 45              5 	.ascii "SAVE"
      002666 00 36                    6 	.word SAVE_IDX 
      002668                       4463 	_dict_entry 3,RUN,RUN_IDX;run
      002668 26 61                    1 	.word LINK 
                           00266A     2 	LINK=.
      00266A                          3 RUN:
      00266A 03                       4 	.byte 3 	
      00266B 52 55 4E                 5 	.ascii "RUN"
      00266E 00 96                    6 	.word RUN_IDX 
      002670                       4464 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      002670 26 6A                    1 	.word LINK 
                           002672     2 	LINK=.
      002672                          3 RSHIFT:
      002672 46                       4 	.byte 6+F_IFUNC 	
      002673 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      002679 00 94                    6 	.word RSHIFT_IDX 
      00267B                       4465 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      00267B 26 72                    1 	.word LINK 
                           00267D     2 	LINK=.
      00267D                          3 RND:
      00267D 43                       4 	.byte 3+F_IFUNC 	
      00267E 52 4E 44                 5 	.ascii "RND"
      002681 00 92                    6 	.word RND_IDX 
      002683                       4466 	_dict_entry,6,RETURN,RET_IDX;return 
      002683 26 7D                    1 	.word LINK 
                           002685     2 	LINK=.
      002685                          3 RETURN:
      002685 06                       4 	.byte 6 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      002686 52 45 54 55 52 4E        5 	.ascii "RETURN"
      00268C 00 90                    6 	.word RET_IDX 
      00268E                       4467 	_dict_entry,7,RESTORE,REST_IDX;restore 
      00268E 26 85                    1 	.word LINK 
                           002690     2 	LINK=.
      002690                          3 RESTORE:
      002690 07                       4 	.byte 7 	
      002691 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      002698 00 8E                    6 	.word REST_IDX 
      00269A                       4468 	_dict_entry 6,REMARK,REM_IDX;remark 
      00269A 26 90                    1 	.word LINK 
                           00269C     2 	LINK=.
      00269C                          3 REMARK:
      00269C 06                       4 	.byte 6 	
      00269D 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      0026A3 00 8C                    6 	.word REM_IDX 
      0026A5                       4469 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      0026A5 26 9C                    1 	.word LINK 
                           0026A7     2 	LINK=.
      0026A7                          3 REBOOT:
      0026A7 06                       4 	.byte 6 	
      0026A8 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0026AE 00 8A                    6 	.word RBT_IDX 
      0026B0                       4470 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      0026B0 26 A7                    1 	.word LINK 
                           0026B2     2 	LINK=.
      0026B2                          3 READ:
      0026B2 44                       4 	.byte 4+F_IFUNC 	
      0026B3 52 45 41 44              5 	.ascii "READ"
      0026B7 00 88                    6 	.word READ_IDX 
      0026B9                       4471 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      0026B9 26 B2                    1 	.word LINK 
                           0026BB     2 	LINK=.
      0026BB                          3 QKEY:
      0026BB 44                       4 	.byte 4+F_IFUNC 	
      0026BC 51 4B 45 59              5 	.ascii "QKEY"
      0026C0 00 86                    6 	.word QKEY_IDX 
      0026C2                       4472 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      0026C2 26 BB                    1 	.word LINK 
                           0026C4     2 	LINK=.
      0026C4                          3 PRTI:
      0026C4 44                       4 	.byte 4+F_IFUNC 	
      0026C5 50 52 54 49              5 	.ascii "PRTI"
      0026C9 00 84                    6 	.word PRTI_IDX 
      0026CB                       4473 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      0026CB 26 C4                    1 	.word LINK 
                           0026CD     2 	LINK=.
      0026CD                          3 PRTH:
      0026CD 44                       4 	.byte 4+F_IFUNC 	
      0026CE 50 52 54 48              5 	.ascii "PRTH"
      0026D2 00 82                    6 	.word PRTH_IDX 
      0026D4                       4474 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      0026D4 26 CD                    1 	.word LINK 
                           0026D6     2 	LINK=.
      0026D6                          3 PRTG:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0026D6 44                       4 	.byte 4+F_IFUNC 	
      0026D7 50 52 54 47              5 	.ascii "PRTG"
      0026DB 00 80                    6 	.word PRTG_IDX 
      0026DD                       4475 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      0026DD 26 D6                    1 	.word LINK 
                           0026DF     2 	LINK=.
      0026DF                          3 PRTF:
      0026DF 44                       4 	.byte 4+F_IFUNC 	
      0026E0 50 52 54 46              5 	.ascii "PRTF"
      0026E4 00 7E                    6 	.word PRTF_IDX 
      0026E6                       4476 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      0026E6 26 DF                    1 	.word LINK 
                           0026E8     2 	LINK=.
      0026E8                          3 PRTE:
      0026E8 44                       4 	.byte 4+F_IFUNC 	
      0026E9 50 52 54 45              5 	.ascii "PRTE"
      0026ED 00 7C                    6 	.word PRTE_IDX 
      0026EF                       4477 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      0026EF 26 E8                    1 	.word LINK 
                           0026F1     2 	LINK=.
      0026F1                          3 PRTD:
      0026F1 44                       4 	.byte 4+F_IFUNC 	
      0026F2 50 52 54 44              5 	.ascii "PRTD"
      0026F6 00 7A                    6 	.word PRTD_IDX 
      0026F8                       4478 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      0026F8 26 F1                    1 	.word LINK 
                           0026FA     2 	LINK=.
      0026FA                          3 PRTC:
      0026FA 44                       4 	.byte 4+F_IFUNC 	
      0026FB 50 52 54 43              5 	.ascii "PRTC"
      0026FF 00 78                    6 	.word PRTC_IDX 
      002701                       4479 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      002701 26 FA                    1 	.word LINK 
                           002703     2 	LINK=.
      002703                          3 PRTB:
      002703 44                       4 	.byte 4+F_IFUNC 	
      002704 50 52 54 42              5 	.ascii "PRTB"
      002708 00 76                    6 	.word PRTB_IDX 
      00270A                       4480 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      00270A 27 03                    1 	.word LINK 
                           00270C     2 	LINK=.
      00270C                          3 PRTA:
      00270C 44                       4 	.byte 4+F_IFUNC 	
      00270D 50 52 54 41              5 	.ascii "PRTA"
      002711 00 74                    6 	.word PRTA_IDX 
      002713                       4481 	_dict_entry 5,PRINT,PRT_IDX;print 
      002713 27 0C                    1 	.word LINK 
                           002715     2 	LINK=.
      002715                          3 PRINT:
      002715 05                       4 	.byte 5 	
      002716 50 52 49 4E 54           5 	.ascii "PRINT"
      00271B 00 72                    6 	.word PRT_IDX 
      00271D                       4482 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      00271D 27 15                    1 	.word LINK 
                           00271F     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      00271F                          3 POUT:
      00271F 44                       4 	.byte 4+F_IFUNC 	
      002720 50 4F 55 54              5 	.ascii "POUT"
      002724 00 70                    6 	.word POUT_IDX 
      002726                       4483 	_dict_entry,4,POKE,POKE_IDX;poke 
      002726 27 1F                    1 	.word LINK 
                           002728     2 	LINK=.
      002728                          3 POKE:
      002728 04                       4 	.byte 4 	
      002729 50 4F 4B 45              5 	.ascii "POKE"
      00272D 00 6E                    6 	.word POKE_IDX 
      00272F                       4484 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      00272F 27 28                    1 	.word LINK 
                           002731     2 	LINK=.
      002731                          3 PMODE:
      002731 05                       4 	.byte 5 	
      002732 50 4D 4F 44 45           5 	.ascii "PMODE"
      002737 00 68                    6 	.word PMODE_IDX 
      002739                       4485 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      002739 27 31                    1 	.word LINK 
                           00273B     2 	LINK=.
      00273B                          3 PINP:
      00273B 44                       4 	.byte 4+F_IFUNC 	
      00273C 50 49 4E 50              5 	.ascii "PINP"
      002740 00 6C                    6 	.word PINP_IDX 
      002742                       4486 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      002742 27 3B                    1 	.word LINK 
                           002744     2 	LINK=.
      002744                          3 PEEK:
      002744 44                       4 	.byte 4+F_IFUNC 	
      002745 50 45 45 4B              5 	.ascii "PEEK"
      002749 00 6A                    6 	.word PEEK_IDX 
      00274B                       4487 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      00274B 27 44                    1 	.word LINK 
                           00274D     2 	LINK=.
      00274D                          3 PAUSE:
      00274D 05                       4 	.byte 5 	
      00274E 50 41 55 53 45           5 	.ascii "PAUSE"
      002753 00 66                    6 	.word PAUSE_IDX 
      002755                       4488 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      002755 27 4D                    1 	.word LINK 
                           002757     2 	LINK=.
      002757                          3 PAD:
      002757 43                       4 	.byte 3+F_IFUNC 	
      002758 50 41 44                 5 	.ascii "PAD"
      00275B 00 64                    6 	.word PAD_IDX 
      00275D                       4489 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      00275D 27 57                    1 	.word LINK 
                           00275F     2 	LINK=.
      00275F                          3 OR:
      00275F 42                       4 	.byte 2+F_IFUNC 	
      002760 4F 52                    5 	.ascii "OR"
      002762 00 62                    6 	.word OR_IDX 
      002764                       4490 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      002764 27 5F                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                           002766     2 	LINK=.
      002766                          3 ODR:
      002766 43                       4 	.byte 3+F_IFUNC 	
      002767 4F 44 52                 5 	.ascii "ODR"
      00276A 00 60                    6 	.word ODR_IDX 
      00276C                       4491 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      00276C 27 66                    1 	.word LINK 
                           00276E     2 	LINK=.
      00276E                          3 NOT:
      00276E 43                       4 	.byte 3+F_IFUNC 	
      00276F 4E 4F 54                 5 	.ascii "NOT"
      002772 00 5E                    6 	.word NOT_IDX 
      002774                       4492 	_dict_entry,4,NEXT,NEXT_IDX;next 
      002774 27 6E                    1 	.word LINK 
                           002776     2 	LINK=.
      002776                          3 NEXT:
      002776 04                       4 	.byte 4 	
      002777 4E 45 58 54              5 	.ascii "NEXT"
      00277B 00 5A                    6 	.word NEXT_IDX 
      00277D                       4493 	_dict_entry,3,NEW,NEW_IDX;new
      00277D 27 76                    1 	.word LINK 
                           00277F     2 	LINK=.
      00277F                          3 NEW:
      00277F 03                       4 	.byte 3 	
      002780 4E 45 57                 5 	.ascii "NEW"
      002783 00 5C                    6 	.word NEW_IDX 
      002785                       4494 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      002785 27 7F                    1 	.word LINK 
                           002787     2 	LINK=.
      002787                          3 MULDIV:
      002787 46                       4 	.byte 6+F_IFUNC 	
      002788 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      00278E 00 58                    6 	.word MULDIV_IDX 
      002790                       4495 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      002790 27 87                    1 	.word LINK 
                           002792     2 	LINK=.
      002792                          3 LSHIFT:
      002792 46                       4 	.byte 6+F_IFUNC 	
      002793 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      002799 00 56                    6 	.word LSHIFT_IDX 
      00279B                       4496 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      00279B 27 92                    1 	.word LINK 
                           00279D     2 	LINK=.
      00279D                          3 LOG:
      00279D 43                       4 	.byte 3+F_IFUNC 	
      00279E 4C 4F 47                 5 	.ascii "LOG"
      0027A1 00 54                    6 	.word LOG_IDX 
      0027A3                       4497 	_dict_entry 4,LIST,LIST_IDX;list
      0027A3 27 9D                    1 	.word LINK 
                           0027A5     2 	LINK=.
      0027A5                          3 LIST:
      0027A5 04                       4 	.byte 4 	
      0027A6 4C 49 53 54              5 	.ascii "LIST"
      0027AA 00 52                    6 	.word LIST_IDX 
      0027AC                       4498 	_dict_entry 3,LET,LET_IDX;let 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0027AC 27 A5                    1 	.word LINK 
                           0027AE     2 	LINK=.
      0027AE                          3 LET:
      0027AE 03                       4 	.byte 3 	
      0027AF 4C 45 54                 5 	.ascii "LET"
      0027B2 00 50                    6 	.word LET_IDX 
      0027B4                       4499 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      0027B4 27 AE                    1 	.word LINK 
                           0027B6     2 	LINK=.
      0027B6                          3 KEY:
      0027B6 43                       4 	.byte 3+F_IFUNC 	
      0027B7 4B 45 59                 5 	.ascii "KEY"
      0027BA 00 4E                    6 	.word KEY_IDX 
      0027BC                       4500 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      0027BC 27 B6                    1 	.word LINK 
                           0027BE     2 	LINK=.
      0027BE                          3 IWDGREF:
      0027BE 07                       4 	.byte 7 	
      0027BF 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      0027C6 00 4C                    6 	.word IWDGREF_IDX 
      0027C8                       4501 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      0027C8 27 BE                    1 	.word LINK 
                           0027CA     2 	LINK=.
      0027CA                          3 IWDGEN:
      0027CA 06                       4 	.byte 6 	
      0027CB 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      0027D1 00 4A                    6 	.word IWDGEN_IDX 
      0027D3                       4502 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      0027D3 27 CA                    1 	.word LINK 
                           0027D5     2 	LINK=.
      0027D5                          3 INVERT:
      0027D5 46                       4 	.byte 6+F_IFUNC 	
      0027D6 49 4E 56 45 52 54        5 	.ascii "INVERT"
      0027DC 00 48                    6 	.word INVERT_IDX 
      0027DE                       4503 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      0027DE 27 D5                    1 	.word LINK 
                           0027E0     2 	LINK=.
      0027E0                          3 INPUT:
      0027E0 05                       4 	.byte 5 	
      0027E1 49 4E 50 55 54           5 	.ascii "INPUT"
      0027E6 00 46                    6 	.word INPUT_IDX 
      0027E8                       4504 	_dict_entry,2,IF,IF_IDX;if 
      0027E8 27 E0                    1 	.word LINK 
                           0027EA     2 	LINK=.
      0027EA                          3 IF:
      0027EA 02                       4 	.byte 2 	
      0027EB 49 46                    5 	.ascii "IF"
      0027ED 00 44                    6 	.word IF_IDX 
      0027EF                       4505 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      0027EF 27 EA                    1 	.word LINK 
                           0027F1     2 	LINK=.
      0027F1                          3 IDR:
      0027F1 43                       4 	.byte 3+F_IFUNC 	
      0027F2 49 44 52                 5 	.ascii "IDR"
      0027F5 00 42                    6 	.word IDR_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      0027F7                       4506 	_dict_entry,3,HEX,HEX_IDX;hex_base
      0027F7 27 F1                    1 	.word LINK 
                           0027F9     2 	LINK=.
      0027F9                          3 HEX:
      0027F9 03                       4 	.byte 3 	
      0027FA 48 45 58                 5 	.ascii "HEX"
      0027FD 00 40                    6 	.word HEX_IDX 
      0027FF                       4507 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      0027FF 27 F9                    1 	.word LINK 
                           002801     2 	LINK=.
      002801                          3 GPIO:
      002801 44                       4 	.byte 4+F_IFUNC 	
      002802 47 50 49 4F              5 	.ascii "GPIO"
      002806 00 3E                    6 	.word GPIO_IDX 
      002808                       4508 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      002808 28 01                    1 	.word LINK 
                           00280A     2 	LINK=.
      00280A                          3 GOTO:
      00280A 04                       4 	.byte 4 	
      00280B 47 4F 54 4F              5 	.ascii "GOTO"
      00280F 00 3C                    6 	.word GOTO_IDX 
      002811                       4509 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      002811 28 0A                    1 	.word LINK 
                           002813     2 	LINK=.
      002813                          3 GOSUB:
      002813 05                       4 	.byte 5 	
      002814 47 4F 53 55 42           5 	.ascii "GOSUB"
      002819 00 3A                    6 	.word GOSUB_IDX 
      00281B                       4510 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      00281B 28 13                    1 	.word LINK 
                           00281D     2 	LINK=.
      00281D                          3 FREE:
      00281D 44                       4 	.byte 4+F_IFUNC 	
      00281E 46 52 45 45              5 	.ascii "FREE"
      002822 00 9A                    6 	.word FREE_IDX 
      002824                       4511 	_dict_entry,3,FOR,FOR_IDX;for 
      002824 28 1D                    1 	.word LINK 
                           002826     2 	LINK=.
      002826                          3 FOR:
      002826 03                       4 	.byte 3 	
      002827 46 4F 52                 5 	.ascii "FOR"
      00282A 00 38                    6 	.word FOR_IDX 
      00282C                       4512 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      00282C 28 26                    1 	.word LINK 
                           00282E     2 	LINK=.
      00282E                          3 FCPU:
      00282E 04                       4 	.byte 4 	
      00282F 46 43 50 55              5 	.ascii "FCPU"
      002833 00 34                    6 	.word FCPU_IDX 
      002835                       4513 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      002835 28 2E                    1 	.word LINK 
                           002837     2 	LINK=.
      002837                          3 ERASE:
      002837 05                       4 	.byte 5 	
      002838 45 52 41 53 45           5 	.ascii "ERASE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      00283D 00 32                    6 	.word ERASE_IDX 
      00283F                       4514 	_dict_entry,3,END,END_IDX;cmd_end  
      00283F 28 37                    1 	.word LINK 
                           002841     2 	LINK=.
      002841                          3 END:
      002841 03                       4 	.byte 3 	
      002842 45 4E 44                 5 	.ascii "END"
      002845 00 30                    6 	.word END_IDX 
      002847                       4515 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      002847 28 41                    1 	.word LINK 
                           002849     2 	LINK=.
      002849                          3 EEPROM:
      002849 46                       4 	.byte 6+F_IFUNC 	
      00284A 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      002850 00 2E                    6 	.word EEPROM_IDX 
      002852                       4516 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      002852 28 49                    1 	.word LINK 
                           002854     2 	LINK=.
      002854                          3 EDIT:
      002854 04                       4 	.byte 4 	
      002855 45 44 49 54              5 	.ascii "EDIT"
      002859 00 2C                    6 	.word EDIT_IDX 
      00285B                       4517 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      00285B 28 54                    1 	.word LINK 
                           00285D     2 	LINK=.
      00285D                          3 DWRITE:
      00285D 06                       4 	.byte 6+F_CMD 	
      00285E 44 57 52 49 54 45        5 	.ascii "DWRITE"
      002864 00 2A                    6 	.word DWRITE_IDX 
      002866                       4518 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      002866 28 5D                    1 	.word LINK 
                           002868     2 	LINK=.
      002868                          3 DREAD:
      002868 45                       4 	.byte 5+F_IFUNC 	
      002869 44 52 45 41 44           5 	.ascii "DREAD"
      00286E 00 28                    6 	.word DREAD_IDX 
      002870                       4519 	_dict_entry,2,DO,DO_IDX;do_loop
      002870 28 68                    1 	.word LINK 
                           002872     2 	LINK=.
      002872                          3 DO:
      002872 02                       4 	.byte 2 	
      002873 44 4F                    5 	.ascii "DO"
      002875 00 26                    6 	.word DO_IDX 
      002877                       4520 	_dict_entry,3,DEC,DEC_IDX;dec_base
      002877 28 72                    1 	.word LINK 
                           002879     2 	LINK=.
      002879                          3 DEC:
      002879 03                       4 	.byte 3 	
      00287A 44 45 43                 5 	.ascii "DEC"
      00287D 00 24                    6 	.word DEC_IDX 
      00287F                       4521 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      00287F 28 79                    1 	.word LINK 
                           002881     2 	LINK=.
      002881                          3 DDR:
      002881 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      002882 44 44 52                 5 	.ascii "DDR"
      002885 00 22                    6 	.word DDR_IDX 
      002887                       4522 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      002887 28 81                    1 	.word LINK 
                           002889     2 	LINK=.
      002889                          3 DATALN:
      002889 06                       4 	.byte 6 	
      00288A 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      002890 00 20                    6 	.word DATALN_IDX 
      002892                       4523 	_dict_entry,4,DATA,DATA_IDX;data  
      002892 28 89                    1 	.word LINK 
                           002894     2 	LINK=.
      002894                          3 DATA:
      002894 04                       4 	.byte 4 	
      002895 44 41 54 41              5 	.ascii "DATA"
      002899 00 1E                    6 	.word DATA_IDX 
      00289B                       4524 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      00289B 28 94                    1 	.word LINK 
                           00289D     2 	LINK=.
      00289D                          3 CRL:
      00289D 43                       4 	.byte 3+F_IFUNC 	
      00289E 43 52 4C                 5 	.ascii "CRL"
      0028A1 00 1C                    6 	.word CRL_IDX 
      0028A3                       4525 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      0028A3 28 9D                    1 	.word LINK 
                           0028A5     2 	LINK=.
      0028A5                          3 CRH:
      0028A5 43                       4 	.byte 3+F_IFUNC 	
      0028A6 43 52 48                 5 	.ascii "CRH"
      0028A9 00 1A                    6 	.word CRH_IDX 
      0028AB                       4526 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      0028AB 28 A5                    1 	.word LINK 
                           0028AD     2 	LINK=.
      0028AD                          3 CHAR:
      0028AD 84                       4 	.byte 4+F_CFUNC 	
      0028AE 43 48 41 52              5 	.ascii "CHAR"
      0028B2 00 18                    6 	.word CHAR_IDX 
      0028B4                       4527 	_dict_entry,3,BYE,BYE_IDX;bye 
      0028B4 28 AD                    1 	.word LINK 
                           0028B6     2 	LINK=.
      0028B6                          3 BYE:
      0028B6 03                       4 	.byte 3 	
      0028B7 42 59 45                 5 	.ascii "BYE"
      0028BA 00 16                    6 	.word BYE_IDX 
      0028BC                       4528 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      0028BC 28 B6                    1 	.word LINK 
                           0028BE     2 	LINK=.
      0028BE                          3 BTOGL:
      0028BE 05                       4 	.byte 5 	
      0028BF 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0028C4 00 14                    6 	.word BTOGL_IDX 
      0028C6                       4529 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      0028C6 28 BE                    1 	.word LINK 
                           0028C8     2 	LINK=.
      0028C8                          3 BTEST:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      0028C8 45                       4 	.byte 5+F_IFUNC 	
      0028C9 42 54 45 53 54           5 	.ascii "BTEST"
      0028CE 00 12                    6 	.word BTEST_IDX 
      0028D0                       4530 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      0028D0 28 C8                    1 	.word LINK 
                           0028D2     2 	LINK=.
      0028D2                          3 BSET:
      0028D2 04                       4 	.byte 4 	
      0028D3 42 53 45 54              5 	.ascii "BSET"
      0028D7 00 10                    6 	.word BSET_IDX 
      0028D9                       4531 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      0028D9 28 D2                    1 	.word LINK 
                           0028DB     2 	LINK=.
      0028DB                          3 BRES:
      0028DB 04                       4 	.byte 4 	
      0028DC 42 52 45 53              5 	.ascii "BRES"
      0028E0 00 0E                    6 	.word BRES_IDX 
      0028E2                       4532 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      0028E2 28 DB                    1 	.word LINK 
                           0028E4     2 	LINK=.
      0028E4                          3 BIT:
      0028E4 43                       4 	.byte 3+F_IFUNC 	
      0028E5 42 49 54                 5 	.ascii "BIT"
      0028E8 00 0C                    6 	.word BIT_IDX 
      0028EA                       4533 	_dict_entry,3,AWU,AWU_IDX;awu 
      0028EA 28 E4                    1 	.word LINK 
                           0028EC     2 	LINK=.
      0028EC                          3 AWU:
      0028EC 03                       4 	.byte 3 	
      0028ED 41 57 55                 5 	.ascii "AWU"
      0028F0 00 0A                    6 	.word AWU_IDX 
      0028F2                       4534 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      0028F2 28 EC                    1 	.word LINK 
                           0028F4     2 	LINK=.
      0028F4                          3 ASC:
      0028F4 43                       4 	.byte 3+F_IFUNC 	
      0028F5 41 53 43                 5 	.ascii "ASC"
      0028F8 00 08                    6 	.word ASC_IDX 
      0028FA                       4535 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      0028FA 28 F4                    1 	.word LINK 
                           0028FC     2 	LINK=.
      0028FC                          3 AND:
      0028FC 43                       4 	.byte 3+F_IFUNC 	
      0028FD 41 4E 44                 5 	.ascii "AND"
      002900 00 06                    6 	.word AND_IDX 
      002902                       4536 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      002902 28 FC                    1 	.word LINK 
                           002904     2 	LINK=.
      002904                          3 ADCREAD:
      002904 47                       4 	.byte 7+F_IFUNC 	
      002905 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      00290C 00 04                    6 	.word ADCREAD_IDX 
      00290E                       4537 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      00290E 29 04                    1 	.word LINK 
                           002910     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      002910                          3 ADCON:
      002910 05                       4 	.byte 5 	
      002911 41 44 43 4F 4E           5 	.ascii "ADCON"
      002916 00 02                    6 	.word ADCON_IDX 
      002918                       4538 kword_dict::
      002918                       4539 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      002918 29 10                    1 	.word LINK 
                           00291A     2 	LINK=.
      00291A                          3 ABS:
      00291A 43                       4 	.byte 3+F_IFUNC 	
      00291B 41 42 53                 5 	.ascii "ABS"
      00291E 00 00                    6 	.word ABS_IDX 
                                   4540 
                                   4541 ;comands and fonctions address table 	
      002920                       4542 code_addr::
      002920 20 BD 1C D9 1D 15 20  4543 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             D1 1F AE 20 6E 23 1F
      00292E 1A 67 1A 57 1A 88 1A  4544 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             78 20 47 1F 9C 23 D9
      00293C 23 D3 23 F1 23 F7 23  4545 	.word const_cr1,data,data_line,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             CD 17 8D 23 48 1D 49
             1D 79
      00294C 18 D2 23 EB 1C 85 1E  4546 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto,gpio ; 24..31 
             41 21 4B 1E AD 1A E3
             1B EE 1B D3 1F EA
      002960 17 88 23 C7 1A CF 19  4547 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             BC 23 39 22 C9 22 FF
             1F D5
      002970 18 0A 18 3D 23 04 21  4548 	.word let,list,log2,lshift,muldiv,next,new ; 40..47
             19 15 2C 1B 63 1E 00
      00297E 22 BC 23 C1 20 E9 25  4549 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             85 20 5B 21 57 1A BE
             23 E5
      00298E 1A AF 23 DF 19 36 23  4550 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             8B 23 91 23 97 23 9D
             23 A3
      00299E 23 A9 23 AF 23 B5 23  4551 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             BB 1F DD 24 74 0E 51
             1A 2C
      0029AE 24 25 1C 0E 21 D3 21  4552 	.word restore,return, random,rshift,run,show,free ; 72..79
             32 1C 2C 17 47 17 92
      0029BC 20 50 25 66 24 CE 25  4553 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             6E 25 46 1B 3C 1D B4
             20 B7
      0029CC 22 A0 22 AF 1B 0C 1C  4554 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             95 18 00 20 14 23 5D
             20 2A
      0029DC 1A 32 22 3A 1F 65 21  4555 	.word wait,words,write,bit_xor,cmd_size ; 96..99
             01 17 AB
      0029E6 00 00                 4556 	.word 0 
                                   4557 
                                   4558 
                                   4559 
                                   4560 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      002A00                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      002A00                         30 app_space::
      002A00 00 00                   31 app_sign: .word 0 ; .ascii "BC"  ; signature 
      002A02 00 00                   32 app_size: .word 0 ; 31 
      002A04                         33 app: 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     35 ;;  BASIC code demo 'BLINK.BAS' 
                                     36 ;; 10 do btogl $500a,32 pause 250 until qkey bres $500a,32 end 
                                     37 ;; byte code generated by compiler.
                                     38 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     39 ;.byte 0,10,31,128,0,38,128,0,20,132,80,10,9,132,0,32,128
                                     40 ;.byte 0,100,132,0,250,128,0,182,129,0,132,128,0,46
                                     41 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   4 ABS        00291A R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   4 ADCON      002910 R
    ADCON_ID=  000002     |   4 ADCREAD    002904 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 AND        0028FC R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 ASC        0028F4 R   |     ASC_IDX =  000008     |     ATTRIB  =  000002 
    AUTORUN_=  004000     |   4 AWU        0028EC R   |   4 AWUHandl   000001 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  00000A     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   4 BIT        0028E4 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000C 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000B     |   4 BRES       0028DB R   |     BRES_IDX=  00000E 
    BS      =  000008     |     BSAVE   =  000001     |   4 BSET       0028D2 R
    BSET_IDX=  000010     |     BSIZE   =  000006     |   4 BTEST      0028C8 R
    BTEST_ID=  000012     |   4 BTOGL      0028BE R   |     BTOGL_ID=  000014 
    BTW     =  000001     |   4 BYE        0028B6 R   |     BYE_IDX =  000016 
    C       =  000001     |     CAN     =  000018     |   4 CANT_DO    001F10 R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  4 CHAR       0028AD R   |     CHAR_IDX=  000018     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMDX    =  000001 
    CMD_END =  000002     |     CNT     =  000006     |     CNTR    =  000003 
    COMMA   =  00002C     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   4 CRH        0028A5 R
    CRH_IDX =  00001A     |   4 CRL        00289D R   |     CRL_IDX =  00001C 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000007     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       002894 R
  4 DATALN     002889 R   |     DATALN_I=  000020     |     DATA_IDX=  00001E 
    DBG_A   =  000005     |     DBG_CC  =  000006     |     DBG_X   =  000003 
    DBG_Y   =  000001     |     DBL     =  000003     |     DBLDIVDN=  000006 
    DBLHI   =  000001     |     DBLLO   =  000003     |     DBL_SIZE=  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   4 DDR        002881 R   |     DDR_IDX =  000022 
    DEBUG   =  000000     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
    DEBUG_PR=  000001     |   4 DEC        002879 R   |     DEC_IDX =  000024 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
    DIVDNDHI=  00000B     |     DIVDNDLO=  00000D     |     DIVISOR =  000001 
    DIVISR  =  000007     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         002872 R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000026 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]

Symbol Table

  4 DREAD      002868 R   |     DREAD_ID=  000028     |   4 DWRITE     00285D R
    DWRITE_I=  00002A     |   4 EDIT       002854 R   |     EDIT_IDX=  00002C 
  4 EEPROM     002849 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002E     |     EEPROM_S=  000800     |     EM      =  000019 
  4 END        002841 R   |     END_IDX =  000030     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   4 ERASE      002837 R
    ERASE_ID=  000032     |     ERR_BAD_=  00000A     |     ERR_BUF_=  00000F 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FAUTORUN=  000006     |     FBREAK  =  000004 
    FCOMP   =  000005     |   4 FCPU       00282E R   |     FCPU_IDX=  000034 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   4 FOR        002826 R   |     FOR_IDX =  000038 
  4 FREE       00281D R   |     FREE_IDX=  00009A     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   4 GOSUB      002813 R
    GOSUB_ID=  00003A     |   4 GOTO       00280A R   |     GOTO_IDX=  00003C 
  4 GPIO       002801 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_IDX=  00003E     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   4 HEX        0027F9 R   |     HEX_IDX =  000040 
    HOME    =  000082     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]

Symbol Table

    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   4 IDR        0027F1 R
    IDR_IDX =  000042     |   4 IF         0027EA R   |     IF_IDX  =  000044 
    IN      =  000005     |     INCR    =  000001     |     INP     =  000000 
  4 INPUT      0027E0 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_ID=  000046     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   4 INVERT     0027D5 R   |     INVERT_I=  000048 
    INW     =  000009     |     IPOS    =  000001     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   4 IWDGEN     0027CA R   |     IWDGEN_I=  00004A 
  4 IWDGREF    0027BE R   |     IWDGREF_=  00004C     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  4 KEY        0027B6 R   |     KEY_END =  000083     |     KEY_IDX =  00004E 
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000002 
  4 LET        0027AE R   |     LET_IDX =  000050     |     LF      =  00000A 
    LIMIT   =  000001     |     LINENO  =  000005     |   4 LINK    =  00291A R
  4 LIST       0027A5 R   |     LIST_IDX=  000052     |     LL      =  000001 
    LLEN    =  000002     |     LL_HB   =  000001     |     LN_PTR  =  000005 
  4 LOG        00279D R   |     LOG_IDX =  000054     |   4 LSHIFT     002792 R
    LSHIFT_I=  000056     |     MAJOR   =  000002     |     MASK    =  000002 
    MATH_OVF=  000000     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
  4 MULDIV     002787 R   |     MULDIV_I=  000058     |     MULOP   =  000003 
    N1      =  000001     |     N2      =  000003     |     NAFR    =  004804 
    NAK     =  000015     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        00277F R   |     NEW_IDX =  00005C     |   4 NEXT       002776 R
    NEXT_IDX=  00005A     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]

Symbol Table

    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  4 NOT        00276E R   |     NOT_IDX =  00005E     |   4 NOT_SAVE   0018FF R
  4 NO_APP     001F4F R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R   |   4 ODR        002766 R
    ODR_IDX =  000060     |     ONOFF   =  000003     |     OP      =  000005 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   4 OR         00275F R   |     OR_IDX  =  000062 
    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVFH    =  000001 
    OVFL    =  000002     |     OVRWR   =  000004     |     PA      =  000000 
  4 PAD        002757 R   |     PAD_IDX =  000064     |     PAD_SIZE=  000080 
  4 PAUSE      00274D R   |     PAUSE_ID=  000066     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  4 PEEK       002744 R   |     PEEK_IDX=  00006A     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PINNO   =  000001     |   4 PINP       00273B R   |     PINP_IDX=  00006C 
    PINVAL  =  000002     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   4 PMODE      002731 R   |     PMODE_ID=  000068 
  4 POKE       002728 R   |     POKE_IDX=  00006E     |     PORT    =  000003 
  4 POUT       00271F R   |     POUT_IDX=  000070     |     PREV    =  000001 
  4 PRINT      002715 R   |   4 PROG_ADD   0017D8 R   |   4 PROG_SIZ   0017EA R
  4 PRTA       00270C R   |     PRTA_IDX=  000074     |   4 PRTB       002703 R
    PRTB_IDX=  000076     |   4 PRTC       0026FA R   |     PRTC_IDX=  000078 
  4 PRTD       0026F1 R   |     PRTD_IDX=  00007A     |   4 PRTE       0026E8 R
    PRTE_IDX=  00007C     |   4 PRTF       0026DF R   |     PRTF_IDX=  00007E 
  4 PRTG       0026D6 R   |     PRTG_IDX=  000080     |   4 PRTH       0026CD R
    PRTH_IDX=  000082     |   4 PRTI       0026C4 R   |     PRTI_IDX=  000084 
    PRT_IDX =  000072     |     PSTR    =  000003     |   4 QKEY       0026BB R
    QKEY_IDX=  000086     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |     RBT_IDX =  00008A     |   4 READ       0026B2 R
    READ_IDX=  000088     |   4 REBOOT     0026A7 R   |     REG     =  000001 
    REGA    =  000001     |     REGX    =  000003     |     REGY    =  000005 
    RELOP   =  000003     |   4 REMARK     00269C R   |     REM_IDX =  00008C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]

Symbol Table

  4 RESTORE    002690 R   |     REST_IDX=  00008E     |     RETL1   =  000001 
  4 RETURN     002685 R   |     RET_ADDR=  000003     |     RET_IDX =  000090 
    RET_INW =  000005     |   4 RND        00267D R   |     RND_IDX =  000092 
    ROP     =  004800     |     RS      =  00001E     |   4 RSHIFT     002672 R
    RSHIFT_I=  000094     |     RST_SR  =  0050B3     |   4 RUN        00266A R
  4 RUNNING    000F34 R   |     RUN_IDX =  000096     |     RXCHAR  =  000001 
    RX_QUEUE=  000008     |   4 SAVE       002661 R   |     SAVEB   =  000002 
    SAVE_IDX=  000036     |     SDIVSR  =  000005     |     SEPARATE=  000000 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
  4 SHOW       002658 R   |     SHOW_IDX=  000098     |     SI      =  00000F 
    SIGN    =  000001     |   4 SIGNATUR   001F0E R   |   4 SIZE       00264F R
    SIZE_IDX=  0000C4     |     SKIP    =  000005     |   4 SLEEP      002645 R
    SLEEP_ID=  00009C     |     SO      =  00000E     |     SOH     =  000001 
    SPACE   =  000020     |   4 SPIEN      00263B R   |     SPIEN_ID=  0000A0 
  4 SPIRD      002631 R   |     SPIRD_ID=  00009E     |   4 SPISEL     002626 R
    SPISEL_I=  0000A2     |   4 SPIWR      00261C R   |     SPIWR_ID=  0000A4 
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_CS_B=  000005     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_SR_B=  000007     |     SPI_SR_C=  000004     |     SPI_SR_M=  000005 
    SPI_SR_O=  000006     |     SPI_SR_R=  000000     |     SPI_SR_T=  000001 
    SPI_SR_W=  000003     |     SPI_TXCR=  005207     |     SQUOT   =  000006 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  0000A0 
  4 STEP       002613 R   |     STEP_IDX=  0000A6     |   4 STOP       00260A R
    STOP_IDX=  0000A8     |     STR     =  000003     |   4 STR_BYTE   0017F9 R
    STX     =  000002     |     SUB     =  00001A     |     SUP     =  000084 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  4 TICKS      002600 R   |     TICKS_ID=  0000AA     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  4 TIMEOUT    0025F4 R   |   4 TIMER      0025EA R   |     TIMER_ID=  0000AC 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000006 
    TK_CFUNC=  000082     |     TK_CHAR =  000003     |     TK_CMD  =  000080 
    TK_COLON=  00000B     |     TK_COMMA=  000009     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LE   =  000036 
    TK_LPARE=  000007     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000008     |     TK_SHARP=  00000A     |     TK_VAR  =  000085 
    TMROUT_I=  0000AE     |   4 TO         0025E3 R   |   4 TONE       0025DA R
    TONE_IDX=  0000B2     |     TO_IDX  =  0000B0     |   4 Timer4Up   00000F R
    U1      =  000001     |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART2   =  000001     |     UART3   =  000002     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   4 UBOUND     0025CF R
    UBOUND_I=  0000B4     |   4 UBTN_Han   000048 R   |   4 UFLASH     0025C4 R
    UFLASH_I=  0000B6     |   4 UNTIL      0025BA R   |     UNTIL_ID=  0000B8 
    US      =  00001F     |   4 USER_ABO   00005B R   |   4 USR        0025B2 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    USR_IDX =  0000BA     |   4 Uart1RxH   00024F R   |   4 UserButt   000024 R
    VAR_ADDR=  000006     |     VSISE   =  000003     |     VSIZ    =  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]

Symbol Table

    VSIZE   =  000006     |     VT      =  00000B     |   4 WAIT       0025A9 R
    WAIT_IDX=  0000BC     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  4 WORDS      00259F R   |     WORDS_ID=  0000BE     |   4 WRITE      002595 R
    WRITE_ID=  0000C0     |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   4 XOR        00258D R   |     XOR_IDX =  0000C2 
    XREG    =  000003     |     XSAVE   =  000005     |     YSAVE   =  000004 
  4 abs        0020BD R   |   5 acc16      00000C GR  |   5 acc24      00000B GR
  5 acc8       00000D GR  |   4 accept_c   00058A R   |   4 add_char   000C65 R
  4 add_spac   000A89 R   |   4 analog_r   001D15 R   |   4 app        002A04 R
  4 app_sign   002A00 R   |   4 app_size   002A02 R   |   4 app_spac   002A00 GR
  4 arduino_   0021B3 R   |   4 arg_list   0015A7 R   |   5 array_si   00001E R
  4 ascii      001FAE R   |   4 at_tst     0008F7 R   |   4 atoi24     001361 GR
  4 atoi_exi   0013C7 R   |   4 awu        00206E R   |   4 awu02      002078 R
  4 bad_port   00200F R   |   5 base       00000A GR  |   5 basicptr   000004 GR
  4 beep       001CA2 R   |   4 beep_1kh   001C8C GR  |   4 bin_exit   0007BD R
  4 bit_and    0020D1 R   |   4 bit_or     0020E9 R   |   4 bit_rese   001A67 R
  4 bit_set    001A57 R   |   4 bit_test   001A88 R   |   4 bit_togg   001A78 R
  4 bit_xor    002101 R   |   4 bitmask    00231F R   |   4 bkslsh_t   0008A4 R
  4 bksp       000328 R   |   4 block_er   00018F R   |   4 break_po   001DE2 R
  4 bye        002047 R   |   4 char       001F9C R   |   4 clear_ba   000F74 R
  4 clear_va   000DD4 R   |   4 clock_in   000076 R   |   4 cmd_end    001C85 R
  4 cmd_line   001193 R   |   4 cmd_name   000C85 R   |   4 cmd_size   0017AB R
  4 code_add   002920 GR  |   4 cold_sta   000E51 R   |   4 colon_ts   0008CB R
  4 comma_ts   0008D6 R   |   4 comp_msg   0010EB R   |   4 compile    0009FC GR
  4 const_cr   0023D3 R   |   4 const_cr   0023D9 R   |   4 const_dd   0023CD R
  4 const_ee   0023EB R   |   4 const_id   0023C7 R   |   4 const_in   0023E5 R
  4 const_od   0023C1 R   |   4 const_ou   0023DF R   |   4 const_po   00238B R
  4 const_po   002391 R   |   4 const_po   002397 R   |   4 const_po   00239D R
  4 const_po   0023A3 R   |   4 const_po   0023A9 R   |   4 const_po   0023AF R
  4 const_po   0023B5 R   |   4 const_po   0023BB R   |   4 convert_   000734 R
  4 convert_   0002EC R   |   4 copy_com   00092C R   |   5 count      000003 GR
  4 cp_loop    001556 R   |   4 cpy_cmd_   000A74 R   |   4 cpy_quot   000AAD R
  4 create_g   00065E R   |   4 cs_high    002580 R   |   4 cstk_pro   001761 R
  4 dash_tst   0008EC R   |   4 data       0023F1 R   |   5 data_len   000009 R
  4 data_lin   0023F7 R   |   5 data_ofs   000008 R   |   5 data_ptr   000006 R
  4 data_sea   002438 R   |   4 dbl_sign   0014B0 R   |   4 dec_base   00178D R
  4 decomp_l   000B5E R   |   4 decompil   000B17 GR  |   4 del_line   000631 R
  4 delete_l   000415 R   |   4 delete_n   000338 R   |   4 delete_u   0003DA R
  4 digital_   001D49 R   |   4 digital_   001D79 R   |   4 div32_16   0014BA R
  4 divide     001511 R   |   4 divu24_8   0012D0 R   |   4 dneg       0014A5 R
  4 do_loop    002348 R   |   4 do_progr   000182 R   |   4 edit       0018D2 R
  4 enable_i   0022C9 R   |   4 eql_tst    000981 R   |   4 equal      000C78 R
  4 erase      001E41 R   |   4 erase_ex   0001AE R   |   4 erase_fl   0001A4 R
  4 err_bad_   001056 R   |   4 err_buf_   0010CC R   |   4 err_cmd_   00101A R
  4 err_div0   000FDF R   |   4 err_dupl   001034 R   |   4 err_math   000FC6 R
  4 err_mem_   000FAB R   |   4 err_msg    000F8B R   |   4 err_no_a   001062 R
  4 err_no_d   001095 R   |   4 err_no_f   0010B9 R   |   4 err_no_l   000FEE R
  4 err_no_p   0010A5 R   |   4 err_not_   001045 R   |   4 err_run_   001004 R
  4 err_synt   000FB8 R   |   4 escaped    000749 GR  |   4 expect     001595 R
  4 expr_exi   0016EC R   |   4 expressi   0016A6 R   |   4 factor     0015F7 R
  5 farptr     000016 R   |   4 fcpu       00214B R   |   4 final_te   000583 R
  4 first_li   00187F R   |   5 flags      000020 GR  |   4 for        001AE3 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]

Symbol Table

  4 free       001792 R   |   7 free_ram   000080 R   |   4 func_arg   0015A2 R
  4 func_not   0022BC R   |   4 ge         000C7A R   |   4 get_arra   0015D2 R
  4 get_cmd_   000AF6 R   |   4 get_esca   0002F8 R   |   4 get_targ   001BAD R
  4 get_tick   0020B7 R   |   4 get_toke   00083D GR  |   4 getc       0002D1 GR
  4 gosub      001BEE R   |   4 goto       001BD3 R   |   4 gpio       001FEA R
  4 gt         000C76 R   |   4 gt_tst     00098C R   |   4 hex_base   001788 R
  4 hex_dump   000D25 R   |   4 if         001ACF R   |   5 in         000001 GR
  5 in.saved   000002 GR  |   5 in.w       000000 GR  |   4 incr_far   001E25 R
  4 input_ex   001A29 R   |   4 input_lo   0019BE R   |   4 input_va   0019BC R
  4 insert_c   000397 R   |   4 insert_l   00068A R   |   4 insert_l   0006F9 R
  4 interp_l   0011D4 R   |   4 interpre   0011AF R   |   4 invert     002339 R
  4 is_alnum   000E02 GR  |   4 is_alpha   000DE8 GR  |   4 is_digit   000DF9 GR
  4 itoa       001265 GR  |   4 itoa_loo   00128A R   |   4 jp_to_ta   001BE1 R
  4 key        001FD5 R   |   4 kw_loop    0007D9 R   |   4 kword_di   002918 GR
  4 kword_en   00258B R   |   4 le         000C7F R   |   4 leading_   00230F R
  4 let        00180A GR  |   4 let_arra   001818 R   |   4 let_var    00181B R
  4 lines_sk   001882 R   |   4 list       00183D R   |   4 list_exi   0018C4 R
  4 list_loo   0018A2 R   |   4 log2       002304 R   |   4 logical_   0022B2 R
  4 long_div   00148D R   |   4 loop_bac   001B90 R   |   5 loop_dep   00001D R
  4 loop_don   001BA5 R   |   4 lshift     002119 R   |   4 lt         000C7D R
  4 lt_tst     0009B5 R   |   4 modulo     001527 R   |   4 move       000D90 GR
  4 move_dow   000DAF R   |   4 move_era   000111 R   |   4 move_exi   000DD0 R
  4 move_lef   00036F R   |   4 move_loo   000DB4 R   |   4 move_prg   000151 R
  4 move_rig   00037D R   |   4 move_up    000DA1 R   |   4 mul_char   000C67 R
  4 muldiv     00152C R   |   4 multiply   001458 R   |   4 mulu24_8   0012F8 R
  4 nbr_tst    000870 R   |   4 ne         000C82 R   |   4 neg_acc2   001332 R
  4 new        001E00 R   |   4 next       001B63 R   |   4 next_lin   0011B7 R
  4 next_tok   0011FB GR  |   4 no_match   001568 R   |   4 other      0009DE R
  4 overwrit   0005AF R   |   2 pad        0016E0 GR  |   4 pad_ref    002585 R
  4 parse_bi   00079B R   |   4 parse_in   000751 R   |   4 parse_ke   0007D8 R
  4 parse_qu   0006FC R   |   4 pause      00205B R   |   4 pause02    002065 R
  4 peek       001ABE R   |   4 pin_mode   002157 R   |   4 plus_tst   000955 R
  4 poke       001AAF R   |   4 power_ad   001CD9 R   |   4 prcnt_ts   000976 R
  4 print      001936 R   |   4 print_ex   001990 R   |   4 print_he   0005E4 GR
  4 print_in   001249 R   |   4 printxy    0013CB R   |   4 prog_siz   001835 R
  4 program_   00012B R   |   4 program_   000151 R   |   4 prt_basi   001916 R
  4 prt_loop   00193A R   |   4 prt_tok    000CB7 R   |   4 prti24     001259 R
  5 ptr16      000017 GR  |   5 ptr8       000018 R   |   4 putc       0002C1 GR
  4 puts       00031E GR  |   4 qgetc      0002CA GR  |   4 qkey       001FDD GR
  4 qmark_ts   000902 R   |   4 qsign      001EA6 R   |   4 random     0021D3 R
  4 read       002474 R   |   4 read01     002476 R   |   4 readln     000423 GR
  4 readln_l   000430 R   |   4 readln_q   0005CC R   |   4 refresh_   0022FF R
  4 rel_exit   001744 R   |   4 relation   0016EF R   |   4 relop_st   000C6A R
  4 remark     001A2C GR  |   4 reset_co   001938 R   |   4 rest_con   0019AC R
  4 restore    002425 R   |   4 return     001C0E R   |   4 right_al   000A9B GR
  4 row_alig   001E0A R   |   4 row_eras   0000E4 R   |   4 row_eras   000111 R
  4 row_loop   000D08 R   |   4 rparnt_t   0008C0 R   |   4 rshift     002132 R
  7 rsign      00007C R   |   7 rsize      00007E R   |   4 rt_msg     0010D9 R
  4 run        001C2C R   |   4 run_app    000EF3 R   |   4 run_it     001C5E R
  5 rx1_head   00002A R   |   5 rx1_queu   000022 R   |   5 rx1_tail   00002B R
  4 save_app   001EAD R   |   4 save_con   00199C R   |   4 scan_blo   001E33 R
  4 search_d   001548 GR  |   4 search_e   001592 R   |   4 search_l   000606 GR
  4 search_l   000615 R   |   4 search_n   00154C R   |   5 seedx      000012 R
  5 seedy      000014 R   |   4 select_p   0021A3 R   |   4 send_esc   000346 R
  4 send_par   000351 R   |   4 set_time   0022A0 R   |   4 sharp_ts   0008E1 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]

Symbol Table

  4 show       001747 R   |   4 show_row   000CF6 R   |   4 single_c   000C60 R
  4 skip       00082A R   |   4 slash_ts   00096B R   |   4 sleep      002050 R
  4 software   000E0B R   |   4 spaces     00038B GR  |   4 spi_clea   002519 R
  4 spi_disa   002501 R   |   4 spi_enab   0024CE R   |   4 spi_rcv_   00253B R
  4 spi_read   002566 R   |   4 spi_sele   00256E R   |   4 spi_send   002525 R
  4 spi_writ   002546 R   |   2 stack_fu   001760 GR  |   2 stack_un   001800 R
  4 star_tst   000960 R   |   4 step       001B3C R   |   4 stop       001DB4 R
  4 store_lo   001B50 R   |   4 str_matc   001575 R   |   4 str_tst    000860 R
  4 strcmp     000D6F R   |   4 strcpy     000D80 GR  |   4 strlen     000D64 GR
  4 syntax_e   00110C GR  |   5 tab_widt   000021 GR  |   4 tb_error   00110E GR
  4 term       001654 R   |   4 term01     00165C R   |   4 term_exi   0016A3 R
  2 tib        001690 GR  |   4 tick_tst   00091A R   |   5 ticks      00000E R
  4 timeout    0022AF R   |   5 timer      000010 GR  |   4 timer2_i   00008C R
  4 timer4_i   000099 R   |   4 tk_id      0010FC R   |   4 to         001B0C R
  4 to_eepro   00017A R   |   4 to_flash   00017F R   |   4 to_hex_c   0005FB GR
  4 to_upper   001355 GR  |   4 token_ch   0009F5 R   |   4 token_ex   0009F9 R
  4 token_ms   000CEE R   |   4 tone       001C95 R   |   4 try_next   002464 R
  5 txtbgn     000019 GR  |   5 txtend     00001B GR  |   4 uart1_ge   0002D1 GR
  4 uart1_in   00027C R   |   4 uart1_pu   0002C1 GR  |   4 uart1_qg   0002CA GR
  4 uart1_se   00028C R   |   4 ubound     001800 R   |   4 udiv32_1   00147B R
  4 uflash     002014 R   |   4 umstar     00141E R   |   4 unlock_e   0000AE R
  4 unlock_f   0000C9 R   |   4 until      00235D R   |   4 user_int   000037 R
  4 usr        00202A R   |   4 var_name   000AEE GR  |   5 vars       00002C GR
  4 wait       001A32 R   |   4 warm_ini   000F56 R   |   4 warm_sta   001190 R
  4 words      00223A R   |   4 words_co   00228A R   |   4 write      001F65 R
  4 write_bl   00022A R   |   4 write_by   0001B0 R   |   4 write_ee   0001EC R
  4 write_ex   000225 R   |   4 write_fl   0001D6 R   |   4 write_ro   00016B R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    170   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   2A04   flags    0
   5 DATA       size     60   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

