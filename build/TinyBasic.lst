ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                                     45 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                           00000F    58         NAME_MAX_LEN=15  ; CONST and DIM variables maximum length 
                                     59 
                                     60 ;--------------------------------------
                                     61 ;   constantes related to Arduino 
                                     62 ;   API mapping 
                                     63 ;-------------------------------------
                           000000    64         INP=0
                           000001    65         OUTP=1 
                                     66 
                                     67 ;--------------------------------------
                                     68 ;       token attribute
                                     69 ;--------------------------------------
                                     70         ; bits 4:5 identify token group 
                                     71         ; 0x0n -> miscelinous 
                                     72         ; 0x1n -> +|- operators 
                                     73         ; 0x2n -> *|/|% operators
                                     74         ; 0x3n -> relational operators 
                           000080    75         TK_CMD=128      ; BASIC command   
                           000081    76         TK_IFUNC=129    ; BASIC integer function
                           000082    77         TK_CFUNC=130    ; BASIC character function
                           000083    78         TK_CONST=131    ; BASIC constant 
                           000084    79         TK_INTGR=132    ; 16 bits integer 
                           000085    80         TK_VAR=133
                           000086    81         TK_FLOAT=134    ; float32 
                           000087    82         TK_NOT=135
                           000088    83         TK_AND=136      ;
                           000089    84         TK_OR=137       ;
                           00008A    85         TK_XOR=138      ; 
                           000000    86         TK_NONE=0       ; not a token 
                           000002    87         TK_QSTR=2       ; quoted string  
                           000003    88         TK_LABEL=3      ; used for defined, constants, variables
                           000004    89         TK_CHAR=4       ; ASCII character 
                           000005    90         TK_ARRAY=5     ; array variable '@' 
                           000006    91         TK_LPAREN=6     ; left parenthesis '('
                           000007    92         TK_RPAREN=7     ; right parenthesis ')'
                           000008    93         TK_COMMA=8     ; item separator ',' 
                           000009    94         TK_SHARP=9     ; print colon width '#' 
                           00000A    95         TK_COLON=0xa      ; command separator ':' 
                                     96         
                           000010    97         TK_PLUS=0x10    ; addition operator '+'
                           000011    98         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    99         TK_MULT=0x20    ; multiplication operator '*'
                           000021   100         TK_DIV=0x21     ; division operator '/'
                           000022   101         TK_MOD=0x22     ; modulo operator '%'
                                    102 
                                    103         ; don't change these token values 
                                    104         ; values chosen to be used as a mask.
                                    105         ; bit 7   1 for dictionary words else 0 
                                    106         ; bits 6  always 0 
                                    107         ; bits 5:4 identify group 
                                    108         ; bits 3:0 token identifier inside group  
                           000031   109         TK_GT=0x31      ; relation operator '>'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000032   110         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   111         TK_GE=0x33      ; relation operator '>='
                           000034   112         TK_LT=0x34      ; relation operator '<'
                           000036   113         TK_LE=0x36      ; relation operator '<='
                           000035   114         TK_NE=0x35      ; relation operator '<>' not equal 
                                    115         ; token groups 
                           000030   116         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   117         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   118         TK_GRP_ADD=0x10  ; additive operators
                           000020   119         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   120         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   121         CMD_END=2 
                                    122 
                                    123 ;--------------------------------------
                                    124 ;   error codes 
                                    125 ;--------------------------------------
                           000000   126     ERR_NONE=0
                           000001   127     ERR_MEM_FULL=1 
                           000002   128     ERR_SYNTAX=2
                           000003   129     ERR_MATH_OVF=3
                           000004   130     ERR_DIV0=4 
                           000005   131     ERR_NO_LINE=5
                           000006   132     ERR_RUN_ONLY=6
                           000007   133     ERR_CMD_ONLY=7
                           000008   134     ERR_DUPLICATE=8
                           000009   135     ERR_NOT_FILE=9
                           00000A   136     ERR_BAD_VALUE=10
                           00000B   137     ERR_NO_ACCESS=11
                           00000C   138     ERR_NO_DATA=12 
                           00000D   139     ERR_NO_PROG=13
                           00000E   140     ERR_NO_FSPACE=14
                           00000F   141     ERR_BUF_FULL=15
                           000010   142     ERR_OVERFLOW=16 
                           000011   143     ERR_RD_ONLY=17
                           000012   144     ERR_NO_PROGRAM=18
                                    145 
                                    146 ;--------------------------------------
                                    147 ;   assembler flags 
                                    148 ;-------------------------------------
                                    149 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    150 
                                    151      .macro _usec_dly n 
                                    152     ldw x,#(16*n-2)/4
                                    153     decw x
                                    154     nop 
                                    155     jrne .-4
                                    156     .endm 
                                    157     
                                    158     ; load X register with 
                                    159     ; entry point of dictionary
                                    160     ; before calling 'search_dict'
                                    161     .macro _ldx_dict dict_name
                                    162     ldw x,#dict_name+2
                                    163     .endm 
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; reset BASIC pointer
                                    166     ; to beginning of last token
                                    167     ; extracted except if it was end of line 
                                    168     .macro _unget_token 
                                    169      mov in,in.saved  
                                    170     .endm
                                    171 
                                    172 
                                    173     ; extract code address for 
                                    174     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    175     .macro _get_code_addr
                                    176         ldw x,(x)
                                    177         inc in 
                                    178         inc in 
                                    179     .endm 
                                    180 
                                    181 
                                    182 
                                    183 ;---------------------------------------
                                    184 ;    xtack manipulation macros 
                                    185 ;    Y is used as xstack pointer  
                                    186 ;----------------------------------------
                                    187     ; pop in A:X from XSTACK 
                                    188     .macro _xpop 
                                    189     ld a,(y)
                                    190     ldw x,y 
                                    191     ldw x,(1,x)
                                    192     addw y,#CELL_SIZE 
                                    193     .endm 
                                    194 
                                    195     ; push A:X  to XSTACK 
                                    196     .macro _xpush 
                                    197     subw y,#CELL_SIZE
                                    198     ld (y),a 
                                    199     ldw (1,y),x 
                                    200     .endm 
                                    201 
                                    202     ; drop from XSTACK 
                                    203     .macro _xdrop 
                                    204     addw y,#CELL_SIZE 
                                    205     .endm 
                                    206 
                                    207     ; @T fetch top xstack 
                                    208     .macro _at_top
                                    209     ld a,(y)
                                    210     ldw x,y 
                                    211     ldw x,(1,x)
                                    212     .endm 
                                    213 
                                    214     ; @N  fetch next on xstack 
                                    215     .macro _at_next 
                                    216     ld a,(3,y)
                                    217     ldw x,y 
                                    218     ldw x,(4,x)
                                    219     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220 
                                    221     ; !T put on top of xtack 
                                    222     .macro _store_top 
                                    223     ld (y),a 
                                    224     ldw (1,y),x     
                                    225     .endm 
                                    226 
                                    227     ; !N put next on xstack 
                                    228     .macro _store_next 
                                    229     ld (3,y),a 
                                    230     ldw (4,y),x 
                                    231     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTI_IDX=PRTG_IDX+2
                           000076    84     QKEY_IDX=PRTI_IDX+2
                           000078    85     READ_IDX=QKEY_IDX+2
                           00007A    86     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007C    87 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00007E    88     REST_IDX=REM_IDX+2 ; RESTORE
                           000080    89     RET_IDX=REST_IDX+2  ; RETURN 
                           000082    90     RND_IDX=RET_IDX+2 ; RANDOM 
                           000084    91     RSHIFT_IDX=RND_IDX+2
                           000086    92     RUN_IDX=RSHIFT_IDX+2
                           000088    93     FREE_IDX=RUN_IDX+2
                           00008A    94     SLEEP_IDX=FREE_IDX+2
                           00008C    95     SPIRD_IDX=SLEEP_IDX+2
                           00008E    96     SPIEN_IDX=SPIRD_IDX+2
                           000090    97     SPISEL_IDX=SPIEN_IDX+2
                           000092    98     SPIWR_IDX=SPISEL_IDX+2
                           000094    99     STEP_IDX=SPIWR_IDX+2
                           000096   100     STOP_IDX=STEP_IDX+2
                           000098   101     TICKS_IDX=STOP_IDX+2
                           00009A   102     TIMER_IDX=TICKS_IDX+2
                           00009C   103     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           00009E   104     TO_IDX=TMROUT_IDX+2
                           0000A0   105     TONE_IDX=TO_IDX+2
                           0000A2   106     UBOUND_IDX=TONE_IDX+2
                           0000A4   107     UFLASH_IDX=UBOUND_IDX+2
                           0000A6   108     UNTIL_IDX=UFLASH_IDX+2
                           0000A8   109     USR_IDX=UNTIL_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           0000AA   110     WAIT_IDX=USR_IDX+2
                           0000AC   111     WORDS_IDX=WAIT_IDX+2
                           0000AE   112     WRITE_IDX=WORDS_IDX+2
                           0000B0   113     SIZE_IDX=WRITE_IDX+2 
                           0000B2   114     ON_IDX=SIZE_IDX+2 
                           0000B4   115     GET_IDX=ON_IDX+2
                           0000B6   116     CONST_IDX=GET_IDX+2
                           0000B8   117     EEFREE_IDX=CONST_IDX+2
                                    118      
                                    119     ; keep these 3 at end
                                    120     ; these have no entry in code_addr 
                           0000F8   121     NOT_IDX=248
                           0000FA   122     AND_IDX=250 
                           0000FC   123     OR_IDX=252 
                           0000FE   124     XOR_IDX=254    
                                    125 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     34   
                                     35 
                                     36 ;;-----------------------------------
                                     37     .area SSEG (ABS)
                                     38 ;; working buffers and stack at end of RAM. 	
                                     39 ;;-----------------------------------
      001668                         40     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE*CELL_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         41 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016B8                         42 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         43 pad:: .ds PAD_SIZE             ; working buffer
      001738                         44 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      001774                         45 xstack_unf:: ; xstack underflow 
      001774                         46 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         47 stack_unf: ; stack underflow ; control_stack bottom 
                                     48 
                                     49 ;;--------------------------------------
                                     50     .area HOME 
                                     51 ;; interrupt vector table at 0x8000
                                     52 ;;--------------------------------------
                                     53 
      000000 82 00 00 B5             54     int cold_start			; RESET vector 
      000004 82 00 00 12             55 	int SysCall ; TRAP  BASIC sys() calls 
      000008 82 00 00 00             56 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             57 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             58 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             59 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             60 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             61 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             62 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 36             63 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             64 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             65 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             66 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             67 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             68 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             69 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             70 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             71 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             72 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             73 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 7C             74 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             75 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             76 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             77 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             78 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 13             79 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             80 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             81 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             82 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             83 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             84 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             85 	int NonHandledInterrupt ;int29  not used
                                     86 
                                     87 ;---------------------------------------
                                     88     .area CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                     89 ;---------------------------------------
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ; non handled interrupt 
                                     93 ; reset MCU
                                     94 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         95 NonHandledInterrupt:
      000000                         96 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                     97 
                                     98 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     99 ; auto wakeup from halt
                                    100 ; at iret, program continue 
                                    101 ; after hatl instruction
                                    102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        103 AWUHandler:
      000004 72 19 50 F0      [ 1]  104 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  105 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  106 	clr AWU_TBR 
      000011 80               [11]  107 	iret
                                    108 
                                    109 ;------------------------------------
                                    110 ; software interrupt handler  
                                    111 ;------------------------------------
      000012                        112 SysCall:
                                    113 
      000012 80               [11]  114 	iret 
                                    115 
                                    116 ;------------------------------
                                    117 ; TIMER 4 is used to maintain 
                                    118 ; a milliseconds 'ticks' counter
                                    119 ; and decrement 'timer' varaiable
                                    120 ; ticks range {0..2^23-1}
                                    121 ;--------------------------------
      000013                        122 Timer4UpdateHandler:
      000013 72 5F 53 42      [ 1]  123 	clr TIM4_SR 
      000017 C6 00 0F         [ 1]  124 	ld a,ticks 
      00001A CE 00 10         [ 2]  125 	ldw x,ticks+1
      00001D 1C 00 01         [ 2]  126 	addw x,#1 
      000020 A9 00            [ 1]  127 	adc a,#0 
      000022 2A 02            [ 1]  128 	jrpl 0$
                                    129 ; reset to 0 when negatif 
      000024 4F               [ 1]  130 	clr a 
      000025 5F               [ 1]  131 	clrw x 
      000026 C7 00 0F         [ 1]  132 0$:	ld ticks,a 
      000029 CF 00 10         [ 2]  133 	ldw ticks+1,x 
      00002C CE 00 12         [ 2]  134 	ldw x,timer
      00002F 27 04            [ 1]  135 	jreq 1$
      000031 5A               [ 2]  136 	decw x 
      000032 CF 00 12         [ 2]  137 	ldw timer,x 
      000035                        138 1$:	
      000035 80               [11]  139 	iret 
                                    140 
                                    141 ;------------------------------------
                                    142 ; Triggered by pressing USER UserButton 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    143 ; on NUCLEO card.
                                    144 ; This is used to abort a progam lock 
                                    145 ; in infinite loop. 
                                    146 ;------------------------------------
      000036                        147 UserButtonHandler:
                                    148 ; wait button release
      000036 5F               [ 1]  149 	clrw x
      000037 5A               [ 2]  150 1$: decw x 
      000038 26 FD            [ 1]  151 	jrne 1$
      00003A 72 09 50 15 F8   [ 2]  152 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    153 ; if MCU suspended by SLEEP resume program
      00003F 72 07 00 22 05   [ 2]  154     btjf flags,#FSLEEP,2$
      000044 72 17 00 22      [ 1]  155 	bres flags,#FSLEEP 
      000048 80               [11]  156 	iret
      000049                        157 2$:	
      000049                        158 user_interrupted:
      000049 72 00 00 22 02   [ 2]  159     btjt flags,#FRUN,4$
      00004E 20 0A            [ 2]  160 	jra UBTN_Handler_exit 
      000050                        161 4$:	; program interrupted by user 
      000050 72 11 00 22      [ 1]  162 	bres flags,#FRUN 
      000054 AE 00 62         [ 2]  163 	ldw x,#USER_ABORT
      000057 CD 09 5C         [ 4]  164 	call puts 
      00005A                        165 UBTN_Handler_exit:
      00005A AE 17 FF         [ 2]  166     ldw x,#STACK_EMPTY 
      00005D 94               [ 1]  167     ldw sp,x
      00005E 9A               [ 1]  168 	rim 
      00005F CC 17 20         [ 2]  169 5$:	jp warm_start
                                    170 
      000062 0A 50 72 6F 67 72 61   171 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    172 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    174 ;    peripherals initialization
                                    175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    176 
                                    177 ;----------------------------------------
                                    178 ; inialize MCU clock 
                                    179 ; input:
                                    180 ;   A 		source  HSI | 1 HSE 
                                    181 ;   XL      CLK_CKDIVR , clock divisor 
                                    182 ; output:
                                    183 ;   none 
                                    184 ;----------------------------------------
      00007D                        185 clock_init:	
      00007D C1 50 C3         [ 1]  186 	cp a,CLK_CMSR 
      000080 27 0C            [ 1]  187 	jreq 2$ ; no switching required 
                                    188 ; select clock source 
      000082 72 12 50 C5      [ 1]  189 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000086 C7 50 C4         [ 1]  190 	ld CLK_SWR,a
      000089 C1 50 C3         [ 1]  191 1$:	cp a,CLK_CMSR
      00008C 26 FB            [ 1]  192 	jrne 1$
      00008E                        193 2$: 	
                                    194 ; HSI and cpu clock divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      00008E 9F               [ 1]  195 	ld a,xl 
      00008F C7 50 C6         [ 1]  196 	ld CLK_CKDIVR,a  
      000092 81               [ 4]  197 	ret
                                    198 
                                    199 ;----------------------------------
                                    200 ; TIMER2 used as audio tone output 
                                    201 ; on port D:5. CN9-6
                                    202 ; channel 1 configured as PWM mode 1 
                                    203 ;-----------------------------------  
                                    204 
      000093                        205 timer2_init:
      000093 72 1A 50 C7      [ 1]  206 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000097 35 60 53 05      [ 1]  207  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      00009B 35 08 53 0C      [ 1]  208 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009F 81               [ 4]  209 	ret 
                                    210 
                                    211 ;---------------------------------
                                    212 ; TIM4 is configured to generate an 
                                    213 ; interrupt every millisecond 
                                    214 ;----------------------------------
      0000A0                        215 timer4_init:
      0000A0 72 18 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A4 35 07 53 45      [ 1]  217 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A8 35 7D 53 46      [ 1]  218 	mov TIM4_ARR,#125 ; set for 1msec.
      0000AC 35 05 53 40      [ 1]  219 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000B0 72 10 53 41      [ 1]  220 	bset TIM4_IER,#TIM4_IER_UIE
      0000B4 81               [ 4]  221 	ret
                                    222 
                                    223 ;-------------------------------------
                                    224 ;  initialization entry point 
                                    225 ;-------------------------------------
      0000B5                        226 cold_start:
                                    227 ;set stack 
      0000B5 AE 17 FF         [ 2]  228 	ldw x,#STACK_EMPTY
      0000B8 94               [ 1]  229 	ldw sp,x
                                    230 ; clear all ram 
      0000B9 7F               [ 1]  231 0$: clr (x)
      0000BA 5A               [ 2]  232 	decw x 
      0000BB 26 FC            [ 1]  233 	jrne 0$
                                    234 ; activate pull up on all inputs 
      0000BD A6 FF            [ 1]  235 	ld a,#255 
      0000BF C7 50 03         [ 1]  236 	ld PA_CR1,a 
      0000C2 C7 50 08         [ 1]  237 	ld PB_CR1,a 
      0000C5 C7 50 0D         [ 1]  238 	ld PC_CR1,a 
      0000C8 C7 50 12         [ 1]  239 	ld PD_CR1,a 
      0000CB C7 50 17         [ 1]  240 	ld PE_CR1,a 
      0000CE C7 50 1C         [ 1]  241 	ld PF_CR1,a 
      0000D1 C7 50 21         [ 1]  242 	ld PG_CR1,a 
      0000D4 C7 50 2B         [ 1]  243 	ld PI_CR1,a
                                    244 ; set LD2 pin as output 
      0000D7 72 1A 50 0D      [ 1]  245     bset PC_CR1,#LED2_BIT
      0000DB 72 1A 50 0E      [ 1]  246     bset PC_CR2,#LED2_BIT
      0000DF 72 1A 50 0C      [ 1]  247     bset PC_DDR,#LED2_BIT
      0000E3 72 1B 50 0A      [ 1]  248 	bres PC_ODR,#LED2_BIT 
                                    249 ; disable schmitt triggers on Arduino CN4 analog inputs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0000E7 55 00 3F 54 07   [ 1]  250 	mov ADC_TDRL,0x3f
                                    251 ; disable peripherals clocks
                                    252 ;	clr CLK_PCKENR1 
                                    253 ;	clr CLK_PCKENR2
      0000EC 72 5F 50 F2      [ 1]  254 	clr AWU_TBR 
      0000F0 72 14 50 CA      [ 1]  255 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    256 ; select internal clock no divisor: 16 Mhz 	
      0000F4 A6 E1            [ 1]  257 	ld a,#CLK_SWR_HSI 
      0000F6 5F               [ 1]  258 	clrw x  
      0000F7 CD 00 7D         [ 4]  259     call clock_init 
      0000FA CD 00 A0         [ 4]  260 	call timer4_init
      0000FD CD 00 93         [ 4]  261 	call timer2_init
                                    262 ; UART1 at 115200 BAUD
      000100 CD 08 BA         [ 4]  263 	call uart1_init
                                    264 ; activate PE_4 (user button interrupt)
      000103 72 18 50 18      [ 1]  265     bset PE_CR2,#USR_BTN_BIT 
                                    266 ; display system information
      000107 9A               [ 1]  267 	rim ; enable interrupts 
      000108 72 5C 00 17      [ 1]  268 	inc seedy+1 
      00010C 72 5C 00 15      [ 1]  269 	inc seedx+1 
      000110 CD 1D 31         [ 4]  270 	call func_eefree 
      000113 CD 1C D2         [ 4]  271 	call ubound 
      000116 CD 14 AA         [ 4]  272 	call clear_basic
      000119 CD 25 E3         [ 4]  273 	call beep_1khz  
      00011C CD 14 57         [ 4]  274 	call system_information
      00011F                        275 2$:	
                                    276 ; check for autorun application
      00011F CE 40 00         [ 2]  277 	ldw x,EEPROM_BASE 
      000122 C3 31 F8         [ 2]  278 	cpw x,AR_SIGN 
      000125 27 03            [ 1]  279 	jreq run_app
      000127 CC 17 20         [ 2]  280 	jp warm_start 
      00012A                        281 run_app:
      00012A 4F               [ 1]  282 	clr a 
      00012B CE 40 02         [ 2]  283 	ldw x,EEPROM_BASE+2
      00012E CD 24 E9         [ 4]  284 	call is_program_addr 
      000131 27 03            [ 1]  285 	jreq 1$
      000133 CC 17 20         [ 2]  286 	jp warm_start
      000136                        287 1$:	
                                    288 ; run application in FLASH|EEPROM 
      000136 90 CE 17 73      [ 2]  289 	ldw y,XSTACK_EMPTY
      00013A CD 14 88         [ 4]  290 	call warm_init
      00013D CE 40 02         [ 2]  291 	ldw x,EEPROM_BASE+2 
      000140 CF 00 1B         [ 2]  292 	ldw txtbgn,x
      000143 1D 00 02         [ 2]  293 	subw x,#2 
      000146 FE               [ 2]  294 	ldw x,(x)
      000147 72 BB 00 1B      [ 2]  295 	addw x,txtbgn 
      00014B CF 00 1D         [ 2]  296 	ldw txtend,x 
      00014E AE 01 5C         [ 2]  297 	ldw x,#AUTO_RUN 
      000151 CD 09 5C         [ 4]  298 	call puts 
      000154 CD 1E 53         [ 4]  299 	call program_info 
      000157 CC 25 59         [ 2]  300 	jp run_it_02  
      00015A 20 FE            [ 2]  301     jra .  
                                    302 
      00015C 20 61 75 74 6F 20 72   303 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    304 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00016F                         37 dup24:
      00016F                         38     _at_top 
      00016F 90 F6            [ 1]    1     ld a,(y)
      000171 93               [ 1]    2     ldw x,y 
      000172 EE 01            [ 2]    3     ldw x,(1,x)
      000174                         39     _xpush 
      000174 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000178 90 F7            [ 1]    2     ld (y),a 
      00017A 90 EF 01         [ 2]    3     ldw (1,y),x 
      00017D 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      00017E                         48 add24: ; ( N T -- N+T )
      00017E                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00017E 90 F6            [ 1]    1     ld a,(y)
      000180 93               [ 1]    2     ldw x,y 
      000181 EE 01            [ 2]    3     ldw x,(1,x)
      000183 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000187 89               [ 2]   50     pushw x  
      000188 88               [ 1]   51     push a  
      000189                         52     _at_top  
      000189 90 F6            [ 1]    1     ld a,(y)
      00018B 93               [ 1]    2     ldw x,y 
      00018C EE 01            [ 2]    3     ldw x,(1,x)
      00018E 72 FB 02         [ 2]   53     addw x,(2,sp)
      000191 19 01            [ 1]   54     adc a, (1,sp)
      000193                         55     _store_top 
      000193 90 F7            [ 1]    1     ld (y),a 
      000195 90 EF 01         [ 2]    2     ldw (1,y),x     
      000198                         56     _drop 3 
      000198 5B 03            [ 2]    1     addw sp,#3 
      00019A 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      00019B                         63 sub24: ; ( N T -- N-T ) 
      00019B                         64     _xpop 
      00019B 90 F6            [ 1]    1     ld a,(y)
      00019D 93               [ 1]    2     ldw x,y 
      00019E EE 01            [ 2]    3     ldw x,(1,x)
      0001A0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001A4 89               [ 2]   65     pushw x 
      0001A5 88               [ 1]   66     push  a
      0001A6                         67     _at_top  
      0001A6 90 F6            [ 1]    1     ld a,(y)
      0001A8 93               [ 1]    2     ldw x,y 
      0001A9 EE 01            [ 2]    3     ldw x,(1,x)
      0001AB 72 F0 02         [ 2]   68     subw x,(2,sp) 
      0001AE 12 01            [ 1]   69     sbc a, (1,sp)
      0001B0                         70     _store_top  
      0001B0 90 F7            [ 1]    1     ld (y),a 
      0001B2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001B5                         71     _drop 3 
      0001B5 5B 03            [ 2]    1     addw sp,#3 
      0001B7 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001B8                         77 cp24:
      0001B8                         78     _xpop 
      0001B8 90 F6            [ 1]    1     ld a,(y)
      0001BA 93               [ 1]    2     ldw x,y 
      0001BB EE 01            [ 2]    3     ldw x,(1,x)
      0001BD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001C1 C7 00 0C         [ 1]   79     ld acc24,a 
      0001C4 CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      0001C7                         81     _at_top 
      0001C7 90 F6            [ 1]    1     ld a,(y)
      0001C9 93               [ 1]    2     ldw x,y 
      0001CA EE 01            [ 2]    3     ldw x,(1,x)
      0001CC 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001D0 C2 00 0C         [ 1]   83     sbc a,acc24
      0001D3 2F 08            [ 1]   84     jrslt 1$
      0001D5 26 0A            [ 1]   85     jrne 2$
      0001D7 5D               [ 2]   86     tnzw x 
      0001D8 26 07            [ 1]   87     jrne 2$
      0001DA 4F               [ 1]   88     clr a 
      0001DB 20 06            [ 2]   89     jra 9$ 
      0001DD                         90 1$: ; i1 < i2 
      0001DD A6 FF            [ 1]   91     ld a,#255
      0001DF 20 02            [ 2]   92     jra 9$ 
      0001E1                         93 2$: ; i1 > i2 
      0001E1 A6 01            [ 1]   94     ld a,#1 
      0001E3 5F               [ 1]   95 9$: clrw x
      0001E4                         96      _store_top 
      0001E4 90 F7            [ 1]    1     ld (y),a 
      0001E6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001E9 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001EA                        103 cp24_ax:
      0001EA 88               [ 1]  104     push a 
      0001EB C3 00 0D         [ 2]  105     cpw x,acc16 
      0001EE C2 00 0C         [ 1]  106     sbc a,acc24
      0001F1 84               [ 1]  107     pop a 
      0001F2 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001F3                        115 abs24: ; ( i -- u )
      0001F3 90 F6            [ 1]  116     ld a,(y)
      0001F5 A1 80            [ 1]  117     cp a,#0x80 
      0001F7 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001F9 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001FA                        124 cpl24:  ; i -- ~i 
      0001FA 90 73            [ 1]  125     cpl (y) 
      0001FC 90 63 01         [ 1]  126     cpl (1,y)
      0001FF 90 63 02         [ 1]  127     cpl (2,y)
      000202 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      000203                        133 neg24: ; (i -- -i )
      000203                        134     _at_top
      000203 90 F6            [ 1]    1     ld a,(y)
      000205 93               [ 1]    2     ldw x,y 
      000206 EE 01            [ 2]    3     ldw x,(1,x)
      000208 43               [ 1]  135     cpl  a  
      000209 53               [ 2]  136     cplw x 
      00020A 1C 00 01         [ 2]  137     addw x,#1
      00020D A9 00            [ 1]  138     adc a,#0
      00020F                        139     _store_top  
      00020F 90 F7            [ 1]    1     ld (y),a 
      000211 90 EF 01         [ 2]    2     ldw (1,y),x     
      000214 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000215                        145 neg_ax:
      000215 43               [ 1]  146     cpl  a  
      000216 53               [ 2]  147     cplw x 
      000217 1C 00 01         [ 2]  148     addw x,#1
      00021A A9 00            [ 1]  149     adc a,#0
      00021C 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      00021D                        155 neg_acc24: ; 
      00021D 72 53 00 0C      [ 1]  156     cpl acc24 
      000221 72 53 00 0D      [ 1]  157     cpl acc16 
      000225 72 53 00 0E      [ 1]  158     cpl acc8
      000229 72 5C 00 0E      [ 1]  159     inc acc8 
      00022D 26 0A            [ 1]  160     jrne 9$
      00022F 72 5C 00 0D      [ 1]  161     inc acc16 
      000233 26 04            [ 1]  162     jrne 9$
      000235 72 5C 00 0C      [ 1]  163     inc acc24 
      000239 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      00023A                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      00023A 88               [ 1]  181     push a 
      00023B 72 5F 00 0B      [ 1]  182 	clr acc32
      00023F 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      000243 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000246 97               [ 1]  186     ld xl,a 
      000247 7B 01            [ 1]  187     ld a,(U8,sp)
      000249 42               [ 4]  188     mul x,a 
      00024A CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      00024D 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      000250 97               [ 1]  192     ld xl,a 
      000251 7B 01            [ 1]  193     ld a,(U8,sp) 
      000253 42               [ 4]  194     mul x,a 
      000254 72 BB 00 0C      [ 2]  195     addw x,acc24
      000258 72 59 00 0B      [ 1]  196     rlc acc32 
      00025C CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00025F 90 F6            [ 1]  199     ld a,(Y)
      000261 97               [ 1]  200     ld xl,a 
      000262 7B 01            [ 1]  201     ld a,(U8,sp)
      000264 42               [ 4]  202     mul x,a 
      000265 72 BB 00 0B      [ 2]  203     addw x,acc32
      000269 02               [ 1]  204     rlwa x 
      00026A 4D               [ 1]  205     tnz a 
      00026B 27 05            [ 1]  206     jreq 1$
      00026D A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00026F CC 16 96         [ 2]  208     jp tb_error 
      000272                        209 1$:
      000272 9E               [ 1]  210     ld a,xh  
      000273 CE 00 0D         [ 2]  211     ldw x,acc16   
      000276                        212     _drop VSIZE 
      000276 5B 01            [ 2]    1     addw sp,#VSIZE 
      000278 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000279                        224 mul24:
      000279                        225     _vars VSIZE
      000279 52 07            [ 2]    1     sub sp,#VSIZE 
      00027B 5F               [ 1]  226     clrw x 
      00027C 1F 01            [ 2]  227     ldw (PROD,sp),x 
      00027E 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      000280                        229     _xpop 
      000280 90 F6            [ 1]    1     ld a,(y)
      000282 93               [ 1]    2     ldw x,y 
      000283 EE 01            [ 2]    3     ldw x,(1,x)
      000285 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000289 4D               [ 1]  230     tnz a 
      00028A 2A 05            [ 1]  231     jrpl 0$
      00028C 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      00028E CD 02 15         [ 4]  233     call neg_ax 
      000291                        234 0$:    
      000291 6B 05            [ 1]  235     ld (N1,sp),a 
      000293 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000295 90 7D            [ 1]  237     tnz (Y)
      000297 2A 05            [ 1]  238     jrpl 2$ 
      000299 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      00029B CD 02 03         [ 4]  240     call neg24
      00029E                        241 2$: 
      00029E 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      0002A0 27 0A            [ 1]  243     jreq 4$
      0002A2 CD 02 3A         [ 4]  244     call mulu24_8
      0002A5 4D               [ 1]  245     tnz a 
      0002A6 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      0002A8 6B 01            [ 1]  247     ld (PROD,sp),a
      0002AA 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      0002AC                        249 4$:
      0002AC 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      0002AE 27 0D            [ 1]  251     jreq 5$
      0002B0 CD 02 3A         [ 4]  252     call mulu24_8
      0002B3 4D               [ 1]  253     tnz a 
      0002B4 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002B6 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002B9 29 29            [ 1]  256     jrv 8$ ; overflow
      0002BB 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002BD                        258 5$:
      0002BD 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002BF 27 10            [ 1]  260     jreq 6$
      0002C1 CD 02 3A         [ 4]  261     call mulu24_8
      0002C4 01               [ 1]  262     rrwa x 
      0002C5 5D               [ 2]  263     tnzw x 
      0002C6 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002C8 4D               [ 1]  265     tnz a 
      0002C9 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002CB 1B 01            [ 1]  267     add a,(PROD,sp)
      0002CD 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002CF 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002D1                        270 6$:
      0002D1 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002D3 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002D5 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002D7 27 03            [ 1]  274     jreq 9$
      0002D9 CD 02 15         [ 4]  275     call neg_ax 
      0002DC                        276 9$:
      0002DC                        277     _store_top 
      0002DC 90 F7            [ 1]    1     ld (y),a 
      0002DE 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002E1                        278     _drop VSIZE 
      0002E1 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002E3 81               [ 4]  279     ret 
      0002E4                        280 8$: ; overflow
      0002E4 A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0002E6 CC 16 96         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002E9                        296 divu24_8:
      0002E9 89               [ 2]  297 	pushw x ; save x
      0002EA 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002EB CE 00 0C         [ 2]  300 	ldw x,acc24
      0002EE 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002F0 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002F1 88               [ 1]  303 	push a  ;save remainder
      0002F2 CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002F5 84               [ 1]  305 	pop a
      0002F6 95               [ 1]  306 	ld xh,a
      0002F7 C6 00 0E         [ 1]  307 	ld a,acc8
      0002FA 97               [ 1]  308 	ld xl,a
      0002FB 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002FD 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002FE 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      000300 9F               [ 1]  312 	ld a,xl
      000301 C7 00 0E         [ 1]  313 	ld acc8,a
      000304 84               [ 1]  314 	pop a
      000305 85               [ 2]  315 	popw x
      000306 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      000307                        332 div24:
      000307                        333     _vars VSIZE 
      000307 52 06            [ 2]    1     sub sp,#VSIZE 
      000309 0F 06            [ 1]  334     clr (RSIGN,sp)
      00030B 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00030D                        336     _xpop 
      00030D 90 F6            [ 1]    1     ld a,(y)
      00030F 93               [ 1]    2     ldw x,y 
      000310 EE 01            [ 2]    3     ldw x,(1,x)
      000312 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000316 4D               [ 1]  337     tnz a 
      000317 2A 05            [ 1]  338     jrpl 0$ 
      000319 03 05            [ 1]  339     cpl (QSIGN,sp)
      00031B CD 02 15         [ 4]  340     call neg_ax
      00031E                        341 0$:
      00031E 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      000320 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      000322 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      000324 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000326 26 05            [ 1]  346     jrne 1$ 
      000328 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      00032A CC 16 96         [ 2]  348     jp tb_error 
      00032D                        349 1$: ; dividend  
      00032D                        350     _at_top
      00032D 90 F6            [ 1]    1     ld a,(y)
      00032F 93               [ 1]    2     ldw x,y 
      000330 EE 01            [ 2]    3     ldw x,(1,x)
      000332 4D               [ 1]  351     tnz a 
      000333 2A 07            [ 1]  352     jrpl 2$
      000335 CD 02 15         [ 4]  353     call neg_ax
      000338 03 05            [ 1]  354     cpl (QSIGN,sp)
      00033A 03 06            [ 1]  355     cpl (RSIGN,sp)
      00033C                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      00033C                        359     _store_top 
      00033C 90 F7            [ 1]    1     ld (y),a 
      00033E 90 EF 01         [ 2]    2     ldw (1,y),x     
      000341 A6 18            [ 1]  360     ld a,#24 
      000343 6B 04            [ 1]  361     ld (CNTR,sp),a
      000345 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000347 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000349 CD 01 EA         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      00034C 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00034E C6 00 0C         [ 1]  368     ld a,acc24 
      000351 CE 00 0D         [ 2]  369     ldw x,acc16 
      000354 72 5F 00 0C      [ 1]  370     clr acc24 
      000358 72 5F 00 0D      [ 1]  371     clr acc16 
      00035C 72 5F 00 0E      [ 1]  372     clr acc8 
      000360 20 26            [ 2]  373     jra 6$
      000362                        374 22$:     
      000362 4F               [ 1]  375     clr a 
      000363 5F               [ 1]  376     clrw x 
      000364 98               [ 1]  377     rcf  
      000365                        378 3$: ; shift carry in acc24 bit 0 
      000365 90 69 02         [ 1]  379     rlc (2,y) 
      000368 90 69 01         [ 1]  380     rlc (1,y)
      00036B 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00036D 59               [ 2]  382     rlcw x  
      00036E 49               [ 1]  383     rlc a
      00036F 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      000372 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000374 24 05            [ 1]  386     jrnc 5$
      000376 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000379 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      00037B                        389 5$: ; shift carry in QUOTIENT 
      00037B 8C               [ 1]  390     ccf
      00037C 0A 04            [ 1]  391     dec (CNTR,sp)
      00037E 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      000380 90 69 02         [ 1]  394     rlc (2,y)
      000383 90 69 01         [ 1]  395     rlc (1,y) 
      000386 90 79            [ 1]  396     rlc (y) 
      000388                        397 6$:    
      000388 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      00038A 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      00038C 0D 05            [ 1]  400     tnz (QSIGN,sp)
      00038E 27 03            [ 1]  401     jreq 8$
      000390 CD 02 03         [ 4]  402     call neg24
      000393                        403 8$: 
      000393 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000395 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000397                        406 81$:
      000397 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000399 27 03            [ 1]  408     jreq 9$
      00039B CD 02 15         [ 4]  409     call neg_ax       
      00039E                        410 9$: _drop VSIZE 
      00039E 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A0 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      0003A1                        423 mod24:
      0003A1 CD 03 07         [ 4]  424     call div24 
      0003A4                        425     _store_top  ; replace quotient by remainder 
      0003A4 90 F7            [ 1]    1     ld (y),a 
      0003A6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003A9 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;  set DEBUG=1 in config.inc 
                                     22 ;;  to enable it.
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 	.macro _dbg_prt_regs
                                     26 	.if DEBUG 
                                     27 		call print_registers  
                                     28 	.endif 
                                     29 	.endm 
                                     30 
                                     31 	.macro _dbg_cmd_itf 
                                     32 	.if DEBUG 
                                     33 		call cmd_itf 
                                     34 	.endif 
                                     35 	.endm 
                                     36 
                           000001    37 .if DEBUG 
                                     38 
                                     39     .area CODE
                                     40 
                                     41 ;--------------------
                                     42 ; print content at address in hex.
                                     43 ; input:
                                     44 ;   X 	address to peek 
                                     45 ; output:
                                     46 ;	none 
                                     47 ;--------------------	
      0003AA                         48 prt_peek::
      0003AA 89               [ 2]   49 	pushw x 
      0003AB 35 10 00 0A      [ 1]   50 	mov base,#16 
      0003AF CD 18 43         [ 4]   51 	call prt_i16  
      0003B2 A6 3A            [ 1]   52 	ld a,#': 
      0003B4 CD 08 FF         [ 4]   53 	call putc 
      0003B7 A6 20            [ 1]   54 	ld a,#SPACE 
      0003B9 CD 08 FF         [ 4]   55 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0003BC 85               [ 2]   56 	popw x 
      0003BD F6               [ 1]   57 	ld a,(x)
      0003BE 5F               [ 1]   58 	clrw x 
      0003BF 97               [ 1]   59 	ld xl,a 
      0003C0 35 0A 00 0A      [ 1]   60 	mov base,#10 
      0003C4 CD 18 43         [ 4]   61 	call prt_i16 
      0003C7 81               [ 4]   62 	ret 
                                     63 
                                     64 ;----------------------------------------
                                     65 ;   DEBUG support functions
                                     66 ;----------------------------------------
                                     67 
                                     68 ; turn LED on 
      0003C8                         69 ledon:
      0003C8 72 1A 50 0A      [ 1]   70     bset PC_ODR,#LED2_BIT
      0003CC 81               [ 4]   71     ret 
                                     72 
                                     73 ; turn LED off 
      0003CD                         74 ledoff:
      0003CD 72 1B 50 0A      [ 1]   75     bres PC_ODR,#LED2_BIT 
      0003D1 81               [ 4]   76     ret 
                                     77 
                                     78 ; invert LED status 
      0003D2                         79 ledtoggle:
      0003D2 A6 20            [ 1]   80     ld a,#LED2_MASK
      0003D4 C8 50 0A         [ 1]   81     xor a,PC_ODR
      0003D7 C7 50 0A         [ 1]   82     ld PC_ODR,a
      0003DA 81               [ 4]   83     ret 
                                     84 
      0003DB                         85 left_paren:
      0003DB A6 20            [ 1]   86 	ld a,#SPACE 
      0003DD CD 08 FF         [ 4]   87 	call putc
      0003E0 A6 28            [ 1]   88 	ld a,#'( 
      0003E2 CD 08 FF         [ 4]   89 	call putc 	
      0003E5 81               [ 4]   90 	ret 
                                     91 
                                     92 ;------------------------------
                                     93 ; print 8 bit register 
                                     94 ; input:
                                     95 ;   X  point to register name 
                                     96 ;   A  register value to print 
                                     97 ; output:
                                     98 ;   none
                                     99 ;------------------------------- 
      0003E6                        100 prt_reg8:
      0003E6 88               [ 1]  101 	push a 
      0003E7 CD 09 5C         [ 4]  102 	call puts 
      0003EA 7B 01            [ 1]  103 	ld a,(1,sp) 
      0003EC 5F               [ 1]  104 	clrw x 
      0003ED 97               [ 1]  105 	ld xl,a 
      0003EE 35 10 00 0A      [ 1]  106 	mov base,#16
      0003F2 CD 18 43         [ 4]  107 	call prt_i16  
      0003F5 CD 03 DB         [ 4]  108 	call left_paren 
      0003F8 84               [ 1]  109 	pop a 
      0003F9 5F               [ 1]  110 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0003FA 97               [ 1]  111 	ld xl,a 
      0003FB 35 0A 00 0A      [ 1]  112 	mov base,#10 
      0003FF CD 18 43         [ 4]  113 	call prt_i16  
      000402 A6 29            [ 1]  114 	ld a,#') 
      000404 CD 08 FF         [ 4]  115 	call putc
      000407 81               [ 4]  116 	ret
                                    117 
                                    118 ;--------------------------------
                                    119 ; print 16 bits register 
                                    120 ; input:
                                    121 ;   X   point register name 
                                    122 ;   Y   register value to print 
                                    123 ; output:
                                    124 ;  none
                                    125 ;--------------------------------
      000408                        126 prt_reg16: 
      000408 90 89            [ 2]  127 	pushw y 
      00040A CD 09 5C         [ 4]  128 	call puts 
      00040D 1E 01            [ 2]  129 	ldw x,(1,sp) 
      00040F 35 10 00 0A      [ 1]  130 	mov base,#16 
      000413 CD 18 43         [ 4]  131 	call prt_i16  
      000416 CD 03 DB         [ 4]  132 	call left_paren 
      000419 85               [ 2]  133 	popw x 
      00041A 35 0A 00 0A      [ 1]  134 	mov base,#10 
      00041E CD 18 43         [ 4]  135 	call prt_i16  
      000421 A6 29            [ 1]  136 	ld a,#') 
      000423 CD 08 FF         [ 4]  137 	call putc
      000426 81               [ 4]  138 	ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; print registers contents saved on
                                    142 ; stack by trap interrupt.
                                    143 ;------------------------------------
                           00000A   144 	R_PC=10 
                           000009   145 	R_CC=9
                           000008   146 	SAV_ACC24=8
                           000006   147 	SAV_ACC16=6
                           000004   148 	R_Y=4
                           000002   149 	R_X=2
                           000001   150 	R_A=1
                           000008   151 	VSIZE=8 
      000427                        152 print_registers:
      000427 8A               [ 1]  153 	push cc 
      000428                        154 	_vars VSIZE 
      000428 52 08            [ 2]    1     sub sp,#VSIZE 
      00042A 6B 01            [ 1]  155 	ld (R_A,sp),a 
      00042C 1F 02            [ 2]  156 	ldw (R_X,sp),x 
      00042E 17 04            [ 2]  157 	ldw (R_Y,sp),y
      000430 C6 00 0C         [ 1]  158 	ld a,acc24 
      000433 CE 00 0D         [ 2]  159 	ldw x,acc16 
      000436 6B 08            [ 1]  160 	ld (SAV_ACC24,sp),a 
      000438 1F 06            [ 2]  161 	ldw (SAV_ACC16,sp),x 
      00043A AE 04 91         [ 2]  162 	ldw x,#STATES
      00043D CD 09 5C         [ 4]  163 	call puts
                                    164 ; print PC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000440 AE 04 CE         [ 2]  165 	ldw x, #REG_PC
      000443 16 0A            [ 2]  166 	ldw y, (R_PC,sp)
      000445 72 A2 00 03      [ 2]  167 	subw y,#3
      000449 CD 04 08         [ 4]  168 	call prt_reg16 
                                    169 ; print x
      00044C AE 04 D6         [ 2]  170 	ldw x,#REG_X
      00044F 16 02            [ 2]  171 	ldw y,(R_X,sp)
      000451 CD 04 08         [ 4]  172 	call prt_reg16  
                                    173 ; print Y 
      000454 AE 04 D2         [ 2]  174 	ldw x,#REG_Y
      000457 16 04            [ 2]  175 	ldw y, (R_Y,sp)
      000459 CD 04 08         [ 4]  176 	call prt_reg16  
                                    177 ; print A 
      00045C AE 04 DA         [ 2]  178 	ldw x,#REG_A
      00045F 7B 01            [ 1]  179 	ld a, (R_A,sp) 
      000461 CD 03 E6         [ 4]  180 	call prt_reg8
                                    181 ; print CC 
      000464 AE 04 DE         [ 2]  182 	ldw x,#REG_CC 
      000467 7B 09            [ 1]  183 	ld a, (R_CC,sp) 
      000469 CD 03 E6         [ 4]  184 	call prt_reg8 
                                    185 ; print SP 
      00046C AE 04 E3         [ 2]  186 	ldw x,#REG_SP
      00046F 90 96            [ 1]  187 	ldw y,sp 
      000471 72 A9 00 0B      [ 2]  188 	addw y,#(VSIZE+3)
      000475 CD 04 08         [ 4]  189 	call prt_reg16  
      000478 A6 0A            [ 1]  190 	ld a,#'\n' 
      00047A CD 08 FF         [ 4]  191 	call putc
      00047D 7B 08            [ 1]  192 	ld a,(SAV_ACC24,sp)
      00047F 1E 06            [ 2]  193 	ldw x,(SAV_ACC16,sp)
      000481 C7 00 0C         [ 1]  194 	ld acc24,a 
      000484 CF 00 0D         [ 2]  195 	ldw acc16,x 
      000487 7B 01            [ 1]  196 	ld a,(R_A,sp)
      000489 1E 02            [ 2]  197 	ldw x,(R_X,sp)
      00048B 16 04            [ 2]  198 	ldw y,(R_Y,sp)
      00048D                        199 	_drop VSIZE
      00048D 5B 08            [ 2]    1     addw sp,#VSIZE 
      00048F 86               [ 1]  200 	pop cc   	
      000490 81               [ 4]  201 	ret
                                    202 
      000491 0A 52 65 67 69 73 74   203 STATES:  .asciz "\nRegisters state at break point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 62
             72 65 61 6B 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      0004CE 50 43 3A 00            204 REG_PC: .asciz "PC:"
      0004D2 0A 59 3A 00            205 REG_Y:   .asciz "\nY:" 
      0004D6 0A 58 3A 00            206 REG_X:   .asciz "\nX:"
      0004DA 0A 41 3A 00            207 REG_A:   .asciz "\nA:" 
      0004DE 0A 43 43 3A 00         208 REG_CC:  .asciz "\nCC:"
      0004E3 0A 53 50 3A 00         209 REG_SP:  .asciz "\nSP:"
                                    210 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                    211 ;----------------------
                                    212 ; input:
                                    213 ;	Y    *input buffer 
                                    214 ; output:
                                    215 ;   acc24  integer 
                                    216 ;----------------------
      0004E8                        217 parse_addr:
      0004E8 A6 20            [ 1]  218 	ld a,#SPACE 
      0004EA CD 0E DB         [ 4]  219 	call skip  	 
      0004ED 72 B9 00 00      [ 2]  220 	addw y,in.w 
      0004F1 AE 16 B8         [ 2]  221 	ldw x,#pad 
      0004F4 CD 13 AE         [ 4]  222 	call strcpy
      0004F7 AE 16 B8         [ 2]  223 	ldw x,#pad
      0004FA CD 18 E5         [ 4]  224 	call atoi24 	
      0004FD 81               [ 4]  225 	ret 
                                    226 
                                    227 ;----------------------------
                                    228 ; command interface
                                    229 ; only 3 commands:
                                    230 ;  'q' to resume application
                                    231 ;  'p [addr]' to print memory values 
                                    232 ;  's addr' to print string 
                                    233 ;----------------------------
                                    234 ;local variable
                           00000B   235 	PSIZE=11
                           00000A   236 	SAV_COUNT=10
                           000009   237 	SAV_IN=9
                           000008   238 	SAV_ACC24=8
                           000006   239 	SAV_ACC16=6
                           000004   240 	R_Y=4
                           000002   241 	R_X=2
                           000001   242 	R_A=1
                           00000B   243 	VSIZE=11
      0004FE                        244 cmd_itf:
      0004FE 8A               [ 1]  245 	push cc 
      0004FF                        246 	_vars VSIZE
      0004FF 52 0B            [ 2]    1     sub sp,#VSIZE 
      000501 6B 01            [ 1]  247 	ld (R_A,sp),a
      000503 C6 00 02         [ 1]  248 	ld a,count 
      000506 6B 0A            [ 1]  249 	ld (SAV_COUNT,sp),a 
      000508 C6 00 01         [ 1]  250 	ld a,in 
      00050B 6B 09            [ 1]  251 	ld (SAV_IN,sp),a  
      00050D 1F 02            [ 2]  252 	ldw (R_X,sp),x 
      00050F 17 04            [ 2]  253 	ldw (R_Y,sp),y
      000511 C6 00 0C         [ 1]  254 	ld a,acc24 
      000514 CE 00 0D         [ 2]  255 	ldw x,acc16 
      000517 6B 08            [ 1]  256 	ld (SAV_ACC24,sp),a 
      000519 1F 06            [ 2]  257 	ldw (SAV_ACC16,sp),x 
      00051B 72 5F 00 18      [ 1]  258 	clr farptr 
      00051F 72 5F 00 19      [ 1]  259 	clr farptr+1 
      000523 72 5F 00 1A      [ 1]  260 	clr farptr+2  
      000527                        261 repl:
      000527 A6 0D            [ 1]  262 	ld a,#CR 
      000529 CD 08 FF         [ 4]  263 	call putc 
      00052C A6 3F            [ 1]  264 	ld a,#'? 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00052E CD 08 FF         [ 4]  265 	call putc
      000531 72 5F 00 00      [ 1]  266 	clr in.w 
      000535 72 5F 00 01      [ 1]  267 	clr in 
      000539 CD 0A 61         [ 4]  268 	call readln
      00053C 90 AE 16 68      [ 2]  269 	ldw y,#tib  
      000540 90 F6            [ 1]  270 	ld a,(y)
      000542 27 E3            [ 1]  271 	jreq repl  
      000544 72 5C 00 01      [ 1]  272 	inc in 
      000548 CD 18 D9         [ 4]  273 	call to_upper 
      00054B A1 51            [ 1]  274 	cp a,#'Q 
      00054D 26 26            [ 1]  275 	jrne test_p
      00054F                        276 repl_exit:
                                    277 ; restore original context 
      00054F 7B 08            [ 1]  278 	ld a,(SAV_ACC24,sp)
      000551 1E 06            [ 2]  279 	ldw x,(SAV_ACC16,sp)
      000553 C7 00 0C         [ 1]  280 	ld acc24,a 
      000556 CF 00 0D         [ 2]  281 	ldw acc16,x
      000559 7B 0A            [ 1]  282 	ld a,(SAV_COUNT,sp)
      00055B C7 00 02         [ 1]  283 	ld count,a 
      00055E 7B 09            [ 1]  284 	ld a,(SAV_IN,sp)
      000560 C7 00 01         [ 1]  285 	ld in,a 
      000563 16 04            [ 2]  286 	ldw y,(R_Y,sp)
      000565 1E 02            [ 2]  287 	ldw x,(R_X,sp)
      000567 7B 01            [ 1]  288 	ld a,(R_A,sp)
      000569                        289 	_drop VSIZE
      000569 5B 0B            [ 2]    1     addw sp,#VSIZE 
      00056B 86               [ 1]  290 	pop cc 
      00056C 81               [ 4]  291 	ret  
      00056D                        292 invalid:
      00056D AE 05 DB         [ 2]  293 	ldw x,#invalid_cmd 
      000570 CD 09 5C         [ 4]  294 	call puts 
      000573 20 B2            [ 2]  295 	jra repl 
      000575                        296 test_p:	
      000575 A1 50            [ 1]  297     cp a,#'P 
      000577 27 10            [ 1]  298 	jreq mem_peek
      000579 A1 53            [ 1]  299     cp a,#'S 
      00057B 26 F0            [ 1]  300 	jrne invalid 
      00057D                        301 print_string:
      00057D CD 04 E8         [ 4]  302 	call parse_addr 	
      000580 CE 00 0D         [ 2]  303 	ldw x,acc16
      000583 CD 09 5C         [ 4]  304 	call puts
      000586 CC 05 27         [ 2]  305 	jp repl 	
      000589                        306 mem_peek:
      000589 CD 04 E8         [ 4]  307 	call parse_addr 
      00058C C6 00 0C         [ 1]  308 	ld a, acc24 
      00058F CA 00 0D         [ 1]  309 	or a,acc16 
      000592 CA 00 0E         [ 1]  310 	or a,acc8 
      000595 26 02            [ 1]  311 	jrne 1$ 
      000597 20 0C            [ 2]  312 	jra peek_byte  
      000599 CE 00 0C         [ 2]  313 1$:	ldw x,acc24 
      00059C CF 00 18         [ 2]  314 	ldw farptr,x 
      00059F C6 00 0E         [ 1]  315 	ld a,acc8 
      0005A2 C7 00 1A         [ 1]  316 	ld farptr+2,a 
      0005A5                        317 peek_byte:
      0005A5 CD 05 EA         [ 4]  318 	call print_farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0005A8 A6 08            [ 1]  319 	ld a,#8 
      0005AA 6B 0B            [ 1]  320 	ld (PSIZE,sp),a 
      0005AC 5F               [ 1]  321 	clrw x 
      0005AD CD 06 05         [ 4]  322 1$:	call fetchc  
      0005B0 89               [ 2]  323 	pushw x 
      0005B1 C7 00 0E         [ 1]  324 	ld acc8,a 
      0005B4 5F               [ 1]  325 	clrw x 
      0005B5 CF 00 0C         [ 2]  326 	ldw acc24,x 
      0005B8 A6 90            [ 1]  327 	ld a,#16+128
      0005BA CD 18 5A         [ 4]  328 	call prt_acc24
      0005BD 85               [ 2]  329 	popw x 
      0005BE 0A 0B            [ 1]  330 	dec (PSIZE,sp)
      0005C0 26 EB            [ 1]  331 	jrne 1$ 
      0005C2 A6 08            [ 1]  332 	ld a,#8 
      0005C4 CB 00 1A         [ 1]  333 	add a,farptr+2 
      0005C7 C7 00 1A         [ 1]  334 	ld farptr+2,a
      0005CA 4F               [ 1]  335 	clr a 
      0005CB C9 00 19         [ 1]  336 	adc a,farptr+1 
      0005CE C7 00 19         [ 1]  337 	ld farptr+1,a 
      0005D1 4F               [ 1]  338 	clr a 
      0005D2 C9 00 18         [ 1]  339 	adc a,farptr 
      0005D5 C7 00 18         [ 1]  340 	ld farptr,a 
      0005D8 CC 05 27         [ 2]  341 	jp repl  
                                    342 
      0005DB 6E 6F 74 20 61 20 63   343 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    344 
                                    345 ;----------------------------
                                    346 ; display farptr address
                                    347 ;----------------------------
      0005EA                        348 print_farptr:
      0005EA C6 00 1A         [ 1]  349 	ld a ,farptr+2 
      0005ED C7 00 0E         [ 1]  350 	ld acc8,a 
      0005F0 CE 00 18         [ 2]  351 	ldw x,farptr 
      0005F3 CF 00 0C         [ 2]  352 	ldw acc24,x 
      0005F6 5F               [ 1]  353 	clrw x 
      0005F7 A6 10            [ 1]  354 	ld a,#16 
      0005F9 CD 18 5A         [ 4]  355 	call prt_acc24
      0005FC A6 20            [ 1]  356 	ld a,#SPACE 
      0005FE CD 08 FF         [ 4]  357 	call putc 
      000601 CD 08 FF         [ 4]  358 	call putc 
      000604 81               [ 4]  359 	ret
                                    360 
                                    361 ;------------------------------------
                                    362 ; get byte at address farptr[X]
                                    363 ; input:
                                    364 ;	 farptr   address to peek
                                    365 ;    X		  farptr index 	
                                    366 ; output:
                                    367 ;	 A 		  byte from memory  
                                    368 ;    x		  incremented by 1
                                    369 ;------------------------------------
      000605                        370 fetchc: ; @C
      000605 92 AF 00 18      [ 5]  371 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000609 5C               [ 1]  372 	incw x
      00060A 81               [ 4]  373 	ret
                                    374 
                                    375 
                                    376 ;------------------------------------
                                    377 ; expect a number from command line 
                                    378 ; next argument
                                    379 ;  input:
                                    380 ;	  none
                                    381 ;  output:
                                    382 ;    acc24   int24_t 
                                    383 ;------------------------------------
      00060B                        384 number:
      00060B CD 0E EE         [ 4]  385 	call get_token
      00060E A1 84            [ 1]  386 	cp a,#TK_INTGR
      000610 27 03            [ 1]  387 	jreq 1$
      000612 CC 16 94         [ 2]  388 	jp syntax_error
      000615 81               [ 4]  389 1$:	ret
                                    390 
                                    391 
                                    392 ;---------------------
                                    393 ; display n bytes row 
                                    394 ; from memory.
                                    395 ; input:
                                    396 ;   A   bytes to print 
                                    397 ;	X   start address 
                                    398 ; output:
                                    399 ;   X   address after last shown  
                                    400 ;---------------------
                           000001   401 	CNT=1 
                           000002   402 	ADR=2 
                           000003   403 	VSIZE=3 
      000616                        404 show_row:
      000616 4D               [ 1]  405 	tnz a 
      000617 26 01            [ 1]  406 	jrne 1$
      000619 81               [ 4]  407 	ret 
      00061A                        408 1$:	
      00061A 89               [ 2]  409 	pushw x  
      00061B 88               [ 1]  410 	push a 
      00061C 35 04 00 23      [ 1]  411 	mov tab_width,#4 
      000620 CD 18 43         [ 4]  412 	call prt_i16 
      000623 A6 20            [ 1]  413 	ld a,#SPACE  
      000625 CD 08 FF         [ 4]  414 	call putc
      000628                        415 row_loop:
      000628 1E 02            [ 2]  416 	ldw x,(ADR,sp)
      00062A F6               [ 1]  417 	ld a,(x)
      00062B 5F               [ 1]  418 	clrw x 
      00062C 97               [ 1]  419 	ld xl,a 
      00062D CD 18 43         [ 4]  420 	call prt_i16 
      000630 1E 02            [ 2]  421 	ldw x,(ADR,sp)
      000632 5C               [ 1]  422 	incw x 
      000633 1F 02            [ 2]  423 	ldw (ADR,sp),x 
      000635 0A 01            [ 1]  424 	dec (CNT,sp)
      000637 26 EF            [ 1]  425 	jrne row_loop
      000639                        426 	_drop VSIZE  		
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000639 5B 03            [ 2]    1     addw sp,#VSIZE 
      00063B 35 04 00 23      [ 1]  427 	mov tab_width,#4
      00063F A6 0D            [ 1]  428 	ld a,#CR 
      000641 CD 08 FF         [ 4]  429 	call putc 
      000644 81               [ 4]  430 	ret 
                                    431 
                                    432 ;--------------------------
                                    433 ; print memory content 
                                    434 ; in hexadecimal format
                                    435 ;  input:
                                    436 ;    X    start address 
                                    437 ;    Y    count 
                                    438 ;--------------------------
                           000001   439 	BCNT=1
                           000003   440 	BASE=3
                           000004   441 	TABW=4
                           000004   442 	VSIZE=4   
      000645                        443 hex_dump:
      000645 88               [ 1]  444 	push a 
      000646                        445 	_vars VSIZE
      000646 52 04            [ 2]    1     sub sp,#VSIZE 
      000648 C6 00 0A         [ 1]  446 	ld a,base
      00064B 6B 03            [ 1]  447 	ld (BASE,sp),a 
      00064D 35 10 00 0A      [ 1]  448 	mov base,#16
      000651 C6 00 23         [ 1]  449 	ld a,tab_width 
      000654 6B 04            [ 1]  450 	ld (TABW,sp),a
      000656 A6 0D            [ 1]  451 	ld a,#CR 
      000658 CD 08 FF         [ 4]  452 	call putc 
      00065B 17 01            [ 2]  453 1$: ldw (BCNT,sp),y
      00065D A6 10            [ 1]  454 	ld a,#16
      00065F 90 A3 00 10      [ 2]  455 	cpw y,#16
      000663 2A 02            [ 1]  456 	jrpl 2$
      000665 90 9F            [ 1]  457 	ld a,yl
      000667                        458 2$: 	
      000667 CD 06 16         [ 4]  459 	call show_row 
      00066A 16 01            [ 2]  460 	ldw y,(BCNT,sp) 
      00066C 72 A2 00 10      [ 2]  461 	subw y,#16 
      000670 90 A3 00 01      [ 2]  462 	cpw y,#1
      000674 2A E5            [ 1]  463 	jrpl 1$
      000676 7B 03            [ 1]  464 	ld a,(BASE,sp)
      000678 C7 00 0A         [ 1]  465 	ld base,a
      00067B 7B 04            [ 1]  466 	ld a,(TABW,sp)
      00067D C7 00 23         [ 1]  467 	ld tab_width,a 
      000680                        468 	_drop VSIZE
      000680 5B 04            [ 2]    1     addw sp,#VSIZE 
      000682 84               [ 1]  469 	pop a 
      000683 81               [ 4]  470 	ret 
                                    471 
                                    472 .endif ; DEBUG 
                                    473 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      000684                         45 unlock_eeprom:
      000684 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      000689 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      00068D 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      000691 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      000695 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000699 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00069E 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      00069F                         62 unlock_flash:
      00069F 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006A4 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0006A8 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0006AC 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006B0 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006B4 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006B9 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006BA                         76 row_erase:
      0006BA 88               [ 1]   77 	push a 
      0006BB 90 89            [ 2]   78 	pushw y 
      0006BD 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006C1 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006C5 4F               [ 1]   81 	clr a 
      0006C6 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0006C8 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0006CC 90 5C            [ 1]   84     incw y
      0006CE 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0006D2 90 5C            [ 1]   86     incw y
      0006D4 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0006D8 90 5C            [ 1]   88     incw y
      0006DA 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      0006DE 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      0006E3 90 85            [ 2]   91 	popw y 
      0006E5 84               [ 1]   92 	pop a 
      0006E6 81               [ 4]   93 	ret
      0006E7                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      0006E7                         97 move_erase_to_ram:
      0006E7 89               [ 2]   98 	pushw x 
      0006E8 90 89            [ 2]   99 	pushw y 
      0006EA AE 06 E7         [ 2]  100 	ldw x,#row_erase_end 
      0006ED 1D 06 BA         [ 2]  101 	subw x,#row_erase
      0006F0 CF 00 0D         [ 2]  102 	ldw acc16,x 
      0006F3 AE 16 68         [ 2]  103 	ldw x,#tib 
      0006F6 90 AE 06 BA      [ 2]  104 	ldw y,#row_erase 
      0006FA CD 13 BE         [ 4]  105 	call move
      0006FD 90 85            [ 2]  106 	popw y
      0006FF 85               [ 2]  107 	popw x
      000700 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000701                        123 program_row:
      000701 88               [ 1]  124 	push a 
      000702 90 89            [ 2]  125 	pushw y 
      000704 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000706 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00070A 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      00070E 90 5F            [ 1]  130 	clrw y 
      000710 F6               [ 1]  131 1$:	ld a,(x)
      000711 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000715 5C               [ 1]  133 	incw x 
      000716 90 5C            [ 1]  134 	incw y 
      000718 0A 01            [ 1]  135 	dec (BCNT,sp)
      00071A 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      00071C 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000721                        139 	_drop 1 
      000721 5B 01            [ 2]    1     addw sp,#1 
      000723 90 85            [ 2]  140 	popw y 
      000725 84               [ 1]  141 	pop a 
      000726 81               [ 4]  142 	ret 
      000727                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000727                        149 move_prg_to_ram:
      000727 89               [ 2]  150 	pushw x 
      000728 90 89            [ 2]  151 	pushw y 
      00072A AE 07 27         [ 2]  152 	ldw x,#program_row_end 
      00072D 1D 07 01         [ 2]  153 	subw x,#program_row 
      000730 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      000733 AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      000736 90 AE 07 01      [ 2]  156 	ldw y,#program_row ; source address 
      00073A CD 13 BE         [ 4]  157 	call move
      00073D 90 85            [ 2]  158 	popw y 
      00073F 85               [ 2]  159 	popw x  
      000740 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000741                        169 write_buffer:
      000741 89               [ 2]  170 	pushw x 
      000742 72 5D 00 18      [ 1]  171 	tnz farptr 
      000746 26 0D            [ 1]  172 	jrne to_flash 
      000748 CE 00 19         [ 2]  173 	ldw x,farptr+1 
      00074B A3 38 80         [ 2]  174 	cpw x,#app_space  
      00074E 24 05            [ 1]  175 	jruge to_flash 
      000750                        176 to_eeprom:
      000750 CD 06 84         [ 4]  177 	call unlock_eeprom
      000753 20 03            [ 2]  178 	jra do_programming
      000755                        179 to_flash:
      000755 CD 06 9F         [ 4]  180 	call unlock_flash
      000758                        181 do_programming:
      000758 85               [ 2]  182 	popw x 
      000759 CD 16 68         [ 4]  183 	call tib
      00075C 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000760 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      000764 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      000765                        197 block_erase:
      000765 89               [ 2]  198 	pushw x 
      000766 C6 00 18         [ 1]  199 	ld a,farptr 
      000769 26 14            [ 1]  200 	jrne erase_flash
      00076B CE 00 19         [ 2]  201 	ldw x,farptr+1
      00076E A3 38 80         [ 2]  202 	cpw x,#app_space 
      000771 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000773 CD 06 84         [ 4]  205 	call unlock_eeprom 
      000776 CD 16 68         [ 4]  206 	call tib 
      000779 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      00077D 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      00077F                        210 erase_flash:
      00077F CD 06 9F         [ 4]  211 	call unlock_flash 
      000782 CD 16 68         [ 4]  212 	call tib 
      000785 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000789                        214 erase_exit: 
      000789 85               [ 2]  215 	popw x 
      00078A 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      00078B                        232 write_byte:
      00078B 90 89            [ 2]  233 	pushw y
      00078D                        234 	_vars VSIZE
      00078D 52 02            [ 2]    1     sub sp,#VSIZE 
      00078F 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      000791 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      000793 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      000797 72 5D 00 18      [ 1]  240 	tnz farptr 
      00079B 26 14            [ 1]  241 	jrne write_flash
      00079D 90 A3 38 80      [ 2]  242     cpw y,#app_space 	 
      0007A1 24 0E            [ 1]  243     jruge write_flash
      0007A3 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0007A7 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0007A9 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0007AD 22 51            [ 1]  247 	jrugt write_exit
      0007AF 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0007B1                        250 write_flash:
      0007B1 CD 06 9F         [ 4]  251 	call unlock_flash 
      0007B4 9B               [ 1]  252 1$:	sim 
      0007B5 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007B7 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0007BB 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007C0 9A               [ 1]  256     rim 
      0007C1 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007C5 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0007C7                        260 write_eeprom:
      0007C7 CD 06 84         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0007CA 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0007CE 2B 08            [ 1]  264 	jrmi 1$
      0007D0 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0007D4 2A 02            [ 1]  266 	jrpl 1$
      0007D6 03 02            [ 1]  267 	cpl (OPT,sp)
      0007D8                        268 1$: 
      0007D8 0D 02            [ 1]  269     tnz (OPT,sp)
      0007DA 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      0007DC 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      0007E0 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0007E4                        274 2$: 
      0007E4 7B 01            [ 1]  275     ld a,(BTW,sp)
      0007E6 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      0007EA 0D 02            [ 1]  277     tnz (OPT,sp)
      0007EC 27 08            [ 1]  278     jreq 3$
      0007EE 5C               [ 1]  279     incw x
      0007EF 7B 01            [ 1]  280     ld a,(BTW,sp)
      0007F1 43               [ 1]  281     cpl a
      0007F2 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      0007F6 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007FB 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000800                        285 write_exit:
      000800 5C               [ 1]  286 	incw x 
      000801 CD 08 60         [ 4]  287 	call incr_farptr
      000804 5F               [ 1]  288 	clrw x 
      000805                        289 	_drop VSIZE 
      000805 5B 02            [ 2]    1     addw sp,#VSIZE 
      000807 90 85            [ 2]  290 	popw y
      000809 81               [ 4]  291     ret
                                    292 
                                    293 ;--------------------------------------------
                                    294 ; write a data block to eeprom or flash 
                                    295 ; the block must be erased before 
                                    296 ; using this routine.
                                    297 ; input:
                                    298 ;   Y        source address   
                                    299 ;   X        array index  destination  farptr[x]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                    300 ;   BSIZE    block size bytes 
                                    301 ;   farptr   write address , byte* 
                                    302 ; output:
                                    303 ;	X 		after last byte written 
                                    304 ;   Y 		after last byte read 
                                    305 ;  farptr   point after block
                                    306 ;---------------------------------------------
      00080A                        307 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      00080A                        308 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    309 	; local var 
                           000001   310 	XSAVE=1 
                           000002   311 	VSIZE=2 
      00080A                        312 write_block::
      00080A 88               [ 1]  313 	push a 
      00080B                        314 	_vars VSIZE
      00080B 52 02            [ 2]    1     sub sp,#VSIZE 
      00080D 1F 01            [ 2]  315 	ldw (XSAVE,sp),x 
      00080F 1E 06            [ 2]  316 	ldw x,(BSIZE,sp) 
      000811 27 13            [ 1]  317 	jreq 9$
      000813 1E 01            [ 2]  318 1$:	ldw x,(XSAVE,sp)
      000815 90 F6            [ 1]  319 	ld a,(y)
      000817 CD 07 8B         [ 4]  320 	call write_byte 
      00081A 5C               [ 1]  321 	incw x 
      00081B 90 5C            [ 1]  322 	incw y 
      00081D 1F 01            [ 2]  323 	ldw (XSAVE,sp),x
      00081F 1E 06            [ 2]  324 	ldw x,(BSIZE,sp)
      000821 5A               [ 2]  325 	decw x
      000822 1F 06            [ 2]  326 	ldw (BSIZE,sp),x 
      000824 26 ED            [ 1]  327 	jrne 1$
      000826                        328 9$:
      000826 1E 01            [ 2]  329 	ldw x,(XSAVE,sp)
      000828 CD 08 60         [ 4]  330 	call incr_farptr
      00082B                        331 	_drop VSIZE
      00082B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00082D 84               [ 1]  332 	pop a 
      00082E 81               [ 4]  333 	ret 
                                    334 
                                    335 
                                    336 ;------------------------------------
                                    337 ; write n bytes to flash | eeprom 
                                    338 ; if the number of bytes is 
                                    339 ; >=128 it is faster to 
                                    340 ; use write_block
                                    341 ; the bytes are written one by 
                                    342 ; one and auto erased if required. 
                                    343 ; input:
                                    344 ;    farptr    dest address 
                                    345 ;    X         src address 
                                    346 ;    A         count 
                                    347 ; output:
                                    348 ;    none   
                                    349 ;----------------------------------
      00082F                        350 write_nbytes:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00082F 90 89            [ 2]  351 	pushw y
      000831 88               [ 1]  352 	push a 
      000832 90 93            [ 1]  353 	ldw y,x
      000834 5F               [ 1]  354 	clrw x 
      000835                        355 1$:  
      000835 90 F6            [ 1]  356 	ld a,(y)
      000837 90 5C            [ 1]  357 	incw y
      000839 CD 07 8B         [ 4]  358 	call write_byte 
      00083C 5C               [ 1]  359 	incw x 
      00083D 0A 01            [ 1]  360 	dec (1,sp)  
      00083F 26 F4            [ 1]  361 	jrne 1$ 
      000841 84               [ 1]  362 9$: pop a 
      000842 90 85            [ 2]  363 	popw y 
      000844 81               [ 4]  364 	ret 
                                    365 
                                    366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    367 ;;;  flash memory operations
                                    368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    369 
                                    370 ;--------------------------
                                    371 ; align farptr to BLOCK_SIZE 
                                    372 ;---------------------------
      000845                        373 row_align:
      000845 A6 7F            [ 1]  374 	ld a,#0x7f 
      000847 C4 00 1A         [ 1]  375 	and a,farptr+2 
      00084A 27 13            [ 1]  376 	jreq 1$ 
      00084C CE 00 19         [ 2]  377 	ldw x,farptr+1 
      00084F 1C 00 80         [ 2]  378 	addw x,#BLOCK_SIZE 
      000852 24 04            [ 1]  379 	jrnc 0$
      000854 72 5C 00 18      [ 1]  380 	inc farptr 
      000858 9F               [ 1]  381 0$: ld a,xl 
      000859 A4 80            [ 1]  382 	and a,#0x80
      00085B 97               [ 1]  383 	ld xl,a
      00085C CF 00 19         [ 2]  384 	ldw farptr+1,x  	
      00085F 81               [ 4]  385 1$:	ret
                                    386 
                                    387 ;--------------------
                                    388 ; input:
                                    389 ;   X     increment 
                                    390 ; output:
                                    391 ;   farptr  incremented 
                                    392 ;---------------------
      000860                        393 incr_farptr:
      000860 72 BB 00 19      [ 2]  394 	addw x,farptr+1 
      000864 24 04            [ 1]  395 	jrnc 1$
      000866 72 5C 00 18      [ 1]  396 	inc farptr 
      00086A CF 00 19         [ 2]  397 1$:	ldw farptr+1,x  
      00086D 81               [ 4]  398 	ret 
                                    399 
                                    400 ;-----------------------------------
                                    401 ; scan block for non zero byte 
                                    402 ; block are 128 bytes 
                                    403 ; input:
                                    404 ;    farptr     address block  
                                    405 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    406 ;     A     0 cleared, other not cleared  
                                    407 ;-----------------------------------
      00086E                        408 scan_block:
      00086E 5F               [ 1]  409 	clrw x 
      00086F 92 AF 00 18      [ 5]  410 1$: ldf a,([farptr],x) 
      000873 26 06            [ 1]  411 	jrne 2$
      000875 5C               [ 1]  412 	incw x 
      000876 A3 00 80         [ 2]  413 	cpw x,#BLOCK_SIZE 
      000879 25 F4            [ 1]  414 	jrult 1$ 
      00087B 81               [ 4]  415 2$:	ret 
                                    416 
                                    417 
                                    418 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      00087C                         66 Uart1RxHandler: ; console receive char 
      00087C 72 0B 52 30 31   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      000881 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      000884 A1 03            [ 1]   69 	cp a,#CTRL_C 
      000886 26 06            [ 1]   70 	jrne 2$
      000888 CD 08 FF         [ 4]   71 	call putc 
      00088B CC 00 49         [ 2]   72 	jp user_interrupted
      00088E                         73 2$:
      00088E A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      000890 26 03            [ 1]   75 	jrne 3$
      000892 CC 00 B5         [ 2]   76 	jp cold_start 	
      000895 A1 1A            [ 1]   77 3$:	cp a,#CTRL_Z 
      000897 26 06            [ 1]   78 	jrne 4$
      000899 CD 08 B3         [ 4]   79 	call clear_autorun
      00089C CC 00 B5         [ 2]   80 	jp cold_start 
      00089F                         81 4$:
      00089F 88               [ 1]   82 	push a 
      0008A0 A6 26            [ 1]   83 	ld a,#rx1_queue 
      0008A2 CB 00 2F         [ 1]   84 	add a,rx1_tail 
      0008A5 5F               [ 1]   85 	clrw x 
      0008A6 97               [ 1]   86 	ld xl,a 
      0008A7 84               [ 1]   87 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0008A8 F7               [ 1]   88 	ld (x),a 
      0008A9 C6 00 2F         [ 1]   89 	ld a,rx1_tail 
      0008AC 4C               [ 1]   90 	inc a 
      0008AD A4 07            [ 1]   91 	and a,#RX_QUEUE_SIZE-1
      0008AF C7 00 2F         [ 1]   92 	ld rx1_tail,a 
      0008B2 80               [11]   93 5$:	iret 
                                     94 
      0008B3                         95 clear_autorun:
      0008B3 AE 40 00         [ 2]   96 	ldw x,#EEPROM_BASE 
      0008B6 CD 28 E4         [ 4]   97 	call erase_header 
      0008B9 81               [ 4]   98 	ret 
                                     99 
                                    100 ;---------------------------------------------
                                    101 ; initialize UART1, 115200 8N1
                                    102 ; input:
                                    103 ;	none
                                    104 ; output:
                                    105 ;   none
                                    106 ;---------------------------------------------
      0008BA                        107 uart1_init:
      0008BA 72 1A 50 02      [ 1]  108     bset PA_DDR,#UART1_TX_PIN
      0008BE 72 1A 50 03      [ 1]  109     bset PA_CR1,#UART1_TX_PIN 
      0008C2 72 1A 50 04      [ 1]  110     bset PA_CR2,#UART1_TX_PIN 
                                    111 ; enable UART1 clock
      0008C6 72 14 50 C7      [ 1]  112 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008CA                        113 uart1_set_baud: 
      0008CA 88               [ 1]  114 	push a 
                                    115 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    116 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008CB A6 E1            [ 1]  117 	ld a,#CLK_SWR_HSI
      0008CD C1 50 C3         [ 1]  118 	cp a,CLK_CMSR 
      0008D0 27 0A            [ 1]  119 	jreq 2$ 
      0008D2                        120 1$: ; 8 Mhz 	
      0008D2 35 05 52 33      [ 1]  121 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008D6 35 04 52 32      [ 1]  122 	mov UART1_BRR1,#0x4
      0008DA 20 08            [ 2]  123 	jra 3$
      0008DC                        124 2$: ; 16 Mhz 	
      0008DC 35 0B 52 33      [ 1]  125 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008E0 35 08 52 32      [ 1]  126 	mov UART1_BRR1,#0x08
      0008E4                        127 3$:
      0008E4 72 5F 52 31      [ 1]  128     clr UART1_DR
      0008E8 35 2C 52 35      [ 1]  129 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008EC 72 10 52 35      [ 1]  130 	bset UART1_CR2,#UART_CR2_SBK
      0008F0 72 0D 52 30 FB   [ 2]  131     btjf UART1_SR,#UART_SR_TC,.
      0008F5 72 5F 00 2E      [ 1]  132     clr rx1_head 
      0008F9 72 5F 00 2F      [ 1]  133 	clr rx1_tail
      0008FD 84               [ 1]  134 	pop a  
      0008FE 81               [ 4]  135 	ret
                                    136 
                                    137 ;---------------------------------
                                    138 ; uart1_putc
                                    139 ; send a character via UART1
                                    140 ; input:
                                    141 ;    A  	character to send
                                    142 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0008FF                        143 putc:: ; console output always on UART1
      0008FF                        144 uart1_putc:: 
      0008FF 72 0F 52 30 FB   [ 2]  145 	btjf UART1_SR,#UART_SR_TXE,.
      000904 C7 52 31         [ 1]  146 	ld UART1_DR,a 
      000907 81               [ 4]  147 	ret 
                                    148 
                                    149 
                                    150 ;---------------------------------
                                    151 ; Query for character in rx1_queue
                                    152 ; input:
                                    153 ;   none 
                                    154 ; output:
                                    155 ;   A     0 no charcter available
                                    156 ;   Z     1 no character available
                                    157 ;---------------------------------
      000908                        158 qgetc::
      000908                        159 uart1_qgetc::
      000908 C6 00 2E         [ 1]  160 	ld a,rx1_head 
      00090B C0 00 2F         [ 1]  161 	sub a,rx1_tail 
      00090E 81               [ 4]  162 	ret 
                                    163 
                                    164 ;---------------------------------
                                    165 ; wait character from UART1 
                                    166 ; input:
                                    167 ;   none
                                    168 ; output:
                                    169 ;   A 			char  
                                    170 ;--------------------------------	
      00090F                        171 getc:: ;console input
      00090F                        172 uart1_getc::
      00090F CD 09 08         [ 4]  173 	call uart1_qgetc
      000912 27 FB            [ 1]  174 	jreq uart1_getc 
      000914 89               [ 2]  175 	pushw x 
                                    176 ;; rx1_queue must be in page 0 	
      000915 A6 26            [ 1]  177 	ld a,#rx1_queue
      000917 CB 00 2E         [ 1]  178 	add a,rx1_head 
      00091A 5F               [ 1]  179 	clrw x  
      00091B 97               [ 1]  180 	ld xl,a 
      00091C F6               [ 1]  181 	ld a,(x)
      00091D 88               [ 1]  182 	push a
      00091E C6 00 2E         [ 1]  183 	ld a,rx1_head 
      000921 4C               [ 1]  184 	inc a 
      000922 A4 07            [ 1]  185 	and a,#RX_QUEUE_SIZE-1
      000924 C7 00 2E         [ 1]  186 	ld rx1_head,a 
      000927 84               [ 1]  187 	pop a  
      000928 85               [ 2]  188 	popw x
      000929 81               [ 4]  189 	ret 
                                    190 
                                    191 ;-----------------------------
                                    192 ;  constants replacing 
                                    193 ;  ANSI sequence received 
                                    194 ;  from terminal.
                                    195 ;  These are the ANSI sequences
                                    196 ;  accepted by function readln
                                    197 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                           000080   198     ARROW_LEFT=128
                           000081   199     ARROW_RIGHT=129
                           000082   200     HOME=130
                           000083   201     KEY_END=131
                           000084   202     SUP=132 
                                    203 
      00092A 43 81 44 80 48 82 46   204 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    205 
                                    206 ;--------------------------------
                                    207 ; receive ANSI ESC 
                                    208 ; sequence and convert it
                                    209 ; to a single character code 
                                    210 ; in range {128..255}
                                    211 ; This is called after receiving 
                                    212 ; ESC character. 
                                    213 ; ignored sequence return 0 
                                    214 ; output:
                                    215 ;   A    converted character 
                                    216 ;-------------------------------
      000936                        217 get_escape:
      000936 CD 09 0F         [ 4]  218     call getc 
      000939 A1 5B            [ 1]  219     cp a,#'[ ; this character is expected after ESC 
      00093B 27 02            [ 1]  220     jreq 1$
      00093D 4F               [ 1]  221     clr a
      00093E 81               [ 4]  222     ret
      00093F CD 09 0F         [ 4]  223 1$: call getc 
      000942 AE 09 2A         [ 2]  224     ldw x,#convert_table
      000945                        225 2$:
      000945 F1               [ 1]  226     cp a,(x)
      000946 27 08            [ 1]  227     jreq 4$
      000948 1C 00 02         [ 2]  228     addw x,#2
      00094B 7D               [ 1]  229     tnz (x)
      00094C 26 F7            [ 1]  230     jrne 2$
      00094E 4F               [ 1]  231     clr a
      00094F 81               [ 4]  232     ret 
      000950 5C               [ 1]  233 4$: incw x 
      000951 F6               [ 1]  234     ld a,(x)
      000952 A1 84            [ 1]  235     cp a,#SUP
      000954 26 05            [ 1]  236     jrne 5$
      000956 88               [ 1]  237     push a 
      000957 CD 09 0F         [ 4]  238     call getc
      00095A 84               [ 1]  239     pop a 
      00095B                        240 5$:
      00095B 81               [ 4]  241     ret 
                                    242 
                                    243 
                                    244 ;-----------------------------
                                    245 ; send an ASCIZ string to UART1 
                                    246 ; input: 
                                    247 ;   x 		char * 
                                    248 ; output:
                                    249 ;   none 
                                    250 ;-------------------------------
      00095C                        251 puts::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00095C F6               [ 1]  252     ld a,(x)
      00095D 27 06            [ 1]  253 	jreq 1$
      00095F CD 08 FF         [ 4]  254 	call putc 
      000962 5C               [ 1]  255 	incw x 
      000963 20 F7            [ 2]  256 	jra puts 
      000965 81               [ 4]  257 1$:	ret 
                                    258 
                                    259 
                                    260 ;---------------------------
                                    261 ; delete character at left 
                                    262 ; of cursor on terminal 
                                    263 ; input:
                                    264 ;   none 
                                    265 ; output:
                                    266 ;	none 
                                    267 ;---------------------------
      000966                        268 bksp:
      000966 A6 08            [ 1]  269 	ld a,#BS 
      000968 CD 08 FF         [ 4]  270 	call putc 
      00096B A6 20            [ 1]  271 	ld a,#SPACE 
      00096D CD 08 FF         [ 4]  272 	call putc 
      000970 A6 08            [ 1]  273 	ld a,#BS 
      000972 CD 08 FF         [ 4]  274 	call putc 
      000975 81               [ 4]  275 	ret 
                                    276 ;---------------------------
                                    277 ; delete n character left of cursor 
                                    278 ; at terminal.
                                    279 ; input: 
                                    280 ;   A   number of characters to delete.
                                    281 ; output:
                                    282 ;    none 
                                    283 ;--------------------------	
      000976                        284 delete_nchar:
      000976 88               [ 1]  285 	push a 
      000977 0D 01            [ 1]  286 0$:	tnz (1,sp)
      000979 27 07            [ 1]  287 	jreq 1$
      00097B CD 09 66         [ 4]  288 	call bksp 
      00097E 0A 01            [ 1]  289 	dec (1,sp)
      000980 20 F5            [ 2]  290 	jra 0$
      000982 84               [ 1]  291 1$:	pop a 
      000983 81               [ 4]  292 	ret
                                    293 
                                    294 ;--------------------------
                                    295 ; send ANSI escape sequence
                                    296 ; ANSI: ESC[
                                    297 ; note: ESC is ASCII 27
                                    298 ;       [   is ASCII 91  
                                    299 ;-------------------------- 
      000984                        300 send_escape:
      000984 A6 1B            [ 1]  301 	ld a,#ESC 
      000986 CD 08 FF         [ 4]  302 	call putc 
      000989 A6 5B            [ 1]  303 	ld a,#'[
      00098B CD 08 FF         [ 4]  304 	call putc 
      00098E 81               [ 4]  305 	ret 
                                    306 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                    307 ;---------------------
                                    308 ;send ANSI parameter value
                                    309 ; ANSI parameter values are 
                                    310 ; sent as ASCII charater 
                                    311 ; not as binary number.
                                    312 ; this routine 
                                    313 ; convert binary number to 
                                    314 ; ASCII string and send it.
                                    315 ; expected range {0..99}
                                    316 ; input: 
                                    317 ; 	A {0..99} 
                                    318 ; output:
                                    319 ;   none 
                                    320 ;---------------------
      00098F                        321 send_parameter:
      00098F 89               [ 2]  322 	pushw x 
      000990 5F               [ 1]  323 	clrw x 
      000991 97               [ 1]  324 	ld xl,a 
      000992 A6 0A            [ 1]  325 	ld a,#10 
      000994 62               [ 2]  326 	div x,a 
      000995 95               [ 1]  327 	ld xh,a 
      000996 9F               [ 1]  328 	ld a,xl
      000997 4D               [ 1]  329     tnz a 
      000998 27 0B            [ 1]  330     jreq 2$
      00099A A1 09            [ 1]  331 	cp a,#9 
      00099C 23 02            [ 2]  332 	jrule 1$
      00099E A6 09            [ 1]  333 	ld a,#9
      0009A0                        334 1$:
      0009A0 AB 30            [ 1]  335 	add a,#'0 
      0009A2 CD 08 FF         [ 4]  336 	call putc
      0009A5 9E               [ 1]  337 2$:	ld a,xh 
      0009A6 AB 30            [ 1]  338 	add a,#'0
      0009A8 CD 08 FF         [ 4]  339 	call putc 
      0009AB 85               [ 2]  340 	popw x 
      0009AC 81               [ 4]  341 	ret 
                                    342 
                                    343 ;--------------------------
                                    344 ; move cursor left n character
                                    345 ; ANSI: ESC[PnD 
                                    346 ; 'Pn' est a numerical parameter
                                    347 ; specifying number of characters 
                                    348 ; displacement.
                                    349 ; input:
                                    350 ;   A     character count
                                    351 ; output:
                                    352 ;   none
                                    353 ;--------------------------
      0009AD                        354 move_left:
      0009AD 88               [ 1]  355 	push a 
      0009AE CD 09 84         [ 4]  356 	call send_escape
      0009B1 84               [ 1]  357     pop a
      0009B2 CD 09 8F         [ 4]  358 	call send_parameter 
      0009B5 A6 44            [ 1]  359 	ld a,#'D 
      0009B7 CD 08 FF         [ 4]  360 	call putc 
      0009BA 81               [ 4]  361 	ret	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    362 
                                    363 
                                    364 ;--------------------------
                                    365 ; move cursor right n character 
                                    366 ; ANSI: ESC[PnC 
                                    367 ; input:
                                    368 ;   A     character count
                                    369 ; output:
                                    370 ;   none
                                    371 ;--------------------------
      0009BB                        372 move_right:
      0009BB 88               [ 1]  373 	push a 
      0009BC CD 09 84         [ 4]  374 	call send_escape
      0009BF 84               [ 1]  375     pop a
      0009C0 CD 09 8F         [ 4]  376 	call send_parameter 
      0009C3 A6 43            [ 1]  377 	ld a,#'C 
      0009C5 CD 08 FF         [ 4]  378 	call putc 
      0009C8 81               [ 4]  379 	ret 
                                    380 
                                    381 
                                    382 ;--------------------------
                                    383 ; print n spaces on terminal
                                    384 ; input:
                                    385 ;  X 		number of spaces 
                                    386 ; output:
                                    387 ;	none 
                                    388 ;---------------------------
      0009C9                        389 spaces::
      0009C9 A6 20            [ 1]  390 	ld a,#SPACE 
      0009CB 5D               [ 2]  391 1$:	tnzw x
      0009CC 27 06            [ 1]  392 	jreq 9$
      0009CE CD 08 FF         [ 4]  393 	call putc 
      0009D1 5A               [ 2]  394 	decw x
      0009D2 20 F7            [ 2]  395 	jra 1$
      0009D4                        396 9$: 
      0009D4 81               [ 4]  397 	ret 
                                    398 
                                    399 ;--------------------------
                                    400 ; insert character in text 
                                    401 ; line 
                                    402 ; input:
                                    403 ;   A       character to insert 
                                    404 ;   xl      line length
                                    405 ;   xh      insert position 
                                    406 ;   Y       line pointer 
                                    407 ; output:
                                    408 ;   tib     updated 
                                    409 ;   Y       updated  
                                    410 ;-------------------------
                           000001   411 	IPOS=1
                           000002   412 	KCHAR=2 
                           000003   413     LLEN=3 
                           000003   414 	VSIZE=3 
      0009D5                        415 insert_char: 
      0009D5                        416 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0009D5 52 03            [ 2]    1     sub sp,#VSIZE 
      0009D7 6B 02            [ 1]  417     ld (KCHAR,sp),a 
      0009D9 9E               [ 1]  418     ld a,xh 
      0009DA 6B 01            [ 1]  419 	ld (IPOS,sp),a
      0009DC 9F               [ 1]  420     ld a,xl 
      0009DD 6B 03            [ 1]  421     ld (LLEN,sp),a  
      0009DF 93               [ 1]  422     ldw x,y
      0009E0 5C               [ 1]  423     incw x 
      0009E1 7B 03            [ 1]  424     ld a,(LLEN,sp)
      0009E3 10 01            [ 1]  425     sub a,(IPOS,sp)
      0009E5 4C               [ 1]  426     inc a 
      0009E6 C7 00 0E         [ 1]  427     ld acc8,a 
      0009E9 72 5F 00 0D      [ 1]  428     clr acc16
      0009ED CD 13 BE         [ 4]  429     call move
      0009F0 90 AE 16 68      [ 2]  430     ldw y,#tib 
      0009F4 7B 01            [ 1]  431     ld a,(IPOS,sp)
      0009F6 C7 00 0E         [ 1]  432     ld acc8,a 
      0009F9 72 B9 00 0D      [ 2]  433     addw y,acc16 
      0009FD 7B 02            [ 1]  434     ld a,(KCHAR,sp)
      0009FF 90 F7            [ 1]  435     ld (y),a
      000A01 90 5C            [ 1]  436     incw y  
      000A03 7B 01            [ 1]  437     ld a,(IPOS,sp)
      000A05 CD 09 AD         [ 4]  438     call move_left
      000A08 AE 16 68         [ 2]  439     ldw x,#tib 
      000A0B CD 09 5C         [ 4]  440     call puts 
      000A0E 7B 03            [ 1]  441     ld a,(LLEN,sp)
      000A10 10 01            [ 1]  442     sub a,(IPOS,sp) 
      000A12 CD 09 AD         [ 4]  443     call move_left 
      000A15                        444 	_drop VSIZE 
      000A15 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A17 81               [ 4]  445 	ret 
                                    446 
                                    447 
                                    448 ;--------------------------
                                    449 ; delete character under cursor
                                    450 ; input:
                                    451 ;   A       line length   
                                    452 ;   xl      delete position
                                    453 ;   Y       line pointer 
                                    454 ;-------------------------
                           000001   455 	CPOS=1
                           000002   456 	LLEN=2
                           000002   457 	VSIZE=2
      000A18                        458 delete_under:
      000A18                        459 	_vars VSIZE 
      000A18 52 02            [ 2]    1     sub sp,#VSIZE 
      000A1A 6B 02            [ 1]  460     ld (LLEN,sp),a 
      000A1C 9F               [ 1]  461     ld a,xl 
      000A1D 6B 01            [ 1]  462     ld (CPOS,sp),a 
      000A1F 93               [ 1]  463     ldw x,y ; move destination
      000A20 90 5C            [ 1]  464     incw y  ; move source 
      000A22 7B 02            [ 1]  465     ld a,(LLEN,sp)
      000A24 10 01            [ 1]  466     sub a,(CPOS,sp)
      000A26 4C               [ 1]  467     inc a ; move including zero at end.
      000A27 C7 00 0E         [ 1]  468     ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      000A2A 72 5F 00 0D      [ 1]  469     clr acc16 
      000A2E CD 13 BE         [ 4]  470 	call move 
      000A31 90 AE 16 68      [ 2]  471     ldw y,#tib 
      000A35 7B 01            [ 1]  472     ld a,(CPOS,sp)
      000A37 C7 00 0E         [ 1]  473     ld acc8,a 
      000A3A 72 B9 00 0D      [ 2]  474     addw y,acc16 
      000A3E 93               [ 1]  475     ldw x,y 
      000A3F CD 09 5C         [ 4]  476     call puts 
      000A42 A6 20            [ 1]  477     ld a,#SPACE  
      000A44 CD 08 FF         [ 4]  478     call putc
      000A47 7B 02            [ 1]  479     ld a,(LLEN,sp)
      000A49 10 01            [ 1]  480     sub a,(CPOS,sp)
      000A4B CD 09 AD         [ 4]  481     call move_left 
      000A4E 0A 02            [ 1]  482     dec (LLEN,sp)
      000A50                        483 	_drop VSIZE 
      000A50 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A52 81               [ 4]  484 	ret 
                                    485 
                                    486 ;-----------------------------
                                    487 ; send ANSI sequence to delete
                                    488 ; whole line. Cursor position
                                    489 ; is not updated.
                                    490 ; ANSI: ESC[2K
                                    491 ; input:
                                    492 ;   none
                                    493 ; output:
                                    494 ;   none 
                                    495 ;-----------------------------
      000A53                        496 delete_line:
      000A53 CD 09 84         [ 4]  497     call send_escape
      000A56 A6 32            [ 1]  498 	ld a,#'2
      000A58 CD 08 FF         [ 4]  499 	call putc 
      000A5B A6 4B            [ 1]  500 	ld a,#'K 
      000A5D CD 08 FF         [ 4]  501 	call putc 
      000A60 81               [ 4]  502 	ret 
                                    503 
                                    504 
                                    505 
                                    506 ;------------------------------------
                                    507 ; read a line of text from terminal
                                    508 ;  control keys: 
                                    509 ;    BS   efface caractère à gauche 
                                    510 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    511 ;    CTRL_R  edit previous line.
                                    512 ;    CTRL_D  delete line  
                                    513 ;    HOME  go to start of line  
                                    514 ;    KEY_END  go to end of line 
                                    515 ;    ARROW_LEFT  move cursor left 
                                    516 ;    ARROW_RIGHT  move cursor right 
                                    517 ;    CTRL_O  toggle between insert/overwrite
                                    518 ; input:
                                    519 ;	none
                                    520 ; local variable on stack:
                                    521 ;	LL  line length
                                    522 ;   RXCHAR last received character 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                    523 ; output:
                                    524 ;   text in tib  buffer
                                    525 ;   count  line length 
                                    526 ;------------------------------------
                                    527 	; local variables
                           000001   528 	LL_HB=1  ; line length high byte 
                           000001   529 	RXCHAR = 1 ; last char received
                           000002   530 	LL = 2  ; accepted line length
                           000003   531 	CPOS=3  ; cursor position 
                           000004   532 	OVRWR=4 ; overwrite flag 
                           000005   533 	YTEMP=5 ; 
                           000006   534 	VSIZE=6 
      000A61                        535 readln::
      000A61 90 89            [ 2]  536 	pushw y 
      000A63                        537 	_vars VSIZE 
      000A63 52 06            [ 2]    1     sub sp,#VSIZE 
      000A65 5F               [ 1]  538 	clrw x 
      000A66 1F 02            [ 2]  539 	ldw (LL,sp),x 
      000A68 1F 03            [ 2]  540 	ldw (CPOS,sp),x 
      000A6A 03 04            [ 1]  541 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A6C 90 AE 16 68      [ 2]  542  	ldw y,#tib ; terminal input buffer
      000A70                        543 readln_loop:
      000A70 CD 09 0F         [ 4]  544 	call getc
      000A73 6B 01            [ 1]  545 	ld (RXCHAR,sp),a
      000A75 A1 1B            [ 1]  546     cp a,#ESC 
      000A77 26 05            [ 1]  547     jrne 0$
      000A79 CD 09 36         [ 4]  548     call get_escape 
      000A7C 6B 01            [ 1]  549     ld (RXCHAR,sp),a 
      000A7E A1 0D            [ 1]  550 0$:	cp a,#CR
      000A80 26 03            [ 1]  551 	jrne 1$
      000A82 CC 0C 09         [ 2]  552 	jp readln_quit
      000A85 A1 0A            [ 1]  553 1$:	cp a,#LF 
      000A87 26 03            [ 1]  554 	jrne 2$ 
      000A89 CC 0C 09         [ 2]  555 	jp readln_quit
      000A8C                        556 2$:
      000A8C A1 08            [ 1]  557 	cp a,#BS
      000A8E 26 12            [ 1]  558 	jrne 3$
                                    559 ; delete left 
      000A90 0D 03            [ 1]  560     tnz (CPOS,sp)
      000A92 27 DC            [ 1]  561     jreq readln_loop 
      000A94 A6 01            [ 1]  562     ld a,#1 
      000A96 CD 09 AD         [ 4]  563     call move_left
      000A99 0A 03            [ 1]  564     dec (CPOS,sp)
      000A9B 90 5A            [ 2]  565     decw y 
      000A9D 7B 03            [ 1]  566     ld a,(CPOS,sp) 
      000A9F CC 0B B5         [ 2]  567     jp 12$
      000AA2                        568 3$:
      000AA2 A1 04            [ 1]  569 	cp a,#CTRL_D
      000AA4 26 1A            [ 1]  570 	jrne 4$
                                    571 ;delete line 
      000AA6 CD 0A 53         [ 4]  572 	call delete_line 
      000AA9 7B 03            [ 1]  573     ld a,(CPOS,sp)
      000AAB 4C               [ 1]  574     inc a 
      000AAC CD 09 AD         [ 4]  575     call move_left 
      000AAF A6 3E            [ 1]  576 	ld a,#'> 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000AB1 CD 08 FF         [ 4]  577 	call putc 
      000AB4 90 AE 16 68      [ 2]  578 	ldw y,#tib
      000AB8 90 7F            [ 1]  579 	clr (y)
      000ABA 0F 02            [ 1]  580 	clr (LL,sp)
      000ABC 0F 03            [ 1]  581 	clr (CPOS,sp)
      000ABE 20 B0            [ 2]  582 	jra readln_loop
      000AC0                        583 4$:
      000AC0 A1 12            [ 1]  584 	cp a,#CTRL_R 
      000AC2 26 1E            [ 1]  585 	jrne 5$
                                    586 ;repeat line 
      000AC4 0D 02            [ 1]  587 	tnz (LL,sp)
      000AC6 26 A8            [ 1]  588 	jrne readln_loop
      000AC8 90 AE 16 68      [ 2]  589 	ldw y,#tib 
      000ACC 93               [ 1]  590 	ldw x,y
      000ACD CD 13 92         [ 4]  591 	call strlen
      000AD0 4D               [ 1]  592 	tnz a  
      000AD1 27 9D            [ 1]  593 	jreq readln_loop
      000AD3 6B 02            [ 1]  594 	ld (LL,sp),a 
      000AD5 6B 03            [ 1]  595     ld (CPOS,sp),a
      000AD7 93               [ 1]  596 	ldw x,y  
      000AD8 CD 09 5C         [ 4]  597 	call puts
      000ADB 0F 01            [ 1]  598 	clr (LL_HB,sp)
      000ADD 72 F9 01         [ 2]  599 	addw y,(LL_HB,sp)
      000AE0 20 8E            [ 2]  600 	jra readln_loop 
      000AE2                        601 5$:
      000AE2 A1 05            [ 1]  602 	cp a,#CTRL_E 
      000AE4 26 4D            [ 1]  603 	jrne 6$
                                    604 ;edit line number 
      000AE6 AE 16 68         [ 2]  605 	ldw x,#tib 
      000AE9 17 05            [ 2]  606 	ldw (YTEMP,sp),y  
      000AEB 16 07            [ 2]  607 	ldw y,(VSIZE+1,sp) ; restore xstack pointer 
      000AED CD 18 E5         [ 4]  608 	call atoi24
      000AF0 16 05            [ 2]  609 	ldw y,(YTEMP,sp) ; restore tib pointer 
      000AF2 4F               [ 1]  610 	clr a
      000AF3 CD 0C 45         [ 4]  611 	call search_lineno
      000AF6 5D               [ 2]  612 	tnzw x 
      000AF7 26 0B            [ 1]  613 	jrne 51$
      000AF9 0F 02            [ 1]  614 	clr (LL,sp)
      000AFB 90 AE 16 68      [ 2]  615 	ldw y,#tib
      000AFF 90 7F            [ 1]  616     clr (y) 	
      000B01 CC 0C 09         [ 2]  617 	jp readln_quit  
      000B04                        618 51$:
      000B04 CF 00 04         [ 2]  619 	ldw basicptr,x
      000B07 E6 02            [ 1]  620 	ld a,(2,x)
      000B09 C7 00 02         [ 1]  621 	ld count,a 
      000B0C 90 AE 16 68      [ 2]  622 	ldw y,#tib 
      000B10 CD 11 AE         [ 4]  623 	call decompile 
      000B13 0F 01            [ 1]  624 	clr (LL_HB,sp)
      000B15 A6 0D            [ 1]  625 	ld a,#CR 
      000B17 CD 08 FF         [ 4]  626 	call putc 
      000B1A A6 3E            [ 1]  627 	ld a,#'>
      000B1C CD 08 FF         [ 4]  628 	call putc
      000B1F AE 16 68         [ 2]  629     ldw x,#tib  
      000B22 CD 13 92         [ 4]  630 	call strlen 
      000B25 6B 02            [ 1]  631 	ld (LL,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000B27 CD 09 5C         [ 4]  632 	call puts 
      000B2A 90 93            [ 1]  633 	ldw y,x
      000B2C 7B 02            [ 1]  634     ld a,(LL,sp)
      000B2E 6B 03            [ 1]  635     ld (CPOS,sp),a  
      000B30 CC 0A 70         [ 2]  636 	jp readln_loop
      000B33                        637 6$:
      000B33 A1 81            [ 1]  638 	cp a,#ARROW_RIGHT
      000B35 26 15            [ 1]  639    	jrne 7$ 
                                    640 ; right arrow
      000B37 7B 03            [ 1]  641 	ld a,(CPOS,sp)
      000B39 11 02            [ 1]  642     cp a,(LL,sp)
      000B3B 2B 03            [ 1]  643     jrmi 61$
      000B3D CC 0A 70         [ 2]  644     jp readln_loop 
      000B40                        645 61$:
      000B40 A6 01            [ 1]  646     ld a,#1 
      000B42 CD 09 BB         [ 4]  647 	call move_right 
      000B45 0C 03            [ 1]  648 	inc (CPOS,sp)
      000B47 90 5C            [ 1]  649     incw y 
      000B49 CC 0A 70         [ 2]  650     jp readln_loop 
      000B4C A1 80            [ 1]  651 7$: cp a,#ARROW_LEFT  
      000B4E 26 13            [ 1]  652 	jrne 8$
                                    653 ; left arrow 
      000B50 0D 03            [ 1]  654 	tnz (CPOS,sp)
      000B52 26 03            [ 1]  655 	jrne 71$
      000B54 CC 0A 70         [ 2]  656 	jp readln_loop
      000B57                        657 71$:
      000B57 A6 01            [ 1]  658     ld a,#1 
      000B59 CD 09 AD         [ 4]  659 	call move_left 
      000B5C 0A 03            [ 1]  660 	dec (CPOS,sp)
      000B5E 90 5A            [ 2]  661     decw y 
      000B60 CC 0A 70         [ 2]  662 	jp readln_loop 
      000B63 A1 82            [ 1]  663 8$: cp a,#HOME  
      000B65 26 0E            [ 1]  664 	jrne 9$
                                    665 ; HOME 
      000B67 7B 03            [ 1]  666     ld a,(CPOS,sp)
      000B69 CD 09 AD         [ 4]  667     call move_left 
      000B6C 0F 03            [ 1]  668 	clr (CPOS,sp)
      000B6E 90 AE 16 68      [ 2]  669     ldw y,#tib 
      000B72 CC 0A 70         [ 2]  670 	jp readln_loop  
      000B75 A1 83            [ 1]  671 9$: cp a,#KEY_END  
      000B77 26 26            [ 1]  672 	jrne 10$
                                    673 ; KEY_END 
      000B79 7B 03            [ 1]  674 	ld a,(CPOS,sp)
      000B7B 11 02            [ 1]  675 	cp a,(LL,sp)
      000B7D 26 03            [ 1]  676 	jrne 91$
      000B7F CC 0A 70         [ 2]  677 	jp readln_loop 
      000B82                        678 91$:
      000B82 7B 02            [ 1]  679 	ld a,(LL,sp)
      000B84 10 03            [ 1]  680 	sub a,(CPOS,sp)
      000B86 CD 09 BB         [ 4]  681 	call move_right 
      000B89 7B 02            [ 1]  682 	ld a,(LL,sp)
      000B8B 6B 03            [ 1]  683 	ld (CPOS,sp),a
      000B8D 90 AE 16 68      [ 2]  684     ldw y,#tib
      000B91 72 5F 00 0D      [ 1]  685     clr acc16 
      000B95 C7 00 0E         [ 1]  686     ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000B98 72 B9 00 0D      [ 2]  687     addw y,acc16  
      000B9C CC 0A 70         [ 2]  688 	jp readln_loop 
      000B9F A1 0F            [ 1]  689 10$: cp a,#CTRL_O
      000BA1 26 08            [ 1]  690 	jrne 11$ 
                                    691 ; toggle between insert/overwrite
      000BA3 03 04            [ 1]  692 	cpl (OVRWR,sp)
      000BA5 CD 25 E3         [ 4]  693 	call beep_1khz
      000BA8 CC 0A 70         [ 2]  694 	jp readln_loop 
      000BAB A1 84            [ 1]  695 11$: cp a,#SUP 
      000BAD 26 11            [ 1]  696     jrne final_test 
                                    697 ; del character under cursor 
      000BAF 7B 03            [ 1]  698     ld a,(CPOS,sp)
      000BB1 11 02            [ 1]  699     cp a,(LL,sp)
      000BB3 2A 08            [ 1]  700     jrpl 13$
      000BB5                        701 12$:
      000BB5 97               [ 1]  702     ld xl,a    ; cursor position 
      000BB6 7B 02            [ 1]  703     ld a,(LL,sp)  ; line length
      000BB8 CD 0A 18         [ 4]  704     call delete_under
      000BBB 0A 02            [ 1]  705     dec (LLEN,sp)
      000BBD                        706 13$:
      000BBD CC 0A 70         [ 2]  707     jp readln_loop 
      000BC0                        708 final_test:
      000BC0 A1 20            [ 1]  709 	cp a,#SPACE
      000BC2 2A 03            [ 1]  710 	jrpl accept_char
      000BC4 CC 0A 70         [ 2]  711 	jp readln_loop
      000BC7                        712 accept_char:
      000BC7 A6 4F            [ 1]  713 	ld a,#TIB_SIZE-1
      000BC9 11 02            [ 1]  714 	cp a, (LL,sp)
      000BCB 2A 03            [ 1]  715 	jrpl 1$
      000BCD CC 0A 70         [ 2]  716 	jp readln_loop
      000BD0 0D 04            [ 1]  717 1$:	tnz (OVRWR,sp)
      000BD2 26 18            [ 1]  718 	jrne overwrite
                                    719 ; insert mode 
      000BD4 7B 03            [ 1]  720     ld a,(CPOS,sp)
      000BD6 11 02            [ 1]  721     cp a,(LL,sp)
      000BD8 27 12            [ 1]  722     jreq overwrite
      000BDA 7B 02            [ 1]  723     ld a,(LL,sp)
      000BDC 97               [ 1]  724     ld xl,a 
      000BDD 7B 03            [ 1]  725     ld a,(CPOS,sp)
      000BDF 95               [ 1]  726     ld xh,a
      000BE0 7B 01            [ 1]  727     ld a,(RXCHAR,sp)
      000BE2 CD 09 D5         [ 4]  728     call insert_char
      000BE5 0C 02            [ 1]  729     inc (LLEN,sp)
      000BE7 0C 03            [ 1]  730     inc (CPOS,sp)	
      000BE9 CC 0A 70         [ 2]  731     jp readln_loop 
      000BEC                        732 overwrite:
      000BEC 7B 01            [ 1]  733 	ld a,(RXCHAR,sp)
      000BEE 90 F7            [ 1]  734 	ld (y),a
      000BF0 90 5C            [ 1]  735     incw y
      000BF2 CD 08 FF         [ 4]  736     call putc 
      000BF5 7B 03            [ 1]  737 	ld a,(CPOS,sp)
      000BF7 11 02            [ 1]  738 	cp a,(LL,sp)
      000BF9 2B 09            [ 1]  739 	jrmi 1$
      000BFB 90 7F            [ 1]  740 	clr (y)
      000BFD 0C 02            [ 1]  741 	inc (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000BFF 0C 03            [ 1]  742     inc (CPOS,sp)
      000C01 CC 0A 70         [ 2]  743 	jp readln_loop 
      000C04                        744 1$:	
      000C04 0C 03            [ 1]  745 	inc (CPOS,sp)
      000C06 CC 0A 70         [ 2]  746 	jp readln_loop 
      000C09                        747 readln_quit:
      000C09 90 AE 16 68      [ 2]  748 	ldw y,#tib
      000C0D 0F 01            [ 1]  749     clr (LL_HB,sp) 
      000C0F 72 F9 01         [ 2]  750     addw y,(LL_HB,sp)
      000C12 90 7F            [ 1]  751     clr (y)
      000C14 7B 02            [ 1]  752 	ld a,(LL,sp)
      000C16 C7 00 02         [ 1]  753 	ld count,a 
      000C19 A6 0D            [ 1]  754 	ld a,#CR
      000C1B CD 08 FF         [ 4]  755 	call putc
      000C1E                        756 	_drop VSIZE 
      000C1E 5B 06            [ 2]    1     addw sp,#VSIZE 
      000C20 90 85            [ 2]  757 	popw y 
      000C22 81               [ 4]  758 	ret
                                    759 
                                    760 ;------------------------------
                                    761 ; print byte  in hexadecimal 
                                    762 ; on console
                                    763 ; input:
                                    764 ;    A		byte to print
                                    765 ;------------------------------
      000C23                        766 print_hex::
      000C23 88               [ 1]  767 	push a 
      000C24 4E               [ 1]  768 	swap a 
      000C25 CD 0C 3A         [ 4]  769 	call to_hex_char 
      000C28 CD 08 FF         [ 4]  770 	call putc 
      000C2B 7B 01            [ 1]  771     ld a,(1,sp) 
      000C2D CD 0C 3A         [ 4]  772 	call to_hex_char
      000C30 CD 08 FF         [ 4]  773 	call putc
      000C33 A6 20            [ 1]  774 	ld a,#SPACE 
      000C35 CD 08 FF         [ 4]  775 	call putc 
      000C38 84               [ 1]  776 	pop a 
      000C39 81               [ 4]  777 	ret 
                                    778 
                                    779 ;----------------------------------
                                    780 ; convert to hexadecimal digit 
                                    781 ; input:
                                    782 ;   A       digit to convert 
                                    783 ; output:
                                    784 ;   A       hexdecimal character 
                                    785 ;----------------------------------
      000C3A                        786 to_hex_char::
      000C3A A4 0F            [ 1]  787 	and a,#15 
      000C3C A1 09            [ 1]  788 	cp a,#9 
      000C3E 23 02            [ 2]  789 	jrule 1$ 
      000C40 AB 07            [ 1]  790 	add a,#7
      000C42 AB 30            [ 1]  791 1$: add a,#'0 
      000C44 81               [ 4]  792 	ret 
                                    793 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C45                         51 search_lineno::
      000C45                         52 	_vars VSIZE
      000C45 52 02            [ 2]    1     sub sp,#VSIZE 
      000C47 0F 01            [ 1]   53 	clr (LL,sp)
      000C49 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C4D 4D               [ 1]   55 	tnz a 
      000C4E 27 04            [ 1]   56 	jreq search_ln_loop
      000C50 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C54                         58 search_ln_loop:
      000C54 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C58 2A 10            [ 1]   60 	jrpl 8$
      000C5A 90 F3            [ 1]   61 	cpw x,(y)
      000C5C 27 0E            [ 1]   62 	jreq 9$
      000C5E 2B 0A            [ 1]   63 	jrmi 8$ 
      000C60 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C63 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C65 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C68 20 EA            [ 2]   67 	jra search_ln_loop 
      000C6A                         68 8$: 
      000C6A 5F               [ 1]   69 	clrw x 	
      000C6B 51               [ 1]   70 	exgw x,y 
      000C6C                         71 9$: _drop VSIZE
      000C6C 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C6E 51               [ 1]   72 	exgw x,y   
      000C6F 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C70                         83 del_line: 
      000C70                         84 	_vars VSIZE 
      000C70 52 04            [ 2]    1     sub sp,#VSIZE 
      000C72 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C74 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C76 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C78 90 93            [ 1]   88 	ldw y,x  
      000C7A 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C7D 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C7F 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000C83 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C86 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C8A 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C8C CD 13 BE         [ 4]   95 	call move
      000C8F 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000C93 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C96 90 CF 00 1D      [ 2]   98 	ldw txtend,y
      000C9A 90 CF 00 30      [ 2]   99 	ldw dvar_bgn,y 
      000C9E 90 CF 00 32      [ 2]  100 	ldw dvar_end,y   
      000CA2                        101 	_drop VSIZE     
      000CA2 5B 04            [ 2]    1     addw sp,#VSIZE 
      000CA4 81               [ 4]  102 	ret 
                                    103 
                                    104 ;---------------------------------------------
                                    105 ; open a gap in text area to 
                                    106 ; move new line in this gap
                                    107 ; input:
                                    108 ;    X 			addr gap start 
                                    109 ;    Y 			gap length 
                                    110 ; output:
                                    111 ;    X 			addr gap start 
                                    112 ;--------------------------------------------
                           000001   113 	DEST=1
                           000003   114 	SRC=3
                           000005   115 	LEN=5
                           000006   116 	VSIZE=6 
      000CA5                        117 open_gap:
      000CA5 C3 00 1D         [ 2]  118 	cpw x,txtend 
      000CA8 24 31            [ 1]  119 	jruge 9$
      000CAA                        120 	_vars VSIZE
      000CAA 52 06            [ 2]    1     sub sp,#VSIZE 
      000CAC 1F 03            [ 2]  121 	ldw (SRC,sp),x 
      000CAE 17 05            [ 2]  122 	ldw (LEN,sp),y 
      000CB0 90 CF 00 0D      [ 2]  123 	ldw acc16,y 
      000CB4 90 93            [ 1]  124 	ldw y,x ; SRC
      000CB6 72 BB 00 0D      [ 2]  125 	addw x,acc16  
      000CBA 1F 01            [ 2]  126 	ldw (DEST,sp),x 
                                    127 ;compute size to move 	
      000CBC CE 00 1D         [ 2]  128 	ldw x,txtend 
      000CBF 72 F0 03         [ 2]  129 	subw x,(SRC,sp)
      000CC2 CF 00 0D         [ 2]  130 	ldw acc16,x ; size to move
      000CC5 1E 01            [ 2]  131 	ldw x,(DEST,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      000CC7 CD 13 BE         [ 4]  132 	call move
      000CCA CE 00 1D         [ 2]  133 	ldw x,txtend
      000CCD 72 FB 05         [ 2]  134 	addw x,(LEN,sp)
      000CD0 CF 00 1D         [ 2]  135 	ldw txtend,x
      000CD3 CF 00 30         [ 2]  136 	ldw dvar_bgn,x 
      000CD6 CF 00 32         [ 2]  137 	ldw dvar_end,x 
      000CD9                        138 	_drop VSIZE 
      000CD9 5B 06            [ 2]    1     addw sp,#VSIZE 
      000CDB 81               [ 4]  139 9$:	ret 
                                    140 
                                    141 ;--------------------------------------------
                                    142 ; insert line in pad into text area 
                                    143 ; first search for already existing 
                                    144 ; replace existing 
                                    145 ; if new line empty delete existing one. 
                                    146 ; input:
                                    147 ;   ptr16		pointer to tokenized line  
                                    148 ; output:
                                    149 ;   none
                                    150 ;---------------------------------------------
                           000001   151 	DEST=1  ; text area insertion address 
                           000003   152 	SRC=3   ; str to insert address 
                           000005   153 	LINENO=5 ; line number 
                           000007   154 	LLEN=7 ; line length 
                           000008   155 	VSIZE=8  
      000CDC                        156 insert_line:
      000CDC                        157 	_vars VSIZE 
      000CDC 52 08            [ 2]    1     sub sp,#VSIZE 
      000CDE 72 CE 00 19      [ 5]  158 	ldw x,[ptr16]
      000CE2 1F 05            [ 2]  159 	ldw (LINENO,sp),x 
      000CE4 0F 07            [ 1]  160 	clr (LLEN,sp)
      000CE6 CE 00 19         [ 2]  161 	ldw x,ptr16 
      000CE9 E6 02            [ 1]  162 	ld a,(2,x)
      000CEB 6B 08            [ 1]  163 	ld (LLEN+1,sp),a 
      000CED 4F               [ 1]  164 	clr a 
      000CEE 1E 05            [ 2]  165 	ldw x,(LINENO,sp)
      000CF0 CD 0C 45         [ 4]  166 	call search_lineno
      000CF3 5D               [ 2]  167 	tnzw x 
      000CF4 27 07            [ 1]  168 	jreq 0$ 
      000CF6 1F 01            [ 2]  169 	ldw (DEST,sp),x 
      000CF8 CD 0C 70         [ 4]  170 	call del_line 
      000CFB 20 02            [ 2]  171 	jra 1$
      000CFD 17 01            [ 2]  172 0$: ldw (DEST,sp),y
      000CFF A6 03            [ 1]  173 1$: ld a,#3 
      000D01 11 08            [ 1]  174 	cp a,(LLEN+1,sp)
      000D03 27 3B            [ 1]  175 	jreq 9$
                                    176 ; check for space 
      000D05 CE 00 1D         [ 2]  177 	ldw x,txtend 
      000D08 72 FB 07         [ 2]  178 	addw x,(LLEN,sp)
      000D0B A3 16 62         [ 2]  179 	cpw x,#tib-6 
      000D0E 25 05            [ 1]  180 	jrult 3$
      000D10 A6 01            [ 1]  181 	ld a,#ERR_MEM_FULL
      000D12 CC 16 96         [ 2]  182 	jp tb_error 
      000D15                        183 3$: ; create gap to insert line 
      000D15 1E 01            [ 2]  184 	ldw x,(DEST,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      000D17 16 07            [ 2]  185 	ldw y,(LLEN,sp)
      000D19 CD 0C A5         [ 4]  186 	call open_gap 
                                    187 ; move new line in gap 
      000D1C 1E 07            [ 2]  188 	ldw x,(LLEN,sp)
      000D1E CF 00 0D         [ 2]  189 	ldw acc16,x 
      000D21 90 AE 16 B8      [ 2]  190 	ldw y,#pad ;SRC 
      000D25 1E 01            [ 2]  191 	ldw x,(DEST,sp) ; dest address 
      000D27 CD 13 BE         [ 4]  192 	call move
      000D2A 1E 01            [ 2]  193 	ldw x,(DEST,sp)
      000D2C C3 00 1D         [ 2]  194 	cpw x,txtend 
      000D2F 25 0F            [ 1]  195 	jrult 9$ 
      000D31 1E 07            [ 2]  196 	ldw x,(LLEN,sp)
      000D33 72 BB 00 1D      [ 2]  197 	addw x,txtend 
      000D37 CF 00 1D         [ 2]  198 	ldw txtend,x 
      000D3A CF 00 30         [ 2]  199 	ldw dvar_bgn,x 
      000D3D CF 00 32         [ 2]  200 	ldw dvar_end,x 
      000D40                        201 9$:	
      000D40                        202 	_drop VSIZE
      000D40 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D42 81               [ 4]  203 	ret
                                    204 
                                    205 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    206 ;; compiler routines        ;;
                                    207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    208 ;------------------------------------
                                    209 ; parse quoted string 
                                    210 ; input:
                                    211 ;   Y 	pointer to tib 
                                    212 ;   X   pointer to output buffer 
                                    213 ; output:
                                    214 ;	buffer   parsed string
                                    215 ;------------------------------------
                           000001   216 	PREV = 1
                           000002   217 	CURR =2
                           000002   218 	VSIZE=2
      000D43                        219 parse_quote: 
      000D43                        220 	_vars VSIZE 
      000D43 52 02            [ 2]    1     sub sp,#VSIZE 
      000D45 4F               [ 1]  221 	clr a
      000D46 6B 01            [ 1]  222 1$:	ld (PREV,sp),a 
      000D48                        223 2$:	
      000D48 91 D6 00         [ 4]  224 	ld a,([in.w],y)
      000D4B 27 24            [ 1]  225 	jreq 6$
      000D4D 72 5C 00 01      [ 1]  226 	inc in 
      000D51 6B 02            [ 1]  227 	ld (CURR,sp),a 
      000D53 A6 5C            [ 1]  228 	ld a,#'\
      000D55 11 01            [ 1]  229 	cp a, (PREV,sp)
      000D57 26 0A            [ 1]  230 	jrne 3$
      000D59 0F 01            [ 1]  231 	clr (PREV,sp)
      000D5B 7B 02            [ 1]  232 	ld a,(CURR,sp)
      000D5D AD 1C            [ 4]  233 	callr convert_escape
      000D5F F7               [ 1]  234 	ld (x),a 
      000D60 5C               [ 1]  235 	incw x 
      000D61 20 E5            [ 2]  236 	jra 2$
      000D63                        237 3$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      000D63 7B 02            [ 1]  238 	ld a,(CURR,sp)
      000D65 A1 5C            [ 1]  239 	cp a,#'\'
      000D67 27 DD            [ 1]  240 	jreq 1$
      000D69 A1 22            [ 1]  241 	cp a,#'"
      000D6B 27 04            [ 1]  242 	jreq 6$ 
      000D6D F7               [ 1]  243 	ld (x),a 
      000D6E 5C               [ 1]  244 	incw x 
      000D6F 20 D7            [ 2]  245 	jra 2$
      000D71                        246 6$:
      000D71 7F               [ 1]  247 	clr (x)
      000D72 5C               [ 1]  248 	incw x 
      000D73 90 93            [ 1]  249 	ldw y,x 
      000D75 5F               [ 1]  250 	clrw x 
      000D76 A6 02            [ 1]  251 	ld a,#TK_QSTR  
      000D78                        252 	_drop VSIZE
      000D78 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D7A 81               [ 4]  253 	ret 
                                    254 
                                    255 ;---------------------------------------
                                    256 ; called by parse_quote
                                    257 ; subtitute escaped character 
                                    258 ; by their ASCII value .
                                    259 ; input:
                                    260 ;   A  character following '\'
                                    261 ; output:
                                    262 ;   A  substitued char or same if not valid.
                                    263 ;---------------------------------------
      000D7B                        264 convert_escape:
      000D7B 89               [ 2]  265 	pushw x 
      000D7C AE 0D 90         [ 2]  266 	ldw x,#escaped 
      000D7F F1               [ 1]  267 1$:	cp a,(x)
      000D80 27 06            [ 1]  268 	jreq 2$
      000D82 7D               [ 1]  269 	tnz (x)
      000D83 27 09            [ 1]  270 	jreq 3$
      000D85 5C               [ 1]  271 	incw x 
      000D86 20 F7            [ 2]  272 	jra 1$
      000D88 1D 0D 90         [ 2]  273 2$: subw x,#escaped 
      000D8B 9F               [ 1]  274 	ld a,xl 
      000D8C AB 07            [ 1]  275 	add a,#7
      000D8E 85               [ 2]  276 3$:	popw x 
      000D8F 81               [ 4]  277 	ret 
                                    278 
      000D90 61 62 74 6E 76 66 72   279 escaped:: .asciz "abtnvfr"
             00
                                    280 
                                    281 ;-------------------------
                                    282 ; integer parser 
                                    283 ; input:
                                    284 ;   X 		point to output buffer  
                                    285 ;   Y 		point to tib 
                                    286 ;   A 	    first digit|'$' 
                                    287 ; output:  
                                    288 ;   X 		integer bits 15..0 
                                    289 ;   A 		TK_INTGR
                                    290 ;   acc24   24 bits integer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    291 ;-------------------------
                           000001   292 	BASE=1
                           000002   293 	TCHAR=2 
                           000003   294 	XSAVE=3
                           000004   295 	VSIZE=4 
      000D98                        296 parse_integer: ; { -- n }
      000D98 89               [ 2]  297 	pushw x 	
      000D99 4B 00            [ 1]  298 	push #0 ; TCHAR
      000D9B 4B 0A            [ 1]  299 	push #10 ; BASE=10
      000D9D A1 24            [ 1]  300 	cp a,#'$
      000D9F 26 04            [ 1]  301 	jrne 2$ 
      000DA1                        302     _drop #1
      000DA1 5B 01            [ 2]    1     addw sp,##1 
      000DA3 4B 10            [ 1]  303 	push #16  ; BASE=16
      000DA5 F7               [ 1]  304 2$:	ld (x),a 
      000DA6 5C               [ 1]  305 	incw x 
      000DA7 91 D6 00         [ 4]  306 	ld a,([in.w],y)
      000DAA 72 5C 00 01      [ 1]  307 	inc in 
      000DAE CD 18 D9         [ 4]  308 	call to_upper 
      000DB1 6B 02            [ 1]  309 	ld (TCHAR,sp),a 
      000DB3 CD 0E 39         [ 4]  310 	call is_digit 
      000DB6 25 ED            [ 1]  311 	jrc 2$
      000DB8 A6 10            [ 1]  312 	ld a,#16 
      000DBA 11 01            [ 1]  313 	cp a,(BASE,sp)
      000DBC 26 0A            [ 1]  314 	jrne 3$ 
      000DBE 7B 02            [ 1]  315 	ld a,(TCHAR,sp)
      000DC0 A1 41            [ 1]  316 	cp a,#'A 
      000DC2 2B 04            [ 1]  317 	jrmi 3$ 
      000DC4 A1 47            [ 1]  318 	cp a,#'G 
      000DC6 2B DD            [ 1]  319 	jrmi 2$ 
      000DC8 72 5A 00 01      [ 1]  320 3$: dec in 	
      000DCC 7F               [ 1]  321     clr (x)
      000DCD 1E 03            [ 2]  322 	ldw x,(XSAVE,sp)
      000DCF 90 AE 17 73      [ 2]  323 	ldw y,#XSTACK_EMPTY 
      000DD3 CD 18 E5         [ 4]  324 	call atoi24
      000DD6 16 03            [ 2]  325 	ldw y,(XSAVE,sp)
      000DD8 C6 00 0C         [ 1]  326 	ld a,acc24 
      000DDB 90 F7            [ 1]  327 	ld (y),a 
      000DDD 90 5C            [ 1]  328 	incw y  
      000DDF CE 00 0D         [ 2]  329 	ldw x,acc16 
      000DE2 90 FF            [ 2]  330 	ldw (y),x 
      000DE4 72 A9 00 02      [ 2]  331 	addw y,#2
      000DE8 A6 84            [ 1]  332 	ld a,#TK_INTGR
      000DEA                        333 	_drop VSIZE  
      000DEA 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DEC 81               [ 4]  334 	ret 	
                                    335 
                                    336 ;-------------------------
                                    337 ; binary integer parser
                                    338 ; build integer in acc24  
                                    339 ; input:
                                    340 ;   X 		point to output buffer  
                                    341 ;   Y 		point to tib 
                                    342 ;   A 	    '&' 
                                    343 ; output:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    344 ;   buffer  TK_INTGR integer  
                                    345 ;   X 		int16 
                                    346 ;   A 		TK_INTGR
                                    347 ;   acc24    int24 
                                    348 ;-------------------------
                           000001   349 	BINARY=1 ; 24 bits integer 
                           000003   350 	VSIZE=3
      000DED                        351 parse_binary: ; { -- n }
      000DED 4B 00            [ 1]  352 	push #0
      000DEF 4B 00            [ 1]  353 	push #0
      000DF1 4B 00            [ 1]  354 	push #0
      000DF3                        355 2$:	
      000DF3 91 D6 00         [ 4]  356 	ld a,([in.w],y)
      000DF6 72 5C 00 01      [ 1]  357 	inc in 
      000DFA A1 30            [ 1]  358 	cp a,#'0 
      000DFC 27 06            [ 1]  359 	jreq 3$
      000DFE A1 31            [ 1]  360 	cp a,#'1 
      000E00 27 02            [ 1]  361 	jreq 3$ 
      000E02 20 0B            [ 2]  362 	jra bin_exit 
      000E04 A0 30            [ 1]  363 3$: sub a,#'0 
      000E06 46               [ 1]  364 	rrc a
      000E07 09 03            [ 1]  365 	rlc (BINARY+2,sp) 
      000E09 09 02            [ 1]  366 	rlc (BINARY+1,sp)
      000E0B 09 01            [ 1]  367 	rlc (BINARY,sp) 
      000E0D 20 E4            [ 2]  368 	jra 2$  
      000E0F                        369 bin_exit:
      000E0F 72 5A 00 01      [ 1]  370 	dec in 
      000E13 90 93            [ 1]  371 	ldw y,x
      000E15 7B 01            [ 1]  372 	ld a,(BINARY,sp)
      000E17 90 F7            [ 1]  373 	ld (y),a 
      000E19 90 5C            [ 1]  374 	incw y 
      000E1B 1E 02            [ 2]  375 	ldw x,(BINARY+1,sp)
      000E1D 90 FF            [ 2]  376 	ldw (y),x 
      000E1F 72 A9 00 02      [ 2]  377 	addw y,#2  
      000E23 A6 84            [ 1]  378 	ld a,#TK_INTGR 	
      000E25                        379 	_drop VSIZE 
      000E25 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E27 81               [ 4]  380 	ret
                                    381 
                                    382 ;-------------------------------------
                                    383 ; check if A is a letter 
                                    384 ; input:
                                    385 ;   A 			character to test 
                                    386 ; output:
                                    387 ;   C flag      1 true, 0 false 
                                    388 ;-------------------------------------
      000E28                        389 is_alpha::
      000E28 A1 41            [ 1]  390 	cp a,#'A 
      000E2A 8C               [ 1]  391 	ccf 
      000E2B 24 0B            [ 1]  392 	jrnc 9$ 
      000E2D A1 5B            [ 1]  393 	cp a,#'Z+1 
      000E2F 25 07            [ 1]  394 	jrc 9$ 
      000E31 A1 61            [ 1]  395 	cp a,#'a 
      000E33 8C               [ 1]  396 	ccf 
      000E34 24 02            [ 1]  397 	jrnc 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000E36 A1 7B            [ 1]  398 	cp a,#'z+1
      000E38 81               [ 4]  399 9$: ret 	
                                    400 
                                    401 ;------------------------------------
                                    402 ; check if character in {'0'..'9'}
                                    403 ; input:
                                    404 ;    A  character to test
                                    405 ; output:
                                    406 ;    Carry  0 not digit | 1 digit
                                    407 ;------------------------------------
      000E39                        408 is_digit::
      000E39 A1 30            [ 1]  409 	cp a,#'0
      000E3B 25 03            [ 1]  410 	jrc 1$
      000E3D A1 3A            [ 1]  411     cp a,#'9+1
      000E3F 8C               [ 1]  412 	ccf 
      000E40 8C               [ 1]  413 1$:	ccf 
      000E41 81               [ 4]  414     ret
                                    415 
                                    416 ;-------------------------------------
                                    417 ; return true if character in  A 
                                    418 ; is letter or digit.
                                    419 ; input:
                                    420 ;   A     ASCII character 
                                    421 ; output:
                                    422 ;   A     no change 
                                    423 ;   Carry    0 false| 1 true 
                                    424 ;--------------------------------------
      000E42                        425 is_alnum::
      000E42 CD 0E 39         [ 4]  426 	call is_digit
      000E45 25 03            [ 1]  427 	jrc 1$ 
      000E47 CD 0E 28         [ 4]  428 	call is_alpha
      000E4A 81               [ 4]  429 1$:	ret 
                                    430 
                                    431 ;-----------------------------
                                    432 ; check if character in A 
                                    433 ; is a valid symbol character 
                                    434 ; valid: Upper case LETTER,DIGIT,'_' 
                                    435 ; input:
                                    436 ;    A   character to validate
                                    437 ; output:
                                    438 ;    Carry   set if valid 
                                    439 ;----------------------------
      000E4B                        440 is_symbol_char: 
      000E4B A1 5F            [ 1]  441 	cp a,#'_ 
      000E4D 26 03            [ 1]  442 	jrne 1$
      000E4F 99               [ 1]  443 	scf 
      000E50 20 03            [ 2]  444 	jra 9$ 
      000E52 CD 0E 42         [ 4]  445 1$:	call is_alnum 
      000E55 81               [ 4]  446 9$: ret 
                                    447 
                                    448 ;---------------------------
                                    449 ;  when lexical unit begin 
                                    450 ;  with a letter a symbol 
                                    451 ;  is expected.
                                    452 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    453 ;   A   first character of symbol 
                                    454 ;	X   point to output buffer 
                                    455 ;   Y   point to input text 
                                    456 ; output:
                                    457 ;	X   after symbol 
                                    458 ;   Y   point after lexical unit 
                                    459 ;---------------------------
      000E56                        460 parse_symbol:
      000E56 5C               [ 1]  461 	incw x ; keep space for TK_ID 
      000E57                        462 symb_loop: 
                                    463 ; symbol are converted to upper case 
      000E57 CD 18 D9         [ 4]  464 	call to_upper  
      000E5A F7               [ 1]  465 	ld (x), a 
      000E5B 5C               [ 1]  466 	incw x
      000E5C 91 D6 00         [ 4]  467 	ld a,([in.w],y)
      000E5F 72 5C 00 01      [ 1]  468 	inc in 
      000E63 CD 0E 4B         [ 4]  469 	call is_symbol_char 
      000E66 25 EF            [ 1]  470 	jrc symb_loop 
      000E68 7F               [ 1]  471 	clr (x)
      000E69 72 5A 00 01      [ 1]  472 	dec in  
      000E6D 81               [ 4]  473 	ret 
                                    474 
                                    475 ;---------------------------
                                    476 ;  token begin with a letter,
                                    477 ;  is keyword or variable. 	
                                    478 ; input:
                                    479 ;   X 		point to pad 
                                    480 ;   Y 		point to text
                                    481 ;   A 	    first letter  
                                    482 ; output:
                                    483 ;   X		exec_addr|var_addr 
                                    484 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    485 ;   pad 	keyword|var_name  
                                    486 ;--------------------------  
                           000001   487 	XFIRST=1
                           000002   488 	VSIZE=2
      000E6E                        489 parse_keyword: 
      000E6E 89               [ 2]  490 	pushw x ; preserve *symbol 
      000E6F CD 0E 56         [ 4]  491 	call parse_symbol
      000E72 1E 01            [ 2]  492 	ldw x,(XFIRST,sp) 
      000E74 E6 02            [ 1]  493 	ld a,(2,x)
      000E76 26 0F            [ 1]  494 	jrne 2$
                                    495 ; one letter variable name 
      000E78 E6 01            [ 1]  496 	ld a,(1,x) 
      000E7A A0 41            [ 1]  497 	sub a,#'A 
      000E7C AE 00 03         [ 2]  498 	ldw x,#3 
      000E7F 42               [ 4]  499 	mul x,a 
      000E80 1C 00 35         [ 2]  500 	addw x,#vars 
      000E83 A6 85            [ 1]  501 	ld a,#TK_VAR 
      000E85 20 36            [ 2]  502 	jra 4$ 
      000E87                        503 2$: ; check for keyword, otherwise syntax error.
      000E87                        504 	_ldx_dict kword_dict ; dictionary entry point
      000E87 AE 36 94         [ 2]    1     ldw x,#kword_dict+2
      000E8A 16 01            [ 2]  505 	ldw y,(XFIRST,sp) ; name to search for
      000E8C 90 5C            [ 1]  506 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000E8E CD 19 66         [ 4]  507 	call search_dict
      000E91 4D               [ 1]  508 	tnz a
      000E92 26 29            [ 1]  509 	jrne 4$
                                    510 ; not in dictionary
                                    511 ; compile it as TK_LABEL
      000E94 16 01            [ 2]  512 	ldw y,(XFIRST,sp)
      000E96 A6 03            [ 1]  513 	ld a,#TK_LABEL 
      000E98 90 F7            [ 1]  514 	ld (y),a 
      000E9A 90 5C            [ 1]  515 	incw y
      000E9C 93               [ 1]  516 	ldw x,y 
      000E9D CD 13 92         [ 4]  517 	call strlen
      000EA0 A1 0F            [ 1]  518 	cp a,#NAME_MAX_LEN 
      000EA2 23 02            [ 2]  519 	jrule 22$ 
      000EA4 A6 0F            [ 1]  520 	ld a,#NAME_MAX_LEN 
      000EA6                        521 22$:	
      000EA6 88               [ 1]  522 	push a 
      000EA7                        523 24$:
      000EA7 90 F6            [ 1]  524     ld a,(y)
      000EA9 27 09            [ 1]  525 	jreq 3$
      000EAB 90 5C            [ 1]  526 	incw y
      000EAD 0A 01            [ 1]  527 	dec (1,sp) 
      000EAF 26 F6            [ 1]  528 	jrne 24$
      000EB1 4F               [ 1]  529 	clr a 
      000EB2 90 F7            [ 1]  530 	ld (y),a 
      000EB4 90 5C            [ 1]  531 3$: incw y 
      000EB6                        532 	_drop 1 
      000EB6 5B 01            [ 2]    1     addw sp,#1 
      000EB8 A6 03            [ 1]  533 	ld a,#TK_LABEL 
      000EBA 5F               [ 1]  534 	clrw x 
      000EBB 20 1B            [ 2]  535 	jra 5$ 
      000EBD                        536 4$:	
      000EBD 16 01            [ 2]  537 	ldw y,(XFIRST,sp)
      000EBF A1 87            [ 1]  538 	cp a,#TK_NOT 
      000EC1 2B 06            [ 1]  539 	jrmi 41$
      000EC3 90 F7            [ 1]  540 	ld (y),a 
      000EC5 90 5C            [ 1]  541 	incw y 
      000EC7 20 0F            [ 2]  542 	jra 5$ 
      000EC9                        543 41$:	
      000EC9 A3 1C DD         [ 2]  544 	cpw x,#let  
      000ECC 27 0A            [ 1]  545 	jreq 5$  ; don't compile LET command 
      000ECE 90 F7            [ 1]  546 	ld (y),a 
      000ED0 90 5C            [ 1]  547 	incw y 
      000ED2 90 FF            [ 2]  548 	ldw (y),x
      000ED4 72 A9 00 02      [ 2]  549 	addw y,#2  
      000ED8                        550 5$:	_drop VSIZE 
      000ED8 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EDA 81               [ 4]  551 	ret  	
                                    552 
                                    553 ;------------------------------------
                                    554 ; skip character c in text starting from 'in'
                                    555 ; input:
                                    556 ;	 y 		point to text buffer
                                    557 ;    a 		character to skip
                                    558 ; output:  
                                    559 ;	'in' ajusted to new position
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    560 ;------------------------------------
                           000001   561 	C = 1 ; local var
      000EDB                        562 skip:
      000EDB 88               [ 1]  563 	push a
      000EDC 91 D6 00         [ 4]  564 1$:	ld a,([in.w],y)
      000EDF 27 0A            [ 1]  565 	jreq 2$
      000EE1 11 01            [ 1]  566 	cp a,(C,sp)
      000EE3 26 06            [ 1]  567 	jrne 2$
      000EE5 72 5C 00 01      [ 1]  568 	inc in
      000EE9 20 F1            [ 2]  569 	jra 1$
      000EEB                        570 2$: _drop 1 
      000EEB 5B 01            [ 2]    1     addw sp,#1 
      000EED 81               [ 4]  571 	ret
                                    572 	
                                    573 
                                    574 ;------------------------------------
                                    575 ; scan text for next token
                                    576 ; input: 
                                    577 ;	X 		pointer to buffer where 
                                    578 ;	        token id and value are copied 
                                    579 ; use:
                                    580 ;	Y   pointer to text in tib 
                                    581 ; output:
                                    582 ;   A       token attribute 
                                    583 ;   X 		token value
                                    584 ;   Y       updated position in output buffer   
                                    585 ;------------------------------------
                                    586 	; use to check special character 
                                    587 	.macro _case c t  
                                    588 	ld a,#c 
                                    589 	cp a,(TCHAR,sp) 
                                    590 	jrne t
                                    591 	.endm 
                                    592 
                           000001   593 	TCHAR=1
                           000002   594 	ATTRIB=2
                           000002   595 	VSIZE=2
      000EEE                        596 get_token:: 
      000EEE                        597 	_vars VSIZE
      000EEE 52 02            [ 2]    1     sub sp,#VSIZE 
                                    598 ;	ld a,in 
                                    599 ;	sub a,count
                                    600 ;   jrmi 0$
                                    601 ;	clr a 
                                    602 ;	ret 
      000EF0                        603 0$: 
      000EF0 90 AE 16 68      [ 2]  604 	ldw y,#tib    	
      000EF4 A6 20            [ 1]  605 	ld a,#SPACE
      000EF6 CD 0E DB         [ 4]  606 	call skip
      000EF9 55 00 01 00 03   [ 1]  607 	mov in.saved,in 
      000EFE 91 D6 00         [ 4]  608 	ld a,([in.w],y)
      000F01 26 05            [ 1]  609 	jrne 1$
      000F03 90 93            [ 1]  610 	ldw y,x 
      000F05 CC 10 9F         [ 2]  611 	jp token_exit ; end of line 
      000F08 72 5C 00 01      [ 1]  612 1$:	inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000F0C CD 18 D9         [ 4]  613 	call to_upper 
      000F0F 6B 01            [ 1]  614 	ld (TCHAR,sp),a 
                                    615 ; check for quoted string
      000F11                        616 str_tst:  	
      000F11                        617 	_case '"' nbr_tst
      000F11 A6 22            [ 1]    1 	ld a,#'"' 
      000F13 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F15 26 0A            [ 1]    3 	jrne nbr_tst
      000F17 A6 02            [ 1]  618 	ld a,#TK_QSTR
      000F19 F7               [ 1]  619 	ld (x),a 
      000F1A 5C               [ 1]  620 	incw x 
      000F1B CD 0D 43         [ 4]  621 	call parse_quote
      000F1E CC 10 9F         [ 2]  622 	jp token_exit
      000F21                        623 nbr_tst:
                                    624 ; check for hexadecimal number 
      000F21 A6 24            [ 1]  625 	ld a,#'$'
      000F23 11 01            [ 1]  626 	cp a,(TCHAR,sp) 
      000F25 27 17            [ 1]  627 	jreq 1$
                                    628 ;check for binary number 
      000F27 A6 26            [ 1]  629 	ld a,#'&
      000F29 11 01            [ 1]  630 	cp a,(TCHAR,sp)
      000F2B 26 0A            [ 1]  631 	jrne 0$
      000F2D A6 84            [ 1]  632 	ld a,#TK_INTGR
      000F2F F7               [ 1]  633 	ld (x),a 
      000F30 5C               [ 1]  634 	incw x 
      000F31 CD 0D ED         [ 4]  635 	call parse_binary ; expect binary integer 
      000F34 CC 10 9F         [ 2]  636 	jp token_exit 
                                    637 ; check for decimal number 	
      000F37 7B 01            [ 1]  638 0$:	ld a,(TCHAR,sp)
      000F39 CD 0E 39         [ 4]  639 	call is_digit
      000F3C 24 0C            [ 1]  640 	jrnc 3$
      000F3E A6 84            [ 1]  641 1$:	ld a,#TK_INTGR 
      000F40 F7               [ 1]  642 	ld (x),a 
      000F41 5C               [ 1]  643 	incw x 
      000F42 7B 01            [ 1]  644 	ld a,(TCHAR,sp)
      000F44 CD 0D 98         [ 4]  645 	call parse_integer 
      000F47 CC 10 9F         [ 2]  646 	jp token_exit 
      000F4A                        647 3$: 
      000F4A                        648 	_case '(' bkslsh_tst 
      000F4A A6 28            [ 1]    1 	ld a,#'(' 
      000F4C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F4E 26 05            [ 1]    3 	jrne bkslsh_tst
      000F50 A6 06            [ 1]  649 	ld a,#TK_LPAREN
      000F52 CC 10 9B         [ 2]  650 	jp token_char   	
      000F55                        651 bkslsh_tst: ; character token 
      000F55                        652 	_case '\',rparnt_tst
      000F55 A6 5C            [ 1]    1 	ld a,#'\' 
      000F57 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F59 26 16            [ 1]    3 	jrne rparnt_tst
      000F5B A6 04            [ 1]  653 	ld a,#TK_CHAR 
      000F5D F7               [ 1]  654 	ld (x),a 
      000F5E 5C               [ 1]  655 	incw x 
      000F5F 91 D6 00         [ 4]  656 	ld a,([in.w],y)
      000F62 F7               [ 1]  657 	ld (x),a 
      000F63 5C               [ 1]  658 	incw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000F64 90 93            [ 1]  659 	ldw y,x 	 
      000F66 72 5C 00 01      [ 1]  660 	inc in  
      000F6A 5F               [ 1]  661 	clrw x 
      000F6B 97               [ 1]  662 	ld xl,a 
      000F6C A6 04            [ 1]  663 	ld a,#TK_CHAR 
      000F6E CC 10 9F         [ 2]  664 	jp token_exit 
      000F71                        665 rparnt_tst:		
      000F71                        666 	_case ')' colon_tst 
      000F71 A6 29            [ 1]    1 	ld a,#')' 
      000F73 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F75 26 05            [ 1]    3 	jrne colon_tst
      000F77 A6 07            [ 1]  667 	ld a,#TK_RPAREN 
      000F79 CC 10 9B         [ 2]  668 	jp token_char
      000F7C                        669 colon_tst:
      000F7C                        670 	_case ':' comma_tst 
      000F7C A6 3A            [ 1]    1 	ld a,#':' 
      000F7E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F80 26 05            [ 1]    3 	jrne comma_tst
      000F82 A6 0A            [ 1]  671 	ld a,#TK_COLON 
      000F84 CC 10 9B         [ 2]  672 	jp token_char  
      000F87                        673 comma_tst:
      000F87                        674 	_case COMMA sharp_tst 
      000F87 A6 2C            [ 1]    1 	ld a,#COMMA 
      000F89 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F8B 26 05            [ 1]    3 	jrne sharp_tst
      000F8D A6 08            [ 1]  675 	ld a,#TK_COMMA
      000F8F CC 10 9B         [ 2]  676 	jp token_char
      000F92                        677 sharp_tst:
      000F92                        678 	_case SHARP dash_tst 
      000F92 A6 23            [ 1]    1 	ld a,#SHARP 
      000F94 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F96 26 05            [ 1]    3 	jrne dash_tst
      000F98 A6 09            [ 1]  679 	ld a,#TK_SHARP
      000F9A CC 10 9B         [ 2]  680 	jp token_char  	 	 
      000F9D                        681 dash_tst: 	
      000F9D                        682 	_case '-' at_tst 
      000F9D A6 2D            [ 1]    1 	ld a,#'-' 
      000F9F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA1 26 05            [ 1]    3 	jrne at_tst
      000FA3 A6 11            [ 1]  683 	ld a,#TK_MINUS  
      000FA5 CC 10 9B         [ 2]  684 	jp token_char 
      000FA8                        685 at_tst:
      000FA8                        686 	_case '@' qmark_tst 
      000FA8 A6 40            [ 1]    1 	ld a,#'@' 
      000FAA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FAC 26 05            [ 1]    3 	jrne qmark_tst
      000FAE A6 05            [ 1]  687 	ld a,#TK_ARRAY 
      000FB0 CC 10 9B         [ 2]  688 	jp token_char
      000FB3                        689 qmark_tst:
      000FB3                        690 	_case '?' tick_tst 
      000FB3 A6 3F            [ 1]    1 	ld a,#'?' 
      000FB5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FB7 26 12            [ 1]    3 	jrne tick_tst
      000FB9 A6 80            [ 1]  691 	ld a,#TK_CMD  
      000FBB F7               [ 1]  692 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000FBC 5C               [ 1]  693 	incw x 
      000FBD 90 93            [ 1]  694 	ldw y,x 
      000FBF AE 1F D5         [ 2]  695 	ldw x,#print
      000FC2 90 FF            [ 2]  696 	ldw (y),x 
      000FC4 72 A9 00 02      [ 2]  697 	addw y,#2
      000FC8 CC 10 9F         [ 2]  698 	jp token_exit
      000FCB                        699 tick_tst: ; comment 
      000FCB                        700 	_case TICK plus_tst 
      000FCB A6 27            [ 1]    1 	ld a,#TICK 
      000FCD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FCF 26 2B            [ 1]    3 	jrne plus_tst
      000FD1 A6 80            [ 1]  701 	ld a,#TK_CMD
      000FD3 F7               [ 1]  702 	ld (x),a 
      000FD4 5C               [ 1]  703 	incw x
      000FD5 90 AE 21 1D      [ 2]  704 	ldw y,#remark 
      000FD9 FF               [ 2]  705 	ldw (x),y 
      000FDA 1C 00 02         [ 2]  706 	addw x,#2  
      000FDD                        707 copy_comment:
      000FDD 90 AE 16 68      [ 2]  708 	ldw y,#tib 
      000FE1 72 B9 00 00      [ 2]  709 	addw y,in.w
      000FE5 90 89            [ 2]  710 	pushw y 
      000FE7 CD 13 AE         [ 4]  711 	call strcpy
      000FEA 72 F2 01         [ 2]  712 	subw y,(1,sp)
      000FED 90 5C            [ 1]  713 	incw y ; strlen+1 
      000FEF 17 01            [ 2]  714 	ldw (1,sp),y 
      000FF1 72 FB 01         [ 2]  715 	addw x,(1,sp) 
      000FF4                        716 	_drop 2 
      000FF4 5B 02            [ 2]    1     addw sp,#2 
      000FF6 4F               [ 1]  717 	clr a 
      000FF7 90 93            [ 1]  718 	ldw y,x 
      000FF9 CC 10 9F         [ 2]  719 	jp token_exit 
      000FFC                        720 plus_tst:
      000FFC                        721 	_case '+' star_tst 
      000FFC A6 2B            [ 1]    1 	ld a,#'+' 
      000FFE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001000 26 05            [ 1]    3 	jrne star_tst
      001002 A6 10            [ 1]  722 	ld a,#TK_PLUS  
      001004 CC 10 9B         [ 2]  723 	jp token_char 
      001007                        724 star_tst:
      001007                        725 	_case '*' slash_tst 
      001007 A6 2A            [ 1]    1 	ld a,#'*' 
      001009 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00100B 26 05            [ 1]    3 	jrne slash_tst
      00100D A6 20            [ 1]  726 	ld a,#TK_MULT 
      00100F CC 10 9B         [ 2]  727 	jp token_char 
      001012                        728 slash_tst: 
      001012                        729 	_case '/' prcnt_tst 
      001012 A6 2F            [ 1]    1 	ld a,#'/' 
      001014 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001016 26 05            [ 1]    3 	jrne prcnt_tst
      001018 A6 21            [ 1]  730 	ld a,#TK_DIV 
      00101A CC 10 9B         [ 2]  731 	jp token_char 
      00101D                        732 prcnt_tst:
      00101D                        733 	_case '%' eql_tst 
      00101D A6 25            [ 1]    1 	ld a,#'%' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      00101F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001021 26 05            [ 1]    3 	jrne eql_tst
      001023 A6 22            [ 1]  734 	ld a,#TK_MOD
      001025 CC 10 9B         [ 2]  735 	jp token_char  
                                    736 ; 1 or 2 character tokens 	
      001028                        737 eql_tst:
      001028                        738 	_case '=' gt_tst 		
      001028 A6 3D            [ 1]    1 	ld a,#'=' 
      00102A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00102C 26 05            [ 1]    3 	jrne gt_tst
      00102E A6 32            [ 1]  739 	ld a,#TK_EQUAL
      001030 CC 10 9B         [ 2]  740 	jp token_char 
      001033                        741 gt_tst:
      001033                        742 	_case '>' lt_tst 
      001033 A6 3E            [ 1]    1 	ld a,#'>' 
      001035 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001037 26 23            [ 1]    3 	jrne lt_tst
      001039 A6 31            [ 1]  743 	ld a,#TK_GT 
      00103B 6B 02            [ 1]  744 	ld (ATTRIB,sp),a 
      00103D 91 D6 00         [ 4]  745 	ld a,([in.w],y)
      001040 72 5C 00 01      [ 1]  746 	inc in 
      001044 A1 3D            [ 1]  747 	cp a,#'=
      001046 26 04            [ 1]  748 	jrne 1$
      001048 A6 33            [ 1]  749 	ld a,#TK_GE 
      00104A 20 4F            [ 2]  750 	jra token_char  
      00104C A1 3C            [ 1]  751 1$: cp a,#'<
      00104E 26 04            [ 1]  752 	jrne 2$
      001050 A6 35            [ 1]  753 	ld a,#TK_NE 
      001052 20 47            [ 2]  754 	jra token_char 
      001054 72 5A 00 01      [ 1]  755 2$: dec in
      001058 7B 02            [ 1]  756 	ld a,(ATTRIB,sp)
      00105A 20 3F            [ 2]  757 	jra token_char 	 
      00105C                        758 lt_tst:
      00105C                        759 	_case '<' other
      00105C A6 3C            [ 1]    1 	ld a,#'<' 
      00105E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001060 26 23            [ 1]    3 	jrne other
      001062 A6 34            [ 1]  760 	ld a,#TK_LT 
      001064 6B 02            [ 1]  761 	ld (ATTRIB,sp),a 
      001066 91 D6 00         [ 4]  762 	ld a,([in.w],y)
      001069 72 5C 00 01      [ 1]  763 	inc in 
      00106D A1 3D            [ 1]  764 	cp a,#'=
      00106F 26 04            [ 1]  765 	jrne 1$
      001071 A6 36            [ 1]  766 	ld a,#TK_LE 
      001073 20 26            [ 2]  767 	jra token_char 
      001075 A1 3E            [ 1]  768 1$: cp a,#'>
      001077 26 04            [ 1]  769 	jrne 2$
      001079 A6 35            [ 1]  770 	ld a,#TK_NE 
      00107B 20 1E            [ 2]  771 	jra token_char 
      00107D 72 5A 00 01      [ 1]  772 2$: dec in 
      001081 7B 02            [ 1]  773 	ld a,(ATTRIB,sp)
      001083 20 16            [ 2]  774 	jra token_char 	
      001085                        775 other: ; not a special character 	 
      001085 7B 01            [ 1]  776 	ld a,(TCHAR,sp)
      001087 CD 0E 28         [ 4]  777 	call is_alpha 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      00108A 25 03            [ 1]  778 	jrc 30$ 
      00108C CC 16 94         [ 2]  779 	jp syntax_error 
      00108F                        780 30$: 
      00108F CD 0E 6E         [ 4]  781 	call parse_keyword
      001092 A3 21 1D         [ 2]  782 	cpw x,#remark 
      001095 26 08            [ 1]  783 	jrne token_exit 
      001097 93               [ 1]  784 	ldw x,y 
      001098 CC 0F DD         [ 2]  785 	jp copy_comment 
      00109B                        786 token_char:
      00109B F7               [ 1]  787 	ld (x),a 
      00109C 5C               [ 1]  788 	incw x
      00109D 90 93            [ 1]  789 	ldw y,x 
      00109F                        790 token_exit:
      00109F                        791 	_drop VSIZE 
      00109F 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010A1 81               [ 4]  792 	ret
                                    793 
                                    794 
                                    795 ;-----------------------------------
                                    796 ; create token list fromm text line 
                                    797 ; save this list in pad buffer 
                                    798 ;  compiled line format: 
                                    799 ;    line_no  2 bytes {0...32767}
                                    800 ;    count    1 byte  
                                    801 ;    tokens   variable length 
                                    802 ;   
                                    803 ; input:
                                    804 ;   none
                                    805 ; modified variables:
                                    806 ;   basicptr     token list buffer address 
                                    807 ;   in.w  		 3|count, i.e. index in buffer
                                    808 ;   count        length of line | 0  
                                    809 ;-----------------------------------
                           000001   810 	XSAVE=1
                           000002   811 	VSIZE=2
      0010A2                        812 compile::
      0010A2 90 89            [ 2]  813 	pushw y 
      0010A4                        814 	_vars VSIZE 
      0010A4 52 02            [ 2]    1     sub sp,#VSIZE 
      0010A6 55 00 1B 00 04   [ 1]  815 	mov basicptr,txtbgn
      0010AB 72 1A 00 22      [ 1]  816 	bset flags,#FCOMP 
      0010AF A6 00            [ 1]  817 	ld a,#0
      0010B1 AE 00 00         [ 2]  818 	ldw x,#0
      0010B4 CF 16 B8         [ 2]  819 	ldw pad,x ; destination buffer 
      0010B7 C7 16 BA         [ 1]  820 	ld pad+2,a ; count 
      0010BA AE 16 BB         [ 2]  821 	ldw x,#pad+3
      0010BD 72 5F 00 01      [ 1]  822 	clr in 
      0010C1 CD 0E EE         [ 4]  823 	call get_token
      0010C4 A1 84            [ 1]  824 	cp a,#TK_INTGR
      0010C6 26 11            [ 1]  825 	jrne 2$
      0010C8 A3 00 01         [ 2]  826 	cpw x,#1 
      0010CB 2A 05            [ 1]  827 	jrpl 1$
      0010CD A6 0A            [ 1]  828 	ld a,#ERR_BAD_VALUE
      0010CF CC 16 96         [ 2]  829 	jp tb_error
      0010D2 CF 16 B8         [ 2]  830 1$:	ldw pad,x ; line# 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      0010D5 90 AE 16 BB      [ 2]  831 	ldw y,#pad+3 
      0010D9 90 A3 17 38      [ 2]  832 2$:	cpw y,#xstack_full 
      0010DD 25 05            [ 1]  833 	jrult 3$
      0010DF A6 0F            [ 1]  834 	ld a,#ERR_BUF_FULL 
      0010E1 CC 16 96         [ 2]  835 	jp tb_error 
      0010E4                        836 3$:	
      0010E4 93               [ 1]  837 	ldw x,y 
      0010E5 CD 0E EE         [ 4]  838 	call get_token 
      0010E8 A1 00            [ 1]  839 	cp a,#TK_NONE 
      0010EA 26 ED            [ 1]  840 	jrne 2$ 
                                    841 ; compilation completed  
      0010EC 72 A2 16 B8      [ 2]  842 	subw y,#pad ; compiled line length 
      0010F0 90 9F            [ 1]  843     ld a,yl
      0010F2 AE 16 B8         [ 2]  844 	ldw x,#pad 
      0010F5 CF 00 19         [ 2]  845 	ldw ptr16,x 
      0010F8 E7 02            [ 1]  846 	ld (2,x),a 
      0010FA FE               [ 2]  847 	ldw x,(x)  ; line# 
      0010FB 27 09            [ 1]  848 	jreq 10$
      0010FD CD 0C DC         [ 4]  849 	call insert_line
      001100 72 5F 00 02      [ 1]  850 	clr  count 
      001104 20 0F            [ 2]  851 	jra  11$ 
      001106                        852 10$: ; line# is zero 
      001106 CE 00 19         [ 2]  853 	ldw x,ptr16  
      001109 CF 00 04         [ 2]  854 	ldw basicptr,x 
      00110C E6 02            [ 1]  855 	ld a,(2,x)
      00110E C7 00 02         [ 1]  856 	ld count,a 
      001111 35 03 00 01      [ 1]  857 	mov in,#3 
      001115                        858 11$:
      001115                        859 	_drop VSIZE 
      001115 5B 02            [ 2]    1     addw sp,#VSIZE 
      001117 72 1B 00 22      [ 1]  860 	bres flags,#FCOMP 
      00111B 90 85            [ 2]  861 	popw y 
      00111D 81               [ 4]  862 	ret 
                                    863 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      00111E                         48 cpy_cmd_name:
      00111E 5D               [ 2]   49 	tnzw x 
      00111F 27 14            [ 1]   50 	jreq 10$
      001121 F6               [ 1]   51 	ld a,(x)
      001122 5C               [ 1]   52 	incw x
      001123 A4 0F            [ 1]   53 	and a,#15  
      001125 88               [ 1]   54 	push a 
      001126 0D 01            [ 1]   55     tnz (1,sp) 
      001128 27 0A            [ 1]   56 	jreq 9$
      00112A F6               [ 1]   57 1$:	ld a,(x)
      00112B 90 F7            [ 1]   58 	ld (y),a  
      00112D 5C               [ 1]   59 	incw x
      00112E 90 5C            [ 1]   60 	incw y 
      001130 0A 01            [ 1]   61 	dec (1,sp)	 
      001132 26 F6            [ 1]   62 	jrne 1$
      001134 84               [ 1]   63 9$: pop a 
      001135                         64 10$: 
      001135 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      001136                         75 add_space:
      001136 90 5A            [ 2]   76 	decw y 
      001138 90 F6            [ 1]   77 	ld a,(y)
      00113A 90 5C            [ 1]   78 	incw y
      00113C A1 29            [ 1]   79 	cp a,#') 
      00113E 27 05            [ 1]   80 	jreq 0$
      001140 CD 0E 42         [ 4]   81 	call is_alnum 
      001143 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001145                         83 0$: 
      001145 A6 20            [ 1]   84 	ld a,#SPACE 
      001147 90 F7            [ 1]   85 	ld (y),a 
      001149 90 5C            [ 1]   86 	incw y 
      00114B 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      00114C                         99 right_align::
      00114C 88               [ 1]  100 	push a 
      00114D 7B 01            [ 1]  101 0$: ld a,(1,sp)
      00114F C1 00 23         [ 1]  102 	cp a,tab_width 
      001152 2A 08            [ 1]  103 	jrpl 1$
      001154 A6 20            [ 1]  104 	ld a,#SPACE 
      001156 5A               [ 2]  105 	decw x
      001157 F7               [ 1]  106 	ld (x),a  
      001158 0C 01            [ 1]  107 	inc (1,sp)
      00115A 20 F1            [ 2]  108 	jra 0$ 
      00115C 84               [ 1]  109 1$: pop a 	
      00115D 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      00115E                        123 cpy_quote:
      00115E A6 22            [ 1]  124 	ld a,#'"
      001160 90 F7            [ 1]  125 	ld (y),a 
      001162 90 5C            [ 1]  126 	incw y 
      001164 89               [ 2]  127 	pushw x 
      001165 CD 18 14         [ 4]  128 	call skip_string 
      001168 85               [ 2]  129 	popw x 
      001169 F6               [ 1]  130 1$:	ld a,(x)
      00116A 27 30            [ 1]  131 	jreq 9$
      00116C 5C               [ 1]  132 	incw x 
      00116D A1 20            [ 1]  133 	cp a,#SPACE 
      00116F 25 0E            [ 1]  134 	jrult 3$
      001171 90 F7            [ 1]  135 	ld (y),a
      001173 90 5C            [ 1]  136 	incw y 
      001175 A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      001177 26 F0            [ 1]  138 	jrne 1$ 
      001179                        139 2$:
      001179 90 F7            [ 1]  140 	ld (y),a
      00117B 90 5C            [ 1]  141 	incw y  
      00117D 20 EA            [ 2]  142 	jra 1$
      00117F 88               [ 1]  143 3$: push a 
      001180 A6 5C            [ 1]  144 	ld a,#'\
      001182 90 F7            [ 1]  145 	ld (y),a 
      001184 90 5C            [ 1]  146 	incw y  
      001186 84               [ 1]  147 	pop a 
      001187 A0 07            [ 1]  148 	sub a,#7
      001189 C7 00 0E         [ 1]  149 	ld acc8,a 
      00118C 72 5F 00 0D      [ 1]  150 	clr acc16
      001190 89               [ 2]  151 	pushw x
      001191 AE 0D 90         [ 2]  152 	ldw x,#escaped 
      001194 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      001198 F6               [ 1]  154 	ld a,(x)
      001199 85               [ 2]  155 	popw x
      00119A 20 DD            [ 2]  156 	jra 2$
      00119C A6 22            [ 1]  157 9$: ld a,#'"
      00119E 90 F7            [ 1]  158 	ld (y),a 
      0011A0 90 5C            [ 1]  159 	incw y  
      0011A2 5C               [ 1]  160 	incw x 
      0011A3 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      0011A4                        171 var_name::
      0011A4 1D 00 35         [ 2]  172 		subw x,#vars 
      0011A7 A6 03            [ 1]  173 		ld a,#3
      0011A9 62               [ 2]  174 		div x,a 
      0011AA 9F               [ 1]  175 		ld a,xl 
      0011AB AB 41            [ 1]  176 		add a,#'A 
      0011AD 81               [ 4]  177 		ret 
                                    178 
                                    179 
                                    180 
                                    181 ;-------------------------------------
                                    182 ; decompile tokens list 
                                    183 ; to original text line 
                                    184 ; input:
                                    185 ;   [basicptr]  pointer at line 
                                    186 ;   Y           output buffer
                                    187 ; output:
                                    188 ;   A           length 
                                    189 ;   Y           after string  
                                    190 ;------------------------------------
                           000001   191 	BASE_SAV=1
                           000002   192 	WIDTH_SAV=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           000003   193 	STR=3
                           000004   194 	VSIZE=4 
      0011AE                        195 decompile::
      0011AE                        196 	_vars VSIZE
      0011AE 52 04            [ 2]    1     sub sp,#VSIZE 
      0011B0 C6 00 0A         [ 1]  197 	ld a,base
      0011B3 6B 01            [ 1]  198 	ld (BASE_SAV,sp),a  
      0011B5 C6 00 23         [ 1]  199 	ld a,tab_width 
      0011B8 6B 02            [ 1]  200 	ld (WIDTH_SAV,sp),a 
      0011BA 17 03            [ 2]  201 	ldw (STR,sp),y   
      0011BC 72 CE 00 04      [ 5]  202 	ldw x,[basicptr] ; line number 
      0011C0 35 0A 00 0A      [ 1]  203 	mov base,#10
      0011C4 35 05 00 23      [ 1]  204 	mov tab_width,#5
      0011C8 72 5F 00 0C      [ 1]  205 	clr acc24 
      0011CC CF 00 0D         [ 2]  206 	ldw acc16,x
      0011CF 4F               [ 1]  207 	clr a ; unsigned conversion 
      0011D0 CD 18 80         [ 4]  208 	call itoa  
      0011D3 CD 11 4C         [ 4]  209 	call right_align 
      0011D6 88               [ 1]  210 	push a 
      0011D7 90 93            [ 1]  211 1$:	ldw y,x ; source
      0011D9 1E 04            [ 2]  212 	ldw x,(STR+1,sp) ; destination
      0011DB CD 13 AE         [ 4]  213 	call strcpy 
      0011DE 90 5F            [ 1]  214 	clrw y 
      0011E0 84               [ 1]  215 	pop a 
      0011E1 90 97            [ 1]  216 	ld yl,a 
      0011E3 72 F9 03         [ 2]  217 	addw y,(STR,sp)
      0011E6 A6 20            [ 1]  218 	ld a,#SPACE 
      0011E8 90 F7            [ 1]  219 	ld (y),a 
      0011EA 90 5C            [ 1]  220 	incw y 
      0011EC 72 5F 00 23      [ 1]  221 	clr tab_width
      0011F0 AE 00 03         [ 2]  222 	ldw x,#3
      0011F3 CF 00 00         [ 2]  223 	ldw in.w,x 
      0011F6                        224 decomp_loop:
      0011F6 90 89            [ 2]  225 	pushw y
      0011F8 CD 17 FB         [ 4]  226 	call next_token 
      0011FB 90 85            [ 2]  227 	popw y 
      0011FD 4D               [ 1]  228 	tnz a  
      0011FE 26 03            [ 1]  229 	jrne 1$
      001200 CC 13 23         [ 2]  230 	jp 20$
      001203 2B 03            [ 1]  231 1$:	jrmi 2$
      001205 CC 12 94         [ 2]  232 	jp 6$
      001208                        233 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      001208 A1 85            [ 1]  234 	cp a,#TK_VAR 
      00120A 26 0F            [ 1]  235 	jrne 3$
                                    236 ;; TK_VAR 
      00120C CD 11 36         [ 4]  237 	call add_space
      00120F CD 18 23         [ 4]  238 	call get_addr   
      001212 CD 11 A4         [ 4]  239 	call var_name
      001215 90 F7            [ 1]  240 	ld (y),a 
      001217 90 5C            [ 1]  241 	incw y  
      001219 20 DB            [ 2]  242 	jra decomp_loop
      00121B                        243 3$:
      00121B A1 84            [ 1]  244 	cp a,#TK_INTGR
      00121D 26 26            [ 1]  245 	jrne 4$
                                    246 ;; TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00121F CD 18 2D         [ 4]  247 	call get_int24 
      001222 C7 00 0C         [ 1]  248 	ld acc24,a 
      001225 CF 00 0D         [ 2]  249 	ldw acc16,x 
      001228 CD 11 36         [ 4]  250 	call add_space
      00122B 90 89            [ 2]  251 	pushw y 
      00122D A6 FF            [ 1]  252 	ld a,#255 ; signed conversion 
      00122F CD 18 80         [ 4]  253 	call itoa  
      001232 16 01            [ 2]  254 	ldw y,(1,sp) 
      001234 88               [ 1]  255 	push a 
      001235 51               [ 1]  256 	exgw x,y 
      001236 CD 13 AE         [ 4]  257 	call strcpy 
      001239 90 5F            [ 1]  258 	clrw y
      00123B 84               [ 1]  259 	pop a  
      00123C 90 97            [ 1]  260 	ld yl,a 
      00123E 72 F9 01         [ 2]  261 	addw y,(1,sp)
      001241                        262 	_drop 2 
      001241 5B 02            [ 2]    1     addw sp,#2 
      001243 20 B1            [ 2]  263 	jra decomp_loop
      001245                        264 4$: ; dictionary keyword
      001245 A1 87            [ 1]  265 	cp a,#TK_NOT 
      001247 24 39            [ 1]  266 	jruge 50$ 
      001249 FE               [ 2]  267 	ldw x,(x)
      00124A 72 5C 00 01      [ 1]  268 	inc in 
      00124E 72 5C 00 01      [ 1]  269 	inc in 
      001252 A3 21 1D         [ 2]  270 	cpw x,#remark 
      001255 26 23            [ 1]  271 	jrne 5$
      001257 CE 00 04         [ 2]  272 	ldw x,basicptr 
                                    273 ; copy comment to buffer 
      00125A CD 11 36         [ 4]  274 	call add_space
      00125D A6 27            [ 1]  275 	ld a,#''
      00125F 90 F7            [ 1]  276 	ld (y),a 
      001261 90 5C            [ 1]  277 	incw y 
      001263                        278 46$:
      001263 72 D6 00 00      [ 4]  279 	ld a,([in.w],x)
      001267 72 5C 00 01      [ 1]  280 	inc in  
      00126B 90 F7            [ 1]  281 	ld (y),a 
      00126D 90 5C            [ 1]  282 	incw y 
      00126F C6 00 01         [ 1]  283 	ld a,in 
      001272 C1 00 02         [ 1]  284 	cp a,count 
      001275 2B EC            [ 1]  285 	jrmi 46$
      001277 CC 13 23         [ 2]  286 	jp 20$  
      00127A A3 1C DD         [ 2]  287 5$: cpw x,#let  
      00127D 26 05            [ 1]  288 	jrne 54$
      00127F CC 11 F6         [ 2]  289 	jp decomp_loop ; down display LET
      001282                        290 50$:
      001282 5F               [ 1]  291 	clrw x 
      001283 97               [ 1]  292 	ld xl,a 
                                    293 ;	sub a,#TK_NOT  
                                    294 ;	sll a 
                                    295 ;	ld xl,a 
                                    296 ;	addw x,#NOT_IDX
      001284                        297 54$: ; insert command name 
      001284 CD 11 36         [ 4]  298 	call add_space  
      001287 90 89            [ 2]  299 	pushw y
      001289 CD 13 5E         [ 4]  300 	call cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      00128C 90 85            [ 2]  301 	popw y 
      00128E CD 11 1E         [ 4]  302 	call cpy_cmd_name
      001291 CC 11 F6         [ 2]  303 	jp decomp_loop 
      001294                        304 6$:
                                    305 ; label?
      001294 A1 03            [ 1]  306 	cp a,#TK_LABEL 
      001296 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      001298 A6 20            [ 1]  309 	ld a,#32 
      00129A 90 F7            [ 1]  310 	ld (y),a 
      00129C 90 5C            [ 1]  311 	incw y 
      00129E                        312 61$:
      00129E 89               [ 2]  313 	pushw x 
      00129F CD 18 14         [ 4]  314 	call skip_string 
      0012A2 85               [ 2]  315 	popw x 
      0012A3                        316 62$:	
      0012A3 F6               [ 1]  317 	ld a,(x)
      0012A4 27 07            [ 1]  318 	jreq 63$ 
      0012A6 5C               [ 1]  319 	incw x  
      0012A7 90 F7            [ 1]  320 	ld (y),a 
      0012A9 90 5C            [ 1]  321 	incw y 
      0012AB 20 F6            [ 2]  322 	jra 62$ 
      0012AD                        323 63$: 
      0012AD A6 20            [ 1]  324 	ld a,#32 
      0012AF 90 F7            [ 1]  325 	ld (y),a 
      0012B1 90 5C            [ 1]  326 	incw y 
      0012B3 CC 11 F6         [ 2]  327 	jp decomp_loop
      0012B6                        328 64$:
      0012B6 A1 02            [ 1]  329 	cp a,#TK_QSTR 
      0012B8 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      0012BA CD 11 36         [ 4]  332 	call add_space
      0012BD CD 11 5E         [ 4]  333 	call cpy_quote  
      0012C0 CC 11 F6         [ 2]  334 	jp decomp_loop
      0012C3                        335 7$:
      0012C3 A1 04            [ 1]  336 	cp a,#TK_CHAR 
      0012C5 26 10            [ 1]  337 	jrne 8$
                                    338 ;; TK_CHAR
      0012C7 CD 11 36         [ 4]  339 	call add_space 
      0012CA A6 5C            [ 1]  340 	ld a,#'\ 
      0012CC 90 F7            [ 1]  341 	ld (y),a 
      0012CE 90 5C            [ 1]  342 	incw y
      0012D0 F6               [ 1]  343 	ld a,(x)
      0012D1 72 5C 00 01      [ 1]  344 	inc in  
      0012D5 20 06            [ 2]  345 	jra 81$
      0012D7 A1 0A            [ 1]  346 8$: cp a,#TK_COLON 
      0012D9 26 09            [ 1]  347 	jrne 9$
      0012DB A6 3A            [ 1]  348 	ld a,#':
      0012DD                        349 81$:
      0012DD 90 F7            [ 1]  350 	ld (y),a 
      0012DF 90 5C            [ 1]  351 	incw y 
      0012E1                        352 82$:
      0012E1 CC 11 F6         [ 2]  353 	jp decomp_loop
      0012E4                        354 9$: 
      0012E4 A1 09            [ 1]  355 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0012E6 22 0A            [ 1]  356 	jrugt 10$ 
      0012E8 A0 05            [ 1]  357 	sub a,#TK_ARRAY 
      0012EA 5F               [ 1]  358 	clrw x 
      0012EB 97               [ 1]  359 	ld xl,a
      0012EC 1C 13 39         [ 2]  360 	addw x,#single_char 
      0012EF F6               [ 1]  361 	ld a,(x)
      0012F0 20 EB            [ 2]  362 	jra 81$ 
      0012F2                        363 10$: 
      0012F2 A1 11            [ 1]  364 	cp a,#TK_MINUS 
      0012F4 22 0A            [ 1]  365 	jrugt 11$
      0012F6 A0 10            [ 1]  366 	sub a,#TK_PLUS 
      0012F8 5F               [ 1]  367 	clrw x 
      0012F9 97               [ 1]  368 	ld xl,a 
      0012FA 1C 13 3E         [ 2]  369 	addw x,#add_char 
      0012FD F6               [ 1]  370 	ld a,(x)
      0012FE 20 DD            [ 2]  371 	jra 81$
      001300                        372 11$:
      001300 A1 22            [ 1]  373     cp a,#TK_MOD 
      001302 22 0A            [ 1]  374 	jrugt 12$
      001304 A0 20            [ 1]  375 	sub a,#TK_MULT
      001306 5F               [ 1]  376 	clrw x 
      001307 97               [ 1]  377 	ld xl,a 
      001308 1C 13 40         [ 2]  378 	addw x,#mul_char
      00130B F6               [ 1]  379 	ld a,(x)
      00130C 20 CF            [ 2]  380 	jra 81$
      00130E                        381 12$:
      00130E A0 31            [ 1]  382 	sub a,#TK_GT  
      001310 48               [ 1]  383 	sll a 
      001311 5F               [ 1]  384 	clrw x 
      001312 97               [ 1]  385 	ld xl,a 
      001313 1C 13 43         [ 2]  386 	addw x,#relop_str 
      001316 FE               [ 2]  387 	ldw x,(x)
      001317 F6               [ 1]  388 	ld a,(x)
      001318 5C               [ 1]  389 	incw x 
      001319 90 F7            [ 1]  390 	ld (y),a
      00131B 90 5C            [ 1]  391 	incw y 
      00131D F6               [ 1]  392 	ld a,(x)
      00131E 26 BD            [ 1]  393 	jrne 81$
      001320 CC 11 F6         [ 2]  394 	jp decomp_loop 
      001323                        395 20$: 
      001323 90 7F            [ 1]  396 	clr (y)
      001325 1E 03            [ 2]  397 	ldw x,(STR,sp)
      001327 7B 01            [ 1]  398 	ld a,(BASE_SAV,sp)
      001329 C7 00 0A         [ 1]  399 	ld base,a 
      00132C 7B 02            [ 1]  400 	ld a,(WIDTH_SAV,sp)
      00132E C7 00 23         [ 1]  401 	ld tab_width,a
      001331 72 F2 03         [ 2]  402 	subw y,(STR,sp) 
      001334 90 9F            [ 1]  403 	ld a,yl 
      001336                        404 	_drop VSIZE 
      001336 5B 04            [ 2]    1     addw sp,#VSIZE 
      001338 81               [ 4]  405 	ret 
                                    406 
      001339 40 28 29 2C 23         407 single_char: .byte '@','(',')',',','#'
      00133E 2B 2D                  408 add_char: .byte '+','-'
      001340 2A 2F 25               409 mul_char: .byte '*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001343 13 4F 13 51 13 53 13   410 relop_str: .word gt,equal,ge,lt,ne,le 
             56 13 5B 13 58
      00134F 3E 00                  411 gt: .asciz ">"
      001351 3D 00                  412 equal: .asciz "="
      001353 3E 3D 00               413 ge: .asciz ">="
      001356 3C 00                  414 lt: .asciz "<"
      001358 3C 3D 00               415 le: .asciz "<="
      00135B 3C 3E 00               416 ne:  .asciz "<>"
                                    417 
                                    418 ;----------------------------------
                                    419 ; search in kword_dict name
                                    420 ; from its execution address 
                                    421 ; input:
                                    422 ;   X       	routine_address  
                                    423 ; output:
                                    424 ;   X 			cstr*  | 0 
                                    425 ;--------------------------------
                           000001   426 	CODE_ADDR=1 
                           000003   427 	LINK=3 
                           000004   428 	VSIZE=4
      00135E                        429 cmd_name:
      00135E                        430 	_vars VSIZE 
      00135E 52 04            [ 2]    1     sub sp,#VSIZE 
      001360 72 5F 00 0D      [ 1]  431 	clr acc16 
      001364 1F 01            [ 2]  432 	ldw (CODE_ADDR,sp),x  
      001366 AE 36 92         [ 2]  433 	ldw x,#kword_dict	
      001369 1F 03            [ 2]  434 1$:	ldw (LINK,sp),x
      00136B E6 02            [ 1]  435 	ld a,(2,x)
      00136D A4 0F            [ 1]  436 	and a,#15 
      00136F C7 00 0E         [ 1]  437 	ld acc8,a 
      001372 1C 00 03         [ 2]  438 	addw x,#3
      001375 72 BB 00 0D      [ 2]  439 	addw x,acc16
      001379 FE               [ 2]  440 	ldw x,(x) ; code address   
      00137A 13 01            [ 2]  441 	cpw x,(CODE_ADDR,sp)
      00137C 27 0C            [ 1]  442 	jreq 2$
      00137E 1E 03            [ 2]  443 	ldw x,(LINK,sp)
      001380 FE               [ 2]  444 	ldw x,(x) 
      001381 1D 00 02         [ 2]  445 	subw x,#2  
      001384 26 E3            [ 1]  446 	jrne 1$
      001386 4F               [ 1]  447 	clr a 
      001387 5F               [ 1]  448 	clrw x 
      001388 20 05            [ 2]  449 	jra 9$
      00138A 1E 03            [ 2]  450 2$: ldw x,(LINK,sp)
      00138C 1C 00 02         [ 2]  451 	addw x,#2 	
      00138F                        452 9$:	_drop VSIZE
      00138F 5B 04            [ 2]    1     addw sp,#VSIZE 
      001391 81               [ 4]  453 	ret
                                    454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
                                     64 ; keep the following 3 variables in this order 
      000000                         65 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         66 in::    .blkb 1 ; low byte of in.w 
      000002                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000003                         68 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000004                         69 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         70 data_ptr:  .blkw 1  ; point to DATA address
      000008                         71 data_ofs:  .blkb 1  ; index to next data item 
      000009                         72 data_len:  .blkb 1  ; length of data line 
      00000A                         73 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         74 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         75 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         76 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         77 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         78 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         79 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         80 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         81 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         82 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         83 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         84 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         85 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         86 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         87 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         88 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         89 flags:: .blkb 1 ; various boolean flags
      000023                         90 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         91 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         92 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         93 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         94 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      000030                         95 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000032                         96 dvar_end:: .blkw 1 ; DIM variables end address 
      000034                         97 chain_level: .blkb 1 ; increment for each CHAIN command 
                                     98 ; 24 bits integer variables 
      000035                         99 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                    100 
                                    101 	.area BTXT (ABS)
      00008C                        102 	.org 0x8C  
                                    103 ; keep 'free_ram' as last variable 
                                    104 ; basic code compiled here. 
      00008C                        105 rsign: .blkw 1 ; "TB" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      00008E                        106 rsize: .blkw 1 ; code size 	 
      000090                        107 free_ram: ; from here RAM free for BASIC text 
                                    108 
                                    109 	.area CODE 
                                    110 
                                    111 
                                    112 ;-------------------------------------
                                    113 ; retrun string length
                                    114 ; input:
                                    115 ;   X         .asciz  pointer 
                                    116 ; output:
                                    117 ;   X         not affected 
                                    118 ;   A         length 
                                    119 ;-------------------------------------
      001392                        120 strlen::
      001392 89               [ 2]  121 	pushw x 
      001393 4F               [ 1]  122 	clr a
      001394 7D               [ 1]  123 1$:	tnz (x) 
      001395 27 04            [ 1]  124 	jreq 9$ 
      001397 4C               [ 1]  125 	inc a 
      001398 5C               [ 1]  126 	incw x 
      001399 20 F9            [ 2]  127 	jra 1$ 
      00139B 85               [ 2]  128 9$:	popw x 
      00139C 81               [ 4]  129 	ret 
                                    130 
                                    131 ;------------------------------------
                                    132 ; compare 2 strings
                                    133 ; input:
                                    134 ;   X 		char* first string 
                                    135 ;   Y       char* second string 
                                    136 ; output:
                                    137 ;   A 		0 not == |1 ==  
                                    138 ;-------------------------------------
      00139D                        139 strcmp:
      00139D F6               [ 1]  140 	ld a,(x)
      00139E 27 0B            [ 1]  141 	jreq 5$ 
      0013A0 90 F1            [ 1]  142 	cp a,(y) 
      0013A2 26 05            [ 1]  143 	jrne 4$ 
      0013A4 5C               [ 1]  144 	incw x 
      0013A5 90 5C            [ 1]  145 	incw y 
      0013A7 20 F4            [ 2]  146 	jra strcmp 
      0013A9                        147 4$: ; not same  
      0013A9 4F               [ 1]  148 	clr a 
      0013AA 81               [ 4]  149 	ret 
      0013AB                        150 5$: ; same 
      0013AB A6 01            [ 1]  151 	ld a,#1 
      0013AD 81               [ 4]  152 	ret 
                                    153 
                                    154 
                                    155 ;---------------------------------------
                                    156 ;  copy src to dest 
                                    157 ; input:
                                    158 ;   X 		dest 
                                    159 ;   Y 		src 
                                    160 ; output: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                    161 ;   X 		dest 
                                    162 ;----------------------------------
      0013AE                        163 strcpy::
      0013AE 88               [ 1]  164 	push a 
      0013AF 89               [ 2]  165 	pushw x 
      0013B0 90 F6            [ 1]  166 1$: ld a,(y)
      0013B2 27 06            [ 1]  167 	jreq 9$ 
      0013B4 F7               [ 1]  168 	ld (x),a 
      0013B5 5C               [ 1]  169 	incw x 
      0013B6 90 5C            [ 1]  170 	incw y 
      0013B8 20 F6            [ 2]  171 	jra 1$ 
      0013BA 7F               [ 1]  172 9$:	clr (x)
      0013BB 85               [ 2]  173 	popw x 
      0013BC 84               [ 1]  174 	pop a 
      0013BD 81               [ 4]  175 	ret 
                                    176 
                                    177 ;---------------------------------------
                                    178 ; move memory block 
                                    179 ; input:
                                    180 ;   X 		destination 
                                    181 ;   Y 	    source 
                                    182 ;   acc16	bytes count 
                                    183 ; output:
                                    184 ;   none 
                                    185 ;--------------------------------------
                           000001   186 	INCR=1 ; incrament high byte 
                           000002   187 	LB=2 ; increment low byte 
                           000002   188 	VSIZE=2
      0013BE                        189 move::
      0013BE 88               [ 1]  190 	push a 
      0013BF                        191 	_vars VSIZE 
      0013BF 52 02            [ 2]    1     sub sp,#VSIZE 
      0013C1 0F 01            [ 1]  192 	clr (INCR,sp)
      0013C3 0F 02            [ 1]  193 	clr (LB,sp)
      0013C5 90 89            [ 2]  194 	pushw y 
      0013C7 13 01            [ 2]  195 	cpw x,(1,sp) ; compare DEST to SRC 
      0013C9 90 85            [ 2]  196 	popw y 
      0013CB 27 31            [ 1]  197 	jreq move_exit ; x==y 
      0013CD 2B 0E            [ 1]  198 	jrmi move_down
      0013CF                        199 move_up: ; start from top address with incr=-1
      0013CF 72 BB 00 0D      [ 2]  200 	addw x,acc16
      0013D3 72 B9 00 0D      [ 2]  201 	addw y,acc16
      0013D7 03 01            [ 1]  202 	cpl (INCR,sp)
      0013D9 03 02            [ 1]  203 	cpl (LB,sp)   ; increment = -1 
      0013DB 20 05            [ 2]  204 	jra move_loop  
      0013DD                        205 move_down: ; start from bottom address with incr=1 
      0013DD 5A               [ 2]  206     decw x 
      0013DE 90 5A            [ 2]  207 	decw y
      0013E0 0C 02            [ 1]  208 	inc (LB,sp) ; incr=1 
      0013E2                        209 move_loop:	
      0013E2 C6 00 0D         [ 1]  210     ld a, acc16 
      0013E5 CA 00 0E         [ 1]  211 	or a, acc8
      0013E8 27 14            [ 1]  212 	jreq move_exit 
      0013EA 72 FB 01         [ 2]  213 	addw x,(INCR,sp)
      0013ED 72 F9 01         [ 2]  214 	addw y,(INCR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0013F0 90 F6            [ 1]  215 	ld a,(y)
      0013F2 F7               [ 1]  216 	ld (x),a 
      0013F3 89               [ 2]  217 	pushw x 
      0013F4 CE 00 0D         [ 2]  218 	ldw x,acc16 
      0013F7 5A               [ 2]  219 	decw x 
      0013F8 CF 00 0D         [ 2]  220 	ldw acc16,x 
      0013FB 85               [ 2]  221 	popw x 
      0013FC 20 E4            [ 2]  222 	jra move_loop
      0013FE                        223 move_exit:
      0013FE                        224 	_drop VSIZE
      0013FE 5B 02            [ 2]    1     addw sp,#VSIZE 
      001400 84               [ 1]  225 	pop a 
      001401 81               [ 4]  226 	ret 	
                                    227 
                                    228 ;------------------------------------
                                    229 ;  set all variables to zero 
                                    230 ; input:
                                    231 ;   none 
                                    232 ; output:
                                    233 ;	none
                                    234 ;------------------------------------
      001402                        235 clear_vars:
      001402 89               [ 2]  236 	pushw x 
      001403 88               [ 1]  237 	push a  
      001404 AE 00 35         [ 2]  238 	ldw x,#vars 
      001407 A6 4E            [ 1]  239 	ld a,#CELL_SIZE*26 
      001409 7F               [ 1]  240 1$:	clr (x)
      00140A 5C               [ 1]  241 	incw x 
      00140B 4A               [ 1]  242 	dec a 
      00140C 26 FB            [ 1]  243 	jrne 1$
      00140E 84               [ 1]  244 	pop a 
      00140F 85               [ 2]  245 	popw x 
      001410 81               [ 4]  246 	ret 
                                    247 
                                    248 
                                    249 ;-----------------------
                                    250 ;  display system 
                                    251 ;  information 
                                    252 ;-----------------------
                           000002   253 	MAJOR=2
                           000000   254 	MINOR=0 
      001411 0A 0A 54 69 6E 79 20   255 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    256 
      001457                        257 system_information:
      001457 AE 14 11         [ 2]  258 	ldw x,#software 
      00145A CD 09 5C         [ 4]  259 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      00145D A6 02            [ 1]  260 	ld a,#MAJOR 
      00145F C7 00 0E         [ 1]  261 	ld acc8,a 
      001462 5F               [ 1]  262 	clrw x 
      001463 CF 00 0C         [ 2]  263 	ldw acc24,x
      001466 72 5F 00 23      [ 1]  264 	clr tab_width  
      00146A 35 0A 00 0A      [ 1]  265 	mov base, #10 
      00146E CD 18 5A         [ 4]  266 	call prt_acc24 
      001471 A6 2E            [ 1]  267 	ld a,#'.
      001473 CD 08 FF         [ 4]  268 	call putc 
      001476 A6 00            [ 1]  269 	ld a,#MINOR 
      001478 C7 00 0E         [ 1]  270 	ld acc8,a 
      00147B 5F               [ 1]  271 	clrw x 
      00147C CF 00 0C         [ 2]  272 	ldw acc24,x 
      00147F CD 18 5A         [ 4]  273 	call prt_acc24
      001482 A6 0D            [ 1]  274 	ld a,#CR 
      001484 CD 08 FF         [ 4]  275 	call putc
                                    276 ;call test 
      001487 81               [ 4]  277 	ret
                                    278 
      001488                        279 warm_init:
      001488 90 AE 17 73      [ 2]  280 	ldw y,#XSTACK_EMPTY  
      00148C 72 5F 00 22      [ 1]  281 	clr flags 
      001490 72 5F 00 1F      [ 1]  282 	clr loop_depth 
      001494 35 04 00 23      [ 1]  283 	mov tab_width,#TAB_WIDTH 
      001498 35 0A 00 0A      [ 1]  284 	mov base,#10 
      00149C AE 00 00         [ 2]  285 	ldw x,#0 
      00149F CF 00 04         [ 2]  286 	ldw basicptr,x 
      0014A2 CF 00 00         [ 2]  287 	ldw in.w,x 
      0014A5 72 5F 00 02      [ 1]  288 	clr count
      0014A9 81               [ 4]  289 	ret 
                                    290 
                                    291 ;---------------------------
                                    292 ; reset BASIC text variables 
                                    293 ; and clear variables 
                                    294 ;---------------------------
      0014AA                        295 clear_basic:
      0014AA 89               [ 2]  296 	pushw x 
      0014AB 72 5F 00 02      [ 1]  297 	clr count
      0014AF 72 5F 00 01      [ 1]  298 	clr in  
      0014B3 AE 00 90         [ 2]  299 	ldw x,#free_ram 
      0014B6 CF 00 1B         [ 2]  300 	ldw txtbgn,x 
      0014B9 CF 00 1D         [ 2]  301 	ldw txtend,x 
      0014BC CF 00 30         [ 2]  302 	ldw dvar_bgn,x 
      0014BF CF 00 32         [ 2]  303 	ldw dvar_end,x 
      0014C2 CD 14 02         [ 4]  304 	call clear_vars 
      0014C5 72 5F 00 34      [ 1]  305 	clr chain_level 
      0014C9 85               [ 2]  306 	popw x
      0014CA 81               [ 4]  307 	ret 
                                    308 
                                    309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    310 ;;   Tiny BASIC error messages     ;;
                                    311 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014CB                        312 err_msg:
      0014CB 00 00 14 F1 14 FE 15   313 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             0C 15 25 15 34
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0014D7 15 4A 15 60 15 7A 15   314 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             8B 15 9C
      0014E1 15 A8 15 DB 15 EB 15   315 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             FF 16 12
      0014EB 16 1F 16 29 16 45      316 	.word err_overflow,err_read_only,err_not_program  
                                    317 
      0014F1 4D 65 6D 6F 72 79 20   318 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0014FE 73 79 6E 74 61 78 20   319 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      00150C 6D 61 74 68 20 6F 70   320 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001525 64 69 76 69 73 69 6F   321 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001534 69 6E 76 61 6C 69 64   322 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00154A 72 75 6E 20 74 69 6D   323 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001560 63 6F 6D 6D 61 6E 64   324 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      00157A 64 75 70 6C 69 63 61   325 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      00158B 46 69 6C 65 20 6E 6F   326 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      00159C 62 61 64 20 76 61 6C   327 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0015A8 46 69 6C 65 20 69 6E   328 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0015DB 4E 6F 20 64 61 74 61   329 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015EB 4E 6F 20 70 72 6F 67   330 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0015FF 46 69 6C 65 20 73 79   331 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001612 42 75 66 66 65 72 20   332 err_buf_full: .asciz "Buffer full\n"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



             66 75 6C 6C 0A 00
      00161F 6F 76 65 72 66 6C 6F   333 err_overflow: .asciz "overflow\n" 
             77 0A 00
      001629 63 6F 6E 73 74 61 6E   334 err_read_only: .asciz "constant can't be modified\n"
             74 20 63 61 6E 27 74
             20 62 65 20 6D 6F 64
             69 66 69 65 64 0A 00
      001645 6E 6F 20 70 72 6F 67   335 err_not_program: .asciz "no program at this address\n"
             72 61 6D 20 61 74 20
             74 68 69 73 20 61 64
             64 72 65 73 73 0A 00
                                    336 
                                    337 ;-------------------------------------
      001661 0A 72 75 6E 20 74 69   338 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001673 0A 63 6F 6D 70 69 6C   339 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001684 6C 61 73 74 20 74 6F   340 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    341 
      001694                        342 syntax_error::
      001694 A6 02            [ 1]  343 	ld a,#ERR_SYNTAX 
                                    344 
      001696                        345 tb_error::
      001696 72 0A 00 22 4C   [ 2]  346 	btjt flags,#FCOMP,1$
      00169B 88               [ 1]  347 	push a 
      00169C AE 16 61         [ 2]  348 	ldw x, #rt_msg 
      00169F CD 09 5C         [ 4]  349 	call puts 
      0016A2 84               [ 1]  350 	pop a 
      0016A3 AE 14 CB         [ 2]  351 	ldw x, #err_msg 
      0016A6 72 5F 00 0D      [ 1]  352 	clr acc16 
      0016AA 48               [ 1]  353 	sll a
      0016AB 72 59 00 0D      [ 1]  354 	rlc acc16  
      0016AF C7 00 0E         [ 1]  355 	ld acc8, a 
      0016B2 72 BB 00 0D      [ 2]  356 	addw x,acc16 
      0016B6 FE               [ 2]  357 	ldw x,(x)
      0016B7 CD 09 5C         [ 4]  358 	call puts
      0016BA CE 00 04         [ 2]  359 	ldw x,basicptr 
                           000001   360 .if DEBUG 
      0016BD C6 00 02         [ 1]  361 ld a,count 
      0016C0 90 5F            [ 1]  362 clrw y 
      0016C2 90 02            [ 1]  363 rlwa y  
      0016C4 CD 06 45         [ 4]  364 call hex_dump
      0016C7 CE 00 04         [ 2]  365 ldw x,basicptr
                                    366 .endif 
      0016CA C6 00 01         [ 1]  367 	ld a,in 
      0016CD CD 1F B1         [ 4]  368 	call prt_basic_line
      0016D0 AE 16 84         [ 2]  369 	ldw x,#tk_id 
      0016D3 CD 09 5C         [ 4]  370 	call puts 
      0016D6 C6 00 03         [ 1]  371 	ld a,in.saved 
      0016D9 5F               [ 1]  372 	clrw x 
      0016DA 97               [ 1]  373 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0016DB 72 BB 00 04      [ 2]  374 	addw x,basicptr 
      0016DF F6               [ 1]  375 	ld a,(x)
      0016E0 5F               [ 1]  376 	clrw x 
      0016E1 97               [ 1]  377 	ld xl,a 
      0016E2 CD 18 43         [ 4]  378 	call prt_i16
      0016E5 20 35            [ 2]  379 	jra 6$
      0016E7                        380 1$:	
      0016E7 88               [ 1]  381 	push a 
      0016E8 AE 16 73         [ 2]  382 	ldw x,#comp_msg
      0016EB CD 09 5C         [ 4]  383 	call puts 
      0016EE 84               [ 1]  384 	pop a 
      0016EF AE 14 CB         [ 2]  385 	ldw x, #err_msg 
      0016F2 72 5F 00 0D      [ 1]  386 	clr acc16 
      0016F6 48               [ 1]  387 	sll a
      0016F7 72 59 00 0D      [ 1]  388 	rlc acc16  
      0016FB C7 00 0E         [ 1]  389 	ld acc8, a 
      0016FE 72 BB 00 0D      [ 2]  390 	addw x,acc16 
      001702 FE               [ 2]  391 	ldw x,(x)
      001703 CD 09 5C         [ 4]  392 	call puts
      001706 AE 16 68         [ 2]  393 	ldw x,#tib
      001709 CD 09 5C         [ 4]  394 	call puts 
      00170C A6 0D            [ 1]  395 	ld a,#CR 
      00170E CD 08 FF         [ 4]  396 	call putc
      001711 CE 00 00         [ 2]  397 	ldw x,in.w
      001714 CD 09 C9         [ 4]  398 	call spaces
      001717 A6 5E            [ 1]  399 	ld a,#'^
      001719 CD 08 FF         [ 4]  400 	call putc 
      00171C AE 17 FF         [ 2]  401 6$: ldw x,#STACK_EMPTY 
      00171F 94               [ 1]  402     ldw sp,x
                                    403 
      001720                        404 warm_start:
      001720 CD 14 88         [ 4]  405 	call warm_init
                                    406 ;----------------------------
                                    407 ;   BASIC interpreter
                                    408 ;----------------------------
      001723                        409 cmd_line: ; user interface 
      001723 A6 0D            [ 1]  410 	ld a,#CR 
      001725 CD 08 FF         [ 4]  411 	call putc 
      001728 A6 3E            [ 1]  412 	ld a,#'> 
      00172A CD 08 FF         [ 4]  413 	call putc
      00172D CD 0A 61         [ 4]  414 	call readln
      001730 72 5D 00 02      [ 1]  415 	tnz count 
      001734 27 ED            [ 1]  416 	jreq cmd_line
      001736 CD 10 A2         [ 4]  417 	call compile
                                    418 ;;;;;;;;;;;;;;;;;;;;;;	
                                    419 ;pushw y 
                                    420 ;ldw x,txtbgn  
                                    421 ;ldw y,txtend
                                    422 ;ldw acc16,x   
                                    423 ;subw y,acc16 
                                    424 ;call hex_dump
                                    425 ;popw y 
                                    426 ;;;;;;;;;;;;;;;;;;;;;;
                                    427 
                                    428 ; if text begin with a line number
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                                    429 ; the compiler set count to zero    
                                    430 ; so code is not interpreted
      001739 72 5D 00 02      [ 1]  431 	tnz count 
      00173D 27 E4            [ 1]  432 	jreq cmd_line
                                    433 	
                                    434 ; if direct command 
                                    435 ; it's ready to interpret 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    437 ;; This is the interpreter loop
                                    438 ;; for each BASIC code line. 
                                    439 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      00173F                        440 interpreter: 
      00173F C6 00 01         [ 1]  441 	ld a,in 
      001742 C1 00 02         [ 1]  442 	cp a,count 
      001745 2B 20            [ 1]  443 	jrmi interp_loop
      001747                        444 next_line:
      001747 72 01 00 22 D7   [ 2]  445 	btjf flags, #FRUN, cmd_line
      00174C CE 00 04         [ 2]  446 	ldw x,basicptr
      00174F 72 BB 00 00      [ 2]  447 	addw x,in.w 
      001753 C3 00 1D         [ 2]  448 	cpw x,txtend 
      001756 2B 03            [ 1]  449 	jrmi 0$
      001758 CD 25 8A         [ 4]  450 	call cmd_end 
      00175B CF 00 04         [ 2]  451 0$:	ldw basicptr,x ; start of next line  
      00175E E6 02            [ 1]  452 	ld a,(2,x)
      001760 C7 00 02         [ 1]  453 	ld count,a 
      001763 35 03 00 01      [ 1]  454 	mov in,#3 ; skip first 3 bytes of line 
      001767                        455 interp_loop:
      001767 CD 17 FB         [ 4]  456 	call next_token
      00176A A1 00            [ 1]  457 	cp a,#TK_NONE 
      00176C 27 D9            [ 1]  458 	jreq next_line 
      00176E A1 80            [ 1]  459 	cp a,#TK_CMD
      001770 26 0C            [ 1]  460 	jrne 1$
      001772                        461 	_get_code_addr
      001772 FE               [ 2]    1         ldw x,(x)
      001773 72 5C 00 01      [ 1]    2         inc in 
      001777 72 5C 00 01      [ 1]    3         inc in 
      00177B FD               [ 4]  462 	call(x)
      00177C 20 E9            [ 2]  463 	jra interp_loop 
      00177E                        464 1$:	 
      00177E A1 85            [ 1]  465 	cp a,#TK_VAR
      001780 26 05            [ 1]  466 	jrne 2$
      001782 CD 1C F0         [ 4]  467 	call let_var  
      001785 20 E0            [ 2]  468 	jra interp_loop 
      001787                        469 2$:	
      001787 A1 05            [ 1]  470 	cp a,#TK_ARRAY 
      001789 26 05            [ 1]  471 	jrne 3$
      00178B CD 1C EB         [ 4]  472 	call let_array 
      00178E 20 D7            [ 2]  473 	jra interp_loop
      001790                        474 3$:	
      001790 A1 03            [ 1]  475 	cp a,#TK_LABEL
      001792 26 05            [ 1]  476 	jrne 4$
      001794 CD 17 A0         [ 4]  477 	call let_dvar  
      001797 20 CE            [ 2]  478 	jra interp_loop 
      001799                        479 4$: 
      001799 A1 0A            [ 1]  480 	cp a,#TK_COLON 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      00179B 27 CA            [ 1]  481 	jreq interp_loop
      00179D CC 16 94         [ 2]  482 5$:	jp syntax_error 
                                    483 
                                    484 
                                    485 ;----------------------
                                    486 ; when a label is met 
                                    487 ; at interp_loop
                                    488 ; it may be a variable 
                                    489 ; assignement to DIM 
                                    490 ; variable 
                                    491 ;----------------------
                           000001   492 	VAR_NAME=1 
                           000003   493 	REC_LEN=3
                           000004   494 	VSIZE=4 
      0017A0                        495 let_dvar:
      0017A0                        496 	_vars VSIZE 
      0017A0 52 04            [ 2]    1     sub sp,#VSIZE 
      0017A2 1F 01            [ 2]  497 	ldw (VAR_NAME,sp),x
      0017A4 0F 03            [ 1]  498 	clr (REC_LEN,sp) 
      0017A6 CD 18 14         [ 4]  499 	call skip_string 
      0017A9 CE 00 04         [ 2]  500 	ldw x,basicptr 
      0017AC 72 BB 00 00      [ 2]  501 	addw x,in.w 
      0017B0 F6               [ 1]  502 	ld a,(x)
      0017B1 A1 32            [ 1]  503 	cp a,#TK_EQUAL 
      0017B3 26 43            [ 1]  504 	jrne 9$ 
                                    505 ; dvar assignment 
      0017B5 72 5C 00 01      [ 1]  506 	inc in  
      0017B9 CD 1C 1E         [ 4]  507 	call condition  
      0017BC A1 84            [ 1]  508 	cp a,#TK_INTGR 
      0017BE 27 03            [ 1]  509 	jreq 1$ 
      0017C0 CC 16 94         [ 2]  510 0$:	jp syntax_error 
      0017C3                        511 1$: 
      0017C3 1E 01            [ 2]  512 	ldw x,(VAR_NAME,sp) ; pointer to var name 
      0017C5 CD 13 92         [ 4]  513 	call strlen 
      0017C8 AB 05            [ 1]  514 	add a,#REC_XTRA_BYTES
      0017CA 6B 04            [ 1]  515 	ld (REC_LEN+1,sp),a 
      0017CC CD 1D 5A         [ 4]  516 	call search_name 
      0017CF 5D               [ 2]  517 	tnzw x 
      0017D0 27 EE            [ 1]  518 	jreq 0$ 
      0017D2 F6               [ 1]  519 	ld a,(x)
      0017D3 2A 05            [ 1]  520 	jrpl 2$
      0017D5 A6 11            [ 1]  521 	ld a,#ERR_RD_ONLY 
      0017D7 CC 16 96         [ 2]  522 	jp tb_error 
      0017DA                        523 2$:
      0017DA 72 FB 03         [ 2]  524 	addw x,(REC_LEN,sp)
      0017DD 1D 00 03         [ 2]  525 	subw x,#CELL_SIZE 
      0017E0 CF 00 19         [ 2]  526 	ldw ptr16,x
      0017E3                        527 	_xpop 
      0017E3 90 F6            [ 1]    1     ld a,(y)
      0017E5 93               [ 1]    2     ldw x,y 
      0017E6 EE 01            [ 2]    3     ldw x,(1,x)
      0017E8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0017EC 72 C7 00 19      [ 4]  528 	ld [ptr16],a 
      0017F0 72 5C 00 1A      [ 1]  529 	inc ptr8 
      0017F4 72 CF 00 19      [ 5]  530 	ldw [ptr16],x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0017F8                        531 9$: _drop VSIZE 	
      0017F8 5B 04            [ 2]    1     addw sp,#VSIZE 
      0017FA 81               [ 4]  532 	ret 
                                    533 
                                    534 
                                    535 ;--------------------------
                                    536 ; extract next token from
                                    537 ; token list 
                                    538 ; basicptr -> base address 
                                    539 ; in  -> offset in list array 
                                    540 ; output:
                                    541 ;   A 		token attribute
                                    542 ;   X 		*token_value 
                                    543 ;----------------------------------------
      0017FB                        544 next_token::
                                    545 ;	clrw x 
      0017FB C6 00 01         [ 1]  546 	ld a,in 
      0017FE C7 00 03         [ 1]  547 	ld in.saved,a ; in case "_unget_token" needed 
                                    548 ; don't replace sub by "cp a,count" 
                                    549 ; if end of line must return with A=0   	
      001801 C0 00 02         [ 1]  550 	sub a,count 
      001804 27 0D            [ 1]  551 	jreq 9$ ; end of line 
      001806                        552 0$: 
      001806 CE 00 04         [ 2]  553 	ldw x,basicptr 
      001809 72 BB 00 00      [ 2]  554 	addw x,in.w 
      00180D F6               [ 1]  555 	ld a,(x)
      00180E 5C               [ 1]  556 	incw x
      00180F 72 5C 00 01      [ 1]  557 	inc in   
      001813 81               [ 4]  558 9$: ret 
                                    559 
                                    560 ;-------------------------
                                    561 ;  skip .asciz in BASIC line 
                                    562 ;  name 
                                    563 ;  input:
                                    564 ;     x		* string 
                                    565 ;  output:
                                    566 ;     none 
                                    567 ;-------------------------
      001814                        568 skip_string:
      001814 F6               [ 1]  569 	ld a,(x)
      001815 27 03            [ 1]  570 	jreq 1$
      001817 5C               [ 1]  571 	incw x 
      001818 20 FA            [ 2]  572 	jra skip_string 
      00181A 5C               [ 1]  573 1$: incw x 	
      00181B 72 B0 00 04      [ 2]  574 	subw x,basicptr 
      00181F CF 00 00         [ 2]  575 	ldw in.w,x 
      001822 81               [ 4]  576 	ret 
                                    577 
                                    578 ;---------------------
                                    579 ; extract 16 bits  
                                    580 ; address from BASIC
                                    581 ; code 
                                    582 ; input:
                                    583 ;    X    *address
                                    584 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                    585 ;    X    address 
                                    586 ;-------------------- 
      001823                        587 get_addr:
      001823 FE               [ 2]  588 	ldw x,(x)
      001824 72 5C 00 01      [ 1]  589 	inc in 
      001828 72 5C 00 01      [ 1]  590 	inc in 
      00182C 81               [ 4]  591 	ret 
                                    592 
                                    593 ;--------------------
                                    594 ; extract int24_t  
                                    595 ; value from BASIC 
                                    596 ; code 
                                    597 ; input:
                                    598 ;    X   *integer 
                                    599 ; output:
                                    600 ;    A:X   int24  
                                    601 ;--------------------
      00182D                        602 get_int24:
      00182D F6               [ 1]  603 	ld a,(x)
      00182E EE 01            [ 2]  604 	ldw x,(1,x)
                                    605 ; skip 3 bytes 
      001830 72 5C 00 01      [ 1]  606 	inc in 
      001834 72 5C 00 01      [ 1]  607 	inc in 
      001838 72 5C 00 01      [ 1]  608 	inc in 
      00183C 81               [ 4]  609 	ret 
                                    610 
                                    611 ;-------------------------
                                    612 ; get character from 
                                    613 ; BASIC code 
                                    614 ; input:
                                    615 ;    X   *char 
                                    616 ; output:
                                    617 ;    A    char 
                                    618 ;-------------------------
      00183D                        619 get_char:
      00183D F6               [ 1]  620 	ld a,(x)
      00183E 72 5C 00 01      [ 1]  621 	inc in  
      001842 81               [ 4]  622     ret 
                                    623 
                                    624 ;-----------------------------------
                                    625 ; print a 16 bit integer 
                                    626 ; using variable 'base' as conversion
                                    627 ; format.
                                    628 ; input:
                                    629 ;    X       integer to print 
                                    630 ;   'base'    conversion base 
                                    631 ; output:
                                    632 ;   terminal  
                                    633 ;-----------------------------------
      001843                        634 prt_i16:
      001843 72 5F 00 0C      [ 1]  635 	clr acc24 
      001847 CF 00 0D         [ 2]  636 	ldw acc16,x 
      00184A A6 10            [ 1]  637 	ld a,#16
      00184C C1 00 0A         [ 1]  638 	cp a,base
      00184F 27 09            [ 1]  639 	jreq prt_acc24  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      001851 72 0F 00 0D 04   [ 2]  640 	btjf acc16,#7,prt_acc24
      001856 72 53 00 0C      [ 1]  641 	cpl acc24 ; sign extend 
                                    642 	
                                    643 ;------------------------------------
                                    644 ; print integer in acc24 
                                    645 ; input:
                                    646 ;	acc24 		integer to print 
                                    647 ;	'base' 		numerical base for conversion 
                                    648 ;   'tab_width' field width 
                                    649 ;    A 			signed||unsigned conversion
                                    650 ;  output:
                                    651 ;    A          string length
                                    652 ;------------------------------------
      00185A                        653 prt_acc24:
      00185A A6 FF            [ 1]  654 	ld a,#255  ; signed conversion  
      00185C CD 18 80         [ 4]  655     call itoa  ; conversion entier en  .asciz
      00185F CD 11 4C         [ 4]  656 	call right_align  
      001862 88               [ 1]  657 	push a 
      001863 CD 09 5C         [ 4]  658 	call puts
      001866 84               [ 1]  659 	pop a 
      001867 81               [ 4]  660     ret	
                                    661 
                                    662 ;---------------------------------------
                                    663 ;  print value at xstack top 
                                    664 ;---------------------------------------
      001868                        665 print_top: 
      001868                        666 	_xpop 
      001868 90 F6            [ 1]    1     ld a,(y)
      00186A 93               [ 1]    2     ldw x,y 
      00186B EE 01            [ 2]    3     ldw x,(1,x)
      00186D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001871 C7 00 0C         [ 1]  667 	ld acc24,a 
      001874 CF 00 0D         [ 2]  668 	ldw acc16,x 
      001877 CD 18 5A         [ 4]  669 	call prt_acc24 
      00187A A6 20            [ 1]  670 	ld a,#SPACE
      00187C CD 08 FF         [ 4]  671 	call putc 
      00187F 81               [ 4]  672 	ret 
                                    673 
                                    674 ;------------------------------------
                                    675 ; convert integer in acc24 to string
                                    676 ; input:
                                    677 ;   'base'	conversion base 
                                    678 ;	acc24	integer to convert
                                    679 ;   A       0=unsigned, else signed 
                                    680 ; output:
                                    681 ;   X  		pointer to first char of string
                                    682 ;   A       string length
                                    683 ;------------------------------------
                           000001   684 	SIGN=1  ; integer sign 
                           000002   685 	LEN=2 
                           000003   686 	PSTR=3
                           000004   687 	VSIZE=4 ;locals size
      001880                        688 itoa::
      001880                        689 	_vars VSIZE
      001880 52 04            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      001882 0F 02            [ 1]  690 	clr (LEN,sp) ; string length  
      001884 0F 01            [ 1]  691 	clr (SIGN,sp)    ; sign
      001886 4D               [ 1]  692 	tnz A
      001887 27 11            [ 1]  693 	jreq 1$ ; unsigned conversion  
      001889 C6 00 0A         [ 1]  694 	ld a,base 
      00188C A1 0A            [ 1]  695 	cp a,#10
      00188E 26 0A            [ 1]  696 	jrne 1$
                                    697 	; base 10 string display with negative sign if bit 23==1
      001890 72 0F 00 0C 05   [ 2]  698 	btjf acc24,#7,1$
      001895 03 01            [ 1]  699 	cpl (SIGN,sp)
      001897 CD 02 1D         [ 4]  700 	call neg_acc24
      00189A                        701 1$:
                                    702 ; initialize string pointer 
      00189A AE 16 68         [ 2]  703 	ldw x,#tib 
      00189D 1C 00 50         [ 2]  704 	addw x,#TIB_SIZE
      0018A0 5A               [ 2]  705 	decw x 
      0018A1 7F               [ 1]  706 	clr (x)
      0018A2                        707 itoa_loop:
      0018A2 C6 00 0A         [ 1]  708     ld a,base
      0018A5 CD 02 E9         [ 4]  709     call divu24_8 ; acc24/A 
      0018A8 AB 30            [ 1]  710     add a,#'0  ; remainder of division
      0018AA A1 3A            [ 1]  711     cp a,#'9+1
      0018AC 2B 02            [ 1]  712     jrmi 2$
      0018AE AB 07            [ 1]  713     add a,#7 
      0018B0                        714 2$:	
      0018B0 5A               [ 2]  715 	decw x
      0018B1 F7               [ 1]  716     ld (x),a
      0018B2 0C 02            [ 1]  717 	inc (LEN,sp)
                                    718 	; if acc24==0 conversion done
      0018B4 C6 00 0C         [ 1]  719 	ld a,acc24
      0018B7 CA 00 0D         [ 1]  720 	or a,acc16
      0018BA CA 00 0E         [ 1]  721 	or a,acc8
      0018BD 26 E3            [ 1]  722     jrne itoa_loop
                                    723 	;conversion done, next add '$' or '-' as required
      0018BF C6 00 0A         [ 1]  724 	ld a,base 
      0018C2 A1 10            [ 1]  725 	cp a,#16
      0018C4 27 08            [ 1]  726 	jreq 8$
      0018C6 7B 01            [ 1]  727 	ld a,(SIGN,sp)
      0018C8 27 0A            [ 1]  728     jreq 10$
      0018CA A6 2D            [ 1]  729     ld a,#'-
      0018CC 20 02            [ 2]  730 	jra 9$ 
      0018CE                        731 8$:	
      0018CE A6 24            [ 1]  732 	ld a,#'$ 
      0018D0 5A               [ 2]  733 9$: decw x
      0018D1 F7               [ 1]  734     ld (x),a
      0018D2 0C 02            [ 1]  735 	inc (LEN,sp)
      0018D4                        736 10$:
      0018D4 7B 02            [ 1]  737 	ld a,(LEN,sp)
      0018D6                        738 	_drop VSIZE
      0018D6 5B 04            [ 2]    1     addw sp,#VSIZE 
      0018D8 81               [ 4]  739 	ret
                                    740 
                                    741 ;------------------------------------
                                    742 ; convert alpha to uppercase
                                    743 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    744 ;    a  character to convert
                                    745 ; output:
                                    746 ;    a  uppercase character
                                    747 ;------------------------------------
      0018D9                        748 to_upper::
      0018D9 A1 61            [ 1]  749 	cp a,#'a
      0018DB 2A 01            [ 1]  750 	jrpl 1$
      0018DD 81               [ 4]  751 0$:	ret
      0018DE A1 7A            [ 1]  752 1$: cp a,#'z	
      0018E0 22 FB            [ 1]  753 	jrugt 0$
      0018E2 A0 20            [ 1]  754 	sub a,#32
      0018E4 81               [ 4]  755 	ret
                                    756 	
                                    757 ;------------------------------------
                                    758 ; convert pad content in integer
                                    759 ; input:
                                    760 ;    x		* .asciz to convert
                                    761 ; output:
                                    762 ;    A:X        int24_t 
                                    763 ;    acc24      int24_t
                                    764 ;------------------------------------
                                    765 	; local variables
                           000001   766 	SIGN=1 ; 1 byte, 
                           000002   767 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   768 	TEMP=3 ; 1 byte, temporary storage
                           000004   769 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   770 	VSIZE=5 ; 5 bytes reserved for local storage
      0018E5                        771 atoi24::
      0018E5                        772 	_vars VSIZE
      0018E5 52 05            [ 2]    1     sub sp,#VSIZE 
      0018E7 1F 04            [ 2]  773 	ldw (XTEMP,sp),x 
                                    774 ; conversion made on xstack 
      0018E9 4F               [ 1]  775 	clr a 
      0018EA 5F               [ 1]  776 	clrw x 
      0018EB                        777 	_xpush 
      0018EB 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018EF 90 F7            [ 1]    2     ld (y),a 
      0018F1 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018F4 0F 01            [ 1]  778 	clr (SIGN,sp)
      0018F6 A6 0A            [ 1]  779 	ld a,#10
      0018F8 6B 02            [ 1]  780 	ld (BASE,sp),a ; default base decimal
      0018FA 1E 04            [ 2]  781 	ldw x,(XTEMP,sp)
      0018FC F6               [ 1]  782 	ld a,(x)
      0018FD 27 4E            [ 1]  783 	jreq 9$  ; completed if 0
      0018FF A1 2D            [ 1]  784 	cp a,#'-
      001901 26 04            [ 1]  785 	jrne 1$
      001903 03 01            [ 1]  786 	cpl (SIGN,sp)
      001905 20 08            [ 2]  787 	jra 2$
      001907 A1 24            [ 1]  788 1$: cp a,#'$
      001909 26 08            [ 1]  789 	jrne 3$
      00190B A6 10            [ 1]  790 	ld a,#16
      00190D 6B 02            [ 1]  791 	ld (BASE,sp),a
      00190F 5C               [ 1]  792 2$:	incw x
      001910 1F 04            [ 2]  793 	ldw (XTEMP,sp),x 
      001912 F6               [ 1]  794 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      001913                        795 3$:	; char to digit 
      001913 A1 61            [ 1]  796 	cp a,#'a
      001915 2B 02            [ 1]  797 	jrmi 4$
      001917 A0 20            [ 1]  798 	sub a,#32
      001919 A1 30            [ 1]  799 4$:	cp a,#'0
      00191B 2B 30            [ 1]  800 	jrmi 9$
      00191D A0 30            [ 1]  801 	sub a,#'0
      00191F A1 0A            [ 1]  802 	cp a,#10
      001921 2B 06            [ 1]  803 	jrmi 5$
      001923 A0 07            [ 1]  804 	sub a,#7
      001925 11 02            [ 1]  805 	cp a,(BASE,sp)
      001927 2A 24            [ 1]  806 	jrpl 9$
      001929 6B 03            [ 1]  807 5$:	ld (TEMP,sp),a
      00192B 7B 02            [ 1]  808 	ld a,(BASE,sp)
      00192D CD 02 3A         [ 4]  809 	call mulu24_8
      001930                        810 	_xpush 
      001930 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001934 90 F7            [ 1]    2     ld (y),a 
      001936 90 EF 01         [ 2]    3     ldw (1,y),x 
      001939 5F               [ 1]  811 	clrw x 
      00193A 7B 03            [ 1]  812 	ld a,(TEMP,sp)
      00193C 02               [ 1]  813 	rlwa x 
      00193D                        814 	_xpush 
      00193D 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001941 90 F7            [ 1]    2     ld (y),a 
      001943 90 EF 01         [ 2]    3     ldw (1,y),x 
      001946 CD 01 7E         [ 4]  815 	call add24 
      001949 1E 04            [ 2]  816 	ldw x,(XTEMP,sp)
      00194B 20 C2            [ 2]  817 	jra 2$
      00194D 0D 01            [ 1]  818 9$:	tnz (SIGN,sp)
      00194F 27 03            [ 1]  819     jreq atoi_exit
      001951 CD 02 03         [ 4]  820     call neg24
      001954                        821 atoi_exit:
      001954                        822 	_xpop 
      001954 90 F6            [ 1]    1     ld a,(y)
      001956 93               [ 1]    2     ldw x,y 
      001957 EE 01            [ 2]    3     ldw x,(1,x)
      001959 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00195D C7 00 0C         [ 1]  823 	ld acc24,a 
      001960 CF 00 0D         [ 2]  824 	ldw acc16,x  
      001963                        825 	_drop VSIZE
      001963 5B 05            [ 2]    1     addw sp,#VSIZE 
      001965 81               [ 4]  826 	ret
                                    827 
                                    828 
                                    829 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    830 ;;   TINY BASIC  operators,
                                    831 ;;   commands and functions 
                                    832 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    833 
                                    834 ;---------------------------------
                                    835 ; dictionary search 
                                    836 ; input:
                                    837 ;	X 		dictionary entry point, name field  
                                    838 ;   y		.asciz name to search 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    839 ; output:
                                    840 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    841 ;  X		routine address|TK_OP 
                                    842 ;---------------------------------
                           000001   843 	NLEN=1 ; cmd length 
                           000002   844 	XSAVE=2
                           000004   845 	YSAVE=4
                           000005   846 	VSIZE=5 
      001966                        847 search_dict::
      001966                        848 	_vars VSIZE 
      001966 52 05            [ 2]    1     sub sp,#VSIZE 
      001968 17 04            [ 2]  849 	ldw (YSAVE,sp),y 
      00196A                        850 search_next:
      00196A 1F 02            [ 2]  851 	ldw (XSAVE,sp),x 
                                    852 ; get name length in dictionary	
      00196C F6               [ 1]  853 	ld a,(x)
      00196D A4 0F            [ 1]  854 	and a,#0xf 
      00196F 6B 01            [ 1]  855 	ld (NLEN,sp),a  
      001971 16 04            [ 2]  856 	ldw y,(YSAVE,sp) ; name pointer 
      001973 5C               [ 1]  857 	incw x 
      001974                        858 cp_loop:
      001974 90 F6            [ 1]  859 	ld a,(y)
      001976 27 1B            [ 1]  860 	jreq str_match 
      001978 0D 01            [ 1]  861 	tnz (NLEN,sp)
      00197A 27 0A            [ 1]  862 	jreq no_match  
      00197C F1               [ 1]  863 	cp a,(x)
      00197D 26 07            [ 1]  864 	jrne no_match 
      00197F 90 5C            [ 1]  865 	incw y 
      001981 5C               [ 1]  866 	incw x
      001982 0A 01            [ 1]  867 	dec (NLEN,sp)
      001984 20 EE            [ 2]  868 	jra cp_loop 
      001986                        869 no_match:
      001986 1E 02            [ 2]  870 	ldw x,(XSAVE,sp) 
      001988 1D 00 02         [ 2]  871 	subw x,#2 ; move X to link field
      00198B 4B 00            [ 1]  872 	push #TK_NONE 
      00198D FE               [ 2]  873 	ldw x,(x) ; next word link 
      00198E 84               [ 1]  874 	pop a ; TK_NONE 
      00198F 27 1D            [ 1]  875 	jreq search_exit  ; not found  
                                    876 ;try next 
      001991 20 D7            [ 2]  877 	jra search_next
      001993                        878 str_match:
      001993 1E 02            [ 2]  879 	ldw x,(XSAVE,sp)
      001995 F6               [ 1]  880 	ld a,(X)
      001996 6B 01            [ 1]  881 	ld (NLEN,sp),a ; needed to test keyword type  
      001998 A4 0F            [ 1]  882 	and a,#NLEN_MASK 
                                    883 ; move x to procedure address field 	
      00199A 4C               [ 1]  884 	inc a 
      00199B C7 00 0E         [ 1]  885 	ld acc8,a 
      00199E 72 5F 00 0D      [ 1]  886 	clr acc16 
      0019A2 72 BB 00 0D      [ 2]  887 	addw x,acc16 
      0019A6 FE               [ 2]  888 	ldw x,(x) ; routine address  
                                    889 ;determine keyword type bits 7:4 
      0019A7 7B 01            [ 1]  890 	ld a,(NLEN,sp)
      0019A9 A4 F0            [ 1]  891 	and a,#KW_TYPE_MASK 
      0019AB 4E               [ 1]  892 	swap a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      0019AC AB 80            [ 1]  893 	add a,#128
      0019AE                        894 search_exit: 
      0019AE                        895 	_drop VSIZE 
      0019AE 5B 05            [ 2]    1     addw sp,#VSIZE 
      0019B0 81               [ 4]  896 	ret 
                                    897 
                                    898 ;---------------------
                                    899 ; check if next token
                                    900 ;  is of expected type 
                                    901 ; input:
                                    902 ;   A 		 expected token attribute
                                    903 ;  ouput:
                                    904 ;   none     if fail call syntax_error 
                                    905 ;--------------------
      0019B1                        906 expect:
      0019B1 88               [ 1]  907 	push a 
      0019B2 CD 17 FB         [ 4]  908 	call next_token 
      0019B5 11 01            [ 1]  909 	cp a,(1,sp)
      0019B7 27 03            [ 1]  910 	jreq 1$
      0019B9 CC 16 94         [ 2]  911 	jp syntax_error
      0019BC 84               [ 1]  912 1$: pop a 
      0019BD 81               [ 4]  913 	ret 
                                    914 
                                    915 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    916 ; parse arguments list 
                                    917 ; between ()
                                    918 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019BE                        919 func_args:
      0019BE A6 06            [ 1]  920 	ld a,#TK_LPAREN 
      0019C0 CD 19 B1         [ 4]  921 	call expect 
                                    922 ; expected to continue in arg_list 
                                    923 ; caller must check for TK_RPAREN 
                                    924 
                                    925 ;-------------------------------
                                    926 ; parse embedded BASIC routines 
                                    927 ; arguments list.
                                    928 ; arg_list::=  expr[','expr]*
                                    929 ; all arguments are of int24_t type
                                    930 ; and pushed on stack 
                                    931 ; input:
                                    932 ;   none
                                    933 ; output:
                                    934 ;   xstack{n}   arguments pushed on xstack
                                    935 ;   A 	number of arguments pushed on xstack  
                                    936 ;--------------------------------
      0019C3                        937 arg_list:
      0019C3 4B 00            [ 1]  938 	push #0
      0019C5 CD 1C 1E         [ 4]  939 1$:	call condition 
      0019C8 4D               [ 1]  940 	tnz a 
      0019C9 27 12            [ 1]  941 	jreq 7$  
      0019CB 0C 01            [ 1]  942 	inc (1,sp)
      0019CD CD 17 FB         [ 4]  943 	call next_token 
      0019D0 A1 08            [ 1]  944 	cp a,#TK_COMMA 
      0019D2 27 F1            [ 1]  945 	jreq 1$ 
      0019D4 A1 07            [ 1]  946 	cp a,#TK_RPAREN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0019D6 27 05            [ 1]  947 	jreq 7$
      0019D8                        948 	_unget_token 
      0019D8 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0019DD 84               [ 1]  949 7$:	pop a  
      0019DE 81               [ 4]  950 	ret 
                                    951 
                                    952 ;--------------------------------
                                    953 ;   BASIC commnands 
                                    954 ;--------------------------------
                                    955 
                                    956 ;--------------------------------
                                    957 ;  arithmetic and relational 
                                    958 ;  routines
                                    959 ;  operators precedence
                                    960 ;  highest to lowest
                                    961 ;  operators on same row have 
                                    962 ;  same precedence and are executed
                                    963 ;  from left to right.
                                    964 ;	'*','/','%'
                                    965 ;   '-','+'
                                    966 ;   '=','>','<','>=','<=','<>','><'
                                    967 ;   '<>' and '><' are equivalent for not equal.
                                    968 ;--------------------------------
                                    969 
                                    970 ;---------------------
                                    971 ; return array element
                                    972 ; address from @(expr)
                                    973 ; input:
                                    974 ;   A 		TK_ARRAY
                                    975 ; output:
                                    976 ;	X 		element address 
                                    977 ;----------------------
      0019DF                        978 get_array_element:
      0019DF CD 19 BE         [ 4]  979 	call func_args 
      0019E2 A1 01            [ 1]  980 	cp a,#1
      0019E4 27 03            [ 1]  981 	jreq 1$
      0019E6 CC 16 94         [ 2]  982 	jp syntax_error
      0019E9                        983 1$: _xpop 
      0019E9 90 F6            [ 1]    1     ld a,(y)
      0019EB 93               [ 1]    2     ldw x,y 
      0019EC EE 01            [ 2]    3     ldw x,(1,x)
      0019EE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    984     ; ignore A, index < 65536 in any case 
                                    985 	; check for bounds 
      0019F2 C3 00 20         [ 2]  986 	cpw x,array_size 
      0019F5 23 05            [ 2]  987 	jrule 3$
                                    988 ; bounds {1..array_size}	
      0019F7 A6 0A            [ 1]  989 2$: ld a,#ERR_BAD_VALUE 
      0019F9 CC 16 96         [ 2]  990 	jp tb_error 
      0019FC 5D               [ 2]  991 3$: tnzw  x
      0019FD 27 F8            [ 1]  992 	jreq 2$ 
      0019FF A6 03            [ 1]  993 	ld a,#CELL_SIZE  
      001A01 42               [ 4]  994 	mul x,a 
      001A02 CF 00 0D         [ 2]  995 	ldw acc16,x   
      001A05 AE 16 68         [ 2]  996 	ldw x,#tib ; array is below tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      001A08 72 B0 00 0D      [ 2]  997 	subw x,acc16 
      001A0C 81               [ 4]  998 	ret 
                                    999 
                                   1000 
                                   1001 ;***********************************
                                   1002 ;   expression parse,execute 
                                   1003 ;***********************************
                                   1004 ;-----------------------------------
                                   1005 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1006 ;			 integer | function |
                                   1007 ;			 '('relation')' 
                                   1008 ; output:
                                   1009 ;   A       token attribute 
                                   1010 ;   xstack  value  
                                   1011 ; ---------------------------------
                           000001  1012 	NEG=1
                           000001  1013 	VSIZE=1
      001A0D                       1014 factor:
      001A0D                       1015 	_vars VSIZE 
      001A0D 52 01            [ 2]    1     sub sp,#VSIZE 
      001A0F 0F 01            [ 1] 1016 	clr (NEG,sp)
      001A11 CD 17 FB         [ 4] 1017 	call next_token
      001A14 4D               [ 1] 1018 	tnz a 
      001A15 26 03            [ 1] 1019 	jrne 1$ 
      001A17 CC 1A BF         [ 2] 1020 	jp 22$ 
      001A1A A1 10            [ 1] 1021 1$:	cp a,#TK_PLUS 
      001A1C 27 06            [ 1] 1022 	jreq 2$
      001A1E A1 11            [ 1] 1023 	cp a,#TK_MINUS 
      001A20 26 05            [ 1] 1024 	jrne 4$ 
      001A22 03 01            [ 1] 1025 	cpl (NEG,sp)
      001A24                       1026 2$:	
      001A24 CD 17 FB         [ 4] 1027 	call next_token
      001A27                       1028 4$:
      001A27 4D               [ 1] 1029 	tnz a 
      001A28 26 03            [ 1] 1030 	jrne 41$ 
      001A2A CC 16 94         [ 2] 1031 	jp syntax_error  
      001A2D                       1032 41$:	
      001A2D A1 81            [ 1] 1033 	cp a,#TK_IFUNC 
      001A2F 26 0C            [ 1] 1034 	jrne 5$ 
      001A31                       1035 	_get_code_addr 
      001A31 FE               [ 2]    1         ldw x,(x)
      001A32 72 5C 00 01      [ 1]    2         inc in 
      001A36 72 5C 00 01      [ 1]    3         inc in 
      001A3A FD               [ 4] 1036 	call (x); result in A:X  
      001A3B 20 70            [ 2] 1037 	jra 18$ 
      001A3D                       1038 5$:
      001A3D A1 84            [ 1] 1039 	cp a,#TK_INTGR
      001A3F 26 05            [ 1] 1040 	jrne 6$
      001A41 CD 18 2D         [ 4] 1041 	call get_int24 ; A:X
      001A44 20 67            [ 2] 1042 	jra 18$
      001A46                       1043 6$:
      001A46 A1 05            [ 1] 1044 	cp a,#TK_ARRAY
      001A48 26 05            [ 1] 1045 	jrne 7$
      001A4A CD 19 DF         [ 4] 1046 	call get_array_element
      001A4D 20 07            [ 2] 1047     jra 71$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001A4F                       1048 7$:
      001A4F A1 85            [ 1] 1049 	cp a,#TK_VAR 
      001A51 26 08            [ 1] 1050 	jrne 8$
      001A53 CD 18 23         [ 4] 1051 	call get_addr 
      001A56                       1052 71$: ; put value in A:X
      001A56 F6               [ 1] 1053 	ld a,(x)
      001A57 EE 01            [ 2] 1054 	ldw x,(1,x)
      001A59 20 52            [ 2] 1055 	jra 18$
      001A5B                       1056 8$:
      001A5B A1 03            [ 1] 1057 	cp a,#TK_LABEL 
      001A5D 26 1D            [ 1] 1058 	jrne 9$
      001A5F 90 89            [ 2] 1059 	pushw y  
      001A61 89               [ 2] 1060 	pushw x 
      001A62 CD 18 14         [ 4] 1061 	call skip_string
      001A65 85               [ 2] 1062 	popw x  
      001A66 CD 13 92         [ 4] 1063 	call strlen 
      001A69 AB 05            [ 1] 1064 	add a,#REC_XTRA_BYTES
      001A6B CD 1D 5A         [ 4] 1065 	call search_name
      001A6E 5D               [ 2] 1066 	tnzw x 
      001A6F 26 04            [ 1] 1067 	jrne 82$ 
      001A71 90 85            [ 2] 1068 	popw y 
      001A73 20 30            [ 2] 1069 	jra 16$
      001A75                       1070 82$:
      001A75 90 85            [ 2] 1071 	popw y   
      001A77 CD 1D 20         [ 4] 1072 	call get_value ; in A:X 
      001A7A 20 31            [ 2] 1073 	jra 18$
      001A7C                       1074 9$: 
      001A7C A1 82            [ 1] 1075 	cp a,#TK_CFUNC 
      001A7E 26 0E            [ 1] 1076 	jrne 12$
      001A80                       1077 	_get_code_addr 
      001A80 FE               [ 2]    1         ldw x,(x)
      001A81 72 5C 00 01      [ 1]    2         inc in 
      001A85 72 5C 00 01      [ 1]    3         inc in 
      001A89 FD               [ 4] 1078 	call(x)
      001A8A 5F               [ 1] 1079 	clrw x 
      001A8B 02               [ 1] 1080 	rlwa x  ; char>int24 in A:X 
      001A8C 20 1F            [ 2] 1081 	jra 18$ 	 
      001A8E                       1082 12$:			
      001A8E A1 06            [ 1] 1083 	cp a,#TK_LPAREN
      001A90 26 13            [ 1] 1084 	jrne 16$
      001A92 CD 1B 05         [ 4] 1085 	call expression
      001A95 A6 07            [ 1] 1086 	ld a,#TK_RPAREN 
      001A97 CD 19 B1         [ 4] 1087 	call expect
      001A9A                       1088 	_xpop 
      001A9A 90 F6            [ 1]    1     ld a,(y)
      001A9C 93               [ 1]    2     ldw x,y 
      001A9D EE 01            [ 2]    3     ldw x,(1,x)
      001A9F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001AA3 20 08            [ 2] 1089 	jra 18$	
      001AA5                       1090 16$:
      001AA5                       1091 	_unget_token 
      001AA5 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001AAA 4F               [ 1] 1092 	clr a 
      001AAB 20 12            [ 2] 1093 	jra 22$ 
      001AAD                       1094 18$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001AAD 0D 01            [ 1] 1095 	tnz (NEG,sp)
      001AAF 27 03            [ 1] 1096 	jreq 20$
      001AB1 CD 02 15         [ 4] 1097 	call neg_ax   
      001AB4                       1098 20$:
      001AB4                       1099 	_xpush 
      001AB4 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001AB8 90 F7            [ 1]    2     ld (y),a 
      001ABA 90 EF 01         [ 2]    3     ldw (1,y),x 
      001ABD A6 84            [ 1] 1100 	ld a,#TK_INTGR
      001ABF                       1101 22$:
      001ABF                       1102 	_drop VSIZE
      001ABF 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AC1 81               [ 4] 1103 	ret
                                   1104 
                                   1105 
                                   1106 ;-----------------------------------
                                   1107 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1108 ; output:
                                   1109 ;   A    	token attribute 
                                   1110 ;	xstack		value 
                                   1111 ;-----------------------------------
                           000001  1112 	MULOP=1
                           000001  1113 	VSIZE=1
      001AC2                       1114 term:
      001AC2                       1115 	_vars VSIZE
      001AC2 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1116 ; first factor 	
      001AC4 CD 1A 0D         [ 4] 1117 	call factor
      001AC7 4D               [ 1] 1118 	tnz a 
      001AC8 27 38            [ 1] 1119 	jreq term_exit  
      001ACA                       1120 term01:	 ; check for  operator '*'|'/'|'%' 
      001ACA CD 17 FB         [ 4] 1121 	call next_token
      001ACD 6B 01            [ 1] 1122 	ld (MULOP,sp),a
      001ACF A4 30            [ 1] 1123 	and a,#TK_GRP_MASK
      001AD1 A1 20            [ 1] 1124 	cp a,#TK_GRP_MULT
      001AD3 27 09            [ 1] 1125 	jreq 1$
      001AD5 A6 84            [ 1] 1126 	ld a,#TK_INTGR
      001AD7                       1127 	_unget_token 
      001AD7 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001ADC 20 24            [ 2] 1128 	jra term_exit 
      001ADE                       1129 1$:	; got *|/|%
                                   1130 ;second factor
      001ADE CD 1A 0D         [ 4] 1131 	call factor
      001AE1 4D               [ 1] 1132 	tnz a 
      001AE2 26 03            [ 1] 1133 	jrne 2$ 
      001AE4 CC 16 94         [ 2] 1134 	jp syntax_error 
      001AE7                       1135 2$: ; select operation 	
      001AE7 7B 01            [ 1] 1136 	ld a,(MULOP,sp) 
      001AE9 A1 20            [ 1] 1137 	cp a,#TK_MULT 
      001AEB 26 05            [ 1] 1138 	jrne 3$
                                   1139 ; '*' operator
      001AED CD 02 79         [ 4] 1140 	call mul24 
      001AF0 20 D8            [ 2] 1141 	jra term01
      001AF2 A1 21            [ 1] 1142 3$: cp a,#TK_DIV 
      001AF4 26 05            [ 1] 1143 	jrne 4$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                                   1144 ; '/' operator	
      001AF6 CD 03 07         [ 4] 1145 	call div24 
      001AF9 20 CF            [ 2] 1146 	jra term01 
      001AFB                       1147 4$: ; '%' operator
      001AFB CD 03 A1         [ 4] 1148 	call mod24
      001AFE 20 CA            [ 2] 1149 	jra term01 
      001B00                       1150 9$: 
      001B00 A6 84            [ 1] 1151 	ld a,#TK_INTGR
      001B02                       1152 term_exit:
      001B02                       1153 	_drop VSIZE 
      001B02 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B04 81               [ 4] 1154 	ret 
                                   1155 
                                   1156 ;-------------------------------
                                   1157 ;  expr ::= term [['+'|'-'] term]*
                                   1158 ;  result range {-32768..32767}
                                   1159 ;  output:
                                   1160 ;   A    token attribute 
                                   1161 ;   xstack	 result    
                                   1162 ;-------------------------------
                           000001  1163 	OP=1 
                           000001  1164 	VSIZE=1 
      001B05                       1165 expression:
      001B05                       1166 	_vars VSIZE 
      001B05 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1167 ; first term 	
      001B07 CD 1A C2         [ 4] 1168 	call term
      001B0A 4D               [ 1] 1169 	tnz a 
      001B0B 27 2D            [ 1] 1170 	jreq 9$
      001B0D                       1171 1$:	; operator '+'|'-'
      001B0D CD 17 FB         [ 4] 1172 	call next_token
      001B10 6B 01            [ 1] 1173 	ld (OP,sp),a 
      001B12 A4 30            [ 1] 1174 	and a,#TK_GRP_MASK
      001B14 A1 10            [ 1] 1175 	cp a,#TK_GRP_ADD 
      001B16 27 09            [ 1] 1176 	jreq 2$ 
      001B18                       1177 	_unget_token 
      001B18 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001B1D A6 84            [ 1] 1178 	ld a,#TK_INTGR
      001B1F 20 19            [ 2] 1179 	jra 9$ 
      001B21                       1180 2$: ; second term 
      001B21 CD 1A C2         [ 4] 1181 	call term
      001B24 4D               [ 1] 1182 	tnz a 
      001B25 26 03            [ 1] 1183 	jrne 3$
      001B27 CC 16 94         [ 2] 1184 	jp syntax_error
      001B2A                       1185 3$:
      001B2A 7B 01            [ 1] 1186 	ld a,(OP,sp)
      001B2C A1 10            [ 1] 1187 	cp a,#TK_PLUS 
      001B2E 26 05            [ 1] 1188 	jrne 4$
                                   1189 ; '+' operator	
      001B30 CD 01 7E         [ 4] 1190 	call add24
      001B33 20 D8            [ 2] 1191 	jra 1$ 
      001B35                       1192 4$:	; '-' operator 
      001B35 CD 01 9B         [ 4] 1193 	call sub24
      001B38 20 D3            [ 2] 1194 	jra 1$
      001B3A                       1195 9$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001B3A                       1196 	_drop VSIZE 
      001B3A 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B3C 81               [ 4] 1197 	ret 
                                   1198 
                                   1199 ;---------------------------------------------
                                   1200 ; rel ::= expr rel_op expr
                                   1201 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1202 ;  relation return  integer , zero is false 
                                   1203 ;  output:
                                   1204 ;	 xstack		value  
                                   1205 ;---------------------------------------------
                           000001  1206 	RELOP=1
                           000001  1207 	VSIZE=1 
      001B3D                       1208 relation: 
      001B3D                       1209 	_vars VSIZE
      001B3D 52 01            [ 2]    1     sub sp,#VSIZE 
      001B3F CD 1B 05         [ 4] 1210 	call expression
      001B42 4D               [ 1] 1211 	tnz a 
      001B43 27 54            [ 1] 1212 	jreq 9$ 
                                   1213 ; expect rel_op or leave 
      001B45 CD 17 FB         [ 4] 1214 	call next_token 
      001B48 6B 01            [ 1] 1215 	ld (RELOP,sp),a 
      001B4A A4 30            [ 1] 1216 	and a,#TK_GRP_MASK
      001B4C A1 30            [ 1] 1217 	cp a,#TK_GRP_RELOP 
      001B4E 27 09            [ 1] 1218 	jreq 2$
      001B50 A6 84            [ 1] 1219 	ld a,#TK_INTGR 
      001B52                       1220 	_unget_token 
      001B52 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001B57 20 40            [ 2] 1221 	jra 9$ 
      001B59                       1222 2$:	; expect another expression
      001B59 CD 1B 05         [ 4] 1223 	call expression
      001B5C 4D               [ 1] 1224 	tnz a 
      001B5D 26 03            [ 1] 1225 	jrne 3$
      001B5F CC 16 94         [ 2] 1226 	jp syntax_error 
      001B62                       1227 3$: 
      001B62 CD 01 B8         [ 4] 1228 	call cp24 
      001B65                       1229 	_xpop  
      001B65 90 F6            [ 1]    1     ld a,(y)
      001B67 93               [ 1]    2     ldw x,y 
      001B68 EE 01            [ 2]    3     ldw x,(1,x)
      001B6A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B6E 4D               [ 1] 1230 	tnz a 
      001B6F 2B 08            [ 1] 1231 	jrmi 4$
      001B71 26 0C            [ 1] 1232 	jrne 5$
      001B73 35 02 00 0E      [ 1] 1233 	mov acc8,#2 ; i1==i2
      001B77 20 0A            [ 2] 1234 	jra 6$ 
      001B79                       1235 4$: ; i1<i2
      001B79 35 04 00 0E      [ 1] 1236 	mov acc8,#4 
      001B7D 20 04            [ 2] 1237 	jra 6$
      001B7F                       1238 5$: ; i1>i2
      001B7F 35 01 00 0E      [ 1] 1239 	mov acc8,#1  
      001B83                       1240 6$: ; 0=false, -1=true 
      001B83 5F               [ 1] 1241 	clrw x 
      001B84 C6 00 0E         [ 1] 1242 	ld a, acc8  
      001B87 14 01            [ 1] 1243 	and a,(RELOP,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001B89 27 03            [ 1] 1244 	jreq 7$
      001B8B 53               [ 2] 1245 	cplw x 
      001B8C A6 FF            [ 1] 1246 	ld a,#255 
      001B8E                       1247 7$:	_xpush 
      001B8E 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B92 90 F7            [ 1]    2     ld (y),a 
      001B94 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B97 A6 84            [ 1] 1248 	ld a,#TK_INTGR
      001B99                       1249 9$: 
      001B99                       1250 	_drop VSIZE
      001B99 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B9B 81               [ 4] 1251 	ret 
                                   1252 
                                   1253 ;-------------------------------------------
                                   1254 ;  AND factor:  [NOT] relation | (condition)
                                   1255 ;  output:
                                   1256 ;     A      TK_INTGR|0
                                   1257 ;-------------------------------------------
                           000001  1258 	NOT_OP=1
      001B9C                       1259 and_factor:
      001B9C 4B 00            [ 1] 1260 	push #0 
      001B9E CD 17 FB         [ 4] 1261 0$:	call next_token  
      001BA1 4D               [ 1] 1262 	tnz a 
      001BA2 27 25            [ 1] 1263 	jreq 8$ 
      001BA4 A1 87            [ 1] 1264 	cp a,#TK_NOT 
      001BA6 26 04            [ 1] 1265 	jrne 1$ 
      001BA8 03 01            [ 1] 1266 	cpl (NOT_OP,sp)
      001BAA 20 F2            [ 2] 1267 	jra 0$ 
      001BAC                       1268 1$:	
      001BAC A1 06            [ 1] 1269 	cp a,#TK_LPAREN 
      001BAE 26 0A            [ 1] 1270 	jrne 2$
      001BB0 CD 1C 1E         [ 4] 1271 	call condition
      001BB3 A6 07            [ 1] 1272 	ld a,#TK_RPAREN 
      001BB5 CD 19 B1         [ 4] 1273 	call expect
      001BB8 20 08            [ 2] 1274 	jra 3$
      001BBA                       1275 2$: _unget_token 
      001BBA 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001BBF CD 1B 3D         [ 4] 1276 	call relation
      001BC2                       1277 3$:
      001BC2 0D 01            [ 1] 1278 	tnz (NOT_OP,sp)
      001BC4 27 03            [ 1] 1279 	jreq 8$ 
      001BC6 CD 01 FA         [ 4] 1280 	call cpl24
      001BC9                       1281 8$:
      001BC9                       1282 	_drop 1  
      001BC9 5B 01            [ 2]    1     addw sp,#1 
      001BCB 81               [ 4] 1283     ret 
                                   1284 
                                   1285 
                                   1286 ;--------------------------------------------
                                   1287 ;  AND operator as priority over OR||XOR 
                                   1288 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1289 ;          
                                   1290 ;  output:
                                   1291 ;     A     TK_INTGR|0
                                   1292 ;    xtack   value 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



                                   1293 ;--------------------------------------------
      001BCC                       1294 and_cond:
      001BCC CD 1B 9C         [ 4] 1295 	call and_factor
      001BCF 4D               [ 1] 1296 	tnz a 
      001BD0 27 4B            [ 1] 1297 	jreq 9$  
      001BD2 CD 17 FB         [ 4] 1298 1$: call next_token 
      001BD5 4D               [ 1] 1299 	tnz a 
      001BD6 27 43            [ 1] 1300 	jreq 6$ 
      001BD8 A1 88            [ 1] 1301 	cp a,#TK_AND 
      001BDA 27 07            [ 1] 1302 	jreq 3$
      001BDC                       1303 	_unget_token 
      001BDC 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001BE1 20 38            [ 2] 1304 	jra 6$ 
      001BE3 CD 1B 9C         [ 4] 1305 3$:	call and_factor  
      001BE6 4D               [ 1] 1306 	tnz a 
      001BE7 26 03            [ 1] 1307 	jrne 4$
      001BE9 CC 16 94         [ 2] 1308 	jp syntax_error 
      001BEC                       1309 4$:	
      001BEC                       1310 	_xpop 
      001BEC 90 F6            [ 1]    1     ld a,(y)
      001BEE 93               [ 1]    2     ldw x,y 
      001BEF EE 01            [ 2]    3     ldw x,(1,x)
      001BF1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BF5 C7 00 0C         [ 1] 1311 	ld acc24,a 
      001BF8 CF 00 0D         [ 2] 1312 	ldw acc16,x
      001BFB                       1313 	_xpop 
      001BFB 90 F6            [ 1]    1     ld a,(y)
      001BFD 93               [ 1]    2     ldw x,y 
      001BFE EE 01            [ 2]    3     ldw x,(1,x)
      001C00 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C04 C4 00 0C         [ 1] 1314 	and a,acc24 
      001C07 02               [ 1] 1315 	rlwa x 
      001C08 C4 00 0D         [ 1] 1316 	and a,acc16 
      001C0B 02               [ 1] 1317 	rlwa x 
      001C0C C4 00 0E         [ 1] 1318 	and a,acc8 
      001C0F 02               [ 1] 1319 	rlwa x
      001C10                       1320 	_xpush
      001C10 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C14 90 F7            [ 1]    2     ld (y),a 
      001C16 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C19 20 B7            [ 2] 1321 	jra 1$  
      001C1B A6 84            [ 1] 1322 6$: ld a,#TK_INTGR 
      001C1D 81               [ 4] 1323 9$:	ret 	 
                                   1324 
                                   1325 
                                   1326 ;--------------------------------------------
                                   1327 ; condition for IF and UNTIL 
                                   1328 ; operators: OR,XOR 
                                   1329 ; format:  and_cond [ OP and_cond ]* 
                                   1330 ; output:
                                   1331 ;    A        INTGR|0 
                                   1332 ;    xstack   value 
                                   1333 ;--------------------------------------------
                           000001  1334 	ATMP=1
                           000002  1335 	OP=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                           000002  1336 	VSIZE=2 
      001C1E                       1337 condition:
      001C1E                       1338 	_vars VSIZE 
      001C1E 52 02            [ 2]    1     sub sp,#VSIZE 
      001C20 CD 1B CC         [ 4] 1339 	call and_cond
      001C23 4D               [ 1] 1340 	tnz a 
      001C24 27 69            [ 1] 1341 	jreq 9$ 
      001C26 CD 17 FB         [ 4] 1342 1$:	call next_token 
      001C29 A1 89            [ 1] 1343 	cp a,#TK_OR 
      001C2B 27 0B            [ 1] 1344 	jreq 2$
      001C2D A1 8A            [ 1] 1345 	cp a,#TK_XOR
      001C2F 27 07            [ 1] 1346 	jreq 2$ 
      001C31                       1347 	_unget_token 
      001C31 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001C36 20 55            [ 2] 1348 	jra 8$ 
      001C38 6B 02            [ 1] 1349 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001C3A CD 1B CC         [ 4] 1350 	call and_cond
      001C3D A1 84            [ 1] 1351 	cp a,#TK_INTGR 
      001C3F 27 03            [ 1] 1352 	jreq 3$
      001C41 CC 16 94         [ 2] 1353 	jp syntax_error 
      001C44                       1354 3$:	 
      001C44                       1355 	_xpop  ; rigth arg 
      001C44 90 F6            [ 1]    1     ld a,(y)
      001C46 93               [ 1]    2     ldw x,y 
      001C47 EE 01            [ 2]    3     ldw x,(1,x)
      001C49 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C4D C7 00 0C         [ 1] 1356 	ld acc24,a 
      001C50 CF 00 0D         [ 2] 1357 	ldw acc16,x 
      001C53                       1358 	_xpop  ; left arg  
      001C53 90 F6            [ 1]    1     ld a,(y)
      001C55 93               [ 1]    2     ldw x,y 
      001C56 EE 01            [ 2]    3     ldw x,(1,x)
      001C58 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C5C 6B 01            [ 1] 1359 	ld (ATMP,sp),a 
      001C5E 7B 02            [ 1] 1360 	ld a,(OP,sp)
      001C60 A1 8A            [ 1] 1361 	cp a,#TK_XOR 
      001C62 27 10            [ 1] 1362 	jreq 5$ 
      001C64                       1363 4$: ; A:X OR acc24   
      001C64 7B 01            [ 1] 1364 	ld a,(ATMP,sp)
      001C66 CA 00 0C         [ 1] 1365 	or a,acc24 
      001C69 02               [ 1] 1366 	rlwa x 
      001C6A CA 00 0D         [ 1] 1367 	or a,acc16 
      001C6D 02               [ 1] 1368 	rlwa x 
      001C6E CA 00 0E         [ 1] 1369 	or a,acc8 
      001C71 02               [ 1] 1370 	rlwa x 
      001C72 20 0E            [ 2] 1371 	jra 6$  
      001C74                       1372 5$: ; A:X XOR acc24 
      001C74 7B 01            [ 1] 1373 	ld a,(ATMP,sp)
      001C76 C8 00 0C         [ 1] 1374 	xor a,acc24 
      001C79 02               [ 1] 1375 	rlwa x 
      001C7A C8 00 0D         [ 1] 1376 	xor a,acc16 
      001C7D 02               [ 1] 1377 	rlwa x 
      001C7E C8 00 0E         [ 1] 1378 	xor a,acc8 
      001C81 02               [ 1] 1379 	rlwa x 
      001C82                       1380 6$: _xpush
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001C82 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C86 90 F7            [ 1]    2     ld (y),a 
      001C88 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C8B 20 99            [ 2] 1381 	jra 1$ 
      001C8D A6 84            [ 1] 1382 8$:	ld a,#TK_INTGR 
      001C8F                       1383 9$:	_drop VSIZE 
      001C8F 5B 02            [ 2]    1     addw sp,#VSIZE 
      001C91 81               [ 4] 1384 	ret 
                                   1385 
                                   1386 
                                   1387 ;--------------------------------------------
                                   1388 ; BASIC: HEX 
                                   1389 ; select hexadecimal base for integer print
                                   1390 ;---------------------------------------------
      001C92                       1391 hex_base:
      001C92 35 10 00 0A      [ 1] 1392 	mov base,#16 
      001C96 81               [ 4] 1393 	ret 
                                   1394 
                                   1395 ;--------------------------------------------
                                   1396 ; BASIC: DEC 
                                   1397 ; select decimal base for integer print
                                   1398 ;---------------------------------------------
      001C97                       1399 dec_base:
      001C97 35 0A 00 0A      [ 1] 1400 	mov base,#10
      001C9B 81               [ 4] 1401 	ret 
                                   1402 
                                   1403 ;------------------------
                                   1404 ; BASIC: FREE 
                                   1405 ; return free size in RAM 
                                   1406 ; output:
                                   1407 ;   A:x		size 
                                   1408 ;--------------------------
      001C9C                       1409 free:
      001C9C 4F               [ 1] 1410 	clr a 
      001C9D AE 16 68         [ 2] 1411 	ldw x,#tib 
      001CA0 72 B0 00 32      [ 2] 1412 	subw x,dvar_end 
      001CA4 81               [ 4] 1413 	ret 
                                   1414 
                                   1415 ;------------------------------
                                   1416 ; BASIC: SIZE 
                                   1417 ; command that print 
                                   1418 ; program start addres and size 
                                   1419 ;------------------------------
      001CA5                       1420 cmd_size:
      001CA5 3B 00 0A         [ 1] 1421 	push base 
      001CA8 AE 1E 92         [ 2] 1422 	ldw x,#PROG_ADDR 
      001CAB CD 09 5C         [ 4] 1423 	call puts 
      001CAE CE 00 1B         [ 2] 1424 	ldw x,txtbgn     
      001CB1 35 10 00 0A      [ 1] 1425 	mov base,#16 
      001CB5 CD 18 43         [ 4] 1426 	call prt_i16
      001CB8 32 00 0A         [ 1] 1427 	pop base 
      001CBB AE 1E A4         [ 2] 1428 	ldw x,#PROG_SIZE 
      001CBE CD 09 5C         [ 4] 1429 	call puts 
      001CC1 CE 00 1D         [ 2] 1430 	ldw x,txtend 
      001CC4 72 B0 00 1B      [ 2] 1431 	subw x,txtbgn 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001CC8 CD 18 43         [ 4] 1432 	call prt_i16
      001CCB AE 1E B5         [ 2] 1433 	ldw x,#STR_BYTES 
      001CCE CD 09 5C         [ 4] 1434 	call puts  
      001CD1 81               [ 4] 1435 	ret 
                                   1436 
                                   1437 
                                   1438 ;------------------------
                                   1439 ; BASIC: UBOUND  
                                   1440 ; return array variable size 
                                   1441 ; and set 'array_size' variable 
                                   1442 ; output:
                                   1443 ;   A:X 	array_size
                                   1444 ;--------------------------
      001CD2                       1445 ubound:
      001CD2 CD 1C 9C         [ 4] 1446 	call free 
      001CD5 A6 03            [ 1] 1447 	ld a,#CELL_SIZE 
      001CD7 62               [ 2] 1448 	div x,a 
      001CD8 CF 00 20         [ 2] 1449 	ldw array_size,x
      001CDB 4F               [ 1] 1450 	clr a 
      001CDC 81               [ 4] 1451 	ret 
                                   1452 
                                   1453 ;-----------------------------
                                   1454 ; BASIC: LET var=expr 
                                   1455 ; variable assignement 
                                   1456 ; output:
                                   1457 ;   A 		TK_NONE 
                                   1458 ;-----------------------------
      001CDD                       1459 let::
      001CDD CD 17 FB         [ 4] 1460 	call next_token 
      001CE0 A1 85            [ 1] 1461 	cp a,#TK_VAR 
      001CE2 27 0C            [ 1] 1462 	jreq let_var
      001CE4 A1 05            [ 1] 1463 	cp a,#TK_ARRAY 
      001CE6 27 03            [ 1] 1464 	jreq  let_array
      001CE8 CC 16 94         [ 2] 1465 	jp syntax_error
      001CEB                       1466 let_array:
      001CEB CD 19 DF         [ 4] 1467 	call get_array_element
      001CEE 20 03            [ 2] 1468 	jra let_eval 
      001CF0                       1469 let_var:
      001CF0 CD 18 23         [ 4] 1470 	call get_addr
      001CF3                       1471 let_eval:
      001CF3 CF 00 19         [ 2] 1472 	ldw ptr16,x  ; variable address 
      001CF6 CD 17 FB         [ 4] 1473 	call next_token 
      001CF9 A1 32            [ 1] 1474 	cp a,#TK_EQUAL
      001CFB 27 03            [ 1] 1475 	jreq 1$
      001CFD CC 16 94         [ 2] 1476 	jp syntax_error
      001D00                       1477 1$:	
      001D00 CD 1C 1E         [ 4] 1478 	call condition   
      001D03 A1 84            [ 1] 1479 	cp a,#TK_INTGR 
      001D05 27 03            [ 1] 1480 	jreq 2$
      001D07 CC 16 94         [ 2] 1481 	jp syntax_error
      001D0A                       1482 2$:	
      001D0A                       1483 	_xpop ; value 
      001D0A 90 F6            [ 1]    1     ld a,(y)
      001D0C 93               [ 1]    2     ldw x,y 
      001D0D EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001D0F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001D13                       1484 3$:
      001D13 72 C7 00 19      [ 4] 1485 	ld [ptr16],a
      001D17 72 5C 00 1A      [ 1] 1486 	inc ptr8  
      001D1B 72 CF 00 19      [ 5] 1487 	ldw [ptr16],x 
      001D1F 81               [ 4] 1488 	ret 
                                   1489 
                                   1490 
                                   1491 ;--------------------------
                                   1492 ; return constant/dvar value 
                                   1493 ; from it's record address
                                   1494 ; input:
                                   1495 ;	X	*const record 
                                   1496 ; output:
                                   1497 ;   A:X   const  value
                                   1498 ;--------------------------
      001D20                       1499 get_value: ; -- i 
      001D20 F6               [ 1] 1500 	ld a,(x) ; record size 
      001D21 A4 0F            [ 1] 1501 	and a,#NAME_MAX_LEN
      001D23 A0 03            [ 1] 1502 	sub a,#CELL_SIZE ; * value 
      001D25 88               [ 1] 1503 	push a 
      001D26 4B 00            [ 1] 1504 	push #0 
      001D28 72 FB 01         [ 2] 1505 	addw x,(1,sp)
      001D2B F6               [ 1] 1506 	ld a,(x)
      001D2C EE 01            [ 2] 1507 	ldw x,(1,x)
      001D2E                       1508 	_drop 2
      001D2E 5B 02            [ 2]    1     addw sp,#2 
      001D30 81               [ 4] 1509 	ret 
                                   1510 
                                   1511 
                                   1512 ;--------------------------
                                   1513 ; BASIC: EEFREE 
                                   1514 ; eeprom_free 
                                   1515 ; search end of data  
                                   1516 ; in EEPROM 
                                   1517 ; input:
                                   1518 ;    none 
                                   1519 ; output:
                                   1520 ;    A:X     address free
                                   1521 ;-------------------------
      001D31                       1522 func_eefree:
      001D31 AE 40 00         [ 2] 1523 	ldw x,#EEPROM_BASE 
      001D34 35 08 00 0E      [ 1] 1524 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001D38 A3 47 F8         [ 2] 1525     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D3B 24 17            [ 1] 1526 	jruge 8$ ; no free space 
      001D3D F6               [ 1] 1527 2$: ld a,(x)
      001D3E 26 0C            [ 1] 1528 	jrne 3$
      001D40 5C               [ 1] 1529 	incw x 
      001D41 72 5A 00 0E      [ 1] 1530 	dec acc8 
      001D45 26 F6            [ 1] 1531 	jrne 2$
      001D47 1D 00 08         [ 2] 1532 	subw x,#8 
      001D4A 20 09            [ 2] 1533 	jra 9$  
      001D4C F6               [ 1] 1534 3$: ld a,(x)
      001D4D 5C               [ 1] 1535 	incw x
      001D4E 4D               [ 1] 1536 	tnz a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001D4F 26 FB            [ 1] 1537 	jrne 3$
      001D51 5A               [ 2] 1538 	decw x   
      001D52 20 E0            [ 2] 1539 	jra 1$ 
      001D54 5F               [ 1] 1540 8$: clrw x ; no free space 
      001D55 4F               [ 1] 1541 9$: clr a 
      001D56 CF 00 24         [ 2] 1542 	ldw free_eeprom,x ; save in system variable 
      001D59 81               [ 4] 1543 	ret 
                                   1544 
                           000005  1545 REC_XTRA_BYTES=5 
                                   1546 ;--------------------------
                                   1547 ; search constant/dim_var name 
                                   1548 ; format of record  
                                   1549 ;   .byte record length 
                                   1550 ;         = strlen(name)+5 
                                   1551 ;   .asciz name (variable length)
                                   1552 ;   .int24 value (3 bytes )
                                   1553 ; a constant record use 7+ bytes
                                   1554 ; constants are saved in EEPROM  
                                   1555 ; input:
                                   1556 ;    A     record_len 
                                   1557 ;    X     *name
                                   1558 ; output:
                                   1559 ;    X     address|0
                                   1560 ; use:
                                   1561 ;   A,Y, acc16 
                                   1562 ;-------------------------
                           000001  1563 	NAMEPTR=1 ; target name pointer 
                           000003  1564 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
                           000005  1565 	RECLEN=5  ; record length of target
                           000007  1566 	LIMIT=7   ; search area limit 
                           000008  1567 	VSIZE=8  
      001D5A                       1568 search_name:
      001D5A 90 89            [ 2] 1569 	pushw y 
      001D5C                       1570 	_vars VSIZE
      001D5C 52 08            [ 2]    1     sub sp,#VSIZE 
      001D5E 72 5F 00 0D      [ 1] 1571 	clr acc16 
      001D62 6B 05            [ 1] 1572 	ld (RECLEN,sp),a    
      001D64 1F 01            [ 2] 1573 	ldw (NAMEPTR,sp),x
      001D66 CE 00 32         [ 2] 1574 	ldw x,dvar_end 
      001D69 1F 07            [ 2] 1575 	ldw (LIMIT,sp),x 
      001D6B 90 CE 00 30      [ 2] 1576 	ldw y,dvar_bgn
      001D6F 17 03            [ 2] 1577 1$:	ldw (WLKPTR,sp),y
      001D71 93               [ 1] 1578 	ldw x,y 
      001D72 13 07            [ 2] 1579 	cpw x, (LIMIT,sp) 
      001D74 24 20            [ 1] 1580 	jruge 7$ ; no match found 
      001D76 90 F6            [ 1] 1581 	ld a,(y)
      001D78 A4 0F            [ 1] 1582 	and a,#NAME_MAX_LEN
      001D7A 11 05            [ 1] 1583 	cp a,(RECLEN,sp)
      001D7C 26 09            [ 1] 1584 	jrne 2$ 
      001D7E 90 5C            [ 1] 1585 	incw y 
      001D80 1E 01            [ 2] 1586 	ldw x,(NAMEPTR,sp)
      001D82 CD 13 9D         [ 4] 1587 	call strcmp
      001D85 26 13            [ 1] 1588 	jrne 8$ ; match found 
      001D87                       1589 2$: ; skip this one 	
      001D87 16 03            [ 2] 1590 	ldW Y,(WLKPTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001D89 90 F6            [ 1] 1591 	ld a,(y)
      001D8B A4 0F            [ 1] 1592 	and a,#NAME_MAX_LEN 
      001D8D C7 00 0E         [ 1] 1593 	ld acc8,a 
      001D90 72 B9 00 0D      [ 2] 1594 	addw y,acc16 
      001D94 20 D9            [ 2] 1595 	jra 1$  
      001D96                       1596 7$: ; no match found 
      001D96 0F 03            [ 1] 1597 	clr (WLKPTR,sp)
      001D98 0F 04            [ 1] 1598 	clr (WLKPTR+1,sp)
      001D9A                       1599 8$: ; match found 
      001D9A 1E 03            [ 2] 1600 	ldw x,(WLKPTR,sp) ; record address 
      001D9C                       1601 9$:	_DROP VSIZE
      001D9C 5B 08            [ 2]    1     addw sp,#VSIZE 
      001D9E 90 85            [ 2] 1602 	popw y 
      001DA0 81               [ 4] 1603 	 ret 
                                   1604 
                                   1605 ;--------------------------------------------
                                   1606 ; BASIC: CONST name=value [, name=value]*
                                   1607 ; define constant(s) saved in EEPROM
                                   1608 ; share most of his code with cmd_dim 
                                   1609 ;--------------------------------------------
                           000001  1610 	VAR_NAME=1 
                           000003  1611 	REC_LEN=3
                           000005  1612 	RONLY=5
                           000005  1613 	VSIZE=5
      001DA1                       1614 cmd_const:
      001DA1 72 00 00 22 05   [ 2] 1615 	btjt flags,#FRUN,0$
      001DA6 A6 06            [ 1] 1616 	ld a,#ERR_RUN_ONLY
      001DA8 CC 16 96         [ 2] 1617 	jp tb_error 
      001DAB                       1618 0$: 
      001DAB                       1619 	_vars VSIZE 
      001DAB 52 05            [ 2]    1     sub sp,#VSIZE 
      001DAD A6 80            [ 1] 1620 	ld a,#128 
      001DAF 6B 05            [ 1] 1621 	ld (RONLY,sp),a 
      001DB1 0F 03            [ 1] 1622 	clr (REC_LEN,sp)
      001DB3 20 10            [ 2] 1623 	jra cmd_dim2 ; shared code with cmd_dim  
                                   1624 
                                   1625 ;---------------------------------
                                   1626 ; BASIC: DIM var_name [var_name]* 
                                   1627 ; create named variables at end 
                                   1628 ; of BASIC program. 
                                   1629 ; These variables are initialized 
                                   1630 ; to 0. 
                                   1631 ; record format same ast CONST 
                                   1632 ; but r/w because stored in RAM 
                                   1633 ;---------------------------------
      001DB5                       1634 cmd_dim:
      001DB5 72 00 00 22 05   [ 2] 1635 	btjt flags,#FRUN,cmd_dim1
      001DBA A6 06            [ 1] 1636 	ld a,#ERR_RUN_ONLY
      001DBC CC 16 96         [ 2] 1637 	jp tb_error 
      001DBF                       1638 cmd_dim1:	
      001DBF                       1639 	_vars VSIZE
      001DBF 52 05            [ 2]    1     sub sp,#VSIZE 
      001DC1 0F 03            [ 1] 1640 	clr (REC_LEN,sp )
      001DC3 0F 05            [ 1] 1641 	clr (RONLY,sp)
      001DC5                       1642 cmd_dim2: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001DC5 CD 17 FB         [ 4] 1643 0$:	call next_token 
      001DC8 A1 03            [ 1] 1644 	cp a,#TK_LABEL  
      001DCA 27 03            [ 1] 1645 	jreq 1$ 
      001DCC CC 16 94         [ 2] 1646 	jp syntax_error 
      001DCF 1F 01            [ 2] 1647 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001DD1 CD 13 92         [ 4] 1648 	call strlen
      001DD4 AB 05            [ 1] 1649 	add a,#REC_XTRA_BYTES
      001DD6 6B 04            [ 1] 1650 	ld (REC_LEN+1,sp),a
      001DD8 CD 18 14         [ 4] 1651 	call skip_string 
      001DDB 7B 04            [ 1] 1652 	ld a,(REC_LEN+1,sp)
      001DDD 1E 01            [ 2] 1653 	ldw x,(VAR_NAME,sp) 
      001DDF CD 1D 5A         [ 4] 1654 	call search_name  
      001DE2 5D               [ 2] 1655 	tnzw x 
      001DE3 27 05            [ 1] 1656 	jreq 2$
      001DE5 A6 08            [ 1] 1657 	ld a,#ERR_DUPLICATE
      001DE7 CC 16 96         [ 2] 1658 	jp tb_error  
      001DEA CE 00 32         [ 2] 1659 2$:	ldw x,dvar_end 
      001DED 7B 04            [ 1] 1660 	ld a,(REC_LEN+1,sp)
      001DEF 1A 05            [ 1] 1661 	or a,(RONLY,sp)
      001DF1 F7               [ 1] 1662 	ld (x),a 
      001DF2 5C               [ 1] 1663 	incw x 
      001DF3 90 89            [ 2] 1664 	pushw y 
      001DF5 16 03            [ 2] 1665 	ldw y,(VAR_NAME+2,sp)
      001DF7 CD 13 AE         [ 4] 1666 	call strcpy
      001DFA 90 85            [ 2] 1667 	popw y 
      001DFC 5A               [ 2] 1668 	decw x
      001DFD 72 FB 03         [ 2] 1669 	addw x,(REC_LEN,sp)
      001E00 CF 00 32         [ 2] 1670 	ldw dvar_end,x 
      001E03 1D 00 03         [ 2] 1671 	subw x,#CELL_SIZE  
      001E06 7F               [ 1] 1672 	clr (x)
      001E07 6F 01            [ 1] 1673 	clr (1,x)  
      001E09 6F 02            [ 1] 1674 	clr (2,x)
      001E0B CD 17 FB         [ 4] 1675 4$: call next_token 
      001E0E A1 08            [ 1] 1676 	cp a,#TK_COMMA 
      001E10 27 B3            [ 1] 1677 	jreq 0$ 
      001E12 A1 32            [ 1] 1678 	cp a,#TK_EQUAL 
      001E14 26 2A            [ 1] 1679 	jrne 8$
                                   1680 ; initialize variable 
      001E16 CD 1C 1E         [ 4] 1681 	call condition 
      001E19 A1 84            [ 1] 1682 	cp a,#TK_INTGR
      001E1B 27 03            [ 1] 1683 	jreq 5$
      001E1D CC 16 94         [ 2] 1684 	jp syntax_error
      001E20 CE 00 32         [ 2] 1685 5$: ldw x,dvar_end 
      001E23 1D 00 03         [ 2] 1686 	subw x,#CELL_SIZE 
      001E26 CF 00 19         [ 2] 1687 	ldw ptr16,x 
      001E29                       1688 	_xpop 
      001E29 90 F6            [ 1]    1     ld a,(y)
      001E2B 93               [ 1]    2     ldw x,y 
      001E2C EE 01            [ 2]    3     ldw x,(1,x)
      001E2E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E32 72 C7 00 19      [ 4] 1689 	ld [ptr16],a 
      001E36 72 5C 00 1A      [ 1] 1690 	inc ptr8 
      001E3A 72 CF 00 19      [ 5] 1691 	ldw [ptr16],x 
      001E3E 20 CB            [ 2] 1692 	jra 4$ 
      001E40                       1693 8$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001E40                       1694 	_unget_token 	
      001E40 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001E45                       1695 	_drop VSIZE 
      001E45 5B 05            [ 2]    1     addw sp,#VSIZE 
      001E47 CD 1C D2         [ 4] 1696 	call ubound 
      001E4A 81               [ 4] 1697 	ret 
                                   1698 
                                   1699 
                                   1700 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1701 ; return program size 
                                   1702 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E4B                       1703 prog_size:
      001E4B CE 00 1D         [ 2] 1704 	ldw x,txtend 
      001E4E 72 B0 00 1B      [ 2] 1705 	subw x,txtbgn 
      001E52 81               [ 4] 1706 	ret 
                                   1707 
                                   1708 ;----------------------------
                                   1709 ; print program information 
                                   1710 ;---------------------------
      001E53                       1711 program_info: 
      001E53 AE 1E 92         [ 2] 1712 	ldw x,#PROG_ADDR 
      001E56 CD 09 5C         [ 4] 1713 	call puts 
      001E59 CE 00 1B         [ 2] 1714 	ldw x,txtbgn 
      001E5C 35 10 00 0A      [ 1] 1715 	mov base,#16 
      001E60 CD 18 43         [ 4] 1716 	call prt_i16
      001E63 35 0A 00 0A      [ 1] 1717 	mov base,#10  
      001E67 AE 1E A4         [ 2] 1718 	ldw x,#PROG_SIZE
      001E6A CD 09 5C         [ 4] 1719 	call puts 
      001E6D CD 1E 4B         [ 4] 1720 	call prog_size 
      001E70 CD 18 43         [ 4] 1721 	call prt_i16 
      001E73 AE 1E B5         [ 2] 1722 	ldw x,#STR_BYTES 
      001E76 CD 09 5C         [ 4] 1723 	call puts
      001E79 CE 00 1B         [ 2] 1724 	ldw x,txtbgn
      001E7C A3 38 84         [ 2] 1725 	cpw x,#app 
      001E7F 25 05            [ 1] 1726 	jrult 2$
      001E81 AE 1E BC         [ 2] 1727 	ldw x,#FLASH_MEM 
      001E84 20 03            [ 2] 1728 	jra 3$
      001E86 AE 1E CD         [ 2] 1729 2$: ldw x,#RAM_MEM 	 
      001E89 CD 09 5C         [ 4] 1730 3$:	call puts 
      001E8C A6 0D            [ 1] 1731 	ld a,#CR 
      001E8E CD 08 FF         [ 4] 1732 	call putc
      001E91 81               [ 4] 1733 	ret 
                                   1734 
      001E92 70 72 6F 67 72 61 6D  1735 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001EA4 2C 20 70 72 6F 67 72  1736 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001EB5 20 62 79 74 65 73 00  1737 STR_BYTES: .asciz " bytes" 
      001EBC 20 69 6E 20 46 4C 41  1738 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001ECD 20 69 6E 20 52 41 4D  1739 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



             00
                                   1740 
                                   1741 
                                   1742 ;----------------------------
                                   1743 ; BASIC: LIST [[start][-end]]
                                   1744 ; list program lines 
                                   1745 ; form start to end 
                                   1746 ; if empty argument list then 
                                   1747 ; list all.
                                   1748 ;----------------------------
                           000001  1749 	FIRST=1
                           000003  1750 	LAST=3 
                           000005  1751 	LN_PTR=5
                           000006  1752 	VSIZE=6 
      001EDC                       1753 list:
      001EDC 72 01 00 22 05   [ 2] 1754 	btjf flags,#FRUN,0$
      001EE1 A6 07            [ 1] 1755 	ld a,#ERR_CMD_ONLY
      001EE3 CC 16 96         [ 2] 1756 	jp tb_error
      001EE6                       1757 0$:	 
      001EE6 CD 1E 4B         [ 4] 1758 	call prog_size 
      001EE9 22 01            [ 1] 1759 	jrugt 3$
      001EEB 81               [ 4] 1760 	ret 
      001EEC                       1761 3$: _vars VSIZE
      001EEC 52 06            [ 2]    1     sub sp,#VSIZE 
      001EEE CE 00 1B         [ 2] 1762 	ldw x,txtbgn 
      001EF1 1F 05            [ 2] 1763 	ldw (LN_PTR,sp),x 
      001EF3 FE               [ 2] 1764 	ldw x,(x) 
      001EF4 1F 01            [ 2] 1765 	ldw (FIRST,sp),x ; list from first line 
      001EF6 AE 7F FF         [ 2] 1766 	ldw x,#MAX_LINENO ; biggest line number 
      001EF9 1F 03            [ 2] 1767 	ldw (LAST,sp),x 
      001EFB CD 17 FB         [ 4] 1768 	call next_token 
      001EFE A1 84            [ 1] 1769 	cp a,#TK_INTGR
      001F00 27 0B            [ 1] 1770 	jreq start_from 
      001F02                       1771 is_minus: 	
      001F02 A1 11            [ 1] 1772 	cp a,#TK_MINUS 
      001F04 27 27            [ 1] 1773 	jreq end_at_line
      001F06                       1774 	_unget_token 
      001F06 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001F0B 20 33            [ 2] 1775 	jra list_loop 
      001F0D                       1776 start_from:	 
      001F0D CD 18 2D         [ 4] 1777 	call get_int24
      001F10 1F 01            [ 2] 1778 	ldw (FIRST,sp),x	
      001F12                       1779 lines_skip:
      001F12 90 89            [ 2] 1780 	pushw y 
      001F14 4F               [ 1] 1781 	clr a 
      001F15 CD 0C 45         [ 4] 1782 	call search_lineno 
      001F18 5D               [ 2] 1783 	tnzw x 
      001F19 26 01            [ 1] 1784 	jrne 1$
      001F1B 93               [ 1] 1785 	ldw x,y 
      001F1C 90 85            [ 2] 1786 1$:	popw y 
      001F1E 1F 05            [ 2] 1787 	ldw (LN_PTR,sp),x 
      001F20 CD 17 FB         [ 4] 1788 	call next_token 
      001F23 A1 11            [ 1] 1789 	cp a,#TK_MINUS 
      001F25 27 06            [ 1] 1790 	jreq end_at_line 
      001F27 1E 01            [ 2] 1791 	ldw x,(FIRST,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001F29 1F 03            [ 2] 1792 	ldw (LAST,sp),x 
      001F2B 20 13            [ 2] 1793 	jra list_loop 
      001F2D                       1794 end_at_line:
                                   1795 ; expect ending line# 
      001F2D CD 17 FB         [ 4] 1796     call next_token 
      001F30 A1 84            [ 1] 1797 	cp a,#TK_INTGR
      001F32 27 07            [ 1] 1798 	jreq 1$
      001F34                       1799 	_unget_token 
      001F34 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001F39 20 05            [ 2] 1800 	jra list_loop
      001F3B                       1801 1$:
      001F3B CD 18 2D         [ 4] 1802 	call get_int24 
      001F3E 1F 03            [ 2] 1803 	ldw (LAST,sp),x 
                                   1804 ; print loop
      001F40                       1805 list_loop:
      001F40 1E 05            [ 2] 1806 	ldw x,(LN_PTR,sp)
      001F42 E6 02            [ 1] 1807 	ld a,(2,x) 
      001F44 CD 1F B1         [ 4] 1808 	call prt_basic_line
      001F47 1E 05            [ 2] 1809 	ldw x,(LN_PTR,sp)
      001F49 E6 02            [ 1] 1810 	ld a,(2,x)
      001F4B C7 00 0E         [ 1] 1811 	ld acc8,a 
      001F4E 72 5F 00 0D      [ 1] 1812 	clr acc16 
      001F52 72 BB 00 0D      [ 2] 1813 	addw x,acc16
      001F56 C3 00 1D         [ 2] 1814 	cpw x,txtend 
      001F59 2A 07            [ 1] 1815 	jrpl list_exit
      001F5B 1F 05            [ 2] 1816 	ldw (LN_PTR,sp),x
      001F5D FE               [ 2] 1817 	ldw x,(x)
      001F5E 13 03            [ 2] 1818 	cpw x,(LAST,sp)  
      001F60 2D DE            [ 1] 1819 	jrsle list_loop
      001F62                       1820 list_exit:
      001F62 55 00 02 00 01   [ 1] 1821 	mov in,count 
      001F67 AE 16 B8         [ 2] 1822 	ldw x,#pad 
      001F6A CF 00 04         [ 2] 1823 	ldw basicptr,x 
      001F6D                       1824 	_drop VSIZE 
      001F6D 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F6F CD 1E 53         [ 4] 1825 	call program_info 
      001F72 81               [ 4] 1826 	ret
                                   1827 
                                   1828 
                                   1829 ;--------------------------
                                   1830 ; BASIC: EDIT label 
                                   1831 ;  copy program in FLASH 
                                   1832 ;  to RAM for edition 
                                   1833 ;-------------------------
      001F73                       1834 cmd_edit:
      001F73 A6 03            [ 1] 1835 	ld a,#TK_LABEL 
      001F75 CD 19 B1         [ 4] 1836 	call expect  
      001F78 89               [ 2] 1837 	pushw x 
      001F79 CD 18 14         [ 4] 1838 	call skip_string
      001F7C 85               [ 2] 1839 	popw x 
      001F7D CD 31 FA         [ 4] 1840 	call search_program 
      001F80 26 06            [ 1] 1841     jrne 1$ 
      001F82 AE 00 12         [ 2] 1842 	ldw x,#ERR_NO_PROGRAM
      001F85 CC 16 96         [ 2] 1843 	jp tb_error 
      001F88 90 89            [ 2] 1844 1$: pushw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001F8A 90 93            [ 1] 1845 	ldw y,x ; source address 
      001F8C 1D 00 04         [ 2] 1846 	subw x,#4
      001F8F EE 02            [ 2] 1847 	ldw x,(2,x) ; program size 
      001F91 1C 00 04         [ 2] 1848 	addw x,#4 
      001F94 CF 00 0D         [ 2] 1849 	ldw acc16,x  ; bytes to copy 
      001F97 AE 00 8C         [ 2] 1850 	ldw x,#rsign ; destination address 
      001F9A 72 A2 00 04      [ 2] 1851 	subw y,#4 
      001F9E CD 13 BE         [ 4] 1852 	call move  
      001FA1 AE 00 90         [ 2] 1853 	ldw x,#free_ram 
      001FA4 CF 00 1B         [ 2] 1854 	ldw txtbgn,x 
      001FA7 72 BB 00 8E      [ 2] 1855 	addw x,rsize  
      001FAB CF 00 1D         [ 2] 1856 	ldw txtend,x
      001FAE 90 85            [ 2] 1857 	popw y  
      001FB0 81               [ 4] 1858 	ret 
                                   1859 
                                   1860 ;--------------------------
                                   1861 ; decompile line from token list
                                   1862 ; and print it. 
                                   1863 ; input:
                                   1864 ;   A       stop at this position 
                                   1865 ;   X 		pointer at line
                                   1866 ; output:
                                   1867 ;   none 
                                   1868 ;--------------------------	
      001FB1                       1869 prt_basic_line:
      001FB1 90 89            [ 2] 1870 	pushw y 
      001FB3 C7 00 02         [ 1] 1871 	ld count,a 
      001FB6 E6 02            [ 1] 1872 	ld a,(2,x)
      001FB8 C1 00 02         [ 1] 1873 	cp a,count 
      001FBB 2A 03            [ 1] 1874 	jrpl 1$ 
      001FBD C7 00 02         [ 1] 1875 	ld count,a 
      001FC0 CF 00 04         [ 2] 1876 1$:	ldw basicptr,x 
      001FC3 90 AE 16 68      [ 2] 1877 	ldw y,#tib  
      001FC7 CD 11 AE         [ 4] 1878 	call decompile 
      001FCA CD 09 5C         [ 4] 1879 	call puts 
      001FCD A6 0D            [ 1] 1880 	ld a,#CR 
      001FCF CD 08 FF         [ 4] 1881 	call putc 
      001FD2 90 85            [ 2] 1882 	popw y 
      001FD4 81               [ 4] 1883 	ret 
                                   1884 
                                   1885 
                                   1886 ;---------------------------------
                                   1887 ; BASIC: PRINT|? arg_list 
                                   1888 ; print values from argument list
                                   1889 ;----------------------------------
                           000001  1890 	CCOMMA=1
                           000001  1891 	VSIZE=1
      001FD5                       1892 print:
      001FD5                       1893 	_vars VSIZE 
      001FD5 52 01            [ 2]    1     sub sp,#VSIZE 
      001FD7                       1894 reset_comma:
      001FD7 0F 01            [ 1] 1895 	clr (CCOMMA,sp)
      001FD9                       1896 prt_loop:
      001FD9 CD 17 FB         [ 4] 1897 	call next_token
      001FDC A1 02            [ 1] 1898 	cp a,#CMD_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001FDE 25 08            [ 1] 1899 	jrult 0$
      001FE0 A1 0A            [ 1] 1900 	cp a,#TK_COLON 
      001FE2 27 04            [ 1] 1901 	jreq 0$
      001FE4 A1 80            [ 1] 1902 	cp a,#TK_CMD
      001FE6 26 07            [ 1] 1903 	jrne 10$
      001FE8                       1904 0$:
      001FE8                       1905 	_unget_token 
      001FE8 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001FED 20 63            [ 2] 1906 	jra 8$ 
      001FEF                       1907 10$:	
      001FEF A1 02            [ 1] 1908 	cp a,#TK_QSTR
      001FF1 27 12            [ 1] 1909 	jreq 1$
      001FF3 A1 04            [ 1] 1910 	cp a,#TK_CHAR 
      001FF5 27 1B            [ 1] 1911 	jreq 2$ 
      001FF7 A1 82            [ 1] 1912 	cp a,#TK_CFUNC 
      001FF9 27 1F            [ 1] 1913 	jreq 3$
      001FFB A1 08            [ 1] 1914 	cp a,#TK_COMMA 
      001FFD 27 2A            [ 1] 1915 	jreq 4$
      001FFF A1 09            [ 1] 1916 	cp a,#TK_SHARP 
      002001 27 2A            [ 1] 1917 	jreq 5$
      002003 20 3D            [ 2] 1918 	jra 7$ 
      002005                       1919 1$:	; print string 
      002005 CD 09 5C         [ 4] 1920 	call puts
      002008 5C               [ 1] 1921 	incw x
      002009 72 B0 00 04      [ 2] 1922 	subw x,basicptr 
      00200D CF 00 00         [ 2] 1923 	ldw in.w,x  
      002010 20 C5            [ 2] 1924 	jra reset_comma
      002012                       1925 2$:	; print character 
      002012 CD 18 3D         [ 4] 1926 	call get_char 
      002015 CD 08 FF         [ 4] 1927 	call putc 
      002018 20 BD            [ 2] 1928 	jra reset_comma 
      00201A                       1929 3$: ; print character function value  	
      00201A                       1930 	_get_code_addr 
      00201A FE               [ 2]    1         ldw x,(x)
      00201B 72 5C 00 01      [ 1]    2         inc in 
      00201F 72 5C 00 01      [ 1]    3         inc in 
      002023 FD               [ 4] 1931 	call (x)
      002024 CD 08 FF         [ 4] 1932 	call putc
      002027 20 AE            [ 2] 1933 	jra reset_comma 
      002029                       1934 4$: ; set comma state 
      002029 03 01            [ 1] 1935 	cpl (CCOMMA,sp)
      00202B 20 AC            [ 2] 1936 	jra prt_loop   
      00202D                       1937 5$: ; # character must be followed by an integer   
      00202D CD 17 FB         [ 4] 1938 	call next_token
      002030 A1 84            [ 1] 1939 	cp a,#TK_INTGR 
      002032 27 03            [ 1] 1940 	jreq 6$
      002034 CC 16 94         [ 2] 1941 	jp syntax_error 
      002037                       1942 6$: ; set tab width
      002037 CD 18 2D         [ 4] 1943 	call get_int24 
      00203A 9F               [ 1] 1944 	ld a,xl 
      00203B A4 0F            [ 1] 1945 	and a,#15 
      00203D C7 00 23         [ 1] 1946 	ld tab_width,a 
      002040 20 95            [ 2] 1947 	jra reset_comma 
      002042                       1948 7$:	
      002042                       1949 	_unget_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002042 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002047 CD 1C 1E         [ 4] 1950 	call condition
      00204A 4D               [ 1] 1951 	tnz a 
      00204B 27 05            [ 1] 1952 	jreq 8$    
      00204D CD 18 68         [ 4] 1953     call print_top
      002050 20 85            [ 2] 1954 	jra reset_comma 
      002052                       1955 8$:
      002052 0D 01            [ 1] 1956 	tnz (CCOMMA,sp)
      002054 26 05            [ 1] 1957 	jrne 9$
      002056 A6 0D            [ 1] 1958 	ld a,#CR 
      002058 CD 08 FF         [ 4] 1959     call putc 
      00205B                       1960 9$:	_drop VSIZE 
      00205B 5B 01            [ 2]    1     addw sp,#VSIZE 
      00205D 81               [ 4] 1961 	ret 
                                   1962 
                                   1963 ;----------------------
                                   1964 ; 'save_context' and
                                   1965 ; 'rest_context' must be 
                                   1966 ; called at the same 
                                   1967 ; call stack depth 
                                   1968 ; i.e. SP must have the 
                                   1969 ; save value at  
                                   1970 ; entry point of both 
                                   1971 ; routine. 
                                   1972 ;---------------------
                           000004  1973 	CTXT_SIZE=4 ; size of saved data 
                                   1974 ;--------------------
                                   1975 ; save current BASIC
                                   1976 ; interpreter context 
                                   1977 ; on stack 
                                   1978 ;--------------------
      00205E                       1979 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00205E                       1980 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      00205E                       1981 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      00205E                       1982 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      00205E                       1983 save_context:
      00205E CE 00 04         [ 2] 1984 	ldw x,basicptr 
      002061 1F 03            [ 2] 1985 	ldw (BPTR,sp),x
      002063 C6 00 01         [ 1] 1986 	ld a,in 
      002066 6B 05            [ 1] 1987 	ld (IN,sp),a
      002068 C6 00 02         [ 1] 1988 	ld a,count 
      00206B 6B 06            [ 1] 1989 	ld (CNT,sp),a  
      00206D 81               [ 4] 1990 	ret
                                   1991 
                                   1992 ;-----------------------
                                   1993 ; restore previously saved 
                                   1994 ; BASIC interpreter context 
                                   1995 ; from stack 
                                   1996 ;-------------------------
      00206E                       1997 rest_context:
      00206E 1E 03            [ 2] 1998 	ldw x,(BPTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      002070 CF 00 04         [ 2] 1999 	ldw basicptr,x 
      002073 7B 05            [ 1] 2000 	ld a,(IN,sp)
      002075 C7 00 01         [ 1] 2001 	ld in,a
      002078 7B 06            [ 1] 2002 	ld a,(CNT,sp)
      00207A C7 00 02         [ 1] 2003 	ld count,a  
      00207D 81               [ 4] 2004 	ret
                                   2005 
                                   2006 
                                   2007 
                                   2008 ;------------------------------------------
                                   2009 ; BASIC: INPUT [string]var[,[string]var]
                                   2010 ; input value in variables 
                                   2011 ; [string] optionally can be used as prompt 
                                   2012 ;-----------------------------------------
                           000001  2013 	CX_BPTR=1
                           000003  2014 	CX_IN=3
                           000004  2015 	CX_CNT=4
                           000005  2016 	SKIP=5
                           000005  2017 	VSIZE=5
      00207E                       2018 input_var:
      00207E 90 89            [ 2] 2019 	pushw y 
      002080                       2020 	_vars VSIZE 
      002080 52 05            [ 2]    1     sub sp,#VSIZE 
      002082                       2021 input_loop:
      002082 0F 05            [ 1] 2022 	clr (SKIP,sp)
      002084 CD 17 FB         [ 4] 2023 	call next_token 
      002087 A1 02            [ 1] 2024 	cp a,#TK_QSTR 
      002089 26 10            [ 1] 2025 	jrne 1$ 
      00208B CD 09 5C         [ 4] 2026 	call puts 
      00208E 5C               [ 1] 2027 	incw x 
      00208F 72 B0 00 04      [ 2] 2028 	subw x,basicptr 
      002093 CF 00 00         [ 2] 2029 	ldw in.w,x 
      002096 03 05            [ 1] 2030 	cpl (SKIP,sp)
      002098 CD 17 FB         [ 4] 2031 	call next_token 
      00209B A1 85            [ 1] 2032 1$: cp a,#TK_VAR  
      00209D 27 03            [ 1] 2033 	jreq 2$ 
      00209F CC 16 94         [ 2] 2034 	jp syntax_error
      0020A2 CD 18 23         [ 4] 2035 2$:	call get_addr
      0020A5 CF 00 19         [ 2] 2036 	ldw ptr16,x 
      0020A8 0D 05            [ 1] 2037 	tnz (SKIP,sp)
      0020AA 26 06            [ 1] 2038 	jrne 21$ 
      0020AC CD 11 A4         [ 4] 2039 	call var_name 
      0020AF CD 08 FF         [ 4] 2040 	call putc   
      0020B2                       2041 21$:
      0020B2 A6 3A            [ 1] 2042 	ld a,#':
      0020B4 CD 08 FF         [ 4] 2043 	call putc 
      0020B7 CD 20 5E         [ 4] 2044 	call save_context 
      0020BA 72 5F 00 02      [ 1] 2045 	clr count  
      0020BE CD 0A 61         [ 4] 2046 	call readln 
      0020C1 AE 16 68         [ 2] 2047 	ldw x,#tib 
      0020C4 3B 00 02         [ 1] 2048 	push count
      0020C7 4B 00            [ 1] 2049 	push #0 
      0020C9 72 FB 01         [ 2] 2050 	addw x,(1,sp)
      0020CC 5C               [ 1] 2051 	incw x 
      0020CD                       2052 	_drop 2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      0020CD 5B 02            [ 2]    1     addw sp,#2 
      0020CF 72 5F 00 01      [ 1] 2053 	clr in 
      0020D3 CD 0E EE         [ 4] 2054 	call get_token
      0020D6 A1 84            [ 1] 2055 	cp a,#TK_INTGR
      0020D8 27 14            [ 1] 2056 	jreq 3$ 
      0020DA A1 11            [ 1] 2057 	cp a,#TK_MINUS
      0020DC 26 07            [ 1] 2058 	jrne 22$
      0020DE CD 0E EE         [ 4] 2059 	call get_token 
      0020E1 A1 84            [ 1] 2060 	cp a,#TK_INTGR 
      0020E3 27 06            [ 1] 2061 	jreq 23$
      0020E5                       2062 22$:
      0020E5 CD 20 6E         [ 4] 2063 	call rest_context 
      0020E8 CC 16 94         [ 2] 2064 	jp syntax_error
      0020EB                       2065 23$:
      0020EB CD 02 1D         [ 4] 2066 	call neg_acc24	
      0020EE                       2067 3$: 
      0020EE C6 00 0C         [ 1] 2068 	ld a,acc24 
      0020F1 CE 00 0D         [ 2] 2069 	ldw x,acc16 
      0020F4 72 C7 00 19      [ 4] 2070 	ld [ptr16],a
      0020F8 72 5C 00 1A      [ 1] 2071 	inc ptr8  
      0020FC 72 CF 00 19      [ 5] 2072 	ldw [ptr16],x 
      002100 CD 20 6E         [ 4] 2073 	call rest_context
      002103 CD 17 FB         [ 4] 2074 	call next_token 
      002106 A1 08            [ 1] 2075 	cp a,#TK_COMMA
      002108 26 03            [ 1] 2076 	jrne 4$ 
      00210A CC 20 82         [ 2] 2077 	jp input_loop
      00210D                       2078 4$:
      00210D A1 00            [ 1] 2079 	cp a,#TK_NONE 
      00210F 27 07            [ 1] 2080 	jreq input_exit  
      002111 A1 0A            [ 1] 2081 	cp a,#TK_COLON 
      002113 27 03            [ 1] 2082     jreq input_exit 
      002115 CC 16 94         [ 2] 2083 	jp syntax_error 
      002118                       2084 input_exit:
      002118                       2085 	_drop VSIZE 
      002118 5B 05            [ 2]    1     addw sp,#VSIZE 
      00211A 90 85            [ 2] 2086 	popw y 
      00211C 81               [ 4] 2087 	ret 
                                   2088 
                                   2089 
                                   2090 ;---------------------
                                   2091 ; BASIC: REM | ' 
                                   2092 ; skip comment to end of line 
                                   2093 ;---------------------- 
      00211D                       2094 remark::
      00211D 55 00 02 00 01   [ 1] 2095 	mov in,count 
      002122 81               [ 4] 2096  	ret 
                                   2097 
                                   2098 
                                   2099 ;---------------------
                                   2100 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2101 ; read in loop 'addr'  
                                   2102 ; apply & 'mask' to value 
                                   2103 ; loop while result==0.  
                                   2104 ; 'xor_mask' is used to 
                                   2105 ; invert the wait logic.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                   2106 ; i.e. loop while not 0.
                                   2107 ;---------------------
                           000001  2108 	XMASK=1 
                           000002  2109 	MASK=2
                           000003  2110 	ADDR=3
                           000004  2111 	VSIZE=4
      002123                       2112 wait: 
      002123                       2113 	_vars VSIZE
      002123 52 04            [ 2]    1     sub sp,#VSIZE 
      002125 0F 01            [ 1] 2114 	clr (XMASK,sp) 
      002127 CD 19 C3         [ 4] 2115 	call arg_list 
      00212A A1 02            [ 1] 2116 	cp a,#2
      00212C 24 03            [ 1] 2117 	jruge 0$
      00212E CC 16 94         [ 2] 2118 	jp syntax_error 
      002131 A1 03            [ 1] 2119 0$:	cp a,#3
      002133 25 0C            [ 1] 2120 	jrult 1$
      002135                       2121 	_xpop  ; xor mask 
      002135 90 F6            [ 1]    1     ld a,(y)
      002137 93               [ 1]    2     ldw x,y 
      002138 EE 01            [ 2]    3     ldw x,(1,x)
      00213A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00213E 9F               [ 1] 2122 	ld a,xl 
      00213F 6B 01            [ 1] 2123 	ld (XMASK,sp),a 
      002141                       2124 1$: _xpop ; mask
      002141 90 F6            [ 1]    1     ld a,(y)
      002143 93               [ 1]    2     ldw x,y 
      002144 EE 01            [ 2]    3     ldw x,(1,x)
      002146 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00214A 9F               [ 1] 2125     ld a,xl  
      00214B 6B 02            [ 1] 2126 	ld (MASK,sp),a 
      00214D                       2127 	_xpop ; address 
      00214D 90 F6            [ 1]    1     ld a,(y)
      00214F 93               [ 1]    2     ldw x,y 
      002150 EE 01            [ 2]    3     ldw x,(1,x)
      002152 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002156 F6               [ 1] 2128 2$:	ld a,(x)
      002157 14 02            [ 1] 2129 	and a,(MASK,sp)
      002159 18 01            [ 1] 2130 	xor a,(XMASK,sp)
      00215B 27 F9            [ 1] 2131 	jreq 2$ 
      00215D                       2132 	_drop VSIZE 
      00215D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00215F 81               [ 4] 2133 	ret 
                                   2134 
                                   2135 ;---------------------
                                   2136 ; BASIC: BSET addr,mask
                                   2137 ; set bits at 'addr' corresponding 
                                   2138 ; to those of 'mask' that are at 1.
                                   2139 ; arguments:
                                   2140 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2141 ;   mask        mask|addr
                                   2142 ; output:
                                   2143 ;	none 
                                   2144 ;--------------------------
      002160                       2145 bit_set:
      002160 CD 19 C3         [ 4] 2146 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002163 A1 02            [ 1] 2147 	cp a,#2	 
      002165 27 03            [ 1] 2148 	jreq 1$ 
      002167 CC 16 94         [ 2] 2149 	jp syntax_error
      00216A                       2150 1$: 
      00216A                       2151 	_xpop ; mask 
      00216A 90 F6            [ 1]    1     ld a,(y)
      00216C 93               [ 1]    2     ldw x,y 
      00216D EE 01            [ 2]    3     ldw x,(1,x)
      00216F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002173 9F               [ 1] 2152 	ld a,xl
      002174 88               [ 1] 2153 	push a  
      002175                       2154 	_xpop ; addr  
      002175 90 F6            [ 1]    1     ld a,(y)
      002177 93               [ 1]    2     ldw x,y 
      002178 EE 01            [ 2]    3     ldw x,(1,x)
      00217A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00217E 84               [ 1] 2155 	pop a 
      00217F FA               [ 1] 2156 	or a,(x)
      002180 F7               [ 1] 2157 	ld (x),a
      002181 81               [ 4] 2158 	ret 
                                   2159 
                                   2160 ;---------------------
                                   2161 ; BASIC: BRES addr,mask
                                   2162 ; reset bits at 'addr' corresponding 
                                   2163 ; to those of 'mask' that are at 1.
                                   2164 ; arguments:
                                   2165 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2166 ;   mask	    ~mask&*addr  
                                   2167 ; output:
                                   2168 ;	none 
                                   2169 ;--------------------------
      002182                       2170 bit_reset:
      002182 CD 19 C3         [ 4] 2171 	call arg_list 
      002185 A1 02            [ 1] 2172 	cp a,#2  
      002187 27 03            [ 1] 2173 	jreq 1$ 
      002189 CC 16 94         [ 2] 2174 	jp syntax_error
      00218C                       2175 1$: 
      00218C                       2176 	_xpop ; mask 
      00218C 90 F6            [ 1]    1     ld a,(y)
      00218E 93               [ 1]    2     ldw x,y 
      00218F EE 01            [ 2]    3     ldw x,(1,x)
      002191 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002195 9F               [ 1] 2177 	ld a,xl 
      002196 43               [ 1] 2178 	cpl a
      002197 88               [ 1] 2179 	push a  
      002198                       2180 	_xpop ; addr  
      002198 90 F6            [ 1]    1     ld a,(y)
      00219A 93               [ 1]    2     ldw x,y 
      00219B EE 01            [ 2]    3     ldw x,(1,x)
      00219D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021A1 84               [ 1] 2181 	pop a 
      0021A2 F4               [ 1] 2182 	and a,(x)
      0021A3 F7               [ 1] 2183 	ld (x),a 
      0021A4 81               [ 4] 2184 	ret 
                                   2185 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



                                   2186 ;---------------------
                                   2187 ; BASIC: BTOGL addr,mask
                                   2188 ; toggle bits at 'addr' corresponding 
                                   2189 ; to those of 'mask' that are at 1.
                                   2190 ; arguments:
                                   2191 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2192 ;   mask	    mask^*addr  
                                   2193 ; output:
                                   2194 ;	none 
                                   2195 ;--------------------------
      0021A5                       2196 bit_toggle:
      0021A5 CD 19 C3         [ 4] 2197 	call arg_list 
      0021A8 A1 02            [ 1] 2198 	cp a,#2 
      0021AA 27 03            [ 1] 2199 	jreq 1$ 
      0021AC CC 16 94         [ 2] 2200 	jp syntax_error
      0021AF                       2201 1$: _xpop ; mask 
      0021AF 90 F6            [ 1]    1     ld a,(y)
      0021B1 93               [ 1]    2     ldw x,y 
      0021B2 EE 01            [ 2]    3     ldw x,(1,x)
      0021B4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021B8 9F               [ 1] 2202 	ld a,xl
      0021B9 88               [ 1] 2203 	push a 
      0021BA                       2204 	_xpop  ; addr  
      0021BA 90 F6            [ 1]    1     ld a,(y)
      0021BC 93               [ 1]    2     ldw x,y 
      0021BD EE 01            [ 2]    3     ldw x,(1,x)
      0021BF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021C3 84               [ 1] 2205 	pop a 
      0021C4 F8               [ 1] 2206 	xor a,(x)
      0021C5 F7               [ 1] 2207 	ld (x),a 
      0021C6 81               [ 4] 2208 	ret 
                                   2209 
                                   2210 
                                   2211 ;---------------------
                                   2212 ; BASIC: BTEST(addr,bit)
                                   2213 ; return bit value at 'addr' 
                                   2214 ; bit is in range {0..7}.
                                   2215 ; arguments:
                                   2216 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2217 ;   bit 	    bit position {0..7}  
                                   2218 ; output:
                                   2219 ;	A:X       bit value  
                                   2220 ;--------------------------
      0021C7                       2221 bit_test:
      0021C7 CD 19 BE         [ 4] 2222 	call func_args 
      0021CA A1 02            [ 1] 2223 	cp a,#2
      0021CC 27 03            [ 1] 2224 	jreq 0$
      0021CE CC 16 94         [ 2] 2225 	jp syntax_error
      0021D1                       2226 0$:	
      0021D1                       2227 	_xpop 
      0021D1 90 F6            [ 1]    1     ld a,(y)
      0021D3 93               [ 1]    2     ldw x,y 
      0021D4 EE 01            [ 2]    3     ldw x,(1,x)
      0021D6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021DA 9F               [ 1] 2228 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      0021DB A4 07            [ 1] 2229 	and a,#7
      0021DD 88               [ 1] 2230 	push a   
      0021DE A6 01            [ 1] 2231 	ld a,#1 
      0021E0 0D 01            [ 1] 2232 1$: tnz (1,sp)
      0021E2 27 05            [ 1] 2233 	jreq 2$
      0021E4 48               [ 1] 2234 	sll a 
      0021E5 0A 01            [ 1] 2235 	dec (1,sp)
      0021E7 20 F7            [ 2] 2236 	jra 1$
      0021E9 6B 01            [ 1] 2237 2$: ld (1,sp),a  
      0021EB                       2238 	_xpop ; address  
      0021EB 90 F6            [ 1]    1     ld a,(y)
      0021ED 93               [ 1]    2     ldw x,y 
      0021EE EE 01            [ 2]    3     ldw x,(1,x)
      0021F0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021F4 84               [ 1] 2239 	pop a 
      0021F5 F4               [ 1] 2240 	and a,(x)
      0021F6 27 02            [ 1] 2241 	jreq 3$
      0021F8 A6 01            [ 1] 2242 	ld a,#1 
      0021FA 5F               [ 1] 2243 3$:	clrw x 
      0021FB 97               [ 1] 2244 	ld xl,a
      0021FC 4F               [ 1] 2245 	clr a  
      0021FD 81               [ 4] 2246 	ret
                                   2247 
                                   2248 ;--------------------
                                   2249 ; BASIC: POKE addr,byte
                                   2250 ; put a byte at addr 
                                   2251 ;--------------------
      0021FE                       2252 poke:
      0021FE CD 19 C3         [ 4] 2253 	call arg_list 
      002201 A1 02            [ 1] 2254 	cp a,#2
      002203 27 03            [ 1] 2255 	jreq 1$
      002205 CC 16 94         [ 2] 2256 	jp syntax_error
      002208                       2257 1$:	
      002208                       2258 	_xpop ; byte   
      002208 90 F6            [ 1]    1     ld a,(y)
      00220A 93               [ 1]    2     ldw x,y 
      00220B EE 01            [ 2]    3     ldw x,(1,x)
      00220D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002211 9F               [ 1] 2259     ld a,xl 
      002212 88               [ 1] 2260 	push a 
      002213                       2261 	_xpop ; address 
      002213 90 F6            [ 1]    1     ld a,(y)
      002215 93               [ 1]    2     ldw x,y 
      002216 EE 01            [ 2]    3     ldw x,(1,x)
      002218 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00221C 84               [ 1] 2262 	pop a 
      00221D F7               [ 1] 2263 	ld (x),a 
      00221E 81               [ 4] 2264 	ret 
                                   2265 
                                   2266 ;-----------------------
                                   2267 ; BASIC: PEEK(addr)
                                   2268 ; get the byte at addr 
                                   2269 ; input:
                                   2270 ;	none 
                                   2271 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                                   2272 ;	X 		value 
                                   2273 ;-----------------------
      00221F                       2274 peek:
      00221F CD 19 BE         [ 4] 2275 	call func_args
      002222 A1 01            [ 1] 2276 	cp a,#1 
      002224 27 03            [ 1] 2277 	jreq 1$
      002226 CC 16 94         [ 2] 2278 	jp syntax_error
      002229                       2279 1$: _xpop ; address  
      002229 90 F6            [ 1]    1     ld a,(y)
      00222B 93               [ 1]    2     ldw x,y 
      00222C EE 01            [ 2]    3     ldw x,(1,x)
      00222E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002232 C7 00 18         [ 1] 2280 	ld farptr,a 
      002235 CF 00 19         [ 2] 2281 	ldw ptr16,x 
      002238 92 BC 00 18      [ 5] 2282 	ldf a,[farptr]
      00223C 5F               [ 1] 2283 	clrw x 
      00223D 97               [ 1] 2284 	ld xl,a 
      00223E 4F               [ 1] 2285 	clr a 
      00223F 81               [ 4] 2286 	ret 
                                   2287 
                                   2288 ;---------------------------
                                   2289 ; BASIC IF expr : instructions
                                   2290 ; evaluate expr and if true 
                                   2291 ; execute instructions on same line. 
                                   2292 ;----------------------------
      002240                       2293 if: 
      002240 CD 1C 1E         [ 4] 2294 	call condition  
      002243                       2295 	_xpop 
      002243 90 F6            [ 1]    1     ld a,(y)
      002245 93               [ 1]    2     ldw x,y 
      002246 EE 01            [ 2]    3     ldw x,(1,x)
      002248 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00224C 4D               [ 1] 2296 	tnz  a  
      00224D 26 0D            [ 1] 2297 	jrne 9$
      00224F 5D               [ 2] 2298 	tnzw x 
      002250 26 0A            [ 1] 2299 	jrne 9$  
                                   2300 ;skip to next line
      002252 55 00 02 00 01   [ 1] 2301 	mov in,count
      002257                       2302 	_drop 2 
      002257 5B 02            [ 2]    1     addw sp,#2 
      002259 CC 17 47         [ 2] 2303 	jp next_line
      00225C 81               [ 4] 2304 9$:	ret 
                                   2305 
                                   2306 ;------------------------
                                   2307 ; BASIC: FOR var=expr 
                                   2308 ; set variable to expression 
                                   2309 ; leave variable address 
                                   2310 ; on stack and set
                                   2311 ; FLOOP bit in 'flags'
                                   2312 ;-----------------
                           000001  2313 	RETL1=1 ; return address  
                           000003  2314 	FSTEP=3  ; variable increment int24
                           000006  2315 	LIMIT=6 ; loop limit, int24  
                           000009  2316 	CVAR=9   ; control variable 
                           00000B  2317 	INW=11   ;  in.w saved
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



                           00000D  2318 	BPTR=13 ; baseptr saved
                           00000D  2319 	VSIZE=13  
      00225D                       2320 for: ; { -- var_addr }
      00225D 85               [ 2] 2321 	popw x ; call return address 
      00225E                       2322 	_vars VSIZE 
      00225E 52 0D            [ 2]    1     sub sp,#VSIZE 
      002260 89               [ 2] 2323 	pushw x  ; RETL1 
      002261 A6 85            [ 1] 2324 	ld a,#TK_VAR 
      002263 CD 19 B1         [ 4] 2325 	call expect
      002266 CD 18 23         [ 4] 2326 	call get_addr
      002269 1F 09            [ 2] 2327 	ldw (CVAR,sp),x  ; control variable 
      00226B CD 1C F3         [ 4] 2328 	call let_eval 
      00226E 72 14 00 22      [ 1] 2329 	bset flags,#FLOOP 
      002272 CD 17 FB         [ 4] 2330 	call next_token 
      002275 A1 80            [ 1] 2331 	cp a,#TK_CMD 
      002277 27 03            [ 1] 2332 	jreq 1$
      002279 CC 16 94         [ 2] 2333 	jp syntax_error
      00227C                       2334 1$:  
      00227C                       2335 	_get_code_addr
      00227C FE               [ 2]    1         ldw x,(x)
      00227D 72 5C 00 01      [ 1]    2         inc in 
      002281 72 5C 00 01      [ 1]    3         inc in 
      002285 A3 22 8D         [ 2] 2336 	cpw x,#to   
      002288 27 03            [ 1] 2337 	jreq to
      00228A CC 16 94         [ 2] 2338 	jp syntax_error 
                                   2339 
                                   2340 ;-----------------------------------
                                   2341 ; BASIC: TO expr 
                                   2342 ; second part of FOR loop initilization
                                   2343 ; leave limit on stack and set 
                                   2344 ; FTO bit in 'flags'
                                   2345 ;-----------------------------------
      00228D                       2346 to: ; { var_addr -- var_addr limit step }
      00228D 72 04 00 22 03   [ 2] 2347 	btjt flags,#FLOOP,1$
      002292 CC 16 94         [ 2] 2348 	jp syntax_error
      002295 CD 1B 05         [ 4] 2349 1$: call expression   
      002298 A1 84            [ 1] 2350 	cp a,#TK_INTGR 
      00229A 27 03            [ 1] 2351 	jreq 2$ 
      00229C CC 16 94         [ 2] 2352 	jp syntax_error
      00229F                       2353 2$: _xpop
      00229F 90 F6            [ 1]    1     ld a,(y)
      0022A1 93               [ 1]    2     ldw x,y 
      0022A2 EE 01            [ 2]    3     ldw x,(1,x)
      0022A4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022A8 6B 06            [ 1] 2354 	ld (LIMIT,sp),a 
      0022AA 1F 07            [ 2] 2355 	ldw (LIMIT+1,sp),x
      0022AC CD 17 FB         [ 4] 2356 	call next_token
      0022AF A1 00            [ 1] 2357 	cp a,#TK_NONE  
      0022B1 27 17            [ 1] 2358 	jreq 4$ 
      0022B3 A1 80            [ 1] 2359 	cp a,#TK_CMD
      0022B5 26 0E            [ 1] 2360 	jrne 3$
      0022B7                       2361 	_get_code_addr
      0022B7 FE               [ 2]    1         ldw x,(x)
      0022B8 72 5C 00 01      [ 1]    2         inc in 
      0022BC 72 5C 00 01      [ 1]    3         inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0022C0 A3 22 D3         [ 2] 2362 	cpw x,#step 
      0022C3 27 0E            [ 1] 2363 	jreq step
      0022C5                       2364 3$:	
      0022C5                       2365 	_unget_token   	 
      0022C5 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0022CA                       2366 4$:	
      0022CA 0F 03            [ 1] 2367 	clr (FSTEP,sp) 
      0022CC AE 00 01         [ 2] 2368 	ldw x,#1   ; default step  
      0022CF 1F 04            [ 2] 2369 	ldw (FSTEP+1,sp),x 
      0022D1 20 2F            [ 2] 2370 	jra store_loop_addr 
                                   2371 
                                   2372 
                                   2373 ;----------------------------------
                                   2374 ; BASIC: STEP expr 
                                   2375 ; optional third par of FOR loop
                                   2376 ; initialization. 	
                                   2377 ;------------------------------------
      0022D3                       2378 step: ; {var limit -- var limit step}
      0022D3 72 04 00 22 03   [ 2] 2379 	btjt flags,#FLOOP,1$
      0022D8 CC 16 94         [ 2] 2380 	jp syntax_error
      0022DB CD 1B 05         [ 4] 2381 1$: call expression 
      0022DE A1 84            [ 1] 2382 	cp a,#TK_INTGR
      0022E0 27 03            [ 1] 2383 	jreq 2$
      0022E2 CC 16 94         [ 2] 2384 	jp syntax_error
      0022E5                       2385 2$:	
      0022E5                       2386 	_xpop 
      0022E5 90 F6            [ 1]    1     ld a,(y)
      0022E7 93               [ 1]    2     ldw x,y 
      0022E8 EE 01            [ 2]    3     ldw x,(1,x)
      0022EA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022EE 6B 03            [ 1] 2387 	ld (FSTEP,sp),a 
      0022F0 1F 04            [ 2] 2388 	ldw (FSTEP+1,sp),x ; step
                                   2389 ; if step < 0 decrement LIMIT 
      0022F2 4D               [ 1] 2390 	tnz a
      0022F3 2A 0D            [ 1] 2391 	jrpl store_loop_addr 
      0022F5 7B 06            [ 1] 2392 	ld a,(LIMIT,sp)
      0022F7 1E 07            [ 2] 2393 	ldw x,(LIMIT+1,sp)
      0022F9 1D 00 01         [ 2] 2394 	subw x,#1 
      0022FC A2 00            [ 1] 2395 	sbc a,#0 
      0022FE 6B 06            [ 1] 2396 	ld (LIMIT,sp),a 
      002300 1F 07            [ 2] 2397 	ldw (LIMIT+1,sp),x 
                                   2398 ; leave loop back entry point on cstack 
                                   2399 ; cstack is 1 call deep from interpreter
      002302                       2400 store_loop_addr:
      002302 CE 00 04         [ 2] 2401 	ldw x,basicptr
      002305 1F 0D            [ 2] 2402 	ldw (BPTR,sp),x 
      002307 CE 00 00         [ 2] 2403 	ldw x,in.w 
      00230A 1F 0B            [ 2] 2404 	ldw (INW,sp),x   
      00230C 72 15 00 22      [ 1] 2405 	bres flags,#FLOOP 
      002310 72 5C 00 1F      [ 1] 2406 	inc loop_depth  
      002314 81               [ 4] 2407 	ret 
                                   2408 
                                   2409 ;--------------------------------
                                   2410 ; BASIC: NEXT var 
                                   2411 ; FOR loop control 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



                                   2412 ; increment variable with step 
                                   2413 ; and compare with limit 
                                   2414 ; loop if threshold not crossed.
                                   2415 ; else stack. 
                                   2416 ; and decrement 'loop_depth' 
                                   2417 ;--------------------------------
      002315                       2418 next: ; {var limit step retl1 -- [var limit step ] }
      002315 72 5D 00 1F      [ 1] 2419 	tnz loop_depth 
      002319 26 03            [ 1] 2420 	jrne 1$ 
      00231B CC 16 94         [ 2] 2421 	jp syntax_error 
      00231E                       2422 1$: 
      00231E A6 85            [ 1] 2423 	ld a,#TK_VAR 
      002320 CD 19 B1         [ 4] 2424 	call expect
      002323 CD 18 23         [ 4] 2425 	call get_addr 
                                   2426 ; check for good variable after NEXT 	 
      002326 13 09            [ 2] 2427 	cpw x,(CVAR,sp)
      002328 27 03            [ 1] 2428 	jreq 2$  
      00232A CC 16 94         [ 2] 2429 	jp syntax_error ; not the good one 
      00232D                       2430 2$: 
      00232D CF 00 19         [ 2] 2431 	ldw ptr16,x 
                                   2432 	; increment variable 
      002330 F6               [ 1] 2433 	ld a,(x)
      002331 EE 01            [ 2] 2434 	ldw x,(1,x)  ; get var value 
      002333 72 FB 04         [ 2] 2435 	addw x,(FSTEP+1,sp) ; var+step 
      002336 19 03            [ 1] 2436 	adc a,(FSTEP,sp)
      002338 72 C7 00 19      [ 4] 2437 	ld [ptr16],a
      00233C 72 5C 00 1A      [ 1] 2438 	inc ptr8  
      002340 72 CF 00 19      [ 5] 2439 	ldw [ptr16],x 
      002344 C7 00 0C         [ 1] 2440 	ld acc24,a 
      002347 CF 00 0D         [ 2] 2441 	ldw acc16,x 
      00234A 7B 06            [ 1] 2442 	ld a,(LIMIT,sp)
      00234C 1E 07            [ 2] 2443 	ldw x,(LIMIT+1,sp)
      00234E 72 B0 00 0D      [ 2] 2444 	subw x,acc16 
      002352 C2 00 0C         [ 1] 2445 	sbc a,acc24
      002355 18 03            [ 1] 2446 	xor a,(FSTEP,sp)
      002357 A8 80            [ 1] 2447 	xor a,#0x80
      002359 2B 12            [ 1] 2448 	jrmi loop_back  
      00235B 20 25            [ 2] 2449 	jra loop_done   
                                   2450 ; check sign of STEP  
      00235D 7B 03            [ 1] 2451 	ld a,(FSTEP,sp)
      00235F 2A 07            [ 1] 2452 	jrpl 4$
                                   2453 ;negative step
      002361 C6 00 0E         [ 1] 2454     ld a,acc8 
      002364 2F 07            [ 1] 2455 	jrslt loop_back   
      002366 20 1A            [ 2] 2456 	jra loop_done  
      002368                       2457 4$: ; positive step
      002368 72 0E 00 0E 15   [ 2] 2458 	btjt acc8,#7,loop_done 
      00236D                       2459 loop_back:
      00236D 1E 0D            [ 2] 2460 	ldw x,(BPTR,sp)
      00236F CF 00 04         [ 2] 2461 	ldw basicptr,x 
      002372 72 01 00 22 05   [ 2] 2462 	btjf flags,#FRUN,1$ 
      002377 E6 02            [ 1] 2463 	ld a,(2,x)
      002379 C7 00 02         [ 1] 2464 	ld count,a
      00237C 1E 0B            [ 2] 2465 1$:	ldw x,(INW,sp)
      00237E CF 00 00         [ 2] 2466 	ldw in.w,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002381 81               [ 4] 2467 	ret 
      002382                       2468 loop_done:
                                   2469 	; remove loop data from stack  
      002382 85               [ 2] 2470 	popw x
      002383                       2471 	_drop VSIZE 
      002383 5B 0D            [ 2]    1     addw sp,#VSIZE 
      002385 72 5A 00 1F      [ 1] 2472 	dec loop_depth 
      002389 FC               [ 2] 2473 	jp (x)
                                   2474 
                                   2475 ;----------------------------
                                   2476 ; called by goto/gosub
                                   2477 ; to get target line number 
                                   2478 ; output:
                                   2479 ;    x    line address 
                                   2480 ;---------------------------
      00238A                       2481 get_target_line:
      00238A CD 17 FB         [ 4] 2482 	call next_token  
      00238D A1 84            [ 1] 2483 	cp a,#TK_INTGR
      00238F 27 07            [ 1] 2484 	jreq get_target_line_addr 
      002391 A1 03            [ 1] 2485 	cp a,#TK_LABEL 
      002393 27 26            [ 1] 2486 	jreq look_target_symbol 
      002395 CC 16 94         [ 2] 2487 	jp syntax_error
                                   2488 ; the target is a line number 
                                   2489 ; search it. 
      002398                       2490 get_target_line_addr:
      002398 90 89            [ 2] 2491 	pushw y 
      00239A CD 18 2D         [ 4] 2492 	call get_int24 ; line # 
      00239D 4F               [ 1] 2493 	clr a
      00239E 90 CE 00 04      [ 2] 2494 	ldw y,basicptr 
      0023A2 90 FE            [ 2] 2495 	ldw y,(y)
      0023A4 90 89            [ 2] 2496 	pushw y 
      0023A6 13 01            [ 2] 2497 	cpw x,(1,sp)
      0023A8                       2498 	_drop 2  
      0023A8 5B 02            [ 2]    1     addw sp,#2 
      0023AA 25 01            [ 1] 2499 	jrult 11$
      0023AC 4C               [ 1] 2500 	inc a 
      0023AD                       2501 11$: ; scan program for this line# 	
      0023AD CD 0C 45         [ 4] 2502 	call search_lineno  
      0023B0 5D               [ 2] 2503 	tnzw x ; 0| line# address 
      0023B1 26 05            [ 1] 2504 	jrne 2$ 
      0023B3 A6 05            [ 1] 2505 	ld a,#ERR_NO_LINE 
      0023B5 CC 16 96         [ 2] 2506 	jp tb_error 
      0023B8 90 85            [ 2] 2507 2$:	popw y  
      0023BA 81               [ 4] 2508 	ret 
                                   2509 
                                   2510 ; the GOTO|GOSUB target is a symbol.
                                   2511 ; output:
                                   2512 ;    X    line address|0 
      0023BB                       2513 look_target_symbol:
      0023BB 90 89            [ 2] 2514 	pushw y 
      0023BD 89               [ 2] 2515 	pushw x 
      0023BE CD 18 14         [ 4] 2516 	call skip_string 
      0023C1 72 5F 00 0D      [ 1] 2517 	clr acc16 
      0023C5 90 CE 00 1B      [ 2] 2518 	ldw y,txtbgn 
      0023C9 90 E6 03         [ 1] 2519 1$:	ld a,(3,y) ; first TK_ID on line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0023CC A1 03            [ 1] 2520 	cp a,#TK_LABEL 
      0023CE 27 15            [ 1] 2521 	jreq 3$ 
      0023D0 90 E6 02         [ 1] 2522 2$:	ld a,(2,y); line length 
      0023D3 C7 00 0E         [ 1] 2523 	ld acc8,a 
      0023D6 72 B9 00 0D      [ 2] 2524 	addw y,acc16 ;point to next line 
      0023DA 90 C3 00 1D      [ 2] 2525 	cpw y,txtend 
      0023DE 25 E9            [ 1] 2526 	jrult 1$
      0023E0 A6 0A            [ 1] 2527 	ld a,#ERR_BAD_VALUE
      0023E2 CC 16 96         [ 2] 2528 	jp tb_error 
      0023E5                       2529 3$: ; found a TK_LABEL 
                                   2530 	; compare with GOTO|GOSUB target 
      0023E5 90 89            [ 2] 2531 	pushw y ; line address 
      0023E7 72 A9 00 04      [ 2] 2532 	addw y,#4 ; label string 
      0023EB 1E 03            [ 2] 2533 	ldw x,(3,sp) ; target string 
      0023ED CD 13 9D         [ 4] 2534 	call strcmp
      0023F0 26 04            [ 1] 2535 	jrne 4$
      0023F2 90 85            [ 2] 2536 	popw y 
      0023F4 20 DA            [ 2] 2537 	jra 2$ 
      0023F6                       2538 4$: ; target found 
      0023F6 85               [ 2] 2539 	popw x ;  address line target  
      0023F7                       2540 	_drop 2 ; target string 
      0023F7 5B 02            [ 2]    1     addw sp,#2 
      0023F9 90 85            [ 2] 2541 	popw y 
      0023FB 81               [ 4] 2542 	ret
                                   2543 
                                   2544 
                                   2545 ;--------------------------------
                                   2546 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2547 ; selective goto or gosub 
                                   2548 ;--------------------------------
      0023FC                       2549 cmd_on:
      0023FC 72 00 00 22 05   [ 2] 2550 	btjt flags,#FRUN,0$ 
      002401 A6 06            [ 1] 2551 	ld a,#ERR_RUN_ONLY
      002403 CC 16 96         [ 2] 2552 	jp tb_error 
      002406 CD 1B 05         [ 4] 2553 0$:	call expression 
      002409 A1 84            [ 1] 2554 	cp a,#TK_INTGR
      00240B 27 03            [ 1] 2555 	jreq 1$
      00240D CC 16 94         [ 2] 2556 	jp syntax_error
      002410                       2557 1$: _xpop
      002410 90 F6            [ 1]    1     ld a,(y)
      002412 93               [ 1]    2     ldw x,y 
      002413 EE 01            [ 2]    3     ldw x,(1,x)
      002415 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2558 ; the selector is the element indice 
                                   2559 ; in the list of arguments. {1..#elements} 
      002419 9F               [ 1] 2560 	ld a,xl ; keep only bits 7..0
      00241A 27 68            [ 1] 2561 	jreq 9$ ; element # begin at 1. 
      00241C 88               [ 1] 2562 	push a  ; selector  
      00241D CD 17 FB         [ 4] 2563 	call next_token
      002420 A1 80            [ 1] 2564 	cp a,#TK_CMD 
      002422 27 03            [ 1] 2565 	jreq 2$ 
      002424 CC 16 94         [ 2] 2566 	jp syntax_error 
      002427                       2567 2$: _get_code_addr
      002427 FE               [ 2]    1         ldw x,(x)
      002428 72 5C 00 01      [ 1]    2         inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      00242C 72 5C 00 01      [ 1]    3         inc in 
                                   2568 ;; must be a GOTO or GOSUB 
      002430 A3 24 8E         [ 2] 2569 	cpw x,#goto 
      002433 27 08            [ 1] 2570 	jreq 4$
      002435 A3 24 A8         [ 2] 2571 	cpw x,#gosub 
      002438 27 03            [ 1] 2572 	jreq 4$ 
      00243A CC 16 94         [ 2] 2573 	jp syntax_error 
      00243D                       2574 4$: 
      00243D 84               [ 1] 2575 	pop a 
      00243E 89               [ 2] 2576 	pushw x ; save routine address 	
      00243F 88               [ 1] 2577 	push a  ; selector  
      002440                       2578 5$: ; skip elements in list until selector==0 
      002440 0A 01            [ 1] 2579 	dec (1,sp)
      002442 27 26            [ 1] 2580 	jreq 6$ 
                                   2581 ; can be a line# or a label 
      002444 CD 17 FB         [ 4] 2582 	call next_token 
      002447 A1 84            [ 1] 2583 	cp a,#TK_INTGR 
      002449 27 07            [ 1] 2584 	jreq 52$
      00244B A1 03            [ 1] 2585 	cp a,#TK_LABEL 
      00244D 27 0D            [ 1] 2586 	jreq 54$
      00244F CC 16 94         [ 2] 2587 	jp syntax_error 
      002452                       2588 52$: ; got a line number 
      002452 C6 00 01         [ 1] 2589 	ld a,in ; skip over int24 value 
      002455 AB 03            [ 1] 2590 	add a,#CELL_SIZE ; integer size  
      002457 C7 00 01         [ 1] 2591 	ld in,a 
      00245A 20 03            [ 2] 2592 	jra 56$
      00245C CD 18 14         [ 4] 2593 54$: call skip_string ; skip over label 	
      00245F                       2594 56$: ; if another element comma present 
      00245F CD 17 FB         [ 4] 2595 	call next_token
      002462 A1 08            [ 1] 2596 	cp a,#TK_COMMA 
      002464 27 DA            [ 1] 2597 	jreq 5$ 
                                   2598 ; arg list exhausted, selector to big 
                                   2599 ; continue execution on next line 
      002466                       2600 	_drop 3 ; drop selector and GOTO|GOSUB address 
      002466 5B 03            [ 2]    1     addw sp,#3 
      002468 20 1A            [ 2] 2601 	jra 9$
      00246A                       2602 6$: ;at selected position  
      00246A                       2603 	_drop 1 ; discard selector
      00246A 5B 01            [ 2]    1     addw sp,#1 
                                   2604 ; here only the routine address 
                                   2605 ; of GOTO|GOSUB is on stack 
      00246C CD 23 8A         [ 4] 2606     call get_target_line
      00246F CF 00 19         [ 2] 2607 	ldw ptr16,x 	
      002472 55 00 02 00 01   [ 1] 2608 	mov in,count ; move to end of line  
      002477 85               [ 2] 2609 	popw x ; cmd address, GOTO||GOSUB 
      002478 A3 24 8E         [ 2] 2610 	cpw x,#goto 
      00247B 26 05            [ 1] 2611 	jrne 7$ 
      00247D CE 00 19         [ 2] 2612 	ldw x,ptr16 
      002480 20 19            [ 2] 2613 	jra jp_to_target
      002482                       2614 7$: 
      002482 20 35            [ 2] 2615 	jra gosub_2 ; target in ptr16 
      002484                       2616 9$: ; expr out of range skip to end of line
                                   2617     ; this will force a fall to next line  
      002484 55 00 02 00 01   [ 1] 2618 	mov in,count
      002489                       2619 	_drop 2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002489 5B 02            [ 2]    1     addw sp,#2 
      00248B CC 17 47         [ 2] 2620 	jp next_line  
                                   2621 
                                   2622 
                                   2623 ;------------------------
                                   2624 ; BASIC: GOTO line# 
                                   2625 ; jump to line# 
                                   2626 ; here cstack is 2 call deep from interpreter 
                                   2627 ;------------------------
      00248E                       2628 goto:
      00248E 72 00 00 22 05   [ 2] 2629 	btjt flags,#FRUN,goto_1  
      002493 A6 06            [ 1] 2630 	ld a,#ERR_RUN_ONLY
      002495 CC 16 96         [ 2] 2631 	jp tb_error 
      002498                       2632 goto_1:
      002498 CD 23 8A         [ 4] 2633 	call get_target_line
      00249B                       2634 jp_to_target:
      00249B CF 00 04         [ 2] 2635 	ldw basicptr,x 
      00249E E6 02            [ 1] 2636 	ld a,(2,x)
      0024A0 C7 00 02         [ 1] 2637 	ld count,a 
      0024A3 35 03 00 01      [ 1] 2638 	mov in,#3 
      0024A7 81               [ 4] 2639 	ret 
                                   2640 
                                   2641 
                                   2642 ;--------------------
                                   2643 ; BASIC: GOSUB line#
                                   2644 ; basic subroutine call
                                   2645 ; actual line# and basicptr 
                                   2646 ; are saved on cstack
                                   2647 ; here cstack is 2 call deep from interpreter 
                                   2648 ;--------------------
                           000001  2649 	RET_ADDR=1 ; subroutine return address 
                           000003  2650 	RET_BPTR=3 ; basicptr return point 
                           000005  2651 	RET_INW=5  ; in.w return point 
                           000004  2652 	VSIZE=4 
      0024A8                       2653 gosub:
      0024A8 72 00 00 22 06   [ 2] 2654 	btjt flags,#FRUN,gosub_1 
      0024AD A6 06            [ 1] 2655 	ld a,#ERR_RUN_ONLY
      0024AF CC 16 96         [ 2] 2656 	jp tb_error 
      0024B2 81               [ 4] 2657 	ret 
      0024B3                       2658 gosub_1:
      0024B3 CD 23 8A         [ 4] 2659 	call get_target_line 
      0024B6 CF 00 19         [ 2] 2660 	ldw ptr16,x
      0024B9                       2661 gosub_2: 
      0024B9 85               [ 2] 2662 	popw x 
      0024BA                       2663 	_vars VSIZE  
      0024BA 52 04            [ 2]    1     sub sp,#VSIZE 
      0024BC 89               [ 2] 2664 	pushw x ; RET_ADDR 
                                   2665 ; save BASIC subroutine return point.   
      0024BD CE 00 04         [ 2] 2666 	ldw x,basicptr
      0024C0 1F 03            [ 2] 2667 	ldw (RET_BPTR,sp),x 
      0024C2 CE 00 00         [ 2] 2668 	ldw x,in.w 
      0024C5 1F 05            [ 2] 2669 	ldw (RET_INW,sp),x
      0024C7 CE 00 19         [ 2] 2670 	ldw x,ptr16  
      0024CA 20 CF            [ 2] 2671 	jra jp_to_target
                                   2672 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



                                   2673 ;------------------------
                                   2674 ; BASIC: RETURN 
                                   2675 ; exit from BASIC subroutine 
                                   2676 ;------------------------
      0024CC                       2677 return:
      0024CC 72 00 00 22 05   [ 2] 2678 	btjt flags,#FRUN,0$ 
      0024D1 A6 06            [ 1] 2679 	ld a,#ERR_RUN_ONLY
      0024D3 CC 16 96         [ 2] 2680 	jp tb_error 
      0024D6                       2681 0$:	
      0024D6 1E 03            [ 2] 2682 	ldw x,(RET_BPTR,sp) 
      0024D8 CF 00 04         [ 2] 2683 	ldw basicptr,x
      0024DB E6 02            [ 1] 2684 	ld a,(2,x)
      0024DD C7 00 02         [ 1] 2685 	ld count,a  
      0024E0 1E 05            [ 2] 2686 	ldw x,(RET_INW,sp)
      0024E2 CF 00 00         [ 2] 2687 	ldw in.w,x 
      0024E5 85               [ 2] 2688 	popw x 
      0024E6                       2689 	_drop VSIZE 
      0024E6 5B 04            [ 2]    1     addw sp,#VSIZE 
      0024E8 FC               [ 2] 2690 	jp (x)
                                   2691 
                                   2692 
                                   2693 ;---------------------------------
                                   2694 ; check if A:X contain the address 
                                   2695 ; of a program in FLASH 
                                   2696 ; output:
                                   2697 ;     Z    set is progam 
                                   2698 ;----------------------------------
      0024E9                       2699 is_program_addr:
      0024E9 4D               [ 1] 2700 	tnz a 
      0024EA 26 0D            [ 1] 2701 	jrne 9$
      0024EC A3 38 80         [ 2] 2702 	cpw x,#app_space 
      0024EF 25 07            [ 1] 2703 	jrult 8$
      0024F1 89               [ 2] 2704 	pushw x 
      0024F2 CD 28 81         [ 4] 2705 	call qsign 
      0024F5 85               [ 2] 2706 	popw x 
      0024F6 27 01            [ 1] 2707 	jreq 9$ 
      0024F8 43               [ 1] 2708 8$:	cpl a ; clr Z bit  
      0024F9 81               [ 4] 2709 9$:	ret 
                                   2710 
                                   2711 ;----------------------------------
                                   2712 ; BASIC: RUN [label]
                                   2713 ; run BASIC program in RAM
                                   2714 ;----------------------------------- 
      0024FA                       2715 cmd_run: 
      0024FA 72 01 00 22 02   [ 2] 2716 	btjf flags,#FRUN,0$  
      0024FF 4F               [ 1] 2717 	clr a 
      002500 81               [ 4] 2718 	ret
      002501                       2719 0$: ; check for STOP condition 
      002501 72 09 00 22 12   [ 2] 2720 	btjf flags,#FBREAK,1$
      002506                       2721 	_drop 2 
      002506 5B 02            [ 2]    1     addw sp,#2 
      002508 CD 20 6E         [ 4] 2722 	call rest_context
      00250B                       2723 	_drop CTXT_SIZE 
      00250B 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      00250D 72 19 00 22      [ 1] 2724 	bres flags,#FBREAK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      002511 72 10 00 22      [ 1] 2725 	bset flags,#FRUN 
      002515 CC 17 3F         [ 2] 2726 	jp interpreter 
      002518                       2727 1$:	; check for label option 
      002518 CD 17 FB         [ 4] 2728 	call next_token 
      00251B A1 03            [ 1] 2729 	cp a,#TK_LABEL 
      00251D 26 1F            [ 1] 2730 	jrne 3$
      00251F 89               [ 2] 2731 	pushw x 
      002520 CD 18 14         [ 4] 2732 	call skip_string 
      002523 85               [ 2] 2733 	popw x  
      002524 CD 31 FA         [ 4] 2734 	call search_program
      002527 26 05            [ 1] 2735 	jrne 2$
      002529 A6 12            [ 1] 2736 	ld a,#ERR_NO_PROGRAM
      00252B CC 16 96         [ 2] 2737 	jp tb_error 
      00252E CF 00 1B         [ 2] 2738 2$: ldw txtbgn,x 
      002531 1D 00 02         [ 2] 2739 	subw x,#2 
      002534 FE               [ 2] 2740 	ldw x,(x)
      002535 72 BB 00 1B      [ 2] 2741 	addw x,txtbgn 
      002539 CF 00 1D         [ 2] 2742 	ldw txtend,x 
      00253C 20 19            [ 2] 2743 	jra run_it 	
      00253E                       2744 3$:	_unget_token 
      00253E 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002543 CE 00 1B         [ 2] 2745 	ldw x,txtbgn
      002546 C3 00 1D         [ 2] 2746 	cpw x,txtend 
      002549 2B 0C            [ 1] 2747 	jrmi run_it 
      00254B AE 15 EB         [ 2] 2748 	ldw x,#err_no_prog
      00254E CD 09 5C         [ 4] 2749 	call puts 
      002551 55 00 02 00 01   [ 1] 2750 	mov in,count
      002556 81               [ 4] 2751 	ret 
      002557                       2752 run_it:	 
      002557                       2753 	_drop 2 ; drop return address 
      002557 5B 02            [ 2]    1     addw sp,#2 
      002559                       2754 run_it_02: 
      002559 CD 1C D2         [ 4] 2755     call ubound 
      00255C CD 14 02         [ 4] 2756 	call clear_vars
                                   2757 ; initialize DIM variables pointers 
      00255F CE 00 1D         [ 2] 2758 	ldw x,txtend 
      002562 CF 00 30         [ 2] 2759 	ldw dvar_bgn,x 
      002565 CF 00 32         [ 2] 2760 	ldw dvar_end,x 	 
                                   2761 ; clear data pointer 
      002568 5F               [ 1] 2762 	clrw x 
      002569 CF 00 06         [ 2] 2763 	ldw data_ptr,x 
      00256C 72 5F 00 08      [ 1] 2764 	clr data_ofs 
      002570 72 5F 00 09      [ 1] 2765 	clr data_len 
                                   2766 ; initialize BASIC pointer 
      002574 CE 00 1B         [ 2] 2767 	ldw x,txtbgn 
      002577 CF 00 04         [ 2] 2768 	ldw basicptr,x 
      00257A E6 02            [ 1] 2769 	ld a,(2,x)
      00257C C7 00 02         [ 1] 2770 	ld count,a
      00257F 35 03 00 01      [ 1] 2771 	mov in,#3	
      002583 72 10 00 22      [ 1] 2772 	bset flags,#FRUN 
      002587 CC 17 3F         [ 2] 2773 	jp interpreter 
                                   2774 
                                   2775 
                                   2776 ;----------------------
                                   2777 ; BASIC: END
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



                                   2778 ; end running program
                                   2779 ;---------------------- 
                           000001  2780 	CHAIN_BP=1 
                           000003  2781 	CHAIN_IN=3
                           000005  2782 	CHAIN_TXTBGN=5
                           000007  2783 	CHAIN_TXTEND=7
                           000008  2784 	CHAIN_CNTX_SIZE=8  
      00258A                       2785 cmd_end: 
      00258A                       2786 	_drop 2 ; no need for return address 
      00258A 5B 02            [ 2]    1     addw sp,#2 
                                   2787 ; check for chained program 
      00258C 72 5D 00 34      [ 1] 2788 	tnz chain_level
      002590 27 1D            [ 1] 2789 	jreq 8$
                                   2790 ; restore chain context 
      002592 72 5A 00 34      [ 1] 2791 	dec chain_level 
      002596 1E 01            [ 2] 2792 	ldw x,(CHAIN_BP,sp) ; chain saved basicptr 
      002598 CF 00 04         [ 2] 2793 	ldw basicptr,x 
      00259B 1E 03            [ 2] 2794 	ldw x,(CHAIN_IN,sp) ; chain saved in and count  
      00259D CF 00 01         [ 2] 2795 	ldw in,x 
      0025A0 1E 05            [ 2] 2796 	ldw x,(CHAIN_TXTBGN,sp)
      0025A2 CF 00 1B         [ 2] 2797 	ldw txtbgn,x 
      0025A5 1E 07            [ 2] 2798 	ldw x,(CHAIN_TXTEND,sp)
      0025A7 CF 00 1D         [ 2] 2799 	ldw txtend,x 
      0025AA                       2800 	_drop CHAIN_CNTX_SIZE ; CHAIN saved data size  
      0025AA 5B 08            [ 2]    1     addw sp,#CHAIN_CNTX_SIZE 
      0025AC CC 17 3F         [ 2] 2801 	jp interpreter 
      0025AF                       2802 8$: ; clean stack 
      0025AF AE 17 FF         [ 2] 2803 	ldw x,#STACK_EMPTY
      0025B2 94               [ 1] 2804 	ldw sp,x 
      0025B3 CC 17 20         [ 2] 2805 	jp warm_start
                                   2806 
                                   2807 ;---------------------------
                                   2808 ; BASIC: GET var 
                                   2809 ; receive a key in variable 
                                   2810 ; don't wait 
                                   2811 ;---------------------------
      0025B6                       2812 cmd_get:
      0025B6 CD 17 FB         [ 4] 2813 	call next_token 
      0025B9 A1 85            [ 1] 2814 	cp a,#TK_VAR 
      0025BB 27 03            [ 1] 2815 	jreq 0$
      0025BD CC 16 94         [ 2] 2816 	jp syntax_error 
      0025C0 CD 18 23         [ 4] 2817 0$: call get_addr 
      0025C3 CF 00 19         [ 2] 2818 	ldw ptr16,x 
      0025C6 CD 09 08         [ 4] 2819 	call qgetc 
      0025C9 27 03            [ 1] 2820 	jreq 2$
      0025CB CD 09 0F         [ 4] 2821 	call getc  
      0025CE 72 3F 00 19      [ 4] 2822 2$: clr [ptr16]
      0025D2 72 5C 00 1A      [ 1] 2823 	inc ptr8 
      0025D6 72 3F 00 19      [ 4] 2824 	clr [ptr16]
      0025DA 72 5C 00 1A      [ 1] 2825 	inc ptr8 
      0025DE 72 C7 00 19      [ 4] 2826 	ld [ptr16],a 
      0025E2 81               [ 4] 2827 	ret 
                                   2828 
                                   2829 
                                   2830 ;-----------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



                                   2831 ; 1 Khz beep 
                                   2832 ;-----------------
      0025E3                       2833 beep_1khz:: 
      0025E3 90 89            [ 2] 2834 	pushw y 
      0025E5 AE 00 64         [ 2] 2835 	ldw x,#100
      0025E8 90 AE 03 E8      [ 2] 2836 	ldw y,#1000
      0025EC 20 22            [ 2] 2837 	jra beep
                                   2838 
                                   2839 ;-----------------------
                                   2840 ; BASIC: TONE expr1,expr2
                                   2841 ; used TIMER2 channel 1
                                   2842 ; to produce a tone 
                                   2843 ; arguments:
                                   2844 ;    expr1   frequency 
                                   2845 ;    expr2   duration msec.
                                   2846 ;---------------------------
      0025EE                       2847 tone:
      0025EE 90 89            [ 2] 2848 	pushw y 
      0025F0 CD 19 C3         [ 4] 2849 	call arg_list 
      0025F3 A1 02            [ 1] 2850 	cp a,#2 
      0025F5 27 03            [ 1] 2851 	jreq 1$
      0025F7 CC 16 94         [ 2] 2852 	jp syntax_error 
      0025FA                       2853 1$: 
      0025FA                       2854 	_xpop 
      0025FA 90 F6            [ 1]    1     ld a,(y)
      0025FC 93               [ 1]    2     ldw x,y 
      0025FD EE 01            [ 2]    3     ldw x,(1,x)
      0025FF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002603 89               [ 2] 2855 	pushw x ; duration 
      002604                       2856 	_xpop ; frequency
      002604 90 F6            [ 1]    1     ld a,(y)
      002606 93               [ 1]    2     ldw x,y 
      002607 EE 01            [ 2]    3     ldw x,(1,x)
      002609 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00260D 90 93            [ 1] 2857 	ldw y,x ; frequency 
      00260F 85               [ 2] 2858 	popw x  ; duration 
      002610                       2859 beep:  
      002610 89               [ 2] 2860 	pushw x 
      002611 AE F4 24         [ 2] 2861 	ldw x,#TIM2_CLK_FREQ
      002614 65               [ 2] 2862 	divw x,y ; cntr=Fclk/freq 
                                   2863 ; round to nearest integer 
      002615 90 A3 7A 12      [ 2] 2864 	cpw y,#TIM2_CLK_FREQ/2
      002619 2B 01            [ 1] 2865 	jrmi 2$
      00261B 5C               [ 1] 2866 	incw x 
      00261C                       2867 2$:	 
      00261C 9E               [ 1] 2868 	ld a,xh 
      00261D C7 53 0D         [ 1] 2869 	ld TIM2_ARRH,a 
      002620 9F               [ 1] 2870 	ld a,xl 
      002621 C7 53 0E         [ 1] 2871 	ld TIM2_ARRL,a 
                                   2872 ; 50% duty cycle 
      002624 8C               [ 1] 2873 	ccf 
      002625 56               [ 2] 2874 	rrcw x 
      002626 9E               [ 1] 2875 	ld a,xh 
      002627 C7 53 0F         [ 1] 2876 	ld TIM2_CCR1H,a 
      00262A 9F               [ 1] 2877 	ld a,xl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      00262B C7 53 10         [ 1] 2878 	ld TIM2_CCR1L,a
      00262E 72 10 53 08      [ 1] 2879 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      002632 72 10 53 00      [ 1] 2880 	bset TIM2_CR1,#TIM2_CR1_CEN
      002636 72 10 53 04      [ 1] 2881 	bset TIM2_EGR,#TIM2_EGR_UG
      00263A 85               [ 2] 2882 	popw x 
      00263B CD 2B 7B         [ 4] 2883 	call pause02
      00263E 72 11 53 08      [ 1] 2884 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      002642 72 11 53 00      [ 1] 2885 	bres TIM2_CR1,#TIM2_CR1_CEN 
      002646 90 85            [ 2] 2886 	popw y 
      002648 81               [ 4] 2887 	ret 
                                   2888 
                                   2889 ;-------------------------------
                                   2890 ; BASIC: ADCON 0|1 [,divisor]  
                                   2891 ; disable/enanble ADC 
                                   2892 ;-------------------------------
                           000003  2893 	ONOFF=3 
                           000001  2894 	DIVSOR=1
                           000004  2895 	VSIZE=4 
      002649                       2896 power_adc:
      002649 CD 19 C3         [ 4] 2897 	call arg_list 
      00264C A1 02            [ 1] 2898 	cp a,#2	
      00264E 27 12            [ 1] 2899 	jreq 1$
      002650 A1 01            [ 1] 2900 	cp a,#1 
      002652 27 03            [ 1] 2901 	jreq 0$ 
      002654 CC 16 94         [ 2] 2902 	jp syntax_error 
      002657 4F               [ 1] 2903 0$:	clr a 
      002658 5F               [ 1] 2904 	clrw x
      002659                       2905 	_xpush   ; divisor  
      002659 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00265D 90 F7            [ 1]    2     ld (y),a 
      00265F 90 EF 01         [ 2]    3     ldw (1,y),x 
      002662                       2906 1$: _at_next 
      002662 90 E6 03         [ 1]    1     ld a,(3,y)
      002665 93               [ 1]    2     ldw x,y 
      002666 EE 04            [ 2]    3     ldw x,(4,x)
      002668 5D               [ 2] 2907 	tnzw x 
      002669 27 25            [ 1] 2908 	jreq 2$ 
      00266B                       2909 	_xpop
      00266B 90 F6            [ 1]    1     ld a,(y)
      00266D 93               [ 1]    2     ldw x,y 
      00266E EE 01            [ 2]    3     ldw x,(1,x)
      002670 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002674                       2910 	_xdrop  
      002674 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      002678 9F               [ 1] 2911 	ld a,xl
      002679 A4 07            [ 1] 2912 	and a,#7
      00267B 4E               [ 1] 2913 	swap a 
      00267C C7 54 01         [ 1] 2914 	ld ADC_CR1,a
      00267F 72 16 50 CA      [ 1] 2915 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      002683 72 10 54 01      [ 1] 2916 	bset ADC_CR1,#ADC_CR1_ADON 
      002687                       2917 	_usec_dly 7 
      002687 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00268A 5A               [ 2]    2     decw x
      00268B 9D               [ 1]    3     nop 
      00268C 26 FA            [ 1]    4     jrne .-4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      00268E 20 08            [ 2] 2918 	jra 3$
      002690 72 11 54 01      [ 1] 2919 2$: bres ADC_CR1,#ADC_CR1_ADON
      002694 72 17 50 CA      [ 1] 2920 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      002698                       2921 3$:	
      002698 81               [ 4] 2922 	ret
                                   2923 
                                   2924 ;-----------------------------
                                   2925 ; BASIC: ADCREAD (channel)
                                   2926 ; read adc channel {0..5}
                                   2927 ; output:
                                   2928 ;   A 		TK_INTGR 
                                   2929 ;   X 		value 
                                   2930 ;-----------------------------
      002699                       2931 analog_read:
      002699 CD 19 BE         [ 4] 2932 	call func_args 
      00269C A1 01            [ 1] 2933 	cp a,#1 
      00269E 27 03            [ 1] 2934 	jreq 1$
      0026A0 CC 16 94         [ 2] 2935 	jp syntax_error
      0026A3                       2936 1$: _xpop 
      0026A3 90 F6            [ 1]    1     ld a,(y)
      0026A5 93               [ 1]    2     ldw x,y 
      0026A6 EE 01            [ 2]    3     ldw x,(1,x)
      0026A8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026AC A3 00 05         [ 2] 2937 	cpw x,#5 
      0026AF 23 05            [ 2] 2938 	jrule 2$
      0026B1 A6 0A            [ 1] 2939 	ld a,#ERR_BAD_VALUE
      0026B3 CC 16 96         [ 2] 2940 	jp tb_error 
      0026B6 9F               [ 1] 2941 2$: ld a,xl
      0026B7 C7 00 0E         [ 1] 2942 	ld acc8,a 
      0026BA A6 05            [ 1] 2943 	ld a,#5
      0026BC C0 00 0E         [ 1] 2944 	sub a,acc8 
      0026BF C7 54 00         [ 1] 2945 	ld ADC_CSR,a
      0026C2 72 16 54 02      [ 1] 2946 	bset ADC_CR2,#ADC_CR2_ALIGN
      0026C6 72 10 54 01      [ 1] 2947 	bset ADC_CR1,#ADC_CR1_ADON
      0026CA 72 0F 54 00 FB   [ 2] 2948 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0026CF CE 54 04         [ 2] 2949 	ldw x,ADC_DRH
      0026D2 A6 84            [ 1] 2950 	ld a,#TK_INTGR
      0026D4 81               [ 4] 2951 	ret 
                                   2952 
                                   2953 ;-----------------------
                                   2954 ; BASIC: DREAD(pin)
                                   2955 ; Arduino pins 
                                   2956 ; read state of a digital pin 
                                   2957 ; pin# {0..15}
                                   2958 ; output:
                                   2959 ;    A 		TK_INTGR
                                   2960 ;    X      0|1 
                                   2961 ;-------------------------
                           000001  2962 	PINNO=1
                           000001  2963 	VSIZE=1
      0026D5                       2964 digital_read:
      0026D5                       2965 	_vars VSIZE 
      0026D5 52 01            [ 2]    1     sub sp,#VSIZE 
      0026D7 CD 19 BE         [ 4] 2966 	call func_args
      0026DA A1 01            [ 1] 2967 	cp a,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0026DC 27 03            [ 1] 2968 	jreq 1$
      0026DE CC 16 94         [ 2] 2969 	jp syntax_error
      0026E1                       2970 1$: _xpop 
      0026E1 90 F6            [ 1]    1     ld a,(y)
      0026E3 93               [ 1]    2     ldw x,y 
      0026E4 EE 01            [ 2]    3     ldw x,(1,x)
      0026E6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026EA A3 00 0F         [ 2] 2971 	cpw x,#15 
      0026ED 23 05            [ 2] 2972 	jrule 2$
      0026EF A6 0A            [ 1] 2973 	ld a,#ERR_BAD_VALUE
      0026F1 CC 16 96         [ 2] 2974 	jp tb_error 
      0026F4 CD 2C BE         [ 4] 2975 2$:	call select_pin 
      0026F7 6B 01            [ 1] 2976 	ld (PINNO,sp),a
      0026F9 E6 01            [ 1] 2977 	ld a,(GPIO_IDR,x)
      0026FB 0D 01            [ 1] 2978 	tnz (PINNO,sp)
      0026FD 27 05            [ 1] 2979 	jreq 8$
      0026FF 44               [ 1] 2980 3$: srl a 
      002700 0A 01            [ 1] 2981 	dec (PINNO,sp)
      002702 26 FB            [ 1] 2982 	jrne 3$ 
      002704 A4 01            [ 1] 2983 8$: and a,#1 
      002706 5F               [ 1] 2984 	clrw x 
      002707 97               [ 1] 2985 	ld xl,a 
      002708 4F               [ 1] 2986 	clr a 
      002709                       2987 	_drop VSIZE
      002709 5B 01            [ 2]    1     addw sp,#VSIZE 
      00270B 81               [ 4] 2988 	ret
                                   2989 
                                   2990 
                                   2991 ;-----------------------
                                   2992 ; BASIC: DWRITE pin,0|1
                                   2993 ; Arduino pins 
                                   2994 ; write to a digital pin 
                                   2995 ; pin# {0..15}
                                   2996 ; output:
                                   2997 ;    A 		TK_INTGR
                                   2998 ;    X      0|1 
                                   2999 ;-------------------------
                           000001  3000 	PINNO=1
                           000002  3001 	PINVAL=2
                           000002  3002 	VSIZE=2
      00270C                       3003 digital_write:
      00270C                       3004 	_vars VSIZE 
      00270C 52 02            [ 2]    1     sub sp,#VSIZE 
      00270E CD 19 C3         [ 4] 3005 	call arg_list  
      002711 A1 02            [ 1] 3006 	cp a,#2 
      002713 27 03            [ 1] 3007 	jreq 1$
      002715 CC 16 94         [ 2] 3008 	jp syntax_error
      002718                       3009 1$: _xpop 
      002718 90 F6            [ 1]    1     ld a,(y)
      00271A 93               [ 1]    2     ldw x,y 
      00271B EE 01            [ 2]    3     ldw x,(1,x)
      00271D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002721 9F               [ 1] 3010 	ld a,xl 
      002722 6B 02            [ 1] 3011 	ld (PINVAL,sp),a
      002724                       3012 	_xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      002724 90 F6            [ 1]    1     ld a,(y)
      002726 93               [ 1]    2     ldw x,y 
      002727 EE 01            [ 2]    3     ldw x,(1,x)
      002729 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00272D A3 00 0F         [ 2] 3013 	cpw x,#15 
      002730 23 05            [ 2] 3014 	jrule 2$
      002732 A6 0A            [ 1] 3015 	ld a,#ERR_BAD_VALUE
      002734 CC 16 96         [ 2] 3016 	jp tb_error 
      002737 CD 2C BE         [ 4] 3017 2$:	call select_pin 
      00273A 6B 01            [ 1] 3018 	ld (PINNO,sp),a 
      00273C A6 01            [ 1] 3019 	ld a,#1
      00273E 0D 01            [ 1] 3020 	tnz (PINNO,sp)
      002740 27 05            [ 1] 3021 	jreq 4$
      002742 48               [ 1] 3022 3$: sll a
      002743 0A 01            [ 1] 3023 	dec (PINNO,sp)
      002745 26 FB            [ 1] 3024 	jrne 3$
      002747 0D 02            [ 1] 3025 4$: tnz (PINVAL,sp)
      002749 26 05            [ 1] 3026 	jrne 5$
      00274B 43               [ 1] 3027 	cpl a 
      00274C E4 00            [ 1] 3028 	and a,(GPIO_ODR,x)
      00274E 20 02            [ 2] 3029 	jra 8$
      002750 EA 00            [ 1] 3030 5$: or a,(GPIO_ODR,x)
      002752 E7 00            [ 1] 3031 8$: ld (GPIO_ODR,x),a 
      002754                       3032 	_drop VSIZE 
      002754 5B 02            [ 2]    1     addw sp,#VSIZE 
      002756 81               [ 4] 3033 	ret
                                   3034 
                                   3035 
                                   3036 ;-----------------------
                                   3037 ; BASIC: STOP
                                   3038 ; stop progam execution  
                                   3039 ; without resetting pointers 
                                   3040 ; the program is resumed
                                   3041 ; with RUN 
                                   3042 ;-------------------------
      002757                       3043 stop:
      002757 72 00 00 22 02   [ 2] 3044 	btjt flags,#FRUN,2$
      00275C 4F               [ 1] 3045 	clr a
      00275D 81               [ 4] 3046 	ret 
      00275E                       3047 2$:	 
                                   3048 ; create space on cstack to save context 
      00275E AE 27 85         [ 2] 3049 	ldw x,#break_point 
      002761 CD 09 5C         [ 4] 3050 	call puts 
      002764                       3051 	_drop 2 ;drop return address 
      002764 5B 02            [ 2]    1     addw sp,#2 
      002766                       3052 	_vars CTXT_SIZE ; context size 
      002766 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      002768 CD 20 5E         [ 4] 3053 	call save_context 
      00276B AE 16 68         [ 2] 3054 	ldw x,#tib 
      00276E CF 00 04         [ 2] 3055 	ldw basicptr,x
      002771 7F               [ 1] 3056 	clr (x)
      002772 72 5F 00 02      [ 1] 3057 	clr count  
      002776 5F               [ 1] 3058 	clrw x 
      002777 CF 00 00         [ 2] 3059 	ldw in.w,x
      00277A 72 11 00 22      [ 1] 3060 	bres flags,#FRUN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      00277E 72 18 00 22      [ 1] 3061 	bset flags,#FBREAK
      002782 CC 17 3F         [ 2] 3062 	jp interpreter 
      002785 0A 62 72 65 61 6B 20  3063 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3064 
                                   3065 ;-----------------------
                                   3066 ; BASIC: NEW
                                   3067 ; from command line only 
                                   3068 ; free program memory
                                   3069 ; and clear variables 
                                   3070 ;------------------------
      0027A3                       3071 new: 
      0027A3 72 01 00 22 01   [ 2] 3072 	btjf flags,#FRUN,0$ 
      0027A8 81               [ 4] 3073 	ret 
      0027A9                       3074 0$:	
      0027A9 CD 14 AA         [ 4] 3075 	call clear_basic 
      0027AC 81               [ 4] 3076 	ret 
                                   3077 
                                   3078 ;-----------------------------------
                                   3079 ; erase program at specified address
                                   3080 ; keep signature and size fields. 
                                   3081 ; signature replaced by "XX"
                                   3082 ; input:
                                   3083 ;    X    address 
                                   3084 ;-----------------------------------
                           000001  3085 	ADDR=1    ; program address
                           000003  3086 	PRG_SIZE=3    ; program size 
                           000005  3087 	BLOCKS=5 ; blocks to erase 
                           000006  3088 	VSIZE=6
      0027AD                       3089 erase_program:
      0027AD 89               [ 2] 3090 	pushw x 
      0027AE CD 18 14         [ 4] 3091 	call skip_string 
      0027B1 85               [ 2] 3092 	popw x 
      0027B2 CD 31 FA         [ 4] 3093 	call search_program 
      0027B5 27 4A            [ 1] 3094 	jreq 9$
      0027B7 CD 06 E7         [ 4] 3095 	call move_erase_to_ram
      0027BA 72 5F 00 18      [ 1] 3096 	clr farptr 
      0027BE                       3097 	_vars VSIZE 
      0027BE 52 06            [ 2]    1     sub sp,#VSIZE 
      0027C0 1D 00 04         [ 2] 3098 1$:	subw x,#4 
      0027C3 1F 01            [ 2] 3099 	ldw (ADDR,sp),x
      0027C5 EE 02            [ 2] 3100 	ldw x,(2,x)
      0027C7 1F 03            [ 2] 3101 	ldw (PRG_SIZE,sp),x
      0027C9 A6 80            [ 1] 3102 	ld a,#BLOCK_SIZE 
      0027CB 62               [ 2] 3103 	div x,a 
      0027CC 4D               [ 1] 3104 	tnz a 
      0027CD 27 01            [ 1] 3105 	jreq 2$ 
      0027CF 5C               [ 1] 3106 	incw x 
      0027D0 1F 05            [ 2] 3107 2$:	ldw (BLOCKS,sp),x 
      0027D2 1E 01            [ 2] 3108 	ldw x,(ADDR,sp)
      0027D4 CF 00 19         [ 2] 3109 	ldw ptr16,x 
      0027D7 CD 07 65         [ 4] 3110 3$:	call block_erase
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0027DA AE 00 80         [ 2] 3111 	ldw x,#BLOCK_SIZE 
      0027DD CD 08 60         [ 4] 3112 	call incr_farptr
      0027E0 1E 05            [ 2] 3113 	ldw x,(BLOCKS,sp)
      0027E2 5A               [ 2] 3114 	decw x 
      0027E3 1F 05            [ 2] 3115 	ldw (BLOCKS,sp),x 
      0027E5 26 F0            [ 1] 3116 	jrne 3$ 
                                   3117 ; write XX and size at addr 
      0027E7 1E 01            [ 2] 3118 	ldw x,(ADDR,sp)
      0027E9 CF 00 19         [ 2] 3119 	ldw ptr16,x 
      0027EC A6 58            [ 1] 3120 	ld a,#'X 
      0027EE 5F               [ 1] 3121 	clrw x 
      0027EF CD 07 8B         [ 4] 3122 	call write_byte 
      0027F2 CD 07 8B         [ 4] 3123 	call write_byte 
      0027F5 7B 03            [ 1] 3124 	ld a,(PRG_SIZE,sp)
      0027F7 CD 07 8B         [ 4] 3125 	call write_byte 
      0027FA 7B 04            [ 1] 3126 	ld a,(PRG_SIZE+1,sp)
      0027FC CD 07 8B         [ 4] 3127 	call write_byte 
      0027FF                       3128 	_drop VSIZE 
      0027FF 5B 06            [ 2]    1     addw sp,#VSIZE 
      002801                       3129 9$:	
      002801 81               [ 4] 3130 	ret 
                                   3131 
                                   3132 ;-----------------------------------
                                   3133 ; BASIC: ERASE \E | \F || address
                                   3134 ; erase all block in range from 
                                   3135 ;  'app_space' to FLASH end (0x27fff)
                                   3136 ;  or all EEPROM 
                                   3137 ; that contains a non zero byte. 
                                   3138 ; if the argument is an address  
                                   3139 ; mark the program at this address 
                                   3140 ; as erased. Erase the blocks 
                                   3141 ; replace signature by 'XX' and 
                                   3142 ; keep size field.  
                                   3143 ;-----------------------------------
                           000001  3144 	LIMIT=1 
                           000003  3145 	VSIZE = 3 
      002802                       3146 cmd_erase:
      002802 72 01 00 22 05   [ 2] 3147 	btjf flags,#FRUN,eras0
      002807 A6 07            [ 1] 3148 	ld a,#ERR_CMD_ONLY
      002809 CC 16 96         [ 2] 3149 	jp tb_error 
      00280C                       3150 eras0:	
      00280C 72 5F 00 18      [ 1] 3151 	clr farptr 
      002810 CD 17 FB         [ 4] 3152 	call next_token
      002813 A1 03            [ 1] 3153 	cp a,#TK_LABEL 
      002815 27 96            [ 1] 3154 	jreq erase_program  
      002817                       3155 	_vars VSIZE 
      002817 52 03            [ 2]    1     sub sp,#VSIZE 
      002819 A1 04            [ 1] 3156 	cp a,#TK_CHAR 
      00281B 27 03            [ 1] 3157 	jreq 0$ 
      00281D CC 16 94         [ 2] 3158 	jp syntax_error
      002820 CD 18 3D         [ 4] 3159 0$: call get_char 
      002823 A4 DF            [ 1] 3160 	and a,#0XDF 
      002825 A1 45            [ 1] 3161 	cp a,#'E
      002827 26 0C            [ 1] 3162 	jrne 1$
      002829 AE 40 00         [ 2] 3163 	ldw x,#EEPROM_BASE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      00282C CF 00 19         [ 2] 3164 	ldw farptr+1,x 
      00282F AE 47 FF         [ 2] 3165 	ldw x,#EEPROM_END
      002832 4F               [ 1] 3166 	clr a 
      002833 20 15            [ 2] 3167 	jra 3$ 
      002835 A1 46            [ 1] 3168 1$: cp a,#'F 
      002837 27 06            [ 1] 3169 	jreq 2$
      002839 AE 15 9C         [ 2] 3170 	ldw x,#err_bad_value
      00283C CC 16 96         [ 2] 3171 	jp tb_error
      00283F                       3172 2$:
      00283F AE 38 80         [ 2] 3173 	ldw x,#app_space  
      002842 CF 00 19         [ 2] 3174 	ldw farptr+1,x 
      002845 A6 02            [ 1] 3175 	ld a,#(FLASH_END>>16)&0XFF 
      002847 AE 7F FF         [ 2] 3176 	ldw x,#FLASH_END&0xffff
      00284A                       3177 3$:
      00284A 6B 01            [ 1] 3178 	ld (LIMIT,sp),a 
      00284C 1F 02            [ 2] 3179 	ldw (LIMIT+1,sp),x 
                                   3180 ; operation done from RAM
                                   3181 ; copy code to RAM in tib   
      00284E CD 06 E7         [ 4] 3182 	call move_erase_to_ram
      002851                       3183 4$:	 
      002851 CD 08 6E         [ 4] 3184     call scan_block 
      002854 27 08            [ 1] 3185 	jreq 5$  ; block already erased 
      002856 A6 45            [ 1] 3186     ld a,#'E 
      002858 CD 08 FF         [ 4] 3187     call putc 
      00285B CD 07 65         [ 4] 3188 	call block_erase   
                                   3189 ; this block is clean, next  
      00285E AE 00 80         [ 2] 3190 5$:	ldw x,#BLOCK_SIZE
      002861 CD 08 60         [ 4] 3191 	call incr_farptr
                                   3192 ; check limit, 24 bit substraction  	
      002864 7B 01            [ 1] 3193 	ld a,(LIMIT,sp)
      002866 1E 02            [ 2] 3194 	ldw x,(LIMIT+1,sp)
      002868 72 B0 00 19      [ 2] 3195 	subw x,farptr+1
      00286C C2 00 18         [ 1] 3196 	sbc a,farptr 
      00286F 22 E0            [ 1] 3197 	jrugt 4$ 
      002871 CD 14 AA         [ 4] 3198 9$: call clear_basic
      002874 1E 02            [ 2] 3199 	ldw x,(LIMIT+1,sp)
      002876 A3 47 FF         [ 2] 3200 	cpw x,#EEPROM_END
      002879 26 03            [ 1] 3201 	jrne 10$
      00287B CD 1D 31         [ 4] 3202 	call func_eefree 
      00287E                       3203 10$:
      00287E                       3204 	_drop VSIZE 
      00287E 5B 03            [ 2]    1     addw sp,#VSIZE 
      002880 81               [ 4] 3205 	ret 
                                   3206 	
                                   3207 
                                   3208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3209 ;  check for application signature 
                                   3210 ; input:
                                   3211 ;	x       address to check 
                                   3212 ; output:
                                   3213 ;   Z      1  signature present 
                                   3214 ;          0 not app signature  
                                   3215 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002881                       3216 qsign: 
      002881 89               [ 2] 3217 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



                                   3218 ; align to block 
      002882 9F               [ 1] 3219 	ld a,xl 
      002883 A4 80            [ 1] 3220 	and a,#BLOCK_SIZE 
      002885 97               [ 1] 3221 	ld xl,a 
      002886 FE               [ 2] 3222 	ldw x,(x)
      002887 C3 29 99         [ 2] 3223 	cpw x,SIGNATURE ; "TB" 
      00288A 85               [ 2] 3224 	popw x 
      00288B 81               [ 4] 3225 	ret 
                                   3226 
                                   3227 ;--------------------------------------
                                   3228 ;  fill write buffer 
                                   3229 ;  input:
                                   3230 ;    y  point to output buffer 
                                   3231 ;    x  point to source 
                                   3232 ;    a  bytes to write in buffer 
                                   3233 ;  output:
                                   3234 ;    y   += A 
                                   3235 ;    X   += A 
                                   3236 ;    A   0 
                                   3237 ;---------------------------------------
      00288C                       3238 fill_write_buffer:
      00288C 88               [ 1] 3239 	push a 
      00288D 4D               [ 1] 3240 	tnz a 
      00288E 27 0A            [ 1] 3241 	jreq 9$ 
      002890 F6               [ 1] 3242 1$: ld a,(x)
      002891 5C               [ 1] 3243 	incw x 
      002892 90 F7            [ 1] 3244 	ld (y),a 
      002894 90 5C            [ 1] 3245 	incw y 
      002896 0A 01            [ 1] 3246 	dec (1,sp) 
      002898 26 F6            [ 1] 3247 	jrne 1$ 
      00289A 84               [ 1] 3248 9$:	pop a 
      00289B 81               [ 4] 3249     ret 	
                                   3250 
                                   3251 ;--------------------------------------
                                   3252 ;  fill pad buffer with zero 
                                   3253 ;  input:
                                   3254 ;	none 
                                   3255 ;  output:
                                   3256 ;    y     buffer address  
                                   3257 ;--------------------------------------
      00289C                       3258 clear_block_buffer:
      00289C 88               [ 1] 3259 	push a 
      00289D 90 AE 16 B8      [ 2] 3260 	ldw y,#block_buffer 
      0028A1 90 89            [ 2] 3261 	pushw y
      0028A3 A6 80            [ 1] 3262 	ld a,#BLOCK_SIZE   
      0028A5 90 7F            [ 1] 3263 1$:	clr (y)
      0028A7 90 5C            [ 1] 3264 	incw y
      0028A9 4A               [ 1] 3265 	dec a  
      0028AA 26 F9            [ 1] 3266 	jrne 1$ 	
      0028AC 90 85            [ 2] 3267 9$: popw y 
      0028AE 84               [ 1] 3268 	pop a 			
      0028AF 81               [ 4] 3269 	ret 
                                   3270 
                                   3271 
                                   3272 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                                   3273 ;  search  a free space space that 
                                   3274 ;  fit program size 
                                   3275 ; input:
                                   3276 ;    X    program size 
                                   3277 ; output:
                                   3278 ;    X    address | 0 
                                   3279 ;------------------------------------
                           000001  3280 	PG_SIZE=1 
                           000002  3281 	VSIZE=2 
      0028B0                       3282 search_fit:
      0028B0 89               [ 2] 3283 	pushw x; PG_SIZE 
      0028B1 AE 38 80         [ 2] 3284 	ldw x,#app_space 
      0028B4 CD 29 9D         [ 4] 3285 1$:	call is_erased 
      0028B7 27 0D            [ 1] 3286 	jreq 4$
      0028B9 F6               [ 1] 3287 	ld a,(x)
      0028BA EA 01            [ 1] 3288 	or a,(1,x)
      0028BC 27 23            [ 1] 3289 	jreq 9$ ; free space 
      0028BE CD 29 A8         [ 4] 3290 2$:	call skip_to_next
      0028C1 5D               [ 2] 3291 	tnzw x 
      0028C2 26 F0            [ 1] 3292 	jrne 1$
      0028C4 20 1B            [ 2] 3293 	jra 9$
      0028C6                       3294 4$: ; erased program 
                                   3295     ; does it fit? 
      0028C6 CF 00 0D         [ 2] 3296 	ldw acc16,x 
      0028C9 EE 02            [ 2] 3297 	ldw x,(2,x) ; size erased program
                                   3298 ; top multiple of BLOCK_SIZE 
      0028CB 1C 00 04         [ 2] 3299 	addw x,#4 
      0028CE 1C 00 7F         [ 2] 3300 	addw x,#BLOCK_SIZE-1 
      0028D1 9F               [ 1] 3301 	ld a,xl 
      0028D2 A4 80            [ 1] 3302 	and a,#BLOCK_SIZE 
      0028D4 97               [ 1] 3303 	ld xl,a  
      0028D5 13 01            [ 2] 3304 	cpw x,(1,sp) ; size program to save 
      0028D7 24 05            [ 1] 3305 	jruge 8$   ; fit 
      0028D9 CE 00 0D         [ 2] 3306 	ldw x,acc16 
      0028DC 20 E0            [ 2] 3307 	jra 2$ 
      0028DE CE 00 0D         [ 2] 3308 8$: ldw x,acc16 ; fit in this one 	
      0028E1                       3309 9$:	_drop VSIZE 
      0028E1 5B 02            [ 2]    1     addw sp,#VSIZE 
      0028E3 81               [ 4] 3310 	ret  
                                   3311 
                                   3312 ;-------------------------
                                   3313 ; erase header and 
                                   3314 ; size fields 
                                   3315 ; input: 
                                   3316 ;    X    program address 
                                   3317 ; output:
                                   3318 ;    X    unchanged 
                                   3319 ;-------------------------
                           000001  3320 	COUNT=1 
      0028E4                       3321 erase_header:
      0028E4 89               [ 2] 3322 	pushw x 
      0028E5 4B 04            [ 1] 3323 	push #4 ; COUNT 
      0028E7 72 5F 00 18      [ 1] 3324 	clr farptr 
      0028EB CF 00 19         [ 2] 3325 	ldw ptr16,x 
      0028EE 4F               [ 1] 3326 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0028EF 5F               [ 1] 3327 	clrw x 
      0028F0 CD 07 8B         [ 4] 3328 1$:	call write_byte 
      0028F3 0A 01            [ 1] 3329 	dec (COUNT,sp)
      0028F5 26 F9            [ 1] 3330 	jrne 1$
      0028F7                       3331 	_drop 1 
      0028F7 5B 01            [ 2]    1     addw sp,#1 
      0028F9 85               [ 2] 3332 	popw x 
      0028FA CF 00 19         [ 2] 3333 	ldw ptr16,x 
      0028FD 81               [ 4] 3334 	ret 
                                   3335 
                                   3336 ;---------------------------------------
                                   3337 ; BASIC: SAVE
                                   3338 ; write application from RAM to FLASH
                                   3339 ; at UFLASH address
                                   3340 ;--------------------------------------
                           000001  3341 	XTEMP=1
                           000003  3342 	COUNT=3  ; last count bytes written 
                           000004  3343 	CNT_LO=4 ; count low byte 
                           000005  3344 	TOWRITE=5 ; how bytes left to write  
                           000006  3345 	VSIZE=6 
      0028FE                       3346 cmd_save:
      0028FE 89               [ 2] 3347 	pushw x 
      0028FF 90 89            [ 2] 3348 	pushw y 
      002901                       3349 	_vars VSIZE
      002901 52 06            [ 2]    1     sub sp,#VSIZE 
      002903 CD 1E 4B         [ 4] 3350 	call prog_size 
      002906 26 03            [ 1] 3351 	jrne 0$ 
      002908 CC 29 93         [ 2] 3352 	jp 9$ ; no program to save 
      00290B 1F 05            [ 2] 3353 0$:	ldw (TOWRITE,sp),x ; program size
      00290D 72 5F 00 18      [ 1] 3354 	clr farptr 
      002911 CD 28 B0         [ 4] 3355 	call search_fit
      002914 CF 00 19         [ 2] 3356 	ldw ptr16,x 
      002917 AE FF FF         [ 2] 3357 	ldw x,#0xFFFF
      00291A 72 B0 00 19      [ 2] 3358 	subw x,ptr16 ; free flash 
      00291E 1D 00 04         [ 2] 3359 	subw x,#4 ; signature and size field 
      002921 13 05            [ 2] 3360 	cpw x,(TOWRITE,sp)
      002923 24 05            [ 1] 3361 	jruge 1$
      002925 A6 01            [ 1] 3362 	ld a,#ERR_MEM_FULL
      002927 CC 16 96         [ 2] 3363 	jp tb_error 
      00292A                       3364 1$: ; check if header bytes are zero's 
      00292A CE 00 19         [ 2] 3365 	ldw x,ptr16 
      00292D F6               [ 1] 3366 	ld a,(x)
      00292E EA 01            [ 1] 3367 	or a,(1,x)
      002930 EA 02            [ 1] 3368 	or a,(2,x)
      002932 EA 03            [ 1] 3369 	or a,(3,x)
      002934 27 03            [ 1] 3370 	jreq 2$
      002936 CD 28 E4         [ 4] 3371 	call erase_header ; preserve X and farptr 
      002939                       3372 2$: 
                                   3373 ; block programming flash
                                   3374 ; must be done from RAM
                                   3375 ; moved in tib  
      002939 CD 07 27         [ 4] 3376 	call move_prg_to_ram
                                   3377 ; initialize written bytes count  
      00293C 0F 03            [ 1] 3378 	clr (COUNT,sp)
                                   3379 ; first bock 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



                                   3380 ; containt signature 2 bytes 
                                   3381 ; and size 	2 bytes 
                                   3382 ; use Y as pointer to block_buffer
      00293E CD 28 9C         [ 4] 3383 	call clear_block_buffer ; -- y=*block_buffer	
                                   3384 ; write signature
      002941 CE 29 99         [ 2] 3385 	ldw x,SIGNATURE ; "TB" 
      002944 90 FF            [ 2] 3386 	ldw (y),x 
      002946 72 A9 00 02      [ 2] 3387 	addw y,#2
      00294A 1E 05            [ 2] 3388 	ldw x,(TOWRITE,sp)
      00294C 90 FF            [ 2] 3389 	ldw (y),x
      00294E 72 A9 00 02      [ 2] 3390 	addw y,#2   
      002952 A6 7C            [ 1] 3391 	ld a,#(BLOCK_SIZE-4)
      002954 A3 00 7C         [ 2] 3392 	cpw x,#(BLOCK_SIZE-4) 
      002957 22 01            [ 1] 3393 	jrugt 3$
      002959 9F               [ 1] 3394 	ld a,xl 
      00295A 6B 04            [ 1] 3395 3$:	ld (CNT_LO,sp),a   
      00295C CE 00 1B         [ 2] 3396 	ldw x,txtbgn 
      00295F 1F 01            [ 2] 3397 	ldw (XTEMP,sp),x 
      002961                       3398 32$: 
      002961 1E 01            [ 2] 3399 	ldw x,(XTEMP,sp)
      002963 7B 04            [ 1] 3400 	ld a,(CNT_LO,sp)
      002965 CD 28 8C         [ 4] 3401 	call fill_write_buffer 
      002968 1F 01            [ 2] 3402 	ldw (XTEMP,sp),x 
      00296A AE 16 B8         [ 2] 3403 	ldw x,#block_buffer
      00296D CD 07 41         [ 4] 3404 	call write_buffer
      002970 AE 00 80         [ 2] 3405 	ldw x,#BLOCK_SIZE 
      002973 CD 08 60         [ 4] 3406 	call incr_farptr  
                                   3407 ; following blocks 
      002976 1E 01            [ 2] 3408 	ldw x,(XTEMP,sp)
      002978 C3 00 1D         [ 2] 3409 	cpw x,txtend 
      00297B 24 16            [ 1] 3410 	jruge 9$ 
      00297D 1E 05            [ 2] 3411 	ldw x,(TOWRITE,sp)
      00297F 72 F0 03         [ 2] 3412 	subw x,(COUNT,sp)
      002982 1F 05            [ 2] 3413 	ldw (TOWRITE,sp),x 
      002984 A6 80            [ 1] 3414 	ld a,#BLOCK_SIZE 
      002986 A3 00 80         [ 2] 3415 	cpw x,#BLOCK_SIZE 
      002989 24 01            [ 1] 3416 	jruge 4$ 
      00298B 9F               [ 1] 3417 	ld a,xl 
      00298C 6B 04            [ 1] 3418 4$:	ld (CNT_LO,sp),a 
      00298E CD 28 9C         [ 4] 3419 	call clear_block_buffer 
      002991 20 CE            [ 2] 3420 	jra 32$ 
      002993                       3421 9$:	_drop VSIZE 
      002993 5B 06            [ 2]    1     addw sp,#VSIZE 
      002995 90 85            [ 2] 3422     popw y 
      002997 85               [ 2] 3423 	popw x 
      002998 81               [ 4] 3424 	ret 
                                   3425 
      002999 54 42                 3426 SIGNATURE: .ascii "TB"
      00299B 58 58                 3427 ERASED: .ascii "XX" 
                                   3428 
                                   3429 ;---------------------
                                   3430 ; check if there is 
                                   3431 ; an erased program 
                                   3432 ; at this address 
                                   3433 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   3434 ;    X    address 
                                   3435 ; output:
                                   3436 ;    Z    Set=erased program 
                                   3437 ;--------------------
      00299D                       3438 is_erased:
      00299D 89               [ 2] 3439 	pushw x 
                                   3440 ; align to BLOCK 
      00299E 9F               [ 1] 3441 	ld a,xl 
      00299F A4 80            [ 1] 3442 	and a,#BLOCK_SIZE 
      0029A1 97               [ 1] 3443 	ld xl,a 
      0029A2 FE               [ 2] 3444 	ldw x,(x)
      0029A3 C3 29 9B         [ 2] 3445 	cpw x,ERASED 
      0029A6 85               [ 2] 3446 	popw x 
      0029A7 81               [ 4] 3447 	ret 
                                   3448 
                                   3449 ;----------------------------
                                   3450 ;  skip to next program
                                   3451 ;  block 
                                   3452 ; input:
                                   3453 ;    X   actual program addr
                                   3454 ; output:
                                   3455 ;    X   next block 
                                   3456 ;        after program 
                                   3457 ;----------------------------
      0029A8                       3458 skip_to_next:
                                   3459 ; align to block 
      0029A8 9F               [ 1] 3460 	ld a,xl 
      0029A9 A4 80            [ 1] 3461 	and a,#BLOCK_SIZE 
      0029AB 97               [ 1] 3462 	ld xl,a 
      0029AC CF 00 0D         [ 2] 3463 	ldw acc16,x 
      0029AF EE 02            [ 2] 3464 	ldw x,(2,x)
      0029B1 72 BB 00 0D      [ 2] 3465 	addw x,acc16 ; blk_addr+prg_size 
      0029B5 1C 00 04         [ 2] 3466 	addw x,#4 ; +header fields 
                                   3467 ; align to next block 
      0029B8 1C 00 7F         [ 2] 3468 	addw x,#BLOCK_SIZE-1 
      0029BB 9F               [ 1] 3469 	ld a,xl 
      0029BC A4 80            [ 1] 3470 	and a,#0x80 
      0029BE 97               [ 1] 3471 	ld xl,a  
      0029BF 81               [ 4] 3472 	ret 
                                   3473 
                                   3474 
                                   3475 ;---------------------
                                   3476 ; BASIC: DIR 
                                   3477 ; list programs saved 
                                   3478 ; in flash 
                                   3479 ;--------------------
                           000001  3480 	XTEMP=1 
      0029C0                       3481 cmd_dir:
      0029C0 AE 38 80         [ 2] 3482 	ldw x,#app_space 
      0029C3 89               [ 2] 3483 	pushw x 
      0029C4                       3484 1$: 
      0029C4 CD 28 81         [ 4] 3485 	call qsign 
      0029C7 26 3B            [ 1] 3486 	jrne 4$
      0029C9 1C 00 04         [ 2] 3487 	addw x,#4
      0029CC 35 10 00 0A      [ 1] 3488 	mov base,#16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      0029D0 CD 18 43         [ 4] 3489 	call prt_i16
      0029D3 A6 20            [ 1] 3490 	ld a,#SPACE 
      0029D5 CD 08 FF         [ 4] 3491 	call putc 
      0029D8 1E 01            [ 2] 3492 	ldw x,(1,sp)
      0029DA EE 02            [ 2] 3493 	ldw x,(2,x)
      0029DC 35 0A 00 0A      [ 1] 3494 	mov base,#10  
      0029E0 CD 18 43         [ 4] 3495 	call prt_i16 
      0029E3 AE 1E B5         [ 2] 3496 	ldw x,#STR_BYTES
      0029E6 CD 09 5C         [ 4] 3497 	call puts
      0029E9 A6 2C            [ 1] 3498 	ld a,#', 
      0029EB CD 08 FF         [ 4] 3499 	call putc
      0029EE 1E 01            [ 2] 3500 	ldw x,(1,sp)
      0029F0 1C 00 08         [ 2] 3501 	addw x,#8
      0029F3 CD 09 5C         [ 4] 3502 	call puts 
      0029F6 A6 0D            [ 1] 3503 	ld a,#CR 
      0029F8 CD 08 FF         [ 4] 3504 	call putc
      0029FB 1E 01            [ 2] 3505 	ldw x,(1,sp)
      0029FD CD 29 A8         [ 4] 3506 3$:	call skip_to_next
      002A00 1F 01            [ 2] 3507 	ldw (1,sp),x 
      002A02 20 C0            [ 2] 3508 	jra 1$
      002A04                       3509 4$: ; check if it is an erased program 
      002A04 CD 29 9D         [ 4] 3510 	call is_erased 
      002A07 27 F4            [ 1] 3511 	jreq 3$ 
      002A09                       3512 8$: ; done 
      002A09                       3513 	_drop 2 
      002A09 5B 02            [ 2]    1     addw sp,#2 
      002A0B 81               [ 4] 3514 	ret 
                                   3515 
                                   3516 ;---------------------
                                   3517 ; BASIC: WRITE expr1,expr2|char|string[,expr|char|string]* 
                                   3518 ; write 1 or more byte to FLASH or EEPROM
                                   3519 ; starting at address  
                                   3520 ; input:
                                   3521 ;   expr1  	is address 
                                   3522 ;   expr2,...,exprn   are bytes to write
                                   3523 ; output:
                                   3524 ;   none 
                                   3525 ;---------------------
      002A0C                       3526 write:
      002A0C CD 1B 05         [ 4] 3527 	call expression
      002A0F A1 84            [ 1] 3528 	cp a,#TK_INTGR 
      002A11 27 03            [ 1] 3529 	jreq 0$
      002A13 CC 16 94         [ 2] 3530 	jp syntax_error
      002A16                       3531 0$: _xpop 
      002A16 90 F6            [ 1]    1     ld a,(y)
      002A18 93               [ 1]    2     ldw x,y 
      002A19 EE 01            [ 2]    3     ldw x,(1,x)
      002A1B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A1F C7 00 18         [ 1] 3532 	ld farptr,a 
      002A22 CF 00 19         [ 2] 3533 	ldw ptr16,x 
      002A25                       3534 1$:	
      002A25 CD 17 FB         [ 4] 3535 	call next_token 
      002A28 A1 08            [ 1] 3536 	cp a,#TK_COMMA 
      002A2A 27 02            [ 1] 3537 	jreq 2$ 
      002A2C 20 46            [ 2] 3538 	jra 9$ ; no more data 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      002A2E CD 17 FB         [ 4] 3539 2$:	call next_token 
      002A31 A1 04            [ 1] 3540 	cp a,#TK_CHAR 
      002A33 27 23            [ 1] 3541 	jreq 4$ 
      002A35 A1 02            [ 1] 3542 	cp a,#TK_QSTR
      002A37 27 2A            [ 1] 3543 	jreq 6$
      002A39                       3544 	_unget_token 
      002A39 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002A3E CD 1B 05         [ 4] 3545 	call expression
      002A41 A1 84            [ 1] 3546 	cp a,#TK_INTGR
      002A43 27 03            [ 1] 3547 	jreq 3$
      002A45 CC 16 94         [ 2] 3548 	jp syntax_error
      002A48                       3549 3$:	_xpop 
      002A48 90 F6            [ 1]    1     ld a,(y)
      002A4A 93               [ 1]    2     ldw x,y 
      002A4B EE 01            [ 2]    3     ldw x,(1,x)
      002A4D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A51 9F               [ 1] 3550 	ld a,xl 
      002A52 5F               [ 1] 3551 	clrw x 
      002A53 CD 07 8B         [ 4] 3552 	call write_byte
      002A56 20 CD            [ 2] 3553 	jra 1$ 
      002A58                       3554 4$: ; write character 
      002A58 F6               [ 1] 3555 	ld a,(x)
      002A59 72 5C 00 01      [ 1] 3556 	inc in 
      002A5D 5F               [ 1] 3557 	clrw x 
      002A5E CD 07 8B         [ 4] 3558 	call write_byte 
      002A61 20 C2            [ 2] 3559 	jra 1$ 
      002A63                       3560 6$: ; write string 
      002A63 89               [ 2] 3561 	pushw x 
      002A64 F6               [ 1] 3562 	ld a,(x)
      002A65 72 5C 00 01      [ 1] 3563 	inc in 
      002A69 5F               [ 1] 3564 	clrw x 
      002A6A CD 07 8B         [ 4] 3565 	call write_byte 
      002A6D 85               [ 2] 3566 	popw x 
      002A6E F6               [ 1] 3567 	ld a,(x)
      002A6F 27 B4            [ 1] 3568 	jreq 1$
      002A71 5C               [ 1] 3569 	incw x 
      002A72 20 EF            [ 2] 3570 	jra 6$ 	
      002A74                       3571 9$:
      002A74 81               [ 4] 3572 	ret 
                                   3573 
                                   3574 
                                   3575 ;---------------------
                                   3576 ;BASIC: CHAR(expr)
                                   3577 ; évaluate expression 
                                   3578 ; and take the 7 least 
                                   3579 ; bits as ASCII character
                                   3580 ; output: 
                                   3581 ; 	A char 
                                   3582 ;---------------------
      002A75                       3583 func_char:
      002A75 CD 19 BE         [ 4] 3584 	call func_args 
      002A78 A1 01            [ 1] 3585 	cp a,#1
      002A7A 27 03            [ 1] 3586 	jreq 1$
      002A7C CC 16 94         [ 2] 3587 	jp syntax_error
      002A7F                       3588 1$:	_xpop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      002A7F 90 F6            [ 1]    1     ld a,(y)
      002A81 93               [ 1]    2     ldw x,y 
      002A82 EE 01            [ 2]    3     ldw x,(1,x)
      002A84 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A88 9F               [ 1] 3589 	ld a,xl
      002A89 A4 7F            [ 1] 3590 	and a,#0x7f 
      002A8B 81               [ 4] 3591 	ret
                                   3592 
                                   3593 ;---------------------
                                   3594 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3595 ; extract first character 
                                   3596 ; of string argument 
                                   3597 ; output:
                                   3598 ;    A:X    int24 
                                   3599 ;---------------------
      002A8C                       3600 ascii:
      002A8C A6 06            [ 1] 3601 	ld a,#TK_LPAREN
      002A8E CD 19 B1         [ 4] 3602 	call expect 
      002A91 CD 17 FB         [ 4] 3603 	call next_token 
      002A94 A1 02            [ 1] 3604 	cp a,#TK_QSTR 
      002A96 27 0E            [ 1] 3605 	jreq 1$
      002A98 A1 04            [ 1] 3606 	cp a,#TK_CHAR 
      002A9A 27 12            [ 1] 3607 	jreq 2$ 
      002A9C A1 82            [ 1] 3608 	cp a,#TK_CFUNC 
      002A9E 27 03            [ 1] 3609 	jreq 0$
      002AA0 CC 16 94         [ 2] 3610 	jp syntax_error
      002AA3                       3611 0$: ; cfunc 
      002AA3 FD               [ 4] 3612 	call (x)
      002AA4 20 0B            [ 2] 3613 	jra 3$
      002AA6                       3614 1$: ; quoted string 
      002AA6 F6               [ 1] 3615 	ld a,(x)
      002AA7 88               [ 1] 3616 	push a  
      002AA8 CD 18 14         [ 4] 3617 	call skip_string
      002AAB 84               [ 1] 3618 	pop a  	
      002AAC 20 03            [ 2] 3619 	jra 3$ 
      002AAE                       3620 2$: ; character 
      002AAE CD 18 3D         [ 4] 3621 	call get_char 
      002AB1 5F               [ 1] 3622 3$:	clrw x 
      002AB2 02               [ 1] 3623 	rlwa x   
      002AB3                       3624 4$:	_xpush  
      002AB3 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002AB7 90 F7            [ 1]    2     ld (y),a 
      002AB9 90 EF 01         [ 2]    3     ldw (1,y),x 
      002ABC A6 07            [ 1] 3625 	ld a,#TK_RPAREN 
      002ABE CD 19 B1         [ 4] 3626 	call expect
      002AC1                       3627 9$:	
      002AC1                       3628 	_xpop  
      002AC1 90 F6            [ 1]    1     ld a,(y)
      002AC3 93               [ 1]    2     ldw x,y 
      002AC4 EE 01            [ 2]    3     ldw x,(1,x)
      002AC6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ACA 81               [ 4] 3629 	ret 
                                   3630 
                                   3631 ;---------------------
                                   3632 ;BASIC: KEY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



                                   3633 ; wait for a character 
                                   3634 ; received from STDIN 
                                   3635 ; input:
                                   3636 ;	none 
                                   3637 ; output:
                                   3638 ;	a	 character 
                                   3639 ;---------------------
      002ACB                       3640 key:
      002ACB CD 09 0F         [ 4] 3641 	call getc 
      002ACE 81               [ 4] 3642 	ret
                                   3643 
                                   3644 ;----------------------
                                   3645 ; BASIC: QKEY
                                   3646 ; Return true if there 
                                   3647 ; is a character in 
                                   3648 ; waiting in STDIN 
                                   3649 ; input:
                                   3650 ;  none 
                                   3651 ; output:
                                   3652 ;   A     0|-1
                                   3653 ;-----------------------
      002ACF                       3654 qkey:: 
      002ACF 5F               [ 1] 3655 	clrw x 
      002AD0 C6 00 2E         [ 1] 3656 	ld a,rx1_head
      002AD3 C0 00 2F         [ 1] 3657 	sub a,rx1_tail 
      002AD6 27 03            [ 1] 3658 	jreq 9$ 
      002AD8 53               [ 2] 3659 	cplw x
      002AD9 A6 FF            [ 1] 3660 	ld a,#255    
      002ADB                       3661 9$: 
      002ADB 81               [ 4] 3662 	ret 
                                   3663 
                                   3664 ;---------------------
                                   3665 ; BASIC: GPIO(port,reg)
                                   3666 ; return gpio register address 
                                   3667 ; expr {PORTA..PORTI}
                                   3668 ; input:
                                   3669 ;   none 
                                   3670 ; output:
                                   3671 ;   A:X 	gpio register address
                                   3672 ;----------------------------
                                   3673 ;	N=PORT
                                   3674 ;	T=REG 
      002ADC                       3675 gpio:
      002ADC CD 19 BE         [ 4] 3676 	call func_args 
      002ADF A1 02            [ 1] 3677 	cp a,#2
      002AE1 27 03            [ 1] 3678 	jreq 1$
      002AE3 CC 16 94         [ 2] 3679 	jp syntax_error  
      002AE6                       3680 1$:	_at_next 
      002AE6 90 E6 03         [ 1]    1     ld a,(3,y)
      002AE9 93               [ 1]    2     ldw x,y 
      002AEA EE 04            [ 2]    3     ldw x,(4,x)
      002AEC A3 50 00         [ 2] 3681 	cpw x,#PA_BASE 
      002AEF 2B 16            [ 1] 3682 	jrmi bad_port
      002AF1 A3 50 29         [ 2] 3683 	cpw x,#PI_BASE+1 
      002AF4 2A 11            [ 1] 3684 	jrpl bad_port
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      002AF6 89               [ 2] 3685 	pushw x 
      002AF7                       3686 	_xpop
      002AF7 90 F6            [ 1]    1     ld a,(y)
      002AF9 93               [ 1]    2     ldw x,y 
      002AFA EE 01            [ 2]    3     ldw x,(1,x)
      002AFC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B00 72 FB 01         [ 2] 3687 	addw x,(1,sp)
      002B03                       3688 	_drop 2 
      002B03 5B 02            [ 2]    1     addw sp,#2 
      002B05 4F               [ 1] 3689 	clr a 
      002B06 81               [ 4] 3690 	ret
      002B07                       3691 bad_port:
      002B07 A6 0A            [ 1] 3692 	ld a,#ERR_BAD_VALUE
      002B09 CC 16 96         [ 2] 3693 	jp tb_error
                                   3694 
                                   3695 
                                   3696 ;-------------------------
                                   3697 ; BASIC: UFLASH 
                                   3698 ; return free flash address
                                   3699 ; scan all block starting at 
                                   3700 ; app_space and return 
                                   3701 ; address of first free block 
                                   3702 ; below extended memory.  
                                   3703 ; return 0 if no free block 
                                   3704 ; input:
                                   3705 ;  none 
                                   3706 ; output:
                                   3707 ;	A:X		FLASH free address
                                   3708 ;---------------------------
      002B0C                       3709 uflash:
      002B0C 72 5F 00 18      [ 1] 3710 	clr farptr 
      002B10 AE 38 80         [ 2] 3711 	ldw x,#app_space 
      002B13 89               [ 2] 3712 	pushw x 
      002B14 CF 00 19         [ 2] 3713 1$:	ldw ptr16,x 
      002B17 CD 08 6E         [ 4] 3714 	call scan_block 
      002B1A 27 0F            [ 1] 3715 	jreq 8$
      002B1C 1E 01            [ 2] 3716 	ldw x,(1,sp)
      002B1E 1C 00 80         [ 2] 3717 	addw x,#BLOCK_SIZE 
      002B21 27 04            [ 1] 3718 	jreq 7$ 
      002B23 1F 01            [ 2] 3719 	ldw (1,sp),x 
      002B25 20 ED            [ 2] 3720 	jra 1$ 
      002B27                       3721 7$: ; no free block 
      002B27 0F 01            [ 1] 3722 	clr (1,sp) 
      002B29 0F 02            [ 1] 3723 	clr (2,sp)
      002B2B 85               [ 2] 3724 8$: popw x 
      002B2C 4F               [ 1] 3725 	clr a 
      002B2D 81               [ 4] 3726 	ret 
                                   3727 
                                   3728 
                                   3729 ;---------------------
                                   3730 ; BASIC: USR(addr,arg)
                                   3731 ; execute a function written 
                                   3732 ; in binary code.
                                   3733 ; input:
                                   3734 ;   addr	routine address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



                                   3735 ;   arg 	is an argument
                                   3736 ;           it can be ignore 
                                   3737 ;           by cally. 
                                   3738 ; output:
                                   3739 ;   xstack 	value returned by cally  
                                   3740 ;---------------------
      002B2E                       3741 usr:
      002B2E CD 19 BE         [ 4] 3742 	call func_args 
      002B31 A1 02            [ 1] 3743 	cp a,#2
      002B33 27 03            [ 1] 3744 	jreq 1$  
      002B35 CC 16 94         [ 2] 3745 	jp syntax_error 
      002B38                       3746 1$: 
      002B38                       3747 	_at_next ; A:X addr 
      002B38 90 E6 03         [ 1]    1     ld a,(3,y)
      002B3B 93               [ 1]    2     ldw x,y 
      002B3C EE 04            [ 2]    3     ldw x,(4,x)
      002B3E CF 00 19         [ 2] 3748 	ldw ptr16,X 
      002B41                       3749 	_xpop  ; arg 
      002B41 90 F6            [ 1]    1     ld a,(y)
      002B43 93               [ 1]    2     ldw x,y 
      002B44 EE 01            [ 2]    3     ldw x,(1,x)
      002B46 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B4A                       3750 	_store_top ; overwrite addr 
      002B4A 90 F7            [ 1]    1     ld (y),a 
      002B4C 90 EF 01         [ 2]    2     ldw (1,y),x     
      002B4F 72 CD 00 19      [ 6] 3751     call [ptr16]
      002B53 81               [ 4] 3752 	ret 
                                   3753 
                                   3754 
                                   3755 ;------------------------------
                                   3756 ; BASIC: BYE 
                                   3757 ; halt mcu in its lowest power mode 
                                   3758 ; wait for reset or external interrupt
                                   3759 ; do a cold start on wakeup.
                                   3760 ;------------------------------
      002B54                       3761 bye:
      002B54 72 0D 52 30 FB   [ 2] 3762 	btjf UART1_SR,#UART_SR_TC,.
      002B59 8E               [10] 3763 	halt
      002B5A CC 00 B5         [ 2] 3764 	jp cold_start  
                                   3765 
                                   3766 ;----------------------------------
                                   3767 ; BASIC: SLEEP 
                                   3768 ; halt mcu until reset or external
                                   3769 ; interrupt.
                                   3770 ; Resume progam after SLEEP command
                                   3771 ;----------------------------------
      002B5D                       3772 sleep:
      002B5D 72 0D 52 30 FB   [ 2] 3773 	btjf UART1_SR,#UART_SR_TC,.
      002B62 72 16 00 22      [ 1] 3774 	bset flags,#FSLEEP
      002B66 8E               [10] 3775 	halt 
      002B67 81               [ 4] 3776 	ret 
                                   3777 
                                   3778 ;-------------------------------
                                   3779 ; BASIC: PAUSE expr 
                                   3780 ; suspend execution for n msec.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



                                   3781 ; input:
                                   3782 ;	none
                                   3783 ; output:
                                   3784 ;	none 
                                   3785 ;------------------------------
      002B68                       3786 pause:
      002B68 CD 1B 05         [ 4] 3787 	call expression
      002B6B A1 84            [ 1] 3788 	cp a,#TK_INTGR
      002B6D 27 03            [ 1] 3789 	jreq 1$ 
      002B6F CC 16 94         [ 2] 3790 	jp syntax_error
      002B72                       3791 1$: _xpop 
      002B72 90 F6            [ 1]    1     ld a,(y)
      002B74 93               [ 1]    2     ldw x,y 
      002B75 EE 01            [ 2]    3     ldw x,(1,x)
      002B77 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B7B                       3792 pause02:
      002B7B CF 00 12         [ 2] 3793 	ldw timer,x 
      002B7E CE 00 12         [ 2] 3794 1$: ldw x,timer 
      002B81 5D               [ 2] 3795 	tnzw x 
      002B82 27 03            [ 1] 3796 	jreq 2$
      002B84 8F               [10] 3797 	wfi 
      002B85 26 F7            [ 1] 3798 	jrne 1$
      002B87                       3799 2$:	
      002B87 81               [ 4] 3800 	ret 
                                   3801 
                                   3802 ;------------------------------
                                   3803 ; BASIC: AWU expr
                                   3804 ; halt mcu for 'expr' milliseconds
                                   3805 ; use Auto wakeup peripheral
                                   3806 ; all oscillators stopped except LSI
                                   3807 ; range: 1ms - 511ms
                                   3808 ; input:
                                   3809 ;  none
                                   3810 ; output:
                                   3811 ;  none:
                                   3812 ;------------------------------
      002B88                       3813 awu:
      002B88 CD 1B 05         [ 4] 3814   call expression
      002B8B A1 84            [ 1] 3815   cp a,#TK_INTGR
      002B8D 27 03            [ 1] 3816   jreq 1$
      002B8F CC 16 94         [ 2] 3817   jp syntax_error
      002B92                       3818 1$: _xpop 
      002B92 90 F6            [ 1]    1     ld a,(y)
      002B94 93               [ 1]    2     ldw x,y 
      002B95 EE 01            [ 2]    3     ldw x,(1,x)
      002B97 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B9B                       3819 awu02:
      002B9B A3 14 00         [ 2] 3820   cpw x,#5120
      002B9E 2B 0C            [ 1] 3821   jrmi 1$ 
      002BA0 35 0F 50 F2      [ 1] 3822   mov AWU_TBR,#15 
      002BA4 A6 1E            [ 1] 3823   ld a,#30
      002BA6 62               [ 2] 3824   div x,a
      002BA7 A6 10            [ 1] 3825   ld a,#16
      002BA9 62               [ 2] 3826   div x,a 
      002BAA 20 1E            [ 2] 3827   jra 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002BAC                       3828 1$: 
      002BAC A3 08 00         [ 2] 3829   cpw x,#2048
      002BAF 2B 09            [ 1] 3830   jrmi 2$ 
      002BB1 35 0E 50 F2      [ 1] 3831   mov AWU_TBR,#14
      002BB5 A6 50            [ 1] 3832   ld a,#80
      002BB7 62               [ 2] 3833   div x,a 
      002BB8 20 10            [ 2] 3834   jra 4$   
      002BBA                       3835 2$:
      002BBA 35 07 50 F2      [ 1] 3836   mov AWU_TBR,#7
      002BBE                       3837 3$:  
                                   3838 ; while X > 64  divide by 2 and increment AWU_TBR 
      002BBE A3 00 40         [ 2] 3839   cpw x,#64 
      002BC1 23 07            [ 2] 3840   jrule 4$ 
      002BC3 72 5C 50 F2      [ 1] 3841   inc AWU_TBR 
      002BC7 54               [ 2] 3842   srlw x 
      002BC8 20 F4            [ 2] 3843   jra 3$ 
      002BCA                       3844 4$:
      002BCA 9F               [ 1] 3845   ld a, xl
      002BCB 4A               [ 1] 3846   dec a 
      002BCC 27 01            [ 1] 3847   jreq 5$
      002BCE 4A               [ 1] 3848   dec a 	
      002BCF                       3849 5$: 
      002BCF A4 3E            [ 1] 3850   and a,#0x3e 
      002BD1 C7 50 F1         [ 1] 3851   ld AWU_APR,a 
      002BD4 72 18 50 F0      [ 1] 3852   bset AWU_CSR,#AWU_CSR_AWUEN
      002BD8 8E               [10] 3853   halt 
                                   3854 
      002BD9 81               [ 4] 3855   ret 
                                   3856 
                                   3857 ;------------------------------
                                   3858 ; BASIC: TICKS
                                   3859 ; return msec ticks counter value 
                                   3860 ; input:
                                   3861 ; 	none 
                                   3862 ; output:
                                   3863 ;	X 		TK_INTGR
                                   3864 ;-------------------------------
      002BDA                       3865 get_ticks:
      002BDA C6 00 0F         [ 1] 3866 	ld a,ticks 
      002BDD CE 00 10         [ 2] 3867 	ldw x,ticks+1 
      002BE0 81               [ 4] 3868 	ret 
                                   3869 
                                   3870 ;------------------------------
                                   3871 ; BASIC: ABS(expr)
                                   3872 ; return absolute value of expr.
                                   3873 ; input:
                                   3874 ;   none
                                   3875 ; output:
                                   3876 ;   xstack    positive int24 
                                   3877 ;-------------------------------
      002BE1                       3878 abs:
      002BE1 CD 19 BE         [ 4] 3879 	call func_args 
      002BE4 A1 01            [ 1] 3880 	cp a,#1 
      002BE6 27 03            [ 1] 3881 	jreq 0$ 
      002BE8 CC 16 94         [ 2] 3882 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002BEB                       3883 0$:  
      002BEB CD 01 F3         [ 4] 3884 	call abs24 
      002BEE                       3885 	_xpop 
      002BEE 90 F6            [ 1]    1     ld a,(y)
      002BF0 93               [ 1]    2     ldw x,y 
      002BF1 EE 01            [ 2]    3     ldw x,(1,x)
      002BF3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BF7 81               [ 4] 3886 	ret 
                                   3887 
                                   3888 ;------------------------------
                                   3889 ; BASIC: LSHIFT(expr1,expr2)
                                   3890 ; logical shift left expr1 by 
                                   3891 ; expr2 bits 
                                   3892 ; output:
                                   3893 ; 	A:x 	result 
                                   3894 ;------------------------------
      002BF8                       3895 lshift:
      002BF8 CD 19 BE         [ 4] 3896 	call func_args
      002BFB A1 02            [ 1] 3897 	cp a,#2 
      002BFD 27 03            [ 1] 3898 	jreq 1$
      002BFF CC 16 94         [ 2] 3899 	jp syntax_error
      002C02                       3900 1$: _xpop 
      002C02 90 F6            [ 1]    1     ld a,(y)
      002C04 93               [ 1]    2     ldw x,y 
      002C05 EE 01            [ 2]    3     ldw x,(1,x)
      002C07 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C0B 9F               [ 1] 3901 	ld a,xl 
      002C0C 88               [ 1] 3902 	push a      
      002C0D                       3903 	_xpop  ; T>A:X 
      002C0D 90 F6            [ 1]    1     ld a,(y)
      002C0F 93               [ 1]    2     ldw x,y 
      002C10 EE 01            [ 2]    3     ldw x,(1,x)
      002C12 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C16 0D 01            [ 1] 3904 	tnz (1,sp) 
      002C18 27 07            [ 1] 3905 	jreq 4$
      002C1A 98               [ 1] 3906 2$:	rcf 
      002C1B 59               [ 2] 3907 	rlcw x 
      002C1C 49               [ 1] 3908 	rlc a 
      002C1D 0A 01            [ 1] 3909 	dec (1,sp) 
      002C1F 26 F9            [ 1] 3910 	jrne 2$
      002C21                       3911 4$: _drop 1 
      002C21 5B 01            [ 2]    1     addw sp,#1 
      002C23 81               [ 4] 3912 	ret
                                   3913 
                                   3914 ;------------------------------
                                   3915 ; BASIC: RSHIFT(expr1,expr2)
                                   3916 ; logical shift right expr1 by 
                                   3917 ; expr2 bits.
                                   3918 ; output:
                                   3919 ; 	A 		TK_INTGR
                                   3920 ;   X 		result 
                                   3921 ;------------------------------
      002C24                       3922 rshift:
      002C24 CD 19 BE         [ 4] 3923 	call func_args
      002C27 A1 02            [ 1] 3924 	cp a,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002C29 27 03            [ 1] 3925 	jreq 1$
      002C2B CC 16 94         [ 2] 3926 	jp syntax_error
      002C2E                       3927 1$: _xpop ; T>A:X
      002C2E 90 F6            [ 1]    1     ld a,(y)
      002C30 93               [ 1]    2     ldw x,y 
      002C31 EE 01            [ 2]    3     ldw x,(1,x)
      002C33 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C37 9F               [ 1] 3928     ld a,xl 
      002C38 88               [ 1] 3929 	push a    
      002C39                       3930 	_xpop  
      002C39 90 F6            [ 1]    1     ld a,(y)
      002C3B 93               [ 1]    2     ldw x,y 
      002C3C EE 01            [ 2]    3     ldw x,(1,x)
      002C3E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C42 0D 01            [ 1] 3931 	tnz (1,sp)
      002C44 27 07            [ 1] 3932 	jreq 4$
      002C46 98               [ 1] 3933 2$:	rcf 
      002C47 46               [ 1] 3934 	rrc a 
      002C48 56               [ 2] 3935 	rrcw x 
      002C49 0A 01            [ 1] 3936 	dec (1,sp) 
      002C4B 26 F9            [ 1] 3937 	jrne 2$
      002C4D                       3938 4$: _drop 1 
      002C4D 5B 01            [ 2]    1     addw sp,#1 
      002C4F 81               [ 4] 3939 	ret
                                   3940 
                                   3941 ;--------------------------
                                   3942 ; BASIC: FCPU integer
                                   3943 ; set CPU frequency 
                                   3944 ;-------------------------- 
                                   3945 
      002C50                       3946 fcpu:
      002C50 A6 84            [ 1] 3947 	ld a,#TK_INTGR
      002C52 CD 19 B1         [ 4] 3948 	call expect 
      002C55 CD 18 2D         [ 4] 3949 	call get_int24 
      002C58 9F               [ 1] 3950 	ld a,xl 
      002C59 A4 07            [ 1] 3951 	and a,#7 
      002C5B C7 50 C6         [ 1] 3952 	ld CLK_CKDIVR,a 
      002C5E 81               [ 4] 3953 	ret 
                                   3954 
                                   3955 ;------------------------------
                                   3956 ; BASIC: PMODE pin#, mode 
                                   3957 ; Arduino pin. 
                                   3958 ; define pin as input or output
                                   3959 ; pin#: {0..15}
                                   3960 ; mode: INPUT|OUTPUT  
                                   3961 ;------------------------------
                           000001  3962 	PINNO=1
                           000001  3963 	VSIZE=1
      002C5F                       3964 pin_mode:
      002C5F                       3965 	_vars VSIZE 
      002C5F 52 01            [ 2]    1     sub sp,#VSIZE 
      002C61 CD 19 C3         [ 4] 3966 	call arg_list 
      002C64 A1 02            [ 1] 3967 	cp a,#2 
      002C66 27 03            [ 1] 3968 	jreq 1$
      002C68 CC 16 94         [ 2] 3969 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002C6B                       3970 1$: _xpop 
      002C6B 90 F6            [ 1]    1     ld a,(y)
      002C6D 93               [ 1]    2     ldw x,y 
      002C6E EE 01            [ 2]    3     ldw x,(1,x)
      002C70 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C74 CF 00 19         [ 2] 3971 	ldw ptr16,x ; mode 
      002C77                       3972 	_xpop ; Dx pin 
      002C77 90 F6            [ 1]    1     ld a,(y)
      002C79 93               [ 1]    2     ldw x,y 
      002C7A EE 01            [ 2]    3     ldw x,(1,x)
      002C7C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C80 CD 2C BE         [ 4] 3973 	call select_pin 
      002C83 6B 01            [ 1] 3974 	ld (PINNO,sp),a  
      002C85 A6 01            [ 1] 3975 	ld a,#1 
      002C87 0D 01            [ 1] 3976 	tnz (PINNO,sp)
      002C89 27 0D            [ 1] 3977 	jreq 4$
      002C8B 48               [ 1] 3978 2$:	sll a 
      002C8C 0A 01            [ 1] 3979 	dec (PINNO,sp)
      002C8E 26 FB            [ 1] 3980 	jrne 2$ 
      002C90 6B 01            [ 1] 3981 	ld (PINNO,sp),a
      002C92 7B 01            [ 1] 3982 	ld a,(PINNO,sp)
      002C94 EA 03            [ 1] 3983 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002C96 E7 03            [ 1] 3984 	ld (GPIO_CR1,x),a 
      002C98 A6 01            [ 1] 3985 4$:	ld a,#OUTP
      002C9A C1 00 0E         [ 1] 3986 	cp a,acc8 
      002C9D 27 10            [ 1] 3987 	jreq 6$
                                   3988 ; input mode
                                   3989 ; disable external interrupt 
      002C9F 7B 01            [ 1] 3990 	ld a,(PINNO,sp)
      002CA1 43               [ 1] 3991 	cpl a 
      002CA2 E4 04            [ 1] 3992 	and a,(GPIO_CR2,x)
      002CA4 E7 04            [ 1] 3993 	ld (GPIO_CR2,x),a 
                                   3994 ;clear bit in DDR for input mode 
      002CA6 7B 01            [ 1] 3995 	ld a,(PINNO,sp)
      002CA8 43               [ 1] 3996 	cpl a 
      002CA9 E4 02            [ 1] 3997 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002CAB E7 02            [ 1] 3998 	ld (GPIO_DDR,x),a 
      002CAD 20 0C            [ 2] 3999 	jra 9$
      002CAF                       4000 6$: ;output mode  
      002CAF 7B 01            [ 1] 4001 	ld a,(PINNO,sp)
      002CB1 EA 02            [ 1] 4002 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002CB3 E7 02            [ 1] 4003 	ld (GPIO_DDR,x),a 
      002CB5 7B 01            [ 1] 4004 	ld a,(PINNO,sp)
      002CB7 EA 04            [ 1] 4005 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002CB9 E7 04            [ 1] 4006 	ld (GPIO_CR2,x),a 
      002CBB                       4007 9$:	
      002CBB                       4008 	_drop VSIZE 
      002CBB 5B 01            [ 2]    1     addw sp,#VSIZE 
      002CBD 81               [ 4] 4009 	ret
                                   4010 
                                   4011 ;------------------------
                                   4012 ; select Arduino pin 
                                   4013 ; input:
                                   4014 ;   X 	 {0..15} Arduino Dx 
                                   4015 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



                                   4016 ;   A     stm8s208 pin 
                                   4017 ;   X     base address s208 GPIO port 
                                   4018 ;---------------------------
      002CBE                       4019 select_pin:
      002CBE 58               [ 2] 4020 	sllw x 
      002CBF 1C 2C CE         [ 2] 4021 	addw x,#arduino_to_8s208 
      002CC2 FE               [ 2] 4022 	ldw x,(x)
      002CC3 9F               [ 1] 4023 	ld a,xl 
      002CC4 88               [ 1] 4024 	push a 
      002CC5 5E               [ 1] 4025 	swapw x 
      002CC6 A6 05            [ 1] 4026 	ld a,#5 
      002CC8 42               [ 4] 4027 	mul x,a 
      002CC9 1C 50 00         [ 2] 4028 	addw x,#GPIO_BASE 
      002CCC 84               [ 1] 4029 	pop a 
      002CCD 81               [ 4] 4030 	ret 
                                   4031 ; translation from Arduino D0..D15 to stm8s208rb 
      002CCE                       4032 arduino_to_8s208:
      002CCE 03 06                 4033 .byte 3,6 ; D0 
      002CD0 03 05                 4034 .byte 3,5 ; D1 
      002CD2 04 00                 4035 .byte 4,0 ; D2 
      002CD4 02 01                 4036 .byte 2,1 ; D3
      002CD6 06 00                 4037 .byte 6,0 ; D4
      002CD8 02 02                 4038 .byte 2,2 ; D5
      002CDA 02 03                 4039 .byte 2,3 ; D6
      002CDC 03 01                 4040 .byte 3,1 ; D7
      002CDE 03 03                 4041 .byte 3,3 ; D8
      002CE0 02 04                 4042 .byte 2,4 ; D9
      002CE2 04 05                 4043 .byte 4,5 ; D10
      002CE4 02 06                 4044 .byte 2,6 ; D11
      002CE6 02 07                 4045 .byte 2,7 ; D12
      002CE8 02 05                 4046 .byte 2,5 ; D13
      002CEA 04 02                 4047 .byte 4,2 ; D14
      002CEC 04 01                 4048 .byte 4,1 ; D15
                                   4049 
                                   4050 
                                   4051 ;------------------------------
                                   4052 ; BASIC: RND(expr)
                                   4053 ; return random number 
                                   4054 ; between 1 and expr inclusive
                                   4055 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4056 ; input:
                                   4057 ; 	none 
                                   4058 ; output:
                                   4059 ;	xstack 	random positive integer 
                                   4060 ;------------------------------
      002CEE                       4061 random:
      002CEE CD 19 BE         [ 4] 4062 	call func_args 
      002CF1 A1 01            [ 1] 4063 	cp a,#1
      002CF3 27 03            [ 1] 4064 	jreq 1$
      002CF5 CC 16 94         [ 2] 4065 	jp syntax_error
      002CF8                       4066 1$:  
      002CF8                       4067 	_xpop   
      002CF8 90 F6            [ 1]    1     ld a,(y)
      002CFA 93               [ 1]    2     ldw x,y 
      002CFB EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002CFD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D01 89               [ 2] 4068 	pushw x 
      002D02 88               [ 1] 4069 	push a  
      002D03 A6 80            [ 1] 4070 	ld a,#0x80 
      002D05 15 01            [ 1] 4071 	bcp a,(1,sp)
      002D07 27 05            [ 1] 4072 	jreq 2$
      002D09 A6 0A            [ 1] 4073 	ld a,#ERR_BAD_VALUE
      002D0B CC 16 96         [ 2] 4074 	jp tb_error
      002D0E                       4075 2$: 
                                   4076 ; acc16=(x<<5)^x 
      002D0E CE 00 14         [ 2] 4077 	ldw x,seedx 
      002D11 58               [ 2] 4078 	sllw x 
      002D12 58               [ 2] 4079 	sllw x 
      002D13 58               [ 2] 4080 	sllw x 
      002D14 58               [ 2] 4081 	sllw x 
      002D15 58               [ 2] 4082 	sllw x 
      002D16 9E               [ 1] 4083 	ld a,xh 
      002D17 C8 00 14         [ 1] 4084 	xor a,seedx 
      002D1A C7 00 0D         [ 1] 4085 	ld acc16,a 
      002D1D 9F               [ 1] 4086 	ld a,xl 
      002D1E C8 00 15         [ 1] 4087 	xor a,seedx+1 
      002D21 C7 00 0E         [ 1] 4088 	ld acc8,a 
                                   4089 ; seedx=seedy 
      002D24 CE 00 16         [ 2] 4090 	ldw x,seedy 
      002D27 CF 00 14         [ 2] 4091 	ldw seedx,x  
                                   4092 ; seedy=seedy^(seedy>>1)
      002D2A CE 00 16         [ 2] 4093 	ldw x,seedy 
      002D2D 54               [ 2] 4094 	srlw x 
      002D2E 9E               [ 1] 4095 	ld a,xh 
      002D2F C8 00 16         [ 1] 4096 	xor a,seedy 
      002D32 C7 00 16         [ 1] 4097 	ld seedy,a  
      002D35 9F               [ 1] 4098 	ld a,xl 
      002D36 C8 00 17         [ 1] 4099 	xor a,seedy+1 
      002D39 C7 00 17         [ 1] 4100 	ld seedy+1,a 
                                   4101 ; acc16>>3 
      002D3C CE 00 0D         [ 2] 4102 	ldw x,acc16 
      002D3F 54               [ 2] 4103 	srlw x 
      002D40 54               [ 2] 4104 	srlw x 
      002D41 54               [ 2] 4105 	srlw x 
                                   4106 ; x=acc16^x 
      002D42 9E               [ 1] 4107 	ld a,xh 
      002D43 C8 00 0D         [ 1] 4108 	xor a,acc16 
      002D46 C7 00 0D         [ 1] 4109 	ld acc16,a 
      002D49 9F               [ 1] 4110 	ld a,xl 
      002D4A C8 00 0E         [ 1] 4111 	xor a,acc8 
      002D4D C7 00 0E         [ 1] 4112 	ld acc8,a 
                                   4113 ; seedy=acc16^seedy 
      002D50 C8 00 17         [ 1] 4114 	xor a,seedy+1
      002D53 97               [ 1] 4115 	ld xl,a 
      002D54 C6 00 0D         [ 1] 4116 	ld a,acc16 
      002D57 C8 00 16         [ 1] 4117 	xor a,seedy
      002D5A 95               [ 1] 4118 	ld xh,a 
      002D5B CF 00 16         [ 2] 4119 	ldw seedy,x 
                                   4120 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002D5E C6 00 15         [ 1] 4121 	ld a,seedx+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002D61 A4 7F            [ 1] 4122 	and a,#127
      002D63                       4123 	_xpush 
      002D63 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002D67 90 F7            [ 1]    2     ld (y),a 
      002D69 90 EF 01         [ 2]    3     ldw (1,y),x 
      002D6C 84               [ 1] 4124 	pop a 
      002D6D 85               [ 2] 4125 	popw x 
      002D6E                       4126 	_xpush 
      002D6E 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002D72 90 F7            [ 1]    2     ld (y),a 
      002D74 90 EF 01         [ 2]    3     ldw (1,y),x 
      002D77 CD 03 A1         [ 4] 4127 	call mod24 
      002D7A                       4128 	_xpop
      002D7A 90 F6            [ 1]    1     ld a,(y)
      002D7C 93               [ 1]    2     ldw x,y 
      002D7D EE 01            [ 2]    3     ldw x,(1,x)
      002D7F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D83 1C 00 01         [ 2] 4129 	addw x,#1 
      002D86 A9 00            [ 1] 4130 	adc a,#0  
      002D88 81               [ 4] 4131 	ret 
                                   4132 
                                   4133 ;---------------------------------
                                   4134 ; BASIC: WORDS 
                                   4135 ; affiche la listes des mots du
                                   4136 ; dictionnaire ainsi que le nombre
                                   4137 ; de mots.
                                   4138 ;---------------------------------
                           000001  4139 	WLEN=1 ; word length
                           000002  4140 	LLEN=2 ; character sent to console
                           000003  4141 	WCNT=3 ; count words printed 
                           000003  4142 	VSIZE=3 
      002D89                       4143 words:
      002D89 90 89            [ 2] 4144 	pushw y
      002D8B                       4145 	_vars VSIZE
      002D8B 52 03            [ 2]    1     sub sp,#VSIZE 
      002D8D 0F 02            [ 1] 4146 	clr (LLEN,sp)
      002D8F 0F 03            [ 1] 4147 	clr (WCNT,sp)
      002D91 90 AE 36 94      [ 2] 4148 	ldw y,#kword_dict+2
      002D95 93               [ 1] 4149 0$:	ldw x,y
      002D96 F6               [ 1] 4150 	ld a,(x)
      002D97 A4 0F            [ 1] 4151 	and a,#15 
      002D99 6B 01            [ 1] 4152 	ld (WLEN,sp),a 
      002D9B 0C 03            [ 1] 4153 	inc (WCNT,sp)
      002D9D 5C               [ 1] 4154 1$:	incw x 
      002D9E F6               [ 1] 4155 	ld a,(x)
      002D9F CD 08 FF         [ 4] 4156 	call putc 
      002DA2 0C 02            [ 1] 4157 	inc (LLEN,sp)
      002DA4 0A 01            [ 1] 4158 	dec (WLEN,sp)
      002DA6 26 F5            [ 1] 4159 	jrne 1$
      002DA8 A6 46            [ 1] 4160 	ld a,#70
      002DAA 11 02            [ 1] 4161 	cp a,(LLEN,sp)
      002DAC 2B 09            [ 1] 4162 	jrmi 2$   
      002DAE A6 20            [ 1] 4163 	ld a,#SPACE 
      002DB0 CD 08 FF         [ 4] 4164 	call putc 
      002DB3 0C 02            [ 1] 4165 	inc (LLEN,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002DB5 20 07            [ 2] 4166 	jra 3$
      002DB7 A6 0D            [ 1] 4167 2$: ld a,#CR 
      002DB9 CD 08 FF         [ 4] 4168 	call putc 
      002DBC 0F 02            [ 1] 4169 	clr (LLEN,sp)
      002DBE 72 A2 00 02      [ 2] 4170 3$:	subw y,#2 
      002DC2 90 FE            [ 2] 4171 	ldw y,(y)
      002DC4 26 CF            [ 1] 4172 	jrne 0$ 
      002DC6 A6 0D            [ 1] 4173 	ld a,#CR 
      002DC8 CD 08 FF         [ 4] 4174 	call putc  
      002DCB 5F               [ 1] 4175 	clrw x 
      002DCC 7B 03            [ 1] 4176 	ld a,(WCNT,sp)
      002DCE 97               [ 1] 4177 	ld xl,a 
      002DCF CD 18 43         [ 4] 4178 	call prt_i16 
      002DD2 AE 2D DD         [ 2] 4179 	ldw x,#words_count_msg
      002DD5 CD 09 5C         [ 4] 4180 	call puts 
      002DD8                       4181 	_drop VSIZE 
      002DD8 5B 03            [ 2]    1     addw sp,#VSIZE 
      002DDA 90 85            [ 2] 4182 	popw y 
      002DDC 81               [ 4] 4183 	ret 
      002DDD 20 77 6F 72 64 73 20  4184 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4185 
                                   4186 
                                   4187 ;-----------------------------
                                   4188 ; BASIC: TIMER expr 
                                   4189 ; initialize count down timer 
                                   4190 ;-----------------------------
      002DF3                       4191 set_timer:
      002DF3 CD 19 C3         [ 4] 4192 	call arg_list
      002DF6 A1 01            [ 1] 4193 	cp a,#1 
      002DF8 27 03            [ 1] 4194 	jreq 1$
      002DFA CC 16 94         [ 2] 4195 	jp syntax_error
      002DFD                       4196 1$: 
      002DFD                       4197 	_xpop  
      002DFD 90 F6            [ 1]    1     ld a,(y)
      002DFF 93               [ 1]    2     ldw x,y 
      002E00 EE 01            [ 2]    3     ldw x,(1,x)
      002E02 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E06 CF 00 12         [ 2] 4198 	ldw timer,x 
      002E09 81               [ 4] 4199 	ret 
                                   4200 
                                   4201 ;------------------------------
                                   4202 ; BASIC: TIMEOUT 
                                   4203 ; return state of timer 
                                   4204 ; output:
                                   4205 ;   A:X     0 not timeout 
                                   4206 ;   A:X     -1 timeout 
                                   4207 ;------------------------------
      002E0A                       4208 timeout:
      002E0A 4F               [ 1] 4209 	clr a 
      002E0B CE 00 12         [ 2] 4210 	ldw x,timer 
      002E0E 27 02            [ 1] 4211 	jreq 1$
      002E10 5F               [ 1] 4212 	clrw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002E11 81               [ 4] 4213 	ret  
      002E12 43               [ 1] 4214 1$:	cpl a
      002E13 53               [ 2] 4215 	cplw x 
      002E14 81               [ 4] 4216 	ret 
                                   4217  	
                                   4218 
                                   4219 
                                   4220 
                                   4221 ;-----------------------------------
                                   4222 ; BASIC: IWDGEN expr1 
                                   4223 ; enable independant watchdog timer
                                   4224 ; expr1 is delay in multiple of 62.5µsec
                                   4225 ; expr1 -> {1..16383}
                                   4226 ;-----------------------------------
      002E15                       4227 enable_iwdg:
      002E15 CD 19 C3         [ 4] 4228 	call arg_list
      002E18 A1 01            [ 1] 4229 	cp a,#1 
      002E1A 27 03            [ 1] 4230 	jreq 1$
      002E1C CC 16 94         [ 2] 4231 	jp syntax_error 
      002E1F                       4232 1$: _xpop  
      002E1F 90 F6            [ 1]    1     ld a,(y)
      002E21 93               [ 1]    2     ldw x,y 
      002E22 EE 01            [ 2]    3     ldw x,(1,x)
      002E24 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E28 4B 00            [ 1] 4233 	push #0
      002E2A 35 CC 50 E0      [ 1] 4234 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002E2E 9E               [ 1] 4235 	ld a,xh 
      002E2F A4 3F            [ 1] 4236 	and a,#0x3f
      002E31 95               [ 1] 4237 	ld xh,a  
      002E32 A3 00 FF         [ 2] 4238 2$:	cpw x,#255
      002E35 23 06            [ 2] 4239 	jrule 3$
      002E37 0C 01            [ 1] 4240 	inc (1,sp)
      002E39 98               [ 1] 4241 	rcf 
      002E3A 56               [ 2] 4242 	rrcw x 
      002E3B 20 F5            [ 2] 4243 	jra 2$
      002E3D 35 55 50 E0      [ 1] 4244 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002E41 84               [ 1] 4245 	pop a  
      002E42 C7 50 E1         [ 1] 4246 	ld IWDG_PR,a 
      002E45 9F               [ 1] 4247 	ld a,xl
      002E46 4A               [ 1] 4248 	dec a 
      002E47 35 55 50 E0      [ 1] 4249 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002E4B C7 50 E2         [ 1] 4250 	ld IWDG_RLR,a 
      002E4E 35 AA 50 E0      [ 1] 4251 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002E52 81               [ 4] 4252 	ret 
                                   4253 
                                   4254 
                                   4255 ;-----------------------------------
                                   4256 ; BASIC: IWDGREF  
                                   4257 ; refresh independant watchdog count down 
                                   4258 ; timer before it reset MCU. 
                                   4259 ;-----------------------------------
      002E53                       4260 refresh_iwdg:
      002E53 35 AA 50 E0      [ 1] 4261 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002E57 81               [ 4] 4262 	ret 
                                   4263 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



                                   4264 
                                   4265 ;-------------------------------------
                                   4266 ; BASIC: LOG2(expr)
                                   4267 ; return logarithm base 2 of expr 
                                   4268 ; this is the position of most significant
                                   4269 ; bit set. 
                                   4270 ; input: 
                                   4271 ; output:
                                   4272 ;   A     TK_INTGR 
                                   4273 ;   xstack log2 
                                   4274 ;*********************************
      002E58                       4275 log2:
      002E58 CD 19 BE         [ 4] 4276 	call func_args 
      002E5B A1 01            [ 1] 4277 	cp a,#1 
      002E5D 27 03            [ 1] 4278 	jreq 1$
      002E5F CC 16 94         [ 2] 4279 	jp syntax_error 
      002E62                       4280 1$: 
      002E62                       4281 	_xpop    
      002E62 90 F6            [ 1]    1     ld a,(y)
      002E64 93               [ 1]    2     ldw x,y 
      002E65 EE 01            [ 2]    3     ldw x,(1,x)
      002E67 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E6B 4D               [ 1] 4282 	tnz a
      002E6C 26 08            [ 1] 4283 	jrne 2$ 
      002E6E 5D               [ 2] 4284 	tnzw x 
      002E6F 26 05            [ 1] 4285 	jrne 2$
      002E71 A6 0A            [ 1] 4286 	ld a,#ERR_BAD_VALUE
      002E73 CC 16 96         [ 2] 4287 	jp tb_error 
      002E76 4B 18            [ 1] 4288 2$: push #24 
      002E78 59               [ 2] 4289 3$: rlcw x 
      002E79 49               [ 1] 4290     rlc a 
      002E7A 25 04            [ 1] 4291 	jrc 4$
      002E7C 0A 01            [ 1] 4292 	dec (1,sp) 
      002E7E 26 F8            [ 1] 4293 	jrne 3$
      002E80 5F               [ 1] 4294 4$: clrw x 
      002E81 84               [ 1] 4295     pop a 
      002E82 4A               [ 1] 4296 	dec a
      002E83 02               [ 1] 4297 	rlwa x  
      002E84                       4298 9$:	
      002E84 81               [ 4] 4299 	ret 
                                   4300 
                                   4301 ;-----------------------------------
                                   4302 ; BASIC: BIT(expr) 
                                   4303 ; expr ->{0..23}
                                   4304 ; return 2^expr 
                                   4305 ; output:
                                   4306 ;    A:X    2^expr 
                                   4307 ;-----------------------------------
      002E85                       4308 bitmask:
      002E85 CD 19 BE         [ 4] 4309     call func_args 
      002E88 A1 01            [ 1] 4310 	cp a,#1
      002E8A 27 03            [ 1] 4311 	jreq 1$
      002E8C CC 16 94         [ 2] 4312 	jp syntax_error 
      002E8F                       4313 1$: _xpop 
      002E8F 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002E91 93               [ 1]    2     ldw x,y 
      002E92 EE 01            [ 2]    3     ldw x,(1,x)
      002E94 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E98 9F               [ 1] 4314 	ld a,xl 
      002E99 AE 00 01         [ 2] 4315 	ldw x,#1 
      002E9C A4 17            [ 1] 4316 	and a,#23
      002E9E 27 0A            [ 1] 4317 	jreq 9$
      002EA0 88               [ 1] 4318 	push a 
      002EA1 4F               [ 1] 4319 	clr a 
      002EA2                       4320 2$: 
      002EA2 58               [ 2] 4321 	slaw x 
      002EA3 49               [ 1] 4322 	rlc a 	
      002EA4 0A 01            [ 1] 4323 	dec (1,sp)
      002EA6 26 FA            [ 1] 4324 	jrne 2$ 
      002EA8                       4325 4$:
      002EA8                       4326     _drop 1 
      002EA8 5B 01            [ 2]    1     addw sp,#1 
      002EAA 81               [ 4] 4327 9$:	ret 
                                   4328 
                                   4329 ;------------------------------
                                   4330 ; BASIC: DO 
                                   4331 ; initiate a DO ... UNTIL loop 
                                   4332 ;------------------------------
                           000003  4333 	DOLP_ADR=3 
                           000005  4334 	DOLP_INW=5
                           000004  4335 	VSIZE=4 
      002EAB                       4336 do_loop:
      002EAB 85               [ 2] 4337 	popw x 
      002EAC                       4338 	_vars VSIZE 
      002EAC 52 04            [ 2]    1     sub sp,#VSIZE 
      002EAE 89               [ 2] 4339 	pushw x 
      002EAF CE 00 04         [ 2] 4340 	ldw x,basicptr 
      002EB2 1F 03            [ 2] 4341 	ldw (DOLP_ADR,sp),x
      002EB4 CE 00 00         [ 2] 4342 	ldw x,in.w 
      002EB7 1F 05            [ 2] 4343 	ldw (DOLP_INW,sp),x
      002EB9 72 5C 00 1F      [ 1] 4344 	inc loop_depth 
      002EBD 81               [ 4] 4345 	ret 
                                   4346 
                                   4347 ;--------------------------------
                                   4348 ; BASIC: UNTIL expr 
                                   4349 ; loop if exprssion is false 
                                   4350 ; else terminate loop
                                   4351 ;--------------------------------
      002EBE                       4352 until: 
      002EBE 72 5D 00 1F      [ 1] 4353 	tnz loop_depth 
      002EC2 26 03            [ 1] 4354 	jrne 1$ 
      002EC4 CC 16 94         [ 2] 4355 	jp syntax_error 
      002EC7                       4356 1$: 
      002EC7 CD 1C 1E         [ 4] 4357 	call condition  
      002ECA                       4358 	_xpop 
      002ECA 90 F6            [ 1]    1     ld a,(y)
      002ECC 93               [ 1]    2     ldw x,y 
      002ECD EE 01            [ 2]    3     ldw x,(1,x)
      002ECF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ED3 4D               [ 1] 4359 	tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002ED4 26 13            [ 1] 4360 	jrne 9$ 
      002ED6 5D               [ 2] 4361 	tnzw x 
      002ED7 26 10            [ 1] 4362 	jrne 9$ 
      002ED9 1E 03            [ 2] 4363 	ldw x,(DOLP_ADR,sp)
      002EDB CF 00 04         [ 2] 4364 	ldw basicptr,x 
      002EDE E6 02            [ 1] 4365 	ld a,(2,x)
      002EE0 C7 00 02         [ 1] 4366 	ld count,a 
      002EE3 1E 05            [ 2] 4367 	ldw x,(DOLP_INW,sp)
      002EE5 CF 00 00         [ 2] 4368 	ldw in.w,x 
      002EE8 81               [ 4] 4369 	ret 
      002EE9                       4370 9$:	; remove loop data from stack  
      002EE9 85               [ 2] 4371 	popw x
      002EEA                       4372 	_drop VSIZE
      002EEA 5B 04            [ 2]    1     addw sp,#VSIZE 
      002EEC 72 5A 00 1F      [ 1] 4373 	dec loop_depth 
      002EF0 FC               [ 2] 4374 	jp (x)
                                   4375 
                                   4376 ;--------------------------
                                   4377 ; BASIC: PORTA...PORTI  
                                   4378 ;  return constant value 
                                   4379 ;  PORT  base address 
                                   4380 ;---------------------------
      002EF1                       4381 const_porta:
      002EF1 AE 50 00         [ 2] 4382 	ldw x,#PA_BASE 
      002EF4 4F               [ 1] 4383 	clr a 
      002EF5 81               [ 4] 4384 	ret 
      002EF6                       4385 const_portb:
      002EF6 AE 50 05         [ 2] 4386 	ldw x,#PB_BASE 
      002EF9 4F               [ 1] 4387 	clr a 
      002EFA 81               [ 4] 4388 	ret 
      002EFB                       4389 const_portc:
      002EFB AE 50 0A         [ 2] 4390 	ldw x,#PC_BASE 
      002EFE 4F               [ 1] 4391 	clr a 
      002EFF 81               [ 4] 4392 	ret 
      002F00                       4393 const_portd:
      002F00 AE 50 0F         [ 2] 4394 	ldw x,#PD_BASE 
      002F03 4F               [ 1] 4395 	clr a 
      002F04 81               [ 4] 4396 	ret 
      002F05                       4397 const_porte:
      002F05 AE 50 14         [ 2] 4398 	ldw x,#PE_BASE 
      002F08 4F               [ 1] 4399 	clr a 
      002F09 81               [ 4] 4400 	ret 
      002F0A                       4401 const_portf:
      002F0A AE 50 19         [ 2] 4402 	ldw x,#PF_BASE 
      002F0D 4F               [ 1] 4403 	clr a 
      002F0E 81               [ 4] 4404 	ret 
      002F0F                       4405 const_portg:
      002F0F AE 50 1E         [ 2] 4406 	ldw x,#PG_BASE 
      002F12 4F               [ 1] 4407 	clr a 
      002F13 81               [ 4] 4408 	ret 
      002F14                       4409 const_porti:
      002F14 AE 50 28         [ 2] 4410 	ldw x,#PI_BASE 
      002F17 4F               [ 1] 4411 	clr a 
      002F18 81               [ 4] 4412 	ret 
                                   4413 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



                                   4414 ;-------------------------------
                                   4415 ; following return constant 
                                   4416 ; related to GPIO register offset 
                                   4417 ;---------------------------------
      002F19                       4418 const_odr:
      002F19 4F               [ 1] 4419 	clr a 
      002F1A AE 00 00         [ 2] 4420 	ldw x,#GPIO_ODR
      002F1D 81               [ 4] 4421 	ret 
      002F1E                       4422 const_idr:
      002F1E 4F               [ 1] 4423 	clr a 
      002F1F AE 00 01         [ 2] 4424 	ldw x,#GPIO_IDR
      002F22 81               [ 4] 4425 	ret 
      002F23                       4426 const_ddr:
      002F23 4F               [ 1] 4427 	clr a
      002F24 AE 00 02         [ 2] 4428 	ldw x,#GPIO_DDR
      002F27 81               [ 4] 4429 	ret 
      002F28                       4430 const_cr1:
      002F28 4F               [ 1] 4431 	clr a 
      002F29 AE 00 03         [ 2] 4432 	ldw x,#GPIO_CR1
      002F2C 81               [ 4] 4433 	ret 
      002F2D                       4434 const_cr2:
      002F2D 4F               [ 1] 4435 	clr a
      002F2E AE 00 04         [ 2] 4436 	ldw x,#GPIO_CR2
      002F31 81               [ 4] 4437 	ret 
                                   4438 ;-------------------------
                                   4439 ; BASIC: POUT 
                                   4440 ;  constant for port mode
                                   4441 ;  used by PMODE 
                                   4442 ;  to set pin as output
                                   4443 ;------------------------
      002F32                       4444 const_output:
      002F32 4F               [ 1] 4445 	clr a 
      002F33 AE 00 01         [ 2] 4446 	ldw x,#OUTP
      002F36 81               [ 4] 4447 	ret 
                                   4448 
                                   4449 ;-------------------------
                                   4450 ; BASIC: PINP 
                                   4451 ;  constant for port mode
                                   4452 ;  used by PMODE 
                                   4453 ;  to set pin as input
                                   4454 ;------------------------
      002F37                       4455 const_input:
      002F37 4F               [ 1] 4456 	clr a  
      002F38 AE 00 00         [ 2] 4457 	ldw x,#INP 
      002F3B 81               [ 4] 4458 	ret 
                                   4459 	
                                   4460 ;-----------------------
                                   4461 ; memory area constants
                                   4462 ;-----------------------
      002F3C                       4463 const_eeprom_base:
      002F3C 4F               [ 1] 4464 	clr a  
      002F3D AE 40 00         [ 2] 4465 	ldw x,#EEPROM_BASE 
      002F40 81               [ 4] 4466 	ret 
                                   4467 
                                   4468 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



                                   4469 ; BASIC: DATA 
                                   4470 ; when the interpreter find 
                                   4471 ; a DATA line it skip it.
                                   4472 ;---------------------------
      002F41                       4473 data:
      002F41 55 00 02 00 01   [ 1] 4474 	mov in,count 
      002F46 81               [ 4] 4475 	ret 
                                   4476 
                                   4477 ;------------------------------
                                   4478 ; check if it is a DATA line 
                                   4479 ; input: 
                                   4480 ;    X    line address 
                                   4481 ; output:
                                   4482 ;    Z    set if DATA line 
                                   4483 ;----------------------------
      002F47                       4484 is_data_line:
      002F47 89               [ 2] 4485 	pushw x 
      002F48 E6 03            [ 1] 4486 	ld a,(3,x)
      002F4A A1 80            [ 1] 4487 	cp a,#TK_CMD 
      002F4C 26 05            [ 1] 4488 	jrne 9$
      002F4E EE 04            [ 2] 4489 	ldw x,(4,x)
      002F50 A3 2F 41         [ 2] 4490 	cpw x,#data  
      002F53 85               [ 2] 4491 9$: popw x 
      002F54 81               [ 4] 4492 	ret 
                                   4493 
                                   4494 ;---------------------------------
                                   4495 ; BASIC: RESTORE [line#]
                                   4496 ; set data_ptr to first data line
                                   4497 ; if no DATA found pointer set to
                                   4498 ; zero.
                                   4499 ; if a line# is given as argument 
                                   4500 ; a data line with that number 
                                   4501 ; is searched and the data pointer 
                                   4502 ; is set to it. If there is no 
                                   4503 ; data line with that number 
                                   4504 ; the program is interrupted. 
                                   4505 ;---------------------------------
      002F55                       4506 restore:
      002F55 5F               [ 1] 4507 	clrw x 
      002F56 CF 00 06         [ 2] 4508 	ldw data_ptr,x 
      002F59 CF 00 08         [ 2] 4509 	ldw data_ofs,x 
      002F5C CE 00 1B         [ 2] 4510 	ldw x,txtbgn 
      002F5F CD 17 FB         [ 4] 4511 	call next_token 
      002F62 A1 84            [ 1] 4512 	cp a,#TK_INTGR
      002F64 26 10            [ 1] 4513 	jrne 0$
      002F66 CD 18 2D         [ 4] 4514 	call get_int24
      002F69 90 89            [ 2] 4515 	pushw y 
      002F6B 4F               [ 1] 4516 	clr a 
      002F6C CD 0C 45         [ 4] 4517 	call search_lineno  
      002F6F 90 85            [ 2] 4518 	popw y 
      002F71 5D               [ 2] 4519 	tnzw x 
      002F72 26 17            [ 1] 4520 	jrne set_data_pointer 
      002F74 20 44            [ 2] 4521 	jra data_error 
      002F76                       4522 0$:
      002F76                       4523 	_unget_token  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002F76 55 00 03 00 01   [ 1]    1      mov in,in.saved  
                                   4524 ; search first DATA line 	
      002F7B C3 00 1D         [ 2] 4525 1$:	cpw x,txtend
      002F7E 24 3A            [ 1] 4526 	jruge data_error 
      002F80                       4527 2$:	
      002F80 CD 2F 47         [ 4] 4528 	call is_data_line 
      002F83 26 00            [ 1] 4529 	jrne 4$
      002F85 CD 2F 98         [ 4] 4530 4$:	call try_next_line 
      002F88 26 FB            [ 1] 4531 	jrne 4$ 
      002F8A 81               [ 4] 4532 	ret 
                                   4533 
                                   4534 ;---------------------
                                   4535 ; set data pointer 
                                   4536 ; variables at new line 
                                   4537 ; input:
                                   4538 ;    X    line address 
                                   4539 ;----------------------
      002F8B                       4540 set_data_pointer:
      002F8B CF 00 06         [ 2] 4541 	ldw data_ptr,x
      002F8E E6 02            [ 1] 4542 	ld a,(2,x)
      002F90 C7 00 09         [ 1] 4543 	ld data_len,a 
      002F93 35 06 00 08      [ 1] 4544 	mov data_ofs,#FIRST_DATA_ITEM
      002F97 81               [ 4] 4545 	ret 
                                   4546 
                                   4547 
                                   4548 ;--------------------
                                   4549 ; at end of data line 
                                   4550 ; check if next line 
                                   4551 ; is a data line 
                                   4552 ; input:
                                   4553 ;    X   actual line address 
                                   4554 ;  
                                   4555 ;-------------------
      002F98                       4556 try_next_line: 
      002F98 E6 02            [ 1] 4557 	ld a,(2,x)
      002F9A C7 00 0E         [ 1] 4558 	ld acc8,a 
      002F9D 72 5F 00 0D      [ 1] 4559 	clr acc16 
      002FA1 72 BB 00 0D      [ 2] 4560 	addw x,acc16 
      002FA5 C3 00 1D         [ 2] 4561 	cpw x,txtend 
      002FA8 25 02            [ 1] 4562 	jrult 1$
      002FAA 20 0E            [ 2] 4563 	jra data_error 
      002FAC                       4564 1$:	
      002FAC CD 2F 47         [ 4] 4565 	call is_data_line 
      002FAF 27 04            [ 1] 4566 	jreq 2$
      002FB1 A6 01            [ 1] 4567 	ld a,#1  
      002FB3 20 04            [ 2] 4568 	jra 9$
      002FB5 CD 2F 8B         [ 4] 4569 2$:	call set_data_pointer
      002FB8 4F               [ 1] 4570 	clr a  
      002FB9 81               [ 4] 4571 9$:	ret 
      002FBA                       4572 data_error:	
      002FBA A6 0C            [ 1] 4573     ld a,#ERR_NO_DATA 
      002FBC CC 16 96         [ 2] 4574 	jp tb_error 
                                   4575 
                                   4576 
                                   4577 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



                                   4578 ; BASIC: READ 
                                   4579 ; return next data item | 0 
                                   4580 ;---------------------------------
                           000001  4581 	CTX_BPTR=1 
                           000003  4582 	CTX_IN=3 
                           000004  4583 	CTX_COUNT=4 
                           000005  4584 	INT24=5
                           000007  4585 	VSIZE=7 
      002FBF                       4586 read:
      002FBF                       4587 	_vars  VSIZE 
      002FBF 52 07            [ 2]    1     sub sp,#VSIZE 
      002FC1 CD 20 5E         [ 4] 4588 	call save_context
      002FC4                       4589 read01:	
      002FC4 C6 00 08         [ 1] 4590 	ld a,data_ofs
      002FC7 C1 00 09         [ 1] 4591 	cp a,data_len 
      002FCA 27 37            [ 1] 4592 	jreq 2$ ; end of line  
      002FCC                       4593 0$:
      002FCC CE 00 06         [ 2] 4594 	ldw x,data_ptr 
      002FCF CF 00 04         [ 2] 4595 	ldw basicptr,x 
      002FD2 55 00 08 00 01   [ 1] 4596 	mov in,data_ofs 
      002FD7 55 00 09 00 02   [ 1] 4597 	mov count,data_len  
      002FDC CD 1B 05         [ 4] 4598 	call expression 
      002FDF A1 84            [ 1] 4599 	cp a,#TK_INTGR 
      002FE1 27 03            [ 1] 4600 	jreq 1$ 
      002FE3 CC 16 94         [ 2] 4601 	jp syntax_error 
      002FE6                       4602 1$:
      002FE6 CD 17 FB         [ 4] 4603 	call next_token ; skip comma
      002FE9 CE 00 04         [ 2] 4604 	ldw x,basicptr 
      002FEC CF 00 06         [ 2] 4605 	ldw data_ptr,x 
      002FEF 55 00 01 00 08   [ 1] 4606 	mov data_ofs,in 
      002FF4 CD 20 6E         [ 4] 4607 	call rest_context
      002FF7                       4608 	_xpop 
      002FF7 90 F6            [ 1]    1     ld a,(y)
      002FF9 93               [ 1]    2     ldw x,y 
      002FFA EE 01            [ 2]    3     ldw x,(1,x)
      002FFC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003000                       4609 	_drop VSIZE 
      003000 5B 07            [ 2]    1     addw sp,#VSIZE 
      003002 81               [ 4] 4610 	ret 
      003003                       4611 2$: ; end of line reached 
                                   4612 	; try next line 
      003003 CE 00 06         [ 2] 4613 	ldw x,data_ptr  
      003006 CD 2F 98         [ 4] 4614 	call try_next_line
      003009 27 C1            [ 1] 4615 	jreq 0$ 
      00300B 20 AD            [ 2] 4616 	jra data_error 
                                   4617 
                                   4618 ;---------------------------------
                                   4619 ; BASIC: SPIEN clkdiv, 0|1  
                                   4620 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4621 ; if clkdiv==-1 disable SPI
                                   4622 ; 0|1 -> disable|enable  
                                   4623 ;--------------------------------- 
                           000005  4624 SPI_CS_BIT=5
      00300D                       4625 spi_enable:
      00300D CD 19 C3         [ 4] 4626 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      003010 A1 02            [ 1] 4627 	cp a,#2
      003012 27 03            [ 1] 4628 	jreq 1$
      003014 CC 16 94         [ 2] 4629 	jp syntax_error 
      003017                       4630 1$: 
      003017 72 12 50 C7      [ 1] 4631 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      00301B 85               [ 2] 4632 	popw x  
      00301C 5D               [ 2] 4633 	tnzw x 
      00301D 27 21            [ 1] 4634 	jreq spi_disable 
      00301F 85               [ 2] 4635 	popw x 
      003020 A6 08            [ 1] 4636 	ld a,#(1<<SPI_CR1_BR)
      003022 42               [ 4] 4637 	mul x,a 
      003023 9F               [ 1] 4638 	ld a,xl 
      003024 C7 52 00         [ 1] 4639 	ld SPI_CR1,a 
                                   4640 ; configure ~CS on PE5 (D10 on CN8) as output. 
      003027 72 1A 50 14      [ 1] 4641 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      00302B 72 1A 50 16      [ 1] 4642 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4643 ; configure SPI as master mode 0.	
      00302F 72 14 52 00      [ 1] 4644 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4645 ; ~CS line controlled by sofware 	
      003033 72 12 52 01      [ 1] 4646 	bset SPI_CR2,#SPI_CR2_SSM 
      003037 72 10 52 01      [ 1] 4647     bset SPI_CR2,#SPI_CR2_SSI 
                                   4648 ; enable SPI
      00303B 72 1C 52 00      [ 1] 4649 	bset SPI_CR1,#SPI_CR1_SPE 	
      00303F 81               [ 4] 4650 	ret 
      003040                       4651 spi_disable:
      003040                       4652 	_drop #2; throw first argument.
      003040 5B 02            [ 2]    1     addw sp,##2 
                                   4653 ; wait spi idle 
      003042 A6 82            [ 1] 4654 1$:	ld a,#0x82 
      003044 C4 52 03         [ 1] 4655 	and a,SPI_SR
      003047 A1 02            [ 1] 4656 	cp a,#2 
      003049 26 F7            [ 1] 4657 	jrne 1$
      00304B 72 1D 52 00      [ 1] 4658 	bres SPI_CR1,#SPI_CR1_SPE
      00304F 72 13 50 C7      [ 1] 4659 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      003053 72 1B 50 16      [ 1] 4660 	bres PE_DDR,#SPI_CS_BIT 
      003057 81               [ 4] 4661 	ret 
                                   4662 
      003058                       4663 spi_clear_error:
      003058 A6 78            [ 1] 4664 	ld a,#0x78 
      00305A C5 52 03         [ 1] 4665 	bcp a,SPI_SR 
      00305D 27 04            [ 1] 4666 	jreq 1$
      00305F 72 5F 52 03      [ 1] 4667 	clr SPI_SR 
      003063 81               [ 4] 4668 1$: ret 
                                   4669 
      003064                       4670 spi_send_byte:
      003064 88               [ 1] 4671 	push a 
      003065 CD 30 58         [ 4] 4672 	call spi_clear_error
      003068 84               [ 1] 4673 	pop a 
      003069 72 03 52 03 FB   [ 2] 4674 	btjf SPI_SR,#SPI_SR_TXE,.
      00306E C7 52 04         [ 1] 4675 	ld SPI_DR,a
      003071 72 01 52 03 FB   [ 2] 4676 	btjf SPI_SR,#SPI_SR_RXNE,.  
      003076 C6 52 04         [ 1] 4677 	ld a,SPI_DR 
      003079 81               [ 4] 4678 	ret 
                                   4679 
      00307A                       4680 spi_rcv_byte:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      00307A A6 FF            [ 1] 4681 	ld a,#255
      00307C 72 01 52 03 E3   [ 2] 4682 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      003081 C6 52 04         [ 1] 4683 	ld a,SPI_DR 
      003084 81               [ 4] 4684 	ret
                                   4685 
                                   4686 ;------------------------------
                                   4687 ; BASIC: SPIWR byte [,byte]
                                   4688 ; write 1 or more byte
                                   4689 ;------------------------------
      003085                       4690 spi_write:
      003085 CD 1B 05         [ 4] 4691 	call expression
      003088 A1 84            [ 1] 4692 	cp a,#TK_INTGR 
      00308A 27 03            [ 1] 4693 	jreq 1$
      00308C CC 16 94         [ 2] 4694 	jp syntax_error 
      00308F                       4695 1$:	
      00308F 9F               [ 1] 4696 	ld a,xl 
      003090 CD 30 64         [ 4] 4697 	call spi_send_byte 
      003093 CD 17 FB         [ 4] 4698 	call next_token 
      003096 A1 08            [ 1] 4699 	cp a,#TK_COMMA 
      003098 26 02            [ 1] 4700 	jrne 2$ 
      00309A 20 E9            [ 2] 4701 	jra spi_write 
      00309C 4D               [ 1] 4702 2$:	tnz a 
      00309D 27 05            [ 1] 4703 	jreq 3$
      00309F                       4704 	_unget_token  
      00309F 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0030A4 81               [ 4] 4705 3$:	ret 
                                   4706 
                                   4707 
                                   4708 ;-------------------------------
                                   4709 ; BASIC: SPIRD 	
                                   4710 ; read one byte from SPI 
                                   4711 ;-------------------------------
      0030A5                       4712 spi_read:
      0030A5 CD 30 7A         [ 4] 4713 	call spi_rcv_byte 
      0030A8 5F               [ 1] 4714 	clrw x 
      0030A9 97               [ 1] 4715 	ld xl,a 
      0030AA 4F               [ 1] 4716 	clr a  
      0030AB 81               [ 4] 4717 	ret 
                                   4718 
                                   4719 ;------------------------------
                                   4720 ; BASIC: SPISEL 0|1 
                                   4721 ; set state of ~CS line
                                   4722 ; 0|1 deselect|select  
                                   4723 ;------------------------------
      0030AC                       4724 spi_select:
      0030AC CD 17 FB         [ 4] 4725 	call next_token 
      0030AF A1 84            [ 1] 4726 	cp a,#TK_INTGR 
      0030B1 27 03            [ 1] 4727 	jreq 1$
      0030B3 CC 16 94         [ 2] 4728 	jp syntax_error 
      0030B6 5D               [ 2] 4729 1$: tnzw x  
      0030B7 27 05            [ 1] 4730 	jreq cs_high 
      0030B9 72 1B 50 14      [ 1] 4731 	bres PE_ODR,#SPI_CS_BIT
      0030BD 81               [ 4] 4732 	ret 
      0030BE                       4733 cs_high: 
      0030BE 72 1A 50 14      [ 1] 4734 	bset PE_ODR,#SPI_CS_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      0030C2 81               [ 4] 4735 	ret 
                                   4736 
                                   4737 ;-------------------------------
                                   4738 ; BASIC: PAD 
                                   4739 ; Return pad buffer address.
                                   4740 ;------------------------------
      0030C3                       4741 pad_ref:
      0030C3 AE 16 B8         [ 2] 4742 	ldw x,#pad 
      0030C6 4F               [ 1] 4743 	clr a
      0030C7 81               [ 4] 4744 	ret 
                                   4745 
                                   4746 ;****************************
                                   4747 ; expression stack 
                                   4748 ; manipulation routines
                                   4749 ;****************************
                                   4750 
                                   4751 ;-----------------------------
                                   4752 ; BASIC: PUSH expr|rel|cond 
                                   4753 ; push the result on xtack
                                   4754 ;-----------------------------
      0030C8                       4755 xpush:
      0030C8 CD 1C 1E         [ 4] 4756 	call condition 
      0030CB 81               [ 4] 4757 	ret 
                                   4758 
                                   4759 ;------------------------------
                                   4760 ; BASIC: POP 
                                   4761 ; pop top of xstack 
                                   4762 ;------------------------------
      0030CC                       4763 xpop:
      0030CC                       4764 	_xpop 
      0030CC 90 F6            [ 1]    1     ld a,(y)
      0030CE 93               [ 1]    2     ldw x,y 
      0030CF EE 01            [ 2]    3     ldw x,(1,x)
      0030D1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0030D5 81               [ 4] 4765 	ret 
                                   4766 
                                   4767 
                                   4768 ;------------------------------
                                   4769 ; BASIC: ALLOC expr 
                                   4770 ; allocate expr element on xtack 
                                   4771 ;-------------------------------
      0030D6                       4772 xalloc: 
      0030D6 CD 1B 05         [ 4] 4773 	call expression 
      0030D9 A1 84            [ 1] 4774 	cp a,#TK_INTGR
      0030DB 27 03            [ 1] 4775 	jreq 1$ 
      0030DD CC 16 94         [ 2] 4776 	jp syntax_error
      0030E0                       4777 1$: _xpop 
      0030E0 90 F6            [ 1]    1     ld a,(y)
      0030E2 93               [ 1]    2     ldw x,y 
      0030E3 EE 01            [ 2]    3     ldw x,(1,x)
      0030E5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0030E9 4D               [ 1] 4778 	tnz a 
      0030EA 27 05            [ 1] 4779 	jreq 3$ 
      0030EC A6 0A            [ 1] 4780 2$:	ld a,#ERR_BAD_VALUE
      0030EE CC 16 96         [ 2] 4781 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      0030F1 A3 00 14         [ 2] 4782 3$: cpw x,#XSTACK_SIZE 
      0030F4 22 F6            [ 1] 4783 	jrugt 2$
      0030F6 A6 03            [ 1] 4784 	ld a,#CELL_SIZE 
      0030F8 42               [ 4] 4785 	mul x,a 
      0030F9 CF 00 0D         [ 2] 4786 	ldw acc16,x 
      0030FC 72 B2 00 0D      [ 2] 4787 	subw y,acc16 
      003100 90 A3 17 38      [ 2] 4788 	cpw y,#xstack_full
      003104 22 05            [ 1] 4789 	jrugt 9$
      003106 A6 01            [ 1] 4790 	ld a,#ERR_MEM_FULL
      003108 CC 16 96         [ 2] 4791 	jp tb_error 
      00310B                       4792 9$:	 
      00310B 81               [ 4] 4793 	ret 
                                   4794 
                                   4795 
                                   4796 ;------------------------------
                                   4797 ;  BASIC DROP expr 
                                   4798 ;  expr in range {0..XSTACK_SIZE}
                                   4799 ;  discard n elements from xtack
                                   4800 ;------------------------------
      00310C                       4801 xdrop:
      00310C CD 1B 05         [ 4] 4802 	call expression 
      00310F A1 84            [ 1] 4803 	cp a,#TK_INTGR
      003111 27 03            [ 1] 4804 	jreq 1$ 
      003113 CC 16 94         [ 2] 4805 	jp syntax_error 
      003116                       4806 1$:	_xpop 
      003116 90 F6            [ 1]    1     ld a,(y)
      003118 93               [ 1]    2     ldw x,y 
      003119 EE 01            [ 2]    3     ldw x,(1,x)
      00311B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00311F 9F               [ 1] 4807 	ld a,xl 
      003120 A4 1F            [ 1] 4808 	and a,#0x1f 
      003122 5F               [ 1] 4809 	clrw x 
      003123 97               [ 1] 4810 	ld xl,a 
      003124 A6 03            [ 1] 4811 	ld a,#CELL_SIZE 
      003126 42               [ 4] 4812 	mul x,a 
      003127 CF 00 0D         [ 2] 4813 	ldw acc16,x  
      00312A 72 B9 00 0D      [ 2] 4814 	addw y,acc16 
      00312E 90 A3 17 73      [ 2] 4815 	cpw y,#XSTACK_EMPTY 
      003132 23 04            [ 2] 4816 	jrule 9$
      003134 90 AE 17 73      [ 2] 4817 	ldw y,#XSTACK_EMPTY 
      003138 81               [ 4] 4818 9$:	ret 
                                   4819 
                                   4820 ;-----------------------
                                   4821 ; check if value in A:X 
                                   4822 ; is inside xstack bound
                                   4823 ; output:
                                   4824 ;    X     slot address  
                                   4825 ;-----------------------
      003139                       4826 xstack_bound:
      003139 4D               [ 1] 4827 	tnz a 
      00313A 26 16            [ 1] 4828 	jrne 8$ 
      00313C A3 00 14         [ 2] 4829 1$: cpw x,#XSTACK_SIZE 
      00313F 22 11            [ 1] 4830 	jrugt 8$
      003141 A6 03            [ 1] 4831 	ld a,#CELL_SIZE 
      003143 42               [ 4] 4832 	mul x,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      003144 CF 00 0D         [ 2] 4833 	ldw acc16,x 
      003147 93               [ 1] 4834 	ldw x,y 
      003148 72 BB 00 0D      [ 2] 4835 	addw x,acc16 
      00314C A3 17 73         [ 2] 4836 	cpw x,#XSTACK_EMPTY 
      00314F 24 01            [ 1] 4837 	jruge 8$  
      003151 81               [ 4] 4838 	ret 
      003152 A6 0A            [ 1] 4839 8$: ld a,#ERR_BAD_VALUE
      003154 CC 16 96         [ 2] 4840 	jp tb_error 
                                   4841 
                                   4842 ;-------------------------
                                   4843 ; BASIC: PUT expr, cond 
                                   4844 ; expr -> slot 
                                   4845 ; cond -> valut to put 
                                   4846 ; on xstack 
                                   4847 ;-------------------------
      003157                       4848 xput:
      003157 CD 19 C3         [ 4] 4849 	call arg_list 
      00315A A1 02            [ 1] 4850 	cp a,#2 
      00315C 27 03            [ 1] 4851 	jreq 1$ 
      00315E CC 16 94         [ 2] 4852 0$:	jp syntax_error
      003161                       4853 1$: _xpop   ; value to put 
      003161 90 F6            [ 1]    1     ld a,(y)
      003163 93               [ 1]    2     ldw x,y 
      003164 EE 01            [ 2]    3     ldw x,(1,x)
      003166 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00316A 89               [ 2] 4854 	pushw x 
      00316B 88               [ 1] 4855 	push a 
      00316C                       4856 	_xpop    ; slot 
      00316C 90 F6            [ 1]    1     ld a,(y)
      00316E 93               [ 1]    2     ldw x,y 
      00316F EE 01            [ 2]    3     ldw x,(1,x)
      003171 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003175 CD 31 39         [ 4] 4857 	call xstack_bound
      003178 CF 00 19         [ 2] 4858     ldw ptr16,x 
      00317B 84               [ 1] 4859 	pop a 
      00317C 85               [ 2] 4860 	popw x 
      00317D 72 C7 00 19      [ 4] 4861 	ld [ptr16],a 
      003181 72 5C 00 1A      [ 1] 4862 	inc ptr8 
      003185 72 CF 00 19      [ 5] 4863 	ldw [ptr16],x 
      003189 81               [ 4] 4864 	ret 
                                   4865 
                                   4866 ;------------------------
                                   4867 ; BASIC: PICK expr 
                                   4868 ; get nième element on 
                                   4869 ; xtack. 
                                   4870 ;-----------------------
      00318A                       4871 xpick:
      00318A CD 19 BE         [ 4] 4872 	call func_args 
      00318D A1 01            [ 1] 4873 	cp a,#1 
      00318F 27 03            [ 1] 4874 	jreq 1$
      003191 CC 16 94         [ 2] 4875 	jp syntax_error 
      003194                       4876 1$: _xpop 
      003194 90 F6            [ 1]    1     ld a,(y)
      003196 93               [ 1]    2     ldw x,y 
      003197 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      003199 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00319D CD 31 39         [ 4] 4877 	call xstack_bound
      0031A0 F6               [ 1] 4878     ld a,(x)
      0031A1 EE 01            [ 2] 4879 	ldw x,(1,x)				
      0031A3 81               [ 4] 4880 	ret 
                                   4881 
                                   4882 
                                   4883 ;----------------------------
                                   4884 ; BASIC: AUTORUN \C | label  
                                   4885 ;  \C -> cancel autorun 
                                   4886 ;  addr -> register an 
                                   4887 ;    autorun program 
                                   4888 ;    this program execute at 
                                   4889 ;     reset/boot 
                                   4890 ;----------------------------
      0031A4                       4891 cmd_auto_run:
      0031A4 CD 17 FB         [ 4] 4892 	call next_token 
      0031A7 A1 03            [ 1] 4893 	cp a,#TK_LABEL 
      0031A9 27 19            [ 1] 4894 	jreq 1$ 
      0031AB A1 04            [ 1] 4895 	cp a,#TK_CHAR 
      0031AD 26 12            [ 1] 4896 	jrne 0$ 
      0031AF F6               [ 1] 4897 	ld a,(x)
      0031B0 72 5C 00 01      [ 1] 4898 	inc in 
      0031B4 A4 DF            [ 1] 4899 	and a,#0xDF 
      0031B6 A1 43            [ 1] 4900 	cp a,#'C 
      0031B8 26 07            [ 1] 4901 	jrne 0$ 
      0031BA AE 40 00         [ 2] 4902 	ldw x,#EEPROM_BASE 
      0031BD CD 28 E4         [ 4] 4903 	call erase_header
      0031C0 81               [ 4] 4904 	ret 
      0031C1 CC 16 94         [ 2] 4905 0$:	jp syntax_error
      0031C4 89               [ 2] 4906 1$:	pushw x 
      0031C5 CD 18 14         [ 4] 4907 	call skip_string
      0031C8 85               [ 2] 4908 	popw x 
      0031C9 CD 31 FA         [ 4] 4909 	call search_program
      0031CC 26 05            [ 1] 4910 	jrne 2$ 
      0031CE A6 0A            [ 1] 4911 	ld a,#ERR_BAD_VALUE
      0031D0 CC 16 96         [ 2] 4912 	jp tb_error 
      0031D3 89               [ 2] 4913 2$: pushw x 
      0031D4 72 5F 00 18      [ 1] 4914 	clr farptr 
      0031D8 AE 40 00         [ 2] 4915 	ldw x,#EEPROM_BASE
      0031DB CF 00 19         [ 2] 4916 	ldw ptr16,x 
      0031DE C6 31 F8         [ 1] 4917 	ld a,AR_SIGN 
      0031E1 5F               [ 1] 4918 	clrw x 	 
      0031E2 CD 07 8B         [ 4] 4919 	call write_byte
      0031E5 C6 31 F9         [ 1] 4920 	ld a,AR_SIGN+1
      0031E8 CD 07 8B         [ 4] 4921 	call write_byte 
      0031EB 7B 01            [ 1] 4922 	ld a,(1,sp)
      0031ED CD 07 8B         [ 4] 4923 	call write_byte 
      0031F0 7B 02            [ 1] 4924 	ld a,(2,sp)
      0031F2 CD 07 8B         [ 4] 4925 	call write_byte 
      0031F5                       4926 	_drop 2 
      0031F5 5B 02            [ 2]    1     addw sp,#2 
      0031F7 81               [ 4] 4927 	ret 
                                   4928 
      0031F8 41 52                 4929 AR_SIGN: .ascii "AR" ; autorun signature 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



                                   4930 
                                   4931 ;-------------------------------
                                   4932 ; search a program in flash 
                                   4933 ; memory with a label at first 
                                   4934 ; that correspond to name 
                                   4935 ; pointed by X 
                                   4936 ; input:
                                   4937 ;    x      *name 
                                   4938 ; output: 
                                   4939 ;    X     prog_addr|0
                                   4940 ;-------------------------------
                           000001  4941 	WLKPTR=1 
                           000003  4942 	PNAME=3
                           000005  4943 	LIMIT=5
                           000007  4944 	YSAVE=7
                           000006  4945 	VSIZE=6 
      0031FA                       4946 search_program:
      0031FA 90 89            [ 2] 4947 	pushw y 
      0031FC                       4948 	_vars VSIZE 
      0031FC 52 06            [ 2]    1     sub sp,#VSIZE 
      0031FE 1F 03            [ 2] 4949 	ldw (PNAME,sp),x 
      003200 CD 2B 0C         [ 4] 4950 	call uflash 
      003203 1F 05            [ 2] 4951 	ldw (LIMIT,sp),x 
      003205 AE 38 80         [ 2] 4952 	ldw x,#app_space 
      003208 1F 01            [ 2] 4953 1$:	ldw (WLKPTR,sp),x  
      00320A 4F               [ 1] 4954 	clr a 
      00320B CD 24 E9         [ 4] 4955 	call is_program_addr
      00320E 26 10            [ 1] 4956 	jrne 4$
      003210 1C 00 07         [ 2] 4957 	addw x,#7 
      003213 F6               [ 1] 4958 	ld a,(x)
      003214 A1 03            [ 1] 4959 	cp a,#TK_LABEL 
      003216 26 08            [ 1] 4960 	jrne 4$ 
      003218 5C               [ 1] 4961 	incw x 
      003219 16 03            [ 2] 4962 	ldw y,(PNAME,sp)
      00321B CD 13 9D         [ 4] 4963 	call strcmp
      00321E 26 0A            [ 1] 4964 	jrne 6$
      003220                       4965 4$: 
      003220 CD 29 A8         [ 4] 4966 	call skip_to_next
      003223 13 05            [ 2] 4967 	cpw x,(LIMIT,sp)
      003225 25 E1            [ 1] 4968 	jrult 1$
      003227 5F               [ 1] 4969 	clrw x 
      003228 20 05            [ 2] 4970 	jra 8$
      00322A                       4971 6$: ; found label 
      00322A 1E 01            [ 2] 4972 	ldw x,(WLKPTR,sp)
      00322C 1C 00 04         [ 2] 4973 	addw x,#4 	
      00322F                       4974 8$:	
      00322F                       4975 	_drop VSIZE  
      00322F 5B 06            [ 2]    1     addw sp,#VSIZE 
      003231 90 85            [ 2] 4976 	popw y 
      003233 81               [ 4] 4977 	ret 
                                   4978 
                                   4979 
                                   4980 ;-------------------------------
                                   4981 ; BASIC: CHAIN label [, line#]
                                   4982 ; Execute another program like it 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



                                   4983 ; is a sub-routine. When the 
                                   4984 ; called program terminate 
                                   4985 ; execution continue at caller 
                                   4986 ; after CHAIN command. 
                                   4987 ; if a line# is given, the 
                                   4988 ; chained program start execution 
                                   4989 ; at this line#.
                                   4990 ;---------------------------------
                           000003  4991 	CHAIN_LN=3 
                           000005  4992 	CHAIN_ADDR=5 
                           000007  4993 	CHAIN_BP=7
                           000009  4994 	CHAIN_IN=9
                           00000A  4995 	CHAIN_COUNT=10 
                           00000B  4996 	CHAIN_TXTBGN=11 
                           00000D  4997 	CHAIN_TXTEND=13 
                           00000C  4998 	VSIZE=12 
                           000004  4999 	DISCARD=4 
      003234                       5000 cmd_chain:
      003234 85               [ 2] 5001 	popw x 
      003235                       5002 	_vars VSIZE 
      003235 52 0C            [ 2]    1     sub sp,#VSIZE 
      003237 89               [ 2] 5003 	pushw x
      003238 0F 03            [ 1] 5004 	clr (CHAIN_LN,sp) 
      00323A 0F 04            [ 1] 5005 	clr (CHAIN_LN+1,sp)  
      00323C A6 03            [ 1] 5006 	ld a,#TK_LABEL 
      00323E CD 19 B1         [ 4] 5007 	call expect 
      003241 89               [ 2] 5008 	pushw x 
      003242 CD 18 14         [ 4] 5009 	call skip_string
      003245 85               [ 2] 5010 	popw x 
      003246 CD 31 FA         [ 4] 5011 	call search_program 
      003249 5D               [ 2] 5012 	tnzw x  
      00324A 26 05            [ 1] 5013 	jrne 1$ 
      00324C A6 0A            [ 1] 5014 0$:	ld a,#ERR_BAD_VALUE
      00324E CC 16 96         [ 2] 5015 	jp tb_error 
      003251 1F 05            [ 2] 5016 1$: ldw (CHAIN_ADDR,sp), x ; program addr 
      003253 CD 17 FB         [ 4] 5017     call next_token 
      003256 A1 08            [ 1] 5018 	cp a,#TK_COMMA 
      003258 26 0C            [ 1] 5019 	jrne 4$
      00325A A6 84            [ 1] 5020 	ld a,#TK_INTGR
      00325C CD 19 B1         [ 4] 5021 	call expect 
      00325F CD 18 2D         [ 4] 5022 	call get_int24 
      003262 1F 03            [ 2] 5023 	ldw (CHAIN_LN,sp),x
      003264 20 05            [ 2] 5024 	jra 6$ 
      003266                       5025 4$: _unget_token 
      003266 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      00326B                       5026 6$: ; save chain context 
      00326B CE 00 04         [ 2] 5027 	ldw x,basicptr 
      00326E 1F 07            [ 2] 5028 	ldw (CHAIN_BP,sp),x 
      003270 CE 00 01         [ 2] 5029 	ldw x,in
      003273 1F 09            [ 2] 5030 	ldw (CHAIN_IN,sp),x
      003275 CE 00 1B         [ 2] 5031 	ldw x,txtbgn 
      003278 1F 0B            [ 2] 5032 	ldw (CHAIN_TXTBGN,sp),x
      00327A CE 00 1D         [ 2] 5033 	ldw x,txtend 
      00327D 1F 0D            [ 2] 5034 	ldw (CHAIN_TXTEND,sp),x  
                                   5035 ; set chained program context 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      00327F 1E 05            [ 2] 5036 	ldw x,(CHAIN_ADDR,sp)
      003281 CF 00 04         [ 2] 5037 	ldw basicptr,x 
      003284 CF 00 1B         [ 2] 5038 	ldw txtbgn,x 
      003287 1D 00 02         [ 2] 5039 	subw x,#2
      00328A FE               [ 2] 5040 	ldw x,(x)
      00328B 72 FB 05         [ 2] 5041 	addw x,(CHAIN_ADDR,sp)
      00328E CF 00 1D         [ 2] 5042 	ldw txtend,x  
      003291 1E 05            [ 2] 5043 	ldw x,(CHAIN_ADDR,sp)
      003293 E6 02            [ 1] 5044 	ld a,(2,x)
      003295 C7 00 02         [ 1] 5045 	ld count,a 
      003298 35 03 00 01      [ 1] 5046 	mov in,#3 
      00329C 1E 03            [ 2] 5047 	ldw x,(CHAIN_LN,sp)
      00329E 5D               [ 2] 5048 	tnzw x 
      00329F 27 13            [ 1] 5049 	jreq 8$ 
      0032A1 90 89            [ 2] 5050 	pushw y
      0032A3 4F               [ 1] 5051 	clr a  
      0032A4 CD 0C 45         [ 4] 5052 	call search_lineno
      0032A7 90 85            [ 2] 5053 	popw y 
      0032A9 5D               [ 2] 5054 	tnzw x 
      0032AA 27 A0            [ 1] 5055 	jreq 0$ 
      0032AC CF 00 04         [ 2] 5056 	ldw basicptr,x 
      0032AF E6 02            [ 1] 5057 	ld a,(2,x)
      0032B1 C7 00 02         [ 1] 5058 	ld count,a 
      0032B4 72 5C 00 34      [ 1] 5059 8$: inc chain_level
      0032B8 85               [ 2] 5060 	popw x 
      0032B9                       5061 	_drop DISCARD
      0032B9 5B 04            [ 2]    1     addw sp,#DISCARD 
      0032BB FC               [ 2] 5062 	jp (x)
                                   5063 
                                   5064 
                                   5065 ;------------------------------
                                   5066 ;      dictionary 
                                   5067 ; format:
                                   5068 ;   link:   2 bytes 
                                   5069 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   5070 ;   cmd_name: 16 byte max 
                                   5071 ;   code_addr: 2 bytes 
                                   5072 ;------------------------------
                                   5073 	.macro _dict_entry len,name,code_addr 
                                   5074 	.word LINK 
                                   5075 	LINK=.
                                   5076 name:
                                   5077 	.byte len   	
                                   5078 	.ascii "name"
                                   5079 	.word code_addr  
                                   5080 	.endm 
                                   5081 
                           000000  5082 	LINK=0
                                   5083 ; respect alphabetic order for BASIC names from Z-A
                                   5084 ; this sort order is for a cleaner WORDS cmd output. 	
      0032BC                       5085 kword_end:
      0032BC                       5086 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      0032BC 00 00                    1 	.word LINK 
                           0032BE     2 	LINK=.
      0032BE                          3 XOR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      0032BE A3                       4 	.byte 3+F_XOR   	
      0032BF 58 4F 52                 5 	.ascii "XOR"
      0032C2 00 8A                    6 	.word TK_XOR  
      0032C4                       5087 	_dict_entry,5,WRITE,write  
      0032C4 32 BE                    1 	.word LINK 
                           0032C6     2 	LINK=.
      0032C6                          3 WRITE:
      0032C6 05                       4 	.byte 5   	
      0032C7 57 52 49 54 45           5 	.ascii "WRITE"
      0032CC 2A 0C                    6 	.word write  
      0032CE                       5088 	_dict_entry,5,WORDS,words 
      0032CE 32 C6                    1 	.word LINK 
                           0032D0     2 	LINK=.
      0032D0                          3 WORDS:
      0032D0 05                       4 	.byte 5   	
      0032D1 57 4F 52 44 53           5 	.ascii "WORDS"
      0032D6 2D 89                    6 	.word words  
      0032D8                       5089 	_dict_entry 4,WAIT,wait 
      0032D8 32 D0                    1 	.word LINK 
                           0032DA     2 	LINK=.
      0032DA                          3 WAIT:
      0032DA 04                       4 	.byte 4   	
      0032DB 57 41 49 54              5 	.ascii "WAIT"
      0032DF 21 23                    6 	.word wait  
      0032E1                       5090 	_dict_entry,3+F_IFUNC,USR,usr
      0032E1 32 DA                    1 	.word LINK 
                           0032E3     2 	LINK=.
      0032E3                          3 USR:
      0032E3 13                       4 	.byte 3+F_IFUNC   	
      0032E4 55 53 52                 5 	.ascii "USR"
      0032E7 2B 2E                    6 	.word usr  
      0032E9                       5091 	_dict_entry,5,UNTIL,until 
      0032E9 32 E3                    1 	.word LINK 
                           0032EB     2 	LINK=.
      0032EB                          3 UNTIL:
      0032EB 05                       4 	.byte 5   	
      0032EC 55 4E 54 49 4C           5 	.ascii "UNTIL"
      0032F1 2E BE                    6 	.word until  
      0032F3                       5092 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      0032F3 32 EB                    1 	.word LINK 
                           0032F5     2 	LINK=.
      0032F5                          3 UFLASH:
      0032F5 16                       4 	.byte 6+F_IFUNC   	
      0032F6 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      0032FC 2B 0C                    6 	.word uflash  
      0032FE                       5093 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      0032FE 32 F5                    1 	.word LINK 
                           003300     2 	LINK=.
      003300                          3 UBOUND:
      003300 16                       4 	.byte 6+F_IFUNC   	
      003301 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      003307 1C D2                    6 	.word ubound  
      003309                       5094 	_dict_entry,4,TONE,tone  
      003309 33 00                    1 	.word LINK 
                           00330B     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      00330B                          3 TONE:
      00330B 04                       4 	.byte 4   	
      00330C 54 4F 4E 45              5 	.ascii "TONE"
      003310 25 EE                    6 	.word tone  
      003312                       5095 	_dict_entry,2,TO,to
      003312 33 0B                    1 	.word LINK 
                           003314     2 	LINK=.
      003314                          3 TO:
      003314 02                       4 	.byte 2   	
      003315 54 4F                    5 	.ascii "TO"
      003317 22 8D                    6 	.word to  
      003319                       5096 	_dict_entry,5,TIMER,set_timer
      003319 33 14                    1 	.word LINK 
                           00331B     2 	LINK=.
      00331B                          3 TIMER:
      00331B 05                       4 	.byte 5   	
      00331C 54 49 4D 45 52           5 	.ascii "TIMER"
      003321 2D F3                    6 	.word set_timer  
      003323                       5097 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      003323 33 1B                    1 	.word LINK 
                           003325     2 	LINK=.
      003325                          3 TIMEOUT:
      003325 17                       4 	.byte 7+F_IFUNC   	
      003326 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      00332D 2E 0A                    6 	.word timeout  
      00332F                       5098 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      00332F 33 25                    1 	.word LINK 
                           003331     2 	LINK=.
      003331                          3 TICKS:
      003331 15                       4 	.byte 5+F_IFUNC   	
      003332 54 49 43 4B 53           5 	.ascii "TICKS"
      003337 2B DA                    6 	.word get_ticks  
      003339                       5099 	_dict_entry,4,STOP,stop 
      003339 33 31                    1 	.word LINK 
                           00333B     2 	LINK=.
      00333B                          3 STOP:
      00333B 04                       4 	.byte 4   	
      00333C 53 54 4F 50              5 	.ascii "STOP"
      003340 27 57                    6 	.word stop  
      003342                       5100 	_dict_entry,4,STEP,step 
      003342 33 3B                    1 	.word LINK 
                           003344     2 	LINK=.
      003344                          3 STEP:
      003344 04                       4 	.byte 4   	
      003345 53 54 45 50              5 	.ascii "STEP"
      003349 22 D3                    6 	.word step  
      00334B                       5101 	_dict_entry,5,SPIWR,spi_write
      00334B 33 44                    1 	.word LINK 
                           00334D     2 	LINK=.
      00334D                          3 SPIWR:
      00334D 05                       4 	.byte 5   	
      00334E 53 50 49 57 52           5 	.ascii "SPIWR"
      003353 30 85                    6 	.word spi_write  
      003355                       5102 	_dict_entry,6,SPISEL,spi_select
      003355 33 4D                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



                           003357     2 	LINK=.
      003357                          3 SPISEL:
      003357 06                       4 	.byte 6   	
      003358 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      00335E 30 AC                    6 	.word spi_select  
      003360                       5103 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      003360 33 57                    1 	.word LINK 
                           003362     2 	LINK=.
      003362                          3 SPIRD:
      003362 15                       4 	.byte 5+F_IFUNC   	
      003363 53 50 49 52 44           5 	.ascii "SPIRD"
      003368 30 A5                    6 	.word spi_read  
      00336A                       5104 	_dict_entry,5,SPIEN,spi_enable 
      00336A 33 62                    1 	.word LINK 
                           00336C     2 	LINK=.
      00336C                          3 SPIEN:
      00336C 05                       4 	.byte 5   	
      00336D 53 50 49 45 4E           5 	.ascii "SPIEN"
      003372 30 0D                    6 	.word spi_enable  
      003374                       5105 	_dict_entry,5,SLEEP,sleep 
      003374 33 6C                    1 	.word LINK 
                           003376     2 	LINK=.
      003376                          3 SLEEP:
      003376 05                       4 	.byte 5   	
      003377 53 4C 45 45 50           5 	.ascii "SLEEP"
      00337C 2B 5D                    6 	.word sleep  
      00337E                       5106     _dict_entry,4,SIZE,cmd_size 
      00337E 33 76                    1 	.word LINK 
                           003380     2 	LINK=.
      003380                          3 SIZE:
      003380 04                       4 	.byte 4   	
      003381 53 49 5A 45              5 	.ascii "SIZE"
      003385 1C A5                    6 	.word cmd_size  
      003387                       5107 	_dict_entry,4,SAVE,cmd_save 
      003387 33 80                    1 	.word LINK 
                           003389     2 	LINK=.
      003389                          3 SAVE:
      003389 04                       4 	.byte 4   	
      00338A 53 41 56 45              5 	.ascii "SAVE"
      00338E 28 FE                    6 	.word cmd_save  
      003390                       5108 	_dict_entry 3,RUN,cmd_run
      003390 33 89                    1 	.word LINK 
                           003392     2 	LINK=.
      003392                          3 RUN:
      003392 03                       4 	.byte 3   	
      003393 52 55 4E                 5 	.ascii "RUN"
      003396 24 FA                    6 	.word cmd_run  
      003398                       5109 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      003398 33 92                    1 	.word LINK 
                           00339A     2 	LINK=.
      00339A                          3 RSHIFT:
      00339A 16                       4 	.byte 6+F_IFUNC   	
      00339B 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0033A1 2C 24                    6 	.word rshift  
      0033A3                       5110 	_dict_entry,3+F_IFUNC,RND,random 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      0033A3 33 9A                    1 	.word LINK 
                           0033A5     2 	LINK=.
      0033A5                          3 RND:
      0033A5 13                       4 	.byte 3+F_IFUNC   	
      0033A6 52 4E 44                 5 	.ascii "RND"
      0033A9 2C EE                    6 	.word random  
      0033AB                       5111 	_dict_entry,6,RETURN,return 
      0033AB 33 A5                    1 	.word LINK 
                           0033AD     2 	LINK=.
      0033AD                          3 RETURN:
      0033AD 06                       4 	.byte 6   	
      0033AE 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0033B4 24 CC                    6 	.word return  
      0033B6                       5112 	_dict_entry,7,RESTORE,restore 
      0033B6 33 AD                    1 	.word LINK 
                           0033B8     2 	LINK=.
      0033B8                          3 RESTORE:
      0033B8 07                       4 	.byte 7   	
      0033B9 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0033C0 2F 55                    6 	.word restore  
      0033C2                       5113 	_dict_entry 3,REM,remark 
      0033C2 33 B8                    1 	.word LINK 
                           0033C4     2 	LINK=.
      0033C4                          3 REM:
      0033C4 03                       4 	.byte 3   	
      0033C5 52 45 4D                 5 	.ascii "REM"
      0033C8 21 1D                    6 	.word remark  
      0033CA                       5114 	_dict_entry,6,REBOOT,cold_start
      0033CA 33 C4                    1 	.word LINK 
                           0033CC     2 	LINK=.
      0033CC                          3 REBOOT:
      0033CC 06                       4 	.byte 6   	
      0033CD 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0033D3 00 B5                    6 	.word cold_start  
      0033D5                       5115 	_dict_entry,4+F_IFUNC,READ,read  
      0033D5 33 CC                    1 	.word LINK 
                           0033D7     2 	LINK=.
      0033D7                          3 READ:
      0033D7 14                       4 	.byte 4+F_IFUNC   	
      0033D8 52 45 41 44              5 	.ascii "READ"
      0033DC 2F BF                    6 	.word read  
      0033DE                       5116 	_dict_entry,4+F_IFUNC,QKEY,qkey
      0033DE 33 D7                    1 	.word LINK 
                           0033E0     2 	LINK=.
      0033E0                          3 QKEY:
      0033E0 14                       4 	.byte 4+F_IFUNC   	
      0033E1 51 4B 45 59              5 	.ascii "QKEY"
      0033E5 2A CF                    6 	.word qkey  
      0033E7                       5117 	_dict_entry,3,PUT,xput 
      0033E7 33 E0                    1 	.word LINK 
                           0033E9     2 	LINK=.
      0033E9                          3 PUT:
      0033E9 03                       4 	.byte 3   	
      0033EA 50 55 54                 5 	.ascii "PUT"
      0033ED 31 57                    6 	.word xput  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      0033EF                       5118 	_dict_entry,4,PUSH,xpush   
      0033EF 33 E9                    1 	.word LINK 
                           0033F1     2 	LINK=.
      0033F1                          3 PUSH:
      0033F1 04                       4 	.byte 4   	
      0033F2 50 55 53 48              5 	.ascii "PUSH"
      0033F6 30 C8                    6 	.word xpush  
      0033F8                       5119 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      0033F8 33 F1                    1 	.word LINK 
                           0033FA     2 	LINK=.
      0033FA                          3 PORTI:
      0033FA 15                       4 	.byte 5+F_IFUNC   	
      0033FB 50 4F 52 54 49           5 	.ascii "PORTI"
      003400 2F 14                    6 	.word const_porti  
      003402                       5120 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      003402 33 FA                    1 	.word LINK 
                           003404     2 	LINK=.
      003404                          3 PORTG:
      003404 15                       4 	.byte 5+F_IFUNC   	
      003405 50 4F 52 54 47           5 	.ascii "PORTG"
      00340A 2F 0F                    6 	.word const_portg  
      00340C                       5121 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      00340C 34 04                    1 	.word LINK 
                           00340E     2 	LINK=.
      00340E                          3 PORTF:
      00340E 15                       4 	.byte 5+F_IFUNC   	
      00340F 50 4F 52 54 46           5 	.ascii "PORTF"
      003414 2F 0A                    6 	.word const_portf  
      003416                       5122 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      003416 34 0E                    1 	.word LINK 
                           003418     2 	LINK=.
      003418                          3 PORTE:
      003418 15                       4 	.byte 5+F_IFUNC   	
      003419 50 4F 52 54 45           5 	.ascii "PORTE"
      00341E 2F 05                    6 	.word const_porte  
      003420                       5123 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      003420 34 18                    1 	.word LINK 
                           003422     2 	LINK=.
      003422                          3 PORTD:
      003422 15                       4 	.byte 5+F_IFUNC   	
      003423 50 4F 52 54 44           5 	.ascii "PORTD"
      003428 2F 00                    6 	.word const_portd  
      00342A                       5124 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      00342A 34 22                    1 	.word LINK 
                           00342C     2 	LINK=.
      00342C                          3 PORTC:
      00342C 15                       4 	.byte 5+F_IFUNC   	
      00342D 50 4F 52 54 43           5 	.ascii "PORTC"
      003432 2E FB                    6 	.word const_portc  
      003434                       5125 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      003434 34 2C                    1 	.word LINK 
                           003436     2 	LINK=.
      003436                          3 PORTB:
      003436 15                       4 	.byte 5+F_IFUNC   	
      003437 50 4F 52 54 42           5 	.ascii "PORTB"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



      00343C 2E F6                    6 	.word const_portb  
      00343E                       5126 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      00343E 34 36                    1 	.word LINK 
                           003440     2 	LINK=.
      003440                          3 PORTA:
      003440 15                       4 	.byte 5+F_IFUNC   	
      003441 50 4F 52 54 41           5 	.ascii "PORTA"
      003446 2E F1                    6 	.word const_porta  
      003448                       5127 	_dict_entry 5,PRINT,print 
      003448 34 40                    1 	.word LINK 
                           00344A     2 	LINK=.
      00344A                          3 PRINT:
      00344A 05                       4 	.byte 5   	
      00344B 50 52 49 4E 54           5 	.ascii "PRINT"
      003450 1F D5                    6 	.word print  
      003452                       5128 	_dict_entry,4+F_IFUNC,POUT,const_output
      003452 34 4A                    1 	.word LINK 
                           003454     2 	LINK=.
      003454                          3 POUT:
      003454 14                       4 	.byte 4+F_IFUNC   	
      003455 50 4F 55 54              5 	.ascii "POUT"
      003459 2F 32                    6 	.word const_output  
      00345B                       5129 	_dict_entry,3+F_IFUNC,POP,xpop 
      00345B 34 54                    1 	.word LINK 
                           00345D     2 	LINK=.
      00345D                          3 POP:
      00345D 13                       4 	.byte 3+F_IFUNC   	
      00345E 50 4F 50                 5 	.ascii "POP"
      003461 30 CC                    6 	.word xpop  
      003463                       5130 	_dict_entry,4,POKE,poke 
      003463 34 5D                    1 	.word LINK 
                           003465     2 	LINK=.
      003465                          3 POKE:
      003465 04                       4 	.byte 4   	
      003466 50 4F 4B 45              5 	.ascii "POKE"
      00346A 21 FE                    6 	.word poke  
      00346C                       5131 	_dict_entry,5,PMODE,pin_mode 
      00346C 34 65                    1 	.word LINK 
                           00346E     2 	LINK=.
      00346E                          3 PMODE:
      00346E 05                       4 	.byte 5   	
      00346F 50 4D 4F 44 45           5 	.ascii "PMODE"
      003474 2C 5F                    6 	.word pin_mode  
      003476                       5132 	_dict_entry,4+F_IFUNC,PINP,const_input
      003476 34 6E                    1 	.word LINK 
                           003478     2 	LINK=.
      003478                          3 PINP:
      003478 14                       4 	.byte 4+F_IFUNC   	
      003479 50 49 4E 50              5 	.ascii "PINP"
      00347D 2F 37                    6 	.word const_input  
      00347F                       5133 	_dict_entry,4+F_IFUNC,PICK,xpick 
      00347F 34 78                    1 	.word LINK 
                           003481     2 	LINK=.
      003481                          3 PICK:
      003481 14                       4 	.byte 4+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      003482 50 49 43 4B              5 	.ascii "PICK"
      003486 31 8A                    6 	.word xpick  
      003488                       5134 	_dict_entry,4+F_IFUNC,PEEK,peek 
      003488 34 81                    1 	.word LINK 
                           00348A     2 	LINK=.
      00348A                          3 PEEK:
      00348A 14                       4 	.byte 4+F_IFUNC   	
      00348B 50 45 45 4B              5 	.ascii "PEEK"
      00348F 22 1F                    6 	.word peek  
      003491                       5135 	_dict_entry,5,PAUSE,pause 
      003491 34 8A                    1 	.word LINK 
                           003493     2 	LINK=.
      003493                          3 PAUSE:
      003493 05                       4 	.byte 5   	
      003494 50 41 55 53 45           5 	.ascii "PAUSE"
      003499 2B 68                    6 	.word pause  
      00349B                       5136 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      00349B 34 93                    1 	.word LINK 
                           00349D     2 	LINK=.
      00349D                          3 PAD:
      00349D 13                       4 	.byte 3+F_IFUNC   	
      00349E 50 41 44                 5 	.ascii "PAD"
      0034A1 30 C3                    6 	.word pad_ref  
      0034A3                       5137 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      0034A3 34 9D                    1 	.word LINK 
                           0034A5     2 	LINK=.
      0034A5                          3 OR:
      0034A5 92                       4 	.byte 2+F_OR   	
      0034A6 4F 52                    5 	.ascii "OR"
      0034A8 00 89                    6 	.word TK_OR  
      0034AA                       5138 	_dict_entry,2,ON,cmd_on 
      0034AA 34 A5                    1 	.word LINK 
                           0034AC     2 	LINK=.
      0034AC                          3 ON:
      0034AC 02                       4 	.byte 2   	
      0034AD 4F 4E                    5 	.ascii "ON"
      0034AF 23 FC                    6 	.word cmd_on  
      0034B1                       5139 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0034B1 34 AC                    1 	.word LINK 
                           0034B3     2 	LINK=.
      0034B3                          3 ODR:
      0034B3 13                       4 	.byte 3+F_IFUNC   	
      0034B4 4F 44 52                 5 	.ascii "ODR"
      0034B7 2F 19                    6 	.word const_odr  
      0034B9                       5140 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      0034B9 34 B3                    1 	.word LINK 
                           0034BB     2 	LINK=.
      0034BB                          3 NOT:
      0034BB 73                       4 	.byte 3+F_NOT   	
      0034BC 4E 4F 54                 5 	.ascii "NOT"
      0034BF 00 87                    6 	.word TK_NOT  
      0034C1                       5141 	_dict_entry,4,NEXT,next 
      0034C1 34 BB                    1 	.word LINK 
                           0034C3     2 	LINK=.
      0034C3                          3 NEXT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      0034C3 04                       4 	.byte 4   	
      0034C4 4E 45 58 54              5 	.ascii "NEXT"
      0034C8 23 15                    6 	.word next  
      0034CA                       5142 	_dict_entry,3,NEW,new
      0034CA 34 C3                    1 	.word LINK 
                           0034CC     2 	LINK=.
      0034CC                          3 NEW:
      0034CC 03                       4 	.byte 3   	
      0034CD 4E 45 57                 5 	.ascii "NEW"
      0034D0 27 A3                    6 	.word new  
      0034D2                       5143 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0034D2 34 CC                    1 	.word LINK 
                           0034D4     2 	LINK=.
      0034D4                          3 LSHIFT:
      0034D4 16                       4 	.byte 6+F_IFUNC   	
      0034D5 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0034DB 2B F8                    6 	.word lshift  
      0034DD                       5144 	_dict_entry,4+F_IFUNC,LOG2,log2 
      0034DD 34 D4                    1 	.word LINK 
                           0034DF     2 	LINK=.
      0034DF                          3 LOG2:
      0034DF 14                       4 	.byte 4+F_IFUNC   	
      0034E0 4C 4F 47 32              5 	.ascii "LOG2"
      0034E4 2E 58                    6 	.word log2  
      0034E6                       5145 	_dict_entry 4,LIST,list
      0034E6 34 DF                    1 	.word LINK 
                           0034E8     2 	LINK=.
      0034E8                          3 LIST:
      0034E8 04                       4 	.byte 4   	
      0034E9 4C 49 53 54              5 	.ascii "LIST"
      0034ED 1E DC                    6 	.word list  
      0034EF                       5146 	_dict_entry 3,LET,let 
      0034EF 34 E8                    1 	.word LINK 
                           0034F1     2 	LINK=.
      0034F1                          3 LET:
      0034F1 03                       4 	.byte 3   	
      0034F2 4C 45 54                 5 	.ascii "LET"
      0034F5 1C DD                    6 	.word let  
      0034F7                       5147 	_dict_entry,3+F_CFUNC,KEY,key 
      0034F7 34 F1                    1 	.word LINK 
                           0034F9     2 	LINK=.
      0034F9                          3 KEY:
      0034F9 23                       4 	.byte 3+F_CFUNC   	
      0034FA 4B 45 59                 5 	.ascii "KEY"
      0034FD 2A CB                    6 	.word key  
      0034FF                       5148 	_dict_entry,7,IWDGREF,refresh_iwdg
      0034FF 34 F9                    1 	.word LINK 
                           003501     2 	LINK=.
      003501                          3 IWDGREF:
      003501 07                       4 	.byte 7   	
      003502 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      003509 2E 53                    6 	.word refresh_iwdg  
      00350B                       5149 	_dict_entry,6,IWDGEN,enable_iwdg
      00350B 35 01                    1 	.word LINK 
                           00350D     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      00350D                          3 IWDGEN:
      00350D 06                       4 	.byte 6   	
      00350E 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      003514 2E 15                    6 	.word enable_iwdg  
      003516                       5150 	_dict_entry,5,INPUT,input_var  
      003516 35 0D                    1 	.word LINK 
                           003518     2 	LINK=.
      003518                          3 INPUT:
      003518 05                       4 	.byte 5   	
      003519 49 4E 50 55 54           5 	.ascii "INPUT"
      00351E 20 7E                    6 	.word input_var  
      003520                       5151 	_dict_entry,2,IF,if 
      003520 35 18                    1 	.word LINK 
                           003522     2 	LINK=.
      003522                          3 IF:
      003522 02                       4 	.byte 2   	
      003523 49 46                    5 	.ascii "IF"
      003525 22 40                    6 	.word if  
      003527                       5152 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      003527 35 22                    1 	.word LINK 
                           003529     2 	LINK=.
      003529                          3 IDR:
      003529 13                       4 	.byte 3+F_IFUNC   	
      00352A 49 44 52                 5 	.ascii "IDR"
      00352D 2F 1E                    6 	.word const_idr  
      00352F                       5153 	_dict_entry,3,HEX,hex_base
      00352F 35 29                    1 	.word LINK 
                           003531     2 	LINK=.
      003531                          3 HEX:
      003531 03                       4 	.byte 3   	
      003532 48 45 58                 5 	.ascii "HEX"
      003535 1C 92                    6 	.word hex_base  
      003537                       5154 	_dict_entry,4,GOTO,goto 
      003537 35 31                    1 	.word LINK 
                           003539     2 	LINK=.
      003539                          3 GOTO:
      003539 04                       4 	.byte 4   	
      00353A 47 4F 54 4F              5 	.ascii "GOTO"
      00353E 24 8E                    6 	.word goto  
      003540                       5155 	_dict_entry,5,GOSUB,gosub 
      003540 35 39                    1 	.word LINK 
                           003542     2 	LINK=.
      003542                          3 GOSUB:
      003542 05                       4 	.byte 5   	
      003543 47 4F 53 55 42           5 	.ascii "GOSUB"
      003548 24 A8                    6 	.word gosub  
      00354A                       5156 	_dict_entry,3,GET,cmd_get 
      00354A 35 42                    1 	.word LINK 
                           00354C     2 	LINK=.
      00354C                          3 GET:
      00354C 03                       4 	.byte 3   	
      00354D 47 45 54                 5 	.ascii "GET"
      003550 25 B6                    6 	.word cmd_get  
      003552                       5157 	_dict_entry,4+F_IFUNC,FREE,free
      003552 35 4C                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



                           003554     2 	LINK=.
      003554                          3 FREE:
      003554 14                       4 	.byte 4+F_IFUNC   	
      003555 46 52 45 45              5 	.ascii "FREE"
      003559 1C 9C                    6 	.word free  
      00355B                       5158 	_dict_entry,3,FOR,for 
      00355B 35 54                    1 	.word LINK 
                           00355D     2 	LINK=.
      00355D                          3 FOR:
      00355D 03                       4 	.byte 3   	
      00355E 46 4F 52                 5 	.ascii "FOR"
      003561 22 5D                    6 	.word for  
      003563                       5159 	_dict_entry,4,FCPU,fcpu 
      003563 35 5D                    1 	.word LINK 
                           003565     2 	LINK=.
      003565                          3 FCPU:
      003565 04                       4 	.byte 4   	
      003566 46 43 50 55              5 	.ascii "FCPU"
      00356A 2C 50                    6 	.word fcpu  
      00356C                       5160 	_dict_entry,5,ERASE,cmd_erase 
      00356C 35 65                    1 	.word LINK 
                           00356E     2 	LINK=.
      00356E                          3 ERASE:
      00356E 05                       4 	.byte 5   	
      00356F 45 52 41 53 45           5 	.ascii "ERASE"
      003574 28 02                    6 	.word cmd_erase  
      003576                       5161 	_dict_entry,3,END,cmd_end  
      003576 35 6E                    1 	.word LINK 
                           003578     2 	LINK=.
      003578                          3 END:
      003578 03                       4 	.byte 3   	
      003579 45 4E 44                 5 	.ascii "END"
      00357C 25 8A                    6 	.word cmd_end  
      00357E                       5162 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      00357E 35 78                    1 	.word LINK 
                           003580     2 	LINK=.
      003580                          3 EEPROM:
      003580 16                       4 	.byte 6+F_IFUNC   	
      003581 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      003587 2F 3C                    6 	.word const_eeprom_base  
      003589                       5163 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      003589 35 80                    1 	.word LINK 
                           00358B     2 	LINK=.
      00358B                          3 EEFREE:
      00358B 16                       4 	.byte 6+F_IFUNC   	
      00358C 45 45 46 52 45 45        5 	.ascii "EEFREE"
      003592 1D 31                    6 	.word func_eefree  
      003594                       5164 	_dict_entry,4,EDIT,cmd_edit 
      003594 35 8B                    1 	.word LINK 
                           003596     2 	LINK=.
      003596                          3 EDIT:
      003596 04                       4 	.byte 4   	
      003597 45 44 49 54              5 	.ascii "EDIT"
      00359B 1F 73                    6 	.word cmd_edit  
      00359D                       5165 	_dict_entry,6+F_CMD,DWRITE,digital_write
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



      00359D 35 96                    1 	.word LINK 
                           00359F     2 	LINK=.
      00359F                          3 DWRITE:
      00359F 06                       4 	.byte 6+F_CMD   	
      0035A0 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0035A6 27 0C                    6 	.word digital_write  
      0035A8                       5166 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      0035A8 35 9F                    1 	.word LINK 
                           0035AA     2 	LINK=.
      0035AA                          3 DROP:
      0035AA 04                       4 	.byte 4   	
      0035AB 44 52 4F 50              5 	.ascii "DROP"
      0035AF 31 0C                    6 	.word xdrop  
      0035B1                       5167 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0035B1 35 AA                    1 	.word LINK 
                           0035B3     2 	LINK=.
      0035B3                          3 DREAD:
      0035B3 15                       4 	.byte 5+F_IFUNC   	
      0035B4 44 52 45 41 44           5 	.ascii "DREAD"
      0035B9 26 D5                    6 	.word digital_read  
      0035BB                       5168 	_dict_entry,2,DO,do_loop
      0035BB 35 B3                    1 	.word LINK 
                           0035BD     2 	LINK=.
      0035BD                          3 DO:
      0035BD 02                       4 	.byte 2   	
      0035BE 44 4F                    5 	.ascii "DO"
      0035C0 2E AB                    6 	.word do_loop  
      0035C2                       5169 	_dict_entry,3,DIR,cmd_dir
      0035C2 35 BD                    1 	.word LINK 
                           0035C4     2 	LINK=.
      0035C4                          3 DIR:
      0035C4 03                       4 	.byte 3   	
      0035C5 44 49 52                 5 	.ascii "DIR"
      0035C8 29 C0                    6 	.word cmd_dir  
      0035CA                       5170 	_dict_entry,3,DIM,cmd_dim 
      0035CA 35 C4                    1 	.word LINK 
                           0035CC     2 	LINK=.
      0035CC                          3 DIM:
      0035CC 03                       4 	.byte 3   	
      0035CD 44 49 4D                 5 	.ascii "DIM"
      0035D0 1D B5                    6 	.word cmd_dim  
      0035D2                       5171 	_dict_entry,3,DEC,dec_base
      0035D2 35 CC                    1 	.word LINK 
                           0035D4     2 	LINK=.
      0035D4                          3 DEC:
      0035D4 03                       4 	.byte 3   	
      0035D5 44 45 43                 5 	.ascii "DEC"
      0035D8 1C 97                    6 	.word dec_base  
      0035DA                       5172 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      0035DA 35 D4                    1 	.word LINK 
                           0035DC     2 	LINK=.
      0035DC                          3 DDR:
      0035DC 13                       4 	.byte 3+F_IFUNC   	
      0035DD 44 44 52                 5 	.ascii "DDR"
      0035E0 2F 23                    6 	.word const_ddr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



      0035E2                       5173 	_dict_entry,4,DATA,data  
      0035E2 35 DC                    1 	.word LINK 
                           0035E4     2 	LINK=.
      0035E4                          3 DATA:
      0035E4 04                       4 	.byte 4   	
      0035E5 44 41 54 41              5 	.ascii "DATA"
      0035E9 2F 41                    6 	.word data  
      0035EB                       5174 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      0035EB 35 E4                    1 	.word LINK 
                           0035ED     2 	LINK=.
      0035ED                          3 CR2:
      0035ED 13                       4 	.byte 3+F_IFUNC   	
      0035EE 43 52 32                 5 	.ascii "CR2"
      0035F1 2F 2D                    6 	.word const_cr2  
      0035F3                       5175 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      0035F3 35 ED                    1 	.word LINK 
                           0035F5     2 	LINK=.
      0035F5                          3 CR1:
      0035F5 13                       4 	.byte 3+F_IFUNC   	
      0035F6 43 52 31                 5 	.ascii "CR1"
      0035F9 2F 28                    6 	.word const_cr1  
      0035FB                       5176 	_dict_entry,5,CONST,cmd_const 
      0035FB 35 F5                    1 	.word LINK 
                           0035FD     2 	LINK=.
      0035FD                          3 CONST:
      0035FD 05                       4 	.byte 5   	
      0035FE 43 4F 4E 53 54           5 	.ascii "CONST"
      003603 1D A1                    6 	.word cmd_const  
      003605                       5177 	_dict_entry,4+F_CFUNC,CHAR,func_char
      003605 35 FD                    1 	.word LINK 
                           003607     2 	LINK=.
      003607                          3 CHAR:
      003607 24                       4 	.byte 4+F_CFUNC   	
      003608 43 48 41 52              5 	.ascii "CHAR"
      00360C 2A 75                    6 	.word func_char  
      00360E                       5178 	_dict_entry,5,CHAIN,cmd_chain
      00360E 36 07                    1 	.word LINK 
                           003610     2 	LINK=.
      003610                          3 CHAIN:
      003610 05                       4 	.byte 5   	
      003611 43 48 41 49 4E           5 	.ascii "CHAIN"
      003616 32 34                    6 	.word cmd_chain  
      003618                       5179 	_dict_entry,3,BYE,bye 
      003618 36 10                    1 	.word LINK 
                           00361A     2 	LINK=.
      00361A                          3 BYE:
      00361A 03                       4 	.byte 3   	
      00361B 42 59 45                 5 	.ascii "BYE"
      00361E 2B 54                    6 	.word bye  
      003620                       5180 	_dict_entry,5,BTOGL,bit_toggle
      003620 36 1A                    1 	.word LINK 
                           003622     2 	LINK=.
      003622                          3 BTOGL:
      003622 05                       4 	.byte 5   	
      003623 42 54 4F 47 4C           5 	.ascii "BTOGL"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]



      003628 21 A5                    6 	.word bit_toggle  
      00362A                       5181 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      00362A 36 22                    1 	.word LINK 
                           00362C     2 	LINK=.
      00362C                          3 BTEST:
      00362C 15                       4 	.byte 5+F_IFUNC   	
      00362D 42 54 45 53 54           5 	.ascii "BTEST"
      003632 21 C7                    6 	.word bit_test  
      003634                       5182 	_dict_entry,4,BSET,bit_set 
      003634 36 2C                    1 	.word LINK 
                           003636     2 	LINK=.
      003636                          3 BSET:
      003636 04                       4 	.byte 4   	
      003637 42 53 45 54              5 	.ascii "BSET"
      00363B 21 60                    6 	.word bit_set  
      00363D                       5183 	_dict_entry,4,BRES,bit_reset
      00363D 36 36                    1 	.word LINK 
                           00363F     2 	LINK=.
      00363F                          3 BRES:
      00363F 04                       4 	.byte 4   	
      003640 42 52 45 53              5 	.ascii "BRES"
      003644 21 82                    6 	.word bit_reset  
      003646                       5184 	_dict_entry,3+F_IFUNC,BIT,bitmask
      003646 36 3F                    1 	.word LINK 
                           003648     2 	LINK=.
      003648                          3 BIT:
      003648 13                       4 	.byte 3+F_IFUNC   	
      003649 42 49 54                 5 	.ascii "BIT"
      00364C 2E 85                    6 	.word bitmask  
      00364E                       5185 	_dict_entry,3,AWU,awu 
      00364E 36 48                    1 	.word LINK 
                           003650     2 	LINK=.
      003650                          3 AWU:
      003650 03                       4 	.byte 3   	
      003651 41 57 55                 5 	.ascii "AWU"
      003654 2B 88                    6 	.word awu  
      003656                       5186 	_dict_entry,7,AUTORUN,cmd_auto_run
      003656 36 50                    1 	.word LINK 
                           003658     2 	LINK=.
      003658                          3 AUTORUN:
      003658 07                       4 	.byte 7   	
      003659 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      003660 31 A4                    6 	.word cmd_auto_run  
      003662                       5187 	_dict_entry,3+F_IFUNC,ASC,ascii
      003662 36 58                    1 	.word LINK 
                           003664     2 	LINK=.
      003664                          3 ASC:
      003664 13                       4 	.byte 3+F_IFUNC   	
      003665 41 53 43                 5 	.ascii "ASC"
      003668 2A 8C                    6 	.word ascii  
      00366A                       5188 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      00366A 36 64                    1 	.word LINK 
                           00366C     2 	LINK=.
      00366C                          3 AND:
      00366C 83                       4 	.byte 3+F_AND   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]



      00366D 41 4E 44                 5 	.ascii "AND"
      003670 00 88                    6 	.word TK_AND  
      003672                       5189 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      003672 36 6C                    1 	.word LINK 
                           003674     2 	LINK=.
      003674                          3 ALLOC:
      003674 05                       4 	.byte 5   	
      003675 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      00367A 30 D6                    6 	.word xalloc  
      00367C                       5190 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      00367C 36 74                    1 	.word LINK 
                           00367E     2 	LINK=.
      00367E                          3 ADCREAD:
      00367E 17                       4 	.byte 7+F_IFUNC   	
      00367F 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      003686 26 99                    6 	.word analog_read  
      003688                       5191 	_dict_entry,5,ADCON,power_adc 
      003688 36 7E                    1 	.word LINK 
                           00368A     2 	LINK=.
      00368A                          3 ADCON:
      00368A 05                       4 	.byte 5   	
      00368B 41 44 43 4F 4E           5 	.ascii "ADCON"
      003690 26 49                    6 	.word power_adc  
      003692                       5192 kword_dict::
      003692                       5193 	_dict_entry,3+F_IFUNC,ABS,abs
      003692 36 8A                    1 	.word LINK 
                           003694     2 	LINK=.
      003694                          3 ABS:
      003694 13                       4 	.byte 3+F_IFUNC   	
      003695 41 42 53                 5 	.ascii "ABS"
      003698 2B E1                    6 	.word abs  
                                   5194 
                                   5195 
                                   5196 
                                   5197 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      00369A                         30 test:
      00369A                         31     _vars VSIZE 
      00369A 52 08            [ 2]    1     sub sp,#VSIZE 
      00369C AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      00369F 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      0036A1 CE 00 0F         [ 2]   34     ldw x,ticks 
      0036A4 1F 01            [ 2]   35     ldw (T,sp),x
      0036A6                         36 1$: ; test add24 
      0036A6 A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      0036A8 AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      0036AB C7 00 0C         [ 1]   39     ld acc24,a 
      0036AE CF 00 0D         [ 2]   40     ldw acc24+1,x  
      0036B1 A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      0036B3 AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      0036B6 CD 01 7E         [ 4]   43     call add24 
      0036B9 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      0036BB 1D 00 01         [ 2]   45     subw x,#1
      0036BE 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      0036C0 26 E4            [ 1]   47     jrne 1$
      0036C2 CD 18 5A         [ 4]   48     call prt_acc24
      0036C5 A6 20            [ 1]   49     ld a,#SPACE 
      0036C7 CD 08 FF         [ 4]   50     call putc 
      0036CA CE 00 0F         [ 2]   51     ldw x,ticks 
      0036CD 72 F0 01         [ 2]   52     subw x,(T,sp)
      0036D0 CD 18 43         [ 4]   53     call prt_i16  
      0036D3 A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]



      0036D5 CD 08 FF         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      0036D8 CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      0036DB 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      0036DD CE 00 0F         [ 2]   60     ldw x,ticks 
      0036E0 1F 01            [ 2]   61     ldw (T,sp),x 
      0036E2                         62 2$: 
      0036E2 A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      0036E4 AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      0036E7 C7 00 0C         [ 1]   65     ld acc24,a 
      0036EA CF 00 0D         [ 2]   66     ldw acc24+1,x  
      0036ED A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      0036EF AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      0036F2 CD 02 79         [ 4]   69     call mul24 
      0036F5 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      0036F7 1D 00 01         [ 2]   71     subw x,#1
      0036FA 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      0036FC 26 E4            [ 1]   73     jrne 2$ 
      0036FE CD 18 5A         [ 4]   74    call prt_acc24 
      003701 A6 20            [ 1]   75    ld a,#SPACE 
      003703 CD 08 FF         [ 4]   76    call putc 
      003706 CE 00 0F         [ 2]   77     ldw x,ticks 
      003709 72 F0 01         [ 2]   78     subw x,(T,sp)
      00370C CD 18 43         [ 4]   79     call prt_i16 
      00370F A6 0D            [ 1]   80     ld a,#CR 
      003711 CD 08 FF         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      003714 CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      003717 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      003719 CE 00 0F         [ 2]   85     ldw x,ticks 
      00371C 1F 01            [ 2]   86     ldw (T,sp),x 
      00371E                         87 3$: 
      00371E A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003720 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      003723 C7 00 0C         [ 1]   90     ld acc24,a 
      003726 CF 00 0D         [ 2]   91     ldw acc24+1,x  
      003729 A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      00372B AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      00372E CD 02 79         [ 4]   94     call mul24 
      003731 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      003733 1D 00 01         [ 2]   96     subw x,#1
      003736 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      003738 26 E4            [ 1]   98     jrne 3$ 
      00373A CD 18 5A         [ 4]   99     call prt_acc24    
      00373D A6 20            [ 1]  100     ld a,#SPACE 
      00373F CD 08 FF         [ 4]  101     call putc 
      003742 CE 00 0F         [ 2]  102     ldw x,ticks 
      003745 72 F0 01         [ 2]  103     subw x,(T,sp)
      003748 CD 18 43         [ 4]  104     call prt_i16 
      00374B A6 0D            [ 1]  105     ld a,#CR 
      00374D CD 08 FF         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      003750 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      003753 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]



      003755 CE 00 0F         [ 2]  110     ldw x,ticks 
      003758 1F 01            [ 2]  111     ldw (T,sp),x 
      00375A                        112 4$:
      00375A A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      00375C AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      00375F C7 00 0C         [ 1]  115     ld acc24,a 
      003762 CF 00 0D         [ 2]  116     ldw acc24+1,x  
      003765 A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      003767 AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      00376A CD 02 79         [ 4]  119     call mul24 
      00376D 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      00376F 1D 00 01         [ 2]  121     subw x,#1
      003772 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      003774 26 E4            [ 1]  123     jrne 4$ 
      003776 CD 18 5A         [ 4]  124     call prt_acc24 
      003779 A6 20            [ 1]  125     ld a,#SPACE 
      00377B CD 08 FF         [ 4]  126     call putc 
      00377E CE 00 0F         [ 2]  127     ldw x,ticks 
      003781 72 F0 01         [ 2]  128     subw x,(T,sp)
      003784 CD 18 43         [ 4]  129     call prt_i16 
      003787 A6 0D            [ 1]  130     ld a,#CR 
      003789 CD 08 FF         [ 4]  131     call putc 
                                    132 ; test abs24 
      00378C CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      00378F 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      003791 CE 00 0F         [ 2]  135     ldw x,ticks 
      003794 1F 01            [ 2]  136     ldw (T,sp),x 
      003796                        137 5$: 
      003796 A6 FF            [ 1]  138     ld a,#0xff
      003798 AE FF FF         [ 2]  139     ldw x,#0xffff
      00379B CD 01 F3         [ 4]  140     call abs24 
      00379E C7 00 0C         [ 1]  141     ld acc24,a 
      0037A1 CF 00 0D         [ 2]  142     ldw acc24+1,x
      0037A4 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      0037A6 1D 00 01         [ 2]  144     subw x,#1
      0037A9 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      0037AB 26 E9            [ 1]  146     jrne 5$ 
      0037AD CD 18 5A         [ 4]  147     call prt_acc24 
      0037B0 A6 20            [ 1]  148     ld a,#SPACE 
      0037B2 CD 08 FF         [ 4]  149     call putc 
      0037B5 CE 00 0F         [ 2]  150     ldw x,ticks 
      0037B8 72 F0 01         [ 2]  151     subw x,(T,sp)
      0037BB CD 18 43         [ 4]  152     call prt_i16 
      0037BE                        153 6$:
      0037BE A6 0D            [ 1]  154     ld a,#CR 
      0037C0 CD 08 FF         [ 4]  155     call putc 
      0037C3 CD 38 09         [ 4]  156     call read_integer 
      0037C6 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      0037CB 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      0037D0 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      0037D5 CD 38 09         [ 4]  160     call read_integer 
      0037D8 C6 00 0C         [ 1]  161     ld a,acc24 
      0037DB CE 00 0D         [ 2]  162     ldw x,acc16 
      0037DE 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      0037E3 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]



      0037E8 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      0037ED CD 03 07         [ 4]  166     call div24 
      0037F0 88               [ 1]  167     push a 
      0037F1 89               [ 2]  168     pushw x 
      0037F2 CD 18 5A         [ 4]  169     call prt_acc24 
      0037F5 A6 20            [ 1]  170     ld a,#SPACE 
      0037F7 CD 08 FF         [ 4]  171     call putc 
      0037FA 85               [ 2]  172     popw x
      0037FB CF 00 0D         [ 2]  173     ldw acc16,x  
      0037FE 32 00 0C         [ 1]  174     pop acc24 
      003801 CD 18 5A         [ 4]  175     call prt_acc24
      003804 20 B8            [ 2]  176     jra 6$
      003806                        177     _drop VSIZE 
      003806 5B 08            [ 2]    1     addw sp,#VSIZE 
      003808 81               [ 4]  178     ret 
                                    179 
                                    180 
      003809                        181 read_integer:
      003809 A6 3F            [ 1]  182     ld a,#'? 
      00380B CD 08 FF         [ 4]  183     call putc  
      00380E 72 5F 00 02      [ 1]  184 	clr count  
      003812 CD 0A 61         [ 4]  185 	call readln 
      003815 AE 16 68         [ 2]  186 	ldw x,#tib 
      003818 3B 00 02         [ 1]  187 	push count
      00381B 4B 00            [ 1]  188 	push #0 
      00381D 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003820 5C               [ 1]  190 	incw x 
      003821                        191 	_drop 2 
      003821 5B 02            [ 2]    1     addw sp,#2 
      003823 72 5F 00 01      [ 1]  192 	clr in 
      003827 CD 0E EE         [ 4]  193 	call get_token
      00382A A1 84            [ 1]  194 	cp a,#TK_INTGR
      00382C 27 0F            [ 1]  195 	jreq 3$ 
      00382E A1 11            [ 1]  196 	cp a,#TK_MINUS
      003830 CD 0E EE         [ 4]  197 	call get_token 
      003833 A1 84            [ 1]  198 	cp a,#TK_INTGR 
      003835 27 03            [ 1]  199 	jreq 2$
      003837 CC 16 94         [ 2]  200 	jp syntax_error
      00383A                        201 2$:
      00383A CD 02 1D         [ 4]  202 	call neg_acc24  	
      00383D                        203 3$: 
      00383D 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003880                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003880                         30 app_space::
      003880 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003882 00 00                   32 app_size: .word 0 
      003884                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        003694 R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      00368A R
    ADCON_ID=  000002     |   4 ADCREAD    00367E R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 ALLOC      003674 R   |   4 AND        00366C R   |     AND_IDX =  0000FA 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 AR_SIGN    0031F8 R   |   4 ASC        003664 R   |     ASC_IDX =  000006 
    ATMP    =  000001     |     ATTRIB  =  000002     |   4 AUTORUN    003658 R
  4 AUTO_RUN   00015C R   |   4 AWU        003650 R   |   4 AWUHandl   000004 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  000008     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   4 BIT        003648 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000A 
    BLOCKS  =  000005     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |   4 BRES       00363F R
    BRES_IDX=  00000C     |     BS      =  000008     |   4 BSET       003636 R
    BSET_IDX=  00000E     |     BSIZE   =  000006     |   4 BTEST      00362C R
    BTEST_ID=  000010     |   4 BTOGL      003622 R   |     BTOGL_ID=  000012 
    BTW     =  000001     |   4 BYE        00361A R   |     BYE_IDX =  000014 
    C       =  000001     |     CAN     =  000018     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CCOMMA  =  000001 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000003     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   4 CHAIN      003610 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    CHAIN_AD=  000005     |     CHAIN_BP=  000007     |     CHAIN_CN=  000008 
    CHAIN_CO=  00000A     |     CHAIN_IN=  000009     |     CHAIN_LN=  000003 
    CHAIN_TX=  00000B     |     CHAIN_TX=  00000D     |   4 CHAR       003607 R
    CHAR_IDX=  000016     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMD_END =  000002     |     CNT     =  000006 
    CNTR    =  000003     |     CNT_LO  =  000004     |     CODE_ADD=  000001 
    COMMA   =  00002C     |   4 CONST      0035FD R   |     CONST_ID=  0000B6 
    COUNT   =  000003     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   4 CR1        0035F5 R
    CR1_IDX =  00001A     |   4 CR2        0035ED R   |     CR2_IDX =  000018 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000009     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       0035E4 R
    DATA_IDX=  00001C     |     DC1     =  000011     |     DC2     =  000012 
    DC3     =  000013     |     DC4     =  000014     |   4 DDR        0035DC R
    DDR_IDX =  00001E     |     DEBUG   =  000001     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   4 DEC        0035D4 R   |     DEC_IDX =  000020 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  4 DIM        0035CC R   |   4 DIR        0035C4 R   |     DISCARD =  000004 
    DIVISOR =  000001     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         0035BD R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000022 
  4 DREAD      0035B3 R   |     DREAD_ID=  000024     |   4 DROP       0035AA R
  4 DWRITE     00359F R   |     DWRITE_I=  000026     |   4 EDIT       003596 R
    EDIT_IDX=  000028     |   4 EEFREE     00358B R   |     EEFREE_I=  0000B8 
  4 EEPROM     003580 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002A     |     EEPROM_S=  000800     |     EM      =  000019 
  4 END        003578 R   |     END_IDX =  00002C     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   4 ERASE      00356E R
  4 ERASED     00299B R   |     ERASE_ID=  00002E     |     ERR_BAD_=  00000A 
    ERR_BUF_=  00000F     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_D=  00000C     |     ERR_NO_F=  00000E     |     ERR_NO_L=  000005 
    ERR_NO_P=  00000D     |     ERR_NO_P=  000012     |     ERR_OVER=  000010 
    ERR_RD_O=  000011     |     ERR_RUN_=  000006     |     ERR_SYNT=  000002 
    ESC     =  00001B     |     ETB     =  000017     |     ETX     =  000003 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FBREAK  =  000004 
    FCOMP   =  000005     |   4 FCPU       003565 R   |     FCPU_IDX=  000030 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |   4 FLASH_ME   001EBC R   |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLOOP   =  000002     |     FLSI    =  01F400     |   4 FOR        00355D R
    FOR_IDX =  000034     |   4 FREE       003554 R   |     FREE_IDX=  000088 
    FRUN    =  000000     |     FS      =  00001C     |     FSLEEP  =  000003 
    FSTEP   =  000003     |     FTRAP   =  000001     |     F_AND   =  000080 
    F_CFUNC =  000020     |     F_CMD   =  000000     |     F_CONST =  000030 
    F_IFUNC =  000010     |     F_NOT   =  000070     |     F_OR    =  000090 
    F_XOR   =  0000A0     |   4 GET        00354C R   |     GET_IDX =  0000B4 
  4 GOSUB      003542 R   |     GOSUB_ID=  000036     |   4 GOTO       003539 R
    GOTO_IDX=  000038     |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  4 HEX        003531 R   |     HEX_IDX =  00003A     |     HOME    =  000082 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   4 IDR        003529 R   |     IDR_IDX =  00003C 
  4 IF         003522 R   |     IF_IDX  =  00003E     |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   4 INPUT      003518 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000040     |     INPUT_PU=  000001     |     INT24   =  000005 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     INW     =  00000B     |     IPOS    =  000001 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   4 IWDGEN     00350D R
    IWDGEN_I=  000042     |   4 IWDGREF    003501 R   |     IWDGREF_=  000044 
    IWDG_KEY=  000055     |     IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
    KCHAR   =  000002     |   4 KEY        0034F9 R   |     KEY_END =  000083 
    KEY_IDX =  000046     |     KW_TYPE_=  0000F0     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |   4 LET        0034F1 R
    LET_IDX =  000048     |     LF      =  00000A     |     LIMIT   =  000005 
    LINENO  =  000005     |   4 LINK    =  003694 R   |   4 LIST       0034E8 R
    LIST_IDX=  00004A     |     LL      =  000001     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   4 LOG2       0034DF R
    LOG_IDX =  00004C     |     LOOP_CNT=  002710     |   4 LSHIFT     0034D4 R
    LSHIFT_I=  00004E     |     MAJOR   =  000002     |     MASK    =  000002 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |     MULOP   =  000001 
    N1      =  000005     |     NAFR    =  004804     |     NAK     =  000015 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Symbol Table

    NAMEPTR =  000001     |     NAME_MAX=  00000F     |     NCLKOPT =  004808 
    NEG     =  000001     |   4 NEW        0034CC R   |     NEW_IDX =  000052 
  4 NEXT       0034C3 R   |     NEXT_IDX=  000050     |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NLEN    =  000001     |     NLEN_MAS=  00000F 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   4 NOT        0034BB R
    NOT_IDX =  0000F8     |     NOT_OP  =  000001     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R
  4 ODR        0034B3 R   |     ODR_IDX =  000054     |   4 ON         0034AC R
    ONOFF   =  000003     |     ON_IDX  =  0000B2     |     OP      =  000002 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   4 OR         0034A5 R   |     OR_IDX  =  0000FC 
    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVRWR   =  000004 
    PA      =  000000     |   4 PAD        00349D R   |     PAD_IDX =  000056 
    PAD_SIZE=  000080     |   4 PAUSE      003493 R   |     PAUSE_ID=  000058 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   4 PEEK       00348A R   |     PEEK_IDX=  00005C 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PG_SIZE =  000001 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   4 PICK       003481 R
    PINNO   =  000001     |   4 PINP       003478 R   |     PINP_IDX=  00005E 
    PINVAL  =  000002     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   4 PMODE      00346E R   |     PMODE_ID=  00005A 
    PNAME   =  000003     |   4 POKE       003465 R   |     POKE_IDX=  000060 
  4 POP        00345D R   |   4 PORTA      003440 R   |   4 PORTB      003436 R
  4 PORTC      00342C R   |   4 PORTD      003422 R   |   4 PORTE      003418 R
  4 PORTF      00340E R   |   4 PORTG      003404 R   |   4 PORTI      0033FA R
  4 POUT       003454 R   |     POUT_IDX=  000062     |     PREV    =  000001 
    PRG_SIZE=  000003     |   4 PRINT      00344A R   |     PROD    =  000001 
    PROD_SIG=  000004     |   4 PROG_ADD   001E92 R   |   4 PROG_SIZ   001EA4 R
    PRTA_IDX=  000066     |     PRTB_IDX=  000068     |     PRTC_IDX=  00006A 
    PRTD_IDX=  00006C     |     PRTE_IDX=  00006E     |     PRTF_IDX=  000070 
    PRTG_IDX=  000072     |     PRTI_IDX=  000074     |     PRT_IDX =  000064 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 246.
Hexadecimal [24-Bits]

Symbol Table

    PSIZE   =  00000B     |     PSTR    =  000003     |   4 PUSH       0033F1 R
  4 PUT        0033E9 R   |   4 QKEY       0033E0 R   |     QKEY_IDX=  000076 
    QSIGN   =  000005     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
  4 RAM_MEM    001ECD R   |     RAM_SIZE=  001800     |     RBT_IDX =  00007A 
  4 READ       0033D7 R   |     READ_IDX=  000078     |   4 REBOOT     0033CC R
    RECLEN  =  000005     |     REC_LEN =  000003     |     REC_XTRA=  000005 
  4 REG_A      0004DA R   |   4 REG_CC     0004DE R   |   4 REG_PC     0004CE R
  4 REG_SP     0004E3 R   |   4 REG_X      0004D6 R   |   4 REG_Y      0004D2 R
    RELOP   =  000001     |   4 REM        0033C4 R   |     REM_IDX =  00007C 
  4 RESTORE    0033B8 R   |     REST_IDX=  00007E     |     RETL1   =  000001 
  4 RETURN     0033AD R   |     RET_ADDR=  000001     |     RET_BPTR=  000003 
    RET_IDX =  000080     |     RET_INW =  000005     |   4 RND        0033A5 R
    RND_IDX =  000082     |     RONLY   =  000005     |     ROP     =  004800 
    RS      =  00001E     |   4 RSHIFT     00339A R   |     RSHIFT_I=  000084 
    RSIGN   =  000006     |     RST_SR  =  0050B3     |   4 RUN        003392 R
    RUN_IDX =  000086     |     RXCHAR  =  000001     |     RX_QUEUE=  000008 
    R_A     =  000001     |     R_CC    =  000009     |     R_PC    =  00000A 
    R_X     =  000002     |     R_Y     =  000004     |   4 SAVE       003389 R
    SAVE_IDX=  000032     |     SAV_ACC1=  000006     |     SAV_ACC2=  000008 
    SAV_COUN=  00000A     |     SAV_IN  =  000009     |     SEPARATE=  000000 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
    SI      =  00000F     |     SIGN    =  000001     |   4 SIGNATUR   002999 R
  4 SIZE       003380 R   |     SIZE_IDX=  0000B0     |     SKIP    =  000005 
  4 SLEEP      003376 R   |     SLEEP_ID=  00008A     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   4 SPIEN      00336C R
    SPIEN_ID=  00008E     |   4 SPIRD      003362 R   |     SPIRD_ID=  00008C 
  4 SPISEL     003357 R   |     SPISEL_I=  000090     |   4 SPIWR      00334D R
    SPIWR_ID=  000092     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  00008C 
  4 STATES     000491 R   |   4 STEP       003344 R   |     STEP_IDX=  000094 
  4 STOP       00333B R   |     STOP_IDX=  000096     |     STR     =  000003 
  4 STR_BYTE   001EB5 R   |     STX     =  000002     |     SUB     =  00001A 
    SUP     =  000084     |     SWIM_CSR=  007F80     |     SYN     =  000016 
  4 SysCall    000012 R   |     T       =  000001     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  4 TICKS      003331 R   |     TICKS_ID=  000098     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 247.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 248.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  4 TIMEOUT    003325 R   |   4 TIMER      00331B R   |     TIMER_ID=  00009A 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_AND  =  000088 
    TK_ARRAY=  000005     |     TK_CFUNC=  000082     |     TK_CHAR =  000004 
    TK_CMD  =  000080     |     TK_COLON=  00000A     |     TK_COMMA=  000008 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_FLOAT=  000086     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LABEL=  000003     |     TK_LE   =  000036 
    TK_LPARE=  000006     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_NOT  =  000087     |     TK_OR   =  000089 
    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000007 
    TK_SHARP=  000009     |     TK_VAR  =  000085     |     TK_XOR  =  00008A 
    TMROUT_I=  00009C     |   4 TO         003314 R   |   4 TONE       00330B R
    TONE_IDX=  0000A0     |     TOWRITE =  000005     |     TO_IDX  =  00009E 
  4 Timer4Up   000013 R   |     U8      =  000001     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART2   =  000001     |     UART3   =  000002     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 249.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   4 UBOUND     003300 R
    UBOUND_I=  0000A2     |   4 UBTN_Han   00005A R   |   4 UFLASH     0032F5 R
    UFLASH_I=  0000A4     |   4 UNTIL      0032EB R   |     UNTIL_ID=  0000A6 
    US      =  00001F     |   4 USER_ABO   000062 R   |   4 USR        0032E3 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    USR_IDX =  0000A8     |   4 Uart1RxH   00087C R   |   4 UserButt   000036 R
    VAL1    =  02FFFF     |     VAL2    =  00002A     |     VAL3    =  000003 
    VAL4    =  0005FF     |     VAL5    =  FFFFFFFD     |     VAR_NAME=  000001 
    VSIZE   =  000008     |     VT      =  00000B     |   4 WAIT       0032DA R
    WAIT_IDX=  0000AA     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
    WLKPTR  =  000001     |   4 WORDS      0032D0 R   |     WORDS_ID=  0000AC 
  4 WRITE      0032C6 R   |     WRITE_ID=  0000AE     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XFIRST  =  000001     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   4 XOR        0032BE R
    XOR_IDX =  0000FE     |     XSAVE   =  000002     |     XSTACK_E=  001773 
    XSTACK_S=  000014     |     XTEMP   =  000001     |     YSAVE   =  000007 
    YTEMP   =  000005     |   4 abs        002BE1 R   |   4 abs24      0001F3 R
  5 acc16      00000D GR  |   5 acc24      00000C GR  |   5 acc32      00000B GR
  5 acc8       00000E GR  |   4 accept_c   000BC7 R   |   4 add24      00017E R
  4 add_char   00133E R   |   4 add_spac   001136 R   |   4 analog_r   002699 R
  4 and_cond   001BCC R   |   4 and_fact   001B9C R   |   4 app        003884 R
  4 app_sign   003880 R   |   4 app_size   003882 R   |   4 app_spac   003880 GR
  4 arduino_   002CCE R   |   4 arg_list   0019C3 R   |   5 array_si   000020 R
  4 ascii      002A8C R   |   4 at_tst     000FA8 R   |   4 atoi24     0018E5 GR
  4 atoi_exi   001954 R   |   4 awu        002B88 R   |   4 awu02      002B9B R
  4 bad_port   002B07 R   |   5 base       00000A GR  |   5 basicptr   000004 GR
  4 beep       002610 R   |   4 beep_1kh   0025E3 GR  |   4 bin_exit   000E0F R
  4 bit_rese   002182 R   |   4 bit_set    002160 R   |   4 bit_test   0021C7 R
  4 bit_togg   0021A5 R   |   4 bitmask    002E85 R   |   4 bkslsh_t   000F55 R
  4 bksp       000966 R   |   2 block_bu   0016B8 GR  |   4 block_er   000765 R
  4 break_po   002785 R   |   4 bye        002B54 R   |   5 chain_le   000034 R
  4 clear_au   0008B3 R   |   4 clear_ba   0014AA R   |   4 clear_bl   00289C R
  4 clear_va   001402 R   |   4 clock_in   00007D R   |   4 cmd_auto   0031A4 R
  4 cmd_chai   003234 R   |   4 cmd_cons   001DA1 R   |   4 cmd_dim    001DB5 R
  4 cmd_dim1   001DBF R   |   4 cmd_dim2   001DC5 R   |   4 cmd_dir    0029C0 R
  4 cmd_edit   001F73 R   |   4 cmd_end    00258A R   |   4 cmd_eras   002802 R
  4 cmd_get    0025B6 R   |   4 cmd_itf    0004FE R   |   4 cmd_line   001723 R
  4 cmd_name   00135E R   |   4 cmd_on     0023FC R   |   4 cmd_run    0024FA R
  4 cmd_save   0028FE R   |   4 cmd_size   001CA5 R   |   4 cold_sta   0000B5 R
  4 colon_ts   000F7C R   |   4 comma_ts   000F87 R   |   4 comp_msg   001673 R
  4 compile    0010A2 GR  |   4 conditio   001C1E R   |   4 const_cr   002F28 R
  4 const_cr   002F2D R   |   4 const_dd   002F23 R   |   4 const_ee   002F3C R
  4 const_id   002F1E R   |   4 const_in   002F37 R   |   4 const_od   002F19 R
  4 const_ou   002F32 R   |   4 const_po   002EF1 R   |   4 const_po   002EF6 R
  4 const_po   002EFB R   |   4 const_po   002F00 R   |   4 const_po   002F05 R
  4 const_po   002F0A R   |   4 const_po   002F0F R   |   4 const_po   002F14 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 250.
Hexadecimal [24-Bits]

Symbol Table

  4 convert_   000D7B R   |   4 convert_   00092A R   |   4 copy_com   000FDD R
  5 count      000002 GR  |   4 cp24       0001B8 R   |   4 cp24_ax    0001EA R
  4 cp_loop    001974 R   |   4 cpl24      0001FA R   |   4 cpy_cmd_   00111E R
  4 cpy_quot   00115E R   |   4 cs_high    0030BE R   |   4 dash_tst   000F9D R
  4 data       002F41 R   |   4 data_err   002FBA R   |   5 data_len   000009 R
  5 data_ofs   000008 R   |   5 data_ptr   000006 R   |   4 dec_base   001C97 R
  4 decomp_l   0011F6 R   |   4 decompil   0011AE GR  |   4 del_line   000C70 R
  4 delete_l   000A53 R   |   4 delete_n   000976 R   |   4 delete_u   000A18 R
  4 digital_   0026D5 R   |   4 digital_   00270C R   |   4 div24      000307 R
  4 divu24_8   0002E9 R   |   4 do_loop    002EAB R   |   4 do_progr   000758 R
  4 dup24      00016F R   |   5 dvar_bgn   000030 GR  |   5 dvar_end   000032 GR
  4 enable_i   002E15 R   |   4 end_at_l   001F2D R   |   4 eql_tst    001028 R
  4 equal      001351 R   |   4 eras0      00280C R   |   4 erase_ex   000789 R
  4 erase_fl   00077F R   |   4 erase_he   0028E4 R   |   4 erase_pr   0027AD R
  4 err_bad_   00159C R   |   4 err_buf_   001612 R   |   4 err_cmd_   001560 R
  4 err_div0   001525 R   |   4 err_dupl   00157A R   |   4 err_math   00150C R
  4 err_mem_   0014F1 R   |   4 err_msg    0014CB R   |   4 err_no_a   0015A8 R
  4 err_no_d   0015DB R   |   4 err_no_f   0015FF R   |   4 err_no_l   001534 R
  4 err_no_p   0015EB R   |   4 err_not_   00158B R   |   4 err_not_   001645 R
  4 err_over   00161F R   |   4 err_read   001629 R   |   4 err_run_   00154A R
  4 err_synt   0014FE R   |   4 escaped    000D90 GR  |   4 expect     0019B1 R
  4 expressi   001B05 R   |   4 factor     001A0D R   |   5 farptr     000018 R
  4 fcpu       002C50 R   |   4 fetchc     000605 R   |   4 fill_wri   00288C R
  4 final_te   000BC0 R   |   5 flags      000022 GR  |   4 for        00225D R
  4 free       001C9C R   |   5 free_eep   000024 R   |   7 free_ram   000090 R
  4 func_arg   0019BE R   |   4 func_cha   002A75 R   |   4 func_eef   001D31 R
  4 ge         001353 R   |   4 get_addr   001823 R   |   4 get_arra   0019DF R
  4 get_char   00183D R   |   4 get_esca   000936 R   |   4 get_int2   00182D R
  4 get_targ   00238A R   |   4 get_targ   002398 R   |   4 get_tick   002BDA R
  4 get_toke   000EEE GR  |   4 get_valu   001D20 R   |   4 getc       00090F GR
  4 gosub      0024A8 R   |   4 gosub_1    0024B3 R   |   4 gosub_2    0024B9 R
  4 goto       00248E R   |   4 goto_1     002498 R   |   4 gpio       002ADC R
  4 gt         00134F R   |   4 gt_tst     001033 R   |   4 hex_base   001C92 R
  4 hex_dump   000645 R   |   4 if         002240 R   |   5 in         000001 GR
  5 in.saved   000003 GR  |   5 in.w       000000 GR  |   4 incr_far   000860 R
  4 input_ex   002118 R   |   4 input_lo   002082 R   |   4 input_va   00207E R
  4 insert_c   0009D5 R   |   4 insert_l   000CDC R   |   4 interp_l   001767 R
  4 interpre   00173F R   |   4 invalid    00056D R   |   4 invalid_   0005DB R
  4 is_alnum   000E42 GR  |   4 is_alpha   000E28 GR  |   4 is_data_   002F47 R
  4 is_digit   000E39 GR  |   4 is_erase   00299D R   |   4 is_minus   001F02 R
  4 is_progr   0024E9 R   |   4 is_symbo   000E4B R   |   4 itoa       001880 GR
  4 itoa_loo   0018A2 R   |   4 jp_to_ta   00249B R   |   4 key        002ACB R
  4 kword_di   003692 GR  |   4 kword_en   0032BC R   |   4 le         001358 R
  4 ledoff     0003CD R   |   4 ledon      0003C8 R   |   4 ledtoggl   0003D2 R
  4 left_par   0003DB R   |   4 let        001CDD GR  |   4 let_arra   001CEB R
  4 let_dvar   0017A0 R   |   4 let_eval   001CF3 R   |   4 let_var    001CF0 R
  4 lines_sk   001F12 R   |   4 list       001EDC R   |   4 list_exi   001F62 R
  4 list_loo   001F40 R   |   4 log2       002E58 R   |   4 look_tar   0023BB R
  4 loop_bac   00236D R   |   5 loop_dep   00001F R   |   4 loop_don   002382 R
  4 lshift     002BF8 R   |   4 lt         001356 R   |   4 lt_tst     00105C R
  4 mem_peek   000589 R   |   4 mod24      0003A1 R   |   4 move       0013BE GR
  4 move_dow   0013DD R   |   4 move_era   0006E7 R   |   4 move_exi   0013FE R
  4 move_lef   0009AD R   |   4 move_loo   0013E2 R   |   4 move_prg   000727 R
  4 move_rig   0009BB R   |   4 move_up    0013CF R   |   4 mul24      000279 R
  4 mul_char   001340 R   |   4 mulu24_8   00023A R   |   4 nbr_tst    000F21 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 251.
Hexadecimal [24-Bits]

Symbol Table

  4 ne         00135B R   |   4 neg24      000203 R   |   4 neg_acc2   00021D R
  4 neg_ax     000215 R   |   4 new        0027A3 R   |   4 next       002315 R
  4 next_lin   001747 R   |   4 next_tok   0017FB GR  |   4 no_match   001986 R
  4 number     00060B R   |   4 open_gap   000CA5 R   |   4 other      001085 R
  4 overwrit   000BEC R   |   2 pad        0016B8 GR  |   4 pad_ref    0030C3 R
  4 parse_ad   0004E8 R   |   4 parse_bi   000DED R   |   4 parse_in   000D98 R
  4 parse_ke   000E6E R   |   4 parse_qu   000D43 R   |   4 parse_sy   000E56 R
  4 pause      002B68 R   |   4 pause02    002B7B R   |   4 peek       00221F R
  4 peek_byt   0005A5 R   |   4 pin_mode   002C5F R   |   4 plus_tst   000FFC R
  4 poke       0021FE R   |   4 power_ad   002649 R   |   4 prcnt_ts   00101D R
  4 print      001FD5 R   |   4 print_fa   0005EA R   |   4 print_he   000C23 GR
  4 print_re   000427 R   |   4 print_st   00057D R   |   4 print_to   001868 R
  4 prog_siz   001E4B R   |   4 program_   001E53 R   |   4 program_   000701 R
  4 program_   000727 R   |   4 prt_acc2   00185A R   |   4 prt_basi   001FB1 R
  4 prt_i16    001843 R   |   4 prt_loop   001FD9 R   |   4 prt_peek   0003AA GR
  4 prt_reg1   000408 R   |   4 prt_reg8   0003E6 R   |   5 ptr16      000019 GR
  5 ptr8       00001A R   |   4 putc       0008FF GR  |   4 puts       00095C GR
  4 qgetc      000908 GR  |   4 qkey       002ACF GR  |   4 qmark_ts   000FB3 R
  4 qsign      002881 R   |   4 random     002CEE R   |   4 read       002FBF R
  4 read01     002FC4 R   |   4 read_int   003809 R   |   4 readln     000A61 GR
  4 readln_l   000A70 R   |   4 readln_q   000C09 R   |   4 refresh_   002E53 R
  4 relation   001B3D R   |   4 relop_st   001343 R   |   4 remark     00211D GR
  4 repl       000527 R   |   4 repl_exi   00054F R   |   4 reset_co   001FD7 R
  4 rest_con   00206E R   |   4 restore    002F55 R   |   4 return     0024CC R
  4 right_al   00114C GR  |   4 row_alig   000845 R   |   4 row_eras   0006BA R
  4 row_eras   0006E7 R   |   4 row_loop   000628 R   |   4 rparnt_t   000F71 R
  4 rshift     002C24 R   |   7 rsign      00008C R   |   7 rsize      00008E R
  4 rt_msg     001661 R   |   4 run_app    00012A R   |   4 run_it     002557 R
  4 run_it_0   002559 R   |   5 rx1_head   00002E R   |   5 rx1_queu   000026 R
  5 rx1_tail   00002F R   |   4 save_con   00205E R   |   4 scan_blo   00086E R
  4 search_d   001966 GR  |   4 search_e   0019AE R   |   4 search_f   0028B0 R
  4 search_l   000C45 GR  |   4 search_l   000C54 R   |   4 search_n   001D5A R
  4 search_n   00196A R   |   4 search_p   0031FA R   |   5 seedx      000014 R
  5 seedy      000016 R   |   4 select_p   002CBE R   |   4 send_esc   000984 R
  4 send_par   00098F R   |   4 set_data   002F8B R   |   4 set_time   002DF3 R
  4 sharp_ts   000F92 R   |   4 show_row   000616 R   |   4 single_c   001339 R
  4 skip       000EDB R   |   4 skip_str   001814 R   |   4 skip_to_   0029A8 R
  4 slash_ts   001012 R   |   4 sleep      002B5D R   |   4 software   001411 R
  4 spaces     0009C9 GR  |   4 spi_clea   003058 R   |   4 spi_disa   003040 R
  4 spi_enab   00300D R   |   4 spi_rcv_   00307A R   |   4 spi_read   0030A5 R
  4 spi_sele   0030AC R   |   4 spi_send   003064 R   |   4 spi_writ   003085 R
  2 stack_fu   001774 GR  |   2 stack_un   001800 R   |   4 star_tst   001007 R
  4 start_fr   001F0D R   |   4 step       0022D3 R   |   4 stop       002757 R
  4 store_lo   002302 R   |   4 str_matc   001993 R   |   4 str_tst    000F11 R
  4 strcmp     00139D R   |   4 strcpy     0013AE GR  |   4 strlen     001392 GR
  4 sub24      00019B R   |   4 symb_loo   000E57 R   |   4 syntax_e   001694 GR
  4 system_i   001457 R   |   5 tab_widt   000023 GR  |   4 tb_error   001696 GR
  4 term       001AC2 R   |   4 term01     001ACA R   |   4 term_exi   001B02 R
  4 test       00369A R   |   4 test_p     000575 R   |   2 tib        001668 GR
  4 tick_tst   000FCB R   |   5 ticks      00000F R   |   4 timeout    002E0A R
  5 timer      000012 GR  |   4 timer2_i   000093 R   |   4 timer4_i   0000A0 R
  4 tk_id      001684 R   |   4 to         00228D R   |   4 to_eepro   000750 R
  4 to_flash   000755 R   |   4 to_hex_c   000C3A GR  |   4 to_upper   0018D9 GR
  4 token_ch   00109B R   |   4 token_ex   00109F R   |   4 tone       0025EE R
  4 try_next   002F98 R   |   5 txtbgn     00001B GR  |   5 txtend     00001D GR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 252.
Hexadecimal [24-Bits]

Symbol Table

  4 uart1_ge   00090F GR  |   4 uart1_in   0008BA R   |   4 uart1_pu   0008FF GR
  4 uart1_qg   000908 GR  |   4 uart1_se   0008CA R   |   4 ubound     001CD2 R
  4 uflash     002B0C R   |   4 unlock_e   000684 R   |   4 unlock_f   00069F R
  4 until      002EBE R   |   4 user_int   000049 R   |   4 usr        002B2E R
  4 var_name   0011A4 GR  |   5 vars       000035 GR  |   4 wait       002123 R
  4 warm_ini   001488 R   |   4 warm_sta   001720 R   |   4 words      002D89 R
  4 words_co   002DDD R   |   4 write      002A0C R   |   4 write_bl   00080A GR
  4 write_bu   000741 R   |   4 write_by   00078B R   |   4 write_ee   0007C7 R
  4 write_ex   000800 R   |   4 write_fl   0007B1 R   |   4 write_nb   00082F R
  4 xalloc     0030D6 R   |   4 xdrop      00310C R   |   4 xpick      00318A R
  4 xpop       0030CC R   |   4 xpush      0030C8 R   |   4 xput       003157 R
  4 xstack_b   003139 R   |   2 xstack_f   001738 GR  |   2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 253.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3884   flags    0
   5 DATA       size     83   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

